<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATAssemblyInterfaces Interface CATIAsmCstSetFeature</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../CATAssemblyInterfaces.htm">This Framework</a>  <a href="interface_CATIAsmCstSetFeatFactory_115690.htm">Previous</a>  <a href="interface_CATIAsmGeneralSettingAtt_116482.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>CATAssemblyInterfaces Interface CATIAsmCstSetFeature</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIAsmCstSetFeature
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIAsmCstSetFeature</b>
</p>
<p>
<b><i> Interface to manage the set of constraints.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetFatherSet(CATIAsmCstSetFeature_var&amp;)"><b>GetFatherSet</b></a>(CATIAsmCstSetFeature_var&amp;)
<dd>  Give the father set.
 <dt> o 
    <a href="#ListCstChildren(CATLISTV(CATBaseUnknown_var)&amp;)"><b>ListCstChildren</b></a>(CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Give the list of constraints included in the set
 <br>by default the root set hold all the constraints.
 <dt> o 
    <a href="#ListSetChildren(CATListValCATISpecObject_var&amp;)"><b>ListSetChildren</b></a>(CATListValCATISpecObject_var&amp;)
<dd>  Give the list of set child.
 <dt> o 
    <a href="#MoveConstraintsFrom(CATListValCATISpecObject_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATBaseUnknown_var&amp;)"><b>MoveConstraintsFrom</b></a>(CATListValCATISpecObject_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATBaseUnknown_var&amp;)
<dd>  Move a list of constraints on this set from this set or another one.
 <dt> o 
    <a href="#MoveSetFrom(CATIAsmCstSetFeature_var&amp;,CATIAsmCstSetFeature_var&amp;,CATISpecObject_var&amp;)"><b>MoveSetFrom</b></a>(CATIAsmCstSetFeature_var&amp;,CATIAsmCstSetFeature_var&amp;,CATISpecObject_var&amp;)
<dd>  Move a set on this set from this set or another one.
 <dt> o 
    <a href="#RemoveSetChild(CATIAsmCstSetFeature_var&amp;)"><b>RemoveSetChild</b></a>(CATIAsmCstSetFeature_var&amp;)
<dd>  Remove a set child.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetFatherSet"></a><a name="GetFatherSet(CATIAsmCstSetFeature_var&amp;)"></a> <dt> o <b>GetFatherSet</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetFatherSet</b>(<td>CATIAsmCstSetFeature_var&amp; <td><tt>oFatherSet</tt>) const =0  </table></dt>
<dl>
  <dd>
 Give the father set.
 <br>for the root set, the method return NULL_var (no father set)
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFatherSet</tt>
   <dd>      the returned father set.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="ListCstChildren"></a><a name="ListCstChildren(CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>ListCstChildren</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>ListCstChildren</b>(<td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oCstChildrenList</tt>) const=0  </table></dt>
<dl>
  <dd>
 Give the list of constraints included in the set
 <br>by default the root set hold all the constraints.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCstChildrenList</tt>
   <dd>      list of the included constraints.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="ListSetChildren"></a><a name="ListSetChildren(CATListValCATISpecObject_var&amp;)"></a> <dt> o <b>ListSetChildren</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>ListSetChildren</b>(<td>CATListValCATISpecObject_var&amp; <td><tt>oSetChildrenList</tt>) const =0  </table></dt>
<dl>
  <dd>
 Give the list of set child.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSetChildrenList</tt>
   <dd>      the returned list of child.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="MoveConstraintsFrom"></a><a name="MoveConstraintsFrom(CATListValCATISpecObject_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATBaseUnknown_var&amp;)"></a> <dt> o <b>MoveConstraintsFrom</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>MoveConstraintsFrom</b>(<td> const CATListValCATISpecObject_var&amp; <td><tt>iListFromSet</tt>,<tr><td></td><td> const <a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>iListCst</tt>,<tr><td></td><td> const <a href="../System/class_CATBaseUnknown_var_67834.htm">CATBaseUnknown_var&amp;</a> <td><tt>iPreviousCst</tt><td><tt>= NULL_var</tt>) = 0  </table></dt>
<dl>
  <dd>
 Move a list of constraints on this set from this set or another one.
 <br>for the root set, the method return NULL_var (no father set)
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListFromSet</tt>
   <dd>      list of origin sets of the moved constraints.
   </dd>
    <dt><tt> iListCst</tt>
   <dd>      list of constraints to move.
   </dd>
    <dt><tt> iPreviousCst</tt>
   <dd>      moved constraints will appear after this previous constraint.
      <br>by default (NULL_var), they appear after all other brother constraints
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="MoveSetFrom"></a><a name="MoveSetFrom(CATIAsmCstSetFeature_var&amp;,CATIAsmCstSetFeature_var&amp;,CATISpecObject_var&amp;)"></a> <dt> o <b>MoveSetFrom</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>MoveSetFrom</b>(<td> const CATIAsmCstSetFeature_var&amp; <td><tt>iFromSet</tt>,<tr><td></td><td> const CATIAsmCstSetFeature_var&amp; <td><tt>iSetToMove</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>iPreviousCst</tt><td><tt>= NULL_var</tt>)=0  </table></dt>
<dl>
  <dd>
 Move a set on this set from this set or another one.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFromSet</tt>
   <dd>      the origin father of the moved set.
   </dd>
    <dt><tt> iSetToMove</tt>
   <dd>      the set to move.
   </dd>
    <dt><tt> iPreviousCst</tt>
   <dd>      the moved set will appear after this previous set.
      <br>by default (NULL_var), the moved set will appear after all other brother set
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="RemoveSetChild"></a><a name="RemoveSetChild(CATIAsmCstSetFeature_var&amp;)"></a> <dt> o <b>RemoveSetChild</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>RemoveSetChild</b>(<td> const CATIAsmCstSetFeature_var&amp; <td><tt>iSetChild</tt>) =0  </table></dt>
<dl>
  <dd>
 Remove a set child.
 <br>All his children set and constraints are affected to the father set
 <br>(To delete the set and all his children, use the method remove on LyfeCycleObject Interface)
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetChild</tt>
   <dd>      the set child to be removed.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIAsmCstSetFeature.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAssemblyInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
