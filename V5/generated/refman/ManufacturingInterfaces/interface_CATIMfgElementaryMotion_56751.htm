<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ManufacturingInterfaces Interface CATIMfgElementaryMotion</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../ManufacturingInterfaces.htm" href="../ManufacturingInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "ManufacturingInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIMfgElementaryMotion"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>ManufacturingInterfaces Interface CATIMfgElementaryMotion</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIMfgElementaryMotion_56751','CATIMfgElementaryMotion','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIMfgElementaryMotion</b>
</p>
<p>
<b><i> Describe the functionality of your interface here
 <p> 
 Using this prefered syntax will enable mkdoc to document your class.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddPPWord(CATString&amp;)"><b>AddPPWord</b></a>(CATString&amp;)
<dd> 	Add a PPWord.
 <dt> o 
    <a href="#GetFeedrateType(CATUnicodeString&amp;)"><b>GetFeedrateType</b></a>(CATUnicodeString&amp;)
<dd> 	Read a feedrateType From an Elementary Motion 
	</dt>
	<li> oFeedrateType (1:Machining Feedrate, 2:Approach Feedrate, 3:Rapid Feedrate, 4:Undefined Feedrate)
	</dl>
 <dt> o 
    <a href="#GetFeedrateValue(double&amp;)"><b>GetFeedrateValue</b></a>(double&amp;)
<dd> 	Read a feedrateValue from an Elementary Motion if  FeedrateType = Undefined Feedrate
	</dt>
	<li> oFeedrateValue
	</dl>
 <dt> o 
    <a href="#GetMacroManagement(CATString&amp;,int&amp;)"><b>GetMacroManagement</b></a>(CATString&amp;,int&amp;)
<dd>  <dt> o 
    <a href="#GetNumberOfPPWord()"><b>GetNumberOfPPWord</b></a>()
<dd> 	Get the number of PPWords.
 <dt> o 
    <a href="#GetPPWord(int&amp;,CATUnicodeString&amp;)"><b>GetPPWord</b></a>(int&amp;,CATUnicodeString&amp;)
<dd> 	Get the index-st PPword.
 <dt> o 
    <a href="#GetSpindleSpeedType(int&amp;)"><b>GetSpindleSpeedType</b></a>(int&amp;)
<dd> 	Read a SpindleSpeedType from an Elementary Motion 
	</dt>
	<li> oSpindleSpeedType (1:Machining Spindle speed, 2: Finishing Spindle speed , 3: Undefined Spindle Speed)
	</dl>
 <dt> o 
    <a href="#GetSpindleSpeedValue(double&amp;)"><b>GetSpindleSpeedValue</b></a>(double&amp;)
<dd> 	Read a SpindleSpeedValue from an Elementary Motion if  SpindleSpeedType = Undefined Spindle Speed
	</dt>
	<li> oSpindleValue
	</dl>
 <dt> o 
    <a href="#IsActive()"><b>IsActive</b></a>()
<dd> 	Get the Active Status of an Elementary Motion 
	</dt>
	<li> ActiveStatus (0:Inactive Elementary Motion/1:Active Elementary Motion)
	</dl>
 <dt> o 
    <a href="#RemovePPWord()"><b>RemovePPWord</b></a>()
<dd> 	Remove all the PPWords.
 <dt> o 
    <a href="#SetActive()"><b>SetActive</b></a>()
<dd> 	Set an Elementary Motion to Active Status 
	</dt>
	<li>
	</dl>
 <dt> o 
    <a href="#SetAngularOrientationValue(double&amp;)"><b>SetAngularOrientationValue</b></a>(double&amp;)
<dd> 	Set AngularOrientationValue of an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#SetAngularSectorValue(double&amp;)"><b>SetAngularSectorValue</b></a>(double&amp;)
<dd> 	Set AngularSectorValue of an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#SetCircleRadiusValue(double&amp;)"><b>SetCircleRadiusValue</b></a>(double&amp;)
<dd> 	Set CircleRadiusValue of an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#SetDistanceValue(double&amp;)"><b>SetDistanceValue</b></a>(double&amp;)
<dd> 	Set the DistanceValue of an Elementary Motion if  ElementaryMotionType = Horizontal or Axial or DeltaLnDist.
 <dt> o 
    <a href="#SetFeedrateType(CATUnicodeString&amp;)"><b>SetFeedrateType</b></a>(CATUnicodeString&amp;)
<dd> 	Assign a feedrateType to an Elementary Motion 
	</dt>
	<li> iFeedrateType (1:Machining Feedrate, 2:Approach Feedrate, 3:Rapid Feedrate, 4:Undefined Feedrate)
	</dl>
 <dt> o 
    <a href="#SetFeedrateValue(double&amp;)"><b>SetFeedrateValue</b></a>(double&amp;)
<dd> 	Assign a feedrateValue to an Elementary Motion if  FeedrateType = Undefined Feedrate
	</dt>
	<li> iFeedrateValue
	</dl>
 <dt> o 
    <a href="#SetGoToAPointMotionMode(int&amp;)"><b>SetGoToAPointMotionMode</b></a>(int&amp;)
<dd> 	Set a mode to a Goto Point Elementary Motion 
	</dt>
	<li> iGoToAPointMotion (1: Direct, 2: Axial/radial, 3: Radial/axial)
	</dl>
 <dt> o 
    <a href="#SetHorizontalAngle(double&amp;)"><b>SetHorizontalAngle</b></a>(double&amp;)
<dd> 	Set an Horizontal Angle of  an Elementary Motion 
	</dt>
	<li> iHorizontalAngle
	</dl>
 <dt> o 
    <a href="#SetHorizontalSafetyDistanceValue(double&amp;)"><b>SetHorizontalSafetyDistanceValue</b></a>(double&amp;)
<dd> 	Set HorizontalSafetyDistanceValue of an Elementary Motion if  ElementaryMotionType = Ramping.
 <dt> o 
    <a href="#SetInactive()"><b>SetInactive</b></a>()
<dd> 	Set an Elementary Motion to Inactive Status 
	</dt>
	<li>
	</dl>
 <dt> o 
    <a href="#SetMacroManagement(CATString&amp;,int&amp;)"><b>SetMacroManagement</b></a>(CATString&amp;,int&amp;)
<dd>  <dt> o 
    <a href="#SetMotionDirectionVector(CATMathVector&amp;)"><b>SetMotionDirectionVector</b></a>(CATMathVector&amp;)
<dd> 	Set DirectionVector of an Elementary Motion if  ElementaryMotionType = DeltaLnDist.
 <dt> o 
    <a href="#SetMotionPlane(CATBaseUnknown_var&amp;)"><b>SetMotionPlane</b></a>(CATBaseUnknown_var&amp;)
<dd> 	Set Plane  of an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 <dt> o 
    <a href="#SetMotionPoint(CATBaseUnknown_var&amp;)"><b>SetMotionPoint</b></a>(CATBaseUnknown_var&amp;)
<dd> 	Set Point  of an Elementary Motion if  ElementaryMotionType = GoToAPpoint.
 <dt> o 
    <a href="#SetMotionToPlaneMode(int&amp;)"><b>SetMotionToPlaneMode</b></a>(int&amp;)
<dd> 	Set the way to move to the Plane  of an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 <dt> o 
    <a href="#SetMotionToolAxis(CATMathVector&amp;)"><b>SetMotionToolAxis</b></a>(CATMathVector&amp;)
<dd> 	Set DirectionVector  of an Elementary Motion if  ElementaryMotionType = ToolAxis.
 <dt> o 
    <a href="#SetRampingAngleValue(double&amp;)"><b>SetRampingAngleValue</b></a>(double&amp;)
<dd> 	Set RampingAngleValue of an Elementary Motion if  ElementaryMotionType = Ramping.
 <dt> o 
    <a href="#SetSpindleSpeedType(int&amp;)"><b>SetSpindleSpeedType</b></a>(int&amp;)
<dd> 	Assign a SpindleSpeedType to an Elementary Motion 
	</dt>
	<li> iSpindleSpeedType (1:Machining Spindle speed, 2: Finishing Spindle speed , 3: Undefined Spindle Speed)
	</dl>
 <dt> o 
    <a href="#SetSpindleSpeedValue(double&amp;)"><b>SetSpindleSpeedValue</b></a>(double&amp;)
<dd> 	Assign a SpindleSpeedValue to an Elementary Motion if  SpindleSpeedType = Undefined Spindle Speed
	</dt>
	<li> iSpindleValue
	</dl>
 <dt> o 
    <a href="#SetVerticalAngleValue(double&amp;)"><b>SetVerticalAngleValue</b></a>(double&amp;)
<dd> 	Set the VerticalAngleValue of an Elementary Motion if  ElementaryMotionType = Horizontal.
 <dt> o 
    <a href="#SetVerticalSafetyDistanceValue(double&amp;)"><b>SetVerticalSafetyDistanceValue</b></a>(double&amp;)
<dd> 	Set VerticalSafetyDistanceValue of an Elementary Motion if  ElementaryMotionType = Ramping.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddPPWord"></a><a name="AddPPWord(CATString&amp;)"></a> <dt> o <b>AddPPWord</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddPPWord</b>(<td><script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCommandName</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Add a PPWord.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandName</tt>
   <dd> the word to add.</dd>
</dl>
</dl>
</dl>
<a name="GetFeedrateType"></a><a name="GetFeedrateType(CATUnicodeString&amp;)"></a> <dt> o <b>GetFeedrateType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFeedrateType</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oFeedrateType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a feedrateType From an Elementary Motion 
	</dt>
	<li> oFeedrateType (1:Machining Feedrate, 2:Approach Feedrate, 3:Rapid Feedrate, 4:Undefined Feedrate)
	</dl>
</dl>
<a name="GetFeedrateValue"></a><a name="GetFeedrateValue(double&amp;)"></a> <dt> o <b>GetFeedrateValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFeedrateValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oFeedrateValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a feedrateValue from an Elementary Motion if  FeedrateType = Undefined Feedrate
	</dt>
	<li> oFeedrateValue
	</dl>
</dl>
<a name="GetMacroManagement"></a><a name="GetMacroManagement(CATString&amp;,int&amp;)"></a> <dt> o <b>GetMacroManagement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMacroManagement</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iActionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="GetNumberOfPPWord"></a><a name="GetNumberOfPPWord()"></a> <dt> o <b>GetNumberOfPPWord</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNumberOfPPWord</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Get the number of PPWords..
</dl>
<a name="GetPPWord"></a><a name="GetPPWord(int&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetPPWord</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPPWord</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>index</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oPPWord</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Get the index-st PPword.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd> index of the wanted PPWord </dd>
    <dt><tt> oPPWord</tt>
   <dd> Corresponding PPWord found</dd>
</dl>
</dl>
</dl>
<a name="GetSpindleSpeedType"></a><a name="GetSpindleSpeedType(int&amp;)"></a> <dt> o <b>GetSpindleSpeedType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSpindleSpeedType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oSpindleSpeedType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a SpindleSpeedType from an Elementary Motion 
	</dt>
	<li> oSpindleSpeedType (1:Machining Spindle speed, 2: Finishing Spindle speed , 3: Undefined Spindle Speed)
	</dl>
</dl>
<a name="GetSpindleSpeedValue"></a><a name="GetSpindleSpeedValue(double&amp;)"></a> <dt> o <b>GetSpindleSpeedValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSpindleSpeedValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oSpindleSpeedValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a SpindleSpeedValue from an Elementary Motion if  SpindleSpeedType = Undefined Spindle Speed
	</dt>
	<li> oSpindleValue
	</dl>
</dl>
<a name="IsActive"></a><a name="IsActive()"></a> <dt> o <b>IsActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsActive</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
	Get the Active Status of an Elementary Motion 
	</dt>
	<li> ActiveStatus (0:Inactive Elementary Motion/1:Active Elementary Motion)
	</dl>
</dl>
<a name="RemovePPWord"></a><a name="RemovePPWord()"></a> <dt> o <b>RemovePPWord</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemovePPWord</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Remove all the PPWords.
</dl>
<a name="SetActive"></a><a name="SetActive()"></a> <dt> o <b>SetActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetActive</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set an Elementary Motion to Active Status 
	</dt>
	<li>
	</dl>
</dl>
<a name="SetAngularOrientationValue"></a><a name="SetAngularOrientationValue(double&amp;)"></a> <dt> o <b>SetAngularOrientationValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAngularOrientationValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iAngularOrientationValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set AngularOrientationValue of an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAngularOrientationValue</tt>
   <dd> The angular orientation value</dd>
</dl>
</dl>
</dl>
<a name="SetAngularSectorValue"></a><a name="SetAngularSectorValue(double&amp;)"></a> <dt> o <b>SetAngularSectorValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAngularSectorValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iAngularSectorValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set AngularSectorValue of an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAngularSectorValue</tt>
   <dd> The angular sector value</dd>
</dl>
</dl>
</dl>
<a name="SetCircleRadiusValue"></a><a name="SetCircleRadiusValue(double&amp;)"></a> <dt> o <b>SetCircleRadiusValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCircleRadiusValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iCircleRadiusValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set CircleRadiusValue of an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCircleRadiusValue</tt>
   <dd> The circle radius value</dd>
</dl>
</dl>
</dl>
<a name="SetDistanceValue"></a><a name="SetDistanceValue(double&amp;)"></a> <dt> o <b>SetDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set the DistanceValue of an Elementary Motion if  ElementaryMotionType = Horizontal or Axial or DeltaLnDist.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDistanceValue</tt>
   <dd> The distance value</dd>
</dl>
</dl>
</dl>
<a name="SetFeedrateType"></a><a name="SetFeedrateType(CATUnicodeString&amp;)"></a> <dt> o <b>SetFeedrateType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFeedrateType</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFeedrateType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Assign a feedrateType to an Elementary Motion 
	</dt>
	<li> iFeedrateType (1:Machining Feedrate, 2:Approach Feedrate, 3:Rapid Feedrate, 4:Undefined Feedrate)
	</dl>
</dl>
<a name="SetFeedrateValue"></a><a name="SetFeedrateValue(double&amp;)"></a> <dt> o <b>SetFeedrateValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFeedrateValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iFeedrateValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Assign a feedrateValue to an Elementary Motion if  FeedrateType = Undefined Feedrate
	</dt>
	<li> iFeedrateValue
	</dl>
</dl>
<a name="SetGoToAPointMotionMode"></a><a name="SetGoToAPointMotionMode(int&amp;)"></a> <dt> o <b>SetGoToAPointMotionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetGoToAPointMotionMode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iGoToAPointMotionMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set a mode to a Goto Point Elementary Motion 
	</dt>
	<li> iGoToAPointMotion (1: Direct, 2: Axial/radial, 3: Radial/axial)
	</dl>
</dl>
<a name="SetHorizontalAngle"></a><a name="SetHorizontalAngle(double&amp;)"></a> <dt> o <b>SetHorizontalAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetHorizontalAngle</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iHorizontalAngle</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set an Horizontal Angle of  an Elementary Motion 
	</dt>
	<li> iHorizontalAngle
	</dl>
</dl>
<a name="SetHorizontalSafetyDistanceValue"></a><a name="SetHorizontalSafetyDistanceValue(double&amp;)"></a> <dt> o <b>SetHorizontalSafetyDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetHorizontalSafetyDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iHorizontalDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set HorizontalSafetyDistanceValue of an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHorizontalDistanceValue</tt>
   <dd> The horizontal distance value</dd>
</dl>
</dl>
</dl>
<a name="SetInactive"></a><a name="SetInactive()"></a> <dt> o <b>SetInactive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetInactive</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set an Elementary Motion to Inactive Status 
	</dt>
	<li>
	</dl>
</dl>
<a name="SetMacroManagement"></a><a name="SetMacroManagement(CATString&amp;,int&amp;)"></a> <dt> o <b>SetMacroManagement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMacroManagement</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iActionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iStatus</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="SetMotionDirectionVector"></a><a name="SetMotionDirectionVector(CATMathVector&amp;)"></a> <dt> o <b>SetMotionDirectionVector</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMotionDirectionVector</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iVector</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set DirectionVector of an Elementary Motion if  ElementaryMotionType = DeltaLnDist.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVector</tt>
   <dd> The direction vector</dd>
</dl>
</dl>
</dl>
<a name="SetMotionPlane"></a><a name="SetMotionPlane(CATBaseUnknown_var&amp;)"></a> <dt> o <b>SetMotionPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMotionPlane</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iPlane</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set Plane  of an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPlane</tt>
   <dd> The plane</dd>
</dl>
</dl>
</dl>
<a name="SetMotionPoint"></a><a name="SetMotionPoint(CATBaseUnknown_var&amp;)"></a> <dt> o <b>SetMotionPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMotionPoint</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set Point  of an Elementary Motion if  ElementaryMotionType = GoToAPpoint.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The point</dd>
</dl>
</dl>
</dl>
<a name="SetMotionToPlaneMode"></a><a name="SetMotionToPlaneMode(int&amp;)"></a> <dt> o <b>SetMotionToPlaneMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMotionToPlaneMode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set the way to move to the Plane  of an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>	<ul>
	<li>  0:perpendicular to the plane move </li>
  <li>  1: axial move </li>
	</ul></dd>
</dl>
</dl>
</dl>
<a name="SetMotionToolAxis"></a><a name="SetMotionToolAxis(CATMathVector&amp;)"></a> <dt> o <b>SetMotionToolAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMotionToolAxis</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iVector</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set DirectionVector  of an Elementary Motion if  ElementaryMotionType = ToolAxis.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVector</tt>
   <dd> The direction vector</dd>
</dl>
</dl>
</dl>
<a name="SetRampingAngleValue"></a><a name="SetRampingAngleValue(double&amp;)"></a> <dt> o <b>SetRampingAngleValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetRampingAngleValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iRampingAngleValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set RampingAngleValue of an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRampingAngleValue</tt>
   <dd> The ramping angle value</dd>
</dl>
</dl>
</dl>
<a name="SetSpindleSpeedType"></a><a name="SetSpindleSpeedType(int&amp;)"></a> <dt> o <b>SetSpindleSpeedType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSpindleSpeedType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iSpindleSpeedType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Assign a SpindleSpeedType to an Elementary Motion 
	</dt>
	<li> iSpindleSpeedType (1:Machining Spindle speed, 2: Finishing Spindle speed , 3: Undefined Spindle Speed)
	</dl>
</dl>
<a name="SetSpindleSpeedValue"></a><a name="SetSpindleSpeedValue(double&amp;)"></a> <dt> o <b>SetSpindleSpeedValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSpindleSpeedValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iSpindleSpeedValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Assign a SpindleSpeedValue to an Elementary Motion if  SpindleSpeedType = Undefined Spindle Speed
	</dt>
	<li> iSpindleValue
	</dl>
</dl>
<a name="SetVerticalAngleValue"></a><a name="SetVerticalAngleValue(double&amp;)"></a> <dt> o <b>SetVerticalAngleValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVerticalAngleValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iVerticalAngleValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set the VerticalAngleValue of an Elementary Motion if  ElementaryMotionType = Horizontal.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVerticalAngleValue</tt>
   <dd> The vertical angle value</dd>
</dl>
</dl>
</dl>
<a name="SetVerticalSafetyDistanceValue"></a><a name="SetVerticalSafetyDistanceValue(double&amp;)"></a> <dt> o <b>SetVerticalSafetyDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVerticalSafetyDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iVerticalDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Set VerticalSafetyDistanceValue of an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVerticalDistanceValue</tt>
   <dd> The vertical distance value</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIMfgElementaryMotion.h</b><br>
If needed, your Imakefile.mk should include the module: <b>MfgItfEnv</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

