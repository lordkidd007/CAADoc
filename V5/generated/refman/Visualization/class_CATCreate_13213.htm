<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Class CATCreate</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../Visualization.htm" href="../Visualization.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "Visualization";	}
		function getCurrentObjectName() { 
 	return "CATCreate"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Visualization <script type="text/javascript" > writeClassCharacteristic(); </script> CATCreate</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCreate_13213','CATCreate','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCreate</b>
</p>
<p>
<b><i> Class representing a visualization event requesting the visualization of one object which is not visualized yet within 
 existing trees of graphical representations.</i></b><br>
 
 <b>Role</b>: providing a visualization event which holds all the information required to visualize a new object
 as child of another object within any opened documents where it is not already visualized.
 <p>
 The idea is that one is working with one or several documents 
 having their own visualization, and one wants to add a new object as child of another object, which is already
 visualized in one or several documents. To achieve this goal, one has only to send a <script type="text/javascript"> activateLinkAnchor('CATCreate','','CATCreate') </script> event enclosing the new object one wants to visualize along with the object's parent. Refer to the 
<script type="text/javascript"> activateLinkAnchor('CATIModelEvents','','CATIModelEvents') </script> interface to have details about the management of the visualization events and their mechanism.
 

 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATModelEntityNotification','','CATModelEntityNotification') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATCreate(CATBaseUnknown*,CATBaseUnknown*,CATVisCreationMode)"><b>CATCreate</b></a>(CATBaseUnknown*,CATBaseUnknown*,CATVisCreationMode)
<dd>   Constructs the Class.
 <dt> o 
    <a href="#~CATCreate()"><b>~CATCreate</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Clone()"><b>Clone</b></a>()
<dd>   Returns a pointer to a new CATCreate event which is the clone of the current one.
 <dt> o 
    <a href="#GetFather()"><b>GetFather</b></a>()
<dd>  Returns a pointer to the parent.
</dl>
<dl>
</dl>
<dl>
 <h2>Data Member Index</h2> <br>
 <dt> o 
    <a href="#_CreationMode"><b>_CreationMode</b></a>
<dd>  The creation mode of the current notif.
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATCreate"></a><a name="CATCreate(CATBaseUnknown*,CATBaseUnknown*,CATVisCreationMode)"></a> <dt> o <b>CATCreate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATCreate</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iParent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisCreationMode','CATVisCreationMode')</script> <td><tt>iCreationMode</tt><td><tt>= CATVisDefaultMode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Constructs the Class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>    a pointer to the object one wants to visualize.
 </dd>
    <dt><tt> iParent</tt>
   <dd>    a pointer to the object's parent.</dd>
</dl>
</dl>
</dl>
<a name="~CATCreate"></a><a name="~CATCreate()"></a> <dt> o <b>~CATCreate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATCreate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Clone"></a><a name="Clone()"></a> <dt> o <b>Clone</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATModelNotification','CATModelNotification*')</script>  <b>Clone</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns a pointer to a new CATCreate event which is the clone of the current one.
</dl>
<a name="GetFather"></a><a name="GetFather()"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>GetFather</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the parent.
</dl>
 <h2>Data Members</h2> <br>
<a name="_CreationMode"></a> <dt> o <b>_CreationMode</b>
<pre>
  public CATVisCreationMode _CreationMode</dt>
</pre>
<dl>
  <dd>
 The creation mode of the current notif.
</dl>
<hr>
 This object is included in the file: <b>CATCreate.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

