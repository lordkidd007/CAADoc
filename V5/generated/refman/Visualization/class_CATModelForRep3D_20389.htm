<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Class CATModelForRep3D</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../Visualization.htm" href="../Visualization.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "Visualization";	}
		function getCurrentObjectName() { 
 	return "CATModelForRep3D"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Visualization <script type="text/javascript" > writeClassCharacteristic(); </script> CATModelForRep3D</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATModelForRep3D_20389','CATModelForRep3D','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATModelForRep3D</b>
</p>
<p>
<b><i>  Class for dialog help 3D objects.</i></b><br>

  <br>This class is the main class (implementation) of a component that 
  implements the <script type="text/javascript"> activateLinkAnchor('CATI3DGeoVisu','','CATI3DGeoVisu') </script> interface.  It is dedicated to hold a graphic representation of an object that is 
  not part of the document, but is used to ease the dialog. This
  representation is to be built outside and set to the component thanks to 
  the 
<script type="text/javascript"> activateLinkAnchor('','SetRep','SetRep') </script> method.
  <br>You can visualize the component thanks to a <i>CATISO</i> object and
  you can select it. Create a 
<script type="text/javascript"> activateLinkAnchor('CATPathElement','','CATPathElement') </script> with the component, and use the 
  
<script type="text/javascript"> activateLinkAnchor('CATHSO','','CATHSO') </script> and the 
<script type="text/javascript"> activateLinkAnchor('CATPSO','','CATPSO') </script> to highlight, and   to prehighlight respectively.
 
  <br><br><b>Sample:</b>
   
  <pre>
  ...
  CAT3DxxxRep * pMyRep = new CAT3DxxxRep();

  CATModelForRep3D * pFor3DModel = new CATModelForRep3D(); 
  pFor3DModel-><b>SetRep</b>(pMyRep);
  pMyRep = NULL;
  
  CATISO *pISO = .... // to retrieve from the CATFrmEditor 
  pISO-><b>AddElement</b>(pFor3DModel);
  ...

  pISO-><b>RemoveElement</b>(pFor3DModel);  //pMyRep is deleted 
  ...

  <b>// To do a new visualization </b>
  pMyRep = new CAT3DxxxRep();
  pFor3DModel-><b>SetRep</b>(pMyRep);
  pISO->AddElement(pFor3DModel);
  ...

  pISO->RemoveElement(pFor3DModel);  //pMyRep is deleted 
  ...

  //No more need of the model
  pFor3DModel->Release();
  pFor3DModel=NULL;
  ...
  </pre>
  <b>Life Cycle of the graphic representation</b>
  <br>The graphic representation associated with the current class is managed 
  by the 
<script type="text/javascript"> activateLinkAnchor('CATVisManager','','CATVisManager') </script> . So after the <i>SetRep</i> method, it will be deleted  when the <i>CATModelForRep3D</i> instance will be removed from the ISO (but not from
  the  HSO and PSO). A new graphic representation must be created whenever you call <code>
  AddElement</code> to add such a component into the ISO.
  <br><br><b>Why to derive from this class?</b>
  <br>To understand, here is an extract of the <code>BuildGraph</code> 
  method of a <i>CATStateCommand:</i></b>
  <pre>
  ...
  _daPathElement = new CATPathElementAgent("MyAgentName");
  _daPathElement-><b>AddElementType</b>(IID_CATI3DGeoVisu);
  ...
  </pre>
  With this agent, <code>_daPathElement</code>, your component will be selectable since it 
  implements the <i>CATI3DGeoVisu</i> interface. But unfortunately, this criterion is not 
  enough discriminating, because all the 3D visualized objects are also selectable. 
  To filter the selection, you can
  create a new component which derives from the <i>CATModelForRep3D</i> component and which  
  implements a dedicated interface. In short:
  <ul>
     <li>Create a new interface without method, named <code>MyNewInterface</code></li>
     <li>Create a new component, named <code>MyModelForRep</code>, which OM and C++ derives from CATModelForRep3D</li>
     <ul>
     <li>Its header class is:</li>
     <pre>
      #include "CATModelForRep3D.h"  
      class  MyModelForRep : public CATModelForRep3D
      {
         // Used in conjunction with CATImplementClass in the .cpp file
         CATDeclareClass;

         MyModelForRep() ;
         virtual ~MyModelForRep();

         private:

         // Copy constructor, not implemented
         // Set as private to prevent from compiler automatic creation as public.
         MyModelForRep(const MyModelForRep &iObjectToCopy);

         // Assignment operator, not implemented
         // Set as private to prevent from compiler automatic creation as public.
         MyModelForRep & operator = (const MyModelForRep &iObjectToCopy);
      };
     </pre>
     <li>Its source class is:</li>
     <pre>
     #include "MyModelForRep.h"

     // To declare that the class is a component main class which OM derives from
     // CATModelForRep3D
     CATImplementClass(MyModelForRep, Implementation, CATModelForRep3D, CATNull);
     
     MyModelForRep::MyModelForRep();
     {
     }

     MyModelForRep::~MyModelForRep();
     {
     }

     // The component implements MyNewInterface interface
     #include "TIE_MyNewInterface.h"
     TIE_MyNewInterface(MyModelForRep);
     </pre>
     </ul>
     <li>Modify the interface dictionary</li>
     <pre>
     MyModelForRep  MyNewInterface libxxxx
     </pre>
  </ul>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATModelForRep3D()"><b>CATModelForRep3D</b></a>()
<dd>  Default constructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#SetRep(CATRep*)"><b>SetRep</b></a>(CATRep*)
<dd>  Associates a graphic representation.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATModelForRep3D"></a><a name="CATModelForRep3D()"></a> <dt> o <b>CATModelForRep3D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATModelForRep3D</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
 <h2>Methods</h2> <br>
<a name="SetRep"></a><a name="SetRep(CATRep*)"></a> <dt> o <b>SetRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRep</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Associates a graphic representation.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd>   The given representation which you want <i>CATModelForRep3D</i> to be associated with.
   Once the representation iRep has been associated with a <i>CATModelForRep3D</i> 
   component its lifecycle is
   managed by the </dd>
<script type="text/javascript"> activateLinkAnchor('CATVisManager','','CATVisManager') </script> .   <br>iRep is a pointer to an instance of a class which derives from
   
<script type="text/javascript"> activateLinkAnchor('CAT3DRep','','CAT3DRep') </script> .
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATModelForRep3D.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

