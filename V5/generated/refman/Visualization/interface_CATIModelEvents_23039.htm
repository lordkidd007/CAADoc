<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Interface CATIModelEvents</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../Visualization.htm" href="../Visualization.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "Visualization";	}
		function getCurrentObjectName() { 
 	return "CATIModelEvents"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Visualization Interface CATIModelEvents</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIModelEvents_23039','CATIModelEvents','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../Visualization/class_CATExtIModelEvents_25316.htm">CATExtIModelEvents</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIModelEvents</b>
</p>
<p>
<b><i> Interface that makes components communicate with their visualization, that is their graphical
 representations.</i></b><br>
 
<br><b>Role</b>:
 As the model world and the visualization world are independent, every action (ie that a geometry modification)
 performed by one object or by any command should trigger
 a visualization update (when necessary). The way to warn the visualization world is based onto
 visualization events and a send/receive mechanism. And the management of the visualization events 
 is done by this interface: how one object can be connected to (or disconnected from) 
 another object, how sending 
 a visualization event?
<p>
 <p><b>BOA information</b>: this interface CANNOT be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATModelNotification','','CATModelNotification') </script>, <script type="text/javascript"> activateLinkAnchor('CATVisManager','','CATVisManager') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ConnectTo(CATBaseUnknown*)"><b>ConnectTo</b></a>(CATBaseUnknown*)
<dd>  Connects itself with a given object.
 <dt> o 
    <a href="#DeconnectFrom(CATBaseUnknown*)"><b>DeconnectFrom</b></a>(CATBaseUnknown*)
<dd>  Disconnects itself from a given object.
 <dt> o 
    <a href="#Dispatch(CATNotification&amp;)"><b>Dispatch</b></a>(CATNotification&amp;)
<dd>  Sends a visualization event.
 <dt> o 
    <a href="#GetDispatcher()"><b>GetDispatcher</b></a>()
<dd>  Returns the component which allows the events' sending.
 <dt> o 
    <a href="#Receive(CATNotification&amp;)"><b>Receive</b></a>(CATNotification&amp;)
<dd>  Receive a visualization event.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ConnectTo"></a><a name="ConnectTo(CATBaseUnknown*)"></a> <dt> o <b>ConnectTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ConnectTo</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iChild</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Connects itself with a given object.

 <br><b>Role</b>:
 Connection with a given object means that when this object sends a visualization
 event (a notification) thru the 
<script type="text/javascript"> activateLinkAnchor('','Dispatch','Dispatch') </script> method the current object is "awakened"  with the 
<script type="text/javascript"> activateLinkAnchor('','Receive','Receive') </script> method. Finally the current object should send the received event  thru the 
<script type="text/javascript"> activateLinkAnchor('','Dispatch','Dispatch') </script> method. And all objects that are connected to the current object will be  awakened also. This mechanism makes one event to go up to the last connected object. Usually 
 the last connected object is the 
<script type="text/javascript"> activateLinkAnchor('CATVisManager','','CATVisManager') </script> which has the ability to process the visualization event . Notice that this kind of connection is a parent-like relation 
 between the current object(<tt>parent</tt>) and 
 the given object(<tt>child</tt> to which it is connected).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChild</tt>
   <dd> the given object.
</dd>
</dl>
</dl>
</dl>
<a name="DeconnectFrom"></a><a name="DeconnectFrom(CATBaseUnknown*)"></a> <dt> o <b>DeconnectFrom</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>DeconnectFrom</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iChild</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Disconnects itself from a given object.

<br><b>Role</b>: 
  Disconnection with a given object means that the connection is broken: not any events 
 sent by the given object will awaken the current object.


<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChild</tt>
   <dd> the given object.</dd>
</dl>
</dl>
</dl>
<a name="Dispatch"></a><a name="Dispatch(CATNotification&amp;)"></a> <dt> o <b>Dispatch</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Dispatch</b>(<td><script type="text/javascript"> activateLink('CATNotification','CATNotification&amp;')</script> <td><tt>iInfo</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sends a visualization event.

<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInfo</tt>
   <dd> the notification.</dd>
</dl>
</dl>
</dl>
<a name="GetDispatcher"></a><a name="GetDispatcher()"></a> <dt> o <b>GetDispatcher</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATNotificationDispatcher','CATNotificationDispatcher *')</script>  <b>GetDispatcher</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the component which allows the events' sending.
</dl>
<a name="Receive"></a><a name="Receive(CATNotification&amp;)"></a> <dt> o <b>Receive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Receive</b>(<td><script type="text/javascript"> activateLink('CATNotification','CATNotification&amp;')</script> <td><tt>info</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Receive a visualization event.

<br><b>Role</b>: 
 this method should be called when the current object is awaken by one of its children.
 It should then forward the event (thru the 
<script type="text/javascript"> activateLinkAnchor('','Dispatch','Dispatch') </script> method) after any possible  processing.
</dl>
<hr>
 This object is included in the file: <b>CATIModelEvents.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

