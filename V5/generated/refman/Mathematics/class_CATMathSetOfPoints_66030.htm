<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Mathematics Class CATMathSetOfPoints</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../Mathematics.htm">This Framework</a>  <a href="class_CATMathSetOfLongs_57876.htm">Previous</a>  <a href="class_CATMathSetOfVectors_73805.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>Mathematics Class CATMathSetOfPoints</h1>
<pre>
<a href="../Mathematics/class_CATCGMVirtual_33296.htm">Mathematics.CATCGMVirtual</a>
  |
  +---<a href="../Mathematics/class_CATMathExtendableSet_80990.htm">Mathematics.CATMathExtendableSet</a>
    |
    +---<a href="../Mathematics/class_CATMathSetOf3DObjects_84596.htm">Mathematics.CATMathSetOf3DObjects</a>
      |
      +---CATMathSetOfPoints
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMathSetOfPoints</b>
</p>
<p>
<b><i> Class representing a set of CATMathPoints.</i></b><br>

<br>The size is defined by a number of CATMathPoints
<tt>NbPoints</tt>. The index of the first CATMathPoint is <tt>0</tt>.
<br>The <tt>SetNumberOfPoints</tt> method enlarges the memory if
 needed, while the <tt>Compress</tt> inherited method releases the free 
 unused memory.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMathSetOfPoints()"><b>CATMathSetOfPoints</b></a>()
<dd>  Constructs an empty CATMathSetOfPoints with no point.
 <dt> o 
    <a href="#CATMathSetOfPoints(CATLONG32)"><b>CATMathSetOfPoints</b></a>(CATLONG32)
<dd>  Constructs a CATMathSetOfPoints of a given size.
 <dt> o 
    <a href="#CATMathSetOfPoints(CATLONG32,CATMathPoint[])"><b>CATMathSetOfPoints</b></a>(CATLONG32,CATMathPoint[])
<dd>  Constructs from an array of CATMathPoints.
 <dt> o 
    <a href="#CATMathSetOfPoints(CATMathSetOfPoints&amp;)"><b>CATMathSetOfPoints</b></a>(CATMathSetOfPoints&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATMathSetOfPoints()"><b>~CATMathSetOfPoints</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ComputeAffineSpace(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)"><b>ComputeAffineSpace</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)
<dd>  
 <dt> o 
    <a href="#ComputeAffineSupport(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)"><b>ComputeAffineSupport</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)
<dd>  Returns the type of the mean affine sub-space generated by <tt>this</tt> set of points.
 <dt> o 
    <a href="#DistanceTo(CATMathPoint&amp;,CATLONG32&amp;)"><b>DistanceTo</b></a>(CATMathPoint&amp;,CATLONG32&amp;)
<dd>   Returns the distance between a CATMathPoint and 
 <tt>this</tt> CATMathSetOfPoints.
 <dt> o 
    <a href="#DistanceTo(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)"><b>DistanceTo</b></a>(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)
<dd>   Returns the distance between  
 <tt>this</tt> CATMathSetOfPoints and another CATMathSetOfPoints.
 <dt> o 
    <a href="#GetAffineSpace(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;)"><b>GetAffineSpace</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;)
<dd>  Throws an error if an error occurs
 Returns the type of the mean affine sub-space generated by <tt>this</tt> set of points.
 <dt> o 
    <a href="#GetNumberOfPoints()"><b>GetNumberOfPoints</b></a>()
<dd>  Returns the number of points of <tt>this</tt> CATMathSetOfPoints.
 <dt> o 
    <a href="#GetPoint(CATLONG32)"><b>GetPoint</b></a>(CATLONG32)
<dd>  Returns the CATMathPoint locating at a given row and column.
 <dt> o 
    <a href="#GetPoint(CATLONG32,CATMathPoint&amp;)"><b>GetPoint</b></a>(CATLONG32,CATMathPoint&amp;)
<dd>  Retrieves the CATMathPoint locating at a index.
 <dt> o 
    <a href="#GetPoints()"><b>GetPoints</b></a>()
<dd>  Returns the array of CATMathPoints.
 <dt> o 
    <a href="#SetNumberOfPoints(CATLONG32)"><b>SetNumberOfPoints</b></a>(CATLONG32)
<dd>  Allocates the memory for <tt>this</tt> CATMathSetOfPoints.
 <dt> o 
    <a href="#SetPoint(CATMathPoint&amp;,CATLONG32)"><b>SetPoint</b></a>(CATMathPoint&amp;,CATLONG32)
<dd>  Initializes the values of a CATMathPoint in the CATMathSetOfPoints.
 <dt> o 
    <a href="#SquareDistanceTo(CATMathPoint&amp;,CATLONG32&amp;)"><b>SquareDistanceTo</b></a>(CATMathPoint&amp;,CATLONG32&amp;)
<dd>   Returns the square distance between a CATMathPoint and 
 <tt>this</tt> CATMathSetOfPoints.
 <dt> o 
    <a href="#SquareDistanceTo(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)"><b>SquareDistanceTo</b></a>(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)
<dd>   Returns the square distance between  
 <tt>this</tt> CATMathSetOfPoints and another CATMathSetOfPoints.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#AffineSpace"><b>AffineSpace</b></a>
<dd>  Defines the type of space generated by a set of points.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMathSetOfPoints"></a><a name="CATMathSetOfPoints()"></a> <dt> o <b>CATMathSetOfPoints</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATMathSetOfPoints</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs an empty CATMathSetOfPoints with no point.
</dl>
<a name="CATMathSetOfPoints"></a><a name="CATMathSetOfPoints(CATLONG32)"></a> <dt> o <b>CATMathSetOfPoints</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATMathSetOfPoints</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iNbPoints</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a CATMathSetOfPoints of a given size.
<br>The memory is allocated, but the values of the points are not initialized.
 Use <tt>SetPoint</tt> to initialize them.
</dl>
<a name="CATMathSetOfPoints"></a><a name="CATMathSetOfPoints(CATLONG32,CATMathPoint[])"></a> <dt> o <b>CATMathSetOfPoints</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATMathSetOfPoints</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iNbPoints</tt>,<tr><td></td><td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint[]</a> <td><tt>iPointsToCopy</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs from an array of CATMathPoints.
</dl>
<a name="CATMathSetOfPoints"></a><a name="CATMathSetOfPoints(CATMathSetOfPoints&amp;)"></a> <dt> o <b>CATMathSetOfPoints</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATMathSetOfPoints</b>(<td> const <a href="../Mathematics/class_CATMathSetOfPoints_66030.htm">CATMathSetOfPoints&amp;</a> <td><tt>iSetToCopy</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="~CATMathSetOfPoints"></a><a name="~CATMathSetOfPoints()"></a> <dt> o <b>~CATMathSetOfPoints</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATMathSetOfPoints</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="ComputeAffineSpace"></a><a name="ComputeAffineSpace(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)"></a> <dt> o <b>ComputeAffineSpace</b>

<dt>  <table><tr><td>  public void  <b>ComputeAffineSpace</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>ioOrigin</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector1</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector2</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector3</tt>,<tr><td></td><td>CATMathSetOfPoints::AffineSpace&amp; <td><tt>ioAffineSpace</tt>,<tr><td></td><td>double&amp; <td><tt>oDistance</tt>,<tr><td></td><td>double <td><tt>iTol</tt>,<tr><td></td><td>double* <td><tt>weights</tt><td><tt>= NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R15 ComputeAffineSupport
 Throws an error if an error occurs
 Returns the type of the mean affine sub-space generated by <tt>this</tt> set of points.
 Note that it does not return the type of the affine space of the smallest dimension passing through 
 the points. The SPACE type is returned in very specific cases. The LINE and POINT types
 are returned in cases of degeneracy. In a general case, the PLANE type is returned and 
 this is the mean plane which is calculated.
 <br>
  
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAffineSpace</tt>
   <dd> The type of space generated by the set of points. According to it, different types
 of data are computed:
 <dl>
  <dt>POINT </dt> <dd> Only the ioOrigin is valued.
  <dt>LINE  </dt> <dd> The ioOrigin and the ioVector1 are valuated.
  <dt>PLANE </dt> <dd> The ioOrigin and the first two vectors are valuated.
  <dt>SPACE </dt> <dd> The ioOrigin and the three vectors are valuated.
 </dl>
  </dd>
    <dt><tt> iTol</tt>
   <dd>  geometrical tolerance to decide if the set of points are in the affine support
  </dd>
    <dt><tt> iweights</tt>
   <dd>  array of weights of the Points in the Set used to compute an inertial matrix and the centre of mass.</dd>
</dl>
</dl>
</dl>
<a name="ComputeAffineSupport"></a><a name="ComputeAffineSupport(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;,double&amp;,double,double*)"></a> <dt> o <b>ComputeAffineSupport</b>

<dt>  <table><tr><td>  public <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>ComputeAffineSupport</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>ioOrigin</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector1</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector2</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector3</tt>,<tr><td></td><td>CATMathSetOfPoints::AffineSpace&amp; <td><tt>ioAffineSpace</tt>,<tr><td></td><td>double&amp; <td><tt>oDistance</tt>,<tr><td></td><td>double <td><tt>iTol</tt>,<tr><td></td><td>double* <td><tt>weights</tt><td><tt>= NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the type of the mean affine sub-space generated by <tt>this</tt> set of points.
 Note that it does not return the type of the affine space of the smallest dimension passing through 
 the points. The SPACE type is returned in very specific cases. The LINE and POINT types
 are returned in cases of degeneracy. In a general case, the PLANE type is returned and 
 this is the mean plane which is calculated.
 <br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAffineSpace</tt>
   <dd> The type of space generated by the set of points. According to it, different types
 of data are computed:
 <dl>
  <dt>POINT </dt> <dd> Only the ioOrigin is valued.
  <dt>LINE  </dt> <dd> The ioOrigin and the ioVector1 are valuated.
  <dt>PLANE </dt> <dd> The ioOrigin and the first two vectors are valuated.
  <dt>SPACE </dt> <dd> The ioOrigin and the three vectors are valuated.
 </dl>
  </dd>
    <dt><tt> iTol</tt>
   <dd>  geometrical tolerance to decide if the set of points are in the affine support
  </dd>
    <dt><tt> iweights</tt>
   <dd>  array of weights of the Points in the Set used to compute an inertial matrix and the centre of mass.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>E_FAIL</tt> if an error occurs , <tt>S_OK</tt> otherwise.
</dl>
</dl>
<a name="DistanceTo"></a><a name="DistanceTo(CATMathPoint&amp;,CATLONG32&amp;)"></a> <dt> o <b>DistanceTo</b>

<dt>  <table><tr><td>  public <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>DistanceTo</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iP</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex</tt>) const   </table></dt>
<dl>
  <dd>
  Returns the distance between a CATMathPoint and 
 <tt>this</tt> CATMathSetOfPoints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iP</tt>
   <dd> The point to which the distance is computed.
 </dd>
    <dt><tt> ioIndex</tt>
   <dd> The index (beginning at <tt>0</tt>) of a point of <tt>this</tt>
 to which the distance is minimum.</dd>
</dl>
</dl>
</dl>
<a name="DistanceTo"></a><a name="DistanceTo(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)"></a> <dt> o <b>DistanceTo</b>

<dt>  <table><tr><td>  public <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>DistanceTo</b>(<td> const <a href="../Mathematics/class_CATMathSetOfPoints_66030.htm">CATMathSetOfPoints*</a> <td><tt>iSetOfPoints2</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex1</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex2</tt>) const  </table></dt>
<dl>
  <dd>
  Returns the distance between  
 <tt>this</tt> CATMathSetOfPoints and another CATMathSetOfPoints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetOfPoints2</tt>
   <dd> The other set of points.
 </dd>
    <dt><tt> ioIndex1</tt>
   <dd> The index (beginning at <tt>0</tt>) of the point of <tt>this</tt>
 to which the distance is minimum.
 </dd>
    <dt><tt> ioIndex2</tt>
   <dd> The index (beginning at <tt>0</tt>) of the point of <tt>iSetOfPoints2</tt>
 to which the distance is minimum.</dd>
</dl>
</dl>
</dl>
<a name="GetAffineSpace"></a><a name="GetAffineSpace(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathSetOfPoints::AffineSpace&amp;)"></a> <dt> o <b>GetAffineSpace</b>

<dt>  <table><tr><td>  public void  <b>GetAffineSpace</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>ioOrigin</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector1</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector2</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>ioVector3</tt>,<tr><td></td><td>CATMathSetOfPoints::AffineSpace&amp; <td><tt>ioAffineSpace</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Throws an error if an error occurs
 Returns the type of the mean affine sub-space generated by <tt>this</tt> set of points.
 Note that it does not return the type of the affine space of the smallest dimension passing through 
 the points. The SPACE type is returned in very specific cases. The LINE and POINT types
 are returned in cases of degeneracy. In a general case, the PLANE type is returned and 
 this is the mean plane which is calculated.
 <br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAffineSpace</tt>
   <dd> The type of space generated by the set of points. According to it, different types
 of data are computed:
 <dl>
  <dt>POINT </dt> <dd> Only the ioOrigin is valued.
  <dt>LINE  </dt> <dd> The ioOrigin and the ioVector1 are valuated.
  <dt>PLANE </dt> <dd> The ioOrigin and the first two vectors are
          valuated.
  <dt>SPACE </dt> <dd> The ioOrigin and the three vectors are valuated.
 </dl>
</dd>
</dl>
</dl>
</dl>
<a name="GetNumberOfPoints"></a><a name="GetNumberOfPoints()"></a> <dt> o <b>GetNumberOfPoints</b>

<dt>  <table><tr><td>  public <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>GetNumberOfPoints</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the number of points of <tt>this</tt> CATMathSetOfPoints.
</dl>
<a name="GetPoint"></a><a name="GetPoint(CATLONG32)"></a> <dt> o <b>GetPoint</b>

<dt>  <table><tr><td>  public <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint</a>  <b>GetPoint</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iIndexPoint</tt>) const  </table></dt>
<dl>
  <dd>
 Returns the CATMathPoint locating at a given row and column.
<br>The index <tt>iIndexPoint</tt> starts at <tt>0</tt>.
<br>Use preferently the second method signature if you want to avoid an
 useless constructor.
</dl>
<a name="GetPoint"></a><a name="GetPoint(CATLONG32,CATMathPoint&amp;)"></a> <dt> o <b>GetPoint</b>

<dt>  <table><tr><td>  public void  <b>GetPoint</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iIndexPoint</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>ioPoint</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves the CATMathPoint locating at a index.
<br>The index <tt>iIndexPoint</tt> starts at <tt>0</tt>.
</dl>
<a name="GetPoints"></a><a name="GetPoints()"></a> <dt> o <b>GetPoints</b>

<dt>  <table><tr><td>  public <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint *</a>  <b>GetPoints</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the array of CATMathPoints.
<br>Note that the returned array is used by the CATMathSetOfPoints and
 must not be deleted.
</dl>
<a name="SetNumberOfPoints"></a><a name="SetNumberOfPoints(CATLONG32)"></a> <dt> o <b>SetNumberOfPoints</b>

<dt>  <table><tr><td>  public void  <b>SetNumberOfPoints</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iCountPoints</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Allocates the memory for <tt>this</tt> CATMathSetOfPoints.
</dl>
<a name="SetPoint"></a><a name="SetPoint(CATMathPoint&amp;,CATLONG32)"></a> <dt> o <b>SetPoint</b>

<dt>  <table><tr><td>  public void  <b>SetPoint</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iPoint</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iIndex</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Initializes the values of a CATMathPoint in the CATMathSetOfPoints.
<br>The index <tt>iIndexPoint</tt> starts at <tt>0</tt>.
</dl>
<a name="SquareDistanceTo"></a><a name="SquareDistanceTo(CATMathPoint&amp;,CATLONG32&amp;)"></a> <dt> o <b>SquareDistanceTo</b>

<dt>  <table><tr><td>  public <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>SquareDistanceTo</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iP</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex</tt>) const   </table></dt>
<dl>
  <dd>
  Returns the square distance between a CATMathPoint and 
 <tt>this</tt> CATMathSetOfPoints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iP</tt>
   <dd> The point to which the distance is computed.
 </dd>
    <dt><tt> ioIndex</tt>
   <dd> The index (beginning at <tt>0</tt>) of the point of <tt>this</tt>
 to which the distance is minimum.</dd>
</dl>
</dl>
</dl>
<a name="SquareDistanceTo"></a><a name="SquareDistanceTo(CATMathSetOfPoints*,CATLONG32&amp;,CATLONG32&amp;)"></a> <dt> o <b>SquareDistanceTo</b>

<dt>  <table><tr><td>  public <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>SquareDistanceTo</b>(<td> const <a href="../Mathematics/class_CATMathSetOfPoints_66030.htm">CATMathSetOfPoints*</a> <td><tt>iSetOfPoints2</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex1</tt>,<tr><td></td><td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioIndex2</tt>) const  </table></dt>
<dl>
  <dd>
  Returns the square distance between  
 <tt>this</tt> CATMathSetOfPoints and another CATMathSetOfPoints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetOfPoints2</tt>
   <dd> The other set of points.
 </dd>
    <dt><tt> ioIndex1</tt>
   <dd> The index (beginning at <tt>0</tt>) of the point of <tt>this</tt>
 to which the distance is minimum.
 </dd>
    <dt><tt> ioIndex2</tt>
   <dd> The index (beginning at <tt>0</tt>) of the point of <tt>iSetOfPoints2</tt>
 to which the distance is minimum.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="AffineSpace"> <dt> o <b>AffineSpace</b>
<dl>
  <dd>
<pre>
enum <b>AffineSpace</b> {
  POINT,
  LINE,
  PLANE,
  SPACE
}
</pre>
 Defines the type of space generated by a set of points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> POINT</tt>
   <dd> All the points are at the same position.
 </dd>
    <dt><tt> LINE</tt>
   <dd> The points are aligned on a line.
 </dd>
    <dt><tt> PLANE</tt>
   <dd> The points are lying on a plane.
 </dd>
    <dt><tt> SPACE</tt>
   <dd> The points represent the space .</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMathSetOfPoints.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMathematics</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
