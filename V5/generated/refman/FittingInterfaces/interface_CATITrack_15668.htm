<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>FittingInterfaces Interface CATITrack</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../FittingInterfaces.htm">This Framework</a>  <a href="interface_CATISiShuttleFactory_82744.htm">Previous</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>FittingInterfaces Interface CATITrack</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../FittingInterfaces/interface_CATISampled_23947.htm">FittingInterfaces.CATISampled</a>
        |
        +---CATITrack
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 interface <b>CATITrack</b>
</p>
<p>
<b><i> Definition of the CATITrack object.</i></b><br>

 A track defines the motion of an object along a trajectory.  
 Some key characteristics with tracks are:
 <ul>
      <li> A trajectory is a set of points (specifically <a href="../FittingInterfaces/interface_CATIShot_12594.htm#)">CATIShot.)</a>,           that define positions of where the object will move
           through.
      <li> The object a track moves includes parts, products 
           (CATIProducts), shuttles (CATISiShuttle) and cameras, among
           others.
      <li> Objects move at a speed which can be specified.
      <li> Also, one can change the position of a track after its 
           creation.
 </ul>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCurrentPosition(CATMathTransformation&amp;)"><b>GetCurrentPosition</b></a>(CATMathTransformation&amp;)
<dd>  Retrieves the current position of the object along the track.
 <dt> o 
    <a href="#GetCurrentPosition(CATSiFiPosition&amp;)"><b>GetCurrentPosition</b></a>(CATSiFiPosition&amp;)
<dd>  Retrieves the current position of the object along the track.
 <dt> o 
    <a href="#GetFirstPosition(CATMathTransformation&amp;)"><b>GetFirstPosition</b></a>(CATMathTransformation&amp;)
<dd>  Retrieves the track's First Position.
 <dt> o 
    <a href="#GetGlobalTransfo(CATMathTransformation&amp;)"><b>GetGlobalTransfo</b></a>(CATMathTransformation&amp;)
<dd>  Retrieves the track's Global Transformation.
 <dt> o 
    <a href="#GetGuaranteedPosition(CATMathTransformation&amp;)"><b>GetGuaranteedPosition</b></a>(CATMathTransformation&amp;)
<dd>  Retrieves the track's Guaranteed Position.
 <dt> o 
    <a href="#GetMatrixAll(CATMathTransformation&amp;)"><b>GetMatrixAll</b></a>(CATMathTransformation&amp;)
<dd>  Retrieves the track's Matrix All (base location.
 <dt> o 
    <a href="#GetMoveMode(CATFitTrackMoveMode&amp;)"><b>GetMoveMode</b></a>(CATFitTrackMoveMode&amp;)
<dd>  Retrieves the move mode.
 <dt> o 
    <a href="#GetSpeed(double&amp;)"><b>GetSpeed</b></a>(double&amp;)
<dd>  Retrieves the speed of the track.
 <dt> o 
    <a href="#Mirror(CATMathPoint&amp;,CATMathVector&amp;)"><b>Mirror</b></a>(CATMathPoint&amp;,CATMathVector&amp;)
<dd>  Produces a "mirror image" of the track.
 <dt> o 
    <a href="#SetFirstPosition(CATMathTransformation&amp;)"><b>SetFirstPosition</b></a>(CATMathTransformation&amp;)
<dd>  Sets the track's First Position.
 <dt> o 
    <a href="#SetGlobalTransfo(CATMathTransformation&amp;)"><b>SetGlobalTransfo</b></a>(CATMathTransformation&amp;)
<dd>  Sets the track's Global Transformation.
 <dt> o 
    <a href="#SetGuaranteedPosition(CATMathTransformation&amp;)"><b>SetGuaranteedPosition</b></a>(CATMathTransformation&amp;)
<dd>  Sets the track's Guaranteed Position.
 <dt> o 
    <a href="#SetMatrixAll(CATMathTransformation&amp;)"><b>SetMatrixAll</b></a>(CATMathTransformation&amp;)
<dd>  Sets the track's base location.
 <dt> o 
    <a href="#SetMoveMode(CATFitTrackMoveMode)"><b>SetMoveMode</b></a>(CATFitTrackMoveMode)
<dd>  Sets the move mode.
 <dt> o 
    <a href="#SetSpeed(double)"><b>SetSpeed</b></a>(double)
<dd>  Sets the speed of the track.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetCurrentPosition"></a><a name="GetCurrentPosition(CATMathTransformation&amp;)"></a> <dt> o <b>GetCurrentPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetCurrentPosition</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>oPosition</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the current position of the object along the track.
 <b>Role:</b> Gets the current position of the object along the track.  This
 position is absolute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPosition</tt>
   <dd>    A transformation for the position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the position information was correctly retrieved
     <br> E_FAIL : if the position information was not correctly retrieved
</dl>
</dl>
<a name="GetCurrentPosition"></a><a name="GetCurrentPosition(CATSiFiPosition&amp;)"></a> <dt> o <b>GetCurrentPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetCurrentPosition</b>(<td>CATSiFiPosition&amp; <td><tt>oPosition</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the current position of the object along the track.
 <b>Role:</b> Gets the current position of the object along the track.  This
 position is absolute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPosition</tt>
   <dd>    Information for the position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the position information was correctly retrieved
     <br> E_FAIL : if the position information was not correctly retrieved
</dl>
</dl>
<a name="GetFirstPosition"></a><a name="GetFirstPosition(CATMathTransformation&amp;)"></a> <dt> o <b>GetFirstPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetFirstPosition</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>oFirstPos</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the track's First Position.
 <b>Role:</b> The first position is the location of the object the first time the
 track is created.  It is relative to world origin, and once it is set it is stored as
 part of Matrix All.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstPos</tt>
   <dd>    The transformation of the first position of the object.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the first postion was correctly retrieved
     <br> E_FAIL : if the first position was not correctly retrieved
</dl>
</dl>
<a name="GetGlobalTransfo"></a><a name="GetGlobalTransfo(CATMathTransformation&amp;)"></a> <dt> o <b>GetGlobalTransfo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGlobalTransfo</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>oGlobalTransfo</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the track's Global Transformation.
 <b>Role:</b> The global transformation is a transformation applied that affects
 the global positioning of the track.  This is for the case when a track is moved. 
 This transformation is then stored as part of matrix all.  It is relative to the
 world origin.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oGlobalTransfo</tt>
   <dd>    The transformation of how much the track has moved.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the global transformation was correctly retrieved
     <br> E_FAIL : if the global transformation was not correctly retrieved
</dl>
</dl>
<a name="GetGuaranteedPosition"></a><a name="GetGuaranteedPosition(CATMathTransformation&amp;)"></a> <dt> o <b>GetGuaranteedPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuaranteedPosition</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>oGuaranteedPosition</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the track's Guaranteed Position.
 <b>Role:</b> The guaranteed position is a transformation used to move the track 
 relative to the track's starting position (ie. First Position).  It is a relative
 transformation designed to only affect the trajectory information.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oGuaranteedPosition</tt>
   <dd>    A transformation relative to the object's first position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the guaranteed position was correctly retrieved
     <br> E_FAIL : if the guaranteed position was not correctly retrieved
</dl>
</dl>
<a name="GetMatrixAll"></a><a name="GetMatrixAll(CATMathTransformation&amp;)"></a> <dt> o <b>GetMatrixAll</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetMatrixAll</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>oAll</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the track's Matrix All (base location.)
 <b>Role:</b> Matrix All is defined as the base location of a track.
 Each shot is then defined relative to this base location.  When a track
 is first created, the value of matrix all is determined from the object
 that is to be moved.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if MatrixAll was correctly retrieved
     <br> E_FAIL : if MatrixAll was not correctly retrieved
</dl>
</dl>
<a name="GetMoveMode"></a><a name="GetMoveMode(CATFitTrackMoveMode&amp;)"></a> <dt> o <b>GetMoveMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetMoveMode</b>(<td><a href="../FittingInterfaces/enum_CATFitTrackMoveMode_72000.htm">CATFitTrackMoveMode&amp;</a> <td><tt>oMode</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the move mode.
 <b>Role:</b> There are two different modes related to track creation/definition. 
 These are speed based mode and time based mode.  
 <ul>
      <li> In speed based mode, the speed is held constant and the track time is 
           calculated (time = (total distance) / speed).  Since a speed of zero
           produces an undefined result, it must be positive and non-zero.
      <li> In time based mode, the time is held constant and the track speed is 
           calculated (speed = (total distance) / time).  The time must be positive
           and non-zero.
 </ul>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMode</tt>
   <dd>    The move mode for the track.
    <b>Legal values</b>:
     <br><tt>CATFitSpeedMode</tt> for speed based mode
     <br><tt>CATFitTimeMode</tt> for time based mode
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      <br> S_OK   : if the Move Mode value was correctly obtained
     <br> E_FAIL : if the Move Mode value was not correctly obtained
</dl>
</dl>
<a name="GetSpeed"></a><a name="GetSpeed(double&amp;)"></a> <dt> o <b>GetSpeed</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSpeed</b>(<td>double&amp; <td><tt>oSpeed</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the speed of the track.
 <b>Role:</b> A track defines the motion of an object along a trajectory.  The 
 rate at which the object moves is specified by the speed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSpeed</tt>
   <dd>    The value of the speed of the track.  It should be greater than zero.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the Speed value was correctly obtained
     <br> E_FAIL : if the Speed Mode value was not correctly obtained
</dl>
</dl>
<a name="Mirror"></a><a name="Mirror(CATMathPoint&amp;,CATMathVector&amp;)"></a> <dt> o <b>Mirror</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Mirror</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iPoint</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector_34767.htm">CATMathVector&amp;</a> <td><tt>iNormal</tt>) =0  </table></dt>
<dl>
  <dd>
 Produces a "mirror image" of the track.  
 <b>Role:</b> Determines the "mirror image" of a track.  The "mirror" is
 a 3d plane specified by a point on the plane and the normal to the surface
 of the plane.  The mirror calculation involves going through each shot
 and projecting it in the space on the other side of the mirror plane.  The 
 projection "reflects" the point perpendicularly to the plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>    A point on the plane that will be used to define the mirror.
 </dd>
    <dt><tt> iNormal</tt>
   <dd>    A normal to the plane that will be used to define the mirror.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the mirror function was performed correctly 
     <br> E_FAIL : if the mirror function was not performed correctly
</dl>
</dl>
<a name="SetFirstPosition"></a><a name="SetFirstPosition(CATMathTransformation&amp;)"></a> <dt> o <b>SetFirstPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetFirstPosition</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iFirstPos</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the track's First Position.
 <b>Role:</b> The first position is the location of the object the first time the
 track is created.  It is relative to world origin, and once it is set it is stored as
 part of Matrix All.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstPos</tt>
   <dd>    The transformation of the first position of the object.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the first position was correctly set
     <br> E_FAIL : if the first position was not correctly set
</dl>
</dl>
<a name="SetGlobalTransfo"></a><a name="SetGlobalTransfo(CATMathTransformation&amp;)"></a> <dt> o <b>SetGlobalTransfo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGlobalTransfo</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iGlobalTransfo</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the track's Global Transformation.
 <b>Role:</b> The global transformation is a transformation applied that affects
 the global position of the track.  This is for the case when a track is moved. 
 This transformation is then stored as part of Matrix All.  It is relative to 
 the world origin.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGlobalTransfo</tt>
   <dd>    A transformation that will affect the track on a global basis.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the global transformation was correctly set
     <br> E_FAIL : if the global transformation was not correctly set
</dl>
</dl>
<a name="SetGuaranteedPosition"></a><a name="SetGuaranteedPosition(CATMathTransformation&amp;)"></a> <dt> o <b>SetGuaranteedPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuaranteedPosition</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iGuaranteedPosition</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the track's Guaranteed Position.
 <b>Role:</b> The guaranteed position is a transformation used to move the track 
 relative to the track's starting position (ie. First Position).  It is a relative
 transformation designed to only affect the trajectory information.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGuaranteedPosition</tt>
   <dd>    A transformation relative to the object's first position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the guaranteed position was correctly set
     <br> E_FAIL : if the guaranteed position was not correctly set
</dl>
</dl>
<a name="SetMatrixAll"></a><a name="SetMatrixAll(CATMathTransformation&amp;)"></a> <dt> o <b>SetMatrixAll</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetMatrixAll</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iAll</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the track's base location.
 <b>Role:</b> Matrix All is defined as the base location of a track.
 Each shot is then defined relative to this base location.  When a track
 is first created, the value of Matrix All is determined from the object
 that is to be moved.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if MatrixAll was correctly set
     <br> E_FAIL : if MatrixAll was not correctly set
</dl>
</dl>
<a name="SetMoveMode"></a><a name="SetMoveMode(CATFitTrackMoveMode)"></a> <dt> o <b>SetMoveMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetMoveMode</b>(<td><a href="../FittingInterfaces/enum_CATFitTrackMoveMode_72000.htm">CATFitTrackMoveMode</a> <td><tt>iMode</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the move mode.
 <b>Role:</b> There are two different modes related to track creation/
 definition. These are speed based mode and time based mode.  
 <ul>
      <li> In speed based mode, the speed is held constant and the track time is 
           determined (time = (total distance) / speed).  Since a speed of zero
           produces an undefined result, it must be positive and non-zero.
      <li> In time based mode, the time is held constant and the track speed is 
           determined (speed = (total distance) / time).  The time must be positive
           and non-zero.
 </ul>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>    The move mode for the track.
    <b>Possible returned values</b>:
     <br><tt>CATFitSpeedMode</tt> for speed based mode
     <br><tt>CATFitTimeMode</tt> for time based mode
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      <br> S_OK   : if the Move Mode value was correctly set
     <br> E_FAIL : if the Move Mode value was not correctly set
</dl>
</dl>
<a name="SetSpeed"></a><a name="SetSpeed(double)"></a> <dt> o <b>SetSpeed</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSpeed</b>(<td>double <td><tt>iSpeed</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the speed of the track.
 <b>Role:</b> A track defines the motion of an object along a trajectory.  The 
 rate at which the object moves is specified by the speed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSpeed</tt>
   <dd>    The value of the speed of the track.  It should be greater than zero 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <br> S_OK   : if the Speed value was correctly set
     <br> E_FAIL : if the Speed Mode value was not correctly set
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATITrack.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFittingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
