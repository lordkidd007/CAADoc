<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATIAApplicationFrame Interface CATI3DCompass</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../CATIAApplicationFrame.htm">This Framework</a>  <a href="interface_CATICafDocumentationSettingAtt_185006.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>CATIAApplicationFrame Interface CATI3DCompass</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATI3DCompass
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI3DCompass</b>
</p>
<p>
<b><i> Interface to access and manipulate the compass through software coding.</i></b><br>

 <br><b>Role</b>: The compass object implements the CATI3DCompass interface. 
 To retrieve a pointer to the compass object that implements CATI3DCompass
 use <a href="../ApplicationFrame/class_CATFrmEditor_29348.htm#GetCompass">CATFrmEditor.GetCompass</a> method.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetBeginDragPreviewEvent(CATCallbackEvent*)"><b>GetBeginDragPreviewEvent</b></a>(CATCallbackEvent*)
<dd>   Retrieves the event emitted when compass starts being moved to another location.
 <dt> o 
    <a href="#GetBeginMoveEvent(CATCallbackEvent*)"><b>GetBeginMoveEvent</b></a>(CATCallbackEvent*)
<dd>  Retrieves the event emitted when user start dragging the compass.
 <dt> o 
    <a href="#GetCurrentTransformation(CATMathTransformation**)"><b>GetCurrentTransformation</b></a>(CATMathTransformation**)
<dd>  Retrieves the current compass transformation.
 <dt> o 
    <a href="#GetDragPreviewEvent(CATCallbackEvent*)"><b>GetDragPreviewEvent</b></a>(CATCallbackEvent*)
<dd>   Retrieves the event emitted when compass is being moved to another location.
 <dt> o 
    <a href="#GetDragPreviewPosition(CATPathElement**,CATMathAxis**)"><b>GetDragPreviewPosition</b></a>(CATPathElement**,CATMathAxis**)
<dd>   Retreive compass preview informations.
 <dt> o 
    <a href="#GetEndDragPreviewEvent(CATCallbackEvent*)"><b>GetEndDragPreviewEvent</b></a>(CATCallbackEvent*)
<dd>  Retrieves the event emitted when compass ends being moved to another location.
 <dt> o 
    <a href="#GetEndMoveEvent(CATCallbackEvent*)"><b>GetEndMoveEvent</b></a>(CATCallbackEvent*)
<dd>   Retrieves the event emitted when user finish dragging the compass.
 <dt> o 
    <a href="#GetEventPublisher(CATBaseUnknown**)"><b>GetEventPublisher</b></a>(CATBaseUnknown**)
<dd>  Retreives the compass event publisher.
 <dt> o 
    <a href="#GetMoveEvent(CATCallbackEvent*)"><b>GetMoveEvent</b></a>(CATCallbackEvent*)
<dd>   Retrieves the event emitted when user is dragging the compass.
 <dt> o 
    <a href="#GetPosition(CATMathAxis*)"><b>GetPosition</b></a>(CATMathAxis*)
<dd>  Retreive the position and orientation of the compass.
 <dt> o 
    <a href="#GetPrivilegedPlane(int*)"><b>GetPrivilegedPlane</b></a>(int*)
<dd>  Retreives the privileged plane definition.
 <dt> o 
    <a href="#GetPrivilegedPlaneModifiedEvent(CATCallbackEvent*)"><b>GetPrivilegedPlaneModifiedEvent</b></a>(CATCallbackEvent*)
<dd>  Retreives the privileged plane modification event.
 <dt> o 
    <a href="#GetState(CATCompassState*)"><b>GetState</b></a>(CATCompassState*)
<dd>  Retrieve the state of the compass.
 <dt> o 
    <a href="#GetVisibility(int*)"><b>GetVisibility</b></a>(int*)
<dd>  Retrieve the compass visibility.
 <dt> o 
    <a href="#Hide()"><b>Hide</b></a>()
<dd>  Hides the compass from the screen.
 <dt> o 
    <a href="#SetPosition(CATMathAxis*)"><b>SetPosition</b></a>(CATMathAxis*)
<dd>  Sets the position and orientation of the compass.
 <dt> o 
    <a href="#SetPrivilegedPlane(int*)"><b>SetPrivilegedPlane</b></a>(int*)
<dd>  Sets the privileged plane definition.
 <dt> o 
    <a href="#SetState(CATCompassState*)"><b>SetState</b></a>(CATCompassState*)
<dd>  Sets the state of the compass.
 <dt> o 
    <a href="#Show()"><b>Show</b></a>()
<dd>  Shows the compass on the screen.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetBeginDragPreviewEvent"></a><a name="GetBeginDragPreviewEvent(CATCallbackEvent*)"></a> <dt> o <b>GetBeginDragPreviewEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetBeginDragPreviewEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oBeginDragPreviewEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retrieves the event emitted when compass starts being moved to another location.
 <br><b>Role</b>: This event is emitted at the first mouse interaction
 when user is moving the compass to another location by dragging its center.
 This event is not emitted when select command is running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBeginDragPreviewEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetBeginMoveEvent"></a><a name="GetBeginMoveEvent(CATCallbackEvent*)"></a> <dt> o <b>GetBeginMoveEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetBeginMoveEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oBeginMoveEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retrieves the event emitted when user start dragging the compass.
 <br><b>Role</b>: This event is emitted at the first mouse interaction
 after clicking one of the compass handle. Subscribe to this event to
 react on compass start of manipulation by the user.
 This event is not emitted when select command is running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBeginMoveEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetCurrentTransformation"></a><a name="GetCurrentTransformation(CATMathTransformation**)"></a> <dt> o <b>GetCurrentTransformation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetCurrentTransformation</b>(<td><a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation**</a> <td><tt>oTransformation</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retrieves the current compass transformation.
 <br><b>Role</b>: This method should be called in the callback method of the BeginMove, Move
 or EndMove event to know the current transformation that is being applied to the compass.
 The current transformation is computed between the current position (when Move event is sent)
 and the initial position (when BeginMove event is sent). The returned value can be modified
 to override the standard behaviour of the compass, thus permitting to take into account an
 applicative displacement constraint.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTransformation</tt>
   <dd>   The current compass transformation.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
<a name="GetDragPreviewEvent"></a><a name="GetDragPreviewEvent(CATCallbackEvent*)"></a> <dt> o <b>GetDragPreviewEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetDragPreviewEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oDragPreviewEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retrieves the event emitted when compass is being moved to another location.
 <br><b>Role</b>: This event is emitted at the second and every following
 mouse interaction when user is moving the compass to another location by dragging 
 its center.
 This event is not emitted when select command is running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDragPreviewEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetDragPreviewPosition"></a><a name="GetDragPreviewPosition(CATPathElement**,CATMathAxis**)"></a> <dt> o <b>GetDragPreviewPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetDragPreviewPosition</b>(<td><a href="../VisualizationBase/class_CATPathElement_39932.htm">CATPathElement**</a> <td><tt>oElementUnder</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathAxis_24327.htm">CATMathAxis**</a> <td><tt>oPreviewPosition</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retreive compass preview informations.
 <br><b>Role</b>: This method should be called in the callback method of the
 BeginDragPreview, DragPreview and EndDragPreview events to retrieve the current
 preview position of the compass and, if any, the current model object under the mouse.
 The preview position of the compass can be modified thus allowing application to 
 implement such behaviour as compass snapping to the object that is under the mouse.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElementUnder</tt>
   <dd>   A pointer to a </dd>
<a href="../VisualizationBase/class_CATPathElement_39932.htm">CATPathElement</a> representing the model objects under the mouse 
    <dt><tt> oPreviewPosition</tt>
   <dd>   A pointer to the current preview position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
<a name="GetEndDragPreviewEvent"></a><a name="GetEndDragPreviewEvent(CATCallbackEvent*)"></a> <dt> o <b>GetEndDragPreviewEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetEndDragPreviewEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oEndDragPreviewEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retrieves the event emitted when compass ends being moved to another location.
 <br><b>Role</b>: This event is emitted when the mouse button is released after
 dragging the compass to another location by using its center.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oEndDragPreviewEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetEndMoveEvent"></a><a name="GetEndMoveEvent(CATCallbackEvent*)"></a> <dt> o <b>GetEndMoveEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetEndMoveEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oEndMoveEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retrieves the event emitted when user finish dragging the compass.
 <br><b>Role</b>: This event is emitted when the mouse button is released after
 dragging one of the compass handle. Subscribe to this event to react compass end 
 of manipulation by the user.
 This event is not emitted when select command is running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oEndMoveEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetEventPublisher"></a><a name="GetEventPublisher(CATBaseUnknown**)"></a> <dt> o <b>GetEventPublisher</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetEventPublisher</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown**</a> <td><tt>oCompassEventPublisher</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retreives the compass event publisher.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCompassEventPublisher</tt>
   <dd> The event publisher used by the compass to publish events.
 For usage of event publisher see  </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetMoveEvent"></a><a name="GetMoveEvent(CATCallbackEvent*)"></a> <dt> o <b>GetMoveEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetMoveEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oMoveEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retrieves the event emitted when user is dragging the compass.
 <br><b>Role</b>: This event is emitted at the second and every following
 mouse interaction when user is dragging one of the compass handle. Subscribe 
 to this event to react on compass direct manipulation by the user.
 This event is not emitted when select command is running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMoveEvent</tt>
   <dd>   A pointer to the published event. See </dd>
<a href="../System/class_CATEventSubscriber_67510.htm#AddCallback">CATEventSubscriber.AddCallback</a> 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
</dl>
</dl>
</dl>
<a name="GetPosition"></a><a name="GetPosition(CATMathAxis*)"></a> <dt> o <b>GetPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetPosition</b>(<td><a href="../Mathematics/class_CATMathAxis_24327.htm">CATMathAxis*</a> <td><tt>oAxis</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retreive the position and orientation of the compass.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAxis</tt>
   <dd> The returned compass position and orientation in the absolute
 coordinates systems.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="GetPrivilegedPlane"></a><a name="GetPrivilegedPlane(int*)"></a> <dt> o <b>GetPrivilegedPlane</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetPrivilegedPlane</b>(<td>int* <td><tt>oPrivilegedPlane</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retreives the privileged plane definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPrivilegedPlane</tt>
   <dd> The oPrivileged plane value is equal to either
  <dl>
  <dt><tt>1</tt><dd> if the privileged plane is defined as (X,Y) or (U,V)
  <dt><tt>2</tt><dd> if the privileged plane is defined as (Y,Z) or (V,W)
  <dt><tt>3</tt><dd> if the privileged plane is defined as (Z,X) or (W,U)
  </dl>
 <br> To get the privileged plane coordinates use the 
   </dd>
<a href="../CATIAApplicationFrame/interface_CATI3DCompass_32350.htm#GetPosition">CATI3DCompass.GetPosition</a> method. 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
</dl>
<a name="GetPrivilegedPlaneModifiedEvent"></a><a name="GetPrivilegedPlaneModifiedEvent(CATCallbackEvent*)"></a> <dt> o <b>GetPrivilegedPlaneModifiedEvent</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetPrivilegedPlaneModifiedEvent</b>(<td><a href="../ObjectModelerSystem/typedef_CATCallbackEvent_51600.htm">CATCallbackEvent*</a> <td><tt>oPrivilegedPlaneModifiedEvent</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retreives the privileged plane modification event.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPrivilegedPlaneModifiedEvent</tt>
   <dd> The oProvilegedPlaneModifiedEvent is emitted each time the privileged
 plane definition changes. This might happen through code or user interaction.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="GetState"></a><a name="GetState(CATCompassState*)"></a> <dt> o <b>GetState</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetState</b>(<td><a href="../CATIAApplicationFrame/enum_CATCompassState_46577.htm">CATCompassState*</a> <td><tt>oCompassState</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retrieve the state of the compass.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCompassState</tt>
   <dd> The compass state can either be:
   <dl>
   <dt><tt>CatCompass</tt><dd> if the compass is docked on top right 
     screen corner and manipulates viewpoint.
   <dt><tt>CatGlider</tt><dd> if the compass is located in the 3D scene and
     manipulates objects.
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="GetVisibility"></a><a name="GetVisibility(int*)"></a> <dt> o <b>GetVisibility</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetVisibility</b>(<td>int* <td><tt>oVisible</tt>) = 0  </table></dt>
<dl>
  <dd>
 Retrieve the compass visibility.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVisible</tt>
   <dd>   Paremeter is set to TRUE if compass is visible, FALSE otherwise
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="Hide"></a><a name="Hide()"></a> <dt> o <b>Hide</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Hide</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Hides the compass from the screen.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> S_FALSE if compass was already hidden
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="SetPosition"></a><a name="SetPosition(CATMathAxis*)"></a> <dt> o <b>SetPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetPosition</b>(<td> const <a href="../Mathematics/class_CATMathAxis_24327.htm">CATMathAxis*</a> <td><tt>iAxis</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the position and orientation of the compass.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAxis</tt>
   <dd> New position and orientation of the compass in the absolute
 coordinates system. If compass is docked in the top right corner
 of the screen (i.e. GetState returns CatCompass), only the orientation
 is taken into acount and the </dd>
<a href="../Mathematics/class_CATMathAxis_24327.htm">CATMathAxis</a> origin is ignored. 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
</dl>
<a name="SetPrivilegedPlane"></a><a name="SetPrivilegedPlane(int*)"></a> <dt> o <b>SetPrivilegedPlane</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetPrivilegedPlane</b>(<td>int* <td><tt>iPrivilegedPlane</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the privileged plane definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPrivilegedPlane</tt>
   <dd> The privileged plane to set.
  <br>
  <b>Legal values</b> It can be set to either :
  <dl>
  <dt><tt>1</tt><dd> to define the privileged plane as (X,Y) or (U,V)
  <dt><tt>2</tt><dd> to define the privileged plane as (Y,Z) or (V,W)
  <dt><tt>3</tt><dd> to define the privileged plane as (Z,X) or (W,U)
  </dl>
 <br> To set the privileged plane coordinates use the
  </dd>
<a href="../CATIAApplicationFrame/interface_CATI3DCompass_32350.htm#SetPosition">CATI3DCompass.SetPosition</a> method. 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_INVALIDARG if argument is NULL or pointing to an illegal value
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
</dl>
<a name="SetState"></a><a name="SetState(CATCompassState*)"></a> <dt> o <b>SetState</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetState</b>(<td> const <a href="../CATIAApplicationFrame/enum_CATCompassState_46577.htm">CATCompassState*</a> <td><tt>iCompassState</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the state of the compass.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCompassState</tt>
   <dd> The state to set.
  <br>
  <b>Legal values</b> It can be set to either :
  <dl>
  <dt><tt>CatCompass</tt><dd> to dock the compass on top right screen corner.
  <dt><tt>CatGlider</tt><dd> to position the compass in the 3D scene. 
  Compass is positioned at the origin of the absolute axis system, 
  while its orientation is kept.
  </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<a name="Show"></a><a name="Show()"></a> <dt> o <b>Show</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Show</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Shows the compass on the screen.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if operation is successful
   <br> S_FALSE if compass was already visible
   <br> E_FAIL if compass representation is destroyed or being destroyed
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI3DCompass.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATIAApplicationFrame</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
