<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowHow Interface CATIRuleBase</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../KnowHow.htm">This Framework</a>  <a href="interface_CATIRule_12410.htm">Previous</a>  <a href="interface_CATIRuleBaseComponent_89947.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>KnowHow Interface CATIRuleBase</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../KnowHow/interface_CATIGenericRuleBaseComponent_159420.htm">KnowHow.CATIGenericRuleBaseComponent</a>
        |
        +---<a href="../KnowHow/interface_CATIRuleSet_23867.htm">KnowHow.CATIRuleSet</a>
          |
          +---CATIRuleBase
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIRuleBase</b>
</p>
<p>
<b><i> Interface dedicated to the rulebase behaviour.</i></b><br>


 <b>Role</b> Entry point to the inference engine of Knowledge Expert.
 This interface defines methods to feed the inference engine with facts objects, or roots of facts objects.
 A fact is an object seen through the interface <a href="../KnowledgeInterfaces/interface_CATIInstance_28866.htm">CATIInstance</a>. A root of facts is an entry point to scan a hierarchy of objects providing facts (it has to implement CATIInstancesProvider).
 The rulebase can either update or query the root of facts for facts. This interface also
 provides methods for being solved i.e. checking the checks and executing the rules.
 It also provides methods for importing external rulesets, rules and checks.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddFact(CATIInstance_var&amp;)"><b>AddFact</b></a>(CATIInstance_var&amp;)
<dd>  Adds a fact.
 <dt> o 
    <a href="#AddListOfInstances(CATListValCATBaseUnknown_var&amp;)"><b>AddListOfInstances</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>  Adds a list of facts to the rule base.
 <dt> o 
    <a href="#AddRootOfFacts(CATBaseUnknown_var)"><b>AddRootOfFacts</b></a>(CATBaseUnknown_var)
<dd>  Adds a root for the search of the facts.
 <dt> o 
    <a href="#GetRootsOfFacts()"><b>GetRootsOfFacts</b></a>()
<dd>  Gets a copy of the set of facts roots.
 <dt> o 
    <a href="#GetRuleBaseOwner()"><b>GetRuleBaseOwner</b></a>()
<dd>  Returns the owner of the relation set the rulebase belongs to.
 <dt> o 
    <a href="#GetSolveMode()"><b>GetSolveMode</b></a>()
<dd>  Gets the solve mode of the rulebase.
 <dt> o 
    <a href="#Import(CATUnicodeString&amp;,boolean)"><b>Import</b></a>(CATUnicodeString&amp;,boolean)
<dd>  Imports in the rulebase, the contents of the rulebase of another document.
 <dt> o 
    <a href="#ImportRuleBase(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)"><b>ImportRuleBase</b></a>(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)
<dd>  Imports in the rulebase the content of another rulebase.
 <dt> o 
    <a href="#ImportWithLink(CATBaseUnknown_var,boolean)"><b>ImportWithLink</b></a>(CATBaseUnknown_var,boolean)
<dd>  Imports from the rulebase, the contents of this rulebase to another document.
 <dt> o 
    <a href="#ReloadFact(CATIInstance_var&amp;)"><b>ReloadFact</b></a>(CATIInstance_var&amp;)
<dd>  Reloads a fact.
 <dt> o 
    <a href="#RemoveFact(CATIInstance_var&amp;)"><b>RemoveFact</b></a>(CATIInstance_var&amp;)
<dd>  Removes a fact.
 <dt> o 
    <a href="#RemoveRootOfFacts(CATBaseUnknown_var)"><b>RemoveRootOfFacts</b></a>(CATBaseUnknown_var)
<dd>  Removes a facts root.
 <dt> o 
    <a href="#SetOwner(CATBaseUnknown_var)"><b>SetOwner</b></a>(CATBaseUnknown_var)
<dd>  Sets the owner of the rulebase.
 <dt> o 
    <a href="#SetSolveMode(CATExpertSolveModeEnum::SolveModeEnum)"><b>SetSolveMode</b></a>(CATExpertSolveModeEnum::SolveModeEnum)
<dd>  Sets the solve mode of the rulebase.
 <dt> o 
    <a href="#Solve(int)"><b>Solve</b></a>(int)
<dd>  Solves the rule base.
 <dt> o 
    <a href="#SolveWithoutUpdate(int)"><b>SolveWithoutUpdate</b></a>(int)
<dd>  Solves the rule base.
 <dt> o 
    <a href="#VolatileCopy()"><b>VolatileCopy</b></a>()
<dd>  Returns a volatile (not persistent), non changeable copy of the current rulebase.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddFact"></a><a name="AddFact(CATIInstance_var&amp;)"></a> <dt> o <b>AddFact</b>

<dt>  <table><tr><td>  public virtual int  <b>AddFact</b>(<td> const CATIInstance_var&amp; <td><tt>spFact</tt>)=0   </table></dt>
<dl>
  <dd>
 Adds a fact.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  true if this function was successfully performed.
</dl>
</dl>
<a name="AddListOfInstances"></a><a name="AddListOfInstances(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>AddListOfInstances</b>

<dt>  <table><tr><td>  public virtual int  <b>AddListOfInstances</b>(<td>CATListValCATBaseUnknown_var&amp; <td><tt>ilFacts</tt>)=0   </table></dt>
<dl>
  <dd>
 Adds a list of facts to the rule base.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ilFacts</tt>
   <dd> a list of facts.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  true if the add was successfully made.
</dl>
</dl>
<a name="AddRootOfFacts"></a><a name="AddRootOfFacts(CATBaseUnknown_var)"></a> <dt> o <b>AddRootOfFacts</b>

<dt>  <table><tr><td>  public virtual void  <b>AddRootOfFacts</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown_var</a> <td><tt>spRootfacts</tt>) = 0  </table></dt>
<dl>
  <dd>
 Adds a root for the search of the facts.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spRootfacts</tt>
   <dd> a facts root.</dd>
</dl>
</dl>
</dl>
<a name="GetRootsOfFacts"></a><a name="GetRootsOfFacts()"></a> <dt> o <b>GetRootsOfFacts</b>

<dt>  <table><tr><td>  public virtual CATListValCATBaseUnknown_var*  <b>GetRootsOfFacts</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Gets a copy of the set of facts roots.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  a facts root.
</dl>
</dl>
<a name="GetRuleBaseOwner"></a><a name="GetRuleBaseOwner()"></a> <dt> o <b>GetRuleBaseOwner</b>

<dt>  <table><tr><td>  public virtual <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject*</a>  <b>GetRuleBaseOwner</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Returns the owner of the relation set the rulebase belongs to.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  a spec object.
</dl>
</dl>
<a name="GetSolveMode"></a><a name="GetSolveMode()"></a> <dt> o <b>GetSolveMode</b>

<dt>  <table><tr><td>  public virtual CATExpertSolveModeEnum::SolveModeEnum  <b>GetSolveMode</b>(<td>)=0  </table></dt>
<dl>
  <dd>
 Gets the solve mode of the rulebase.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  solve mode (
<a href="../KnowHow/class_CATExpertSolveModeEnum_99126.htm#SolveModeEnum">CATExpertSolveModeEnum.SolveModeEnum</a> ).
</dl>
</dl>
<a name="Import"></a><a name="Import(CATUnicodeString&amp;,boolean)"></a> <dt> o <b>Import</b>

<dt>  <table><tr><td>  public virtual void  <b>Import</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iPath</tt>,<tr><td></td><td>boolean <td><tt>iForce</tt><td><tt>= TRUE</tt>)=0  </table></dt>
<dl>
  <dd>
 Imports in the rulebase, the contents of the rulebase of another document.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd>  full name of the document. </dd>
    <dt><tt> iForce</tt>
   <dd> true if the import should replace objects with the same name.</dd>
</dl>
</dl>
</dl>
<a name="ImportRuleBase"></a><a name="ImportRuleBase(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)"></a> <dt> o <b>ImportRuleBase</b>

<dt>  <table><tr><td>  public virtual void  <b>ImportRuleBase</b>(<td> const CATIRuleBase_var&amp; <td><tt>spImportedRulebase</tt>,<tr><td></td><td><a href="../KnowHow/typedef_conflictingImportFunctionPtr_168422.htm">conflictingImportFunctionPtr</a> <td><tt>iFonction</tt><td><tt>= NULL</tt>)=0  </table></dt>
<dl>
  <dd>
 Imports in the rulebase the content of another rulebase.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spImportedRulebase</tt>
   <dd> a rulebase. </dd>
    <dt><tt> iFonction</tt>
   <dd> a function triggered on the conflicting object.</dd>
</dl>
</dl>
</dl>
<a name="ImportWithLink"></a><a name="ImportWithLink(CATBaseUnknown_var,boolean)"></a> <dt> o <b>ImportWithLink</b>

<dt>  <table><tr><td>  public virtual void  <b>ImportWithLink</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown_var</a> <td><tt>spRootfacts</tt>,<tr><td></td><td>boolean <td><tt>iForce</tt><td><tt>= TRUE</tt>)=0  </table></dt>
<dl>
  <dd>
 Imports from the rulebase, the contents of this rulebase to another document.
 Creates a linked rulebase.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spRootfacts</tt>
   <dd>  Root of the document. </dd>
    <dt><tt> iForce</tt>
   <dd> true if the import should replace objects with the same name.</dd>
</dl>
</dl>
</dl>
<a name="ReloadFact"></a><a name="ReloadFact(CATIInstance_var&amp;)"></a> <dt> o <b>ReloadFact</b>

<dt>  <table><tr><td>  public virtual void  <b>ReloadFact</b>(<td> const CATIInstance_var&amp; <td><tt>spFact</tt>)=0   </table></dt>
<dl>
  <dd>
 Reloads a fact.

 Forces the inference engine to take again a fact into account (removes it and
 adds it a second time).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.</dd>
</dl>
</dl>
</dl>
<a name="RemoveFact"></a><a name="RemoveFact(CATIInstance_var&amp;)"></a> <dt> o <b>RemoveFact</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveFact</b>(<td> const CATIInstance_var&amp; <td><tt>spFact</tt>)=0   </table></dt>
<dl>
  <dd>
 Removes a fact.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.</dd>
</dl>
</dl>
</dl>
<a name="RemoveRootOfFacts"></a><a name="RemoveRootOfFacts(CATBaseUnknown_var)"></a> <dt> o <b>RemoveRootOfFacts</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveRootOfFacts</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown_var</a> <td><tt>spRootfacts</tt>) = 0  </table></dt>
<dl>
  <dd>
 Removes a facts root.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spRootfacts</tt>
   <dd> a facts root.</dd>
</dl>
</dl>
</dl>
<a name="SetOwner"></a><a name="SetOwner(CATBaseUnknown_var)"></a> <dt> o <b>SetOwner</b>

<dt>  <table><tr><td>  public virtual void  <b>SetOwner</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown_var</a> <td><tt>spSpecObject</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the owner of the rulebase.

 The owner is a spec object that provides for a container.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spSpecObject</tt>
   <dd> a spec object.</dd>
</dl>
</dl>
</dl>
<a name="SetSolveMode"></a><a name="SetSolveMode(CATExpertSolveModeEnum::SolveModeEnum)"></a> <dt> o <b>SetSolveMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetSolveMode</b>(<td>CATExpertSolveModeEnum::SolveModeEnum <td><tt>iSolveMode</tt>)=0  </table></dt>
<dl>
  <dd>
 Sets the solve mode of the rulebase.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSolveMode</tt>
   <dd> solve mode (</dd>
<a href="../KnowHow/class_CATExpertSolveModeEnum_99126.htm#SolveModeEnum">CATExpertSolveModeEnum.SolveModeEnum</a> ).
</dl>
</dl>
</dl>
<a name="Solve"></a><a name="Solve(int)"></a> <dt> o <b>Solve</b>

<dt>  <table><tr><td>  public virtual int  <b>Solve</b>(<td>int <td><tt>iIsSolveNonOptimized</tt><td><tt>= 0</tt>)=0   </table></dt>
<dl>
  <dd>
 Solves the rule base.

 This method first solves the checks and then applies the rules of the rule base over
 the set of facts known by the rule base.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsSolveNonOptimized</tt>
   <dd> true for the non optimized mode, else false.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of rules triggered.
</dl>
</dl>
<a name="SolveWithoutUpdate"></a><a name="SolveWithoutUpdate(int)"></a> <dt> o <b>SolveWithoutUpdate</b>

<dt>  <table><tr><td>  public virtual int  <b>SolveWithoutUpdate</b>(<td>int <td><tt>iIsSolveNonOptimized</tt><td><tt>= 0</tt>)=0   </table></dt>
<dl>
  <dd>
 Solves the rule base.

 This method first solves the checks and then applies the rules of the rule base over
 the set of facts known by the rule base.
 This method doesn't make a geometrical update.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsSolveNonOptimized</tt>
   <dd> true for the non optimized mode, else false.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of rules triggered.
</dl>
</dl>
<a name="VolatileCopy"></a><a name="VolatileCopy()"></a> <dt> o <b>VolatileCopy</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowHow/interface_CATIRuleBase_27828.htm">CATIRuleBase_var</a>  <b>VolatileCopy</b>(<td>)=0  </table></dt>
<dl>
  <dd>
 Returns a volatile (not persistent), non changeable copy of the current rulebase.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A volatile copy.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIRuleBase.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATKWERule</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
