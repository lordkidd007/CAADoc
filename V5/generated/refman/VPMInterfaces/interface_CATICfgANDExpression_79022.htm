<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface CATICfgANDExpression</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="interface_CATIAVPMUEVersionning_86385.htm">Previous</a>  <a href="interface_CATICfgAttachable_56580.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VPMInterfaces Interface CATICfgANDExpression</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATICfgANDExpression
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICfgANDExpression</b>
</p>
<p>
<b><i> Class to manage operations on ANDExpressions.</i></b><br>

 <b>Role</b>: A ANDexpression is a logical expression constituted of one
 or several Normal Values. The Normal Values are linked with the AND logical operator. 
 A ANDexpression is used in the context of Configuration.
 It serves to give an effectivitity to a part Instance, based on ranges, dates,and milestones.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_CATICfgNormalValue_64632.htm">CATICfgNormalValue</a>, <a href="../VPMInterfaces/interface_CATICfgORExpression_73020.htm">CATICfgORExpression</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Add(CATICfgNormalValue_var&amp;)"><b>Add</b></a>(CATICfgNormalValue_var&amp;)
<dd>  Add a new NormalValue to an ANDExpression.
 <dt> o 
    <a href="#ComputeAND(CATICfgANDExpression_var&amp;,CATICfgANDExpression_var&amp;)"><b>ComputeAND</b></a>(CATICfgANDExpression_var&amp;,CATICfgANDExpression_var&amp;)
<dd>  Concatenate two ANDExpressions.
 <dt> o 
    <a href="#CopyMe(CATICfgANDExpression_var&amp;)"><b>CopyMe</b></a>(CATICfgANDExpression_var&amp;)
<dd>  Copy an ANDExpression.
 <dt> o 
    <a href="#Dump()"><b>Dump</b></a>()
<dd>  Dump informations on an ANDExpression.
 <dt> o 
    <a href="#Empty()"><b>Empty</b></a>()
<dd>  Clean the ANDExpression by Removing Normal Values.
 <dt> o 
    <a href="#GetNbOfValues(long&amp;)"><b>GetNbOfValues</b></a>(long&amp;)
<dd>  Get the number of Normal Values contained in a  ANDExpression.
 <dt> o 
    <a href="#GetValues(CATListOfCATICfgNormalValue_var&amp;)"><b>GetValues</b></a>(CATListOfCATICfgNormalValue_var&amp;)
<dd>  Get the Normal Values contained in an  ANDExpression.
 <dt> o 
    <a href="#Inverse(CATICfgORExpression_var&amp;)"><b>Inverse</b></a>(CATICfgORExpression_var&amp;)
<dd>  Inverse an ANDExpression.
 <dt> o 
    <a href="#IsEqual(CATICfgANDExpression_var&amp;)"><b>IsEqual</b></a>(CATICfgANDExpression_var&amp;)
<dd>  Compare two ANDExpressions.
 <dt> o 
    <a href="#SeekForNV(CATICfgNormalValue_var&amp;)"><b>SeekForNV</b></a>(CATICfgNormalValue_var&amp;)
<dd>  Search a normal Value in an ANDExpression.
 <dt> o 
    <a href="#Simplify(CATICfgANDExpression_var&amp;)"><b>Simplify</b></a>(CATICfgANDExpression_var&amp;)
<dd>  Simplify an ANDExpression.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Add"></a><a name="Add(CATICfgNormalValue_var&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public virtual void  <b>Add</b>(<td> const CATICfgNormalValue_var&amp; <td><tt>iValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add a new NormalValue to an ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd>   The Normal Value to add.</dd>
</dl>
</dl>
</dl>
<a name="ComputeAND"></a><a name="ComputeAND(CATICfgANDExpression_var&amp;,CATICfgANDExpression_var&amp;)"></a> <dt> o <b>ComputeAND</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>ComputeAND</b>(<td> const CATICfgANDExpression_var&amp; <td><tt>iANDExp</tt>,<tr><td></td><td>CATICfgANDExpression_var&amp; <td><tt>oANDExp</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Concatenate two ANDExpressions. Perform simplifications if possible.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iANDExp</tt>
   <dd>   ANDexpression to compare with "this". 
 </dd>
    <dt><tt> oANDExp</tt>
   <dd>   Computed ANDexpression, result of concatenation and simplifications.</dd>
</dl>
</dl>
</dl>
<a name="CopyMe"></a><a name="CopyMe(CATICfgANDExpression_var&amp;)"></a> <dt> o <b>CopyMe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>CopyMe</b>(<td>CATICfgANDExpression_var&amp; <td><tt>oANDExpression</tt>) = 0  </table></dt>
<dl>
  <dd>
 Copy an ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oANDExpression</tt>
   <dd>   Copy of the ANDExpression.</dd>
</dl>
</dl>
</dl>
<a name="Dump"></a><a name="Dump()"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public virtual void  <b>Dump</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Dump informations on an ANDExpression.
</dl>
<a name="Empty"></a><a name="Empty()"></a> <dt> o <b>Empty</b>

<dt>  <table><tr><td>  public virtual void  <b>Empty</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Clean the ANDExpression by Removing Normal Values.
</dl>
<a name="GetNbOfValues"></a><a name="GetNbOfValues(long&amp;)"></a> <dt> o <b>GetNbOfValues</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbOfValues</b>(<td>long&amp; <td><tt>oNbValues</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Get the number of Normal Values contained in a  ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbValues</tt>
   <dd>   Number of  Normal Values.</dd>
</dl>
</dl>
</dl>
<a name="GetValues"></a><a name="GetValues(CATListOfCATICfgNormalValue_var&amp;)"></a> <dt> o <b>GetValues</b>

<dt>  <table><tr><td>  public virtual void  <b>GetValues</b>(<td><a href="../VPMInterfaces/class_CATListOfCATICfgNormalValue_var_188864.htm">CATListOfCATICfgNormalValue_var&amp;</a> <td><tt>oList</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get the Normal Values contained in an  ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oList</tt>
   <dd>   List Of Normal Values.</dd>
</dl>
</dl>
</dl>
<a name="Inverse"></a><a name="Inverse(CATICfgORExpression_var&amp;)"></a> <dt> o <b>Inverse</b>

<dt>  <table><tr><td>  public virtual void  <b>Inverse</b>(<td>CATICfgORExpression_var&amp; <td><tt>oORExp</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Inverse an ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oORExpL</tt>
   <dd>   Resulting ORExpression. To Remind: !(B AND C) = !B OR !C.</dd>
</dl>
</dl>
</dl>
<a name="IsEqual"></a><a name="IsEqual(CATICfgANDExpression_var&amp;)"></a> <dt> o <b>IsEqual</b>

<dt>  <table><tr><td>  public virtual int  <b>IsEqual</b>(<td> const CATICfgANDExpression_var&amp; <td><tt>iANDExpression</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Compare two ANDExpressions.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     An integer. 
 <br><b>Legal values </b>: 0 means EQUAL,  1 means DIFFERENT. 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iANDExpression</tt>
   <dd>   ANDExpression to compare with "this".</dd>
</dl>
</dl>
</dl>
<a name="SeekForNV"></a><a name="SeekForNV(CATICfgNormalValue_var&amp;)"></a> <dt> o <b>SeekForNV</b>

<dt>  <table><tr><td>  public virtual int  <b>SeekForNV</b>(<td> const CATICfgNormalValue_var&amp; <td><tt>iNV</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Search a normal Value in an ANDExpression.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     An integer.
 <br><b>Legal values </b>: 0 = Found ,  1 = not Found. 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNV</tt>
   <dd>   Normal Value to search.</dd>
</dl>
</dl>
</dl>
<a name="Simplify"></a><a name="Simplify(CATICfgANDExpression_var&amp;)"></a> <dt> o <b>Simplify</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Simplify</b>(<td>CATICfgANDExpression_var&amp; <td><tt>oANDExp</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Simplify an ANDExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oANDExp</tt>
   <dd>   Simplified ANDexpression. For example R(1,10) & R(3,8) & R(4,20) gives  R(4,8).</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICfgANDExpression.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
