<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIObjectInfo</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VPMInterfaces.htm" href="../VPMInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VPMInterfaces";	}
		function getCurrentObjectName() { 
 	return "ENOVIObjectInfo"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VPMInterfaces Interface ENOVIObjectInfo</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_ENOVIObjectInfo_22114','ENOVIObjectInfo','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>ENOVIObjectInfo</b>
</p>
<p>
<b><i> Interface to manage Object Info.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#IsAKindOf(CATUnicodeString&amp;)"><b>IsAKindOf</b></a>(CATUnicodeString&amp;)
<dd>  
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="IsAKindOf"></a><a name="IsAKindOf(CATUnicodeString&amp;)"></a> <dt> o <b>IsAKindOf</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsAKindOf</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R14

 This method allows you to test the inheritance of an object type against the 'iType' input
 parameter. For instance if you call 'object_info->IsAKindOf("ENOVIA_VPMItemInstance")' and
 'object_info' is an ENOVIObjectInfo for a customized ItemInstance type, it will return true.

 Note that using this method is deprecated, as it masks the method CATBaseUnknown::IsAKindOf(const char*)
 (because of C++ names visibility, the compiler always chooses ENOVIObjectInfo::IsAKindOf(const CATUnicodeString&)
 over CATBaseUnknown::IsAKindOf(const char*) ), and those 2 methods are very different behaviour:
  - CATBaseUnknown::IsAKindOf(const char*) tests the type of the ObjectInfo object itself (i.e. it will
      return false when called with the "ENOVIA_VPMItemInstance" string in the example above, but
      it will return true for "INFO_ENOVIA_ItemInstance" ),
  - ENOVIObjectInfo::IsAKindOf(const CATUnicodeString&) tests the type of the class of objects represented
      by the ObjectInfo (thus returning true for "ENOVIA_ItemInstance" and false for "INFO_ENOVIA_ItemInstance"
      in the previous example).

 Because those 2 methods have very different behaviour (and given that migrating to using exclusively
 CATBaseUnknown::IsAKindOf is easy), this method will be suppressed in a future release: you are advised
 to invoke CATBaseUnknown::IsAKindOf explicitly (it is not possible to rely on the compiler for this since
 C++ explicitly precludes it in this case!) as in the following code snippet:

                    ENOVIObjectInfo *object_info = ...
                    HRESULT rc = object_info->GetImpl()->CATBaseUnknown::IsAKindOf("INFO_ENOVIA_VPMItemInstance");

 which should replace code like:

                    object_info->IsAKindOf("ENOVIA_VPMItemInstance");

 A side benefit will be that a CATUnicodeString will not be implicitly constructed anymore when calling
 IsAKindOf with a literal C string.

 Also note that another difference between CATBaseUnknown::IsAKindOf and ENOVIObjectInfo::IsAKindOf is the
 possible return values:
            - CATBaseUnknown::IsAKindOf return S_OK or S_FALSE (works like a boolean value).
            - while ENOVIObjectInfo::IsAKindOf returns a failure (works like an ordinary HRESULT) to mean 'false'.

</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVIObjectInfo.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

