<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIAVaultAndDocFile</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VPMInterfaces.htm" href="../VPMInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VPMInterfaces";	}
		function getCurrentObjectName() { 
 	return "ENOVIAVaultAndDocFile"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VPMInterfaces Interface ENOVIAVaultAndDocFile</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_ENOVIAVaultAndDocFile_31803','ENOVIAVaultAndDocFile','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>ENOVIAVaultAndDocFile</b>
</p>
<p>
<b><i> Class to manage associations with Files in the Vault.</i></b><br>

 
 <b>Role</b>: This interface allows to manage attached files <ul>
              <li>get files from the Vault</li>
              <li>store attached files into the Vault</li>
              <li>get information about associated file and Vault </li></ul>

 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('ENOVIVaultDocument','','ENOVIVaultDocument') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AggregateData(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVIVaultDocument*&amp;)"><b>AggregateData</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVIVaultDocument*&amp;)
<dd>  creates a Vault document and puts it into the Vault
 <br> Returns E_FAIL if the Vault document was already created.
 <dt> o 
    <a href="#AttachVaultDocument(ENOVIVaultDocument*)"><b>AttachVaultDocument</b></a>(ENOVIVaultDocument*)
<dd>  associates current object with a Vault document.
 <dt> o 
    <a href="#DeleteData()"><b>DeleteData</b></a>()
<dd>  delete the Vault document attached to the current object.
 <dt> o 
    <a href="#IsDocumented()"><b>IsDocumented</b></a>()
<dd>  check if there is a vault item attached to the current object.
 <dt> o 
    <a href="#NotifyModifications()"><b>NotifyModifications</b></a>()
<dd>  allows to validate modifications done on the attached vault document

 <dt> o 
    <a href="#get_Data(ENOVIVaultDocument*&amp;)"><b>get_Data</b></a>(ENOVIVaultDocument*&amp;)
<dd>  get the Document File from the Vault.
 <dt> o 
    <a href="#get_FileName(CATUnicodeString&amp;)"><b>get_FileName</b></a>(CATUnicodeString&amp;)
<dd>  get name of the attached File stored in the vault .
 <dt> o 
    <a href="#get_Type(CATUnicodeString&amp;)"><b>get_Type</b></a>(CATUnicodeString&amp;)
<dd>  get the type of the attached file, i.
 <dt> o 
    <a href="#get_VaultName(CATUnicodeString&amp;)"><b>get_VaultName</b></a>(CATUnicodeString&amp;)
<dd>  get the Vault name where the attached file is stored.
 <dt> o 
    <a href="#put_VaultName(CATUnicodeString&amp;)"><b>put_VaultName</b></a>(CATUnicodeString&amp;)
<dd>  sets the name of the Vault where the vault documents will be stored for the current object
 
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AggregateData"></a><a name="AggregateData(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVIVaultDocument*&amp;)"></a> <dt> o <b>AggregateData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>AggregateData</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFullPathName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('ENOVIVaultDocument','ENOVIVaultDocument*&amp;')</script> <td><tt>oData</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 creates a Vault document and puts it into the Vault
 <br> Returns E_FAIL if the Vault document was already created.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFullPathName</tt>
   <dd> : the full path file name. </dd>
    <dt><tt> iType</tt>
   <dd>         : the type of the file (CATPart,CATDrawing,...)  </dd>
    <dt><tt> oData</tt>
   <dd>         : the created Vault document</dd>
</dl>
</dl>
</dl>
<a name="AttachVaultDocument"></a><a name="AttachVaultDocument(ENOVIVaultDocument*)"></a> <dt> o <b>AttachVaultDocument</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>AttachVaultDocument</b>(<td><script type="text/javascript"> activateLink('ENOVIVaultDocument','ENOVIVaultDocument*')</script> <td><tt>iVaultDocument</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 associates current object with a Vault document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVaultDocument</tt>
   <dd>  the Vault entity which will be attached to current instance</dd>
</dl>
</dl>
</dl>
<a name="DeleteData"></a><a name="DeleteData()"></a> <dt> o <b>DeleteData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>DeleteData</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 delete the Vault document attached to the current object.
</dl>
<a name="IsDocumented"></a><a name="IsDocumented()"></a> <dt> o <b>IsDocumented</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>IsDocumented</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 check if there is a vault item attached to the current object.<br>
 returns : <ul>
           <li>S_OK    if the object points at an attached file in the Vault</li>
           <li>S_FALSE if the object does not point at an attached file in the Vault</li>
           <li>E_FAIL  else </li></ul>
</dl>
<a name="NotifyModifications"></a><a name="NotifyModifications()"></a> <dt> o <b>NotifyModifications</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>NotifyModifications</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 allows to validate modifications done on the attached vault document

</dl>
<a name="get_Data"></a><a name="get_Data(ENOVIVaultDocument*&amp;)"></a> <dt> o <b>get_Data</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>get_Data</b>(<td><script type="text/javascript"> activateLink('ENOVIVaultDocument','ENOVIVaultDocument*&amp;')</script> <td><tt>oData</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 get the Document File from the Vault.
 returns E_FAIL if no vault document is attached to the current object.x
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oData</tt>
   <dd> : the VaultDocument extracted from the Vault.</dd>
</dl>
</dl>
</dl>
<a name="get_FileName"></a><a name="get_FileName(CATUnicodeString&amp;)"></a> <dt> o <b>get_FileName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>get_FileName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oFileName</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 get name of the attached File stored in the vault .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFileName</tt>
   <dd> the name of the attached File</dd>
</dl>
</dl>
</dl>
<a name="get_Type"></a><a name="get_Type(CATUnicodeString&amp;)"></a> <dt> o <b>get_Type</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>get_Type</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 get the type of the attached file, i.e. the input type of the AggregateData method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd> the type of the attached file.</dd>
</dl>
</dl>
</dl>
<a name="get_VaultName"></a><a name="get_VaultName(CATUnicodeString&amp;)"></a> <dt> o <b>get_VaultName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>get_VaultName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oVaultName</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 get the Vault name where the attached file is stored.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> VaultName</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="put_VaultName"></a><a name="put_VaultName(CATUnicodeString&amp;)"></a> <dt> o <b>put_VaultName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>put_VaultName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iVaultName</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 sets the name of the Vault where the vault documents will be stored for the current object
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVaultName</tt>
   <dd>  the Vault Name to be set.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVIAVaultAndDocFile.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

