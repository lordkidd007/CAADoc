<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVISubscriberEvent</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="interface_ENOVISubScribeGroupMod_96696.htm">Previous</a>  <a href="interface_ENOVIUEAutomaticInstanceCreation_207534.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VPMInterfaces Interface ENOVISubscriberEvent</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---ENOVISubscriberEvent
 </pre>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>ENOVISubscriberEvent</b>
</p>
<p>
<b><i> Class to subscribe easily to events , without knowledge of explicit CallBack Interfaces.</i></b><br>

 <b>Role</b>: a client has 2 ways to  subscribe to emission of events , by implementing 
 explicit event interfaces (EARLY mode) proposed by the Publishers, or to implement this generic interface (LATE mode). 
 In that case, the information about the event must be decoded by the client in its implementation...</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onKo</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   CallBack method when something was wrong for another subscriber.
 <dt> o 
    <a href="#onReceive(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onReceive</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Callback method to be implemented for subscription.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="onKo"></a><a name="onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onKo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onKo</b>(<td> const ENOVIEvent_var&amp; <td><tt>iEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>)=0  </table></dt>
<dl>
  <dd>
  CallBack method when something was wrong for another subscriber.
 <b>Role</b>: this method is called by the event manager
  when a next subscriber returns a failure code from it's callback method.
  In that case, all the previous subscribers are called on their onKo() method.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the onKo callback action
  
</dd>
</dl>
</dl>
</dl>
<a name="onReceive"></a><a name="onReceive(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onReceive</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onReceive</b>(<td> const ENOVIEvent_var&amp; <td><tt>iEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>)=0  </table></dt>
<dl>
  <dd>
  Callback method to be implemented for subscription.
 <b>Role</b>: this method is called by the event manager
  for each subscriber which has implemented it, when an event
  is published.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the callback action : <br>
   S_OK if the callback execution had no problem<br>
   E_FAIL if there was a problem <br>
   E_ACCESSDENIED if a veto is put on the event<br>
  it's a status on the event callback to be sent back to the publisher,
  it has not the same meaning than the return code which is related to
  the code execution...
</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVISubscriberEvent.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
