<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIEventManager</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="interface_ENOVIEventDefinition_81892.htm">Previous</a>  <a href="interface_ENOVIEventPlugin_52038.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VPMInterfaces Interface ENOVIEventManager</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---ENOVIEventManager
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>ENOVIEventManager</b>
</p>
<p>
<b><i> Interface to manage Event Model (subscription, information about events).</i></b><br>

 <b>Role</b>: <br> This class managers all the actions around the Enovia Event Model:<br>
 -Subscription/Unsubscription to/from events by clients.<br>
 -information about subscribers, raised events.<br>
 -information about the events clients can subscribe to<br></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddSubscriptionFilter(unsigned long,CATUnicodeString&amp;,CATUnicodeString&amp;,CORBAAny&amp;)"><b>AddSubscriptionFilter</b></a>(unsigned long,CATUnicodeString&amp;,CATUnicodeString&amp;,CORBAAny&amp;)
<dd>    Adds a filter to a given subscription referred to by its cookie.
 <dt> o 
    <a href="#GetEventsRaised(ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetEventsRaised</b></a>(ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets all the events raised by a given publisher during the session.
 <dt> o 
    <a href="#GetListOfRaisableEvents(CATUnicodeString&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)"><b>GetListOfRaisableEvents</b></a>(CATUnicodeString&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)
<dd>  Gives the list of events a type of object can raise.
 <dt> o 
    <a href="#GetListOfRaisableEvents(ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)"><b>GetListOfRaisableEvents</b></a>(ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)
<dd>  Gives the list of events a publisher instance can raise.
 <dt> o 
    <a href="#GetRaisedEvents(CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetRaisedEvents</b></a>(CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets the events raised during the session.
 <dt> o 
    <a href="#GetRaisedEvents(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetRaisedEvents</b></a>(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets the events of a given name  raised during the session.
 <dt> o 
    <a href="#GetRaisedEvents(CATUnicodeString&amp;,CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetRaisedEvents</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets the event of a given name raised by a type of object during the session.
 <dt> o 
    <a href="#GetRaisedEvents(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetRaisedEvents</b></a>(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets the events of a given name  raised by a given publisher during the session.
 <dt> o 
    <a href="#GetRaisedEventsOnType(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetRaisedEventsOnType</b></a>(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>    Gets all the events raised by a given type of object during the session.
 <dt> o 
    <a href="#Subscribe(CATUnicodeString&amp;,CATUnicodeString&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"><b>Subscribe</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)
<dd>    Subscribes to an event on a given type of object.
 <dt> o 
    <a href="#Subscribe(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"><b>Subscribe</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)
<dd>    Subscribes to an event on a given type of object.
 <dt> o 
    <a href="#Subscribe(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"><b>Subscribe</b></a>(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)
<dd>    Subscribes to an event for a given instance.
 <dt> o 
    <a href="#Subscribe(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"><b>Subscribe</b></a>(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)
<dd>    Subscribes to an event on a given instance.
 <dt> o 
    <a href="#Unsubscribe(unsigned long)"><b>Unsubscribe</b></a>(unsigned long)
<dd>    Unsubscribes  a client.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddSubscriptionFilter"></a><a name="AddSubscriptionFilter(unsigned long,CATUnicodeString&amp;,CATUnicodeString&amp;,CORBAAny&amp;)"></a> <dt> o <b>AddSubscriptionFilter</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AddSubscriptionFilter</b>(<td>unsigned long <td><tt>iCookie</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iCategory</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iName</tt>,<tr><td></td><td> const <a href="../ObjectModelerSystem/class_CORBAAny_11616.htm">CORBAAny&amp;</a> <td><tt>iValue</tt>)=0  </table></dt>
<dl>
  <dd>
   Adds a filter to a given subscription referred to by its cookie.<br><b>Role</b> : Allow to more precisely determine events you are interested in
    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iCookie</tt>
   <dd>         given by the event manager to identify a subscription
    </dd>
    <dt><tt>  iCategory</tt>
   <dd>         the category of the filter: either "ON_EVENT" or "ON_PUBLISHER".
    ON_EVENT filters allow to select events according to their
    associated </dd>
<a href="../VPMInterfaces/interface_ENOVIStream_23997.htm">ENOVIStream</a>.    ON_PUBLISHER filters allow to select events according to a condition
    on the object that published them. This condition can be built from
    an existing extended data group.
    
    <dt><tt>  iName</tt>
   <dd>         the name of the filter.
    For ON_EVENT filters, iName refers to the name of the argument of the </dd>
<a href="../VPMInterfaces/interface_ENOVIStream_23997.htm">ENOVIStream</a>.    For ON_PUBLISHER filters, it refers to the condition name (whatsoever or existing data group).
    
    <dt><tt>  iValue</tt>
   <dd>         the value of the filter.
    For ON_EVENT filters, iValue refers to the value of the argument of the </dd>
<a href="../VPMInterfaces/interface_ENOVIStream_23997.htm">ENOVIStream</a>.    For ON_PUBLISHER filters, it refers to the condition value itself (a character string).

</dl>
</dl>
</dl>
<a name="GetEventsRaised"></a><a name="GetEventsRaised(ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetEventsRaised</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetEventsRaised</b>(<td> const ENOVIPublisher_var&amp; <td><tt>iPublisher</tt>,<tr><td></td><td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets all the events raised by a given publisher during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iPublisher</tt>
   <dd>            The publisher instance
    </dd>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.    
            
</dd>
</dl>
</dl>
</dl>
<a name="GetListOfRaisableEvents"></a><a name="GetListOfRaisableEvents(CATUnicodeString&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetListOfRaisableEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetListOfRaisableEvents</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iPublisherType</tt>,<tr><td></td><td> const <a href="../System/class_CATBaseUnknown_var_67834.htm">CATBaseUnknown_var&amp;</a> <td><tt>iSubscriber</tt>,<tr><td></td><td><a href="../System/typedef_CATListOfCATUnicodeString_123909.htm">CATListOfCATUnicodeString&amp;</a> <td><tt>oAvailableEvents</tt>)=0  </table></dt>
<dl>
  <dd>
 Gives the list of events a type of object can raise.
<br><b>Role</b> : According to the nature of the subscriber, gives back the list of events it can subscribe to.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPublisherType</tt>
   <dd>   string giving the type of publisher
 </dd>
    <dt><tt> iSubscriber</tt>
   <dd>  the client instance which wants to subscribe.
 </dd>
    <dt><tt> oAvailableEvents</tt>
   <dd>  the list of events which may be raised by the publisher type.</dd>
</dl>
</dl>
</dl>
<a name="GetListOfRaisableEvents"></a><a name="GetListOfRaisableEvents(ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetListOfRaisableEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetListOfRaisableEvents</b>(<td> const ENOVIPublisher_var&amp; <td><tt>iPublisherinstance</tt>,<tr><td></td><td> const <a href="../System/class_CATBaseUnknown_var_67834.htm">CATBaseUnknown_var&amp;</a> <td><tt>iSubscriber</tt>,<tr><td></td><td><a href="../System/typedef_CATListOfCATUnicodeString_123909.htm">CATListOfCATUnicodeString&amp;</a> <td><tt>oAvailableEvents</tt>)=0  </table></dt>
<dl>
  <dd>
 Gives the list of events a publisher instance can raise.
<br><b>Role</b> : According to the nature of the subscriber, gives back the list of events it can subscribe to,
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPublisherinstance</tt>
   <dd>   a publisher instance
 </dd>
    <dt><tt> iSubscriber</tt>
   <dd>  the client instance which wants to subscribe.
 </dd>
    <dt><tt> oAvailableEvents</tt>
   <dd>  the list of events which may be raised by the publisher type.</dd>
</dl>
</dl>
</dl>
<a name="GetRaisedEvents"></a><a name="GetRaisedEvents(CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetRaisedEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetRaisedEvents</b>(<td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets the events raised during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.</dd>
</dl>
</dl>
</dl>
<a name="GetRaisedEvents"></a><a name="GetRaisedEvents(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetRaisedEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetRaisedEvents</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iEventName</tt>,<tr><td></td><td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets the events of a given name  raised during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iEventName</tt>
   <dd>            name of the wanted event
    </dd>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.    
            
</dd>
</dl>
</dl>
</dl>
<a name="GetRaisedEvents"></a><a name="GetRaisedEvents(CATUnicodeString&amp;,CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetRaisedEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetRaisedEvents</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iEventName</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iObjectType</tt>,<tr><td></td><td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets the event of a given name raised by a type of object during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iEventName</tt>
   <dd>            name of the wanted event
    </dd>
    <dt><tt>  iObjectType</tt>
   <dd>            type of the object wanted
    </dd>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.    
            
</dd>
</dl>
</dl>
</dl>
<a name="GetRaisedEvents"></a><a name="GetRaisedEvents(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetRaisedEvents</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetRaisedEvents</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iEventName</tt>,<tr><td></td><td> const ENOVIPublisher_var&amp; <td><tt>iPublisher</tt>,<tr><td></td><td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets the events of a given name  raised by a given publisher during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iEventName</tt>
   <dd>            name of the wanted event
    </dd>
    <dt><tt>  iPublisher</tt>
   <dd>            The publisher instance
    </dd>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.    
            
</dd>
</dl>
</dl>
</dl>
<a name="GetRaisedEventsOnType"></a><a name="GetRaisedEventsOnType(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetRaisedEventsOnType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetRaisedEventsOnType</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iObjectType</tt>,<tr><td></td><td><a href="../System/class_CATLISTV(CATBaseUnknown_var)_145794.htm">CATLISTV(CATBaseUnknown_var)&amp;</a> <td><tt>oListOfRaisedEvents</tt>) =0  </table></dt>
<dl>
  <dd>
   Gets all the events raised by a given type of object during the session.    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iObjectType</tt>
   <dd>            type of the object wanted
    </dd>
    <dt><tt>  oListOfRaisedEvents</tt>
   <dd>        the list of events raised since the beginning.    
            
</dd>
</dl>
</dl>
</dl>
<a name="Subscribe"></a><a name="Subscribe(CATUnicodeString&amp;,CATUnicodeString&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"></a> <dt> o <b>Subscribe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Subscribe</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iMethodName</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iObjectType</tt>,<tr><td></td><td> const <a href="../System/class_CATBaseUnknown_var_67834.htm">CATBaseUnknown_var&amp;</a> <td><tt>iCallBackInterface</tt>,<tr><td></td><td> const <a href="../System/typedef_IID_1488.htm">IID&amp;</a> <td><tt>iIDOfInterface</tt>,<tr><td></td><td>unsigned long* <td><tt>oSubscriberCookie</tt>,<tr><td></td><td> const ENOVIEvent::VPMEventFireMode&amp; <td><tt>iFireMode</tt><td><tt>= ENOVIEvent::EventFireStandard</tt>,<tr><td></td><td> const int&amp; <td><tt>iPriority</tt><td><tt>= 5</tt>,<tr><td></td><td>VPM_Boolean <td><tt>WithPersistency</tt><td><tt>=bFalse</tt>)=0  </table></dt>
<dl>
  <dd>
   Subscribes to an event on a given type of object.<br><b>Role</b> : subscribe in EARLY mode, i.e. by implementing an explicit CallBack interface,
    delivered by the publisher side.
    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMethodName</tt>
   <dd>          event name you want to subscribe to.
    </dd>
    <dt><tt>  iObjectType</tt>
   <dd>          object type you want to subscribe to.  
    </dd>
    <dt><tt>  iCallBackInterface</tt>
   <dd>          interface for the callback methods, implemented by the client which subscribes.
    </dd>
    <dt><tt>  iIDOfInterface</tt>
   <dd>            Real ID of iCallBackInterface
   </dd>
    <dt><tt> oSubscriberCookie</tt>
   <dd>          given by the event manager. to be kept to unsubscribe with.
    </dd>
    <dt><tt>  iFireMode</tt>
   <dd>          step you want to subscribe to (before/after or both).
    </dd>
    <dt><tt>  iPriority</tt>
   <dd>          priority of subscription. from 1 to 9 - standard = 5.
    </dd>
    <dt><tt> WithPersistency</tt>
   <dd>          flag to store a persistent subscription.
          not used.</dd>
</dl>
</dl>
</dl>
<a name="Subscribe"></a><a name="Subscribe(CATUnicodeString&amp;,CATUnicodeString&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"></a> <dt> o <b>Subscribe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Subscribe</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iMethodName</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iObjectType</tt>,<tr><td></td><td> const ENOVISubscriberEvent_var&amp; <td><tt>iCallBackInterface</tt>,<tr><td></td><td>unsigned long* <td><tt>oSubscriberCookie</tt>,<tr><td></td><td> const ENOVIEvent::VPMEventFireMode&amp; <td><tt>iFireMode</tt><td><tt>= ENOVIEvent::EventFireStandard</tt>,<tr><td></td><td> const int&amp; <td><tt>iPriority</tt><td><tt>= 5</tt>,<tr><td></td><td>VPM_Boolean <td><tt>WithPersistency</tt><td><tt>=bFalse</tt>)=0  </table></dt>
<dl>
  <dd>
   Subscribes to an event on a given type of object.<br><b>Role</b> : subscribe in LATE mode, i.e. by implementing a unique standard  interface 
<a href="../VPMInterfaces/interface_ENOVISubscriberEvent_81954.htm">ENOVISubscriberEvent</a>    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMethodName</tt>
   <dd>          event name you want to subscribe to.
    </dd>
    <dt><tt>  iObjectType</tt>
   <dd>          object type you want to subscribe to.  
    </dd>
    <dt><tt>  iCallBackInterface</tt>
   <dd>          an implementation of the standard callback interface ENOVISubscriberEvent
   </dd>
    <dt><tt> oSubscriberCookie</tt>
   <dd>          given by the event manager. to be kept to unsubscribe with.
    </dd>
    <dt><tt>  iFireMode</tt>
   <dd>          step you want to subscribe to (before/after or both).By default both.
    </dd>
    <dt><tt>  iPriority</tt>
   <dd>          priority of subscription. from 1 to 9 - standard = 5.
    </dd>
    <dt><tt> WithPersistency</tt>
   <dd>          flag to store a persistent subscription.
          not used.
</dd>
</dl>
</dl>
</dl>
<a name="Subscribe"></a><a name="Subscribe(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,CATBaseUnknown_var&amp;,IID&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"></a> <dt> o <b>Subscribe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Subscribe</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iMethodName</tt>,<tr><td></td><td> const ENOVIPublisher_var&amp; <td><tt>iObjectInstance</tt>,<tr><td></td><td> const <a href="../System/class_CATBaseUnknown_var_67834.htm">CATBaseUnknown_var&amp;</a> <td><tt>iCallBackInterface</tt>,<tr><td></td><td> const <a href="../System/typedef_IID_1488.htm">IID&amp;</a> <td><tt>iIDOfInterface</tt>,<tr><td></td><td>unsigned long* <td><tt>oSubscriberCookie</tt>,<tr><td></td><td> const ENOVIEvent::VPMEventFireMode&amp; <td><tt>iFireMode</tt><td><tt>= ENOVIEvent::EventFireStandard </tt>,<tr><td></td><td> const int&amp; <td><tt>iPriority</tt><td><tt>= 5</tt>,<tr><td></td><td>VPM_Boolean <td><tt>WithPersistency</tt><td><tt>=bFalse</tt>)=0  </table></dt>
<dl>
  <dd>
   Subscribes to an event for a given instance.<br><b>Role</b> : subscribe in EARLY mode, i.e. by implementing an explicit CallBack interface,
    delivered by the publisher side.

    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMethodName</tt>
   <dd>          event name you want to subscribe to.
    </dd>
    <dt><tt>  iObjectInstance</tt>
   <dd>         object type you want to subscribe to.  
    </dd>
    <dt><tt>  iCallBackInterface</tt>
   <dd>          interface for the callback methods, implemented by the client which subscribes.
    </dd>
    <dt><tt>  iIDOfInterface</tt>
   <dd>            Real ID of iCallBackInterface
   </dd>
    <dt><tt> oSubscriberCookie</tt>
   <dd>          given by the event manager. to be kept to unsubscribe with.
    </dd>
    <dt><tt>  iFireMode</tt>
   <dd>          step you want to subscribe to (before/after or both).
    </dd>
    <dt><tt>  iPriority</tt>
   <dd>          priority of subscription. from 1 to 9 - standard = 5.

    </dd>
    <dt><tt> WithPersistency</tt>
   <dd>          flag to store a persistent subscription.
          not used.</dd>
</dl>
</dl>
</dl>
<a name="Subscribe"></a><a name="Subscribe(CATUnicodeString&amp;,ENOVIPublisher_var&amp;,ENOVISubscriberEvent_var&amp;,unsigned long*,ENOVIEvent::VPMEventFireMode&amp;,int&amp;,VPM_Boolean)"></a> <dt> o <b>Subscribe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Subscribe</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iMethodName</tt>,<tr><td></td><td> const ENOVIPublisher_var&amp; <td><tt>iObjectInstance</tt>,<tr><td></td><td> const ENOVISubscriberEvent_var&amp; <td><tt>iCallBackInterface</tt>,<tr><td></td><td>unsigned long* <td><tt>oSubscriberCookie</tt>,<tr><td></td><td> const ENOVIEvent::VPMEventFireMode&amp; <td><tt>iFireMode</tt><td><tt>= ENOVIEvent::EventFireStandard </tt>,<tr><td></td><td> const int&amp; <td><tt>iPriority</tt><td><tt>= 5</tt>,<tr><td></td><td>VPM_Boolean <td><tt>WithPersistency</tt><td><tt>=bFalse</tt>)=0  </table></dt>
<dl>
  <dd>
   Subscribes to an event on a given instance.<br><b>Role</b> : subscribe in LATE mode, i.e. by implementing a unique standard  interface 
<a href="../VPMInterfaces/interface_ENOVISubscriberEvent_81954.htm">ENOVISubscriberEvent</a>    
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMethodName</tt>
   <dd>          event name you want to subscribe to.
    </dd>
    <dt><tt>  iObjectInstance</tt>
   <dd>         the object instance you want to subscribe to.  
    </dd>
    <dt><tt>  iCallBackInterface</tt>
   <dd>          an implementation of the standard callback interface ENOVISubscriberEvent
   </dd>
    <dt><tt> oSubscriberCookie</tt>
   <dd>          given by the event manager. to be kept to unsubscribe with.
    </dd>
    <dt><tt>  iFireMode</tt>
   <dd>          step you want to subscribe to (before/after or both).By default both.
    </dd>
    <dt><tt>  iPriority</tt>
   <dd>          priority of subscription. from 1 to 9 - standard = 5.
    </dd>
    <dt><tt> WithPersistency</tt>
   <dd>          flag to store a persistent subscription.
          not used.
</dd>
</dl>
</dl>
</dl>
<a name="Unsubscribe"></a><a name="Unsubscribe(unsigned long)"></a> <dt> o <b>Unsubscribe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Unsubscribe</b>(<td>unsigned long <td><tt>iCookie</tt>)=0  </table></dt>
<dl>
  <dd>
   Unsubscribes  a client. <br><b>Role</b> : unsubscription using the cookie given at subscription time.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCookie</tt>
   <dd>   the cookie given at subscription time</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVIEventManager.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
