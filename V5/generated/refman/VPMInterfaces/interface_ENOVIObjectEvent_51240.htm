<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIObjectEvent</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="interface_ENOVINewVersionSameFFFEvent_141531.htm">Previous</a>  <a href="interface_ENOVIObjectInfo_44206.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VPMInterfaces Interface ENOVIObjectEvent</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---ENOVIObjectEvent
 </pre>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>ENOVIObjectEvent</b>
</p>
<p>
<b><i> Class to be implemented by a client who wants to subscribe to events any VPMObject can raise.</i></b><br>

 CallBack Interface : when the publisher raises an event, the subscriber is called back on methods
 of this interface.
 <br><b>Role</b>: the Subscriber gives a pointer on the implementation of this interface for subscription.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#onAfterChangeStatus(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterChangeStatus</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the status of a VPMObject was changed .
 <dt> o 
    <a href="#onAfterCreateObject(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterCreateObject</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the creation of a VPM object.
 <dt> o 
    <a href="#onAfterDeleteObject(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterDeleteObject</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the deletion of any VPM object was performed.
 <dt> o 
    <a href="#onAfterModifyAttribut(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterModifyAttribut</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after an attribute of a VPMObject was modified.
 <dt> o 
    <a href="#onAfterSetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterSetLock</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after a lock was put on a VPM object.
 <dt> o 
    <a href="#onAfterUnsetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterUnsetLock</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the unlock of any VPM object.
 <dt> o 
    <a href="#onBeforeChangeStatus(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeChangeStatus</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the status of a VPMObject is changed .
 <dt> o 
    <a href="#onBeforeCreateObject(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeCreateObject</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the creation of a VPM object.
 <dt> o 
    <a href="#onBeforeDeleteObject(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeDeleteObject</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the deletion of any VPM object.
 <dt> o 
    <a href="#onBeforeModifyAttribut(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeModifyAttribut</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before an attribute of a VPMObject is modified.
 <dt> o 
    <a href="#onBeforeSetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeSetLock</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the lock of any VPM object.
 <dt> o 
    <a href="#onBeforeUnsetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeUnsetLock</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the unlock of any VPM object.
 <dt> o 
    <a href="#onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onKo</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   CallBack method when something was wrong for another subscriber.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="onAfterChangeStatus"></a><a name="onAfterChangeStatus(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterChangeStatus</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterChangeStatus</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after the status of a VPMObject was changed .
 <br><b>Role</b>: to call back clients which subscribed to event ChangeStatus - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterCreateObject"></a><a name="onAfterCreateObject(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterCreateObject</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterCreateObject</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after the creation of a VPM object. 
  <br><b>Role</b>: to call back clients which subscribed to CreateObject - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterDeleteObject"></a><a name="onAfterDeleteObject(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterDeleteObject</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterDeleteObject</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after the deletion of any VPM object was performed. 
  <br><b>Role</b>: to call back clients which subscribed to event DeleteObject - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterModifyAttribut"></a><a name="onAfterModifyAttribut(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterModifyAttribut</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterModifyAttribut</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after an attribute of a VPMObject was modified.
 <br><b>Role</b>: to call back clients which subscribed to event ModifyAttribute - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterSetLock"></a><a name="onAfterSetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterSetLock</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterSetLock</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after a lock was put on a VPM object. 
 <br><b>Role</b>: to call back clients which subscribed to event SetLock - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterUnsetLock"></a><a name="onAfterUnsetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterUnsetLock</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onAfterUnsetLock</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called after the unlock of any VPM object. 
 <br><b>Role</b>: to call back clients which subscribed to event unsetLock - step after -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeChangeStatus"></a><a name="onBeforeChangeStatus(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeChangeStatus</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeChangeStatus</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before the status of a VPMObject is changed .
 <br><b>Role</b>: to call back clients which subscribed to event ChangeStatus - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeCreateObject"></a><a name="onBeforeCreateObject(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeCreateObject</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeCreateObject</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before the creation of a VPM object. 
  <br><b>Role</b>: to call back clients which subscribed to CreateObject - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeDeleteObject"></a><a name="onBeforeDeleteObject(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeDeleteObject</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeDeleteObject</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before the deletion of any VPM object. 
  <br><b>Role</b>: to call back clients which subscribed to event DeleteObject - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeModifyAttribut"></a><a name="onBeforeModifyAttribut(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeModifyAttribut</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeModifyAttribut</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before an attribute of a VPMObject is modified.
 <br><b>Role</b>: to call back clients which subscribed to event ModifyAttribute - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeSetLock"></a><a name="onBeforeSetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeSetLock</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeSetLock</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before the lock of any VPM object. 
  <br><b>Role</b>: to call back clients which subscribed to event SetLock - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeUnsetLock"></a><a name="onBeforeUnsetLock(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeUnsetLock</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onBeforeUnsetLock</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  Method called before the unlock of any VPM object. 
 <br><b>Role</b>: to call back clients which subscribed to event unsetLock - step before -
 on any VPM Object Type . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_ENOVIEvent_19728.htm">ENOVIEvent</a>
</dl>
</dl>
<a name="onKo"></a><a name="onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onKo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>onKo</b>(<td> const ENOVIEvent_var&amp; <td><tt>iRaisedEvent</tt>,<tr><td></td><td><a href="../System/typedef_HRESULT_8345.htm">HRESULT&amp;</a> <td><tt>ioNotifyReturnCode</tt>) = 0   </table></dt>
<dl>
  <dd>
  CallBack method when something was wrong for another subscriber.
 <br><b>Role</b>: this method is called by the event manager
  when a next subscriber returns a failure code from it's callback method.
  In that case, all the previous subscribers are called on their onKo() method.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the onKo callback action
  
</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVIObjectEvent.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
