<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface CATICfgORExpression</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="interface_CATICfgNormalValue_64632.htm">Previous</a>  <a href="interface_CATICfgProductType_65924.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VPMInterfaces Interface CATICfgORExpression</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATICfgORExpression
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICfgORExpression</b>
</p>
<p>
<b><i> Class to manage operations on ORExpressions.</i></b><br>

 <b>Role</b>: A ORExpression is a logical expression constituted of one
 or several ANDExpression. The ANDExpressions are linked with the OR logical operator. 
 An ORExpression is used in the context of Configuration.
 It serves to give an effectivitity to a part Instance, based on ranges, dates, specifications and milestones.
 Example of ORExpression : "(R(10,20) AND SpecA) OR (Date1)".
 Examples of ANDExpression:  "R(10,20) AND SpecA" ,   " Date1".
 Examples of Normal Values : "R(10,20)" ,  "SpecA"; "Date1".
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../VPMInterfaces/interface_CATICfgNormalValue_64632.htm">CATICfgNormalValue</a>, <a href="../VPMInterfaces/interface_CATICfgEffectivity_66422.htm">CATICfgEffectivity</a>, <a href="../VPMInterfaces/interface_CATICfgANDExpression_79022.htm">CATICfgANDExpression</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Add(CATICfgANDExpression_var&amp;)"><b>Add</b></a>(CATICfgANDExpression_var&amp;)
<dd>  Add an ANDExpression to an ORExpression.
 <dt> o 
    <a href="#Add(CATICfgNormalValue_var&amp;)"><b>Add</b></a>(CATICfgNormalValue_var&amp;)
<dd>  Add a single Normal Value to an ORExpression.
 <dt> o 
    <a href="#Add(CATICfgORExpression_var&amp;)"><b>Add</b></a>(CATICfgORExpression_var&amp;)
<dd>  Add an ANDExpression to an ORExpression.
 <dt> o 
    <a href="#And(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)"><b>And</b></a>(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)
<dd>  Compute "AND" logical operation  between two ORExpressions
 
 <dt> o 
    <a href="#CopyMe(CATICfgORExpression_var&amp;)"><b>CopyMe</b></a>(CATICfgORExpression_var&amp;)
<dd>  Copy an ORExpression.
 <dt> o 
    <a href="#Dump()"><b>Dump</b></a>()
<dd>  Dump informations on an ANDExpression.
 <dt> o 
    <a href="#Empty()"><b>Empty</b></a>()
<dd>  Clean the ANDExpression by Removing Normal Values.
 <dt> o 
    <a href="#GetNbOfValues(long&amp;)"><b>GetNbOfValues</b></a>(long&amp;)
<dd>  Get the number of Normal Values contained in a  ORExpression.
 <dt> o 
    <a href="#GetValues(CATListOfCATICfgANDExpression_var&amp;)"><b>GetValues</b></a>(CATListOfCATICfgANDExpression_var&amp;)
<dd>   Get the ANDExpressions in  an  ORExpression.
 <dt> o 
    <a href="#Inverse(CATICfgORExpression_var&amp;)"><b>Inverse</b></a>(CATICfgORExpression_var&amp;)
<dd>  Inverse an ORExpression.
 <dt> o 
    <a href="#IsEqual(CATICfgORExpression_var&amp;)"><b>IsEqual</b></a>(CATICfgORExpression_var&amp;)
<dd>  Compare two ORExpressions.
 <dt> o 
    <a href="#Remove(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)"><b>Remove</b></a>(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)
<dd>   Substract an ORExpression from another one.
 <dt> o 
    <a href="#SeekForANDExp(CATICfgANDExpression_var&amp;)"><b>SeekForANDExp</b></a>(CATICfgANDExpression_var&amp;)
<dd>  Search an ANDexpression in an ORExpression.
 <dt> o 
    <a href="#Simplify(CATICfgORExpression_var&amp;)"><b>Simplify</b></a>(CATICfgORExpression_var&amp;)
<dd>  Simplify an ORExpression.
 <dt> o 
    <a href="#TranslateToEffectivity(CATICfgEffectivity_var&amp;)"><b>TranslateToEffectivity</b></a>(CATICfgEffectivity_var&amp;)
<dd>  Translates an ORexp (this) to a list of list of Effectivity.
 <dt> o 
    <a href="#toString(CATUnicodeString&amp;)"><b>toString</b></a>(CATUnicodeString&amp;)
<dd>  Build a String representing an ORExpression.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Add"></a><a name="Add(CATICfgANDExpression_var&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public virtual void  <b>Add</b>(<td> const CATICfgANDExpression_var&amp; <td><tt>iValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add an ANDExpression to an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd>   The ANDexpression to add.</dd>
</dl>
</dl>
</dl>
<a name="Add"></a><a name="Add(CATICfgNormalValue_var&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public virtual void  <b>Add</b>(<td> const CATICfgNormalValue_var&amp; <td><tt>iValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add a single Normal Value to an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd>   The Normal Value to add. I nfact, an ANDExpression limited to a normal value will be added.</dd>
</dl>
</dl>
</dl>
<a name="Add"></a><a name="Add(CATICfgORExpression_var&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public virtual void  <b>Add</b>(<td> const CATICfgORExpression_var&amp; <td><tt>iValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add an ANDExpression to an ORExpression. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd>   The ANDexpression to add.</dd>
</dl>
</dl>
</dl>
<a name="And"></a><a name="And(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)"></a> <dt> o <b>And</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>And</b>(<td> const CATICfgORExpression_var&amp; <td><tt>iExpression</tt>,<tr><td></td><td>CATICfgORExpression_var&amp; <td><tt>oExpression</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Compute "AND" logical operation  between two ORExpressions
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iORExpression</tt>
   <dd>   ORExpression to compare with "this".
 </dd>
    <dt><tt> oExpression</tt>
   <dd>   Computed ORExpression.
   Example:  A, B, C, D are single specs. 
    ORExp1 = A OR B  ; ORExp2 = C.
    Resulting ORExp = (A AND B) OR (B AND C).</dd>
</dl>
</dl>
</dl>
<a name="CopyMe"></a><a name="CopyMe(CATICfgORExpression_var&amp;)"></a> <dt> o <b>CopyMe</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>CopyMe</b>(<td>CATICfgORExpression_var&amp; <td><tt>oExpression</tt>) = 0  </table></dt>
<dl>
  <dd>
 Copy an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oExpression</tt>
   <dd>   Copy of the ORExpression.</dd>
</dl>
</dl>
</dl>
<a name="Dump"></a><a name="Dump()"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public virtual void  <b>Dump</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Dump informations on an ANDExpression.
</dl>
<a name="Empty"></a><a name="Empty()"></a> <dt> o <b>Empty</b>

<dt>  <table><tr><td>  public virtual void  <b>Empty</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Clean the ANDExpression by Removing Normal Values.
</dl>
<a name="GetNbOfValues"></a><a name="GetNbOfValues(long&amp;)"></a> <dt> o <b>GetNbOfValues</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbOfValues</b>(<td>long&amp; <td><tt>oNbValues</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Get the number of Normal Values contained in a  ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbValues</tt>
   <dd>   Number of  Normal Values.</dd>
</dl>
</dl>
</dl>
<a name="GetValues"></a><a name="GetValues(CATListOfCATICfgANDExpression_var&amp;)"></a> <dt> o <b>GetValues</b>

<dt>  <table><tr><td>  public virtual void  <b>GetValues</b>(<td><a href="../VPMInterfaces/class_CATListOfCATICfgANDExpression_var_212283.htm">CATListOfCATICfgANDExpression_var&amp;</a> <td><tt>oList</tt>) const = 0  </table></dt>
<dl>
  <dd>
  Get the ANDExpressions in  an  ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oList</tt>
   <dd>   List of ANDExpression.</dd>
</dl>
</dl>
</dl>
<a name="Inverse"></a><a name="Inverse(CATICfgORExpression_var&amp;)"></a> <dt> o <b>Inverse</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Inverse</b>(<td>CATICfgORExpression_var&amp; <td><tt>oExpression</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Inverse an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oExpression.</tt>
   <dd>   Resulting ORExpression.
   Example:  A, B , C ,D are single specs. 
   ORExp1 = (A AND B) OR ( C ).
   Resulting ORExp is : (!A AND !C) OR (!B AND !C )</dd>
</dl>
</dl>
</dl>
<a name="IsEqual"></a><a name="IsEqual(CATICfgORExpression_var&amp;)"></a> <dt> o <b>IsEqual</b>

<dt>  <table><tr><td>  public virtual int  <b>IsEqual</b>(<td> const CATICfgORExpression_var&amp; <td><tt>iORExpression</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Compare two ORExpressions.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     An integer.
 <br><b>Legal values </b>: 0 means EQUAL, 1 means DIFFERENT. 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iORExpression</tt>
   <dd>   ORExpression to compare with "this".</dd>
</dl>
</dl>
</dl>
<a name="Remove"></a><a name="Remove(CATICfgORExpression_var&amp;,CATICfgORExpression_var&amp;)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Remove</b>(<td> const CATICfgORExpression_var&amp; <td><tt>iToRemove</tt>,<tr><td></td><td>CATICfgORExpression_var&amp; <td><tt>oResult</tt>) const = 0  </table></dt>
<dl>
  <dd>
  Substract an ORExpression from another one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iToRemove</tt>
   <dd>   The ORExpression to substract.
 </dd>
    <dt><tt> oResult</tt>
   <dd>   The ORexpression obtained after substraction.
    Example : ORexp1  = R(10,20) & Spec1.
              ORexp2  = R(7,15) .
              Resulting ORExp = R(16,20) & Spec1.</dd>
</dl>
</dl>
</dl>
<a name="SeekForANDExp"></a><a name="SeekForANDExp(CATICfgANDExpression_var&amp;)"></a> <dt> o <b>SeekForANDExp</b>

<dt>  <table><tr><td>  public virtual int  <b>SeekForANDExp</b>(<td> const CATICfgANDExpression_var&amp; <td><tt>iANDExp</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Search an ANDexpression in an ORExpression.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     An integer.
 <br><b>Legal values </b>: 0 = Found ,  1 = not Found. 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iANDExp</tt>
   <dd>   ANDExpression to search</dd>
</dl>
</dl>
</dl>
<a name="Simplify"></a><a name="Simplify(CATICfgORExpression_var&amp;)"></a> <dt> o <b>Simplify</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Simplify</b>(<td>CATICfgORExpression_var&amp; <td><tt>oORExp</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Simplify an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oORExp</tt>
   <dd>    The simplified ORExpression. 
    Example : OrExp1 = (A AND B) OR (A AND B AND C) OR D 
           Resulting oORExp = (A AND B) OR D</dd>
</dl>
</dl>
</dl>
<a name="TranslateToEffectivity"></a><a name="TranslateToEffectivity(CATICfgEffectivity_var&amp;)"></a> <dt> o <b>TranslateToEffectivity</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>TranslateToEffectivity</b>(<td>CATICfgEffectivity_var&amp; <td><tt>oEffectivity</tt>) = 0  </table></dt>
<dl>
  <dd>
 Translates an ORexp (this) to a list of list of Effectivity.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oList.</tt>
   <dd>    The list of effectivities translated.</dd>
</dl>
</dl>
</dl>
<a name="toString"></a><a name="toString(CATUnicodeString&amp;)"></a> <dt> o <b>toString</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>toString</b>(<td><a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>oOrExp</tt>)=0  </table></dt>
<dl>
  <dd>
 Build a String representing an ORExpression.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOrExp</tt>
   <dd>    The String representing the ORExpression. This string includes parenthesis, and key-words like OR , AND.
    This string is dedicated to user interface's  usage.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICfgORExpression.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
