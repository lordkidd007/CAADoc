<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIEventPlugin</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VPMInterfaces.htm" href="../VPMInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VPMInterfaces";	}
		function getCurrentObjectName() { 
 	return "ENOVIEventPlugin"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VPMInterfaces Interface ENOVIEventPlugin</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_ENOVIEventPlugin_24062','ENOVIEventPlugin','0');</script>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>ENOVIEventPlugin</b>
</p>
<p>
<b><i> Interface allowing to early subscribe to the event <b>CreateLoginSession</b> step <b>After</b>, before the creation of the Login Session.</i></b><br>


 <br><b>Role</b> : This unique entry point enables to postpone any additional subscription to any other event just
 after the creation of the Login Session, i.e. when a safe transactional context is available. 
 <br> All additional subscriptions have hence to be coded in the method <b>onAfterCreateLoginSession</b> of the subscriber class implementing the callback interface <script type="text/javascript"> activateLinkAnchor('ENOVISessionEvent','','ENOVISessionEvent') </script>.
 <br>This interface replaces the deprecated interface ENOVIPlugin since V5R13. It is strongly recommended that you migrate your existing code before the next release to comply with the new rules.

 <br><b>Usage</b> : The implementation of ENOVIEventPlugin has to be an extension of a dummy late type :
 <br>
 <br> CATImplementClass( MyEventPluginCode, DataExtension, CATBaseUnknown, MyDummyLateType );
 <br> #include "TIE_ENOVIEventPlugin.h"
 <br> TIE_ENOVIEventPlugin( MyEventPluginCode );
 <br>
 <br> A new line is to be added to the dictionary :
 <br> MyDummyLateType            ENOVIEventPlugin             libWhere_MyEventPluginCode_Is
 <br>
 <br> The only code 
 <br>

</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Init(ENOVIEventManager_var&amp;)"><b>Init</b></a>(ENOVIEventManager_var&amp;)
<dd>  Unique method of the plug-in interface called during the initialization of the Login Session (i.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Init"></a><a name="Init(ENOVIEventManager_var&amp;)"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Init</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEventManager_var','ENOVIEventManager_var&amp;')</script> <td><tt>iEventManager</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Unique method of the plug-in interface called during the initialization of the Login Session (i.e. before any transactional context has been setup).
 <br><b>Role</b> : Method in which the subscription to the event CreateLoginSession, step After, must be coded thanks to the interface 
<script type="text/javascript"> activateLinkAnchor('ENOVIEventManager','','ENOVIEventManager') </script> passed as argument. <br>It is forbidden to perform other subscriptions or to raise events in any implementation of this method.
 <br>See the CAA use case CAAVpiAutomaticSubscription of the framework CAAVPMInterfaces.edu for an example of such an implementation.
</dl>
<hr>
 This object is included in the file: <b>ENOVIEventPlugin.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

