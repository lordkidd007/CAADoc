<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>TopologicalOperators Class CATRemoveEdge</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../TopologicalOperators.htm" href="../TopologicalOperators.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "TopologicalOperators";	}
		function getCurrentObjectName() { 
 	return "CATRemoveEdge"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>TopologicalOperators <script type="text/javascript" > writeClassCharacteristic(); </script> CATRemoveEdge</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATRemoveEdge_29111','CATRemoveEdge','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRemoveEdge</b>
</p>
<p>
<b><i> Class defining the topological operator that removes given Edges on a body.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRemoveEdge(CATGeoFactory*,CATTopData*,CATBody*)"><b>CATRemoveEdge</b></a>(CATGeoFactory*,CATTopData*,CATBody*)
<dd>  <dt> o 
    <a href="#~CATRemoveEdge()"><b>~CATRemoveEdge</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(CATEdge*)"><b>Append</b></a>(CATEdge*)
<dd>  Appends an edge to remove
 
 <dt> o 
    <a href="#Append(CATLISTP(CATEdge)&amp;)"><b>Append</b></a>(CATLISTP(CATEdge)&amp;)
<dd>  Appends a list of Edges to remove
 
 <dt> o 
    <a href="#GetAllTrickyEdges(CATLISTP(CATEdge)&amp;)"><b>GetAllTrickyEdges</b></a>(CATLISTP(CATEdge)&amp;)
<dd>  Returns the list of CATEdge that couldn't be removed.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Returns the pointer to the resulting body.
 <dt> o 
    <a href="#GetReverseMatterOutputFaces(CATLISTP(CATFace)&amp;)"><b>GetReverseMatterOutputFaces</b></a>(CATLISTP(CATFace)&amp;)
<dd>  Get the list of faces for which matter side has been reversed.
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs <tt>this</tt> operator.
 <dt> o 
    <a href="#SetFreezeMode(CATBodyFreezeMode)"><b>SetFreezeMode</b></a>(CATBodyFreezeMode)
<dd>  Defines the state of the resulting body.
 <dt> o 
    <a href="#SetPropagationMode(short)"><b>SetPropagationMode</b></a>(short)
<dd>  Mode de propagation en tangence : 1 = ON, 0 = OFF.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRemoveEdge"></a><a name="CATRemoveEdge(CATGeoFactory*,CATTopData*,CATBody*)"></a> <dt> o <b>CATRemoveEdge</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRemoveEdge</b>(<td><script type="text/javascript"> activateLink('CATGeoFactory','CATGeoFactory*')</script> <td><tt>iFactory</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATTopData','CATTopData*')</script> <td><tt>iTopData</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iBody</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="~CATRemoveEdge"></a><a name="~CATRemoveEdge()"></a> <dt> o <b>~CATRemoveEdge</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATRemoveEdge</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(CATEdge*)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('CATEdge','CATEdge*')</script> <td><tt>iEdgeToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Appends an edge to remove
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEdgeToRemove</tt>
   <dd> The edge to remove.</dd>
</dl>
</dl>
</dl>
<a name="Append"></a><a name="Append(CATLISTP(CATEdge)&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATLISTP(CATEdge)','CATLISTP(CATEdge)&amp;')</script> <td><tt>iEdgesToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Appends a list of Edges to remove
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEdgesToRemove</tt>
   <dd> The list of pointers to Edges to remove.</dd>
</dl>
</dl>
</dl>
<a name="GetAllTrickyEdges"></a><a name="GetAllTrickyEdges(CATLISTP(CATEdge)&amp;)"></a> <dt> o <b>GetAllTrickyEdges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetAllTrickyEdges</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATEdge)','CATLISTP(CATEdge)&amp;')</script> <td><tt>oAllTrickyEdges</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of CATEdge that couldn't be removed.
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBody','CATBody*')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the pointer to the resulting body.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the resulting body, <tt>NULL</tt> if the operation failed. 
 If you do not want to keep the resulting body, 
 use the 
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> method to remove it from the  geometric factory, after the operator deletion.
</dl>
</dl>
<a name="GetReverseMatterOutputFaces"></a><a name="GetReverseMatterOutputFaces(CATLISTP(CATFace)&amp;)"></a> <dt> o <b>GetReverseMatterOutputFaces</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetReverseMatterOutputFaces</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATFace)','CATLISTP(CATFace)&amp;')</script> <td><tt>oReverseMatterOutputFaces</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get the list of faces for which matter side has been reversed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oReverseMatterOutputFaces</tt>
   <dd> The list of reversed faces.</dd>
</dl>
</dl>
</dl>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Runs <tt>this</tt> operator.
</dl>
<a name="SetFreezeMode"></a><a name="SetFreezeMode(CATBodyFreezeMode)"></a> <dt> o <b>SetFreezeMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFreezeMode</b>(<td><script type="text/javascript"> activateLink('CATBodyFreezeMode','CATBodyFreezeMode')</script> <td><tt>iOnOrOff</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the state of the resulting body.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOnOrOff</tt>
   <dd> The state of the resulting body.</dd>
</dl>
</dl>
</dl>
<a name="SetPropagationMode"></a><a name="SetPropagationMode(short)"></a> <dt> o <b>SetPropagationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPropagationMode</b>(<td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iPropagationMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Mode de propagation en tangence : 1 = ON, 0 = OFF.
</dl>
<hr>
 This object is included in the file: <b>CATRemoveEdge.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATTopologicalOperators</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

