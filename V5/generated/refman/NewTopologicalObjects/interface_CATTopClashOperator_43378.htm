<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>NewTopologicalObjects Interface CATTopClashOperator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../NewTopologicalObjects.htm" href="../NewTopologicalObjects.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "NewTopologicalObjects";	}
		function getCurrentObjectName() { 
 	return "CATTopClashOperator"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>NewTopologicalObjects Interface CATTopClashOperator</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATTopClashOperator_43378','CATTopClashOperator','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATTopClashOperator</b>
</p>
<p>
<b><i>  Class representing the operator that tests the clash between two bodies,
 and eventually computes their intersection.</i></b><br>

 <br>To use the CATTopClashOperator:
 <ul><li>Create it the <tt>CATCreateTopClashOperator</tt> global function.
 <li>If you want only the diagnostic(TRUE or FALSE),
 avoiding computation of the intersection body,
 use <tt>SetOnlyDiagnosticRequired(TRUE)</tt> method.
 <li> <tt>Run</tt> the operator
 <li>Retrieve the diagnostic with the <tt>GetDiagnostic</tt> method.
 <li>Retrieve the eventual intersection body with the <tt>GetResult</tt> method. 
 <li>Delete with the usual C++ <tt>delete</tt> operator after use.</ul></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDiagnostic()"><b>GetDiagnostic</b></a>()
<dd>  Returns the clash diagnosis.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Returns the body resulting from the clash operation.
 <dt> o 
    <a href="#SetOnlyDiagnosticRequired(CATBoolean)"><b>SetOnlyDiagnosticRequired</b></a>(CATBoolean)
<dd>  Specifies whether only the clash diagnosis is to be issued.
 <dt> o 
    <a href="#SetTestVolumeInclusion(CATBoolean)"><b>SetTestVolumeInclusion</b></a>(CATBoolean)
<dd>  For the case where only the diagnostic is required.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDiagnostic"></a><a name="GetDiagnostic()"></a> <dt> o <b>GetDiagnostic</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>GetDiagnostic</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the clash diagnosis.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  TRUE if the two bodies clash.
</dl>
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBody','CATBody *')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the body resulting from the clash operation. This body can be of any dimension.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The created body.
</dl>
</dl>
<a name="SetOnlyDiagnosticRequired"></a><a name="SetOnlyDiagnosticRequired(CATBoolean)"></a> <dt> o <b>SetOnlyDiagnosticRequired</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOnlyDiagnosticRequired</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iOnlyDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies whether only the clash diagnosis is to be issued.
 By default, the complete intersection body is computed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOnlyDiagnostic</tt>
   <dd> If TRUE, only the diagnosis is computed. The algorithm interrupts as soon as an intersection
 between the two bodies is detected. NO RESULT is generated (the resulting body is NULL).
 By default the clash result, if any, is generated.</dd>
</dl>
</dl>
</dl>
<a name="SetTestVolumeInclusion"></a><a name="SetTestVolumeInclusion(CATBoolean)"></a> <dt> o <b>SetTestVolumeInclusion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTestVolumeInclusion</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iTestVolumeInclusion</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 For the case where only the diagnostic is required.
 It specifies if the inclusion of a domain of one body inside a volume of the other should be tested.
 By default, the test is done.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTestVolmeInclusion</tt>
   <dd> If TRUE, the operator will test the inclusion of a domain of one body inside a volume of the other.
 If FALSE, and a domain of one body is inside a volume of the other, without touching the faces, GetDiagnostic will return FALSE.
 By default the test of inclusion is done.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATTopClashOperator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATTopologicalObjects</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

