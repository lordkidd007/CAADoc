<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KinematicsInterfaces Interface CATIKinMechanism</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../KinematicsInterfaces.htm">This Framework</a>  <a href="interface_CATIKinJoint_28658.htm">Previous</a>  <a href="interface_CATIKinMechanismFactory_108086.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>KinematicsInterfaces Interface CATIKinMechanism</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIKinMechanism
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIKinMechanism</b>
</p>
<p>
<b><i> Interface to get and set mechanism's information.</i></b><br>

 <b>Role</b>: A mechanism has a name and is composed of Joints, Commands and a fixed part.
 The state of the mechanism is represented by the values of its commands.
 The methods provided by this interface allow to access this information.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddCommand(CATIKinJoint*,char*,CATIKinCmd**)"><b>AddCommand</b></a>(CATIKinJoint*,char*,CATIKinCmd**)
<dd>   Creates a new command in a mechanism.
 <dt> o 
    <a href="#AddJoint(char*,CATLISTP(CATBaseUnknown)*,boolean,CATIKinJoint**)"><b>AddJoint</b></a>(char*,CATLISTP(CATBaseUnknown)*,boolean,CATIKinJoint**)
<dd>   Creates a new joint in a mechanism.
 <dt> o 
    <a href="#GetCmdList(CATLISTP(CATBaseUnknown)**)"><b>GetCmdList</b></a>(CATLISTP(CATBaseUnknown)**)
<dd>  Returns the list of commands of the mechanism.
 <dt> o 
    <a href="#GetCmdValues(int*,double**)"><b>GetCmdValues</b></a>(int*,double**)
<dd>   Returns the values of each command of the mechanism.
 <dt> o 
    <a href="#GetFixedProduct(CATIProduct**)"><b>GetFixedProduct</b></a>(CATIProduct**)
<dd>   Returns the fixed product of the mechanism.
 <dt> o 
    <a href="#GetJointList(CATLISTP(CATBaseUnknown)**)"><b>GetJointList</b></a>(CATLISTP(CATBaseUnknown)**)
<dd>   Returns the list of joints of the mechanism.
 <dt> o 
    <a href="#GetProductList(CATLISTP(CATBaseUnknown)**)"><b>GetProductList</b></a>(CATLISTP(CATBaseUnknown)**)
<dd>   Returns the list of the products involved in the mechanism.
 <dt> o 
    <a href="#GetProductMotion(CATIProduct*,double**)"><b>GetProductMotion</b></a>(CATIProduct*,double**)
<dd>   Gets the motion of one product after calling a Set or ResetCmdValues.
 <dt> o 
    <a href="#GetStatus(int*,int*,boolean*)"><b>GetStatus</b></a>(int*,int*,boolean*)
<dd>   Returns the status of a mechanism.
 <dt> o 
    <a href="#GetTimeParameter(CATICkeParm**)"><b>GetTimeParameter</b></a>(CATICkeParm**)
<dd>  Returns the time parameter of the mechanism.
 <dt> o 
    <a href="#RemoveCommand(CATIKinCmd*)"><b>RemoveCommand</b></a>(CATIKinCmd*)
<dd>   Removes a command in the mechanism .
 <dt> o 
    <a href="#RemoveJoint(CATIKinJoint*)"><b>RemoveJoint</b></a>(CATIKinJoint*)
<dd>   Removes a joint in the mechanism .
 <dt> o 
    <a href="#ResetCmdValues()"><b>ResetCmdValues</b></a>()
<dd>   Resets the values of each command of the mechanism to their initial position.
 <dt> o 
    <a href="#SetCmdValues(int,double*)"><b>SetCmdValues</b></a>(int,double*)
<dd>   Sets the values of each command of the mechanism and performs a solve with these values.
 <dt> o 
    <a href="#SetFixedProduct(CATIProduct*,boolean)"><b>SetFixedProduct</b></a>(CATIProduct*,boolean)
<dd>   Sets a new fixed product on mechanism.
 <dt> o 
    <a href="#SetTimeParameter(double)"><b>SetTimeParameter</b></a>(double)
<dd>   Sets the values of the time parameter of the mechanism and performs a solve with these value (only if mechanism can be simulated with laws).
 <dt> o 
    <a href="#UpdateAllJoints()"><b>UpdateAllJoints</b></a>()
<dd>   Update all the mechanism joints.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddCommand"></a><a name="AddCommand(CATIKinJoint*,char*,CATIKinCmd**)"></a> <dt> o <b>AddCommand</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>AddCommand</b>(<td><a href="../KinematicsInterfaces/interface_CATIKinJoint_28658.htm">CATIKinJoint*</a> <td><tt>iJoint</tt>,<tr><td></td><td> const char* <td><tt>iCmdType</tt>,<tr><td></td><td><a href="../KinematicsInterfaces/interface_CATIKinCmd_18616.htm">CATIKinCmd**</a> <td><tt>oCmd</tt>) const=0  </table></dt>
<dl>
  <dd>
  Creates a new command in a mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iJoint</tt>
   <dd>    The joint supporting the command.
 </dd>
    <dt><tt> iCmdType</tt>
   <dd>    The type of the command to create (the basic types are defined in CATKinDefs).
 </dd>
    <dt><tt> oCmd</tt>
   <dd>    The created command.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KinematicsInterfaces/interface_CATIKinJoint_28658.htm">CATIKinJoint</a>, <a href="../KinematicsInterfaces/interface_CATIKinCmd_18616.htm">CATIKinCmd</a>
</dl>
</dl>
<a name="AddJoint"></a><a name="AddJoint(char*,CATLISTP(CATBaseUnknown)*,boolean,CATIKinJoint**)"></a> <dt> o <b>AddJoint</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>AddJoint</b>(<td> const char* <td><tt>iJointType</tt>,<tr><td></td><td><a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)*</a> <td><tt>iConnectorList</tt>,<tr><td></td><td>boolean <td><tt>iCreateConstraints</tt>,<tr><td></td><td><a href="../KinematicsInterfaces/interface_CATIKinJoint_28658.htm">CATIKinJoint**</a> <td><tt>oJoint</tt>) const=0  </table></dt>
<dl>
  <dd>
  Creates a new joint in a mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iJointType</tt>
   <dd>    The type of joint to create (the basic types are defined in CATKinDefs).
 </dd>
    <dt><tt> iConnectorList</tt>
   <dd> <table> 
    The list of elements on which the joint is created. The list of input elements connectors except for Rigid joint, which must be products. <br>
    Here is the table of elements you have to give for each type of joint : <br>
    e.g.: "Line (1)" means that the geometry type must be a line and must belong to the 1st product.<br>
 </table> 
 <table border> 
 <tr> <th> Type </th> <th> Element 1 </th> <th> Element 2 </th> <th> Element 3 </th> <th> Element 4 </th> <th> Element 5 </th> <th> Element 6 </th> <th> Element 7 </th> <th> Element 8 </th></tr>
 <tr> <td> Prismatic </td> <td> Line (1) </td> <td> Line (2) </td> <td> Plane (1) </td> <td> Plane (2) </td></tr> 
 <tr> <td> Revolute </td> <td> Line (1) </td> <td> Line (2) </td> <td> Plane (1) </td> <td> Plane (2) </td></tr>
 <tr> <td> Rigid </td> <td> Product (1) </td> <td> Product (2) </td></tr>
 <tr> <td> Spherical </td> <td> Point (1) </td> <td> Point (2) </td></tr>
 <tr> <td> Point Curve </td> <td> Point (1) </td> <td> Curve (2) </td></tr>
 <tr> <td> Slide Curve </td> <td> Curve (1) </td> <td> Curve (2) </td></tr>
 <tr> <td> Roll Curve </td> <td> Curve (1) </td> <td> Curve (2) </td></tr>
 <tr> <td> Cylindrical </td> <td> Line (1) </td> <td> Line (2) </td></tr>
 <tr> <td> Screw </td> <td> Line (1) </td> <td> Line (2) </td></tr>
 <tr> <td> Universal </td> <td> Line (1) </td> <td> Line (2) </td> <td> Line (1 or 2), optional </td></tr>
 <tr> <td> CV Joint </td> <td> Line (1) </td> <td> Line (2) </td> <td> Line (3) </td></tr>
 <tr> <td> Point-Surface </td> <td> Point (1) </td> <td> Surface (2) </td> </tr>
 <tr> <td> Planar Surface </td> <td> Plane (1) </td> <td> Plane (2) </td> </tr>
 <tr> <td> Gear Joint </td> <td> Line (1) </td> <td> Line (3) </td> <td> Plane (1) </td> <td> Plane (3) </td> <td> Line (2) </td> <td> Line (3) </td> <td> Plane (2) </td> <td> Plane (3) </td></tr>
 <tr> <td> Rack Joint </td> <td> Line (1) </td> <td> Line (3) </td> <td> Plane (1) </td> <td> Plane (3) </td> <td> Line (2) </td> <td> Line (3) </td> <td> Plane (2) </td> <td> Plane (3) </td></tr>
 <tr> <td> Cable Joint </td> <td> Line (1) </td> <td> Line (3) </td> <td> Plane (1) </td> <td> Plane (3) </td> <td> Line (2) </td> <td> Line (3) </td> <td> Plane (2) </td> <td> Plane (3) </td></tr>
 </table> 
 <b>Notes :</b><br>
 <dir>
 <li>for Prismatic Joint : Plane 1 must contain Line 1 and Plane 2 must contain Line 2
 <li>for Revolute Joint : Line 1 must be normal to Plane 1 and Line 2 must be normal to Plane2
 <li>for Universal Joint : Connector 3 is the cross-pin axis. It must belong to product 1 or 2 and must be orthogonal to Line (1) or Line (2). <b>it is optional.</b>
 <li>for CV Joint : the angle between Line (1) and Line (2) must be the same as the angle between Line (2) and Line (3)
 <li>for Gear Joint : it is seen as a Revolute joint between Product 1 and Product 3, and a Revolute joint between Product 2 and Product 3
 <li>for Rack Joint : it is seen as a Prismatic joint between Product 1 and Product 3, and a Revolute Joint between Product 2 and Product 3
 <li>for Cable Joint : it is seen as a Prismatic joint between Product 1 and Product 3, and a Prismatic Joint between Product 2 and Product 3
 </dir>
 </dd>
    <dt><tt> iCreateConstraints</tt>
   <dd>    The boolean to set to TRUE if you want to create the associated assembly constraints
    and FALSE if not.
 </dd>
    <dt><tt> oJoint</tt>
   <dd>    The created joint.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)</a>, <a href="../KinematicsInterfaces/interface_CATIKinJoint_28658.htm">CATIKinJoint</a>
</dl>
</dl>
<a name="GetCmdList"></a><a name="GetCmdList(CATLISTP(CATBaseUnknown)**)"></a> <dt> o <b>GetCmdList</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetCmdList</b>(<td><a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)**</a> <td><tt>oCmdlist</tt>) const=0  </table></dt>
<dl>
  <dd>
 Returns the list of commands of the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCmdList</tt>
   <dd>    The list of commands (allocated by the method).
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)</a>
</dl>
</dl>
<a name="GetCmdValues"></a><a name="GetCmdValues(int*,double**)"></a> <dt> o <b>GetCmdValues</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetCmdValues</b>(<td>int* <td><tt>oSize</tt>,<tr><td></td><td>double** <td><tt>oCmdValues</tt>) const=0  </table></dt>
<dl>
  <dd>
  Returns the values of each command of the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSize</tt>
   <dd>    The size of the list.
 </dd>
    <dt><tt> oCmdValues</tt>
   <dd>    The list of values (allocated by the method).</dd>
</dl>
</dl>
</dl>
<a name="GetFixedProduct"></a><a name="GetFixedProduct(CATIProduct**)"></a> <dt> o <b>GetFixedProduct</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetFixedProduct</b>(<td><a href="../ProductStructure/interface_CATIProduct_24728.htm">CATIProduct**</a> <td><tt>oFixedProduct</tt>) const=0  </table></dt>
<dl>
  <dd>
  Returns the fixed product of the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFixedProduct</tt>
   <dd>    The fixed product.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ProductStructure/interface_CATIProduct_24728.htm">CATIProduct</a>
</dl>
</dl>
<a name="GetJointList"></a><a name="GetJointList(CATLISTP(CATBaseUnknown)**)"></a> <dt> o <b>GetJointList</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetJointList</b>(<td><a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)**</a> <td><tt>oJointList</tt>) const=0  </table></dt>
<dl>
  <dd>
  Returns the list of joints of the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oJointList</tt>
   <dd>    The list of joints (allocated by the method).
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)</a>
</dl>
</dl>
<a name="GetProductList"></a><a name="GetProductList(CATLISTP(CATBaseUnknown)**)"></a> <dt> o <b>GetProductList</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetProductList</b>(<td><a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)**</a> <td><tt>oProductList</tt>) const=0  </table></dt>
<dl>
  <dd>
  Returns the list of the products involved in the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProductList</tt>
   <dd>    The list of products (allocated by the method).
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ApplicationFrame/class_CATLISTP(CATBaseUnknown)_103510.htm">CATLISTP(CATBaseUnknown)</a>
</dl>
</dl>
<a name="GetProductMotion"></a><a name="GetProductMotion(CATIProduct*,double**)"></a> <dt> o <b>GetProductMotion</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetProductMotion</b>(<td><a href="../ProductStructure/interface_CATIProduct_24728.htm">CATIProduct*</a> <td><tt>iProduct</tt>,<tr><td></td><td>double** <td><tt>oMotion</tt>) const=0  </table></dt>
<dl>
  <dd>
  Gets the motion of one product after calling a Set or ResetCmdValues.
 <br><b>Note :</b> the motion returned is always relative to the initial position
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProduct</tt>
   <dd>    The product for which you want to know the motion
 </dd>
    <dt><tt> oMotion</tt>
   <dd>    The motion of the product. The 12 double vector (allocated by the method) is set as following :
 <dir>
  <li>Position 0 to 2  : the first column of the rotation matrix
  <li>Position 3 to 5  : the second column of the rotation matrix
  <li>Position 6 to 8 :  the third column of the rotation matrix
  <li>Position 9 to 11 : the tranlsation vector
 </dir></dd>
</dl>
</dl>
</dl>
<a name="GetStatus"></a><a name="GetStatus(int*,int*,boolean*)"></a> <dt> o <b>GetStatus</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetStatus</b>(<td>int* <td><tt>oDOFWithoutCmd</tt>,<tr><td></td><td>int* <td><tt>oDOFWithCmd</tt>,<tr><td></td><td>boolean* <td><tt>oSimulationReady</tt>) const=0  </table></dt>
<dl>
  <dd>
  Returns the status of a mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDOFWithoutCmd</tt>
   <dd>    The degree of freedom without any command
 </dd>
    <dt><tt> oDOFWithCmd</tt>
   <dd>    The degree of freedom with commands
 </dd>
    <dt><tt> oSimulationReady</tt>
   <dd>    The boolean returning TRUE if the mechanism can be simulated and FALSE if not</dd>
</dl>
</dl>
</dl>
<a name="GetTimeParameter"></a><a name="GetTimeParameter(CATICkeParm**)"></a> <dt> o <b>GetTimeParameter</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetTimeParameter</b>(<td><a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm**</a> <td><tt>oTimeParameter</tt>) const=0  </table></dt>
<dl>
  <dd>
 Returns the time parameter of the mechanism. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTimeParameter</tt>
   <dd>    The time parameter.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="RemoveCommand"></a><a name="RemoveCommand(CATIKinCmd*)"></a> <dt> o <b>RemoveCommand</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>RemoveCommand</b>(<td><a href="../KinematicsInterfaces/interface_CATIKinCmd_18616.htm">CATIKinCmd*</a> <td><tt>iCmd</tt>) const=0  </table></dt>
<dl>
  <dd>
  Removes a command in the mechanism .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommand</tt>
   <dd>    The Command to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemoveJoint"></a><a name="RemoveJoint(CATIKinJoint*)"></a> <dt> o <b>RemoveJoint</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>RemoveJoint</b>(<td><a href="../KinematicsInterfaces/interface_CATIKinJoint_28658.htm">CATIKinJoint*</a> <td><tt>iJoint</tt>) const=0  </table></dt>
<dl>
  <dd>
  Removes a joint in the mechanism .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iJoint</tt>
   <dd>    The Joint to remove.</dd>
</dl>
</dl>
</dl>
<a name="ResetCmdValues"></a><a name="ResetCmdValues()"></a> <dt> o <b>ResetCmdValues</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>ResetCmdValues</b>(<td>)const=0  </table></dt>
<dl>
  <dd>
  Resets the values of each command of the mechanism to their initial position.
 <br><b>Note :</b> to get the displacements of each product, use GetProductDisplacement
</dl>
<a name="SetCmdValues"></a><a name="SetCmdValues(int,double*)"></a> <dt> o <b>SetCmdValues</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>SetCmdValues</b>(<td>int <td><tt>iSize</tt>,<tr><td></td><td>double* <td><tt>iCmdValues</tt>) const=0  </table></dt>
<dl>
  <dd>
  Sets the values of each command of the mechanism and performs a solve with these values.
 <br><b>Note :</b> to get the motion (displacement) of each product, use GetProductMotion
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd>    The size of the list.
 </dd>
    <dt><tt> iCmdValues</tt>
   <dd>    The list of values.</dd>
</dl>
</dl>
</dl>
<a name="SetFixedProduct"></a><a name="SetFixedProduct(CATIProduct*,boolean)"></a> <dt> o <b>SetFixedProduct</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>SetFixedProduct</b>(<td><a href="../ProductStructure/interface_CATIProduct_24728.htm">CATIProduct*</a> <td><tt>iFixedProduct</tt>,<tr><td></td><td>boolean <td><tt>iCreateFixConstraint</tt>) const=0  </table></dt>
<dl>
  <dd>
  Sets a new fixed product on mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFixedProduct</tt>
   <dd>    The fixed product. 
    <br><b>Note :</b> if iFixedProduct is NULL, the Fixed Product is unset.
 </dd>
    <dt><tt> iCreateFixConstraint</tt>
   <dd>    The boolean to set to TRUE if you want to create the associated assembly fix constraint
    and FALSE if not.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ProductStructure/interface_CATIProduct_24728.htm">CATIProduct</a>
</dl>
</dl>
<a name="SetTimeParameter"></a><a name="SetTimeParameter(double)"></a> <dt> o <b>SetTimeParameter</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>SetTimeParameter</b>(<td>double <td><tt>iTimeParameter</tt>) const=0  </table></dt>
<dl>
  <dd>
  Sets the values of the time parameter of the mechanism and performs a solve with these value (only if mechanism can be simulated with laws).
 <br><b>Note :</b> to get the motion (displacement) of each product, use GetProductMotion
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeParameter</tt>
   <dd>    The time parameter.</dd>
</dl>
</dl>
</dl>
<a name="UpdateAllJoints"></a><a name="UpdateAllJoints()"></a> <dt> o <b>UpdateAllJoints</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>UpdateAllJoints</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
  Update all the mechanism joints.
</dl>
<hr>
 This object is included in the file: <b>CATIKinMechanism.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATKiiKinematicsItf</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
