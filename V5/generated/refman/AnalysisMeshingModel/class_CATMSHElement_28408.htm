<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AnalysisMeshingModel Class CATMSHElement</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../AnalysisMeshingModel.htm" href="../AnalysisMeshingModel.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "AnalysisMeshingModel";	}
		function getCurrentObjectName() { 
 	return "CATMSHElement"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>AnalysisMeshingModel <script type="text/javascript" > writeClassCharacteristic(); </script> CATMSHElement</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMSHElement_28408','CATMSHElement','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMSHElement</b>
</p>
<p>
<b><i> Object representing a finite element.</i></b><br>

 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIMSHMesh','','CATIMSHMesh') </script>, <script type="text/javascript"> activateLinkAnchor('CATMSHNode','','CATMSHNode') </script>
</dl>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetConnectivity()"><b>GetConnectivity</b></a>()
<dd>  Returns the element's connectivity.
 <dt> o 
    <a href="#GetLinkedNodes()"><b>GetLinkedNodes</b></a>()
<dd>  Returns a pointer on the list of element's nodes.
 <dt> o 
    <a href="#GetMesh()"><b>GetMesh</b></a>()
<dd>  Returns the <b>Mesh</b> which contains the element.
 <dt> o 
    <a href="#GetMeshDomain()"><b>GetMeshDomain</b></a>()
<dd>  Returns the <b>Mesh Domain</b> which contains the element.
 <dt> o 
    <a href="#GetNodesCoordinates(double*)"><b>GetNodesCoordinates</b></a>(double*)
<dd>  Retreives all nodes coordinates.
 <dt> o 
    <a href="#GetNumber()"><b>GetNumber</b></a>()
<dd>  Returns the element number.
 <dt> o 
    <a href="#GetNumberOfLinkedNodes()"><b>GetNumberOfLinkedNodes</b></a>()
<dd>  Returns the number of linked nodes.
 <dt> o 
    <a href="#GetTag()"><b>GetTag</b></a>()
<dd>  Returns the integer tag associated to the element.
 <dt> o 
    <a href="#GetVisuAttribute()"><b>GetVisuAttribute</b></a>()
<dd>  Returns graphic attribute for the finite element.
 <dt> o 
    <a href="#IsActive()"><b>IsActive</b></a>()
<dd>  Returns the element activity.
 <dt> o 
    <a href="#IsDeleted()"><b>IsDeleted</b></a>()
<dd>  Check if the finite element is deleted.
 <dt> o 
    <a href="#Next()"><b>Next</b></a>()
<dd>  Returns the next element in the <b>Mesh</b>.
 <dt> o 
    <a href="#Previous()"><b>Previous</b></a>()
<dd>  Returns the previous element in the <b>Mesh</b>.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetConnectivity"></a><a name="GetConnectivity()"></a> <dt> o <b>GetConnectivity</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIMSHConnectivity','inline CATIMSHConnectivity *')</script>  <b>GetConnectivity</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the element's connectivity.
 <br><b>Lifecycle rules deviation</b>: No AddRef is done on returned value.
</dl>
<a name="GetLinkedNodes"></a><a name="GetLinkedNodes()"></a> <dt> o <b>GetLinkedNodes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('const','inline CATMSHNode * const *')</script>  <b>GetLinkedNodes</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer on the list of element's nodes.
</dl>
<a name="GetMesh"></a><a name="GetMesh()"></a> <dt> o <b>GetMesh</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIMSHMesh','CATIMSHMesh *')</script>  <b>GetMesh</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the <b>Mesh</b> which contains the element.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATBaseUnknown#Release
</dl>
</dl>
<a name="GetMeshDomain"></a><a name="GetMeshDomain()"></a> <dt> o <b>GetMeshDomain</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMSHMeshDomain','inline CATMSHMeshDomain *')</script>  <b>GetMeshDomain</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the <b>Mesh Domain</b> which contains the element.
</dl>
<a name="GetNodesCoordinates"></a><a name="GetNodesCoordinates(double*)"></a> <dt> o <b>GetNodesCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNodesCoordinates</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>ioCoordinates</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retreives all nodes coordinates. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCoordinates</tt>
   <dd>   Array containing the nodes coordinates in the following order: X1, Y1, Z1, X2, Y2, Z2, ...
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of element's nodes.
</dl>
</dl>
<a name="GetNumber"></a><a name="GetNumber()"></a> <dt> o <b>GetNumber</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNumber</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the element number.
 Elements are numbered between 0 and the total number of elements minus one.
 Take care of the fact that this number is not stable upon modifications, 
 for example in case of element deletion.
</dl>
<a name="GetNumberOfLinkedNodes"></a><a name="GetNumberOfLinkedNodes()"></a> <dt> o <b>GetNumberOfLinkedNodes</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>GetNumberOfLinkedNodes</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of linked nodes.
</dl>
<a name="GetTag"></a><a name="GetTag()"></a> <dt> o <b>GetTag</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline unsigned int')</script>  <b>GetTag</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the integer tag associated to the element.
</dl>
<a name="GetVisuAttribute"></a><a name="GetVisuAttribute()"></a> <dt> o <b>GetVisuAttribute</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMSHElementVisuAttribute','const CATMSHElementVisuAttribute *')</script>  <b>GetVisuAttribute</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns graphic attribute for the finite element.
</dl>
<a name="IsActive"></a><a name="IsActive()"></a> <dt> o <b>IsActive</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('short','short')</script>  <b>IsActive</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the element activity. An element in considered as active if it belong to
 an active <b>Mesh Part</b>. Otherwise the element is inactive. See 
<script type="text/javascript"> activateLinkAnchor('CATIMSHMeshPart','','CATIMSHMeshPart') </script>.
</dl>
<a name="IsDeleted"></a><a name="IsDeleted()"></a> <dt> o <b>IsDeleted</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>IsDeleted</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Check if the finite element is deleted.
 Returns 1 the element is deleted, 0 otherwise.
</dl>
<a name="Next"></a><a name="Next()"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMSHElement','inline CATMSHElement *')</script>  <b>Next</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the next element in the <b>Mesh</b>. This method should be used with
 the 
<script type="text/javascript"> activateLinkAnchor('CATIMSHMesh','GetFirstElement','CATIMSHMesh.GetFirstElement') </script> method to scan all elements.
</dl>
<a name="Previous"></a><a name="Previous()"></a> <dt> o <b>Previous</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMSHElement','inline CATMSHElement *')</script>  <b>Previous</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the previous element in the <b>Mesh</b>.
</dl>
<hr>
 This object is included in the file: <b>CATMSHElement.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAmtModel</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

