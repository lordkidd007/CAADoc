<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>OptimizationInterfaces Class CATOptAlgorithmAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../OptimizationInterfaces.htm" href="../OptimizationInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "OptimizationInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATOptAlgorithmAdapter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>OptimizationInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATOptAlgorithmAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATOptAlgorithmAdapter_49286','CATOptAlgorithmAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATOptAlgorithmAdapter</b>
</p>
<p>
<b><i>    CAA Adapter to CATIOptAlgorithm Interface.</i></b><br>

 <b>Role</b>: This class should be derived to implement features extension to <script type="text/javascript"> activateLinkAnchor('CATIOptAlgorithm','','CATIOptAlgorithm') </script>.<br> 
<script type="text/javascript"> activateLinkAnchor('CATIOptAlgorithm','','CATIOptAlgorithm') </script> is the interface used by the product PEO to indentify and use the new algorithms.<br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATOptAlgorithmAdapter()"><b>CATOptAlgorithmAdapter</b></a>()
<dd>  <dt> o 
    <a href="#~CATOptAlgorithmAdapter()"><b>~CATOptAlgorithmAdapter</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AfterLastUpdate()"><b>AfterLastUpdate</b></a>()
<dd>  Allows to restore the settings impacted by the BeforeFirstUpdate() method.
 <dt> o 
    <a href="#AllHistoricToString()"><b>AllHistoricToString</b></a>()
<dd>  Returns a string describing the history of the optimization algorithm.
 <dt> o 
    <a href="#BeforeFirstUpdate()"><b>BeforeFirstUpdate</b></a>()
<dd>  Initializes Settings.
 <dt> o 
    <a href="#BeforeLastUpdate()"><b>BeforeLastUpdate</b></a>()
<dd>  Allows to restore the visualization settings for the last update.
 <dt> o 
    <a href="#GetBestResultIndex(int&amp;)"><b>GetBestResultIndex</b></a>(int&amp;)
<dd>  Returns the index of the Opimization Log corresponding to the best solution found according to the problem defined.
 <dt> o 
    <a href="#GetEndIterationNotification()"><b>GetEndIterationNotification</b></a>()
<dd>  Retrieves the event send when an iteration of the algorithm is done.
 <dt> o 
    <a href="#GetSetting(char*,double&amp;)"><b>GetSetting</b></a>(char*,double&amp;)
<dd>  Gets an algorithm setting.
 <dt> o 
    <a href="#InitUpdate(CATIOptOptimization_var&amp;,CATLISTV(CATBaseUnknown_var)*,CATLISTV(CATBaseUnknown_var)*)"><b>InitUpdate</b></a>(CATIOptOptimization_var&amp;,CATLISTV(CATBaseUnknown_var)*,CATLISTV(CATBaseUnknown_var)*)
<dd>  Initializes the update management engine.
 <dt> o 
    <a href="#LaunchUpdate()"><b>LaunchUpdate</b></a>()
<dd>  Asks the update management engine to launch the update of the inputs/outputs.
 <dt> o 
    <a href="#OneHistoricToString(int)"><b>OneHistoricToString</b></a>(int)
<dd>  
 <dt> o 
    <a href="#Run(CATIOptOptimization_var&amp;)"><b>Run</b></a>(CATIOptOptimization_var&amp;)
<dd>  Triggers the computation of the user algorithm.
 <dt> o 
    <a href="#SendEndIterationNotification(CATNotification*)"><b>SendEndIterationNotification</b></a>(CATNotification*)
<dd>  Sends the end of iteration notification.
 <dt> o 
    <a href="#SetSetting(char*,double)"><b>SetSetting</b></a>(char*,double)
<dd>  Sets an algorithm setting.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATOptAlgorithmAdapter"></a><a name="CATOptAlgorithmAdapter()"></a> <dt> o <b>CATOptAlgorithmAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATOptAlgorithmAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="~CATOptAlgorithmAdapter"></a><a name="~CATOptAlgorithmAdapter()"></a> <dt> o <b>~CATOptAlgorithmAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATOptAlgorithmAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AfterLastUpdate"></a><a name="AfterLastUpdate()"></a> <dt> o <b>AfterLastUpdate</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AfterLastUpdate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Allows to restore the settings impacted by the BeforeFirstUpdate() method.
 
<script type="text/javascript"> activateLinkAnchor('','BeforeFirstUpdate()','BeforeFirstUpdate()') </script>. It has to be called one time, after running the last update.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if something fails (update management engine not initialized...).
</dl>
</dl>
<a name="AllHistoricToString"></a><a name="AllHistoricToString()"></a> <dt> o <b>AllHistoricToString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>AllHistoricToString</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns a string describing the history of the optimization algorithm.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The string containing the evolution of the free parameters, objective and constraints. 
 Contains additional information with respect to the design table output of the optimization.
</dl>
</dl>
<a name="BeforeFirstUpdate"></a><a name="BeforeFirstUpdate()"></a> <dt> o <b>BeforeFirstUpdate</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BeforeFirstUpdate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initializes Settings.
 This method modifies some settings (measure) to assure that the model will be
 correctly updated according to the given optimization settings (visu/no visu).
 It has to be called one time :
 - after the 
<script type="text/javascript"> activateLinkAnchor('','InitUpdate','InitUpdate') </script> method - before calling the 
<script type="text/javascript"> activateLinkAnchor('','LaunchUpdate()','LaunchUpdate()') </script> method for the first time. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if something fails (update management engine not initialized...).
</dl>
</dl>
<a name="BeforeLastUpdate"></a><a name="BeforeLastUpdate()"></a> <dt> o <b>BeforeLastUpdate</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BeforeLastUpdate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Allows to restore the visualization settings for the last update.
 It has to be called one time, before running the last update.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if something fails (update management engine not initialized...).
</dl>
</dl>
<a name="GetBestResultIndex"></a><a name="GetBestResultIndex(int&amp;)"></a> <dt> o <b>GetBestResultIndex</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBestResultIndex</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oBestResultIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the index of the Opimization Log corresponding to the best solution found according to the problem defined.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBestResultIndex</tt>
   <dd> The index of the best point found by the optimizer.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the best is found. E_FAIL if it was not found. E_NOTIMPLEMENTED for algorithms (such as DOEs) for which this notion 
 is meaningless.
</dl>
</dl>
<a name="GetEndIterationNotification"></a><a name="GetEndIterationNotification()"></a> <dt> o <b>GetEndIterationNotification</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetEndIterationNotification</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the event send when an iteration of the algorithm is done.
 If you use the 
<script type="text/javascript"> activateLinkAnchor('','SendEndIterationNotification()','SendEndIterationNotification()') </script> method after each iteration, this event is triggered when the algorithm has finished an iteration	
 (each iteration corresponds to a model update)<p>	
 In your dialog, put a callback on this method to receive the
 end iteration notification.
</dl>
<a name="GetSetting"></a><a name="GetSetting(char*,double&amp;)"></a> <dt> o <b>GetSetting</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSetting</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttrName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oContent</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets an algorithm setting. The setting is defined by its attribute name.
 For pre-requisites restriction constraints, you have to overload it in derived classes.

 
<dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> <pre>
 Here is the code you have to write in your derived class
 {
	CATISpecAttrAccess_var access = this;
	if (!access)
		return E_FAIL;	

	CATISpecAttrKey_var key = access->GetAttrKey(attrName);
	if (!key)
		return E_FAIL;

	key->Release();

	CATAttrKind type = key->GetType();
	if (type == tk_integer)
		content = (double) access->GetInteger(key);
	else if (type == tk_double)
		content = access->GetDouble(key);
	else
		return E_FAIL;

	return S_OK;
 }
 </pre>
 </pre></dd>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttrName</tt>
   <dd> The name of the settings attribute to get.
 </dd>
    <dt><tt> oContent</tt>
   <dd> The returned value of the setting. it is given as a double but can be an integer.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else (non existing attribute)
</dl>
</dl>
<a name="InitUpdate"></a><a name="InitUpdate(CATIOptOptimization_var&amp;,CATLISTV(CATBaseUnknown_var)*,CATLISTV(CATBaseUnknown_var)*)"></a> <dt> o <b>InitUpdate</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InitUpdate</b>(<td> const <script type="text/javascript"> activateLink('CATIOptOptimization_var','CATIOptOptimization_var&amp;')</script> <td><tt>iOptim</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iInputs</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iOutputs</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initializes the update management engine.
 It has to be called (at least) one time , before running the others (
<script type="text/javascript"> activateLinkAnchor('','LaunchUpdate','LaunchUpdate') </script>, 
<script type="text/javascript"> activateLinkAnchor('','BeforeFirstUpdate','BeforeFirstUpdate') </script>,  
<script type="text/javascript"> activateLinkAnchor('','BeforeLastUpdate','BeforeLastUpdate') </script> and 
<script type="text/javascript"> activateLinkAnchor('','AfterLastUpdate)','AfterLastUpdate)') </script> else each one of those methods will do nothing but returning E_FAIL ! 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOptim</tt>
   <dd> the optimization whose settings have to be used during the update (like Visu/No Visu). In most cases, it is
 the optimization linked to the algorithm.
 </dd>
    <dt><tt> iInputs</tt>
   <dd> The inputs that have to be updated (in most cases, they are the given optimization free parameters, but 
 they may be different).
 </dd>
    <dt><tt> iOutputs</tt>
   <dd> The outputs that have to be updated (in most cases, they are the given optimization goals, but 
 they may be different).
 Return E_FAIL if something fails.</dd>
</dl>
</dl>
</dl>
<a name="LaunchUpdate"></a><a name="LaunchUpdate()"></a> <dt> o <b>LaunchUpdate</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LaunchUpdate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Asks the update management engine to launch the update of the inputs/outputs.
 This update is given in the 
<script type="text/javascript"> activateLinkAnchor('','InitUpdate','InitUpdate') </script> method, according to the settings of the given optimization. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if something fails (update management engine not initialized...).
</dl>
</dl>
<a name="OneHistoricToString"></a><a name="OneHistoricToString(int)"></a> <dt> o <b>OneHistoricToString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>OneHistoricToString</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHistoricIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBestResultIndex</tt>
   <dd> The index of the historic to be dumped.
 Returns a string describing the history of the optimization algorithm.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The string containing the evolution of the free parameters, objective and constraints. 
 Contains additional information with respect to the design table output of the optimization.
</dl>
</dl>
<a name="Run"></a><a name="Run(CATIOptOptimization_var&amp;)"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Run</b>(<td><script type="text/javascript"> activateLink('CATIOptOptimization_var','CATIOptOptimization_var&amp;')</script> <td><tt>spiOptim</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Triggers the computation of the user algorithm.
 <b>Role</b>: This method must be overloaded in derived classes.
 Write your algorithm code here. It may be a loop of the following type :
 while the termination criteria are not reached, do a modification of
 the inputs values, update the outputs and check the termination criteria.
 To do that, you will have to call the protected methods of this class in the
 following order :
 <pre>
 InitUpdate()
 BeforeFirstUpdate()

 While (...)
 {
		If("it is the last update")
			BeforeLastUpdate()

		LaunchUpdate()		
 }

 AfterLastUpdate()
 </pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spiOptim</tt>
   <dd> The optimization linked to this algorithm. It is used to access the update
 engine used in the </dd>
<script type="text/javascript"> activateLinkAnchor('','InitUpdate()','InitUpdate()') </script> and 
<script type="text/javascript"> activateLinkAnchor('','LaunchUpdate()','LaunchUpdate()') </script> methods. In most cases the algorithm is working on its optimization free parameters and goals, so
 that the optimization may be used to get the inputs and outputs to update.
 
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else
</dl>
</dl>
</dl>
<a name="SendEndIterationNotification"></a><a name="SendEndIterationNotification(CATNotification*)"></a> <dt> o <b>SendEndIterationNotification</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SendEndIterationNotification</b>(<td><script type="text/javascript"> activateLink('CATNotification','CATNotification*')</script> <td><tt>iNotif</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sends the end of iteration notification.
 It can be caugth everywhere you want (for example, in the stop dialog in order to update it during the run).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> The</tt>
   <dd> notification you want to send.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetSetting"></a><a name="SetSetting(char*,double)"></a> <dt> o <b>SetSetting</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSetting</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttrName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iContent</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets an algorithm setting. This setting is defined by its attribute name.
 For pre-requisites restriction constraints, you have to overload it in derived classes.

 
<dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> <pre>
 Here is the code you have to write in your derived class --
 {	
	CATISpecAttrAccess_var access = this;
	if (!access)
		return E_FAIL;

	CATISpecAttrKey_var key = access->GetAttrKey(attrName);
	if (!key)
		return E_FAIL;

	key->Release();
	
	CATAttrKind type = key->GetType();
	if (type == tk_integer)
		access->SetInteger(key, (int)content);
	else if (type == tk_double)
		access->SetDouble(key, content);
	else
		return E_FAIL;

	return S_OK;
 }
 </pre>
 </pre></dd>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttrName</tt>
   <dd> The name of the settings attribute to set.
 </dd>
    <dt><tt> iContent</tt>
   <dd> The value of the setting to set. it is given as a double but can be an integer.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else (non existing attribute)
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATOptAlgorithmAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>OptimizationItf</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

