<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPDMReconcile Class CATEpeInstance</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPDMReconcile.htm" href="../CATPDMReconcile.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPDMReconcile";	}
		function getCurrentObjectName() { 
 	return "CATEpeInstance"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPDMReconcile <script type="text/javascript" > writeClassCharacteristic(); </script> CATEpeInstance</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATEpeInstance_20740','CATEpeInstance','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATEpeInstance</b>
</p>
<p>
<b><i> Class representing an instance of Part in an Assembly structure.</i></b><br>


 <b>Role</b>:
 Define an instance of <script type="text/javascript"> activateLinkAnchor('CATEpePartVersion','','CATEpePartVersion') </script> within an Assembly structure.
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAssemblyRelation()"><b>GetAssemblyRelation</b></a>()
<dd>  Gets the Assembly relation reference of this instance.
 <dt> o 
    <a href="#GetExposedEntity()"><b>GetExposedEntity</b></a>()
<dd>  Access to object reconciliator internal object.
 <dt> o 
    <a href="#GetExposedEntity(CATScmInstance*)"><b>GetExposedEntity</b></a>(CATScmInstance*)
<dd>  Access to CAA reconciliator object from other reconciliator objects.
 <dt> o 
    <a href="#GetReference()"><b>GetReference</b></a>()
<dd>  Gets the Part reference of this instance.
 <dt> o 
    <a href="#ScanInstanceTree(CATEpeInstance*,int&amp;)"><b>ScanInstanceTree</b></a>(CATEpeInstance*,int&amp;)
<dd>  Gets next child in the instance tree.
 <dt> o 
    <a href="#SetAssemblyRelation(CATEpeFirstLevelInstance* const)"><b>SetAssemblyRelation</b></a>(CATEpeFirstLevelInstance* const)
<dd>  Sets the Assembly relation reference of this instance.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAssemblyRelation"></a><a name="GetAssemblyRelation()"></a> <dt> o <b>GetAssemblyRelation</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeFirstLevelInstance','CATEpeFirstLevelInstance *')</script>  <b>GetAssemblyRelation</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the Assembly relation reference of this instance.

 <br><b>Role</b>: Gets the Assembly relation reference of this instance.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Assembly relation object.
</dl>
</dl>
<a name="GetExposedEntity"></a><a name="GetExposedEntity()"></a> <dt> o <b>GetExposedEntity</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATScmInstance','CATScmInstance *')</script>  <b>GetExposedEntity</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Access to object reconciliator internal object.

 <b>Role:</b> Access to object reconciliator internal object..
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns <b><i>NULL</i></b> if one error occur, otherwise provide access
 associated  <b><i>CATScmInstance</i></b>.
</dl>
</dl>
<a name="GetExposedEntity"></a><a name="GetExposedEntity(CATScmInstance*)"></a> <dt> o <b>GetExposedEntity</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATEpeInstance','CATEpeInstance *')</script>  <b>GetExposedEntity</b>(<td> const <script type="text/javascript"> activateLink('CATScmInstance','CATScmInstance*')</script> <td><tt>ixObj</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Access to CAA reconciliator object from other reconciliator objects.

 <b>Role:</b> Access to CAA reconciliator object from other reconciliator objects.
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns <b><i>NULL</i></b> if one error occur, otherwise provide access
 associated <b><i>CATEpeInstance</i></b>. 
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixObj</tt>
   <dd>  Internal session entity.</dd>
</dl>
</dl>
</dl>
<a name="GetReference"></a><a name="GetReference()"></a> <dt> o <b>GetReference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpePartVersion','CATEpePartVersion *')</script>  <b>GetReference</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the Part reference of this instance.

 <br><b>Role</b>: Gets the father Part of the current object.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Father part.
</dl>
</dl>
<a name="ScanInstanceTree"></a><a name="ScanInstanceTree(CATEpeInstance*,int&amp;)"></a> <dt> o <b>ScanInstanceTree</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeInstance','CATEpeInstance *')</script>  <b>ScanInstanceTree</b>(<td><script type="text/javascript"> activateLink('CATEpeInstance','CATEpeInstance*')</script> <td><tt>ixPrevious</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ionUpDown</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets next child in the instance tree.

 <br><b>Role</b>: Scans assembly structure instance tree (in depth first).
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Next child object node. 
 <br>Return <tt>NULL</tt> if <tt>ixPrevious</tt> is not a child of current node 
 or if it is the last child
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixPrevious</tt>
   <dd> Current child object.
 <br><b>Legal values</b>:
 <ul>
 <li><tt>NULL</tt> To get the the root of the assembly (the <b><i>CATEpeInstance</b></i> itself) and 
 depth level is initialized to 0.</li>
 <ul/>
 
 </dd>
    <dt><tt> ionUpDown</tt>
   <dd>  Level of depth on the <b><i>CATEpeInstance</b></i>.
 This value is initialized to 0 when full assembly scan is done or when scan is initialized (NULL value for <b>ixPrevious</b>).
 Otherwise computed by incrementation or decrementation of the input value.
</dd>
</dl>
</dl>
</dl>
<a name="SetAssemblyRelation"></a><a name="SetAssemblyRelation(CATEpeFirstLevelInstance* const)"></a> <dt> o <b>SetAssemblyRelation</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAssemblyRelation</b>(<td><script type="text/javascript"> activateLink('CATEpeFirstLevelInstance*','CATEpeFirstLevelInstance* const')</script> <td><tt>ixAR</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the Assembly relation reference of this instance.

 <br><b>Role</b>: Sets the Assembly relation reference of this instance.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixAR</tt>
   <dd>   Assembly relation object.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATEpeInstance.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPDMReconcileModel</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

