<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Tessellation Class CATTessFanIter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../Tessellation.htm">This Framework</a>  <a href="class_CATTessEdgeIter_44892.htm">Previous</a>  <a href="class_CATTessPointIter_52888.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>Tessellation Class CATTessFanIter</h1>
<pre>
CATTessFanIter
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTessFanIter</b>
</p>
<p>
<b><i> Class defining the iterator on the fans resulting from a Tessellation operator.</i></b><br>

 <br> Such iterator is directly created by the <a href="../Tessellation/class_CATBodyTessellator_68290.htm#GetFace">CATBodyTessellator.GetFace</a> or 
<a href="../Tessellation/class_CATCellTessellator_67860.htm#GetFace">CATCellTessellator.GetFace</a> methods. Its deletion is managed at the CATBodyTessellator and CATCellTessellator deletion. 
 <br> Use it according to the following scheme:
 <ul>
 <li> Retrieve the number of fans 
 <li> Go the next result
 <li> Retrieve the result
 <li> Optionally, reset to begin again.
 </ul>
 <p> If the fan is closed, the first and last point of the fan are different. 
 <p> This class also allows you to directly retrieve the results in an array that 
 you have to allocate and deallocate after use.
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetFanAllNuPts(int[],int[])"><b>GetFanAllNuPts</b></a>(int[],int[])
<dd>  Globally retrieves the points ranks for all the fans.
 <dt> o 
    <a href="#GetFanNbPts()"><b>GetFanNbPts</b></a>()
<dd>  UP TO CATIA V5R17
 Returns the number of points of the current fan.
 <dt> o 
    <a href="#GetFanNbPts()"><b>GetFanNbPts</b></a>()
<dd>  FROM CATIA V5R17
 Returns the number of points of the current fan.
 <dt> o 
    <a href="#GetFanNuPts(CATLONG32[])"><b>GetFanNuPts</b></a>(CATLONG32[])
<dd>  Retrieves the points ranks (as CATLONG32) defining the current fan.
 <dt> o 
    <a href="#GetFanNuPts(int[])"><b>GetFanNuPts</b></a>(int[])
<dd>  Retrieves the points ranks (as int) defining the current fan.
 <dt> o 
    <a href="#GetNbFan(CATLONG32&amp;)"><b>GetNbFan</b></a>(CATLONG32&amp;)
<dd>  Returns the number of fans.
 <dt> o 
    <a href="#GoToNext()"><b>GoToNext</b></a>()
<dd>  Skips to the next fan.
 <dt> o 
    <a href="#IsExhausted()"><b>IsExhausted</b></a>()
<dd>  Tests whether the list is completed.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Resets the iterator to the beginning.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetFanAllNuPts"></a><a name="GetFanAllNuPts(int[],int[])"></a> <dt> o <b>GetFanAllNuPts</b>

<dt>  <table><tr><td>  public virtual void  <b>GetFanAllNuPts</b>(<td>int[] <td><tt>iNbPts</tt>,<tr><td></td><td>int[] <td><tt>iNuPts</tt>) const  </table></dt>
<dl>
  <dd>
 Globally retrieves the points ranks for all the fans.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNbPts[]</tt>
   <dd> The array of number of points for each fan. The allocation has to be managed by
 the caller: use </tt>GetNbFan</tt> for its dimension.
 </dd>
    <dt><tt> iNuPts[]</tt>
   <dd> The array of the point ranks. The allocation has to be managed by
 the caller: use </tt>oNbPtsAll</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetFanNbPts"></a><a name="GetFanNbPts()"></a> <dt> o <b>GetFanNbPts</b>

<dt>  <table><tr><td>  public virtual <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>GetFanNbPts</b>(<td>)const  </table></dt>
<dl>
  <dd>
 UP TO CATIA V5R17
 Returns the number of points of the current fan.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of points of the current fan.
</dl>
</dl>
<a name="GetFanNbPts"></a><a name="GetFanNbPts()"></a> <dt> o <b>GetFanNbPts</b>

<dt>  <table><tr><td>  public virtual <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>GetFanNbPts</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 FROM CATIA V5R17
 Returns the number of points of the current fan.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of points of the current fan.
</dl>
</dl>
<a name="GetFanNuPts"></a><a name="GetFanNuPts(CATLONG32[])"></a> <dt> o <b>GetFanNuPts</b>

<dt>  <table><tr><td>  public virtual void  <b>GetFanNuPts</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32[]</a> <td><tt>iNuPts</tt>) const  </table></dt>
<dl>
  <dd>
 Retrieves the points ranks (as CATLONG32) defining the current fan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuPts[]</tt>
   <dd>  The array of the points ranks. The allocation has to be managed by
 the caller: use </tt>GetFanNbPts</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetFanNuPts"></a><a name="GetFanNuPts(int[])"></a> <dt> o <b>GetFanNuPts</b>

<dt>  <table><tr><td>  public virtual void  <b>GetFanNuPts</b>(<td>int[] <td><tt>iNuPts</tt>) const  </table></dt>
<dl>
  <dd>
 Retrieves the points ranks (as int) defining the current fan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuPts[]</tt>
   <dd>  The array of the points ranks. The allocation has to be managed by
 the caller: use </tt>GetFanNbPts</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetNbFan"></a><a name="GetNbFan(CATLONG32&amp;)"></a> <dt> o <b>GetNbFan</b>

<dt>  <table><tr><td>  public <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">inline CATLONG32</a>  <b>GetNbFan</b>(<td><a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32&amp;</a> <td><tt>ioNbPtsAll</tt>)const  </table></dt>
<dl>
  <dd>
 Returns the number of fans.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioNbPtsAll</tt>
   <dd> The sum of the number of points for the definition of all the fans.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of fans.
</dl>
</dl>
<a name="GoToNext"></a><a name="GoToNext()"></a> <dt> o <b>GoToNext</b>

<dt>  <table><tr><td>  public virtual void  <b>GoToNext</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Skips to the next fan.
</dl>
<a name="IsExhausted"></a><a name="IsExhausted()"></a> <dt> o <b>IsExhausted</b>

<dt>  <table><tr><td>  public virtual <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>IsExhausted</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Tests whether the list is completed.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>: <tt>1</tt> if the list is completed, <tt>0</tt> otherwise.
</dl>
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public virtual void  <b>Reset</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Resets the iterator to the beginning.
</dl>
<hr>
 This object is included in the file: <b>CATTessFanIter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATTessellation</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
