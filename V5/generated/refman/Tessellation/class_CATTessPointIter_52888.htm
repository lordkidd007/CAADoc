<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Tessellation Class CATTessPointIter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../Tessellation.htm">This Framework</a>  <a href="class_CATTessFanIter_39212.htm">Previous</a>  <a href="class_CATTessPointPolyIter_83048.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>Tessellation Class CATTessPointIter</h1>
<pre>
CATTessPointIter
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTessPointIter</b>
</p>
<p>
<b><i> Class defining the iterator on the points resulting from a Tessellation operator.</i></b><br>

 <br> Such iterator is directly created by the <a href="../Tessellation/class_CATBodyTessellator_68290.htm#GetFace">CATBodyTessellator.GetFace</a> or 
<a href="../Tessellation/class_CATCellTessellator_67860.htm#GetFace">CATCellTessellator.GetFace</a> methods. Its deletion is managed at the CATBodyTessellator and CATCellTessellator deletion. 
 Use it according to the following scheme:
 <ul>
 <li> Retrieve the number of points 
 <li> Go the next result
 <li> Retrieve the result
 <li> Optionally, reset to begin again.
 </ul>
 <p> This class also allows you to directly retrieve the results in an array that 
 you have to allocate and deallocate after use.
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetNbPoint()"><b>GetNbPoint</b></a>()
<dd>  Returns the number of computed points.
 <dt> o 
    <a href="#GetPointNor(CATMathVector const*&amp;)"><b>GetPointNor</b></a>(CATMathVector const*&amp;)
<dd>  Retrieves a pointer to the normal at the current point.
 <dt> o 
    <a href="#GetPointNorAll(float[][3])"><b>GetPointNorAll</b></a>(float[][3])
<dd>  Globally retrieves the normal at each point.
 <dt> o 
    <a href="#GetPointNu()"><b>GetPointNu</b></a>()
<dd>  Returns the rank of the current point.
 <dt> o 
    <a href="#GetPointUv()"><b>GetPointUv</b></a>()
<dd>  Returns the parameters of the current point (in case of a face or a surface).
 <dt> o 
    <a href="#GetPointUvAll(float[][2])"><b>GetPointUvAll</b></a>(float[][2])
<dd>  Globally retrieves the parameters of all the points (in case of a face or a surface).
 <dt> o 
    <a href="#GetPointXyz()"><b>GetPointXyz</b></a>()
<dd>  Returns the Cartesian coordinates of the current point.
 <dt> o 
    <a href="#GetPointXyzAll(float[][3])"><b>GetPointXyzAll</b></a>(float[][3])
<dd>  Globally retrieves the Cartesian coordinates of all the points.
 <dt> o 
    <a href="#GoToNext()"><b>GoToNext</b></a>()
<dd>  Skips to the next point.
 <dt> o 
    <a href="#IsExhausted()"><b>IsExhausted</b></a>()
<dd>  Tests whether the list is completed.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Resets the iterator to the beginning.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetNbPoint"></a><a name="GetNbPoint()"></a> <dt> o <b>GetNbPoint</b>

<dt>  <table><tr><td>  public <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">inline CATLONG32</a>  <b>GetNbPoint</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the number of computed points.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of computed points.
</dl>
</dl>
<a name="GetPointNor"></a><a name="GetPointNor(CATMathVector const*&amp;)"></a> <dt> o <b>GetPointNor</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>GetPointNor</b>(<td>CATMathVector const*&amp; <td><tt>oNor</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves a pointer to the normal at the current point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNor</tt>
   <dd> The pointer to the normal.</dd>
</dl>
</dl>
</dl>
<a name="GetPointNorAll"></a><a name="GetPointNorAll(float[][3])"></a> <dt> o <b>GetPointNorAll</b>

<dt>  <table><tr><td>  public virtual void  <b>GetPointNorAll</b>(<td>float[][3] <td><tt>iNormals</tt>) const  </table></dt>
<dl>
  <dd>
 Globally retrieves the normal at each point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNormals[][3]</tt>
   <dd> The array of the coordinates. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetPointNu"></a><a name="GetPointNu()"></a> <dt> o <b>GetPointNu</b>

<dt>  <table><tr><td>  public virtual <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>GetPointNu</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the rank of the current point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The rank of the current point.
</dl>
</dl>
<a name="GetPointUv"></a><a name="GetPointUv()"></a> <dt> o <b>GetPointUv</b>

<dt>  <table><tr><td>  public virtual double const *  <b>GetPointUv</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the parameters of the current point (in case of a face or a surface).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The array of parameters.
</dl>
</dl>
<a name="GetPointUvAll"></a><a name="GetPointUvAll(float[][2])"></a> <dt> o <b>GetPointUvAll</b>

<dt>  <table><tr><td>  public virtual void  <b>GetPointUvAll</b>(<td>float[][2] <td><tt>iUv</tt>) const  </table></dt>
<dl>
  <dd>
 Globally retrieves the parameters of all the points (in case of a face or a surface).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUv[][2]</tt>
   <dd> The array of the parameters. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetPointXyz"></a><a name="GetPointXyz()"></a> <dt> o <b>GetPointXyz</b>

<dt>  <table><tr><td>  public virtual double const *  <b>GetPointXyz</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the Cartesian coordinates of the current point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The array of the Cartesian coordinates.
</dl>
</dl>
<a name="GetPointXyzAll"></a><a name="GetPointXyzAll(float[][3])"></a> <dt> o <b>GetPointXyzAll</b>

<dt>  <table><tr><td>  public virtual void  <b>GetPointXyzAll</b>(<td>float[][3] <td><tt>iCoordinates</tt>) const  </table></dt>
<dl>
  <dd>
 Globally retrieves the Cartesian coordinates of all the points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCoordinates[][3]</tt>
   <dd> The array of the coordinates. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GoToNext"></a><a name="GoToNext()"></a> <dt> o <b>GoToNext</b>

<dt>  <table><tr><td>  public virtual void  <b>GoToNext</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Skips to the next point.
</dl>
<a name="IsExhausted"></a><a name="IsExhausted()"></a> <dt> o <b>IsExhausted</b>

<dt>  <table><tr><td>  public virtual <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a>  <b>IsExhausted</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Tests whether the list is completed.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>: <tt>1</tt> if the list is completed, <tt>0</tt> otherwise.
</dl>
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public virtual void  <b>Reset</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Resets the iterator to the beginning.
</dl>
<hr>
 This object is included in the file: <b>CATTessPointIter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATTessellation</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
