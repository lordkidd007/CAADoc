<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIVisitor</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="interface_CATIValue_15890.htm">Previous</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>KnowledgeInterfaces Interface CATIVisitor</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIVisitor
 </pre>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../KnowledgeInterfaces/class_CATVisitorAdapter_60137.htm">CATVisitorAdapter</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIVisitor</b>
</p>
<p>
<b><i>    Interface dedicated to implementing a visitor pattern.</i></b><br>


 <b>Role</b>: The visitor performs operations on objects submitted by a provider
 (cf. Design Patterns by the Gang of Four, Addison-Wesley, chapter 5 "Visitor").<br>

 The provider scans recursively a structure and submit objects to the visitor. The visitor
 returns a result code indicating if the scan should continue or not.<br>

 It provides performance improvements over the method
 consisting in creating a list of interesting elements and then
 performing operations on them.

 <p><b>BOA information</b>: this interface CAN be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#SpecialDataNeeded()"><b>SpecialDataNeeded</b></a>()
<dd>  In some cases, special data is needed to be visited.
 <dt> o 
    <a href="#Visit(CATBaseUnknown*)"><b>Visit</b></a>(CATBaseUnknown*)
<dd>  Operates on the submitted object and returns a continuation code.
 <dt> o 
    <a href="#VisitPublisherForRecursion(CATIParmPublisher_var&amp;)"><b>VisitPublisherForRecursion</b></a>(CATIParmPublisher_var&amp;)
<dd>  For optimization purpose.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="SpecialDataNeeded"></a><a name="SpecialDataNeeded()"></a> <dt> o <b>SpecialDataNeeded</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATListOfCATUnicodeString_123909.htm">const CATListOfCATUnicodeString*</a>  <b>SpecialDataNeeded</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 In some cases, special data is needed to be visited.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  NULL if no special data is to be visited, else a list of strings containing format specifications
 (these formats have to be discussed between callers and providers)
</dl>
</dl>
<a name="Visit"></a><a name="Visit(CATBaseUnknown*)"></a> <dt> o <b>Visit</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Visit</b>(<td><a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown*</a> <td><tt>iInstance</tt>)=0  </table></dt>
<dl>
  <dd>
 Operates on the submitted object and returns a continuation code.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInstance</tt>
   <dd> Object to be performed on. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK to continue the scan, E_FAIL to stop.
</dl>
</dl>
<a name="VisitPublisherForRecursion"></a><a name="VisitPublisherForRecursion(CATIParmPublisher_var&amp;)"></a> <dt> o <b>VisitPublisherForRecursion</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>VisitPublisherForRecursion</b>(<td> const CATIParmPublisher_var&amp; <td><tt>publisher</tt>) = 0  </table></dt>
<dl>
  <dd>
 For optimization purpose.
 if VisitChildren is called with recursive argument, allows to control
 if given publisher is to be visited
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> the</tt>
   <dd> tested publisher </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the publisher is to be visited, E_FAIL else
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIVisitor.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
