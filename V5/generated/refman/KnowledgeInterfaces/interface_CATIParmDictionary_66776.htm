<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIParmDictionary</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="interface_CATIParmAsStored_51078.htm">Previous</a>  <a href="interface_CATIParmEvents_39938.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>KnowledgeInterfaces Interface CATIParmDictionary</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIParmDictionary
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIParmDictionary</b>
</p>
<p>
<b><i>    Interface to manage the dictionary of types.</i></b><br>

 <b>Role</b>: It gathers static methods to parameters type dictionary management.
 It offers direct access to common literals types and methods to find magnitudes and units by name<br>
 It gives a way to create your own functions that can later be used in relations, and add them <br>
 to the dictionary<br>
 It gives a way to add own applications that can later be used in applications dialog in the<br>
 knowledgeware workbench <br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATIAddLibrary_38892.htm">CATIAddLibrary</a>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType</a>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeMagnitude_51192.htm">CATICkeMagnitude</a>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeUnit_23622.htm">CATICkeUnit</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddType(CATICkeType_var&amp;)"><b>AddType</b></a>(CATICkeType_var&amp;)
<dd>  Adds a type to the dictionnary.
 <dt> o 
    <a href="#CreateType(char*,CATICkeType_var&amp;,CATUnicodeString&amp;)"><b>CreateType</b></a>(char*,CATICkeType_var&amp;,CATUnicodeString&amp;)
<dd>  Creates a C++ type (or find it if already exists) and add it to dictionary.
 <dt> o 
    <a href="#FindMagnitude(CATUnicodeString&amp;)"><b>FindMagnitude</b></a>(CATUnicodeString&amp;)
<dd>  Finds a magnitude from its coded name.
 <dt> o 
    <a href="#FindType(char*)"><b>FindType</b></a>(char*)
<dd>  Finds a type by its coded name.
 <dt> o 
    <a href="#FindUnit(CATUnicodeString&amp;)"><b>FindUnit</b></a>(CATUnicodeString&amp;)
<dd>  Finds a unit from its coded name.
 <dt> o 
    <a href="#FindUnitFromSymbol(CATUnicodeString&amp;)"><b>FindUnitFromSymbol</b></a>(CATUnicodeString&amp;)
<dd>  Finds a unit from its symbol.
 <dt> o 
    <a href="#GetAngleType()"><b>GetAngleType</b></a>()
<dd>   Returns the Angle type.
 <dt> o 
    <a href="#GetBooleanType()"><b>GetBooleanType</b></a>()
<dd>   Returns the Boolean type.
 <dt> o 
    <a href="#GetDimensionType()"><b>GetDimensionType</b></a>()
<dd>   Returns the Dimension type.
 <dt> o 
    <a href="#GetEnumType()"><b>GetEnumType</b></a>()
<dd>   Returns the Enum type.
 <dt> o 
    <a href="#GetFeatureType()"><b>GetFeatureType</b></a>()
<dd>   Returns the Feature type: main basic class for feature references.
 <dt> o 
    <a href="#GetIntegerType()"><b>GetIntegerType</b></a>()
<dd>   Returns the Integer type.
 <dt> o 
    <a href="#GetLengthType()"><b>GetLengthType</b></a>()
<dd>   Returns the Length type.
 <dt> o 
    <a href="#GetListType()"><b>GetListType</b></a>()
<dd>   Returns the type for lists.
 <dt> o 
    <a href="#GetLiteralType()"><b>GetLiteralType</b></a>()
<dd>   Returns the basic type for any literal (simple value).
 <dt> o 
    <a href="#GetRealType()"><b>GetRealType</b></a>()
<dd>   Returns the Real type.
 <dt> o 
    <a href="#GetStringType()"><b>GetStringType</b></a>()
<dd>   Returns the String type.
 <dt> o 
    <a href="#GetVoidType()"><b>GetVoidType</b></a>()
<dd>   Returns the Void type.
 <dt> o 
    <a href="#GetVolatileFactory()"><b>GetVolatileFactory</b></a>()
<dd>   Returns the volatile factory.
 <dt> o 
    <a href="#LoadLibrary(char*)"><b>LoadLibrary</b></a>(char*)
<dd>  Asks to load a library by its name.
 <dt> o 
    <a href="#Magnitudes(CATCkeListOfMagnitude)"><b>Magnitudes</b></a>(CATCkeListOfMagnitude)
<dd>  Returns the list of all magntitudes contained in the parameter dictionary.
 <dt> o 
    <a href="#RemoveType(CATICkeType_var&amp;)"><b>RemoveType</b></a>(CATICkeType_var&amp;)
<dd>  Removes a type to the dictionnary.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddType"></a><a name="AddType(CATICkeType_var&amp;)"></a> <dt> o <b>AddType</b>

<dt>  <table><tr><td>  public virtual void  <b>AddType</b>(<td> const CATICkeType_var&amp; <td><tt>iType</tt>)=0  </table></dt>
<dl>
  <dd>
 Adds a type to the dictionnary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType:</tt>
   <dd> type to add</dd>
</dl>
</dl>
</dl>
<a name="CreateType"></a><a name="CreateType(char*,CATICkeType_var&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>CreateType</b>(<td> const char* <td><tt>iCodedName</tt>,<tr><td></td><td> const CATICkeType_var&amp; <td><tt>iFatherType</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iNLSName</tt><td><tt>= ""</tt>)=0   </table></dt>
<dl>
  <dd>
 Creates a C++ type (or find it if already exists) and add it to dictionary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCodedName</tt>
   <dd> : name of type to create  </dd>
    <dt><tt> iFatherType:</tt>
   <dd> father type if any  </dd>
    <dt><tt> iNLSName</tt>
   <dd>   : NLS name for the type if any  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   CATICkeType_var : type found or created
</dl>
</dl>
<a name="FindMagnitude"></a><a name="FindMagnitude(CATUnicodeString&amp;)"></a> <dt> o <b>FindMagnitude</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeMagnitude_51192.htm">CATICkeMagnitude_var</a>  <b>FindMagnitude</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>s</tt>)=0   </table></dt>
<dl>
  <dd>
 Finds a magnitude from its coded name.
</dl>
<a name="FindType"></a><a name="FindType(char*)"></a> <dt> o <b>FindType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>FindType</b>(<td> const char* <td><tt>iCodedName</tt>)=0   </table></dt>
<dl>
  <dd>
 Finds a type by its coded name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCodedName</tt>
   <dd> : name of type to find</dd>
</dl>
</dl>
</dl>
<a name="FindUnit"></a><a name="FindUnit(CATUnicodeString&amp;)"></a> <dt> o <b>FindUnit</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeUnit_23622.htm">CATICkeUnit_var</a>  <b>FindUnit</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>s</tt>)=0   </table></dt>
<dl>
  <dd>
 Finds a unit from its coded name.
</dl>
<a name="FindUnitFromSymbol"></a><a name="FindUnitFromSymbol(CATUnicodeString&amp;)"></a> <dt> o <b>FindUnitFromSymbol</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeUnit_23622.htm">CATICkeUnit_var</a>  <b>FindUnitFromSymbol</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>symbol</tt>)=0  </table></dt>
<dl>
  <dd>
 Finds a unit from its symbol.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> symbol</tt>
   <dd> the string containing the symbol (eg. "mm" or "m3"). 
 <br>The empty string argument "" is not valid.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the unit (NULL_var if the unit wasn't found)
</dl>
</dl>
<a name="GetAngleType"></a><a name="GetAngleType()"></a> <dt> o <b>GetAngleType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetAngleType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Angle type.
</dl>
<a name="GetBooleanType"></a><a name="GetBooleanType()"></a> <dt> o <b>GetBooleanType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetBooleanType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Boolean type.
</dl>
<a name="GetDimensionType"></a><a name="GetDimensionType()"></a> <dt> o <b>GetDimensionType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetDimensionType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Dimension type.
</dl>
<a name="GetEnumType"></a><a name="GetEnumType()"></a> <dt> o <b>GetEnumType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetEnumType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Enum type.
</dl>
<a name="GetFeatureType"></a><a name="GetFeatureType()"></a> <dt> o <b>GetFeatureType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetFeatureType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Feature type: main basic class for feature references.
</dl>
<a name="GetIntegerType"></a><a name="GetIntegerType()"></a> <dt> o <b>GetIntegerType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetIntegerType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Integer type.
</dl>
<a name="GetLengthType"></a><a name="GetLengthType()"></a> <dt> o <b>GetLengthType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetLengthType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Length type.
</dl>
<a name="GetListType"></a><a name="GetListType()"></a> <dt> o <b>GetListType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetListType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the type for lists.
</dl>
<a name="GetLiteralType"></a><a name="GetLiteralType()"></a> <dt> o <b>GetLiteralType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetLiteralType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the basic type for any literal (simple value).
</dl>
<a name="GetRealType"></a><a name="GetRealType()"></a> <dt> o <b>GetRealType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetRealType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Real type.
</dl>
<a name="GetStringType"></a><a name="GetStringType()"></a> <dt> o <b>GetStringType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetStringType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the String type.
</dl>
<a name="GetVoidType"></a><a name="GetVoidType()"></a> <dt> o <b>GetVoidType</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeType_23636.htm">CATICkeType_var</a>  <b>GetVoidType</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the Void type.
</dl>
<a name="GetVolatileFactory"></a><a name="GetVolatileFactory()"></a> <dt> o <b>GetVolatileFactory</b>

<dt>  <table><tr><td>  public virtual <a href="../KnowledgeInterfaces/interface_CATICkeParmFactory_65248.htm">CATICkeParmFactory_var</a>  <b>GetVolatileFactory</b>(<td>)=0  </table></dt>
<dl>
  <dd>
  Returns the volatile factory.
</dl>
<a name="LoadLibrary"></a><a name="LoadLibrary(char*)"></a> <dt> o <b>LoadLibrary</b>

<dt>  <table><tr><td>  public virtual CATCke::Boolean  <b>LoadLibrary</b>(<td> const char* <td><tt>iLibraryName</tt>)=0  </table></dt>
<dl>
  <dd>
 Asks to load a library by its name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLibraryName:</tt>
   <dd> C++ class name of the library </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    : CATCke::True if succeeded
</dl>
</dl>
<a name="Magnitudes"></a><a name="Magnitudes(CATCkeListOfMagnitude)"></a> <dt> o <b>Magnitudes</b>

<dt>  <table><tr><td>  public virtual void  <b>Magnitudes</b>(<td><a href="../KnowledgeInterfaces/typedef_CATCkeListOfMagnitude_89008.htm">CATCkeListOfMagnitude</a> <td><tt>ioListOfMagnitudes</tt>)=0  </table></dt>
<dl>
  <dd>
 Returns the list of all magntitudes contained in the parameter dictionary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioListOfMagnitudes:</tt>
   <dd> a pointer to an empty list of magnitudes.</dd>
</dl>
</dl>
</dl>
<a name="RemoveType"></a><a name="RemoveType(CATICkeType_var&amp;)"></a> <dt> o <b>RemoveType</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveType</b>(<td> const CATICkeType_var&amp; <td><tt>iType</tt>)=0  </table></dt>
<dl>
  <dd>
 Removes a type to the dictionnary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType:</tt>
   <dd> type to remove : USE WITH CARE</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIParmDictionary.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
