<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricOperators Class CATDistanceMinPtSur</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GeometricOperators.htm">This Framework</a>  <a href="class_CATDistanceMinPtCrv_72332.htm">Previous</a>  <a href="class_CATDistanceTool_46095.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GeometricOperators Class CATDistanceMinPtSur</h1>
<pre>
<a href="../Mathematics/class_CATCGMVirtual_33296.htm">Mathematics.CATCGMVirtual</a>
  |
  +---<a href="../GeometricObjects/class_CATCGMOperator_38910.htm">GeometricObjects.CATCGMOperator</a>
    |
    +---<a href="../GeometricOperators/class_CATGeoOperator_40602.htm">GeometricOperators.CATGeoOperator</a>
      |
      +---CATDistanceMinPtSur
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATDistanceMinPtSur</b>
</p>
<p>
<b><i> Class defining the operator of the minimum distance between
 a point and a surface.</i></b><br>

<ul>
<li>The CATDistanceMinPtSur operator is created with the <tt>CreateDistanceMin</tt> method and 
 directly <tt>delete</tt>d with the usual C++ delete operator.
 It is is not streamable. 
<li>In case of <tt>BASIC</tt>
 mode, the operation is automatically performed at the operator creation. 
 In case of <tt>ADVANCED</tt>
 mode, options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. The advanced mode also allows you to
 run the same operator with different points.
<li>In both cases, the result is accessed with specific methods.
</ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATDistanceMinPtSur()"><b>~CATDistanceMinPtSur</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDiagnostic()"><b>GetDiagnostic</b></a>()
<dd>  In the case of SetPointAndInit usage, the algorithm is limited to a maximum number of iterations.
 <dt> o 
    <a href="#GetDistance()"><b>GetDistance</b></a>()
<dd>  Returns the minimum distance between a surface and a point.
 <dt> o 
    <a href="#GetPointOnSurface()"><b>GetPointOnSurface</b></a>()
<dd>  Creates a CATPointOnSurface realizing the minimum distance
 between a surface and a point.
 <dt> o 
    <a href="#GetSurParam()"><b>GetSurParam</b></a>()
<dd>  Returns the parameter of a point realizing the minimum distance
 between a surface and a point.
 <dt> o 
    <a href="#IsASolution()"><b>IsASolution</b></a>()
<dd>  Tests whether a solution exists in case of an 
 excluded boundary seach (<tt>iSearchOnBoundary=FALSE</tt>).
 <dt> o 
    <a href="#SetLimits(CATSurLimits)"><b>SetLimits</b></a>(CATSurLimits)
<dd>  Defines the new domain of the surface to take into account for <tt>this</tt> operator    
 (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetPoint(CATMathPoint&amp;)"><b>SetPoint</b></a>(CATMathPoint&amp;)
<dd>  Sets a new point from which the distance to the same surface is evaluated
 (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetPoint(CATPoint*)"><b>SetPoint</b></a>(CATPoint*)
<dd>  Sets a new point from which the distance to the same surface is evaluated
 (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetPointAndInit(CATMathPoint&amp;,CATSurParam)"><b>SetPointAndInit</b></a>(CATMathPoint&amp;,CATSurParam)
<dd>   Sets a new point and an initialization
 (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetPointAndInit(CATPoint*,CATSurParam)"><b>SetPointAndInit</b></a>(CATPoint*,CATSurParam)
<dd>   Sets a new point and an initialization
 (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetSearchOnBoundary(CATBoolean)"><b>SetSearchOnBoundary</b></a>(CATBoolean)
<dd>  Defines whether the boundaries are taken into account or not (<tt>ADVANCED</tt> mode).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATDistanceMinPtSur"></a><a name="~CATDistanceMinPtSur()"></a> <dt> o <b>~CATDistanceMinPtSur</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATDistanceMinPtSur</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetDiagnostic"></a><a name="GetDiagnostic()"></a> <dt> o <b>GetDiagnostic</b>

<dt>  <table><tr><td>  public virtual <a href="../AdvancedMathematics/enum_CATMathDiagnostic_59331.htm">CATMathDiagnostic</a>  <b>GetDiagnostic</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 In the case of SetPointAndInit usage, the algorithm is limited to a maximum number of iterations.
 If a maximum number of iterations is reached, the returned point is not fully reconverged but
 can be used as a new init, using the SetPointAndInit method.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnostic (CATMathOK or CATMathMaxIteration)
</dl>
</dl>
<a name="GetDistance"></a><a name="GetDistance()"></a> <dt> o <b>GetDistance</b>

<dt>  <table><tr><td>  public virtual <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>GetDistance</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Returns the minimum distance between a surface and a point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The distance.
</dl>
</dl>
<a name="GetPointOnSurface"></a><a name="GetPointOnSurface()"></a> <dt> o <b>GetPointOnSurface</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATPointOnSurface_58772.htm">CATPointOnSurface *</a>  <b>GetPointOnSurface</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Creates a CATPointOnSurface realizing the minimum distance
 between a surface and a point.
<br>Note that only one point is proposed, even multiple solutions exist.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created point. A new point is created each time this method is called.
 If you do not want to keep the created point, use the 
<a href="../GeometricObjects/interface_CATICGMContainer_49680.htm#Remove">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetSurParam"></a><a name="GetSurParam()"></a> <dt> o <b>GetSurParam</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/class_CATSurParam_24459.htm">CATSurParam</a>  <b>GetSurParam</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Returns the parameter of a point realizing the minimum distance
 between a surface and a point.
<br>Note that only one point is proposed, even multiple solutions exist.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The parameter on the surface.
</dl>
</dl>
<a name="IsASolution"></a><a name="IsASolution()"></a> <dt> o <b>IsASolution</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsASolution</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Tests whether a solution exists in case of an 
 excluded boundary seach (<tt>iSearchOnBoundary=FALSE</tt>).
 <br>To use after the run.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
<dl><dt><tt>TRUE</tt><dd> the solution exists inside the surface,
(with excluded boundary). 
    <dt><tt>FALSE</tt><dd> the solution exists only on the surface 
 boundary.</dl>
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATSurLimits)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLimits</b>(<td><a href="../GeometricObjects/class_CATSurLimits_30090.htm">CATSurLimits</a> <td><tt>iLimits</tt>) = 0  </table></dt>
<dl>
  <dd>
 Defines the new domain of the surface to take into account for <tt>this</tt> operator    
 (<tt>ADVANCED</tt> mode).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits</tt>
   <dd> The limitations on the surface.</dd>
</dl>
</dl>
</dl>
<a name="SetPoint"></a><a name="SetPoint(CATMathPoint&amp;)"></a> <dt> o <b>SetPoint</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPoint</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iNewMathPointToOperate</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a new point from which the distance to the same surface is evaluated
 (<tt>ADVANCED</tt> mode).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewMathPointToOperate</tt>
   <dd> The new point to take into account.</dd>
</dl>
</dl>
</dl>
<a name="SetPoint"></a><a name="SetPoint(CATPoint*)"></a> <dt> o <b>SetPoint</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPoint</b>(<td><a href="../GeometricObjects/interface_CATPoint_13208.htm">CATPoint*</a> <td><tt>iNewPointToOperate</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a new point from which the distance to the same surface is evaluated
 (<tt>ADVANCED</tt> mode).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewPointToOperate</tt>
   <dd> The pointer to the new point to take into account.</dd>
</dl>
</dl>
</dl>
<a name="SetPointAndInit"></a><a name="SetPointAndInit(CATMathPoint&amp;,CATSurParam)"></a> <dt> o <b>SetPointAndInit</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPointAndInit</b>(<td><a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iNewPointToOperate</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATSurParam_24459.htm">CATSurParam</a> <td><tt>iSolutionInit</tt>) = 0  </table></dt>
<dl>
  <dd>
  Sets a new point and an initialization
 (<tt>ADVANCED</tt> mode).
<br>This is usefull for computing the distance to a new point near a another one, whose CATSurParam
 solution is already known. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMathNewPointToOperate</tt>
   <dd> The new point to take into account. 
 </dd>
    <dt><tt> iSolutionInit</tt>
   <dd> The parameter of a point close from the solution.</dd>
</dl>
</dl>
</dl>
<a name="SetPointAndInit"></a><a name="SetPointAndInit(CATPoint*,CATSurParam)"></a> <dt> o <b>SetPointAndInit</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPointAndInit</b>(<td><a href="../GeometricObjects/interface_CATPoint_13208.htm">CATPoint*</a> <td><tt>iNewPointToOperate</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATSurParam_24459.htm">CATSurParam</a> <td><tt>iSolutionInit</tt>) = 0  </table></dt>
<dl>
  <dd>
  Sets a new point and an initialization
 (<tt>ADVANCED</tt> mode).
<br>This is usefull for computing the distance to a new point near a another one, whose CATSurParam
 solution is already known. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewPointToOperate</tt>
   <dd> The pointer to the new point to take into account. 
 </dd>
    <dt><tt> iSolutionInit</tt>
   <dd> The parameter of a point close from the solution.</dd>
</dl>
</dl>
</dl>
<a name="SetSearchOnBoundary"></a><a name="SetSearchOnBoundary(CATBoolean)"></a> <dt> o <b>SetSearchOnBoundary</b>

<dt>  <table><tr><td>  public virtual void  <b>SetSearchOnBoundary</b>(<td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iSearchOnBoundary</tt>) =0  </table></dt>
<dl>
  <dd>
 Defines whether the boundaries are taken into account or not (<tt>ADVANCED</tt> mode). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSearchMode</tt>
   <dd> The type of search.
 <br><b>Legal values</b>:
  <dl><dt><tt>FALSE</tt><dd> the operator is equivalent to an orthogonal
 projection which realizes the minimum distance.
<dt><tt>TRUE</tt><dd> the operator always return a solution realizing minimum
 distance even if it is not a projection.</dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATDistanceMinPtSur.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricOperators</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
