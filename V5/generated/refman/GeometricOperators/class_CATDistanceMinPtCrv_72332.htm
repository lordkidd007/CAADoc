<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricOperators Class CATDistanceMinPtCrv</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GeometricOperators.htm">This Framework</a>  <a href="class_CATDistanceMinCrvCrv_80362.htm">Previous</a>  <a href="class_CATDistanceMinPtSur_73117.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GeometricOperators Class CATDistanceMinPtCrv</h1>
<pre>
<a href="../Mathematics/class_CATCGMVirtual_33296.htm">Mathematics.CATCGMVirtual</a>
  |
  +---<a href="../GeometricObjects/class_CATCGMOperator_38910.htm">GeometricObjects.CATCGMOperator</a>
    |
    +---CATDistanceMinPtCrv
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATDistanceMinPtCrv</b>
</p>
<p>
<b><i> Class defining the operator of the minimum distance between
 a point and a curve.</i></b><br>

<ul>
<li>The CATDistanceMinPtCrv operator is created with the <tt>CreateDistanceMin</tt> method  and 
 directly <tt>delete</tt>d with the usual C++ delete operator.
 It is is not streamable. 
<li>In case of <tt>BASIC</tt>
 mode, the operation is automatically performed at the operator creation. 
 In case of <tt>ADVANCED</tt>
 mode, options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. The advanced mode also allows you to
 run the same operator with different points.
<li>In both cases, the result is accessed with specific methods.
</ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATDistanceMinPtCrv()"><b>~CATDistanceMinPtCrv</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCrvParam()"><b>GetCrvParam</b></a>()
<dd>  Returns the global parameter of the point realizing the minimum
 distance.
 <dt> o 
    <a href="#GetDistance()"><b>GetDistance</b></a>()
<dd>  Returns the minimum distance between a curve and a point.
 <dt> o 
    <a href="#GetPointOnCurve()"><b>GetPointOnCurve</b></a>()
<dd>  Creates a CATPointCnCurve realizing the minimum distance.
 <dt> o 
    <a href="#SetLimits(CATCrvLimits&amp;)"><b>SetLimits</b></a>(CATCrvLimits&amp;)
<dd>  Defines the new domain of the curve to take into account for <tt>this</tt> operator in 
 <tt>ADVANCED</tt> mode.
 <dt> o 
    <a href="#SetPoint(CATMathPoint&amp;)"><b>SetPoint</b></a>(CATMathPoint&amp;)
<dd>  Sets the new point from which the main distance with the curve is computed.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATDistanceMinPtCrv"></a><a name="~CATDistanceMinPtCrv()"></a> <dt> o <b>~CATDistanceMinPtCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATDistanceMinPtCrv</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetCrvParam"></a><a name="GetCrvParam()"></a> <dt> o <b>GetCrvParam</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam</a>  <b>GetCrvParam</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Returns the global parameter of the point realizing the minimum
 distance.
<br>Note that only one point is proposed, even multiple solutions exist.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The parameter on the curve.
</dl>
</dl>
<a name="GetDistance"></a><a name="GetDistance()"></a> <dt> o <b>GetDistance</b>

<dt>  <table><tr><td>  public virtual <a href="../AnalysisMeshingToolsItf/function_double_23506.htm">double</a>  <b>GetDistance</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Returns the minimum distance between a curve and a point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The distance.
</dl>
</dl>
<a name="GetPointOnCurve"></a><a name="GetPointOnCurve()"></a> <dt> o <b>GetPointOnCurve</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATPointOnCurve_46166.htm">CATPointOnCurve *</a>  <b>GetPointOnCurve</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Creates a CATPointCnCurve realizing the minimum distance.
<br>Note that only one point is proposed, even multiple solutions exist.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created point. A new point is created each time this method is called.
 If you do not want to keep the created point, use the 
<a href="../GeometricObjects/interface_CATICGMContainer_49680.htm#Remove">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATCrvLimits&amp;)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLimits</b>(<td> const <a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>iLimits</tt>) = 0  </table></dt>
<dl>
  <dd>
 Defines the new domain of the curve to take into account for <tt>this</tt> operator in 
 <tt>ADVANCED</tt> mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits</tt>
   <dd> The new limitations on the curve.</dd>
</dl>
</dl>
</dl>
<a name="SetPoint"></a><a name="SetPoint(CATMathPoint&amp;)"></a> <dt> o <b>SetPoint</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPoint</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iPoint</tt>) =0  </table></dt>
<dl>
  <dd>
 Sets the new point from which the main distance with the curve is computed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The new point.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATDistanceMinPtCrv.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricOperators</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
