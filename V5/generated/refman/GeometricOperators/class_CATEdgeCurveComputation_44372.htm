<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricOperators Class CATEdgeCurveComputation</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GeometricOperators.htm" href="../GeometricOperators.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GeometricOperators";	}
		function getCurrentObjectName() { 
 	return "CATEdgeCurveComputation"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GeometricOperators <script type="text/javascript" > writeClassCharacteristic(); </script> CATEdgeCurveComputation</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATEdgeCurveComputation_44372','CATEdgeCurveComputation','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATEdgeCurveComputation</b>
</p>
<p>
<b><i> Class defining the operator to create the edge curve representing two curves.</i></b><br>

 <br>This operator first checks that the two curves can be merged. You must use it as soon as the mapping
 between the parameterizations of the two initial curves is not linear.
<ul>
<li>The CATEdgeCurveComputation operator is created with the <tt>CreateEdgeCurveComputation</tt> method and 
 directly <tt>delete</tt>d with the usual C++ delete operator.
 It is is not streamable. 
<li>In case of <tt>BASIC</tt>
 mode, the operation is automatically performed at the operator creation. 
 In case of <tt>ADVANCED</tt>
 mode, options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. 
<li>In both cases, the result is accessed with the <tt>GetEdgeCurve</tt> method.
</ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATEdgeCurveComputation()"><b>~CATEdgeCurveComputation</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetEdgeCurve()"><b>GetEdgeCurve</b></a>()
<dd>  Returns the created edge curve.
 <dt> o 
    <a href="#SetLimits(CATCrvLimits&amp;,CATCrvLimits&amp;)"><b>SetLimits</b></a>(CATCrvLimits&amp;,CATCrvLimits&amp;)
<dd>  Defines the domains of the curves to take into account (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetMaxGap(double)"><b>SetMaxGap</b></a>(double)
<dd>  Defines the maximum gap between the initial curves above which the edge curve cannot be created
(<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetParams(CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;)"><b>SetParams</b></a>(CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;)
<dd>  Defines the domains of the curves to take into account (<tt>ADVANCED mode</tt>).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATEdgeCurveComputation"></a><a name="~CATEdgeCurveComputation()"></a> <dt> o <b>~CATEdgeCurveComputation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATEdgeCurveComputation</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetEdgeCurve"></a><a name="GetEdgeCurve()"></a> <dt> o <b>GetEdgeCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATEdgeCurve','CATEdgeCurve *')</script>  <b>GetEdgeCurve</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the created edge curve. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The pointer to the created edge curve, <tt>NULL</tt> if the initial curves cannot be merged.
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATCrvLimits&amp;,CATCrvLimits&amp;)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLimits</b>(<td> const <script type="text/javascript"> activateLink('CATCrvLimits','CATCrvLimits&amp;')</script> <td><tt>iLimits1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCrvLimits','CATCrvLimits&amp;')</script> <td><tt>iLimits2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the domains of the curves to take into account (<tt>ADVANCED mode</tt>).
 <br>The relative sense (start-end of each curve) is not specified.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits1</tt>
   <dd> The limitations of the first curve.
 </dd>
    <dt><tt> iLimits2</tt>
   <dd> The limitations of the second curve.</dd>
</dl>
</dl>
</dl>
<a name="SetMaxGap"></a><a name="SetMaxGap(double)"></a> <dt> o <b>SetMaxGap</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetMaxGap</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iMaxGap</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the maximum gap between the initial curves above which the edge curve cannot be created
(<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMaxGap</tt>
   <dd> The maximum gap value. By default, a large gap is allowed.</dd>
</dl>
</dl>
</dl>
<a name="SetParams"></a><a name="SetParams(CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;,CATCrvParam&amp;)"></a> <dt> o <b>SetParams</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetParams</b>(<td> const <script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam&amp;')</script> <td><tt>iStartParam1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam&amp;')</script> <td><tt>iEndParam1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam&amp;')</script> <td><tt>iStartParam2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam&amp;')</script> <td><tt>iEndParam2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the domains of the curves to take into account (<tt>ADVANCED mode</tt>).
 <br>This method allows you to specify working params for mergeability computation.
 <br>The relative sense (start-end of each curve) is specified.
 <br>It has no effect on the relative orientation of input curves within the edge curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStartParam1</tt>
   <dd> The parameter of the first limitation of the first curve.
 </dd>
    <dt><tt> iEndParam1</tt>
   <dd> The parameter of the end limitation of the first curve.
 </dd>
    <dt><tt> iStartParam2</tt>
   <dd> The parameter of the first limitation of the second curve. 
 </dd>
    <dt><tt> iEndParam2</tt>
   <dd> The parameter of the end limitation of the second curve.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATEdgeCurveComputation.h</b><br>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

