<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>XMLParser Interface CATIDOMNodeFilter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../XMLParser.htm">This Framework</a>  <a href="interface_CATIDOMNode_21589.htm">Previous</a>  <a href="interface_CATIDOMNodeIterator_71203.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>XMLParser Interface CATIDOMNodeFilter</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIDOMNodeFilter
 </pre>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>CATIDOMNodeFilter</b>
</p>
<p>
<b><i> Interface for filters objects that know how to "filter out" nodes.</i></b><br>
 If a 
 <a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> or 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a> is given a  
<a href="../XMLParser/interface_CATIDOMNodeFilter_55467.htm">CATIDOMNodeFilter</a>, it applies the filter before it returns the next  node. If the filter says to accept the node, the traversal logic returns 
 it; otherwise, traversal looks for the next node and pretends that the 
 node that was rejected was not there.
 <p>The DOM does not provide any filters. 
<a href="../XMLParser/interface_CATIDOMNodeFilter_55467.htm">CATIDOMNodeFilter</a> is just an  interface that users can implement to provide their own filters. 
 <p>
<a href="../XMLParser/interface_CATIDOMNodeFilter_55467.htm">CATIDOMNodeFilter</a> instances do not need to know how to traverse from node  to node, nor do they need to know anything about the data structure that 
 is being traversed. This makes it very easy to write filters, since the 
 only thing they have to know how to do is evaluate a single node. One 
 filter may be used with a number of different kinds of traversals, 
 encouraging code reuse.
 <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AcceptNode(CATIDOMNode_var&amp;,FilterAction&amp;)"><b>AcceptNode</b></a>(CATIDOMNode_var&amp;,FilterAction&amp;)
<dd>  Tests whether a specified node is visible in the logical view of a 
 <tt>CATIDOMTreeWalker</tt> or <tt>CATIDOMNodeIterator</tt>.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#FilterAction"><b>FilterAction</b></a>
<dd>  Constants returned by 
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AcceptNode"></a><a name="AcceptNode(CATIDOMNode_var&amp;,FilterAction&amp;)"></a> <dt> o <b>AcceptNode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AcceptNode</b>(<td> const CATIDOMNode_var&amp; <td><tt>iNode</tt>,<tr><td></td><td>FilterAction&amp; <td><tt>oAccepted</tt>) = 0  </table></dt>
<dl>
  <dd>
 Tests whether a specified node is visible in the logical view of a 
 <tt>CATIDOMTreeWalker</tt> or <tt>CATIDOMNodeIterator</tt>. This function 
 will be called by the implementation of 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a> and  
<a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> ; it is not normally called directly from  user code. (Though you could do so if you wanted to use the same 
 filter to guide your own application logic.)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNode</tt>
   <dd> The node to check to see if it passes the filter or not.
 </dd>
    <dt><tt> oAccepted</tt>
   <dd> a constant to determine whether the node is accepted, 
   rejected, or skipped, as defined above.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="FilterAction"> <dt> o <b>FilterAction</b>
<dl>
  <dd>
<pre>
enum <b>FilterAction</b> {
  FILTER_ACCEPT,
  FILTER_REJECT,
  FILTER_SKIP
}
</pre>
 Constants returned by 
<a href="#AcceptNode
">AcceptNode
</a> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FILTER_ACCEPT</tt>
   <dd> Accept the node. Navigation methods defined for 
 </dd>
<a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> or 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a> will return this  node.
 
    <dt><tt> FILTER_REJECT</tt>
   <dd> Reject the node. Navigation methods defined for 
 </dd>
<a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> or 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a> will not return  this node. For 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a>, the children of this node  will also be rejected. <tt>NodeIterators</tt> treat this as a 
 synonym for <tt>FILTER_SKIP</tt>.

 
    <dt><tt> FILTER_SKIP</tt>
   <dd> Skip this single node. Navigation methods defined for 
 </dd>
<a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> or 
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a> will not return  this node. For both 
<a href="../XMLParser/interface_CATIDOMNodeIterator_71203.htm">CATIDOMNodeIterator</a> and  
<a href="../XMLParser/interface_CATIDOMTreeWalker_55737.htm">CATIDOMTreeWalker</a>, the children of this node will still be  considered.
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDOMNodeFilter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATXMLParserItf</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
