<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDftStandard</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingInterfaces.htm" href="../DraftingInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIDftStandard"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DraftingInterfaces Interface CATIDftStandard</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftStandard_30189','CATIDftStandard','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftStandard</b>
</p>
<p>
<b><i> Interface which describes the object Standard.</i></b><br>
 This object is 
 responsible for the management of the standard used for annotations
 creations in a drawing documentview and a 3D model.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetEngineeringSymbolDetails(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)"><b>GetEngineeringSymbolDetails</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)
<dd>   Retrieves the font name and the char-code value for a symbol with given <SYMBOL NAME>
 from the standard.
 <dt> o 
    <a href="#GetName(wchar_t**)"><b>GetName</b></a>(wchar_t**)
<dd>  Gets the name of the standard.
 <dt> o 
    <a href="#GetParentName(wchar_t**)"><b>GetParentName</b></a>(wchar_t**)
<dd>  Gets the fundamental standard from which the standard is derived.
 <dt> o 
    <a href="#GetValue(char*,int*,int*)"><b>GetValue</b></a>(char*,int*,int*)
<dd>  Read a standard value as an int (array).
 <dt> o 
    <a href="#GetValue(char*,double*,int*)"><b>GetValue</b></a>(char*,double*,int*)
<dd>  Read a standard value as a double (array).
 <dt> o 
    <a href="#GetValue(char*,int,int&amp;)"><b>GetValue</b></a>(char*,int,int&amp;)
<dd>  Read a standard value as an int (single).
 <dt> o 
    <a href="#GetValue(char*,int,double&amp;)"><b>GetValue</b></a>(char*,int,double&amp;)
<dd>  Read a standard value as a double (single).
 <dt> o 
    <a href="#GetValue(char*,CATUnicodeString**,int*)"><b>GetValue</b></a>(char*,CATUnicodeString**,int*)
<dd>  Read a standard value as a CATUnicodeString (array).
 <dt> o 
    <a href="#GetValue(char*,int,CATUnicodeString&amp;)"><b>GetValue</b></a>(char*,int,CATUnicodeString&amp;)
<dd>  Read a standard value as a CATUnicodeString (single).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetEngineeringSymbolDetails"></a><a name="GetEngineeringSymbolDetails(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)"></a> <dt> o <b>GetEngineeringSymbolDetails</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEngineeringSymbolDetails</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iSymbolName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oFontName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeChar','CATUnicodeChar&amp;')</script> <td><tt>oSymbolUnicode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the font name and the char-code value for a symbol with given <SYMBOL NAME>
 from the standard. 

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSymbolName</tt>
   <dd> [in]   The name of the engineering symbol whose font name and char-code value have to be retrieved.
 </dd>
    <dt><tt> oFontName</tt>
   <dd> [out]   Font name for the requested symbol.
 </dd>
    <dt><tt> oSymbolUnicode</tt>
   <dd> [out]   Symbol unicode value in the above font file.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if the given symbol name is found in the standard (version greater or equal to V5R17)
                     and its font name and are successfuly retrieved.
   <code>S_FALSE</code> if the given symbol name is found in the standard and its font is not installed
                        on the current system but this symbol corresponds to a basic symbol (default symbols
                        delivered in standard by Dassault Systemes). In this case, oFontName and oSymbolUnicode
                        are valuated with default values specified in standard.
   <code>E_INVALIDARG</code> iSymbolName is an empty string or not defined in the standard
   <code>E_FAIL</code> Standard is lower than V5R17 or something fails
</dl>
</dl>
<a name="GetName"></a><a name="GetName(wchar_t**)"></a> <dt> o <b>GetName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetName</b>(<td><script type="text/javascript"> activateLink('wchar_t','wchar_t**')</script> <td><tt>oName</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the name of the standard.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> wchar_t</tt>
   <dd> **oName Name of the standard</dd>
</dl>
</dl>
</dl>
<a name="GetParentName"></a><a name="GetParentName(wchar_t**)"></a> <dt> o <b>GetParentName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParentName</b>(<td><script type="text/javascript"> activateLink('wchar_t','wchar_t**')</script> <td><tt>oName</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the fundamental standard from which the standard is derived.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> wchar_t</tt>
   <dd> **oName Name of the fundamental standard: ANSI, DIN, JIS, ASME, ISO</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int*,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oSize</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as an int (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLUnderline"
 </dd>
    <dt><tt> int</tt>
   <dd> *oValue The array in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,double*,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oSize</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as a double (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLFlippedOverrun"
 </dd>
    <dt><tt> double</tt>
   <dd> *oValue The array in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,int&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as an int (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLUnderline"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> int</tt>
   <dd> & oValue a int in which value will be put.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,double&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as a double (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLFlippedOverrun"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> double</tt>
   <dd> & oValue a double in which value will be put.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,CATUnicodeString**,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString**')</script> <td><tt>oValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oSize</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as a CATUnicodeString (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "General.DefaultToleranceFormat"
 </dd>
    <dt><tt> CATUnicodeString</tt>
   <dd> **oValue The array adrdess in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Read a standard value as a CATUnicodeString (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "General.DefaultToleranceFormat"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> CATUnicodeString</tt>
   <dd> & oValue a CATUnicodeString in which value will be put.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftStandard.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

