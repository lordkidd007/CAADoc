<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDftStandard</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="interface_CATIDftSheetFormat_65092.htm">Previous</a>  <a href="interface_CATIDftStandardManager_96688.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>DraftingInterfaces Interface CATIDftStandard</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---CATIDftStandard
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftStandard</b>
</p>
<p>
<b><i> Interface which describes the object Standard.</i></b><br>
 This object is 
 responsible for the management of the standard used for annotations
 creations in a drawing documentview and a 3D model.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetEngineeringSymbolDetails(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)"><b>GetEngineeringSymbolDetails</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)
<dd>   Retrieves the font name and the char-code value for a symbol with given <SYMBOL NAME>
 from the standard.
 <dt> o 
    <a href="#GetName(wchar_t**)"><b>GetName</b></a>(wchar_t**)
<dd>  Gets the name of the standard.
 <dt> o 
    <a href="#GetParentName(wchar_t**)"><b>GetParentName</b></a>(wchar_t**)
<dd>  Gets the fundamental standard from which the standard is derived.
 <dt> o 
    <a href="#GetValue(char*,CATUnicodeString**,int*)"><b>GetValue</b></a>(char*,CATUnicodeString**,int*)
<dd>  Read a standard value as a CATUnicodeString (array).
 <dt> o 
    <a href="#GetValue(char*,double*,int*)"><b>GetValue</b></a>(char*,double*,int*)
<dd>  Read a standard value as a double (array).
 <dt> o 
    <a href="#GetValue(char*,int*,int*)"><b>GetValue</b></a>(char*,int*,int*)
<dd>  Read a standard value as an int (array).
 <dt> o 
    <a href="#GetValue(char*,int,CATUnicodeString&amp;)"><b>GetValue</b></a>(char*,int,CATUnicodeString&amp;)
<dd>  Read a standard value as a CATUnicodeString (single).
 <dt> o 
    <a href="#GetValue(char*,int,double&amp;)"><b>GetValue</b></a>(char*,int,double&amp;)
<dd>  Read a standard value as a double (single).
 <dt> o 
    <a href="#GetValue(char*,int,int&amp;)"><b>GetValue</b></a>(char*,int,int&amp;)
<dd>  Read a standard value as an int (single).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetEngineeringSymbolDetails"></a><a name="GetEngineeringSymbolDetails(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeChar&amp;)"></a> <dt> o <b>GetEngineeringSymbolDetails</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetEngineeringSymbolDetails</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iSymbolName</tt>,<tr><td></td><td><a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>oFontName</tt>,<tr><td></td><td><a href="../System/class_CATUnicodeChar_38930.htm">CATUnicodeChar&amp;</a> <td><tt>oSymbolUnicode</tt>) = 0  </table></dt>
<dl>
  <dd>
  Retrieves the font name and the char-code value for a symbol with given <SYMBOL NAME>
 from the standard. 

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSymbolName</tt>
   <dd> [in]   The name of the engineering symbol whose font name and char-code value have to be retrieved.
 </dd>
    <dt><tt> oFontName</tt>
   <dd> [out]   Font name for the requested symbol.
 </dd>
    <dt><tt> oSymbolUnicode</tt>
   <dd> [out]   Symbol unicode value in the above font file.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if the given symbol name is found in the standard (version greater or equal to V5R17)
                     and its font name and are successfuly retrieved.
   <code>S_FALSE</code> if the given symbol name is found in the standard and its font is not installed
                        on the current system but this symbol corresponds to a basic symbol (default symbols
                        delivered in standard by Dassault Systemes). In this case, oFontName and oSymbolUnicode
                        are valuated with default values specified in standard.
   <code>E_INVALIDARG</code> iSymbolName is an empty string or not defined in the standard
   <code>E_FAIL</code> Standard is lower than V5R17 or something fails
</dl>
</dl>
<a name="GetName"></a><a name="GetName(wchar_t**)"></a> <dt> o <b>GetName</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetName</b>(<td>wchar_t** <td><tt>oName</tt>)= 0  </table></dt>
<dl>
  <dd>
 Gets the name of the standard.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> wchar_t</tt>
   <dd> **oName Name of the standard</dd>
</dl>
</dl>
</dl>
<a name="GetParentName"></a><a name="GetParentName(wchar_t**)"></a> <dt> o <b>GetParentName</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetParentName</b>(<td>wchar_t** <td><tt>oName</tt>)= 0  </table></dt>
<dl>
  <dd>
 Gets the fundamental standard from which the standard is derived.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> wchar_t</tt>
   <dd> **oName Name of the fundamental standard: ANSI, DIN, JIS, ASME, ISO</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,CATUnicodeString**,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td><a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString**</a> <td><tt>oValue</tt>,<tr><td></td><td>int* <td><tt>oSize</tt><td><tt>=0</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as a CATUnicodeString (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "General.DefaultToleranceFormat"
 </dd>
    <dt><tt> CATUnicodeString</tt>
   <dd> **oValue The array adrdess in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,double*,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td>double* <td><tt>oValue</tt>,<tr><td></td><td>int* <td><tt>oSize</tt><td><tt>=0</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as a double (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLFlippedOverrun"
 </dd>
    <dt><tt> double</tt>
   <dd> *oValue The array in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int*,int*)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td>int* <td><tt>oValue</tt>,<tr><td></td><td>int* <td><tt>oSize</tt><td><tt>=0</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as an int (array).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLUnderline"
 </dd>
    <dt><tt> int</tt>
   <dd> *oValue The array in which values will be put
 </dd>
    <dt><tt> int</tt>
   <dd> *oSize The number of element write in oValue.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td>int <td><tt>iIndex</tt>,<tr><td></td><td><a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>oValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as a CATUnicodeString (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "General.DefaultToleranceFormat"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> CATUnicodeString</tt>
   <dd> & oValue a CATUnicodeString in which value will be put.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,double&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td>int <td><tt>iIndex</tt>,<tr><td></td><td>double&amp; <td><tt>oValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as a double (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLFlippedOverrun"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> double</tt>
   <dd> & oValue a double in which value will be put.</dd>
</dl>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(char*,int,int&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetValue</b>(<td> const char* <td><tt>iName</tt>,<tr><td></td><td>int <td><tt>iIndex</tt>,<tr><td></td><td>int&amp; <td><tt>oValue</tt>) = 0  </table></dt>
<dl>
  <dd>
 Read a standard value as an int (single).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> char *iName Name of the parameter to read. Ex: "Dimension.DIMLUnderline"
 </dd>
    <dt><tt> int</tt>
   <dd> iIndex The index of the value to read in the tab
 </dd>
    <dt><tt> int</tt>
   <dd> & oValue a int in which value will be put.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftStandard.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
