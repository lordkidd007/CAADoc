<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDftArrow</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="interface_CATIDftAnnotation_59310.htm">Previous</a>  <a href="interface_CATIDftBalloon_38982.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>DraftingInterfaces Interface CATIDftArrow</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---CATIDftArrow
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftArrow</b>
</p>
<p>
<b><i> Interface which manages the arrows created in CATDrawing documnent.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddInterruption(double[2],double[2])"><b>AddInterruption</b></a>(double[2],double[2])
<dd>  Add a interruption to an arrow.
 <dt> o 
    <a href="#AddPoint(int&amp;,double[2])"><b>AddPoint</b></a>(int&amp;,double[2])
<dd>  Add a point to an arrow.
 <dt> o 
    <a href="#GetInterruptions(double**,int*)"><b>GetInterruptions</b></a>(double**,int*)
<dd>  Get interruptions of arrow path.
 <dt> o 
    <a href="#GetNbInterruption(int*)"><b>GetNbInterruption</b></a>(int*)
<dd>  Get the number of interruptions of arrow path.
 <dt> o 
    <a href="#GetNbPoint(int*)"><b>GetNbPoint</b></a>(int*)
<dd>  Get the number of points of arrow path.
 <dt> o 
    <a href="#GetPoint(int,double[2])"><b>GetPoint</b></a>(int,double[2])
<dd>  Get arrow point coordinates.
 <dt> o 
    <a href="#GetPoints(double**,int*)"><b>GetPoints</b></a>(double**,int*)
<dd>  Get arrow path.
 <dt> o 
    <a href="#GetSymbolType(int*,CATDftArrowExtremity)"><b>GetSymbolType</b></a>(int*,CATDftArrowExtremity)
<dd>  Get arrow head or tail symbol.
 <dt> o 
    <a href="#GetTarget(IUnknown**,CATDftArrowExtremity)"><b>GetTarget</b></a>(IUnknown**,CATDftArrowExtremity)
<dd>  Get arrow target elements.
 <dt> o 
    <a href="#ModifyPoint(int,double[2])"><b>ModifyPoint</b></a>(int,double[2])
<dd>  Modify a point of an Arrow.
 <dt> o 
    <a href="#RemoveInterruption(int)"><b>RemoveInterruption</b></a>(int)
<dd>  Remove a interruption to an arrow.
 <dt> o 
    <a href="#RemovePoint(int)"><b>RemovePoint</b></a>(int)
<dd>  Remove a point from an arrow.
 <dt> o 
    <a href="#SetSymbolType(int,CATDftArrowExtremity)"><b>SetSymbolType</b></a>(int,CATDftArrowExtremity)
<dd>  Set arrow head or tail symbol.
 <dt> o 
    <a href="#SetTarget(IUnknown*,double[2],CATDftArrowExtremity)"><b>SetTarget</b></a>(IUnknown*,double[2],CATDftArrowExtremity)
<dd>  Set Arrow target elements.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddInterruption"></a><a name="AddInterruption(double[2],double[2])"></a> <dt> o <b>AddInterruption</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AddInterruption</b>(<td> const double[2] <td><tt>iFirstPoint</tt>,<tr><td></td><td> const double[2] <td><tt>iSecondPoint</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add a interruption to an arrow.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iFirstPoint</tt>   : First point coordinates. 
 <dt><tt>iSecondPoint </tt> : Second point coordinates.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="AddPoint"></a><a name="AddPoint(int&amp;,double[2])"></a> <dt> o <b>AddPoint</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AddPoint</b>(<td> const int&amp; <td><tt>iNum</tt>,<tr><td></td><td> const double[2] <td><tt>iPoint</tt>) = 0  </table></dt>
<dl>
  <dd>
 Add a point to an arrow.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iNum </tt> : Point number. Point will be inserted at iNum+1 position.
 <dt> <dd> - If iNum equals 0, point is inserted as first point.
 <dt> <dd> - If iNum equals the arrow number of points, point is inserted as last point.
 <dt><tt>iPoint</tt> : Point coordinates to add.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetInterruptions"></a><a name="GetInterruptions(double**,int*)"></a> <dt> o <b>GetInterruptions</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetInterruptions</b>(<td>double** <td><tt>oInterruptions</tt>,<tr><td></td><td>int* <td><tt>oNbInterruptions</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get interruptions of arrow path.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oInterruptions</tt> : List of interruptions coordinates (X1,Y1,X2,Y2,.....Xn,Yn).
 <dt><tt>oNbInterruptions</tt> : Number of interruptions.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetNbInterruption"></a><a name="GetNbInterruption(int*)"></a> <dt> o <b>GetNbInterruption</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbInterruption</b>(<td>int* <td><tt>oNbInterruption</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get the number of interruptions of arrow path.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oNbInterruption </tt> : Number of interruptions of arrow path.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetNbPoint"></a><a name="GetNbPoint(int*)"></a> <dt> o <b>GetNbPoint</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbPoint</b>(<td>int* <td><tt>oNbPoint</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get the number of points of arrow path.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oNbPoint </tt> : Number of points of arrow path.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetPoint"></a><a name="GetPoint(int,double[2])"></a> <dt> o <b>GetPoint</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetPoint</b>(<td> const int <td><tt>iNum</tt>,<tr><td></td><td>double[2] <td><tt>oPoint</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get arrow point coordinates.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iNum</tt> : Point number. 
 <dt><tt>oPoint  </tt> : Point coordinates. 
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetPoints"></a><a name="GetPoints(double**,int*)"></a> <dt> o <b>GetPoints</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetPoints</b>(<td>double** <td><tt>oPoints</tt>,<tr><td></td><td>int* <td><tt>oNbPoints</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get arrow path.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oPoints</tt> : List of points coordinates (X1,Y1,X2,Y2,.....Xn,Yn).
 <dt><tt>oNbPoints</tt> : Number of points.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetSymbolType"></a><a name="GetSymbolType(int*,CATDftArrowExtremity)"></a> <dt> o <b>GetSymbolType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSymbolType</b>(<td>int* <td><tt>oSymbolType</tt>,<tr><td></td><td> const <a href="../DraftingInterfaces/enum_CATDftArrowExtremity_84808.htm">CATDftArrowExtremity</a> <td><tt>iExtremity</tt><td><tt>= CATDftArrowHead</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get arrow head or tail symbol.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oSymbolType </tt> : Symbol type.
 <dt><tt>iExtremity </tt>  : Head (CATDftArrowHead) or Tail (CATDftArrowTail).
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="GetTarget"></a><a name="GetTarget(IUnknown**,CATDftArrowExtremity)"></a> <dt> o <b>GetTarget</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetTarget</b>(<td><a href="../System/interface_IUnknown_14460.htm">IUnknown**</a> <td><tt>oTarget</tt>,<tr><td></td><td> const <a href="../DraftingInterfaces/enum_CATDftArrowExtremity_84808.htm">CATDftArrowExtremity</a> <td><tt>iExtremity</tt><td><tt>= CATDftArrowHead</tt>) = 0  </table></dt>
<dl>
  <dd>
 Get arrow target elements.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>oTarget</tt> : The target element. 
 <dt><tt>iExtremity </tt>  : Head (CATDftArrowHead) or Tail (CATDftArrowTail).
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="ModifyPoint"></a><a name="ModifyPoint(int,double[2])"></a> <dt> o <b>ModifyPoint</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>ModifyPoint</b>(<td> const int <td><tt>iNum</tt>,<tr><td></td><td> const double[2] <td><tt>iPoint</tt>) = 0  </table></dt>
<dl>
  <dd>
 Modify a point of an Arrow.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iNum </tt> : Point number to modify.
 <dt><tt>iPoint</tt> : New point coordinates. 
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="RemoveInterruption"></a><a name="RemoveInterruption(int)"></a> <dt> o <b>RemoveInterruption</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>RemoveInterruption</b>(<td> const int <td><tt>iNum</tt><td><tt>= 0</tt>) = 0  </table></dt>
<dl>
  <dd>
 Remove a interruption to an arrow.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iNum </tt> : Interruption number to delete.
 <dt> <dd> - If iNum equals to 0, all interruptions will be removed. 
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="RemovePoint"></a><a name="RemovePoint(int)"></a> <dt> o <b>RemovePoint</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>RemovePoint</b>(<td> const int <td><tt>iNum</tt><td><tt>= 0</tt>) = 0  </table></dt>
<dl>
  <dd>
 Remove a point from an arrow.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iNum </tt> : Point number to delete.
 <dt> <dd> - If iNum equals to 0, all points will be removed. 
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="SetSymbolType"></a><a name="SetSymbolType(int,CATDftArrowExtremity)"></a> <dt> o <b>SetSymbolType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSymbolType</b>(<td> const int <td><tt>iSymbolType</tt>,<tr><td></td><td> const <a href="../DraftingInterfaces/enum_CATDftArrowExtremity_84808.htm">CATDftArrowExtremity</a> <td><tt>iExtremity</tt><td><tt>= CATDftArrowHead</tt>) = 0  </table></dt>
<dl>
  <dd>
 Set arrow head or tail symbol.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iSymbolType </tt> : Symbol type.
 <dt><tt>iExtremity </tt>  : Head (CATDftArrowHead) or Tail (CATDftArrowTail).
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<a name="SetTarget"></a><a name="SetTarget(IUnknown*,double[2],CATDftArrowExtremity)"></a> <dt> o <b>SetTarget</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetTarget</b>(<td><a href="../System/interface_IUnknown_14460.htm">IUnknown*</a> <td><tt>iTarget</tt>,<tr><td></td><td>double[2] <td><tt>iPos</tt>,<tr><td></td><td> const <a href="../DraftingInterfaces/enum_CATDftArrowExtremity_84808.htm">CATDftArrowExtremity</a> <td><tt>iExtremity</tt><td><tt>= CATDftArrowHead</tt>) = 0  </table></dt>
<dl>
  <dd>
 Set Arrow target elements.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <dl></tt>
   <dd>
 <dt><tt>iTarget</tt> : The target element. 
 <dt><tt>iPos   </tt> : Position to project on the target element. 
 <dt><tt>iExtremity </tt>  : Head (CATDftArrowHead) or Tail (CATDftArrowTail).
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> if the operation failed.
 </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftArrow.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
