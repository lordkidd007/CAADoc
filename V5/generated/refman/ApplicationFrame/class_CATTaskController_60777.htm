<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ApplicationFrame Class CATTaskController</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../ApplicationFrame.htm">This Framework</a>  <a href="class_CATStackableCommandSet_97572.htm">Previous</a>  <a href="class_CATWorkbenchTransitionCmd_129000.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>ApplicationFrame Class CATTaskController</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATTaskController
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTaskController</b>
</p>
<p>
<b><i> Class to launch an interruptible task.</i></b><br>

 <b>Role:</b>This class enables the launching of a task associated with 
 a dialog box in order to indicate the progression of the process. To do this,
 create an instance of 
 this class and call the <a href="#Schedule">Schedule</a> method. 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../ApplicationFrame/interface_CATIProgressTask_52708.htm">CATIProgressTask</a>, <a href="../ApplicationFrame/interface_CATIProgressTaskUI_64160.htm">CATIProgressTaskUI</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATTaskController()"><b>CATTaskController</b></a>()
<dd>  Constructs a default task controller.
 <dt> o 
    <a href="#~CATTaskController()"><b>~CATTaskController</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Schedule(CATIProgressTask*,CATBoolean,void*,CATBoolean,CATBoolean,double,CATAfrProgressTaskInterruptMode)"><b>Schedule</b></a>(CATIProgressTask*,CATBoolean,void*,CATBoolean,CATBoolean,double,CATAfrProgressTaskInterruptMode)
<dd>  Launches the task.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATAfrProgressTaskInterruptMode"><b>CATAfrProgressTaskInterruptMode</b></a>
<dd>  Interrupt mode.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATTaskController"></a><a name="CATTaskController()"></a> <dt> o <b>CATTaskController</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATTaskController</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a default task controller.
</dl>
<a name="~CATTaskController"></a><a name="~CATTaskController()"></a> <dt> o <b>~CATTaskController</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATTaskController</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Schedule"></a><a name="Schedule(CATIProgressTask*,CATBoolean,void*,CATBoolean,CATBoolean,double,CATAfrProgressTaskInterruptMode)"></a> <dt> o <b>Schedule</b>

<dt>  <table><tr><td>  public <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>Schedule</b>(<td><a href="../ApplicationFrame/interface_CATIProgressTask_52708.htm">CATIProgressTask*</a> <td><tt>iTask</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iInterruptible</tt><td><tt>= TRUE</tt>,<tr><td></td><td>void* <td><tt>iUserData</tt><td><tt>= 0</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iAutoFlushUI</tt><td><tt>= TRUE</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>HideProgressBar</tt><td><tt>= FALSE</tt>,<tr><td></td><td>double <td><tt>iPnlHiddenTime</tt><td><tt>= 0</tt>,<tr><td></td><td>CATAfrProgressTaskInterruptMode <td><tt>iInterruptMode</tt><td><tt>= CancelProgressTask</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Launches the task.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iTask</tt>
   <dd> Interface pointer on the object which implements </dd>
<a href="../ApplicationFrame/interface_CATIProgressTask_52708.htm">CATIProgressTask</a>.  
    <dt><tt>  iInterruptible</tt>
   <dd> If the task is interruptible (TRUE) an interrupt button is displayed in the dialog box;
 so that 
 the end user can interrupt the task, otherwise the value is FALSE.
 </dd>
    <dt><tt>  iUserData</tt>
   <dd> This data is the input argument of the </dd>
<a href="../ApplicationFrame/interface_CATIProgressTask_52708.htm#PerformTask">CATIProgressTask.PerformTask</a> method. 
    <dt><tt> iAutoFlushUI</tt>
   <dd> If the boolean is TRUE, the dialog box will be automatically updated after each 
 </dd>
<a href="../ApplicationFrame/interface_CATIProgressTaskUI_64160.htm#SetProgress">CATIProgressTaskUI.SetProgress</a> call. Otherwise, you should use the 
<a href="../ApplicationFrame/interface_CATIProgressTaskUI_64160.htm#Flush">CATIProgressTaskUI.Flush</a> to make manually the modification. 
    <dt><tt> HideProgressBar</tt>
   <dd> If the boolean is TRUE the user gets an interrupt panel without progress bar.
 </dd>
    <dt><tt> iPnlHiddenTime</tt>
   <dd> Time during which the task panel stays hidden.
 </dd>
    <dt><tt> iInterruptMode</tt>
   <dd> Behavior of the interrupt button. Does not take sense if iInterruptible is set to FALSE.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATAfrProgressTaskInterruptMode"> <dt> o <b>CATAfrProgressTaskInterruptMode</b>
<dl>
  <dd>
<pre>
enum <b>CATAfrProgressTaskInterruptMode</b> {
  CancelProgressTask,
  StopProgressTask
}
</pre>
 Interrupt mode.
 <br>If the task is interruptible (iInterruptible argument of Schedule = TRUE),
 this enum lists the possible values of the interrupt button of the progress bar dialog.
 <br> CancelProgressTask will display a Cancel button. Use this value when you want the task to be undone if the user interrupts it.
 <br> StopProgressTask will display a Stop button. Use this value when you want the task to be stopped
 and the partial result to be kept if the user interrupts it.
</dl>
<hr>
 This object is included in the file: <b>CATTaskController.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATApplicationFrame</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
