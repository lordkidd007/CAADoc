<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GSMInterfaces Interface CATIGSMSweepSegment</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GSMInterfaces.htm">This Framework</a>  <a href="interface_CATIGSMSweepConic_55518.htm">Previous</a>  <a href="interface_CATIGSMSweepUnspec_63832.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GSMInterfaces Interface CATIGSMSweepSegment</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIGSMSweepSegment
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIGSMSweepSegment</b>
</p>
<p>
<b><i> Interface to linear sweep feature.</i></b><br>
 
 <b>Role</b>: Allows you to access (query and modifications) data 
 of the linear sweep.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/interface_CATIGSMFactory_38152.htm#CreateLinearSweep">CATIGSMFactory.CreateLinearSweep</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddDraftAngleDefinitionLocation(CATISpecObject_var&amp;,CATICkeParm_var&amp;)"><b>AddDraftAngleDefinitionLocation</b></a>(CATISpecObject_var&amp;,CATICkeParm_var&amp;)
<dd>  Adds a geometrical element and a value necessary for draft angle definition.
 <dt> o 
    <a href="#DelAngle()"><b>DelAngle</b></a>()
<dd>  Removes all angles.
 <dt> o 
    <a href="#DelGuideCrv()"><b>DelGuideCrv</b></a>()
<dd>  Removes all guide curves.
 <dt> o 
    <a href="#DelGuideSurf()"><b>DelGuideSurf</b></a>()
<dd>  Removes all guide surfaces.
 <dt> o 
    <a href="#DelLength()"><b>DelLength</b></a>()
<dd>  Removes all lengths.
 <dt> o 
    <a href="#GetAngle(CATICkeParm_var&amp;,int)"><b>GetAngle</b></a>(CATICkeParm_var&amp;,int)
<dd>  Gets the literal feature representing an angle given its index.
 <dt> o 
    <a href="#GetAngle(double&amp;,int)"><b>GetAngle</b></a>(double&amp;,int)
<dd>  Gets the value of an angle given its index.
 <dt> o 
    <a href="#GetAngularLaw(CATICkeLaw_var&amp;)"><b>GetAngularLaw</b></a>(CATICkeLaw_var&amp;)
<dd>  Gets angular law feature.
 <dt> o 
    <a href="#GetAngularLaw(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)"><b>GetAngularLaw</b></a>(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)
<dd>  Gets information about angular law.
 <dt> o 
    <a href="#GetAngularLawInversion(CATBoolean&amp;)"><b>GetAngularLawInversion</b></a>(CATBoolean&amp;)
<dd>  Gets information whether angular law has to be inverted or not.
 <dt> o 
    <a href="#GetAngularLawType(enum CATGSMBasicLawType&amp;)"><b>GetAngularLawType</b></a>(enum CATGSMBasicLawType&amp;)
<dd>  Gets angular law type.
 <dt> o 
    <a href="#GetCanonicalDetectionMode(CATGSMCanonicalSurfaceDetection&amp;)"><b>GetCanonicalDetectionMode</b></a>(CATGSMCanonicalSurfaceDetection&amp;)
<dd>  Gets information about detection of canonical surfaces of the output surface.
 <dt> o 
    <a href="#GetChoiceNo(int&amp;,int&amp;,int&amp;)"><b>GetChoiceNo</b></a>(int&amp;,int&amp;,int&amp;)
<dd>  Gets a sequence which identifies a solution amongst all possibilities
 of a line-profile swept surface, case CATGSMLinearSweep_GuideAndTangencySurface.
 <dt> o 
    <a href="#GetChoiceNoSurfaces(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)"><b>GetChoiceNoSurfaces</b></a>(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)
<dd>  Gets a sequence which identifies a solution amongst all possibilities
 of a line-profile swept surface, case CATGSMLinearSweep_TwoTangencySurfaces.
 <dt> o 
    <a href="#GetContext(CATGSMFeatureContextType&amp;)"><b>GetContext</b></a>(CATGSMFeatureContextType&amp;)
<dd>  Gets the context of the Sweep.
 <dt> o 
    <a href="#GetDraftAngleDefinitionLocations(CATListValCATISpecObject_var&amp;,CATListValCATBaseUnknown_var&amp;)"><b>GetDraftAngleDefinitionLocations</b></a>(CATListValCATISpecObject_var&amp;,CATListValCATBaseUnknown_var&amp;)
<dd>  Gets geometrical elements and values necessary for draft angle definition.
 <dt> o 
    <a href="#GetDraftComputationMode(enum CATGSMLinearDraftSweepComp&amp;)"><b>GetDraftComputationMode</b></a>(enum CATGSMLinearDraftSweepComp&amp;)
<dd>  Gets linear swept surface with draft direction computation mode:
 CATGSMLinearDraftSweepComp_Square for square,
 CATGSMLinearDraftSweepComp_ConeEnvelop for cone envelop.
 <dt> o 
    <a href="#GetDraftDirection(CATIGSMDirection_var&amp;)"><b>GetDraftDirection</b></a>(CATIGSMDirection_var&amp;)
<dd>  Gets draft direction.
 <dt> o 
    <a href="#GetFirstLengthDefinitionType(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)"><b>GetFirstLengthDefinitionType</b></a>(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)
<dd>  Gets first length definition for linear swept surfaces (for draft surfaces
 only, so far).
 <dt> o 
    <a href="#GetGuideCrv(CATISpecObject_var&amp;)"><b>GetGuideCrv</b></a>(CATISpecObject_var&amp;)
<dd>  Gets first guide curve.
 <dt> o 
    <a href="#GetGuideCrv(CATISpecObject_var&amp;,int)"><b>GetGuideCrv</b></a>(CATISpecObject_var&amp;,int)
<dd>  Gets a guide curve given its index.
 <dt> o 
    <a href="#GetGuideDeviation(CATICkeParm_var&amp;)"><b>GetGuideDeviation</b></a>(CATICkeParm_var&amp;)
<dd>  Gets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
 <dt> o 
    <a href="#GetGuideDeviation(double&amp;)"><b>GetGuideDeviation</b></a>(double&amp;)
<dd>  Gets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
 <dt> o 
    <a href="#GetGuideDeviationActivity(CATBoolean&amp;)"><b>GetGuideDeviationActivity</b></a>(CATBoolean&amp;)
<dd>  Gets information whether a deviation from guide curves is allowed or not
 during sweeping operation in order to smooth it.
 <dt> o 
    <a href="#GetGuideSurf(CATISpecObject_var&amp;)"><b>GetGuideSurf</b></a>(CATISpecObject_var&amp;)
<dd>  Gets first guide surface.
 <dt> o 
    <a href="#GetGuideSurf(CATISpecObject_var&amp;,int)"><b>GetGuideSurf</b></a>(CATISpecObject_var&amp;,int)
<dd>  Gets a guide surface given its index.
 <dt> o 
    <a href="#GetLength(CATICkeParm_var&amp;,int)"><b>GetLength</b></a>(CATICkeParm_var&amp;,int)
<dd>  Gets the literal feature representing an length given its index.
 <dt> o 
    <a href="#GetLength(double&amp;,int)"><b>GetLength</b></a>(double&amp;,int)
<dd>  Gets the value of a length given its index.
 <dt> o 
    <a href="#GetLengthLawInversions(CATBoolean&amp;,CATBoolean&amp;)"><b>GetLengthLawInversions</b></a>(CATBoolean&amp;,CATBoolean&amp;)
<dd>  Gets information whether length laws have to be inverted or not.
 <dt> o 
    <a href="#GetLengthLawTypes(enum CATGSMBasicLawType&amp;,enum CATGSMBasicLawType&amp;)"><b>GetLengthLawTypes</b></a>(enum CATGSMBasicLawType&amp;,enum CATGSMBasicLawType&amp;)
<dd>  Gets length law types.
 <dt> o 
    <a href="#GetLengthLaws(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)"><b>GetLengthLaws</b></a>(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)
<dd>  Gets information about both length laws.
 <dt> o 
    <a href="#GetLengthLaws(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;)"><b>GetLengthLaws</b></a>(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;)
<dd>  Gets information about both length laws (including advanced law features).
 <dt> o 
    <a href="#GetLongitudinalRelimiters(CATISpecObject_var&amp;,CATBoolean&amp;,CATISpecObject_var&amp;,CATBoolean&amp;)"><b>GetLongitudinalRelimiters</b></a>(CATISpecObject_var&amp;,CATBoolean&amp;,CATISpecObject_var&amp;,CATBoolean&amp;)
<dd>  Gets the elements relimiting the spine (or the default spine).
 <dt> o 
    <a href="#GetMode(enum CATGSMLinearSweepCase&amp;)"><b>GetMode</b></a>(enum CATGSMLinearSweepCase&amp;)
<dd>  Gets linear sweep case number (also called mode).
 <dt> o 
    <a href="#GetNbAngle(int&amp;)"><b>GetNbAngle</b></a>(int&amp;)
<dd>  Gets the number of angles.
 <dt> o 
    <a href="#GetNbGuideCrv(int&amp;)"><b>GetNbGuideCrv</b></a>(int&amp;)
<dd>  Gets the number of guide curves.
 <dt> o 
    <a href="#GetNbGuideSurf(int&amp;)"><b>GetNbGuideSurf</b></a>(int&amp;)
<dd>  Gets the number of guide surfaces.
 <dt> o 
    <a href="#GetNbLength(int&amp;)"><b>GetNbLength</b></a>(int&amp;)
<dd>  Gets the number of lengths.
 <dt> o 
    <a href="#GetSecondLengthDefinitionType(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)"><b>GetSecondLengthDefinitionType</b></a>(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)
<dd>  Gets second length definition for linear swept surfaces (for draft surfaces
 only, so far).
 <dt> o 
    <a href="#GetSmoothActivity(CATBoolean&amp;)"><b>GetSmoothActivity</b></a>(CATBoolean&amp;)
<dd>  Gets information whether sweeping operation is smoothed or not.
 <dt> o 
    <a href="#GetSmoothAngleThreshold(CATICkeParm_var&amp;)"><b>GetSmoothAngleThreshold</b></a>(CATICkeParm_var&amp;)
<dd>  Gets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
 <dt> o 
    <a href="#GetSmoothAngleThreshold(double&amp;)"><b>GetSmoothAngleThreshold</b></a>(double&amp;)
<dd>  Gets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
 <dt> o 
    <a href="#GetSolutionNo(int&amp;)"><b>GetSolutionNo</b></a>(int&amp;)
<dd>  Gets the current solution number of the four possible solutions.
 <dt> o 
    <a href="#GetSpine(CATISpecObject_var&amp;)"><b>GetSpine</b></a>(CATISpecObject_var&amp;)
<dd>  Gets the spine.
 <dt> o 
    <a href="#GetTrimOption(enum CATGSMSweepTrimMode&amp;)"><b>GetTrimOption</b></a>(enum CATGSMSweepTrimMode&amp;)
<dd>  Gets trim option status for the first (or only) tangency surface.
 <dt> o 
    <a href="#GetTrimOptions(enum CATGSMSweepTrimMode&amp;,enum CATGSMSweepTrimMode&amp;)"><b>GetTrimOptions</b></a>(enum CATGSMSweepTrimMode&amp;,enum CATGSMSweepTrimMode&amp;)
<dd>  Gets trim option statuses for both tangency surfaces.
 <dt> o 
    <a href="#InsertDraftAngleDefinitionLocationAfterPos(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)"><b>InsertDraftAngleDefinitionLocationAfterPos</b></a>(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)
<dd>  Inserts a geometrical element and a value necessary for draft angle definition
 after a given position in the lists.
 <dt> o 
    <a href="#InsertDraftAngleDefinitionLocationBeforePos(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)"><b>InsertDraftAngleDefinitionLocationBeforePos</b></a>(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)
<dd>  Inserts a geometrical element and a value necessary for draft angle definition
 before a given position in the lists.
 <dt> o 
    <a href="#RemoveAllDraftAngleDefinitionLocations()"><b>RemoveAllDraftAngleDefinitionLocations</b></a>()
<dd>  Removes all geometrical elements and values necessary for draft angle definition.
 <dt> o 
    <a href="#RemoveDraftAngleDefinitionLocationPosition(int)"><b>RemoveDraftAngleDefinitionLocationPosition</b></a>(int)
<dd>  Removes a geometrical element and a value necessary for draft angle definition
 at a given position in the lists.
 <dt> o 
    <a href="#SetAngle(CATICkeParm_var,int)"><b>SetAngle</b></a>(CATICkeParm_var,int)
<dd>  Sets the literal feature representing an angle given its index.
 <dt> o 
    <a href="#SetAngle(double,int)"><b>SetAngle</b></a>(double,int)
<dd>  Sets the value of an angle given its index.
 <dt> o 
    <a href="#SetAngularLaw(CATICkeLaw_var&amp;)"><b>SetAngularLaw</b></a>(CATICkeLaw_var&amp;)
<dd>  Sets angular law feature.
 <dt> o 
    <a href="#SetAngularLaw(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)"><b>SetAngularLaw</b></a>(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)
<dd>  Sets information about angular law.
 <dt> o 
    <a href="#SetAngularLawInversion(CATBoolean)"><b>SetAngularLawInversion</b></a>(CATBoolean)
<dd>  Sets information whether angular law has to be inverted or not.
 <dt> o 
    <a href="#SetAngularLawType(enum CATGSMBasicLawType)"><b>SetAngularLawType</b></a>(enum CATGSMBasicLawType)
<dd>  Sets angular law type.
 <dt> o 
    <a href="#SetCanonicalDetectionMode(CATGSMCanonicalSurfaceDetection)"><b>SetCanonicalDetectionMode</b></a>(CATGSMCanonicalSurfaceDetection)
<dd>  Sets information about detection of canonical surfaces of the output surface.
 <dt> o 
    <a href="#SetChoiceNo(int,int,int)"><b>SetChoiceNo</b></a>(int,int,int)
<dd>  Sets a sequence which identifies a solution (see above), case CATGSMLinearSweep_GuideAndTangencySurface.
 <dt> o 
    <a href="#SetChoiceNoSurfaces(int,int,int,int,int)"><b>SetChoiceNoSurfaces</b></a>(int,int,int,int,int)
<dd>  Sets a sequence which identifies a solution (see above), case CATGSMLinearSweep_TwoTangencySurfaces.
 <dt> o 
    <a href="#SetContext(CATGSMFeatureContextType)"><b>SetContext</b></a>(CATGSMFeatureContextType)
<dd>  Sets the context of the Sweep.
 <dt> o 
    <a href="#SetDraftComputationMode(enum CATGSMLinearDraftSweepComp)"><b>SetDraftComputationMode</b></a>(enum CATGSMLinearDraftSweepComp)
<dd>  Sets linear swept surface with draft direction computation mode:
 CATGSMLinearDraftSweepComp_Square for square,
 CATGSMLinearDraftSweepComp_ConeEnvelop for cone envelop.
 <dt> o 
    <a href="#SetDraftDirection(CATIGSMDirection_var&amp;)"><b>SetDraftDirection</b></a>(CATIGSMDirection_var&amp;)
<dd>  Sets draft direction.
 <dt> o 
    <a href="#SetFirstLengthDefinitionType(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)"><b>SetFirstLengthDefinitionType</b></a>(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)
<dd>  Sets first length definition for linear swept surfaces (for draft surfaces
 only, so far).
 <dt> o 
    <a href="#SetGuideCrv(CATISpecObject_var)"><b>SetGuideCrv</b></a>(CATISpecObject_var)
<dd>  Modify first guide curve.
 <dt> o 
    <a href="#SetGuideCrv(CATISpecObject_var,int)"><b>SetGuideCrv</b></a>(CATISpecObject_var,int)
<dd>  Sets a guide curve given its index.
 <dt> o 
    <a href="#SetGuideDeviation(CATICkeParm_var&amp;)"><b>SetGuideDeviation</b></a>(CATICkeParm_var&amp;)
<dd>  Sets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
 <dt> o 
    <a href="#SetGuideDeviation(double)"><b>SetGuideDeviation</b></a>(double)
<dd>  Sets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
 <dt> o 
    <a href="#SetGuideDeviationActivity(CATBoolean)"><b>SetGuideDeviationActivity</b></a>(CATBoolean)
<dd>  Sets information whether a deviation from guide curves is allowed or not
 during sweeping operation in order to smooth it.
 <dt> o 
    <a href="#SetGuideSurf(CATISpecObject_var)"><b>SetGuideSurf</b></a>(CATISpecObject_var)
<dd>  Sets first guide surface.
 <dt> o 
    <a href="#SetGuideSurf(CATISpecObject_var,int)"><b>SetGuideSurf</b></a>(CATISpecObject_var,int)
<dd>  Sets a guide surface given its index.
 <dt> o 
    <a href="#SetLength(CATICkeParm_var,int)"><b>SetLength</b></a>(CATICkeParm_var,int)
<dd>  Sets the literal feature representing an length given its index.
 <dt> o 
    <a href="#SetLength(double,int)"><b>SetLength</b></a>(double,int)
<dd>  Sets the value of a length given its index.
 <dt> o 
    <a href="#SetLengthLawInversions(CATBoolean,CATBoolean)"><b>SetLengthLawInversions</b></a>(CATBoolean,CATBoolean)
<dd>  Sets information whether length laws have to be inverted or not.
 <dt> o 
    <a href="#SetLengthLawTypes(enum CATGSMBasicLawType,enum CATGSMBasicLawType)"><b>SetLengthLawTypes</b></a>(enum CATGSMBasicLawType,enum CATGSMBasicLawType)
<dd>  Sets length law types.
 <dt> o 
    <a href="#SetLengthLaws(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)"><b>SetLengthLaws</b></a>(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)
<dd>  Sets information about both length laws.
 <dt> o 
    <a href="#SetLengthLaws(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType)"><b>SetLengthLaws</b></a>(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType)
<dd>  Sets information about both length laws (including advanced law features).
 <dt> o 
    <a href="#SetLongitudinalRelimiters(CATISpecObject_var&amp;,CATBoolean,CATISpecObject_var&amp;,CATBoolean)"><b>SetLongitudinalRelimiters</b></a>(CATISpecObject_var&amp;,CATBoolean,CATISpecObject_var&amp;,CATBoolean)
<dd>  Sets the elements relimiting the spine (or the default spine).
 <dt> o 
    <a href="#SetMode(enum CATGSMLinearSweepCase)"><b>SetMode</b></a>(enum CATGSMLinearSweepCase)
<dd>  Sets linear sweep case number.
 <dt> o 
    <a href="#SetSecondLengthDefinitionType(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)"><b>SetSecondLengthDefinitionType</b></a>(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)
<dd>  Sets second length definition for linear swept surfaces (for draft surfaces
 only, so far).
 <dt> o 
    <a href="#SetSmoothActivity(CATBoolean)"><b>SetSmoothActivity</b></a>(CATBoolean)
<dd>  Sets information whether sweeping operation is smoothed or not.
 <dt> o 
    <a href="#SetSmoothAngleThreshold(CATICkeParm_var&amp;)"><b>SetSmoothAngleThreshold</b></a>(CATICkeParm_var&amp;)
<dd>  Sets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
 <dt> o 
    <a href="#SetSmoothAngleThreshold(double)"><b>SetSmoothAngleThreshold</b></a>(double)
<dd>  Sets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
 <dt> o 
    <a href="#SetSolutionNo(int)"><b>SetSolutionNo</b></a>(int)
<dd>  Sets the current solution number of the four possible solutions.
 <dt> o 
    <a href="#SetSpine(CATISpecObject_var)"><b>SetSpine</b></a>(CATISpecObject_var)
<dd>  Sets the spine.
 <dt> o 
    <a href="#SetTrimOption(enum CATGSMSweepTrimMode)"><b>SetTrimOption</b></a>(enum CATGSMSweepTrimMode)
<dd>  Sets trim option status for the first (or only) tangency surface.
 <dt> o 
    <a href="#SetTrimOptions(enum CATGSMSweepTrimMode,enum CATGSMSweepTrimMode)"><b>SetTrimOptions</b></a>(enum CATGSMSweepTrimMode,enum CATGSMSweepTrimMode)
<dd>  Sets trim option statuses for both tangency surfaces.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddDraftAngleDefinitionLocation"></a><a name="AddDraftAngleDefinitionLocation(CATISpecObject_var&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>AddDraftAngleDefinitionLocation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AddDraftAngleDefinitionLocation</b>(<td> const CATISpecObject_var&amp; <td><tt>iLoc</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>iVal</tt>) = 0  </table></dt>
<dl>
  <dd>
 Adds a geometrical element and a value necessary for draft angle definition.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLoc</tt>
   <dd>      Geometrical element
   </dd>
    <dt><tt> iVal</tt>
   <dd>      Angular parameter</dd>
</dl>
</dl>
</dl>
<a name="DelAngle"></a><a name="DelAngle()"></a> <dt> o <b>DelAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>DelAngle</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Removes all angles.
</dl>
<a name="DelGuideCrv"></a><a name="DelGuideCrv()"></a> <dt> o <b>DelGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>DelGuideCrv</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Removes all guide curves.
</dl>
<a name="DelGuideSurf"></a><a name="DelGuideSurf()"></a> <dt> o <b>DelGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>DelGuideSurf</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Removes all guide surfaces.
</dl>
<a name="DelLength"></a><a name="DelLength()"></a> <dt> o <b>DelLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>DelLength</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Removes all lengths.
</dl>
<a name="GetAngle"></a><a name="GetAngle(CATICkeParm_var&amp;,int)"></a> <dt> o <b>GetAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngle</b>(<td>CATICkeParm_var&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the literal feature representing an angle given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Angle literal feature
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the angle (starting from one)
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="GetAngle"></a><a name="GetAngle(double&amp;,int)"></a> <dt> o <b>GetAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngle</b>(<td>double&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the value of an angle given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Angle value
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the angle (starting from one)</dd>
</dl>
</dl>
</dl>
<a name="GetAngularLaw"></a><a name="GetAngularLaw(CATICkeLaw_var&amp;)"></a> <dt> o <b>GetAngularLaw</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngularLaw</b>(<td>CATICkeLaw_var&amp; <td><tt>Elem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets angular law feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Elem</tt>
   <dd>      Angular law feature
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="GetAngularLaw"></a><a name="GetAngularLaw(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)"></a> <dt> o <b>GetAngularLaw</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngularLaw</b>(<td>CATICkeParm_var&amp; <td><tt>ParamStart</tt>,<tr><td></td><td>CATICkeParm_var&amp; <td><tt>ParamEnd</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information about angular law.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ParamStart</tt>
   <dd>      Start angle literal feature
   </dd>
    <dt><tt> ParamEnd</tt>
   <dd>      End angle literal feature
   </dd>
    <dt><tt> eType</tt>
   <dd>      Type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetAngularLawInversion"></a><a name="GetAngularLawInversion(CATBoolean&amp;)"></a> <dt> o <b>GetAngularLawInversion</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngularLawInversion</b>(<td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>oInversion</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information whether angular law has to be inverted or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oInversion</tt>
   <dd>      TRUE or FALSE (FALSE if not specified).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetAngularLawType"></a><a name="GetAngularLawType(enum CATGSMBasicLawType&amp;)"></a> <dt> o <b>GetAngularLawType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetAngularLawType</b>(<td>enum CATGSMBasicLawType&amp; <td><tt>eType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets angular law type.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> eType</tt>
   <dd>      Type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetCanonicalDetectionMode"></a><a name="GetCanonicalDetectionMode(CATGSMCanonicalSurfaceDetection&amp;)"></a> <dt> o <b>GetCanonicalDetectionMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetCanonicalDetectionMode</b>(<td><a href="../GSMInterfaces/enum_CATGSMCanonicalSurfaceDetection_193637.htm">CATGSMCanonicalSurfaceDetection&amp;</a> <td><tt>oDetection</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information about detection of canonical surfaces of the output surface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDetection</tt>
   <dd>     If canonical surfaces are detected.
     Possible values are CATGSMNoDetection and CATGSMCanonicalDetection.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMCanonicalSurfaceDetection_193637.htm">CATGSMCanonicalSurfaceDetection</a>
</dl>
</dl>
<a name="GetChoiceNo"></a><a name="GetChoiceNo(int&amp;,int&amp;,int&amp;)"></a> <dt> o <b>GetChoiceNo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetChoiceNo</b>(<td>int&amp; <td><tt>oSurfOri</tt>,<tr><td></td><td>int&amp; <td><tt>oCrvOri</tt>,<tr><td></td><td>int&amp; <td><tt>oNo</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets a sequence which identifies a solution amongst all possibilities
 of a line-profile swept surface, case CATGSMLinearSweep_GuideAndTangencySurface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSurfOri</tt>
   <dd>      This orientation determines the location of the results with regard to
      the surface. Possible values are: <BR>
      * +1 : the result is in the semi-space defined by the normal to the surface, <BR>
      * -1 : the result is in the semi-space defined by the opposite to the normal to the surface, <BR>
      * 0  : no orientation is specified, all the results are output, <BR>
      * 2  : the result changes of semi-space along the spine.
   </dd>
    <dt><tt> oCrvOri</tt>
   <dd>      This orientation determines the location of the results with regard to
      the guide curve (CATGSMLinearSweep_GuideAndTangencySurface);
      let's define a trihedron with the guide curve, the normal to the surface
      and the tangent to the linear profile, then possible values are: <BR>
      * +1 : the result is such that the triedron is counter clockwise, <BR>
      * -1 : the result is such that the triedron is clockwise, <BR>
      * 0  : no orientation is specified, all the results are output, <BR>
      * 2  : the orientation of the trihedron changes along the spine.
   </dd>
    <dt><tt> oNo</tt>
   <dd>      Given the previous orientations, solution number in a distance ordered list.</dd>
</dl>
</dl>
</dl>
<a name="GetChoiceNoSurfaces"></a><a name="GetChoiceNoSurfaces(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)"></a> <dt> o <b>GetChoiceNoSurfaces</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetChoiceNoSurfaces</b>(<td>int&amp; <td><tt>oSurfOri1</tt>,<tr><td></td><td>int&amp; <td><tt>oSurfOri2</tt>,<tr><td></td><td>int&amp; <td><tt>oSurfCouplOri1</tt>,<tr><td></td><td>int&amp; <td><tt>oSurfCouplOri2</tt>,<tr><td></td><td>int&amp; <td><tt>oNo</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets a sequence which identifies a solution amongst all possibilities
 of a line-profile swept surface, case CATGSMLinearSweep_TwoTangencySurfaces.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSurfOri1</tt>
   <dd>      This orientation determines the location of the results with regard to
      the first surface. Possible values are: <BR>
      * +1 : the result is in the semi-space defined by the normal to the surface, <BR>
      * -1 : the result is in the semi-space defined by the opposite to the normal to the , <BR>
      * 0  : no orientation is specified, all the results are output, <BR>
      * 2  : the result changes of semi-space along the spine. <BR>
   </dd>
    <dt><tt> oSurfOri2</tt>
   <dd>      This orientation determines the location of the results with regard to
      the second surface.
   </dd>
    <dt><tt> oSurfCouplOri1</tt>
   <dd>      This orientation determines the location of the results with regard to
      the triedron defined by the the spine, the normal to the first surface and
      the tangent to the linear profile. Possible values are: <BR>
      * +1 : the output results are such that the triedron is counter clockwise, <BR>
      * -1 : the output results are such that the triedron is clockwise, <BR>
      * 0  : no orientation is specified, all the results are output, <BR>
      * 2  : the orientation of the trihedron changes along the spine.
   </dd>
    <dt><tt> oSurfCouplOri2</tt>
   <dd>      This orientation determines the location of the results with regard to
      the triedron defined by the the spine, the normal to the second surface and
      the tangent to the linear profile.
   </dd>
    <dt><tt> oNo</tt>
   <dd>      Given the previous orientations, solution number in a distance ordered list.</dd>
</dl>
</dl>
</dl>
<a name="GetContext"></a><a name="GetContext(CATGSMFeatureContextType&amp;)"></a> <dt> o <b>GetContext</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetContext</b>(<td><a href="../GSMInterfaces/enum_CATGSMFeatureContextType_117904.htm">CATGSMFeatureContextType&amp;</a> <td><tt>oContext</tt>)=0  </table></dt>
<dl>
  <dd>
 Gets the context of the Sweep.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oContextType</tt>
   <dd>      CATGSMSurfaceCtxt if the result is surface, CATGSMVolumeCtxt if it is volume
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMFeatureContextType_117904.htm">CATGSMFeatureContextType</a>
</dl>
</dl>
<a name="GetDraftAngleDefinitionLocations"></a><a name="GetDraftAngleDefinitionLocations(CATListValCATISpecObject_var&amp;,CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetDraftAngleDefinitionLocations</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetDraftAngleDefinitionLocations</b>(<td>CATListValCATISpecObject_var&amp; <td><tt>oListLoc</tt>,<tr><td></td><td>CATListValCATBaseUnknown_var&amp; <td><tt>oListVal</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets geometrical elements and values necessary for draft angle definition.
 There can be three possibilities: 1) a list of curves and a list of
 angular parameters (case: constant angles by G1 section), 2) a list
 of points and a list of angular parameters (case: variable angle
 with given values at given points), 3) no geometry and only one
 angular parameter for the whole sweeping operation.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListLoc</tt>
   <dd>      List of geometrical elements
   </dd>
    <dt><tt> oListVal</tt>
   <dd>      List of angular parameters</dd>
</dl>
</dl>
</dl>
<a name="GetDraftComputationMode"></a><a name="GetDraftComputationMode(enum CATGSMLinearDraftSweepComp&amp;)"></a> <dt> o <b>GetDraftComputationMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetDraftComputationMode</b>(<td>enum CATGSMLinearDraftSweepComp&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets linear swept surface with draft direction computation mode:
 CATGSMLinearDraftSweepComp_Square for square,
 CATGSMLinearDraftSweepComp_ConeEnvelop for cone envelop.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Computation mode</dd>
</dl>
</dl>
</dl>
<a name="GetDraftDirection"></a><a name="GetDraftDirection(CATIGSMDirection_var&amp;)"></a> <dt> o <b>GetDraftDirection</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetDraftDirection</b>(<td>CATIGSMDirection_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets draft direction.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Direction feature</dd>
</dl>
</dl>
</dl>
<a name="GetFirstLengthDefinitionType"></a><a name="GetFirstLengthDefinitionType(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)"></a> <dt> o <b>GetFirstLengthDefinitionType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetFirstLengthDefinitionType</b>(<td>enum CATGSMLinearSweepLengthType&amp; <td><tt>oType</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets first length definition for linear swept surfaces (for draft surfaces
 only, so far).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>     CATGSMLinearSweepLengthType_None: undefined length type,<br>
     CATGSMLinearSweepLengthType_Standard: length of the swept line in
       the sweeping plane from guide curve,<br>
     CATGSMLinearSweepLengthType_FromCurve: no numerical value is required,
       equivalent to standard length at zero,<br>
     CATGSMLinearSweepLengthType_Reference: up to or from a geometrical
       reference (a surface),<br>
     CATGSMLinearSweepLengthType_FromExtremum: only for draft surfaces,
       length computed in the draft direction from an extremum point on
       the guide curve (available from V5R8SP3),<br>
     CATGSMLinearSweepLengthType_AlongSurface: only for draft surfaces,
       length will be used in a way similar to euclidean parallel curve
       distance on the swept surface (available from V5R11)</dd>
</dl>
</dl>
</dl>
<a name="GetGuideCrv"></a><a name="GetGuideCrv(CATISpecObject_var&amp;)"></a> <dt> o <b>GetGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideCrv</b>(<td>CATISpecObject_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets first guide curve.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      First guide curve feature.</dd>
</dl>
</dl>
</dl>
<a name="GetGuideCrv"></a><a name="GetGuideCrv(CATISpecObject_var&amp;,int)"></a> <dt> o <b>GetGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideCrv</b>(<td>CATISpecObject_var&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets a guide curve given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Guide curve feature.
   </dd>
    <dt><tt> iI</tt>
   <dd>      Guide curve index : 1 or 2</dd>
</dl>
</dl>
</dl>
<a name="GetGuideDeviation"></a><a name="GetGuideDeviation(CATICkeParm_var&amp;)"></a> <dt> o <b>GetGuideDeviation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideDeviation</b>(<td>CATICkeParm_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Length literal feature.</dd>
</dl>
</dl>
</dl>
<a name="GetGuideDeviation"></a><a name="GetGuideDeviation(double&amp;)"></a> <dt> o <b>GetGuideDeviation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideDeviation</b>(<td>double&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Numerical value.</dd>
</dl>
</dl>
</dl>
<a name="GetGuideDeviationActivity"></a><a name="GetGuideDeviationActivity(CATBoolean&amp;)"></a> <dt> o <b>GetGuideDeviationActivity</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideDeviationActivity</b>(<td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>oActi</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information whether a deviation from guide curves is allowed or not
 during sweeping operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSmooth</tt>
   <dd>      TRUE or FALSE (FALSE if not specified).</dd>
</dl>
</dl>
</dl>
<a name="GetGuideSurf"></a><a name="GetGuideSurf(CATISpecObject_var&amp;)"></a> <dt> o <b>GetGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideSurf</b>(<td>CATISpecObject_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets first guide surface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      First guide surface feature.</dd>
</dl>
</dl>
</dl>
<a name="GetGuideSurf"></a><a name="GetGuideSurf(CATISpecObject_var&amp;,int)"></a> <dt> o <b>GetGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetGuideSurf</b>(<td>CATISpecObject_var&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets a guide surface given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Guide surface feature.
   </dd>
    <dt><tt> iI</tt>
   <dd>      Guide surface index : 1 or 2</dd>
</dl>
</dl>
</dl>
<a name="GetLength"></a><a name="GetLength(CATICkeParm_var&amp;,int)"></a> <dt> o <b>GetLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLength</b>(<td>CATICkeParm_var&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the literal feature representing an length given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Length literal feature
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the length (starting from one)
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="GetLength"></a><a name="GetLength(double&amp;,int)"></a> <dt> o <b>GetLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLength</b>(<td>double&amp; <td><tt>oElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the value of a length given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Length value
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the length (starting from one)</dd>
</dl>
</dl>
</dl>
<a name="GetLengthLawInversions"></a><a name="GetLengthLawInversions(CATBoolean&amp;,CATBoolean&amp;)"></a> <dt> o <b>GetLengthLawInversions</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLengthLawInversions</b>(<td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>oInversion1</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>oInversion2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information whether length laws have to be inverted or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oInversion1</tt>
   <dd>      TRUE or FALSE (FALSE if not specified) for first length law.
   </dd>
    <dt><tt> oInversion2</tt>
   <dd>      TRUE or FALSE (FALSE if not specified) for second length law.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetLengthLawTypes"></a><a name="GetLengthLawTypes(enum CATGSMBasicLawType&amp;,enum CATGSMBasicLawType&amp;)"></a> <dt> o <b>GetLengthLawTypes</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLengthLawTypes</b>(<td>enum CATGSMBasicLawType&amp; <td><tt>eFirstType</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets length law types.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration).
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetLengthLaws"></a><a name="GetLengthLaws(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType&amp;)"></a> <dt> o <b>GetLengthLaws</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLengthLaws</b>(<td>CATICkeParm_var&amp; <td><tt>FirstParamStart</tt>,<tr><td></td><td>CATICkeParm_var&amp; <td><tt>FirstParamEnd</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eFirstType</tt>,<tr><td></td><td>CATICkeParm_var&amp; <td><tt>SecondParamStart</tt>,<tr><td></td><td>CATICkeParm_var&amp; <td><tt>SecondParamEnd</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information about both length laws. PREFER PREVIOUS METHOD WHICH
 INCLUDES ADVANCED LAW FEATURES.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FirstParamStart</tt>
   <dd>      Start first angle literal feature
   </dd>
    <dt><tt> FirstParamEnd</tt>
   <dd>      End first angle literal feature
   </dd>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
    <dt><tt> SecondParamStart</tt>
   <dd>      Start second angle literal feature
   </dd>
    <dt><tt> SecondParamEnd</tt>
   <dd>      End second angle literal feature
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetLengthLaws"></a><a name="GetLengthLaws(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType&amp;)"></a> <dt> o <b>GetLengthLaws</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLengthLaws</b>(<td>CATISpecObject_var&amp; <td><tt>FirstParamStart</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>FirstParamEnd</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eFirstType</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>SecondParamStart</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>SecondParamEnd</tt>,<tr><td></td><td>enum CATGSMBasicLawType&amp; <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information about both length laws (including advanced law features).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FirstParamStart</tt>
   <dd>      Start first angle literal feature, or law feature if advanced
   </dd>
    <dt><tt> FirstParamEnd</tt>
   <dd>      End first angle literal feature, or NULL_var if advanced
   </dd>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
    <dt><tt> SecondParamStart</tt>
   <dd>      Start second angle literal feature, or law feature if advanced
   </dd>
    <dt><tt> SecondParamEnd</tt>
   <dd>      End second angle literal feature, or NULL_var if advanced
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="GetLongitudinalRelimiters"></a><a name="GetLongitudinalRelimiters(CATISpecObject_var&amp;,CATBoolean&amp;,CATISpecObject_var&amp;,CATBoolean&amp;)"></a> <dt> o <b>GetLongitudinalRelimiters</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetLongitudinalRelimiters</b>(<td>CATISpecObject_var&amp; <td><tt>oElem1</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>boInv1</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>oElem2</tt>,<tr><td></td><td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>boInv2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the elements relimiting the spine (or the default spine).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem1</tt>
   <dd>      First relimiting feature (plane or point)
   </dd>
    <dt><tt> boInv1</tt>
   <dd>      Split direction for the first relimitation<br>
      FALSE means that the beginning of the spine (considering its orientation) is removed, TRUE means that the end of the spine is removed
   </dd>
    <dt><tt> oElem2</tt>
   <dd>      Second relimiting feature (plane or point)
   </dd>
    <dt><tt> boInv2</tt>
   <dd>      Split direction for the second relimitation</dd>
</dl>
</dl>
</dl>
<a name="GetMode"></a><a name="GetMode(enum CATGSMLinearSweepCase&amp;)"></a> <dt> o <b>GetMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetMode</b>(<td>enum CATGSMLinearSweepCase&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets linear sweep case number (also called mode). 
 Possible cases are: <BR>
  - CATGSMLinearSweep_None: unidentified mode <BR>
  - CATGSMLinearSweep_TwoGuides: two guide curves and two possible
     length values <BR>
  - CATGSMLinearSweep_GuideAndAngleCurve: one guide curve, one reference
     angle curve, one angle value and two length values <BR>
  - CATGSMLinearSweep_GuideAndMiddle: two guide curves with one given as
     middle curve <BR>
  - CATGSMLinearSweep_GuideAndRefSurfaceAngle: one guide curve lying on
     a reference surface, an angle value and two length values <BR>
  - CATGSMLinearSweep_GuideAndTangencySurface: one guide curve
     and one tangency surface <BR>
  - CATGSMLinearSweep_GuideAndDraftDirection: one guide curve
     and a draft direction <BR>
  - CATGSMLinearSweep_TwoTangencySurfaces: one spine (or guide curve)
     and two tangency surfaces
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Case number
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMLinearSweepCase_86200.htm">CATGSMLinearSweepCase</a>
</dl>
</dl>
<a name="GetNbAngle"></a><a name="GetNbAngle(int&amp;)"></a> <dt> o <b>GetNbAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbAngle</b>(<td>int&amp; <td><tt>oI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the number of angles.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oI</tt>
   <dd>      Number of angles</dd>
</dl>
</dl>
</dl>
<a name="GetNbGuideCrv"></a><a name="GetNbGuideCrv(int&amp;)"></a> <dt> o <b>GetNbGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbGuideCrv</b>(<td>int&amp; <td><tt>oI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the number of guide curves.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oI</tt>
   <dd>      Number of guide curves</dd>
</dl>
</dl>
</dl>
<a name="GetNbGuideSurf"></a><a name="GetNbGuideSurf(int&amp;)"></a> <dt> o <b>GetNbGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbGuideSurf</b>(<td>int&amp; <td><tt>oI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the number of guide surfaces.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oI</tt>
   <dd>      Number of guide surfaces</dd>
</dl>
</dl>
</dl>
<a name="GetNbLength"></a><a name="GetNbLength(int&amp;)"></a> <dt> o <b>GetNbLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetNbLength</b>(<td>int&amp; <td><tt>oI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the number of lengths.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oI</tt>
   <dd>      Number of lengths</dd>
</dl>
</dl>
</dl>
<a name="GetSecondLengthDefinitionType"></a><a name="GetSecondLengthDefinitionType(enum CATGSMLinearSweepLengthType&amp;,CATISpecObject_var&amp;)"></a> <dt> o <b>GetSecondLengthDefinitionType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSecondLengthDefinitionType</b>(<td>enum CATGSMLinearSweepLengthType&amp; <td><tt>oType</tt>,<tr><td></td><td>CATISpecObject_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets second length definition for linear swept surfaces (for draft surfaces
 only, so far).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Length type</dd>
</dl>
</dl>
</dl>
<a name="GetSmoothActivity"></a><a name="GetSmoothActivity(CATBoolean&amp;)"></a> <dt> o <b>GetSmoothActivity</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSmoothActivity</b>(<td><a href="../System/typedef_CATBoolean_20142.htm">CATBoolean&amp;</a> <td><tt>oSmooth</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets information whether sweeping operation is smoothed or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSmooth</tt>
   <dd>      TRUE or FALSE (FALSE if not specified).</dd>
</dl>
</dl>
</dl>
<a name="GetSmoothAngleThreshold"></a><a name="GetSmoothAngleThreshold(CATICkeParm_var&amp;)"></a> <dt> o <b>GetSmoothAngleThreshold</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSmoothAngleThreshold</b>(<td>CATICkeParm_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Angular literal feature.</dd>
</dl>
</dl>
</dl>
<a name="GetSmoothAngleThreshold"></a><a name="GetSmoothAngleThreshold(double&amp;)"></a> <dt> o <b>GetSmoothAngleThreshold</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSmoothAngleThreshold</b>(<td>double&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Numerical value.</dd>
</dl>
</dl>
</dl>
<a name="GetSolutionNo"></a><a name="GetSolutionNo(int&amp;)"></a> <dt> o <b>GetSolutionNo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSolutionNo</b>(<td>int&amp; <td><tt>oSolNo</tt>)=0  </table></dt>
<dl>
  <dd>
 Gets the current solution number of the four possible solutions.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSolNo</tt>
   <dd> is the solution number.</dd>
</dl>
</dl>
</dl>
<a name="GetSpine"></a><a name="GetSpine(CATISpecObject_var&amp;)"></a> <dt> o <b>GetSpine</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetSpine</b>(<td>CATISpecObject_var&amp; <td><tt>oElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets the spine.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElem</tt>
   <dd>      Spine feature</dd>
</dl>
</dl>
</dl>
<a name="GetTrimOption"></a><a name="GetTrimOption(enum CATGSMSweepTrimMode&amp;)"></a> <dt> o <b>GetTrimOption</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetTrimOption</b>(<td>enum CATGSMSweepTrimMode&amp; <td><tt>oOption</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets trim option status for the first (or only) tangency surface.
 Possible cases are : <BR>
  - CATGSMSweepTrimMode_None: no trim computed or undefined, <BR>
  - CATGSMSweepTrimMode_On: trim computed.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOption</tt>
   <dd>      Trim option value
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMSweepTrimMode_70970.htm">CATGSMSweepTrimMode</a>
</dl>
</dl>
<a name="GetTrimOptions"></a><a name="GetTrimOptions(enum CATGSMSweepTrimMode&amp;,enum CATGSMSweepTrimMode&amp;)"></a> <dt> o <b>GetTrimOptions</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>GetTrimOptions</b>(<td>enum CATGSMSweepTrimMode&amp; <td><tt>oOption1</tt>,<tr><td></td><td>enum CATGSMSweepTrimMode&amp; <td><tt>oOption2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Gets trim option statuses for both tangency surfaces.
 Possible cases are : <BR>
  - CATGSMSweepTrimMode_None: no trim computed or undefined, <BR>
  - CATGSMSweepTrimMode_On: trim computed.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOption1</tt>
   <dd>      Trim option value for the first tangency surface
   </dd>
    <dt><tt> oOption2</tt>
   <dd>      Trim option value for the second tangency surface
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMSweepTrimMode_70970.htm">CATGSMSweepTrimMode</a>
</dl>
</dl>
<a name="InsertDraftAngleDefinitionLocationAfterPos"></a><a name="InsertDraftAngleDefinitionLocationAfterPos(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)"></a> <dt> o <b>InsertDraftAngleDefinitionLocationAfterPos</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>InsertDraftAngleDefinitionLocationAfterPos</b>(<td> const CATISpecObject_var&amp; <td><tt>iLoc</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>iVal</tt>,<tr><td></td><td> const int <td><tt>iPos</tt>) = 0  </table></dt>
<dl>
  <dd>
 Inserts a geometrical element and a value necessary for draft angle definition
 after a given position in the lists.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLoc</tt>
   <dd>      Geometrical element
   </dd>
    <dt><tt> iVal</tt>
   <dd>      Angular parameter
   </dd>
    <dt><tt> iPos</tt>
   <dd>      Position in lists</dd>
</dl>
</dl>
</dl>
<a name="InsertDraftAngleDefinitionLocationBeforePos"></a><a name="InsertDraftAngleDefinitionLocationBeforePos(CATISpecObject_var&amp;,CATICkeParm_var&amp;,int)"></a> <dt> o <b>InsertDraftAngleDefinitionLocationBeforePos</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>InsertDraftAngleDefinitionLocationBeforePos</b>(<td> const CATISpecObject_var&amp; <td><tt>iLoc</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>iVal</tt>,<tr><td></td><td> const int <td><tt>iPos</tt>) = 0  </table></dt>
<dl>
  <dd>
 Inserts a geometrical element and a value necessary for draft angle definition
 before a given position in the lists.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLoc</tt>
   <dd>      Geometrical element
   </dd>
    <dt><tt> iVal</tt>
   <dd>      Angular parameter
   </dd>
    <dt><tt> iPos</tt>
   <dd>      Position in lists</dd>
</dl>
</dl>
</dl>
<a name="RemoveAllDraftAngleDefinitionLocations"></a><a name="RemoveAllDraftAngleDefinitionLocations()"></a> <dt> o <b>RemoveAllDraftAngleDefinitionLocations</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>RemoveAllDraftAngleDefinitionLocations</b>(<td>)= 0  </table></dt>
<dl>
  <dd>
 Removes all geometrical elements and values necessary for draft angle definition.
</dl>
<a name="RemoveDraftAngleDefinitionLocationPosition"></a><a name="RemoveDraftAngleDefinitionLocationPosition(int)"></a> <dt> o <b>RemoveDraftAngleDefinitionLocationPosition</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>RemoveDraftAngleDefinitionLocationPosition</b>(<td> const int <td><tt>iPos</tt>) = 0  </table></dt>
<dl>
  <dd>
 Removes a geometrical element and a value necessary for draft angle definition
 at a given position in the lists.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPos</tt>
   <dd>      Position in lists</dd>
</dl>
</dl>
</dl>
<a name="SetAngle"></a><a name="SetAngle(CATICkeParm_var,int)"></a> <dt> o <b>SetAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngle</b>(<td> const <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm_var</a> <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the literal feature representing an angle given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Angle literal feature
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the angle (starting from one)
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="SetAngle"></a><a name="SetAngle(double,int)"></a> <dt> o <b>SetAngle</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngle</b>(<td> const double <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the value of an angle given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Angle value
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the angle (starting from one)</dd>
</dl>
</dl>
</dl>
<a name="SetAngularLaw"></a><a name="SetAngularLaw(CATICkeLaw_var&amp;)"></a> <dt> o <b>SetAngularLaw</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngularLaw</b>(<td> const CATICkeLaw_var&amp; <td><tt>Elem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets angular law feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Elem</tt>
   <dd>      Angular law feature
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="SetAngularLaw"></a><a name="SetAngularLaw(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)"></a> <dt> o <b>SetAngularLaw</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngularLaw</b>(<td> const CATICkeParm_var&amp; <td><tt>ParamStart</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>ParamEnd</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information about angular law.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ParamStart</tt>
   <dd>      Start angle literal feature
   </dd>
    <dt><tt> ParamEnd</tt>
   <dd>      End angle literal feature
   </dd>
    <dt><tt> eType</tt>
   <dd>      Type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetAngularLawInversion"></a><a name="SetAngularLawInversion(CATBoolean)"></a> <dt> o <b>SetAngularLawInversion</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngularLawInversion</b>(<td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iInversion</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information whether angular law has to be inverted or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInversion</tt>
   <dd>      TRUE or FALSE.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetAngularLawType"></a><a name="SetAngularLawType(enum CATGSMBasicLawType)"></a> <dt> o <b>SetAngularLawType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetAngularLawType</b>(<td> const enum CATGSMBasicLawType <td><tt>eType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets angular law type.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> eType</tt>
   <dd>      Type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetCanonicalDetectionMode"></a><a name="SetCanonicalDetectionMode(CATGSMCanonicalSurfaceDetection)"></a> <dt> o <b>SetCanonicalDetectionMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetCanonicalDetectionMode</b>(<td><a href="../GSMInterfaces/enum_CATGSMCanonicalSurfaceDetection_193637.htm">CATGSMCanonicalSurfaceDetection</a> <td><tt>iDetection</tt><td><tt>= CATGSMNoDetection</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information about detection of canonical surfaces of the output surface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDetection</tt>
   <dd>     If canonical surfaces are detected.
     Possible values are CATGSMNoDetection and CATGSMCanonicalDetection.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMCanonicalSurfaceDetection_193637.htm">CATGSMCanonicalSurfaceDetection</a>
</dl>
</dl>
<a name="SetChoiceNo"></a><a name="SetChoiceNo(int,int,int)"></a> <dt> o <b>SetChoiceNo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetChoiceNo</b>(<td> const int <td><tt>iSurfOri</tt>,<tr><td></td><td> const int <td><tt>iCrvOri</tt>,<tr><td></td><td> const int <td><tt>iNo</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a sequence which identifies a solution (see above), case CATGSMLinearSweep_GuideAndTangencySurface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNo</tt>
   <dd>   </dd>
    <dt><tt> iSurfOri</tt>
   <dd>   </dd>
    <dt><tt> iCrvOri</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="SetChoiceNoSurfaces"></a><a name="SetChoiceNoSurfaces(int,int,int,int,int)"></a> <dt> o <b>SetChoiceNoSurfaces</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetChoiceNoSurfaces</b>(<td> const int <td><tt>iSurfOri1</tt>,<tr><td></td><td> const int <td><tt>iSurfOri2</tt>,<tr><td></td><td> const int <td><tt>iSurfCouplOri1</tt>,<tr><td></td><td> const int <td><tt>iSurfCouplOri2</tt>,<tr><td></td><td> const int <td><tt>iNo</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a sequence which identifies a solution (see above), case CATGSMLinearSweep_TwoTangencySurfaces.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNo</tt>
   <dd>   </dd>
    <dt><tt> iFirstOri</tt>
   <dd>   </dd>
    <dt><tt> iSecondOri</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="SetContext"></a><a name="SetContext(CATGSMFeatureContextType)"></a> <dt> o <b>SetContext</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetContext</b>(<td> const <a href="../GSMInterfaces/enum_CATGSMFeatureContextType_117904.htm">CATGSMFeatureContextType</a> <td><tt>iContext</tt>)=0  </table></dt>
<dl>
  <dd>
 Sets the context of the Sweep.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iContextType</tt>
   <dd>      CATGSMSurfaceCtxt to generate a surface, CATGSMVolumeCtxt (requires GSO License) to generate a volume
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMFeatureContextType_117904.htm">CATGSMFeatureContextType</a>
</dl>
</dl>
<a name="SetDraftComputationMode"></a><a name="SetDraftComputationMode(enum CATGSMLinearDraftSweepComp)"></a> <dt> o <b>SetDraftComputationMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetDraftComputationMode</b>(<td> const enum CATGSMLinearDraftSweepComp <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets linear swept surface with draft direction computation mode:
 CATGSMLinearDraftSweepComp_Square for square,
 CATGSMLinearDraftSweepComp_ConeEnvelop for cone envelop.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Computation mode</dd>
</dl>
</dl>
</dl>
<a name="SetDraftDirection"></a><a name="SetDraftDirection(CATIGSMDirection_var&amp;)"></a> <dt> o <b>SetDraftDirection</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetDraftDirection</b>(<td> const CATIGSMDirection_var&amp; <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets draft direction.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Direction feature</dd>
</dl>
</dl>
</dl>
<a name="SetFirstLengthDefinitionType"></a><a name="SetFirstLengthDefinitionType(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)"></a> <dt> o <b>SetFirstLengthDefinitionType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetFirstLengthDefinitionType</b>(<td> const enum CATGSMLinearSweepLengthType <td><tt>iType</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>iElem</tt><td><tt>= NULL_var</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets first length definition for linear swept surfaces (for draft surfaces
 only, so far).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Length type</dd>
</dl>
</dl>
</dl>
<a name="SetGuideCrv"></a><a name="SetGuideCrv(CATISpecObject_var)"></a> <dt> o <b>SetGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideCrv</b>(<td> const <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject_var</a> <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Modify first guide curve.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      First guide curve feature.</dd>
</dl>
</dl>
</dl>
<a name="SetGuideCrv"></a><a name="SetGuideCrv(CATISpecObject_var,int)"></a> <dt> o <b>SetGuideCrv</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideCrv</b>(<td> const <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject_var</a> <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a guide curve given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Guide curve feature.
   </dd>
    <dt><tt> iI</tt>
   <dd>      Guide curve index : 1 or 2</dd>
</dl>
</dl>
</dl>
<a name="SetGuideDeviation"></a><a name="SetGuideDeviation(CATICkeParm_var&amp;)"></a> <dt> o <b>SetGuideDeviation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideDeviation</b>(<td> const CATICkeParm_var&amp; <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Length literal feature.</dd>
</dl>
</dl>
</dl>
<a name="SetGuideDeviation"></a><a name="SetGuideDeviation(double)"></a> <dt> o <b>SetGuideDeviation</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideDeviation</b>(<td> const double <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets deviation value (length) from guide curves allowed during sweeping
 operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Numerical value.</dd>
</dl>
</dl>
</dl>
<a name="SetGuideDeviationActivity"></a><a name="SetGuideDeviationActivity(CATBoolean)"></a> <dt> o <b>SetGuideDeviationActivity</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideDeviationActivity</b>(<td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iActi</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information whether a deviation from guide curves is allowed or not
 during sweeping operation in order to smooth it.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSmooth</tt>
   <dd>      TRUE or FALSE.</dd>
</dl>
</dl>
</dl>
<a name="SetGuideSurf"></a><a name="SetGuideSurf(CATISpecObject_var)"></a> <dt> o <b>SetGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideSurf</b>(<td> const <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject_var</a> <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets first guide surface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      First guide surface feature.</dd>
</dl>
</dl>
</dl>
<a name="SetGuideSurf"></a><a name="SetGuideSurf(CATISpecObject_var,int)"></a> <dt> o <b>SetGuideSurf</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetGuideSurf</b>(<td> const <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject_var</a> <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets a guide surface given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Guide surface feature.
   </dd>
    <dt><tt> iI</tt>
   <dd>      Guide surface index : 1 or 2</dd>
</dl>
</dl>
</dl>
<a name="SetLength"></a><a name="SetLength(CATICkeParm_var,int)"></a> <dt> o <b>SetLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLength</b>(<td> const <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm_var</a> <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the literal feature representing an length given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Length literal feature
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the length (starting from one)
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>
</dl>
</dl>
<a name="SetLength"></a><a name="SetLength(double,int)"></a> <dt> o <b>SetLength</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLength</b>(<td> const double <td><tt>iElem</tt>,<tr><td></td><td> const int <td><tt>iI</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the value of a length given its index.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Length value
   </dd>
    <dt><tt> iI</tt>
   <dd>      Index of the length (starting from one)</dd>
</dl>
</dl>
</dl>
<a name="SetLengthLawInversions"></a><a name="SetLengthLawInversions(CATBoolean,CATBoolean)"></a> <dt> o <b>SetLengthLawInversions</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLengthLawInversions</b>(<td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iInversion1</tt>,<tr><td></td><td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iInversion2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information whether length laws have to be inverted or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInversion1</tt>
   <dd>      TRUE or FALSE for first length law.
   </dd>
    <dt><tt> iInversion2</tt>
   <dd>      TRUE or FALSE for second length law.
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetLengthLawTypes"></a><a name="SetLengthLawTypes(enum CATGSMBasicLawType,enum CATGSMBasicLawType)"></a> <dt> o <b>SetLengthLawTypes</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLengthLawTypes</b>(<td> const enum CATGSMBasicLawType <td><tt>eFirstType</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets length law types.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration).
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetLengthLaws"></a><a name="SetLengthLaws(CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType,CATICkeParm_var&amp;,CATICkeParm_var&amp;,enum CATGSMBasicLawType)"></a> <dt> o <b>SetLengthLaws</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLengthLaws</b>(<td> const CATICkeParm_var&amp; <td><tt>FirstParamStart</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>FirstParamEnd</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eFirstType</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>SecondParamStart</tt>,<tr><td></td><td> const CATICkeParm_var&amp; <td><tt>SecondParamEnd</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information about both length laws. PREFER PREVIOUS METHOD WHICH
 INCLUDES ADVANCED LAW FEATURES.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FirstParamStart</tt>
   <dd>      Start first angle literal feature
   </dd>
    <dt><tt> FirstParamEnd</tt>
   <dd>      End first angle literal feature
   </dd>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType.
   </dd>
    <dt><tt> SecondParamStart</tt>
   <dd>      Start second angle literal feature
   </dd>
    <dt><tt> SecondParamEnd</tt>
   <dd>      End second angle literal feature
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration except
      CATGSMBasicLawType_Advanced).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetLengthLaws"></a><a name="SetLengthLaws(CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType,CATISpecObject_var&amp;,CATISpecObject_var&amp;,enum CATGSMBasicLawType)"></a> <dt> o <b>SetLengthLaws</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLengthLaws</b>(<td> const CATISpecObject_var&amp; <td><tt>FirstParamStart</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>FirstParamEnd</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eFirstType</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>SecondParamStart</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>SecondParamEnd</tt>,<tr><td></td><td> const enum CATGSMBasicLawType <td><tt>eSecondType</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information about both length laws (including advanced law features).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FirstParamStart</tt>
   <dd>      Start first angle literal feature, or law feature if advanced
   </dd>
    <dt><tt> FirstParamEnd</tt>
   <dd>      End first angle literal feature, or NULL_var if advanced
   </dd>
    <dt><tt> eFirstType</tt>
   <dd>      First type of law (from CATGSMBasicLawType enumeration): <BR>
       - CATGSMBasicLawType_None, <BR>
       - CATGSMBasicLawType_Constant, <BR>
       - CATGSMBasicLawType_Linear, <BR>
       - CATGSMBasicLawType_SType, <BR>
       - CATGSMBasicLawType_Advanced.
   </dd>
    <dt><tt> SecondParamStart</tt>
   <dd>      Start second angle literal feature, or law feature if advanced
   </dd>
    <dt><tt> SecondParamEnd</tt>
   <dd>      End second angle literal feature, or NULL_var if advanced
   </dd>
    <dt><tt> eSecondType</tt>
   <dd>      Second type of law (from CATGSMBasicLawType enumeration).
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_CATICkeParm_23158.htm">CATICkeParm</a>, <a href="../GSMInterfaces/enum_CATGSMBasicLawType_63060.htm">CATGSMBasicLawType</a>
</dl>
</dl>
<a name="SetLongitudinalRelimiters"></a><a name="SetLongitudinalRelimiters(CATISpecObject_var&amp;,CATBoolean,CATISpecObject_var&amp;,CATBoolean)"></a> <dt> o <b>SetLongitudinalRelimiters</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetLongitudinalRelimiters</b>(<td> const CATISpecObject_var&amp; <td><tt>iElem1</tt>,<tr><td></td><td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>biInv1</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>iElem2</tt>,<tr><td></td><td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>biInv2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the elements relimiting the spine (or the default spine).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem1</tt>
   <dd>      First relimiting feature (plane or point)
   </dd>
    <dt><tt> biInv1</tt>
   <dd>      Split direction for the first relimitation<br>
      FALSE means that the beginning of the spine (considering its orientation) is removed, TRUE means that the end of the spine is removed
   </dd>
    <dt><tt> iElem2</tt>
   <dd>      Second relimiting feature (plane or point)
   </dd>
    <dt><tt> biInv2</tt>
   <dd>      Split direction for the second relimitation</dd>
</dl>
</dl>
</dl>
<a name="SetMode"></a><a name="SetMode(enum CATGSMLinearSweepCase)"></a> <dt> o <b>SetMode</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetMode</b>(<td> const enum CATGSMLinearSweepCase <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets linear sweep case number.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Case number
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMLinearSweepCase_86200.htm">CATGSMLinearSweepCase</a>
</dl>
</dl>
<a name="SetSecondLengthDefinitionType"></a><a name="SetSecondLengthDefinitionType(enum CATGSMLinearSweepLengthType,CATISpecObject_var&amp;)"></a> <dt> o <b>SetSecondLengthDefinitionType</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSecondLengthDefinitionType</b>(<td> const enum CATGSMLinearSweepLengthType <td><tt>iType</tt>,<tr><td></td><td> const CATISpecObject_var&amp; <td><tt>iElem</tt><td><tt>= NULL_var</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets second length definition for linear swept surfaces (for draft surfaces
 only, so far).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Length type</dd>
</dl>
</dl>
</dl>
<a name="SetSmoothActivity"></a><a name="SetSmoothActivity(CATBoolean)"></a> <dt> o <b>SetSmoothActivity</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSmoothActivity</b>(<td> const <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a> <td><tt>iSmooth</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets information whether sweeping operation is smoothed or not.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSmooth</tt>
   <dd>      TRUE or FALSE.</dd>
</dl>
</dl>
</dl>
<a name="SetSmoothAngleThreshold"></a><a name="SetSmoothAngleThreshold(CATICkeParm_var&amp;)"></a> <dt> o <b>SetSmoothAngleThreshold</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSmoothAngleThreshold</b>(<td> const CATICkeParm_var&amp; <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Angular literal feature.</dd>
</dl>
</dl>
</dl>
<a name="SetSmoothAngleThreshold"></a><a name="SetSmoothAngleThreshold(double)"></a> <dt> o <b>SetSmoothAngleThreshold</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSmoothAngleThreshold</b>(<td> const double <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets angular threshold under which discontinuities (moving frame,
 tangency net on reference surface) will be smoothed when sweeping.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Numerical value.</dd>
</dl>
</dl>
</dl>
<a name="SetSolutionNo"></a><a name="SetSolutionNo(int)"></a> <dt> o <b>SetSolutionNo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSolutionNo</b>(<td>int <td><tt>iSolNo</tt>)=0  </table></dt>
<dl>
  <dd>
 Sets the current solution number of the four possible solutions.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSolNo</tt>
   <dd> is the solution number.</dd>
</dl>
</dl>
</dl>
<a name="SetSpine"></a><a name="SetSpine(CATISpecObject_var)"></a> <dt> o <b>SetSpine</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetSpine</b>(<td> const <a href="../ObjectSpecsModeler/interface_CATISpecObject_38576.htm">CATISpecObject_var</a> <td><tt>iElem</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets the spine.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>      Spine feature</dd>
</dl>
</dl>
</dl>
<a name="SetTrimOption"></a><a name="SetTrimOption(enum CATGSMSweepTrimMode)"></a> <dt> o <b>SetTrimOption</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetTrimOption</b>(<td> const enum CATGSMSweepTrimMode <td><tt>iOption</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets trim option status for the first (or only) tangency surface.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOption</tt>
   <dd>      Trim option value
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMSweepTrimMode_70970.htm">CATGSMSweepTrimMode</a>
</dl>
</dl>
<a name="SetTrimOptions"></a><a name="SetTrimOptions(enum CATGSMSweepTrimMode,enum CATGSMSweepTrimMode)"></a> <dt> o <b>SetTrimOptions</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetTrimOptions</b>(<td> const enum CATGSMSweepTrimMode <td><tt>iOption1</tt>,<tr><td></td><td> const enum CATGSMSweepTrimMode <td><tt>iOption2</tt>) = 0  </table></dt>
<dl>
  <dd>
 Sets trim option statuses for both tangency surfaces.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOption1</tt>
   <dd>      Trim option value for the first tangency surface
   </dd>
    <dt><tt> iOption2</tt>
   <dd>      Trim option value for the second tangency surface
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../GSMInterfaces/enum_CATGSMSweepTrimMode_70970.htm">CATGSMSweepTrimMode</a>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIGSMSweepSegment.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGitInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
