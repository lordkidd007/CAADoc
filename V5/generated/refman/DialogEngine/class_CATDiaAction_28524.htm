<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DialogEngine Class CATDiaAction</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../DialogEngine.htm">This Framework</a>  <a href="class_CATCustomizableTransition_132793.htm">Previous</a>  <a href="class_CATDiaError_24314.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>DialogEngine Class CATDiaAction</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATDiaAction
 </pre>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATDiaAction</b>
</p>
<p>
<b><i> Base class to create a command action.</i></b><br>

 <b>Role</b>: An action is a task without interaction with the end user.
 An action may be
 <ul>
 <li>linked to a transition. In this case, the action is executed when the
  transition fires. </li>
 <li>a state entry action. In this case, the action is executed when 
 entering the state. </li>
 <li>a state exit action. In this case, the action is executed when 
 leaving the state. </li>
 </ul>
 Moreover, a <tt>CATDiaAction</tt> object manages the action undo/redo. 
 But, it must only undo/redo not transactional objects, that is to say 
 the objects which don't belong to a model which implements the 
 CATIUndoTransaction interface, because such a model undoes and redoes 
 its objects itself.
 <br>To create an action, you can derive this class and override the methods:
 <ul>
 <li><a href="#Do">Do</a> </li> <li>
<a href="#BeforeUndo">BeforeUndo</a> </li> <li>
<a href="#AfterUndo">AfterUndo</a> </li> <li>
<a href="#BeforeRedo">BeforeRedo</a> </li> <li>
<a href="#AfterRedo">AfterRedo</a> </li> </ul>
 or use the 
<a href="../DialogEngine/class_CATStateCommand_45648.htm#Action">CATStateCommand.Action</a> method and give as arguments  the addresses of methods to execute the action.  
 <br>Actions must be created in the 
<a href="../DialogEngine/class_CATStateCommand_45648.htm#BuildGraph">CATStateCommand.BuildGraph</a> method. 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../DialogEngine/class_CATDialogState_39676.htm">CATDialogState</a>, <a href="../DialogEngine/class_CATDialogTransition_75627.htm">CATDialogTransition</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATDiaAction(CATString&amp;)"><b>CATDiaAction</b></a>(CATString&amp;)
<dd>  Constructs an action.
 <dt> o 
    <a href="#~CATDiaAction()"><b>~CATDiaAction</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AfterRedo(void*)"><b>AfterRedo</b></a>(void*)
<dd>  Redoes the action effects after the transactional redo.
 <dt> o 
    <a href="#AfterUndo(void*)"><b>AfterUndo</b></a>(void*)
<dd>  Undoes the action effects after the transactional undo.
 <dt> o 
    <a href="#BeforeRedo(void*)"><b>BeforeRedo</b></a>(void*)
<dd>  Redoes the action effects before the transactional redo.
 <dt> o 
    <a href="#BeforeUndo(void*)"><b>BeforeUndo</b></a>(void*)
<dd>  Undoes the action effects before the transactional undo.
 <dt> o 
    <a href="#Do(void*)"><b>Do</b></a>(void*)
<dd>  Executes the action.
 <dt> o 
    <a href="#SetAfterRedoMethod(ActionMethod)"><b>SetAfterRedoMethod</b></a>(ActionMethod)
<dd>  Sets the method to redo the action after the transactional redo.
 <dt> o 
    <a href="#SetAfterUndoMethod(ActionMethod)"><b>SetAfterUndoMethod</b></a>(ActionMethod)
<dd>  Sets the method to undo the action after the transactional undo.
 <dt> o 
    <a href="#SetBeforeRedoMethod(ActionMethod)"><b>SetBeforeRedoMethod</b></a>(ActionMethod)
<dd>  Sets the method to redo the action before the transactional redo.
 <dt> o 
    <a href="#SetBeforeUndoMethod(ActionMethod)"><b>SetBeforeUndoMethod</b></a>(ActionMethod)
<dd>  Sets the method to undo the action before the transactional undo.
 <dt> o 
    <a href="#SetData(void*)"><b>SetData</b></a>(void*)
<dd>  Sets data which may be useful to execute or undo/redo the action.
 <dt> o 
    <a href="#SetExecuteMethod(ActionMethod)"><b>SetExecuteMethod</b></a>(ActionMethod)
<dd>  Sets the method to execute the action.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATDiaAction"></a><a name="CATDiaAction(CATString&amp;)"></a> <dt> o <b>CATDiaAction</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATDiaAction</b>(<td> const <a href="../System/class_CATString_16797.htm">CATString&amp;</a> <td><tt>iName</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs an action.
 <br><b>Role</b>: Use it only when deriving the <tt>CATDiaAction</tt> 
 class, otherwise use the 
<a href="../DialogEngine/class_CATStateCommand_45648.htm#Action">CATStateCommand.Action</a> method to create an action.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>   The name of the action. May be useful for debug.</dd>
</dl>
</dl>
</dl>
<a name="~CATDiaAction"></a><a name="~CATDiaAction()"></a> <dt> o <b>~CATDiaAction</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATDiaAction</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AfterRedo"></a><a name="AfterRedo(void*)"></a> <dt> o <b>AfterRedo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>AfterRedo</b>(<td>void* <td><tt>iData</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Redoes the action effects after the transactional redo.
 <br><b>Role</b>: Redefine this method when deriving <tt>CATDiaAction</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   The data specified by the </dd>
<a href="#SetData">SetData</a> method. 
  <dt> <b>Returns:</b> 
  <dd>     The CATBoolean value used to combine actions.
   In an OrAction, the second action is executed only if the first
   action returns TRUE.
</dl>
</dl>
</dl>
<a name="AfterUndo"></a><a name="AfterUndo(void*)"></a> <dt> o <b>AfterUndo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>AfterUndo</b>(<td>void* <td><tt>iData</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Undoes the action effects after the transactional undo.
 <br><b>Role</b>: Redefine this method when deriving <tt>CATDiaAction</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   The data specified by the </dd>
<a href="#SetData">SetData</a> method. 
  <dt> <b>Returns:</b> 
  <dd>     The CATBoolean value used to combine actions.
   In an OrAction, the second action is executed only if the first
   action returns TRUE.
</dl>
</dl>
</dl>
<a name="BeforeRedo"></a><a name="BeforeRedo(void*)"></a> <dt> o <b>BeforeRedo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>BeforeRedo</b>(<td>void* <td><tt>iData</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Redoes the action effects before the transactional redo.
 <br><b>Role</b>: Redefine this method when deriving <tt>CATDiaAction</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   The data specified by the </dd>
<a href="#SetData">SetData</a> method. 
  <dt> <b>Returns:</b> 
  <dd>     The CATBoolean value used to combine actions.
   In an OrAction, the second action is executed only if the first
   action returns TRUE.
</dl>
</dl>
</dl>
<a name="BeforeUndo"></a><a name="BeforeUndo(void*)"></a> <dt> o <b>BeforeUndo</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>BeforeUndo</b>(<td>void* <td><tt>iData</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Undoes the action effects before the transactional undo.
 <br><b>Role</b>: Redefine this method when deriving <tt>CATDiaAction</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   The data specified by the </dd>
<a href="#SetData">SetData</a> method. 
  <dt> <b>Returns:</b> 
  <dd>     The CATBoolean value used to combine actions.
   In an OrAction, if the second action is executed only if the first
   action returns TRUE.
</dl>
</dl>
</dl>
<a name="Do"></a><a name="Do(void*)"></a> <dt> o <b>Do</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>Do</b>(<td>void* <td><tt>iData</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Executes the action.
 <br><b>Role</b>: Redefine this method when deriving <tt>CATDiaAction</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   The data specified by the </dd>
<a href="#SetData">SetData</a> method. 
  <dt> <b>Returns:</b> 
  <dd>     The CATBoolean value used to combine actions.
   In an OrAction, the second action is executed only if the first
   action returns TRUE.
</dl>
</dl>
</dl>
<a name="SetAfterRedoMethod"></a><a name="SetAfterRedoMethod(ActionMethod)"></a> <dt> o <b>SetAfterRedoMethod</b>

<dt>  <table><tr><td>  public virtual void  <b>SetAfterRedoMethod</b>(<td><a href="../DialogEngine/typedef_ActionMethod_30776.htm">ActionMethod</a> <td><tt>iMeth</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the method to redo the action after the transactional redo.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetAfterRedoMethod</tt> if you derive the 
 <tt>CATDiaAction</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which redoes the action.</dd>
</dl>
</dl>
</dl>
<a name="SetAfterUndoMethod"></a><a name="SetAfterUndoMethod(ActionMethod)"></a> <dt> o <b>SetAfterUndoMethod</b>

<dt>  <table><tr><td>  public virtual void  <b>SetAfterUndoMethod</b>(<td><a href="../DialogEngine/typedef_ActionMethod_30776.htm">ActionMethod</a> <td><tt>iMeth</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the method to undo the action after the transactional undo.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetAfterUndoMethod</tt> if you derive the 
 <tt>CATDiaAction</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which undoes the action.</dd>
</dl>
</dl>
</dl>
<a name="SetBeforeRedoMethod"></a><a name="SetBeforeRedoMethod(ActionMethod)"></a> <dt> o <b>SetBeforeRedoMethod</b>

<dt>  <table><tr><td>  public virtual void  <b>SetBeforeRedoMethod</b>(<td><a href="../DialogEngine/typedef_ActionMethod_30776.htm">ActionMethod</a> <td><tt>iMeth</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the method to redo the action before the transactional redo.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetBeforeRedoMethod</tt> if you derive the 
 <tt>CATDiaAction</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which redoes the action.</dd>
</dl>
</dl>
</dl>
<a name="SetBeforeUndoMethod"></a><a name="SetBeforeUndoMethod(ActionMethod)"></a> <dt> o <b>SetBeforeUndoMethod</b>

<dt>  <table><tr><td>  public virtual void  <b>SetBeforeUndoMethod</b>(<td><a href="../DialogEngine/typedef_ActionMethod_30776.htm">ActionMethod</a> <td><tt>iMeth</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the method to undo the action before the transactional undo.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetBeforeUndoMethod</tt> if you derive the 
 <tt>CATDiaAction</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which undoes the action.</dd>
</dl>
</dl>
</dl>
<a name="SetData"></a><a name="SetData(void*)"></a> <dt> o <b>SetData</b>

<dt>  <table><tr><td>  public virtual void  <b>SetData</b>(<td>void* <td><tt>iData</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets data which may be useful to execute or undo/redo the action.
 <br><b>Role</b>: This data will be given as the argument of the 
 <tt>ActionMethod</tt> methods.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   An object that can be useful for the action.
   <br><b>Warning</b>: A copy of <tt>iData</tt> is kept. 
   Deallocate this object only at the end of the command.</dd>
</dl>
</dl>
</dl>
<a name="SetExecuteMethod"></a><a name="SetExecuteMethod(ActionMethod)"></a> <dt> o <b>SetExecuteMethod</b>

<dt>  <table><tr><td>  public virtual void  <b>SetExecuteMethod</b>(<td><a href="../DialogEngine/typedef_ActionMethod_30776.htm">ActionMethod</a> <td><tt>iMeth</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the method to execute the action.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetExecuteMethod</tt> if you derive the 
 <tt>CATDiaAction</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which does the action.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATDiaAction.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDialogEngine</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
