<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricObjects Interface CATEdgeCurve</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GeometricObjects.htm">This Framework</a>  <a href="interface_CATCylinder_24960.htm">Previous</a>  <a href="interface_CATElementarySurface_82944.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GeometricObjects Interface CATEdgeCurve</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../GeometricObjects/interface_CATICGMUnknown_38404.htm">GeometricObjects.CATICGMUnknown</a>
        |
        +---<a href="../GeometricObjects/interface_CATICGMObject_31183.htm">GeometricObjects.CATICGMObject</a>
          |
          +---<a href="../GeometricObjects/interface_CATGeometry_25640.htm">GeometricObjects.CATGeometry</a>
            |
            +---<a href="../GeometricObjects/interface_CATCurve_13104.htm">GeometricObjects.CATCurve</a>
              |
              +---CATEdgeCurve
 </pre>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATEdgeCurve</b>
</p>
<p>
<b><i> Interface defining a curve representing several other curves.</i></b><br>

 <b>Role</b>: A CATEdgeCurve is the geometry of a topological edge. As an edge can
 bound several faces (with different geometry), 
 a CATEdgeCurve is a curve that presents a common behavior for
 several curves. 
 <br>The aggregation of the CATPCurves resulting of an intersection 
 leads to a CATIntCurve, the aggregation of identical CATCurves 
 leads to a CATSimCurve and the aggregation of CATCurves with different limits 
 or parameterizations leads to a 
 CATMergedCurve. To create a CATMergedCurve, use the <a href="../GeometricOperators/class_CATEdgeCurveComputation_110487.htm">CATEdgeCurveComputation</a> operator.<br>The aggregation is a recursive notion, and you can aggregate
 CATEdgeCurves.
<br>One aggregated curve plays a special role: its manages the evaluations and is called the reference curve.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Compare(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;,CATPositiveLength*)"><b>Compare</b></a>(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;,CATPositiveLength*)
<dd>  Checks whether points can be merged within the same CATPointOnEdgeCurve.
 <dt> o 
    <a href="#GetEquivalentParam(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;)"><b>GetEquivalentParam</b></a>(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;)
<dd>  Returns the parameter on <tt>this</tt> EdgeCurve corresponding to the point defined by
 parameters on its components.
 <dt> o 
    <a href="#GetEquivalentPoint(CATCrvParam&amp;,CATCurve*,CATCurve*,CATCrvParam&amp;,short)"><b>GetEquivalentPoint</b></a>(CATCrvParam&amp;,CATCurve*,CATCurve*,CATCrvParam&amp;,short)
<dd>   Reports a point from a curve to another one.
 <dt> o 
    <a href="#GetMaxGap()"><b>GetMaxGap</b></a>()
<dd>  Returns a length larger than the distance between any couple of corresponding evaluated 
 points on all subcurves.
 <dt> o 
    <a href="#GetRefCurve()"><b>GetRefCurve</b></a>()
<dd>  Returns the reference curve of <tt>this</tt> CATEdgeCurve.
 <dt> o 
    <a href="#GetRelativeOrientation(CATCurve*)"><b>GetRelativeOrientation</b></a>(CATCurve*)
<dd>  Retrieves the parametric orientation of a CATCurve with regards to the 
 orientation of <tt>this</tt> CATEdgeCurve.
 <dt> o 
    <a href="#GetSharpness(CATPCurve*,CATPCurve*,CATGeoContinuity*,CATGeoConvexity*)"><b>GetSharpness</b></a>(CATPCurve*,CATPCurve*,CATGeoContinuity*,CATGeoConvexity*)
<dd>  Retrieves the sharpness between the underlying surfaces of two CATPCurves.
 <dt> o 
    <a href="#Next(CATCurve*)"><b>Next</b></a>(CATCurve*)
<dd>  Scans the CATCurves represented by <tt>this</tt> CATEdgeCurve.
 <dt> o 
    <a href="#NextThru(CATCurve*)"><b>NextThru</b></a>(CATCurve*)
<dd>  
 <dt> o 
    <a href="#SetSharpness(CATPCurve*,CATPCurve*,CATGeoContinuity,CATGeoConvexity)"><b>SetSharpness</b></a>(CATPCurve*,CATPCurve*,CATGeoContinuity,CATGeoConvexity)
<dd>  Imposes the sharpness between the underlying surfaces of two CATPCurves.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATCompareDiagnostic"><b>CATCompareDiagnostic</b></a>
<dd>  The confusion diagnosis of a point on an CATEdgeCurve.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Compare"></a><a name="Compare(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;,CATPositiveLength*)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public virtual CATEdgeCurve::CATCompareDiagnostic  <b>Compare</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iNbOfCurves</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*[]</a> <td><tt>iCurves</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam[]</a> <td><tt>iParams</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>ioSuggestedParam</tt>,<tr><td></td><td><a href="../Mathematics/typedef_CATPositiveLength_60203.htm">CATPositiveLength*</a> <td><tt>ioGap</tt><td><tt>= NULL</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Checks whether points can be merged within the same CATPointOnEdgeCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNbOfCurves</tt>
   <dd> The number of CATCurves.
 </dd>
    <dt><tt> iCurves[]</tt>
   <dd> The array of <tt>iNbOfCurves</tt> CATCurve pointers.
 </dd>
    <dt><tt> iParams[]</tt>
   <dd> The corresponding parameters of the points to merge.
 </dd>
    <dt><tt> ioSuggestedParam</tt>
   <dd> The parameter of the corresponding point on <tt>this</tt> CATEdgeCurve.
 </dd>
    <dt><tt> ioGap</tt>
   <dd> The maximum distance between the points. If <tt>NULL</tt>, this distance is not output.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of confusion.
</dl>
</dl>
<a name="GetEquivalentParam"></a><a name="GetEquivalentParam(CATLONG32,CATCurve*[],CATCrvParam[],CATCrvParam&amp;)"></a> <dt> o <b>GetEquivalentParam</b>

<dt>  <table><tr><td>  public virtual void  <b>GetEquivalentParam</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iNbOfCurves</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*[]</a> <td><tt>iCurves</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam[]</a> <td><tt>iParams</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>ioCalcParam</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Returns the parameter on <tt>this</tt> EdgeCurve corresponding to the point defined by
 parameters on its components.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNbOfCurves</tt>
   <dd> The number of CATCurves.
 </dd>
    <dt><tt> iCurves[]</tt>
   <dd> The array of <tt>iNbOfCurves</tt> CATCurve pointers.
 </dd>
    <dt><tt> iParams[]</tt>
   <dd> The corresponding parameters on the CATCurves.
 </dd>
    <dt><tt> ioCalcParam</tt>
   <dd> The parameter of the point on <tt>this</tt> CATEdgeCurve.</dd>
</dl>
</dl>
</dl>
<a name="GetEquivalentPoint"></a><a name="GetEquivalentPoint(CATCrvParam&amp;,CATCurve*,CATCurve*,CATCrvParam&amp;,short)"></a> <dt> o <b>GetEquivalentPoint</b>

<dt>  <table><tr><td>  public virtual void  <b>GetEquivalentPoint</b>(<td> const <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>iParamOnCurrentCurve</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iCurrentCurveOrEdgeCurve</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iEquivalentCurve</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>ioParamOnEquivalentCurve</tt>,<tr><td></td><td>short <td><tt>iConverge</tt><td><tt>=1</tt>) const = 0   </table></dt>
<dl>
  <dd>
  Reports a point from a curve to another one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParamOnCurrentCurve</tt>
   <dd> The parameter on <tt>iCurrentCurveOrEdgeCurve</tt>.
 </dd>
    <dt><tt> iCurrentCurveOrEdgeCurve</tt>
   <dd> The initial CATCurve.
 </dd>
    <dt><tt> iEquivalentCurve</tt>
   <dd> The CATCurve on which the point is to be expressed.
 </dd>
    <dt><tt> ioParamOnEquivalentCurve</tt>
   <dd> The equivalent parameter on <tt>iEquivalentCurve</tt>.
 </dd>
    <dt><tt> iConverge</tt>
   <dd> The type of computation.
 <br><b>Legal values</b>:
 <dl><dt>1</dt><dd>An exact computation.
 <dt>0</dt><dd>An approximated (and faster) computation.</dl></dd>
</dl>
</dl>
</dl>
<a name="GetMaxGap"></a><a name="GetMaxGap()"></a> <dt> o <b>GetMaxGap</b>

<dt>  <table><tr><td>  public virtual <a href="../Mathematics/typedef_CATPositiveLength_60203.htm">CATPositiveLength</a>  <b>GetMaxGap</b>(<td>)const = 0   </table></dt>
<dl>
  <dd>
 Returns a length larger than the distance between any couple of corresponding evaluated 
 points on all subcurves.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The gap between the curves.
 If the gap is 0., 
<a href="../GeometricObjects/interface_CATCurve_13104.htm#EvalPoint">CATCurve.EvalPoint</a> returns the same value whatever the subcurve  it applies to.
 The gap of an CATIntCurve is always 0., because the evaluators always return an exact value in this case.
 However, the equation of a CATIntCurve may not return an exact solution.
</dl>
</dl>
<a name="GetRefCurve"></a><a name="GetRefCurve()"></a> <dt> o <b>GetRefCurve</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a>  <b>GetRefCurve</b>(<td>)const = 0  </table></dt>
<dl>
  <dd>
 Returns the reference curve of <tt>this</tt> CATEdgeCurve.
 <br> The reference curve manages the evaluations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A pointer to the curve of <tt>this</tt> CATEdgeCurve.
</dl>
</dl>
<a name="GetRelativeOrientation"></a><a name="GetRelativeOrientation(CATCurve*)"></a> <dt> o <b>GetRelativeOrientation</b>

<dt>  <table><tr><td>  public virtual short  <b>GetRelativeOrientation</b>(<td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iCurrentCurve</tt>)const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the parametric orientation of a CATCurve with regards to the 
 orientation of <tt>this</tt> CATEdgeCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurrentCurve</tt>
   <dd> A pointer to a curve of <tt>this</tt> CATEdgeCurve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The relative orientation
<dl> <dt> 1 <dd> <tt>this</tt> and <tt>iCurrentCurve</tt> have the same orientation.
     <dt> -1 <dd> <tt>this</tt> and <tt>iCurrentCurve</tt> have an opposite orientation.</dl>
</dl>
</dl>
<a name="GetSharpness"></a><a name="GetSharpness(CATPCurve*,CATPCurve*,CATGeoContinuity*,CATGeoConvexity*)"></a> <dt> o <b>GetSharpness</b>

<dt>  <table><tr><td>  public virtual short  <b>GetSharpness</b>(<td> const <a href="../GeometricObjects/interface_CATPCurve_16231.htm">CATPCurve*</a> <td><tt>iC1</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATPCurve_16231.htm">CATPCurve*</a> <td><tt>iC2</tt>,<tr><td></td><td><a href="../GeometricObjects/define_CATGeoContinuity_54338.htm">CATGeoContinuity*</a> <td><tt>ioContinuity</tt>,<tr><td></td><td><a href="../GeometricObjects/define_CATGeoConvexity_47592.htm">CATGeoConvexity*</a> <td><tt>ioConvexity</tt><td><tt>=0</tt>) const = 0  </table></dt>
<dl>
  <dd>
 Retrieves the sharpness between the underlying surfaces of two CATPCurves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iC1</tt>
   <dd> A pointer to the first CATPCurve.
 </dd>
    <dt><tt> iC2</tt>
   <dd> A pointer to the second CATPCurve. 
 </dd>
    <dt><tt> ioContinuity</tt>
   <dd> The tangential continuity.
 </dd>
    <dt><tt> ioConvexity</tt>
   <dd> The tangential convexity. If <tt>NULL</tt>, this argument is not written.</dd>
</dl>
</dl>
</dl>
<a name="Next"></a><a name="Next(CATCurve*)"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATCurve_13104.htm">const CATCurve*</a>  <b>Next</b>(<td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iCurrentSubElement</tt>)const = 0   </table></dt>
<dl>
  <dd>
 Scans the CATCurves represented by <tt>this</tt> CATEdgeCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurrentSubElement</tt>
   <dd> The pointer to the CATCurve from which the search is initialized, may
 be <tt>NULL</tt> for retrieving the first CATCurve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the next CATCurve of the aggregation. Remember that a 
 CATEdgeCurve is also a CATCurve.
<br><b>Sample</b>: Search of all CATCurves of a CATEdgeCurve.
<pre> 
 const CATCurve * Current=NULL
 while (Current = MyEdgeCurve->Next(Current) ) 
  { ... process Current ... }
</pre>
</dl>
</dl>
<a name="NextThru"></a><a name="NextThru(CATCurve*)"></a> <dt> o <b>NextThru</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATCurve_13104.htm">const CATCurve*</a>  <b>NextThru</b>(<td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iCurrentSubElement</tt>)const = 0   </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R12 CATEdgeCurveIterator
 Recursively scans the CATCurves of <tt>this</tt> CATEdgeCurve, without returning
 the imbedded CATEdgeCurves.
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurrentSubElement</tt>
   <dd> The pointer to the CATCurve from which the search is initialized, may
 be <tt>NULL</tt> for retrieving the first CATCurve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the next CATCurve (not being a CATEdgeCurve) of the aggregation.
</dl>
</dl>
<a name="SetSharpness"></a><a name="SetSharpness(CATPCurve*,CATPCurve*,CATGeoContinuity,CATGeoConvexity)"></a> <dt> o <b>SetSharpness</b>

<dt>  <table><tr><td>  public virtual void  <b>SetSharpness</b>(<td> const <a href="../GeometricObjects/interface_CATPCurve_16231.htm">CATPCurve*</a> <td><tt>iC1</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATPCurve_16231.htm">CATPCurve*</a> <td><tt>iC2</tt>,<tr><td></td><td> const <a href="../GeometricObjects/define_CATGeoContinuity_54338.htm">CATGeoContinuity</a> <td><tt>iContinuity</tt>,<tr><td></td><td> const <a href="../GeometricObjects/define_CATGeoConvexity_47592.htm">CATGeoConvexity</a> <td><tt>iConvexity</tt><td><tt>= CATUnknownConvexity</tt>) = 0  </table></dt>
<dl>
  <dd>
 Imposes the sharpness between the underlying surfaces of two CATPCurves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iC1</tt>
   <dd> A pointer to the first CATPCurve.
 </dd>
    <dt><tt> iC2</tt>
   <dd> A pointer to the second CATPCurve. 
 </dd>
    <dt><tt> iContinuity</tt>
   <dd> The tangential continuity to impose.
 </dd>
    <dt><tt> iConvexity</tt>
   <dd> The tangential convexity to impose.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATCompareDiagnostic"> <dt> o <b>CATCompareDiagnostic</b>
<dl>
  <dd>
<pre>
enum <b>CATCompareDiagnostic</b> {
  Equal,
  Similar,
  Distinct
}
</pre>
 The confusion diagnosis of a point on an CATEdgeCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Equal</tt>
   <dd> Same geometrical points with same parameter.
 </dd>
    <dt><tt> Similar</tt>
   <dd>  Same geometrical points with different parameters.
 </dd>
    <dt><tt> Distinct</tt>
   <dd> Distinct geometrical points.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATEdgeCurve.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricObjects</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
