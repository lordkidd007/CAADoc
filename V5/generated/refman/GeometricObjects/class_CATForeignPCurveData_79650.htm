<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricObjects Class CATForeignPCurveData</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GeometricObjects.htm">This Framework</a>  <a href="class_CATForeignGeometryData_98930.htm">Previous</a>  <a href="class_CATForeignSurfaceData_88339.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GeometricObjects Class CATForeignPCurveData</h1>
<pre>
<a href="../Mathematics/class_CATCGMVirtual_33296.htm">Mathematics.CATCGMVirtual</a>
  |
  +---<a href="../GeometricObjects/class_CATCGMAttribute_44869.htm">GeometricObjects.CATCGMAttribute</a>
    |
    +---<a href="../GeometricObjects/class_CATCGMStreamAttribute_89379.htm">GeometricObjects.CATCGMStreamAttribute</a>
      |
      +---<a href="../GeometricObjects/class_CATForeignGeometryData_98930.htm">GeometricObjects.CATForeignGeometryData</a>
        |
        +---CATForeignPCurveData
 </pre>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATForeignPCurveData</b>
</p>
<p>
<b><i> Base class of the attributes defining the data of a foreign Pcurve.</i></b><br>

<br>A foreign Pcurve is introduced into CGM by filling the CATIForeignPCurve object data
 with a CATForeignPCurveData. Then, it is automatically integrated into CGM, and
 can be used as any CATPCurve by the operators and the topology.
 To create your own curve type, you have to derive the CATForeignPCurveData
 class, and re-write the methods that are associated with.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATForeignPCurveData()"><b>CATForeignPCurveData</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#~CATForeignPCurveData()"><b>~CATForeignPCurveData</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ApplyTransformation2D(CATMathTransformation2D&amp;,CATMathTransformation1D*)"><b>ApplyTransformation2D</b></a>(CATMathTransformation2D&amp;,CATMathTransformation1D*)
<dd>  Transforms <tt>this</tt> CATForeignPCurve with a tranformation in the space of the surface.
 <dt> o 
    <a href="#CloneAndMove3D(CATTransfoManager&amp;)"><b>CloneAndMove3D</b></a>(CATTransfoManager&amp;)
<dd>   Constructs a geometrically transformed copy of <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#CreateLocalPEquation(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)"><b>CreateLocalPEquation</b></a>(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)
<dd>  Retrieves the mathematical equation associated with an arc of
 a CATIForeignPCurve on the space of the surface.
 <dt> o 
    <a href="#EvalUV(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATSurParam*,CATMathVector2D*,CATMathVector2D*,CATMathVector2D*)"><b>EvalUV</b></a>(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATSurParam*,CATMathVector2D*,CATMathVector2D*,CATMathVector2D*)
<dd>  Retrieves the multi-evaluation of <tt>this</tt> CATIForeignPCurve point on the underlying CATSurface.
 <dt> o 
    <a href="#GetInternalLimits(CATLONG32,CATCrvLimits&amp;)"><b>GetInternalLimits</b></a>(CATLONG32,CATCrvLimits&amp;)
<dd>  Retrieves the limitations of an arc of a CATIForeignPCurve.
 <dt> o 
    <a href="#GetInternalMaxLimits(CATLONG32,CATCrvLimits&amp;)"><b>GetInternalMaxLimits</b></a>(CATLONG32,CATCrvLimits&amp;)
<dd>  Retrieves the limitations of an arc of a CATIForeignPCurve.
 <dt> o 
    <a href="#GetKnotVector()"><b>GetKnotVector</b></a>()
<dd>  Retrieves the knot vector associated with a CATIForeignPCurve.
 <dt> o 
    <a href="#GetLimits(CATCrvLimits&amp;)"><b>GetLimits</b></a>(CATCrvLimits&amp;)
<dd>  Retrieves the limitations of a CATIForeignPCurve.
 <dt> o 
    <a href="#GetMaxLimits(CATCrvLimits&amp;)"><b>GetMaxLimits</b></a>(CATCrvLimits&amp;)
<dd>  Retrieves the maximum limitations of a CATIForeignPCurve.
 <dt> o 
    <a href="#IsConfused(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)"><b>IsConfused</b></a>(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)
<dd>  Tests whether a CATIForeignPCurve is confused with another curve for a given transformation.
 <dt> o 
    <a href="#IsInvariant(CATMathTransformation&amp;,CATMathTransformation1D*)"><b>IsInvariant</b></a>(CATMathTransformation&amp;,CATMathTransformation1D*)
<dd>  Tests whether a CATIForeignPCurve is invariant for a given CATMathTransformation.
 <dt> o 
    <a href="#IsPeriodic()"><b>IsPeriodic</b></a>()
<dd>  Tests whether a CATIForeignPCurve is periodic.
 <dt> o 
    <a href="#Move3D(CATTransfoManager&amp;)"><b>Move3D</b></a>(CATTransfoManager&amp;)
<dd>  Applies a geometrical transformation to <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#SetLimits(CATCrvLimits&amp;)"><b>SetLimits</b></a>(CATCrvLimits&amp;)
<dd>  Modifies the limitations of a CATIForeignPCurve.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATForeignPCurveData"></a><a name="CATForeignPCurveData()"></a> <dt> o <b>CATForeignPCurveData</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATForeignPCurveData</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="~CATForeignPCurveData"></a><a name="~CATForeignPCurveData()"></a> <dt> o <b>~CATForeignPCurveData</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATForeignPCurveData</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="ApplyTransformation2D"></a><a name="ApplyTransformation2D(CATMathTransformation2D&amp;,CATMathTransformation1D*)"></a> <dt> o <b>ApplyTransformation2D</b>

<dt>  <table><tr><td>  public virtual void  <b>ApplyTransformation2D</b>(<td> const <a href="../Mathematics/class_CATMathTransformation2D_105497.htm">CATMathTransformation2D&amp;</a> <td><tt>iTransfo2D</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathTransformation1D_105430.htm">CATMathTransformation1D*</a> <td><tt>oTransfo1D</tt><td><tt>= NULL</tt>)=0  </table></dt>
<dl>
  <dd>
 Transforms <tt>this</tt> CATForeignPCurve with a tranformation in the space of the surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo2D</tt>
   <dd> The 2D transformation to apply.
 </dd>
    <dt><tt> oTransfo1D</tt>
   <dd> The mapping of parameter if the 2D transformation is reduced to a re-parameterization of the Pcurve.</dd>
</dl>
</dl>
</dl>
<a name="CloneAndMove3D"></a><a name="CloneAndMove3D(CATTransfoManager&amp;)"></a> <dt> o <b>CloneAndMove3D</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/interface_CATGeometry_25640.htm">CATGeometry*</a>  <b>CloneAndMove3D</b>(<td><a href="../GeometricObjects/class_CATTransfoManager_59122.htm">CATTransfoManager&amp;</a> <td><tt>iTransfo</tt>) const   </table></dt>
<dl>
  <dd>
  Constructs a geometrically transformed copy of <tt>this</tt> CATForeignGeometryData. 
 <br>Optional method. By default, copies , then transforms.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation process to be used.</dd>
</dl>
</dl>
</dl>
<a name="CreateLocalPEquation"></a><a name="CreateLocalPEquation(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)"></a> <dt> o <b>CreateLocalPEquation</b>

<dt>  <table><tr><td>  public virtual void  <b>CreateLocalPEquation</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iArcIndex</tt>,<tr><td></td><td> const <a href="../AdvancedMathematics/class_CATMathFunctionX_52250.htm">CATMathFunctionX*&amp;</a> <td><tt>oFx</tt>,<tr><td></td><td> const <a href="../AdvancedMathematics/class_CATMathFunctionX_52250.htm">CATMathFunctionX*&amp;</a> <td><tt>oFy</tt>) =0  </table></dt>
<dl>
  <dd>
 Retrieves the mathematical equation associated with an arc of
 a CATIForeignPCurve on the space of the surface.
 <br>The retrieved equations are created by the method, and must not be deleted,
 as part of the object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArcIndex</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> oFx</tt>
   <dd> The pointer to the equation of the first coordinate <tt>U=oFx(w)</tt>.
 </dd>
    <dt><tt> oFy</tt>
   <dd> The pointer to the equation of the second coordinate <tt>V=oFy(w)</tt>.</dd>
</dl>
</dl>
</dl>
<a name="EvalUV"></a><a name="EvalUV(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATSurParam*,CATMathVector2D*,CATMathVector2D*,CATMathVector2D*)"></a> <dt> o <b>EvalUV</b>

<dt>  <table><tr><td>  public virtual void  <b>EvalUV</b>(<td> const <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>iParam</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvEvalCommand_57974.htm">CATCrvEvalCommand&amp;</a> <td><tt>iCommand</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATSurParam_24459.htm">CATSurParam*</a> <td><tt>ioPoint</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector2D_42451.htm">CATMathVector2D*</a> <td><tt>ioFirstDeriv</tt><td><tt>= NULL</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector2D_42451.htm">CATMathVector2D*</a> <td><tt>ioSecondDeriv</tt><td><tt>= NULL</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathVector2D_42451.htm">CATMathVector2D*</a> <td><tt>ioThirdDeriv</tt><td><tt>= NULL</tt>) const  </table></dt>
<dl>
  <dd>
 Retrieves the multi-evaluation of <tt>this</tt> CATIForeignPCurve point on the underlying CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The parameter where to evaluate.
 </dd>
    <dt><tt> iCommand</tt>
   <dd> The type of evaluation. The corresponding output pointer must be allocated.
 </dd>
    <dt><tt> ioPoint</tt>
   <dd> The pointer to the resulting CATSurParam.
 </dd>
    <dt><tt> ioFirstDeriv</tt>
   <dd>  The pointer to the resulting first derivative.
 </dd>
    <dt><tt> ioSecondDeriv</tt>
   <dd>  The pointer to the resulting second derivative.
 </dd>
    <dt><tt> ioThirdDeriv</tt>
   <dd>  The pointer to the resulting third derivative.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalLimits"></a><a name="GetInternalLimits(CATLONG32,CATCrvLimits&amp;)"></a> <dt> o <b>GetInternalLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetInternalLimits</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iArc</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioInternalLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the limitations of an arc of a CATIForeignPCurve.
<br>This takes into account the current limitations of the
 curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArc</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> ioInternalLimits</tt>
   <dd> The corresponding limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalMaxLimits"></a><a name="GetInternalMaxLimits(CATLONG32,CATCrvLimits&amp;)"></a> <dt> o <b>GetInternalMaxLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetInternalMaxLimits</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iArc</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioInternalMaxLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the limitations of an arc of a CATIForeignPCurve.
<br>This does not take into account the current limitations of the
 curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArc</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> ioInternalMaxLimits</tt>
   <dd> The corresponding limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetKnotVector"></a><a name="GetKnotVector()"></a> <dt> o <b>GetKnotVector</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/class_CATKnotVector_35223.htm">const CATKnotVector *</a>  <b>GetKnotVector</b>(<td>)const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the knot vector associated with a CATIForeignPCurve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The knot vector.
</dl>
</dl>
<a name="GetLimits"></a><a name="GetLimits(CATCrvLimits&amp;)"></a> <dt> o <b>GetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetLimits</b>(<td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the limitations of a CATIForeignPCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioLimits</tt>
   <dd> The current limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetMaxLimits"></a><a name="GetMaxLimits(CATCrvLimits&amp;)"></a> <dt> o <b>GetMaxLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetMaxLimits</b>(<td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioMaxLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Retrieves the maximum limitations of a CATIForeignPCurve.
<br>This does not take into account the current limitations of the
 curve. This maximum
 limits can be the creation limits or the limits that are obtained by 
 extrapolation, depending on the types of geometric objects.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioMaxLimits</tt>
   <dd> The maximum limits.</dd>
</dl>
</dl>
</dl>
<a name="IsConfused"></a><a name="IsConfused(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)"></a> <dt> o <b>IsConfused</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsConfused</b>(<td> const <a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iTransfo</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iTCurve</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathTransformation1D_105430.htm">CATMathTransformation1D*</a> <td><tt>ioTransfo1D</tt>)const = 0   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignPCurve is confused with another curve for a given transformation.
<br>This method does not take into account the current limitations of 
 the curves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation.
 </dd>
    <dt><tt> ioTransfo1D</tt>
   <dd> The 1D-transformation defining the change of parameterization between the transformation of 
 the CATIForeignPCurve and <tt>iTCurve</tt>. If <tt>NULL</tt>, this argument is not set.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of the CATIForeignPCurve is geometrically the same as <tt>iTCurve</tt>.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsInvariant"></a><a name="IsInvariant(CATMathTransformation&amp;,CATMathTransformation1D*)"></a> <dt> o <b>IsInvariant</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsInvariant</b>(<td> const <a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iTransfo</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathTransformation1D_105430.htm">CATMathTransformation1D*</a> <td><tt>ioTransfo1D</tt><td><tt>= NULL</tt>) const   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignPCurve is invariant for a given CATMathTransformation.
<br>This method does not take into account the current limitations of 
 the curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation.
 </dd>
    <dt><tt> ioTransfo1D</tt>
   <dd> The 1D-transformation defining the change of parameterization between 
 the CATIForeignPCurve and the transformation of
 <tt>this</tt>. If <tt>NULL</tt>, this argument is not set.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of the CATIForeignPCurve is geometrically the same as itself.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsPeriodic"></a><a name="IsPeriodic()"></a> <dt> o <b>IsPeriodic</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsPeriodic</b>(<td>)const = 0   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignPCurve is periodic.
<br>This method does not take into account the current limitations of 
 the curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>0</tt> <dd>If the CATIForeignPCurve is not periodic.
     <dt><tt>1</tt> <dd>If the CATIForeignPCurve is periodic.  </dl>
</dl>
</dl>
<a name="Move3D"></a><a name="Move3D(CATTransfoManager&amp;)"></a> <dt> o <b>Move3D</b>

<dt>  <table><tr><td>  public virtual void  <b>Move3D</b>(<td><a href="../GeometricObjects/class_CATTransfoManager_59122.htm">CATTransfoManager&amp;</a> <td><tt>iTransfo</tt>)<a href="../DNBSystem/struct__0.htm"> </a>  </table></dt>
<dl>
  <dd>
 Applies a geometrical transformation to <tt>this</tt> CATForeignGeometryData. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation process to be used.</dd>
</dl>
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATCrvLimits&amp;)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLimits</b>(<td> const <a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>iLimits</tt>) = 0   </table></dt>
<dl>
  <dd>
 Modifies the limitations of a CATIForeignPCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits</tt>
   <dd> The new current limitations.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATForeignPCurveData.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricObjects</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
