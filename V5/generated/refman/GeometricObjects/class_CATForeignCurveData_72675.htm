<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricObjects Class CATForeignCurveData</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../GeometricObjects.htm">This Framework</a>  <a href="class_CATEdgeCurveIterator_82614.htm">Previous</a>  <a href="class_CATForeignGeometryData_98930.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>GeometricObjects Class CATForeignCurveData</h1>
<pre>
<a href="../Mathematics/class_CATCGMVirtual_33296.htm">Mathematics.CATCGMVirtual</a>
  |
  +---<a href="../GeometricObjects/class_CATCGMAttribute_44869.htm">GeometricObjects.CATCGMAttribute</a>
    |
    +---<a href="../GeometricObjects/class_CATCGMStreamAttribute_89379.htm">GeometricObjects.CATCGMStreamAttribute</a>
      |
      +---<a href="../GeometricObjects/class_CATForeignGeometryData_98930.htm">GeometricObjects.CATForeignGeometryData</a>
        |
        +---CATForeignCurveData
 </pre>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATForeignCurveData</b>
</p>
<p>
<b><i> Base class of the attributes defining the data of a foreign curve.</i></b><br>

<br>A foreign curve is introduced into CGM by filling the CATIForeignCurve object data
 with a CATForeignCurveData. Then, it is automatically integrated into CGM, and
 can be used as any CATCurve by the operators and the topology.
 To create your own curve type, you have to derive the CATForeignCurveData
 class, and re-write the methods that are associated with.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATForeignCurveData()"><b>CATForeignCurveData</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#~CATForeignCurveData()"><b>~CATForeignCurveData</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateLocalEquation(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)"><b>CreateLocalEquation</b></a>(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)
<dd>  Retrieves the mathematical equation associated with an arc of
 a CATIForeignCurve.
 <dt> o 
    <a href="#Eval(CATCrvLimits&amp;,CATLONG32,CATCrvEvalCommand&amp;,CATCrvEvalResult&amp;)"><b>Eval</b></a>(CATCrvLimits&amp;,CATLONG32,CATCrvEvalCommand&amp;,CATCrvEvalResult&amp;)
<dd>  Evaluates <tt>this</tt> CATCurve and its derivatives inside a domain.
 <dt> o 
    <a href="#Eval(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATCrvEvalLocal&amp;)"><b>Eval</b></a>(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATCrvEvalLocal&amp;)
<dd>  Evaluates a CATIForeignCurve and its derivatives.
 <dt> o 
    <a href="#GetInternalLimits(CATLONG32,CATCrvLimits&amp;)"><b>GetInternalLimits</b></a>(CATLONG32,CATCrvLimits&amp;)
<dd>  Returns the limitations of an arc of a CATIForeignCurve.
 <dt> o 
    <a href="#GetInternalMaxLimits(CATLONG32,CATCrvLimits&amp;)"><b>GetInternalMaxLimits</b></a>(CATLONG32,CATCrvLimits&amp;)
<dd>  Returns the limitations of an arc of a CATIForeignCurve.
 <dt> o 
    <a href="#GetKnotVector()"><b>GetKnotVector</b></a>()
<dd>  Returns the knot vector associated with a CATIForeignCurve.
 <dt> o 
    <a href="#GetLimits(CATCrvLimits&amp;)"><b>GetLimits</b></a>(CATCrvLimits&amp;)
<dd>  Returns the limitations of a CATIForeignCurve.
 <dt> o 
    <a href="#GetMathCurve()"><b>GetMathCurve</b></a>()
<dd>  Returns a pointer to the mathematical representation of <tt>this</tt> CATCurve.
 <dt> o 
    <a href="#GetMaxLimits(CATCrvLimits&amp;)"><b>GetMaxLimits</b></a>(CATCrvLimits&amp;)
<dd>  Returns the maximum limitations of a CATIForeignCurve.
 <dt> o 
    <a href="#GetParam(CATMathPoint&amp;,CATCrvParam&amp;)"><b>GetParam</b></a>(CATMathPoint&amp;,CATCrvParam&amp;)
<dd>  Retrieves the CATCrvParam on a CATIForeignCurve corresponding to a given CATMathPoint.
 <dt> o 
    <a href="#GetParam(CATMathPoint&amp;,CATCrvParam&amp;,CATCrvLimits&amp;)"><b>GetParam</b></a>(CATMathPoint&amp;,CATCrvParam&amp;,CATCrvLimits&amp;)
<dd>  Retrieves the CATCrvParam on a CATIForeignCurve corresponding to a CATMathPoint
 inside limitations.
 <dt> o 
    <a href="#HasMathCurve()"><b>HasMathCurve</b></a>()
<dd>  Tests whether a CATIForeignCurve has a mathematical representation.
 <dt> o 
    <a href="#IsConfused(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)"><b>IsConfused</b></a>(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)
<dd>  Tests whether a CATIForeignCurve is confused with another curve.
 <dt> o 
    <a href="#IsInvariant(CATMathTransformation&amp;,CATMathTransformation1D*)"><b>IsInvariant</b></a>(CATMathTransformation&amp;,CATMathTransformation1D*)
<dd>  Tests whether a CATIForeignCurve is invariant.
 <dt> o 
    <a href="#IsPeriodic()"><b>IsPeriodic</b></a>()
<dd>  Tests whether a CATIForeignCurve is periodic.
 <dt> o 
    <a href="#SetLimits(CATCrvLimits&amp;)"><b>SetLimits</b></a>(CATCrvLimits&amp;)
<dd>  Modifies the limitations of a CATIForeignCurve.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATForeignCurveData"></a><a name="CATForeignCurveData()"></a> <dt> o <b>CATForeignCurveData</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATForeignCurveData</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="~CATForeignCurveData"></a><a name="~CATForeignCurveData()"></a> <dt> o <b>~CATForeignCurveData</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATForeignCurveData</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateLocalEquation"></a><a name="CreateLocalEquation(CATLONG32,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;,CATMathFunctionX*&amp;)"></a> <dt> o <b>CreateLocalEquation</b>

<dt>  <table><tr><td>  public virtual void  <b>CreateLocalEquation</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iIndex</tt>,<tr><td></td><td> const <a href="../AdvancedMathematics/class_CATMathFunctionX_52250.htm">CATMathFunctionX*&amp;</a> <td><tt>oFx</tt>,<tr><td></td><td> const <a href="../AdvancedMathematics/class_CATMathFunctionX_52250.htm">CATMathFunctionX*&amp;</a> <td><tt>oFy</tt>,<tr><td></td><td> const <a href="../AdvancedMathematics/class_CATMathFunctionX_52250.htm">CATMathFunctionX*&amp;</a> <td><tt>oFz</tt>) = 0   </table></dt>
<dl>
  <dd>
 Retrieves the mathematical equation associated with an arc of
 a CATIForeignCurve.
 <br>The retrieved equations are created by the method, and must not be deleted,
 as part of the object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> oFx</tt>
   <dd> A pointer to the equation of the first coordinate <tt>X=oFx(w)</tt>.
 </dd>
    <dt><tt> oFy</tt>
   <dd> A pointer to the equation of the second coordinate <tt>Y=oFy(w)</tt>.
 </dd>
    <dt><tt> oFz</tt>
   <dd> A pointer to the equation of the third coordinate <tt>Z=oFy(w)</tt>.</dd>
</dl>
</dl>
</dl>
<a name="Eval"></a><a name="Eval(CATCrvLimits&amp;,CATLONG32,CATCrvEvalCommand&amp;,CATCrvEvalResult&amp;)"></a> <dt> o <b>Eval</b>

<dt>  <table><tr><td>  public virtual void  <b>Eval</b>(<td> const <a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>iDomainToEvaluate</tt>,<tr><td></td><td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iNbOfPoints</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvEvalCommand_57974.htm">CATCrvEvalCommand&amp;</a> <td><tt>iCommand</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvEvalResult_52932.htm">CATCrvEvalResult&amp;</a> <td><tt>ioResult</tt>) const   </table></dt>
<dl>
  <dd>
 Evaluates <tt>this</tt> CATCurve and its derivatives inside a domain.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDomainToEvaluate</tt>
   <dd> The limits inside which the domain is to be evaluated.
 </dd>
    <dt><tt> iNbOfPoints</tt>
   <dd> The number of equally spaced points of <tt>iDomainToEvaluate</tt>.
 </dd>
    <dt><tt> iCommand</tt>
   <dd> The type of evaluation.
 </dd>
    <dt><tt> ioResult.</tt>
   <dd> The object containing the results.</dd>
</dl>
</dl>
</dl>
<a name="Eval"></a><a name="Eval(CATCrvParam&amp;,CATCrvEvalCommand&amp;,CATCrvEvalLocal&amp;)"></a> <dt> o <b>Eval</b>

<dt>  <table><tr><td>  public virtual void  <b>Eval</b>(<td> const <a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>iPoint</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvEvalCommand_57974.htm">CATCrvEvalCommand&amp;</a> <td><tt>iCommand</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvEvalLocal_44586.htm">CATCrvEvalLocal&amp;</a> <td><tt>ioResult</tt>) const   </table></dt>
<dl>
  <dd>
 Evaluates a CATIForeignCurve and its derivatives.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The parameter of the point to evaluate.
 </dd>
    <dt><tt> iCommand</tt>
   <dd> The type of evaluation.
 </dd>
    <dt><tt> ioResult.</tt>
   <dd> The object containing the results.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalLimits"></a><a name="GetInternalLimits(CATLONG32,CATCrvLimits&amp;)"></a> <dt> o <b>GetInternalLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetInternalLimits</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iArc</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioInternalLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Returns the limitations of an arc of a CATIForeignCurve.
<br>This takes into account the current limitations of the
 curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArc</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> ioInternalMaxLimits</tt>
   <dd> The corresponding limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalMaxLimits"></a><a name="GetInternalMaxLimits(CATLONG32,CATCrvLimits&amp;)"></a> <dt> o <b>GetInternalMaxLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetInternalMaxLimits</b>(<td> const <a href="../SpecialAPI/typedef_CATLONG32_11531.htm">CATLONG32</a> <td><tt>iArc</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioInternalMaxLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Returns the limitations of an arc of a CATIForeignCurve.
<br>This does not take into account the current limitations of the
 curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArc</tt>
   <dd> The arc number.
 </dd>
    <dt><tt> ioInternalMaxLimits</tt>
   <dd> The corresponding limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetKnotVector"></a><a name="GetKnotVector()"></a> <dt> o <b>GetKnotVector</b>

<dt>  <table><tr><td>  public virtual <a href="../GeometricObjects/class_CATKnotVector_35223.htm">const CATKnotVector *</a>  <b>GetKnotVector</b>(<td>)const = 0   </table></dt>
<dl>
  <dd>
 Returns the knot vector associated with a CATIForeignCurve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The knot vector.
</dl>
</dl>
<a name="GetLimits"></a><a name="GetLimits(CATCrvLimits&amp;)"></a> <dt> o <b>GetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetLimits</b>(<td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioCurrentLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Returns the limitations of a CATIForeignCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCurrentLimits</tt>
   <dd> The current limitations.</dd>
</dl>
</dl>
</dl>
<a name="GetMathCurve"></a><a name="GetMathCurve()"></a> <dt> o <b>GetMathCurve</b>

<dt>  <table><tr><td>  public virtual <a href="../Mathematics/class_CATMathCurve_29334.htm">CATMathCurve*</a>  <b>GetMathCurve</b>(<td>)const   </table></dt>
<dl>
  <dd>
 Returns a pointer to the mathematical representation of <tt>this</tt> CATCurve.
<br> The CATMathCurve . 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The associated mathematical curve, that belongs to this CATCurve.If the
 mathematical representation does not exist, the method returns a
<tt>NULL</tt> pointer.
</dl>
</dl>
<a name="GetMaxLimits"></a><a name="GetMaxLimits(CATCrvLimits&amp;)"></a> <dt> o <b>GetMaxLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>GetMaxLimits</b>(<td><a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>ioMaxLimits</tt>) const = 0   </table></dt>
<dl>
  <dd>
 Returns the maximum limitations of a CATIForeignCurve.
<br>This does not take into account the current limitations of the
 curve. This maximum
 limits can be the creation limits or the limits that are obtained by 
 extrapolation, depending on the types of geometric objects.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioMaxLimits</tt>
   <dd> The maximum limits.</dd>
</dl>
</dl>
</dl>
<a name="GetParam"></a><a name="GetParam(CATMathPoint&amp;,CATCrvParam&amp;)"></a> <dt> o <b>GetParam</b>

<dt>  <table><tr><td>  public virtual CATCurve::CATSolutionDiagnostic  <b>GetParam</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iPoint</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>ioParam</tt>) const   </table></dt>
<dl>
  <dd>
 Retrieves the CATCrvParam on a CATIForeignCurve corresponding to a given CATMathPoint.
 <br>This transformation is only available
 on canonical objects such as planes, lines, conics.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint which coordinates are to be transformed as CATCrvParam.
 </dd>
    <dt><tt> ioParam</tt>
   <dd> The first corresponding CATCrvParam on the curve. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of the number of parameters that can be evaluated on this point.
</dl>
</dl>
<a name="GetParam"></a><a name="GetParam(CATMathPoint&amp;,CATCrvParam&amp;,CATCrvLimits&amp;)"></a> <dt> o <b>GetParam</b>

<dt>  <table><tr><td>  public virtual CATCurve::CATSolutionDiagnostic  <b>GetParam</b>(<td> const <a href="../Mathematics/class_CATMathPoint_29498.htm">CATMathPoint&amp;</a> <td><tt>iPoint</tt>,<tr><td></td><td><a href="../GeometricObjects/class_CATCrvParam_24184.htm">CATCrvParam&amp;</a> <td><tt>ioParam</tt>,<tr><td></td><td> const <a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>iInside</tt>)const   </table></dt>
<dl>
  <dd>
 Retrieves the CATCrvParam on a CATIForeignCurve corresponding to a CATMathPoint
 inside limitations.
<br>This transformation is only available
 on canonical objects such as lines and conics.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint whose coordinates are to be transformed as a CATCrvParam.
 </dd>
    <dt><tt> ioParam</tt>
   <dd> The first corresponding CATCrvParam on the curve.
 </dd>
    <dt><tt> iInside</tt>
   <dd> The CATCrvLimits to take into account for trimming the curve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of the number of parameters that can be evaluated on this point.
</dl>
</dl>
<a name="HasMathCurve"></a><a name="HasMathCurve()"></a> <dt> o <b>HasMathCurve</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>HasMathCurve</b>(<td>)const   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignCurve has a mathematical representation.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>1</tt> <dd>If a CATIForeignCurve has a mathematical representation.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsConfused"></a><a name="IsConfused(CATMathTransformation&amp;,CATCurve*,CATMathTransformation1D*)"></a> <dt> o <b>IsConfused</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsConfused</b>(<td> const <a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iTransfo</tt>,<tr><td></td><td> const <a href="../GeometricObjects/interface_CATCurve_13104.htm">CATCurve*</a> <td><tt>iTCurve</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathTransformation1D_105430.htm">CATMathTransformation1D*</a> <td><tt>oTransfo1D</tt>)const = 0   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignCurve is confused with another curve.
<br>This method does not take into account the current limitations of 
 the curves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTransfo1D</tt>
   <dd> The 1D-transformation defining the change of parametrization between the transformation of 
 the CATIForeignCurve and <tt>iTCurve</tt>. If <tt>NULL</tt>, this argument is not set.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of the CATIForeignCurve is geometrically the same as <tt>iTCurve</tt>.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsInvariant"></a><a name="IsInvariant(CATMathTransformation&amp;,CATMathTransformation1D*)"></a> <dt> o <b>IsInvariant</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsInvariant</b>(<td> const <a href="../Mathematics/class_CATMathTransformation_93245.htm">CATMathTransformation&amp;</a> <td><tt>iTransfo</tt>,<tr><td></td><td><a href="../Mathematics/class_CATMathTransformation1D_105430.htm">CATMathTransformation1D*</a> <td><tt>oTransfo1D</tt><td><tt>= NULL</tt>) const   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignCurve is invariant.
<br>This method does not take into account the current limitations of 
 the curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTransfo1D</tt>
   <dd> The 1D-transformation defining the change of parametrization between 
 the CATIForeignCurve and the transformation of
 <tt>this</tt>. If <tt>NULL</tt>, this argument is not set.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of the CATIForeignCurve is geometrically the same as itself.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsPeriodic"></a><a name="IsPeriodic()"></a> <dt> o <b>IsPeriodic</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_CATBoolean_20142.htm">CATBoolean</a>  <b>IsPeriodic</b>(<td>)const = 0   </table></dt>
<dl>
  <dd>
 Tests whether a CATIForeignCurve is periodic.
<br>This method does not take into account the current limitations of 
 the curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>0</tt> <dd>If the CATIForeignCurve is not periodic.
     <dt><tt>1</tt> <dd>If the CATIForeignCurve is periodic.  </dl>
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATCrvLimits&amp;)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLimits</b>(<td> const <a href="../GeometricObjects/class_CATCrvLimits_29800.htm">CATCrvLimits&amp;</a> <td><tt>iCurrentLimits</tt>) = 0   </table></dt>
<dl>
  <dd>
 Modifies the limitations of a CATIForeignCurve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits</tt>
   <dd> The new current limitations.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATForeignCurveData.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricObjects</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
