<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ObjectSpecsLegacy Class CATOsmUpdateAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../ObjectSpecsLegacy.htm" href="../ObjectSpecsLegacy.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "ObjectSpecsLegacy";	}
		function getCurrentObjectName() { 
 	return "CATOsmUpdateAdapter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>ObjectSpecsLegacy <script type="text/javascript" > writeClassCharacteristic(); </script> CATOsmUpdateAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATOsmUpdateAdapter_32449','CATOsmUpdateAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATOsmUpdateAdapter</b>
</p>
<p>
<b><i>  Adapter class for the </i></b><br>
<script type="text/javascript"> activateLinkAnchor('CATIOsmUpdate','','CATIOsmUpdate') </script> interface. <br><b>Role</b>:
 This is the base class from which you should derive if you have to
 <ul><li>overload the standard update mechanism, by redefining the Update 
 and possibly the IsUpToDate and SetUpToDate methods</li>
 <li>allow your object to be ignored by the update mechanism
 by implementing the IsInactive method.</li></ul>
 It is strongly advised not to implement this interface on features
 that derive from startups defined by Dassault Systemes because the
 update behaviour of these features is often specialised.
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#IsInactive()"><b>IsInactive</b></a>()
<dd>  Indicates whether the object must be ignored by the update mechanism.
 <dt> o 
    <a href="#IsUpToDate()"><b>IsUpToDate</b></a>()
<dd>  Returns the status of the object concerning the update mechanism.
 <dt> o 
    <a href="#SetUpToDate(CATBoolean)"><b>SetUpToDate</b></a>(CATBoolean)
<dd>  Modifies the object update status.
 <dt> o 
    <a href="#Update()"><b>Update</b></a>()
<dd>    Rebuilds the feature.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="IsInactive"></a><a name="IsInactive()"></a> <dt> o <b>IsInactive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsInactive</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Indicates whether the object must be ignored by the update mechanism.
 <br><b>Role</b>:
 If you want to allow inactivation of your
 object, you must store that information somehow and implement this
 method to return S_OK when inactivated. Inactivated objects no
 longer update themselves even if they are inputs of other objects.
 Thus, inactive objects will never be called on 
<script type="text/javascript"> activateLinkAnchor('CATIBuild','Build','CATIBuild.Build') </script> . <b>Note</b>: This method returns S_FALSE.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the object is to be ignored by the update mechanism,         S_FALSE otherwise.
</dl>
</dl>
<a name="IsUpToDate"></a><a name="IsUpToDate()"></a> <dt> o <b>IsUpToDate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsUpToDate</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the status of the object concerning the update mechanism.
 <p>
 If you overload this method and when you want to return S_FALSE, in 
 addition to your own computation, you must also call 
<script type="text/javascript"> activateLinkAnchor('','SetUpToDate','SetUpToDate') </script> (FALSE).<br>
 If you don't want to force the S_FALSE result, you must call 
 
<script type="text/javascript"> activateLinkAnchor('CATOsmUpdateAdapter','IsUpToDate','CATOsmUpdateAdapter.IsUpToDate') </script> in order for other dependencies to be checked properly. This method will check that all inputs are
 up to date and that this feature has been updated after the update of
 its inouts. <br>
 For example:
 <pre>
   Example::IsUpToDate()
   {
     if (something())
     {
       SetUpToDate(FALSE);
       return S_FALSE;
     }
     return CATOsmUpdateAdapter::IsUpToDate();
   }
 </pre>
 Make sure your IsUpToDate implementation is consistent with 
<script type="text/javascript"> activateLinkAnchor('','Update','Update') </script> . </p>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul><li>S_OK: the object has been updated.</li>
    <li>S_FALSE : the object has to be updated.</li></ul>
</dl>
</dl>
<a name="SetUpToDate"></a><a name="SetUpToDate(CATBoolean)"></a> <dt> o <b>SetUpToDate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetUpToDate</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iflag</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the object update status.
 <br><b>Role</b>:
 This method changes the up to date status of the object. It is
 called every time the object's status changes. The status may change
 either because an input of the object changes, or because the object
 is updated (or someone directly calls 
<script type="text/javascript"> activateLinkAnchor('CATISpecObject','SetUpToDate','CATISpecObject.SetUpToDate') </script> ). <p>
 You must always call 
<script type="text/javascript"> activateLinkAnchor('CATOsmUpdateAdapter','SetUpToDate','CATOsmUpdateAdapter.SetUpToDate') </script> if you overload this method.
 </p>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iflag</tt>
   <dd> The new status.<br>       <ul>
       <li><tt>TRUE</tt> : the object has just been updated.</li>
       <li><tt>FALSE</tt>: the object needs to be rebuild.</li>
       </ul></dd>
</dl>
</dl>
</dl>
<a name="Update"></a><a name="Update()"></a> <dt> o <b>Update</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Update</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
   Rebuilds the feature.
 <br><b>Role</b>:
 This method will be called internally by 
<script type="text/javascript"> activateLinkAnchor('CATISpecObject','Update','CATISpecObject.Update') </script> if the startup implements <tt>CATIOsmUpdate</tt>. It allows the default 
 method mechanism to be overriden.<br>
 This method can throw exceptions.
 <p>
 You must always call 
<script type="text/javascript"> activateLinkAnchor('CATOsmUpdateAdapter','Update','CATOsmUpdateAdapter.Update') </script> inside  your implementation if you overload this method, except when you know
 the update will fail in which case you may return E_FAIL before calling
 it. Doing this will allow the standard update mechanism to kick in: This
 method detects all features that have been modified upstream from a 
 feature, rebuilds all the feature impacting the updated feature, and finally rebuilds
 the final feature thanks to the 
<script type="text/javascript"> activateLinkAnchor('CATIBuild','','CATIBuild') </script> interface.<br> Make sure your Update implementation is consistent with 
<script type="text/javascript"> activateLinkAnchor('','IsUpToDate','IsUpToDate') </script> . </p>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if update succeeded, E_FAIL otherwise (the update process is then aborted).
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATOsmUpdateAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATObjectSpecsModeler</b>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

