<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT3DFaceGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="class_CAT3DEdgeGP_20309.htm">Previous</a>  <a href="class_CAT3DFixedArrowGP_54419.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VisualizationBase Class CAT3DFaceGP</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../VisualizationBase/class_CATGraphicPrimitive_75217.htm">VisualizationBase.CATGraphicPrimitive</a>
        |
        +---<a href="../VisualizationBase/class_CAT3DBoundingGP_41820.htm">VisualizationBase.CAT3DBoundingGP</a>
          |
          +---CAT3DFaceGP
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DFaceGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of a 3D face.</i></b><br>
<br>
 <b>Role</b>: Class to describe the standard tessellation of a face.
 A face is made of triangles, triangle strips, and triangle fans.
 This is one of the most common encountered graphic primitive.<br>
  Main Methods:<br>
    Drawing and texturing.<br>
    Retrieve the tessellation parameters.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DFaceGP(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*)"><b>CAT3DFaceGP</b></a>(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*)
<dd>  Constructs a 3D face graphic primitive from the face vertices coordinates list,
 and their texture coordinates.
 <dt> o 
    <a href="#CAT3DFaceGP(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*,float)"><b>CAT3DFaceGP</b></a>(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*,float)
<dd>  Constructs a 3D face graphic primitive from the face vertices coordinates list,
 and their texture coordinates.
 <dt> o 
    <a href="#CAT3DFaceGP(void)"><b>CAT3DFaceGP</b></a>(void)
<dd>  Default constructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the face.
 <dt> o 
    <a href="#Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"><b>Get</b></a>(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  Retrieves the tessellation information from the face.
 <dt> o 
    <a href="#GetTextureCoordinates(float**)"><b>GetTextureCoordinates</b></a>(float**)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinates(float**,int*)"><b>GetTextureCoordinates</b></a>(float**,int*)
<dd>  Retrieves the texture coordinates.
 <dt> o 
    <a href="#GetUV(int*,float**,int*)"><b>GetUV</b></a>(int*,float**,int*)
<dd>  Retrieves the face surfacic mesh parameters.
 <dt> o 
    <a href="#GetVertices(int*,float**,int*)"><b>GetVertices</b></a>(int*,float**,int*)
<dd>  Retrieves face vertices.
 <dt> o 
    <a href="#HasNormals(void)"><b>HasNormals</b></a>(void)
<dd>  Tests whether the face is owner of its normals informations.
 <dt> o 
    <a href="#HasTextures(void)"><b>HasTextures</b></a>(void)
<dd>  Tests whether the face is owner of its texture coordinates informations.
 <dt> o 
    <a href="#HasVertices(void)"><b>HasVertices</b></a>(void)
<dd>  Tests whether the face is owner of its vertices informations.
 <dt> o 
    <a href="#SetTextureCoordinates(float*,int,char)"><b>SetTextureCoordinates</b></a>(float*,int,char)
<dd>  Sets the texture coordinates.
 <dt> o 
    <a href="#SetUV(float*)"><b>SetUV</b></a>(float*)
<dd>  Sets the UV array.
 <dt> o 
    <a href="#SortAndStrip(void)"><b>SortAndStrip</b></a>(void)
<dd>  Performs a multi-dimensionnal sort on vertices and normals, and updates
 all tessellation parameters.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DFaceGP"></a><a name="CAT3DFaceGP(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*)"></a> <dt> o <b>CAT3DFaceGP</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CAT3DFaceGP</b>(<td> const float[] <td><tt>iVertices</tt>,<tr><td></td><td> const int <td><tt>iVerticesArraySize</tt>,<tr><td></td><td> const float[] <td><tt>iNormals</tt>,<tr><td></td><td> const int <td><tt>iNormalsArraySize</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangle</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleStripIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangleStrip</tt>,<tr><td></td><td> const int[] <td><tt>iNbVertexPerTriangleStrip</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleFanIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangleFan</tt>,<tr><td></td><td> const int[] <td><tt>iNbVertexPerTriangleFan</tt>,<tr><td></td><td> const float* <td><tt>iTextureCoord</tt><td><tt>=NULL</tt>,<tr><td></td><td> const int <td><tt>iTextureFormat</tt><td><tt>=3</tt>,<tr><td></td><td> const char <td><tt>iAllocMode</tt><td><tt>=ALLOCATE_VERTICES | ALLOCATE_NORMALS | ALLOCATE_TEXTURES</tt>,<tr><td></td><td> const float* <td><tt>tanBinormal</tt><td><tt>=NULL</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a 3D face graphic primitive from the face vertices coordinates list,
 and their texture coordinates.  Relying on the allocation mode, parameter data may have to be freed
 after the face is created. Set, strip and fan information is always
 duplicated at the face creation. Texture information can be provided
 at this stage when the texture coordinates have already been computed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVertices</tt>
   <dd>    Array made of vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the face vertices number.
 </dd>
    <dt><tt> iVerticesArraySize</tt>
   <dd>    The size, in floats, of the <tt>iVertices</tt> array. Equal to three times the
    vertices number.
 </dd>
    <dt><tt> iNormals</tt>
   <dd>    Array made of normals coordinates. It is organized like <tt>iVertices</tt> : one vertex has exactly
    one normal at the same field entry.
 </dd>
    <dt><tt> iNormalsArraySize</tt>
   <dd>    The size, in floats, of the <tt>iNormal</tt> array. Equal to three times the number
    of normals.
 </dd>
    <dt><tt> iTriangleIndices</tt>
   <dd>    This array is used to store the single triangles vertices. Each of its field represents
    a vertex index in the <tt>iVertices</tt> array.
    As we find, in the <tt>iVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    So, the first three indices of the <tt>iTriangleIndices</tt> array, are the three vertices indices of the face first
    single triangle.
    <pre>

                 -----------------       
                | iTriangleIndices|
                 -----------------
                |       i00       |   }
                |       i01       |   } triangle 0 defined by index i00, i01 and i02
                |       i02       |   }
                |        .        |
                |        .        |
                |       ij0       |   }
                |       ij1       |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2       |   }
                |        .        |
                |        .        |
                 -----------------

   </pre>
    For example, index ij0 enables access to the face j-th single triangle first vertex,
    which coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal has coordinates Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
 </dd>
    <dt><tt> iNbTriangle</tt>
   <dd>    The number of single triangles in the face. 
 </dd>
    <dt><tt> iTriangleStripIndices</tt>
   <dd>    Array used to store the face triangles strips vertices. Each field contains a
    vertex index, in the <tt>iVertices</tt> array.  As, we find, in the
    iVertices array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | iTriangleStripIndices|
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th strip first vertex 
    wich coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal coordinates are Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
 </dd>
    <dt><tt> iNbTriangleStrip</tt>
   <dd>    The number of face triangles strips.
 </dd>
    <dt><tt> iNbVertexPerTriangleStrip</tt>
   <dd>    Array containing the number of vertices for each face triangles strip.
    The size of this array is equal to <tt>iNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>iNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |iNbVertexPerTriangleStrip |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(iNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (iNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> iTriangleFanIndices</tt>
   <dd>    Array used to store the face triangles fans vertices. Each field contains a
    vertex index, in the iVertices array.  As, we find, in the
    <tt>iVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | iTriangleFanIndices   |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle fan j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th fan first vertex
    wich coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal coordinates are Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
    Each ij0, j in [0, jn], represents the j-th fan center.
 </dd>
    <dt><tt> iNbTriangleFan</tt>
   <dd>    The number of face triangles fans.
 </dd>
    <dt><tt> iNbVertexPerTriangleFan</tt>
   <dd>    Array containing the number of vertices for each face triangles fan.
    The size of this array is equal to <tt>iNbTriangleFan</tt>. For example, the first fan
    is made with <tt>iNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | iNbVertexPerTriangleFan  |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle fans(iNbTriangleFan)
               |             nm           |   nm = number of vertices of the m-th fan. (iNbVertexPerTriangleFan[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
    Because vertex and normal information is being sorted at the face
    creation, texture coordinates are to be generated with the tessellation
    parameters that are retrieved after the face creation (ie with
    properly translated indices). Nevertheless, a mapping operator can be
    applied at anytime, when the face is the owner of it's vertex data.
    If computed before the face creation, texture coordinates can be given
    at the face construction method. In this case, coordinates order is
    rearranged in parallel with vertices coordinates.
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    <tt>iTextureFormat</tt> is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl>
 </dd>
    <dt><tt> iAllocMode</tt>
   <dd>    The CAT3DFaceGP, and it's planar inherited object, the CAT3DPlanarFaceGP
    have allocation flags ruling their memory comsumption for vertices and
    normals:
    The default value is ALLOCATE_VERTICES | ALLOCATE_NORMALS.
 <br><b>Legal values</b>:
   <dl>
      <dt>ALLOCATE_VERTICES</dt>
        <dd>Vertex array is the property of the face and
        is to be deleted with it.</dd>
   </dl>
   <dl>
      <dt>GET_VERTICES</dt>
        <dd>Vertex array is not duplicated at the face creation, but
        is to be deleted during the object deletion.</dd>
   </dl>
   <dl>
      <dt> ALLOCATE_NORMALS</dt>
        <dd>Normal array is the property of the face and
        is to be deleted with it. Planar faces always allocate their normals.</dd>
   </dl>
   <dl>
      <dt> GET_NORMALS</dt>
        <dd>Normal array is not duplicated at the face creation
        although, as for vertices, it will be destroyed in the same time the object
        is deleted.</dd>
   </dl>
   <dl>
      <dt> ALLOCATE_TEXTURES</dt>
        <dd>Texture coordinates array is the property of the face and is to be deleted with it.
        This mode is suitable for computing new texture coordinates</dd>
   </dl>
   <dl>
      <dt> GET_TEXTURES</dt>
        <dd>Texture coordinates array is not duplicated at the face creation
        although, as for vertices, it will be destroyed in the same time the object
        is deleted. In this mode, the texture format is 3.</dd>
   </dl></dd>
</dl>
</dl>
</dl>
<a name="CAT3DFaceGP"></a><a name="CAT3DFaceGP(float[],int,float[],int,int[],int,int[],int,int[],int[],int,int[],float*,int,char,float*,float)"></a> <dt> o <b>CAT3DFaceGP</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CAT3DFaceGP</b>(<td> const float[] <td><tt>iVertices</tt>,<tr><td></td><td> const int <td><tt>iVerticesArraySize</tt>,<tr><td></td><td> const float[] <td><tt>iNormals</tt>,<tr><td></td><td> const int <td><tt>iNormalsArraySize</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangle</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleStripIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangleStrip</tt>,<tr><td></td><td> const int[] <td><tt>iNbVertexPerTriangleStrip</tt>,<tr><td></td><td> const int[] <td><tt>iTriangleFanIndices</tt>,<tr><td></td><td> const int <td><tt>iNbTriangleFan</tt>,<tr><td></td><td> const int[] <td><tt>iNbVertexPerTriangleFan</tt>,<tr><td></td><td> const float* <td><tt>iTextureCoord</tt>,<tr><td></td><td> const int <td><tt>iTextureFormat</tt>,<tr><td></td><td> const char <td><tt>iAllocMode</tt>,<tr><td></td><td> const float* <td><tt>tanBinormal</tt>,<tr><td></td><td> const float <td><tt>iToleranceScale</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a 3D face graphic primitive from the face vertices coordinates list,
 and their texture coordinates.  Relying on the allocation mode, parameter data may have to be freed
 after the face is created. Set, strip and fan information is always
 duplicated at the face creation. Texture information can be provided
 at this stage when the texture coordinates have already been computed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVertices</tt>
   <dd>    Array made of vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the face vertices number.
 </dd>
    <dt><tt> iVerticesArraySize</tt>
   <dd>    The size, in floats, of the <tt>iVertices</tt> array. Equal to three times the
    vertices number.
 </dd>
    <dt><tt> iNormals</tt>
   <dd>    Array made of normals coordinates. It is organized like <tt>iVertices</tt> : one vertex has exactly
    one normal at the same field entry.
 </dd>
    <dt><tt> iNormalsArraySize</tt>
   <dd>    The size, in floats, of the <tt>iNormal</tt> array. Equal to three times the number
    of normals.
 </dd>
    <dt><tt> iTriangleIndices</tt>
   <dd>    This array is used to store the single triangles vertices. Each of its field represents
    a vertex index in the <tt>iVertices</tt> array.
    As we find, in the <tt>iVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    So, the first three indices of the <tt>iTriangleIndices</tt> array, are the three vertices indices of the face first
    single triangle.
    <pre>

                 -----------------       
                | iTriangleIndices|
                 -----------------
                |       i00       |   }
                |       i01       |   } triangle 0 defined by index i00, i01 and i02
                |       i02       |   }
                |        .        |
                |        .        |
                |       ij0       |   }
                |       ij1       |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2       |   }
                |        .        |
                |        .        |
                 -----------------

   </pre>
    For example, index ij0 enables access to the face j-th single triangle first vertex,
    which coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal has coordinates Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
 </dd>
    <dt><tt> iNbTriangle</tt>
   <dd>    The number of single triangles in the face. 
 </dd>
    <dt><tt> iTriangleStripIndices</tt>
   <dd>    Array used to store the face triangles strips vertices. Each field contains a
    vertex index, in the <tt>iVertices</tt> array.  As, we find, in the
    iVertices array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | iTriangleStripIndices|
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th strip first vertex 
    wich coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal coordinates are Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
 </dd>
    <dt><tt> iNbTriangleStrip</tt>
   <dd>    The number of face triangles strips.
 </dd>
    <dt><tt> iNbVertexPerTriangleStrip</tt>
   <dd>    Array containing the number of vertices for each face triangles strip.
    The size of this array is equal to <tt>iNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>iNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |iNbVertexPerTriangleStrip |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(iNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (iNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> iTriangleFanIndices</tt>
   <dd>    Array used to store the face triangles fans vertices. Each field contains a
    vertex index, in the iVertices array.  As, we find, in the
    <tt>iVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | iTriangleFanIndices   |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle fan j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th fan first vertex
    wich coordinates are X = iVertices[ij0], Y = iVertices[ij0 + 1] and Z = iVertices[ij0 + 2], and
    which normal coordinates are Nx = iNormals[ij0], Ny = iNormals[ij0 + 1] and Nz = iNormals[ij0 + 2].
    Each ij0, j in [0, jn], represents the j-th fan center.
 </dd>
    <dt><tt> iNbTriangleFan</tt>
   <dd>    The number of face triangles fans.
 </dd>
    <dt><tt> iNbVertexPerTriangleFan</tt>
   <dd>    Array containing the number of vertices for each face triangles fan.
    The size of this array is equal to <tt>iNbTriangleFan</tt>. For example, the first fan
    is made with <tt>iNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | iNbVertexPerTriangleFan  |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle fans(iNbTriangleFan)
               |             nm           |   nm = number of vertices of the m-th fan. (iNbVertexPerTriangleFan[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
    Because vertex and normal information is being sorted at the face
    creation, texture coordinates are to be generated with the tessellation
    parameters that are retrieved after the face creation (ie with
    properly translated indices). Nevertheless, a mapping operator can be
    applied at anytime, when the face is the owner of it's vertex data.
    If computed before the face creation, texture coordinates can be given
    at the face construction method. In this case, coordinates order is
    rearranged in parallel with vertices coordinates.
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    <tt>iTextureFormat</tt> is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl>
 </dd>
    <dt><tt> iAllocMode</tt>
   <dd>    The CAT3DFaceGP, and it's planar inherited object, the CAT3DPlanarFaceGP
    have allocation flags ruling their memory comsumption for vertices and
    normals:
    The default value is ALLOCATE_VERTICES | ALLOCATE_NORMALS.
 <br><b>Legal values</b>:
   <dl>
      <dt>ALLOCATE_VERTICES</dt>
        <dd>Vertex array is the property of the face and
        is to be deleted with it.</dd>
   </dl>
   <dl>
      <dt>GET_VERTICES</dt>
        <dd>Vertex array is not duplicated at the face creation, but
        is to be deleted during the object deletion.</dd>
   </dl>
   <dl>
      <dt> ALLOCATE_NORMALS</dt>
        <dd>Normal array is the property of the face and
        is to be deleted with it. Planar faces always allocate their normals.</dd>
   </dl>
   <dl>
      <dt> GET_NORMALS</dt>
        <dd>Normal array is not duplicated at the face creation
        although, as for vertices, it will be destroyed in the same time the object
        is deleted.</dd>
   </dl>
   <dl>
      <dt> ALLOCATE_TEXTURES</dt>
        <dd>Texture coordinates array is the property of the face and is to be deleted with it.
        This mode is suitable for computing new texture coordinates</dd>
   </dl>
   <dl>
      <dt> GET_TEXTURES</dt>
        <dd>Texture coordinates array is not duplicated at the face creation
        although, as for vertices, it will be destroyed in the same time the object
        is deleted. In this mode, the texture format is 3.</dd>
   </dl></dd>
</dl>
</dl>
</dl>
<a name="CAT3DFaceGP"></a><a name="CAT3DFaceGP(void)"></a> <dt> o <b>CAT3DFaceGP</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CAT3DFaceGP</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw</b>(<td><a href="../VisualizationBase/class_CATRender_16368.htm">CATRender&amp;</a> <td><tt>iRender</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws the face.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>   The render through which the face is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public void  <b>Get</b>(<td>int* <td><tt>oAllocate</tt>,<tr><td></td><td>float** <td><tt>oVertices</tt>,<tr><td></td><td>int* <td><tt>oVerticesArraySize</tt>,<tr><td></td><td>float** <td><tt>oNormals</tt>,<tr><td></td><td>int* <td><tt>oNormalsArraySize</tt>,<tr><td></td><td>int** <td><tt>oTriangleIndices</tt>,<tr><td></td><td>int* <td><tt>oNbTriangle</tt>,<tr><td></td><td>int** <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td>int* <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td>int** <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td>int** <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td>int* <td><tt>oNbTriangleFan</tt>,<tr><td></td><td>int** <td><tt>oNbVertexPerTriangleFan</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves the tessellation information from the face.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 Get(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: Get() only
    retrieves references on stored data.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of face vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the face vertices number.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oNormals</tt>
   <dd>    Retrieves an array made of normals coordinates. It is organized as <tt>oVertices</tt> : one vertex has exactly
    one normal at the same field entry.
 </dd>
    <dt><tt> oNormalsArraySize</tt>
   <dd>    Retrieves The size, in floats, of the <tt>oNormal</tt> array. Equal to three times the number
    of normals.
    If information on normals is shared with another element,
    returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oTriangleIndices</tt>
   <dd>    Retrieves the array used to store the single triangles vertices. Each of its field represents
    a vertex index, in the <tt>oVertices</tt> array.
    As,  we find, in the <tt>*oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    So, the first three indices of the *oTriangleIndices array, are the indices of the face first
    single triangle three vertices.
    <pre>

                 -----------------       
                |*oTriangleIndices |
                 -----------------
                |       i00       |   }
                |       i01       |   } triangle 0 defined by index i00, i01 and i02
                |       i02       |   }
                |        .        |
                |        .        |
                |       ij0       |   }
                |       ij1       |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2       |   }
                |        .        |
                |        .        |
                 -----------------

   </pre>
    For example, index ij0 enables access to the face j-th single triangle first vertex,
    which coordinates are X = *oVertices[ij0], Y = *oVertices[ij0+1] and Z = *oVertices[ij0+2], and
    which normal has coordinates Nx = *oNormals[ij0], Ny = *oNormals[ij0+1] and Nz = *oNormals[ij0+2].
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd>    Retrieves the number of single triangles in the face. 
 </dd>
    <dt><tt> oTriangleStripIndices</tt>
   <dd>    Retrieves the array used to store the face triangles strips vertices. Each field contains a
    vertex index, belonging to one of the strips, in the oVertices array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | oTriangleStripIndices |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th strip first vertex 
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
 </dd>
    <dt><tt> oNbTriangleStrip</tt>
   <dd>    Retrieves the number of face triangles strips.
 </dd>
    <dt><tt> oNbVertexPerTriangleStrip</tt>
   <dd>    Retrieves an array containing the number of vertices for each face triangles strip.
    The size of this array is equal to <tt>*oNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |*oNbVertexPerTriangleStrip|
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(*oNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (*oNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> oTriangleFanIndices</tt>
   <dd>    Retrieves the array used to store the face triangles fans vertices. Each field contains a
    vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | *oTriangleFanIndices  |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle fan j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th fan first vertex
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
    Each ij0, j in [0, jn], represents the j-th fan center.
 </dd>
    <dt><tt> oNbTriangleFan</tt>
   <dd>    Retrieves the number of face triangles fans.
 </dd>
    <dt><tt> oNbVertexPerTriangleFan</tt>
   <dd>    Retrieves the array containing the number of vertices for each face triangles fan.
    The size of this array is equal to <tt>*oNbTriangleFan</tt>. For example, the first fan
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | *oNbVertexPerTriangleFan |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle fans(*oNbTriangleFan)
               |             nm           |   nm = number of vertices of the m-th fan. (*oNbVertexPerTriangleFan[m]
                --------------------------    

   </pre></dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual void  <b>GetTextureCoordinates</b>(<td>float** <td><tt>oTextureCoord</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R14.
 In favor of GetTextureCoordinates (float ** oTextureCoord, int * oDimension).
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices.</dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**,int*)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual void  <b>GetTextureCoordinates</b>(<td>float** <td><tt>oTextureCoord</tt>,<tr><td></td><td>int* <td><tt>oDimension</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> oDimension</tt>
   <dd>    Retrieve the number of coordinates per vertex.</dd>
</dl>
</dl>
</dl>
<a name="GetUV"></a><a name="GetUV(int*,float**,int*)"></a> <dt> o <b>GetUV</b>

<dt>  <table><tr><td>  public virtual void  <b>GetUV</b>(<td>int* <td><tt>oAllocate</tt>,<tr><td></td><td>float** <td><tt>oUV</tt>,<tr><td></td><td>int* <td><tt>oUVArraySize</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves the face surfacic mesh parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: GetUV() only
    retrieves references on stored data.
 </dd>
    <dt><tt> oUV</tt>
   <dd>    Retrieves the UV array. Each vertex has an associated UV couple.
 </dd>
    <dt><tt> oUVArraySize</tt>
   <dd>    Retrieves the size of the UV array. 
    Equals 0 if the mesh is shared with another element or if the array is NULL, two times the number
    of vertices elsewhere.</dd>
</dl>
</dl>
</dl>
<a name="GetVertices"></a><a name="GetVertices(int*,float**,int*)"></a> <dt> o <b>GetVertices</b>

<dt>  <table><tr><td>  public virtual void  <b>GetVertices</b>(<td>int* <td><tt>oAllocate</tt>,<tr><td></td><td>float** <td><tt>oVertices</tt>,<tr><td></td><td>int* <td><tt>oVerticesArraySize</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves face vertices.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it must be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 GetVertices(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: <tt>GetVertices</tt> only
    retrieves references on stored data.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of face vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the face vertices number.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.</dd>
</dl>
</dl>
</dl>
<a name="HasNormals"></a><a name="HasNormals(void)"></a> <dt> o <b>HasNormals</b>

<dt>  <table><tr><td>  public inline int  <b>HasNormals</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Tests whether the face is owner of its normals informations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>The face is owner of its normals informations</dd>
        <dt>0</dt>
          <dd>The face is not owner of its normals informations</dd>
      </dl>
</dl>
</dl>
<a name="HasTextures"></a><a name="HasTextures(void)"></a> <dt> o <b>HasTextures</b>

<dt>  <table><tr><td>  public int  <b>HasTextures</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Tests whether the face is owner of its texture coordinates informations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>The face is owner of its texture coordinates informations</dd>
        <dt>0</dt>
          <dd>The face is not owner of its texture coordinates informations</dd>
      </dl>
</dl>
</dl>
<a name="HasVertices"></a><a name="HasVertices(void)"></a> <dt> o <b>HasVertices</b>

<dt>  <table><tr><td>  public inline int  <b>HasVertices</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Tests whether the face is owner of its vertices informations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>The face is owner of its vertices informations</dd>
        <dt>0</dt>
          <dd>The face is not owner of its vertices informations</dd>
      </dl>
</dl>
</dl>
<a name="SetTextureCoordinates"></a><a name="SetTextureCoordinates(float*,int,char)"></a> <dt> o <b>SetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual void  <b>SetTextureCoordinates</b>(<td>float* <td><tt>iTextureCoord</tt>,<tr><td></td><td>int <td><tt>iTextureFormat</tt>,<tr><td></td><td>char <td><tt>iAllocMode</tt><td><tt>=ALLOCATE_TEXTURES</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the texture coordinates.
 If the face shares its vertices, it also shares its
 texture coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
    Because vertex and normal information is being sorted at the face
    creation, texture coordinates are to be generated with the tessellation
    parameters that are retrieved after the face creation (ie with
    properly translated indices). Nevertheless, a mapping operator can be
    applied at anytime, when the face is the owner of it's vertex data.
    If computed before the face creation, texture coordinates can be given
    at the face construction method. In this case, coordinates order is
    rearranged in parallel with vertices coordinates.
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    iTextureFormat is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl>
    If data is shared, the format for the given texture coordinates must be three.</dd>
</dl>
</dl>
</dl>
<a name="SetUV"></a><a name="SetUV(float*)"></a> <dt> o <b>SetUV</b>

<dt>  <table><tr><td>  public virtual void  <b>SetUV</b>(<td>float* <td><tt>iUV</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the UV array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUV</tt>
   <dd>    Array of UV parameters. Its size is equal to 2/3 the vertices array size.
    The  management of this array follows the vertices array management concerning
    the allocation mode.</dd>
</dl>
</dl>
</dl>
<a name="SortAndStrip"></a><a name="SortAndStrip(void)"></a> <dt> o <b>SortAndStrip</b>

<dt>  <table><tr><td>  public virtual void  <b>SortAndStrip</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Performs a multi-dimensionnal sort on vertices and normals, and updates
 all tessellation parameters.
 Vertices may be spatially sorted using the SortAndStrip method. Meshing
 information is kept up to date. <br>
 Sort is:
 <pre>
          P1 < P2 ==> P1.x < P2.x ||
                      P1.x = P2.x && P1.y < P2.y ||
                      P1.x = P2.x && P1.y = P2.y && P1.z <= P2.z
 </pre>
</dl>
<hr>
 This object is included in the file: <b>CAT3DFaceGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
