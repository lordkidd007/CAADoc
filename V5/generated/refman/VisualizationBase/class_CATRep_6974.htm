<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CATRep</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="class_CATRender_16368.htm">Previous</a>  <a href="class_CATRepPath_19828.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VisualizationBase Class CATRep</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATRep
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRep</b>
</p>
<p>
<b><i> Class to create a representation of an application object.</i></b><br>

 <b>Role</b>: This class is the base class for all representation classes,
 necessary to visualize application objects.
 Representations are organized into representation trees, possess graphic
 attributes, and can be manipulated. This class defines these three basic
 behaviors. <br>
 Predefined representations (for two dimensions and three dimensions spaces)
 are available and should satisfy most of your needs. <br></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRep()"><b>CATRep</b></a>()
<dd>  Constructs a representation.
 <dt> o 
    <a href="#~CATRep()"><b>~CATRep</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddChild(CATRep&amp;)"><b>AddChild</b></a>(CATRep&amp;)
<dd>  Adds a child graphic representation.
 <dt> o 
    <a href="#AddParent(CATRep&amp;)"><b>AddParent</b></a>(CATRep&amp;)
<dd>  Adds a specific representation to the list of parents.
 <dt> o 
    <a href="#BuildHightlightLook(CATPathElement&amp;,CATRepPath&amp;)"><b>BuildHightlightLook</b></a>(CATPathElement&amp;,CATRepPath&amp;)
<dd>  Sets the representation path for highlighted state (calls BuildRepPath by default).
 <dt> o 
    <a href="#ComputeBoundingElement(int)"><b>ComputeBoundingElement</b></a>(int)
<dd>  Computes the bounding element of the representation.
 <dt> o 
    <a href="#Destroy()"><b>Destroy</b></a>()
<dd>  Deletes the representation.
 <dt> o 
    <a href="#GetChildren()"><b>GetChildren</b></a>()
<dd>  Returns the list of children representations, if it exists.
 <dt> o 
    <a href="#GetGraphicAttributeSet()"><b>GetGraphicAttributeSet</b></a>()
<dd>  Returns the associated set of graphic attributes.
 <dt> o 
    <a href="#GetInheritanceMode()"><b>GetInheritanceMode</b></a>()
<dd>  Returns the inheritance mode of the representation.
 <dt> o 
    <a href="#GetIsValidTC()"><b>GetIsValidTC</b></a>()
<dd>  Return the validity of texture coordinates.
 <dt> o 
    <a href="#GetManipulator()"><b>GetManipulator</b></a>()
<dd>  Returns the manipulator of the representation.
 <dt> o 
    <a href="#GetMaterialInheritance()"><b>GetMaterialInheritance</b></a>()
<dd>  Returns the inheritance mode for the material of the rep.
 <dt> o 
    <a href="#GetNbParents()"><b>GetNbParents</b></a>()
<dd>   Returns the number of parent representations.
 <dt> o 
    <a href="#GetParentListCopy()"><b>GetParentListCopy</b></a>()
<dd>   Returns a list of parent representations.
 <dt> o 
    <a href="#GetRepParents(int)"><b>GetRepParents</b></a>(int)
<dd>   Iteration method to retreive the parent representations.
 <dt> o 
    <a href="#IsHidden()"><b>IsHidden</b></a>()
<dd>  Indicates that the representation is hidden.
 <dt> o 
    <a href="#IsOkToDraw(CATRender&amp;,int)"><b>IsOkToDraw</b></a>(CATRender&amp;,int)
<dd>  Tests whether the representation will draw its graphic primitives.
 <dt> o 
    <a href="#RemoveChild(CATRep&amp;)"><b>RemoveChild</b></a>(CATRep&amp;)
<dd>  Removes a child representation.
 <dt> o 
    <a href="#RemoveChildren(CATRep&amp;)"><b>RemoveChildren</b></a>(CATRep&amp;)
<dd>  Removes a child representation but does not compute the new bounding element.
 <dt> o 
    <a href="#RemoveParent(CATRep&amp;)"><b>RemoveParent</b></a>(CATRep&amp;)
<dd>  Removes a specific representation from the list of parents.
 <dt> o 
    <a href="#SetColor(unsigned int)"><b>SetColor</b></a>(unsigned int)
<dd>  Sets the color of the representation.
 <dt> o 
    <a href="#SetColorRGBA(unsigned int,unsigned int,unsigned int,unsigned int)"><b>SetColorRGBA</b></a>(unsigned int,unsigned int,unsigned int,unsigned int)
<dd>  Sets the color of the representation, in RGBA notation.
 <dt> o 
    <a href="#SetFixedThickness(unsigned int)"><b>SetFixedThickness</b></a>(unsigned int)
<dd>  Sets the thickness used for drawing lines of the representation.
 <dt> o 
    <a href="#SetGraphicAttributeSet(CATGraphicAttributeSet&amp;)"><b>SetGraphicAttributeSet</b></a>(CATGraphicAttributeSet&amp;)
<dd>  Sets the associated set of graphic attributes.
 <dt> o 
    <a href="#SetHighlightMode(int,int)"><b>SetHighlightMode</b></a>(int,int)
<dd>  Sets the highlight mode of the representation.
 <dt> o 
    <a href="#SetInheritanceMode(unsigned int)"><b>SetInheritanceMode</b></a>(unsigned int)
<dd>  Sets the inheritance mode of the representation.
 <dt> o 
    <a href="#SetIsValidTC(int)"><b>SetIsValidTC</b></a>(int)
<dd>  Sets the validity of texture coordinates.
 <dt> o 
    <a href="#SetLineType(unsigned int)"><b>SetLineType</b></a>(unsigned int)
<dd>  Sets the line type used for drawing lines of the representation.
 <dt> o 
    <a href="#SetLowlightMode(unsigned int)"><b>SetLowlightMode</b></a>(unsigned int)
<dd>  Sets the lowlight mode of the representation.
 <dt> o 
    <a href="#SetManipulator(CATManipulator*)"><b>SetManipulator</b></a>(CATManipulator*)
<dd>  Attach a manipulator to the representation.
 <dt> o 
    <a href="#SetMaterialInheritance(int)"><b>SetMaterialInheritance</b></a>(int)
<dd>  Sets the heritance mode for material.
 <dt> o 
    <a href="#SetPickMode(unsigned int)"><b>SetPickMode</b></a>(unsigned int)
<dd>  Sets the pick mode of the representation.
 <dt> o 
    <a href="#SetShowFreeMode(unsigned int)"><b>SetShowFreeMode</b></a>(unsigned int)
<dd>  Sets the show free mode of the representation.
 <dt> o 
    <a href="#SetShowMode(int,int)"><b>SetShowMode</b></a>(int,int)
<dd>   Sets the show mode of the representation.
 <dt> o 
    <a href="#SetThickness(unsigned int)"><b>SetThickness</b></a>(unsigned int)
<dd>  Sets the thickness used for drawing lines of the representation.
 <dt> o 
    <a href="#SetTransparentMode(unsigned int)"><b>SetTransparentMode</b></a>(unsigned int)
<dd>  Sets the transparency mode graphic attribute.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRep"></a><a name="CATRep()"></a> <dt> o <b>CATRep</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATRep</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a representation.
</dl>
<a name="~CATRep"></a><a name="~CATRep()"></a> <dt> o <b>~CATRep</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATRep</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddChild"></a><a name="AddChild(CATRep&amp;)"></a> <dt> o <b>AddChild</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>AddChild</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Adds a child graphic representation. 
<br>
<b>Role</b>: This method is not implemented on the current class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> Child representation to be added.</dd>
</dl>
</dl>
</dl>
<a name="AddParent"></a><a name="AddParent(CATRep&amp;)"></a> <dt> o <b>AddParent</b>

<dt>  <table><tr><td>  public virtual void  <b>AddParent</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iParentRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Adds a specific representation to the list of parents. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParentRep</tt>
   <dd> The parent rep to be added.</dd>
</dl>
</dl>
</dl>
<a name="BuildHightlightLook"></a><a name="BuildHightlightLook(CATPathElement&amp;,CATRepPath&amp;)"></a> <dt> o <b>BuildHightlightLook</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>BuildHightlightLook</b>(<td> const <a href="../VisualizationBase/class_CATPathElement_39932.htm">CATPathElement&amp;</a> <td><tt>iPathElement</tt>,<tr><td></td><td><a href="../VisualizationBase/class_CATRepPath_19828.htm">CATRepPath&amp;</a> <td><tt>oRepPath</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the representation path for highlighted state (calls BuildRepPath by default).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPathElement</tt>
   <dd> 
 </dd>
    <dt><tt> oRepPath</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="ComputeBoundingElement"></a><a name="ComputeBoundingElement(int)"></a> <dt> o <b>ComputeBoundingElement</b>

<dt>  <table><tr><td>  public virtual void  <b>ComputeBoundingElement</b>(<td>int <td><tt>iShowSpace</tt><td><tt>= 1</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Computes the bounding element of the representation. The bounding element should be the smallest possible sphere containing the representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iShowSpace</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 :  </li>
<li> 1 :  </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="Destroy"></a><a name="Destroy()"></a> <dt> o <b>Destroy</b>

<dt>  <table><tr><td>  public virtual void  <b>Destroy</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Deletes the representation. Do not use the <tt>delete</tt> operator for this purpose.
</dl>
<a name="GetChildren"></a><a name="GetChildren()"></a> <dt> o <b>GetChildren</b>

<dt>  <table><tr><td>  public virtual list<CATRep> *  <b>GetChildren</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the list of children representations, if it exists.
 The class remains owner of the list. Do not delete the list.
</dl>
<a name="GetGraphicAttributeSet"></a><a name="GetGraphicAttributeSet()"></a> <dt> o <b>GetGraphicAttributeSet</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">inline CATGraphicAttributeSet &</a>  <b>GetGraphicAttributeSet</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the associated set of graphic attributes.
</dl>
<a name="GetInheritanceMode"></a><a name="GetInheritanceMode()"></a> <dt> o <b>GetInheritanceMode</b>

<dt>  <table><tr><td>  public inline unsigned int  <b>GetInheritanceMode</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the inheritance mode of the representation.
</dl>
<a name="GetIsValidTC"></a><a name="GetIsValidTC()"></a> <dt> o <b>GetIsValidTC</b>

<dt>  <table><tr><td>  public virtual int  <b>GetIsValidTC</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Return the validity of texture coordinates.
</dl>
<a name="GetManipulator"></a><a name="GetManipulator()"></a> <dt> o <b>GetManipulator</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CATManipulator_41648.htm">CATManipulator *</a>  <b>GetManipulator</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the manipulator of the representation.
</dl>
<a name="GetMaterialInheritance"></a><a name="GetMaterialInheritance()"></a> <dt> o <b>GetMaterialInheritance</b>

<dt>  <table><tr><td>  public virtual int  <b>GetMaterialInheritance</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the inheritance mode for the material of the rep.
</dl>
<a name="GetNbParents"></a><a name="GetNbParents()"></a> <dt> o <b>GetNbParents</b>

<dt>  <table><tr><td>  public virtual int  <b>GetNbParents</b>(<td>)const  </table></dt>
<dl>
  <dd>
  Returns the number of parent representations.
</dl>
<a name="GetParentListCopy"></a><a name="GetParentListCopy()"></a> <dt> o <b>GetParentListCopy</b>

<dt>  <table><tr><td>  public virtual list<CATRep>*  <b>GetParentListCopy</b>(<td>)const  </table></dt>
<dl>
  <dd>
  Returns a list of parent representations.
 The class is not owner of the returned list. It is your responsability to delete the list.
</dl>
<a name="GetRepParents"></a><a name="GetRepParents(int)"></a> <dt> o <b>GetRepParents</b>

<dt>  <table><tr><td>  public virtual <a href="../VisualizationBase/class_CATRep_6974.htm">CATRep*</a>  <b>GetRepParents</b>(<td>int <td><tt>index</tt>) const  </table></dt>
<dl>
  <dd>
  Iteration method to retreive the parent representations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd>   the index of the parent representation you want to retrieve from the list of parents.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  NULL if index is negative or equal or superior to the number of parents The returned CATRep remains owned by this object . Do not delete it.
</dl>
</dl>
<a name="IsHidden"></a><a name="IsHidden()"></a> <dt> o <b>IsHidden</b>

<dt>  <table><tr><td>  public virtual int  <b>IsHidden</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates that the representation is hidden.
</dl>
<a name="IsOkToDraw"></a><a name="IsOkToDraw(CATRender&amp;,int)"></a> <dt> o <b>IsOkToDraw</b>

<dt>  <table><tr><td>  public virtual int  <b>IsOkToDraw</b>(<td><a href="../VisualizationBase/class_CATRender_16368.htm">CATRender&amp;</a> <td><tt>ioRender</tt>,<tr><td></td><td>int <td><tt>ioInside</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Tests whether the representation will draw its graphic primitives. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <ol>
<li> 0 :  the representation must not be drawn</li>
<li> 1 :  the representation must be drawn</li>
 </ol>
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioRender</tt>
   <dd> The render used to draw the representation.
 </dd>
    <dt><tt> ioInside</tt>
   <dd> This parameter indicates whether the representation is fully in the view frustrum.
 Legal values
 <ol>
<li> 0 :  the representation is fully or partially out of the view frustrum.
          Not all graphic primitives will be drawn.</li>
<li> 1 :  the representation is fully in the view frustrum.
          All graphic primitives will be drawn.</li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="RemoveChild"></a><a name="RemoveChild(CATRep&amp;)"></a> <dt> o <b>RemoveChild</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveChild</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Removes a child representation.<br>
<b>Role</b>: This method is not implemented on the current class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> Child representation to be removed.</dd>
</dl>
</dl>
</dl>
<a name="RemoveChildren"></a><a name="RemoveChildren(CATRep&amp;)"></a> <dt> o <b>RemoveChildren</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveChildren</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Removes a child representation but does not compute the new bounding element.
<b>Role</b>: This method is not implemented on the current class.
	
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> Child representation to be removed.</dd>
</dl>
</dl>
</dl>
<a name="RemoveParent"></a><a name="RemoveParent(CATRep&amp;)"></a> <dt> o <b>RemoveParent</b>

<dt>  <table><tr><td>  public virtual void  <b>RemoveParent</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iParentRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Removes a specific representation from the list of parents.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParentRep</tt>
   <dd> The parent rep to be removed.</dd>
</dl>
</dl>
</dl>
<a name="SetColor"></a><a name="SetColor(unsigned int)"></a> <dt> o <b>SetColor</b>

<dt>  <table><tr><td>  public virtual void  <b>SetColor</b>(<td>unsigned int <td><tt>iColor</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the color of the representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColor</tt>
   <dd>  The index of the color. You can use predefined color 
 see </dd>
<a href="../VisualizationBase/typedef_CATPredefinedColorName_97464.htm">CATPredefinedColorName</a>
</dl>
</dl>
</dl>
<a name="SetColorRGBA"></a><a name="SetColorRGBA(unsigned int,unsigned int,unsigned int,unsigned int)"></a> <dt> o <b>SetColorRGBA</b>

<dt>  <table><tr><td>  public virtual void  <b>SetColorRGBA</b>(<td>unsigned int <td><tt>iRed</tt>,<tr><td></td><td>unsigned int <td><tt>iGreen</tt>,<tr><td></td><td>unsigned int <td><tt>iBlue</tt>,<tr><td></td><td>unsigned int <td><tt>iAlpha</tt><td><tt>= 255</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the color of the representation, in RGBA notation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRed</tt>
   <dd> The red component of the color must be in the range [0,255].
 </dd>
    <dt><tt> iGreen</tt>
   <dd> The green component of the color must be in the range [0,255].
 </dd>
    <dt><tt> iBlue</tt>
   <dd> The blue component of the color must be in the range [0,255].
 </dd>
    <dt><tt> iAlpha</tt>
   <dd> The opacity component of the color must be in the range [0,255].</dd>
</dl>
</dl>
</dl>
<a name="SetFixedThickness"></a><a name="SetFixedThickness(unsigned int)"></a> <dt> o <b>SetFixedThickness</b>

<dt>  <table><tr><td>  public virtual void  <b>SetFixedThickness</b>(<td>unsigned int <td><tt>iThickness</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the thickness used for drawing lines of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThickness</tt>
   <dd> Indicates the width of the line in pixels in the range [1,8].</dd>
</dl>
</dl>
</dl>
<a name="SetGraphicAttributeSet"></a><a name="SetGraphicAttributeSet(CATGraphicAttributeSet&amp;)"></a> <dt> o <b>SetGraphicAttributeSet</b>

<dt>  <table><tr><td>  public inline void  <b>SetGraphicAttributeSet</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iGraphicAttributeSet</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the associated set of graphic attributes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGraphicAttributeSet</tt>
   <dd> The set of graphic attributes for the representation.</dd>
</dl>
</dl>
</dl>
<a name="SetHighlightMode"></a><a name="SetHighlightMode(int,int)"></a> <dt> o <b>SetHighlightMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetHighlightMode</b>(<td>int <td><tt>iHighlightMode</tt>,<tr><td></td><td>int <td><tt>iPropagationMode</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the highlight mode of the representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHighlightMode</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 :  </li>
<li> 1 :  </li>
 </ol>
 </dd>
    <dt><tt> iPropagationMode</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 :  </li>
<li> 1 :  </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetInheritanceMode"></a><a name="SetInheritanceMode(unsigned int)"></a> <dt> o <b>SetInheritanceMode</b>

<dt>  <table><tr><td>  public void  <b>SetInheritanceMode</b>(<td>unsigned int <td><tt>iInheritance</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the inheritance mode of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInheritance</tt>
   <dd> iInheritance is a Bitwise OR of masks that indicates the children reps will automatically have this rep's color or/and line width or/and line type attributes as specified by </dd>
<a href="#SetGraphicAttributeSet">SetGraphicAttributeSet</a> method. Legal values are :
 <ol>
<li> RESET_INHERITANCE     : Stop all inheritance </li>
<li> COLOR_INHERITANCE     : Activate color inheritance </li>
<li> LINEWIDTH_INHERITANCE : Activate line width inheritance </li>
<li> LINETYPE_INHERITANCE  : Activate line type inheritance </li>
 </ol>
 RESET_INHERITANCE is used to stop the inheritance.
</dl>
</dl>
</dl>
<a name="SetIsValidTC"></a><a name="SetIsValidTC(int)"></a> <dt> o <b>SetIsValidTC</b>

<dt>  <table><tr><td>  public virtual void  <b>SetIsValidTC</b>(<td>int <td><tt>iState</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the validity of texture coordinates. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iState</tt>
   <dd> <ol>
<li> 0 : TC invalid, they will be computed at next Draw </li>
<li> 1 : TC valid </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetLineType"></a><a name="SetLineType(unsigned int)"></a> <dt> o <b>SetLineType</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLineType</b>(<td>unsigned int <td><tt>iLineType</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the line type used for drawing lines of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLineType</tt>
   <dd> Legal values are :
 <ol>
<li> 1 :  solid</li>
<li> 2 :  dotted</li>
<li> 3 :  dashed</li>
<li> 4 :  dot-dashed</li>
<li> 5 :  phantom</li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetLowlightMode"></a><a name="SetLowlightMode(unsigned int)"></a> <dt> o <b>SetLowlightMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetLowlightMode</b>(<td>unsigned int <td><tt>iLowlightMode</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the lowlight mode of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLowlightMode</tt>
   <dd> <ol>
<li> 0 : representation is drawn normally </li>
<li> 1 : representation is drawn in lowlight </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetManipulator"></a><a name="SetManipulator(CATManipulator*)"></a> <dt> o <b>SetManipulator</b>

<dt>  <table><tr><td>  public void  <b>SetManipulator</b>(<td><a href="../VisualizationBase/class_CATManipulator_41648.htm">CATManipulator*</a> <td><tt>iManipulator</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Attach a manipulator to the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iManipulator</tt>
   <dd> Manipulator of the representation.</dd>
</dl>
</dl>
</dl>
<a name="SetMaterialInheritance"></a><a name="SetMaterialInheritance(int)"></a> <dt> o <b>SetMaterialInheritance</b>

<dt>  <table><tr><td>  public virtual void  <b>SetMaterialInheritance</b>(<td>int <td><tt>iInheritance</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the heritance mode for material. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInheritance</tt>
   <dd> <ol>
<li> MATERIAL_NOT_INHERIT : children reps will not have this rep's material </li>
<li> MATERIAL_INHERIT :  children reps will have automaticly this rep's material</li>
<li> MATERIAL_FORCE_INHERIT : same as INHERIT, but even when a father has the INHERIT flag</li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetPickMode"></a><a name="SetPickMode(unsigned int)"></a> <dt> o <b>SetPickMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetPickMode</b>(<td>unsigned int <td><tt>iPickMode</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the pick mode of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPickMode</tt>
   <dd> <ol>
<li> 0 : representation is pickable </li>
<li> 1 : representation is not pickable </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetShowFreeMode"></a><a name="SetShowFreeMode(unsigned int)"></a> <dt> o <b>SetShowFreeMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetShowFreeMode</b>(<td>unsigned int <td><tt>iShowFreeMode</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the show free mode of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iShowFreeMode</tt>
   <dd> <ol>
<li> 0 :  the show/noshow parameter of the representation is taken into account</li>
<li> 1 :  the show/noshow parameter of the representation is not taken into account</li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetShowMode"></a><a name="SetShowMode(int,int)"></a> <dt> o <b>SetShowMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetShowMode</b>(<td>int <td><tt>iShowMode</tt>,<tr><td></td><td>int <td><tt>iPropagationMode</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
  Sets the show mode of the representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iShowMode</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 :  </li>
<li> 1 :  </li>
 </ol>
 </dd>
    <dt><tt> iPropagationMode</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 :  </li>
<li> 1 :  </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="SetThickness"></a><a name="SetThickness(unsigned int)"></a> <dt> o <b>SetThickness</b>

<dt>  <table><tr><td>  public virtual void  <b>SetThickness</b>(<td>unsigned int <td><tt>iThickness</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the thickness used for drawing lines of the representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThickness</tt>
   <dd> Indicates the index width of the line in the range [1,55].
 This index is pointing on the true width in pixel, recorded in the standard
 (if there is one in the document) or in the setting.</dd>
</dl>
</dl>
</dl>
<a name="SetTransparentMode"></a><a name="SetTransparentMode(unsigned int)"></a> <dt> o <b>SetTransparentMode</b>

<dt>  <table><tr><td>  public virtual void  <b>SetTransparentMode</b>(<td>unsigned int <td><tt>iTransparentMode</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the transparency mode graphic attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransparentMode</tt>
   <dd> <br><b>Legal Values</b>:
 <ol>
<li> 0 : transparency is disabled </li>
<li> 1 : transparency is eneabled </li>
 </ol>.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATRep.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
