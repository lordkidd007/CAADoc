<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CATRender</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="class_CATPixelImage_33665.htm">Previous</a>  <a href="class_CATRep_6974.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VisualizationBase Class CATRender</h1>
<pre>
CATRender
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRender</b>
</p>
<p>
<b><i> Class to create a render.</i></b><br>
 <b>Role</b>:  The CATRender and inherited objects are the classes defining
 actions on graphical representations and graphical primitives.
 The renders are the only objects directly connected to the representations 
 and to the primitives through their Draw methods.
 Mainly, the CATRender inherited objects are used to descend a representation
 tree from the top to the bottom. Render methods are overloaded in order to
 pick up information from the representation tree defining the graphical
 database.
 The CATRender is called each time a Draw is performed. With the following
 list of methods, it's made possible to extract any information from the
 graphical database:
 <ol>
 <li> Push/Pop Matrix: Gives the tree architecture.</li>
 <li> DrawRepresentation: Gives the starting point for the draw of a rep.</li>
 <li> Draw xxx: Gives information on the type of the graphical primitive
 that is being drawn.</li>
 </ol>
 Note that all these functions are sequentially called, so it's always
 possible to build back the list of what is being drawn and the order of
 the draw sequence. It'll never be possible to know exactly which type of
 representation is being drawn, because representations are an open class,
 and no application may have the knowledge of all of them.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRender(CATSupport&amp;)"><b>CATRender</b></a>(CATSupport&amp;)
<dd>  Constructs a render.
 <dt> o 
    <a href="#~CATRender()"><b>~CATRender</b></a>()
<dd>  Destructor
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw2DArcCircle(CAT2DArcCircleGP&amp;)"><b>Draw2DArcCircle</b></a>(CAT2DArcCircleGP&amp;)
<dd>  Draws a 2D arc's circle.
 <dt> o 
    <a href="#Draw2DArcEllipse(CAT2DArcEllipseGP&amp;)"><b>Draw2DArcEllipse</b></a>(CAT2DArcEllipseGP&amp;)
<dd>  Draws a 2D arc's ellipse.
 <dt> o 
    <a href="#Draw2DGeometricText(CAT2DGeometricTextGP&amp;)"><b>Draw2DGeometricText</b></a>(CAT2DGeometricTextGP&amp;)
<dd>  Draws a 2D geometric text.
 <dt> o 
    <a href="#Draw2DLine(CAT2DLineGP&amp;)"><b>Draw2DLine</b></a>(CAT2DLineGP&amp;)
<dd>  Draws a 2D line.
 <dt> o 
    <a href="#Draw2DMarker(CAT2DMarkerGP&amp;)"><b>Draw2DMarker</b></a>(CAT2DMarkerGP&amp;)
<dd>  Draws a 2D marker.
 <dt> o 
    <a href="#Draw2DPolygon(CAT2DPolygonGP&amp;)"><b>Draw2DPolygon</b></a>(CAT2DPolygonGP&amp;)
<dd>  Draws a 2D polygon.
 <dt> o 
    <a href="#Draw2DQuadStrip(CAT2DQuadStripGP&amp;)"><b>Draw2DQuadStrip</b></a>(CAT2DQuadStripGP&amp;)
<dd>  Draws a 2D quad strip.
 <dt> o 
    <a href="#Draw2DRectangle(CAT2DRectangleGP&amp;)"><b>Draw2DRectangle</b></a>(CAT2DRectangleGP&amp;)
<dd>  Draws a 2D rectangle.
 <dt> o 
    <a href="#Draw3DCurvedPipe(CAT3DCurvedPipeGP&amp;)"><b>Draw3DCurvedPipe</b></a>(CAT3DCurvedPipeGP&amp;)
<dd>  Draws a 3D curved pipe.
 <dt> o 
    <a href="#Draw3DCylinder(CAT3DCylinderGP&amp;,int)"><b>Draw3DCylinder</b></a>(CAT3DCylinderGP&amp;,int)
<dd>  Draws a 3D cylinder.
 <dt> o 
    <a href="#Draw3DEdge(CAT3DEdgeGP&amp;)"><b>Draw3DEdge</b></a>(CAT3DEdgeGP&amp;)
<dd>  Draws a 3D edge.
 <dt> o 
    <a href="#Draw3DFace(CAT3DFaceGP&amp;)"><b>Draw3DFace</b></a>(CAT3DFaceGP&amp;)
<dd>  Draws a 3D face.
 <dt> o 
    <a href="#Draw3DLine(CAT3DLineGP&amp;)"><b>Draw3DLine</b></a>(CAT3DLineGP&amp;)
<dd>  Draws a 3D line.
 <dt> o 
    <a href="#Draw3DMarker(CAT3DMarkerGP&amp;)"><b>Draw3DMarker</b></a>(CAT3DMarkerGP&amp;)
<dd>  Draws a 3D marker.
 <dt> o 
    <a href="#Draw3DPlanarFace(CAT3DPlanarFaceGP&amp;)"><b>Draw3DPlanarFace</b></a>(CAT3DPlanarFaceGP&amp;)
<dd>  Draws a 3D planar face.
 <dt> o 
    <a href="#DrawDynamicGP(CATDynamicGP&amp;)"><b>DrawDynamicGP</b></a>(CATDynamicGP&amp;)
<dd>  Draws a dynamic graphic primitive.
 <dt> o 
    <a href="#DrawLightSource(CAT3DLightSourceGP&amp;)"><b>DrawLightSource</b></a>(CAT3DLightSourceGP&amp;)
<dd>  Draws a 3D light source.
 <dt> o 
    <a href="#DrawRepresentation(CATRep&amp;)"><b>DrawRepresentation</b></a>(CATRep&amp;)
<dd>  Draws a representation.
 <dt> o 
    <a href="#DrawRepresentation(CATRep&amp;,int,void*&amp;)"><b>DrawRepresentation</b></a>(CATRep&amp;,int,void*&amp;)
<dd>  This method is called at the begining of a Rep draw.
 <dt> o 
    <a href="#EndDrawRepresentation(CATRep&amp;,void*&amp;)"><b>EndDrawRepresentation</b></a>(CATRep&amp;,void*&amp;)
<dd>  This method is called at the end of a Rep draw.
 <dt> o 
    <a href="#Get3DViewpoint()"><b>Get3DViewpoint</b></a>()
<dd>  Gets the render's 3D Viewpoint.
 <dt> o 
    <a href="#GetCATColorMap()"><b>GetCATColorMap</b></a>()
<dd>  Gets the render's CATColorMap.
 <dt> o 
    <a href="#GetMMFromModelRatio()"><b>GetMMFromModelRatio</b></a>()
<dd>  Get the mm size in model unit for 2D.
 <dt> o 
    <a href="#GetMMFromModelRatio(CATMathPointf&amp;)"><b>GetMMFromModelRatio</b></a>(CATMathPointf&amp;)
<dd>  Get the mm size in model unit for a 3D point.
 <dt> o 
    <a href="#GetMMInSupportUnit()"><b>GetMMInSupportUnit</b></a>()
<dd>  Get the mm size in pixel.
 <dt> o 
    <a href="#GetPixelFromModelRatio()"><b>GetPixelFromModelRatio</b></a>()
<dd>  Get the pixel size in model unit for 2D.
 <dt> o 
    <a href="#GetPixelFromModelRatio(CATMathPointf&amp;)"><b>GetPixelFromModelRatio</b></a>(CATMathPointf&amp;)
<dd>  Get the pixel size in model unit for a 3D point.
 <dt> o 
    <a href="#GetPixelRatioWH()"><b>GetPixelRatioWH</b></a>()
<dd>  Get the pixel's ratio height/weight.
 <dt> o 
    <a href="#GetSupport()"><b>GetSupport</b></a>()
<dd>  Gets the render's Support.
 <dt> o 
    <a href="#GetWidthAndHeight(float&amp;,float&amp;)"><b>GetWidthAndHeight</b></a>(float&amp;,float&amp;)
<dd>  Get the support's width and height.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,CATRep&amp;)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,CATRep&amp;)
<dd>  Indicates if the representation is drawable with this attribut and this bounding box.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,int)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,int)
<dd>  Indicates if the representation is drawable with this attribut and this bounding box.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,CATRep&amp;,CATGraphicMaterial*)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,CATRep&amp;,CATGraphicMaterial*)
<dd>  Indicates if the representation is drawable with this attribut and this bounding sphere.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,int)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,int)
<dd>  Indicates if the representation is drawable with this attribut and this bounding sphere.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CATGraphicMaterial*)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CATGraphicMaterial*)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,CATRep&amp;,CATGraphicMaterial*)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,CATRep&amp;,CATGraphicMaterial*)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,int)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,int)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,int,int)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,int,int)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#IsDrawable(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;,int)"><b>IsDrawable</b></a>(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;,int)
<dd>  Indicates if the representation is drawable with this attribut.
 <dt> o 
    <a href="#PopMatrix(CATRender*)"><b>PopMatrix</b></a>(CATRender*)
<dd>  Pop a matrix.
 <dt> o 
    <a href="#PushMatrix(CAT3x3Matrix&amp;)"><b>PushMatrix</b></a>(CAT3x3Matrix&amp;)
<dd>  Push the 2D matrix.
 <dt> o 
    <a href="#PushMatrix(CAT4x4Matrix&amp;)"><b>PushMatrix</b></a>(CAT4x4Matrix&amp;)
<dd>  Push the 3D matrix.
 <dt> o 
    <a href="#SetViewMode(int,int)"><b>SetViewMode</b></a>(int,int)
<dd>  Sets the render's view mode.
 <dt> o 
    <a href="#ViewMode(int)"><b>ViewMode</b></a>(int)
<dd>  Gets the render's current view mode.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRender"></a><a name="CATRender(CATSupport&amp;)"></a> <dt> o <b>CATRender</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATRender</b>(<td> const <a href="../VisualizationBase/class_CATSupport_21602.htm">CATSupport&amp;</a> <td><tt>iSupport</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a render. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSupport</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CATSupport_21602.htm">CATSupport</a>.
</dl>
</dl>
</dl>
<a name="~CATRender"></a><a name="~CATRender()"></a> <dt> o <b>~CATRender</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATRender</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Destructor
</dl>
 <h2>Methods</h2> <br>
<a name="Draw2DArcCircle"></a><a name="Draw2DArcCircle(CAT2DArcCircleGP&amp;)"></a> <dt> o <b>Draw2DArcCircle</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DArcCircle</b>(<td><a href="../VisualizationBase/class_CAT2DArcCircleGP_46166.htm">CAT2DArcCircleGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D arc's circle. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DArcCircleGP_46166.htm">CAT2DArcCircleGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DArcEllipse"></a><a name="Draw2DArcEllipse(CAT2DArcEllipseGP&amp;)"></a> <dt> o <b>Draw2DArcEllipse</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DArcEllipse</b>(<td><a href="../VisualizationBase/class_CAT2DArcEllipseGP_53567.htm">CAT2DArcEllipseGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D arc's ellipse. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DArcEllipseGP_53567.htm">CAT2DArcEllipseGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DGeometricText"></a><a name="Draw2DGeometricText(CAT2DGeometricTextGP&amp;)"></a> <dt> o <b>Draw2DGeometricText</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DGeometricText</b>(<td><a href="../VisualizationBase/class_CAT2DGeometricTextGP_77358.htm">CAT2DGeometricTextGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D geometric text. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DGeometricTextGP_77358.htm">CAT2DGeometricTextGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DLine"></a><a name="Draw2DLine(CAT2DLineGP&amp;)"></a> <dt> o <b>Draw2DLine</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DLine</b>(<td><a href="../VisualizationBase/class_CAT2DLineGP_20765.htm">CAT2DLineGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D line. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DLineGP_20765.htm">CAT2DLineGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DMarker"></a><a name="Draw2DMarker(CAT2DMarkerGP&amp;)"></a> <dt> o <b>Draw2DMarker</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DMarker</b>(<td><a href="../VisualizationBase/class_CAT2DMarkerGP_30557.htm">CAT2DMarkerGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D marker. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DMarkerGP_30557.htm">CAT2DMarkerGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DPolygon"></a><a name="Draw2DPolygon(CAT2DPolygonGP&amp;)"></a> <dt> o <b>Draw2DPolygon</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DPolygon</b>(<td><a href="../VisualizationBase/class_CAT2DPolygonGP_36832.htm">CAT2DPolygonGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D polygon. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DPolygonGP_36832.htm">CAT2DPolygonGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DQuadStrip"></a><a name="Draw2DQuadStrip(CAT2DQuadStripGP&amp;)"></a> <dt> o <b>Draw2DQuadStrip</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DQuadStrip</b>(<td><a href="../VisualizationBase/class_CAT2DQuadStripGP_48004.htm">CAT2DQuadStripGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D quad strip. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DQuadStripGP_48004.htm">CAT2DQuadStripGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw2DRectangle"></a><a name="Draw2DRectangle(CAT2DRectangleGP&amp;)"></a> <dt> o <b>Draw2DRectangle</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw2DRectangle</b>(<td><a href="../VisualizationBase/class_CAT2DRectangleGP_47638.htm">CAT2DRectangleGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 2D rectangle. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT2DRectangleGP_47638.htm">CAT2DRectangleGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DCurvedPipe"></a><a name="Draw3DCurvedPipe(CAT3DCurvedPipeGP&amp;)"></a> <dt> o <b>Draw3DCurvedPipe</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DCurvedPipe</b>(<td><a href="../VisualizationBase/class_CAT3DCurvedPipeGP_53921.htm">CAT3DCurvedPipeGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D curved pipe. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DCurvedPipeGP_53921.htm">CAT3DCurvedPipeGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DCylinder"></a><a name="Draw3DCylinder(CAT3DCylinderGP&amp;,int)"></a> <dt> o <b>Draw3DCylinder</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DCylinder</b>(<td><a href="../VisualizationBase/class_CAT3DCylinderGP_41958.htm">CAT3DCylinderGP&amp;</a> <td><tt>iGP</tt>,<tr><td></td><td> const int <td><tt></tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D cylinder. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DCylinderGP_41958.htm">CAT3DCylinderGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DEdge"></a><a name="Draw3DEdge(CAT3DEdgeGP&amp;)"></a> <dt> o <b>Draw3DEdge</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DEdge</b>(<td><a href="../VisualizationBase/class_CAT3DEdgeGP_20309.htm">CAT3DEdgeGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D edge. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DEdgeGP_20309.htm">CAT3DEdgeGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DFace"></a><a name="Draw3DFace(CAT3DFaceGP&amp;)"></a> <dt> o <b>Draw3DFace</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DFace</b>(<td><a href="../VisualizationBase/class_CAT3DFaceGP_20149.htm">CAT3DFaceGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D face. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DFaceGP_20149.htm">CAT3DFaceGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DLine"></a><a name="Draw3DLine(CAT3DLineGP&amp;)"></a> <dt> o <b>Draw3DLine</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DLine</b>(<td><a href="../VisualizationBase/class_CAT3DLineGP_20784.htm">CAT3DLineGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D line. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DLineGP_20784.htm">CAT3DLineGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DMarker"></a><a name="Draw3DMarker(CAT3DMarkerGP&amp;)"></a> <dt> o <b>Draw3DMarker</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DMarker</b>(<td><a href="../VisualizationBase/class_CAT3DMarkerGP_30578.htm">CAT3DMarkerGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D marker. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DMarkerGP_30578.htm">CAT3DMarkerGP</a> to draw.
</dl>
</dl>
</dl>
<a name="Draw3DPlanarFace"></a><a name="Draw3DPlanarFace(CAT3DPlanarFaceGP&amp;)"></a> <dt> o <b>Draw3DPlanarFace</b>

<dt>  <table><tr><td>  public virtual void  <b>Draw3DPlanarFace</b>(<td><a href="../VisualizationBase/class_CAT3DPlanarFaceGP_52237.htm">CAT3DPlanarFaceGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D planar face. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DPlanarFaceGP_52237.htm">CAT3DPlanarFaceGP</a> to draw.
</dl>
</dl>
</dl>
<a name="DrawDynamicGP"></a><a name="DrawDynamicGP(CATDynamicGP&amp;)"></a> <dt> o <b>DrawDynamicGP</b>

<dt>  <table><tr><td>  public virtual void  <b>DrawDynamicGP</b>(<td><a href="../VisualizationBase/class_CATDynamicGP_27338.htm">CATDynamicGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a dynamic graphic primitive. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CATDynamicGP_27338.htm">CATDynamicGP</a> to draw.
</dl>
</dl>
</dl>
<a name="DrawLightSource"></a><a name="DrawLightSource(CAT3DLightSourceGP&amp;)"></a> <dt> o <b>DrawLightSource</b>

<dt>  <table><tr><td>  public virtual void  <b>DrawLightSource</b>(<td><a href="../VisualizationBase/class_CAT3DLightSourceGP_61498.htm">CAT3DLightSourceGP&amp;</a> <td><tt>iGP</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a 3D light source. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGP</tt>
   <dd> The </dd>
<a href="../VisualizationBase/class_CAT3DLightSourceGP_61498.htm">CAT3DLightSourceGP</a> to draw.
</dl>
</dl>
</dl>
<a name="DrawRepresentation"></a><a name="DrawRepresentation(CATRep&amp;)"></a> <dt> o <b>DrawRepresentation</b>

<dt>  <table><tr><td>  public virtual void  <b>DrawRepresentation</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Draws a representation. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> The representation to draw.</dd>
</dl>
</dl>
</dl>
<a name="DrawRepresentation"></a><a name="DrawRepresentation(CATRep&amp;,int,void*&amp;)"></a> <dt> o <b>DrawRepresentation</b>

<dt>  <table><tr><td>  public virtual int  <b>DrawRepresentation</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>,<tr><td></td><td>int <td><tt>iInside</tt>,<tr><td></td><td>void*&amp; <td><tt>iData</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 This method is called at the begining of a Rep draw. You can overload it to get in your code before the rep is drawn.
 You must return 1 if you want the DrawShading to be done.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> The Rep which is going to be drawn.
 </dd>
    <dt><tt> iInside</tt>
   <dd> </dd>
    <dt><tt> iData</tt>
   <dd> A pointer to the data you want to pass from
 DrawRep to EndDrawRep</dd>
</dl>
</dl>
</dl>
<a name="EndDrawRepresentation"></a><a name="EndDrawRepresentation(CATRep&amp;,void*&amp;)"></a> <dt> o <b>EndDrawRepresentation</b>

<dt>  <table><tr><td>  public virtual int  <b>EndDrawRepresentation</b>(<td><a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>,<tr><td></td><td>void*&amp; <td><tt>iData</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 This method is called at the end of a Rep draw. Return 1 if evrything's ok
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> The Rep which has been drawn.
 </dd>
    <dt><tt> iData</tt>
   <dd> A pointer to the data you want to pass from
 DrawRep to EndDrawRep</dd>
</dl>
</dl>
</dl>
<a name="Get3DViewpoint"></a><a name="Get3DViewpoint()"></a> <dt> o <b>Get3DViewpoint</b>

<dt>  <table><tr><td>  public virtual <a href="../VisualizationBase/class_CAT3DViewpoint_39756.htm">CAT3DViewpoint *</a>  <b>Get3DViewpoint</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Gets the render's 3D Viewpoint. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the 3D viewpoint.
</dl>
</dl>
<a name="GetCATColorMap"></a><a name="GetCATColorMap()"></a> <dt> o <b>GetCATColorMap</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CATColorMap_24151.htm">inline CATColorMap *</a>  <b>GetCATColorMap</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Gets the render's CATColorMap. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the color map.
</dl>
</dl>
<a name="GetMMFromModelRatio"></a><a name="GetMMFromModelRatio()"></a> <dt> o <b>GetMMFromModelRatio</b>

<dt>  <table><tr><td>  public float  <b>GetMMFromModelRatio</b>(<td>)const   </table></dt>
<dl>
  <dd>
 Get the mm size in model unit for 2D. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The mm size in model unit.
</dl>
</dl>
<a name="GetMMFromModelRatio"></a><a name="GetMMFromModelRatio(CATMathPointf&amp;)"></a> <dt> o <b>GetMMFromModelRatio</b>

<dt>  <table><tr><td>  public float  <b>GetMMFromModelRatio</b>(<td> const <a href="../Mathematics/class_CATMathPointf_34608.htm">CATMathPointf&amp;</a> <td><tt>iPoint</tt>) const   </table></dt>
<dl>
  <dd>
 Get the mm size in model unit for a 3D point. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The 3D point where the size is calculated.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The mm size in model unit.
</dl>
</dl>
<a name="GetMMInSupportUnit"></a><a name="GetMMInSupportUnit()"></a> <dt> o <b>GetMMInSupportUnit</b>

<dt>  <table><tr><td>  public inline float  <b>GetMMInSupportUnit</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Get the mm size in pixel. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The mm size in pixel.
</dl>
</dl>
<a name="GetPixelFromModelRatio"></a><a name="GetPixelFromModelRatio()"></a> <dt> o <b>GetPixelFromModelRatio</b>

<dt>  <table><tr><td>  public float  <b>GetPixelFromModelRatio</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Get the pixel size in model unit for 2D. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pixel size in model unit.
</dl>
</dl>
<a name="GetPixelFromModelRatio"></a><a name="GetPixelFromModelRatio(CATMathPointf&amp;)"></a> <dt> o <b>GetPixelFromModelRatio</b>

<dt>  <table><tr><td>  public float  <b>GetPixelFromModelRatio</b>(<td> const <a href="../Mathematics/class_CATMathPointf_34608.htm">CATMathPointf&amp;</a> <td><tt>iPoint</tt>) const  </table></dt>
<dl>
  <dd>
 Get the pixel size in model unit for a 3D point. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The 3D point where the size is calculated.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pixel size in model unit.
</dl>
</dl>
<a name="GetPixelRatioWH"></a><a name="GetPixelRatioWH()"></a> <dt> o <b>GetPixelRatioWH</b>

<dt>  <table><tr><td>  public inline float  <b>GetPixelRatioWH</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Get the pixel's ratio height/weight. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pixel's ratio.
</dl>
</dl>
<a name="GetSupport"></a><a name="GetSupport()"></a> <dt> o <b>GetSupport</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CATSupport_21602.htm">inline CATSupport*</a>  <b>GetSupport</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Gets the render's Support. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the support.
</dl>
</dl>
<a name="GetWidthAndHeight"></a><a name="GetWidthAndHeight(float&amp;,float&amp;)"></a> <dt> o <b>GetWidthAndHeight</b>

<dt>  <table><tr><td>  public inline void  <b>GetWidthAndHeight</b>(<td>float&amp; <td><tt>oWidth</tt>,<tr><td></td><td>float&amp; <td><tt>oHeight</tt>)const  </table></dt>
<dl>
  <dd>
 Get the support's width and height. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oWidth</tt>
   <dd> The returned width.
 </dd>
    <dt><tt> oHeight</tt>
   <dd> The returned height.</dd>
</dl>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,CATRep&amp;)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">CAT2DBoundingBox&amp;</a> <td><tt>iBoundinBox</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut and this bounding box. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iBoundingBox</tt>
   <dd> The representation's 2D bounding box.
 </dd>
    <dt><tt> iRep</tt>
   <dd> The representation.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CAT2DBoundingBox&amp;,int)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">CAT2DBoundingBox&amp;</a> <td><tt>iBoundingBox</tt>,<tr><td></td><td> const int <td><tt>iSubElementId</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut and this bounding box. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iBoundingBox</tt>
   <dd> The representation's 2D bounding box.
 </dd>
    <dt><tt> iSubElementId.</tt>
   <dd> The representation's sub-element identificator.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,CATRep&amp;,CATGraphicMaterial*)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CAT3DBoundingSphere_71868.htm">CAT3DBoundingSphere&amp;</a> <td><tt>iBoundingSphere</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>,<tr><td></td><td><a href="../VisualizationBase/class_CATGraphicMaterial_65898.htm">CATGraphicMaterial*</a> <td><tt>iMaterial</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut and this bounding sphere. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iBoundingSphere</tt>
   <dd> The representation's 3D bounding sphere.
 </dd>
    <dt><tt> iRep.</tt>
   <dd> The representation.
 </dd>
    <dt><tt> iMaterial</tt>
   <dd> The material to be load.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CAT3DBoundingSphere&amp;,int)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CAT3DBoundingSphere_71868.htm">CAT3DBoundingSphere&amp;</a> <td><tt>iBoundingSphere</tt>,<tr><td></td><td> const int <td><tt>iSubElementId</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut and this bounding sphere. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iBoundingSphere</tt>
   <dd> The representation's 3D bounding sphere.
 </dd>
    <dt><tt> iSubElementId.</tt>
   <dd> The representation's sub-element identificator.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CATGraphicMaterial*)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td><a href="../VisualizationBase/class_CATGraphicMaterial_65898.htm">CATGraphicMaterial*</a> <td><tt>iMaterial</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iMaterial</tt>
   <dd> The material to be load.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,CATRep&amp;,CATGraphicMaterial*)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const <a href="../VisualizationBase/class_CATRep_6974.htm">CATRep&amp;</a> <td><tt>iRep</tt>,<tr><td></td><td><a href="../VisualizationBase/class_CATGraphicMaterial_65898.htm">CATGraphicMaterial*</a> <td><tt>iMaterial</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iRep.</tt>
   <dd> The representation.
 </dd>
    <dt><tt> iMaterial</tt>
   <dd> The material to be load.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,int)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const int <td><tt>iSubElementId</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iSubElementId.</tt>
   <dd> The representation's sub-element identificator.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,int,int)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const int <td><tt>iSubElementId</tt>,<tr><td></td><td> const int <td><tt>iType</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iSubElementId.</tt>
   <dd> The representation's sub-element identificator.
 </dd>
    <dt><tt> iType.</tt>
   <dd> Flag to update the type of representation.
 <br><b>Legal values</b>:
 <ol>
 <li> 0: the type is not updated.</li>
 <li> 1: the type is updated.</li>
 </ol>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const list&lt;int&gt;&amp; <td><tt>ipSubElementIdList</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> ipSubElementIdList.</tt>
   <dd> The representation's sub-elements identificators.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="IsDrawable"></a><a name="IsDrawable(CATGraphicAttributeSet&amp;,list&lt;int&gt;&amp;,int)"></a> <dt> o <b>IsDrawable</b>

<dt>  <table><tr><td>  public virtual int  <b>IsDrawable</b>(<td> const <a href="../VisualizationBase/class_CATGraphicAttributeSet_99890.htm">CATGraphicAttributeSet&amp;</a> <td><tt>iAttribut</tt>,<tr><td></td><td> const list&lt;int&gt;&amp; <td><tt>ipSubElementIdList</tt>,<tr><td></td><td> const int <td><tt>iType</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Indicates if the representation is drawable with this attribut. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttribut</tt>
   <dd> The representation's attributes.
 </dd>
    <dt><tt> iSubElementId.</tt>
   <dd> The representation's sub-elements identificators.
 </dd>
    <dt><tt> iType.</tt>
   <dd> Flag to update the type of representation.
 <br><b>Legal values</b>:
 <ol>
 <li> 0: the type is not updated.</li>
 <li> 1: the type is updated.</li>
 </ol>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
 <ol>
 <li> 0: the representation is not drawable.</li>
 <li> 1: the representation is drawable.</li>
 </ol>
</dl>
</dl>
<a name="PopMatrix"></a><a name="PopMatrix(CATRender*)"></a> <dt> o <b>PopMatrix</b>

<dt>  <table><tr><td>  public virtual void  <b>PopMatrix</b>(<td><a href="../VisualizationBase/class_CATRender_16368.htm">CATRender*</a> <td><tt>ioRender</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Pop a matrix. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioRender</tt>
   <dd> The render created by PushMatrix to delete.</dd>
</dl>
</dl>
</dl>
<a name="PushMatrix"></a><a name="PushMatrix(CAT3x3Matrix&amp;)"></a> <dt> o <b>PushMatrix</b>

<dt>  <table><tr><td>  public virtual <a href="../VisualizationBase/class_CATRender_16368.htm">CATRender *</a>  <b>PushMatrix</b>(<td><a href="../VisualizationBase/class_CAT3x3Matrix_28110.htm">CAT3x3Matrix&amp;</a> <td><tt>iMatrix</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Push the 2D matrix. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMatrix</tt>
   <dd> The 2D matrix to apply.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the new render.
</dl>
</dl>
<a name="PushMatrix"></a><a name="PushMatrix(CAT4x4Matrix&amp;)"></a> <dt> o <b>PushMatrix</b>

<dt>  <table><tr><td>  public virtual <a href="../VisualizationBase/class_CATRender_16368.htm">CATRender *</a>  <b>PushMatrix</b>(<td><a href="../VisualizationBase/class_CAT4x4Matrix_28154.htm">CAT4x4Matrix&amp;</a> <td><tt>iMatrix</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Push the 3D matrix. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMatrix</tt>
   <dd> The 3D matrix to apply.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the new render.
</dl>
</dl>
<a name="SetViewMode"></a><a name="SetViewMode(int,int)"></a> <dt> o <b>SetViewMode</b>

<dt>  <table><tr><td>  public inline void  <b>SetViewMode</b>(<td> const int <td><tt>iViewMode</tt>,<tr><td></td><td> const int <td><tt>iActive</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the render's view mode. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iViewMode</tt>
   <dd> The view mode.  @see CATViewerUtility.
 </dd>
    <dt><tt> iActive</tt>
   <dd> <br><b> Legal values</b>:
 <ol>
 <li> 0 : the view is inactivated </li>
 <li> 1 : the view is activated </li>
 </ol></dd>
</dl>
</dl>
</dl>
<a name="ViewMode"></a><a name="ViewMode(int)"></a> <dt> o <b>ViewMode</b>

<dt>  <table><tr><td>  public virtual int  <b>ViewMode</b>(<td> const int <td><tt>oViewMode</tt>) const  </table></dt>
<dl>
  <dd>
 Gets the render's current view mode. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oViewMode</tt>
   <dd> The returned view mode.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATRender.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
