<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT2DRep</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="class_CAT2DRectangleGP_47638.htm">Previous</a>  <a href="class_CAT2DSymbolGP_31051.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>VisualizationBase Class CAT2DRep</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../VisualizationBase/class_CATRep_6974.htm">VisualizationBase.CATRep</a>
        |
        +---CAT2DRep
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DRep</b>
</p>
<p>
<b><i> Class to create a 2D representation of an application object.</i></b><br>

 <b>Role</b>: This class is the base class for all 2D representation classes,
 necessary to visualize application objects.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DRep(void)"><b>CAT2DRep</b></a>(void)
<dd>  Constructs a representation.
 <dt> o 
    <a href="#~CAT2DRep(void)"><b>~CAT2DRep</b></a>(void)
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddBoundingElement(CAT2DBoundingBox&amp;)"><b>AddBoundingElement</b></a>(CAT2DBoundingBox&amp;)
<dd>  Add a bounding element to the 2D representation.
 <dt> o 
    <a href="#GetBoundingCube(void)"><b>GetBoundingCube</b></a>(void)
<dd>  Returns the bounding element pointer .
 <dt> o 
    <a href="#GetBoundingElement(void)"><b>GetBoundingElement</b></a>(void)
<dd>  Returns the bounding element of the 2D representation.
 <dt> o 
    <a href="#GetBoundingElement(void)"><b>GetBoundingElement</b></a>(void)
<dd>  Returns the bounding element of the 2D representation.
 <dt> o 
    <a href="#IsInvalid()"><b>IsInvalid</b></a>()
<dd>  Returns whether or not the bounding element is invalid.
 <dt> o 
    <a href="#ResetBoundingElement(void)"><b>ResetBoundingElement</b></a>(void)
<dd>  Reset the bounding element of the 2D representation.
 <dt> o 
    <a href="#SetBoundingElement(CAT2DBoundingBox&amp;)"><b>SetBoundingElement</b></a>(CAT2DBoundingBox&amp;)
<dd>  Sets the bounding element of the 2D representation.
 <dt> o 
    <a href="#SetInvalid()"><b>SetInvalid</b></a>()
<dd>    Sets the bounding element of the current graphical representation as invalid.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DRep"></a><a name="CAT2DRep(void)"></a> <dt> o <b>CAT2DRep</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CAT2DRep</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a representation.
</dl>
<a name="~CAT2DRep"></a><a name="~CAT2DRep(void)"></a> <dt> o <b>~CAT2DRep</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CAT2DRep</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddBoundingElement"></a><a name="AddBoundingElement(CAT2DBoundingBox&amp;)"></a> <dt> o <b>AddBoundingElement</b>

<dt>  <table><tr><td>  public virtual void  <b>AddBoundingElement</b>(<td> const <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">CAT2DBoundingBox&amp;</a> <td><tt>iBoundingElement</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Add a bounding element to the 2D representation.
 In fact, this method computes a new bounding element which contains the bounding
 element of the representation and the bounding element to be added to the repsentation.
 This new bounding element is the shortest one that it is possible to create.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBoundingElement</tt>
   <dd>	The bounding element to be added to the 2D representation.</dd>
</dl>
</dl>
</dl>
<a name="GetBoundingCube"></a><a name="GetBoundingCube(void)"></a> <dt> o <b>GetBoundingCube</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CATBoundingElement_66682.htm">inline CATBoundingElement *</a>  <b>GetBoundingCube</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the bounding element pointer ...
</dl>
<a name="GetBoundingElement"></a><a name="GetBoundingElement(void)"></a> <dt> o <b>GetBoundingElement</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">const CAT2DBoundingBox &</a>  <b>GetBoundingElement</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the bounding element of the 2D representation.
</dl>
<a name="GetBoundingElement"></a><a name="GetBoundingElement(void)"></a> <dt> o <b>GetBoundingElement</b>

<dt>  <table><tr><td>  public <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">inline const CAT2DBoundingBox &</a>  <b>GetBoundingElement</b>(<td>void <td><tt></tt>)</table></dt>
<dl>
  <dd>
 Returns the bounding element of the 2D representation.
</dl>
<a name="IsInvalid"></a><a name="IsInvalid()"></a> <dt> o <b>IsInvalid</b>

<dt>  <table><tr><td>  public int  <b>IsInvalid</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns whether or not the bounding element is invalid.
</dl>
<a name="ResetBoundingElement"></a><a name="ResetBoundingElement(void)"></a> <dt> o <b>ResetBoundingElement</b>

<dt>  <table><tr><td>  public void  <b>ResetBoundingElement</b>(<td>void <td><tt></tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Reset the bounding element of the 2D representation.
</dl>
<a name="SetBoundingElement"></a><a name="SetBoundingElement(CAT2DBoundingBox&amp;)"></a> <dt> o <b>SetBoundingElement</b>

<dt>  <table><tr><td>  public void  <b>SetBoundingElement</b>(<td> const <a href="../VisualizationBase/class_CAT2DBoundingBox_50070.htm">CAT2DBoundingBox&amp;</a> <td><tt>iBoundingElement</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Sets the bounding element of the 2D representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBoundingElement</tt>
   <dd>	The bounding element of the 2D representation.</dd>
</dl>
</dl>
</dl>
<a name="SetInvalid"></a><a name="SetInvalid()"></a> <dt> o <b>SetInvalid</b>

<dt>  <table><tr><td>  public void  <b>SetInvalid</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
   Sets the bounding element of the current graphical representation as invalid. 
   That means that its bounding element is not right and should be computed when
   necessary. This information is send up to its fathers, so that they are warned 
   that one of their children is invalid. And as a consequence fathers are also invalid.
  And so on till we reach the root of the graphical tree.
</dl>
<hr>
 This object is included in the file: <b>CAT2DRep.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
