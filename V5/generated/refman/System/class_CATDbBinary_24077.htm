<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATDbBinary</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="class_CATCommandSelector_66892.htm">Previous</a>  <a href="class_CATErrDsc_15687.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>System Class CATDbBinary</h1>
<pre>
CATDbBinary
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATDbBinary</b>
</p>
<p>
<b><i> Class to use to manipulate Binary type of data.</i></b><br>

 <b>Role</b>:
 A Binary is made of a length followed by an area containing     
 the data:

         LLDDDDDDDDDDDD
           <--- LL --->
 
 As it doesn't end with '\0', it must always be used with its length.

 To ensure the compatibility with DBMSs, the length is a short.

 It is possible to set the maximal length of the Binary. If during
 an affectation or a concatenation, one tries to exceed this length, a 
 truncation will occur.
 If no length is given, the Binary will not have any size limit.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATDbBinary(CATDbBinary&amp;)"><b>CATDbBinary</b></a>(CATDbBinary&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#CATDbBinary(short&amp;,void*,short)"><b>CATDbBinary</b></a>(short&amp;,void*,short)
<dd>  Creation of a Binary using length and data.
 <dt> o 
    <a href="#CATDbBinary(short)"><b>CATDbBinary</b></a>(short)
<dd>  Default constructor.
 <dt> o 
    <a href="#CATDbBinary(void*,short)"><b>CATDbBinary</b></a>(void*,short)
<dd>  Creation of a Binary using an area having a Binary structure.
 <dt> o 
    <a href="#~CATDbBinary()"><b>~CATDbBinary</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Build(short,void*,short)"><b>Build</b></a>(short,void*,short)
<dd>  Initialisation of a binary.
 <dt> o 
    <a href="#GetBinaryData()"><b>GetBinaryData</b></a>()
<dd>  To get the contents of the Binary (Only the data).
 <dt> o 
    <a href="#GetHexaValue()"><b>GetHexaValue</b></a>()
<dd>  Converts the contents of the Binary to a hexadecimal character string.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Resets a binary.
 <dt> o 
    <a href="#operator const char *()"><b>operator const char *</b></a>()
<dd>  Cast to a Binary like area.
 <dt> o 
    <a href="#operator short()"><b>operator short</b></a>()
<dd>  Cast to get the actual length of the Binary.
 <dt> o 
    <a href="#operator!=(CATDbBinary&amp;)"><b>operator!=</b></a>(CATDbBinary&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator&lt;&lt;(CATDbBinary&amp;)"><b>operator&lt;&lt;</b></a>(CATDbBinary&amp;)
<dd>  Concatenation from a Binary operator.
 <dt> o 
    <a href="#operator+(CATDbBinary&amp;)"><b>operator+</b></a>(CATDbBinary&amp;)
<dd>  Addition from a Binary operator.
 <dt> o 
    <a href="#operator=(CATDbBinary&amp;)"><b>operator=</b></a>(CATDbBinary&amp;)
<dd>  Assignment from a CATDbBinary instance operator.
 <dt> o 
    <a href="#operator==(CATDbBinary&amp;)"><b>operator==</b></a>(CATDbBinary&amp;)
<dd>  Equality operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATDbBinary"></a><a name="CATDbBinary(CATDbBinary&amp;)"></a> <dt> o <b>CATDbBinary</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATDbBinary</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToCopy</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Copy constructor.    
 The new Binary has the same length limit as the copied Binary
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToCopy</tt>
   <dd> : The binary to copy</dd>
</dl>
</dl>
</dl>
<a name="CATDbBinary"></a><a name="CATDbBinary(short&amp;,void*,short)"></a> <dt> o <b>CATDbBinary</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATDbBinary</b>(<td> const short&amp; <td><tt>iLengthToCopy</tt>,<tr><td></td><td> const void* <td><tt>iAreaToCopy</tt>,<tr><td></td><td> const short <td><tt>iMaxLength</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Creation of a Binary using length and data.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLengthToCopy</tt>
   <dd> : The number of characters to take into account   <b>Legal values</b>: If length is <=  0, an empty Binary will be created, 
                        If length is >  SHRT_MAX, a Binary of size SHRT_MAX will be created
 </dd>
    <dt><tt> iAreaToCopy</tt>
   <dd>   : The pointer to the binary value If iAreaToCopy is empty (=NULL), an empty Binary will be created
 </dd>
    <dt><tt> iMaxLength</tt>
   <dd>    : maximal length</dd>
</dl>
</dl>
</dl>
<a name="CATDbBinary"></a><a name="CATDbBinary(short)"></a> <dt> o <b>CATDbBinary</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATDbBinary</b>(<td> const short <td><tt>iMaxLength</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Default constructor. 
 Creation of an empty Binary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMaxLength</tt>
   <dd> : maximal length</dd>
</dl>
</dl>
</dl>
<a name="CATDbBinary"></a><a name="CATDbBinary(void*,short)"></a> <dt> o <b>CATDbBinary</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATDbBinary</b>(<td> const void* <td><tt>iAreaToCopy</tt>,<tr><td></td><td> const short <td><tt>iMaxLength</tt><td><tt>= 0</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Creation of a Binary using an area having a Binary structure.    
 (ie: length + data)
 The rules explained into the preceeding constructor apply.   
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAreaToCopy</tt>
   <dd>   : The pointer to the length & binary value </dd>
    <dt><tt> iMaxLength</tt>
   <dd>    : maximal length</dd>
</dl>
</dl>
</dl>
<a name="~CATDbBinary"></a><a name="~CATDbBinary()"></a> <dt> o <b>~CATDbBinary</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATDbBinary</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Build"></a><a name="Build(short,void*,short)"></a> <dt> o <b>Build</b>

<dt>  <table><tr><td>  public int  <b>Build</b>(<td> const short <td><tt>iLengthToCopy</tt>,<tr><td></td><td> const void* <td><tt>iZoneToCopy</tt>,<tr><td></td><td> const short <td><tt>iMaxLength</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Initialisation of a binary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLengthToCopy</tt>
   <dd> : The number of characters to take into account   <b>Legal values</b>: If length is <=  0, an empty Binary will be created, 
                        If length is >  SHRT_MAX, a Binary of size SHRT_MAX will be created
 </dd>
    <dt><tt> iAreaToCopy</tt>
   <dd>   : The pointer to the binary value If iAreaToCopy is empty (=NULL), an empty Binary will be created
 </dd>
    <dt><tt> iMaxLength</tt>
   <dd>    : maximal length</dd>
</dl>
</dl>
</dl>
<a name="GetBinaryData"></a><a name="GetBinaryData()"></a> <dt> o <b>GetBinaryData</b>

<dt>  <table><tr><td>  public const void *  <b>GetBinaryData</b>(<td>)const  </table></dt>
<dl>
  <dd>
 To get the contents of the Binary (Only the data).
</dl>
<a name="GetHexaValue"></a><a name="GetHexaValue()"></a> <dt> o <b>GetHexaValue</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString</a>  <b>GetHexaValue</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Converts the contents of the Binary to a hexadecimal character string.
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public virtual void  <b>Reset</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Resets a binary.
 Destroy its contents and sets its size to 0.
</dl>
<a name="operator const char *"></a><a name="operator const char *()"></a> <dt> o <b>operator const char *</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>operator const char *</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Cast to a Binary like area.
 ie : length + data
</dl>
<a name="operator short"></a><a name="operator short()"></a> <dt> o <b>operator short</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>operator short</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Cast to get the actual length of the Binary.
</dl>
<a name="operator!="></a><a name="operator!=(CATDbBinary&amp;)"></a> <dt> o <b>operator!=</b>

<dt>  <table><tr><td>  public int  <b>operator!=</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToCompare</tt>) const  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToCompare</tt>
   <dd> : the binary to compare.</dd>
</dl>
</dl>
</dl>
<a name="operator&lt;&lt;"></a><a name="operator&lt;&lt;(CATDbBinary&amp;)"></a> <dt> o <b>operator&lt;&lt;</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary &</a>  <b>operator&lt;&lt;</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToConcatenate</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Concatenation from a Binary operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToConcatenate</tt>
   <dd> : the binary to concatenate.</dd>
</dl>
</dl>
</dl>
<a name="operator+"></a><a name="operator+(CATDbBinary&amp;)"></a> <dt> o <b>operator+</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary</a>  <b>operator+</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToAdd</tt>) const  </table></dt>
<dl>
  <dd>
 Addition from a Binary operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToAdd</tt>
   <dd> : the binary to add.</dd>
</dl>
</dl>
</dl>
<a name="operator="></a><a name="operator=(CATDbBinary&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary &</a>  <b>operator=</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToAffect</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Assignment from a CATDbBinary instance operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToAffect</tt>
   <dd> : the binary to assign</dd>
</dl>
</dl>
</dl>
<a name="operator=="></a><a name="operator==(CATDbBinary&amp;)"></a> <dt> o <b>operator==</b>

<dt>  <table><tr><td>  public int  <b>operator==</b>(<td> const <a href="../System/class_CATDbBinary_24077.htm">CATDbBinary&amp;</a> <td><tt>iBinaryToCompare</tt>) const  </table></dt>
<dl>
  <dd>
 Equality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBinaryToCompare</tt>
   <dd> : the binary to compare.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATDbBinary.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
