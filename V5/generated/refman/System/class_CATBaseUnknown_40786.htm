<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATBaseUnknown</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="class_CATBaseObject_33474.htm">Previous</a>  <a href="class_CATBaseUnknown_var_67834.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>System Class CATBaseUnknown</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---CATBaseUnknown
 </pre>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATBaseUnknown</b>
</p>
<p>
<b><i> Base class for creating interfaces and for implementing interfaces.</i></b><br>

 <b>Role</b>: CATBaseUnknown supplies the infrastructure and the basic mechanisms
 to create interface abstract classes and to manage interface pointers.
 It is also the base class for classes which implements interfaces
 and for their extension classes because it supplies the code for 
 the interface methods <a href="#QueryInterface">QueryInterface</a>, 
<a href="#AddRef">AddRef</a> and 
<a href="#Release">Release</a>.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATBaseUnknown()"><b>CATBaseUnknown</b></a>()
<dd>  Constructs a empty instance.
 <dt> o 
    <a href="#CATBaseUnknown(CATBaseUnknown&amp;)"><b>CATBaseUnknown</b></a>(CATBaseUnknown&amp;)
<dd>  Copy Constructor.
 <dt> o 
    <a href="#~CATBaseUnknown()"><b>~CATBaseUnknown</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddRef()"><b>AddRef</b></a>()
<dd>  Increments the reference count for the given interface.
 <dt> o 
    <a href="#ClassName()"><b>ClassName</b></a>()
<dd>  Returns the class name for which the given object is an instance.
 <dt> o 
    <a href="#IsAKindOf(char*)"><b>IsAKindOf</b></a>(char*)
<dd>  Determines whether the given object's class derives from a given class.
 <dt> o 
    <a href="#IsEqual(CATBaseUnknown*)"><b>IsEqual</b></a>(CATBaseUnknown*)
<dd>  Compares implementations pointed by interfaces.
 <dt> o 
    <a href="#QueryInterface(IID&amp;,void**)"><b>QueryInterface</b></a>(IID&amp;,void**)
<dd>  Retrieves a pointer to a given interface.
 <dt> o 
    <a href="#Release()"><b>Release</b></a>()
<dd>  Decrements the reference count for the given interface.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATBaseUnknown"></a><a name="CATBaseUnknown()"></a> <dt> o <b>CATBaseUnknown</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATBaseUnknown</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs a empty instance.
</dl>
<a name="CATBaseUnknown"></a><a name="CATBaseUnknown(CATBaseUnknown&amp;)"></a> <dt> o <b>CATBaseUnknown</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATBaseUnknown</b>(<td> const <a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown&amp;</a> <td><tt>iObj</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Copy Constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObj</tt>
   <dd> The CATBaseUnknown instance to copy</dd>
</dl>
</dl>
</dl>
<a name="~CATBaseUnknown"></a><a name="~CATBaseUnknown()"></a> <dt> o <b>~CATBaseUnknown</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATBaseUnknown</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddRef"></a><a name="AddRef()"></a> <dt> o <b>AddRef</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">ULONG __stdcall</a>  <b>AddRef</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Increments the reference count for the given interface. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference count value. <br>This information is meant to be used for diagnostic/testing purposes only, because, in certain situations, the value may be unstable.
</dl>
</dl>
<a name="ClassName"></a><a name="ClassName()"></a> <dt> o <b>ClassName</b>

<dt>  <table><tr><td>  public static <a href="../DNBSystem/struct__0.htm">const char * __stdcall</a>  <b>ClassName</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns the class name for which the given object is an instance.
</dl>
<a name="IsAKindOf"></a><a name="IsAKindOf(char*)"></a> <dt> o <b>IsAKindOf</b>

<dt>  <table><tr><td>  public virtual int  <b>IsAKindOf</b>(<td> const char* <td><tt>iName</tt>) const  </table></dt>
<dl>
  <dd>
 Determines whether the given object's class derives from a given class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>   The class name from which the given object's class is supposed to derive.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if the given object's class doesn't derive from <tt>iName</tt> and a non null value otherwise.
 
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>0 </dt>
        <dd>Current onject does not derive from iName.</dd>
     <dt>1 </dt>
        <dd>Otherwise.</dd>
   </dl>
</dl>
</dl>
<a name="IsEqual"></a><a name="IsEqual(CATBaseUnknown*)"></a> <dt> o <b>IsEqual</b>

<dt>  <table><tr><td>  public virtual int  <b>IsEqual</b>(<td> const <a href="../System/class_CATBaseUnknown_40786.htm">CATBaseUnknown*</a> <td><tt>iobject</tt>) const  </table></dt>
<dl>
  <dd>
 Compares implementations pointed by interfaces.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iobject</tt>
   <dd>   The second object to be compared to.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the implementations are identical.
</dl>
</dl>
<a name="QueryInterface"></a><a name="QueryInterface(IID&amp;,void**)"></a> <dt> o <b>QueryInterface</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>QueryInterface</b>(<td> const <a href="../System/typedef_IID_1488.htm">IID&amp;</a> <td><tt>iIID</tt>,<tr><td></td><td>void** <td><tt>oPPV</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Retrieves a pointer to a given interface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIID</tt>
   <dd>   The interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> oPPV</tt>
   <dd>   The address where the returned pointer to the interface is located.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>The query succeeds.</dd>
     <dt>E_NOINTERFACE </dt>
     <dd>The interface does not exist.</dd>
     <dt>E_FAIL </dt>
     <dd>The object is not valid.</dd>
     <dt>E_OUTOFMEMORY </dt>
     <dd>One memory allocation fails</bb>
     <dt>E_UNEXPECTED </dt>
     <dd>The query fails for any other reason</dd>
   </dl>
</dl>
</dl>
<a name="Release"></a><a name="Release()"></a> <dt> o <b>Release</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">ULONG __stdcall</a>  <b>Release</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Decrements the reference count for the given interface. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference count value. <br>This information is meant to be used for diagnostic/testing purposes only, because, in certain situations, the value may be unstable.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATBaseUnknown.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
