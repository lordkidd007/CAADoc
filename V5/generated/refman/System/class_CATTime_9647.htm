<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATTime</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="class_CATSysSettingController_112069.htm">Previous</a>  <a href="class_CATTimeSpan_24233.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>System Class CATTime</h1>
<pre>
CATTime
 </pre>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTime</b>
</p>
<p>
<b><i> Class to use for date and time representation.</i></b><br>

 <p>
 CATTime has to be used whenever a time representation is
 needed, ie either seen, entered, or manipulated by the 
 end user. In this way, the application is shielded from 
 implementation details regarding language, locale, and so forth.
 Applications thus become portable since they can handle
 time expressed in any language.
 <p></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATTime()"><b>CATTime</b></a>()
<dd>  Constructs an instance.
 <dt> o 
    <a href="#CATTime(CATTime&amp;)"><b>CATTime</b></a>(CATTime&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#CATTime(int,int,int,int,int,int)"><b>CATTime</b></a>(int,int,int,int,int,int)
<dd>  Constructs an instance from every Date & Time components,
 
 <dt> o 
    <a href="#CATTime(time_t)"><b>CATTime</b></a>(time_t)
<dd>  Constructs an instance from time_t variable (see C RunTime Library).
 <dt> o 
    <a href="#~CATTime()"><b>~CATTime</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ConvertToString(CATUnicodeString&amp;,int)"><b>ConvertToString</b></a>(CATUnicodeString&amp;,int)
<dd>  Converts date and time to CATUnicodeString depending on locale conventions and geographical standpoint.
 <dt> o 
    <a href="#GetCurrentLocalTime()"><b>GetCurrentLocalTime</b></a>()
<dd>  Returns an object that represents the current time.
 <dt> o 
    <a href="#GetDay()"><b>GetDay</b></a>()
<dd>  Returns the day.
 <dt> o 
    <a href="#GetDayOfWeek()"><b>GetDayOfWeek</b></a>()
<dd>  Returns the day of the week.
 <dt> o 
    <a href="#GetDayOfYear()"><b>GetDayOfYear</b></a>()
<dd>  Returns the day of the year.
 <dt> o 
    <a href="#GetHour()"><b>GetHour</b></a>()
<dd>  Returns the hour.
 <dt> o 
    <a href="#GetMinute()"><b>GetMinute</b></a>()
<dd>  Returns the minute.
 <dt> o 
    <a href="#GetMonth()"><b>GetMonth</b></a>()
<dd>  Returns the month.
 <dt> o 
    <a href="#GetSecond()"><b>GetSecond</b></a>()
<dd>  Returns the second.
 <dt> o 
    <a href="#GetStatus()"><b>GetStatus</b></a>()
<dd>  Returns the status of this CATTime Object.
 <dt> o 
    <a href="#GetYear()"><b>GetYear</b></a>()
<dd>  Returns the year.
 <dt> o 
    <a href="#Gettime_t()"><b>Gettime_t</b></a>()
<dd>  Returns a time_t structure.
 <dt> o 
    <a href="#SetDate(int,int,int)"><b>SetDate</b></a>(int,int,int)
<dd>  Recycles an existing instance from every Date components.
 <dt> o 
    <a href="#SetDateTime(int,int,int,int,int,int)"><b>SetDateTime</b></a>(int,int,int,int,int,int)
<dd>  Recycles an existing instance from every Date and Time components.
 <dt> o 
    <a href="#SetTime(int,int,int)"><b>SetTime</b></a>(int,int,int)
<dd>  Recycles an existing instance from every Time components.
 <dt> o 
    <a href="#Settime_t(time_t)"><b>Settime_t</b></a>(time_t)
<dd>  Recycles an existing instance from time_t variable (see C RunTime Library).
 <dt> o 
    <a href="#operator !=(CATTime&amp;)"><b>operator !=</b></a>(CATTime&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator &gt;(CATTime&amp;)"><b>operator &gt;</b></a>(CATTime&amp;)
<dd>  Greater-than operator.
 <dt> o 
    <a href="#operator &gt;=(CATTime&amp;)"><b>operator &gt;=</b></a>(CATTime&amp;)
<dd>  Greater-than or equal operator.
 <dt> o 
    <a href="#operator &lt;(CATTime&amp;)"><b>operator &lt;</b></a>(CATTime&amp;)
<dd>  Less-than operator.
 <dt> o 
    <a href="#operator &lt;=(CATTime&amp;)"><b>operator &lt;=</b></a>(CATTime&amp;)
<dd>  Less-than or equal operator.
 <dt> o 
    <a href="#operator +(CATTimeSpan&amp;)"><b>operator +</b></a>(CATTimeSpan&amp;)
<dd>  Addition operator from  CATTimeSpan.
 <dt> o 
    <a href="#operator +=(CATTimeSpan&amp;)"><b>operator +=</b></a>(CATTimeSpan&amp;)
<dd>  Addition assignment operator from CATTimeSpan.
 <dt> o 
    <a href="#operator -(CATTime&amp;)"><b>operator -</b></a>(CATTime&amp;)
<dd>  Substraction operator from CATTime.
 <dt> o 
    <a href="#operator -(CATTimeSpan&amp;)"><b>operator -</b></a>(CATTimeSpan&amp;)
<dd>  Substraction operator from CATTimeSpan.
 <dt> o 
    <a href="#operator -=(CATTimeSpan&amp;)"><b>operator -=</b></a>(CATTimeSpan&amp;)
<dd>  Substraction assignment operator from CATTimeSpan.
 <dt> o 
    <a href="#operator =(CATTime&amp;)"><b>operator =</b></a>(CATTime&amp;)
<dd>  Assignment operator from a CATTime instance.
 <dt> o 
    <a href="#operator =(time_t)"><b>operator =</b></a>(time_t)
<dd>  Assignment operator from a time_t.
 <dt> o 
    <a href="#operator ==(CATTime&amp;)"><b>operator ==</b></a>(CATTime&amp;)
<dd>  Equality operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATTime"></a><a name="CATTime()"></a> <dt> o <b>CATTime</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATTime</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs an instance.
 Current Date & Time are used for member variable initialization
</dl>
<a name="CATTime"></a><a name="CATTime(CATTime&amp;)"></a> <dt> o <b>CATTime</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATTime</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTime</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 Constructs an instance from another CATTime instance.
</dl>
<a name="CATTime"></a><a name="CATTime(int,int,int,int,int,int)"></a> <dt> o <b>CATTime</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATTime</b>(<td>int <td><tt>iYear</tt>,<tr><td></td><td>int <td><tt>iMonth</tt>,<tr><td></td><td>int <td><tt>iDay</tt>,<tr><td></td><td>int <td><tt>iHour</tt>,<tr><td></td><td>int <td><tt>iMin</tt>,<tr><td></td><td>int <td><tt>iSec</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs an instance from every Date & Time components,
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iYear</tt>
   <dd>   Year <b>Legal values</b>: from 1970 to 2038.
 </dd>
    <dt><tt> iMonth</tt>
   <dd>   Month <b>Legal values</b>: from 1 to 12.
 </dd>
    <dt><tt> iDay</tt>
   <dd>   Day <b>Legal values</b>: from 1 to 31.
 </dd>
    <dt><tt> iHour</tt>
   <dd>   Hour
 </dd>
    <dt><tt> iMin</tt>
   <dd>   Minute
 </dd>
    <dt><tt> iSec</tt>
   <dd>   Second</dd>
</dl>
</dl>
</dl>
<a name="CATTime"></a><a name="CATTime(time_t)"></a> <dt> o <b>CATTime</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>CATTime</b>(<td>time_t <td><tt>iTime</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Constructs an instance from time_t variable (see C RunTime Library).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTime</tt>
   <dd>   time_t representation of Date & Time.</dd>
</dl>
</dl>
</dl>
<a name="~CATTime"></a><a name="~CATTime()"></a> <dt> o <b>~CATTime</b>

<dt>  <table><tr><td>  public <a href="../DNBSystem/struct__0.htm"></a>  <b>~CATTime</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="ConvertToString"></a><a name="ConvertToString(CATUnicodeString&amp;,int)"></a> <dt> o <b>ConvertToString</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString</a>  <b>ConvertToString</b>(<td> const <a href="../System/class_CATUnicodeString_52958.htm">CATUnicodeString&amp;</a> <td><tt>iFormatString</tt>,<tr><td></td><td>int <td><tt>iFlag</tt><td><tt>=0 </tt>)const  </table></dt>
<dl>
  <dd>
 Converts date and time to CATUnicodeString depending on locale conventions and geographical standpoint.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFormatString</tt>
   <dd> The Format-control string. See <tt>strfime</tt> in C RunTime Library for valid format. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATUnicodeString representing date and time.
</dl>
</dl>
<a name="GetCurrentLocalTime"></a><a name="GetCurrentLocalTime()"></a> <dt> o <b>GetCurrentLocalTime</b>

<dt>  <table><tr><td>  public static <a href="../System/class_CATTime_9647.htm">CATTime</a>  <b>GetCurrentLocalTime</b>(<td>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Returns an object that represents the current time.
</dl>
<a name="GetDay"></a><a name="GetDay()"></a> <dt> o <b>GetDay</b>

<dt>  <table><tr><td>  public int  <b>GetDay</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the day.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the day.
</dl>
</dl>
<a name="GetDayOfWeek"></a><a name="GetDayOfWeek()"></a> <dt> o <b>GetDayOfWeek</b>

<dt>  <table><tr><td>  public int  <b>GetDayOfWeek</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the day of the week.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the day.
</dl>
</dl>
<a name="GetDayOfYear"></a><a name="GetDayOfYear()"></a> <dt> o <b>GetDayOfYear</b>

<dt>  <table><tr><td>  public int  <b>GetDayOfYear</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the day of the year.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the day.
</dl>
</dl>
<a name="GetHour"></a><a name="GetHour()"></a> <dt> o <b>GetHour</b>

<dt>  <table><tr><td>  public int  <b>GetHour</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the hour.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the hour
</dl>
</dl>
<a name="GetMinute"></a><a name="GetMinute()"></a> <dt> o <b>GetMinute</b>

<dt>  <table><tr><td>  public int  <b>GetMinute</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the minute.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the minute.
</dl>
</dl>
<a name="GetMonth"></a><a name="GetMonth()"></a> <dt> o <b>GetMonth</b>

<dt>  <table><tr><td>  public int  <b>GetMonth</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the month.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the month.
</dl>
</dl>
<a name="GetSecond"></a><a name="GetSecond()"></a> <dt> o <b>GetSecond</b>

<dt>  <table><tr><td>  public int  <b>GetSecond</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the second.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the second.
</dl>
</dl>
<a name="GetStatus"></a><a name="GetStatus()"></a> <dt> o <b>GetStatus</b>

<dt>  <table><tr><td>  public int  <b>GetStatus</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the status of this CATTime Object.
 The status of a CATTime object is invalid in the following cases :
 <ol>
 <li>If its value is set from a time_t value that could not be converted to a valid date and time value.</li>
 <li>If its value is set by 
<a href="#SetDateTime">SetDateTime</a> with invalid parameter values.</li> <li>If this object has experienced an overflow or underflow during an arithmetic assignement operation ( +, -, +=, etc.).</li>
 <li>If an invalid value was assigned to this object.</li>
 </ol>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>this is a Valid CATTime Object</dd>
     <dt>0 </dt>
        <dd>this is a not Valid CATTime Object</dd>
   </dl>
</dl>
</dl>
<a name="GetYear"></a><a name="GetYear()"></a> <dt> o <b>GetYear</b>

<dt>  <table><tr><td>  public int  <b>GetYear</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns the year.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the year.
</dl>
</dl>
<a name="Gettime_t"></a><a name="Gettime_t()"></a> <dt> o <b>Gettime_t</b>

<dt>  <table><tr><td>  public time_t  <b>Gettime_t</b>(<td>)const  </table></dt>
<dl>
  <dd>
 Returns a time_t structure.
 The result is inconsistent if this is an Invalid CATTime Object.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A time_t representation of Date & Time
</dl>
</dl>
<a name="SetDate"></a><a name="SetDate(int,int,int)"></a> <dt> o <b>SetDate</b>

<dt>  <table><tr><td>  public int  <b>SetDate</b>(<td>int <td><tt>iYear</tt>,<tr><td></td><td>int <td><tt>iMonth</tt>,<tr><td></td><td>int <td><tt>iDay</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Recycles an existing instance from every Date components.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iYear</tt>
   <dd>   Year <b>Legal values</b>: from 1970 to 2038.
 </dd>
    <dt><tt> iMonth</tt>
   <dd>   Month <b>Legal values</b>: from 1 to 12.
 </dd>
    <dt><tt> iDay</tt>
   <dd>   Day <b>Legal values</b>: from 1 to 31.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>Successful.</dd>
     <dt>0 </dt>
        <dd>An error occurred.</dd>
   </dl>
</dl>
</dl>
<a name="SetDateTime"></a><a name="SetDateTime(int,int,int,int,int,int)"></a> <dt> o <b>SetDateTime</b>

<dt>  <table><tr><td>  public int  <b>SetDateTime</b>(<td>int <td><tt>iYear</tt>,<tr><td></td><td>int <td><tt>iMonth</tt>,<tr><td></td><td>int <td><tt>iDay</tt>,<tr><td></td><td>int <td><tt>iHour</tt>,<tr><td></td><td>int <td><tt>iMin</tt>,<tr><td></td><td>int <td><tt>iSec</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Recycles an existing instance from every Date and Time components.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iYear</tt>
   <dd>   Year <b>Legal values</b>: from 1970 to 2038.
 </dd>
    <dt><tt> iMonth</tt>
   <dd>   Month <b>Legal values</b>: from 1 to 12.
 </dd>
    <dt><tt> iDay</tt>
   <dd>   Day <b>Legal values</b>: from 1 to 31.
 </dd>
    <dt><tt> iHour</tt>
   <dd>   Hour
 </dd>
    <dt><tt> iMin</tt>
   <dd>   Minute
 </dd>
    <dt><tt> iSec</tt>
   <dd>   Second
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>Successful.</dd>
     <dt>0 </dt>
        <dd>An error occurred.</dd>
   </dl>
</dl>
</dl>
<a name="SetTime"></a><a name="SetTime(int,int,int)"></a> <dt> o <b>SetTime</b>

<dt>  <table><tr><td>  public int  <b>SetTime</b>(<td>int <td><tt>iHour</tt>,<tr><td></td><td>int <td><tt>iMin</tt>,<tr><td></td><td>int <td><tt>iSec</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Recycles an existing instance from every Time components.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHour</tt>
   <dd>   Hour
 </dd>
    <dt><tt> iMin</tt>
   <dd>   Minutes
 </dd>
    <dt><tt> iSec</tt>
   <dd>   Seconds
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>Successful.</dd>
     <dt>0 </dt>
        <dd>An error occurred.</dd>
   </dl>
</dl>
</dl>
<a name="Settime_t"></a><a name="Settime_t(time_t)"></a> <dt> o <b>Settime_t</b>

<dt>  <table><tr><td>  public int  <b>Settime_t</b>(<td>time_t <td><tt>iTime</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Recycles an existing instance from time_t variable (see C RunTime Library).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTime</tt>
   <dd>   time_t representation of Date and Time.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>Successful.</dd>
     <dt>0 </dt>
        <dd>An error occurred.</dd>
   </dl>
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATTime&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public int  <b>operator !=</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if compared Objects are different,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<a name="operator &gt;"></a><a name="operator &gt;(CATTime&amp;)"></a> <dt> o <b>operator &gt;</b>

<dt>  <table><tr><td>  public int  <b>operator &gt;</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Greater-than operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if the Object is superior than iTimeToCompare,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<a name="operator &gt;="></a><a name="operator &gt;=(CATTime&amp;)"></a> <dt> o <b>operator &gt;=</b>

<dt>  <table><tr><td>  public int  <b>operator &gt;=</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Greater-than or equal operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if the Object is superior than or equal to iTimeToCompare,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<a name="operator &lt;"></a><a name="operator &lt;(CATTime&amp;)"></a> <dt> o <b>operator &lt;</b>

<dt>  <table><tr><td>  public int  <b>operator &lt;</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Less-than operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if the Object is inferior than iTimeToCompare,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<a name="operator &lt;="></a><a name="operator &lt;=(CATTime&amp;)"></a> <dt> o <b>operator &lt;=</b>

<dt>  <table><tr><td>  public int  <b>operator &lt;=</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Less-than or equal operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if the Object is inferior than or equal to iTimeToCompare,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<a name="operator +"></a><a name="operator +(CATTimeSpan&amp;)"></a> <dt> o <b>operator +</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">CATTime</a>  <b>operator +</b>(<td> const <a href="../System/class_CATTimeSpan_24233.htm">CATTimeSpan&amp;</a> <td><tt>iTimeSpan</tt>)const  </table></dt>
<dl>
  <dd>
 Addition operator from  CATTimeSpan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeSpan</tt>
   <dd>   CATTimeSpan instance representing elapsed time to add to.</dd>
</dl>
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(CATTimeSpan&amp;)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">const CATTime&</a>  <b>operator +=</b>(<td> const <a href="../System/class_CATTimeSpan_24233.htm">CATTimeSpan&amp;</a> <td><tt>iTimeSpan</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Addition assignment operator from CATTimeSpan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeSpan</tt>
   <dd>   CATTimeSpan instance representing elapsed time to add from to.</dd>
</dl>
</dl>
</dl>
<a name="operator -"></a><a name="operator -(CATTime&amp;)"></a> <dt> o <b>operator -</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTimeSpan_24233.htm">CATTimeSpan</a>  <b>operator -</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToSubstract</tt>)const  </table></dt>
<dl>
  <dd>
 Substraction operator from CATTime.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeToSubstract</tt>
   <dd>   CATTime instance representing date and time to substract from.</dd>
</dl>
</dl>
</dl>
<a name="operator -"></a><a name="operator -(CATTimeSpan&amp;)"></a> <dt> o <b>operator -</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">CATTime</a>  <b>operator -</b>(<td> const <a href="../System/class_CATTimeSpan_24233.htm">CATTimeSpan&amp;</a> <td><tt>iTimeSpan</tt>)const  </table></dt>
<dl>
  <dd>
 Substraction operator from CATTimeSpan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeSpan</tt>
   <dd>   CATTimeSpan instance representing elapsed time to substract from.</dd>
</dl>
</dl>
</dl>
<a name="operator -="></a><a name="operator -=(CATTimeSpan&amp;)"></a> <dt> o <b>operator -=</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">const CATTime&</a>  <b>operator -=</b>(<td> const <a href="../System/class_CATTimeSpan_24233.htm">CATTimeSpan&amp;</a> <td><tt>iTimeSpan</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Substraction assignment operator from CATTimeSpan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeSpan</tt>
   <dd>   CATTimeSpan instance representing elapsed time to substract from to.</dd>
</dl>
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATTime&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">CATTime&</a>  <b>operator =</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCopy</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Assignment operator from a CATTime instance.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeToCopy</tt>
   <dd>   CATTime instance to copy.</dd>
</dl>
</dl>
</dl>
<a name="operator ="></a><a name="operator =(time_t)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <a href="../System/class_CATTime_9647.htm">CATTime&</a>  <b>operator =</b>(<td>time_t <td><tt>iTimeToCopy</tt>)<a href="../DNBSystem/struct__0.htm"></a>  </table></dt>
<dl>
  <dd>
 Assignment operator from a time_t.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTimeToCopy</tt>
   <dd>   time_t variable to be copied.</dd>
</dl>
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATTime&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public int  <b>operator ==</b>(<td> const <a href="../System/class_CATTime_9647.htm">CATTime&amp;</a> <td><tt>iTimeToCompare</tt>)const  </table></dt>
<dl>
  <dd>
 Equality operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:
   <dl>
     <dt>1 </dt>
        <dd>if compared Objects are equal,</dd>
     <dt>0 </dt>
        <dd>otherwise,</dd>
     <dt>-1 </dt>
        <dd>if one or the two compared objects are Invalid for 
<a href="#GetStatus">GetStatus</a> </dd>   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATTime.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
