<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Interface CATIStreamMsg</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="interface_CATIScriptMethodCall_80022.htm">Previous</a>  <a href="interface_CATIStringList_40098.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>System Interface CATIStreamMsg</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---CATIStreamMsg
 </pre>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>CATIStreamMsg</b>
</p>
<p>
<b><i> Interface to stream and unstream backbone messages.</i></b><br>

 <b>Role</b>: This interface must be implemented by backbone messages
 to enable their streaming and unstreaming.
 <p>
 If your message contains simple data types, use the methods of 
 the <a href="../System/interface_CATIBBStreamer_38176.htm">CATIBBStreamer</a> interface implemented by the 
<a href="../System/class_CATBBMessage_27648.htm">CATBBMessage</a>  component.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#FreeStreamData(void*,uint32)"><b>FreeStreamData</b></a>(void*,uint32)
<dd>  Frees the backbone message streaming buffer.
 <dt> o 
    <a href="#SetMessageSpecifications()"><b>SetMessageSpecifications</b></a>()
<dd>  Sets backbone message class name and options.
 <dt> o 
    <a href="#StreamData(void**,uint32*)"><b>StreamData</b></a>(void**,uint32*)
<dd>  Streams a backbone message.
 <dt> o 
    <a href="#UnstreamData(void*,uint32)"><b>UnstreamData</b></a>(void*,uint32)
<dd>  Unstreams a backbone message.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="FreeStreamData"></a><a name="FreeStreamData(void*,uint32)"></a> <dt> o <b>FreeStreamData</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>FreeStreamData</b>(<td>void* <td><tt>Buffer</tt>,<tr><td></td><td><a href="../System/typedef_uint32_6646.htm">uint32</a> <td><tt>iLength</tt>)=0  </table></dt>
<dl>
  <dd>
 Frees the backbone message streaming buffer.
 <br><b>Role</b>: Any backbone message sent uses a buffer allocated by the 
<a href="#StreamData">StreamData</a> method. This buffer must be freed as soon as the message is sent.
 If your message contains simple data types,
 you can use the 
<a href="../System/interface_CATIBBStreamer_38176.htm">CATIBBStreamer</a> interface to free them. <dl>
 <dt><b>Example</b>:
 <dd>
 This example implements <tt>FreeStreamData</tt> to free the buffer containing a streamed backbone message.
 <pre>
 HRESULT FreeStreamData(void *Buffer, uint32 iLength)
 {
   ...
   CATIBBStreamer * pICATIBBStreamer = NULL ;
   HRESULT rc = QueryInterface(IID_CATIBBStreamer,(void**)&pICATIBBStreamer);
   if ( SUCCEEDED(rc) )
   {
     pICATIBBStreamer->ResetStreamData();  // free simple data types at once

     pICATIBBStreamer->Release();
     pICATIBBStreamer = NULL ;
   }
   ... // free other data 
 }
 </pre>
 </dd>
 </dl>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBuffer</tt>
   <dd>   The buffer to be freed.
   It was created by the </dd>
<a href="#StreamData">StreamData</a> method  
    <dt><tt> iLength</tt>
   <dd>   The <tt>iBuffer</tt> length expressed in bytes</dd>
</dl>
</dl>
</dl>
<a name="SetMessageSpecifications"></a><a name="SetMessageSpecifications()"></a> <dt> o <b>SetMessageSpecifications</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>SetMessageSpecifications</b>(<td>)=0  </table></dt>
<dl>
  <dd>
 Sets backbone message class name and options.
 <br><b>Role</b>: Use the 
<a href="../System/interface_CATICommMsg_23486.htm">CATICommMsg</a> interface to set  options and class message name. The class name of the message is mandatory, but for
 specifiers, if you precise anything your message is without answer 
 and received by all destinator application ( 
<a href="../System/typedef_CATMessageSpecifiers_82644.htm">CATMessageSpecifiers</a> ) <dl>
 <dt><b>Example</b>:
 <dd>
 This example implements <tt>SetMessageSpecifications</tt>
 <pre>
 HRESULT SetMessageSpecifications()
 {
   ...
   CATICommMsg * pICATICommMsg = NULL;
   HRESULT rc = QueryInterface(IID_CATICommMsg,(void**)&pICATICommMsg);
  
   if ( SUCCEEDED(rc) )
   {
     // To set the message class name (mandatory)
     // MessageClassName is the name of the component. 
     pICATICommMsg->SetMessageClass(MessageClassName);

     // To set options (if necessary)
     pICATICommMsg->SetMessageSpecifiers(..|..|..);

     pICATICommMsg->Release();
     pICATICommMsg = NULL;
   }
 }
 </pre>
 </dd>
 </dl>
</dl>
<a name="StreamData"></a><a name="StreamData(void**,uint32*)"></a> <dt> o <b>StreamData</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>StreamData</b>(<td>void** <td><tt>oBuffer</tt>,<tr><td></td><td><a href="../System/typedef_uint32_6646.htm">uint32*</a> <td><tt>oLength</tt>)=0  </table></dt>
<dl>
  <dd>
 Streams a backbone message.
 <br><b>Role</b>: To send a message to the backbone bus, the message must be
 first streamed. 
 If the message contains simple data types,
 you can use the 
<a href="../System/interface_CATIBBStreamer_38176.htm">CATIBBStreamer</a> interface to stream them. Once the message is sent, use 
<a href="#FreeStreamData">FreeStreamData</a> to free the buffer containing the streamed message.
 <dl>
 <dt><b>Example</b>:
 <dd>
 This example implements <tt>StreamData</tt> to stream a backbone message.
 <pre>
 HRESULT StreamData( void **oBuffer, uint32 *oLength)
 {
   ...
   CATIBBStreamer * pICATIBBStreamer = NULL ;
   HRESULT rc = QueryInterface(IID_CATIBBStreamer,(void**)&pICATIBBStreamer);
   // stream simple data types
   if ( SUCCEEDED(rc) )
   {
     // Begin by this instruction 
     pICATIBBStreamer->BeginStream();

     // Stream each message data according to its type
     // ----------------------------------------------
     pICATIBBStreamer->StreamFloat(..); 
     pICATIBBStreamer->StreamInt(..); 

     // End by these 3 instructions 
     int Length; 
     *oBuffer = pICATIBBStreamer->EndStream(&Length);
     *oLength = Length ;

     pICATIBBStreamer->Release();
     pICATIBBStreamer = NULL;
     }
	 ... // stream other data and update oLength
  }
  </pre>
  </dd>
  </dl>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBuffer</tt>
   <dd>     This buffer, to be allocated, contains all the streamed data 
  </dd>
    <dt><tt> oLength</tt>
   <dd>     The length of <tt>oBuffer</tt> expressed in bytes</dd>
</dl>
</dl>
</dl>
<a name="UnstreamData"></a><a name="UnstreamData(void*,uint32)"></a> <dt> o <b>UnstreamData</b>

<dt>  <table><tr><td>  public virtual <a href="../System/typedef_HRESULT_8345.htm">HRESULT</a>  <b>UnstreamData</b>(<td>void* <td><tt>iBuffer</tt>,<tr><td></td><td><a href="../System/typedef_uint32_6646.htm">uint32</a> <td><tt>iLength</tt>)=0  </table></dt>
<dl>
  <dd>
 Unstreams a backbone message.
 <br><b>Role</b>: A message sent to the backbone bus is streamed.
 This method allows you to unstream it.
 If the message contains simple data types,
 you can use the 
<a href="../System/interface_CATIBBStreamer_38176.htm">CATIBBStreamer</a> interface to unstream them. <dl>
 <dt><b>Example</b>:
 <dd>
 This example implements <tt>UnstreamData</tt> to unstream a received backbone message.
 <pre>
 HRESULT UnstreamData(void *iBuffer, uint32 iLength)
 {
   ...
   CATIBBStreamer * pICATIBBStreamer = NULL;
   HRESULT rc = QueryInterface(IID_CATIBBStreamer,(void**)&pICATIBBStreamer);
   // unstream simple data types
   if ( SUCCEEDED(rc) )
   {
     // Begin by this instruction 
     pICATIBBStreamer->BeginUnstream(iBuffer, iLength);

	 // Unstream message data (in the same order as when streaming)
     // according to its type 
	 // -----------------------------------------------------------
     pICATIBBStreamer->UnstreamFloat(..); 
     pICATIBBStreamer->UnstreamInt(..); 
	 ...
     // --------------------------
     // End by this instruction 
     pICATIBBStreamer->EndUnstream();

     pICATIBBStreamer->Release();
     pICATIBBStreamer = NULL;
   }
   ...  // unstream other data
 }
 </pre>
 </dd>
 </dl>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBuffer</tt>
   <dd>   The buffer containing the raw data to unstream
 </dd>
    <dt><tt> iLength</tt>
   <dd>   The length of <tt>iBuffer</tt> expressed in bytes</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIStreamMsg.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSysCommunication</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
