<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Interface CATIABase</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="interface_CATIACollection_45132.htm">Next</a>  <a href="../HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>System Interface CATIABase</h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">System.IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">System.IDispatch</a>
    |
    +---<a href="../System/class_CATBaseUnknown_40786.htm">System.CATBaseUnknown</a>
      |
      +---<a href="../System/class_CATBaseDispatch_45333.htm">System.CATBaseDispatch</a>
        |
        +---CATIABase
 </pre>
<p><b>Usage: you cannot implement this base interface directly. You must first derive it and then implement the derived interface. </b></p>
<hr>
<p>
 interface <b>CATIABase</b>
</p>
<p>
<b><i> Represents the base object for all other objects except
 collection and reference objects.</i></b><br>

 As a base object, it provides properties shared by any other object.
 Use the <a href="../System/class_CATBaseObject_33474.htm">CATBaseObject</a> adaptor class to implement this interface.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetItem(CATBSTR&amp;,CATBaseDispatch*&amp;)"><b>GetItem</b></a>(CATBSTR&amp;,CATBaseDispatch*&amp;)
<dd>  Returns an object from its name.
 <dt> o 
    <a href="#get_Application(CATIAApplication*&amp;)"><b>get_Application</b></a>(CATIAApplication*&amp;)
<dd>  Returns the application.
 <dt> o 
    <a href="#get_Name(CATBSTR&amp;)"><b>get_Name</b></a>(CATBSTR&amp;)
<dd>  Returns the name of the object.
 <dt> o 
    <a href="#get_Parent(CATBaseDispatch*&amp;)"><b>get_Parent</b></a>(CATBaseDispatch*&amp;)
<dd>  Returns the parent object.
 <dt> o 
    <a href="#put_Name(CATBSTR&amp;)"><b>put_Name</b></a>(CATBSTR&amp;)
<dd>  Sets the name of the object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetItem"></a><a name="GetItem(CATBSTR&amp;,CATBaseDispatch*&amp;)"></a> <dt> o <b>GetItem</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>GetItem</b>(<td> const <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR&amp;</a> <td><tt>IDName</tt>,<tr><td></td><td><a href="../System/class_CATBaseDispatch_45333.htm">CATBaseDispatch*&amp;</a> <td><tt>RealObj</tt>)=0  </table></dt>
<dl>
  <dd>
 Returns an object from its name.
 <br><b>Role</b>: To retrieve an object when only its name is available.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> IDName</tt>
   <dd>   The searched obect name
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The searched object
</dl>
</dl>
<a name="get_Application"></a><a name="get_Application(CATIAApplication*&amp;)"></a> <dt> o <b>get_Application</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>get_Application</b>(<td>CATIAApplication*&amp; <td><tt>oApplication</tt>)=0  </table></dt>
<dl>
  <dd>
 Returns the application.
 <br><b>Role</b>:
 The application is the root object of the object structure and can be
 retrieved from any object
 in this object structure using the Application property.
 The root object, also called top-level object, is the object located
 at the top of the application's object structure.
 It is used by clients to retrieve and navigate across all
 the application's subordinate objects.
 If the client runs in-process, it retrieves the object at the top of
 the object structure. If the client runs out-process, it should call
 the GetApplication method to retrieve the object at the top of the
 object structure, which is the only object accessible from outside.
 The Application property is thus the way to jump from any object
 up to the
 root of the object structure, allowing then to navigate downwards.
 For in-process scripting, the application is always referred to as
 <tt>CATIA</tt>.
 Note that the Application property of the Application object returns the
 Application object itself.
</dl>
<a name="get_Name"></a><a name="get_Name(CATBSTR&amp;)"></a> <dt> o <b>get_Name</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>get_Name</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR&amp;</a> <td><tt>oNameBSTR</tt>)=0  </table></dt>
<dl>
  <dd>
 Returns the name of the object.
 <br><b>Role</b>:
 The name is a character string automatically assigned to any object to
 handle it easier. Even if the Name property allows you to reassign an object name,
 this is not advised. Many objects, such as the application and the collections,
 have names that you must not change, and it's safer to use Name as a read only property.  
 When an object is part of a collection, the object name can often
 be used in place of the object rank to retrieve or remove the object,
 providing the Item and Remove methods of the collection feature
 an argument with the Variant type.
 A name must start with a letter.
 It can include numbers, but it can't include spaces.
 If the object has no name set, the default name returned is the
 object type. For example, the Name property of a Viewer3D object
 with no name set returns Viewer3D.
</dl>
<a name="get_Parent"></a><a name="get_Parent(CATBaseDispatch*&amp;)"></a> <dt> o <b>get_Parent</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>get_Parent</b>(<td><a href="../System/class_CATBaseDispatch_45333.htm">CATBaseDispatch*&amp;</a> <td><tt>oParent</tt>)=0  </table></dt>
<dl>
  <dd>
 Returns the parent object.
 <br><b>Role</b>:
 The parent object of a given object is the object just above
 in the object structure, usually the object that created this
 object and that aggregates it.
 In the case of an object part of a collection, the parent object
 can be the collection object itself or the object that 
 aggregates the collection object.
 The Parent property is the way to step upwards in the object
 structure. 
 Note that the Parent property of the Application object returns the
 Application object itself.
</dl>
<a name="put_Name"></a><a name="put_Name(CATBSTR&amp;)"></a> <dt> o <b>put_Name</b>

<dt>  <table><tr><td>  public virtual <a href="../DNBSystem/struct__0.htm">HRESULT __stdcall</a>  <b>put_Name</b>(<td> const <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR&amp;</a> <td><tt>iNameBSTR</tt>)=0  </table></dt>
<dl>
  <dd>
 Sets the name of the object.
 <br><b>Role</b>:
 The name is a character string automatically assigned to any object to
 handle it easier. Even if the Name property allows you to reassign an object name,
 this is not advised. Many objects, such as the application and the collections,
 have names that you must not change, and it's safer to use Name as a read only property.  
 When an object is part of a collection, the object name can often
 be used in place of the object rank to retrieve or remove the object,
 providing the Item and Remove methods of the collection feature
 an argument with the Variant type.
 A name must start with a letter.
 It can include numbers, but it can't include spaces.
 If the object has no name set, the default name returned is the
 object type. For example, the Name property of a Viewer3D object
 with no name set returns Viewer3D.
</dl>
<hr>
 This object is included in the file: <b>CATIABase.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
