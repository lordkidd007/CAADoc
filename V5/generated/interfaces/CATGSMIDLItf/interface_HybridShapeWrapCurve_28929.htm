<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATGSMIDLItf HybridShapeWrapCurve (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATGSMIDLItf.htm" href="../CATGSMIDLItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATGSMIDLItf";	}
		function getCurrentObjectName() { 
 	return "HybridShapeWrapCurve"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>HybridShapeWrapCurve<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_HybridShapeWrapCurve_28929','HybridShapeWrapCurve','0');</script>
<b><i> Represents the hybrid shape wrap curve surface object.</i></b><br>

 <b>Role</b>: To access the data of the hybrid shape wrap curve surface object.
 <p>This data includes:
 <ul>
 <li>Two support surfaces, one at each limit of the wrap curve surface</li>
 <li>Two curves, one for each support surface</li>
 <li>The curve closing points</li>
 </ul>
 <p>Use the CATIAHybridShapeFactory to create a HybridShapeWrapCurve object.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('HybridShapeFactory','','HybridShapeFactory') </script>
</dl>
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#FirstCurvesConstraint"><b>FirstCurvesConstraint</b></a>
<dd>  Returns or sets constraint at first curves of the WrapCurve.
 <dt>
    <a href="#LastCurvesConstraint"><b>LastCurvesConstraint</b></a>
<dd>  Returns or sets constraint at last curves of the WrapCurve.
 <dt>
    <a href="#Surface"><b>Surface</b></a>
<dd>  Returns or sets the surface to deform of the WrapCurve.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#GetCurves"><b>GetCurves</b></a>
<dd>  Returns a curve from the WrapCurve.
 <dt>
    <a href="#GetNumberOfCurves"><b>GetNumberOfCurves</b></a>
<dd>  Returns the number of couples of curves of the WrapCurve.
 <dt>
    <a href="#GetReferenceDirection"><b>GetReferenceDirection</b></a>
<dd>  Gets the reference direction projection of the wrap curve feature.
 <dt>
    <a href="#GetReferenceSpine"><b>GetReferenceSpine</b></a>
<dd>  Returns the reference spine of the wrap curve feature.
 <dt>
    <a href="#InsertCurves"><b>InsertCurves</b></a>
<dd>  Inserts a couple of reference curve and target curve to the wrap curve.
 <dt>
    <a href="#InsertReferenceCurve"><b>InsertReferenceCurve</b></a>
<dd>  Inserts a of reference curve to the wrap curve.
 <dt>
    <a href="#RemoveCurves"><b>RemoveCurves</b></a>
<dd>  Removes a couple of reference curve and target curve from the WrapCurve.
 <dt>
    <a href="#SetReferenceDirection"><b>SetReferenceDirection</b></a>
<dd>  Sets the reference direction projection to the wrap curve feature.
 <dt>
    <a href="#SetReferenceSpine"><b>SetReferenceSpine</b></a>
<dd>  Sets the reference spine to the wrap curve feature.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="FirstCurvesConstraint"><dt>

<table><tr><td>o Property <b>FirstCurvesConstraint</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script> </table></dt>
<dl>
  <dd>
 Returns or sets constraint at first curves of the WrapCurve.
  <br><b>Legal values</b>: 1 = no constraint, 2 = Deformed surface will have the same tangency 
  and the same curvature as the original surface at first curves.
 </dl>
 <dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>FirstCurvesConstraint</code> the constraint at first curves
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 Dim FirstCurvesConstraint As long
 Set FirstCurvesConstraint = ShpWrapCurve.<font color="red">FirstCurvesConstraint</font>
 </pre>
 </dl>
</dl>
<a name="LastCurvesConstraint"><dt>

<table><tr><td>o Property <b>LastCurvesConstraint</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script> </table></dt>
<dl>
  <dd>
 Returns or sets constraint at last curves of the WrapCurve.
  <br><b>Legal values</b>: 1 = no constraint, 2 = Deformed surface will have the same tangency 
  and the the same curvatureas the original surface at last curves.
 </dl>
 <dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>LastCurvesConstraint</code> the constraint at last curves
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 Dim LastCurvesConstraint As long
 Set LastCurvesConstraint = ShpWrapCurve.<font color="red">LastCurvesConstraint</font>
 </pre>
 </dl>
</dl>
<a name="Surface"><dt>

<table><tr><td>o Property <b>Surface</b>(<td>) As <script type="text/javascript"> activateLink('Reference','Reference')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the surface to deform of the WrapCurve.
 <br>Sub-element(s) supported (see 
<script type="text/javascript"> activateLinkAnchor('Boundary','','Boundary') </script> object):  
<script type="text/javascript"> activateLinkAnchor('Face','','Face') </script>. </dl>
 <dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>SurfaceToDeform</code> the surface to deform
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 SurfaceToDeform = ShpWrapCurve.<font color="red">Surface</font>
 </pre>
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="GetCurves"><dt>

<table><tr><td>o Sub <b>GetCurves</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>oReferenceCurve</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>oTargetCurve</tt>)</table></dt>
<dl>
  <dd>
 Returns a curve from the WrapCurve.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position of the curves in the list of curves. 
 </dd>
    <dt><tt> oReferenceCurve</tt>
   <dd>    the reference curve. 
 </dd>
    <dt><tt> oTargetCurve</tt>
   <dd>    the target curve.
   <br><b>Legal values</b>: can be egal to Nothing. In this case, the associated ref curve will be fixed.
 <dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>WrapCurveRefCurve</code> the first reference curve 
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature and retrieves in <code>WrapCurveTargCurve</code>
 the first target curve of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 Dim WrapCurveRefCurve As Reference
 Dim WrapCurveTargCurve As Reference
 ShpWrapCurve.<font color="red">GetCurve</font>(2)
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="GetNumberOfCurves"><dt>

<table><tr><td>o Func <b>GetNumberOfCurves</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script> </table></dt>
<dl>
  <dd>
 Returns the number of couples of curves of the WrapCurve.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>       The number of couples of curves
     <br><b>Legal values</b>: positive or null.
 </dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>NumberOfCurves</code> the number of couples of curves
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 NumberOfCurves = ShpWrapCurve.<font color="red">GetNumberOfCurves</font>(2)
 </pre>
 </dl>
</dl>
</dl>
<a name="GetReferenceDirection"><dt>

<table><tr><td>o Sub <b>GetReferenceDirection</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>oDirectionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HybridShapeDirection','HybridShapeDirection')</script> <td><tt>oDirection</tt>)</table></dt>
<dl>
  <dd>
 Gets the reference direction projection of the wrap curve feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDirectionType</tt>
   <dd>     type of direction.
     <br><b>Legal values</b>: 1 = reference direction is computed,
       and 2 = user direction.
   </dd>
    <dt><tt> oDirection</tt>
   <dd>     curve to be added as a direction, if oDirectionType = 2.
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>RefDirection</code> the reference direction
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature and 
 in <code>RefDirectionType</code> the reference direction
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve
 <pre>
 Dim RefDirectionType As long 
 Dim RefDirection As CATIAHybridShapeDirection 
 ShpWrapCurve.<font color="red">SetReferenceDirection</font> (RefDirectionType, RefDirection)
 </pre></dd>
</dl>
</dl>
</dl>
<a name="GetReferenceSpine"><dt>

<table><tr><td>o Sub <b>GetReferenceSpine</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>oSpineType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>oSpine</tt>)</table></dt>
<dl>
  <dd>
 Returns the reference spine of the wrap curve feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSpineType</tt>
   <dd>     type of spine.
     <br><b>Legal values</b>: 1 = Reference Spine is equal to the first reference curve, 
       and 2 = user spine.
   </dd>
    <dt><tt> oSpine</tt>
   <dd>     curve to be added as a spine, if iSpineType = 2.
 </dl>
 <dt><b>Example</b>:
 <dd>
 This example retrieves in <code>RefSpine</code> the reference spine
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature and
 in <code>RefSpineType</code> the reference spine type.
 <pre>
 Dim RefSpineType As long 
 Dim RefSpine As Reference 
 ShpWrapCurve.<font color="red">GetReferenceSpine</font> (RefSpineType, RefSpine)
 </pre></dd>
</dl>
</dl>
</dl>
<a name="InsertCurves"><dt>

<table><tr><td>o Sub <b>InsertCurves</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>iReferenceCurve</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>iTargetCurve</tt>)</table></dt>
<dl>
  <dd>
 Inserts a couple of reference curve and target curve to the wrap curve.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position of the curves in the list of curves. 
     <br><b>Legal values</b>: 0 for the end of the list, or positive and not null.
 </dd>
    <dt><tt> iReferenceCurve</tt>
   <dd>    the reference curve. 
 <br>Sub-element(s) supported (see </dd>
</dl>
<script type="text/javascript"> activateLinkAnchor('Boundary','','Boundary') </script> object):  
<script type="text/javascript"> activateLinkAnchor('TriDimFeatEdge','','TriDimFeatEdge') </script> and 
<script type="text/javascript"> activateLinkAnchor('BiDimFeatEdge','','BiDimFeatEdge') </script>.  
    <dt><tt> iTargetCurve</tt>
   <dd>    the target curve.
 <br>Sub-element(s) supported (see </dd>
<script type="text/javascript"> activateLinkAnchor('Boundary','','Boundary') </script> object):  
<script type="text/javascript"> activateLinkAnchor('TriDimFeatEdge','','TriDimFeatEdge') </script> and 
<script type="text/javascript"> activateLinkAnchor('BiDimFeatEdge','','BiDimFeatEdge') </script>.  </dl>
 <dt><b>Example</b>:
 <dd>
 This example sets the <code>RefCurveForWrapCurve</code> curve and the <code>TargCurveForWrapCurve</code> curve
 at the end of the list to the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 ShpWrapCurve.<font color="red">InsertCurves</font> (0, RefCurveForWrapCurve, TargCurveForWrapCurve)
 </pre>
 </dl>
</dl>
</dl>
<a name="InsertReferenceCurve"><dt>

<table><tr><td>o Sub <b>InsertReferenceCurve</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>iReferenceCurve</tt>)</table></dt>
<dl>
  <dd>
 Inserts a of reference curve to the wrap curve.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position of the curves in the list of curves. 
     <br><b>Legal values</b>: 0 for the end of the list, or positive and not null.
 </dd>
    <dt><tt> iReferenceCurve</tt>
   <dd>    the reference curve. 
 <br>Sub-element(s) supported (see </dd>
</dl>
<script type="text/javascript"> activateLinkAnchor('Boundary','','Boundary') </script> object):  
<script type="text/javascript"> activateLinkAnchor('TriDimFeatEdge','','TriDimFeatEdge') </script> and 
<script type="text/javascript"> activateLinkAnchor('BiDimFeatEdge','','BiDimFeatEdge') </script>.  <dt><b>Example</b>:
 <dd>
 This example sets the <code>RefCurveForWrapCurve</code> curve 
 at the end of the list to the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 ShpWrapCurve.<font color="red">InsertCurves</font> (0, RefCurveForWrapCurve)
 </pre>
 </dl>
</dl>
</dl>
<a name="RemoveCurves"><dt>

<table><tr><td>o Sub <b>RemoveCurves</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iPosition</tt>)</table></dt>
<dl>
  <dd>
 Removes a couple of reference curve and target curve from the WrapCurve. 
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position of the curves in the list of curves. 
     <br><b>Legal values</b>: positive, not null and lower to numberOfCurves
 </dl>
 <dt><b>Example</b>:
 <dd>
 This example removes the first couple of reference curve and target curve 
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 ShpWrapCurve.<font color="red">RemoveCurves</font> (1)
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="SetReferenceDirection"><dt>

<table><tr><td>o Sub <b>SetReferenceDirection</b>(<td><script type="text/javascript"> activateLink('HybridShapeDirection','HybridShapeDirection')</script> <td><tt>iDirection</tt>)</table></dt>
<dl>
  <dd>
 Sets the reference direction projection to the wrap curve feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDirection</tt>
   <dd>     curve to be added as a direction, if iDirectionType = 2.
 <dt><b>Example</b>:
 <dd>
 This example sets the <code>RefDirection</code> curve as the reference direction
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 ShpWrapCurve.<font color="red">SetReferenceDirection</font> RefDirection
 </pre></dd>
</dl>
</dl>
</dl>
<a name="SetReferenceSpine"><dt>

<table><tr><td>o Sub <b>SetReferenceSpine</b>(<td><script type="text/javascript"> activateLink('Reference','Reference')</script> <td><tt>iSpine</tt>)</table></dt>
<dl>
  <dd>
 Sets the reference spine to the wrap curve feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSpine</tt>
   <dd>     curve to be added as a spine.
 <br>Sub-element(s) supported (see </dd>
</dl>
<script type="text/javascript"> activateLinkAnchor('Boundary','','Boundary') </script> object):  
<script type="text/javascript"> activateLinkAnchor('TriDimFeatEdge','','TriDimFeatEdge') </script>, 
<script type="text/javascript"> activateLinkAnchor('BiDimFeatEdge','','BiDimFeatEdge') </script>. </dl>
 <dt><b>Example</b>:
 <dd>
 This example sets the <code>Curve10</code> curve as the reference Spine
 of the <code>ShpWrapCurve</code> hybrid shape WrapCurve feature.
 <pre>
 ShpWrapCurve.<font color="red">SetReferenceSpine</font> Curve10
 </pre>
 </dl>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

