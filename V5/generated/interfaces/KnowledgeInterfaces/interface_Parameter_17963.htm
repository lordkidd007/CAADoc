<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Parameter (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Object Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href=".htm">Previous</a>  <a href="interface_ParameterSet_31016.htm">Next</a>  <a href="../CAAHomeIdx.htm">Indexes</a>  </pre>
<hr>
<h1>Parameter<font size=-1> (Object)</font></h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">IDispatch</a>
    |
    +---<a href="../System/interface_CATBaseUnknown_40786.htm">CATBaseUnknown</a>
      |
      +---<a href="../System/interface_CATBaseDispatch_45333.htm">CATBaseDispatch</a>
        |
        +---<a href="../System/interface_AnyObject_17321.htm">AnyObject</a>
          |
          +---Parameter
 </pre>
<hr><br>
<b><i> Represents the parameter.</i></b><br>

 It can be computed from a relation: formula, program, or check.
 It is an abstract object which is not intended to be created as such,
 but from which the integer, bolean, real, and string parameters derive.
 Here is an example to create one:
 <pre>
	Dim CATDocs As Documents
 Set CATDocs = CATIA.Documents
 Dim part1 As Document
 Set part1   = CATDocs.Add("CATPart")
 Dim density As RealParam
 Set density = part1.Part.Parameters.CreateReal("density", 2.5)
 </pre>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../KnowledgeInterfaces/interface_IntParam_13730.htm">IntParam</a>, <a href="../KnowledgeInterfaces/interface_BoolParam_17217.htm">BoolParam</a>, <a href="../KnowledgeInterfaces/interface_RealParam_17053.htm">RealParam</a>, <a href="../KnowledgeInterfaces/interface_StrParam_13874.htm">StrParam</a>, <a href="../KnowledgeInterfaces/interface_Formula_11046.htm">Formula</a>, <a href="../KnowledgeInterfaces/interface_Rule_3720.htm">Rule</a>, <a href="../KnowledgeInterfaces/interface_Check_5408.htm">Check</a>
</dl>
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#Comment"><b>Comment</b></a>
<dd>  Returns or sets the parameter object comment.
 <dt>
    <a href="#Context"><b>Context</b></a>
<dd>  Returns the context of the parameter : a part, a product, a drafting, a process, depending where the parameter is.
 <dt>
    <a href="#Hidden"><b>Hidden</b></a>
<dd>  Returns or sets wether the parameter is hidden or should be hidden.
 <dt>
    <a href="#IsTrueParameter"><b>IsTrueParameter</b></a>
<dd>  Returns a boolean saying if the parameter is a true one (real, dimension, string, etc.
 <dt>
    <a href="#OptionalRelation"><b>OptionalRelation</b></a>
<dd>  Returns the relation that can be used to compute the parameter.
 <dt>
    <a href="#ReadOnly"><b>ReadOnly</b></a>
<dd>  Returns whether the parameter can be modified.
 <dt>
    <a href="#Renamed"><b>Renamed</b></a>
<dd>  Returns a boolean saying if the parameter is a renamed parameter or not.
 <dt>
    <a href="#UserAccessMode"><b>UserAccessMode</b></a>
<dd>  Returns the user access mode of the parameter.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Rename"><b>Rename</b></a>
<dd>  Renames the parameter.
 <dt>
    <a href="#ValuateFromString"><b>ValuateFromString</b></a>
<dd>  Valuates a parameter using a string as input.
 <dt>
    <a href="#ValueAsString"><b>ValueAsString</b></a>
<dd>  Returns the value of the parameter as a string.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="Comment"><dt>

<table><tr><td>o Property <b>Comment</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Returns or sets the parameter object comment.
</dl>
<a name="Context"><dt>

<table><tr><td>o Property <b>Context</b>(<td>) As <a href="../System/interface_AnyObject_17321.htm">CATIABase</a>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the context of the parameter : a part, a product, a drafting, a process, depending where the parameter is.
</dl>
<a name="Hidden"><dt>

<table><tr><td>o Property <b>Hidden</b>(<td>) As boolean </table></dt>
<dl>
  <dd>
 Returns or sets wether the parameter is hidden or should be hidden.
 or not.
</dl>
<a name="IsTrueParameter"><dt>

<table><tr><td>o Property <b>IsTrueParameter</b>(<td>) As boolean  (Read Only)</table></dt>
<dl>
  <dd>
 Returns a boolean saying if the parameter is a true one (real, dimension, string, etc.) or a geometrical one (isolated points, curves, surfaces).
</dl>
<a name="OptionalRelation"><dt>

<table><tr><td>o Property <b>OptionalRelation</b>(<td>) As <a href="../KnowledgeInterfaces/interface_Relation_14366.htm">CATIARelation</a>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the relation that can be used to compute the parameter.
 As this relation might not exist, NULL may be returned,
 so a test is required.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example checks if there is a relation to compute the
 <tt>param1</tt> parameter, and if no relation exists, displays a
 message box:
 <pre>
 Set param1_rel = param1.<font color="red">OptionalRelation</font>
 If param1_rel is Nothing Then
      MsgBox "No relation to compute param1"
 End If
 </pre>
 </dl>
</dl>
<a name="ReadOnly"><dt>

<table><tr><td>o Property <b>ReadOnly</b>(<td>) As boolean  (Read Only)</table></dt>
<dl>
  <dd>
 Returns whether the parameter can be modified.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example checks if the <tt>param1</tt> parameter can be modified,
 and if it cannot, displays a message box:
 <pre>
 If ( param1.<font color="red">ReadOnly</font> ) Then
      MsgBox "No way to change param1"
 End If
 </pre>
 </dl>
</dl>
<a name="Renamed"><dt>

<table><tr><td>o Property <b>Renamed</b>(<td>) As boolean  (Read Only)</table></dt>
<dl>
  <dd>
 Returns a boolean saying if the parameter is a renamed parameter or not.
</dl>
<a name="UserAccessMode"><dt>

<table><tr><td>o Property <b>UserAccessMode</b>(<td>) As long  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the user access mode of the parameter.

 </dl>
 <dt>0<dd>Read only parameter (cannot be destroyed).
 <dt>1<dd>Read/write parameter (cannot be destroyed).
 <dt>2<dd>User parameter (can be read, written and destroyed).
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Rename"><dt>

<table><tr><td>o Sub <b>Rename</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iName</tt>)</table></dt>
<dl>
  <dd>
 Renames the parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>   The new name of the parameter
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example renames the <tt>param1</tt> parameter
 to <tt>PartSeatbodyMinimumThickness</tt>:
 <pre>
 Call param1.<font color="red">Rename</font>("PartSeatbodyMinimumThickness")
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="ValuateFromString"><dt>

<table><tr><td>o Sub <b>ValuateFromString</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iValue</tt>)</table></dt>
<dl>
  <dd>
 Valuates a parameter using a string as input.
 The string depends on parameter nature :<p>
 "True" or "False" for Boolean<p>
 a numerical value for Integer or Real<p>
 a numerical value with or without a unit for Dimension<p>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd>   The value to assign to the dimension parameter
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example sets the value of the existing <tt>dimension</tt> parameter
 to a new value:
 <pre>
 dimension.<font color="red">ValuateFromString</font>("300mm");
 </pre></dd>
</dl>
</dl>
</dl>
<a name="ValueAsString"><dt>

<table><tr><td>o Func <b>ValueAsString</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Returns the value of the parameter as a string.<p>
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example gets the value of the existing <tt>dimension</tt> parameter
 and shows it in a message box
 <pre>
 Dim str
 str = dimension.<font color="red">ValueAsString</font>;
 MessageBox str
 </pre>
</dl>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
