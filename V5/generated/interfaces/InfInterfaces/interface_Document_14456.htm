<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>InfInterfaces Document (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
</head>
<body>
<pre><a href="../main.htm">All Frameworks</a>  <a href="../tree.htm">Object Hierarchy</a>  <a href="../InfInterfaces.htm">This Framework</a>  <a href=".htm">Previous</a>  <a href="interface_DocumentationSettingAtt_113191.htm">Next</a>  <a href="../CAAHomeIdx.htm">Indexes</a>  </pre>
<hr>
<h1>Document<font size=-1> (Object)</font></h1>
<pre>
<a href="../System/interface_IUnknown_14460.htm">IUnknown</a>
  |
  +---<a href="../System/interface_IDispatch_17333.htm">IDispatch</a>
    |
    +---<a href="../System/interface_CATBaseUnknown_40786.htm">CATBaseUnknown</a>
      |
      +---<a href="../System/interface_CATBaseDispatch_45333.htm">CATBaseDispatch</a>
        |
        +---<a href="../System/interface_AnyObject_17321.htm">AnyObject</a>
          |
          +---Document
 </pre>
<hr><br>
<b><i> Represents the document.</i></b><br>

 The document is the object handled by the operating system as a whole
 that stores your data in files and databases.
 It is assigned a type determined by its contents. It may contain other
 documents with a different type. For example,
 a PartDocument contains a part and can be contained in a ProductDocument.
 A workshop is associated with a document to gather all the commands
 that can be used to create, modify, and edit the objects making up the
 the document. These commands are arranged in menus and toolbars.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="../MecModInterfaces/interface_PartDocument_31472.htm">PartDocument</a>, <a href="../ProductStructureInterfaces/interface_ProductDocument_49026.htm">ProductDocument</a>, <a href="../DraftingInterfaces/interface_DrawingDocument_48585.htm">DrawingDocument</a>
</dl>
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#Cameras"><b>Cameras</b></a>
<dd>  Returns the document's collection of cameras.
 <dt>
    <a href="#CurrentFilter"><b>CurrentFilter</b></a>
<dd>  Returns or sets the current visualization filter.
 <dt>
    <a href="#CurrentLayer"><b>CurrentLayer</b></a>
<dd>  Returns or sets the current layer.
 <dt>
    <a href="#FullName"><b>FullName</b></a>
<dd>  Returns the document's full file name, including its path.
 <dt>
    <a href="#Path"><b>Path</b></a>
<dd>  Returns the document's file path.
 <dt>
    <a href="#ReadOnly"><b>ReadOnly</b></a>
<dd>  Returns whether the file containing the document can be read only,
 on can be read and written.
 <dt>
    <a href="#Saved"><b>Saved</b></a>
<dd>  Returns whether the document has been modified, and thus needs to be
 saved.
 <dt>
    <a href="#SeeHiddenElements"><b>SeeHiddenElements</b></a>
<dd>  Returns or sets the document's hidden elements visibility.
 <dt>
    <a href="#Selection"><b>Selection</b></a>
<dd>   Returns the current selection.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Activate"><b>Activate</b></a>
<dd>  Activates the document.
 <dt>
    <a href="#Close"><b>Close</b></a>
<dd>  Closes the document.
 <dt>
    <a href="#CreateFilter"><b>CreateFilter</b></a>
<dd>  Creates a new visualization filter from a name and a definition.
 <dt>
    <a href="#CreateReferenceFromName"><b>CreateReferenceFromName</b></a>
<dd>  Creates a reference from a GenericNaming label.
 <dt>
    <a href="#ExportData"><b>ExportData</b></a>
<dd>  Exports the data contained in the document to another format.
 <dt>
    <a href="#GetWorkbench"><b>GetWorkbench</b></a>
<dd>  Returns one of the workbenches of the document.
 <dt>
    <a href="#Indicate2D"><b>Indicate2D</b></a>
<dd>  Runs an 2D interactive indication command.
 <dt>
    <a href="#Indicate3D"><b>Indicate3D</b></a>
<dd>  Runs an 3D interactive indication command.
 <dt>
    <a href="#NewWindow"><b>NewWindow</b></a>
<dd>  Creates a new window for the document.
 <dt>
    <a href="#RemoveFilter"><b>RemoveFilter</b></a>
<dd>  Removes an existing visualization filter.
 <dt>
    <a href="#Save"><b>Save</b></a>
<dd>  Saves the document.
 <dt>
    <a href="#SaveAs"><b>SaveAs</b></a>
<dd>  Saves the document with another name.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="Cameras"><dt>

<table><tr><td>o Property <b>Cameras</b>(<td>) As <a href="../InfInterfaces/interface_Cameras_10798.htm">CATIACameras</a>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the document's collection of cameras.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>CameraCollection</tt> the collection of
 cameras attached to the <tt>Doc</tt> document.
 <pre>
 Dim CameraCollection As Cameras
 Set CameraCollection = Doc.<font color="red">Cameras</font>
 </pre>
 </dl>
</dl>
<a name="CurrentFilter"><dt>

<table><tr><td>o Property <b>CurrentFilter</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Returns or sets the current visualization filter.
 <tt>CurrentFilter</tt> uses the filter name and not its definition.
 The "All visible" filter means that all layers are visible.
 For all filters, remind that the current layer is always visible.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example makes the filter named "Filter001" as the current visualization filter
 for the <tt>Doc</tt> document.
 <pre>
 Doc.<font color="red">CurrentFilter</font> = "Filter001"
 </pre>
 </dl>
</dl>
<a name="CurrentLayer"><dt>

<table><tr><td>o Property <b>CurrentLayer</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Returns or sets the current layer.
 <tt>CurrentLayer</tt> uses the layer name and not its number.
 The "None" layer means that there is no current layer.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example makes the layer named "Layer 3" as the current layer 
 for the <tt>Doc</tt> document. 
 <pre>
 Doc.<font color="red">CurrentLayer</font> = "Layer 3"
 </pre>
 </dl>
</dl>
<a name="FullName"><dt>

<table><tr><td>o Property <b>FullName</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the document's full file name, including its path.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>DocFullName</tt> the <tt>Doc</tt>
 document's full file name.
 <pre>
 DocFullName = Doc.<font color="red">FullName</font>
 </pre>
 The returned value is like this:
 <pre>
 e:\users\psr\Parts\MyNicePart.CATPart
 </pre>
 </dl>
</dl>
<a name="Path"><dt>

<table><tr><td>o Property <b>Path</b>(<td>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the document's file path.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>DocPath</tt> the path where the
 <tt>Doc</tt> document is stored.
 <pre>
 DocPath = Doc.<font color="red">Path</font>
 </pre>
 The returned value is like this:
 <pre>
 e:\users\psr\Parts
 </pre>
 </dl>
</dl>
<a name="ReadOnly"><dt>

<table><tr><td>o Property <b>ReadOnly</b>(<td>) As boolean  (Read Only)</table></dt>
<dl>
  <dd>
 Returns whether the file containing the document can be read only,
 on can be read and written.
 <br>
 <b>True</b> if the file is read-only. 
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>IsReadOnly</tt> the ability to read,
 and possibly to write in, the file containing the <tt>Doc</tt> document.
 <pre>
 IsReadOnly = Doc.<font color="red">ReadOnly</font>
 </pre>
 </dl>
</dl>
<a name="Saved"><dt>

<table><tr><td>o Property <b>Saved</b>(<td>) As boolean  (Read Only)</table></dt>
<dl>
  <dd>
 Returns whether the document has been modified, and thus needs to be
 saved.<br>
 This happens when the document has changed since either its creation or
 its last save.
 <ul>
 <li><b>True</b> if the document has not been changed: the document doesn't need to be saved.</li>
 <li><b>False</b> if the document has been changed: the document needs to be saved.</li>
 </ul>
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>HasChanged</tt> whether the <tt>Doc</tt>
 document needs to be saved.
 <pre>
 HasChanged = NOT Doc.<font color="red">Saved</font>
 </pre>
 </dl>
</dl>
<a name="SeeHiddenElements"><dt>

<table><tr><td>o Property <b>SeeHiddenElements</b>(<td>) As boolean </table></dt>
<dl>
  <dd>
 Returns or sets the document's hidden elements visibility.
 <br>
 <b>True</b> if the document's hidden elements are visible to the user.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example makes the <tt>Doc</tt> document's hidden elements visible.
 <pre>
 Doc.<font color="red">SeeHiddenElements</font> = True
 </pre>
 </dl>
</dl>
<a name="Selection"><dt>

<table><tr><td>o Property <b>Selection</b>(<td>) As <a href="../InfInterfaces/interface_Selection_18040.htm">CATIASelection</a>  (Read Only)</table></dt>
<dl>
  <dd>
  Returns the current selection.
 The current selection is the object or the set of objects the end user
 has selected, usually with the mouse, in the active document displayed
 in the active window.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example returns in <tt>CurSel</tt> the current selection
 in the <tt>Doc</tt> document
 <pre>
 Dim CurSel As Selection
 Set CurSel = Doc.<font color="red">Selection</font>
 </pre>
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Activate"><dt>

<table><tr><td>o Sub <b>Activate</b>(<td>)</table></dt>
<dl>
  <dd>
 Activates the document.
 Activating a document means that this document is the one on which
 the end user is now working on. This document possibly reconfigures
 the menu bar and toolbars with its own commands if its type
 is different from the type of the previous active document.
 The first window in the window collection which contains this
 document becomes the active one.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example activates the <tt>Doc</tt> document.
 <pre>
 Doc.<font color="red">Activate</font>()
 </pre>
 </dl>
</dl>
<a name="Close"><dt>

<table><tr><td>o Sub <b>Close</b>(<td>)</table></dt>
<dl>
  <dd>
 Closes the document.
 This closes all the windows displaying the document.
 If the document needs to be saved, the end user is prompted
 whether to save the document, or to close it anyway.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example closes the <tt>Doc</tt> document
 <pre>
 Doc.<font color="red">Close</font>()
 </pre>
 </dl>
</dl>
<a name="CreateFilter"><dt>

<table><tr><td>o Sub <b>CreateFilter</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iFilterName</tt>,<tr><td></td><td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iFilterDefinition</tt>)</table></dt>
<dl>
  <dd>
 Creates a new visualization filter from a name and a definition.
 Fails if there is already a filter named iFilterName.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilterName</tt>
   <dd>   The filter name.
 </dd>
    <dt><tt> iFilterDefinition</tt>
   <dd>	 The filter definition
 <! @sample>
 <dt><b>Example:</b>
 <dd>
 This example creates the filter named "Filter001" and with "layer= 2 & layer= 1" definition
 for the <tt>Doc</tt> document.
 <pre>
 Doc.<font color="red">CreateFilter</font> ("Filter001", "layer= 2 & layer= 1")
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="CreateReferenceFromName"><dt>

<table><tr><td>o Func <b>CreateReferenceFromName</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iLabel</tt>) As <a href="../InfInterfaces/interface_Reference_17481.htm">CATIAReference</a> </table></dt>
<dl>
  <dd>
 Creates a reference from a GenericNaming label.
 Each kind of document provides a specific implementation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLabel</tt>
   <dd>   The GenericNaming identification for an object.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference to the object.
</dl>
</dl>
<a name="ExportData"><dt>

<table><tr><td>o Sub <b>ExportData</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>fileName</tt>,<tr><td></td><td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>format</tt>)</table></dt>
<dl>
  <dd>
 Exports the data contained in the document to another format.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> fileName</tt>
   <dd>   The name of the exported file
 </dd>
    <dt><tt> format</tt>
   <dd>   The name of the format
 <! @sample>
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example writes the <tt>Doc</tt> document in the IGES format
 under the <tt>IGESDoc</tt> name.
 <pre>
 Doc.<font color="red">ExportData</font>("IGESDoc", "igs")
 </pre></dd>
</dl>
</dl>
</dl>
<a name="GetWorkbench"><dt>

<table><tr><td>o Func <b>GetWorkbench</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>workbenchName</tt>) As <a href="../InfInterfaces/interface_Workbench_17725.htm">CATIAWorkbench</a> </table></dt>
<dl>
  <dd>
 Returns one of the workbenches of the document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> workbenchName</tt>
   <dd>   The name of the workbench
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves the Structural workbench on the <tt>Doc</tt>
 document
 <pre>
 Doc.<font color="red">GetWorkbench</font>("Structural")
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="Indicate2D"><dt>

<table><tr><td>o Func <b>Indicate2D</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iMessage</tt>,<tr><td></td><td><a href="../System/typedef_CATSafeArrayVariant_73843.htm">CATSafeArrayVariant</a> <td><tt>ioDocumentWindowLocation</tt>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Runs an 2D interactive indication command.
 <br><b>Role</b>: <tt>Indicate2D</tt> asks to the user to select a location
 in the document window. It can be used:
 <br><li>When this document is a 
<a href="../DraftingInterfaces/interface_DrawingDocument_48585.htm">DrawingDocument</a> </li> <br><li>When this document is a 
<a href="../MecModInterfaces/interface_PartDocument_31472.htm">PartDocument</a>, and a sketch is  being edited ( 
<a href="../SketcherInterfaces/interface_Sketch_8026.htm#OpenEdition">Sketch.OpenEdition</a> has been called and   
<a href="../SketcherInterfaces/interface_Sketch_8026.htm#CloseEdition">Sketch.CloseEdition</a> has not been called yet)</li><br> <b>See also:</b>
<a href="../InfInterfaces/interface_Selection_18040.htm#IndicateOrSelectElement2D">Selection.IndicateOrSelectElement2D</a> which can, in particular, enable indication and not selection (positionning the iFilterType parameter to an empty string), whichs enables to subscribe to mouse move 
 events, positionning the iTriggeringOnPreSelection to true.<br>
 <b>Note:</b>If the scripting language is Visual Basic for Applications or Visual Basic 6 Development Studio, then,
 you have to know that during the execution of an interactive selection method such as this one, no form
 (dialog box) must be displayed, otherwise it would lead to unpredictible results. In a form method, before 
 calling an interactive selection method such as Document.Indicate2D, you must hide all forms, and, after the
 call to the method, you must show the forms.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> A string which instructs the user that he must select a location in the document window.
 This string is displayed in the message area located at the left of the power input area.
 </dd>
    <dt><tt> oDocumentWindowLocation</tt>
   <dd> An array made of 2 doubles: X, Y - coordinates array of the location
 the user specified in the document window.
 </dd>
    <dt><tt> oOutputState</tt>
   <dd> The state of the indication command once <tt>Indicate2D</tt> returns. 
 It can be either "Normal" (the indication has succeeded), "Cancel" (the user wants to cancel the VB command, 
 which must exit immediately, see the oOutputState parameter of the </dd>
</dl>
<a href="../InfInterfaces/interface_Selection_18040.htm#SelectElement2">Selection.SelectElement2</a> method), "Undo" or "Redo". About the use of "Undo" and "Redo", see the example of the
 
<a href="../InfInterfaces/interface_Selection_18040.htm#SelectElement2">Selection.SelectElement2</a> method. 
  <dt> <b>Example:</b> 
  <dd>  The following example suppose a drawing document is currently edited. It asks the end user to select a
 location in the current drawing window, and creates a text (see 
<a href="../DraftingInterfaces/interface_DrawingText_26559.htm">DrawingText</a> ) at the specified location:  <pre>
 Set Document = CATIA.ActiveDocument : Set Selection = Document.Selection : Set DrawingSheets  = Document.Sheets 
 Set DrawingSheet = DrawingSheets.ActiveSheet : Set DrawingViews = DrawingSheet.Views
 Set DrawingView = DrawingViews.ActiveView : Set DrawingTexts = DrawingView.Texts
 'We propose to the user that he specify a location in the drawing window
 Dim DrawingWindowLocation(1)
 Status=Document.Indicate2D("select a location into the drawing window",DrawingWindowLocation)
 if (Status = "Cancel") then Exit Sub
 Set DrawingText=DrawingTexts.Add("Hello world",DrawingWindowLocation(0),DrawingWindowLocation(1)) 
 </pre>
</dl>
</dl>
<a name="Indicate3D"><dt>

<table><tr><td>o Func <b>Indicate3D</b>(<td><a href="../System/interface_AnyObject_17321.htm">CATIABase</a> <td><tt>iPlanarGeometricObject</tt>,<tr><td></td><td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iMessage</tt>,<tr><td></td><td><a href="../System/typedef_CATSafeArrayVariant_73843.htm">CATSafeArrayVariant</a> <td><tt>ioWindowLocation2D</tt>,<tr><td></td><td><a href="../System/typedef_CATSafeArrayVariant_73843.htm">CATSafeArrayVariant</a> <td><tt>ioWindowLocation3D</tt>) As <a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> </table></dt>
<dl>
  <dd>
 Runs an 3D interactive indication command.
 <br><b>Role</b>: <tt>Indicate3D</tt> asks to the user to select a location
 in the document window. It cannot be used:
 <br><li>When this document is a 
<a href="../DraftingInterfaces/interface_DrawingDocument_48585.htm">DrawingDocument</a> </li> <br><li>When this document is a 
<a href="../MecModInterfaces/interface_PartDocument_31472.htm">PartDocument</a>, and a sketch is  being edited ( 
<a href="../SketcherInterfaces/interface_Sketch_8026.htm#OpenEdition">Sketch.OpenEdition</a> has been called and   
<a href="../SketcherInterfaces/interface_Sketch_8026.htm#CloseEdition">Sketch.CloseEdition</a> has not been called yet)</li> <br>
 In these cases, <tt>Indicate2D</tt> must be used.<br>
 <b>See also:</b>
<a href="../InfInterfaces/interface_Selection_18040.htm#IndicateOrSelectElement3D">Selection.IndicateOrSelectElement3D</a>  which can, in particular, enable indication and not selection (positionning the iFilterType parameter to an empty string), whichs enables to subscribe to mouse move 
 events, positionning the iTriggeringOnPreSelection to true.<br>
 <b>Note:</b>If the scripting language is Visual Basic for Applications or Visual Basic 6 Development Studio, then,
 you have to know that during the execution of an interactive selection method such as this one, no form
 (dialog box) must be displayed, otherwise it would lead to unpredictible results. In a form method, before 
 calling an interactive selection method such as Document.Indicate2D, you must hide all forms, and, after the
 call to the method, you must show the forms.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPlanarGeometricObject</tt>
   <dd> A planar geometric object.
 <br>
 The following objects are supported: 
 </dd>
</dl>
<a href="../GSMInterfaces/interface_HybridShapeCircle_59719.htm">HybridShapeCircle</a>, 
<a href="../GSMInterfaces/interface_HybridShapeCircleExplicit_130251.htm">HybridShapeCircleExplicit</a>, 
<a href="../GSMInterfaces/interface_HybridShapeConic_52888.htm">HybridShapeConic</a>, 
<a href="../SketcherInterfaces/interface_Sketch_8026.htm">Sketch</a>, 
<a href="../SketcherInterfaces/interface_Circle2D_11806.htm">Circle2D</a>, 
<a href="../SketcherInterfaces/interface_Ellipse2D_15520.htm">Ellipse2D</a>, 
<a href="../SketcherInterfaces/interface_Hyperbola2D_23520.htm">Hyperbola2D</a>, 
<a href="../SketcherInterfaces/interface_Parabola2D_18844.htm">Parabola2D</a> and 
<a href="../SketcherInterfaces/interface_Spline2D_12098.htm">Spline2D</a>. 
    <dt><tt> iMessage</tt>
   <dd> A string which instructs the user that he must select a location in the document window.
 This string is displayed in the message area located at the left of the power input area.
 </dd>
    <dt><tt> oWindowLocation2D</tt>
   <dd> An array made of 2 doubles: X, Y - coordinates array of the location
 the user specified in the document window, in the input planar object 
 coordinates system
 </dd>
    <dt><tt> oWindowLocation3D</tt>
   <dd> An array made of 3 doubles: X, Y, Z - coordinates array of the location
 the user specified in the document window
 </dd>
    <dt><tt> oOutputState</tt>
   <dd> The state of the indication command once <tt>Indicate3D</tt> returns. 
 It can be either "Normal" (the indication has succeeded), "Cancel" (the user wants to cancel the VB command, 
 which must exit immediately, see the oOutputState parameter of the </dd>
<a href="../InfInterfaces/interface_Selection_18040.htm#SelectElement2">Selection.SelectElement2</a> method), "Undo" or "Redo". About the use of "Undo" and "Redo", see the example of the
 
<a href="../InfInterfaces/interface_Selection_18040.htm#SelectElement2">Selection.SelectElement2</a> method. 
  <dt> <b>Example:</b> 
  <dd>  The following example asks the end user to select a location in the 
 document window, on the Plane.1 plane, and creates a  
 
<a href="../GSMInterfaces/interface_HybridShapePointOnPlane_108958.htm">HybridShapePointOnPlane</a> at the specified location:  <pre>
 Set Document = CATIA.ActiveDocument : Set Part  = Document.Part : Set Selection = Document.Selection
 Set HybridShapeFactory = Part.HybridShapeFactory
 Set HybridShapePlane = Part.Bodies.Item("PartBody").HybridShapes.Item("Plane.1")
 Set PlaneReference = Part.CreateReferenceFromObject(HybridShapePlane)
 'We propose to the user that he select a location in the window
 ReDim WindowLocation2D(1),WindowLocation3D(2)
 Status=Document.Indicate3D(HybridShapePlane,"select a location in the document window", _ 
                             WindowLocation2D,WindowLocation3D)
 if (Status = "Cancel") then Exit Sub
 Set HybridShapePointOnPlane = HybridShapeFactory.AddNewPointOnPlane( _
                                 PlaneReference,WindowLocation2D(0),WindowLocation2D(1))
 Part.Bodies.Item("PartBody").InsertHybridShape HybridShapePointOnPlane
 Part.InWorkObject = HybridShapePointOnPlane
 Part.Update
 </pre>
</dl>
</dl>
<a name="NewWindow"><dt>

<table><tr><td>o Func <b>NewWindow</b>(<td>) As <a href="../InfInterfaces/interface_Window_8384.htm">CATIAWindow</a> </table></dt>
<dl>
  <dd>
 Creates a new window for the document.
 This implies creating a window, displaying the document in this window,
 making this document the active one if it was not, making
 this window the active one, and adding the
 window to the collection of windows.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example creates the <tt>MyWindow</tt> new window for
 the <tt>Doc</tt> document.
 <pre>
 Dim MyWindow As Window
 Set MyWindow = Doc.<font color="red">NewWindow</font>()
 </pre>
 </dl>
</dl>
<a name="RemoveFilter"><dt>

<table><tr><td>o Sub <b>RemoveFilter</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>iFilterName</tt>)</table></dt>
<dl>
  <dd>
 Removes an existing visualization filter.
 Fails if the filter to be removed is the current filter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilterName</tt>
   <dd>   The filter name.
 <! @sample>
 <dt><b>Example:</b>
 <dd>
 This example removes the filter named "Filter001" for the <tt>Doc</tt> document.
 <pre>
 Doc.<font color="red">RemoveFilter</font> ("Filter001")
 </pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="Save"><dt>

<table><tr><td>o Sub <b>Save</b>(<td>)</table></dt>
<dl>
  <dd>
 Saves the document.
 <! @sample>
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example saves the <tt>Doc</tt> document.
 <pre>
 Doc.<font color="red">Save</font>()
 </pre>
 </dl>
</dl>
<a name="SaveAs"><dt>

<table><tr><td>o Sub <b>SaveAs</b>(<td><a href="../System/typedef_CATBSTR_8129.htm">CATBSTR</a> <td><tt>fileName</tt>)</table></dt>
<dl>
  <dd>
 Saves the document with another name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> fileName</tt>
   <dd>   The name to assign to the document
 <! @sample>
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example saves the <tt>Doc</tt> document with the <tt>NewName</tt>
 name.
 <pre>
 Doc.<font color="red">SaveAs</font>("NewName")
 </pre></dd>
</dl>
</dl>
</dl>

</body>
<hr><p><i>
Copyright &#169; 2003, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
