<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>FittingInterfaces Track (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../FittingInterfaces.htm" href="../FittingInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "FittingInterfaces";	}
		function getCurrentObjectName() { 
 	return "Track"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Track<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_Track_18925','Track','0');</script>
<b><i>   The interface to access a CATIATrack.</i></b><br>

 <b>Role:</b> A CATIATrack (or track) object is an object to 
 define motion to various items (such as a product or a shuttle).  
 These tracks can be simulated which results in them to move along 
 the defined trajectory (with a set speed).<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#MoveMode"><b>MoveMode</b></a>
<dd>   Returns or sets the track's movement mode.
 <dt>
    <a href="#Speed"><b>Speed</b></a>
<dd>  Returns or sets the track speed.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#GetMatrixAll"><b>GetMatrixAll</b></a>
<dd>  GetMatrixAll
   Gets the base location of the track.
 <dt>
    <a href="#Mirror"><b>Mirror</b></a>
<dd>  Produces a "mirror image" of the track.
 <dt>
    <a href="#Move"><b>Move</b></a>
<dd>  Moves the track a certain position.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="MoveMode"><dt>

<table><tr><td>o Property <b>MoveMode</b>(<td>) As <script type="text/javascript"> activateLink('DMUTrackMoveMode','DMUTrackMoveMode')</script> </table></dt>
<dl>
  <dd>
  Returns or sets the track's movement mode.  Can be speed or 
 time based.  
  In Speed mode, the total time is calculated based on the 
 time need to travel the distance of the track at the given speed.
  In Time mode, the movement speed to calculated so that the 
 end of the track is reached by the end of the total time.
  Uses enum DMUTrackMoveMode, which defined is 
 in this interface.
</dl>
<a name="Speed"><dt>

<table><tr><td>o Property <b>Speed</b>(<td>) As <script type="text/javascript"> activateLink('double','double')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the track speed.  Please note that the value of 
 the speed should be greater than zero.
 <dl>
 <dt><b>Example</b>
 <dd>
 This example sets the track speed to <tt>17.54</tt>.
 <pre>
 myTrack.<font color="red">Speed</font> =  17.54
 </pre>
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="GetMatrixAll"><dt>

<table><tr><td>o Sub <b>GetMatrixAll</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>oMatrixAll</tt>)</table></dt>
<dl>
  <dd>
 GetMatrixAll
   Gets the base location of the track.
  The sum of several internal transforms.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMatrixAll</tt>
   <dd>    An array of 12 doubles.  A 3 by 3 rotation matrix followed by 
   a position (x/y/z) vector, in millimeters.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything was succcessfull
</dl>
</dl>
<a name="Mirror"><dt>

<table><tr><td>o Sub <b>Mirror</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iNormal</tt>)</table></dt>
<dl>
  <dd>
 Produces a "mirror image" of the track.  
 <b>Role:</b> Determines the "mirror image" of a track.  The "mirror" is
 a 3d plane specified by a point on the plane and the normal to the surface
 of the plane.  The mirror calculation involves going through each shot
 and projecting it in the space on the other side of the mirror plane.  The 
 projection "reflects" the point perpendicularly to the plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>    A point on the plane that will be used to define the mirror.
 </dd>
    <dt><tt> iNormal</tt>
   <dd>    A normal to the plane that will be used to define the mirror.</dd>
</dl>
</dl>
</dl>
<a name="Move"><dt>

<table><tr><td>o Sub <b>Move</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iTransfo</tt>)</table></dt>
<dl>
  <dd>
 Moves the track a certain position.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd>    Specifies a relative amount to move the track.
</dd>
</dl>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</body>

</html>

