<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with Credentials</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

<style type="text/css">
.style1 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
</style>

</head>

<body>

<table width="100%">
    <tr>
      <td valign="top">
      <h1>3D PLM PPR Hub Open Gateway</h1>
      </td>
      <td valign="top">
      <h2>Feature Modeler</h2>
      </td>
      <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Working with Credentials</h3>
      <p><em>Understanding how to use credentials and facades</em></p>
      </td>
    </tr>
	<tr>
		<td class="use" colspan="2">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAV5V6FmExtWorkingWithCredentials</code> 
		use case. It illustrates working with the Credentials object. This 
		involves an understanding of the privileges/restrictions of one working 
		with features in varying roles (credentials). An essential prerequisite to fully understand the 
		current UC is a strong grasp of the Credentials concept, a subject dealt 
		with in the TA &quot;<strong>Understanding 
		Credentials</strong>&quot; [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAV5V6FmExtWorkingWithCredentials Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAV5V6FmExtWorkingWithCredentials Do</a></li>
				<li><a href="#How">How to Launch 
				CAAV5V6FmExtWorkingWithCredentials</a></li>
				<li><a href="#Where">Where to Find the 
				CAAV5V6FmExtWorkingWithCredentials Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The key learning include</p>
<ul>
	<li>Access privileges offered by &quot;<strong>Ownership Credentials</strong>&quot; 
	associated with Feature Modeler entities namely. feature, startup, and container</li>
	<li>Typical characteristics of a Credentials object</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAV5V6FmExtWorkingWithCredentials Use Case</h2>
<p> <code>CAAV5V6FmExtWorkingWithCredentials</code> is a use case of the 
<code>CAAV5V6FeatureModelerExt.edu</code> framework that 
illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAV5V6FmExtWorkingWithCredentials Do</h3>
<p>The UC is based on the feature model defined below [<a href="#Fig.1">Fig. 1</a>]</p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Feature Model for UC execution</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAFmExtWorkingWithCredentials_Fig1.gif" width="539" height="273">&nbsp;</td>
	</tr>
</table>
<ul>
	<li>The &quot;CAAFmExtBaseCatalogForCredential.CATfct&quot; catalog 
	(referred hereafter as the <strong>Base</strong> catalog) defining
	<ul>
		<li >The &quot;CAAFmExtLibBook&quot; base feature 
		(referred hereafter as &quot;Book&quot;)</li>
		<li >The &quot;CAAFmExtLibrary&quot; feature, the parent to the Book 
		feature. (i.e: The Library aggregates the books within)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtRefCatalogForCredential.CATfct&quot; catalog (referred 
	hereafter as the <strong>Reference</strong> catalog) defining<ul>
		<li >The &quot;CAAFmExtLibBookPublisher&quot; feature, &quot;pointed to&quot; 
		by the Book feature (referred hereafter as &quot;Publisher&quot;)</li>
		<li >The &quot;CAAFmExtLibBookReader&quot; feature, &quot;pointing to&quot; 
		the Book feature (referred hereafter as &quot;Reader&quot;)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtExtnCatalogForCredential.CATfct&quot; catalog 
	(referred hereafter as the <strong>Extension</strong> catalog) defines
	<ul>
		<li >The &quot;CAAFmExtLibraryHistoricalNovel&quot; feature, an 
		extension to the base (book) feature&nbsp; (referred hereafter as 
		&quot;HistoricalNovel&quot;)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtCatalogForCredential.CATfct&quot; catalog defines
	<ul>
		<li >The &quot;CAAFmExtCompany&quot; feature, a CAA Inheritable 
		feature, from which we derive the CAAFmExtLibBookPublisher feature</li>
	</ul>
	</li>
</ul>
	<p>The UC execution proceeds as listed below
<ul>
	<li>Create a Credentials object, exclusively for the Base, Extension and the 
	Referenced/Referencing Catalog</li>
	<li>Create an all-inclusive credentials object. This will include the 
	credentials to work with all catalogs and also the Applicative Container</li>
	<li>Instantiate the features and link them, as depicted in [<a href="#Fig.1">Fig.1</a>] 
	above</li>
	<li>Illustrates working as an owner of the Base catalog (only)<ul>
		<li >Succeeds in introspecting the Book feature</li>
		<li >Succeeds in retrieving the feature referenced 
		(Publisher) and the feature extension (HistoricalNovel) to the Book 
		feature</li>
		<li >Success in retrieving the features pointing to 
		(Reader/Library) the Book feature</li>
	</ul>
	</li>
	<ul>
		<li >Fails in introspecting the referenced (Publisher) and 
		the extension features (HistoricalNovel)</li>
	</ul>
	<li>Succeeds in introspecting the features retrieved from 
	Book, using a feature facade with appropriate credentials</li>
	<li>Failure to introspect a parent feature (Company) with credentials of the 
	child (Publisher)</li>
	<li>Working with Book feature without actually owning the Base catalog<ul>
		<li >Create a facade over the base feature, but 
		associated with credentials of the Extension catalog</li>
	</ul>
	</li>
	<ul>
		<li >Succeeds in retrieving the feature extension 
		(historicalNovel) to the Book feature </li>
		<li >Creates a facade over the base feature, but 
		associated with credentials of the Reference catalog</li>
		<li >Succeeds in retrieving the referencing feature 
		(Reader) to the Book</li>
	</ul>
	<li>Illustrates output of scanning an Applicative Container in various roles<ul>
		<li >Create a Credentials object with the Base catalog 
		credentials and Feature Infrastructure credentials </li>
		<li >Create a facade over our applicative container 
		associated with the above credentials</li>
		<li >Scan through this applicative Container. It outputs 
		only those features defined in the Base catalog (Book &amp; Library)</li>
	</ul>
	</li>
	<ul>
		<li >Create another facade over the applicative container 
		associated with this credential</li>
		<li >Scan through the applicative container. This time, it 
		outputs features defined both in the Base catalog (Book &amp; Library), as well as the 
		extension catalog (HistoricalNovel)</li>
	</ul>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="How"></a>How to Launch CAAV5V6FmExtWorkingWithCredentials</h3>
<p>To launch <code>CAAV5V6FmExtWorkingWithCredentials</code>, you will need to set up the build time environment, 
then compile <code>CAAV5V6FmExtWorkingWithCredentials </code>along with its 
prerequisites, set up the run time environment, and then execute the sample.</p>
<p>mkrun -c &quot;<code>CAAV5V6FmExtWorkingWithCredentials DocumentStorageName.CATPart </code><i>&nbsp; 
</i>&quot;</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Where"></a>Where to Find the CAAV5V6FmExtWorkingWithCredentials Code</h3>
<p><code>CAAV5V6FmExtWorkingWithCredentials</code> code is located in the
<code>CAAV5V6FmExtWorkingWithCredentials</code><code>.m</code> use case module of the
<code>CAAV5V6FeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootDirectory\CAADoc\CAAV5V6FeatureModelerExt.edu\</code><code>CAAV5V6FmExtWorkingWithCredentials</code><code>.m</code></p>
<p>where <code>InstallRootDirectory</code> 
is the root directory of your CAA installation. It is made of a unique source 
file named
<code>CAAV5V6FmExtWorkingWithCredentials.cpp</code>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>In addition, the UC also refers to the Catalogs <code>
CAAFmExtBaseCatalogForCredential.CATfct</code>, <code>
CAAFmExtExtnCatalogForCredential.CATfct</code> and <code>
CAAFmExtRefCatalogForCredential.CATfct</code>. The Catalogs are provided at the 
location</p>
<p> <code>
InstallRootDirectory\CAADoc\CAAV5V6FeatureModelerExt.edu\CNext\resources\graphic</code></p>
<p>and by running the mkrtv tool, user copies it to the WS RTV.</p>
<p>In addition we have also provided the OSM files corresponding to these 
catalogs at the location below, just in case you would like to generate the
<code>CATfct</code> with the <code>
CATfctEditorAssistant</code> tool [<a href="#References">2</a>]</p>
<p><code>InstallRootDirectory\CAAV5V6FeatureModelerExt.edu\InputData</code></p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight logical steps in <code>CAAV5V6FmExtWorkingWithCredentials</code>:</p>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create credential">Creating the Credentials </a></li>
	<li><a href="#Instantiate features">Instantiating features</a></li>
	<li><a href="#Working as an Owner of the Base feat">Working as Owner of the 
	Base Catalog</a></li>
	<li><a href="#Introspect features retrieved from base">Introspecting 
	Features retrieved from Book feature using Appropriate Credentials</a></li>
	<li><a href="#Introspect features retrieved from base">Working as not the Owner of the Base Catalog</a></li>
	<li><a href="#Working as a client of container">Working with Applicative Container</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The steps included inside the #ifdef V5 macro are for Session creation and 
Document creation. For detailed description on session creation and document 
creation you may see CAAObjectSpecsModeler.edu 
V5 UC documentation. It further creates the <strong>Credentials</strong> to authorize 
access to the features defined in the <strong>CAAOsmCatalogSU</strong> catalog. 
It next creates the StartUp facades (with credentials associated) and 
subsequently instantiates features, retrieved as 
feature facades in our code. </p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Create credential"></a>Creating the Credentials</h3>
<p>In this use case we create 4 credentials objects ( a <i>CATFmCredentials</i> 
class object).&nbsp; One for each feature Catalog, and one gathering all 
accreditations. The first three elementary creations are for educative motive, 
in your real application, usually you will use one credentials object gathering 
all your accreditations. </p>
<p>First we create a credential to handle feature created from StartUp defined 
in the Base feature catalog.</p>

<table class="code" style="margin-left: 41px">
	<tr>
		<td><pre>
...
<strong>CATFmCredentials </strong>CredentialForBaseCatalog ;
rc = CredentialForBaseCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,"CAAFmExtFeatureModeler");
...   
</pre>
	</td>
	</tr>
</table>

<p>When a credential is created, the first thing is to declare on which 
infrastructure is based your application. The call to <code>RegisterAs</code><span class="style1">ApplicationBasedOn
</span> is extrememlly important, by its contents, and by the fact it must done in first. 
The argument of this method are:</p>
<ul>
	<li>A pointer to a key identifying the infrastructure , here 
	CATFmFeatureModelerID</li>
	<li>A string representing your Partner identification - for&nbsp; licensing 
	purpose - In all use cases of the CAAV5V6FeatureModelerExt.edu framework , we 
	are using &quot;CAAFmExtFeatureModeler&quot; as Partner Id. </li>
</ul>
<p>Then we can add the accreditation for the feature catalog.</p>

<table class="code">
	<tr>
		<td><pre>
...
CATUnicodeString clientId("CAAFmExtCatalogForCredential");
CATUnicodeString iBaseCatalogName("CAAFmExtBaseCatalogForCredential"),

rc = CredentialForBaseCatalog<strong>.RegisterAsCatalogOwner(iBaseCatalogName,clientId)</strong>;
...   
</pre>
	</td>
	</tr>
</table>

<p>The call to <code>RegisterAsCatalogOwner</code> of the 
<i>CATFmCredentials</i> class updates the Credentials object with the ownership 
credentials of a Catalog.&nbsp; Its inputs are</p>
<ul>
	<li><code>iBaseCatalogName</code>, a <i>CATUnicodeString</i> type which represents the Catalog 
	name</li>
	<li><code>clientId</code>, a <i>CATUnicodeString</i> type which represents a string provided as 
	an input at the time of generating/updating this catalog. Thus, the <code>clientId
	</code>is known only to those authorized to work with this catalog [<a href="#References">2</a>]
	</li>
</ul>

<p>Then, we do the same thing, for Reference and Extension catalogs:</p>

<pre class="code">
...
CATFmCredentials CredentialForExtnCatalog, CredentialForRefCatalog;
rc = CredentialForExtnCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,"CAAFmExtFeatureModeler");
rc = CredentialForExtnCatalog.<strong>RegisterAsCatalogOwner</strong>("CAAFmExtExtnCatalogForCredential",clientId);
...    
rc = CredentialForRefCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,"CAAFmExtFeatureModeler");
rc = CredentialForRefCatalog.<strong>RegisterAsCatalogOwner</strong>("CAAFmExtRefCatalogForCredential",clientId);
...   
</pre>
<p>Finally we create the credentials object gathering all the previous 
accreditations, plus the accreditation to work with container.</p>
<pre class="code">...   
<strong>CATFmCredentials CredentialsForAll</strong>;
CredentialsForAll <strong>+=</strong> CredentialForBaseCatalog;
CredentialsForAll.<strong>RegisterAsCatalogOwner</strong>("CAAFmExtExtnCatalogForCredential",clientId);
CredentialsForAll.<strong>RegisterAsCatalogOwner</strong>("CAAFmExtRefCatalogForCredential",clientId);
...</pre>
<p>An all-inclusive Credentials object is created by appending existing 
credentials object (<code>CredentialForRefCatalog</code> and <code>CredentialForBaseCatalog</code>), 
like using the <code>RegisterAsCatalogOwner </code>method. You 
can observe that <code>RegisterAsCatalogOwner </code>adds a new accreditation, a 
Credentials object being like a key-chain.</p>
<p>Before leaving this section:</p>
<table class="Remark"> 
	<tr> 
		<td class="remark">Note: Since the 
current Use Case illustrates working with a Credentials object, we have had to 
create distinct credentials object for each catalog. While typically in an 
industrial scenario its more convenient to create an all-inclusive credential, which 
		will grant ownership privileges to all feature 
modeler entities (Catalogs, Containers) in the scope of client applications.</td> 
	</tr> 
</table> 

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Instantiate features"></a>Instantiating and Valuating Features</h3>
<p>The current step deals with instantiating features and linking them as 
depicted in [<a href="#Fig.1">Fig.1</a>] above. The UC execution will be based 
on this model.</p>
<p>We first create the Library feature. </p>
		<pre class="code">...
CATFmStartUpFacade <strong>LibraryStartUpFacade</strong>(CredentialForBaseCatalog,&quot;CAAFmExtLibrary&quot;);
CATFmFeatureFacade oFeatFacadeOnLibrary(CredentialForBaseCatalog);
rc = LibraryStartUpFacade.<strong>InstantiateIn</strong>(MyContFacade,oFeatFacadeOnLibrary);
...    
</pre>
		<p>About the declarations:&nbsp; </p>
<ul>
	<li><code>LibraryStartUpFacade</code>, a <i>CATFmStartUpFacade</i> class object, represents the facade to handle the
	<code>CAAFmExtLibrary</code> Startup. Its 
	credentials, <code>CredentialForBaseCatalog</code>, will enable us to realize the instantiation</li>
	<li><code>oFeatFacadeOnLibrary</code>, a 
	<i>CATFmFeatureFacade</i> class object will be bind to the newly created Library 
	feature. The credentials associated are those of the Base catalog, in order 
	to modify the new feature is few code lines.</li>
	<li><code>MyContFacade</code>, a <i>CATFmContainerFacade</i> class object represents a facade over an 
	applicative container, associated with an-inclusive Credentials whose to be 
	owner of Base catalog. </li>
</ul>
<p>The <code>InstantiateIn</code> method of the <i>CATFmStartUpFacade</i> class 
finally realizes the instantiation within the container provided as input. The 
new feature, named hereafter Library, is bound to the <code>oFeatFacadeOnLibrary</code> facade.&nbsp; </p>
<p>On the same schema,&nbsp; we create the Book feature.&nbsp; </p>
<table class="code">
	<tr>
		<td>
		<pre>...
CATFmStartUpFacade <strong>BookStartUpFacade</strong>(CredentialForBaseCatalog,"<strong>CAAFmExtLibBook</strong>");
CATFmFeatureFacade oFeatFacadeOnBook(CredentialForBaseCatalog);
rc = BookStartUpFacade.InstantiateIn(MyContFacade,oFeatFacadeOnBook);...    
</pre>
		</td>
	</tr>
</table>
<p>The CAAFmExtLibBook startup is also defined by the Base catalog, like the CAAFmExtLibrary 
startup ; so the same credentials, <code>CredentialForBaseCatalog</code>, is 
used to create the Startup facade (<code>LibraryStartUpFacade)</code> and the 
feature facade (<code>oFeatFacadeOnBook</code>) containing the new feature 
(named Book)</p>
<p>So we can modify an attribute of the Library feature through its facade <code>oFeatFacadeOnLibrary</code>since its contains the ownership of the Base catalog.</p>
		<pre class="code" >...
CATFmAttributeName LibBooksAttrName("LibraryBooks");
CATFmAttributeValue AttrValue;
AttrValue.SetFeature(oFeatFacadeOnBook);
rc = oFeatFacadeOnLibrary.<strong>SetValue</strong>(LibBooksAttrName,AttrValue);  
...</pre>
		<p>The <code>SetValue</code> method of the 
	<i>CATFmFeatureFacade</i> class modify the <code>LibraryBooks</code> 
attribute (a component) of the Library feature. In the Instantiating Feature use case [<a href="#References">3</a>], 
you learn that <code>InstantiateIn</code> 
+ <code>SetValue</code> is merged by<code>InstantiateUnder.</code></p>
<p>Then a list of features are created to get the data model as depicted in [<a href="#Fig.1">Fig.1</a>] </p>
<ul>
	<li>a Publisher feature,&nbsp; <code>oFeatFacadeOnPublisher</code> is the 
	facade bound to this feature and with <code>CredentialForRefCatalog</code> 
	as credential </li>
	<li>a Reader feature,&nbsp; <code>oFeatFacadeOnReader</code> is the 
	facade bound to this feature and with <code>CredentialForRefCatalog</code> 
	as credential </li>
</ul>
<p>and feature's attribute are modified with the same way as the Library 
feature:</p>
<ul>
	<li>The Reader pointes the Book feature using <code>SetValue</code> on the 
	<code>oFeatFacadeOnReader</code> facade with <code>AttrValue</code> = <code>
	oFeatFacadeOnBook</code> as attribute value , and 
	<code>BooksRead </code>as attribute name
	as argument. </li>
	<li>The Book pointes the Published feature using <code>SetValue</code> on the 
	<code>oFeatFacadeOnBook </code>facade with <code>AttrValue</code> = <code>oFeatFacadeOnPublisher</code> as attribute value , and 
	<code>BookPublisher </code>as attribute name
	as argument. </li>
</ul>
<p>Finally we add an extension to the Book feature. We create the 
HistoricalNovel extension to the Book feature.</p>
<p>first we create a facade over the Book feature whose the credentials are only 
for the Extension catalog. To be owner of the extension is enough to add an 
extension to a any base feature.&nbsp; </p>
<table class="code">
	<tr>
		<td>
		<pre>...	
CATFmFeatureFacade FeatFacadeOnBookWithOnlyExtnCatalogCreds(CredentialForExtnCatalog);
FeatFacadeOnBookWithOnlyExtnCatalogCreds = oFeatFacadeOnBook.<strong>GetFeature</strong>();
...
</pre>
		</td>
	</tr>
</table>
<p>Then we realize the extension addition using <code>FeatFacadeOnBookWithOnlyExtnCatalogCreds</code> </p>
<table class="code">
	<tr>
		<td>
		<pre>...	
rc = FeatFacadeOnBookWithOnlyExtnCatalogCreds.AddExtension("CAAFmExtHistNovel",AttrValue);
CATFmFeatureFacade oFeatFacadeOnHistNovelExtn(CredentialForExtnCatalog,AttrValue);
...
</pre>
		</td>
	</tr>
</table>
<p>
	<code>oFeatFacadeOnHistNovelExtn</code>, is a 
	<i>CATFmFeatureFacade</i> class object representing the <code>HistoricalNovel</code> extension.
</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Working as an Owner of the Base feat"></a>Working as Owner of 
the Base Catalog</h3>
<p>In this section we study the privileges&nbsp;and restrictions associated with the 
ownership of a feature catalog. So we 
	<code>oFeatFacadeOnBook </code>the facade of the Book feature with&nbsp; <strong>only</strong> the 
Base catalog as credentials.&nbsp; </p>
<h4>Privileges of Owner of Base Catalog</h4>
<p>An owner of a catalog defining the StartUp of a feature, has the privilege to introspect it. By introspection, 
we imply, for example, an authorization to retrieve and set its attribute value.
The attributes could be either be the primitive or the link (specobject, 
component, external) types. </p>
<p><strong>Success to Retrieve Global&nbsp; Information </strong> </p>
<p>The display name [<a href="#References">4</a>] 
is an information requesting an authorization too.&nbsp; </p>
<pre class="code">...
CATUnicodeString TheFeatureBookName ; 
rc = oFeatFacadeOnBook.<strong>GetDisplayName</strong>(TheFeatureBookName);
if (FAILED(rc)) return 1;   
...</pre>
	<p>Then you try to retrieve the feature aggregating the Book feature (its 
parent)</p>
<table class="code">
	<tr>
		<td><pre>...
rc = oFeatFacadeOnBook<strong>.GetRootParentFeature</strong>(AttrValue);
if (FAILED(rc)) return 1;
...   
CATFmFeatureFacade FeatFacadeOnParentLibraryFeat;
rc = <strong>AttrValue.GetFeature(FeatFacadeOnParentLibraryFeat)</strong>;
if (FAILED(rc)) return 1;
...
CATBaseUnknown_var spLibrary = FeatFacadeOnParentLibraryFeat.<strong>GetFeature</strong>() ;
if (NULL_var == spLibrary ) return 1;
...</pre>
		</td>
	</tr>
</table>
<p>The call to <code>GetRootParentFeature </code>of the 
<i>CATFmFeatureFacade</i> class returns 
the root parent of a feature. By &quot;Root parent&quot; we imply the aggregating feature, 
which itself is not aggregated in turn.</p>
<p><strong>Success to Retrieve Attributes Value</strong></p>
<table class="code">
	<tr>
		<td><pre>...    
CATFmAttributeName iAttrNameForTitle(&quot;Title&quot;);
rc = oFeatFacadeOnBook<strong>.GetValue(iAttrNameForTitle,AttrValue)</strong>;
...
CATUnicodeString strTitle;
rc = <strong>AttrValue.GetString(strTitle)</strong>;
if (FAILED(rc)) return 1;
...</pre>
</td>
	</tr>
</table>
<p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
We retrieve the value of the attribute &quot;Title&quot; (primitive type) for the Book 
feature. </p>
<p><a name="We proceed to retrieve a feature referenced by the Book feature.">
</a>We proceed to retrieve a feature referenced by the Book feature. </p>
 <pre class="code" >...
CATFmAttributeName iAttrNameForPublisher(&quot;BookPublisher&quot;);
rc = <strong>FeatFacadeOnBookWithOnlyBaseCatalogCreds.GetValue(iAttrNameForPublisher,AttrValue)</strong>;
if (FAILED(rc)) return 1;
...    
CATFmFeatureFacade FeatFacadeOnRetrievedPublisher;
rc = <strong>AttrValue.GetFeature(FeatFacadeOnRetrievedPublisher)</strong>;
if (FAILED(rc)) return 1;
...
CATBaseUnknown_var spPublisher = FeatFacadeOnRetrievedPublisher.<strong>GetFeature</strong>() ;
if ( NULL_var == spPublisher ) return 1;    
...</pre>
	 
<p>We retrieve the value of the attribute &quot;BookPublisher&quot; of type specobject 
associated with the Book feature. The call to <code>GetValue</code> of the 
<i>CATFmFeatureFacade</i> class, retrieves an attribute value. The call to
<code>GetFeature </code>of the <i>CATFmAttributeValue</i> returns the 
referenced feature.</p>
<p>We next proceed to retrieve the extension to the Book feature.</p>
 <pre class="code">...
CATFmFeatureFacade FeatFacadeOnRetrievedHistNovelExtn;
rc = oFeatFacadeOnBook.<strong>GetExtension</strong>("CAAFmExtHistNovel",FeatFacadeOnRetrievedHistNovelExtn);   
if (FAILED(rc)) return 1;
...</pre>
	 
<p>The <code>GetExtension</code> call of the 
<i>CATFmFeatureFacade</i> class retrieves an 
extension to the Book (base) feature. </p>
<p><strong>Success to Retrieve the Pointing Features</strong></p>
<p>Our objective is to retrieve the Reader feature. </p>
 <pre class="code"><strong>CATFmPointingFeatureIterator</strong> oIteratorOnPointing;
rc = oFeatFacadeOnBook<strong>.ScanPointingFeatures(</strong>oIteratorOnPointing<strong>)</strong>;
if (FAILED(rc)) return 1;
...
CATFmFeatureFacade FeatFacadeOnPointing ;
rc = <strong>oIteratorOnPointing.Next(</strong>FeatFacadeOnPointing<strong>)</strong>;
if (FAILED(rc)) return 1;
</pre>
		 
<p>The call to <code>ScanPointingFeatures</code> on a 
<i>CATFmFeatureFacade</i>&nbsp; returns SUCCESS 
and an Iterator on the features pointing to the invoking Book feature. This 
iterator is not empty, we got the only one feature pointing the Book : the Reader feature.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h4>Restrictions of Owning only Base Catalog</h4>
<p><strong>Failure to introspect the Retrieved Feature</strong></p>
<p>In the earlier section, we discussed the privileges&nbsp; of an owner of the 
Base Catalog. We observed that the owner can retrieve the referenced feature 
(Publisher), feature extensions (HistoricalNovel), pointing feature (Reader), but one cannot introspect the retrieved features, which implies that the process 
of retrieving a feature from, does not transfer the credentials. In 
other words, the feature facade of the retrieved feature is either with the 
credentials it originally held or without any.</p>
 <pre class="code">CATFmAttributeName iAttrNamePublisherName("PublisherName");
rc = <strong>FeatFacadeOnRetrievedPublisher.</strong>GetValue(iAttrNamif (SUCCEEDED(rc)) return 1; 
...   
   CATFmAttr...   
CATFmAttributeName iAttrNameEpoch("Epoch");
rc = <strong>FeatFacadeOnRetrievedHistNovelExtn.</strong>GetValue(iAttrNameEpoch,AttrValue);
if (SUCCEEDED(rc)) return 1; </pre>
	 
<p>We try retrieve to retrieve the values of the attributes of the Publisher, and the  HistoricalNovel feature, 
but both fail because<strong> </strong><code>FeatFacadeOnRetrievedPublisher
</code>and<code> </code><code>FeatFacadeOnRetrievedHistNovelExtn </code>are to facades created without credentials.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Introspect features retrieved from base"></a>Introspecting Features Retrieved from Book Feature Using Appropriate Credential</h3>
<p>In the earlier section we observed though we could retrieve features linked 
to the base, we fail to introspect them. Then how does one work with these 
retrieved features?&nbsp; The answer is contained in the code that follows</p>
 <pre class="code"><strong>CATFmFeatureFacade FeatFacadeOnPublisherWithRefCatalogCreds(CredentialForRefCatalog,spPublisher)</strong>;
rc = <strong>FeatFacadeOnPublisherWithRefCatalogCreds.GetValue</strong>(iAttrNamePublisherName,AttrValue);
if (FAILED(rc)) return 1;
...</pre>
	 

<p>So, we have to create a facade on the Publisher feature, <code>spPublisher, 
</code>using the appropriate credential,<code>CredentialForRefCatalog</code> - 
(Publisher is defined by the Reference Catalog) .The feature facade <code>FeatFacadeOnPublisherWithRefCatalogCreds 
</code> having the right to introspect the Publisher feature, the <code>GetValue,</code> method will be successful.
<code>spPublisher </code>has been retrieved some lines before
nes before
<a href="#We proceed to retrieve a feature referenced by the Book feature.">#</a>It is significant to note that with the Publisher credentials we fail to 
introspect Company, the feature it derives from.</p>
 <pre class="code">CATFmAttributeName iAttrNameCompanyKind("CAAFmExtCompanyKind");
rc = <strong>FeatFacadeOnPublisherWithRefCatalogCreds.GetValue(iAttrNameCompanyKind,AttrValue)</strong>;
if (SUCCEEDED(rc)) return 1;
...    </pre>
	 

<p>We attempt to retrieve the &quot;CAAFmExtCompanyKind&quot; attribute value of the 
Company feature. We confirm it returns FAILURE. A feature cannot be 
introspected with the credentials of its derived feature, and vice versa.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Working with base feat, without owning it"></a>Working as not the Owner of the Base Catalog</h3>
<p>One may not be the owner of a catalog , but yet may succeed in retrieving 
the &quot;<strong>feature extensions</strong>&quot; and those &quot;referenc&quot; it, provided the 
base feature facade is associated with the credentials of the features being 
sought. The scenario that follows is an attempt to retrieve the HistoricalNovel 
feature extension to a Book feature, using a feature facade on Book associated 
with the credentials of only the HistoricalNovel extension.</p>
 <pre class="code">...
<strong>CATFmFeatureFacade FeatFacadeOnBaseFeatWithOnlyExtnCreds(CredentialForExtnCatalog)</strong>;
FeatFacadeOnBaseFeatWithOnlyExtnCreds = oFeatFacadeOnBook;
rc = FeatFacadeOnBaseFeatWithOnlyExtnCreds.<strong>GetExtension</strong>("CAAFmExtHistNovel",AttrValue);
if (FAILED(rc)) return 1;
CATFmFeatureFacade FeatFacadeOnHistoricalNovelExtn(CredentialForExtnCatalog,AttrValue);</pre>
	 
<p>We begin by creating a Feature Facade associated with only the feature 
extension credentials. It is then linked to an underlying Book feature. Next, we observe the call to 
<code>GetExtension</code> on the base feature to retrieve 
extensions to it, returns success. Please note that the call to
<code>AddExtension</code>() 
to instantiate an extension to a base feature, also returns SUCCESS.</p>
<p>On similar lines, the code that follows succeeds in retrieving an iterator on 
the features pointing to a base feature. In this case, we could retrieve all 
Readers who read a book.</p>
 <pre class="code" >...
<strong>CATFmFeatureFacade FeatFacadeOnBaseFeatWithOnlyRefCreds(CredentialForRefCatalog)</strong>;
FeatFacadeOnBaseFeatWithOnlyRefCreds = oFeatFacadeOnBook;
CATFmPointingFeatureIterator oIteratorOnReader2;
rc = FeatFacadeOnBaseFeatWithOnlyRefCreds.<strong>ScanPointingFeatures</strong>(oIteratorOnReader2);
... 
</pre>
<p>The iterator on the pointing features <code>oIteratorOnReader2</code>, a
<i>CATFmPoingingFeatureIterator</i> type is populated with all the referencing features 
(Readers of a Book). We scan through this iterator to retrieve all these features.&nbsp; </p>
 <pre class="code">...
<strong>CATFmFeatureFacade FeatFacadeOnReader2(CredentialForRefCatalog)</strong>;
...
while <strong>(SUCCEEDED(oIteratorOnReader2.Next(FeatFacadeOnReader2)))</strong>
{
   CATUnicodeString strDisplayNameOfReader;
   HRESULT hr2 = <strong>FeatFacadeOnReader2.GetType(strDisplayNameOfReader)</strong>;         ...         ...    
</pre>
		 
<p>The call tocode() of the feature iterator returns SUCCESS, which implies 
that the iterator was indeed populated. </p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Working as a client of container"></a>Working with Applicative Container</h3>
<p>The current section illustrates the significance of the Credentials 
associated with an Applicative Container Facade. We scan through an applicative 
container to retrieve the features instantiated in it. The scanning requires 
the credentials associated with the container facade grant two distinct 
authorizations</p>
<ul>
	<li>Feature Modeler authorization to scan an applicative container
	: using
	</li>
	<li>Authorization to work with Catalogs whose features are being retrieved 
	from the container : using </li>
</ul>
<p>The credential <code>CredentialForBaseCatalog</code> already created is 
correct, so for the UC purpose we create another credential but based on an 
existing one <code>CredentialForBaseCatalog</code> .</p>
 <pre class="code">
...
CATFmCredentials CredentialsForContainerScan(CredentialForBaseCatalog);
...</pre>
		 
<p><code>CredentialForBaseCatalog, </code>so <code>CredentialsForContainerScan 
</code>can scan a container defined by the Feature infrastructure, and can 
retrieve features issued from the Base catalog.</p>
<p>This credentials object is next associated with a Container Facade object. We 
create a Container facade exclusively for this step, though we have already have 
one created earlier&nbsp; (<code>MyContFacade</code>) at the time of instantiating the 
features. The reason we do not reuse an earlier facade 
is because it is associated with an all-inclusive credentials while now we are 
studying the impact of credentials on the container scan,&nbsp; and hence will 
have a Container facade associated with credentials which will be gradually 
appended as the study progresses.</p>
<pre class="code">
...
CATFmContainerFacade ContFacadeForScanBaseFeats(CredentialsForContainerScan) ;
ContFacadeForScanBaseFeats = MyContFacade ;
...
</pre>
<p>Here we simply instantiate a Container Facade object associated with the 
newly created Credentials object. It is further linked to our applicative 
container, which has all our features in it.<p>
We proceed to scan through this Container, and analyse the result.</p>

<pre class="code">CATFmFeatureIterator oIteratorOnContainerFeats;
rc = <strong>ContFacadeForScanBaseFeats.ScanFeatures(oIteratorOnContainerFeats)</strong>; ); 

CATFmFeatureFacade FeatReturnedByFirstContScan(CredentialForBaseCatalog);
CATUnicodeString strContainerFeatType;
CATUnicodeString strTypeBookFeat<strong>("CAAFmExtLibBook")</strong>;
CATUnicodeString strTypeLibraryFeat("<strong>CAAFmExtLibrary</strong>");
CATBoolean bValidFeature= TRUE;
while (( TRUE ==bValidFeature) &amp;&amp; SUCCEEDED(oIteratorOnContainerFeats.Next(FeatReturnedByFirstContScan)))
{
   strContainer FeatType= "";
   HRESULT hr = <strong>FeatReturnedByFirstContScan.GetType(strContainerFeatType)</strong>;
 
   CATUnicodeString SubStr = strContainerFeatType.SubString(0,15);
   if ( (strcmp(strTypeBookFeat,SubStr)) &amp;&amp; (strcmp(strTypeLibraryFeat,SubStr)) )
      bValidFeature = FALSE;	
   else     
 ...
</pre>
		<p>It is observed that the output of this scan, are only the feature whose the 
Startup is defined by the Base catalog.<p>We proceed with our study by appending the Credentials object with a 
credentials that authorizes access to the Extension catalog.</p>
<pre class="code">CredentialsForContainerScan +=CredentialForExtnCatalog;
...</pre>
<p>The += operator of the 
	<i>CATFmCredentials</i> class, comes in handy here. We update 
<code>CredentialsForContainerScan</code>, a 
	<i>CATFmCredentials</i> type, created exclusively for 
the current study. with the extension catalog credentials.</p>
<p>We create another Container Facade, this time associated with this updated credentials object, as seen below. </p>
<pre class="code"><strong>CATFmContainerFacade ContFacadeForScanBaseAndExtnFeats(CredentialsForContainerScan)</strong>; </pre>
	 
<p>Yet again, we scan through this container, this time governed by the updated 
credentials object.&nbsp; &nbsp;We proceed to analyze the results of this scan.</p>
<pre class="code">...         
    CATFmFeatureIterator oIterOnContFeatsWithUpdatedCredentials;
    ContFacadeForScanBaseAndExtnFeats.ScanFeatures(oIterOnContFeatsWithUpdatedCredentials);
    CATFmFeatureFacade <strong>FeatReturnedBySecondContScan</strong>(<strong>CredentialsForContainerScan</strong>);
    CATUnicodeString strTypeExtnFeat("<strong>CAAFmExtHistNov</strong>");
    while (( TRUE ==bValidFeature) &amp;&amp; SUCCEEDED(oIterOnContFeatsWithUpdatedCredentials.Next(FeatReturnedBySecondContScan)))
    {
        strContainerFeatType= "";
        FeatReturnedBySecondContScan.<strong>GetDisplayName</strong>(strContainerFeatType);
        CATUnicodeString SubStr = strContainerFeatType.SubString(0,15);
        if ( (strcmp(strTypeBookFeat,SubStr)) &amp;&amp;
             (strcmp(strTypeLibraryFeat,SubStr)) &amp;&amp;			
             (strcmp(strTypeExtnFeat,SubStr)) )
                     bValidFeature = FALSE;	
         else
...
</pre>
		<p>The features retrieved, as a result of the scan, this time include both the 
features defined in the Base and the Extension catalog. In the current context, 
we retrieve the Book/Library and the HistoricalNovel features. This is confirmed since the 
retrieved features have a type which  
match either the string &quot;<strong>CAAFmExtLibBook</strong>&quot;, 
&quot;<strong>CAAFmExtLibrary</strong>&quot; or&nbsp; &quot;<strong>CAAFmExtHistNov.</strong>&quot;&nbsp; 
Note the credential of <code>FeatReturnedBySecondContScan </code>, the feature 
facade used to retrieve each element of the iterator. Its credentials, 
<code>CredentialsForContainerScan,</code> contains the required catalog 
credentials (Extension and Base). So, it is why the GetType 
method is working fine.
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>At last the document is saved and session is closed</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates working with a Credentials object. Typically, in the 
Feature Modeler domain, the credentials are those associated with owning a 
catalog and an authorization to scan through an applicative container.</p>
<p>An owner of a feature (catalog) is allowed to introspect it (retrieve and set 
attribute values, retrieve referenced features and feature extensions).</p>
<p>A referencing feature and a feature extension could be retrieved from a base 
feature, by simply having the ownership privileges of the retrieved features. It 
is not required in this case, to own the base feature.</p>
<p>Finally, the Use Case illustrates the case of scanning through an applicative 
container. If one simply owns only the base catalog, the scan returns only the 
base features. In other words the scan retrieves only those features owned by 
the user. In addition user must also be a registered client of the feature 
modeler to be authorized to scan through the applicative container.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
		<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAV5V6FmExtTechArticles/CAAV5V6FmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>

	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAOsmTechArticles/CAAOsmTaOsmMigration.htm">Creating StartUps in Catalogs</a></td>
	</tr>

	<tr>
		<td>[3]</td>
		<td><a href="CAAV5V6FmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>

	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAV5V6FmExtTechArticles/CAAV5V6FmExtTaNamingFeatures.htm">Understanding Feature Naming</a></td>
	</tr>
	</table>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: 1 [Aug 2012]</td>
		<td valign="top">Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


