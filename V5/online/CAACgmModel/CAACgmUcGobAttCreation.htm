<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating an Attribute</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating an Attribute</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>An attribute is a piece of information intended to be added to an object. 
		Prior to adding an attribute to an object you must implement this attribute.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAGMModelAttributeCreation Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAGMModelAttributeCreation Do</a></li>
				<li><a href="#How">How to Launch CAAGMModelAttributeCreation</a></li>
				<li><a href="#Where">Where to Find the CAAGMModelAttributeCreation 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case creates an attribute an add it to objects. The attribute implementation 
is defined in the CAAGMModelAttribute.m module.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAGMModelAttributeCreation Use Case</h2>
<p>CAAGMModelAttributeCreation is a use case of the CAAGMModelInterfaces.edu framework 
that illustrates GMModelInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAGMModelAttributeCreation Do</h3>
<p>This use case creates two PLines. An attribute is added to these geometries.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAGMModelAttributeCreation</h3>
<p>To launch CAAGMModelAttributeCreation, you will need to set up the build time 
environment, then compile CAAGMModelAttributeCreation.m and CAAGMModelAttribute.m 
along with their prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">1</a>].</p>
<p>If you simply type CAAGMModelAttributeCreation with no argument, the use case 
executes, but doesn&#39;t save the result in an NCGM file. If you want to save this 
result, provide the full pathname of the NCGM file to create. For example:</p>
<p><code>CAAGMModelAttributeCreation /u/AttCreation.NCGM</code></p>
<p>This NCGM file can be displayed using the CAAGMModelGemBrowser use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAGMModelAttributeCreation Code</h3>
<p>The CAAGMModelAttributeCreation use case is made of a main named CAAGMModelAttributeCreation.cpp 
located in the CAAGMModelAttributeCreation.m module of the CAAGMModelInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAGMModelInterfaces.edu\CAAGMModelAttributeCreation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The use case uses a class defined in the CAAGMModelAttribute.m module.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The main program peforms the following steps: </p>
<ul>
	<li><a href="#Creates the Geometry Factory">Creating the Geometry Factory</a></li>
	<li><a href="#Creates a CATPLine">Creating the CATPLines</a></li>
	<li><a href="#Clones the CATPLine">Retrieving the Attribute Identifier</a></li>
	<li><a href="#Transforms the CATPLine">Creating the Attribute</a></li>
	<li><a href="#Evaluates the Normals At the Four Corners">Managing the Attributes</a></li>
	<li><a href="#Refs">Managing the References</a></li>
	<li><a href="#Writes the Model and Closes the Factory">Writing the Model and 
	Closing the Container</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creates the Geometry Factory"></a>Creating the Geometry Factory</h3>
<p>The geometry factory (CATGeoFactory) creates and manages all the CATICGMObject 
(and the curves and surfaces in particular). This creation is done by the global 
function <code>::CATCreateCGMContainer</code>. Notice that the factory can be defined 
by reading a NCGM file that was previously stored. In that case, the global function
<code>::CATLoadCGMContainer</code> must be used.</p>
<pre class="code">CATGeoFactory* piGeomFactory = <strong>::CATCreateCGMContainer</strong>() ;
if (NULL==piGeomFactory) return (1);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creates a CATPLine"></a>Creating the CATPLines</h3>
<p>A CATPLine is a line in the space of a surface, whatever the surface is. To create 
a CATPLine, one must specifies the starting and end points: these points are expressed 
in terms of parameters on the surface. No assumption must be made on the parameterization 
of the surface. The ways to define a CATSurParameter are: </p>
<ul>
	<li>Projecting a 3D point on the surface with the geometric operator CATICGMProjectionPtSur.</li>
	<li>Using the <code>CATSurface::GetParam</code> method (only for canonical surfaces 
	and a point that is known to be on the surface).</li>
	<li>Using the barycentric constructor, after retrieving the limits (<code>CATSurface::GetLimits</code>) 
	of the surface: this way is illustrated below.</li>
</ul>
<p>Now, the CATPLines can be created by using the <code>CATGeoFactory::CreatePLine</code> 
method.</p>
<pre class="code">// (c) --- Create a first PLine on piGeoPlane (geometric plane
//
	CATPLine * piPline1 = NULL;
	{
		CATSurParam iStartParam1 ( 0,0 , piGeoPlane-&gt;GetParamReference() ) ;
		CATSurParam iEndParam1   ( 0,80, piGeoPlane-&gt;GetParamReference() ) ;
		piPline1 = piGeomFactory-&gt;CreatePLine(iStartParam1,iEndParam1,piGeoPlane);
		if (NULL==piPline1 ) 
		{
			::CATCloseCGMContainer(piGeomFactory);
			return (1);	
		}
	}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Clones the CATPLine"></a>Retrieving the Attribute Identifier</h3>
<p>This operation is done by the CATCGMAttrId::FindAttrId static method which takes 
as its arguments the attribute name and the logical name of the load module containing 
the attribute implementation.</p>
<p>Go to the CAAGMModelAttribute.m module and take a look at the CAAGMModelAttributeManagement.cpp 
file which implements the CAAGMModelAttributeManagement attribute type. The attribute 
name is the first argument of the CATCGMImplAttribute macro (i.e. CAAGMModelAttributeManagement) 
while the CAAGobAT is a string allowing the system to access the load module which 
contains your implementation.</p>
<pre class="code">CATCGMImplAttribute(CAAGMModelAttributeManagement, CATCGMStreamAttribute, CAAGobAT, 1);</pre>
<p>Important:</p>
<p>You must declare the domain name (CAAGobAT) both in the dictionary (CAAGeometricObjects.edu.dico) 
and in the AppDef macro. In the present use case, the AppDef declaration is located 
in a separate file but you could gather all declarations into CAAGMModelAttributeManagement.cpp. 
If you need implement several attribute types, you can choose to gather all declarations 
in the same file as well and use a single AppDef declaration.</p>
<pre class="code">// (a) --- Find the attribute identifier
//
const char*  iAttr = &quot;CAAGMModelAttributeManagement&quot;;
const char*  iDomainName = &quot;CAAGobAT&quot;;
const CATCGMAttrId* pAttrId = CATCGMAttrId::FindAttrId(iAttr,iDomainName) ;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Transforms the CATPLine"></a>Creating the Attribute</h3>
<p>This operation can be done in two ways:</p>
<ul>
	<li>Either by using the UAIDPtr macro.</li>
	<li>Or by using the CreateAttribute static method.</li>
</ul>
<pre class="code">CAAGMModelAttributeManagement * piAttr1
 =(CAAGMModelAttributeManagement *) CATCGMAttribute::CreateAttribute(pAttrId); </pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Evaluates the Normals At the Four Corners"></a>Managing the Attribute</h3>
<p>The attribute is assigned a value. The SetValue method is defined in the attribute 
implementation. Then the attribute is added to each PLines.</p>
<pre class="code">// (c) --- Set its value to 2 
//         The SetValue method is defined in the CAAGMModelAttribute.m module
//
piAttr1-&gt;SetValue(2);
  
// (d) --- Add it to the piPline1 and piPline2 CATPlines
//
piPline1-&gt;PutAttribute(piAttr1);
piPline2-&gt;PutAttribute(piAttr1);</pre>
<h3><a name="Refs"></a>Managing the References</h3>
<p>You can cut the reference to an object by using the ReleaseAttribute method applied 
to the geometry you want to remove the attribute from. In the extract below, at 
first the number of objects pointed to by the attribute is 2. We check the new number 
of references after one reference has been cut.</p>
<pre class="code">// (e) --- Retrieve the number of references
// 
cout &lt;&lt; &quot;Number of objects pointed to by the attribute: (2 expected)&quot;;
cout &lt;&lt; piAttr1-&gt;GetNbAttrRef() &lt;&lt; endl;

// (f) --- Release the link between the attribute and piPline2 
//
piPline2-&gt;ReleaseAttribute(piAttr1);

// (g) --- Retrieve the new number of references
//
cout &lt;&lt; &quot;---------------------------------- &quot; &lt;&lt; endl;
cout &lt;&lt; &quot;After ReleaseAttribute on piPline2 &quot; &lt;&lt; endl;
cout &lt;&lt; &quot;Number of objects pointed to by the attribute: (1 expected)&quot;;
cout &lt;&lt; piAttr1-&gt;GetNbAttrRef() &lt;&lt; endl;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Writes the Model and Closes the Factory"></a>Writing the Model and 
Closing the Container</h3>
<p>To save the model in a file, the <code>::CATSaveCGMContainer</code> global function 
is used. Notice that in the use case, the save is conditioned by an input parameter 
representing the file inside which the model must be saved.</p>
<p>The use case ends with the closure of the geometry factory, done by the <code>
::CATCloseCGMContainer</code> global function.</p>
<pre class="code"> if(1==toStore)
 {
#ifdef _WINDOWS_SOURCE
   ofstream filetowrite(pfileName, ios::binary ) ;
#else
   ofstream filetowrite(pfileName,ios::out,filebuf::openprot) ;
#endif

   <strong>::CATSaveCGMContainer</strong>(piGeomFactory,filetowrite);
   filetowrite.close();
 }	

 //
 // Closes the container
 //

 <strong>::CATCloseCGMContainer</strong>(piGeomFactory);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case illustrates how to create and use CGM attributes.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
