<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Understanding Extension Feature</title>
<style type="text/css">
.style1 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
.style3 {
	color: #FF0000;
}
</style>
</head>

<body>

<table width="100%">
    <tr>
      <td valign="top">
      <h1>3D PLM PPR Hub Open Gateway</h1>
      </td>
      <td valign="top">
      <h2>Feature Modeler</h2>
      </td>
      <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Understanding Feature Extension</h3>
      <p><em>Explains the Feature extension mechanism</em></p>
      </td>
    </tr>
	<tr>
		<td class="tech" colspan="2">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This articles details the mechanism to extend a feature, named <b>
		base</b> feature, by another one (named <b>extension</b> feature). </p>
		<ul>
			<li><a href="#Concepts">Concepts</a><ul>
			<li><a href="#What is an Extension Feature">What is an Feature 
			Extension</a>?</li>
			<li><a href="#Where store Extension Feature">Where Store Feature 
			Extension?</a></li>
		</ul>			
			<li><a href="#Main Steps to Develop a Feature Extension">Main 
			Steps to Develop Feature Extension</a><ul>
				<li><a href="#Designing the Extension Feature">Designing Feature 
				Extension</a></li>
				<li><a href="#Designing the Extension Feature">Declaring 
				Information to Manage Feature Extension</a></li>
				<li><a href="#About the Applicative Container">About the Applicative Container</a></li>
				<li><a href="#Interfaces to Implement on the Extension Feature">
				Interfaces to Implement on Feature Extension</a></li>
			</ul></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Concepts"></a>Concepts</h2>
<p>Please consider the figure below illustrating the concept of extension:</p>
<table border="0" id="table1">
	<caption>Fig.1 Concept</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAOsmFeatureExtension_Concept.gif" width="485" height="319"></td>
	</tr>
</table>
<p>The <b>base</b> feature can be any kind of feature, it can be for example 
designed by DS applications. You can extend it by another feature which is named
<b>Extension</b> feature. This feature can have, like any other features, its 
own attributes, and its own behaviors.&nbsp; </p>
<p>But an extension feature cannot be extended itself. The Base feature cannot 
be an extension. </p>
<p>The extension mechanism consists in <b>creating an aggregation</b> of the 
extension feature by the base feature without a modification of the base 
feature's StartUp. </p>
<p>The <em>CATFmFeatureFacade</em> class provides methods to</p>
<ul>
	<li>Add, remove or retrieve a 
	feature extension from a base feature</li>
	<li>Retrieve the base feature from an extension feature</li>
</ul>
<p>The use case Working with Feature Extensions" [<a href="#References">1</a>] is an illustration 
of these methods.</p>
<p>Let us now go further with this extension feature.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="What is an Extension Feature"></a>What is a Feature Extension?</h3>
<p>Since it is a feature, as like any other feature, you <b>design </b> it using<b> 
OSM language</b> [<a href="#References">2</a>]. Its particularity is to be declared 
as an &quot;extension&quot; using a specific tag. You will see implementation detail in a 
next section, the <a href="#Designing the Extension Feature">Designing Feature 
Extension</a> 
section.&nbsp; </p>
<p>An extension feature can extend several base features. The <b>extended features</b> 
(also called as base features) are declared in the OSM also, see 
the section <a href="#Declaring Information to Manage the Extension Feature">
Declaring Information to Manage the Feature Extension</a>. 
But conversely an extension feature can only be instantiated once for a given base 
feature. </p>
<table border="0" id="table2">
	<caption><a name="Fig.2">Fig.2</a> What is Possible and Impossible</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAOsmFeatureExtension_Possibilities.gif"></td>
	</tr>
</table>
<p>On [<a href="#Fig.2">Fig.2</a>] you can see that <code>Feature Extension1</code> 
extends two base features, but two extensions (<code>Feature Extension2) </code> of the same feature 
cannot co-exist. This check is ensured by the <code>AddExtension</code> 
method of the <em>CATFmFeatureFacade</em> class, the only one method to add an 
extension to a base feature.</p>
<table class="Remark">
	<tr>
		<td class="remark"><span class="run-in">Note</span>: An extension 
		feature has been designed to be aggregated by a base feature using the 
		extension protocol, so do not aggregate this special feature to another 
		feature as component attribute.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>

<p><b>A Feature Deriving from an internal Feature Modeler Feature</b></p>
<p>We have seen previously that the extension feature is declared with a special 
tag in the OSM file, so this way you can create a new StartUp deriving from a 
specific feature. You do not have direct access to the derived feature's attributes, but you can take 
benefit of interfaces implemented by this derived feature. You have the 
details in the <a href="#Interfaces to Implement on the Extension Feature">
Interfaces to Implement on Feature Extension</a> 
section.</p>
<p><b>Life cycle</b></p>
<p>The extension feature is aggregated by the base feature, so it means the life cycle of the extension feature is tied to its base feature. When a base 
feature is deleted, all its aggregated elements declared as component 
attributes are deleted, as well as all its extension features. </p>
<p style="height: 35px">When an extension feature must be deleted, you can either 
use the <code>RemoveExtension</code> method of the <em>CATFmFeatureFacade</em>  
interface on the base feature, or the <code>DeleteSelf</code> method on the 
same class, but on the feature extension itself. In both cases, the feature 
extension is deleted, and removed from its base feature. Some customizations, 
as for kind of feature, are possible too, see the
<a href="#Interfaces to Implement on the Extension Feature">Interfaces to 
Implement on Feature Extension</a> 
section.</p>
<p>An extension feature has no reason to exist without being aggregated by a 
base feature. </p>
<script type="text/javascript">insertLinkToTop()</script>

<p><b>Base Feature Instantiation</b></p>
<p>Imagine the case where the base feature already contains an extension, and 
this base feature, an instance, is in turn instantiated. See the 
Instance/Reference concept in the referenced article [<a href="#References">3</a>].&nbsp; 
You have the choice to duplicate or not the extension feature. This choice is 
again a declaration which is made in the OSM file of the corresponding extension 
feature. The declaration is: you have to add the Creation::parameter inside the 
OSM file.</p>
<table border="0" id="table3">
	<caption>Fig.3 Local or Not Feature Extension</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAOsmFeatureExtension_local.gif"></td>
	</tr>
</table>
<p>On the picture, the base feature, an instance, is a reference to be 
instantiated. If you have declared your extension feature &quot;local&quot;, it will be 
not instantiated on the new base feature instance, if not it will be 
instantiated too. This local/not local declaration is done through the OSM file, see <a href="#Declaring Information to Manage the Extension Feature">
Declaring Information to Manage Feature Extension</a> 
section, and is not run-time modifiable.</p>
<p>The local mode is strongly recommended. </p>
<script type="text/javascript">insertLinkToTop()</script>

<p><b>Feature Extension External Naming</b></p>
<p>We would like to inform the reader about a&nbsp; little particularity about the 
extension feature naming. This feature is processed as any other feature, which 
means its automatic name will include an incremental number. But 
if you read the article [<a href="#References">4</a>] you will see that the 
value is computed from the aggregating feature. In consequence, if you do not 
change yourself the external name computation, you may have several identical external name for different extension feature [<a href="#References">4</a>]</p>
<table border="0" id="table4">
	<caption>Fig.4 Feature Extension Naming</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAOsmFeatureExtension_naming.png"></td>
	</tr>
</table>
<p>Here you have a picture [Fig. 4] of the Product Structure use case 
before the <i>CATIAlias</i> implementation on the Extension feature. You can see 
that all extensions have the same external name: <code>CAAPstINFRelimitedLine.1</code>: 
This is due to the fact that extension features are the first elements aggregated 
by their respective base feature. You can solve the issue in the use case by 
implementing the <i>CATIAlias</i> interface on the Extension feature [<a href="#References">4</a>].</p>
<p><b>A Feature like other one</b></p>
<p>This feature is also integrated to the undo/redo mechanism. </p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="Where store Extension Feature"></a>Where Store Feature Extension?</h3>
<p>Reading the article &quot;Understanding Applicative container&quot; [<a href="#References">5</a>] 
you have learnt that a feature can only be instantiated within a container. </p>
<p>When you use the <code>AddExtension</code> 
method of the <em>CATFmFeatureFacade</em> interface to extend a base feature, 
eventually this method creates an instance of the extension feature.&nbsp; But if you 
consider the signature of this method, it only contains the 
<a href="#identifier">identifier</a> of the 
extension. So this method requires additional information to retrieve the 
container. This information will be retrieved within the OSM file where the feature extension StartUp is defined. See the <a href="#Declaring Information to Manage the Extension Feature">
Declaring Information to Manage Feature Extension</a> 
section.</p>
<p>Some recommendations to choose the right container:</p>
<ul>
	<li>Can I use the base feature container ?</li>
</ul>
<blockquote>
	<p>If this container is your container, it is possible, otherwise create 
	another applicative container.&nbsp; You must not insert your feature in a 
	container which is not yours.</p>
</blockquote>
<ul>
	<li>Can I use the same container as the one containing my applicative 
	features ?</li>
</ul>
<blockquote>
	<p>There is no restriction to your two kinds of features, those deriving 
	from scratch and your extension features, sharing the same container.&nbsp;
	</p>
</blockquote>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="Main Steps to Develop a Feature Extension"></a>Main Steps to Develop Feature Extension</h2>
<p>Now we have seen the concepts, we can show implementation details. We advise 
the reader to refer to use cases implementing the mechanism that to have a better idea of the extension feature usage</p>
<ul>
	<li>Feature Extension, in Feature Modeler&nbsp;[<a href="#References">1</a>]</li>
</ul>
<h3><a name="Designing the Extension Feature"></a>Designing Feature Extension</h3>
<p>Using OSM technology [<a href="#References">2</a>], you design the extension feature by using tags. </p>
<table class="code" id="table5">
	<tr>
		<td>
		<pre>document <b>`MyStartUpCatalogName</b>.CATfct` 
{
   container RootCont #root 
   {
       ...
       feature <b>MyExtensionName</b> <span class="style3">#startup #extension</span>   
       {
           ...
       }
       ...
   }
}
</pre>
		</td>
	</tr>
</table>
<p>Note, the<code> #startup #extension </code>facets, it declares the feature 
statement as a StartUp of an feature 
extension . </p>
<p>We must customize bold the argument:</p>
<ul>
	<li>The first, <code>`MyStartUpCatalogName'</code><b> </b>is the name of 
	the catalog containing all startups designed by this OSM file. You 
	can update an existing catalog, or create a new one to integrate your new 
	extension feature StartUp.&nbsp; </li>
	<li><a name="identifier"></a>The second, '<code>MyExtensionName</code>' is 
	the <strong>identifier</strong> of the extension feature. (respect the CAA 
	naming rules). This identifier is used:<ul>
		<li>As latetype to implement interfaces on your feature extension</li>
		<li>To add or retrieve an extension. The <code>AddExtension</code>, 
		and <span class="style1">GetExtension</span> methods require this 
		identifier as input.
		</li>
	</ul>
	</li>
</ul>
<p>Between the two brackets you define the feature extension itself.</p>
<table class="code" id="table13">
	<tr>
		<td>
		<pre>...
  feature MyExtensionName #startup #extension   
  {
     #<strong>creation::parameter</strong> = metadata_identifier1
     ...
     attribute 1 
     attribute 2
     ...
  }
...</pre>
		</td>
	</tr>
</table>
<p>As usual you insert the attribute definition, and perhaps some 
initialization. But the most relevant information is the #<strong>creation::parameter </strong>
line<strong>. </strong>This line is MANDATORY for a feature extension. You can 
omit it, only if your StartUp derives from another one, itself having this declaration 
directly or not. In this case you <strong>inherit</strong> of the derived StartUp 
behaviors. </p>
<p><code>metadata_identifier1</code> is the name of a metadata statement 
declaring the information to manage the feature extension: </p>
<table class="code" id="table15">
	<tr>
		<td>
		<pre>document <b>`MyStartUpCatalogName</b>.CATfct` 
{
   container RootCont #root 
   {
       ...
       feature <b>MyExtensionName</b> <span class="style3">#startup #extension</span>   
       {
          #<strong>creation::parameter</strong> = metadata_identifier1
          ...
       }
       ...
   }
   <strong>metadata</strong>  metadata_identifier1
   {
       ...
   }
}
</pre>
		</td>
	</tr>
</table>
<p>A metadata statement is at the same level as the container one. Several 
feature extension can share the same metadata block. &nbsp;</p>
<p>Now let us detail the contents of this specific metadata block.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="Declaring Information to Manage the Extension Feature"></a>
Declaring Information to Manage Feature Extension</h3>
<p>The metadata block associated with a <code>#creation::parameter</code> facet 
MUST contain these following four lines. All are mandatory, the order does not matter.</p>
<table class="code" id="table16">
	<tr>
		<td>
		<pre>metadata metadata_identifier {
      `<strong>ContType` </strong>=&quot;ContainerType&quot;
      <strong>`Container` </strong>=&quot;ContainerName&quot;
      <strong>`Extends` </strong>=[ &quot;StartUp1&quot;,...]
      <strong>`IsLocal` </strong>= true | false
}</pre>
				</td>
	</tr>
</table>
<p><strong>WARNING </strong>: the `` can be omitted when the osm file is updated, 
but when the osm file will be generated by CATFctEditorAssistant, the `` will be 
visible.</p>
<ul>
	<li>Information to automatically create applicative container
	<table class="code" id="table17">
		<tr>
			<td>
			<pre><b>ContType</b>=&quot;MyContainerType&quot;
</pre>
			</td>
		</tr>
	</table>
	<p>The <code>ContType</code> argument, is the late type of the container.</p>
	<p>Thanks to this line, the <code>AddExtension</code> method is able to 
	create the container itself if it does not already exist in the current main 
	stream. Moreover 
	this method,&nbsp;after the creation, will activate the container by calling the
	<code>Init()</code> method of the <i>CATInit</i> interface</p>
	<li>The identifier of the container to instantiate extension features in:
	<table class="code" id="table18">
	<tr>
		<td>
		<pre><b>Container</b>=&quot;MyApplicativeContainerIdentifier&quot;</pre>
		</td>
	</tr>
</table>
   <p>The identifier of the container in which the extension feature will be 
	created.</p> 
	<li>The list of extended features:<table class="code" id="table6">
	<tr>
		<td>
		<pre><b>Extends</b>=["MyBaseFeature1, MyBaseFeature2, MyBaseFeature3&quot;]</pre>
		</td>
	</tr>
</table>
   <p>where <code>MyBaseFeaturei</code> is the identifier (Startup identifier [<a href="#References">4</a>]) of a 
	base feature. The list must, of course, contain at least one element.</p>
	<p>The list of the extendable StartUp is defined by each application. Refer 
	the corresponding documentation.</p>
	<p>Attention, if the StartUp extends only one feature , don't forget the []&nbsp; 
	(typical error)</p>
	<table class="code" id="table19">
	<tr>
		<td>
		<pre><b>Extends</b>=[&quot;MyBaseFeature1&quot;]</pre>
		</td>
	</tr>
</table>
	</li>
	<li>Local or Not
	<table class="code" id="table6">
		<tr>
			<td>
			<pre><b>IsLocal</b>= true or false</pre>
			</td>
		</tr>
	</table>
	<p>the value can be true ( no feature extension instantiation in case of base 
	feature instantiation) or false (otherwise); true is strongly recommended</p>
	</li>
	</ul>
	<script type="text/javascript">insertLinkToTop()</script>
	
<h3><a name="About the Applicative Container"></a>About the Applicative Container</h3>
<p>Here we inform the reader about the main particularity when an 
applicative container contains extension features:</p>
<p>Whatever the modeler responsible for the stream, <b>natively all applicative 
containers will be automatically loaded</b> (and initialized) when the stream is 
loaded in session (in other word stream open in edit mode, or switched in 
<strong>edit</strong> 
mode).
</p>
<h3><a name="Interfaces to Implement on the Extension Feature"></a>Interfaces to 
Implement on Feature Extension</h3>
<p>Except <em>CATIRedrawEvents</em>, natively implemented on any feature, the&nbsp;<strong>basic interfaces
</strong> <b>to implement</b> on each 
extension feature are:</p>
<table class="border1" id="table10">
	<tr>
		<th height="22" style="width: 237px">Interface Name</th>
		<th height="22">Context</th>
		<th height="22">Behavior</th>
	</tr>
	<tr>
		<td style="width: 237px">MyInterface</td>
		<td>all</td>
		<td>interface to handle the attributes of the extension feature</td>
	</tr>
	<tr>
		<td style="width: 237px">CATIModelEvents</td>
		<td>UI</td>
		<td>to be able to update the viewer</td>
	</tr>
	<tr>
		<td style="width: 237px">CATI3DGeoVisu/CATI2DGeoVisu</td>
		<td>UI</td>
		<td>to define the 2D/3D visualization</td>
	</tr>
	<tr>
		<td style="width: 237px">CATIVisProperties</td>
		<td>UI</td>
		<td>to be able to modify the graphic properties through Properties 
		command</td>
	</tr>
	<tr>
		<td style="width: 237px">CATISelectShow</td>
		<td>UI </td>
		<td>to be able to hide/show the extension feature (CATIVisProperties 
		must be implemented too)</td>
	</tr>
	<tr>
		<td style="width: 237px">CATIEdit</td>
		<td>UI</td>
		<td>to edit the extension feature</td>
	</tr>
	<tr>
		<td style="width: 237px">CATIFmFeatureBehaviorCustomization</td>
		<td>all</td>
		<td>To implement the Build 
		[<a href="#References">6</a>], but do not use this interface to 
		customize CCP behavior .</td>
	</tr>
	<tr>
		<td style="width: 237px">CATINavigateObject (*)</td>
		<td>UI</td>
		<td>To give a name to the node, and to list its children, to be in turn 
		visualized in the spec tree. Check that the base feature implements 
		itself<em> CATINavigateObject</em> , and its implementation takes into its possible 
extensions.&nbsp;&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 237px">CATIAlias</td>
		<td>all</td>
		<td>To provide SetAlias and GetAlias</td>
	</tr>
	</table>
<p>These are the most generic interfaces, but according to the application 
defining the base feature, some others can exist. In all cases, first have a 
look at the documentation describing the application defining the base feature, 
you find all the necessary information to integrate your feature extension.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h2><a name="InShort"></a>In Short</h2>
<p>This article has explained that the feature extension mechanism permits the 
extension of any kind of feature (except an extension feature) both:</p>
<ul>
	<li>in data and behavior,</li>
	<li>externally to the base feature. (without modification on the base 
	feature)</li>
</ul>
<p>This mechanism has a lot of facilities:</p>
<ul>
	<li>The life cycle of the extension feature is tied to the base feature, 
	deleting the base feature leads to delete its extension(s),</li>
	<li>The applicative container containing the extension are automatically 
	opened and initialized when it is necessary,</li>
	<li>Application container can be automatically created by declaring the 
	right information in the OSM file</li>
</ul>
<p>You should :</p>
<ul>
	<li>Deliver a StartUp catalog file containing the extension 
	feature</li>
	<li>Perhaps Create and manage a new applicative container</li>
	<li>Implement interfaces on the new feature or manage their attributes 
	through CATFmFeatureFacade class</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
<tr>
		<td valign="top">[1]</td>
		<td>
		<a href="../CAAOsmUseCases/CAAV5V6OsmUcExtensionManagement.htm">Working with Feature Extensions</a></td>
	</tr>

	<tr>
		<td valign="top">[2]</td>
		<td>
		<a href="../CAAOsmTechArticles/CAAOsmTaModelingStartUps.htm">Modeling Feature StartUps</a></td>
	</tr>
	<tr>
		<td valign="top">[3]</td>
		<td>
		<a href="../CAAOsmTechArticles/CAAOsmOverview.htm">Feature Modeler Overview</a></td>
	</tr>
	<tr>
		<td valign="top" height="15">[4]</td>
		<td height="15"><a href="CAAV5V6FmExtTaNamingFeatures.htm">Understanding Feature Naming</a></td>
	</tr>
	<tr>
		<td valign="top">[5]</td>
		<td>
		<a href="../CAAOsmTechArticles/CAAOsmTaApplicativeContainer.htm">Understanding Applicative Container</a></td>
	</tr>

<tr>
		<td valign="top" height="15" style="height: 13px">[6]</td>
		<td height="15" style="height: 13px">
		<a href="../CAAV5V6FmExtUseCases/CAAV5V6FmExtUcBuildUpdate.htm">The Build/Update Protocol</a></td>
	</tr>

	
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <b>1</b> [Aug 2012]</td>
		<td valign="top">Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
