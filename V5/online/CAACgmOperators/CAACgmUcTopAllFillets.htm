<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating Fillets</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Fillets</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case explains how to create constant fillets, variable fillets 
		and fillets with rolling edges.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAGMOperatorsAllFillets Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAGMOperatorsAllFillets Do?</a></li>
				<li><a href="#How">How to Launch CAAGMOperatorsAllFillets</a></li>
				<li><a href="#Where">Where to Find the CAAGMOperatorsAllFillets 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you use fillets in geometric modeler applications.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="UseCase"></a>The CAAGMOperatorsAllFillets Use Case</h2>
<p>CAAGMOperatorsAllFillets is a use case of the CAAGMOperatorsInterfaces.edu framework 
that illustrates GMOperatorsInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAGMOperatorsAllFillets Do?</h3>
<p>CAAGMOperatorsAllFillets creates two solid cuboids, performs a Boolean union 
of the cubes, then creates fillets on the resulting solid.</p>
<table class="fill">
	<tr>
		<td>
		<img alt="Constant Radius Fillet" src="images/CAACgmTopfilletconstant.gif" width="304" height="217"></td>
		<td>The CAATopConstantFillets function which is defined in the CAATopConstantFillets.cpp 
		file creates a constant fillet along the edges common to both cubes.</td>
	</tr>
	<tr>
		<td>
		<img alt="Constant Radius Fillet" src="images/CAACgmToprollingedges.gif" width="310" height="215"></td>
		<td>The CAATopRollingEdges function which is defined in the CAATopRollingEdges.cpp 
		file creates a fillet along the common edges and for specified rolling edges.</td>
	</tr>
	<tr>
		<td>
		<img alt="Variable Radius Fillet" src="images/CAACgmTopvariableradius.gif" width="307" height="213"></td>
		<td>The CAATopVariableFillets function which is defined in the CAATopVariableFillets.cpp 
		file creates a variable radius fillet on one edge of the solid.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAGMOperatorsAllFillets</h3>
<p>To launch CAAGMOperatorsAllFillets, you will need to set up the build time environment, 
then compile CAAGMOperatorsAllFillets.m along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>If you simply type CAAGMOperatorsAllFillets with no argument, the use case executes, 
but doesn&#39;t save the result in an NCGM file. If you want to save this result, provide 
the full pathname of the NCGM file to create. For example:</p>
<p><code>CAAGMOperatorsAllFillets e:\Fillets.NCGM</code></p>
<p>This NCGM file can be displayed using the CAAGMModelGemBrowser use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAGMOperatorsAllFillets Code</h3>
<p>The CAAGMOperatorsAllFillets use case is made of a main named CAATopFilletsMain.cpp 
located in the CAAGMOperatorsAllFillets.m module of the CAAGMOperatorsInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAGMOperatorsInterfaces.edu\CAAGMOperatorsAllFillets.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven steps in CAATopFilletsMain.cpp:</p>
<ol>
	<li><a href="#Creates the Geometry Factory">Creating the Geometry Factory</a></li>
	<li><a href="#Direct Creation">Creating the Solid Cuboids</a></li>
	<li><a href="#Use of  a Basic Topological Operator">Performing a Boolean Union 
	on the Cuboids</a></li>
	<li><a href="#Constant">Creating a Constant Radius Fillet around the Edges Common 
	to Both Cubes</a></li>
	<li><a href="#rolling">Creating a Constant Radius Fillet by Specifying Rolling 
	Edges</a></li>
	<li><a href="#variable">Creating a Variable Radius Fillet</a></li>
	<li><a href="#Writes the Model and Closes the Factory">Writing the Model and 
	Closing the Container</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creates the Geometry Factory"></a>Creating the Geometry Factory</h3>
<p>The geometry factory (CATGeoFactory) creates and manages all the CATICGMObject. 
This creation is done by the global function <code>::CATCreateCGMContainer</code>. 
Notice that the factory can be defined by reading a NCGM file that was previously 
stored. In that case, the global function <code>::CATLoadCGMContainer</code> must 
be used.</p>
<pre class="code">CATGeoFactory* piGeomFactory = <strong>::CATCreateCGMContainer</strong>() ;
if (NULL==piGeomFactory) return (1);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Direct Creation"></a>Creating the Solid Cuboids</h3>
<p>See [<a href="#References">2</a>] which illustrates how to create a solid cuboid.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Use of  a Basic Topological Operator"></a>Performing a Boolean Union 
on the Cuboids</h3>
<p>See also [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Constant"></a>Creating a Constant Radius Fillet around the Edges Common 
to Both Cubes</h3>
<p>To create a constant radius fillet, you must:</p>
<ol>
	<li>Define your CATDynFilletRadius.
	<pre class="code">double * ratio= NULL;
CATDynFilletRadius * pRadius = new CATDynFilletRadius(3.,    // radius value
            NULL,  
            ratio,  
            NULL);</pre>
	<p>The arguments two, three and four of the constructor are only to be specified 
	when the fillet to be created is of variable radius. The cells to be filleted 
	with a constant radius are specified in the CATDynEdgeFilletRibbon constructor.</p>
	</li>
	<li>Define the CATDynEdgeFilletRibbon object whereby you specify what cells 
	are to be filleted. If you create a constant radius fillet, the list to be passed 
	as the second argument of the CATDynEdgeFilletRibbon is a single item list.
	<pre class="code">CATLISTP(CATDynFilletRadius) listRadius;		
listRadius.Append(pRadius);		
CATDynEdgeFilletRibbon * pRibbon = new CATDynEdgeFilletRibbon(listEdges, listRadius);</pre>
	</li>
	<li>If need be, set the parameters of the CATDynFilletRibbon.
	<pre class="code">pRibbon -&gt;SetSegmentationMode(CATDynTrim);</pre>
	</li>
	<li>Create the CATICGMDynFillet operator by using the CATCGMCreateDynFillet 
	operator.
	<pre class="code">CATICGMDynFillet * pFilletOp1 = CATCGMCreateDynFillet(iFactory,iTopData,iBody);</pre>
	</li>
	<li>Append the CATDynEdgeFilletRibbon to the operator instance.
	<pre class="code">pFilletOp1 -&gt;Append(pRibbon);</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="rolling"></a>Creating a Constant Radius Fillet by Specifying Rolling 
Edges</h3>
<p>To create a variable radius fillet, you must:</p>
<ol>
	<li>Proceed as you would do for a constant radius fillet.</li>
	<li>In the CATDynEdgeFilletRibbon constructor, specify the list of rolling edges 
	as well as the fillet behavior (CATDynRolling).
	<pre class="code">CATDynEdgeFilletRibbon * pRibbon = new CATDynEdgeFilletRibbon(listEdges, listRadius,
            CATBody::CATEdgePropagAuto,
            listRollingEdges,   // the rolling edges
            CATDynRolling);</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="variable"></a>Creating a Variable Radius Fillet</h3>
<p>To create a variable radius fillet, you must:</p>
<ol>
	<li>Define the CATDynFilletRadius necessary to define the fillet shape. You 
	must specify:
	<ul>
		<li>The radius value (in mm).</li>
		<li>The pointer to the cell on which the fillet is to be applied.</li>
		<li>The pointer to the ratio of the edge length which defines the point 
		where the radius is defined.</li>
		<li>And the pointer to the tangency angle at the point where the radius 
		is specified. Note that either a NULL pointer or a NULL angle are supported 
		so far. If a NULL pointer is passed, the radius law is not constrained and 
		the resulting fillet looks something like a &quot;linear&quot; one. If a NULL value 
		is passed for the extremities, the resulting fillet looks something like 
		a &quot;cubic&quot; one.</li>
	</ul>
	<pre class="code">double * ratio0= new double(0.0);
CATDynFilletRadius * pRadius0 = new CATDynFilletRadius(4.,  // radius value
            listCells[2],  
            ratio0,  
            NULL);  // &quot;free&quot; tangency at this extremity
...
double * ratio1= new double(0.25);
CATDynFilletRadius * pRadius1 = new CATDynFilletRadius(0.2,  // radius value
            listCells[2],  
            ratio1,  
            NULL);  // &quot;free&quot; tangency for this location</pre>
	<p>The second and third arguments of the constructor must be specified when 
	the fillet to be created is of variable radius.</p>
	</li>
	<li>Define the CATDynEdgeFilletRibbon object whereby you specify the list of 
	radii to be applied along the edge to be filleted. The list of edges to be filleted 
	is to be set to NULL.
	<pre class="code">CATLISTP(CATDynFilletRadius) listRadius;		
listRadius.Append(pRadius0);
listRadius.Append(pRadius1);
listRadius.Append(pRadius2);
listRadius.Append(pRadius3);
         
// Create the CATDynEdgeFilletRibbon
//
CATDynEdgeFilletRibbon * pRibbon = new CATDynEdgeFilletRibbon(NULL, listRadius);</pre>
	</li>
	<li>If need be, set the parameters of the CATDynFilletRibbon.<pre class="code">pRibbon -&gt;SetSegmentationMode(CATDynTrim);</pre>
	</li>
	<li>Create the CATICGMDynFillet operator by using the CATCGMCreateDynFillet 
	operator.<pre class="code">CATICGMDynFillet * pFilletOp1 = CATCGMCreateDynFillet(iFactory,iTopData,iBody);</pre>
	</li>
	<li>Append the CATDynEdgeFilletRibbon to the operator instance.<pre class="code">pFilletOp1 -&gt;Append(pRibbon);</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Writes the Model and Closes the Factory"></a>Writing the Model and 
Closing the Container</h3>
<p>To save the model in a file, the <code>::CATSaveCGMContainer</code> global function 
is used. Notice that in the use case, the save is conditioned by an input parameter 
representing the file inside which the model must be saved.</p>
<p>The use case ends with the closure of the geometry factory, done by the <code>
::CATCloseCGMContainer</code> global function.</p>
<pre class="code"> if(1==toStore)
 {
#ifdef _WINDOWS_SOURCE
   ofstream filetowrite(pfileName, ios::binary ) ;
#else
   ofstream filetowrite(pfileName,ios::out,filebuf::openprot) ;
#endif

   <strong>::CATSaveCGMContainer</strong>(piGeomFactory,filetowrite);
   filetowrite.close();
 }	

 //
 // Closes the container
 //
 <strong>::CATCloseCGMContainer</strong>(piGeomFactory);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To create fillets, you must specify a list of radii as well as a list of edges 
to be filleted. For a constant radius, the list of radii contains a single item 
that you can apply to one or more edges. When creating a variable fillet, you must 
specify the list of radii. The edge to be filleted is then specified in the radius 
definition.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAACgmUcTopOverview.htm">Overview of the Topological Operators</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2002]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
