<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating a Single Patch NURBS Surface</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Single Patch NURBS Surface</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>A NURBS can be dressed by using the CATICGMTopSkin operator. You can 
		do this operation either on a single patch or a multi patch NURBS. This 
		article explains how to proceed for a single patch NURBS.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAGMOperatorsNurbsSurfSinglePatch Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAGMOperatorsNurbsSurfSinglePatch 
				Do?</a></li>
				<li><a href="#How">How to Launch CAAGMOperatorsNurbsSurfSinglePatch</a></li>
				<li><a href="#Where">Where to Find the CAAGMOperatorsNurbsSurfSinglePatch 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you create a single patch NURBS surface, then 
transform it into a skin.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAGMOperatorsNurbsSurfSinglePatch Use Case</h2>
<p>CAAGMOperatorsNurbsSurfSinglePatch is a use case of the CAAGMOperatorsInterfaces.edu 
framework that illustrates the GMOperatorsInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAGMOperatorsNurbsSurfSinglePatch Do?</h3>
<p>The CAAGMOperatorsNurbsSurfSinglePatch use case:</p>
<ul>
	<li>Creates the geometry factory.</li>
	<li>Creates the grid of poles to be used for the NURBS surface.</li>
	<li>Creates the knot vectors along U and V.</li>
	<li>Creates a rational NURBS surface and modifies one of the pole weight.</li>
	<li>Creates a skin relying on the NURBS.</li>
	<li>Writes the model and closes the container.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAGMOperatorsNurbsSurfSinglePatch</h3>
<p>To launch CAAGMOperatorsNurbsSurfSinglePatch , you will need to set up the build 
time environment, then compile CAAGMOperatorsNurbsSurfSinglePatch.m along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>If you simply type CAAGMOperatorsNurbsSurfSinglePatch with no argument, the use 
case executes, but doesn&#39;t save the result in an NCGM file. If you want to save 
this result, provide the full pathname of the NCGM file to create. For example:</p>
<p><code>CAAGMOperatorsNurbsSurfSinglePatch e:\NurbsSurfSinglePatch.NCGM</code></p>
<p>This NCGM file can be displayed using the CAAGMModelGemBrowser use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAGMOperatorsNurbsSurfSinglePatch Code</h3>
<p>The CAAGMOperatorsNurbsSurfSinglePatch use case is made of a main named CAATopNurbsSurfSinglePatch.cpp 
located in the CAAGMOperatorsNurbsSurfSinglePatch .m module of the CAAGMOperatorsInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAGMOperatorsInterfaces.edu\CAAGMOperatorsNurbsSurfSinglePatch.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six steps in CAATopNurbsSurfSinglePatch.cpp:</p>
<ol>
	<li><a href="#Step1">Creating the Geometry Factory</a></li>
	<li><a href="#Step2">Creating the Grid of Poles</a></li>
	<li><a href="#Step3">Creating the Knot Vector</a></li>
	<li><a href="#Step4">Creating of the Nurbs Surface</a></li>
	<li><a href="#Step5">Creating the Skin</a></li>
	<li><a href="#Step6">Writing the Model and Closing the Container</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Geometry Factory</h3>
<p>The geometry factory (CATGeoFactory) creates and manages all the CATICGMObject. 
This creation is done by the global function <code>::CATCreateCGMContainer</code>. 
Notice that the factory can be defined by reading a NCGM file that was previously 
stored. In that case, the global function <code>::CATLoadCGMContainer</code> must 
be used.</p>
<pre class="code">CATGeoFactory* piGeomFactory = <strong>::CATCreateCGMContainer</strong>() ;
if (NULL==piGeomFactory) return (1);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Grid of Poles</h3>
<p>Before going any further, do not skip the warning below:</p>
<table class="Remark">
	<tr>
		<td class="remark"><span class="run-in">Warning</span>: When creating a 
		knot vector in CATIA, the number of knots to be specified in the CATKnotVector 
		constructor is the number of knots <strong>with different values</strong>. 
		The total number of nodes is deduced from the multiplicity array. Given 
		this:<br>
		<code><strong>Total </strong>number of nodes (including nodes with same 
		value) = number of poles + degree + 1</code><br>
		<code>Number of poles = sum of multiplicities - last multiplicity</code><br>
		<code>Number of poles = sum of multiplicities - (degree + 1)</code></td>
	</tr>
</table>
<p>In the CAATopNurbsSurfSinglePatch.cpp sample, a single patch (two nodes along 
U and V) NURBS is to be created. The following set of data is selected for the NURBS 
vectors (the same along U and V).</p>
<ul>
	<li>Degree of the basis functions = 4</li>
	<li>Number of knots with different value = 2</li>
	<li>Array of multiplicities = {degree+1, degree+1} = { 5 , 5 }</li>
</ul>
<p>Therefore the number of poles to be specified along U and V is 5 and the total 
number of poles is nbPolesU* nbPolesV = 25.</p>
<pre class="code">int nbPoleU = 5;
int nbPoleV = 5;
CATMathGridOfPoints gridOfPoints(nbPoleU,nbPoleV);
    
// Row 0
gridOfPoints.SetPoint(CATMathPoint( 0., 0., 0.),0,0);
...

// Display the control points
//
for (int i = 0; i &lt; nbPoleU; i++)
{
  for (int j = 0; j &lt; nbPoleV; j++)
  {
    CATMathPoint ptToBeDisplayed = gridOfPoints.GetPoint(i,j);
    CATCartesianPoint* piCartPt = piGeomFactory-&gt;CreateCartesianPoint(ptToBeDisplayed);
  }
}</pre>
<p>Displaying the control points allows you to check their position with respect 
to the NURBS.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3">Creating the Knot Vector</a></h3>
<p>Note that CATIA Version 5 does not support periodic NURBS. You can create a periodic 
NURBS but the geometric modeler does not guarantee that the operations that can 
be applied to such NURBS surface later on will be performed properly.</p>
<pre class="code">long IsPeriodic= 0;
long Degree= 4;
long KnotsCount= 2;
double Knots[]= {0.,10.};
long Multiplicities[]= {5,5};
long IndexOffset= 1;
    
CATKnotVector NonUniformU(Degree,IsPeriodic,KnotsCount,Knots,
        Multiplicities,IndexOffset);
CATKnotVector NonUniformV(Degree,IsPeriodic,KnotsCount,Knots,
        Multiplicities,IndexOffset);<em>
</em></pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the NURBS Surface</h3>
<p>Prior to creating the NURBS, the control point weights are initialized.</p>
<pre class="code">long isRational=1;    
double * aWeights=new double[nbPoleU*nbPoleV];
for (i = 0; i &lt; nbPoleU*nbPoleV; i++) 
  {
      aWeights[i] = 1.;   // Initialize the control point weights
  }
    
// NURBS Surface creation
//
CATNurbsSurface * piSurf1 = piGeomFactory-&gt;
        CreateNurbsSurface(NonUniformU, NonUniformV,isRational,gridOfPoints,aWeights);</pre>
<p>Then the (3,3) control point weight is modified.</p>
<pre class="code">// Assign a weight value (80) to the (3,3) poles 
//
piSurf1-&gt;SetOneWeight(3,3,80);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Skin</h3>
<p>For how to create a skin, see the CAAGMOperatorsOverview
use case[<a href="#References">2</a>]. You have to define the limits on which the 
skin is to be applied. In this use case, the maximum limits are specified.</p>
<pre class="code">// Retrieve the maximum limits
CATSurLimits surMaxLimits ;
piSurf1-&gt;GetMaxLimits(surMaxLimits) ;
    
CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();
CATTopData topdata(pConfig);

// Create the CATTopSkin operator to be applied to the max limits
CATICGMTopSkin * pSkinOpe =::CATCGMCreateTopSkin(piGeomFactory,
        &amp;topdata,
        piSurf1,
        &amp;surMaxLimits);
...</pre>
<p>This is the skin you obtain (the green bullets are the control points): </p>
<p>
<img alt="Result Skin" src="images/CAACgmTopsinglepatchrational.gif" width="308" height="275"></p>
<p>This is to be compared with the equivalent non rational one:<br>
</p>
<p>
<img alt="Equivalent Non-rational Skin" src="images/CAACgmTopsinglepatchnonrational.gif" width="350" height="266"></p>
<p><strong>Note</strong>: The greater the weight is, the closer is the surface to the control point.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Writing the Model and Closing the Container</h3>
<p>To save the model in a file, the <code>::CATSaveCGMContainer</code> global function 
is used. Notice that in the use case, the save is conditioned by an input parameter 
representing the file inside which the model must be saved.</p>
<p>The use case ends with the closure of the geometry factory, done by the <code>
::CATCloseCGMContainer</code> global function.</p>
<pre class="code"> if(1==toStore)
 {
#ifdef _WINDOWS_SOURCE
   ofstream filetowrite(pfileName, ios::binary ) ;
#else
   ofstream filetowrite(pfileName,ios::out,filebuf::openprot) ;
#endif

   <strong>::CATSaveCGMContainer</strong>(piGeomFactory,filetowrite);
   filetowrite.close();
 }	

 <em>//
 // Closes the container
 //</em>	
 <strong>::CATCloseCGMContainer</strong>(piGeomFactory);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Here are a few relations to remember when creating a NURBS</p>
<p><code><strong>Total</strong> number of nodes = number of poles + degree + 1</code><br>
<code>Number of poles = sum of multiplicities - last multiplicity</code><br>
<code>Number of poles = sum of multiplicities - (degree + 1)</code></p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAACgmUcTopOverview.htm">Overview of the Topological Operators</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAACgmModel/CAACgmTaGobAboutNurbs.htm">
		About NURBS</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
