<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>PLMInterferenceUseItf Interface PLMIInterferenceResult</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../PLMInterferenceUseItf.htm" href="../PLMInterferenceUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "PLMInterferenceUseItf";	}
		function getCurrentObjectName() { 
 	return "PLMIInterferenceResult"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>PLMInterferenceUseItf Interface PLMIInterferenceResult</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_PLMIInterferenceResult_49203','PLMIInterferenceResult','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>PLMIInterferenceResult</b>
</p>
<p>
<b><i> Interface to retrieve interference results of an Interference Simulation.</i></b><br>

 <br> Use method <script type="text/javascript"> activateLinkAnchor('PLMIInterferenceSimulation','GetInterferenceResults','PLMIInterferenceSimulation.GetInterferenceResults') </script> to retrieve the list of interference results. Each element of this list is a pointer on interface <b>PLMIInterferenceResult</b>.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAnalysisStatus(PLMIInterferenceResult::ResultStatus&amp;)"><b>GetAnalysisStatus</b></a>(PLMIInterferenceResult::ResultStatus&amp;)
<dd>  Returns the status defined by user to interference.
 <dt> o 
    <a href="#GetFirstProduct(CATIPLMNavOccurrence*&amp;)"><b>GetFirstProduct</b></a>(CATIPLMNavOccurrence*&amp;)
<dd>  Retrieves the first product in interference.
 <dt> o 
    <a href="#GetGeometricalValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"><b>GetGeometricalValues</b></a>(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)
<dd>  Retrieves the Geomtrical Values for an interference.
 <dt> o 
    <a href="#GetResultType(PLMIInterferenceResult::ResultType&amp;)"><b>GetResultType</b></a>(PLMIInterferenceResult::ResultType&amp;)
<dd>  Retrieves the type of result.
 <dt> o 
    <a href="#GetSecondProduct(CATIPLMNavOccurrence*&amp;)"><b>GetSecondProduct</b></a>(CATIPLMNavOccurrence*&amp;)
<dd>  Retrieves the second product in interference.
 <dt> o 
    <a href="#GetUserComment(CATUnicodeString&amp;)"><b>GetUserComment</b></a>(CATUnicodeString&amp;)
<dd>  Returns the comment defined by user to interference.
 <dt> o 
    <a href="#GetUserType(PLMIInterferenceResult::ResultUserType&amp;)"><b>GetUserType</b></a>(PLMIInterferenceResult::ResultUserType&amp;)
<dd>  Returns the type defined by user to interference.
 <dt> o 
    <a href="#SetAnalysisStatus(PLMIInterferenceResult::ResultStatus)"><b>SetAnalysisStatus</b></a>(PLMIInterferenceResult::ResultStatus)
<dd>  Sets the status defined by user to interference.
 <dt> o 
    <a href="#SetUserComment(CATUnicodeString&amp;)"><b>SetUserComment</b></a>(CATUnicodeString&amp;)
<dd>  Sets a comment defined by user to interference.
 <dt> o 
    <a href="#SetUserType(PLMIInterferenceResult::ResultUserType)"><b>SetUserType</b></a>(PLMIInterferenceResult::ResultUserType)
<dd>  Sets the type defined by user to interference.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#ResultStatus"><b>ResultStatus</b></a>
<dd>  Interference Status.
 <dt> o 
    <a href="#ResultType"><b>ResultType</b></a>
<dd>  Interference Result Type.
 <dt> o 
    <a href="#ResultUserType"><b>ResultUserType</b></a>
<dd>  Interference User Type.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAnalysisStatus"></a><a name="GetAnalysisStatus(PLMIInterferenceResult::ResultStatus&amp;)"></a> <dt> o <b>GetAnalysisStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAnalysisStatus</b>(<td><script type="text/javascript"> activateLink('PLMIInterferenceResult::ResultStatus','PLMIInterferenceResult::ResultStatus&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the status defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oStatus</tt>
   <dd> [out]   The status defined by </dd>
<script type="text/javascript"> activateLinkAnchor('','ResultStatus','ResultStatus') </script> enum. 
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the status of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   PLMIInterferenceResult::ResultStatus  Status = PLMIInterferenceResult::ResultStatusNotAnalyzed ;
   
   HRESULT hr = piResult->GetAnalysisStatus (Status) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetFirstProduct"></a><a name="GetFirstProduct(CATIPLMNavOccurrence*&amp;)"></a> <dt> o <b>GetFirstProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFirstProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*&amp;')</script> <td><tt>oProduct</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the first product in interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd> [out, CATBaseUnknown#Release]   First product in interference.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the first product in interference for an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   CATIPLMNavOccurrence         * piOcc      = NULL ;
   
   HRESULT hr = piResult->GetFirstProduct (piOcc) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetGeometricalValues"></a><a name="GetGeometricalValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>GetGeometricalValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGeometricalValues</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPoint1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPoint2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistance</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Geomtrical Values for an interference.
 <br> Retrieve the minimal distance and points for clearance and contact and clash.
 <br> In case of clash the point and distance value correspond to the penetration vector.
 <br> Distance and coordinates of points are given in millimeter.

 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoint1</tt>
   <dd> [out]   First point for the minimum distance or penetration vector.
 </dd>
    <dt><tt> oPoint2</tt>
   <dd> [out]   Second point for the minimum distance or penetration vector.
 </dd>
    <dt><tt> oDistance</tt>
   <dd> [out]   Minimum distance or penetration vector.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the geometrical values of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   CATMathPoint   Pt1, Pt2 ;
   double   DistMin = 0.0 ;
   
   HRESULT hr = piResult->GetGeometricalValues (Pt1, Pt2, DistMin) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetResultType"></a><a name="GetResultType(PLMIInterferenceResult::ResultType&amp;)"></a> <dt> o <b>GetResultType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetResultType</b>(<td><script type="text/javascript"> activateLink('PLMIInterferenceResult::ResultType','PLMIInterferenceResult::ResultType&amp;')</script> <td><tt>oResultType</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the type of result.

 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oResultType</tt>
   <dd> [out]   The type of result of an interference defined by </dd>
<script type="text/javascript"> activateLinkAnchor('','ResultType','ResultType') </script> enum. 
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the type of result of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   PLMIInterferenceResult::ResultType  ResultType = PLMIInterferenceResult::ResultTypeUndefined ;
   
   HRESULT hr = piResult->GetResultType (ResultType) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetSecondProduct"></a><a name="GetSecondProduct(CATIPLMNavOccurrence*&amp;)"></a> <dt> o <b>GetSecondProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSecondProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*&amp;')</script> <td><tt>oProduct</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the second product in interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd> [out, CATBaseUnknown#Release]   Second product in interference.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the second product in interference for an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   CATIPLMNavOccurrence         * piOcc      = NULL ;
   
   HRESULT hr = piResult->GetFirstProduct (piOcc) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetUserComment"></a><a name="GetUserComment(CATUnicodeString&amp;)"></a> <dt> o <b>GetUserComment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetUserComment</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oComment</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the comment defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oComment</tt>
   <dd> [out]   The comment.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the comment of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   CATUnicodeString   Comment = "" ;
   
   HRESULT hr = piResult->GetUserComment (Comment) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="GetUserType"></a><a name="GetUserType(PLMIInterferenceResult::ResultUserType&amp;)"></a> <dt> o <b>GetUserType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetUserType</b>(<td><script type="text/javascript"> activateLink('PLMIInterferenceResult::ResultUserType','PLMIInterferenceResult::ResultUserType&amp;')</script> <td><tt>oUserType</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the type defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oUserType</tt>
   <dd> [out]   The user type defined by </dd>
<script type="text/javascript"> activateLinkAnchor('','ResultUserType','ResultUserType') </script> enum. 
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">   This example gets the user type of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   PLMIInterferenceResult::ResultUserType  UserType = PLMIInterferenceResult::ResultUserTypeClash ;
   
   HRESULT hr = piResult->GetUserType (UserType) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="SetAnalysisStatus"></a><a name="SetAnalysisStatus(PLMIInterferenceResult::ResultStatus)"></a> <dt> o <b>SetAnalysisStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAnalysisStatus</b>(<td><script type="text/javascript"> activateLink('PLMIInterferenceResult::ResultStatus','PLMIInterferenceResult::ResultStatus')</script> <td><tt>iStatus</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Sets the status defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStatus</tt>
   <dd> [in]   The status defined by </dd>
<script type="text/javascript"> activateLinkAnchor('','ResultStatus','ResultStatus') </script> enum. 
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">   This example sets the status "OK" to an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   PLMIInterferenceResult::ResultStatus  Status = PLMIInterferenceResult::ResultStatusOK ;
   
   HRESULT hr = piResult->SetAnalysisStatus (Status) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="SetUserComment"></a><a name="SetUserComment(CATUnicodeString&amp;)"></a> <dt> o <b>SetUserComment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetUserComment</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Sets a comment defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iComment</tt>
   <dd> [in]   The comment.
   <br><b>Legal values</b>:
   <dl>
     <dt>Any character string</dt>
     <dd>The interference has this string as comment.</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code">   This example sets the comment "No comment" to an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   CATUnicodeString   Comment = "No comment" ;
   
   HRESULT hr = piResult->SetUserComment (Comment) ;
   
   </pre></pre></dd>
</dl>
</dl>
<a name="SetUserType"></a><a name="SetUserType(PLMIInterferenceResult::ResultUserType)"></a> <dt> o <b>SetUserType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetUserType</b>(<td><script type="text/javascript"> activateLink('PLMIInterferenceResult::ResultUserType','PLMIInterferenceResult::ResultUserType')</script> <td><tt>iUserType</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Sets the type defined by user to interference.
 
 <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUserType</tt>
   <dd> [in]   The user type defined by </dd>
<script type="text/javascript"> activateLinkAnchor('','ResultUserType','ResultUserType') </script> enum. 
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
 
 <br>
 
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">   This example sets the user type "Clash" of an interference of the current interference simulation.
   <pre>
   PLMIInterferenceSimulation   * piItfSimu  = ... ;  // (created by PLMIInterferenceServices)
   PLMIInterferenceResult       * piResult   = ... ;  //  one interference of the simulation (see method GetInterferenceResults of PLMIInterferenceSimulation)
   PLMIInterferenceResult::ResultUserType  UserType = PLMIInterferenceResult::ResultUserTypeClash ;
   
   HRESULT hr = piResult->SetUserType (UserType) ;
   
   </pre></pre></dd>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="ResultStatus"> <dt> o <b>ResultStatus</b>
<dl>
  <dd>
<pre>
enum <b>ResultStatus</b> {
  ResultStatusOK,
  ResultStatusKO,
  ResultStatusNotAnalyzed
}
</pre>
 Interference Status. <br>
 The interference status may be categorized by user with followings types:
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ResultStatusOK,</tt>
   <dd>   The result is OK.
 </dd>
    <dt><tt> ResultStatusKO,</tt>
   <dd>   The result is KO.
 </dd>
    <dt><tt> ResultStatusNotAnalyzed,</tt>
   <dd>   The result is not analyzed.</dd>
</dl>
</dl>
</dl>
<a name="ResultType"> <dt> o <b>ResultType</b>
<dl>
  <dd>
<pre>
enum <b>ResultType</b> {
  ResultTypeClash,
  ResultTypeContact,
  ResultTypeClearance,
  ResultTypeNoInterference,
  ResultTypeUndefined
}
</pre>
 Interference Result Type. <br>
 The type of result may have followings values :

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ResultTypeClash</tt>
   <dd>   Clash
 </dd>
    <dt><tt> ResultTypeContact</tt>
   <dd>   Contact
 </dd>
    <dt><tt> ResultTypeClearance</tt>
   <dd>   Clearance
 </dd>
    <dt><tt> ResultTypeNoInterference</tt>
   <dd>   No interference
 </dd>
    <dt><tt> ResultTypeUndefined</tt>
   <dd>   Undefined</dd>
</dl>
</dl>
</dl>
<a name="ResultUserType"> <dt> o <b>ResultUserType</b>
<dl>
  <dd>
<pre>
enum <b>ResultUserType</b> {
  ResultUserTypeClash,
  ResultUserTypeContact,
  ResultUserTypeClearance,
  ResultUserTypeNoInterference,
  ResultUserTypeUndefined
}
</pre>
 Interference User Type. <br>
 The interference result may be categorized by user with followings types:
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ResultUserTypeClash,</tt>
   <dd>   The result is clash.
 </dd>
    <dt><tt> ResultUserTypeContact,</tt>
   <dd>   The result is contact.
 </dd>
    <dt><tt> ResultUserTypeClearance,</tt>
   <dd>   The result is a clearance violation.
 </dd>
    <dt><tt> ResultUserTypeNoInterference,</tt>
   <dd>   The result is not an interference.
 </dd>
    <dt><tt> ResultUserTypeUndefined,</tt>
   <dd>   The result is not categorized.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>PLMIInterferenceResult.h</b><br>
If needed, your Imakefile.mk should include the module: <b>PLMInterferenceUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

