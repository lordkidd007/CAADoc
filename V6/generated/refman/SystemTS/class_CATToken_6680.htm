<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SystemTS Class CATToken</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../SystemTS.htm" href="../SystemTS.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "SystemTS";	}
		function getCurrentObjectName() { 
 	return "CATToken"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>SystemTS <script type="text/javascript" > writeClassCharacteristic(); </script> CATToken</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATToken_6680','CATToken','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATToken</b>
</p>
<p>
<b><i> Class to analyse the contents of a CATUnicodeString instance.</i></b><br>

 Use this class when you want to extract substrings delimited by
 sequences of characters chosen by delimiter characters you pass as
 argument of the <a href="#GetNextToken">GetNextToken</a> method.
 A CATToken instance contains the CATUnicodeString instance as a data member,
 and a position index initialized to 0. This position index is updated
 according to the searches made by the
 <a href="#GetNextToken">GetNextToken</a> method, and can be reset to 0
 thanks to the <a href="#Reset">Reset</a> method.
 <p>
 For example, the character string:
 <pre>
 This is/// a nice %% character\tstring.  
 </pre>
 <p>
 can be analysed using the delimiter characters / % \t and the blank.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATToken(CATUnicodeString&amp;,CATBoolean)"><b>CATToken</b></a>(CATUnicodeString&amp;,CATBoolean)
<dd>  Constructs a CATToken instance from a CATUnicodeSTring instance.
 <dt> o 
    <a href="#~CATToken()"><b>~CATToken</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetNextToken(CATBoolean*)"><b>GetNextToken</b></a>(CATBoolean*)
<dd>  Gets the next token, that is the character substring enclosed by sequences
 of the following delimiter characters: blanks, tabulations (\t) and carriage
 returns (\n).
 <dt> o 
    <a href="#GetNextToken(CATUnicodeString&amp;,CATBoolean*)"><b>GetNextToken</b></a>(CATUnicodeString&amp;,CATBoolean*)
<dd>  Gets the next token, that is the character substring enclosed by sequences
 of delimiter characters.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Resets the position index to 0.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATToken"></a><a name="CATToken(CATUnicodeString&amp;,CATBoolean)"></a> <dt> o <b>CATToken</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATToken</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iStringToAnalyse</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iAcceptEmptyStrings</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATToken instance from a CATUnicodeSTring instance.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStringToAnalyse</tt>
   <dd>   The string to analyse.
 </dd>
    <dt><tt> iAcceptEmptyStrings</tt>
   <dd>   Specifies whether empty strings between separators must be returned by the 
   <a href="#GetNextToken">GetNextToken</a> method or not.</dd>
</dl>
</dl>
</dl>
<a name="~CATToken"></a><a name="~CATToken()"></a> <dt> o <b>~CATToken</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATToken</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetNextToken"></a><a name="GetNextToken(CATBoolean*)"></a> <dt> o <b>GetNextToken</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetNextToken</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>oMoreAvailable</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the next token, that is the character substring enclosed by sequences
 of the following delimiter characters: blanks, tabulations (\t) and carriage
 returns (\n). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMoreAvailable</tt>
   <dd>   Optional parameter set to TRUE if there are more available tokens or to FALSE if the 
   end of the analysed string has been reached. This parameter must be used if the CATToken
   has been created with the parameter iAcceptEmptyStrings set to TRUE in order to check
   the end of the parse.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The substring found.
</dl>
</dl>
<a name="GetNextToken"></a><a name="GetNextToken(CATUnicodeString&amp;,CATBoolean*)"></a> <dt> o <b>GetNextToken</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetNextToken</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDelimiterCharacters</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>oMoreAvailable</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the next token, that is the character substring enclosed by sequences
 of delimiter characters. 
 For example, assume the CATToken instance is constructed from the following
 character string:
 <pre>
 CATUnicodeString TheString("This is/// a nice %% character\tstring.")  
 </pre>
 <p>
 and assume that the position index is set to 8 due to a previous call to the
 method. 
 The code below extracts the next token substring from this string:
 <pre>
 CATUnicodeString iDelimiterCharacters("/%");
 CATUnicodeString NextToken = TheString.GetNextToken(iDelimiterCharacters);
 cout << "The next token is: -" << NextToken.ConvertToChar() << "-" << endl;
 </pre>
 <p>
 This code issues:
 <pre>
 The next token is: - a nice - 
 </pre>
 and sets the position index to 19.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDelimiterCharacters</tt>
   <dd>   Characters to take into account to find an enclosed substring.
 </dd>
    <dt><tt> oMoreAvailable</tt>
   <dd>   Optional parameter set to TRUE if there are more available tokens or to FALSE if the 
   end of the analysed string has been reached. This parameter must be used if the CATToken
   has been created with the parameter iAcceptEmptyStrings set to TRUE in order to check
   the end of the parse.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The substring found.
</dl>
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Reset</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Resets the position index to 0.
</dl>
<hr>
 This object is included in the file: <b>CATToken.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSysTS</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

