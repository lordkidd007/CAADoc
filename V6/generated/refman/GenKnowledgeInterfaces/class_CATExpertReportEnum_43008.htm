<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GenKnowledgeInterfaces Class CATExpertReportEnum</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GenKnowledgeInterfaces.htm" href="../GenKnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GenKnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATExpertReportEnum"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GenKnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATExpertReportEnum</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATExpertReportEnum_43008','CATExpertReportEnum','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATExpertReportEnum</b>
</p>
<p>
<b><i> Enumerated types for report generation.</i></b><br>
</p>
<hr>
</dl>
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CorrectingFunctionTypeEnum"><b>CorrectingFunctionTypeEnum</b></a>
<dd>  Type of the corrective action to be performed on a false check.
 <dt> o 
    <a href="#DescriptionLengthEnum"><b>DescriptionLengthEnum</b></a>
<dd>  Precision of the text report.
 <dt> o 
    <a href="#OutputFormatEnum"><b>OutputFormatEnum</b></a>
<dd>  Output format of the text report.
 <dt> o 
    <a href="#ReportEnum"><b>ReportEnum</b></a>
<dd>  Type of tuple for the report.
 <dt> o 
    <a href="#ShowResultsEnum"><b>ShowResultsEnum</b></a>
<dd>  Sorting option for the text report.
 <dt> o 
    <a href="#ValidityTypeEnum"><b>ValidityTypeEnum</b></a>
<dd>  Status of a check.
 <dt> o 
    <a href="#VisualizationTypeEnum"><b>VisualizationTypeEnum</b></a>
<dd>  Type of checks to be chosen.
</dl>
<dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CorrectingFunctionTypeEnum"> <dt> o <b>CorrectingFunctionTypeEnum</b>
<dl>
  <dd>
<pre>
enum <b>CorrectingFunctionTypeEnum</b> {
  VBFunction,
  Comment,
  Http,
  UserFunction
}
</pre>
 Type of the corrective action to be performed on a false check.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> VBFunction</tt>
   <dd>   The corrective action is a VB script call on each t-uple failing the check. </dd>
    <dt><tt> Comment</tt>
   <dd>      The corrective action is a simple comment. </dd>
    <dt><tt> Http</tt>
   <dd>         The corrective action is an URL. </dd>
    <dt><tt> UserFunction</tt>
   <dd> The corrective action is a user function call on each t-uple failing the check.</dd>
</dl>
</dl>
</dl>
<a name="DescriptionLengthEnum"> <dt> o <b>DescriptionLengthEnum</b>
<dl>
  <dd>
<pre>
enum <b>DescriptionLengthEnum</b> {
  Long,
  Short
}
</pre>
 Precision of the text report.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Long</tt>
   <dd>  Full text report (status and t-uples for each check). </dd>
    <dt><tt> Short</tt>
   <dd> Short text report (status only).</dd>
</dl>
</dl>
</dl>
<a name="OutputFormatEnum"> <dt> o <b>OutputFormatEnum</b>
<dl>
  <dd>
<pre>
enum <b>OutputFormatEnum</b> {
  HTML,
  TEXT,
  PRINT,
  EMAIL
}
</pre>
 Output format of the text report.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> HTML</tt>
   <dd>  HTML format. </dd>
    <dt><tt> TEXT</tt>
   <dd>  Simple text format. </dd>
    <dt><tt> PRINT</tt>
   <dd> To the printer. </dd>
    <dt><tt> EMAIL</tt>
   <dd> As an e-mail.</dd>
</dl>
</dl>
</dl>
<a name="ReportEnum"> <dt> o <b>ReportEnum</b>
<dl>
  <dd>
<pre>
enum <b>ReportEnum</b> {
  Bidon,
  None,
  Fail,
  Pass,
  All
}
</pre>
 Type of tuple for the report.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> None</tt>
   <dd> None tuple is extracted from checks. </dd>
    <dt><tt> Fail</tt>
   <dd> Only failed tuples are extracted from checks. </dd>
    <dt><tt> Pass</tt>
   <dd> Only passed tuples are extracted from checks. </dd>
    <dt><tt> All</tt>
   <dd> All tuples are extracted from checks.</dd>
</dl>
</dl>
</dl>
<a name="ShowResultsEnum"> <dt> o <b>ShowResultsEnum</b>
<dl>
  <dd>
<pre>
enum <b>ShowResultsEnum</b> {
  ByRule,
  ByObject,
  ByState
}
</pre>
 Sorting option for the text report.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ByRule</tt>
   <dd>   Sort by the name of the rules. </dd>
    <dt><tt> ByObject</tt>
   <dd> Sort by the name of the objects. </dd>
    <dt><tt> ByState</tt>
   <dd>  Sort by the status of the rules (failed or succeeded).</dd>
</dl>
</dl>
</dl>
<a name="ValidityTypeEnum"> <dt> o <b>ValidityTypeEnum</b>
<dl>
  <dd>
<pre>
enum <b>ValidityTypeEnum</b> {
  Red,
  Green,
  Black,
  NotSolved,
  InteropValidity,
  Justified
}
</pre>
 Status of a check.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Red</tt>
   <dd>             False check. </dd>
    <dt><tt> Green</tt>
   <dd>           True check. </dd>
    <dt><tt> Black</tt>
   <dd>           Check solved but never fed with objects (no possible t-uple). </dd>
    <dt><tt> NotSolved</tt>
   <dd>       Check not solved. </dd>
    <dt><tt> InteropValidity</tt>
   <dd> Check able to determine its status itself according to a previously generated report.</dd>
</dl>
</dl>
</dl>
<a name="VisualizationTypeEnum"> <dt> o <b>VisualizationTypeEnum</b>
<dl>
  <dd>
<pre>
enum <b>VisualizationTypeEnum</b> {
  Passed,
  Failed,
  Both
}
</pre>
 Type of checks to be chosen.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Passed</tt>
   <dd>  True checks. </dd>
    <dt><tt> Failed</tt>
   <dd>  False checks. </dd>
    <dt><tt> Both</tt>
   <dd>    True and false checks.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATExpertReportEnum.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GenerativeKnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

