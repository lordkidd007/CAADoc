<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GenKnowledgeInterfaces Interface CATIRuleBase</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GenKnowledgeInterfaces.htm" href="../GenKnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GenKnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIRuleBase"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GenKnowledgeInterfaces Interface CATIRuleBase</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIRuleBase_34001','CATIRuleBase','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIRuleBase</b>
</p>
<p>
<b><i> Interface dedicated to the expert rule base behaviour.</i></b><br>


 <b>Role</b> Entry point to the inference engine of Knowledge Expert.
 This interface defines methods to feed the inference engine with facts objects, or roots of facts objects.
 A fact is an object seen through the interface <script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>. A root of facts is an entry point to scan a hierarchy of objects providing facts (it has to implement CATIInstancesProvider or CATIParmPublisher).
 The rulebase can either update or query the root of facts for facts. This interface also
 provides methods for being solved i.e. checking the expert checks and executing the expert rules.
 It also provides methods for importing external expert rulesets, expert rules and expert checks.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddFact(CATICkeObject_var&amp;)"><b>AddFact</b></a>(CATICkeObject_var&amp;)
<dd>  Adds a fact.
 <dt> o 
    <a href="#AddListOfInstances(CATListValCATBaseUnknown_var&amp;)"><b>AddListOfInstances</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>  Adds a list of facts to the rule base.
 <dt> o 
    <a href="#AddRootOfFacts(CATBaseUnknown_var)"><b>AddRootOfFacts</b></a>(CATBaseUnknown_var)
<dd>  Adds a root for the search of the facts.
 <dt> o 
    <a href="#GetRootsOfFacts()"><b>GetRootsOfFacts</b></a>()
<dd>  Gets a copy of the set of facts roots.
 <dt> o 
    <a href="#GetRuleBaseOwner()"><b>GetRuleBaseOwner</b></a>()
<dd>  Returns the owner of the relation set the expert rulebase belongs to.
 <dt> o 
    <a href="#GetSolveMode()"><b>GetSolveMode</b></a>()
<dd>  Gets the solve mode of the expert rulebase.
 <dt> o 
    <a href="#ImportRuleBase(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)"><b>ImportRuleBase</b></a>(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)
<dd>  Imports in the expert rulebase the content of another expert rulebase.
 <dt> o 
    <a href="#IsUpdated()"><b>IsUpdated</b></a>()
<dd>  Indicates if the rule base is updated.
 <dt> o 
    <a href="#ReloadFact(CATICkeObject_var&amp;)"><b>ReloadFact</b></a>(CATICkeObject_var&amp;)
<dd>  Reloads a fact.
 <dt> o 
    <a href="#RemoveFact(CATICkeObject_var&amp;)"><b>RemoveFact</b></a>(CATICkeObject_var&amp;)
<dd>  Removes a fact.
 <dt> o 
    <a href="#RemoveRootOfFacts(CATBaseUnknown_var)"><b>RemoveRootOfFacts</b></a>(CATBaseUnknown_var)
<dd>  Removes a facts root.
 <dt> o 
    <a href="#SetOwner(CATBaseUnknown_var)"><b>SetOwner</b></a>(CATBaseUnknown_var)
<dd>  Sets the owner of the rulebase.
 <dt> o 
    <a href="#SetSolveMode(CATExpertSolveModeEnum::SolveModeEnum)"><b>SetSolveMode</b></a>(CATExpertSolveModeEnum::SolveModeEnum)
<dd>  Sets the solve mode of the expert rulebase.
 <dt> o 
    <a href="#Solve(int)"><b>Solve</b></a>(int)
<dd>  Solves the expert rule base.
 <dt> o 
    <a href="#SolveWithLoad(int)"><b>SolveWithLoad</b></a>(int)
<dd>  Solves the expert rule base.
 <dt> o 
    <a href="#SolveWithoutUpdate(int)"><b>SolveWithoutUpdate</b></a>(int)
<dd>  Solves the rule base.
 <dt> o 
    <a href="#VolatileCopy()"><b>VolatileCopy</b></a>()
<dd>  Returns a volatile (not persistent), non changeable copy of the current rulebase.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddFact"></a><a name="AddFact(CATICkeObject_var&amp;)"></a> <dt> o <b>AddFact</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>AddFact</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>spFact</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Adds a fact.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  true if this function was successfully performed.
</dl>
</dl>
<a name="AddListOfInstances"></a><a name="AddListOfInstances(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>AddListOfInstances</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>AddListOfInstances</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>ilFacts</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Adds a list of facts to the rule base.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ilFacts</tt>
   <dd> a list of facts.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  true if the add was successfully made.
</dl>
</dl>
<a name="AddRootOfFacts"></a><a name="AddRootOfFacts(CATBaseUnknown_var)"></a> <dt> o <b>AddRootOfFacts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddRootOfFacts</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>spRootfacts</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a root for the search of the facts.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spRootfacts</tt>
   <dd> a facts root.</dd>
</dl>
</dl>
</dl>
<a name="GetRootsOfFacts"></a><a name="GetRootsOfFacts()"></a> <dt> o <b>GetRootsOfFacts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListValCATBaseUnknown','CATListValCATBaseUnknown_var*')</script>  <b>GetRootsOfFacts</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets a copy of the set of facts roots.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  a facts root.
</dl>
</dl>
<a name="GetRuleBaseOwner"></a><a name="GetRuleBaseOwner()"></a> <dt> o <b>GetRuleBaseOwner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher *')</script>  <b>GetRuleBaseOwner</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the owner of the relation set the expert rulebase belongs to.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  a publisher or NULL. An AddRef is done
</dl>
</dl>
<a name="GetSolveMode"></a><a name="GetSolveMode()"></a> <dt> o <b>GetSolveMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATExpertSolveModeEnum::SolveModeEnum','CATExpertSolveModeEnum::SolveModeEnum')</script>  <b>GetSolveMode</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the solve mode of the expert rulebase.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  solve mode (
<script type="text/javascript"> activateLinkAnchor('CATExpertSolveModeEnum','SolveModeEnum','CATExpertSolveModeEnum.SolveModeEnum') </script> ).
</dl>
</dl>
<a name="ImportRuleBase"></a><a name="ImportRuleBase(CATIRuleBase_var&amp;,conflictingImportFunctionPtr)"></a> <dt> o <b>ImportRuleBase</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ImportRuleBase</b>(<td> const <script type="text/javascript"> activateLink('CATIRuleBase_var','CATIRuleBase_var&amp;')</script> <td><tt>spImportedRulebase</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('conflictingImportFunctionPtr','conflictingImportFunctionPtr')</script> <td><tt>iFonction</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Imports in the expert rulebase the content of another expert rulebase.

 You must have the Knowledge Expert Buildtime license to use this API
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spImportedRulebase</tt>
   <dd> an expert rulebase. </dd>
    <dt><tt> iFonction</tt>
   <dd> a function triggered on the conflicting object. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK or E_FAIL
</dl>
</dl>
<a name="IsUpdated"></a><a name="IsUpdated()"></a> <dt> o <b>IsUpdated</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>IsUpdated</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the rule base is updated.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  TRUE if the rule base is updated, FALSE instead.
</dl>
</dl>
<a name="ReloadFact"></a><a name="ReloadFact(CATICkeObject_var&amp;)"></a> <dt> o <b>ReloadFact</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ReloadFact</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>spFact</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Reloads a fact.

 Forces the inference engine to take again a fact into account (removes it and
 adds it a second time).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.</dd>
</dl>
</dl>
</dl>
<a name="RemoveFact"></a><a name="RemoveFact(CATICkeObject_var&amp;)"></a> <dt> o <b>RemoveFact</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveFact</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>spFact</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Removes a fact.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spFact</tt>
   <dd> a fact.</dd>
</dl>
</dl>
</dl>
<a name="RemoveRootOfFacts"></a><a name="RemoveRootOfFacts(CATBaseUnknown_var)"></a> <dt> o <b>RemoveRootOfFacts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveRootOfFacts</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>spRootfacts</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a facts root.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spRootfacts</tt>
   <dd> a facts root.</dd>
</dl>
</dl>
</dl>
<a name="SetOwner"></a><a name="SetOwner(CATBaseUnknown_var)"></a> <dt> o <b>SetOwner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOwner</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>spSpecObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the owner of the rulebase.
 Do not use in case of a volatile. 

 The owner is a spec object that provides for a container.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spSpecObject</tt>
   <dd> a spec object.</dd>
</dl>
</dl>
</dl>
<a name="SetSolveMode"></a><a name="SetSolveMode(CATExpertSolveModeEnum::SolveModeEnum)"></a> <dt> o <b>SetSolveMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSolveMode</b>(<td><script type="text/javascript"> activateLink('CATExpertSolveModeEnum::SolveModeEnum','CATExpertSolveModeEnum::SolveModeEnum')</script> <td><tt>iSolveMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the solve mode of the expert rulebase.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSolveMode</tt>
   <dd> solve mode (</dd>
<script type="text/javascript"> activateLinkAnchor('CATExpertSolveModeEnum','SolveModeEnum','CATExpertSolveModeEnum.SolveModeEnum') </script> ).
</dl>
</dl>
</dl>
<a name="Solve"></a><a name="Solve(int)"></a> <dt> o <b>Solve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Solve</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIsSolveNonOptimized</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Solves the expert rule base.

 You must have the Knowledge Expert runtime license to use this API
 This method first solves the expert checks and then applies the expert rules of the expert rule base over
 the set of facts known by the expert rule base.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsSolveNonOptimized</tt>
   <dd> true for the non optimized mode, else false.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of rules triggered.
</dl>
</dl>
<a name="SolveWithLoad"></a><a name="SolveWithLoad(int)"></a> <dt> o <b>SolveWithLoad</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>SolveWithLoad</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIsSolveNonOptimized</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Solves the expert rule base. All representations not loaded will be loaded.

 You must have the Knowledge Expert runtime license to use this API
 This method first solves the expert checks and then applies the expert rules of the expert rule base over
 the set of facts known by the expert rule base.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsSolveNonOptimized</tt>
   <dd> 1 for the non optimized mode, else 0.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of rules triggered.
</dl>
</dl>
<a name="SolveWithoutUpdate"></a><a name="SolveWithoutUpdate(int)"></a> <dt> o <b>SolveWithoutUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>SolveWithoutUpdate</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIsSolveNonOptimized</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('=0','=0 ')</script>  </table></dt>
<dl>
  <dd>
 Solves the rule base.

 You must have the Knowledge Expert runtime license to use this API
 This method first solves the checks and then applies the rules of the rule base over
 the set of facts known by the rule base.
 This method doesn't make a geometrical update.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsSolveNonOptimized</tt>
   <dd> true for the non optimized mode, else false.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of rules triggered.
</dl>
</dl>
<a name="VolatileCopy"></a><a name="VolatileCopy()"></a> <dt> o <b>VolatileCopy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIRuleBase','CATIRuleBase_var')</script>  <b>VolatileCopy</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns a volatile (not persistent), non changeable copy of the current rulebase.

 You must have the Knowledge Expert Runtime license to use this API
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A volatile copy.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIRuleBase.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GenerativeKnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

