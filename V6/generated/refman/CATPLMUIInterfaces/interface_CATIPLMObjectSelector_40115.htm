<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPLMUIInterfaces Interface CATIPLMObjectSelector</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPLMUIInterfaces.htm" href="../CATPLMUIInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPLMUIInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIPLMObjectSelector"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPLMUIInterfaces Interface CATIPLMObjectSelector</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPLMObjectSelector_40115','CATIPLMObjectSelector','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPLMObjectSelector</b>
</p>
<p>
<b><i> This interface provides access to UI for any PLM entity selection.</i></b><br>
<br>
 This Object Selector can load a PLM entity in session or select an entity already in session.<br>

 If the caller is a CATCommand and not a CATDialog, you should call:
 <dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> 
 CATCommand * pCmd = NULL;<br>
 HRESULT hr = pObjectSelector -> StartCommand(pCmd);<br>
 if (SUCCEEDED(hr) && CATSysCheckExpression(NULL != pCmd))<br>
    pCmd -> SetFather(<the caller>);<br>

 in order to let the caller receive the notifications.<br>

 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIPLMObjectSelectorFactory
 Class to handle a PLM Object Selector','','CATIPLMObjectSelectorFactory
 Class to handle a PLM Object Selector') </script>, <script type="text/javascript"> activateLinkAnchor('a component which launches the PLM Object Selector dialog panel to retrieve a PLM entity.
 <br><b>Role</b>: The PLM Object Selector has been created by the','','a component which launches the PLM Object Selector dialog panel to retrieve a PLM entity.
 <br><b>Role</b>: The PLM Object Selector has been created by the') </script>
<script type="text/javascript"> activateLinkAnchor('CATIPLMObjectSelectorFactory','','CATIPLMObjectSelectorFactory') </script> interface.</br> The PLM Object Selector launches a dialog panel to allow the user to retrieve a PLM entity. The user can do it through a user interface 
 to query from the underlying database, or retrieved already loaded PLM entities from session, or select a PLM entity in any window.
 If the PLM entity is not already loaded, the PLM entity is loaded when the OK button of the dialog panel is pressed.
 <br>This Interface serves the following purpose:</br>
 <ul>
    <li>Criteria to be respected by candidate PLM entity</li>
       <p>All these methods must be called BEFORE the StartCommand method is launched. </p>
       <ul>
          <li>
<script type="text/javascript"> activateLinkAnchor('','SetObjectScopeFromType','SetObjectScopeFromType') </script> : To specify the type of PLM Entity.</li>          <li>
<script type="text/javascript"> activateLinkAnchor('','SetAttributesScope:','SetAttributesScope:') </script> To specify some public attribute-value pairs.                If you do not call this method, no filter attribute is done. This method is not mandatory.
       </ul>   
    <li>Launch the command </li>
        <p>Calling the 
<script type="text/javascript"> activateLinkAnchor('','StartCommand','StartCommand') </script> method you activate it. The dialog box is natively visible. </p>    <li>Get the notification sent by the PLM Object Selector Dialog box</li>
        <p>All these methods can be called either after or before the StartCommand. </p>
        <ul>
           <li>
<script type="text/javascript"> activateLinkAnchor('','GetSelectionEndedNotification','GetSelectionEndedNotification') </script> : to be aware when the OK button is pressed </li>           <li>
<script type="text/javascript"> activateLinkAnchor('','GetSelectionCancelledNotification:','GetSelectionCancelledNotification:') </script> to be aware when the Cancel button is pressed </li>        </ul>
        <p><b>Attention</b>, in order to receive the notifications, you must previously call the SetFather method. This call must be done
                             before adding the callbacks using the AddAnalyseNotificationCB calls</p>
          <pre>
                CATIPLMObjectSelector * piPLMObjectSelector = ...
                CATCommand* pCmd = NULL;
                HRESULT Hr = piPLMObjectSelector->StartCommand(pCmd);
                if (SUCCEEDED(Hr) && pCmd)
                {
                  pCmd->SetFather(this);   // this is to let our command receive the notifications
                  ...
                  AddAnalyseNotificationCB ( pCmd, 
                                 piPLMObjectSelector->GetSelectionEndedNotification(pOKNotif)
								  ...,...);
                }
          </pre>
    <li>Retrieve and load the selected object in session</li>
    <p> Once the End notification is received you can retrieve the PLM entity selected by the user in the output list displayed
        in the PLM Object Selector panel.
 </ul>

</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetSelection(CATBaseUnknown*&amp;)"><b>GetSelection</b></a>(CATBaseUnknown*&amp;)
<dd>  Retrieve the selected PLM Entity.
 <dt> o 
    <a href="#GetSelectionCancelledNotification(CATNotification*&amp;)"><b>GetSelectionCancelledNotification</b></a>(CATNotification*&amp;)
<dd>  Retrieves the  the Cancel notification.
 <dt> o 
    <a href="#GetSelectionEndedNotification(CATNotification*&amp;)"><b>GetSelectionEndedNotification</b></a>(CATNotification*&amp;)
<dd>  Retrieves the End Selection notification.
 <dt> o 
    <a href="#GetVisibility(unsigned long&amp;)"><b>GetVisibility</b></a>(unsigned long&amp;)
<dd>  Retrieve the current display state of the dialog object.
 <dt> o 
    <a href="#SetAttributesScope(CATListValCATBaseUnknown_var*&amp;)"><b>SetAttributesScope</b></a>(CATListValCATBaseUnknown_var*&amp;)
<dd>  Defines some public attribute-value pairs.
 <dt> o 
    <a href="#SetDataOrigins(CATListOfInt&amp;)"><b>SetDataOrigins</b></a>(CATListOfInt&amp;)
<dd>   Declare tab pages which should appear in the ObjectSelector dialog.
 <dt> o 
    <a href="#SetObjectScopeFromType(CATIType_var&amp;)"><b>SetObjectScopeFromType</b></a>(CATIType_var&amp;)
<dd>  Sets the PLM Type of the PLM entity to respect.
 <dt> o 
    <a href="#SetTitle(CATUnicodeString&amp;)"><b>SetTitle</b></a>(CATUnicodeString&amp;)
<dd>  Sets the NLS title of the dialog object (PLM Object Selector panel).
 <dt> o 
    <a href="#SetVisibility(unsigned long)"><b>SetVisibility</b></a>(unsigned long)
<dd>  Sets the current display state of the dialog object (PLM Object Selector panel).
 <dt> o 
    <a href="#StartCommand(CATCommand*&amp;)"><b>StartCommand</b></a>(CATCommand*&amp;)
<dd>  Launches the PLM Object Selector command and its dialog panel.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetSelection"></a><a name="GetSelection(CATBaseUnknown*&amp;)"></a> <dt> o <b>GetSelection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSelection</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>oSelection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve the selected PLM Entity.
 <br><b>Role:</b>This method enables you to retrieve the selected PLM Entity.</br>
 This method can be called only once the end notification has been received(when the OK button is pressed). 
 <p>In order to manage correctly the PLM Entity in session, you have to set into a bag until you don't need it. </p>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSelection</tt>
   <dd> [out, CATBaseUnknown#Release]     The selected PLM Entity. The pointer must be released. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
     <li><tt> S_OK </tt>if succeeded</li>
     <li><tt> E_FAIL </tt>otherwise</li>
   </ul>
</dl>
</dl>
<a name="GetSelectionCancelledNotification"></a><a name="GetSelectionCancelledNotification(CATNotification*&amp;)"></a> <dt> o <b>GetSelectionCancelledNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSelectionCancelledNotification</b>(<td><script type="text/javascript"> activateLink('CATNotification','CATNotification*&amp;')</script> <td><tt>opDiaCANCELNotification</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the  the Cancel notification.
 <br><b>Role</b>: It is the notification sent by the Object Selector dialog panel, 
 when the Cancel button is pressed.</br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opDiaCANCELNotification</tt>
   <dd>    When the end user clicks on close button.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<a name="GetSelectionEndedNotification"></a><a name="GetSelectionEndedNotification(CATNotification*&amp;)"></a> <dt> o <b>GetSelectionEndedNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSelectionEndedNotification</b>(<td><script type="text/javascript"> activateLink('CATNotification','CATNotification*&amp;')</script> <td><tt>opDiaOKNotification</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the End Selection notification.
 <br><b>Role</b>: The method returns the notification sent by the Object Selector dialog panel, 
 when the OK button is pressed.</br>
 <p>If the PLM Entity is not already opened in the authoring session, it is done by this method.</p>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opDiaOKNotification</tt>
   <dd>    When the end user clicks on OK button.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<a name="GetVisibility"></a><a name="GetVisibility(unsigned long&amp;)"></a> <dt> o <b>GetVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVisibility</b>(<td><script type="text/javascript"> activateLink('unsigned long','unsigned long&amp;')</script> <td><tt>oState</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve the current display state of the dialog object.
 <br><b>Role</b>: This Method if effective only after the call to the StartCommand method</br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oState</tt>
   <dd>    The visibility state is:
    <ul>
      <li>CATDlgShow if the dialog object is shown</li>
      <li>CATDlgHide if the dialog object is hidden.</li>
    </ul>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<a name="SetAttributesScope"></a><a name="SetAttributesScope(CATListValCATBaseUnknown_var*&amp;)"></a> <dt> o <b>SetAttributesScope</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAttributesScope</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var*&amp;')</script> <td><tt>iListOfCkeAttributes</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines some public attribute-value pairs.
 <b>Role</b>This method defines a set of public PLM Attribute-value pairs to respect.
 This method is not mandatory. If you do not call this method, no filter attribute is done.
 The attribute-values set are visible in the "Advanced Search" panel, only if those are defined in the EZQuery mask scope
 of the PLM Entity type queried.
 The attribute-value could be set in user-defined access mode (read, write) in the "Advanced Search" panel.
 This Method is effective only before the call to the StartCommand method.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfCkeAttributes</tt>
   <dd>    It is a list of CATICkeParm object. Each element of the list represents a valid PLM Attribute-value set.
    By valid, it is implied, those attributes are associated with the PLM Entity type, being queried
    Use the Knowledge API to create these CATICkeParm object.
    <br>Some useful information:</br>
    <ul>
        <li>About the PLM Attribute value </li>
       <li>About the PLM Attribute's editor editability </li>
         <br>By default the PLM Attribute values in the "Advanced Search" panel are editable, but you can switch it to non-editable mode like this:
		        Ofcourse, this is relevant provided the Attribute is listed in the Advanced Search panel (defined in the EZQuery mask scope)
         <pre>
          CATICkeParm::UserAccessMode WantedRights = CATICkeParm::ReadOnly;
          spCkeParm -> SetUserAccess (WantedRights); 
         </pre>
    </ul>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<a name="SetDataOrigins"></a><a name="SetDataOrigins(CATListOfInt&amp;)"></a> <dt> o <b>SetDataOrigins</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDataOrigins</b>(<td> const <script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>iListOfDataOrigins</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Declare tab pages which should appear in the ObjectSelector dialog.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfDataOrigins</tt>
   <dd>    The List of wanted tab pages for the ObjectSelector dialog :
          CATPLMObjectSelectorFile    to see the tabpage "From File"
          CATPLMObjectSelectorQuery   to see the tabpage "From Search"
          CATPLMObjectSelectorSession to see the tabpage "From Session"
    The first element in iListOfDataOrigins is the tabpage activated by default.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
     <li><tt> S_OK </tt>if succeeded</li>
     <li><tt> E_FAIL </tt>otherwise</li>
   </ul>
</dl>
</dl>
<a name="SetObjectScopeFromType"></a><a name="SetObjectScopeFromType(CATIType_var&amp;)"></a> <dt> o <b>SetObjectScopeFromType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetObjectScopeFromType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispIDataScope</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the PLM Type of the PLM entity to respect.
 <br><b>Role</b>: This method sets the PLM Type of the PLM entity to respect </br>
 This Method if effective only before the StartCommand method !.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispIDataScope</tt>
   <dd>    The PLM Type of the PLM entity to respect.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<a name="SetTitle"></a><a name="SetTitle(CATUnicodeString&amp;)"></a> <dt> o <b>SetTitle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetTitle</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iTitle</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the NLS title of the dialog object (PLM Object Selector panel).
 <br><b>Role:</b>This method if effective only after the call to the StartCommand method. </br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTitle</tt>
   <dd>    title of the PLMChooser 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
     <li><tt>S_OK </tt> always.</li>
     <li>      If the given title is empty, a default title is taken into account "Object Selection". </li>
   </ul>
</dl>
</dl>
<a name="SetVisibility"></a><a name="SetVisibility(unsigned long)"></a> <dt> o <b>SetVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVisibility</b>(<td><script type="text/javascript"> activateLink('unsigned long','unsigned long')</script> <td><tt>iState</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the current display state of the dialog object (PLM Object Selector panel).
 <br><b>Role</b>:This method if effective only after the call to the StartCommand method. </br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iState</tt>
   <dd>    The visibility state is:
    <ul>
      <li>CATDlgShow if the dialog object is shown</li>
      <li>CATDlgHide if the dialog object is hidden.</li>
    </ul>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      <ul>
       <li><tt> S_OK </tt>if succeeded</li>
       <li><tt> E_FAIL </tt>otherwise</li>
     </ul>
</dl>
</dl>
<a name="StartCommand"></a><a name="StartCommand(CATCommand*&amp;)"></a> <dt> o <b>StartCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>StartCommand</b>(<td><script type="text/javascript"> activateLink('CATCommand','CATCommand*&amp;')</script> <td><tt>opEventPublisher</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Launches the PLM Object Selector command and its dialog panel.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opEventPublisher</tt>
   <dd>    Corresponding command pointer. 
    The method handles the lifecycle of this dialog box command. This pointer must not be released!
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
      <li><tt> S_OK </tt>if succeeded</li>
      <li><tt> E_FAIL </tt>otherwise</li>
    </ul>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPLMObjectSelector.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMUIInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

