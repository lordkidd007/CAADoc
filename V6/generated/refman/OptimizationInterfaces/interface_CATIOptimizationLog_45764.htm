<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>OptimizationInterfaces Interface CATIOptimizationLog</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../OptimizationInterfaces.htm" href="../OptimizationInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "OptimizationInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIOptimizationLog"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>OptimizationInterfaces Interface CATIOptimizationLog</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIOptimizationLog_45764','CATIOptimizationLog','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIOptimizationLog</b>
</p>
<p>
<b><i> Interface for the management of the data stored in the type late OptSolutions.</i></b><br>

 This type is used by the OptOptimization feature to store parameters values during optimization
 and to store the best configurations with respect to optimization problem definition</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddIndex(int)"><b>AddIndex</b></a>(int)
<dd>  Adds the index in the list of indexes.
 <dt> o 
    <a href="#AddParameterInOptimLog(CATICkeParm_var)"><b>AddParameterInOptimLog</b></a>(CATICkeParm_var)
<dd>  Adds an additional column corresponding to a parameter.
 <dt> o 
    <a href="#AddRowInOptimLog(int)"><b>AddRowInOptimLog</b></a>(int)
<dd>  Captures the current values of the parameters given while creating the optim log and store them next to the last row of parameters configuration.
 <dt> o 
    <a href="#ExportOptimLogToFile(CATUnicodeString&amp;,int)"><b>ExportOptimLogToFile</b></a>(CATUnicodeString&amp;,int)
<dd>  Exports the optimization historic in a file.
 <dt> o 
    <a href="#ExportOptimLogToRep(CATBaseUnknown_var&amp;,int)"><b>ExportOptimLogToRep</b></a>(CATBaseUnknown_var&amp;,int)
<dd>  Exports the optimization historic in a representation reference.
 <dt> o 
    <a href="#GetBestParameter()"><b>GetBestParameter</b></a>()
<dd>  Returns the parameter valuated by the best value of the goal parameter.
 <dt> o 
    <a href="#GetMaxRowIndex(int&amp;)"><b>GetMaxRowIndex</b></a>(int&amp;)
<dd>  Returns the number of rows currently in the optimization log.
 <dt> o 
    <a href="#GetOptimLogRep(CATBaseUnknown_var&amp;)"><b>GetOptimLogRep</b></a>(CATBaseUnknown_var&amp;)
<dd>  Returns the Optimization Log representation reference.
 <dt> o 
    <a href="#GetOptimLogRowsIndexes()"><b>GetOptimLogRowsIndexes</b></a>()
<dd>  Returns the list of Optimization log rows.
 <dt> o 
    <a href="#GetRowFromOptimLog(int,CATListOfCATUnicodeString&amp;)"><b>GetRowFromOptimLog</b></a>(int,CATListOfCATUnicodeString&amp;)
<dd>  Fills the given list with the content of the optimization log row.
 <dt> o 
    <a href="#InitializeOptimLog(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)*,int)"><b>InitializeOptimLog</b></a>(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)*,int)
<dd>  Creates and initializes the optimization logging tools.
 <dt> o 
    <a href="#InitializeOptimLog(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)*,int)"><b>InitializeOptimLog</b></a>(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)*,int)
<dd>  Creates and initializes the optimization logging tools.
 <dt> o 
    <a href="#RemoveIndex(int)"><b>RemoveIndex</b></a>(int)
<dd>  Removes the i th element in the list of indexes.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddIndex"></a><a name="AddIndex(int)"></a> <dt> o <b>AddIndex</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddIndex</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds the index in the list of indexes. 
 It is appended to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd> index added.</dd>
</dl>
</dl>
</dl>
<a name="AddParameterInOptimLog"></a><a name="AddParameterInOptimLog(CATICkeParm_var)"></a> <dt> o <b>AddParameterInOptimLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddParameterInOptimLog</b>(<td><script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script> <td><tt>spiParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an additional column corresponding to a parameter.
 If you did not give one parameter when you call the CreateOptimizationLog() method, you can use this one to add one column associated to the given parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spiParm</tt>
   <dd>  the parameter that you want to add in the optimization log in order to log its variation. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
 Notice that this method has to be called after the CreateOptimizationLog() one.
</dl>
</dl>
<a name="AddRowInOptimLog"></a><a name="AddRowInOptimLog(int)"></a> <dt> o <b>AddRowInOptimLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddRowInOptimLog</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWithSynchro</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Captures the current values of the parameters given while creating the optim log and store them next to the last row of parameters configuration.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWithSynchro</tt>
   <dd> If you did not choose the model storage format while initializing the optimization log. set it to 1 if you want to do the synchronization between the file content and 
 the data stored in buffer. For optimization purpose, you should always set it to 0
 except when you call this method for the last time.
 (If you chose the model storage format while initializing the optimization log, the
  model is always up to date with the data stored in buffer so that we don't care about
 the iWithSynchro value).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="ExportOptimLogToFile"></a><a name="ExportOptimLogToFile(CATUnicodeString&amp;,int)"></a> <dt> o <b>ExportOptimLogToFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExportOptimLogToFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplaceFileIfExist</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Exports the optimization historic in a file.
 If you have chosen to store the historic in the model (you called the 
 method InitializeOptimLog with argument iPath = "" ), you have the
 possibility to export the historic content in a file.
 Notice that if you go on modifying the historic after the export, the
 file won't be synchronized with the historic content (because the file
 is just an image of the historic at the instant of the method call).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd> The path of the file that will be created. If it contains :
 - ".xls", an excel file will be created
 - ".123", a Lotus file will be created
 else, a text file will be created.
 </dd>
    <dt><tt> iReplaceFileIfExist</tt>
   <dd> If you give a path that corresponds to an existing file, you have to set it to 1
 to force the file replacement (else this method will fail). By default, this
 argument is set to 0 in order to keep the existing file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the file creation or the file filling failed, and S_OK else.
 Possible reasons of failure : you did not call the CATIOptimizationLog::InitializeOptimLog 
								method with an empty path (historic not stored in the
								model but already in a file,
								iPath is empty, file exists and is not in Read/Write mode,
								you are not allowed to write in the given location ...
</dl>
</dl>
<a name="ExportOptimLogToRep"></a><a name="ExportOptimLogToRep(CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>ExportOptimLogToRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExportOptimLogToRep</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iRepRef</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplaceFileIfExist</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Exports the optimization historic in a representation reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRepRef</tt>
   <dd> the representation reference to contain  the historic. </dd>
    <dt><tt> iReplaceFileIfExist</tt>
   <dd> Overwrite (by default, do not). </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if something went wrong.
 New Model for the Design Tables : CATIPsiRepresentationReference_var is remplaced by CATBaseUnknown_var 
 in order to be able to work with both CATIPsiRepresentationReference_var and CATIPLMDmtDocument_var
</dl>
</dl>
<a name="GetBestParameter"></a><a name="GetBestParameter()"></a> <dt> o <b>GetBestParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>GetBestParameter</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the parameter valuated by the best value of the goal parameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  This method returns the parameter which was created if the optionnal parameter "iWithBestParm" was choosen while calling CreateOptimizationLog().
</dl>
</dl>
<a name="GetMaxRowIndex"></a><a name="GetMaxRowIndex(int&amp;)"></a> <dt> o <b>GetMaxRowIndex</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaxRowIndex</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumbderOfRows</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of rows currently in the optimization log.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumbderOfRows</tt>
   <dd> number of rows returned </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="GetOptimLogRep"></a><a name="GetOptimLogRep(CATBaseUnknown_var&amp;)"></a> <dt> o <b>GetOptimLogRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOptimLogRep</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oRepRef</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the Optimization Log representation reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRepRef</tt>
   <dd> the representation. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
 New Model for the Design Tables : CATIPsiRepresentationReference_var is remplaced by CATBaseUnknown_var 
 in order to be able to work with both CATIPsiRepresentationReference_var and CATIPLMDmtDocument_var
</dl>
</dl>
<a name="GetOptimLogRowsIndexes"></a><a name="GetOptimLogRowsIndexes()"></a> <dt> o <b>GetOptimLogRowsIndexes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt*')</script>  <b>GetOptimLogRowsIndexes</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of Optimization log rows.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The list of optimization log rows indexes. Can be used to save the best results indexes or the indexes of rows for which
 the optimization update failed.
</dl>
</dl>
<a name="GetRowFromOptimLog"></a><a name="GetRowFromOptimLog(int,CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetRowFromOptimLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRowFromOptimLog</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRowIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>oRowContent</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Fills the given list with the content of the optimization log row.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRowIndex</tt>
   <dd> The index of row that you want to get (the first one as the index 1 and contains the column names).
 </dd>
    <dt><tt> oRowContent</tt>
   <dd> the list filled with the row content. If this list is not empty, its content is
 removed before filling it.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else (the row number iRowIndex does not exist).
</dl>
</dl>
<a name="InitializeOptimLog"></a><a name="InitializeOptimLog(CATUnicodeString&amp;,CATLISTV(CATBaseUnknown_var)*,int)"></a> <dt> o <b>InitializeOptimLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InitializeOptimLog</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPath</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iParmsList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWithBestParm</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates and initializes the optimization logging tools. 
 The optim log will allow you to capture the current parameters configuration (i.e. the values of the parameters 
 given in the iParmsList) and to store it in the output file, so
 that the ouput file gives an historic of the optimization run.
 Each column of the optim log gives one parameter variation, and each row represents
 a given parameters values configuration.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd> The path of the output file that will be created. If iPath = "", the historic is stored. in the model (persistent).
 </dd>
    <dt><tt> iParmsList</tt>
   <dd> The list of parameters whose values will be stored in the historic. You should give all the free parameters, the constraints, the goal parameter(s) and your own parameters if needed. </dd>
    <dt><tt> iWithBestParm</tt>
   <dd> Set it to 1 if you want to have a persistent parameter that gives the best result variation. else, set it to 0. If you create it, you will be able to retrieve it
 (for example : in the algorithm Run in order to valuate it) by using the
 GetBestParameter() method.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="InitializeOptimLog"></a><a name="InitializeOptimLog(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)*,int)"></a> <dt> o <b>InitializeOptimLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InitializeOptimLog</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iRepRef</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iParmsList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWithBestParm</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates and initializes the optimization logging tools. 

 New Model for the Design Tables : CATIPsiRepresentationReference_var is remplaced by CATBaseUnknown_var 
 in order to be able to work with both CATIPsiRepresentationReference_var and CATIPLMDmtDocument_var
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRepRef</tt>
   <dd> The representation that contains the external file. </dd>
    <dt><tt> iParmsList</tt>
   <dd> The list of parameters whose values will be stored in the historic. You should give all the free parameters, the constraints, the goal parameter(s) and your own parameters if needed. </dd>
    <dt><tt> iWithBestParm</tt>
   <dd> Set it to 1 if you want to have a persistent parameter that gives the best result variation. else, set it to 0. If you create it, you will be able to retrieve it
 (for example : in the algorithm Run in order to valuate it) by using the
 GetBestParameter() method.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="RemoveIndex"></a><a name="RemoveIndex(int)"></a> <dt> o <b>RemoveIndex</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveIndex</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>i</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes the i th element in the list of indexes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> i</tt>
   <dd> i th element to remove</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIOptimizationLog.h</b><br>
If needed, your Imakefile.mk should include the module: <b>OptimizationItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

