<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPipeTubeDesignUseItf Interface CATIPipPipeInstance</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPipeTubeDesignUseItf.htm" href="../CATPipeTubeDesignUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPipeTubeDesignUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIPipPipeInstance"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPipeTubeDesignUseItf Interface CATIPipPipeInstance</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPipPipeInstance_46318','CATIPipPipeInstance','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPipPipeInstance</b>
</p>
<p>
<b><i> Interface to access Rigid and Flexible Pipe Instance.</i></b><br>

 <br><b>Role</b>: Retrieve the connected Rigid Pipe, Flexible Pipe, Piping part,
 Equipment link to the branch port or Pipe/Tube end
 This interface is implemented by PLM Occurrence or Instance of Rigid Pipe or Flexible Pipe.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetConnectedObject(CATIPipPipingPortRef*&amp;,CATBaseUnknown*&amp;,CATIPipPipingPortRef*)"><b>GetConnectedObject</b></a>(CATIPipPipingPortRef*&amp;,CATBaseUnknown*&amp;,CATIPipPipingPortRef*)
<dd>  Gets the other connectable object and Port at this Port.
 <dt> o 
    <a href="#GetLinkedSupports(CATLISTP(CATIPipSupportInstance)&amp;,CATListOfInt*,CATListOfInt*)"><b>GetLinkedSupports</b></a>(CATLISTP(CATIPipSupportInstance)&amp;,CATListOfInt*,CATListOfInt*)
<dd>  Retrieves the list of Support Instances linked to the Pipe Instance.
 <dt> o 
    <a href="#GetReference(CATBaseUnknown*&amp;)"><b>GetReference</b></a>(CATBaseUnknown*&amp;)
<dd>  Gets the PLM reference of corresponding Pipe Occurrence.
 <dt> o 
    <a href="#GetRelatedObject(CATLISTP(CATBaseUnknown)*&amp;)"><b>GetRelatedObject</b></a>(CATLISTP(CATBaseUnknown)*&amp;)
<dd>  Gets the related object in term of insulation, Piping part with Hole port and support.
 <dt> o 
    <a href="#GetSpool(CATIPipSpoolInstance*&amp;)"><b>GetSpool</b></a>(CATIPipSpoolInstance*&amp;)
<dd>  Finds the Spool of current pipe if any.
 <dt> o 
    <a href="#ListGeometricalBranch(CATLISTP(CATBaseUnknown)*&amp;,CATListOfDouble&amp;)"><b>ListGeometricalBranch</b></a>(CATLISTP(CATBaseUnknown)*&amp;,CATListOfDouble&amp;)
<dd>  Gets the list of all geometrical branch.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetConnectedObject"></a><a name="GetConnectedObject(CATIPipPipingPortRef*&amp;,CATBaseUnknown*&amp;,CATIPipPipingPortRef*)"></a> <dt> o <b>GetConnectedObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedObject</b>(<td><script type="text/javascript"> activateLink('CATIPipPipingPortRef','CATIPipPipingPortRef*&amp;')</script> <td><tt>opiOtherPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>opiOtherConnectable</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPipPipingPortRef','CATIPipPipingPortRef*')</script> <td><tt>ipiThisPort</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the other connectable object and Port at this Port.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIOtherConnectable</tt>
   <dd>   A connected object [out, CATBaseUnknown#Release].
 </dd>
    <dt><tt> opIOtherPort</tt>
   <dd>   A Port of the other connected object [out, CATIPipPipingPortRef#Release].
 </dd>
    <dt><tt> ipIThisPort</tt>
   <dd>   A Port of this object. (Branch Port or Pipe/tube End) [in, CATIPipPipingPortRef].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>ipiThisPort argument is NULL or output argument pointer(s) is(are) NOT NULL</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetLinkedSupports"></a><a name="GetLinkedSupports(CATLISTP(CATIPipSupportInstance)&amp;,CATListOfInt*,CATListOfInt*)"></a> <dt> o <b>GetLinkedSupports</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLinkedSupports</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATIPipSupportInstance)','CATLISTP(CATIPipSupportInstance)&amp;')</script> <td><tt>oLptrSupportInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt*')</script> <td><tt>opListOfSupportRefPoints</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt*')</script> <td><tt>opListOfSupportProjectPoints</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of Support Instances linked to the Pipe Instance.<br>
 <strong>Role</strong>: Retrieves the list of Support Instances linked to the Pipe Instance.<br>
 <strong>New V6R2013 FD1</strong><br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLptrSupport</tt>
   <dd>   List of Support Instances linked to the Pipe Instance. The list can be empty.
   <strong>Each pointer of the list has to be released</strong>. 
 </dd>
    <dt><tt> opListOfSupportRefPoints</tt>
   <dd> [out, optional]   Pointer to the List of nodes on the route which are reference points on support.
 </dd>
    <dt><tt> opListOfSupportProjectPoints[out,</tt>
   <dd> optional]   Pointer to the List of nodes on the route which are projected points on support.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  An HRESULT value.
 <br><strong>Legal values</strong>:
 <dl>
   <dt>S_OK</dt><dd>Operation is successful</dd>
   <dt>S_FALSE</dt><dd>Operation is successful, but current Pipe does not have any support linked.</dd>
   <dt>E_INVALIDARG</dt><dd>The input argument oLptrSupport is not empty</dd>
   <dt>E_FAIL</dt><dd>Otherwise</dd>
 </dl>
</dl>
</dl>
<a name="GetReference"></a><a name="GetReference(CATBaseUnknown*&amp;)"></a> <dt> o <b>GetReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReference</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>opIPipeReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the PLM reference of corresponding Pipe Occurrence.
 <br><b>Postcondition</b> This method can return a Rigid or Flexible pipe.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIPipeReference</tt>
   <dd>    A pointer on reference [out, CATBaseUnknown].
   An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>output pointer is NOT NULL</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl></dd>
</dl>
</dl>
</dl>
<a name="GetRelatedObject"></a><a name="GetRelatedObject(CATLISTP(CATBaseUnknown)*&amp;)"></a> <dt> o <b>GetRelatedObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRelatedObject</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATBaseUnknown)','CATLISTP(CATBaseUnknown)*&amp;')</script> <td><tt>opListObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the related object in term of insulation, Piping part with Hole port and support.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListObject</tt>
   <dd>   A list of related object to Pipe/Tube [out, CATLISTP(CATBaseUnknown) #Release].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>output pointer is NOT NULL</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetSpool"></a><a name="GetSpool(CATIPipSpoolInstance*&amp;)"></a> <dt> o <b>GetSpool</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSpool</b>(<td><script type="text/javascript"> activateLink('CATIPipSpoolInstance','CATIPipSpoolInstance*&amp;')</script> <td><tt>opISpoolInstance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Finds the Spool of current pipe if any.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opISpoolInstance[out,</tt>
   <dd> CATIPipPipeInstance#Release]. Interface pointer on spool occurence Can be <tt>NULL</tt> if current pipe is not in any spool .
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>S_FALSE</dt>
     <dd>Operation is successful, but current pipe is not in any spool.</dd>
     <dt>E_INVALIDARG</dt>
     <dd>The input argument opISpoolInstance is not NULL </dd>
     <dt>E_FAIL</dt>
     <dd>Otherwise</dd>
   </dl>
</dl>
</dl>
<a name="ListGeometricalBranch"></a><a name="ListGeometricalBranch(CATLISTP(CATBaseUnknown)*&amp;,CATListOfDouble&amp;)"></a> <dt> o <b>ListGeometricalBranch</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListGeometricalBranch</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATBaseUnknown)','CATLISTP(CATBaseUnknown)*&amp;')</script> <td><tt>opListPipe</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListCurvilinearLength</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of all geometrical branch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListPorts</tt>
   <dd>   List of all Pipes that it is connected on main pipe by geometrical connection.
   [out, CATLISTP(CATBaseUnknown)]
 </dd>
    <dt><tt> opListCurvilinearLength</tt>
   <dd>   List of curvilinear position of secondary pipe on main Pipe curve.
   This list has the same size of opListPorts. There is a mapping where same index is same port.
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>output list pointer is NOT NULL and/or the other output list is not empty</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPipPipeInstance.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPipeTubeDesignUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

