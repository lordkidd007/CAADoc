<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPipeTubeDesignUseItf Interface CATIPipFlexiblePipeReference</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPipeTubeDesignUseItf.htm" href="../CATPipeTubeDesignUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPipeTubeDesignUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIPipFlexiblePipeReference"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPipeTubeDesignUseItf Interface CATIPipFlexiblePipeReference</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPipFlexiblePipeReference_67195','CATIPipFlexiblePipeReference','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPipFlexiblePipeReference</b>
</p>
<p>
<b><i> </i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAlgorithmMode(CATFlexiblePipeAlgorithmMode&amp;)"><b>GetAlgorithmMode</b></a>(CATFlexiblePipeAlgorithmMode&amp;)
<dd>  Gets the algorithm mode of flexible Pipe/Tube.
 <dt> o 
    <a href="#GetBendRadius(double&amp;)"><b>GetBendRadius</b></a>(double&amp;)
<dd>  Gets the bend radius of flexible Pipe/Tube.
 <dt> o 
    <a href="#GetBuildMode(CATFlexiblePipeBuildMode&amp;)"><b>GetBuildMode</b></a>(CATFlexiblePipeBuildMode&amp;)
<dd>  Gets the build mode of flexible Pipe/Tube.
 <dt> o 
    <a href="#GetCoordinateofNode(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)"><b>GetCoordinateofNode</b></a>(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)
<dd>  Gets the coordinate of Node.
 <dt> o 
    <a href="#GetEnds(CATIPipPipingPortRef*&amp;,CATIPipPipingPortRef*&amp;)"><b>GetEnds</b></a>(CATIPipPipingPortRef*&amp;,CATIPipPipingPortRef*&amp;)
<dd>  Gets the two end of Flexible Pipe/Tube.
 <dt> o 
    <a href="#GetFlexibleInformation(int&amp;,int&amp;,double&amp;,double&amp;)"><b>GetFlexibleInformation</b></a>(int&amp;,int&amp;,double&amp;,double&amp;)
<dd>  Gets the Flexible parameters in term of Accuracy, Flexibility, Temperature and pressure.
 <dt> o 
    <a href="#GetLength(double&amp;)"><b>GetLength</b></a>(double&amp;)
<dd>  Gets the length of flexible Pipe/Tube.
 <dt> o 
    <a href="#GetNumberOfNode(int&amp;)"><b>GetNumberOfNode</b></a>(int&amp;)
<dd>  Gets the number of node in Pipe/Tube.
 <dt> o 
    <a href="#GetSlack(double&amp;)"><b>GetSlack</b></a>(double&amp;)
<dd>  Gets the slack of flexible Pipe/Tube.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATFlexiblePipeAlgorithmMode"><b>CATFlexiblePipeAlgorithmMode</b></a>
<dd>  Flexible Pipe Algorithm Mode.
 <dt> o 
    <a href="#CATFlexiblePipeBuildMode"><b>CATFlexiblePipeBuildMode</b></a>
<dd>  Flexible Pipe Build Mode.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAlgorithmMode"></a><a name="GetAlgorithmMode(CATFlexiblePipeAlgorithmMode&amp;)"></a> <dt> o <b>GetAlgorithmMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAlgorithmMode</b>(<td><script type="text/javascript"> activateLink('CATFlexiblePipeAlgorithmMode','CATFlexiblePipeAlgorithmMode&amp;')</script> <td><tt>oeAlgorithmMode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the algorithm mode of flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oeAlgorithmMode</tt>
   <dd>   This method returns the mode “Standard” or “Flexible” to build the Flexible Pipe/Tube.
   “Flexible” mode is the realistic algorithm that use the physical property to build the shape of pipe.
    Licence “FLX” is request to have this mode.
    [out, CATFlexiblePipeAlgorithmMode]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>Failed to find the Flexible Curve inside the Flexible Pipe</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetBendRadius"></a><a name="GetBendRadius(double&amp;)"></a> <dt> o <b>GetBendRadius</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBendRadius</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oBendRadius</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the bend radius of flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBendRadius</tt>
   <dd>   Value of the bend radius. [out, Double]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>Failed to find the Flexible Curve inside the Flexible Pipe</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetBuildMode"></a><a name="GetBuildMode(CATFlexiblePipeBuildMode&amp;)"></a> <dt> o <b>GetBuildMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBuildMode</b>(<td><script type="text/javascript"> activateLink('CATFlexiblePipeBuildMode','CATFlexiblePipeBuildMode&amp;')</script> <td><tt>oeBuildMode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the build mode of flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oeBuildMode</tt>
   <dd>   This method returns the build mode of Flexible Pipe/Tube that can be Slack, Bend
   or Length mode.
   [out, CATFlexiblePipeBuildMode]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>Failed to find the Flexible Curve inside the Flexible Pipe</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetCoordinateofNode"></a><a name="GetCoordinateofNode(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)"></a> <dt> o <b>GetCoordinateofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCoordinateofNode</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATMathPoint)','CATLISTP(CATMathPoint)&amp;')</script> <td><tt>oListPofCoordinateNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipIUnkOccToFindRoot</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the coordinate of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListPofCoordinateNode</tt>
   <dd> (need to release it)   This method returns a list of CATMathPoint pointers that is the coordinate of Node in context 
   of Root product of the session in milimeters (mm). Root product will be found using the input ipIUnkOccToFindRoot.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATLISTP(CATMathPoint)].
 </dd>
    <dt><tt> ipIUnkOccToFindRoot</tt>
   <dd>   Occurrence used to find the Root Product in which context the coordinates of the nodes will be given out. 
   If this input is NULL, then co-ordinates of the node will be in the context of the Reference of pipe. [in, CATBaseUnknown].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Pipe/tube</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetEnds"></a><a name="GetEnds(CATIPipPipingPortRef*&amp;,CATIPipPipingPortRef*&amp;)"></a> <dt> o <b>GetEnds</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEnds</b>(<td><script type="text/javascript"> activateLink('CATIPipPipingPortRef','CATIPipPipingPortRef*&amp;')</script> <td><tt>opIEndPipeOne</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPipPipingPortRef','CATIPipPipingPortRef*&amp;')</script> <td><tt>opIEndPipeTwo</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the two end of Flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIEndPipeOne</tt>
   <dd> [out, CATIPipPipingPortRef #Release].   Pipe end one.
 </dd>
    <dt><tt> opIEndPipeTwo</tt>
   <dd>  [out, CATIPipPipingPortRef #Release].   Pipe end two.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetFlexibleInformation"></a><a name="GetFlexibleInformation(int&amp;,int&amp;,double&amp;,double&amp;)"></a> <dt> o <b>GetFlexibleInformation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFlexibleInformation</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oAccuracy</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oFlexibility</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oTemperature</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oPressure</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Gets the Flexible parameters in term of Accuracy, Flexibility, Temperature and pressure.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAccuracy</tt>
   <dd>   Value of the Accuracy between 1 to 10 [out, integer]
   Balance between the Performance (1) and Accurary (10)
 </dd>
    <dt><tt> oFlexibility</tt>
   <dd>   Value of the Flexibility between 1 to 6 [out, integer]
   Default material: from very stiff (1) to very flexible (6), if no material object  is attach to flexible pipe 
 </dd>
    <dt><tt> oTemperature</tt>
   <dd>    Value of temperature in Kelvin [out, double]
 </dd>
    <dt><tt> oPressure</tt>
   <dd>    Value of pressure in N/m2 [out, double]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetLength"></a><a name="GetLength(double&amp;)"></a> <dt> o <b>GetLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLength</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLength</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the length of flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLength</tt>
   <dd>   Value of the actual total geometric length of Flexible Pipe/tube [out, double] whatever may be the build mode of the Flexible Pipe/tube.
   Note that this value might be different than the value set as input length for 'Length Build Mode' of the Flexible Pipe/tube.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>Failed to find the Flexible Curve inside the Flexible Pipe</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetNumberOfNode"></a><a name="GetNumberOfNode(int&amp;)"></a> <dt> o <b>GetNumberOfNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfNode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the number of node in Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumberOfNode</tt>
   <dd>   Give the number of node that defines the flexible Pipe curve.
   Include: Directional point, passing point (which is or not an external reference),
   point which is External reference that come from Support or Piping Part with Hole Port.
   The point of 1 point Part Port or 2 points Part port is also included.
   [out, Integer].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Pipe/tube</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetSlack"></a><a name="GetSlack(double&amp;)"></a> <dt> o <b>GetSlack</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSlack</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oSlackValue</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the slack of flexible Pipe/Tube.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSlackValue</tt>
   <dd>   Value of the Slack [out, double].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_INVALIDARG</dt>
     <dd>Failed to find the Flexible Curve inside the Flexible Pipe</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATFlexiblePipeAlgorithmMode"> <dt> o <b>CATFlexiblePipeAlgorithmMode</b>
<dl>
  <dd>
<pre>
enum <b>CATFlexiblePipeAlgorithmMode</b> {
  CatStandard,
  CatFlexible
}
</pre>
 Flexible Pipe Algorithm Mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CatStandard</tt>
   <dd>   Standard mode computation.
 </dd>
    <dt><tt> CatFlexible</tt>
   <dd>   Flexible mode computation.</dd>
</dl>
</dl>
</dl>
<a name="CATFlexiblePipeBuildMode"> <dt> o <b>CATFlexiblePipeBuildMode</b>
<dl>
  <dd>
<pre>
enum <b>CATFlexiblePipeBuildMode</b> {
  CATPipSlack,
  CATPipBend,
  CATPipLength
}
</pre>
 Flexible Pipe Build Mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATPipSlack</tt>
   <dd>   Slack build mode.
 </dd>
    <dt><tt> CATPipBend</tt>
   <dd>   Bend build mode.
 </dd>
    <dt><tt> CATPipLength</tt>
   <dd>   Length build mode.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPipFlexiblePipeReference.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPipeTubeDesignUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

