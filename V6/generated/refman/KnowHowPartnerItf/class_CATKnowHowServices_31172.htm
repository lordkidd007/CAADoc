<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowHowPartnerItf Class CATKnowHowServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowHowPartnerItf.htm" href="../KnowHowPartnerItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowHowPartnerItf";	}
		function getCurrentObjectName() { 
 	return "CATKnowHowServices"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowHowPartnerItf <script type="text/javascript" > writeClassCharacteristic(); </script> CATKnowHowServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATKnowHowServices_31172','CATKnowHowServices','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATKnowHowServices</b>
</p>
<p>
<b><i>    Provides services to be used in the development of a quality checking product.</i></b><br>
<br> 
 Quality checking products usually check V6 models (3DShapes, Drawing) in order to verify that those models are compliant with standards defined by the company.<br>
 Standards can be very diverse: from geometry quality checking, to organization of the tree or naming conventions, or validation of the status of the links, ...<br>
 To verify the standards, the quality checking product will rely on a full set of V6 APIs, available with the first level of API of CATIA (As-Is layer)<br>
 The objective of this class of services, is to provide some particularly useful APIs that are not available in the As-Is layer.<br>
 It concerns the following APIs: <br>
  <ul>
 	 <li> Knowledge type access: starting from an object, it provides its type. The quality checking product, will organize its checks depending on the type of the object
 	 <li> Marking check results: quality checking products may want to save locally, in the representations, some summary of the results if the checks that have been performed. A dedicated service is provided to read and write such an information.
  </ul> Mechanical import status: quality checking products are often interested in accessing the status of links.
 <p></p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BreakLinkMechanicalImport(CATICkeObject_var&amp;)"><b>BreakLinkMechanicalImport</b></a>(CATICkeObject_var&amp;)
<dd>  Removes the link of the import to its pointed element.
 <dt> o 
    <a href="#GetOwner(CATICkeObject_var&amp;,CATICkeObject_var&amp;)"><b>GetOwner</b></a>(CATICkeObject_var&amp;,CATICkeObject_var&amp;)
<dd>   Returns the owner of the object (in terms of tree aggregation.
 <dt> o 
    <a href="#GetValue(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)"><b>GetValue</b></a>(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>  Reads the value of an attribute in a generic manner (as a value).
 <dt> o 
    <a href="#IsContextualMechanicalImport(CATICkeObject_var&amp;,int&amp;)"><b>IsContextualMechanicalImport</b></a>(CATICkeObject_var&amp;,int&amp;)
<dd>  Indicates if an import is a contextual import.
 <dt> o 
    <a href="#IsMechanicalImportBroken(CATICkeObject_var&amp;,int&amp;)"><b>IsMechanicalImportBroken</b></a>(CATICkeObject_var&amp;,int&amp;)
<dd>  Indicates if an import is broken.
 <dt> o 
    <a href="#IsMechanicalImportNotLoaded(CATICkeObject_var&amp;,int&amp;)"><b>IsMechanicalImportNotLoaded</b></a>(CATICkeObject_var&amp;,int&amp;)
<dd>  Indicates if an import is not loaded.
 <dt> o 
    <a href="#IsMechanicalImportSynchronized(CATICkeObject_var&amp;,int&amp;)"><b>IsMechanicalImportSynchronized</b></a>(CATICkeObject_var&amp;,int&amp;)
<dd>  Indicates if an import is synchronized.
 <dt> o 
    <a href="#IsSupporting(CATICkeObject_var&amp;,CATIType_var&amp;)"><b>IsSupporting</b></a>(CATICkeObject_var&amp;,CATIType_var&amp;)
<dd>   Indicates if an object supports (is a kind of) a given type.
 <dt> o 
    <a href="#ListSupportedTypes(CATICkeObject_var&amp;,CATListValCATIType_var&amp;)"><b>ListSupportedTypes</b></a>(CATICkeObject_var&amp;,CATListValCATIType_var&amp;)
<dd>   Lists the type that an object supports.
 <dt> o 
    <a href="#ReadPersistentStringProperty(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)"><b>ReadPersistentStringProperty</b></a>(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)
<dd>  This method is used to read persistent strings on particular objects.
 <dt> o 
    <a href="#RetrieveMainType(CATICkeObject_var&amp;,CATIType_var&amp;)"><b>RetrieveMainType</b></a>(CATICkeObject_var&amp;,CATIType_var&amp;)
<dd>   Retrieves the main type of the object.
 <dt> o 
    <a href="#SetValue(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)"><b>SetValue</b></a>(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>  Sets the value of an attribute in a generic manner (as a value) .
 <dt> o 
    <a href="#StatusMechanicalImport(CATICkeObject_var&amp;,CATKnowHowServices::LinkStatus&amp;)"><b>StatusMechanicalImport</b></a>(CATICkeObject_var&amp;,CATKnowHowServices::LinkStatus&amp;)
<dd>  Indicates the status of mechanical import.
 <dt> o 
    <a href="#VisitComponents(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,int)"><b>VisitComponents</b></a>(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,int)
<dd>   This method is a way to access recursively or not the components of the object 
 
 <dt> o 
    <a href="#WritePersistentStringProperty(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)"><b>WritePersistentStringProperty</b></a>(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)
<dd>  This method is used to add persistent strings on particular objects.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#LinkStatus"><b>LinkStatus</b></a>
<dd>  Link status.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="BreakLinkMechanicalImport"></a><a name="BreakLinkMechanicalImport(CATICkeObject_var&amp;)"></a> <dt> o <b>BreakLinkMechanicalImport</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BreakLinkMechanicalImport</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the link of the import to its pointed element.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> import.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is successful.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="GetOwner"></a><a name="GetOwner(CATICkeObject_var&amp;,CATICkeObject_var&amp;)"></a> <dt> o <b>GetOwner</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOwner</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iOwner</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the owner of the object (in terms of tree aggregation.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject.</tt>
   <dd> object. 
 </dd>
    <dt><tt> iOwner</tt>
   <dd> owner of the object
 </dd>
    <dt><tt> oStatus</tt>
   <dd> status. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iAttributeName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Reads the value of an attribute in a generic manner (as a value). Works in all cases. Must be used to read List attributes.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> Knowledge object on which we want to read an attribute.
 </dd>
    <dt><tt> iAttributeName</tt>
   <dd> Name of the attribute in the Knowledge dictionary (internal name)
 </dd>
    <dt><tt> oValue</tt>
   <dd> Value that we will read on the attribute.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the read operation has failed (attribute non existing on object, attribute of a bad type).
 	 <li> S_OK	if the attribute has been read successfully.
  </ol>
</dl>
</dl>
<a name="IsContextualMechanicalImport"></a><a name="IsContextualMechanicalImport(CATICkeObject_var&amp;,int&amp;)"></a> <dt> o <b>IsContextualMechanicalImport</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsContextualMechanicalImport</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if an import is a contextual import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> import.  </dd>
    <dt><tt> oStatus</tt>
   <dd> status : 1 the import is contextual, 0 the import is a rep-rep link. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="IsMechanicalImportBroken"></a><a name="IsMechanicalImportBroken(CATICkeObject_var&amp;,int&amp;)"></a> <dt> o <b>IsMechanicalImportBroken</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsMechanicalImportBroken</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if an import is broken.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> import.  </dd>
    <dt><tt> oStatus</tt>
   <dd> status : 1 if the link is broken, otherwise 0.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="IsMechanicalImportNotLoaded"></a><a name="IsMechanicalImportNotLoaded(CATICkeObject_var&amp;,int&amp;)"></a> <dt> o <b>IsMechanicalImportNotLoaded</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsMechanicalImportNotLoaded</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if an import is not loaded.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> import.  </dd>
    <dt><tt> oStatus</tt>
   <dd> status : 1 if the link is not loaded, otherwise0.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="IsMechanicalImportSynchronized"></a><a name="IsMechanicalImportSynchronized(CATICkeObject_var&amp;,int&amp;)"></a> <dt> o <b>IsMechanicalImportSynchronized</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsMechanicalImportSynchronized</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if an import is synchronized.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> import.  </dd>
    <dt><tt> oStatus</tt>
   <dd> status : 0 if the import is not synchronized, otherwise 1. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="IsSupporting"></a><a name="IsSupporting(CATICkeObject_var&amp;,CATIType_var&amp;)"></a> <dt> o <b>IsSupporting</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject *')</script>  <b>IsSupporting</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Indicates if an object supports (is a kind of) a given type.<br>
 The quality checking product will organize its checks depending on the type of the object. This method answers the question: are you of this type?<br>
 Note that an object may support several types.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object </dd>
    <dt><tt> iType</tt>
   <dd> type </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  an object (usually itself) that implements this type. Returns NULL if the object does not support the type.<br> The pointer must be delallocated (->Release()).
</dl>
</dl>
<a name="ListSupportedTypes"></a><a name="ListSupportedTypes(CATICkeObject_var&amp;,CATListValCATIType_var&amp;)"></a> <dt> o <b>ListSupportedTypes</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListSupportedTypes</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIType_var','CATListValCATIType_var&amp;')</script> <td><tt>iolListOfCATIType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Lists the type that an object supports.<br>
 The quality checking product will organize its checks depending on the type of the object. This method returns the full list of types supported by this object<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object </dd>
    <dt><tt> iolListOfCATIType</tt>
   <dd> List of types. This list is filled by the service. It is not emptied by the service.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
 	 <li> E_INVALIDARG if the object in input is NULL.
 	 <li> S_OK	if the types have been found.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="ReadPersistentStringProperty"></a><a name="ReadPersistentStringProperty(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)"></a> <dt> o <b>ReadPersistentStringProperty</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ReadPersistentStringProperty</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttributeKey</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 This method is used to read persistent strings on particular objects.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object on which to read the information. A restricted number of objects are supporting this capability. To be defined through discussion with R&D lab.<br> </dd>
    <dt><tt> iAttributeKey</tt>
   <dd> name of the attribute that we want to read. A restricted list of attribute names is supported. To be defined through discussion with R&D lab.<br> </dd>
    <dt><tt> oValue</tt>
   <dd> string that is read. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (attribute key not supported, object NULL or not supporting this capability).
 	 <li> S_OK	if the attribute has been read successfully.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="RetrieveMainType"></a><a name="RetrieveMainType(CATICkeObject_var&amp;,CATIType_var&amp;)"></a> <dt> o <b>RetrieveMainType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RetrieveMainType</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the main type of the object.<br>
 The quality checking product will organize its checks depending on the type of the object. This method returns the main type of the object.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object </dd>
    <dt><tt> oType</tt>
   <dd> Type in output </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
 	 <li> E_INVALIDARG if the object in input is NULL.
 	 <li> S_OK	if the type has been found.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="SetValue"></a><a name="SetValue(CATICkeObject_var&amp;,CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>SetValue</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetValue</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iAttributeName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of an attribute in a generic manner (as a value) .<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> Knowledge object on which we want to write an attribute.
 </dd>
    <dt><tt> iAttributeName</tt>
   <dd> Name of the attribute in the Knowledge dictionary (internal name)
 </dd>
    <dt><tt> iValue</tt>
   <dd> Value that we want to use to set the attribute value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the valuation has failed (attribute non existing on object, attribute of a bad type).
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> S_OK	if the attribute has been set successfully.
 	 <li> E_FAIL otherwise.
  </ol>
</dl>
</dl>
<a name="StatusMechanicalImport"></a><a name="StatusMechanicalImport(CATICkeObject_var&amp;,CATKnowHowServices::LinkStatus&amp;)"></a> <dt> o <b>StatusMechanicalImport</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>StatusMechanicalImport</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iobject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATKnowHowServices::LinkStatus','CATKnowHowServices::LinkStatus&amp;')</script> <td><tt>oStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates the status of mechanical import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> mechanical import. It may be a contextual link or a rep-rep link. 
 </dd>
    <dt><tt> oStatus</tt>
   <dd> status. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="VisitComponents"></a><a name="VisitComponents(CATBaseUnknown_var&amp;,CATLISTV(CATBaseUnknown_var)&amp;,int)"></a> <dt> o <b>VisitComponents</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>VisitComponents</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iObjectToVisit</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>olistToFill</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>recur</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method is a way to access recursively or not the components of the object 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ObjectToVisit.</tt>
   <dd> It may support CATIChildrenAccess or/and CATIParmPublisher. 
 </dd>
    <dt><tt> listToFill</tt>
   <dd> list of components of the object
 </dd>
    <dt><tt> recur</tt>
   <dd> 0 : only the direct components.
 1 : all the components under objec.
 </dd>
    <dt><tt> oStatus</tt>
   <dd> status. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the operation has failed (object NULL).
 	 <li> S_OK	if the operation is possible.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
<a name="WritePersistentStringProperty"></a><a name="WritePersistentStringProperty(CATICkeObject_var&amp;,char*,CATUnicodeString&amp;)"></a> <dt> o <b>WritePersistentStringProperty</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>WritePersistentStringProperty</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttributeKey</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 This method is used to add persistent strings on particular objects.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object on which to add the information. A restricted number of objects are supporting this capability. To be defined through discussion with R&D lab.<br> </dd>
    <dt><tt> iAttributeKey</tt>
   <dd> name of the attribute that we want to write. A restricted list of attribute names is supported. To be defined through discussion with R&D lab.<br> </dd>
    <dt><tt> iValue</tt>
   <dd> string that we want to store on the attribute. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 	 <li> E_INVALIDARG if the valuation has failed (attribute key not supported, object NULL or not supporting this capability).
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> S_OK	if the attribute has been set successfully.
 	 <li> E_FAIL otherwise.
  </ul>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="LinkStatus"> <dt> o <b>LinkStatus</b>
<dl>
  <dd>
<pre>
enum <b>LinkStatus</b> {
  Unknown,
  OK,
  Broken,
  NotSynchronized,
  ComponentNotFound,
  ComponentNotLoaded,
  ComponentNotOpened,
  ComponentBrokenSession,
  ComponentBrokenRemote,
  NotApplicable
}
</pre>
 Link status.
<br> 
 <b>Role:</b> This type enumerates status of a link.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Unknown</tt>
   <dd>  The status is unknown.
 </dd>
    <dt><tt> OK</tt>
   <dd>  The link is solved.
 </dd>
    <dt><tt> Broken</tt>
   <dd>  The link is broken.
 </dd>
    <dt><tt> NotSynchronized</tt>
   <dd>  The link is not synchronized.
 </dd>
    <dt><tt> ComponentNotFound</tt>
   <dd>  Not used.
 </dd>
    <dt><tt> ComponentNotLoaded</tt>
   <dd>  The pointed component is not completely loaded so the link can't be bound.
 </dd>
    <dt><tt> ComponentNotOpened</tt>
   <dd>  The pointed component is not in session.
 </dd>
    <dt><tt> ComponentBrokenSession</tt>
   <dd>  The pointed component has been deleted in session.
 </dd>
    <dt><tt> ComponentBrokenRemote</tt>
   <dd>  The ponted component has been deleted in the remote persistency.	
  </dd>
    <dt><tt> NotApplicable</tt>
   <dd>  The SynchroStatus is not handled (the corresponding relation is not neutral).</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATKnowHowServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATKnowHowPartnerItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

