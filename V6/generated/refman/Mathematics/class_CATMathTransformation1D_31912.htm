<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Mathematics Class CATMathTransformation1D</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../Mathematics.htm" href="../Mathematics.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "Mathematics";	}
		function getCurrentObjectName() { 
 	return "CATMathTransformation1D"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Mathematics <script type="text/javascript" > writeClassCharacteristic(); </script> CATMathTransformation1D</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMathTransformation1D_31912','CATMathTransformation1D','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMathTransformation1D</b>
</p>
<p>
<b><i> Class defining a transformation in a 1D space.</i></b><br>

 <br><tt> t(x) = a*x + b</tt>.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMathTransformation1D()"><b>CATMathTransformation1D</b></a>()
<dd>  Constructs the identity 1D transformation.
 <dt> o 
    <a href="#CATMathTransformation1D(double*)"><b>CATMathTransformation1D</b></a>(double*)
<dd>  Constructs a 1D transformation.
 <dt> o 
    <a href="#CATMathTransformation1D(double,double)"><b>CATMathTransformation1D</b></a>(double,double)
<dd>  Constructs a 1D transformation.
 <dt> o 
    <a href="#CATMathTransformation1D(double,double,double,double)"><b>CATMathTransformation1D</b></a>(double,double,double,double)
<dd>   
 <dt> o 
    <a href="#CATMathTransformation1D(CATMathTransformation1D&amp;)"><b>CATMathTransformation1D</b></a>(CATMathTransformation1D&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATMathTransformation1D()"><b>~CATMathTransformation1D</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Apply(double)"><b>Apply</b></a>(double)
<dd>   Transforms a double.
 <dt> o 
    <a href="#GetCoef(double[])"><b>GetCoef</b></a>(double[])
<dd>  Retrieves the coefficients.
 <dt> o 
    <a href="#GetMatrix1D()"><b>GetMatrix1D</b></a>()
<dd>  <dt> o 
    <a href="#GetMatrix1D()"><b>GetMatrix1D</b></a>()
<dd>  Returns the scale coefficient.
 <dt> o 
    <a href="#GetVector1D()"><b>GetVector1D</b></a>()
<dd>  <dt> o 
    <a href="#GetVector1D()"><b>GetVector1D</b></a>()
<dd>  Returns the shift coefficient.
 <dt> o 
    <a href="#Set(double,double,double,double)"><b>Set</b></a>(double,double,double,double)
<dd>   Creates the linear transformation that transforms <tt>iX0</tt> into <tt>iFx0</tt> 
 and <tt>iX1</tt> into <tt>iFx1</tt>.
 <dt> o 
    <a href="#SetCoef(double[])"><b>SetCoef</b></a>(double[])
<dd>  Modifies the coefficients.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMathTransformation1D"></a><a name="CATMathTransformation1D()"></a> <dt> o <b>CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathTransformation1D</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs the identity 1D transformation.
 <br><tt>t(x) = x </tt>.
</dl>
<a name="CATMathTransformation1D"></a><a name="CATMathTransformation1D(double*)"></a> <dt> o <b>CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathTransformation1D</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iArray</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 1D transformation.
 <br><tt> t(x) = iArray[0]*x + iArray[1]</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> The array of the scale and shift coefficient.</dd>
</dl>
</dl>
</dl>
<a name="CATMathTransformation1D"></a><a name="CATMathTransformation1D(double,double)"></a> <dt> o <b>CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathTransformation1D</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iA</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iB</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 1D transformation.
 <br><tt> t(x) = iA*x + iB</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iA</tt>
   <dd> The scale coefficient.
 </dd>
    <dt><tt> iB</tt>
   <dd> The shift coefficient.</dd>
</dl>
</dl>
</dl>
<a name="CATMathTransformation1D"></a><a name="CATMathTransformation1D(double,double,double,double)"></a> <dt> o <b>CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathTransformation1D</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFx0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFx1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 Set
 Creates the linear transformation that transforms <tt>ix0</tt> into <tt>ifx0</tt> 
 and <tt>ix1</tt> into <tt>ifx1</tt>. 
 <br><tt>ix0</tt> must be different from <tt>ix1</tt>, but this is not checked.
</dl>
</dl>
<a name="CATMathTransformation1D"></a><a name="CATMathTransformation1D(CATMathTransformation1D&amp;)"></a> <dt> o <b>CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathTransformation1D</b>(<td> const <script type="text/javascript"> activateLink('CATMathTransformation1D','CATMathTransformation1D&amp;')</script> <td><tt>iTransfo1DToCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="~CATMathTransformation1D"></a><a name="~CATMathTransformation1D()"></a> <dt> o <b>~CATMathTransformation1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATMathTransformation1D</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Apply"></a><a name="Apply(double)"></a> <dt> o <b>Apply</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>Apply</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParamToTransform</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
  Transforms a double.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParamToTransform</tt>
   <dd> The double to transform.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the transformation.
</dl>
</dl>
<a name="GetCoef"></a><a name="GetCoef(double[])"></a> <dt> o <b>GetCoef</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetCoef</b>(<td><script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>ioCoef</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the coefficients.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCoef</tt>
   <dd> The array (that must be already allocated).
 <br><tt> t(x) = ioCoef[0]*x + ioCoef[1]</tt>.</dd>
</dl>
</dl>
</dl>
<a name="GetMatrix1D"></a><a name="GetMatrix1D()"></a> <dt> o <b>GetMatrix1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>GetMatrix1D</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="GetMatrix1D"></a><a name="GetMatrix1D()"></a> <dt> o <b>GetMatrix1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','INLINE double')</script>  <b>GetMatrix1D</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the scale coefficient.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The scale coefficient.
</dl>
</dl>
<a name="GetVector1D"></a><a name="GetVector1D()"></a> <dt> o <b>GetVector1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>GetVector1D</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="GetVector1D"></a><a name="GetVector1D()"></a> <dt> o <b>GetVector1D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','INLINE double')</script>  <b>GetVector1D</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the shift coefficient.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The shift coefficient.
</dl>
</dl>
<a name="Set"></a><a name="Set(double,double,double,double)"></a> <dt> o <b>Set</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFx0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFx1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Creates the linear transformation that transforms <tt>iX0</tt> into <tt>iFx0</tt> 
 and <tt>iX1</tt> into <tt>iFx1</tt>. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX0</tt>
   <dd> Double.
 </dd>
    <dt><tt> iFx0</tt>
   <dd> Image of <tt>iX0</tt>  by the requested transformation.
 </dd>
    <dt><tt> iX1</tt>
   <dd> Double.
 </dd>
    <dt><tt> iFx1</tt>
   <dd> Image of <tt>iX1</tt>  by the requested transformation.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>E_FAIL</tt> if <tt>iX0</tt> is equal to <tt>iX1</tt> but not <tt>iFx0</tt> and <tt>iFx1</tt>, 
 otherwise <tt>S_OK</tt>
 In case of failure, the computed transformation is the identity.
</dl>
</dl>
<a name="SetCoef"></a><a name="SetCoef(double[])"></a> <dt> o <b>SetCoef</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCoef</b>(<td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iNewCoef</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the coefficients.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewCoef</tt>
   <dd> The array of the new coefficients.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMathTransformation1D.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMathematics</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

