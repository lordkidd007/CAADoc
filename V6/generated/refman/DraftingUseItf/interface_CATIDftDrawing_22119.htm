<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingUseItf Interface CATIDftDrawing</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingUseItf.htm" href="../DraftingUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIDftDrawing"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DraftingUseItf Interface CATIDftDrawing</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftDrawing_22119','CATIDftDrawing','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftDrawing</b>
</p>
<p>
<b><i> Interface of the drawing object.</i></b><br>

 <b>Role</b>: The drawing is the root feature of a drawing representation.
 It manages the sheets.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddSheet(CATIDftSheet**,wchar_t*,CATBoolean)"><b>AddSheet</b></a>(CATIDftSheet**,wchar_t*,CATBoolean)
<dd>  This method is used to create a sheet in the drawing.
 <dt> o 
    <a href="#GetActiveSheet(CATIDftSheet**)"><b>GetActiveSheet</b></a>(CATIDftSheet**)
<dd>  Gets the active sheet in the drawing.
 <dt> o 
    <a href="#GetActiveView(CATIDftView**)"><b>GetActiveView</b></a>(CATIDftView**)
<dd>  Gets the active view in the drawing.
 <dt> o 
    <a href="#GetDrawingFactory(CATIDftFactory**)"><b>GetDrawingFactory</b></a>(CATIDftFactory**)
<dd>  Description : returns the Drawing factory.
 <dt> o 
    <a href="#GetSheets(CATIUnknownList**)"><b>GetSheets</b></a>(CATIUnknownList**)
<dd>  Returns the sheets referenced by the drawing.
 <dt> o 
    <a href="#GetStandardManager(CATIDftStandardManager**)"><b>GetStandardManager</b></a>(CATIDftStandardManager**)
<dd>  Description : returns the standard manager.
 <dt> o 
    <a href="#GetViews(CATIUnknownList**)"><b>GetViews</b></a>(CATIUnknownList**)
<dd>  Description : returns the views referenced by the drawing.
 <dt> o 
    <a href="#RemoveSheet(CATIDftSheet*)"><b>RemoveSheet</b></a>(CATIDftSheet*)
<dd>  this method is used to remove a sheet in the drawing.
 <dt> o 
    <a href="#ReorderSheets(CATIUnknownList*)"><b>ReorderSheets</b></a>(CATIUnknownList*)
<dd>  Change the positions of the sheets in a drawing according to the given 
 ordered list.
 <dt> o 
    <a href="#SetActiveSheet(CATIDftSheet*)"><b>SetActiveSheet</b></a>(CATIDftSheet*)
<dd>  Sets the active sheet in the drawing.
 <dt> o 
    <a href="#ValidateSheetOrder(CATIUnknownList*)"><b>ValidateSheetOrder</b></a>(CATIUnknownList*)
<dd>  Validates that the given ordered list can be used as an input
 for ReorderSheet.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddSheet"></a><a name="AddSheet(CATIDftSheet**,wchar_t*,CATBoolean)"></a> <dt> o <b>AddSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddSheet</b>(<td><script type="text/javascript"> activateLink('CATIDftSheet','CATIDftSheet**')</script> <td><tt>oSheet</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('wchar_t','wchar_t*')</script> <td><tt>iName</tt><td><tt>= NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibDetailSheet</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This method is used to create a sheet in the drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSheet</tt>
   <dd>   The new sheet to create
 </dd>
    <dt><tt> iName</tt>
   <dd>    the sheet name, automatic if NULL pointer (default)
 </dd>
    <dt><tt> ibDetailSheet</tt>
   <dd>   if true, a detail sheet is created.</dd>
</dl>
</dl>
</dl>
<a name="GetActiveSheet"></a><a name="GetActiveSheet(CATIDftSheet**)"></a> <dt> o <b>GetActiveSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetActiveSheet</b>(<td><script type="text/javascript"> activateLink('CATIDftSheet','CATIDftSheet**')</script> <td><tt>oSheet</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the active sheet in the drawing.
 <BR>The active sheet is the working sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSheet</tt>
   <dd>   The active sheet in the drawing.</dd>
</dl>
</dl>
</dl>
<a name="GetActiveView"></a><a name="GetActiveView(CATIDftView**)"></a> <dt> o <b>GetActiveView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetActiveView</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView**')</script> <td><tt>oView</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the active view in the drawing.
 <BR>The active view is the view in edition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oView</tt>
   <dd>   The active view in the drawing.</dd>
</dl>
</dl>
</dl>
<a name="GetDrawingFactory"></a><a name="GetDrawingFactory(CATIDftFactory**)"></a> <dt> o <b>GetDrawingFactory</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDrawingFactory</b>(<td><script type="text/javascript"> activateLink('CATIDftFactory','CATIDftFactory**')</script> <td><tt>opiDftFact</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Description : returns the Drawing factory.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiDftfact</tt>
   <dd> :    The drawing factory</dd>
</dl>
</dl>
</dl>
<a name="GetSheets"></a><a name="GetSheets(CATIUnknownList**)"></a> <dt> o <b>GetSheets</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSheets</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oLstResult</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the sheets referenced by the drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLstResult</tt>
   <dd>   Founded sheets are added to the list</dd>
</dl>
</dl>
</dl>
<a name="GetStandardManager"></a><a name="GetStandardManager(CATIDftStandardManager**)"></a> <dt> o <b>GetStandardManager</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetStandardManager</b>(<td><script type="text/javascript"> activateLink('CATIDftStandardManager','CATIDftStandardManager**')</script> <td><tt>opiDftStdMngt</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Description : returns the standard manager.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiDftStdMngt</tt>
   <dd> :    The standard manager</dd>
</dl>
</dl>
</dl>
<a name="GetViews"></a><a name="GetViews(CATIUnknownList**)"></a> <dt> o <b>GetViews</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetViews</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oLstResult</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Description : returns the views referenced by the drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLstResult</tt>
   <dd> :    Founded views are added to the list</dd>
</dl>
</dl>
</dl>
<a name="RemoveSheet"></a><a name="RemoveSheet(CATIDftSheet*)"></a> <dt> o <b>RemoveSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveSheet</b>(<td> const <script type="text/javascript"> activateLink('CATIDftSheet','CATIDftSheet*')</script> <td><tt>iSheet</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 this method is used to remove a sheet in the drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSheet</tt>
   <dd>   Sheet to remove</dd>
</dl>
</dl>
</dl>
<a name="ReorderSheets"></a><a name="ReorderSheets(CATIUnknownList*)"></a> <dt> o <b>ReorderSheets</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ReorderSheets</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList*')</script> <td><tt>ipListOrderedSheets</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Change the positions of the sheets in a drawing according to the given 
 ordered list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>CATIUnknownList</tt>
   <dd> *ipListOrderedSheets</tt> [in] The ordered list of the sheets in this drawing.
 <b>Preconditions<b>:
 <dl>
 <dt> ValidateSheetOrder(iOrderedSheets) must succeed. @see ValidateSheetOrder.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>         <dd> Sheets were reordered.
 <dt> <tt>E_UNEXPECTED</tt> <dd> Preconditions not met.
 <dt> <tt>E_FAIL</tt>       <dd> Internal error.
 </dl>
</dl>
</dl>
<a name="SetActiveSheet"></a><a name="SetActiveSheet(CATIDftSheet*)"></a> <dt> o <b>SetActiveSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetActiveSheet</b>(<td> const <script type="text/javascript"> activateLink('CATIDftSheet','CATIDftSheet*')</script> <td><tt>iSheet</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the active sheet in the drawing.
 <BR>The active sheet is the working sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSheet</tt>
   <dd>   The active sheet in the drawing.</dd>
</dl>
</dl>
</dl>
<a name="ValidateSheetOrder"></a><a name="ValidateSheetOrder(CATIUnknownList*)"></a> <dt> o <b>ValidateSheetOrder</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ValidateSheetOrder</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList*')</script> <td><tt>ipListOrderedSheets</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Validates that the given ordered list can be used as an input
 for ReorderSheet.
 i.e. validates that:
 ipListOrderedSheets is the result of a permutation applied to 
 the list of <b>all</b> the sheets of this drawing, with the following 
 constraint: for every non-detail sheet, there isnt any detail sheet 
 appearing before in ipListOrderedSheets.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>CATIUnknownList</tt>
   <dd> *ipListOrderedSheets</tt> The list of sheets to validate.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  An <tt>HRESULT</tt> value.
 <br><b>Legal values</b>:
 <dl>
 <dt> <tt>S_OK</tt>     <dd> iOrderedSheets is a valid input.
 <dt> <tt>E_XXX</tt>   <dd> iOrderedSheet is not a valid input.
 </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftDrawing.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

