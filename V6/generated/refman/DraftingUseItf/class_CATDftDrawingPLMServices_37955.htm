<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingUseItf Class CATDftDrawingPLMServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingUseItf.htm" href="../DraftingUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingUseItf";	}
		function getCurrentObjectName() { 
 	return "CATDftDrawingPLMServices"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DraftingUseItf <script type="text/javascript" > writeClassCharacteristic(); </script> CATDftDrawingPLMServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATDftDrawingPLMServices_37955','CATDftDrawingPLMServices','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATDftDrawingPLMServices</b>
</p>
<p>
<b><i>   This toolbox purposes services to create a Drawing representation reference and to navigate between the 
   representation reference and the Drawing root.</i></b><br>


   In order to load 3D Data from an existing Drawing representation reference, use <script type="text/javascript"> activateLinkAnchor('CATDftGenPLMServices','Load3DDataFromDrawing','CATDftGenPLMServices.Load3DDataFromDrawing') </script>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateDrawingRepReference(CATIPsiRepresentationReference**,CATUnicodeString&amp;,CATUnicodeString&amp;,int,CATIType*,CATIAdpEnvironment*)"><b>CreateDrawingRepReference</b></a>(CATIPsiRepresentationReference**,CATUnicodeString&amp;,CATUnicodeString&amp;,int,CATIType*,CATIAdpEnvironment*)
<dd>   Creates a complete Drawing representation reference.
 <dt> o 
    <a href="#GetAvailableDrawingStandards(CATListOfCATUnicodeString&amp;)"><b>GetAvailableDrawingStandards</b></a>(CATListOfCATUnicodeString&amp;)
<dd>  Gets list of available drawing standards.
 <dt> o 
    <a href="#GetDrawingRepresentation(CATIDftDrawing*,CATIPsiRepresentationReference**)"><b>GetDrawingRepresentation</b></a>(CATIDftDrawing*,CATIPsiRepresentationReference**)
<dd>   Gets the Drawing representation from Drawing root.
 <dt> o 
    <a href="#GetDrawingRoot(CATIPsiRepresentationReference*,CATIDftDrawing**)"><b>GetDrawingRoot</b></a>(CATIPsiRepresentationReference*,CATIDftDrawing**)
<dd>   Gets the Drawing root from Drawing representation.
 <dt> o 
    <a href="#GetListOfSheetStyles(CATUnicodeString,CATListOfCATUnicodeString&amp;)"><b>GetListOfSheetStyles</b></a>(CATUnicodeString,CATListOfCATUnicodeString&amp;)
<dd>  Gets list of available sheet styles  for a defined standard.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateDrawingRepReference"></a><a name="CreateDrawingRepReference(CATIPsiRepresentationReference**,CATUnicodeString&amp;,CATUnicodeString&amp;,int,CATIType*,CATIAdpEnvironment*)"></a> <dt> o <b>CreateDrawingRepReference</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateDrawingRepReference</b>(<td><script type="text/javascript"> activateLink('CATIPsiRepresentationReference','CATIPsiRepresentationReference**')</script> <td><tt>opiDrawingRepRef</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDrwStandardName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDrwSheetStyleName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSheetOrient</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType','CATIType*')</script> <td><tt>iDrwType</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipAdpEnv</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Creates a complete Drawing representation reference.

 <br><b>Role</b>: This method creates a Drawing representation with a specific format and a specific standard. 
            

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiDrawingRepRef</tt>
   <dd> [out, CATBaseUnknown#Release]   The drawing representation.

 </dd>
    <dt><tt> iDrwStandardName</tt>
   <dd> [in]   The drawing standard name.

 </dd>
    <dt><tt> iDrwSheetStyleName</tt>
   <dd> [in]   The Style of the drawing sheet

 </dd>
    <dt><tt> iSheetOrient</tt>
   <dd> [in]   To override the sheet orientation defined in the sheet style.
   Note: The override may be not performed if the sheet orientation parameter is locked by the sheet style.
    <br>Legal values are:
    <dl>
    <dt><tt> = 0 </tt> <dd>The sheet orientation defined by the sheet style (Default value).</dd>
    <dt><tt> = 1 </tt> <dd>Portrait orientation. .</dd>
    <dt><tt> = 2 </tt> <dd>Landscape orientation.</dd>
    </dl>

 </dd>
    <dt><tt> iDrwType</tt>
   <dd> [in]   The type of the Drawing representation. Must be a specialization of the original Drawing type.
   <br>If the argument is NULL, the original Drawing type is used.

 </dd>
    <dt><tt> ipAdpEnv</tt>
   <dd>  [in]   The environment defining the project.
   The project determines the deployment type to associate (or not) to the new PLM Object.  
  <br>If the argument is NULL, the current environment is used.  

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the representation is  created.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 <dt><tt>E_INVALIDARG </tt> <dd>Illegal arguments.
 </dl>
</dl>
</dl>
<a name="GetAvailableDrawingStandards"></a><a name="GetAvailableDrawingStandards(CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetAvailableDrawingStandards</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAvailableDrawingStandards</b>(<td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>oListOfStandards</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets list of available drawing standards.

 <br><b>Role</b>: This method returns the list of available drawing standard.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfStandards</tt>
   <dd> [out]   The list of the available standards
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the list of standard is  defined.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>

</dl>
</dl>
<a name="GetDrawingRepresentation"></a><a name="GetDrawingRepresentation(CATIDftDrawing*,CATIPsiRepresentationReference**)"></a> <dt> o <b>GetDrawingRepresentation</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDrawingRepresentation</b>(<td><script type="text/javascript"> activateLink('CATIDftDrawing','CATIDftDrawing*')</script> <td><tt>ipiDftDrawing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPsiRepresentationReference','CATIPsiRepresentationReference**')</script> <td><tt>opiDrawingRepresentation</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Gets the Drawing representation from Drawing root.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDftDrawing</tt>
   <dd> [in]   The Drawing root.
 </dd>
    <dt><tt> opiDrawingRepresentation</tt>
   <dd> [out, CATBaseUnknown#Release]   The Drawing representation.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the drawing representation is found.
 <dt><tt>E_INVALIDARG</tt> <dd>.if argument is not valid.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>

</dl>
</dl>
<a name="GetDrawingRoot"></a><a name="GetDrawingRoot(CATIPsiRepresentationReference*,CATIDftDrawing**)"></a> <dt> o <b>GetDrawingRoot</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDrawingRoot</b>(<td><script type="text/javascript"> activateLink('CATIPsiRepresentationReference','CATIPsiRepresentationReference*')</script> <td><tt>ipiDrawingRepRef</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDftDrawing','CATIDftDrawing**')</script> <td><tt>opiDftDrawing</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Gets the Drawing root from Drawing representation.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDrawingRepRef</tt>
   <dd> [in]   The Drawing representation.
 </dd>
    <dt><tt> opiDftDrawing</tt>
   <dd> [out]   The Drawing root.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the drawing root is found.
 <dt><tt>E_INVALIDARG</tt> <dd>.if argument is not valid: The Representation reference is either null or not a Drawing representation reference.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>

</dl>
</dl>
<a name="GetListOfSheetStyles"></a><a name="GetListOfSheetStyles(CATUnicodeString,CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetListOfSheetStyles</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetListOfSheetStyles</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iStandardName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>oListOfSheetStyles</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets list of available sheet styles  for a defined standard.

 <br><b>Role</b>: This method returns the list of available sheet styles for the given standard.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStandardName[in]</tt>
   <dd>   The Standard name.
 </dd>
    <dt><tt> oListOfSheetStyles</tt>
   <dd> [out]   The list of sheet styles 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the list of standard is  defined.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 <dt><tt>E_INVALIDARG</tt> <dd>if the standard does not exist.
 </dl>

</dl>
</dl>
<hr>
 This object is included in the file: <b>CATDftDrawingPLMServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

