<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingUseItf Interface CATIDftDitto</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingUseItf.htm" href="../DraftingUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIDftDitto"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DraftingUseItf Interface CATIDftDitto</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftDitto_19595','CATIDftDitto','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftDitto</b>
</p>
<p>
<b><i> Interface of 2D Ditto.</i></b><br>

 <b>Role</b>: This interface is used to access a Drafting 2D Ditto 
 properties.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Get2DAxisMatrix(double[6])"><b>Get2DAxisMatrix</b></a>(double[6])
<dd>  Gets the position matrix of the ditto.
 <dt> o 
    <a href="#GetDetail(IID&amp;,IUnknown**)"><b>GetDetail</b></a>(IID&amp;,IUnknown**)
<dd>  Gets the associated detail.
 <dt> o 
    <a href="#GetDittoFlip(CATBoolean&amp;)"><b>GetDittoFlip</b></a>(CATBoolean&amp;)
<dd>  Gets the flip state of the ditto.
 <dt> o 
    <a href="#GetDittoPosition(double&amp;,double&amp;)"><b>GetDittoPosition</b></a>(double&amp;,double&amp;)
<dd>  Gets the ditto position.
 <dt> o 
    <a href="#GetDittoRotation(double&amp;)"><b>GetDittoRotation</b></a>(double&amp;)
<dd>  Gets the angle of the ditto.
 <dt> o 
    <a href="#GetDittoScale(double&amp;)"><b>GetDittoScale</b></a>(double&amp;)
<dd>  Gets the ditto scale.
 <dt> o 
    <a href="#GetListOfModifiableObjects(CATIUnknownList**)"><b>GetListOfModifiableObjects</b></a>(CATIUnknownList**)
<dd>  Gets the list of objects modifiable in the ditto.
 <dt> o 
    <a href="#SetDittoFlip(CATBoolean)"><b>SetDittoFlip</b></a>(CATBoolean)
<dd>  Manages the flip of the ditto.
 <dt> o 
    <a href="#SetDittoPosition(double,double,CATBoolean)"><b>SetDittoPosition</b></a>(double,double,CATBoolean)
<dd>  Sets the ditto position.
 <dt> o 
    <a href="#SetDittoRotation(double,CATBoolean)"><b>SetDittoRotation</b></a>(double,CATBoolean)
<dd>  Sets the angle of the ditto.
 <dt> o 
    <a href="#SetDittoScale(double,CATBoolean)"><b>SetDittoScale</b></a>(double,CATBoolean)
<dd>  Sets the ditto scale.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Get2DAxisMatrix"></a><a name="Get2DAxisMatrix(double[6])"></a> <dt> o <b>Get2DAxisMatrix</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DAxisMatrix</b>(<td><script type="text/javascript"> activateLink('double[6','double[6]')</script> <td><tt>oMatrix</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the position matrix of the ditto.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>oMatrix</tt></tt>
   <dd> [out] The current position matrix of the ditto.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetDetail"></a><a name="GetDetail(IID&amp;,IUnknown**)"></a> <dt> o <b>GetDetail</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDetail</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown**')</script> <td><tt>oDetail</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the associated detail.
 <br><b>Role</b>: The detail is the reference object of instance (Ditto).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] The interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oDetail</tt></tt>
   <dd> [out] The address where the returned pointer to the interface is located.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetDittoFlip"></a><a name="GetDittoFlip(CATBoolean&amp;)"></a> <dt> o <b>GetDittoFlip</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDittoFlip</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>obFlip</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the flip state of the ditto.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> obFlip</tt>
   <dd> [out] If the boolean is true the ditto is fliped.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetDittoPosition"></a><a name="GetDittoPosition(double&amp;,double&amp;)"></a> <dt> o <b>GetDittoPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDittoPosition</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oXposition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oYposition</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the ditto position.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oXposition</tt>
   <dd> [out] X Coordinate of the ditto position.
 </dd>
    <dt><tt> oYposition</tt>
   <dd> [out] Y Coordinate of the ditto position.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetDittoRotation"></a><a name="GetDittoRotation(double&amp;)"></a> <dt> o <b>GetDittoRotation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDittoRotation</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRotation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the angle of the ditto.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRotation</tt>
   <dd> [out] The angle of the ditto.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetDittoScale"></a><a name="GetDittoScale(double&amp;)"></a> <dt> o <b>GetDittoScale</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDittoScale</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oScale</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the ditto scale.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oScale</tt>
   <dd> [out] The scale applied to the ditto.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="GetListOfModifiableObjects"></a><a name="GetListOfModifiableObjects(CATIUnknownList**)"></a> <dt> o <b>GetListOfModifiableObjects</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetListOfModifiableObjects</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oListOfObjects</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of objects modifiable in the ditto.
 <br><b>Role</b>: This method returns the list of features modifiable in the Ditto.
 The list is created even if the ditto does not contain any object modifiable in the instance.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfObjects</tt>
   <dd> The list of objects.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="SetDittoFlip"></a><a name="SetDittoFlip(CATBoolean)"></a> <dt> o <b>SetDittoFlip</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDittoFlip</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibUpdateVisu</tt><td><tt>=TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Manages the flip of the ditto.
 <br><b>Role</b>: Flips  the  ditto around  X  axis  
 To flip  around  Y  axis  you  have  to  flip  the  component  around  
 X and  to  add  a  rotation  of  180  degrees.  
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ibUpdateVisu</tt>
   <dd> [in] If the boolean is true the visualiztion of the ditto is updated (Default mode)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="SetDittoPosition"></a><a name="SetDittoPosition(double,double,CATBoolean)"></a> <dt> o <b>SetDittoPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDittoPosition</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXposition</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYposition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibUpdateVisu</tt><td><tt>=TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the ditto position.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXposition</tt>
   <dd> [in] X Coordinate of the ditto position.
 </dd>
    <dt><tt> iYposition</tt>
   <dd> [in] Y Coordinate of the ditto position.
 </dd>
    <dt><tt> ibUpdateVisu</tt>
   <dd> [in] If the boolean is true the visualiztion of the ditto is updated (Default mode)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="SetDittoRotation"></a><a name="SetDittoRotation(double,CATBoolean)"></a> <dt> o <b>SetDittoRotation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDittoRotation</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRotation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibUpdateVisu</tt><td><tt>=TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the angle of the ditto.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRotation</tt>
   <dd> [in] The angle of the ditto.
 </dd>
    <dt><tt> ibUpdateVisu</tt>
   <dd> [in] If the boolean is true the visualiztion of the ditto is updated (Default mode)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<a name="SetDittoScale"></a><a name="SetDittoScale(double,CATBoolean)"></a> <dt> o <b>SetDittoScale</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDittoScale</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iScale</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibUpdateVisu</tt><td><tt>=TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the ditto scale.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iScale</tt>
   <dd> [in] The scale applied to the ditto.
 </dd>
    <dt><tt> ibUpdateVisu</tt>
   <dd> [in] If the boolean is true the visualiztion of the ditto is updated (Default mode)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt> <dl>
 <dt><tt>S_OK</tt>    <dd>if the operation is successful.
 <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
 </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftDitto.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

