<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingUseItf Interface CATIDftGenerSpec</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingUseItf.htm" href="../DraftingUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIDftGenerSpec"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DraftingUseItf Interface CATIDftGenerSpec</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftGenerSpec_24764','CATIDftGenerSpec','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftGenerSpec</b>
</p>
<p>
<b><i> Interface to specialize a generative drawing view.</i></b><br>

 <b>Role</b>: This interface to add operator(s) to specialize a generative drawing view or to retrieve informations about the view specialization.
 <ul>
 <li>A generative drawing view may be specialized as a :
  <ul>
  <li><b>Detail view</b>: <script type="text/javascript"> activateLinkAnchor('','GetDetailProfile','GetDetailProfile') </script> to retrieve the detail view definition.  <li><b>Section or section cut view</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetSectionProfile','GetSectionProfile') </script> to retrieve the section view definition.    <li><b>Broken view</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetBreakViewInfo','GetBreakViewInfo') </script> to retrieve the break definition.  <li><b>Auxiliary view</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetProjectionProfile','GetProjectionProfile') </script> to retrieve the projection definition.   <li><b>All views</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetProjectionPlane','GetProjectionPlane') </script> to retrieve the projection plane definition.  <li><b>All views</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetPosition','GetPosition') </script> to retrieve the coordinates of the projection of the centre of the 3D bounding box.  <li><b>All views</b>: 
<script type="text/javascript"> activateLinkAnchor('','SetPosition','SetPosition') </script> to set the coordinates of the projection of the centre of the 3D bounding box.  <li><b>All views</b>: 
<script type="text/javascript"> activateLinkAnchor('','GetGenViewLinks','GetGenViewLinks') </script> to retrieve the main links of the view.  </li>
  </ul>
 <p><b>Note 1</b>: A view can cumulate several of these types.
 For example, a view can be altogether a section view and a broken view.</p>
 
 </li>
 <li>The callout defining the view, for auxiliary, section, and detail views: 
<script type="text/javascript"> activateLinkAnchor('','GetOriginCallout','GetOriginCallout') </script> </li> </ul>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateAlone3DSpaceClipping(CATDft3DSpaceClippingType)"><b>CreateAlone3DSpaceClipping</b></a>(CATDft3DSpaceClippingType)
<dd>  Creates a 3D Space clipping object (clipping not defined by a 3D object).
 <dt> o 
    <a href="#Get3DSpaceClipping(CATOmbObjectInContext**)"><b>Get3DSpaceClipping</b></a>(CATOmbObjectInContext**)
<dd>  Gets the 3D object defining the 3D space clipping.
 <dt> o 
    <a href="#Get3DSpaceClippingType(CATDft3DSpaceClippingType&amp;)"><b>Get3DSpaceClippingType</b></a>(CATDft3DSpaceClippingType&amp;)
<dd>  Gets the 3D space clipping object type.
 <dt> o 
    <a href="#GetAxisSystem(CATOmbObjectInContext**)"><b>GetAxisSystem</b></a>(CATOmbObjectInContext**)
<dd>   GetAxisSystem.
 <dt> o 
    <a href="#GetBox3D(CATMathPoint*,CATMathPoint*,CATMathPoint*,CATMathPoint*)"><b>GetBox3D</b></a>(CATMathPoint*,CATMathPoint*,CATMathPoint*,CATMathPoint*)
<dd>  Retrieves box mathematical definition.
 <dt> o 
    <a href="#GetBox3DOptions(CATDrwGenBox3DType&amp;,CATDrwGenBox3DMode&amp;)"><b>GetBox3DOptions</b></a>(CATDrwGenBox3DType&amp;,CATDrwGenBox3DMode&amp;)
<dd>  Gets parameters on a box operator.
 <dt> o 
    <a href="#GetBreakViewInfo(CATMathVector2D&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)"><b>GetBreakViewInfo</b></a>(CATMathVector2D&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)
<dd>  Retrieves the BreakView definition in the drawing view.
 <dt> o 
    <a href="#GetDetailProfile(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)"><b>GetDetailProfile</b></a>(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)
<dd>  Returns geometric informations about profile for detail view.
 <dt> o 
    <a href="#GetExtendedObject(IID&amp;,IUnknown**)"><b>GetExtendedObject</b></a>(IID&amp;,IUnknown**)
<dd>   Get the extended object.
 <dt> o 
    <a href="#GetGVSName(CATUnicodeString&amp;)"><b>GetGVSName</b></a>(CATUnicodeString&amp;)
<dd>   GetGVSName.
 <dt> o 
    <a href="#GetGenViewLinks(CATIUnknownList**)"><b>GetGenViewLinks</b></a>(CATIUnknownList**)
<dd>   Ges links of the view.
 <dt> o 
    <a href="#GetGenViewLinks(IID&amp;,CATIUnknownList**)"><b>GetGenViewLinks</b></a>(IID&amp;,CATIUnknownList**)
<dd>   Ges links of the view.
 <dt> o 
    <a href="#GetGenViewProperties(CATDftGenViewProperties&amp;)"><b>GetGenViewProperties</b></a>(CATDftGenViewProperties&amp;)
<dd>   Gets View Properties.
 <dt> o 
    <a href="#GetNbBreakouts(int*)"><b>GetNbBreakouts</b></a>(int*)
<dd>   Gets the number of breakouts contained in the view.
 <dt> o 
    <a href="#GetNbBreaks(int*)"><b>GetNbBreaks</b></a>(int*)
<dd>   Gets the number of breaks contained in the view.
 <dt> o 
    <a href="#GetOriginCallout(CATIDrwCalloutAccess**)"><b>GetOriginCallout</b></a>(CATIDrwCalloutAccess**)
<dd>   Gets the callout defining the view.
 <dt> o 
    <a href="#GetPosition(double*,double*)"><b>GetPosition</b></a>(double*,double*)
<dd>   Gets the position.
 <dt> o 
    <a href="#GetProjectionPlane(CATMathPlane**)"><b>GetProjectionPlane</b></a>(CATMathPlane**)
<dd>   Gets the projection plane.
 <dt> o 
    <a href="#GetProjectionProfile(CATMathPoint[2],CATMathDirection&amp;)"><b>GetProjectionProfile</b></a>(CATMathPoint[2],CATMathDirection&amp;)
<dd>  Returns geometric informations about profile for auxiliary view.
 <dt> o 
    <a href="#GetSectionProfile(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)"><b>GetSectionProfile</b></a>(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)
<dd>  Retrieves the section definition in the drawing view.
 <dt> o 
    <a href="#IsClipped()"><b>IsClipped</b></a>()
<dd>  Checks if the view is a clipping view.
 <dt> o 
    <a href="#IsClippedByBox()"><b>IsClippedByBox</b></a>()
<dd>  Checks if the view contains a clipping box operator.
 <dt> o 
    <a href="#Remove3DSpaceClipping()"><b>Remove3DSpaceClipping</b></a>()
<dd>  Removes the 3D space clipping from the view.
 <dt> o 
    <a href="#RemoveGVS()"><b>RemoveGVS</b></a>()
<dd>   RemoveGVS.
 <dt> o 
    <a href="#Set3DSpaceClipping(CATOmbObjectInContext*)"><b>Set3DSpaceClipping</b></a>(CATOmbObjectInContext*)
<dd>  Creates or modifies a 3D Space clipping object (modify is 3D space clipping already existing).
 <dt> o 
    <a href="#SetAxisSystem(CATOmbObjectInContext*)"><b>SetAxisSystem</b></a>(CATOmbObjectInContext*)
<dd>   SetAxisSystem.
 <dt> o 
    <a href="#SetGVSName(CATUnicodeString)"><b>SetGVSName</b></a>(CATUnicodeString)
<dd>   SetGVSName.
 <dt> o 
    <a href="#SetPosition(double,double)"><b>SetPosition</b></a>(double,double)
<dd>   Sets the position.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateAlone3DSpaceClipping"></a><a name="CreateAlone3DSpaceClipping(CATDft3DSpaceClippingType)"></a> <dt> o <b>CreateAlone3DSpaceClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateAlone3DSpaceClipping</b>(<td><script type="text/javascript"> activateLink('CATDft3DSpaceClippingType','CATDft3DSpaceClippingType')</script> <td><tt>iSpaceClippingType</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 3D Space clipping object (clipping not defined by a 3D object).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSpaceClippingType</tt>
   <dd>   The type of the 3D Space Clipping to be added to the view.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the clipping is correctly created. 
 <br>E_FAIL : if the operation fails.
</dl>
</dl>
<a name="Get3DSpaceClipping"></a><a name="Get3DSpaceClipping(CATOmbObjectInContext**)"></a> <dt> o <b>Get3DSpaceClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get3DSpaceClipping</b>(<td><script type="text/javascript"> activateLink('CATOmbObjectInContext','CATOmbObjectInContext**')</script> <td><tt>o3DSpaceClippingObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the 3D object defining the 3D space clipping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> o3DSpaceClippingObject</tt>
   <dd> [out]  The link to the 3D object defining the Space Clipping.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   S_OK : if the clipping is correctly returned.
  <br>E_FAIL : if the operation fails.
</dl>
</dl>
<a name="Get3DSpaceClippingType"></a><a name="Get3DSpaceClippingType(CATDft3DSpaceClippingType&amp;)"></a> <dt> o <b>Get3DSpaceClippingType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get3DSpaceClippingType</b>(<td><script type="text/javascript"> activateLink('CATDft3DSpaceClippingType','CATDft3DSpaceClippingType&amp;')</script> <td><tt>oSpaceClippingType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the 3D space clipping object type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSpaceClippingType</tt>
   <dd> [out] Type of the 3D space clipping.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   S_OK : if the clipping type is correctly returned.
  <br>E_FAIL : if the operation fails.
</dl>
</dl>
<a name="GetAxisSystem"></a><a name="GetAxisSystem(CATOmbObjectInContext**)"></a> <dt> o <b>GetAxisSystem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAxisSystem</b>(<td><script type="text/javascript"> activateLink('CATOmbObjectInContext','CATOmbObjectInContext**')</script> <td><tt>oAxisSystemLink</tt>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  GetAxisSystem.
 Retrieves the axis system definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAxisSystemLink</tt>
   <dd> [out, CATBaseUnknown#Release]   The 3D pointed axis system. 

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the view is linked with a 3D axis system. 
 <br>E_INVALIDARG : if the arguments are incorrect.
 <br>E_FAIL : if the view is not linked with a 3D axis system.

</dl>
</dl>
<a name="GetBox3D"></a><a name="GetBox3D(CATMathPoint*,CATMathPoint*,CATMathPoint*,CATMathPoint*)"></a> <dt> o <b>GetBox3D</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBox3D</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint*')</script> <td><tt>oPointA</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint*')</script> <td><tt>oPointB</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint*')</script> <td><tt>oPointC</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint*')</script> <td><tt>oPointD</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves box mathematical definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPointA</tt>
   <dd>   The first point of the clipping box base.
 </dd>
    <dt><tt> oPointB</tt>
   <dd>   The second point of the clipping box base.
 </dd>
    <dt><tt> oPointC</tt>
   <dd>   The third point of the clipping box base.
 </dd>
    <dt><tt> oPointD</tt>
   <dd>   A point defining the depth of the clipping box.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if argument pointer NULL,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure occurred.
 </dl>
</dl>
</dl>
<a name="GetBox3DOptions"></a><a name="GetBox3DOptions(CATDrwGenBox3DType&amp;,CATDrwGenBox3DMode&amp;)"></a> <dt> o <b>GetBox3DOptions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBox3DOptions</b>(<td><script type="text/javascript"> activateLink('CATDrwGenBox3DType','CATDrwGenBox3DType&amp;')</script> <td><tt>oClippingType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDrwGenBox3DMode','CATDrwGenBox3DMode&amp;')</script> <td><tt>oClippingMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets parameters on a box operator.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oClippingType</tt>
   <dd> (box, slice or back clipping plane)   </dd>
    <dt><tt> oClippingMode</tt>
   <dd> ** NOT IMPLEMENTED **  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>if a box does not exist on the view
</dl>
</dl>
<a name="GetBreakViewInfo"></a><a name="GetBreakViewInfo(CATMathVector2D&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATLISTV(CATBaseUnknown_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)"></a> <dt> o <b>GetBreakViewInfo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBreakViewInfo</b>(<td><script type="text/javascript"> activateLink('CATMathVector2D','CATMathVector2D&amp;')</script> <td><tt>oVecDir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oListe1_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oListe2_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oTranslation1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oTranslation2</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the BreakView definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ovecdir</tt>
   <dd>  Direction of break
 </dd>
    <dt><tt> oliste1_skElem</tt>
   <dd>  A list of sketch elements which describe the shape of first BrokenLines
 </dd>
    <dt><tt> oliste2_skElem</tt>
   <dd>  A list of double sketch elements which describe the shape of second BrokenLines
 </dd>
    <dt><tt> otranslation1</tt>
   <dd>  A list of double which describe translation associated to the shape of first BrokenLines
 </dd>
    <dt><tt> otranslation2</tt>
   <dd>  A list of double which describe translation associated to the shape of second BrokenLines
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetDetailProfile"></a><a name="GetDetailProfile(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)"></a> <dt> o <b>GetDetailProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDetailProfile</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oIsCircular</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>oProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns geometric informations about profile for detail view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oIsCircular</tt>
   <dd>  oIsCircular is true means profile is only defined by a circle. 
 </dd>
    <dt><tt> oProfile</tt>
   <dd>  Profile defined by a list of points.  if Profile is circular, there only one point in the list to return
 cirlce center.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>  Radius of circle
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetExtendedObject"></a><a name="GetExtendedObject(IID&amp;,IUnknown**)"></a> <dt> o <b>GetExtendedObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetExtendedObject</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown**')</script> <td><tt>oObject</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Get the extended object.

 <br><b>Role</b>: This method retrieves the extended object.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIID</tt>
   <dd> [in]   The required interface.
 </dd>
    <dt><tt> oObject</tt>
   <dd> [out, CATBaseUnknown#Release]   The required object.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the object has been correctly retrieved.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetGVSName"></a><a name="GetGVSName(CATUnicodeString&amp;)"></a> <dt> o <b>GetGVSName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGVSName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oViewStyle</tt>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  GetGVSName.
 Retrieves the GVS name of the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oViewStyle</tt>
   <dd>   The GVS name. 

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the view properties are defined from a GVS. 
 <br>E_FAIL : if the view is not linked with a 3D axis system.

</dl>
</dl>
<a name="GetGenViewLinks"></a><a name="GetGenViewLinks(CATIUnknownList**)"></a> <dt> o <b>GetGenViewLinks</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGenViewLinks</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oListNewLinks</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Ges links of the view.

 <br><b>Role</b>: This method gives the list of 3D pointed elements.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListNewLinks</tt>
   <dd> [out, CATBaseUnknown#Release]   The list of 3D pointed elements. This list contains CATOmbObjectInContext objects.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if links have been correctly retrieved.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetGenViewLinks"></a><a name="GetGenViewLinks(IID&amp;,CATIUnknownList**)"></a> <dt> o <b>GetGenViewLinks</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGenViewLinks</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oListLinks</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Ges links of the view.

 <br><b>Role</b>: This method gives the list of 3D pointed elements.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIID</tt>
   <dd> [in]   The required interface.
 </dd>
    <dt><tt> oListLinks</tt>
   <dd> [out, CATBaseUnknown#Release]   The list of 3D pointed elements.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if links have been correctly retrieved.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetGenViewProperties"></a><a name="GetGenViewProperties(CATDftGenViewProperties&amp;)"></a> <dt> o <b>GetGenViewProperties</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGenViewProperties</b>(<td><script type="text/javascript"> activateLink('CATDftGenViewProperties','CATDftGenViewProperties&amp;')</script> <td><tt>oProperties</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets View Properties.

 <br><b>Role</b>: Retrieves the properties of a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProperties</tt>
   <dd> [out]   a CATDftGenViewProperties class containing the properties of the view.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if properties have been correctly retrieved.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetNbBreakouts"></a><a name="GetNbBreakouts(int*)"></a> <dt> o <b>GetNbBreakouts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNbBreakouts</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNumber</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the number of breakouts contained in the view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumber</tt>
   <dd> [out] the number of breakouts

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetNbBreaks"></a><a name="GetNbBreaks(int*)"></a> <dt> o <b>GetNbBreaks</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNbBreaks</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNumber</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the number of breaks contained in the view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumber</tt>
   <dd> [out] the number of breaks

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetOriginCallout"></a><a name="GetOriginCallout(CATIDrwCalloutAccess**)"></a> <dt> o <b>GetOriginCallout</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOriginCallout</b>(<td><script type="text/javascript"> activateLink('CATIDrwCalloutAccess','CATIDrwCalloutAccess**')</script> <td><tt>oCallout</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the callout defining the view.
 <br><b>Role</b>: Gets the callout defining the view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCallout[out,</tt>
   <dd> CATBaseUnknown#Release]    The callout defining the view.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetPosition"></a><a name="GetPosition(double*,double*)"></a> <dt> o <b>GetPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPosition</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oX</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oY</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the position.

 <br><b>Role</b>: This method gets the coordinates of the projection of the centre of the 3D bounding box.
   It is expressed with respect to the sheet coordinate system.  

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oX</tt>
   <dd> [out] 1st coordinate
 </dd>
    <dt><tt> oY</tt>
   <dd> [out] 2nd coordinate

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetProjectionPlane"></a><a name="GetProjectionPlane(CATMathPlane**)"></a> <dt> o <b>GetProjectionPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProjectionPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane**')</script> <td><tt>oPlane</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the projection plane.

 <br><b>Role</b>: This method gets the projection plane of the view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPlane</tt>
   <dd> [out, CATBaseUnknown#Release]   The projection plane

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="GetProjectionProfile"></a><a name="GetProjectionProfile(CATMathPoint[2],CATMathDirection&amp;)"></a> <dt> o <b>GetProjectionProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProjectionProfile</b>(<td><script type="text/javascript"> activateLink('CATMathPoint[2','CATMathPoint[2]')</script> <td><tt>oProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecpro</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns geometric informations about profile for auxiliary view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProfile</tt>
   <dd>  two points defining profile. 
 </dd>
    <dt><tt> oVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="GetSectionProfile"></a><a name="GetSectionProfile(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)"></a> <dt> o <b>GetSectionProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSectionProfile</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>oProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oDepli</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecpro</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the section definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProfil</tt>
   <dd>  List of CATMathPoint which contains the profile's points. 
 </dd>
    <dt><tt> oDepli</tt>
   <dd>  Defines if the section is offset or aligned. 0: offset, 1: aligned
 </dd>
    <dt><tt> oVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.
</dl>
</dl>
<a name="IsClipped"></a><a name="IsClipped()"></a> <dt> o <b>IsClipped</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClipped</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the view is a clipping view.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the view is clipped.
 <dt><tt>S_FALSE</tt> <dd>if the view is not clipped.
 <dt><tt>E_FAIL</tt> <dd>if the operation fails.
</dl>
</dl>
<a name="IsClippedByBox"></a><a name="IsClippedByBox()"></a> <dt> o <b>IsClippedByBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClippedByBox</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the view contains a clipping box operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the view contains a box operator.
 <dt><tt>S_FALSE</tt> <dd>if the view does not contain a box operator.
 <dt><tt>E_FAIL</tt> <dd>if the operation fails.
</dl>
</dl>
<a name="Remove3DSpaceClipping"></a><a name="Remove3DSpaceClipping()"></a> <dt> o <b>Remove3DSpaceClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Remove3DSpaceClipping</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes the 3D space clipping from the view.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   S_OK : if the clipping type is correctly remmoved.
  <br>E_FAIL : if the operation fails.
</dl>
</dl>
<a name="RemoveGVS"></a><a name="RemoveGVS()"></a> <dt> o <b>RemoveGVS</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveGVS</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  RemoveGVS.
 Removes the association between the GVS and the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the GVS is correctly removed from the view. 
 <br>E_FAIL : if the operation fails.

</dl>
</dl>
<a name="Set3DSpaceClipping"></a><a name="Set3DSpaceClipping(CATOmbObjectInContext*)"></a> <dt> o <b>Set3DSpaceClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set3DSpaceClipping</b>(<td><script type="text/javascript"> activateLink('CATOmbObjectInContext','CATOmbObjectInContext*')</script> <td><tt>i3DSpaceClippingObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates or modifies a 3D Space clipping object (modify is 3D space clipping already existing).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> i3DSpaceClippingObject</tt>
   <dd>  The link to the 3D object defining the Space Clipping.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   S_OK : if the clipping is correctly created or modified.
  <br>E_FAIL : if the operation fails.
</dl>
</dl>
<a name="SetAxisSystem"></a><a name="SetAxisSystem(CATOmbObjectInContext*)"></a> <dt> o <b>SetAxisSystem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAxisSystem</b>(<td><script type="text/javascript"> activateLink('CATOmbObjectInContext','CATOmbObjectInContext*')</script> <td><tt>iAxisSystemLink</tt>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  SetAxisSystem.
 Sets the axis system definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAxisSystemLink</tt>
   <dd> [in]   The 3D pointed axis system. 

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the view is correctly linked with a 3D axis system. 
 <br>E_INVALIDARG : if the arguments are incorrect.
 <br>E_FAIL : if the operation fails.

</dl>
</dl>
<a name="SetGVSName"></a><a name="SetGVSName(CATUnicodeString)"></a> <dt> o <b>SetGVSName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetGVSName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iViewStyle</tt>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  SetGVSName.
 Sets the GVS name of the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iViewStyle</tt>
   <dd>   The GVS name. 

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK : if the view is correctly associated to the GVS. 
 <br>E_FAIL : if the operation fails.

</dl>
</dl>
<a name="SetPosition"></a><a name="SetPosition(double,double)"></a> <dt> o <b>SetPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPosition</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the position.

 <br><b>Role</b>: This method sets the projection of the centre of the 3D bounding box.
   It is expressed with respect to the sheet coordinate system.  

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX</tt>
   <dd> [in]     1st coordinate
 </dd>
    <dt><tt> iY</tt>
   <dd> [in]     2nd coordinate

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the operation succeeded.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftGenerSpec.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

