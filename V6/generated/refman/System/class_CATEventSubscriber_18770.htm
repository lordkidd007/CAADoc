<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATEventSubscriber</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../System.htm" href="../System.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "System";	}
		function getCurrentObjectName() { 
 	return "CATEventSubscriber"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>System <script type="text/javascript" > writeClassCharacteristic(); </script> CATEventSubscriber</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATEventSubscriber_18770','CATEventSubscriber','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATEventSubscriber</b>
</p>
<p>
<b><i> Base class for event publishers and subscribers.</i></b><br>

 <b>Role</b>: Objects that publish events and objects
 that subscribe to published events can derive from CATEventSubscriber.
 Preferably, use the global methods to add and remove callbacks to event subscribers.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('AddCallback','','AddCallback') </script>, <script type="text/javascript"> activateLinkAnchor('RemoveCallback','','RemoveCallback') </script>, <script type="text/javascript"> activateLinkAnchor('RemoveSubscriberCallbacks','','RemoveSubscriberCallbacks') </script>, <script type="text/javascript"> activateLinkAnchor('RemoveCallbacksOn','','RemoveCallbacksOn') </script>, <script type="text/javascript"> activateLinkAnchor('DispatchCallbacks','','DispatchCallbacks') </script>, <script type="text/javascript"> activateLinkAnchor('GetDefaultCallbackManager','','GetDefaultCallbackManager') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATEventSubscriber()"><b>CATEventSubscriber</b></a>()
<dd>  Constructs an event subscriber.
 <dt> o 
    <a href="#~CATEventSubscriber()"><b>~CATEventSubscriber</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddCallback(CATBaseUnknown*,CATCallbackEvent,CATSubscriberMethod,CATSubscriberData)"><b>AddCallback</b></a>(CATBaseUnknown*,CATCallbackEvent,CATSubscriberMethod,CATSubscriberData)
<dd>  Adds a callback for a given event published by a given event publisher.
 <dt> o 
    <a href="#GetCallbackManager()"><b>GetCallbackManager</b></a>()
<dd>  Returns an event publisher's callback manager.
 <dt> o 
    <a href="#RemoveCallback(CATBaseUnknown*,CATCallback)"><b>RemoveCallback</b></a>(CATBaseUnknown*,CATCallback)
<dd>  Removes a callback with a given identifier from a given event publisher.
 <dt> o 
    <a href="#RemoveCallbacksOn(CATBaseUnknown*,CATCallbackEvent,CATSubscriberData)"><b>RemoveCallbacksOn</b></a>(CATBaseUnknown*,CATCallbackEvent,CATSubscriberData)
<dd>  Removes all the callbacks from a given event published by a given event publisher.
 <dt> o 
    <a href="#RemoveSubscriberCallbacks(CATBaseUnknown*)"><b>RemoveSubscriberCallbacks</b></a>(CATBaseUnknown*)
<dd>  Removes all the callbacks for all events published by a given event publisher.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATEventSubscriber"></a><a name="CATEventSubscriber()"></a> <dt> o <b>CATEventSubscriber</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATEventSubscriber</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an event subscriber.
</dl>
<a name="~CATEventSubscriber"></a><a name="~CATEventSubscriber()"></a> <dt> o <b>~CATEventSubscriber</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATEventSubscriber</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddCallback"></a><a name="AddCallback(CATBaseUnknown*,CATCallbackEvent,CATSubscriberMethod,CATSubscriberData)"></a> <dt> o <b>AddCallback</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallback','CATCallback')</script>  <b>AddCallback</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEventPublisher</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script> <td><tt>iPublishedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSubscriberMethod','CATSubscriberMethod')</script> <td><tt>iMethodToCall</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSubscriberData','CATSubscriberData')</script> <td><tt>iClientData</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds a callback for a given event published by a given event publisher.
 <br><b>Role</b>:
 The current event subscriber subscribes to a given event that is published
 by a given event publisher.
 Whenever this event is published by this event publisher,
 the method declared when subscribing is called, along with possible useful data.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEventPublisher</tt>
   <dd>   A pointer to the object that is expected to publish the event
 </dd>
    <dt><tt> iPublishedEvent</tt>
   <dd>   The event in question published by <tt>iEventPublisher</tt>
 </dd>
    <dt><tt> iMethodToCall</tt>
   <dd>   The subscriber's method to call whenever <tt>iEventPublisher</tt>
   publishes <tt>iPublishedEvent</tt>
 </dd>
    <dt><tt> iClientData</tt>
   <dd>   Useful data to pass as an argument of <tt>iMethodToCall</tt>.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The identifier of the created callback.
</dl>
</dl>
<a name="GetCallbackManager"></a><a name="GetCallbackManager()"></a> <dt> o <b>GetCallbackManager</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackManager','CATCallbackManager *')</script>  <b>GetCallbackManager</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns an event publisher's callback manager.
 <br><b>Warning</b>: Do not redefine this method.
</dl>
<a name="RemoveCallback"></a><a name="RemoveCallback(CATBaseUnknown*,CATCallback)"></a> <dt> o <b>RemoveCallback</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveCallback</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEventPublisher</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCallback','CATCallback')</script> <td><tt>iCallback</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Removes a callback with a given identifier from a given event publisher.
 <br><b>Role</b>:
 The current event subscriber resigns its subscription to a given event publisher
 made thanks to a given callback.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEventPublisher</tt>
   <dd>   A pointer to the object from which the callback <tt>iCallback</tt>
   is to be removed
 </dd>
    <dt><tt> iCallback</tt>
   <dd>   The identifier of the callback to remove.
   <br><b>Legal values</b>: This identifier was returned by
   the </dd>
<script type="text/javascript"> activateLinkAnchor('','AddCallback','AddCallback') </script> method.
</dl>
</dl>
</dl>
<a name="RemoveCallbacksOn"></a><a name="RemoveCallbacksOn(CATBaseUnknown*,CATCallbackEvent,CATSubscriberData)"></a> <dt> o <b>RemoveCallbacksOn</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveCallbacksOn</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEventPublisher</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script> <td><tt>iPublishedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSubscriberData','CATSubscriberData')</script> <td><tt>iClientData</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the callbacks from a given event published by a given event publisher.
 <br><b>Role</b>:
 The current event subscriber resigns its subscription to all the callbacks
 set for a given event published by a given event publisher, and
 with a given client data pointer.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEventPublisher</tt>
   <dd>   A pointer to the object from which the callback <tt>iCallback</tt>
   is to be removed
 </dd>
    <dt><tt> iPublishedEvent</tt>
   <dd>   The event in question published by <tt>iEventPublisher</tt>
 </dd>
    <dt><tt> iClientData</tt>
   <dd>   Useful data to pass as an argument of the method called</dd>
</dl>
</dl>
</dl>
<a name="RemoveSubscriberCallbacks"></a><a name="RemoveSubscriberCallbacks(CATBaseUnknown*)"></a> <dt> o <b>RemoveSubscriberCallbacks</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveSubscriberCallbacks</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEventPublisher</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the callbacks for all events published by a given event publisher.
 <br><b>Role</b>:
 The current event subscriber resigns its subscription to all the callbacks
 set for all the events published by a given event publisher.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEventPublisher</tt>
   <dd>   A pointer to the object from which all the callbacks are to 
   be removed.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATEventSubscriber.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

