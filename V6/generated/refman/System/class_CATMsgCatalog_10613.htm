<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATMsgCatalog</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../System.htm" href="../System.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "System";	}
		function getCurrentObjectName() { 
 	return "CATMsgCatalog"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>System <script type="text/javascript" > writeClassCharacteristic(); </script> CATMsgCatalog</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMsgCatalog_10613','CATMsgCatalog','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMsgCatalog</b>
</p>
<p>
<b><i> Message catalog class.</i></b><br>
 
 <b>Role</b>: Processing a message catalog file.
 A message catalog file contains parameterized messages (see <script type="text/javascript"> activateLinkAnchor('CATMsg','','CATMsg') </script> ). A message is a parameterized alphanumerical
 string which can be used for any alphanumerical item of 
 information, a warning, a help or error message, and whenever you need to display any text in a
 dialog window, such a the caption on a push button.</br>
 NLS (National Langage Support) is supported but, in the same way, a message catalog file should only
 contain strings which must be translated into other languages: otherwise, resource catalog files
 should be used (see 
<script type="text/javascript"> activateLinkAnchor('CATRscCatalog','','CATRscCatalog') </script> ).</br> A message catalog is built from a file that contains messages identified by a key.
 A message can be parameterized ie contains parameters you
 value at run-time. A parameter begins with /p or /P in the message text.</br>
 The following are examples of messages:
 <pre>
 Message1 = "This is a simple message.";
 Message2 = "This message includes the parameter /P1 that
             is valued by your application at run-time.";
 Message3 = "This is a", "compound ", "message.";
 Message4 = "You can use control characters such as
           \t or \n in your messages.";</pre>
 A message catalog file posess the .CATNls suffix and is retrieved from the folders specified by the
 CATMsgCatalogPath variable.
 The localized version of the message catalog is searched first. If it does not exist,
 the english version is taken.</br>
 Regarding the localized version, the language taken is the UI language. The UI language is determined the following way:
 <ul>
 <li>the Tools\Customize\Options\"User Interface Language" combo is read.</li>
 <li>in the case where this combo is set to the "Environment language" value (default), the thread language locale is taken (see,
 on Windows, the "Settings for the current user" frame of the "General" tab of the "Regional Options" panel of the Control Panel and,
 on Unix, the window locale)</li>
 <li>in the case where this combo is set to an explicit language, the given language is taken</li>
 </ul>
 Example: Suppose
 <ul>
 <li>we are on Windows</li>
 <li>the environment is Japanese</li>
 <li>the Tools\Customize\Options\"User Interface Language" combo is set to "Environment language (default)"</li>
 </ul>
 then, if the CATMsgCatalogPath variable is valued the following way:
 <pre>   CATMsgCatalogPath=C:\PersonalFolder;C:\Program Files\Dassault Systemes\B14</pre>
 CATIA will search the message catalog file into the following paths:
 <pre>   1 - C:\PersonalFolder\Japanese
   2 - C:\PersonalFolder
   3 - C:\Program Files\Dassault Systemes\B14\Japanese
   4 - C:\Program Files\Dassault Systemes\B14</pre>
 The character set for the message key characters is the following:
 <ul>
 <li>within the A - Z range</li>
 <li>within the a - z range</li>
 <li>within the 0 - 9 range</li>
 <li>PERIOD (.), SPACING UNDERSCORE (_), LEFT SQUARE BRACKET ([) and RIGHT SQUARE BRACKET (]) characters</li>
 </ul>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMsgCatalog()"><b>CATMsgCatalog</b></a>()
<dd>  Constructs a message catalog.
 <dt> o 
    <a href="#CATMsgCatalog(CATMsgCatalog&amp;)"><b>CATMsgCatalog</b></a>(CATMsgCatalog&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATMsgCatalog()"><b>~CATMsgCatalog</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BuildEnglishMessage(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;)"><b>BuildEnglishMessage</b></a>(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;)
<dd>  Computes an english alphanumeric message string.
 <dt> o 
    <a href="#BuildMessage(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;,CATString*)"><b>BuildMessage</b></a>(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;,CATString*)
<dd>  Computes an alphanumeric message string from an identified
 parameterized message of the catalog, given specified
 parameters values.
 <dt> o 
    <a href="#GetCatalogKeys(CATListValCATString*)"><b>GetCatalogKeys</b></a>(CATListValCATString*)
<dd>  Get the message catalog keys.
 <dt> o 
    <a href="#GetCatalogMsg(CATString&amp;,CATString*)"><b>GetCatalogMsg</b></a>(CATString&amp;,CATString*)
<dd>  Returns a message from the message catalog.
 <dt> o 
    <a href="#GetError()"><b>GetError</b></a>()
<dd>   Returns the first syntax error found.
 <dt> o 
    <a href="#LoadMsgCatalog(CATString&amp;,char*,CATString*)"><b>LoadMsgCatalog</b></a>(CATString&amp;,char*,CATString*)
<dd>  Loads a message catalog.
 <dt> o 
    <a href="#SubstituteCatalogMsg(CATString&amp;,CATMsg&amp;)"><b>SubstituteCatalogMsg</b></a>(CATString&amp;,CATMsg&amp;)
<dd>  Substitutes a message into an internalized message catalog.
 <dt> o 
    <a href="#operator =(CATMsgCatalog&amp;)"><b>operator =</b></a>(CATMsgCatalog&amp;)
<dd>  Assignment operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMsgCatalog"></a><a name="CATMsgCatalog()"></a> <dt> o <b>CATMsgCatalog</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMsgCatalog</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a message catalog.
</dl>
<a name="CATMsgCatalog"></a><a name="CATMsgCatalog(CATMsgCatalog&amp;)"></a> <dt> o <b>CATMsgCatalog</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMsgCatalog</b>(<td> const <script type="text/javascript"> activateLink('CATMsgCatalog','CATMsgCatalog&amp;')</script> <td><tt>iMsgCatalog</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.</br> <b>Caution</b>: This method should rarely be used, in most cases the use of 
 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> is enough. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMsgCatalog</tt>
   <dd>   The message catalog to copy</dd>
</dl>
</dl>
</dl>
<a name="~CATMsgCatalog"></a><a name="~CATMsgCatalog()"></a> <dt> o <b>~CATMsgCatalog</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATMsgCatalog</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="BuildEnglishMessage"></a><a name="BuildEnglishMessage(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;)"></a> <dt> o <b>BuildEnglishMessage</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString')</script>  <b>BuildEnglishMessage</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCatalogName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iMessageKey</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>iMsgParameters</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iParamNb</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDefaultMsg</tt><td><tt>=(char *)NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes an english alphanumeric message string.
 <br><b>Role</b>: Does the same thing as 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> , except that it takes the english version and not the UI language version. 
 <b>Caution</b>: This method should rarely be used, in most cases the use of 
 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> is enough. <p>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCatalogName</tt>
   <dd>   Name of the catalog containing the message
 </dd>
    <dt><tt> iMessageKey</tt>
   <dd>   Key of the message to be retrieved
 </dd>
    <dt><tt> iMsgParameters</tt>
   <dd>   Array giving to the method possible parameter values
   which the method will integrate into the parameterized
   message. 
 </dd>
    <dt><tt> iParamNb</tt>
   <dd>   Parameter value count
 </dd>
    <dt><tt> iDefaultMsg</tt>
   <dd>   Message to be used if a problem occured while
   accessing the message catalog file or the key.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The built message. If the execution gives the <tt>iDefaultMsg</tt> return value, debug the message catalog file
   using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which may return:   <ul>
   <li>Line %d Unexpected EOF !</li>
   <li>Line %d = expected, and '%d' found</li>
   <li>Line %d \" expected, and '%d' found</li>
   <li>Line %d  Expected , or ; not found</li>
   <li>File %s.CATNls has not read access</li>
   <li>File %s.CATNls not found</li>
   <li>Error while reading file : %s.CATNls</li>
   </ul>
</dl>
</dl>
<a name="BuildMessage"></a><a name="BuildMessage(CATString&amp;,CATString&amp;,CATUnicodeString*,int,CATUnicodeString&amp;,CATString*)"></a> <dt> o <b>BuildMessage</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString')</script>  <b>BuildMessage</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCatalogName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iMessageKey</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>iMsgParameters</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iParamNb</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDefaultMsg</tt><td><tt>=(char *)NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>iLanguage</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes an alphanumeric message string from an identified
 parameterized message of the catalog, given specified
 parameters values.
 <br><b>Role</b>: Computes a alphanumeric string from a 
 message from a message catalog using the catalog name, the 
 message key, the message parameters and (if needed) a default 
 NLS message.
 <p>
 Regarding messages, for most use, the <tt>GetResourceValueFromKey</tt> method 
 of the <tt>CATDialog</tt> class will be
 sufficient. We remind you also that Dialog Engine Acquisition Agents
 support messages without having to use any message service, just
 using the file and key name convention rules.
 <p>
 Anyway, sometimes (for combo values for example), you may need 
 to access to the messages from soft. You will then use this
 service.
 <p>
 The use of this service is as follows: call it at any moment
 you want during execution. You do not have to
 store the computed message for a future re-use. Effectively,
 this service is encapsulated. It takes into account the 
 following things:
 <ul>
 <li>If the catalog is not loaded, it does it (this 
 enables the calling code not to bother about the loading:
 it lets the managing of it to this service, the message
 catalog will be present into the memory only once,
 whatever the count of softwares using it.</li>
 <li>Otherwise, from the input message catalog identifier 
 (iCatalogName parameter, see below), the method find in its 
 own data the message catalog pointer, among the other 
 message catalog already loaded, through a method that 
 has its performances optimized: a hashtable. This technology 
 ensures there isn't any performance problem.</li>
 </ul>
 The only need for an application to factorize a given
 message the first time it computes it (storing it for future 
 uses), would be to make an optimized management of exceptions 
 that would occur during the message catalog loading: the 
 purpose beeing to mention the message catalog syntax errors
 only once. Such applications needs seldom occur.
 <p>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCatalogName</tt>
   <dd>   Name of the catalog containing the message, without the .CATNls suffix
 </dd>
    <dt><tt> iMessageKey</tt>
   <dd>   Key of the message to be retrieved
 </dd>
    <dt><tt> iMsgParameters</tt>
   <dd>   Array giving to the method possible parameter values
   which the method will integrate into the parameterized
   message. 
   The parameter value count should correspond to the message 
   parameter highest index (this is not exactly the parameter count: 
   the software authorizes parameter indices that are not
   consecutive, which would distinguish the message 
   parameters highest index from the parameter count).
   If the input parameter value count is not sufficient, a default 
   behaviour is foreseen: "?" characters are introduced into the
   computed output resource string. 
   NULL default value coresponds to no parameter values.
 </dd>
    <dt><tt> iParamNb</tt>
   <dd>   Parameter value count
 </dd>
    <dt><tt> iDefaultMsg</tt>
   <dd>   Message to be used if a problem occured while
   accessing the message catalog file or the key. You may, for
   example, put in this message an information about an
   access problem. 
   We suggest you to deliver a valid value to this parameter, so that,
   if an error occurs, a valid return value be delivered by
   the service. 
 </dd>
    <dt><tt> iLanguage</tt>
   <dd>   Language in which the message must be taken:
   <ul>
   <li>English</li>
   <li>French</li>
   <li>German</li>
   <li>Italian</li>
   <li>Japanese</li>
   <li>Korean</li>
   <li>Simplified_Chinese</li>
   </ul>
   NULL default value coresponds to the UI language (see above).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The built message. If the execution gives the <tt>iDefaultMsg</tt> return value, debug the message catalog file
   using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which may return:   <ul>
   <li>Line %d Unexpected EOF !</li>
   <li>Line %d = expected, and '%d' found</li>
   <li>Line %d \" expected, and '%d' found</li>
   <li>Line %d  Expected , or ; not found</li>
   <li>File %s.CATNls has not read access</li>
   <li>File %s.CATNls not found</li>
   <li>Error while reading file : %s.CATNls</li>
   </ul>
</dl>
</dl>
<a name="GetCatalogKeys"></a><a name="GetCatalogKeys(CATListValCATString*)"></a> <dt> o <b>GetCatalogKeys</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetCatalogKeys</b>(<td><script type="text/javascript"> activateLink('CATListValCATString','CATListValCATString*')</script> <td><tt>oKey</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the message catalog keys.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oKey</tt>
   <dd>   The key list.
 <br><b>Lifecycle rules deviation</b>: the caller must allocate the object and manage so that, in input,
 the oKey size be equal to zero. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The message catalog key count.
   <br><b>Legal values</b>: <tt>0</tt> if an error occured, or <tt>Other</tt> otherwise.</br>
   If the execution gives a <tt>0</tt> value, debug the message catalog file using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which   may return:</br>
   <ul>
   <li>Line %d Unexpected EOF !</li>
   <li>Line %d = expected, and '%d' found</li>
   <li>Line %d \" expected, and '%d' found</li>
   <li>Line %d  Expected , or ; not found</li>
   <li>File %s.CATNls has not read access</li>
   <li>File %s.CATNls not found</li>
   <li>Error while reading file : %s.CATNls</li>
   </ul>
</dl>
</dl>
<a name="GetCatalogMsg"></a><a name="GetCatalogMsg(CATString&amp;,CATString*)"></a> <dt> o <b>GetCatalogMsg</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMsg','const CATMsg')</script>  <b>GetCatalogMsg</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iMessageKey</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>iLanguage</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns a message from the message catalog.
 <br><b>Role</b>: Returns a message from a message catalog using the message key.</br>
 <b>Caution</b>: This method should rarely be used, in most cases the use of 
 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> is enough.  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessageKey</tt>
   <dd>    Key of the message to be returned
 </dd>
    <dt><tt> iLanguage</tt>
   <dd>   Language in which the message must be taken:
   <ul>
   <li>English</li>
   <li>French</li>
   <li>German</li>
   <li>Italian</li>
   <li>Japanese</li>
   <li>Korean</li>
   <li>Simplified_Chinese</li>
   </ul>
   NULL default value coresponds to the UI language (see above).
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The returned parameterized message. If an error occured the return value is an empty string.
    If the execution gives an empty string, debug the message catalog file using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which    may return:
    <ul>
    <li>Line %d Unexpected EOF !</li>
    <li>Line %d = expected, and '%d' found</li>
    <li>Line %d \" expected, and '%d' found</li>
    <li>Line %d  Expected , or ; not found</li>
    <li>File %s.CATNls has not read access</li>
    <li>File %s.CATNls not found</li>
    <li>Error while reading file : %s.CATNls</li>
    </ul>
</dl>
</dl>
<a name="GetError"></a><a name="GetError()"></a> <dt> o <b>GetError</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','const CATString')</script>  <b>GetError</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the first syntax error found.
 <br><b>Role</b>: Returns the first syntax error found after a call to 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> or 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','LoadMsgCatalog','CATMsgCatalog.LoadMsgCatalog') </script> .<br> <b>CAUTION</b>: Although this method is not static, the 
<script type="text/javascript"> activateLinkAnchor('CATString','','CATString') </script> returned does not depend from the 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','','CATMsgCatalog') </script> instance used.<br> See 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> and 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','LoadMsgCatalog','CATMsgCatalog.LoadMsgCatalog') </script> . 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    Error message. It may be:
 <ul>
 <li>File %s.CATNls has not read access</li>
 <li>File %s.CATNls not found</li>
 <li>Error while reading file : %s.CATNls</li>
 <li>Line %d Unexpected EOF !</li>
 <li>Line %d = expected, and '%d' found</li>
 <li>Line %d \" expected, and '%d' found</li>
 <li>Line %d  Expected , or ; not found</li>
 <li>GetCatalogMsg() called with a bad key format : '%d' can't be used in a key</li>
 <li>Key %s not defined.</li>
 </ul>
</dl>
</dl>
<a name="LoadMsgCatalog"></a><a name="LoadMsgCatalog(CATString&amp;,char*,CATString*)"></a> <dt> o <b>LoadMsgCatalog</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>LoadMsgCatalog</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCatalogMessageName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iPath</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>iLanguage</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Loads a message catalog.
 <br><b>Role</b>: Loads a message catalog  by means of its name and (if desired)
 of a path.</br>
 <b>Caution</b>: This method should rarely be used, in most cases the use of 
 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> is enough.  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCatalogMessageName</tt>
   <dd>    Name of the message catalog file, without the .CATNls suffix
  </dd>
    <dt><tt> iPath</tt>
   <dd>    Absolute path where the catalog message must be searched for.</br>
    The localized version of the message catalog is searched first. If it does not exist,
    the english version is taken.</br>
    Example:
    In a japanese Windows environment, if the iPath variable is valued the following way:
    <pre>      iPath="C:\PersonalFolder;C:\Program Files\Dassault Systemes\B14"</pre>
    then, CATIA search the message catalog file into the following paths:
    <pre>      1 - C:\PersonalFolder\Japanese
      2 - C:\PersonalFolder
      3 - C:\Program Files\Dassault Systemes\B14\Japanese
      4 - C:\Program Files\Dassault Systemes\B14</pre>
 <b>Caution</b>: This parameter should always be given a null value. Actually, the english version of a message catalog
 file should always be located at:<pre>    %CATInstallPath%\resources\msgcatalog</pre>
 Otherwise, the message catalog will not be taken into account by the following tools:
 <ul>
 <li>translation tools</li>
 <li>test message catalog generation tools</li>
 <li>the installation dialog regarding the language of the user interface files which must be installed</li>
 </ul>
 Consequently, a non-null value for iPath has no meaning.
 </dd>
    <dt><tt> iLanguage</tt>
   <dd>   Language in which the message must be taken:
   <ul>
   <li>English</li>
   <li>French</li>
   <li>German</li>
   <li>Italian</li>
   <li>Japanese</li>
   <li>Korean</li>
   <li>Simplified_Chinese</li>
   </ul>
   NULL default value coresponds to the UI language (see above).
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <br><b>Legal values</b>: <tt>0: False</tt> if an error occured, or <tt>1</tt> if the execution succeeded.</br>
   If the execution gives <tt>0</tt>, debug the message catalog file using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which may return:   <ul>
   <li>Line %d Unexpected EOF !</li>
   <li>Line %d = expected, and '%d' found</li>
   <li>Line %d \" expected, and '%d' found</li>
   <li>Line %d  Expected , or ; not found</li>
   <li>File %s.CATNls has not read access</li>
   <li>File %s.CATNls not found</li>
   <li>Error while reading file : %s.CATNls</li>
   </ul>
</dl>
</dl>
<a name="SubstituteCatalogMsg"></a><a name="SubstituteCatalogMsg(CATString&amp;,CATMsg&amp;)"></a> <dt> o <b>SubstituteCatalogMsg</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>SubstituteCatalogMsg</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iMessageKey</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMsg','CATMsg&amp;')</script> <td><tt>iReplacingMessage</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Substitutes a message into an internalized message catalog.
 <br><b>Role</b>: Substitutes a message into an internalized message catalog
 using the message key. This enable to use messages known only during execution
 into a CATStateCommand.
 <p>Example:</br>
 The MyApplicativeCommand.CATNls file contains:
 <pre>     MyApplicativeCommand.MessageSink="fake message";</pre>
 The MyApplicativeCommand::BuildGraph method will contain:
 <pre>     CATDialogState* MyState = NULL;
     CATMsgCatalog ApplicativeCommandCatalogMessage;
     CATString MessageKey = "MessageSink";
     CATUnicodeString StringOfTheMessageKnownDuringExecution = "message obtained during execution";
     ApplicativeCommandCatalogMessage.LoadMsgCatalog("MyApplicativeCommand");
     CATMsg MessageKnownDuringExecution(StringOfTheMessageKnownDuringExecution);
     ApplicativeCommandCatalogMessage.SubstituteCatalogMsg("MyApplicativeCommand.MessageSink", MessageKnownDuringExecution);
     MyState = AddDialogState(MessageKey);</pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessageKey</tt>
   <dd>   Key of the message to substitute
 </dd>
    <dt><tt> iReplacingMessage</tt>
   <dd>   The new message which must replace the current one
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>: <tt>0: False</tt> 
    if the substitution didn't succeed, or <tt>Other: True</tt> otherwise.</br> If the execution gives a <tt>0</tt>
    value, debug the message catalog file using 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','GetError','CATMsgCatalog.GetError') </script> , which may return:<br>    <ul>
    <li>Line %d Unexpected EOF !</li>
    <li>Line %d = expected, and '%d' found</li>
    <li>Line %d \" expected, and '%d' found</li>
    <li>Line %d  Expected , or ; not found</li>
    <li>File %s.CATNls has not read access</li>
    <li>File %s.CATNls not found</li>
    <li>Error while reading file : %s.CATNls</li>
    </ul>
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATMsgCatalog&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMsgCatalog','CATMsgCatalog &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATMsgCatalog','CATMsgCatalog&amp;')</script> <td><tt>iMsgCatalog</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator.</br>
 <b>Caution</b>: This method should rarely be used, in most cases the use of 
 
<script type="text/javascript"> activateLinkAnchor('CATMsgCatalog','BuildMessage','CATMsgCatalog.BuildMessage') </script> is enough. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMsgCatalog</tt>
   <dd>   Message catalog of the right part of the equality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Message catalog of the left part of the equality
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMsgCatalog.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

