<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AutomationInterfaces Class CATScriptUtilities</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../AutomationInterfaces.htm" href="../AutomationInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "AutomationInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATScriptUtilities"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>AutomationInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATScriptUtilities</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATScriptUtilities_37329','CATScriptUtilities','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATScriptUtilities</b>
</p>
<p>
<b><i> Class to provide utility functions which simplify the use
 of the scripting interfaces.</i></b><br>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ExecuteScriptV6(CATIAdpPLMIdentificator&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int)"><b>ExecuteScriptV6</b></a>(CATIAdpPLMIdentificator&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int)
<dd>  A short-cut method which runs a function written in a scripting language
 synchronously.
 <dt> o 
    <a href="#GetScriptErrorNotification()"><b>GetScriptErrorNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script raises an error.
 <dt> o 
    <a href="#GetScriptInterruptNotification()"><b>GetScriptInterruptNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script is interrupted.
 <dt> o 
    <a href="#GetScriptStartNotification()"><b>GetScriptStartNotification</b></a>()
<dd>  Returns the name of the event notification sent whenever a script begins its execution.
 <dt> o 
    <a href="#GetScriptStopNotification()"><b>GetScriptStopNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script stops its execution.
 <dt> o 
    <a href="#IsMacroPlayerOn()"><b>IsMacroPlayerOn</b></a>()
<dd>  Returns true if a macro is currently being replayed.
 <dt> o 
    <a href="#IsMacroRecorderOn()"><b>IsMacroRecorderOn</b></a>()
<dd>  Returns true if a macro is currently being recorded.
 <dt> o 
    <a href="#SetAutomationErrorMessage(CATUnicodeString&amp;)"><b>SetAutomationErrorMessage</b></a>(CATUnicodeString&amp;)
<dd>  Sets a custom error message which will be caught by
 the script engines and displayed in the UI as a
 replacement of the default error message ("The method XXX has failed").
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ExecuteScriptV6"></a><a name="ExecuteScriptV6(CATIAdpPLMIdentificator&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int)"></a> <dt> o <b>ExecuteScriptV6</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>ExecuteScriptV6</b>(<td><script type="text/javascript"> activateLink('CATIAdpPLMIdentificator','CATIAdpPLMIdentificator&amp;')</script> <td><tt>iPLMId</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CatScriptLibraryType','CatScriptLibraryType')</script> <td><tt>iType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iProgramName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVariant','CATVariant&amp;')</script> <td><tt>oResult</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFunctionName</tt><td><tt>= "CATMain"</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVariant','CATVariant*')</script> <td><tt>iParams</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iParamCount</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 A short-cut method which runs a function written in a scripting language
 synchronously. ExecuteScript will return only once the scripted function
 has finished running.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPLMId</tt>
   <dd> PLM identificator of a macro library, which can be retrieved from a database query.
 </dd>
    <dt><tt> iLibraryType</tt>
   <dd> The type of the library
 </dd>
    <dt><tt> iProgramName</tt>
   <dd> The name of the program in the library
 </dd>
    <dt><tt> oResult</tt>
   <dd> The value returned by the function (if any)
 </dd>
    <dt><tt> iFunctionName</tt>
   <dd> The name of the function to invoke
 </dd>
    <dt><tt> iParameters</tt>
   <dd> An C++ array of parameters for the function
 </dd>
    <dt><tt> iParamCount</tt>
   <dd> The size of the parameter array.</dd>
</dl>
</dl>
</dl>
<a name="GetScriptErrorNotification"></a><a name="GetScriptErrorNotification()"></a> <dt> o <b>GetScriptErrorNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptErrorNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script raises an error.
</dl>
<a name="GetScriptInterruptNotification"></a><a name="GetScriptInterruptNotification()"></a> <dt> o <b>GetScriptInterruptNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptInterruptNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script is interrupted.
</dl>
<a name="GetScriptStartNotification"></a><a name="GetScriptStartNotification()"></a> <dt> o <b>GetScriptStartNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptStartNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event notification sent whenever a script begins its execution.
</dl>
<a name="GetScriptStopNotification"></a><a name="GetScriptStopNotification()"></a> <dt> o <b>GetScriptStopNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptStopNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script stops its execution.
</dl>
<a name="IsMacroPlayerOn"></a><a name="IsMacroPlayerOn()"></a> <dt> o <b>IsMacroPlayerOn</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','CATBoolean __stdcall')</script>  <b>IsMacroPlayerOn</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns true if a macro is currently being replayed.
</dl>
<a name="IsMacroRecorderOn"></a><a name="IsMacroRecorderOn()"></a> <dt> o <b>IsMacroRecorderOn</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','CATBoolean __stdcall')</script>  <b>IsMacroRecorderOn</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns true if a macro is currently being recorded.
</dl>
<a name="SetAutomationErrorMessage"></a><a name="SetAutomationErrorMessage(CATUnicodeString&amp;)"></a> <dt> o <b>SetAutomationErrorMessage</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAutomationErrorMessage</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets a custom error message which will be caught by
 the script engines and displayed in the UI as a
 replacement of the default error message ("The method XXX has failed").
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> The error message to display</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATScriptUtilities.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAutoItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

