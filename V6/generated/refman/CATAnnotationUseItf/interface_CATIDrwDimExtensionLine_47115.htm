<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATAnnotationUseItf Interface CATIDrwDimExtensionLine</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATAnnotationUseItf.htm" href="../CATAnnotationUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATAnnotationUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIDrwDimExtensionLine"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATAnnotationUseItf Interface CATIDrwDimExtensionLine</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDrwDimExtensionLine_47115','CATIDrwDimExtensionLine','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDrwDimExtensionLine</b>
</p>
<p>
<b><i> Manages the dimension extension line.</i></b><br>

 <b>Role</b>: This interface manages all parameters linked to extension-line(s).</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddInterrupt(double [2],double [2],int)"><b>AddInterrupt</b></a>(double [2],double [2],int)
<dd>  Add an interrupt to an extension line.
 <dt> o 
    <a href="#GetExtLineVisibility(int&amp;,int&amp;)"><b>GetExtLineVisibility</b></a>(int&amp;,int&amp;)
<dd>  Gets extension line visibility.
 <dt> o 
    <a href="#GetGap()"><b>GetGap</b></a>()
<dd>  Gets gap.
 <dt> o 
    <a href="#GetGaps(double&amp;,double&amp;)"><b>GetGaps</b></a>(double&amp;,double&amp;)
<dd>  Gets gaps.
 <dt> o 
    <a href="#GetGraphicParameters(int&amp;,double&amp;)"><b>GetGraphicParameters</b></a>(int&amp;,double&amp;)
<dd>  Gets graphic parameters.
 <dt> o 
    <a href="#GetInterruptions(int&amp;,CATListOfDouble&amp;,int&amp;,CATListOfDouble&amp;)"><b>GetInterruptions</b></a>(int&amp;,CATListOfDouble&amp;,int&amp;,CATListOfDouble&amp;)
<dd>   Computes and gets the visible extension line interruptions.
 <dt> o 
    <a href="#GetOverRun()"><b>GetOverRun</b></a>()
<dd>  Gets overrun.
 <dt> o 
    <a href="#GetOverRuns(double&amp;,double&amp;)"><b>GetOverRuns</b></a>(double&amp;,double&amp;)
<dd>  Gets overruns.
 <dt> o 
    <a href="#GetPoints(double*,double*,double*)"><b>GetPoints</b></a>(double*,double*,double*)
<dd>  Gets extension line points.
 <dt> o 
    <a href="#HasInterruptions()"><b>HasInterruptions</b></a>()
<dd>   Test whether the extension lines have interruptions or not.
 <dt> o 
    <a href="#RemoveInterrupt(int,double*)"><b>RemoveInterrupt</b></a>(int,double*)
<dd>  Remove interruption on extension lines.
 <dt> o 
    <a href="#SetExtLineVisibility(int,int)"><b>SetExtLineVisibility</b></a>(int,int)
<dd>  Sets extension line visibility.
 <dt> o 
    <a href="#SetGap(double)"><b>SetGap</b></a>(double)
<dd>  Sets gap.
 <dt> o 
    <a href="#SetGaps(double,double)"><b>SetGaps</b></a>(double,double)
<dd>  Sets gaps.
 <dt> o 
    <a href="#SetGraphicParameters(int,double)"><b>SetGraphicParameters</b></a>(int,double)
<dd>  Sets graphic parameters.
 <dt> o 
    <a href="#SetOverRun(double)"><b>SetOverRun</b></a>(double)
<dd>  Sets overrun.
 <dt> o 
    <a href="#SetOverRuns(double,double)"><b>SetOverRuns</b></a>(double,double)
<dd>  Sets overruns.
 <dt> o 
    <a href="#SetPoints(double*,double*,double*)"><b>SetPoints</b></a>(double*,double*,double*)
<dd>  Sets extension line points.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddInterrupt"></a><a name="AddInterrupt(double [2],double [2],int)"></a> <dt> o <b>AddInterrupt</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddInterrupt</b>(<td><script type="text/javascript"> activateLink('double [2','double [2]')</script> <td><tt>iFirstIndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [2','double [2]')</script> <td><tt>iLastIndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iExtLine</tt><td><tt>= 3</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Add an interrupt to an extension line.
 The extension line which is interrupted is the nearest of
 the iFirstIndPoint. This point is reprojected when the dimension
 is modified.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstIndPoint</tt>
   <dd>    Defines the first point of the gap to create.
   </dd>
    <dt><tt> iLastIndPoint</tt>
   <dd>    Defines the second point of the gap to create.
   </dd>
    <dt><tt> iExtLine</tt>
   <dd>    Defines the ExtLine to interrupt.
    <br> 0 : Both
    <br> 1 : Left
    <br> 2 : Right
    <br> 3 : Nearest (default)
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK    if the interrupt is added.
    <br>E_FAIL  if the interrupt cannot be added.
</dl>
</dl>
<a name="GetExtLineVisibility"></a><a name="GetExtLineVisibility(int&amp;,int&amp;)"></a> <dt> o <b>GetExtLineVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetExtLineVisibility</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>left</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>right</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets extension line visibility.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> left</tt>
   <dd>    left extension line visibility (1=show, 0=hide).
   </dd>
    <dt><tt> right</tt>
   <dd>    right extension line visibility (1=show, 0=hide).</dd>
</dl>
</dl>
</dl>
<a name="GetGap"></a><a name="GetGap()"></a> <dt> o <b>GetGap</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetGap</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets gap.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Gap value.
</dl>
</dl>
<a name="GetGaps"></a><a name="GetGaps(double&amp;,double&amp;)"></a> <dt> o <b>GetGaps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetGaps</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>g1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>g2</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets gaps.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> g1</tt>
   <dd>    Extension line 1 gap.
   </dd>
    <dt><tt> g2</tt>
   <dd>    Extension line 2 gap.</dd>
</dl>
</dl>
</dl>
<a name="GetGraphicParameters"></a><a name="GetGraphicParameters(int&amp;,double&amp;)"></a> <dt> o <b>GetGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetGraphicParameters</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oColor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThickness</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oColor</tt>
   <dd>    Color.
   </dd>
    <dt><tt> oThickness</tt>
   <dd>    Thickness.</dd>
</dl>
</dl>
</dl>
<a name="GetInterruptions"></a><a name="GetInterruptions(int&amp;,CATListOfDouble&amp;,int&amp;,CATListOfDouble&amp;)"></a> <dt> o <b>GetInterruptions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInterruptions</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfInterruptionsOnFirst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oListOfInterruptionsOnFirst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfInterruptionsOnSecond</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oListOfInterruptionsOnSecond</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Computes and gets the visible extension line interruptions.

 <br><b>Role</b>: This method computes the interruptions of this DimExtensionLine.
   For each extension line, it gets the number of interruptions and the related points.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumberOfInterruptionsOnFirst</tt>
   <dd> [out]   The number of interruptions on the first extension line.
 </dd>
    <dt><tt> oListOfInterruptionsOnFirst</tt>
   <dd> [out]   The list of interruptions on the first extension line (oNumberOfInterruptionsOnFirst*4 sized).
   </dd>
</dl>
    <dt><tt> oNumberOfInterruptionsOnSecond</tt>
   <dd> [out]   The number of interruptions on the second extension line.
 </dd>
    <dt><tt> oListOfInterruptionsOnSecond</tt>
   <dd> [out]   The list of interruptions on the second extension line (oNumberOfInterruptionsOnSecond*4 sized).
   </dd>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok,
   <code>E_INVALIDARGS</code> if all preconditions were not fulfilled,
   <code>E_UNEXPECTED</code> if an unexpected error occured.

</dl>
</dl>
<a name="GetOverRun"></a><a name="GetOverRun()"></a> <dt> o <b>GetOverRun</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetOverRun</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets overrun.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Overrun value.
</dl>
</dl>
<a name="GetOverRuns"></a><a name="GetOverRuns(double&amp;,double&amp;)"></a> <dt> o <b>GetOverRuns</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetOverRuns</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>or1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>or2</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets overruns.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> or1</tt>
   <dd>    Extension line 1 overrun.
   </dd>
    <dt><tt> or2</tt>
   <dd>    Extension line 2 overrun.</dd>
</dl>
</dl>
</dl>
<a name="GetPoints"></a><a name="GetPoints(double*,double*,double*)"></a> <dt> o <b>GetPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPoints</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPtLdr1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPtLdr2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>center</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets extension line points.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtLdr1</tt>
   <dd>    First extension line point.
   </dd>
    <dt><tt> oPtLdr2</tt>
   <dd>    Second extension line point.
   </dd>
    <dt><tt> center</tt>
   <dd>    Center extension line point.
    <br>Value is NULL if not circular extension line.</dd>
</dl>
</dl>
</dl>
<a name="HasInterruptions"></a><a name="HasInterruptions()"></a> <dt> o <b>HasInterruptions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>HasInterruptions</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Test whether the extension lines have interruptions or not.

 <br><b>Role</b>: This method ask the model for presence of interruptions definition.
    Please note that the interruptions defined in the model can be invisible.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATBoolean   <code>TRUE</code> if an extension line has interruptions,
   <code>FALSE</code> if extention lines have no interruption.

</dl>
</dl>
<a name="RemoveInterrupt"></a><a name="RemoveInterrupt(int,double*)"></a> <dt> o <b>RemoveInterrupt</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveInterrupt</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iExtLine</tt><td><tt>= 0 </tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iIndicationPoint</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Remove interruption on extension lines.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iExtLine</tt>
   <dd>    0 : (default) erase all interruptions on all extension lines. 
    <br>1, 2 : erase all interruptions on the extension line 1 or 2.
    <br>3 : erase all interrupts on the nearest extension line.
   </dd>
    <dt><tt> iIndicationPoint</tt>
   <dd>    The point to compute the nearest extension line if iExtLine equals 3.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     S_OK    if the interrupt are deleted.
    <br>S_FALSE if there is no interrupt on the extension line.
    <br>E_FAIL  if another problem occurs. (if iExtLine=3 and iIndicationPoint=NULL for example)
</dl>
</dl>
<a name="SetExtLineVisibility"></a><a name="SetExtLineVisibility(int,int)"></a> <dt> o <b>SetExtLineVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetExtLineVisibility</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>left</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>right</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets extension line visibility.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> left</tt>
   <dd>    left extension line visibility (1=show, 0=hide).
   </dd>
    <dt><tt> right</tt>
   <dd>    right extension line visibility (1=show, 0=hide).</dd>
</dl>
</dl>
</dl>
<a name="SetGap"></a><a name="SetGap(double)"></a> <dt> o <b>SetGap</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGap</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>gap</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets gap.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> gap</tt>
   <dd>    Gap value.</dd>
</dl>
</dl>
</dl>
<a name="SetGaps"></a><a name="SetGaps(double,double)"></a> <dt> o <b>SetGaps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGaps</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>g1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>g2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets gaps.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> g1</tt>
   <dd>    Extension line 1 gap.
   </dd>
    <dt><tt> g2</tt>
   <dd>    Extension line 2 gap.</dd>
</dl>
</dl>
</dl>
<a name="SetGraphicParameters"></a><a name="SetGraphicParameters(int,double)"></a> <dt> o <b>SetGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGraphicParameters</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColor</tt>
   <dd>    Color.
   </dd>
    <dt><tt> iThickness</tt>
   <dd>    Thickness.</dd>
</dl>
</dl>
</dl>
<a name="SetOverRun"></a><a name="SetOverRun(double)"></a> <dt> o <b>SetOverRun</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOverRun</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>overRun</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets overrun.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> overRun</tt>
   <dd>    Overrun value.</dd>
</dl>
</dl>
</dl>
<a name="SetOverRuns"></a><a name="SetOverRuns(double,double)"></a> <dt> o <b>SetOverRuns</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOverRuns</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>or1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>or2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets overruns.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> or1</tt>
   <dd>    Extension line 1 overrun.
   </dd>
    <dt><tt> or2</tt>
   <dd>    Extension line 2 overrun.</dd>
</dl>
</dl>
</dl>
<a name="SetPoints"></a><a name="SetPoints(double*,double*,double*)"></a> <dt> o <b>SetPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPoints</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPtLdr1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPtLdr2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>center</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets extension line points.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtLdr1</tt>
   <dd>    First extension line point.
   </dd>
    <dt><tt> iPtLdr2</tt>
   <dd>    Second extension line point.
   </dd>
    <dt><tt> center</tt>
   <dd>    Center extension line point.
    <br>Default value is NULL.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDrwDimExtensionLine.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAnnotationUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

