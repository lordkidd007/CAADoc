<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPLMRequirementModelerItf Interface PLMIReqLinkableEntity</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VPLMRequirementModelerItf.htm" href="../VPLMRequirementModelerItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VPLMRequirementModelerItf";	}
		function getCurrentObjectName() { 
 	return "PLMIReqLinkableEntity"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VPLMRequirementModelerItf Interface PLMIReqLinkableEntity</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_PLMIReqLinkableEntity_56199','PLMIReqLinkableEntity','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>PLMIReqLinkableEntity</b>
</p>
<p>
<b><i> Interface to Retrieve non-structural Relations (see PLMIReqStructuralEntity), and Connections/Ports pointing to a Requirement-related object.</i></b><br>

 
 <b>Role</b>: The linkable entities are the Requirements and the Requirement Specifications.
 The non-structural relations allow to have a cross-DAG navigation (Direct Acyclic Graph) starting from the Requirements.
 <br>
 This allow to retrieve Derived Requirements created thru the refinement process,
 between a high level Requirements DAG and a detailled Requirements DAG. This is what we name R-R cross-DAG linking.
 <br>
 It will also be possible to retrieve the DAG of FLP implementors (Functions - Logical/Physical components),
 that will be created within downstream activities, and whose existence is justified by the Requirements they must implement.
 This is what we name R-FLP cross-DAG linking.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetNonStructuralEntitiesFromEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetNonStructuralEntitiesFromEntity</b></a>(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieve Requirements-Entities reached by non-structural relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "from" object.
 <dt> o 
    <a href="#GetNonStructuralEntitiesToEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetNonStructuralEntitiesToEntity</b></a>(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieve Requirements-Entities reached by non-structural relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "to" object.
 <dt> o 
    <a href="#GetNonStructuralRelationsFromEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetNonStructuralRelationsFromEntity</b></a>(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieve non-structural Requirements-Relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "from" object.
 <dt> o 
    <a href="#GetNonStructuralRelationsToEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetNonStructuralRelationsToEntity</b></a>(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieve non-structural Requirements-Relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "to" object.
 <dt> o 
    <a href="#GetPointingConnections(CATLISTV(CATBaseUnknown_var)&amp;)"><b>GetPointingConnections</b></a>(CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieve Connections pointing to the Requirement-related object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetNonStructuralEntitiesFromEntity"></a><a name="GetNonStructuralEntitiesFromEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetNonStructuralEntitiesFromEntity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNonStructuralEntitiesFromEntity</b>(<td><script type="text/javascript"> activateLink('PLMReqRelationClassification','PLMReqRelationClassification')</script> <td><tt>iClassif</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oEntities</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve Requirements-Entities reached by non-structural relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "from" object.
 <br>(R-R cross-DAG linking)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClassif</tt>
   <dd>	Classification of relations.
	<br><strong>Legal values</strong>:
	<tt>PLMReqRelationClassification_DerivedRequirement</tt> Derived relations are considered R-R cross-DAG
 </dd>
    <dt><tt> oEntities</tt>
   <dd>	list of entities pointed by the entity.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An HRESULT value.
  <br><strong>Legal Values</strong>:
  <dl>
  <dt>E_FAIL</dt><dd>if R-R cross-DAG linking is not valid on that kind of object</dd>
  <dt>S_OK</dt><dd>Otherwise</dd>
  </dl>
</dl>
</dl>
<a name="GetNonStructuralEntitiesToEntity"></a><a name="GetNonStructuralEntitiesToEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetNonStructuralEntitiesToEntity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNonStructuralEntitiesToEntity</b>(<td><script type="text/javascript"> activateLink('PLMReqRelationClassification','PLMReqRelationClassification')</script> <td><tt>iClassif</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oEntities</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve Requirements-Entities reached by non-structural relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "to" object.
 <br>(R-R cross-DAG linking)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClassif</tt>
   <dd>	Classification of relations.
	<br><strong>Legal values</strong>:
	<tt>PLMReqRelationClassification_DerivedRequirement</tt> Derived relations are considered R-R cross-DAG
 </dd>
    <dt><tt> oEntities</tt>
   <dd> list of entities pointing the entity. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An HRESULT value.
  <br><strong>Legal Values</strong>:
  <dl>
  <dt>E_FAIL</dt><dd>if R-R cross-DAG linking is not valid on that kind of object</dd>
  <dt>S_OK</dt><dd>Otherwise</dd>
  </dl>
</dl>
</dl>
<a name="GetNonStructuralRelationsFromEntity"></a><a name="GetNonStructuralRelationsFromEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetNonStructuralRelationsFromEntity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNonStructuralRelationsFromEntity</b>(<td><script type="text/javascript"> activateLink('PLMReqRelationClassification','PLMReqRelationClassification')</script> <td><tt>iClassif</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oRelations</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve non-structural Requirements-Relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "from" object.
 <br>(R-R cross-DAG linking)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClassif</tt>
   <dd>	Classification of relations.
	<br><strong>Legal values</strong>:
	<tt>PLMReqRelationClassification_DerivedRequirement</tt> Derived relations are considered R-R cross-DAG
 </dd>
    <dt><tt> oRelations</tt>
   <dd> list of relations where the entity is the pointing object. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An HRESULT value.
  <br><strong>Legal Values</strong>:
  <dl>
  <dt>E_FAIL</dt><dd>if R-R cross-DAG linking is not valid on that kind of object</dd>
  <dt>S_OK</dt><dd>Otherwise</dd>
  </dl>
</dl>
</dl>
<a name="GetNonStructuralRelationsToEntity"></a><a name="GetNonStructuralRelationsToEntity(PLMReqRelationClassification,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetNonStructuralRelationsToEntity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNonStructuralRelationsToEntity</b>(<td><script type="text/javascript"> activateLink('PLMReqRelationClassification','PLMReqRelationClassification')</script> <td><tt>iClassif</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oRelations</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve non-structural Requirements-Relations (see PLMIReqStructuralEntity) where the Requirement-related object is the "to" object.
 <br>(R-R cross-DAG linking)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClassif</tt>
   <dd>	Classification of relations.
	<br><strong>Legal values</strong>:
	<tt>PLMReqRelationClassification_DerivedRequirement</tt> Derived relations are considered R-R cross-DAG
 </dd>
    <dt><tt> oRelations</tt>
   <dd> list of relations where the entity is the pointed object. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An HRESULT value.
  <br><strong>Legal Values</strong>:
  <dl>
  <dt>E_FAIL</dt><dd>if R-R cross-DAG linking is not valid on that kind of object</dd>
  <dt>S_OK</dt><dd>Otherwise</dd>
  </dl>
</dl>
</dl>
<a name="GetPointingConnections"></a><a name="GetPointingConnections(CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>GetPointingConnections</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPointingConnections</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>oConnections</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieve Connections pointing to the Requirement-related object.
 <br>(R-FLP cross-DAG linking)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oConnections</tt>
   <dd> list of connections where the entity is the pointed object. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An HRESULT value.
  <br><strong>Legal Values</strong>:
  <dl>
  <dt>S_OK</dt><dd>Always</dd>
  </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>PLMIReqLinkableEntity.h</b><br>
If needed, your Imakefile.mk should include the module: <b>VPLMRequirementModelerItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

