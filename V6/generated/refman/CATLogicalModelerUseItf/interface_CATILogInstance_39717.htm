<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATLogicalModelerUseItf Interface CATILogInstance</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATLogicalModelerUseItf.htm" href="../CATLogicalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATLogicalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATILogInstance"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATLogicalModelerUseItf Interface CATILogInstance</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATILogInstance_39717','CATILogInstance','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATILogInstance</b>
</p>
<p>
<b><i> Interface designating a Logical Instance.</i></b><br>


 <br><b>Role</b>: This interface is implemented on logical instances.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Connect(CATILogPort*,CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)"><b>Connect</b></a>(CATILogPort*,CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)
<dd>  Connects two instances of logical systems together.
 <dt> o 
    <a href="#GetConnectedParentPorts(CATILogPort*,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"><b>GetConnectedParentPorts</b></a>(CATILogPort*,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)
<dd>  Retrieves the Logical Ports exposing at the upper level a specific port of this instance of logical system.
 <dt> o 
    <a href="#GetConnectedSiblingSystems(CATILogPort*,CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"><b>GetConnectedSiblingSystems</b></a>(CATILogPort*,CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)
<dd>  Retrieves the instances of sibling logical systems connected to this instance of logical system.
 <dt> o 
    <a href="#GetFather(CATILogReference*&amp;)"><b>GetFather</b></a>(CATILogReference*&amp;)
<dd>  Retrieves the Logical Reference which aggregates this Logical Instance.
 <dt> o 
    <a href="#GetReferenceInstanceOf(CATILogReference*&amp;)"><b>GetReferenceInstanceOf</b></a>(CATILogReference*&amp;)
<dd>  Retrieves the instanciated Logical Reference.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Connect"></a><a name="Connect(CATILogPort*,CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)"></a> <dt> o <b>Connect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Connect</b>(<td><script type="text/javascript"> activateLink('CATILogPort','CATILogPort*')</script> <td><tt>ipFromLogicalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATILogInstance','CATILogInstance*')</script> <td><tt>ipToLogicalInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATILogPort','CATILogPort*')</script> <td><tt>ipToLogicalPort</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATILogConnection','CATILogConnection*&amp;')</script> <td><tt>opLogicalConnection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Connects two instances of logical systems together.

  <br><b>Role</b>: This method connects this Logical Instance (through a specific Logical Port) to a Logical Instance 
 (through an other specific Logical Port) by creating a Logical Connection. <br>
  These two Logical Instances must be aggregated by the same Logical Reference. <br>
  It corresponds to the Sibling connectivity pattern.
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLConnectionCreationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFromLogicalPort</tt>
   <dd>      A Logical Port of the Logical Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipToLogicalInstance</tt>
   <dd>      The instance of logical system to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipToLogicalPort</tt>
   <dd>      The specific Logical Port (of the Logical Reference the previous provided instance comes from) to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ispType</tt>
   <dd>      The functional type. If the argument is NULL, the modeler type, RFLVPMLogicalConnection, is used as functional type. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of functional attributes values (of the logical connection to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  opLogicalConnection</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Logical Connection that connects the two instances of logical systems. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetConnectedParentPorts"></a><a name="GetConnectedParentPorts(CATILogPort*,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"></a> <dt> o <b>GetConnectedParentPorts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedParentPorts</b>(<td><script type="text/javascript"> activateLink('CATILogPort','CATILogPort*')</script> <td><tt>ipLogicalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogPort_var','CATListValCATILogPort_var&amp;')</script> <td><tt>oLConnectedLogicalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogConnection_var','CATListValCATILogConnection_var&amp;')</script> <td><tt>oLLogicalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Logical Ports exposing at the upper level a specific port of this instance of logical system.

  <br><b>Role</b>: This method retrieves the Logical Ports exposing a specified Logical Port of this Logical Instance. <br>
  The specified Logical Port must belong to the Logical Reference this Logical Instance comes from. <br>
  It corresponds to the Parent-Child connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipLogicalPort</tt>
   <dd>      A Logical Port of the Logical Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  oLConnectedLogicalPorts</tt>
   <dd>      A list of Logical Ports exposing the specified Logical Port of this Logical Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLLogicalConnections</tt>
   <dd>      A list of Logical Connections (related to the previous list of Logical Ports) materializing the link between the specified port of this instance and the Logical Ports of the upper logical system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds and the exposing port(s) (if exist(s)) is(are) retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetConnectedSiblingSystems"></a><a name="GetConnectedSiblingSystems(CATILogPort*,CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"></a> <dt> o <b>GetConnectedSiblingSystems</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedSiblingSystems</b>(<td><script type="text/javascript"> activateLink('CATILogPort','CATILogPort*')</script> <td><tt>ipLogicalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogInstance_var','CATListValCATILogInstance_var&amp;')</script> <td><tt>oLConnectedLogicalInstances</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogPort_var','CATListValCATILogPort_var&amp;')</script> <td><tt>oLConnectedLogicalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogConnection_var','CATListValCATILogConnection_var&amp;')</script> <td><tt>oLLogicalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instances of sibling logical systems connected to this instance of logical system.

  <br><b>Role</b>: This method, given this Logical Instance and a Logical Port retrieves the instances of logical systems (corresponding Logical Instances and Logical Ports) connected through Logical Connections. <br>
  The specified Logical Port must belong to the Logical Reference this Logical Instance comes from. <br>
  It corresponds to the Sibling connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipLogicalPort</tt>
   <dd>      A Logical Port of the Logical Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  oLConnectedLogicalInstances</tt>
   <dd>      A list of Logical Instances corresponding to the systems connected to this instance of logical system given the specified Logical Port. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLConnectedLogicalPorts</tt>
   <dd>      A list of Logical Ports (related to the previous list of Logical Instances) designating on which port is connnected this instance of logical system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLLogicalConnections</tt>
   <dd>      A list of Logical Connections (related to the previous list of logical instances) materializing the link between this instance of logical system and the other connected instances of logical system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds and the connected logical systems (if exist) are retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetFather"></a><a name="GetFather(CATILogReference*&amp;)"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFather</b>(<td><script type="text/javascript"> activateLink('CATILogReference','CATILogReference*&amp;')</script> <td><tt>opLogicalReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Logical Reference which aggregates this Logical Instance.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opLogicalReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The Logical Reference aggregating <tt>this</tt> Logical Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetReferenceInstanceOf"></a><a name="GetReferenceInstanceOf(CATILogReference*&amp;)"></a> <dt> o <b>GetReferenceInstanceOf</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferenceInstanceOf</b>(<td><script type="text/javascript"> activateLink('CATILogReference','CATILogReference*&amp;')</script> <td><tt>opLogicalReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instanciated Logical Reference.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opLogicalReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The instantiated Logical Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATILogInstance.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATLogicalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

