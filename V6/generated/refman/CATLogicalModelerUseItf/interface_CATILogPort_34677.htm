<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATLogicalModelerUseItf Interface CATILogPort</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATLogicalModelerUseItf.htm" href="../CATLogicalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATLogicalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATILogPort"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATLogicalModelerUseItf Interface CATILogPort</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATILogPort_34677','CATILogPort','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATILogPort</b>
</p>
<p>
<b><i> Interface designating a Logical Port and providing means to manage the Logical Port properties.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Connect(CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)"><b>Connect</b></a>(CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)
<dd>  Connects this Logical Port (of a logical system) to an instance of logical subsystem through a specific port.
 <dt> o 
    <a href="#GetConnectedSubSystems(CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"><b>GetConnectedSubSystems</b></a>(CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)
<dd>  Retrieves the instances of logical subsystems connected to this Logical Port.
 <dt> o 
    <a href="#GetDirection(PortDirection&amp;)"><b>GetDirection</b></a>(PortDirection&amp;)
<dd>  Retrieves the direction of this Logical Port.
 <dt> o 
    <a href="#GetParent(void**,IID&amp;)"><b>GetParent</b></a>(void**,IID&amp;)
<dd>  Retrieves the Logical Reference aggregating this Logical Port.
 <dt> o 
    <a href="#GetType(CATILogTypeReference*&amp;)"><b>GetType</b></a>(CATILogTypeReference*&amp;)
<dd>  Retrieves the Logical Type Reference associated to this Logical Port.
 <dt> o 
    <a href="#GetTypeInstance(CATILogTypeInstance*&amp;)"><b>GetTypeInstance</b></a>(CATILogTypeInstance*&amp;)
<dd>  Retrieves the Logical Type Instance associated to this Logical Port.
 <dt> o 
    <a href="#RemoveType()"><b>RemoveType</b></a>()
<dd>  Removes the Logical Type associated to this Logical Port.
 <dt> o 
    <a href="#SetDirection(PortDirection)"><b>SetDirection</b></a>(PortDirection)
<dd>  Sets the direction of this Logical Port.
 <dt> o 
    <a href="#SetType(CATILogTypeReference*)"><b>SetType</b></a>(CATILogTypeReference*)
<dd>  Sets the Logical Type associated to this Logical Port.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#PortDirection"><b>PortDirection</b></a>
<dd>  Defines the direction of a Logical Port.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Connect"></a><a name="Connect(CATILogInstance*,CATILogPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATILogConnection*&amp;)"></a> <dt> o <b>Connect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Connect</b>(<td><script type="text/javascript"> activateLink('CATILogInstance','CATILogInstance*')</script> <td><tt>ipLogicalInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATILogPort','CATILogPort*')</script> <td><tt>ipLogicalPort</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATILogConnection','CATILogConnection*&amp;')</script> <td><tt>opLogicalConnection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Connects this Logical Port (of a logical system) to an instance of logical subsystem through a specific port.

  <br><b>Role</b>: This method connects this Logical Port to a Logical Instance through a specific Logical Port
  (of a Logical Reference the instance comes from) by creating a Logical Connection. The Logical Instance must be aggregated by the Logical Reference
  this Logical Port belongs. <br>
  It corresponds to the Parent-Child connectivity pattern.
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLConnectionCreationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipLogicalInstance</tt>
   <dd>      The instance of logical subsystem to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipLogicalPort</tt>
   <dd>      The specific Logical Port of Logical Reference (the previous provided instance comes from) to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ispType</tt>
   <dd>      The functional type. If the argument is NULL, the modeler type, RFLVPMLogicalConnection, is used as functional type. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of functional attributes values (of the logical connection to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  opLogicalConnection</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Logical Connection. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 
</dl>
</dl>
<a name="GetConnectedSubSystems"></a><a name="GetConnectedSubSystems(CATListValCATILogInstance_var&amp;,CATListValCATILogPort_var&amp;,CATListValCATILogConnection_var&amp;)"></a> <dt> o <b>GetConnectedSubSystems</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedSubSystems</b>(<td><script type="text/javascript"> activateLink('CATListValCATILogInstance_var','CATListValCATILogInstance_var&amp;')</script> <td><tt>oLConnectedLogicalInstances</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogPort_var','CATListValCATILogPort_var&amp;')</script> <td><tt>oLConnectedLogicalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATILogConnection_var','CATListValCATILogConnection_var&amp;')</script> <td><tt>oLLogicalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instances of logical subsystems connected to this Logical Port.

  <br><b>Role</b>: This method retrieves the Logical Instances (and the specific Logical Ports) connected to this Logical Port
  through Logical Connections. <br>
  It corresponds to the Parent-Child connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oLConnectedLogicalInstances</tt>
   <dd>      A list of Logical Instances of systems connected to this Logical Port. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLConnectedLogicalPorts</tt>
   <dd>      A list of Logical Ports (related to the previous list of Logical Instances). <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLLogicalConnections</tt>
   <dd>      A list of Logical Connections (related to the previous list of Logical Instances) metarializing the link between this Logical Port and the connected instances of logical systems. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds and the exposed logical systems (if exist) are retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetDirection"></a><a name="GetDirection(PortDirection&amp;)"></a> <dt> o <b>GetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDirection</b>(<td><script type="text/javascript"> activateLink('PortDirection','PortDirection&amp;')</script> <td><tt>oDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the direction of this Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oDirection</tt>
   <dd>      The Logical Port direction. <br>
      Output parameter. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetParent"></a><a name="GetParent(void**,IID&amp;)"></a> <dt> o <b>GetParent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParent</b>(<td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oppParent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATILogReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Logical Reference aggregating this Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oppParent</tt>
   <dd>      A Logical Reference or a Logical Mux/Demux Reference. <br>
      Output parameter. <br>
  </dd>
    <dt><tt>  iIID</tt>
   <dd>      The desired interface. CATILogReference by default. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetType"></a><a name="GetType(CATILogTypeReference*&amp;)"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetType</b>(<td><script type="text/javascript"> activateLink('CATILogTypeReference','CATILogTypeReference*&amp;')</script> <td><tt>opLogicalTypeReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Logical Type Reference associated to this Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opLogicalTypeReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      A Logical Type Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. opLogicalTypeReference may be NULL if there is no associated type.<br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetTypeInstance"></a><a name="GetTypeInstance(CATILogTypeInstance*&amp;)"></a> <dt> o <b>GetTypeInstance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetTypeInstance</b>(<td><script type="text/javascript"> activateLink('CATILogTypeInstance','CATILogTypeInstance*&amp;')</script> <td><tt>opLogicalTypeInstance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Logical Type Instance associated to this Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opLogicalTypeInstance</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      A Logical Type Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. opLogicalTypeInstance may be NULL if there is no associated type.<br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="RemoveType"></a><a name="RemoveType()"></a> <dt> o <b>RemoveType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes the Logical Type associated to this Logical Port.

  
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds and the associated Logical Type if exists has been removed.<br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="SetDirection"></a><a name="SetDirection(PortDirection)"></a> <dt> o <b>SetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDirection</b>(<td><script type="text/javascript"> activateLink('PortDirection','PortDirection')</script> <td><tt>iDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the direction of this Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iDirection</tt>
   <dd>      The new Logical Port direction. <br>
      Input parameter. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="SetType"></a><a name="SetType(CATILogTypeReference*)"></a> <dt> o <b>SetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetType</b>(<td><script type="text/javascript"> activateLink('CATILogTypeReference','CATILogTypeReference*')</script> <td><tt>ipLogicalTypeReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the Logical Type associated to this Logical Port.

 <br><b>Role</b>: This method associates the given Logical Type Reference by instantiating it and associating it to the Logical Port. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLTypeAssociationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipLogicalTypeReference</tt>
   <dd>      A Logical Type Reference. <br>
      Input parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="PortDirection"> <dt> o <b>PortDirection</b>
<dl>
  <dd>
<pre>
enum <b>PortDirection</b> {
  In,
  Out,
  InOut,
  NoDirection
}
</pre>
 Defines the direction of a Logical Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  In</tt>
   <dd>      Port In.
  </dd>
    <dt><tt>  Out</tt>
   <dd>      Port Out.
  </dd>
    <dt><tt>  InOut</tt>
   <dd>      Port In/Out
  </dd>
    <dt><tt> NoDirection</tt>
   <dd>      No direction defined yet.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATILogPort.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATLogicalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

