<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMModelInterfaces Class CATCGMTessPointIter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMModelInterfaces.htm" href="../GMModelInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMModelInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATCGMTessPointIter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMModelInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATCGMTessPointIter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCGMTessPointIter_32473','CATCGMTessPointIter','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCGMTessPointIter</b>
</p>
<p>
<b><i> Class defining the iterator on the points resulting from a Tessellation operator.</i></b><br>

 <br> Such iterator is directly created by the <script type="text/javascript"> activateLinkAnchor('CATICGMBodyTessellator','GetFace','CATICGMBodyTessellator.GetFace') </script> or 
<script type="text/javascript"> activateLinkAnchor('CATICGMCellTessellator','GetFace','CATICGMCellTessellator.GetFace') </script> methods. Its deletion is managed at the CATICGMBodyTessellator and CATICGMCellTessellator deletion. 
 Use it according to the following scheme:
 <ul>
 <li> Retrieve the number of points 
 <li> Go the next result
 <li> Retrieve the result
 <li> Optionally, reset to begin again.
 </ul>
 <p> This class also allows you to directly retrieve the results in an array that 
 you have to allocate and deallocate after use.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATCGMTessPointIter()"><b>~CATCGMTessPointIter</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetNbPoint()"><b>GetNbPoint</b></a>()
<dd>  Returns the number of computed points.
 <dt> o 
    <a href="#GetPointNor(CATMathVector const*&amp;)"><b>GetPointNor</b></a>(CATMathVector const*&amp;)
<dd>  Retrieves a pointer to the normal at the current point.
 <dt> o 
    <a href="#GetPointNorAll(float[][3])"><b>GetPointNorAll</b></a>(float[][3])
<dd>  Globally retrieves the normal at each point.
 <dt> o 
    <a href="#GetPointNu()"><b>GetPointNu</b></a>()
<dd>  Returns the rank of the current point.
 <dt> o 
    <a href="#GetPointUv()"><b>GetPointUv</b></a>()
<dd>  Returns the parameters of the current point (in case of a face or a surface).
 <dt> o 
    <a href="#GetPointUvAll(float[][2])"><b>GetPointUvAll</b></a>(float[][2])
<dd>  Globally retrieves the parameters of all the points (in case of a face or a surface).
 <dt> o 
    <a href="#GetPointXyz()"><b>GetPointXyz</b></a>()
<dd>  Returns the Cartesian coordinates of the current point.
 <dt> o 
    <a href="#GetPointXyzAll(float[][3])"><b>GetPointXyzAll</b></a>(float[][3])
<dd>  Globally retrieves the Cartesian coordinates of all the points.
 <dt> o 
    <a href="#GoToNext()"><b>GoToNext</b></a>()
<dd>  Skips to the next point.
 <dt> o 
    <a href="#IsExhausted()"><b>IsExhausted</b></a>()
<dd>  Tests whether the list is completed.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Resets the iterator to the beginning.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATCGMTessPointIter"></a><a name="~CATCGMTessPointIter()"></a> <dt> o <b>~CATCGMTessPointIter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATCGMTessPointIter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetNbPoint"></a><a name="GetNbPoint()"></a> <dt> o <b>GetNbPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetNbPoint</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of computed points.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of computed points.
</dl>
</dl>
<a name="GetPointNor"></a><a name="GetPointNor(CATMathVector const*&amp;)"></a> <dt> o <b>GetPointNor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>GetPointNor</b>(<td><script type="text/javascript"> activateLink('CATMathVector const','CATMathVector const*&amp;')</script> <td><tt>oNor</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a pointer to the normal at the current point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNor</tt>
   <dd> The pointer to the normal.</dd>
</dl>
</dl>
</dl>
<a name="GetPointNorAll"></a><a name="GetPointNorAll(float[][3])"></a> <dt> o <b>GetPointNorAll</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPointNorAll</b>(<td><script type="text/javascript"> activateLink('float[][3','float[][3]')</script> <td><tt>iNormals</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Globally retrieves the normal at each point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNormals[][3]</tt>
   <dd> The array of the coordinates. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetPointNu"></a><a name="GetPointNu()"></a> <dt> o <b>GetPointNu</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetPointNu</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the rank of the current point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The rank of the current point.
</dl>
</dl>
<a name="GetPointUv"></a><a name="GetPointUv()"></a> <dt> o <b>GetPointUv</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('const','double const *')</script>  <b>GetPointUv</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the parameters of the current point (in case of a face or a surface).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The array of parameters.
</dl>
</dl>
<a name="GetPointUvAll"></a><a name="GetPointUvAll(float[][2])"></a> <dt> o <b>GetPointUvAll</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPointUvAll</b>(<td><script type="text/javascript"> activateLink('float[][2','float[][2]')</script> <td><tt>iUv</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Globally retrieves the parameters of all the points (in case of a face or a surface).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUv[][2]</tt>
   <dd> The array of the parameters. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GetPointXyz"></a><a name="GetPointXyz()"></a> <dt> o <b>GetPointXyz</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('const','double const *')</script>  <b>GetPointXyz</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the Cartesian coordinates of the current point.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The array of the Cartesian coordinates.
</dl>
</dl>
<a name="GetPointXyzAll"></a><a name="GetPointXyzAll(float[][3])"></a> <dt> o <b>GetPointXyzAll</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPointXyzAll</b>(<td><script type="text/javascript"> activateLink('float[][3','float[][3]')</script> <td><tt>iCoordinates</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Globally retrieves the Cartesian coordinates of all the points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCoordinates[][3]</tt>
   <dd> The array of the coordinates. The allocation has to be managed by
 the caller: use </tt>GetNbPoint</tt> for its dimension.</dd>
</dl>
</dl>
</dl>
<a name="GoToNext"></a><a name="GoToNext()"></a> <dt> o <b>GoToNext</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GoToNext</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Skips to the next point.
</dl>
<a name="IsExhausted"></a><a name="IsExhausted()"></a> <dt> o <b>IsExhausted</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>IsExhausted</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether the list is completed.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>: <tt>1</tt> if the list is completed, <tt>0</tt> otherwise.
</dl>
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Reset</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Resets the iterator to the beginning.
</dl>
<hr>
 This object is included in the file: <b>CATCGMTessPointIter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMModelInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

