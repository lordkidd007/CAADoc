<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMModelInterfaces Class CATCGMDiagnosis</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMModelInterfaces.htm" href="../GMModelInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMModelInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATCGMDiagnosis"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMModelInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATCGMDiagnosis</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCGMDiagnosis_25774','CATCGMDiagnosis','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCGMDiagnosis</b>
</p>
<p>
<b><i> Class for the management of the diagnosis raised during a topological operation.</i></b><br>

 A diagnosis is an error that also retrieves two lists of body pointers: 
 <ul>
 <li>The list of the pointers to the created bodies defining the topological location of the error
 <li>The list of the pointers to the created bodies defining the topological neighborhood of the error.
 </ul>
 The bodies must be removed from the factory after use. Only valid bodies are pointed to. 
 If the method <tt>GetLocation</tt> is not called, the bodies are deleted at the CATCGMDiagnosis deletion.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATCGMDiagnosis()"><b>~CATCGMDiagnosis</b></a>()
<dd>  Declares that the class CATCGMDiagnosis is an error class which derives
 from CATTopOpInError.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Contains(CATBody*,CATCGMDiagnosis::CATListType&amp;)"><b>Contains</b></a>(CATBody*,CATCGMDiagnosis::CATListType&amp;)
<dd>  Tests whether a body is referenced inside one of the lists of <tt>this</tt> diagnosis.
 <dt> o 
    <a href="#GetLocation(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"><b>GetLocation</b></a>(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)
<dd>  Retrieves the topological location of <tt>this</tt> error.
 <dt> o 
    <a href="#GetLocationWithInputBodies(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"><b>GetLocationWithInputBodies</b></a>(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)
<dd>  Retrieves the topological location of <tt>this</tt> error.
 <dt> o 
    <a href="#IsEmpty(CATBoolean&amp;)"><b>IsEmpty</b></a>(CATBoolean&amp;)
<dd>  Tests whether <tt>this</tt> diagnosis references bodies.
 <dt> o 
    <a href="#SetLocation(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"><b>SetLocation</b></a>(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)
<dd>  Sets the topological location of <tt>this</tt> error.
 <dt> o 
    <a href="#SetLocationWithInputBodies(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"><b>SetLocationWithInputBodies</b></a>(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)
<dd>  Sets the topological location of <tt>this</tt> error.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATListType"><b>CATListType</b></a>
<dd>  Defines the list types.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATCGMDiagnosis"></a><a name="~CATCGMDiagnosis()"></a> <dt> o <b>~CATCGMDiagnosis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATCGMDiagnosis</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Declares that the class CATCGMDiagnosis is an error class which derives
 from CATTopOpInError.
</dl>
 <h2>Methods</h2> <br>
<a name="Contains"></a><a name="Contains(CATBody*,CATCGMDiagnosis::CATListType&amp;)"></a> <dt> o <b>Contains</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Contains</b>(<td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iBodyToTest</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCGMDiagnosis::CATListType','CATCGMDiagnosis::CATListType&amp;')</script> <td><tt>ioListType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Tests whether a body is referenced inside one of the lists of <tt>this</tt> diagnosis.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBodyTest</tt>
   <dd> The pointer to the body to test.
 </dd>
    <dt><tt> ioListType</tt>
   <dd> The list inside which the body is referenced.</dd>
</dl>
</dl>
</dl>
<a name="GetLocation"></a><a name="GetLocation(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"></a> <dt> o <b>GetLocation</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetLocation</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>ioLocationList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>ioContextList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iReadOnly</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the topological location of <tt>this</tt> error.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioLocationList</tt>
   <dd> The list of the pointers to the bodies defining the location of the error. Once read,
 the bodies of the list must be managed by the caller. 
 In particular, they must be removed (</dd>
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> ) after use by the caller. However, if the method <tt>GetLocation</tt> is not called, 
 the <tt>CATCGMDiagnosis</tt> destructor removes them.
 
    <dt><tt> ioContextList</tt>
   <dd> The list of the pointers to the bodies defining the topological neighborhood of the error. Once read,
 the bodies of the list must be managed by the caller. 
 In particular, they must be removed (</dd>
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> ) after use by the caller. However, if the method <tt>GetLocation</tt> is not called, 
 the <tt>CATCGMDiagnosis</tt> destructor removes them.
 
    <dt><tt> iReadOnly</tt>
   <dd> Dedicated to the case where you just want to read.
 <br><b>Legal values</b>:
 <tt>FALSE</tt> if the bodies of the list must be managed by the caller (default mode),
 <tt>TRUE</tt> otherwise.</dd>
</dl>
</dl>
</dl>
<a name="GetLocationWithInputBodies"></a><a name="GetLocationWithInputBodies(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"></a> <dt> o <b>GetLocationWithInputBodies</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetLocationWithInputBodies</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>ioLocationList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>ioInputList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>ioContextList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iReadOnly</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the topological location of <tt>this</tt> error.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioLocationList</tt>
   <dd> The list of the pointers to the bodies defining the location of the error. Once read,
 the bodies of the list must be managed by the caller. 
 In particular, they must be removed (</dd>
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> ) after use by the caller. However, if the method <tt>GetLocation</tt> is not called, 
 the <tt>CATCGMDiagnosis</tt> destructor removes them.
 
    <dt><tt> ioInputList</tt>
   <dd> The list of the input bodies containing the cells of the location bodies, if it was specified.
 If input list was specified during diagnosis creation, it has the same size as <tt>ioLocationList</tt>.
 The n-th body of <tt>ioLocationList</tt> is associated to the n-th body of <tt>ioInputList</tt>.
 If the input list was not specified, this list is empty.
 </dd>
    <dt><tt> ioContextList</tt>
   <dd> The list of the pointers to the bodies defining the topological neighborhood of the error. Once read,
 the bodies of the list must be managed by the caller. 
 In particular, they must be removed (</dd>
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> ) after use by the caller. However, if the method <tt>GetLocation</tt> is not called, 
 the <tt>CATCGMDiagnosis</tt> destructor removes them.
 
    <dt><tt> iReadOnly</tt>
   <dd> Dedicated to the case where you just want to read.
 <br><b>Legal values</b>:
 <tt>FALSE</tt> if the bodies of the list must be managed by the caller (default mode),
 <tt>TRUE</tt> otherwise.</dd>
</dl>
</dl>
</dl>
<a name="IsEmpty"></a><a name="IsEmpty(CATBoolean&amp;)"></a> <dt> o <b>IsEmpty</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>IsEmpty</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>ioYesOrNo</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Tests whether <tt>this</tt> diagnosis references bodies.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioYesOrNo</tt>
   <dd> The result of the test.
 <br><b>Legal values</b>: <tt>TRUE</tt> if empty, <tt>FALSE</tt> if there is at least one body referenced.</dd>
</dl>
</dl>
</dl>
<a name="SetLocation"></a><a name="SetLocation(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"></a> <dt> o <b>SetLocation</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLocation</b>(<td> const <script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>iLocationList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>iContextList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iAppendOnly</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the topological location of <tt>this</tt> error.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocationList</tt>
   <dd> The list of the pointers to the bodies defining the location of the error. To be called inside
 an operator as an help for the caller.
 </dd>
    <dt><tt> iContextList</tt>
   <dd> The list of the pointers to the bodies defining the topological neighborhood of the error. 
 To be called inside an operator as an help for the caller.
 </dd>
    <dt><tt> iAppendOnly</tt>
   <dd> Dedicated to the case where previous lists of pointers to the bodies were not empty.
 <br><b>Legal values</b>:
 <tt>FALSE</tt> if the previous lists of pointers to the bodies are forgotten,
 <tt>TRUE</tt> if the previous lists of pointers to the bodies are kept.</dd>
</dl>
</dl>
</dl>
<a name="SetLocationWithInputBodies"></a><a name="SetLocationWithInputBodies(CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATLISTP(CATBody)&amp;,CATBoolean)"></a> <dt> o <b>SetLocationWithInputBodies</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLocationWithInputBodies</b>(<td> const <script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>iLocationList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>iInputList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTP(CATBody)','CATLISTP(CATBody)&amp;')</script> <td><tt>iContextList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iAppendOnly</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the topological location of <tt>this</tt> error.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocationList</tt>
   <dd> The list of the pointers to the bodies defining the location of the error. To be called inside
 an operator as an help for the caller.
 </dd>
    <dt><tt> iInputList</tt>
   <dd> The list of the pointers to the input bodies containing the cells of the location bodies. To be called inside
 an operator as an help for the caller. This list and <tt>iLocationList</tt> should have the same size.
 </dd>
    <dt><tt> iContextList</tt>
   <dd> The list of the pointers to the bodies defining the topological neighborhood of the error. 
 To be called inside an operator as an help for the caller.
 </dd>
    <dt><tt> iAppendOnly</tt>
   <dd> Dedicated to the case where previous lists of pointers to the bodies were not empty.
 <br><b>Legal values</b>:
 <tt>FALSE</tt> if the previous lists of pointers to the bodies are forgotten,
 <tt>TRUE</tt> if the previous lists of pointers to the bodies are kept.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATListType"> <dt> o <b>CATListType</b>
<dl>
  <dd>
<pre>
enum <b>CATListType</b> {
  NoList,
  LocationList,
  ContextList
}
</pre>
 Defines the list types.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NoList</tt>
   <dd> The body is not referenced in any list
 </dd>
    <dt><tt> LocationList</tt>
   <dd> The body is referenced in the location list
 </dd>
    <dt><tt> ContextList</tt>
   <dd> The body is referenced in the context list</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCGMDiagnosis.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMModelInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

