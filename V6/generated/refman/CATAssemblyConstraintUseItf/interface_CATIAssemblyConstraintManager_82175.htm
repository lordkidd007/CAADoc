<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATAssemblyConstraintUseItf Interface CATIAssemblyConstraintManager</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATAssemblyConstraintUseItf.htm" href="../CATAssemblyConstraintUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATAssemblyConstraintUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIAssemblyConstraintManager"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATAssemblyConstraintUseItf Interface CATIAssemblyConstraintManager</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIAssemblyConstraintManager_82175','CATIAssemblyConstraintManager','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIAssemblyConstraintManager</b>
</p>
<p>
<b><i> Interface dedicated to manage the life cycle of an Assembly Constraint 
 object.</i></b><br>

 <b>Role</b>: This interface allows to create, retrieve or delete 
 an Assembly Constraint. This interface is implemented by the Engineering
 Connection.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddAssemblyConstraint(CATIAssemblyConstraint::Type,CATListValCATBaseUnknown_var*,CATIAssemblyConstraint*&amp;)"><b>AddAssemblyConstraint</b></a>(CATIAssemblyConstraint::Type,CATListValCATBaseUnknown_var*,CATIAssemblyConstraint*&amp;)
<dd>  Adds an Assembly Constraint in the Engineering Connection.
 <dt> o 
    <a href="#GetListOfAssemblyConstraints(CATListValCATBaseUnknown_var&amp;)"><b>GetListOfAssemblyConstraints</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>  Returns the list of Assembly contraints contained in the Engineering 
 Connection.
 <dt> o 
    <a href="#RemoveAssemblyConstraint(CATIAssemblyConstraint*)"><b>RemoveAssemblyConstraint</b></a>(CATIAssemblyConstraint*)
<dd>  Removes an Assembly Constraint defined in the Engineering Connection.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddAssemblyConstraint"></a><a name="AddAssemblyConstraint(CATIAssemblyConstraint::Type,CATListValCATBaseUnknown_var*,CATIAssemblyConstraint*&amp;)"></a> <dt> o <b>AddAssemblyConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddAssemblyConstraint</b>(<td><script type="text/javascript"> activateLink('CATIAssemblyConstraint::Type','CATIAssemblyConstraint::Type')</script> <td><tt>iCstType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var*')</script> <td><tt>iListOfGeometry</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAssemblyConstraint','CATIAssemblyConstraint*&amp;')</script> <td><tt>oAssConstraint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an Assembly Constraint in the Engineering Connection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCstDef</tt>
   <dd> [in] The type of the Assembly Constraint.
 </dd>
    <dt><tt> iListOfGeometry</tt>
   <dd> [in] The list of geometry pointed by the constraint. The geometry is 
 identified by a CATOmbObjectInContext
 <br> Each geometry must correspond, one to one, to a MCX's impacted. It means that the Impacted's Path of First Instances must be included in the geometry's Path of First Instances.
 <br> A non contextual support is characterized by the fact that  the geometry's Path of First Instances  must start with a child instance of the MCX's father.
 <br> A contextual impacted is characterized by the fact that the geometry's Path of First Instances must end with an instance of the MCX's father.
 </dd>
    <dt><tt> oAssConstraint.</tt>
   <dd> [out] The created Assembly Constraint. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd>If the operation is successful.
   <dt><tt>E_INVALIDARG</tt> <dd>If the Engineering Connection is not 
                        compatible with the created assembly Constraint.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetListOfAssemblyConstraints"></a><a name="GetListOfAssemblyConstraints(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetListOfAssemblyConstraints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetListOfAssemblyConstraints</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oListAssemblyConstraints</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of Assembly contraints contained in the Engineering 
 Connection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListAssemblyConstraints</tt>
   <dd> [out] the list of Assembly Constraints. The Assembly Constraint is 
 identified by a CATIAssemblyConstraint
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd>if the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
   </dl>
</dl>
</dl>
<a name="RemoveAssemblyConstraint"></a><a name="RemoveAssemblyConstraint(CATIAssemblyConstraint*)"></a> <dt> o <b>RemoveAssemblyConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveAssemblyConstraint</b>(<td><script type="text/javascript"> activateLink('CATIAssemblyConstraint','CATIAssemblyConstraint*')</script> <td><tt>iAssConstraint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes an Assembly Constraint defined in the Engineering Connection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAssConstraint</tt>
   <dd> [in] Assembly Constraint to remove. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd>if the operation is successful.
   <dt><tt>E_INVALIDARG</tt> <dd>If the Assembly Constraint is not 
                                 aggregated by the Engineering Connection 
   <dt><tt>E_FAIL</tt> <dd> if the operation is failed.
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIAssemblyConstraintManager.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAssemblyConstraintUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

