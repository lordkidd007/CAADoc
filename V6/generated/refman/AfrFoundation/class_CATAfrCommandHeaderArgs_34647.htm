<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AfrFoundation Class CATAfrCommandHeaderArgs</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../AfrFoundation.htm" href="../AfrFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "AfrFoundation";	}
		function getCurrentObjectName() { 
 	return "CATAfrCommandHeaderArgs"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>AfrFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CATAfrCommandHeaderArgs</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATAfrCommandHeaderArgs_34647','CATAfrCommandHeaderArgs','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATAfrCommandHeaderArgs</b>
</p>
<p>
<b><i> Class representing an argument list.</i></b><br>


 <br><b>Role</b>: Argument list for a command header to pass to its command.
 <br>The command may use <script type="text/javascript"> activateLinkAnchor('CATAfrCommandHeaderServices','CATAfrGetArguments','CATAfrCommandHeaderServices.CATAfrGetArguments') </script> in its constructor to get the argument list.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATAfrCommandHeaderArgs()"><b>CATAfrCommandHeaderArgs</b></a>()
<dd>  Constructs an empty argument list.
 <dt> o 
    <a href="#CATAfrCommandHeaderArgs(CATAfrCommandHeaderArgs&amp;)"><b>CATAfrCommandHeaderArgs</b></a>(CATAfrCommandHeaderArgs&amp;)
<dd>  Constructs an argument list by copying another one.
 <dt> o 
    <a href="#~CATAfrCommandHeaderArgs()"><b>~CATAfrCommandHeaderArgs</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateIterator()"><b>CreateIterator</b></a>()
<dd>  Returns an iterator.
 <dt> o 
    <a href="#GetArgsCount()"><b>GetArgsCount</b></a>()
<dd>  Get the number of stored arguments.
 <dt> o 
    <a href="#GetItems()"><b>GetItems</b></a>()
<dd>  Returns the list of arguments as a CATBaseUnknown_var.
 <dt> o 
    <a href="#Remove(CATString)"><b>Remove</b></a>(CATString)
<dd>  Remove an argument from its Id.
 <dt> o 
    <a href="#RemoveAll()"><b>RemoveAll</b></a>()
<dd>  Remove all arguments to empty the list.
 <dt> o 
    <a href="#Set(CATString,CATBaseUnknown_var,CATAfrCommandHeaderArg::ArgumentMode)"><b>Set</b></a>(CATString,CATBaseUnknown_var,CATAfrCommandHeaderArg::ArgumentMode)
<dd>  Changes the value of an argument from its Id or creates the argument if it does not exist.
 <dt> o 
    <a href="#operator=(CATAfrCommandHeaderArgs&amp;)"><b>operator=</b></a>(CATAfrCommandHeaderArgs&amp;)
<dd>  Sets an argument list to the contents of another one.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATAfrCommandHeaderArgs"></a><a name="CATAfrCommandHeaderArgs()"></a> <dt> o <b>CATAfrCommandHeaderArgs</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATAfrCommandHeaderArgs</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty argument list.
</dl>
<a name="CATAfrCommandHeaderArgs"></a><a name="CATAfrCommandHeaderArgs(CATAfrCommandHeaderArgs&amp;)"></a> <dt> o <b>CATAfrCommandHeaderArgs</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATAfrCommandHeaderArgs</b>(<td> const <script type="text/javascript"> activateLink('CATAfrCommandHeaderArgs','CATAfrCommandHeaderArgs&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an argument list by copying another one.
</dl>
<a name="~CATAfrCommandHeaderArgs"></a><a name="~CATAfrCommandHeaderArgs()"></a> <dt> o <b>~CATAfrCommandHeaderArgs</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATAfrCommandHeaderArgs</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateIterator"></a><a name="CreateIterator()"></a> <dt> o <b>CreateIterator</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATAfrCommandHeaderArgsIterator','CATAfrCommandHeaderArgsIterator *')</script>  <b>CreateIterator</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns an iterator.
 <br>Remember to Release the iterator after use.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The iterator.
</dl>
</dl>
<a name="GetArgsCount"></a><a name="GetArgsCount()"></a> <dt> o <b>GetArgsCount</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetArgsCount</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Get the number of stored arguments.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The number of stored arguments inside the CATAfrCommandHeaderArgs.
</dl>
</dl>
<a name="GetItems"></a><a name="GetItems()"></a> <dt> o <b>GetItems</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>GetItems</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of arguments as a CATBaseUnknown_var.
 This member function is dedicated to internal use.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The list of arguments converts to a CATBaseUnknown_var.
</dl>
</dl>
<a name="Remove"></a><a name="Remove(CATString)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Remove</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString')</script> <td><tt>iId</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Remove an argument from its Id.
 <br>It will return an error if no argument has this Id.
 <br>Special notice on removal: if several iterators concurrently scan the same argument list,
 removing an argument in one iterator might impact the scan in the others.
 Next, Remove and Set methods of these iterators will have to check the current element still exists
 before doing their job and return an error if it does not exist. As soon as an iterator removes an argument,
 all the other existing iterators that reference this argument as the current element become unusable
 until you call its First method again.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>   The</tt>
   <dd> identifier of the argument to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll()"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Remove all arguments to empty the list.
</dl>
<a name="Set"></a><a name="Set(CATString,CATBaseUnknown_var,CATAfrCommandHeaderArg::ArgumentMode)"></a> <dt> o <b>Set</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString')</script> <td><tt>iId</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>iValue</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATAfrCommandHeaderArg::ArgumentMode','CATAfrCommandHeaderArg::ArgumentMode')</script> <td><tt>iMode</tt><td><tt>= CATAfrCommandHeaderArg::In</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Changes the value of an argument from its Id or creates the argument if it does not exist.
 An argument can be created only at the end of the existing list.
 Set will return an error if the new value type is not compatible with the old value type, i.e.
 if types are not the same
 or if modes are not the same.
</dl>
<a name="operator="></a><a name="operator=(CATAfrCommandHeaderArgs&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATAfrCommandHeaderArgs','CATAfrCommandHeaderArgs&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('CATAfrCommandHeaderArgs','CATAfrCommandHeaderArgs&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets an argument list to the contents of another one.
</dl>
<hr>
 This object is included in the file: <b>CATAfrCommandHeaderArgs.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAfrFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

