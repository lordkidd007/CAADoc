<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AfrFoundation Class CATStackableCommandSet</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../AfrFoundation.htm" href="../AfrFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "AfrFoundation";	}
		function getCurrentObjectName() { 
 	return "CATStackableCommandSet"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>AfrFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CATStackableCommandSet</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATStackableCommandSet_32733','CATStackableCommandSet','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATStackableCommandSet</b>
</p>
<p>
<b><i> Class to store a list of command header instance name.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATStackableCommandSet()"><b>CATStackableCommandSet</b></a>()
<dd>  Constructs a default list of command header name.
 <dt> o 
    <a href="#CATStackableCommandSet(CATStackableCommandSet*)"><b>CATStackableCommandSet</b></a>(CATStackableCommandSet*)
<dd>  Constructs a list of command header name from an other one.
 <dt> o 
    <a href="#~CATStackableCommandSet()"><b>~CATStackableCommandSet</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddCommand(char*)"><b>AddCommand</b></a>(char*)
<dd>  Adds a name to the list.
 <dt> o 
    <a href="#AddCommand(CATString&amp;)"><b>AddCommand</b></a>(CATString&amp;)
<dd>  Adds a name to the list.
 <dt> o 
    <a href="#AddSet(CATStackableCommandSet&amp;)"><b>AddSet</b></a>(CATStackableCommandSet&amp;)
<dd>  Adds a set of command header name.
 <dt> o 
    <a href="#Contains(CATString&amp;,unsigned long*)"><b>Contains</b></a>(CATString&amp;,unsigned long*)
<dd>  Checks if a name exists in the list.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Returns the count of name in the list.
 <dt> o 
    <a href="#RemoveCommand(char*)"><b>RemoveCommand</b></a>(char*)
<dd>  Removes a name from the list.
 <dt> o 
    <a href="#RemoveCommand(CATString&amp;)"><b>RemoveCommand</b></a>(CATString&amp;)
<dd>  Removes a name from the list.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATStackableCommandSet"></a><a name="CATStackableCommandSet()"></a> <dt> o <b>CATStackableCommandSet</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATStackableCommandSet</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a default list of command header name.
 <br><b>Role</b>:This method constructs a list with some command header 
 names.
</dl>
<a name="CATStackableCommandSet"></a><a name="CATStackableCommandSet(CATStackableCommandSet*)"></a> <dt> o <b>CATStackableCommandSet</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATStackableCommandSet</b>(<td><script type="text/javascript"> activateLink('CATStackableCommandSet','CATStackableCommandSet*')</script> <td><tt>iFrom</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a list of command header name from an other one.
 <br><b>Role</b>: This method duplicates a list of command header name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFrom</tt>
   <dd>    The list to duplicate</dd>
</dl>
</dl>
</dl>
<a name="~CATStackableCommandSet"></a><a name="~CATStackableCommandSet()"></a> <dt> o <b>~CATStackableCommandSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATStackableCommandSet</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddCommand"></a><a name="AddCommand(char*)"></a> <dt> o <b>AddCommand</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>AddCommand</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iCommandHdrName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds a name to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandHdrName</tt>
   <dd>    The name of the command header to add. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     If <tt>TRUE</tt> the name has been added in the list, <tt>FALSE</tt> otherwise.
</dl>
</dl>
<a name="AddCommand"></a><a name="AddCommand(CATString&amp;)"></a> <dt> o <b>AddCommand</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>AddCommand</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCommandHdrName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds a name to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandHdrName</tt>
   <dd>    The name of the command header to add. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      If <tt>TRUE</tt> the name has been added in the list, otherwise <tt>FALSE</tt>
</dl>
</dl>
<a name="AddSet"></a><a name="AddSet(CATStackableCommandSet&amp;)"></a> <dt> o <b>AddSet</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>AddSet</b>(<td><script type="text/javascript"> activateLink('CATStackableCommandSet','CATStackableCommandSet&amp;')</script> <td><tt>iSet</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds a set of command header name.
 <br><b>Role</b>: Each name of the input set is added to the list thanks to the
 
<script type="text/javascript"> activateLinkAnchor('','AddCommand','AddCommand') </script> method. It means that there is no duplicate element in the resulting list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSet</tt>
   <dd>  The list to merge.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     always TRUE
</dl>
</dl>
<a name="Contains"></a><a name="Contains(CATString&amp;,unsigned long*)"></a> <dt> o <b>Contains</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>Contains</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCommandHdrName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned long','unsigned long*')</script> <td><tt>oPos</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Checks if a name exists in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandHdrName</tt>
   <dd>    The name of the command header to find out. 
 </dd>
    <dt><tt> oPos</tt>
   <dd>    The position of iCommandHdrName in the list. The range of the value is
    between <tt>0</tt> and </dd>
<script type="text/javascript"> activateLinkAnchor('','GetSize','GetSize') </script> -1 if the returned     value is <tt>TRUE</tt>, otherwise the value is not significant.
 
  <dt> <b>Returns:</b> 
  <dd>    If <tt>TRUE</tt> the name has been found in the list, <tt>FALSE</tt> otherwise.
</dl>
</dl>
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('long','unsigned long')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the count of name in the list. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The size of the list.
</dl>
</dl>
<a name="RemoveCommand"></a><a name="RemoveCommand(char*)"></a> <dt> o <b>RemoveCommand</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>RemoveCommand</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iCommandHdrName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a name from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandHdrName</tt>
   <dd>    The name of the command header to remove. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    If <tt>TRUE</tt> the name has been removed from the list, <tt>FALSE</tt> otherwise.
</dl>
</dl>
<a name="RemoveCommand"></a><a name="RemoveCommand(CATString&amp;)"></a> <dt> o <b>RemoveCommand</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>RemoveCommand</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iCommandHdrName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a name from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCommandHdrName</tt>
   <dd>    The name of the command header to remove. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    If <tt>TRUE</tt> the name has been removed from the list, <tt>FALSE</tt> otherwise.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATStackableCommandSet.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAfrFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

