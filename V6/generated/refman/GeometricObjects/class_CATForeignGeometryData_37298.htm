<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricObjects Class CATForeignGeometryData</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GeometricObjects.htm" href="../GeometricObjects.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GeometricObjects";	}
		function getCurrentObjectName() { 
 	return "CATForeignGeometryData"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GeometricObjects <script type="text/javascript" > writeClassCharacteristic(); </script> CATForeignGeometryData</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATForeignGeometryData_37298','CATForeignGeometryData','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATForeignGeometryData</b>
</p>
<p>
<b><i> Base class for the definition of foreign data on CGM objects.</i></b><br>

 <br>  If you want 
 to create a new class of CGM data, you have to derive this class. By the way, you will
 find two kinds of methods:
 <ul>
 <li> Mandatory methods: there is no default implementation, you must re-write them for
 your own object. 
 <li> Optional methods: they have a default implementation. You can re-write them to
 increase the performances or to be more adapted to your own class.
 </ul>
 You must provide a default constructor. As in any C++ programmation, 
 it is also strongly recommended to provide
 a copy constructor and an assigment operator.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATForeignGeometryData()"><b>CATForeignGeometryData</b></a>()
<dd>  Constructs a CATForeignGeometryData.
 <dt> o 
    <a href="#CATForeignGeometryData(CATForeignGeometryData&amp;)"><b>CATForeignGeometryData</b></a>(CATForeignGeometryData&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATForeignGeometryData()"><b>~CATForeignGeometryData</b></a>()
<dd>  Destructor
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Clone(CATCloneManager&amp;)"><b>Clone</b></a>(CATCloneManager&amp;)
<dd>   Constructs a copy of <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#CloneAndMove3D(CATTransfoManager&amp;)"><b>CloneAndMove3D</b></a>(CATTransfoManager&amp;)
<dd>   Constructs a geometrically transformed copy of <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Returns an estimation of the size in byte of <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#Move3D(CATTransfoManager&amp;)"><b>Move3D</b></a>(CATTransfoManager&amp;)
<dd>  Applies a geometrical transformation to <tt>this</tt> CATForeignGeometryData.
 <dt> o 
    <a href="#operator =(CATForeignGeometryData&amp;)"><b>operator =</b></a>(CATForeignGeometryData&amp;)
<dd>  Assignement operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATForeignGeometryData"></a><a name="CATForeignGeometryData()"></a> <dt> o <b>CATForeignGeometryData</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATForeignGeometryData</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATForeignGeometryData.
</dl>
<a name="CATForeignGeometryData"></a><a name="CATForeignGeometryData(CATForeignGeometryData&amp;)"></a> <dt> o <b>CATForeignGeometryData</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATForeignGeometryData</b>(<td> const <script type="text/javascript"> activateLink('CATForeignGeometryData','CATForeignGeometryData&amp;')</script> <td><tt>iToCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="~CATForeignGeometryData"></a><a name="~CATForeignGeometryData()"></a> <dt> o <b>~CATForeignGeometryData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATForeignGeometryData</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor
</dl>
 <h2>Methods</h2> <br>
<a name="Clone"></a><a name="Clone(CATCloneManager&amp;)"></a> <dt> o <b>Clone</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATForeignGeometryData','CATForeignGeometryData*')</script>  <b>Clone</b>(<td><script type="text/javascript"> activateLink('CATCloneManager','CATCloneManager&amp;')</script> <td><tt>iCloning</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
  Constructs a copy of <tt>this</tt> CATForeignGeometryData.
 <br>Mandatory method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCloning</tt>
   <dd> The clone process to be used.</dd>
</dl>
</dl>
</dl>
<a name="CloneAndMove3D"></a><a name="CloneAndMove3D(CATTransfoManager&amp;)"></a> <dt> o <b>CloneAndMove3D</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATGeometry','CATGeometry*')</script>  <b>CloneAndMove3D</b>(<td><script type="text/javascript"> activateLink('CATTransfoManager','CATTransfoManager&amp;')</script> <td><tt>iTransfo</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
  Constructs a geometrically transformed copy of <tt>this</tt> CATForeignGeometryData. 
 <br>Optional method. By default, copies , then transforms.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation process to be used.</dd>
</dl>
</dl>
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns an estimation of the size in byte of <tt>this</tt> CATForeignGeometryData.
 <br>Optional method. No size by default. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The estimated size.
</dl>
</dl>
<a name="Move3D"></a><a name="Move3D(CATTransfoManager&amp;)"></a> <dt> o <b>Move3D</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Move3D</b>(<td><script type="text/javascript"> activateLink('CATTransfoManager','CATTransfoManager&amp;')</script> <td><tt>iTransfo</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Applies a geometrical transformation to <tt>this</tt> CATForeignGeometryData. 
 <br>Mandatory method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The transformation process to be used.</dd>
</dl>
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATForeignGeometryData&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATForeignGeometryData','CATForeignGeometryData&')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATForeignGeometryData','CATForeignGeometryData&amp;')</script> <td><tt>iToAssign</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignement operator.
</dl>
<hr>
 This object is included in the file: <b>CATForeignGeometryData.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricObjects</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

