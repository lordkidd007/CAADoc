<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DELStrMfgUseItf Interface DELIStrMfgUseAssembleAuth</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DELStrMfgUseItf.htm" href="../DELStrMfgUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DELStrMfgUseItf";	}
		function getCurrentObjectName() { 
 	return "DELIStrMfgUseAssembleAuth"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELStrMfgUseItf Interface DELIStrMfgUseAssembleAuth</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIStrMfgUseAssembleAuth_44269','DELIStrMfgUseAssembleAuth','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIStrMfgUseAssembleAuth</b>
</p>
<p>
<b><i> Interface to create features for Assemble process.</i></b><br>

 <b>Role</b>: Allows to create manufacturing features and also to get the features created for a perticular assemble process.
 This interface is valid only for Assemble process occurrence.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateAttachmentLine(double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseSideMode,DELStrMfgUseMarkingLineSide)"><b>CreateAttachmentLine</b></a>(double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseSideMode,DELStrMfgUseMarkingLineSide)
<dd>  Creates an attachment lines for all the possible objects under selected assembly.
 <dt> o 
    <a href="#CreateEdgePreparation(CATListPtrCATBaseUnknown&amp;)"><b>CreateEdgePreparation</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>    Create edge preparations for all the possible welds objects created under selected assembly.
 <dt> o 
    <a href="#CreateMarginGeo(CATListPtrCATBaseUnknown&amp;)"><b>CreateMarginGeo</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Creates margin geometry for all the objects inside an assembly.
 <dt> o 
    <a href="#CreateReferenceLine(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseMarkingLineSide)"><b>CreateReferenceLine</b></a>(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseMarkingLineSide)
<dd>  Creates reference lines for all the objects in an assembly which are intersected by ispRefObject.
 <dt> o 
    <a href="#CreateWelds(CATListPtrCATBaseUnknown&amp;)"><b>CreateWelds</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Create weld lines for all the fasten processes present inside assembly.
 <dt> o 
    <a href="#GetAllAlignmentlines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllAlignmentlines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all alignment lines created for this assembly.
 <dt> o 
    <a href="#GetAllAttachmentlines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllAttachmentlines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all attachment lines created for this assembly.
 <dt> o 
    <a href="#GetAllEdgePreparations(CATListPtrCATBaseUnknown&amp;)"><b>GetAllEdgePreparations</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all  Edge preparations created for this assembly.
 <dt> o 
    <a href="#GetAllMargins(CATListPtrCATBaseUnknown&amp;)"><b>GetAllMargins</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all margins created for this assembly.
 <dt> o 
    <a href="#GetAllReferenceLines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllReferenceLines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all reference lines created for this assembly.
 <dt> o 
    <a href="#GetAllWelds(CATListPtrCATBaseUnknown&amp;)"><b>GetAllWelds</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get All the weld lines.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateAttachmentLine"></a><a name="CreateAttachmentLine(double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseSideMode,DELStrMfgUseMarkingLineSide)"></a> <dt> o <b>CreateAttachmentLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateAttachmentLine</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iOffset</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseOffsetMode','DELStrMfgUseOffsetMode&amp;')</script> <td><tt>iOffsetMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfAttachmentLines</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseSideMode','DELStrMfgUseSideMode')</script> <td><tt>iMarkingSideMode</tt><td><tt>= DELStrMfgUseMoldedSideMode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseMarkingLineSide','DELStrMfgUseMarkingLineSide')</script> <td><tt>iMarkingLineSide</tt><td><tt>= DELStrMfgUseMoldedSide</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an attachment lines for all the possible objects under selected assembly.It assemes welds are already generated.
 Alignment lines are also created internally as per the type of weld.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOffset[IN]</tt>
   <dd>      Offset to attachment line.
   </dd>
    <dt><tt> iOffsetMode[IN]</tt>
   <dd>      Offset mode.
   </dd>
    <dt><tt> oListOfAttachmentLines</tt>
   <dd> [out, CATBaseUnknown#release]     The newly created Attachment lines.
   </dd>
    <dt><tt> iMarkingSideMode[IN]</tt>
   <dd>       This is marked side mode i.e. DELStrMfgMoldedSideMode is deafult which means 
		  profile is attached to Molded side of Plate. 
   </dd>
    <dt><tt> iMarkingLineSide[IN]</tt>
   <dd>      This is marking side mode i.e. DELStrMfgMoldedSide which mean profile's Molded side is considered for Marking.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK  - If attachment Line creation is successful else E_FAIL. It is assumed that welds are already generated for selected assembly.
				 If welds are not created then attachment line creation returns E_FAIL.

</dl>
</dl>
<a name="CreateEdgePreparation"></a><a name="CreateEdgePreparation(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>CreateEdgePreparation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateEdgePreparation</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfEdgePreps</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Create edge preparations for all the possible welds objects created under selected assembly. It assumes that welds are created already.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipUdfName</tt>
   <dd>      Edge preparation type/name         
   </dd>
    <dt><tt> oListOfEdgePreps</tt>
   <dd> [out, CATBaseUnknown#release]      List of Edge Preparation Features.
   </dd>
    <dt><tt> iSideMode</tt>
   <dd>       Edge preparation side (Molded/Thick). Default is DELStrMfgUseMoldedSideMode
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateMarginGeo"></a><a name="CreateMarginGeo(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>CreateMarginGeo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateMarginGeo</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfMargins</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates margin geometry for all the objects inside an assembly. This is based on weld features.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThickness</tt>
   <dd>      Thickness. If Thickness value is Positive then Positive margin i.e. Added material feature is created.
		  otherwise for negative thickness value, fitup (Negative Margin) is  created.
   </dd>
    <dt><tt> opiMarginGeo</tt>
   <dd> [out, CATBaseUnknown#release]      Margin object.
	  </dd>
    <dt><tt> ibIsOverLength</tt>
   <dd> This is false by default.		If it is TRUE then a positive margin for curved profile is created with a type as OVERLENGTH.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateReferenceLine"></a><a name="CreateReferenceLine(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,CATListPtrCATBaseUnknown&amp;,DELStrMfgUseMarkingLineSide)"></a> <dt> o <b>CreateReferenceLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateReferenceLine</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispRefObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iOffset</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseOffsetMode','DELStrMfgUseOffsetMode&amp;')</script> <td><tt>iOffsetMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfReferenceLines</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseMarkingLineSide','DELStrMfgUseMarkingLineSide')</script> <td><tt>iMarkingLineSide</tt><td><tt>= DELStrMfgUseMoldedSide</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates reference lines for all the objects in an assembly which are intersected by ispRefObject.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispRefObject</tt>
   <dd>      It is a reference plane using which reference line is be created.
   </dd>
    <dt><tt> iOffset</tt>
   <dd>      Offset.
   </dd>
    <dt><tt> iOffsetMode</tt>
   <dd>      Offset mode.
   </dd>
    <dt><tt> oListOfReferenceLines</tt>
   <dd> [out, CATBaseUnknown#release]      list of Reference lines.
   </dd>
    <dt><tt> iMarkingLineSide</tt>
   <dd> [IN]      Marked side. i.e. DELStrMfgMoldedSide which is default value which indicates that Reference line is 
		 marked on Molded side of selected object.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      S_OK if successful else error code of function.
</dl>
</dl>
<a name="CreateWelds"></a><a name="CreateWelds(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>CreateWelds</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateWelds</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfWeldLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create weld lines for all the fasten processes present inside assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfWeldLines</tt>
   <dd> [out, CATBaseUnknown#release]      list of Weld features created for this assembly
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="GetAllAlignmentlines"></a><a name="GetAllAlignmentlines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllAlignmentlines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllAlignmentlines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfAlignmentLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all alignment lines created for this assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfAlignmentLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the alignment lines created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If alignment Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetAllAttachmentlines"></a><a name="GetAllAttachmentlines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllAttachmentlines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllAttachmentlines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfAttachmentLines</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Get all attachment lines created for this assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfAttachmentLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the attachment lines created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If attachment Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetAllEdgePreparations"></a><a name="GetAllEdgePreparations(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllEdgePreparations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllEdgePreparations</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfEdgePreparations</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all  Edge preparations created for this assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfEdgePreparations</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the Edge preparations created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If Edge preparations exists else E_FAIL.

</dl>
</dl>
<a name="GetAllMargins"></a><a name="GetAllMargins(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllMargins</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllMargins</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfMargins</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all margins created for this assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfMargins</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the margins created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If margin exists else E_FAIL.

</dl>
</dl>
<a name="GetAllReferenceLines"></a><a name="GetAllReferenceLines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllReferenceLines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllReferenceLines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfReferenceLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all reference lines created for this assembly.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfReferenceLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the reference lines created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If refernce Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetAllWelds"></a><a name="GetAllWelds(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllWelds</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllWelds</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfWeldLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get All the weld lines.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfWeldLines</tt>
   <dd> [out, CATBaseUnknown#release]      list of Weld features created for this assembly
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIStrMfgUseAssembleAuth.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CAADELStrMfgItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

