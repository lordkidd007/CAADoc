<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DELStrMfgUseItf Interface DELIStrMfgUsePlateFabricationAuth</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DELStrMfgUseItf.htm" href="../DELStrMfgUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DELStrMfgUseItf";	}
		function getCurrentObjectName() { 
 	return "DELIStrMfgUsePlateFabricationAuth"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELStrMfgUseItf Interface DELIStrMfgUsePlateFabricationAuth</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIStrMfgUsePlateFabricationAuth_67659','DELIStrMfgUsePlateFabricationAuth','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIStrMfgUsePlateFabricationAuth</b>
</p>
<p>
<b><i> Interface to create Structure manufacturing features(wich includes features for fabrication, marking, cutting, beveling) for plate and also access them.</i></b><br>

 <b>Role</b>: Allows creation of Attachment line, Alignment line, BSU, Opening preparation, Reference line, margin, EdgePreparation.
              Allows to get the created features for a perticular plate manufacturing/fabrication process.
              
 This interface is valid only for Plate Manufactured Item process occurrence, marking process , fabrication, cutting, beveling process occurrence. 
 if user creates this interface on details processes (like marking , cutting, bevelling) then he only relevant methods can be called, other methods which doesn't make sense returns E_FAIL.
 For Example: If user creates interface with Bevelling process occurrence, and he calls CreateEdgePreparation and GetAllEdgePreparation then they return S_ok. Other methods like CreateAttachmentLine , CreateAlignmentLine are 
              irrelevant to Bevelling and returns E_NOIMPL .</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateBurnSideUp(DELIStrMfgUseBurnSideUp**,DELStrMfgUseSideMode)"><b>CreateBurnSideUp</b></a>(DELIStrMfgUseBurnSideUp**,DELStrMfgUseSideMode)
<dd>  Creates BSU.
 <dt> o 
    <a href="#CreateEdgePreparation(CATUnicodeString*,CATBaseUnknown_var&amp;,DELIStrMfgUseEdgePreparation**,DELStrMfgUseSideMode,CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;)"><b>CreateEdgePreparation</b></a>(CATUnicodeString*,CATBaseUnknown_var&amp;,DELIStrMfgUseEdgePreparation**,DELStrMfgUseSideMode,CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;)
<dd>  Creates Edge Preparation feature.
 <dt> o 
    <a href="#CreateMarginGeo(CATBaseUnknown_var&amp;,double,DELIStrMfgUseMarginGeo**,CATBoolean)"><b>CreateMarginGeo</b></a>(CATBaseUnknown_var&amp;,double,DELIStrMfgUseMarginGeo**,CATBoolean)
<dd>  Creates margin geometry.
 <dt> o 
    <a href="#CreateOpeningPreparation(CATBaseUnknown_var&amp;,DELStrMfgUseOpeningPrepType,DELIStrMfgUseOpeningPreparation**)"><b>CreateOpeningPreparation</b></a>(CATBaseUnknown_var&amp;,DELStrMfgUseOpeningPrepType,DELIStrMfgUseOpeningPreparation**)
<dd>  Creates Opening prep.
 <dt> o 
    <a href="#CreateReferenceLine(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,DELIStrMfgUseReferenceLine**,DELStrMfgUseMarkingLineSide)"><b>CreateReferenceLine</b></a>(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,DELIStrMfgUseReferenceLine**,DELStrMfgUseMarkingLineSide)
<dd>  Creates a reference line.
 <dt> o 
    <a href="#GetAllAlignmentlines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllAlignmentlines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all alignment lines created for a perticular plate process.
 <dt> o 
    <a href="#GetAllAttachmentlines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllAttachmentlines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all attachment lines created for selected plate.
 <dt> o 
    <a href="#GetAllEdgePreparations(CATListPtrCATBaseUnknown&amp;)"><b>GetAllEdgePreparations</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all  Edge preparations created for a perticular plate process.
 <dt> o 
    <a href="#GetAllMargins(CATListPtrCATBaseUnknown&amp;)"><b>GetAllMargins</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all margins created for a perticular plate process.
 <dt> o 
    <a href="#GetAllOpeningPreparations(CATListPtrCATBaseUnknown&amp;)"><b>GetAllOpeningPreparations</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all opening preparations created for a perticular plate process.
 <dt> o 
    <a href="#GetAllReferenceLines(CATListPtrCATBaseUnknown&amp;)"><b>GetAllReferenceLines</b></a>(CATListPtrCATBaseUnknown&amp;)
<dd>  Get all reference lines created for a perticular plate process.
 <dt> o 
    <a href="#GetBurnSideUp(DELIStrMfgUseBurnSideUp**)"><b>GetBurnSideUp</b></a>(DELIStrMfgUseBurnSideUp**)
<dd>  Get burn side up for a perticular plate process.
 <dt> o 
    <a href="#GetOpeningPrepFor(CATBaseUnknown_var&amp;,DELIStrMfgUseOpeningPreparation**)"><b>GetOpeningPrepFor</b></a>(CATBaseUnknown_var&amp;,DELIStrMfgUseOpeningPreparation**)
<dd>  Get an opneing preparation created for a given SDD opening present of selected plate.
 <dt> o 
    <a href="#GetOuterContour(DELIStrMfgUseOuterContour**)"><b>GetOuterContour</b></a>(DELIStrMfgUseOuterContour**)
<dd>  Get outer contour for a perticular plate process.
 <dt> o 
    <a href="#GetReferenceLineFor(CATBaseUnknown_var&amp;,DELIStrMfgUseReferenceLine**)"><b>GetReferenceLineFor</b></a>(CATBaseUnknown_var&amp;,DELIStrMfgUseReferenceLine**)
<dd>  Get an reference line created for a given plane
   
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateBurnSideUp"></a><a name="CreateBurnSideUp(DELIStrMfgUseBurnSideUp**,DELStrMfgUseSideMode)"></a> <dt> o <b>CreateBurnSideUp</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateBurnSideUp</b>(<td><script type="text/javascript"> activateLink('DELIStrMfgUseBurnSideUp','DELIStrMfgUseBurnSideUp**')</script> <td><tt>opiBurnSideUp</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseSideMode','DELStrMfgUseSideMode')</script> <td><tt>iSideMode</tt><td><tt>= DELStrMfgUseMoldedSideMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates BSU.         
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiBurnSideUp</tt>
   <dd> [out, CATBaseUnknown#release]      BSU feature.This internally creates Outer Contour feature.
   </dd>
    <dt><tt> iSideMode</tt>
   <dd> [IN]		side on which BSU is created. By Default it is DELStrMfgMoldedSideMode.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateEdgePreparation"></a><a name="CreateEdgePreparation(CATUnicodeString*,CATBaseUnknown_var&amp;,DELIStrMfgUseEdgePreparation**,DELStrMfgUseSideMode,CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;)"></a> <dt> o <b>CreateEdgePreparation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateEdgePreparation</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>ipUdfName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispUnkEdge</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseEdgePreparation','DELIStrMfgUseEdgePreparation**')</script> <td><tt>opiEdgePrep</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseSideMode','DELStrMfgUseSideMode')</script> <td><tt>iSideMode</tt><td><tt>= DELStrMfgUseMoldedSideMode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispStartPt</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispEndPt</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates Edge Preparation feature.Before Creating Edge preparation, Burn side up and outer contour are required.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipUdfName</tt>
   <dd>      Edge preparation type/name         
   </dd>
    <dt><tt> ispUnkEdge</tt>
   <dd>       Reference Edge on which Edge preparation is done.
   </dd>
    <dt><tt> opiEdgePrep</tt>
   <dd> [out, CATBaseUnknown#release]      Edge Prep Feat.
   </dd>
    <dt><tt> iSideMode</tt>
   <dd>       Edge preparation side (Molded/Thick)
   </dd>
    <dt><tt> ispStartPt</tt>
   <dd>      This argument is required when user wants to create edge prep between selected point of 
   </dd>
    <dt><tt> ispEndPt</tt>
   <dd>       Edge preparation side (Molded/Thick)
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateMarginGeo"></a><a name="CreateMarginGeo(CATBaseUnknown_var&amp;,double,DELIStrMfgUseMarginGeo**,CATBoolean)"></a> <dt> o <b>CreateMarginGeo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateMarginGeo</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispRefFaceObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iThickness</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseMarginGeo','DELIStrMfgUseMarginGeo**')</script> <td><tt>opiMarginGeo</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibIsOverLength</tt><td><tt>=FALSE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates margin geometry.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispRefFaceObject</tt>
   <dd>      Face on which margin is created.
   </dd>
    <dt><tt> iThickness</tt>
   <dd>      Thickness. If Thickness value is Positive then Positive margin i.e. Added material feature is created 
		  otherwise for negative thickness value, fitup (Negative Margin) is created.
   </dd>
    <dt><tt> opiMarginGeo</tt>
   <dd> [out, CATBaseUnknown#release]      Margin object.
	  </dd>
    <dt><tt> ibIsOverLength</tt>
   <dd> This is false by default.		If it is TRUE then a positive margin for curved profile is created with a type as OVERLENGTH.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateOpeningPreparation"></a><a name="CreateOpeningPreparation(CATBaseUnknown_var&amp;,DELStrMfgUseOpeningPrepType,DELIStrMfgUseOpeningPreparation**)"></a> <dt> o <b>CreateOpeningPreparation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateOpeningPreparation</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iStrOpening</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseOpeningPrepType','DELStrMfgUseOpeningPrepType')</script> <td><tt>iOpeningType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseOpeningPreparation','DELIStrMfgUseOpeningPreparation**')</script> <td><tt>opiOpeningPrep</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates Opening prep.Before Creating opening preparation, Burn side up and outer contour are required.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispSOStrOpening</tt>
   <dd>      SDD Opening that is to be prepared
   </dd>
    <dt><tt> iOpeningType</tt>
   <dd>      Type of opening prep (Marked/Cut/Tabbed/Bridged/Drilled/None).   
   </dd>
    <dt><tt> opiOpeningPrep</tt>
   <dd> [out, CATBaseUnknown#release]      Opening Prep feature
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       Error code of function.
</dl>
</dl>
<a name="CreateReferenceLine"></a><a name="CreateReferenceLine(CATBaseUnknown_var&amp;,double,DELStrMfgUseOffsetMode&amp;,DELIStrMfgUseReferenceLine**,DELStrMfgUseMarkingLineSide)"></a> <dt> o <b>CreateReferenceLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateReferenceLine</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispRefObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iOffset</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseOffsetMode','DELStrMfgUseOffsetMode&amp;')</script> <td><tt>iOffsetMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseReferenceLine','DELIStrMfgUseReferenceLine**')</script> <td><tt>opiReferenceLine</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('DELStrMfgUseMarkingLineSide','DELStrMfgUseMarkingLineSide')</script> <td><tt>iMarkingLineSide</tt><td><tt>= DELStrMfgUseMoldedSide</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a reference line.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispRefObject</tt>
   <dd>      It is a reference plane using which reference line is created.
   </dd>
    <dt><tt> iOffset</tt>
   <dd>      Offset.
   </dd>
    <dt><tt> iOffsetMode</tt>
   <dd>      Offset mode.
   </dd>
    <dt><tt> opiReferenceLine</tt>
   <dd> [out, CATBaseUnknown#release]      Reference line.
   </dd>
    <dt><tt> iMarkingLineSide</tt>
   <dd> [IN]      Marked side. i.e. DELStrMfgMoldedSide which is default value which indicates that Reference line is 
		 marked on Molded side of selected object.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>      S_OK if successful else error code of function.
</dl>
</dl>
<a name="GetAllAlignmentlines"></a><a name="GetAllAlignmentlines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllAlignmentlines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllAlignmentlines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfAlignmentLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all alignment lines created for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfAlignmentLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the alignment lines created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If alignment Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetAllAttachmentlines"></a><a name="GetAllAttachmentlines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllAttachmentlines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllAttachmentlines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfAttachmentLines</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Get all attachment lines created for selected plate.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfAttachmentLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the attachment lines created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If attachment Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetAllEdgePreparations"></a><a name="GetAllEdgePreparations(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllEdgePreparations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllEdgePreparations</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfEdgePreparations</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all  Edge preparations created for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfEdgePreparations</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the Edge preparations created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If Edge preparations exists else E_FAIL.

</dl>
</dl>
<a name="GetAllMargins"></a><a name="GetAllMargins(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllMargins</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllMargins</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfMargins</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all margins created for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfMargins</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the margins created for a perticular plate process.
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If margin exists else E_FAIL.

</dl>
</dl>
<a name="GetAllOpeningPreparations"></a><a name="GetAllOpeningPreparations(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllOpeningPreparations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllOpeningPreparations</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfOpeningPreparations</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all opening preparations created for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfOpeningPreparations</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the opening preparations created for a perticular plate process
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If opening preparations exists else E_FAIL.

</dl>
</dl>
<a name="GetAllReferenceLines"></a><a name="GetAllReferenceLines(CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetAllReferenceLines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllReferenceLines</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfReferenceLines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get all reference lines created for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfReferenceLines</tt>
   <dd> [out, CATBaseUnknown#release]     This give list of all the reference lines created for a perticular plate process.
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If refernce Lines exists else E_FAIL.

</dl>
</dl>
<a name="GetBurnSideUp"></a><a name="GetBurnSideUp(DELIStrMfgUseBurnSideUp**)"></a> <dt> o <b>GetBurnSideUp</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBurnSideUp</b>(<td><script type="text/javascript"> activateLink('DELIStrMfgUseBurnSideUp','DELIStrMfgUseBurnSideUp**')</script> <td><tt>opBurnSideUp</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get burn side up for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opBurnSideUp</tt>
   <dd> [out, CATBaseUnknown#release]     This give Burn Side up for a perticular plate process.
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If Burn side Up exists else E_FAIL.

</dl>
</dl>
<a name="GetOpeningPrepFor"></a><a name="GetOpeningPrepFor(CATBaseUnknown_var&amp;,DELIStrMfgUseOpeningPreparation**)"></a> <dt> o <b>GetOpeningPrepFor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOpeningPrepFor</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iStrOpening</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseOpeningPreparation','DELIStrMfgUseOpeningPreparation**')</script> <td><tt>opOpeningPrep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get an opneing preparation created for a given SDD opening present of selected plate.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStrOpening[IN]</tt>
   <dd>      SDD opening on which opening preparation is created.
   </dd>
    <dt><tt> opOpeningPrep</tt>
   <dd> [out, CATBaseUnknown#release]     This return opening preparation created for iStrOpening on selected plate
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK  - If opening prep exists for iStrOpening else E_FAIL.

</dl>
</dl>
<a name="GetOuterContour"></a><a name="GetOuterContour(DELIStrMfgUseOuterContour**)"></a> <dt> o <b>GetOuterContour</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOuterContour</b>(<td><script type="text/javascript"> activateLink('DELIStrMfgUseOuterContour','DELIStrMfgUseOuterContour**')</script> <td><tt>opOuterContour</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get outer contour for a perticular plate process.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opOuterContour</tt>
   <dd> [out, CATBaseUnknown#release]     This give outer contour created for a perticular plate process.
  
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK If Burn side Up exists else E_FAIL.

</dl>
</dl>
<a name="GetReferenceLineFor"></a><a name="GetReferenceLineFor(CATBaseUnknown_var&amp;,DELIStrMfgUseReferenceLine**)"></a> <dt> o <b>GetReferenceLineFor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferenceLineFor</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>ispRefObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIStrMfgUseReferenceLine','DELIStrMfgUseReferenceLine**')</script> <td><tt>opReferenceLine</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get an reference line created for a given plane
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispRefObject[IN]</tt>
   <dd>      reference object which is used to create a reference line
   </dd>
    <dt><tt> opReferenceLine</tt>
   <dd> [out, CATBaseUnknown#release]     This return reference line created for  ispRefObject on selected plate
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK  - If reference Line exists for ispRefObject else E_FAIL.

</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIStrMfgUsePlateFabricationAuth.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CAADELStrMfgItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

