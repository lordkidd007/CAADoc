<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATICkeRelationFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICkeRelationFactory"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATICkeRelationFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICkeRelationFactory_45437','CATICkeRelationFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICkeRelationFactory</b>
</p>
<p>
<b><i>    Interface dedicated to Knowledge relations creation.</i></b><br>

 <b>Role</b>: manages the creation of Knowledge relations.
 This interface is implemented on feature container.<br>
 Note that the behavior of a Knowledge relation is that it does not need to be evaluated "by hand".<br>
 By default, the creation methods are creating an active relationship, that is evaluated within the method.<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIParmPublisher','','CATIParmPublisher') </script>, <script type="text/javascript"> activateLinkAnchor('CATIParmManipulator','','CATIParmManipulator') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Copy(CATICkeRelation_var&amp;)"><b>Copy</b></a>(CATICkeRelation_var&amp;)
<dd>  Creates a relation from another by copying it.
 <dt> o 
    <a href="#CreateAction(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeSignature_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateAction</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeSignature_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Creates an action.
 <dt> o 
    <a href="#CreateCheck(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateCheck</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a check between parameters (example : x > 3).
 <dt> o 
    <a href="#CreateDesignTable(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"><b>CreateDesignTable</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)
<dd>  Creates a fully functional design table (with its embedded sheet) from a file (excel or text file).
 <dt> o 
    <a href="#CreateDesignTable(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"><b>CreateDesignTable</b></a>(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)
<dd>  Creates a fully functional design table (with its embedded sheet) from the file name (excel or text file).
 <dt> o 
    <a href="#CreateDesignTable(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATIPsiRepresentationReference_var&amp;,int,int)"><b>CreateDesignTable</b></a>(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATIPsiRepresentationReference_var&amp;,int,int)
<dd>  Creates a fully functional design table (with its embedded sheet) from a Representation Reference.
 <dt> o 
    <a href="#CreateEquivalentDimensions(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateEquivalentDimensions</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Create an Equivalent Dimension.
 <dt> o 
    <a href="#CreateFormula(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateFormula</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a formula between parameters (example : y=3*x).
 <dt> o 
    <a href="#CreateKweMacro()"><b>CreateKweMacro</b></a>()
<dd>  Creates a feature macro with arguments.
 <dt> o 
    <a href="#CreateKweMacro(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateKweMacro</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Creates a feature macro with arguments.
 <dt> o 
    <a href="#CreateLaw(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateLaw</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Creates a law between parameters and formal parameters (example : y = sin(x) + Real.
 <dt> o 
    <a href="#CreateOptimizationConstraint(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateOptimizationConstraint</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Creates an optimization constraint (example : x > 3).
 <dt> o 
    <a href="#CreateOptimizationSet()"><b>CreateOptimizationSet</b></a>()
<dd>  Creates an optimization set.
 <dt> o 
    <a href="#CreateParameterSet(CATUnicodeString)"><b>CreateParameterSet</b></a>(CATUnicodeString)
<dd>  Creates a parameter set.
 <dt> o 
    <a href="#CreateProgram(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateProgram</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a rule between parameters (example : if (x> 3) y=3*x else y = 2).
 <dt> o 
    <a href="#CreateReaction()"><b>CreateReaction</b></a>()
<dd>  Creates a feature reaction.
 <dt> o 
    <a href="#CreateRelationSet(CATUnicodeString)"><b>CreateRelationSet</b></a>(CATUnicodeString)
<dd>  Creates a relation set.
 <dt> o 
    <a href="#CreateSheet(CATUnicodeString&amp;,int)"><b>CreateSheet</b></a>(CATUnicodeString&amp;,int)
<dd>  Creates a sheet feature.
 <dt> o 
    <a href="#CreateSheet(CATICkeSheet_var&amp;,CATIPsiRepresentationReference_var&amp;,int)"><b>CreateSheet</b></a>(CATICkeSheet_var&amp;,CATIPsiRepresentationReference_var&amp;,int)
<dd>  Creates a sheet feature.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Copy"></a><a name="Copy(CATICkeRelation_var&amp;)"></a> <dt> o <b>Copy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>Copy</b>(<td> const <script type="text/javascript"> activateLink('CATICkeRelation_var','CATICkeRelation_var&amp;')</script> <td><tt>iRelationToCopy</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Creates a relation from another by copying it.
 Works only on formulas, not on rules or checks.
 Works only on the same container.
 The copied relation must be aggregated.
 Note that second relation will reference the same parameters, il will be deactivated
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationToCopy</tt>
   <dd> parameter to copy </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeRelation_var relation copied
</dl>
</dl>
<a name="CreateAction"></a><a name="CreateAction(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeSignature_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateAction</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateAction</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeSignature_var','CATICkeSignature_var&amp;')</script> <td><tt>iSignature</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an action.
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 <br>
 If a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd>  program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment  !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iSignature</tt>
   <dd> external signature of the action </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs or outputs (Real.1 in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the program ("y = sin(x) + Real.1" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method <br> and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Action created or NULL_var if syntax error only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
 This method requires the Knowledge Advisor license (KWA)
</dl>
</dl>
<a name="CreateCheck"></a><a name="CreateCheck(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateCheck</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateCheck</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a check between parameters (example : x > 3).<br>
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the check ("x> 3" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method<br>  and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body. <br> <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  check created or NULL_var if syntax error <br>
 only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
</dl>
</dl>
<a name="CreateDesignTable"></a><a name="CreateDesignTable(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"></a> <dt> o <b>CreateDesignTable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIDesignTable','CATIDesignTable_var')</script>  <b>CreateDesignTable</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>orientation</tt><td><tt>= 1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>sheetWithoutFile</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a fully functional design table (with its embedded sheet) from a file (excel or text file).<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> The name of the design table </dd>
    <dt><tt> iComment</tt>
   <dd> The comment associated to the design table </dd>
    <dt><tt> iFilePath</tt>
   <dd>	The path of the sheet file.
	- If param sheetWithoutFile = 0 :
			if this path contains ".xls", the Excel format is assumed, else the tabulated text format is used.
			If this path is empty, no sheet is aggregated to the design table, and the user has to create a sheet 
			(method CreateSheet) and associate it to an excel or text file)
	- If param sheetWithoutFile = 1 :
			no matter with the content of this path
 </dd>
    <dt><tt> orientation</tt>
   <dd>	1 if vertical, 0 else (used only if path != "" and sheetWithoutFile = 0)
 </dd>
    <dt><tt> sheetWithoutFile</tt>
   <dd>	If sheetWithoutFile = 1, a model sheet is created (sheet with persitent memory storage, but no file)
	and it won't be possible to associate a file to this sheet.
 <br>
 only works on persistent factory. This object must be aggregated.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the created design table
</dl>
</dl>
<a name="CreateDesignTable"></a><a name="CreateDesignTable(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"></a> <dt> o <b>CreateDesignTable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateDesignTable</b>(<td><script type="text/javascript"> activateLink('CATIDesignTable_var','CATIDesignTable_var&amp;')</script> <td><tt>oDesignTable</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSheetWithoutFile</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a fully functional design table (with its embedded sheet) from the file name (excel or text file).<br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDesignTable</tt>
   <dd> the new design table.  </dd>
    <dt><tt> iRelationName</tt>
   <dd> The name of the design table </dd>
    <dt><tt> iComment</tt>
   <dd> The comment associated to the design table </dd>
    <dt><tt> iFilePath</tt>
   <dd>	The path of the sheet file.
	- If param sheetWithoutFile = 0 :
			if this path contains ".xls", the Excel format is assumed, else the tabulated text format is used.
			If this path is empty, no sheet is aggregated to the design table, and the user has to create a sheet 
			(method CreateSheet) and associate it to an excel or text file)
	- If param sheetWithoutFile = 1 :
			no matter with the content of this path
 </dd>
    <dt><tt> iOrientation</tt>
   <dd>	1 if vertical, 0 else (used only if path != "" and sheetWithoutFile = 0)
 </dd>
    <dt><tt> iSheetWithoutFile</tt>
   <dd>	If sheetWithoutFile = 1, a model sheet is created (sheet with persitent memory storage, but no file)
	and it won't be possible to associate a file to this sheet.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the method fails 		  S_OK if the method succeeds
 <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateDesignTable"></a><a name="CreateDesignTable(CATIDesignTable_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATIPsiRepresentationReference_var&amp;,int,int)"></a> <dt> o <b>CreateDesignTable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateDesignTable</b>(<td><script type="text/javascript"> activateLink('CATIDesignTable_var','CATIDesignTable_var&amp;')</script> <td><tt>oDesignTable</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIPsiRepresentationReference_var','CATIPsiRepresentationReference_var&amp;')</script> <td><tt>iRepresentation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSheetWithoutFile</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a fully functional design table (with its embedded sheet) from a Representation Reference.<br>
 Returns an handler on the new design table.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDesignTable</tt>
   <dd> the new design table.  </dd>
    <dt><tt> iRelationName</tt>
   <dd> The name of the design table </dd>
    <dt><tt> iComment</tt>
   <dd> The comment associated to the design table </dd>
    <dt><tt> iRepresentation</tt>
   <dd> The representation reference.	 </dd>
    <dt><tt> iOrientation</tt>
   <dd>	1 if vertical, 0 else (used only if path != "" and sheetWithoutFile = 0)
 </dd>
    <dt><tt> iSheetWithoutFile</tt>
   <dd>	If sheetWithoutFile = 1, a model sheet is created (sheet with persitent memory storage, but no file)
	and it won't be possible to associate a file to this sheet.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the method fails 		  S_OK if the method succeeds
 <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateEquivalentDimensions"></a><a name="CreateEquivalentDimensions(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateEquivalentDimensions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateEquivalentDimensions</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>name</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>comment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>family</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create an Equivalent Dimension.<br>
 if a syntax error occurs, NULL_var is returned<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> name</tt>
   <dd> program's name </dd>
    <dt><tt> comment</tt>
   <dd> comment </dd>
    <dt><tt> family</tt>
   <dd> not used !! </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  EquivalentDimension created or NULL_var if no EquivalentDimension has been created <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateFormula"></a><a name="CreateFormula(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateFormula</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateFormula</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iOutputParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a formula between parameters (example : y=3*x).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> formula's name </dd>
    <dt><tt> iComment</tt>
   <dd> no more used for formula !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iOutputParameter</tt>
   <dd> valuated parameter (y in our example) </dd>
    <dt><tt> iListOfParameters</tt>
   <dd>  (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the formula ("3*x" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method<br>  and so to be able to recognize parameters by their name <br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  <br>
 <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Formula created or NULL_var if syntax error<br> <br>
 only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
</dl>
</dl>
<a name="CreateKweMacro"></a><a name="CreateKweMacro()"></a> <dt> o <b>CreateKweMacro</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>CreateKweMacro</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a feature macro with arguments.<br>
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 It is initialized like the following : <br>
 no argument<br>
 the entry point is called <it>main</it><br>
 the body is empty
 This method requires the KWA license (Knowledge Advisor).
 The object must be aggregated.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the macro created
</dl>
</dl>
<a name="CreateKweMacro"></a><a name="CreateKweMacro(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateKweMacro</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeFunction','CATICkeFunction_var')</script>  <b>CreateKweMacro</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iArgumentString</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iScriptText</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a feature macro with arguments.<br>
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 It is initialized with the given arguments
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArgumentString</tt>
   <dd> the argument string </dd>
    <dt><tt> iScriptText</tt>
   <dd> the script text </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The feature macro 
  <dt> Example: </dt>
  <dd> <pre class="code">	CATICkeFunction_var MyFunc = MyFact->CreateKweMacro("MyArg","MyArg.Value = 10.0\nEnd Sub");</pre></dd>
</dl>
</dl>
<a name="CreateLaw"></a><a name="CreateLaw(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateLaw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateLaw</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfFormalParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a law between parameters and formal parameters (example : y = sin(x) + Real.1).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd>  program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment  !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs or outputs (Real.1 in our example)   </dd>
    <dt><tt> iListOfFormalParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains formal literal used in inputs or outputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the program ("y = sin(x) + Real.1" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method <br> and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Rule created or NULL_var if syntax error only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
</dl>
</dl>
<a name="CreateOptimizationConstraint"></a><a name="CreateOptimizationConstraint(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateOptimizationConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateOptimizationConstraint</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iPrecision</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPriority</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an optimization constraint (example : x > 3).
 
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> optimization constraint's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment </dd>
    <dt><tt> iPrecision</tt>
   <dd> precision attached to the comparison </dd>
    <dt><tt> iPriority</tt>
   <dd> priority of the optimization constraint in the context of a multiple constrained optimization </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the check ("x> 3" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method  and so to be able to recognize parameters by their name <br>
 Not used in realnames = false mode
 </dd>
    <dt><tt> iRealnames</tt>
   <dd> 2 possibilities to name a parameter in the body. <br> <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  = optimization constraint created or NULL_var if syntax error <br>
 only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
 This method reuires the PEO license (Product Engineering Optimizer).
</dl>
</dl>
<a name="CreateOptimizationSet"></a><a name="CreateOptimizationSet()"></a> <dt> o <b>CreateOptimizationSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher_var')</script>  <b>CreateOptimizationSet</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an optimization set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> name</tt>
   <dd> name of the optimization set. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the newly created optimization set viewed a a parameter publisher. <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateParameterSet"></a><a name="CreateParameterSet(CATUnicodeString)"></a> <dt> o <b>CreateParameterSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher_var')</script>  <b>CreateParameterSet</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>name</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a parameter set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> name</tt>
   <dd> name of the parameter set. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the newly created relation set viewed a a parameter publisher. <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateProgram"></a><a name="CreateProgram(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateProgram</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateProgram</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a rule between parameters (example : if (x> 3) y=3*x else y = 2).<br>
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd>  program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment  !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs or outputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the program ("if (x> 3) y=3*x else y = 2" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method <br> and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Rule created or NULL_var if syntax error <br>
 only works on persistent factory. This object must be aggregated.
 The parameters passed as arguments must be in the same container as the relation. This will be enforced in the future release
 to allow only supported model.
</dl>
</dl>
<a name="CreateReaction"></a><a name="CreateReaction()"></a> <dt> o <b>CreateReaction</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>CreateReaction</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a feature reaction.
 Watch out: to use this service, you need to have the Knowledge Advisor license at runtime.<br> 
 This object must be aggregated.
 This method requires the Knowledge Advisor license (KWA).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the reaction feature
</dl>
</dl>
<a name="CreateRelationSet"></a><a name="CreateRelationSet(CATUnicodeString)"></a> <dt> o <b>CreateRelationSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher_var')</script>  <b>CreateRelationSet</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>name</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a relation set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> name</tt>
   <dd> name of the relation set. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the newly created relation set viewed a a parameter publisher. <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateSheet"></a><a name="CreateSheet(CATUnicodeString&amp;,int)"></a> <dt> o <b>CreateSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSheet','CATICkeSheet_var')</script>  <b>CreateSheet</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iType</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a sheet feature.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilePath</tt>
   <dd> The path of the source file. It can be an Excel or a Lotus sheet or a tabulated text file, or an empty path (if iType != 4, you'll have to call 
 CreateSourceFile on CATICkeSheet interface).
 If the path isn't empty and the file doesn't exist, the file is created.
 </dd>
    <dt><tt> iType</tt>
   <dd> - if iType = 4, whatever the content of the path, a model sheet 
   is created (sheet with persitent memory storage, but no file) 
 - if path is empty, uses the type to know what kind of sheet has to be created
   <br><b>Legal values</b>: the test can be either
   <tt>1</tt> Excel one.
   <tt>2</tt> Text one
   <tt>3</tt> Lotus one
   <tt>4</tt> Model one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the created sheet. It returns NULL_var if the file creation failed (in the case where the file has to be created) or if Excel or Lotus is asked on UNIX
 <br>
 only works on persistent factory. This object must be aggregated.
</dl>
</dl>
<a name="CreateSheet"></a><a name="CreateSheet(CATICkeSheet_var&amp;,CATIPsiRepresentationReference_var&amp;,int)"></a> <dt> o <b>CreateSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateSheet</b>(<td><script type="text/javascript"> activateLink('CATICkeSheet_var','CATICkeSheet_var&amp;')</script> <td><tt>oSheet</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIPsiRepresentationReference_var','CATIPsiRepresentationReference_var&amp;')</script> <td><tt>iRepresentation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSheetWithoutFile</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a sheet feature. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSheet</tt>
   <dd> The sheet feature </dd>
    <dt><tt> iRepresentation</tt>
   <dd> The representation reference.	 </dd>
    <dt><tt> iSheetWithoutFile</tt>
   <dd>	If sheetWithoutFile = 1, a model sheet is created (sheet with persitent memory storage, but no file)
	and it won't be possible to associate a file to this sheet.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the method fails for example if Excel or Lotus is asked on UNIX		  S_OK if the method succeeds
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICkeRelationFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

