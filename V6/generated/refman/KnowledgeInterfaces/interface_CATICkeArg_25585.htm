<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATICkeArg</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICkeArg"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATICkeArg</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICkeArg_25585','CATICkeArg','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICkeArg</b>
</p>
<p>
<b><i>    Interface to manage signatures formal arguments.</i></b><br>

 <b>Role</b>: An argument belongs to a signature.<br>
 It describes the type of parameters that will be given to the Knowledge function at runtime.<br>
 It is used to check syntax validity.<br>
 <br>Example: in signature "sin (x:In Real)" the only argument is "x: In Real".<br> 
 this interface is mono implemented.<br>
 Arguments are created by <script type="text/javascript"> activateLinkAnchor('CATICkeFunctionFactory','CreateArg','CATICkeFunctionFactory.CreateArg') </script>.<br> Knowledge expressions and Knowledge functions have a signature that has arguments.<br>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATICkeSignature','','CATICkeSignature') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeFunctionFactory','','CATICkeFunctionFactory') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeFunction','','CATICkeFunction') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetMode()"><b>GetMode</b></a>()
<dd>  Returns the mode of the argument.
 <dt> o 
    <a href="#Name()"><b>Name</b></a>()
<dd>  Returns the name of the argument.
 <dt> o 
    <a href="#Rename(CATUnicodeString&amp;)"><b>Rename</b></a>(CATUnicodeString&amp;)
<dd>  Renames the argument.
 <dt> o 
    <a href="#SetMode(CATICkeArg::Mode)"><b>SetMode</b></a>(CATICkeArg::Mode)
<dd>  Sets the mode of the argument.
 <dt> o 
    <a href="#Show()"><b>Show</b></a>()
<dd>  Returns the string to be shown to the user to describe the argument.
 <dt> o 
    <a href="#Type()"><b>Type</b></a>()
<dd>  Returns the Knowledge type of the argument.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#Mode"><b>Mode</b></a>
<dd>  Enum describing the argument mode.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetMode"></a><a name="GetMode()"></a> <dt> o <b>GetMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeArg::Mode','CATICkeArg::Mode')</script>  <b>GetMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of the argument.
 <br><b>Legal values</b>: the mode can be either
 <tt>In</tt> when parameter will be used as an input.
 <tt>Out</tt> when parameter will be used as an output.
</dl>
<a name="Name"></a><a name="Name()"></a> <dt> o <b>Name</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Name</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the argument.<br>
 Example: "x"
</dl>
<a name="Rename"></a><a name="Rename(CATUnicodeString&amp;)"></a> <dt> o <b>Rename</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Rename</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iNewName</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Renames the argument.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iNewName</tt>
   <dd> new name to be given to the argument <br> Note that this method is supposed to be used only at the definition stage of an argument. It is not supposed to be modified afterwards
 on existing signatures.</dd>
</dl>
</dl>
</dl>
<a name="SetMode"></a><a name="SetMode(CATICkeArg::Mode)"></a> <dt> o <b>SetMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetMode</b>(<td> const <script type="text/javascript"> activateLink('CATICkeArg::Mode','CATICkeArg::Mode')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the mode of the argument.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMode</tt>
   <dd> mode of the argument.<br> <li> In : for a parameter in input</li>
 <li> Out : for a parameter in output</li>
 <li> InOut : for a parameter in output and input</li>  
 Note that this method is supposed to be used only at the definition stage of an argument. It is not supposed to be modified afterwards
 on existing signatures.</dd>
</dl>
</dl>
</dl>
<a name="Show"></a><a name="Show()"></a> <dt> o <b>Show</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Show</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the string to be shown to the user to describe the argument.<br> 
 Use it whenever you want to show an argument to the user (instead of name).<br>
 Example: " x : In Real".<br>
</dl>
<a name="Type"></a><a name="Type()"></a> <dt> o <b>Type</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeType','CATICkeType_var')</script>  <b>Type</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the Knowledge type of the argument.<br>
 Example: Real
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="Mode"> <dt> o <b>Mode</b>
<dl>
  <dd>
<pre>
enum <b>Mode</b> {
  Undefined,
  In,
  Out,
  InOut
}
</pre>
 Enum describing the argument mode.   It explains if parameter will be read or written
</dl>
<hr>
 This object is included in the file: <b>CATICkeArg.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

