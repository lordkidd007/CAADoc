<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATCkeEvalContext</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATCkeEvalContext"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATCkeEvalContext</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCkeEvalContext_32987','CATCkeEvalContext','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCkeEvalContext</b>
</p>
<p>
<b><i>    Class dedicated to evaluation context information management.</i></b><br>

 <b>Role</b>: When a Knowledge relation or a Knowledge expression is evaluated, it creates such an object that is known by all the evaluators of the expression tree.<br>
 Those evaluators can then use this context to know the container or relation for example.<br></p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BusinessRulesContext()"><b>BusinessRulesContext</b></a>()
<dd>  Indicates if the evaluation is done in Business Rule context.
 <dt> o 
    <a href="#ClearIntermediates()"><b>ClearIntermediates</b></a>()
<dd>   Clear intermediate features.
 <dt> o 
    <a href="#Container()"><b>Container</b></a>()
<dd>   Returns the current container if any.
 <dt> o 
    <a href="#GetSourceKind()"><b>GetSourceKind</b></a>()
<dd>  Returns the source kind.
 <dt> o 
    <a href="#IsInstanceLocked(CATBaseUnknown_var&amp;)"><b>IsInstanceLocked</b></a>(CATBaseUnknown_var&amp;)
<dd>  Some instances (objects) are locked and cannot be modified.
 <dt> o 
    <a href="#PreventsObjectModification()"><b>PreventsObjectModification</b></a>()
<dd>   Indicates if the evaluation prevents object modification.
 <dt> o 
    <a href="#Relation()"><b>Relation</b></a>()
<dd>   Returns the current relation if any.
 <dt> o 
    <a href="#Root()"><b>Root</b></a>()
<dd>  Returns the current root if any.
 <dt> o 
    <a href="#SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)"><b>SendError</b></a>(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)
<dd>  Send Error.
 <dt> o 
    <a href="#SetContainer(CATICkeParmFactory_var&amp;)"><b>SetContainer</b></a>(CATICkeParmFactory_var&amp;)
<dd>  Sets the current container.
 <dt> o 
    <a href="#Source()"><b>Source</b></a>()
<dd>   Returns the objet source of the error (relation was too restrictive).
 <dt> o 
    <a href="#SourceAsObject()"><b>SourceAsObject</b></a>()
<dd>   Returns the objet source of the error (CATICkeNaming was too restrictive).
 <dt> o 
    <a href="#StoreAndUpdateTemporaryObject(CATBaseUnknown_var&amp;)"><b>StoreAndUpdateTemporaryObject</b></a>(CATBaseUnknown_var&amp;)
<dd>  Expressional relations allow datum geometry valuation (for example: point.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#SourceKind"><b>SourceKind</b></a>
<dd>  Enumerated value that defines which kind of Knowledge object .
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="BusinessRulesContext"></a><a name="BusinessRulesContext()"></a> <dt> o <b>BusinessRulesContext</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>BusinessRulesContext</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the evaluation is done in Business Rule context.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  TRUE is the evaluation is done in the business rule context.
</dl>
</dl>
<a name="ClearIntermediates"></a><a name="ClearIntermediates()"></a> <dt> o <b>ClearIntermediates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ClearIntermediates</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Clear intermediate features.
</dl>
<a name="Container"></a><a name="Container()"></a> <dt> o <b>Container</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParmFactory','CATICkeParmFactory_var')</script>  <b>Container</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the current container if any.
</dl>
<a name="GetSourceKind"></a><a name="GetSourceKind()"></a> <dt> o <b>GetSourceKind</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCkeEvalContext::SourceKind','CATCkeEvalContext::SourceKind')</script>  <b>GetSourceKind</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the source kind.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Source kind
</dl>
</dl>
<a name="IsInstanceLocked"></a><a name="IsInstanceLocked(CATBaseUnknown_var&amp;)"></a> <dt> o <b>IsInstanceLocked</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsInstanceLocked</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Some instances (objects) are locked and cannot be modified.
 Default implementation returns S_FALSE
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> object that we want to test </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_TRUE is the instance is locked, S_FALSE instead.
</dl>
</dl>
<a name="PreventsObjectModification"></a><a name="PreventsObjectModification()"></a> <dt> o <b>PreventsObjectModification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>PreventsObjectModification</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Indicates if the evaluation prevents object modification.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  TRUE is the evaluation prevents object modification.
</dl>
</dl>
<a name="Relation"></a><a name="Relation()"></a> <dt> o <b>Relation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>Relation</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the current relation if any.
</dl>
<a name="Root"></a><a name="Root()"></a> <dt> o <b>Root</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher_var')</script>  <b>Root</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the current root if any. The root is used to compute object path when we want to raise errors and show the path of the objects.
 May be NULL
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The current root if any.
</dl>
</dl>
<a name="SendError"></a><a name="SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)"></a> <dt> o <b>SendError</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SendError</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt><td><tt>= " "</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATKWEErrorSeverity::Severity','CATKWEErrorSeverity::Severity')</script> <td><tt>iSeverity</tt><td><tt>= CATKWEErrorSeverity::Information</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iSource</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Send Error. To be used in the definition of user functions.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> Message. Must be NLS. </dd>
    <dt><tt> iSeverity</tt>
   <dd> Severity. </dd>
    <dt><tt> iSource</tt>
   <dd> Source </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="SetContainer"></a><a name="SetContainer(CATICkeParmFactory_var&amp;)"></a> <dt> o <b>SetContainer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetContainer</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParmFactory_var','CATICkeParmFactory_var&amp;')</script> <td><tt>iContainer</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the current container.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iContainer</tt>
   <dd> container that becomes the current one.</dd>
</dl>
</dl>
</dl>
<a name="Source"></a><a name="Source()"></a> <dt> o <b>Source</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeNaming','CATICkeNaming_var')</script>  <b>Source</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the objet source of the error (relation was too restrictive).
</dl>
<a name="SourceAsObject"></a><a name="SourceAsObject()"></a> <dt> o <b>SourceAsObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject_var')</script>  <b>SourceAsObject</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the objet source of the error (CATICkeNaming was too restrictive).
</dl>
<a name="StoreAndUpdateTemporaryObject"></a><a name="StoreAndUpdateTemporaryObject(CATBaseUnknown_var&amp;)"></a> <dt> o <b>StoreAndUpdateTemporaryObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>StoreAndUpdateTemporaryObject</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Expressional relations allow datum geometry valuation (for example: point.1 = point(0mm, 10mm, 20mm)).
 To enable such a functionality, functions have to return temporary geometry whose geometrical result is to
 be copied into the datum. This temporary geometry life cycle can not be managed by function code because 
 the returned object can be used several times in the expression, so it has to be valid until the end of the expression
 evaluation. This method allows to solve this problem: the relation stores the temporary geometry and manages itself
 its life cycle. It is mandatory to call this method for any returned geometry that is created inside a function.
 Note that if the function needs to create several geometrical features, it has either to delete them before returning result or
 to call StoreAndUpdateTemporaryObject for each of them.
 <b>This method updates argument (and possibly raises an error), so caller should not do it himself</b>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> the temporary object whose life cycle has to be managed by the relation
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if object is NULL_var or is aggregated, S_OK otherwise
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="SourceKind"> <dt> o <b>SourceKind</b>
<dl>
  <dd>
<pre>
enum <b>SourceKind</b> {
  Undefined,
  Formula,
  Law,
  Rule,
  Check,
  Reaction,
  SetOfEquations,
  Pattern,
  OptimizationConstraint,
  ConstraintSatisfaction,
  ExpertRule,
  ExpertCheck,
  UIEvent,
  Behavior,
  Method,
  BusinessRules,
  Expression,
  Generative
}
</pre>
 Enumerated value that defines which kind of Knowledge object .<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Undefined</tt>
   <dd> The source is undefined.
 </dd>
    <dt><tt> Formula</tt>
   <dd> The source is a formula.
 </dd>
    <dt><tt> Law</tt>
   <dd> The source is a Law.
 </dd>
    <dt><tt> Rule</tt>
   <dd> The source is a Knowledge Advisor rule.
 </dd>
    <dt><tt> Check</tt>
   <dd> The source is a Knowledge Advisor check.
 </dd>
    <dt><tt> Reaction</tt>
   <dd> The source is a Knowledge Advisor reaction or an action.
 </dd>
    <dt><tt> SetOfEquations</tt>
   <dd> The source is a Knowledge Advisor set of equation.
 </dd>
    <dt><tt> Pattern</tt>
   <dd> The source is a Product Knowledge Template pattern.
 </dd>
    <dt><tt> OptimizationConstraint</tt>
   <dd> The source is a Product Engineering optimizer optimization constraint.
 </dd>
    <dt><tt> ConstraintSatisfaction</tt>
   <dd> The source is a Product Engineering optimizer constraint satisfaction.
 </dd>
    <dt><tt> ExpertRule</tt>
   <dd> The source is a Knowledge Expert rule.
 </dd>
    <dt><tt> ExpertCheck</tt>
   <dd> The source is a Knowledge Expert check.
 </dd>
    <dt><tt> UIEvent</tt>
   <dd> The source is a UI Event (Knowledge Based Dialogs).
 </dd>
    <dt><tt> Behavior</tt>
   <dd> The source is a Behavior(Engineering process automation).
 </dd>
    <dt><tt> Method</tt>
   <dd> The source is a Method(Engineering process automation).
 </dd>
    <dt><tt> BusinessRules</tt>
   <dd> The source is a business rules.
 </dd>
    <dt><tt> Expression</tt>
   <dd> The source is a simple expression.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCkeEvalContext.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

