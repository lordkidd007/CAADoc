<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATKweObjectAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATKweObjectAdapter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATKweObjectAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATKweObjectAdapter_36208','CATKweObjectAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATKweObjectAdapter</b>
</p>
<p>
<b><i> Class to be used as an adapter for objects that want to implement CATICkeFeature or CATICkeObject (or both).</i></b><br>
<br>

 In addition to extension, you must create one of the TIE object with 
 - TIEchain_CATICkeFeature
 - TIEchain_CATICkeObject</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATKweObjectAdapter()"><b>CATKweObjectAdapter</b></a>()
<dd>  Constructor.
 <dt> o 
    <a href="#~CATKweObjectAdapter()"><b>~CATKweObjectAdapter</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetLogicalName(CATUnicodeString&amp;)"><b>GetLogicalName</b></a>(CATUnicodeString&amp;)
<dd>  Returns the Logical name of the object.
 <dt> o 
    <a href="#GetType()"><b>GetType</b></a>()
<dd>  Returns the type of the object.
 <dt> o 
    <a href="#IsPublic()"><b>IsPublic</b></a>()
<dd>  Indicates if this object provides access to its simple attributes through generic methods CATCkeObjectAttrReadServices and CATCkeObjectAttrWriteServices.
 <dt> o 
    <a href="#SetLogicalName(CATUnicodeString&amp;)"><b>SetLogicalName</b></a>(CATUnicodeString&amp;)
<dd>  Sets the Logical name of the object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATKweObjectAdapter"></a><a name="CATKweObjectAdapter()"></a> <dt> o <b>CATKweObjectAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATKweObjectAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor.
</dl>
<a name="~CATKweObjectAdapter"></a><a name="~CATKweObjectAdapter()"></a> <dt> o <b>~CATKweObjectAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATKweObjectAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetLogicalName"></a><a name="GetLogicalName(CATUnicodeString&amp;)"></a> <dt> o <b>GetLogicalName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLogicalName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oLogicalName</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
 Default implementation relies on CATIAlias::GetAlias method.<br>
 For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
 As a consequence, for PLM objects, this method MUST BE overriden.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLogicalName</tt>
   <dd> Logical name in output
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_ACCESSDENIED if the logical name cannot be read.
 	 <li> E_FAIL if the logical name cannot be read.
 	 <li> S_OK	if the logical name has been read successfully.
  </ol>
</dl>
</dl>
<a name="GetType"></a><a name="GetType()"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeType','CATICkeType_var')</script>  <b>GetType</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the type of the object.
 This type is used to check that the formula (rule or check) syntax is correct. 
 If your object implements CATIInstance, the classical implementation returns the CATIInstance::Type method.
 If not, usually the implementation consists in calling CATGlobalFunctions::GetTypeDictionary()->FindTypeSafe("TypeName","PackageName",oType)
 Default implementation returns the Feature type.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the main type of the object. It is also a CATIType.
</dl>
</dl>
<a name="IsPublic"></a><a name="IsPublic()"></a> <dt> o <b>IsPublic</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsPublic</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this object provides access to its simple attributes through generic methods CATCkeObjectAttrReadServices and CATCkeObjectAttrWriteServices.<br>
 Default implementation returns FALSE. Can be overriden.<br>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  indicates if this object provides access to its simple attributes through generic methods.
</dl>
</dl>
<a name="SetLogicalName"></a><a name="SetLogicalName(CATUnicodeString&amp;)"></a> <dt> o <b>SetLogicalName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLogicalName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iLogicalName</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Sets the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
 Default implementation relies on CATIAlias::SetAlias method.<br>
 For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
 As a consequence, for PLM objects, this method MUST BE overriden.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLogicalName</tt>
   <dd> Logical name in input </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  HRESULT  <ol>
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> E_FAIL if the logical name cannot be set.
 	 <li> S_OK	if the logical name has been set successfully.
  </ol>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATKweObjectAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

