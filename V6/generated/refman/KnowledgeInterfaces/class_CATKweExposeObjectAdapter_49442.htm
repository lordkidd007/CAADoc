<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATKweExposeObjectAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATKweExposeObjectAdapter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATKweExposeObjectAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATKweExposeObjectAdapter_49442','CATKweExposeObjectAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATKweExposeObjectAdapter</b>
</p>
<p>
<b><i> Class to be used as an adapter for objects that want to be used through Knowledge Expert and Search.</i></b><br>
 Dedicated for CAA partner<br>

 First of all, it inherits from CATKweObjectAdapter which is an adapter of CATICkeObject interface. This interface enables to represent Knowledge objects.

 It is mainly an adapter of CATIExposeObject. This interface is used by Knowledge Expert to 
 identify an object through its type. It is also used by the Edit/Find of CATIA.

 In addition to extension, you must create the TIE object with 
 - TIEchain_CATIExposeObject
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATKweExposeObjectAdapter()"><b>CATKweExposeObjectAdapter</b></a>()
<dd>  Constructor.
 <dt> o 
    <a href="#~CATKweExposeObjectAdapter()"><b>~CATKweExposeObjectAdapter</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetLogicalName(CATUnicodeString&amp;)"><b>GetLogicalName</b></a>(CATUnicodeString&amp;)
<dd>  Returns the Logical name of the object.
 <dt> o 
    <a href="#GetOwner()"><b>GetOwner</b></a>()
<dd>  Description: returns the owner of the object.
 <dt> o 
    <a href="#GetValue(CATUnicodeString&amp;)"><b>GetValue</b></a>(CATUnicodeString&amp;)
<dd>   Description: Gets an attributes value.
 <dt> o 
    <a href="#GetValueInternal(CATUnicodeString&amp;)"><b>GetValueInternal</b></a>(CATUnicodeString&amp;)
<dd>   Description: Gets an attributes value.
 <dt> o 
    <a href="#IsSupporting(CATIType_var&amp;)"><b>IsSupporting</b></a>(CATIType_var&amp;)
<dd>   Description: Tests if an object supports a given type.
 <dt> o 
    <a href="#ListSupportedTypes(CATListValCATIType_var&amp;)"><b>ListSupportedTypes</b></a>(CATListValCATIType_var&amp;)
<dd>   Description: fills the list of types supported by this object.
 <dt> o 
    <a href="#ListSupportedTypesInternal(CATListValCATIType_var&amp;)"><b>ListSupportedTypesInternal</b></a>(CATListValCATIType_var&amp;)
<dd>   Description: fills the list of types supported by this object in addition to the one returned by Type method.
 <dt> o 
    <a href="#SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity)"><b>SendError</b></a>(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity)
<dd>   Description: Raises an error.
 <dt> o 
    <a href="#SetLogicalName(CATUnicodeString&amp;)"><b>SetLogicalName</b></a>(CATUnicodeString&amp;)
<dd>  Sets the Logical name of the object.
 <dt> o 
    <a href="#SetValue(CATUnicodeString&amp;,CATIValue_var&amp;)"><b>SetValue</b></a>(CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>   Description: Sets an attributes value.
 <dt> o 
    <a href="#SetValueInternal(CATUnicodeString&amp;,CATIValue_var&amp;)"><b>SetValueInternal</b></a>(CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>   Description: Sets an attributes value.
 <dt> o 
    <a href="#Type()"><b>Type</b></a>()
<dd>   Description: Returns the main type of an object.
 <dt> o 
    <a href="#TypeInternal()"><b>TypeInternal</b></a>()
<dd>   Description: Returns the main type of an object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATKweExposeObjectAdapter"></a><a name="CATKweExposeObjectAdapter()"></a> <dt> o <b>CATKweExposeObjectAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATKweExposeObjectAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor.
</dl>
<a name="~CATKweExposeObjectAdapter"></a><a name="~CATKweExposeObjectAdapter()"></a> <dt> o <b>~CATKweExposeObjectAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATKweExposeObjectAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="GetLogicalName"></a><a name="GetLogicalName(CATUnicodeString&amp;)"></a> <dt> o <b>GetLogicalName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLogicalName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oLogicalName</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
 Default implementation relies on CATIAlias::GetAlias method.<br>
 For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
 As a consequence, for PLM objects, this method MUST BE overriden.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLogicalName</tt>
   <dd> Logical name in output
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_ACCESSDENIED if the logical name cannot be read.
 	 <li> E_FAIL if the logical name cannot be read.
 	 <li> S_OK	if the logical name has been read successfully.
  </ol>
</dl>
</dl>
<a name="GetOwner"></a><a name="GetOwner()"></a> <dt> o <b>GetOwner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject*')</script>  <b>GetOwner</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Description: returns the owner of the object.
 Default implementation returns NULL
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  [CATBaseUnknown#Release] The Owner (an  AddRef  is  done,  if  not  NULL).
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIValue','CATIValue*')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Description: Gets an attributes value.<br>
  Default implementation calls first GetValueInternal to have access to your attributes. 
  Then it calls GetAccessors, trying to read value for the attributes that have accessors.
  able to access those kind of attributes.
  Do not override this method.<br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey:</tt>
   <dd> the name of the attribute.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] iValue: the value of the attribute (an AddRef is done) It can return NULL.
</dl>
</dl>
<a name="GetValueInternal"></a><a name="GetValueInternal(CATUnicodeString&amp;)"></a> <dt> o <b>GetValueInternal</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('CATIValue','CATIValue*')</script>  <b>GetValueInternal</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Description: Gets an attributes value. Must be re-implemented when deriving 
  from this adapter.<br>
  Default implementation does nothing. This method is called by GetValue.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey:</tt>
   <dd> the name of the attribute.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] iValue: the value of the attribute (an AddRef is done) It can return NULL.
</dl>
</dl>
<a name="IsSupporting"></a><a name="IsSupporting(CATIType_var&amp;)"></a> <dt> o <b>IsSupporting</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject*')</script>  <b>IsSupporting</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Description: Tests if an object supports a given type.<br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> type that we want to check.<br>  An AddRef is done. Warning : In most cases, you don't need to override this method.<br>
  Default implementation returns this if the type belongs to the list of supported types.
  You may overide this method if you want to return another object (delegation).
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release]  the instance supporting this type (may be NULL or self)
</dl>
</dl>
<a name="ListSupportedTypes"></a><a name="ListSupportedTypes(CATListValCATIType_var&amp;)"></a> <dt> o <b>ListSupportedTypes</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListSupportedTypes</b>(<td><script type="text/javascript"> activateLink('CATListValCATIType_var','CATListValCATIType_var&amp;')</script> <td><tt>oListOfCATIType</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Description: fills the list of types supported by this object.
  Warning : Do not redefined this method. Redefine ListSupportedTypesInternal.
  Default implementation returns a list containing main Type first returned by Type method.
  and the list of types returned by ListSupportedTypesInternal. 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCATIType</tt>
   <dd> this list is filled.<br>  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="ListSupportedTypesInternal"></a><a name="ListSupportedTypesInternal(CATListValCATIType_var&amp;)"></a> <dt> o <b>ListSupportedTypesInternal</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListSupportedTypesInternal</b>(<td><script type="text/javascript"> activateLink('CATListValCATIType_var','CATListValCATIType_var&amp;')</script> <td><tt>oListOfCATIType</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Description: fills the list of types supported by this object in addition to the one returned by Type method.<br>
  Default implementation adds nothing. In most cases, you don't need to implement this method. This method is called by the ListSupportedTypes method.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCATIType</tt>
   <dd> this list is filled.<br>  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="SendError"></a><a name="SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity)"></a> <dt> o <b>SendError</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SendError</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATKWEErrorSeverity::Severity','CATKWEErrorSeverity::Severity')</script> <td><tt>iSeverity</tt><td><tt>= CATKWEErrorSeverity::Error</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
  Description: Raises an error. Use this method inside the GetValueInternal & SetValueInternal
  when you want to bring to the user more explanation about why the read or write operations has failed.<br>
  Note that you don't need to raise message (& use this method) in the standard error cases (bad type, attribute not found, attribute read only, ...
  Simply return the right HRESULT (E_INVALID_ARG, E_ACCESSDENIED) and a standard error message is raised (InexistingAttribute, ReadAttributeBadKind, ReadOnlyAttribute ).<br>  
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage:</tt>
   <dd> the NLS message that will be brought to the end-user.  </dd>
    <dt><tt> iSeverity:</tt>
   <dd> severity of the error.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="SetLogicalName"></a><a name="SetLogicalName(CATUnicodeString&amp;)"></a> <dt> o <b>SetLogicalName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLogicalName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iLogicalName</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Sets the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
 Default implementation relies on CATIAlias::SetAlias method.<br>
 For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
 As a consequence, for PLM objects, this method MUST BE overriden.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLogicalName</tt>
   <dd> Logical name in input
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> E_FAIL if the logical name cannot be set.
 	 <li> S_OK	if the logical name has been set successfully.
  </ol>
</dl>
</dl>
<a name="SetValue"></a><a name="SetValue(CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>SetValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetValue</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Description: Sets an attributes value.
  Default implementation calls first SetValueIntenal, and finally, tries to valuate the attribute if it has an accessor.<br>
  Do not override this method.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey:</tt>
   <dd> the name of the attribute.  </dd>
    <dt><tt> iValue:</tt>
   <dd> the value of the attribute. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the valuation has failed (attribute non existing on object, attribute of a bad type).
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> S_OK	if the attribute has been set successfully.
  </ol>
</dl>
</dl>
<a name="SetValueInternal"></a><a name="SetValueInternal(CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>SetValueInternal</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetValueInternal</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Description: Sets an attributes value. Must be re-implemented when deriving 
  from this adapter.<br>
  Default implementation returns E_NOTIMPL. This method is called by the SetValue method

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey:</tt>
   <dd> the name of the attribute.  </dd>
    <dt><tt> iValue:</tt>
   <dd> the value of the attribute.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_NOTIMPL if this method is overridden but that the SetValue is not done by your implementation.
 	 <li> E_INVALIDARG if the valuation has failed (attribute non existing on object, attribute of a bad type).
 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
 	 <li> S_OK	if the attribute has been set successfully.
  </ol>
</dl>
</dl>
<a name="Type"></a><a name="Type()"></a> <dt> o <b>Type</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIType','CATIType*')</script>  <b>Type</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Description: Returns the main type of an object.<br>
  An AddRef is done. Warning : Do not redefined this method. Redefine TypeInternal.<br>
  Default implementation calls TypeInternal(). And if the result is NULL, will return the root type "Feature".<br>
  
<dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release]  the main type of the object.
</dl>
</dl>
<a name="TypeInternal"></a><a name="TypeInternal()"></a> <dt> o <b>TypeInternal</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('CATIType','CATIType*')</script>  <b>TypeInternal</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Description: Returns the main type of an object.
  An AddRef must be done. This method must be re-implemented.
  The classic implementation of this method is to use
  CATGlobalFunctions::GetTypeDictionary()->FindSafe("MyType","MyPackage",oType)
  and return oType after having done an AddRef.
  This method finds a type by its name and loads the package in which the type
  is defined if needed.
  this method is called by the Type() method.
  If you do not want to specify an accurate type, you can return NULL and Type method
  will return the type Feature
  
<dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] the main type of the object.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATKweExposeObjectAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

