<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATParmPublisherAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATParmPublisherAdapter"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATParmPublisherAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATParmPublisherAdapter_44960','CATParmPublisherAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATParmPublisherAdapter</b>
</p>
<p>
<b><i>    CAA Adapter to CATIParmPublisher Interface.</i></b><br>

 <b>Role</b>: This class should be derived to implement features extension to CATIParmPublisher.<br>
 CATIParmPublisher is the interface used by Knowledgeware to have access to all the parameters<br>
 and relations of a feature.<br>
 It is also used on some objects to add user parameters and relations to features<br>
 The intent of this adapter is not to provide a default implementation: in fact the default implementation is usually to do nothing.<br>
 We provide an adapter to enable the introduction of new methods in the future on the CATIParmPublisher interface without breaking the 
 buildtime of our CAA customers.<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIParmPublisher','','CATIParmPublisher') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATParmPublisherAdapter()"><b>CATParmPublisherAdapter</b></a>()
<dd>   Constructs the extension.
 <dt> o 
    <a href="#~CATParmPublisherAdapter()"><b>~CATParmPublisherAdapter</b></a>()
<dd>   Deletes the extension.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddComponent(CATICkeObject_var&amp;)"><b>AddComponent</b></a>(CATICkeObject_var&amp;)
<dd>  Appends components under the object.
 <dt> o 
    <a href="#AllowAppend()"><b>AllowAppend</b></a>()
<dd>  Indicates if this object allow the use of AddComponent (and RemoveComponent) method.
 <dt> o 
    <a href="#AllowUserAppend()"><b>AllowUserAppend</b></a>()
<dd>  Indicates if this publisher allows the use of Append (and RemoveChild) method.
 <dt> o 
    <a href="#AppendElement(CATBaseUnknown_var&amp;)"><b>AppendElement</b></a>(CATBaseUnknown_var&amp;)
<dd>  Appends a user parameter or a relation to this feature.
 <dt> o 
    <a href="#GetFactory()"><b>GetFactory</b></a>()
<dd>   This method has to return the associated container of the publisher.
 <dt> o 
    <a href="#RemoveComponent(CATICkeObject_var&amp;)"><b>RemoveComponent</b></a>(CATICkeObject_var&amp;)
<dd>  Removes components under the object.
 <dt> o 
    <a href="#RemoveElement(CATBaseUnknown_var&amp;)"><b>RemoveElement</b></a>(CATBaseUnknown_var&amp;)
<dd>  Removes a user parameter or a relation from this feature.
 <dt> o 
    <a href="#RetrieveDirectChildren(CATClassId,CATLISTV(CATBaseUnknown_var)&amp;)"><b>RetrieveDirectChildren</b></a>(CATClassId,CATLISTV(CATBaseUnknown_var)&amp;)
<dd>  Retrieves the list of components from the outside.
 <dt> o 
    <a href="#VisitChildren(CATIVisitor*,int)"><b>VisitChildren</b></a>(CATIVisitor*,int)
<dd>   This method is another one to browse publishers hierarchy (recursively or not).
 <dt> o 
    <a href="#VisitComponents(CATIVisitor*,int)"><b>VisitComponents</b></a>(CATIVisitor*,int)
<dd>   This method is another one to browse publishers hierarchy (recursively or not).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATParmPublisherAdapter"></a><a name="CATParmPublisherAdapter()"></a> <dt> o <b>CATParmPublisherAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATParmPublisherAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Constructs the extension.
</dl>
<a name="~CATParmPublisherAdapter"></a><a name="~CATParmPublisherAdapter()"></a> <dt> o <b>~CATParmPublisherAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATParmPublisherAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Deletes the extension.
</dl>
 <h2>Methods</h2> <br>
<a name="AddComponent"></a><a name="AddComponent(CATICkeObject_var&amp;)"></a> <dt> o <b>AddComponent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddComponent</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iKBwareObject</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends components under the object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKBwareObject</tt>
   <dd> object to be appended Default implementation returns E_FAIL.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if your object does not accept this kind of object.
</dl>
</dl>
<a name="AllowAppend"></a><a name="AllowAppend()"></a> <dt> o <b>AllowAppend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>AllowAppend</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this object allow the use of AddComponent (and RemoveComponent) method.
 It is mostly used to prevent those operations if the object implementing the
 interface isn't able to manage it.
 Default implementation is FALSE.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>TRUE</tt> Add and Remove of objects are authorized
 <tt>FALSE</tt> Add and Remove of objects are not authorized.
</dl>
</dl>
<a name="AllowUserAppend"></a><a name="AllowUserAppend()"></a> <dt> o <b>AllowUserAppend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>AllowUserAppend</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this publisher allows the use of Append (and RemoveChild) method.<br>
 It is mostly used to prevent those operations if the object implementing the
 interface isn't able to manage it.
 Default implementation is FALSE.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>TRUE</tt> Append and Remove of objects are authorized
 <tt>FALSE</tt> Append and Remove of objects are not authorized.
</dl>
</dl>
<a name="AppendElement"></a><a name="AppendElement(CATBaseUnknown_var&amp;)"></a> <dt> o <b>AppendElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AppendElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iFeatureToAppend</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends a user parameter or a relation to this feature.
 You must implement this method if you have answered TRUE to the AllowUserAppend method.
 The SpecObject passed as argument must have been created in the container returned by the Container method.
 Default implementation does nothing.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iFeatureToAppend</tt>
   <dd> relation or parameter to append</dd>
</dl>
</dl>
</dl>
<a name="GetFactory"></a><a name="GetFactory()"></a> <dt> o <b>GetFactory</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParmFactory','CATICkeParmFactory_var')</script>  <b>GetFactory</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method has to return the associated container of the publisher.
 It is used to create the user parameters when AllowUserAppend returns True.
 In this case, you should implement this method.
 Default implementation returns NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The container
</dl>
</dl>
<a name="RemoveComponent"></a><a name="RemoveComponent(CATICkeObject_var&amp;)"></a> <dt> o <b>RemoveComponent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveComponent</b>(<td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iKBwareObject</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes components under the object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKBwareObject</tt>
   <dd> knowledgeware object to be removed. Default implementation returns E_FAIL.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the remove operation has failed.
</dl>
</dl>
<a name="RemoveElement"></a><a name="RemoveElement(CATBaseUnknown_var&amp;)"></a> <dt> o <b>RemoveElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iFeatureToRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a user parameter or a relation from this feature.
 Default implementation does nothing.<br>
 You must implement this method if you have answered TRUE to the AllowUserAppend method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iFeatureToRemove</tt>
   <dd> relation or parameter to remove</dd>
</dl>
</dl>
</dl>
<a name="RetrieveDirectChildren"></a><a name="RetrieveDirectChildren(CATClassId,CATLISTV(CATBaseUnknown_var)&amp;)"></a> <dt> o <b>RetrieveDirectChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RetrieveDirectChildren</b>(<td><script type="text/javascript"> activateLink('CATClassId','CATClassId')</script> <td><tt>iIntfName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>iListToFill</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of components from the outside.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIntfName</tt>
   <dd> name of the interface asked.  </dd>
    <dt><tt>  iListToFill</tt>
   <dd> list filled with the components </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT Default implementation returns E_FAIL.
</dl>
</dl>
<a name="VisitChildren"></a><a name="VisitChildren(CATIVisitor*,int)"></a> <dt> o <b>VisitChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>VisitChildren</b>(<td><script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor*')</script> <td><tt>iVisitor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>recur</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method is another one to browse publishers hierarchy (recursively or not). The choice of good instances is delegated to the given visitor 
 (it can put good instances in a list, or keep only one, depending on the goal of the "visit").<br>
 The default implementation does nothing.<br>
 To implement this method, you must scan your local parameters, scan your components and ask the Visit on them.
 If the recur=1, you must call VisitChildren recursively on your components.<br>
 Remember that if the method Visit doesn't succeed, it means that the visit can end.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVisitor</tt>
   <dd> object to call during the visit </dd>
    <dt><tt> recur</tt>
   <dd> 1 if we want the visit to be recursive, 0 instead</dd>
</dl>
</dl>
</dl>
<a name="VisitComponents"></a><a name="VisitComponents(CATIVisitor*,int)"></a> <dt> o <b>VisitComponents</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>VisitComponents</b>(<td><script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor*')</script> <td><tt>iVisitor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>recur</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method is another one to browse publishers hierarchy (recursively or not). The choice of good instances is delegated to the given visitor 
 (it can put good instances in a list, or keep only one, depending on the goal of the "visit").<br>
 The default implementation does nothing.<br>
 To implement this method, you must scan your components and ask the Visit on them.
 If the recur=1, you must call VisitChildren recursively on your components.<br>
 Remember that if the method Visit doesn't succeed, it means that the visit can end.<br>
 Default implementation calls the VisitChildren method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVisitor</tt>
   <dd> object to call during the visit </dd>
    <dt><tt> recur</tt>
   <dd> 1 if we want the visit to be recursive, 0 instead </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATParmPublisherAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

