<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIList</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIList"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIList</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIList_24213','CATIList','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIList</b>
</p>
<p>
<b><i>
 Interface dedicated to the management of  list objects.</i></b><br>
<br>
 A list is an ordered collection of items, which are objects.<br>
 This interface is multi implemented (on List feature and volatile list implementation).<br>
 Volatile list can reference any kind of object (CATBaseUnknown) including parameters (CATICkeParm).<br>
 List feature can only reference persisten features (CATISpecObject) or literals (CATICkeParm).<br>
 Lists are created with CATICkeParmFactory
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATICkeParmFactory','','CATICkeParmFactory') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AllowDuplicateElements(int)"><b>AllowDuplicateElements</b></a>(int)
<dd>  Prevents or allows duplication of elements.
 <dt> o 
    <a href="#GetIndexOfItem(CATBaseUnknown*,int)"><b>GetIndexOfItem</b></a>(CATBaseUnknown*,int)
<dd>  Retrieves the position of the first occurence if the item in the list,	starting from the index iStartIndex included.
 <dt> o 
    <a href="#GetItem(int,CATBaseUnknown_var&amp;)"><b>GetItem</b></a>(int,CATBaseUnknown_var&amp;)
<dd>  Retrieves an item in the list.
 <dt> o 
    <a href="#GetListType()"><b>GetListType</b></a>()
<dd>  Returns the type allowed for elements of the list.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Returns the size of the list.
 <dt> o 
    <a href="#InsertItem(int,CATBaseUnknown*)"><b>InsertItem</b></a>(int,CATBaseUnknown*)
<dd>  Insert an item in the list.
 <dt> o 
    <a href="#IsDuplicateElementsAllowed()"><b>IsDuplicateElementsAllowed</b></a>()
<dd>  Indicates if the list can contain duplicate items.
 <dt> o 
    <a href="#IsListTypeLocked()"><b>IsListTypeLocked</b></a>()
<dd>  Indicates if the list type has been locked.
 <dt> o 
    <a href="#IsTypeSet()"><b>IsTypeSet</b></a>()
<dd>  Indicates if the type of the elements of the list has been set.
 <dt> o 
    <a href="#LockListType()"><b>LockListType</b></a>()
<dd>  Locks the type of the items in the list for users modifications.
 <dt> o 
    <a href="#RemoveAll()"><b>RemoveAll</b></a>()
<dd>  Removes all the items from the list.
 <dt> o 
    <a href="#RemoveItem(int)"><b>RemoveItem</b></a>(int)
<dd>  Removes an item from the list.
 <dt> o 
    <a href="#Reorder(int,int)"><b>Reorder</b></a>(int,int)
<dd>  Reorders an element by moving it from current position to target position.
 <dt> o 
    <a href="#SetItem(int,CATBaseUnknown*)"><b>SetItem</b></a>(int,CATBaseUnknown*)
<dd>  Sets an item in the list.
 <dt> o 
    <a href="#SetListType(CATUnicodeString&amp;)"><b>SetListType</b></a>(CATUnicodeString&amp;)
<dd>  Limits the elements in the interface to instances of a certain type.
 <dt> o 
    <a href="#UnLockListType()"><b>UnLockListType</b></a>()
<dd>  UnLocks the List type modifications.
 <dt> o 
    <a href="#UnsetListType()"><b>UnsetListType</b></a>()
<dd>  Authorize objects of any type to be put in the list.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AllowDuplicateElements"></a><a name="AllowDuplicateElements(int)"></a> <dt> o <b>AllowDuplicateElements</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AllowDuplicateElements</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDuplicate</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Prevents or allows duplication of elements. Allowed by default.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDuplicate</tt>
   <dd> If iDuplicate is 0, prevents, otherwise, allows duplication. Note this method doesn't remove duplicate elements already present.
 It just allows to set whether duplicates should be alloed or not.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="GetIndexOfItem"></a><a name="GetIndexOfItem(CATBaseUnknown*,int)"></a> <dt> o <b>GetIndexOfItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetIndexOfItem</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStartIndex</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the position of the first occurence if the item in the list,	starting from the index iStartIndex included.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> item </dd>
    <dt><tt> iStartIndex</tt>
   <dd> index to start in the list </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  index of the item and 0 if the item is not found. Returns 0 if the item is not found.
</dl>
</dl>
<a name="GetItem"></a><a name="GetItem(int,CATBaseUnknown_var&amp;)"></a> <dt> o <b>GetItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oItem</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves an item in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> Starts at 1. </dd>
    <dt><tt> oItem</tt>
   <dd> Object to return.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK</tt><dd> if the index is comprised between 1 and the size of the list 
   and the returned object is different from NULL.
 <dt><tt>S_FALSE</tt><dd> if the index is comprised between 1 and the size of the list
   but the returned object is equal to NULL.
 <dt><tt>E_FAIL</tt><dd> else.
 </dl>
</dl>
</dl>
<a name="GetListType"></a><a name="GetListType()"></a> <dt> o <b>GetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString')</script>  <b>GetListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the type allowed for elements of the list.
 Returns a null string if type is not set.
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the size of the list.
 i.e. non null elements of the list.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  list size.
</dl>
</dl>
<a name="InsertItem"></a><a name="InsertItem(int,CATBaseUnknown*)"></a> <dt> o <b>InsertItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Insert an item in the list. Does an AddRef on the item.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd> Starts at 1. </dd>
    <dt><tt> iValue</tt>
   <dd> the inserted item. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 1 and the size of the list and if the object type is correct.
   <dt><tt>E_FAIL</tt>  <dd> if the object type is not correct, 
 if index is out of bounds or if you try to insert an already 
 existing element while IsDuplicateElementsAllowed is equal to
 FALSE.
   </dl>
</dl>
</dl>
<a name="IsDuplicateElementsAllowed"></a><a name="IsDuplicateElementsAllowed()"></a> <dt> o <b>IsDuplicateElementsAllowed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsDuplicateElementsAllowed</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the list can contain duplicate items. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if elements can be duplicated, 0 otherwise.
</dl>
</dl>
<a name="IsListTypeLocked"></a><a name="IsListTypeLocked()"></a> <dt> o <b>IsListTypeLocked</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsListTypeLocked</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the list type has been locked.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the list type is locked,0 if it is not Locked.
</dl>
</dl>
<a name="IsTypeSet"></a><a name="IsTypeSet()"></a> <dt> o <b>IsTypeSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsTypeSet</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the type of the elements of the list has been set.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if elements of the list must be of a given type, 0 otherwise.
</dl>
</dl>
<a name="LockListType"></a><a name="LockListType()"></a> <dt> o <b>LockListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LockListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Locks the type of the items in the list for users modifications.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the list type has not been valuated.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll()"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveAll</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes all the items from the list. Does a Release on the items.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the the operation succeeded 
 and if all the objects have been removed.
   <dt><tt>E_FAIL</tt>  <dd> if the objects have not been removed. 
   </dl>
</dl>
</dl>
<a name="RemoveItem"></a><a name="RemoveItem(int)"></a> <dt> o <b>RemoveItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes an item from the list. Does a Release on the item.
 This method pushes back all following items of the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd> index of the object to suppress. Starts at 1. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 1 and the size of the list and if the operation succeeded.
   <dt><tt>E_FAIL</tt>  <dd> if the object has not been removed 
 or if index is out of bounds. 
   </dl>
</dl>
</dl>
<a name="Reorder"></a><a name="Reorder(int,int)"></a> <dt> o <b>Reorder</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Reorder</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCurrent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTarget</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Reorders an element by moving it from current position to target position.
 Doesn't change the list if either position is out of the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurrent</tt>
   <dd> current position of item to reorder </dd>
    <dt><tt> iTarget</tt>
   <dd> target position </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the the operation succeeded. 
   <dt><tt>E_FAIL</tt>  <dd> if cannot reorder. 
   </dl>
</dl>
</dl>
<a name="SetItem"></a><a name="SetItem(int,CATBaseUnknown*)"></a> <dt> o <b>SetItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets an item in the list. Does an AddRef on the item.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> index</tt>
   <dd> Starts at 1. </dd>
    <dt><tt> iValue</tt>
   <dd> the item to set. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 0 (means append) and the size of the list and if the 
 object type is correct.
   <dt><tt>E_FAIL</tt>  <dd> if the object type is not correct, 
 if index is out of bounds or if you try to insert an already 
 existing element while IsDuplicateElementsAllowed is equal to
 FALSE.
   </dl>
</dl>
</dl>
<a name="SetListType"></a><a name="SetListType(CATUnicodeString&amp;)"></a> <dt> o <b>SetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetListType</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iTypeName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Limits the elements in the interface to instances of a certain type.
 If there are already elements of another type, returns E_FAIL.
 Note the argument should be a type structure, but which one???
 Passing a null argument will have same effect as UnsetListType.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTypeName</tt>
   <dd> Name of the type. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="UnLockListType"></a><a name="UnLockListType()"></a> <dt> o <b>UnLockListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnLockListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 UnLocks the List type modifications.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the list type has not been valuated.
</dl>
</dl>
<a name="UnsetListType"></a><a name="UnsetListType()"></a> <dt> o <b>UnsetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnsetListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Authorize objects of any type to be put in the list.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIList.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

