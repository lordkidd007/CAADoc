<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIParmEvents</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIParmEvents"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIParmEvents</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIParmEvents_30855','CATIParmEvents','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIParmEvents</b>
</p>
<p>
<b><i>    Interface dedicated to parameters events management.</i></b><br>

 <b>Role</b>: This interface is used to add subscription to parameters events.<br>
 It is implemented on parameters.
 4 events are available<br>
  <li> <b>ChangeValue</b> when content is actually changed </li>
  <li> <b>Rename</b> when parameter is actually renamed </li>
  <li> <b>ChangeVisu</b> when <br>
      <li> for internal reasons :
         <li>visibility change</li>    
         <li>user access change</li>
         <li>driving relation set or unset</li>
         <li>magnitude current unit change</li></li>
      <li> for external reason : (SendChangeVisu)
         <li>driving relation is activated or desactivated</li> </li>
 </li>
  <li> <b>Delete</b> when literal is deleted (before deletion)</li>
 This interface is multi implemented.
 It is implemented on literal and volatile values
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATParmNotification','','CATParmNotification') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeParm','','CATICkeParm') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#DefineSendBehavior(SendBehavior)"><b>DefineSendBehavior</b></a>(SendBehavior)
<dd>  Sets the way the Change value event is sent.
 <dt> o 
    <a href="#GetChangeValueNotification()"><b>GetChangeValueNotification</b></a>()
<dd>  Returns change value notification.
 <dt> o 
    <a href="#GetChangeVisuNotification()"><b>GetChangeVisuNotification</b></a>()
<dd>  Returns change visu notification.
 <dt> o 
    <a href="#GetDeleteNotification()"><b>GetDeleteNotification</b></a>()
<dd>  Returns delete notification.
 <dt> o 
    <a href="#GetRenameNotification()"><b>GetRenameNotification</b></a>()
<dd>  Returns rename notification.
 <dt> o 
    <a href="#SendChangeValueNotification(CATCke::Boolean&amp;)"><b>SendChangeValueNotification</b></a>(CATCke::Boolean&amp;)
<dd>  Produces the change value event dispatch on the parameter.
 <dt> o 
    <a href="#SendChangeVisuNotification()"><b>SendChangeVisuNotification</b></a>()
<dd>  Produces the change visu event dispatch on the parameter.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#SendBehavior"><b>SendBehavior</b></a>
<dd>   Defines when Change value event is dispatched by parameter.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="DefineSendBehavior"></a><a name="DefineSendBehavior(SendBehavior)"></a> <dt> o <b>DefineSendBehavior</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>DefineSendBehavior</b>(<td> const <script type="text/javascript"> activateLink('SendBehavior','SendBehavior')</script> <td><tt>iSendBehavior</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the way the Change value event is sent.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSendBehavior</tt>
   <dd> :   	change value event mode</dd>
</dl>
</dl>
</dl>
<a name="GetChangeValueNotification"></a><a name="GetChangeValueNotification()"></a> <dt> o <b>GetChangeValueNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetChangeValueNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns change value notification.
</dl>
<a name="GetChangeVisuNotification"></a><a name="GetChangeVisuNotification()"></a> <dt> o <b>GetChangeVisuNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetChangeVisuNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns change visu notification.
</dl>
<a name="GetDeleteNotification"></a><a name="GetDeleteNotification()"></a> <dt> o <b>GetDeleteNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetDeleteNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns delete notification.
</dl>
<a name="GetRenameNotification"></a><a name="GetRenameNotification()"></a> <dt> o <b>GetRenameNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetRenameNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns rename notification.
</dl>
<a name="SendChangeValueNotification"></a><a name="SendChangeValueNotification(CATCke::Boolean&amp;)"></a> <dt> o <b>SendChangeValueNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SendChangeValueNotification</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iChanged</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Produces the change value event dispatch on the parameter. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChanged</tt>
   <dd> :   	indicates if value has actually changed<br>.</dd>
</dl>
</dl>
</dl>
<a name="SendChangeVisuNotification"></a><a name="SendChangeVisuNotification()"></a> <dt> o <b>SendChangeVisuNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SendChangeVisuNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Produces the change visu event dispatch on the parameter.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="SendBehavior"> <dt> o <b>SendBehavior</b>
<dl>
  <dd>
<pre>
enum <b>SendBehavior</b> {
  Never,
  WhenChanged,
  WhenValuated
}
</pre>
  Defines when Change value event is dispatched by parameter.<br>
               Never = change value event is never sent.<br>
               WhenChanged = when valuated and value is eventually changed.<br>
               WhenValuated = when valuated even if value isn't changed.<br>
</dl>
<hr>
 This object is included in the file: <b>CATIParmEvents.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

