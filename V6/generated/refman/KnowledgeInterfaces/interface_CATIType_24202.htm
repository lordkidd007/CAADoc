<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIType</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIType"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIType</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIType_24202','CATIType','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIType</b>
</p>
<p>
<b><i> Interface dedicated to describing the Knowledge type of an object that can be manipulated in Knowledgeware.</i></b><br>


 <b>Role</b>: This Knowledge type is shown to the user but does not necessarily 
 reflect the internal structure of an object : as such, it is
 an <b>exposed</b> type.<br> for the Knowledge.
 A Knowledge type is defined by an internal name and a NLS name that is shown to 
 the user.<br>
 A Knowledge type is created by applications through CATITypeDictionary services.
 This interface is multi implemented.
 Most of the time a Knowledge type also implements CATIAttributesDescription as soon as it holds attributes.

 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>, <script type="text/javascript"> activateLinkAnchor('CATITypeDictionary','','CATITypeDictionary') </script>, <script type="text/javascript"> activateLinkAnchor('CATIAttributesDescription','','CATIAttributesDescription') </script>, <script type="text/javascript"> activateLinkAnchor('CATAttributeInfos','','CATAttributeInfos') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#IsaSortOf(CATIType_var&amp;)"><b>IsaSortOf</b></a>(CATIType_var&amp;)
<dd>  Tests if this Knowledge type is a subtype of (derives from) the given one.
 <dt> o 
    <a href="#Name()"><b>Name</b></a>()
<dd>  Returns the name of the Knowledge type (internal identifier).
 <dt> o 
    <a href="#ScanSubTypes(CATListValCATIType_var&amp;)"><b>ScanSubTypes</b></a>(CATListValCATIType_var&amp;)
<dd>  Scans the direct sub types.
 <dt> o 
    <a href="#SuperType()"><b>SuperType</b></a>()
<dd>  Returns the supertype (the type this type derives).
 <dt> o 
    <a href="#UserName()"><b>UserName</b></a>()
<dd>  Returns the NLS name of the Knowledge type.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="IsaSortOf"></a><a name="IsaSortOf(CATIType_var&amp;)"></a> <dt> o <b>IsaSortOf</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>IsaSortOf</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests if this Knowledge type is a subtype of (derives from) the given one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> type to compared to. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  True if this type is a subtype of the other, else False.
</dl>
</dl>
<a name="Name"></a><a name="Name()"></a> <dt> o <b>Name</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Name</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the Knowledge type (internal identifier).

 This name is the one used to find a type by its name in CATITypeDictionary services.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  internal name of the type.
</dl>
</dl>
<a name="ScanSubTypes"></a><a name="ScanSubTypes(CATListValCATIType_var&amp;)"></a> <dt> o <b>ScanSubTypes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ScanSubTypes</b>(<td><script type="text/javascript"> activateLink('CATListValCATIType_var','CATListValCATIType_var&amp;')</script> <td><tt>olListOfTypes</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Scans the direct sub types.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> olListOfTypes</tt>
   <dd> list to be filled with sub types. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if scan has succeeded;
</dl>
</dl>
<a name="SuperType"></a><a name="SuperType()"></a> <dt> o <b>SuperType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIType','CATIType*')</script>  <b>SuperType</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the supertype (the type this type derives).

 An AddRef is done.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] the supertype.
</dl>
</dl>
<a name="UserName"></a><a name="UserName()"></a> <dt> o <b>UserName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>UserName</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the NLS name of the Knowledge type.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  NLS name of the type.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIType.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

