<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIParmPublisher</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIParmPublisher"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIParmPublisher</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIParmPublisher_35545','CATIParmPublisher','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../KnowledgeInterfaces/class_CATParmPublisherAdapter_44960.htm">CATParmPublisherAdapter</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIParmPublisher</b>
</p>
<p>
<b><i>    Interface dedicated to parameters publishing.</i></b><br>

 <b>Role</b>: This interface is to be implemented by objects that want to publish<br>
 their own parameters to F(x) and KnowledgeAdvisor.<br>
 This interface has 2 goals:<br>
 <li>the AppendElement and RemoveElement are used by Knowledgeware to add KBware features 
 to the root (example : user parameters or relations).</li>
 <li>the VistChildren is used to find from the root object,
 objects that are important for Knowledgeware such as parameters and relations.</li>
 This interface must at least be implemented by Root Features (ex: Part).<br>
 Other applications features may implement this interface to answer more locally 
 (and so to filter) to VisitChildren methods. It corresponds
 to the parameters that are known by this feature or that belong to this feature.<br>

 <p><b>BOA information</b>: this interface CAN be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AllowUserAppend()"><b>AllowUserAppend</b></a>()
<dd>  Indicates if this publisher allow the use of Append (and RemoveChild) method.
 <dt> o 
    <a href="#AppendElement(CATBaseUnknown_var&amp;)"><b>AppendElement</b></a>(CATBaseUnknown_var&amp;)
<dd>  Appends user parameters and relations to the current object.
 <dt> o 
    <a href="#GetFactory()"><b>GetFactory</b></a>()
<dd>   This method has to return the associated container of the publisher : in different contexts, the system needs a container when using a CATIParmPublisher.
 <dt> o 
    <a href="#RemoveElement(CATBaseUnknown_var&amp;)"><b>RemoveElement</b></a>(CATBaseUnknown_var&amp;)
<dd>  Removes user parameters and relations from this object.
 <dt> o 
    <a href="#VisitChildren(CATIVisitor*,int)"><b>VisitChildren</b></a>(CATIVisitor*,int)
<dd>   This method is another one to browse publishers hierarchy (recursively or not).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AllowUserAppend"></a><a name="AllowUserAppend()"></a> <dt> o <b>AllowUserAppend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>AllowUserAppend</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this publisher allow the use of Append (and RemoveChild) method.
 It is mostly used to prevent those operations if the object implementing the
 interface isn't able to manage it.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>TRUE</tt> Append and Remove of objects are authorized
 <tt>FALSE</tt> Append and Remove of objects are not authorized.
</dl>
</dl>
<a name="AppendElement"></a><a name="AppendElement(CATBaseUnknown_var&amp;)"></a> <dt> o <b>AppendElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AppendElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iKBwareObject</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Appends user parameters and relations to the current object.
 The object is the Application Root Feature that implements the current interface
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKBwareObject</tt>
   <dd> knowledgeware object to append to the root object. The object implementing CATIParmPublisher and the object to append must be in the same container.
 This will be enforced in the future to allow only authorized data model.</dd>
</dl>
</dl>
</dl>
<a name="GetFactory"></a><a name="GetFactory()"></a> <dt> o <b>GetFactory</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParmFactory','CATICkeParmFactory_var')</script>  <b>GetFactory</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  This method has to return the associated container of the publisher : in different contexts, the system needs a container when using a CATIParmPublisher.
 This interface can be implemented on different type of objects
 (specs, container, documents, and non persistent objects), so container retrieval can be different depending on this type.
 The default implementation on CATCkeInstanceAdapter asserts that the object implementing CATIParmPublisher also implements CATISpecObject.
 If it is not the case for your object, you must overload this method.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the container
</dl>
</dl>
<a name="RemoveElement"></a><a name="RemoveElement(CATBaseUnknown_var&amp;)"></a> <dt> o <b>RemoveElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iKBwareObject</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Removes user parameters and relations from this object.
 The object is the Application Root Feature that implements the current interface
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKBwareObject</tt>
   <dd> knowledgeware object to remove from the root object.</dd>
</dl>
</dl>
</dl>
<a name="VisitChildren"></a><a name="VisitChildren(CATIVisitor*,int)"></a> <dt> o <b>VisitChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>VisitChildren</b>(<td><script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor*')</script> <td><tt>iVisitor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>recur</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  This method is another one to browse publishers hierarchy (recursively or not). The choice of good instances is delegated to the given visitor 
 (it can put good instances in a list, or keep only one, depending on the goal of the "visit").<br>
 The default implementation (in CATCkeInstanceAdapter) doesn't handle new litterals (based on spec attributes). If you want your publisher to publish such litterals, you have to
 overload this method. The principle is to visit each published instance and if the visit is recursive, to call VisitChildren on each instance implementing CATIParmPublisher. 
 Remember that if the method Visit doesn't succeed, it means that the visit can end.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVisitor</tt>
   <dd> visitor to call during the visit </dd>
    <dt><tt> recur</tt>
   <dd> 1 is the visit is recursive, 0 instead</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIParmPublisher.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

