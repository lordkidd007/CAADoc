<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIExposeObject</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIExposeObject"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIExposeObject</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIExposeObject_33615','CATIExposeObject','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../KnowledgeInterfaces/class_CATKweExposeObjectAdapter_49442.htm">CATKweExposeObjectAdapter</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIExposeObject</b>
</p>
<p>
<b><i>    Interface to declare Knowledgeware access on objects.</i></b><br>
 Reserved for CAA Partner.<br> 

 <b>Role</b>: this interface allows an object to publish its types and attributes values
 to KnowledgeWare and to the Edit/Find functionality by granting objects with type information.
 <br>
 Implementations of that interface should derive from <script type="text/javascript"> activateLinkAnchor('CATKweExposeObjectAdapter','','CATKweExposeObjectAdapter') </script>.
 <p><b>BOA information</b>: this interface CANNOT be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p>

 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>, <script type="text/javascript"> activateLinkAnchor('CATIType','','CATIType') </script>, <script type="text/javascript"> activateLinkAnchor('CATIValue','','CATIValue') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetOwner()"><b>GetOwner</b></a>()
<dd>  Returns the owner of the object (in terms of tree aggregation.
 <dt> o 
    <a href="#GetValue(CATUnicodeString&amp;)"><b>GetValue</b></a>(CATUnicodeString&amp;)
<dd>  Gets an attribute value.
 <dt> o 
    <a href="#IsSupporting(CATIType_var&amp;)"><b>IsSupporting</b></a>(CATIType_var&amp;)
<dd>  Casts this object to another one supporting the given type.
 <dt> o 
    <a href="#ListSupportedTypes(CATListValCATIType_var&amp;)"><b>ListSupportedTypes</b></a>(CATListValCATIType_var&amp;)
<dd>  Fills the given list with types supported by this object.
 <dt> o 
    <a href="#SetValue(CATUnicodeString&amp;,CATIValue_var&amp;)"><b>SetValue</b></a>(CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>  Sets an attribute value.
 <dt> o 
    <a href="#Type()"><b>Type</b></a>()
<dd>  Returns the main Knowledge type of an object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetOwner"></a><a name="GetOwner()"></a> <dt> o <b>GetOwner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject*')</script>  <b>GetOwner</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the owner of the object (in terms of tree aggregation.<br> 
 May be NULL. An AddRef is done
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] the owner of the object..
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIValue','CATIValue*')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets an attribute value.<br>
 The contract of this method is to retrieve the value from its internal attribute value and return it.<br>
 In some contexts a copy may be created. But if the attribute is a parameter, the method is supposed to return the parameter itself.<br>
 If the internal attribute value is Unset, the contract of this method is to Unset the attribute value that is returned.<br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey</tt>
   <dd> Name of the attribute. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release] iValue Value of the attribute (an AddRef is done, if not NULL).
</dl>
</dl>
<a name="IsSupporting"></a><a name="IsSupporting(CATIType_var&amp;)"></a> <dt> o <b>IsSupporting</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject *')</script>  <b>IsSupporting</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Casts this object to another one supporting the given type.

 An AddRef is done, if not NULL.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> type we want to cast the object to. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release]  the object supporting this type (may be NULL or self).
</dl>
</dl>
<a name="ListSupportedTypes"></a><a name="ListSupportedTypes(CATListValCATIType_var&amp;)"></a> <dt> o <b>ListSupportedTypes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListSupportedTypes</b>(<td><script type="text/javascript"> activateLink('CATListValCATIType_var','CATListValCATIType_var&amp;')</script> <td><tt>iolListOfCATIType</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Fills the given list with types supported by this object.
 <br>
 The list in input may not be empty. This method is supposed to add some types to the list.<br>
 At least the main type of the object is supposed to be in this list

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iolListOfCATIType</tt>
   <dd> the filled list. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="SetValue"></a><a name="SetValue(CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>SetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetValue</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iKey</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets an attribute value.<br>
 The contract of this method is to copy the value in input in its internal attribute value.<br>
 If the value passed as argument is Unset, the contract of this method is to Unset the attribute value (if it makes sense).<br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey</tt>
   <dd> Name of the attribute. </dd>
    <dt><tt> iValue</tt>
   <dd> Value of the attribute.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  classic HRESULT
</dl>
</dl>
<a name="Type"></a><a name="Type()"></a> <dt> o <b>Type</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIType','CATIType*')</script>  <b>Type</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the main Knowledge type of an object.

 An AddRef is done.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   [CATBaseUnknown#Release]  the main type of the object.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIExposeObject.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

