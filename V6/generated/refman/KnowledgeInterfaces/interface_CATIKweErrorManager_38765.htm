<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIKweErrorManager</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIKweErrorManager"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIKweErrorManager</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIKweErrorManager_38765','CATIKweErrorManager','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIKweErrorManager</b>
</p>
<p>
<b><i> Interface representing the way to manage parse and evaluation errors.</i></b><br>

 This interface is mono implemented and accessible from <script type="text/javascript"> activateLinkAnchor('CATCkeGlobalFunctions','GetErrorManager','CATCkeGlobalFunctions.GetErrorManager') </script>.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ErrorCatch(CATIKweErrorManager::Filter&amp;,CATIKweErrorManager::Behavior&amp;,CATUnicodeString&amp;,int&amp;,CATIKweErrorManager::Severity&amp;)"><b>ErrorCatch</b></a>(CATIKweErrorManager::Filter&amp;,CATIKweErrorManager::Behavior&amp;,CATUnicodeString&amp;,int&amp;,CATIKweErrorManager::Severity&amp;)
<dd>    Catches the error if any and treat it depending on the behavior required.
 <dt> o 
    <a href="#ErrorClean(CATIKweErrorManager::Behavior&amp;)"><b>ErrorClean</b></a>(CATIKweErrorManager::Behavior&amp;)
<dd>    Cleans the error if any and treat it depending on the behavior required.
 <dt> o 
    <a href="#ErrorTry()"><b>ErrorTry</b></a>()
<dd>  If a method raises some Knowledge Error and you want to catch them, you need to call ErrorTry before and ErrorCatch or ErrorClean after.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#Behavior"><b>Behavior</b></a>
<dd>   Behavior when catching or cleaning the error.
 <dt> o 
    <a href="#Filter"><b>Filter</b></a>
<dd>   Type of error we want to catch.
 <dt> o 
    <a href="#Severity"><b>Severity</b></a>
<dd>    Severity of error.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ErrorCatch"></a><a name="ErrorCatch(CATIKweErrorManager::Filter&amp;,CATIKweErrorManager::Behavior&amp;,CATUnicodeString&amp;,int&amp;,CATIKweErrorManager::Severity&amp;)"></a> <dt> o <b>ErrorCatch</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>ErrorCatch</b>(<td> const <script type="text/javascript"> activateLink('CATIKweErrorManager::Filter','CATIKweErrorManager::Filter&amp;')</script> <td><tt>iFilter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIKweErrorManager::Behavior','CATIKweErrorManager::Behavior&amp;')</script> <td><tt>iBehavior</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oMessage</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLineNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIKweErrorManager::Severity','CATIKweErrorManager::Severity&amp;')</script> <td><tt>oSeverity</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
   Catches the error if any and treat it depending on the behavior required.
	
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilter</tt>
   <dd> kind of error we want to catch.	</dd>
    <dt><tt> iBehavior</tt>
   <dd> behavior requested at the end of the clean operation.	</dd>
    <dt><tt> oMessage</tt>
   <dd> message of the error if any.  </dd>
    <dt><tt> oLineNumber</tt>
   <dd> line number where error occurred  </dd>
    <dt><tt> oSeverity</tt>
   <dd> severity of the error  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of error raised (0 if none).
</dl>
</dl>
<a name="ErrorClean"></a><a name="ErrorClean(CATIKweErrorManager::Behavior&amp;)"></a> <dt> o <b>ErrorClean</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>ErrorClean</b>(<td> const <script type="text/javascript"> activateLink('CATIKweErrorManager::Behavior','CATIKweErrorManager::Behavior&amp;')</script> <td><tt>iBehavior</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
   Cleans the error if any and treat it depending on the behavior required.
	
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBehavior</tt>
   <dd> behavior requested at the end of the clean operation.  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  number of error raised (0 if none).
</dl>
</dl>
<a name="ErrorTry"></a><a name="ErrorTry()"></a> <dt> o <b>ErrorTry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ErrorTry</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 If a method raises some Knowledge Error and you want to catch them, you need to call ErrorTry before and ErrorCatch or ErrorClean after.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="Behavior"> <dt> o <b>Behavior</b>
<dl>
  <dd>
<pre>
enum <b>Behavior</b> {
  Popup,
  Silent,
  Forward
}
</pre>
  Behavior when catching or cleaning the error.
	<ol>
	Popup: triggers a popup window displaying the message (or a trace in batch mode).
	Silent: simply erase the error from the manager.
	Forward: Forward the error to an upper error manager.
	</ol>
</dl>
<a name="Filter"> <dt> o <b>Filter</b>
<dl>
  <dd>
<pre>
enum <b>Filter</b> {
  All,
  Parse,
  MagnitudeConsistency,
  Evaluation
}
</pre>
  Type of error we want to catch.
	<ol>
	All: we want to catch evaluation error, parse error or magnitude consistency checking.
	Parse: we want to catch only parse error.
	MagnitudeConsistency: we want to catch only  magnitude consistency errors
	Evaluation: we want to catch only evaluation error.
	</ol>
</dl>
<a name="Severity"> <dt> o <b>Severity</b>
<dl>
  <dd>
<pre>
enum <b>Severity</b> {
  Error,
  Warning
}
</pre>
   Severity of error.
	<ol>
	Error: the treatment has failed.
	Warning: the treatment has not failed.
	</ol>
</dl>
<hr>
 This object is included in the file: <b>CATIKweErrorManager.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

