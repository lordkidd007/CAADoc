<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIKweModelServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIKweModelServices"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIKweModelServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIKweModelServices_40949','CATIKweModelServices','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIKweModelServices</b>
</p>
<p>
<b><i> Interface providing a set of services of the Knowledge Modeler.</i></b><br>


 <br><b>Role</b>: This interface is mono implemented. It is obtained from CATCkeGlobalFunctions::GetModelServices() method.
 <p>
 <script type="text/javascript"> activateLinkAnchor('CATCkeGlobalFunctions','','CATCkeGlobalFunctions') </script>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddToCurrentSet(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,CATBaseUnknown_var&amp;)"><b>AddToCurrentSet</b></a>(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,CATBaseUnknown_var&amp;)
<dd>  Adds an object to the current set.
 <dt> o 
    <a href="#FindParm(CATIParmPublisher_var&amp;,CATUnicodeString&amp;,CATCke::Boolean)"><b>FindParm</b></a>(CATIParmPublisher_var&amp;,CATUnicodeString&amp;,CATCke::Boolean)
<dd>  Tries to find a parameter by its name.
 <dt> o 
    <a href="#GetCurrentSet(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int)"><b>GetCurrentSet</b></a>(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int)
<dd>   Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.
 <dt> o 
    <a href="#GetCurrentSetWithRepRef(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int,void*)"><b>GetCurrentSetWithRepRef</b></a>(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int,void*)
<dd>   Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.
 <dt> o 
    <a href="#GetKnowledgeContainer(CATBaseUnknown_var&amp;,int)"><b>GetKnowledgeContainer</b></a>(CATBaseUnknown_var&amp;,int)
<dd>   Returns the Knowledge container where you will create parameters for example.
 <dt> o 
    <a href="#VisibleParms(CATIParmPublisher_var&amp;,CATCkeListOf(Parm)&amp;,CATCke::Boolean,int)"><b>VisibleParms</b></a>(CATIParmPublisher_var&amp;,CATCkeListOf(Parm)&amp;,CATCke::Boolean,int)
<dd>  Retrieves the list of visible literals from a CATIParmPublisher.
 <dt> o 
    <a href="#VisibleRelations(CATIParmPublisher_var,CATCkeListOf(Relation)&amp;,CATCke::Boolean)"><b>VisibleRelations</b></a>(CATIParmPublisher_var,CATCkeListOf(Relation)&amp;,CATCke::Boolean)
<dd>  Retrieves the list of visible relations from a CATIParmPublisher.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#SetType"><b>SetType</b></a>
<dd>  Type of Set.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddToCurrentSet"></a><a name="AddToCurrentSet(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,CATBaseUnknown_var&amp;)"></a> <dt> o <b>AddToCurrentSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddToCurrentSet</b>(<td> const <script type="text/javascript"> activateLink('CATIKweModelServices::SetType','CATIKweModelServices::SetType')</script> <td><tt>iSetType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iObjectToAdd</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an object to the current set.<br>   It is not a recommended method. Please use GetCurrentSet instead.<br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetType</tt>
   <dd> kind of set of object   </dd>
    <dt><tt> iRoot</tt>
   <dd> root object   </dd>
    <dt><tt> iObjectToAdd</tt>
   <dd> object to add</dd>
</dl>
</dl>
</dl>
<a name="FindParm"></a><a name="FindParm(CATIParmPublisher_var&amp;,CATUnicodeString&amp;,CATCke::Boolean)"></a> <dt> o <b>FindParm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>FindParm</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iRecursive</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Tries to find a parameter by its name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> : root object </dd>
    <dt><tt> iParameterName</tt>
   <dd> : name of the parameter. </dd>
    <dt><tt> iRecursive</tt>
   <dd> : indicates if we only scan the direct children or all the children </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the parameter found
</dl>
</dl>
<a name="GetCurrentSet"></a><a name="GetCurrentSet(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int)"></a> <dt> o <b>GetCurrentSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>GetCurrentSet</b>(<td> const <script type="text/javascript"> activateLink('CATIKweModelServices::SetType','CATIKweModelServices::SetType')</script> <td><tt>iSetType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iForceCreation</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.<br>
 It is dedicated to applications which create parameters,relations,optimizations or rulebase and want to see
 them in the parameter set, relation set, optimization set and rulebase set (in the tree view).<br>
 If the Set does not exist and iRoot is a representation reference, it is created if argument iForceCreation is true.<br>
 If the Set does not exist and iRoot is a reference with a current engineering specification, it is created if argument iForceCreation is true.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetType</tt>
   <dd> to choose the type of set (Parameter, relation, optimization or rulebase).  </dd>
    <dt><tt> iRoot</tt>
   <dd> The root object is where the set will be appended. </dd>
    <dt><tt> iForceCreation</tt>
   <dd> to force the creation of set if it doesn't exist. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  ParameterSet,RelationSet,OptimizationSet,RuleBaseSet returned depending on the iSetType.<br> All those objects are in fact CATIParmPublisher_var.
</dl>
</dl>
<a name="GetCurrentSetWithRepRef"></a><a name="GetCurrentSetWithRepRef(CATIKweModelServices::SetType,CATIParmPublisher_var&amp;,int,void*)"></a> <dt> o <b>GetCurrentSetWithRepRef</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>GetCurrentSetWithRepRef</b>(<td> const <script type="text/javascript"> activateLink('CATIKweModelServices::SetType','CATIKweModelServices::SetType')</script> <td><tt>iSetType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iForceSetCreation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>pBag</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.<br>
 It is dedicated to applications which create parameters,relations,optimizations or rulebase and want to see
 them in the parameter set, relation set, optimization set and rulebase set (in the tree view).<br>
 If the Set does not exist and iRoot is a representation reference, it is created if argument iForceCreation is true.<br>
 If the Set does not exist and iRoot is a reference with a current engineering specification, it is created if argument iForceCreation is true.<br>
 If the Set does not exist and iRoot is a reference without a current engineering specification, a Knowledge engineering representation and
 the set are created if argument iForceCreation is true. The representation is added to bag.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSetType</tt>
   <dd> to choose the type of set (Parameter, relation, optimization or rulebase).  </dd>
    <dt><tt> iRoot</tt>
   <dd> The root object is where the set will be appended. </dd>
    <dt><tt> iForceCreation</tt>
   <dd> to force the creation of set if it doesn't exist. </dd>
    <dt><tt> pBag</tt>
   <dd> a pointer to an existing CATOmbLifeCycleRootsBag. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  ParameterSet,RelationSet,OptimizationSet,RuleBaseSet returned depending on the iSetType.<br> All those objects are in fact CATIParmPublisher_var.
</dl>
</dl>
<a name="GetKnowledgeContainer"></a><a name="GetKnowledgeContainer(CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>GetKnowledgeContainer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParmFactory','CATICkeParmFactory_var')</script>  <b>GetKnowledgeContainer</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iForceCreation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the Knowledge container where you will create parameters for example.<br>
 It is not a recommended method. Please use GetCurrentSet instead.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> root object  </dd>
    <dt><tt> iForceCreation</tt>
   <dd> to force the creation of the Knowledge container. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Knowledge container
</dl>
</dl>
<a name="VisibleParms"></a><a name="VisibleParms(CATIParmPublisher_var&amp;,CATCkeListOf(Parm)&amp;,CATCke::Boolean,int)"></a> <dt> o <b>VisibleParms</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>VisibleParms</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeListOf(Parm)','CATCkeListOf(Parm)&amp;')</script> <td><tt>iListToBeFilled</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iRecursive</tt><td><tt>= 1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>withFeatures</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of visible literals from a CATIParmPublisher.
 uses VisitChildren on CATIParmPublisher and filters the NotSeen literals<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd>  root object </dd>
    <dt><tt> iListToBeFilled:</tt>
   <dd> literals are added to this list already allocated </dd>
    <dt><tt> iRecursive</tt>
   <dd>  indicates if we only scan the direct children or all the children </dd>
    <dt><tt> withFeatures</tt>
   <dd>  indicates if we scan the CATICkeFeature or not</dd>
</dl>
</dl>
</dl>
<a name="VisibleRelations"></a><a name="VisibleRelations(CATIParmPublisher_var,CATCkeListOf(Relation)&amp;,CATCke::Boolean)"></a> <dt> o <b>VisibleRelations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>VisibleRelations</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher','CATIParmPublisher_var')</script> <td><tt>iRoot</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeListOf(Relation)','CATCkeListOf(Relation)&amp;')</script> <td><tt>iListToBeFilled</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iRecursive</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of visible relations from a CATIParmPublisher.
 uses VisitChildren on CATIParmPublisher and filters the non expressional relation
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd>  root object </dd>
    <dt><tt> iListToBeFilled</tt>
   <dd>  relations are added to this list already allocated </dd>
    <dt><tt>  iRecursive</tt>
   <dd>  indicates if we only scan the direct children or all the children</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="SetType"> <dt> o <b>SetType</b>
<dl>
  <dd>
<pre>
enum <b>SetType</b> {
  Parameter,
  Relation,
  Optimization,
  RuleBase,
  Macro,
  LinkedRuleBase,
  ExternalParameter
}
</pre>
 Type of Set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Parameter</tt>
   <dd>   This set contains parameters.
 </dd>
    <dt><tt> Relation</tt>
   <dd>   This set contains Relations.
 </dd>
    <dt><tt> Optimization</tt>
   <dd>   This set contains optimizations.
 </dd>
    <dt><tt> RuleBase</tt>
   <dd>   This set contains Rulebases.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIKweModelServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

