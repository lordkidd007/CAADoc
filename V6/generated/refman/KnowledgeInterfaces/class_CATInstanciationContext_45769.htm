<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATInstanciationContext</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATInstanciationContext"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATInstanciationContext</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATInstanciationContext_45769','CATInstanciationContext','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATInstanciationContext</b>
</p>
<p>
<b><i>    Class dedicated to instanciation management.</i></b><br>

 <b>Role</b>: When instanciating an object through CATIDelegateInstanciation, this class is used to pass some arguments.<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIDelegateInstanciation','','CATIDelegateInstanciation') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeParmFactory','','CATICkeParmFactory') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATInstanciationContext(CATCkeListOfParm,CATICkeObject_var&amp;,CATBoolean,CATLISTV(CATICkeObject_var)*)"><b>CATInstanciationContext</b></a>(CATCkeListOfParm,CATICkeObject_var&amp;,CATBoolean,CATLISTV(CATICkeObject_var)*)
<dd>  Constructor.
 <dt> o 
    <a href="#~CATInstanciationContext()"><b>~CATInstanciationContext</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#LongTransaction()"><b>LongTransaction</b></a>()
<dd>  Indicates if we require a short/long transaction creation for PLM objects.
 <dt> o 
    <a href="#PrefixToUseForParametersAddedOnProxy()"><b>PrefixToUseForParametersAddedOnProxy</b></a>()
<dd>  Returns a prefix used to add parameter on a proxy in order to avoid conflicts
 <dt> o 
    <a href="#RetrieveAdditionalProxies(CATLISTV(CATICkeObject_var)&amp;)"><b>RetrieveAdditionalProxies</b></a>(CATLISTV(CATICkeObject_var)&amp;)
<dd>  Retrieving additional proxies if any.
 <dt> o 
    <a href="#RetrieveArgument(int,CATUnicodeString&amp;,CATIValue_var&amp;)"><b>RetrieveArgument</b></a>(int,CATUnicodeString&amp;,CATIValue_var&amp;)
<dd>  Retrieves the additional arguments to be passed to the implementation.
 <dt> o 
    <a href="#RetrieveArguments()"><b>RetrieveArguments</b></a>()
<dd>   Retrieves the list of parameters passed as argument of the new.
 <dt> o 
    <a href="#RetrieveContainer()"><b>RetrieveContainer</b></a>()
<dd>  Retrieves the container where the object has been created.
 <dt> o 
    <a href="#RetrieveProxy()"><b>RetrieveProxy</b></a>()
<dd>  Retrieves the proxy that must be used to copy attributes.
 <dt> o 
    <a href="#RetrieveReferenceToInsert()"><b>RetrieveReferenceToInsert</b></a>()
<dd>  Retrieves the reference (or representation) to instanciate if any.
 <dt> o 
    <a href="#SetContainer(CATICkeParmFactory_var&amp;)"><b>SetContainer</b></a>(CATICkeParmFactory_var&amp;)
<dd>  Useless in CAA.
 <dt> o 
    <a href="#StringInfo()"><b>StringInfo</b></a>()
<dd>  Useless in CAA.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATInstanciationContext"></a><a name="CATInstanciationContext(CATCkeListOfParm,CATICkeObject_var&amp;,CATBoolean,CATLISTV(CATICkeObject_var)*)"></a> <dt> o <b>CATInstanciationContext</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATInstanciationContext</b>(<td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>plist</tt><td><tt>= NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeObject_var','CATICkeObject_var&amp;')</script> <td><tt>iProxy</tt><td><tt>=NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iLongTransaction</tt><td><tt>= TRUE</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATICkeObject_var)','CATLISTV(CATICkeObject_var)*')</script> <td><tt>ipAdditionalProxies</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> plist</tt>
   <dd> list of parameters (potentially passed by the new function in EKL. </dd>
    <dt><tt> ipAdditionalProxies</tt>
   <dd> list of additional proxies passed by the PLM New.  Usually NULL. Additional proxies...</dd>
</dl>
</dl>
</dl>
<a name="~CATInstanciationContext"></a><a name="~CATInstanciationContext()"></a> <dt> o <b>~CATInstanciationContext</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATInstanciationContext</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="LongTransaction"></a><a name="LongTransaction()"></a> <dt> o <b>LongTransaction</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>LongTransaction</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Indicates if we require a short/long transaction creation for PLM objects. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  TRUE if long transaction
</dl>
</dl>
<a name="PrefixToUseForParametersAddedOnProxy"></a><a name="PrefixToUseForParametersAddedOnProxy()"></a> <dt> o <b>PrefixToUseForParametersAddedOnProxy</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('char','const char *')</script>  <b>PrefixToUseForParametersAddedOnProxy</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns a prefix used to add parameter on a proxy in order to avoid conflicts
</dl>
<a name="RetrieveAdditionalProxies"></a><a name="RetrieveAdditionalProxies(CATLISTV(CATICkeObject_var)&amp;)"></a> <dt> o <b>RetrieveAdditionalProxies</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RetrieveAdditionalProxies</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATICkeObject_var)','CATLISTV(CATICkeObject_var)&amp;')</script> <td><tt>iListToBeFilled</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieving additional proxies if any.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListToBeFilled</tt>
   <dd> List to be filled with proxies</dd>
</dl>
</dl>
</dl>
<a name="RetrieveArgument"></a><a name="RetrieveArgument(int,CATUnicodeString&amp;,CATIValue_var&amp;)"></a> <dt> o <b>RetrieveArgument</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RetrieveArgument</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRank</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIValue_var','CATIValue_var&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the additional arguments to be passed to the implementation.<br>
 Must pass a rank (1 to N) AND a Name (in any case).<br>
 When called from the Knowledge language, the rank correspond to the additional arguments (in reality from 4 to N)
 When called from the PLM New UI, the name is used and it correspond to the name of the parameter added to the proxy.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRank</tt>
   <dd> Rank of the argument in the Knowledge language function
 </dd>
    <dt><tt> iName</tt>
   <dd> Name of the parameter on the proxy
 </dd>
    <dt><tt> oValue</tt>
   <dd> Value found
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if called without rank in Knowledge language context, or without name in PLM New context.
 	 <li> S_FALSE	if the argument has not been found
 	 <li> S_OK      if the argument has been found
  </ol>
</dl>
</dl>
<a name="RetrieveArguments"></a><a name="RetrieveArguments()"></a> <dt> o <b>RetrieveArguments</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script>  <b>RetrieveArguments</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the list of parameters passed as argument of the new.
 Note that for performance purpose, the arguments starts at rank 4 if any
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  liste of arguments
</dl>
</dl>
<a name="RetrieveContainer"></a><a name="RetrieveContainer()"></a> <dt> o <b>RetrieveContainer</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATICkeParmFactory','CATICkeParmFactory_var')</script>  <b>RetrieveContainer</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the container where the object has been created.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  current container retrieved
</dl>
</dl>
<a name="RetrieveProxy"></a><a name="RetrieveProxy()"></a> <dt> o <b>RetrieveProxy</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject_var')</script>  <b>RetrieveProxy</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the proxy that must be used to copy attributes. 
 Can be NULL when called from the Knowledge language.
 Is not NULL when called from the PLM New UI. In this case, it contains a proxy.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  proxy
</dl>
</dl>
<a name="RetrieveReferenceToInsert"></a><a name="RetrieveReferenceToInsert()"></a> <dt> o <b>RetrieveReferenceToInsert</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATICkeObject','CATICkeObject_var')</script>  <b>RetrieveReferenceToInsert</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the reference (or representation) to instanciate if any. 
 Can be NULL
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  proxy
</dl>
</dl>
<a name="SetContainer"></a><a name="SetContainer(CATICkeParmFactory_var&amp;)"></a> <dt> o <b>SetContainer</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetContainer</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParmFactory_var','CATICkeParmFactory_var&amp;')</script> <td><tt>iCont</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Useless in CAA.<br>
 Positions the container where the object is created.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCont</tt>
   <dd> becomes the current container</dd>
</dl>
</dl>
</dl>
<a name="StringInfo"></a><a name="StringInfo()"></a> <dt> o <b>StringInfo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>StringInfo</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Useless in CAA.<br>
 Returns a string information.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  parameters converted as a string
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATInstanciationContext.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

