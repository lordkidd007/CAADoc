<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIKweCustomNaming</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../KnowledgeInterfaces.htm" href="../KnowledgeInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "KnowledgeInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIKweCustomNaming"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>KnowledgeInterfaces Interface CATIKweCustomNaming</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIKweCustomNaming_38923','CATIKweCustomNaming','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../KnowledgeInterfaces/class_CATKweExposeObjectAdapter_49442.htm">CATKweExposeObjectAdapter</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIKweCustomNaming</b>
</p>
<p>
<b><i> Interface dedicated to custom parameters naming.</i></b><br>

 This interface allows implementers to bypass standard parameters naming : usually, parameters names (if they are not renamed)
 are built with the concatenation of fathers separated  by \, and the name of each object is retrieved thanks to CATIAlias interface.
 If one of the fathers implement CATIKweCustomNaming, its custom name is used if UseCustomName returns CATTrue, and its custom father is used if
 UseCustomFather returns CATTrue.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCustomFather()"><b>GetCustomFather</b></a>()
<dd>  Custom father to use if UseCustomFather returns True.
 <dt> o 
    <a href="#GetCustomName()"><b>GetCustomName</b></a>()
<dd>  Custom name to use if UseCustomName returns True.
 <dt> o 
    <a href="#IgnoreInNaming()"><b>IgnoreInNaming</b></a>()
<dd>  Return CATTrue in your implementation if you want this object to be ignored in the parameter naming mechanism
 <dt> o 
    <a href="#UseCustomFather()"><b>UseCustomFather</b></a>()
<dd>  Return CATTrue in your implementation if you want a custom father in parameter naming mechanism
 <dt> o 
    <a href="#UseCustomName()"><b>UseCustomName</b></a>()
<dd>  Return CATTrue in your implementation if you want a custom name in parameter naming mechanism
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetCustomFather"></a><a name="GetCustomFather()"></a> <dt> o <b>GetCustomFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script>  <b>GetCustomFather</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Custom father to use if UseCustomFather returns True. Must be different from NULL_var. The returned object has to implement CATISpecObject
</dl>
<a name="GetCustomName"></a><a name="GetCustomName()"></a> <dt> o <b>GetCustomName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetCustomName</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Custom name to use if UseCustomName returns True. Must be different from empty string.
</dl>
<a name="IgnoreInNaming"></a><a name="IgnoreInNaming()"></a> <dt> o <b>IgnoreInNaming</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IgnoreInNaming</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Return CATTrue in your implementation if you want this object to be ignored in the parameter naming mechanism
</dl>
<a name="UseCustomFather"></a><a name="UseCustomFather()"></a> <dt> o <b>UseCustomFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>UseCustomFather</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Return CATTrue in your implementation if you want a custom father in parameter naming mechanism
</dl>
<a name="UseCustomName"></a><a name="UseCustomName()"></a> <dt> o <b>UseCustomName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>UseCustomName</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Return CATTrue in your implementation if you want a custom name in parameter naming mechanism
</dl>
<hr>
 This object is included in the file: <b>CATIKweCustomNaming.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

