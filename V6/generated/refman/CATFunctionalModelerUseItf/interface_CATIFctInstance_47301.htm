<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFunctionalModelerUseItf Interface CATIFctInstance</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFunctionalModelerUseItf.htm" href="../CATFunctionalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFunctionalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIFctInstance"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFunctionalModelerUseItf Interface CATIFctInstance</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFctInstance_47301','CATIFctInstance','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFctInstance</b>
</p>
<p>
<b><i> Interface designating a Functional Instance.</i></b><br>


 <br><b>Role</b>: This interface is implemented on Functional instances.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Connect(CATIFctPort*,CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)"><b>Connect</b></a>(CATIFctPort*,CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)
<dd>  Connects two instances of Functional systems together.
 <dt> o 
    <a href="#GetConnectedParentPorts(CATIFctPort*,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"><b>GetConnectedParentPorts</b></a>(CATIFctPort*,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)
<dd>  Retrieves the Functional Ports exposing at the upper level a specific port of this instance of Functional system.
 <dt> o 
    <a href="#GetConnectedSiblingSystems(CATIFctPort*,CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"><b>GetConnectedSiblingSystems</b></a>(CATIFctPort*,CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)
<dd>  Retrieves the instances of sibling Functional systems connected to this instance of Functional system.
 <dt> o 
    <a href="#GetFather(CATIFctReference*&amp;)"><b>GetFather</b></a>(CATIFctReference*&amp;)
<dd>  Retrieves the Functional Reference which aggregates this Functional Instance.
 <dt> o 
    <a href="#GetReferenceInstanceOf(CATIFctReference*&amp;)"><b>GetReferenceInstanceOf</b></a>(CATIFctReference*&amp;)
<dd>  Retrieves the instanciated Functional Reference.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Connect"></a><a name="Connect(CATIFctPort*,CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)"></a> <dt> o <b>Connect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Connect</b>(<td><script type="text/javascript"> activateLink('CATIFctPort','CATIFctPort*')</script> <td><tt>ipFromFunctionalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctInstance','CATIFctInstance*')</script> <td><tt>ipToFunctionalInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctPort','CATIFctPort*')</script> <td><tt>ipToFunctionalPort</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctConnection','CATIFctConnection*&amp;')</script> <td><tt>opFunctionalConnection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Connects two instances of Functional systems together.

  <br><b>Role</b>: This method connects this Functional Instance (through a specific Functional Port) to a Functional Instance 
 (through an other specific Functional Port) by creating a Functional Connection. <br>
  These two Functional Instances must be aggregated by the same Functional Reference. <br>
  It corresponds to the Sibling connectivity pattern.
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLConnectionCreationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFromFunctionalPort</tt>
   <dd>      A Functional Port of the Functional Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipToFunctionalInstance</tt>
   <dd>      The instance of Functional system to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipToFunctionalPort</tt>
   <dd>      The specific Functional Port (of the Functional Reference the previous provided instance comes from) to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Connection to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalConnection will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional connection to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  opFunctionalConnection</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Connection that connects the two instances of Functional systems. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetConnectedParentPorts"></a><a name="GetConnectedParentPorts(CATIFctPort*,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"></a> <dt> o <b>GetConnectedParentPorts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedParentPorts</b>(<td><script type="text/javascript"> activateLink('CATIFctPort','CATIFctPort*')</script> <td><tt>ipFunctionalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctPort_var','CATListValCATIFctPort_var&amp;')</script> <td><tt>oLConnectedFunctionalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctConnection_var','CATListValCATIFctConnection_var&amp;')</script> <td><tt>oLFunctionalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Functional Ports exposing at the upper level a specific port of this instance of Functional system.

  <br><b>Role</b>: This method retrieves the Functional Ports exposing a specified Functional Port of this Functional Instance. <br>
  The specified Functional Port must belong to the Functional Reference this Functional Instance comes from. <br>
  It corresponds to the Parent-Child connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFunctionalPort</tt>
   <dd>      A Functional Port of the Functional Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  oLConnectedFunctionalPorts</tt>
   <dd>      A list of Functional Ports exposing the specified Functional Port of this Functional Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLFunctionalConnections</tt>
   <dd>      A list of Functional Connections (related to the previous list of Functional Ports) materializing the link between the specified port of this instance and the Functional Ports of the upper Functional system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds and the exposing port(s) (if exist(s)) is(are) retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetConnectedSiblingSystems"></a><a name="GetConnectedSiblingSystems(CATIFctPort*,CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"></a> <dt> o <b>GetConnectedSiblingSystems</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedSiblingSystems</b>(<td><script type="text/javascript"> activateLink('CATIFctPort','CATIFctPort*')</script> <td><tt>ipFunctionalPort</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctInstance_var','CATListValCATIFctInstance_var&amp;')</script> <td><tt>oLConnectedFunctionalInstances</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctPort_var','CATListValCATIFctPort_var&amp;')</script> <td><tt>oLConnectedFunctionalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctConnection_var','CATListValCATIFctConnection_var&amp;')</script> <td><tt>oLFunctionalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instances of sibling Functional systems connected to this instance of Functional system.

  <br><b>Role</b>: This method, given this Functional Instance and a Functional Port retrieves the instances of Functional systems (corresponding Functional Instances and Functional Ports) connected through Functional Connections. <br>
  The specified Functional Port must belong to the Functional Reference this Functional Instance comes from. <br>
  It corresponds to the Sibling connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFunctionalPort</tt>
   <dd>      A Functional Port of the Functional Reference this instance comes from. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  oLConnectedFunctionalInstances</tt>
   <dd>      A list of Functional Instances corresponding to the systems connected to this instance of Functional system given the specified Functional Port. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLConnectedFunctionalPorts</tt>
   <dd>      A list of Functional Ports (related to the previous list of Functional Instances) designating on which port is connnected this instance of Functional system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLFunctionalConnections</tt>
   <dd>      A list of Functional Connections (related to the previous list of Functional instances) materializing the link between this instance of Functional system and the other connected instances of Functional system. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds and the connected Functional systems (if exist) are retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetFather"></a><a name="GetFather(CATIFctReference*&amp;)"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFather</b>(<td><script type="text/javascript"> activateLink('CATIFctReference','CATIFctReference*&amp;')</script> <td><tt>opFunctionalReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Functional Reference which aggregates this Functional Instance.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opFunctionalReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The Functional Reference aggregating <tt>this</tt> Functional Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are incorrect. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetReferenceInstanceOf"></a><a name="GetReferenceInstanceOf(CATIFctReference*&amp;)"></a> <dt> o <b>GetReferenceInstanceOf</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferenceInstanceOf</b>(<td><script type="text/javascript"> activateLink('CATIFctReference','CATIFctReference*&amp;')</script> <td><tt>opFunctionalReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instanciated Functional Reference.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opFunctionalReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The instantiated Functional Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFctInstance.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFunctionalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

