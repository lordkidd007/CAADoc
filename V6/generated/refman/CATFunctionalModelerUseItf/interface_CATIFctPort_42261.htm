<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFunctionalModelerUseItf Interface CATIFctPort</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFunctionalModelerUseItf.htm" href="../CATFunctionalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFunctionalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIFctPort"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFunctionalModelerUseItf Interface CATIFctPort</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFctPort_42261','CATIFctPort','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFctPort</b>
</p>
<p>
<b><i> Interface designating a Functional Port and providing means to manage the Functional Port properties.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Connect(CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)"><b>Connect</b></a>(CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)
<dd>  Connects this Functional Port (of a Functional system) to an instance of Functional subsystem through a specific port.
 <dt> o 
    <a href="#GetConnectedSubSystems(CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"><b>GetConnectedSubSystems</b></a>(CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)
<dd>  Retrieves the instances of Functional subsystems connected to this Functional Port.
 <dt> o 
    <a href="#GetDirection(PortDirection&amp;)"><b>GetDirection</b></a>(PortDirection&amp;)
<dd>  Retrieves the direction of this Functional Port.
 <dt> o 
    <a href="#GetFlow(CATIFctFlowReference*&amp;)"><b>GetFlow</b></a>(CATIFctFlowReference*&amp;)
<dd>  Retrieves the Functional Flow Reference associated to this Functional Port.
 <dt> o 
    <a href="#GetFlowInstance(CATIFctFlowInstance*&amp;)"><b>GetFlowInstance</b></a>(CATIFctFlowInstance*&amp;)
<dd>  Retrieves the Functional Flow Instance associated to this Functional Port.
 <dt> o 
    <a href="#GetParent(void**,IID&amp;)"><b>GetParent</b></a>(void**,IID&amp;)
<dd>  Retrieves the Functional Reference aggregating this Functional Port.
 <dt> o 
    <a href="#RemoveFlow()"><b>RemoveFlow</b></a>()
<dd>  Removes the Functional Flow associated to this Functional Port.
 <dt> o 
    <a href="#SetDirection(PortDirection)"><b>SetDirection</b></a>(PortDirection)
<dd>  Sets the direction of this Functional Port.
 <dt> o 
    <a href="#SetFlow(CATIFctFlowReference*)"><b>SetFlow</b></a>(CATIFctFlowReference*)
<dd>  Sets the Functional Flow associated to this Functional Port.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#PortDirection"><b>PortDirection</b></a>
<dd>  Defines the direction of a Functional Port.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Connect"></a><a name="Connect(CATIFctInstance*,CATIFctPort*,CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctConnection*&amp;)"></a> <dt> o <b>Connect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Connect</b>(<td><script type="text/javascript"> activateLink('CATIFctInstance','CATIFctInstance*')</script> <td><tt>ipFunctionalInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctPort','CATIFctPort*')</script> <td><tt>ipFunctionalPort</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctConnection','CATIFctConnection*&amp;')</script> <td><tt>opFunctionalConnection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Connects this Functional Port (of a Functional system) to an instance of Functional subsystem through a specific port.

  <br><b>Role</b>: This method connects this Functional Port to a Functional Instance through a specific Functional Port
  (of a Functional Reference the instance comes from) by creating a Functional Connection. The Functional Instance must be aggregated by the Functional Reference
  this Functional Port belongs. <br>
  It corresponds to the Parent-Child connectivity pattern.
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLConnectionCreationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFunctionalInstance</tt>
   <dd>      The instance of Functional subsystem to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ipFunctionalPort</tt>
   <dd>      The specific Functional Port of Functional Reference (the previous provided instance comes from) to be connected with. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Connection to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalConnection will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional connection to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  opFunctionalConnection</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Connection. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 
</dl>
</dl>
<a name="GetConnectedSubSystems"></a><a name="GetConnectedSubSystems(CATListValCATIFctInstance_var&amp;,CATListValCATIFctPort_var&amp;,CATListValCATIFctConnection_var&amp;)"></a> <dt> o <b>GetConnectedSubSystems</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConnectedSubSystems</b>(<td><script type="text/javascript"> activateLink('CATListValCATIFctInstance_var','CATListValCATIFctInstance_var&amp;')</script> <td><tt>oLConnectedFunctionalInstances</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctPort_var','CATListValCATIFctPort_var&amp;')</script> <td><tt>oLConnectedFunctionalPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATIFctConnection_var','CATListValCATIFctConnection_var&amp;')</script> <td><tt>oLFunctionalConnections</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the instances of Functional subsystems connected to this Functional Port.

  <br><b>Role</b>: This method retrieves the Functional Instances (and the specific Functional Ports) connected to this Functional Port
  through Functional Connections. <br>
  It corresponds to the Parent-Child connectivity pattern.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oLConnectedFunctionalInstances</tt>
   <dd>      A list of Functional Instances of systems connected to this Functional Port. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLConnectedFunctionalPorts</tt>
   <dd>      A list of Functional Ports (related to the previous list of Functional Instances). <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
    <dt><tt>  oLFunctionalConnections</tt>
   <dd>      A list of Functional Connections (related to the previous list of Functional Instances) metarializing the link between this Functional Port and the connected instances of Functional systems. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds and the exposed Functional systems (if exist) are retrieved. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetDirection"></a><a name="GetDirection(PortDirection&amp;)"></a> <dt> o <b>GetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDirection</b>(<td><script type="text/javascript"> activateLink('PortDirection','PortDirection&amp;')</script> <td><tt>oDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the direction of this Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oDirection</tt>
   <dd>      The Functional Port direction. <br>
      Output parameter. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetFlow"></a><a name="GetFlow(CATIFctFlowReference*&amp;)"></a> <dt> o <b>GetFlow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFlow</b>(<td><script type="text/javascript"> activateLink('CATIFctFlowReference','CATIFctFlowReference*&amp;')</script> <td><tt>opFunctionalFlowReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Functional Flow Reference associated to this Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opFunctionalFlowReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      A Functional Flow Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. opFunctionalFlowReference may be NULL if there is no associated flow.<br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetFlowInstance"></a><a name="GetFlowInstance(CATIFctFlowInstance*&amp;)"></a> <dt> o <b>GetFlowInstance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFlowInstance</b>(<td><script type="text/javascript"> activateLink('CATIFctFlowInstance','CATIFctFlowInstance*&amp;')</script> <td><tt>opFunctionalFlowInstance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Functional Flow Instance associated to this Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  opFunctionalFlowInstance</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      A Functional Flow Instance. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. opFunctionalFlowInstance may be NULL if there is no associated flow.<br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="GetParent"></a><a name="GetParent(void**,IID&amp;)"></a> <dt> o <b>GetParent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParent</b>(<td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oppParent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIFctReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Functional Reference aggregating this Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oppParent</tt>
   <dd>      A Functional Reference or a Functional Mux/Demux Reference. <br>
      Output parameter. <br>
  </dd>
    <dt><tt>  iIID</tt>
   <dd>      The desired interface. CATIFctReference by default. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="RemoveFlow"></a><a name="RemoveFlow()"></a> <dt> o <b>RemoveFlow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveFlow</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes the Functional Flow associated to this Functional Port.

  
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds and the associated Functional Flow if exists has been removed.<br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="SetDirection"></a><a name="SetDirection(PortDirection)"></a> <dt> o <b>SetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDirection</b>(<td><script type="text/javascript"> activateLink('PortDirection','PortDirection')</script> <td><tt>iDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the direction of this Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iDirection</tt>
   <dd>      The new Functional Port direction. <br>
      Input parameter. <br>
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="SetFlow"></a><a name="SetFlow(CATIFctFlowReference*)"></a> <dt> o <b>SetFlow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFlow</b>(<td><script type="text/javascript"> activateLink('CATIFctFlowReference','CATIFctFlowReference*')</script> <td><tt>ipFunctionalFlowReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the Functional Flow associated to this Functional Port.

 <br><b>Role</b>: This method associates the given Functional Flow Reference by instantiating it and associating it to the Functional Port. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>FLTypeAssociationCheck</li>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ipFunctionalFlowReference</tt>
   <dd>      A Functional Flow Reference. <br>
      Input parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if the provided parameter is unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="PortDirection"> <dt> o <b>PortDirection</b>
<dl>
  <dd>
<pre>
enum <b>PortDirection</b> {
  In,
  Out
}
</pre>
 Defines the direction of a Functional Port.

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  In</tt>
   <dd>      Port In.
  </dd>
    <dt><tt>  Out</tt>
   <dd>      Port Out.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFctPort.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFunctionalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

