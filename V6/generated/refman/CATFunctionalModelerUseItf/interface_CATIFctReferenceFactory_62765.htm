<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFunctionalModelerUseItf Interface CATIFctReferenceFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFunctionalModelerUseItf.htm" href="../CATFunctionalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFunctionalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIFctReferenceFactory"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFunctionalModelerUseItf Interface CATIFctReferenceFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFctReferenceFactory_62765','CATIFctReferenceFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFctReferenceFactory</b>
</p>
<p>
<b><i> Interface to create Functional References objects.</i></b><br>

 <b>Role:</b> This interface is a factory for creation of Functional references.<br>
 <p>

 <dl>
  <dt> Example: </dt>
  <dd> <pre class="code">  CATIFctReferenceFactory *pFunctionalReferenceFactory = NULL; <br>
  HRESULT Hr = CATFctFactoriesProvider::GetReferenceFactory(pFunctionalReferenceFactory); <br>
  if(SUCCEEDED(Hr) && pFunctionalReferenceFactory) <br>
  { <br>
    ... <br>
  } <br>
  if (NULL!=pFunctionalReferenceFactory) <br>
  { <br>
    pFunctionalReferenceFactory->Release(); <br>
    pFunctionalReferenceFactory=NULL; <br>
  } <br>

 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATFctFactoriesProvider','','CATFctFactoriesProvider') </script>, <script type="text/javascript"> activateLinkAnchor('CATIFctReference','','CATIFctReference') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateDemultiplexer(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)"><b>CreateDemultiplexer</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)
<dd>  Builds a Functional Demultiplexer Reference.
 <dt> o 
    <a href="#CreateFlowReference(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*&amp;)"><b>CreateFlowReference</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*&amp;)
<dd>  Creates a Functional Flow Reference.
 <dt> o 
    <a href="#CreateMultiplexer(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)"><b>CreateMultiplexer</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)
<dd>  Builds a Functional Mutiplexer Reference.
 <dt> o 
    <a href="#CreateReference(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctReference*&amp;)"><b>CreateReference</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctReference*&amp;)
<dd>  Creates a Functional Reference.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateDemultiplexer"></a><a name="CreateDemultiplexer(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)"></a> <dt> o <b>CreateDemultiplexer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateDemultiplexer</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctFlowReference','CATIFctFlowReference*')</script> <td><tt>ipStructuredFunctionalFlow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctMuxDemuxReference','CATIFctMuxDemuxReference*&amp;')</script> <td><tt>opFunctionalDemultiplexerReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Builds a Functional Demultiplexer Reference.

 <br><b>Role</b>: This method builds a Functional Demultiplexer Reference using the specified structured Functional Flow Reference. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Demultiplexer Reference to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalCommunicationReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional demultiplexer reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  ipStructuredFunctionalFlow</tt>
   <dd>      A structured Functional Flow Reference. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns E_INVALIDARG otherwise.
  </dd>
    <dt><tt>  opFunctionalDemultiplexerReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Demultiplexer Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="CreateFlowReference"></a><a name="CreateFlowReference(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*&amp;)"></a> <dt> o <b>CreateFlowReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateFlowReference</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctFlowReference','CATIFctFlowReference*&amp;')</script> <td><tt>opFunctionalFlowReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a Functional Flow Reference.

 <br><b>Role</b>: This method creates a Functional Flow Reference. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Flow Reference to create. If this argument is a NULL pointer, the modeler type RFLPLMFlowReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional flow reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Note that the mandatory attribute <tt>V_Category</tt> must be set either to <tt>Data</tt> (its purpose is to exchange data) or <tt>Control</tt> (its purpose is to order the activation/de-activation of a function). <br>
      Input Parameter.
  </dd>
    <dt><tt>  opFunctionalFlowReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Flow Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="CreateMultiplexer"></a><a name="CreateMultiplexer(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctFlowReference*,CATIFctMuxDemuxReference*&amp;)"></a> <dt> o <b>CreateMultiplexer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateMultiplexer</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctFlowReference','CATIFctFlowReference*')</script> <td><tt>ipStructuredFunctionalFlow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctMuxDemuxReference','CATIFctMuxDemuxReference*&amp;')</script> <td><tt>opFunctionalMultiplexerReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Builds a Functional Mutiplexer Reference.

 <br><b>Role</b>: This method builds a Functional Multiplexer Reference using the specified structured Functional Flow Reference. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Multiplexer Reference to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalCommunicationReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional multiplexer reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  ipStructuredFunctionalFlow</tt>
   <dd>      A structured Functional Flow Reference. <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as NULL. This method returns E_INVALIDARG otherwise.
  </dd>
    <dt><tt>  opFunctionalMultiplexerReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Multiplexer Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="CreateReference"></a><a name="CreateReference(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATIFctReference*&amp;)"></a> <dt> o <b>CreateReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateReference</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctReference','CATIFctReference*&amp;')</script> <td><tt>opFunctionalReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a Functional Reference.

 <br><b>Role</b>: This method creates a Functional Reference. <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Reference to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  opFunctionalReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns E_INVALIDARG otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFctReferenceFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFunctionalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

