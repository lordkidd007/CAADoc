<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFunctionalModelerUseItf Interface CATIFctRepresentationReferenceFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFunctionalModelerUseItf.htm" href="../CATFunctionalModelerUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFunctionalModelerUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIFctRepresentationReferenceFactory"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFunctionalModelerUseItf Interface CATIFctRepresentationReferenceFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFctRepresentationReferenceFactory_106048','CATIFctRepresentationReferenceFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFctRepresentationReferenceFactory</b>
</p>
<p>
<b><i> Interface to create Functional Representation References objects.</i></b><br>

 <b>Role:</b> This interface is a factory to allowing to create Functional representation references.<br>
 <p>

 <dl>
  <dt> Example: </dt>
  <dd> <pre class="code">  CATIFctRepresentationReferenceFactory *pFunctionalRepReferenceFactory = NULL; <br>
  HRESULT Hr = CATFctFactoriesProvider::GetRepresentationReferenceFactory(pFunctionalRepReferenceFactory); <br>
  if(SUCCEEDED(Hr) && pFunctionalRepReferenceFactory) <br>
  { <br>
    ... <br>

  </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATFctFactoriesProvider','','CATFctFactoriesProvider') </script>, <script type="text/javascript"> activateLinkAnchor('CATIFct2DPictureRepReference','','CATIFct2DPictureRepReference') </script>, <script type="text/javascript"> activateLinkAnchor('CATIFctRepresentationReferenceFactory','','CATIFctRepresentationReferenceFactory') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateWith2DPicture(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFct2DPictureRepReference*&amp;)"><b>CreateWith2DPicture</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFct2DPictureRepReference*&amp;)
<dd>  Creates a Functional 2D Picture Representation Reference.
 <dt> o 
    <a href="#CreateWithNonCATIAContent(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFctRepresentationReference*&amp;)"><b>CreateWithNonCATIAContent</b></a>(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFctRepresentationReference*&amp;)
<dd>  Creates a multi-instantiable Functional Non DSContent Representation Reference with a non CATIA stream.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateWith2DPicture"></a><a name="CreateWith2DPicture(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFct2DPictureRepReference*&amp;)"></a> <dt> o <b>CreateWith2DPicture</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateWith2DPicture</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPicturePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFct2DPictureRepReference','CATIFct2DPictureRepReference*&amp;')</script> <td><tt>op2DPictureRepReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a Functional 2D Picture Representation Reference.

 <br><b>Role</b>: This method creates a Functional Representation Reference with an associated 2D Picture given
 the path of the picture file. Supported picture file types are the following ones: jpg, jpeg, bmp, tif, tiff and png. <br>
 The stream corresponding to the picture file will be saved into the database (without keeping any reference to the provided path). <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

 Once created, the 2D Picture Representation Reference can be associated to one or several Functional References using 
<script type="text/javascript"> activateLinkAnchor('CATIFct2DPictures','','CATIFct2DPictures') </script> interface.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the 2D Picture Representation Reference to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalRepReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional 2D representation reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  iPicturePath</tt>
   <dd>      A path corresponding to a picture file.<br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as empty. This method returns an error otherwise.
  </dd>
    <dt><tt>  op2DPictureRepReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created 2D Picture Representation Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<a name="CreateWithNonCATIAContent"></a><a name="CreateWithNonCATIAContent(CATIType_var&amp;,CATIAdpEnvironment*,CATListValCATICkeParm_var&amp;,CATUnicodeString&amp;,CATIFctRepresentationReference*&amp;)"></a> <dt> o <b>CreateWithNonCATIAContent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateWithNonCATIAContent</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ispType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipEnvtForProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICkeParm_var','CATListValCATICkeParm_var&amp;')</script> <td><tt>iLFctAttributesValues</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDocumentPath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIFctRepresentationReference','CATIFctRepresentationReference*&amp;')</script> <td><tt>opFunctionalRepReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a multi-instantiable Functional Non DSContent Representation Reference with a non CATIA stream.

 <br><b>Role</b>: This method creates a Functional Non DSContent Representation Reference with an associated non CATIA stream (given
 the path of a document). <br>
 Main supported non CATIA documents are the following ones: xls, doc, txt, xml, pdf, jpg,... <br>
 The stream corresponding to the non CATIA document file will be saved into the database (without keeping any reference to the provided path). <br>
 <p>This API invokes the following Business Logic Openness: </p>
 <ul>
 <li>PLMIdentificationInitialization</li>
 </ul>
 <p>For any information about Business Logic Openness, refer to the CAA 
 Encyclopedia documentation: Reference \ Business Logic Openness section. <p>

  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  ispType</tt>
   <dd>      The type of the Functional Representation Reference to create. If this argument is a NULL pointer OR is not a a sort of FunctionalNonDSContentRepReference, 
      the modeler type RFLPLMFunctionalRepReference will be used by default for creation. <br>
      Input Parameter.
  </dd>
    <dt><tt>  ipEnvtForProject</tt>
   <dd>      The environment defining the project. The project determines the deployment type to associate (or not) with the new PLM Object. <br>
      If the argument is NULL, the current environment is used. <br>
      Input Parameter.
  </dd>
    <dt><tt>  iLFctAttributesValues</tt>
   <dd>      A list of Functional attributes values (of the Functional representation reference to create). <br>
      The compliancy of attributes values will be checked relatively to their definition in metadata (mandatory, size, type). <br>
      Input Parameter. <br>
      This list must be empty.
  </dd>
    <dt><tt>  iDocumentPath</tt>
   <dd>      The file path of the non CATIA document (including its extension). <br>
      Input Parameter. <br>
      This parameter MUST NOT be provided by caller as empty. This method returns an error otherwise.
  </dd>
    <dt><tt>  opFunctionalRepReference</tt>
   <dd> [out, CATBaseUnknown#Release] <br>      The created Functional Representation Reference. <br>
      Output parameter. <br>
      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
      This parameter is returned to caller as NULL if method fails. <br>
      This parameter is valuated if method succeeds.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <code>S_OK</code> if the method succeeds. <br>
      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
      <code>E_FAIL</code> otherwise. <br>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFctRepresentationReferenceFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFunctionalModelerUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

