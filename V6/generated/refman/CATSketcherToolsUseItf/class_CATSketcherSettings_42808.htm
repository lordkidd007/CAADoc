<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATSketcherToolsUseItf Class CATSketcherSettings</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATSketcherToolsUseItf.htm" href="../CATSketcherToolsUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATSketcherToolsUseItf";	}
		function getCurrentObjectName() { 
 	return "CATSketcherSettings"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATSketcherToolsUseItf <script type="text/javascript" > writeClassCharacteristic(); </script> CATSketcherSettings</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATSketcherSettings_42808','CATSketcherSettings','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATSketcherSettings</b>
</p>
<p>
<b><i> Abstract class defining the setttings of the Sketcher behavior.</i></b><br>
 
 <br><b>Precondition<\b>Only one instance of Sketcher settings exists in the same time. When an application 
 uses the sketcher component the sketcher settings must be initialized. If the application can not initialized
 it, settings must be initialized to <tt>NULL</tt> to activate the protocol <tt>CATISketcherSettings</tt>
 interface.
 This interface exports 5 events. The type of these events are accessible by the following methods:
                GridModification()
                CpltModification()
                SnapModification()
                Visu3DUIModification()
                GeomUIModification()
                MultiModification()</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATDeclareCBEvent(GridModification)"><b>CATDeclareCBEvent</b></a>(GridModification)
<dd>  Defines the event to control the settings modification linked to the Grid.
 <dt> o 
    <a href="#CATDeclareCBEvent(SnapModification)"><b>CATDeclareCBEvent</b></a>(SnapModification)
<dd>  Defines the event to control the settings modification linked to the snap on the Grid.
 <dt> o 
    <a href="#CATDeclareCBEvent(CpltModification)"><b>CATDeclareCBEvent</b></a>(CpltModification)
<dd>  Defines the event to control the settings modification linked to the Smartpick.
 <dt> o 
    <a href="#CATDeclareCBEvent(MultiModification)"><b>CATDeclareCBEvent</b></a>(MultiModification)
<dd>  Defines the event to control the settings modification linked to several type of previous events.
 <dt> o 
    <a href="#CATDeclareCBEvent(GeomUIModification)"><b>CATDeclareCBEvent</b></a>(GeomUIModification)
<dd>  Defines the event to control the settings modification linked to the geometry management.
 <dt> o 
    <a href="#CATDeclareCBEvent(Visu3DUIModification)"><b>CATDeclareCBEvent</b></a>(Visu3DUIModification)
<dd>  Defines the event to control the settings modification linked to the visual behavior.
 <dt> o 
    <a href="#GetAllowDistortions(void)"><b>GetAllowDistortions</b></a>(void)
<dd>  Returns the mode of disproportion of the Grid.
 <dt> o 
    <a href="#GetAllowDistortions(CATCkeScale)"><b>GetAllowDistortions</b></a>(CATCkeScale)
<dd>  Returns the mode of disproportion of the Grid.
 <dt> o 
    <a href="#GetColorConstructElts(unsigned int*,unsigned int*,unsigned int*)"><b>GetColorConstructElts</b></a>(unsigned int*,unsigned int*,unsigned int*)
<dd>  Returns the color of constructed elements.
 <dt> o 
    <a href="#GetColorDiagElts(CAT2DCstDiag,unsigned int*,unsigned int*,unsigned int*)"><b>GetColorDiagElts</b></a>(CAT2DCstDiag,unsigned int*,unsigned int*,unsigned int*)
<dd>  Returns the color code of the constraint elements.
 <dt> o 
    <a href="#GetColorIsolatedElts(unsigned int*,unsigned int*,unsigned int*)"><b>GetColorIsolatedElts</b></a>(unsigned int*,unsigned int*,unsigned int*)
<dd>  Returns the color of isolated elements.
 <dt> o 
    <a href="#GetColorProtectedElts(unsigned int*,unsigned int*,unsigned int*)"><b>GetColorProtectedElts</b></a>(unsigned int*,unsigned int*,unsigned int*)
<dd>  Returns the color of protected elements.
 <dt> o 
    <a href="#GetColorSmartPick(unsigned int*,unsigned int*,unsigned int*)"><b>GetColorSmartPick</b></a>(unsigned int*,unsigned int*,unsigned int*)
<dd>  Returns the color of picking assistant elements.
 <dt> o 
    <a href="#GetCreateCenter(void)"><b>GetCreateCenter</b></a>(void)
<dd>  Returns the mode of creation of the circle center or ellipse center (check button).
 <dt> o 
    <a href="#GetCreateConstraint(void)"><b>GetCreateConstraint</b></a>(void)
<dd>  Returns the constraint creation mode detected by the picking assistant (check button).
 <dt> o 
    <a href="#GetDiagElts(void)"><b>GetDiagElts</b></a>(void)
<dd>  Returns the visualization mode of constraint elements diagnostic.
 <dt> o 
    <a href="#GetDirHorVert(void)"><b>GetDirHorVert</b></a>(void)
<dd>  Returns the detection mode for elements created horizontally or vertically(check button).
 <dt> o 
    <a href="#GetDirParaPerpTan(void)"><b>GetDirParaPerpTan</b></a>(void)
<dd>  Returns the detection mode of parallelism, perpandicularity and tangent elements (check buttons) .
 <dt> o 
    <a href="#GetDirParallel(void)"><b>GetDirParallel</b></a>(void)
<dd>  Returns the detection mode of parallelism (check button)
 
 <dt> o 
    <a href="#GetDirPerpend(void)"><b>GetDirPerpend</b></a>(void)
<dd>  Returns the detection mode of perpandicularity (check button)
 
 <dt> o 
    <a href="#GetDirTangent(void)"><b>GetDirTangent</b></a>(void)
<dd>  Returns the detection mode of tangent elements (check button)
 
 <dt> o 
    <a href="#GetDragElts(void)"><b>GetDragElts</b></a>(void)
<dd>  Returns the dragging mode of sketch elements (check button).
 <dt> o 
    <a href="#GetDragMode(void)"><b>GetDragMode</b></a>(void)
<dd>  Returns the dragging mode of sketch elements (radio-button).
 <dt> o 
    <a href="#GetDragWithEndPts(void)"><b>GetDragWithEndPts</b></a>(void)
<dd>  Returns the dragging mode of the elements created in the sketch (check button).
 <dt> o 
    <a href="#GetGridAdaptativeMode(void)"><b>GetGridAdaptativeMode</b></a>(void)
<dd>  Returns the mode of grid scaling w.
 <dt> o 
    <a href="#GetGridGroundMode(void)"><b>GetGridGroundMode</b></a>(void)
<dd>  Returns the visualization mode of the shadow Grid (check button).
 <dt> o 
    <a href="#GetGridPrimSpac(void)"><b>GetGridPrimSpac</b></a>(void)
<dd>  Returns the step of the Grid in MKS unit.
 <dt> o 
    <a href="#GetGridPrimSpac(CATCkeScale)"><b>GetGridPrimSpac</b></a>(CATCkeScale)
<dd>  Returns the step of the Grid in MKS unit.
 <dt> o 
    <a href="#GetGridSecStep(void)"><b>GetGridSecStep</b></a>(void)
<dd>  Returns the number of graduations of the primary spacing.
 <dt> o 
    <a href="#GetGridSecStep(CATCkeScale)"><b>GetGridSecStep</b></a>(CATCkeScale)
<dd>  Returns the number of graduations of the primary spacing.
 <dt> o 
    <a href="#GetGridSnapMode(void)"><b>GetGridSnapMode</b></a>(void)
<dd>  Returns the mode of points creation: On the Grid or not (Check Button).
 <dt> o 
    <a href="#GetGridVPrimSpac(void)"><b>GetGridVPrimSpac</b></a>(void)
<dd>  Returns the step of the Grid in the V direction in MKS unit.
 <dt> o 
    <a href="#GetGridVPrimSpac(CATCkeScale)"><b>GetGridVPrimSpac</b></a>(CATCkeScale)
<dd>  Returns the step of the Grid in the V direction in MKS unit.
 <dt> o 
    <a href="#GetGridVSecStep(void)"><b>GetGridVSecStep</b></a>(void)
<dd>  Returns the number of graduations in the V direction of the primary spacing.
 <dt> o 
    <a href="#GetGridVSecStep(CATCkeScale)"><b>GetGridVSecStep</b></a>(CATCkeScale)
<dd>  Returns the number of graduations in the V direction of the primary spacing.
 <dt> o 
    <a href="#GetGridVisuMode(void)"><b>GetGridVisuMode</b></a>(void)
<dd>  Returns the visualization mode of the grid (check button).
 <dt> o 
    <a href="#GetPosHorVertTo(void)"><b>GetPosHorVertTo</b></a>(void)
<dd>  Returns the detection mode when the elements are created at the verticality or 
 horizontality of other element (check button)
 
 <dt> o 
    <a href="#GetPosSupports(void)"><b>GetPosSupports</b></a>(void)
<dd>  Returns the detection mode of the geometry.
 <dt> o 
    <a href="#GetShowPosition()"><b>GetShowPosition</b></a>()
<dd>  Returns the display of the H and V parameters in the toolbar.
 <dt> o 
    <a href="#GetShowPositionOnCursor()"><b>GetShowPositionOnCursor</b></a>()
<dd>  Returns the display of the H and V parameters in the cursor.
 <dt> o 
    <a href="#GetSketcherSettings(void)"><b>GetSketcherSettings</b></a>(void)
<dd>  Returns the settings of the sketcher component used by the current application.
 <dt> o 
    <a href="#GetValidateConstraint(void)"><b>GetValidateConstraint</b></a>(void)
<dd>  Returns the constraint creation mode if a parameter is valuated in the toolbar "Sketchere Information" (check button)
 
 <dt> o 
    <a href="#GetValidateCstType(CAT2DCstType)"><b>GetValidateCstType</b></a>(CAT2DCstType)
<dd>  Returns the mode of creation of the given constraint.
 <dt> o 
    <a href="#GetViewNormalTo(void)"><b>GetViewNormalTo</b></a>(void)
<dd>  Returns the "enter" mode of the sketch (Check button).
 <dt> o 
    <a href="#SaveRepository(void)"><b>SaveRepository</b></a>(void)
<dd>  Saves the repository of the sketcher settings.
 <dt> o 
    <a href="#SetAllowDistortions(int,int)"><b>SetAllowDistortions</b></a>(int,int)
<dd>  Defines  le mode de disproportions de la grille.
 <dt> o 
    <a href="#SetAllowDistortions(int,int,CATCkeScale)"><b>SetAllowDistortions</b></a>(int,int,CATCkeScale)
<dd>  Defines  le mode de disproportions de la grille.
 <dt> o 
    <a href="#SetColorConstructElts(unsigned int,unsigned int,unsigned int,int)"><b>SetColorConstructElts</b></a>(unsigned int,unsigned int,unsigned int,int)
<dd>  Defines the color code of constructed element.
 <dt> o 
    <a href="#SetColorDiagElts(CAT2DCstDiag,unsigned int,unsigned int,unsigned int,int)"><b>SetColorDiagElts</b></a>(CAT2DCstDiag,unsigned int,unsigned int,unsigned int,int)
<dd>  Defines the color code by diagnostic.
 <dt> o 
    <a href="#SetColorIsolatedElts(unsigned int,unsigned int,unsigned int,int)"><b>SetColorIsolatedElts</b></a>(unsigned int,unsigned int,unsigned int,int)
<dd>  Defines the color code of isolated elements.
 <dt> o 
    <a href="#SetColorProtectedElts(unsigned int,unsigned int,unsigned int,int)"><b>SetColorProtectedElts</b></a>(unsigned int,unsigned int,unsigned int,int)
<dd>  Defines the color code of protected elements.
 <dt> o 
    <a href="#SetColorSmartPick(unsigned int,unsigned int,unsigned int,int)"><b>SetColorSmartPick</b></a>(unsigned int,unsigned int,unsigned int,int)
<dd>  Defines the color code of the picking assistant element.
 <dt> o 
    <a href="#SetCreateCenter(int,int)"><b>SetCreateCenter</b></a>(int,int)
<dd>  Defines the mode of circle centers creation or ellispe centers creation.
 <dt> o 
    <a href="#SetCreateConstraint(int,int)"><b>SetCreateConstraint</b></a>(int,int)
<dd>  Definit the creation mode of detected constraint by the picking assistant.
 <dt> o 
    <a href="#SetDiagElts(int,int)"><b>SetDiagElts</b></a>(int,int)
<dd>  Defines the visualization mode of constraint elements diagnostic.
 <dt> o 
    <a href="#SetDirHorVert(int,int)"><b>SetDirHorVert</b></a>(int,int)
<dd>  Defines the detection mode of the picking assistant to create vertical or horizontal elements.
 <dt> o 
    <a href="#SetDirParallel(int,int)"><b>SetDirParallel</b></a>(int,int)
<dd>  Defines the detection mode fot the picking assistant to create an element parallel to an other element.
 <dt> o 
    <a href="#SetDirPerpend(int,int)"><b>SetDirPerpend</b></a>(int,int)
<dd>  Defines the detection mode fot the picking assistant to create an element perpandicular to an other element.
 <dt> o 
    <a href="#SetDirTangent(int,int)"><b>SetDirTangent</b></a>(int,int)
<dd>  Defines the detection mode fot the picking assistant to create a tangent element to an other element.
 <dt> o 
    <a href="#SetDragElts(int,int)"><b>SetDragElts</b></a>(int,int)
<dd>  Defines the mode of moving elements int the sketch.
 <dt> o 
    <a href="#SetDragMode(int,int)"><b>SetDragMode</b></a>(int,int)
<dd>  Defines the mode of moving elements int the sketch.
 <dt> o 
    <a href="#SetDragWithEndPts(int,int)"><b>SetDragWithEndPts</b></a>(int,int)
<dd>  Defines the mode of moving elements int the sketch.
 <dt> o 
    <a href="#SetGridGroundMode(int,int)"><b>SetGridGroundMode</b></a>(int,int)
<dd>  Defines the display of the shadow mode of the Grid.
 <dt> o 
    <a href="#SetGridPrimSpac(double,int)"><b>SetGridPrimSpac</b></a>(double,int)
<dd>  Defines the primary spacing of the Grid in MKS (m).
 <dt> o 
    <a href="#SetGridPrimSpac(double,int,CATCkeScale)"><b>SetGridPrimSpac</b></a>(double,int,CATCkeScale)
<dd>  Defines the primary spacing of the Grid in MKS (m).
 <dt> o 
    <a href="#SetGridSecStep(int,int)"><b>SetGridSecStep</b></a>(int,int)
<dd>  Defines the number of graduations of the primary spacing.
 <dt> o 
    <a href="#SetGridSecStep(int,int,CATCkeScale)"><b>SetGridSecStep</b></a>(int,int,CATCkeScale)
<dd>  Defines the number of graduations of the primary spacing.
 <dt> o 
    <a href="#SetGridSnapMode(int,int)"><b>SetGridSnapMode</b></a>(int,int)
<dd>  Defines the creation mode of points on the Grid.
 <dt> o 
    <a href="#SetGridVPrimSpac(double,int)"><b>SetGridVPrimSpac</b></a>(double,int)
<dd>  Definit le pas principal suivant V de la grille em MKS (m).
 <dt> o 
    <a href="#SetGridVPrimSpac(double,int,CATCkeScale)"><b>SetGridVPrimSpac</b></a>(double,int,CATCkeScale)
<dd>  Definit le pas principal suivant V de la grille em MKS (m).
 <dt> o 
    <a href="#SetGridVSecStep(int,int)"><b>SetGridVSecStep</b></a>(int,int)
<dd>  Defines the number of graduations in "V" direction of the primary spacing.
 <dt> o 
    <a href="#SetGridVSecStep(int,int,CATCkeScale)"><b>SetGridVSecStep</b></a>(int,int,CATCkeScale)
<dd>  Defines the number of graduations in "V" direction of the primary spacing.
 <dt> o 
    <a href="#SetGridVisuMode(int,int)"><b>SetGridVisuMode</b></a>(int,int)
<dd>  Defines the display of the Grid.
 <dt> o 
    <a href="#SetPosHorVertTo(int,int)"><b>SetPosHorVertTo</b></a>(int,int)
<dd>  Defines the detection mode of the picking assistant for elements it le mode de detection de l'assistant pour la creation des elements
 a l'horizontal ou a la vertical des autres elements.
 <dt> o 
    <a href="#SetPosSupports(int,int)"><b>SetPosSupports</b></a>(int,int)
<dd>  Defines the mode of geometry detection of support elements.
 <dt> o 
    <a href="#SetShowPosition(int,int)"><b>SetShowPosition</b></a>(int,int)
<dd>  Defines the display of position parameters (H and V) in the toolbar
 
 <dt> o 
    <a href="#SetShowPositionOnCursor(int,int)"><b>SetShowPositionOnCursor</b></a>(int,int)
<dd>  Defines the display of position parameters (H and V) located on the cursor 
 
 <dt> o 
    <a href="#SetSketcherSettings(CATSketcherSettings*)"><b>SetSketcherSettings</b></a>(CATSketcherSettings*)
<dd>  Forces the initialization of the sketcher settings used by the application.
 <dt> o 
    <a href="#SetValidateConstraint(int,int)"><b>SetValidateConstraint</b></a>(int,int)
<dd>  Defines the creation mode of constraints if a parameter is valuated in the toolbar "Sketcher Information".
 <dt> o 
    <a href="#SetViewNormalTo(int,int)"><b>SetViewNormalTo</b></a>(int,int)
<dd>  Definit the "enter" mode in the sketch.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(GridModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('GridModification','GridModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to the Grid.
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(SnapModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('SnapModification','SnapModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to the snap on the Grid. 
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(CpltModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('CpltModification','CpltModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to the Smartpick.
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(MultiModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('MultiModification','MultiModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to several type of previous events.
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(GeomUIModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('GeomUIModification','GeomUIModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to the geometry management. 
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="CATDeclareCBEvent"></a><a name="CATDeclareCBEvent(Visu3DUIModification)"></a> <dt> o <b>CATDeclareCBEvent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATDeclareCBEvent</b>(<td><script type="text/javascript"> activateLink('Visu3DUIModification','Visu3DUIModification')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the event to control the settings modification linked to the visual behavior. 
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDeclareCBEvent','','CATDeclareCBEvent') </script>
</dl>
</dl>
<a name="GetAllowDistortions"></a><a name="GetAllowDistortions(void)"></a> <dt> o <b>GetAllowDistortions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetAllowDistortions</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of disproportion of the Grid.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the H and the V of the Grid may be differente.
</dl>
</dl>
<a name="GetAllowDistortions"></a><a name="GetAllowDistortions(CATCkeScale)"></a> <dt> o <b>GetAllowDistortions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetAllowDistortions</b>(<td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of disproportion of the Grid.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the H and the V of the Grid may be differente.
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the distortion mode</dd>
</dl>
</dl>
</dl>
<a name="GetColorConstructElts"></a><a name="GetColorConstructElts(unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetColorConstructElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetColorConstructElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iBlue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the color of constructed elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iRed </tt> [out] red color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iGreen </tt> [out] green color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iBlue </tt> [out] blue color code.</dd>
</dl>
</dl>
</dl>
<a name="GetColorDiagElts"></a><a name="GetColorDiagElts(CAT2DCstDiag,unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetColorDiagElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetColorDiagElts</b>(<td><script type="text/javascript"> activateLink('CAT2DCstDiag','CAT2DCstDiag')</script> <td><tt>iDiag</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iBlue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the color code of the constraint elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CAT2DCstDiag iDiag </tt> [in] type de diagnostique
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iRed </tt> [out] red color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iGreen </tt> [out] green color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iBlue </tt> [out] blue color code.</dd>
</dl>
</dl>
</dl>
<a name="GetColorIsolatedElts"></a><a name="GetColorIsolatedElts(unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetColorIsolatedElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetColorIsolatedElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iBlue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the color of isolated elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iRed </tt> [out] red color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iGreen </tt> [out] green color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iBlue </tt> [out] blue color code.</dd>
</dl>
</dl>
</dl>
<a name="GetColorProtectedElts"></a><a name="GetColorProtectedElts(unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetColorProtectedElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetColorProtectedElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iBlue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the color of protected elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iRed </tt> [out] red color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iGreen </tt> [out] green color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iBlue </tt> [out] blue color code.</dd>
</dl>
</dl>
</dl>
<a name="GetColorSmartPick"></a><a name="GetColorSmartPick(unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetColorSmartPick</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetColorSmartPick</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iBlue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the color of picking assistant elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iRed </tt> [out] red color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iGreen </tt> [out] green color code.
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int * iBlue </tt> [out] blue color code.</dd>
</dl>
</dl>
</dl>
<a name="GetCreateCenter"></a><a name="GetCreateCenter(void)"></a> <dt> o <b>GetCreateCenter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetCreateCenter</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of creation of the circle center or ellipse center (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the centers ares created automatically.
</dl>
</dl>
<a name="GetCreateConstraint"></a><a name="GetCreateConstraint(void)"></a> <dt> o <b>GetCreateConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetCreateConstraint</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the constraint creation mode detected by the picking assistant (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetDiagElts"></a><a name="GetDiagElts(void)"></a> <dt> o <b>GetDiagElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDiagElts</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the visualization mode of constraint elements diagnostic.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the diagnostic is displayed.
</dl>
</dl>
<a name="GetDirHorVert"></a><a name="GetDirHorVert(void)"></a> <dt> o <b>GetDirHorVert</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDirHorVert</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode for elements created horizontally or vertically(check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetDirParaPerpTan"></a><a name="GetDirParaPerpTan(void)"></a> <dt> o <b>GetDirParaPerpTan</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDirParaPerpTan</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode of parallelism, perpandicularity and tangent elements (check buttons) .
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, all detections are activated.
</dl>
</dl>
<a name="GetDirParallel"></a><a name="GetDirParallel(void)"></a> <dt> o <b>GetDirParallel</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDirParallel</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode of parallelism (check button)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetDirPerpend"></a><a name="GetDirPerpend(void)"></a> <dt> o <b>GetDirPerpend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDirPerpend</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode of perpandicularity (check button)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetDirTangent"></a><a name="GetDirTangent(void)"></a> <dt> o <b>GetDirTangent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDirTangent</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode of tangent elements (check button)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetDragElts"></a><a name="GetDragElts(void)"></a> <dt> o <b>GetDragElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDragElts</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the dragging mode of sketch elements (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>,if the value is not equal to zero, the moving of elements are authorized.
</dl>
</dl>
<a name="GetDragMode"></a><a name="GetDragMode(void)"></a> <dt> o <b>GetDragMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDragMode</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the dragging mode of sketch elements (radio-button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>
 0 - Standard dragging 
 1 - Dragging with minimun moving
 2 - Dragging in relaxation
</dl>
</dl>
<a name="GetDragWithEndPts"></a><a name="GetDragWithEndPts(void)"></a> <dt> o <b>GetDragWithEndPts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDragWithEndPts</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the dragging mode of the elements created in the sketch (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>,if the value is not equal to zero, the elements are moved including the limit points.
</dl>
</dl>
<a name="GetGridAdaptativeMode"></a><a name="GetGridAdaptativeMode(void)"></a> <dt> o <b>GetGridAdaptativeMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridAdaptativeMode</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of grid scaling w.r.t. current viewpoint (Check Button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the grid adapts itself to viewpoint (default adapter value is 0).
</dl>
</dl>
<a name="GetGridGroundMode"></a><a name="GetGridGroundMode(void)"></a> <dt> o <b>GetGridGroundMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridGroundMode</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the visualization mode of the shadow Grid (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the grid is shadowed.
</dl>
</dl>
<a name="GetGridPrimSpac"></a><a name="GetGridPrimSpac(void)"></a> <dt> o <b>GetGridPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetGridPrimSpac</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the step of the Grid in MKS unit.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A  <tt>double</tt>, returns the value of the Grid step in MKS unit (m).
</dl>
</dl>
<a name="GetGridPrimSpac"></a><a name="GetGridPrimSpac(CATCkeScale)"></a> <dt> o <b>GetGridPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetGridPrimSpac</b>(<td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the step of the Grid in MKS unit.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   a  <tt>double</tt>, returns the value of the Grid step in MKS unit (m).
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale </tt> [in] Defines the scale for the grid step value</dd>
</dl>
</dl>
</dl>
<a name="GetGridSecStep"></a><a name="GetGridSecStep(void)"></a> <dt> o <b>GetGridSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridSecStep</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of graduations of the primary spacing.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, returns this value.
</dl>
</dl>
<a name="GetGridSecStep"></a><a name="GetGridSecStep(CATCkeScale)"></a> <dt> o <b>GetGridSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridSecStep</b>(<td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of graduations of the primary spacing.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, returns this value.
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the number of graduation</dd>
</dl>
</dl>
</dl>
<a name="GetGridSnapMode"></a><a name="GetGridSnapMode(void)"></a> <dt> o <b>GetGridSnapMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridSnapMode</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of points creation: On the Grid or not (Check Button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the points are created on the Grid.
</dl>
</dl>
<a name="GetGridVPrimSpac"></a><a name="GetGridVPrimSpac(void)"></a> <dt> o <b>GetGridVPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetGridVPrimSpac</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the step of the Grid in the V direction in MKS unit.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>double</tt>, returns the value of the Grid step in MKS unit (m).
</dl>
</dl>
<a name="GetGridVPrimSpac"></a><a name="GetGridVPrimSpac(CATCkeScale)"></a> <dt> o <b>GetGridVPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetGridVPrimSpac</b>(<td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the step of the Grid in the V direction in MKS unit.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>double</tt>, returns the value of the Grid step in MKS unit (m).
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale </tt> [in] Defines the scale for the grid step value</dd>
</dl>
</dl>
</dl>
<a name="GetGridVSecStep"></a><a name="GetGridVSecStep(void)"></a> <dt> o <b>GetGridVSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridVSecStep</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of graduations in the V direction of the primary spacing.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, returns the number of the subdivisions.
</dl>
</dl>
<a name="GetGridVSecStep"></a><a name="GetGridVSecStep(CATCkeScale)"></a> <dt> o <b>GetGridVSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridVSecStep</b>(<td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of graduations in the V direction of the primary spacing.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, returns the number of the subdivisions.
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the number of graduation</dd>
</dl>
</dl>
</dl>
<a name="GetGridVisuMode"></a><a name="GetGridVisuMode(void)"></a> <dt> o <b>GetGridVisuMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetGridVisuMode</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the visualization mode of the grid (check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the grid is visible.
</dl>
</dl>
<a name="GetPosHorVertTo"></a><a name="GetPosHorVertTo(void)"></a> <dt> o <b>GetPosHorVertTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetPosHorVertTo</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode when the elements are created at the verticality or 
 horizontality of other element (check button)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetPosSupports"></a><a name="GetPosSupports(void)"></a> <dt> o <b>GetPosSupports</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetPosSupports</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the detection mode of the geometry.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the detection is activated.
</dl>
</dl>
<a name="GetShowPosition"></a><a name="GetShowPosition()"></a> <dt> o <b>GetShowPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetShowPosition</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the display of the H and V parameters in the toolbar.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>int</tt>
 <b>Legal Values</b>:
 <dl>
 <dt> <tt>0</tt> <dd> The parameters are not displayed in the toolbar
 <dt> <tt>1</tt> <dd> The parameters are displayed in the toolbar
 </dl>
</dl>
</dl>
<a name="GetShowPositionOnCursor"></a><a name="GetShowPositionOnCursor()"></a> <dt> o <b>GetShowPositionOnCursor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetShowPositionOnCursor</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the display of the H and V parameters in the cursor.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>int</tt>
 <b>Legal Values</b>:
 <dl>
 <dt> <tt>0</tt> <dd> The parameters are not displayed in the cursor
 <dt> <tt>1</tt> <dd> The parameters are displayed in the cursor
 </dl>
</dl>
</dl>
<a name="GetSketcherSettings"></a><a name="GetSketcherSettings(void)"></a> <dt> o <b>GetSketcherSettings</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATSketcherSettings','CATSketcherSettings *')</script>  <b>GetSketcherSettings</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the settings of the sketcher component used by the current application. Si il n'existe pas de 
 settings courants alors les settings geres par l'objet UIActif courant (grace a son adhesion a 
 l'interface CATISketcherSettings) sont retournes
</dl>
<a name="GetValidateConstraint"></a><a name="GetValidateConstraint(void)"></a> <dt> o <b>GetValidateConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetValidateConstraint</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the constraint creation mode if a parameter is valuated in the toolbar "Sketchere Information" (check button)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the constraints are created automatically.
</dl>
</dl>
<a name="GetValidateCstType"></a><a name="GetValidateCstType(CAT2DCstType)"></a> <dt> o <b>GetValidateCstType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetValidateCstType</b>(<td><script type="text/javascript"> activateLink('CAT2DCstType','CAT2DCstType')</script> <td><tt>iCstType</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of creation of the given constraint.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CAT2DCstType iCstType </tt> </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the constraints are created automatically.
</dl>
</dl>
<a name="GetViewNormalTo"></a><a name="GetViewNormalTo(void)"></a> <dt> o <b>GetViewNormalTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetViewNormalTo</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the "enter" mode of the sketch (Check button).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>int</tt>, if the value is not equal to zero, the point of view is parallel to the sketch plane.
</dl>
</dl>
<a name="SaveRepository"></a><a name="SaveRepository(void)"></a> <dt> o <b>SaveRepository</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SaveRepository</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Saves the repository of the sketcher settings.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   A <tt>HRESULT</tt>.
</dl>
</dl>
<a name="SetAllowDistortions"></a><a name="SetAllowDistortions(int,int)"></a> <dt> o <b>SetAllowDistortions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAllowDistortions</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines  le mode de disproportions de la grille.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] specifie le mode de disproportion.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetAllowDistortions"></a><a name="SetAllowDistortions(int,int,CATCkeScale)"></a> <dt> o <b>SetAllowDistortions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAllowDistortions</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines  le mode de disproportions de la grille.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] specifie le mode de disproportion.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 </dd>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the distortion mode</dd>
</dl>
</dl>
</dl>
<a name="SetColorConstructElts"></a><a name="SetColorConstructElts(unsigned int,unsigned int,unsigned int,int)"></a> <dt> o <b>SetColorConstructElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetColorConstructElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the color code of constructed element.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int iRed </tt> [in] red code color <tt>(0<=iRed<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iGreen </tt> [in] green code color <tt>(0<=iGreen<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iBlue </tt> [in] blue code color <tt>(0<=iBlue<=255)</tt></dd>
</dl>
</dl>
</dl>
<a name="SetColorDiagElts"></a><a name="SetColorDiagElts(CAT2DCstDiag,unsigned int,unsigned int,unsigned int,int)"></a> <dt> o <b>SetColorDiagElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetColorDiagElts</b>(<td><script type="text/javascript"> activateLink('CAT2DCstDiag','CAT2DCstDiag')</script> <td><tt>iDiag</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the color code by diagnostic.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> CAT2DCstDiag iDiag </tt> [in] type de diagnostique
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iRed </tt> [in] red code color <tt>(0<=iRed<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iGreen </tt> [in] green code color <tt>(0<=iGreen<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iBlue </tt> [in] blue code color <tt>(0<=iBlue<=255)</tt></dd>
</dl>
</dl>
</dl>
<a name="SetColorIsolatedElts"></a><a name="SetColorIsolatedElts(unsigned int,unsigned int,unsigned int,int)"></a> <dt> o <b>SetColorIsolatedElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetColorIsolatedElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the color code of isolated elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int iRed </tt> [in] red code color <tt>(0<=iRed<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iGreen </tt> [in] green code color <tt>(0<=iGreen<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iBlue </tt> [in] blue code color <tt>(0<=iBlue<=255)</tt></dd>
</dl>
</dl>
</dl>
<a name="SetColorProtectedElts"></a><a name="SetColorProtectedElts(unsigned int,unsigned int,unsigned int,int)"></a> <dt> o <b>SetColorProtectedElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetColorProtectedElts</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the color code of protected elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int iRed </tt> [in] red code color <tt>(0<=iRed<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iGreen </tt> [in] green code color <tt>(0<=iGreen<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iBlue </tt> [in] blue code color <tt>(0<=iBlue<=255)</tt></dd>
</dl>
</dl>
</dl>
<a name="SetColorSmartPick"></a><a name="SetColorSmartPick(unsigned int,unsigned int,unsigned int,int)"></a> <dt> o <b>SetColorSmartPick</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetColorSmartPick</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the color code of the picking assistant element.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> unsigned int iRed </tt> [in] red code color <tt>(0<=iRed<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iGreen </tt> [in] green code color <tt>(0<=iGreen<=255)</tt>
 </dd>
    <dt><tt> <tt></tt>
   <dd> unsigned int iBlue </tt> [in] blue code color <tt>(0<=iBlue<=255)</tt></dd>
</dl>
</dl>
</dl>
<a name="SetCreateCenter"></a><a name="SetCreateCenter(int,int)"></a> <dt> o <b>SetCreateCenter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCreateCenter</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode of circle centers creation or ellispe centers creation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] if the value is not equal to zero, centers are automatically created.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetCreateConstraint"></a><a name="SetCreateConstraint(int,int)"></a> <dt> o <b>SetCreateConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCreateConstraint</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Definit the creation mode of detected constraint by the picking assistant.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero, constraints are created.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDiagElts"></a><a name="SetDiagElts(int,int)"></a> <dt> o <b>SetDiagElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDiagElts</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the visualization mode of constraint elements diagnostic.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   Un <tt>int</tt>, if the value is not equal to zero,the diagnostic is displayed.
</dl>
</dl>
<a name="SetDirHorVert"></a><a name="SetDirHorVert(int,int)"></a> <dt> o <b>SetDirHorVert</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDirHorVert</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the detection mode of the picking assistant to create vertical or horizontal elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDirParallel"></a><a name="SetDirParallel(int,int)"></a> <dt> o <b>SetDirParallel</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDirParallel</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the detection mode fot the picking assistant to create an element parallel to an other element. (check button)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDirPerpend"></a><a name="SetDirPerpend(int,int)"></a> <dt> o <b>SetDirPerpend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDirPerpend</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the detection mode fot the picking assistant to create an element perpandicular to an other element. (check button)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDirTangent"></a><a name="SetDirTangent(int,int)"></a> <dt> o <b>SetDirTangent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDirTangent</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the detection mode fot the picking assistant to create a tangent element to an other element. (check button)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDragElts"></a><a name="SetDragElts(int,int)"></a> <dt> o <b>SetDragElts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDragElts</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode of moving elements int the sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in]If the value is not equal to zero, the moving of elements are authorized.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDragMode"></a><a name="SetDragMode(int,int)"></a> <dt> o <b>SetDragMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDragMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDragMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode of moving elements int the sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iDragMode </tt> [in] mode of moving
 0 - Standard Dragging 
 1 - Minimun dragging moving
 2 - Relaxation dragging 
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetDragWithEndPts"></a><a name="SetDragWithEndPts(int,int)"></a> <dt> o <b>SetDragWithEndPts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDragWithEndPts</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode of moving elements int the sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero, the elements are moved by including limit points
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridGroundMode"></a><a name="SetGridGroundMode(int,int)"></a> <dt> o <b>SetGridGroundMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridGroundMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the display of the shadow mode of the Grid.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero, the shadow mode is displayed.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero; an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridPrimSpac"></a><a name="SetGridPrimSpac(double,int)"></a> <dt> o <b>SetGridPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridPrimSpac</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSpacing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the primary spacing of the Grid in MKS (m).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> double iSpacing </tt> [in] Value of the primary spacing in MKS (m).
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridPrimSpac"></a><a name="SetGridPrimSpac(double,int,CATCkeScale)"></a> <dt> o <b>SetGridPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridPrimSpac</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSpacing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the primary spacing of the Grid in MKS (m).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> double iSpacing </tt> [in] Value of the primary spacing in MKS (m).
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 </dd>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale </tt> [in] Defines the scale for the grid step value</dd>
</dl>
</dl>
</dl>
<a name="SetGridSecStep"></a><a name="SetGridSecStep(int,int)"></a> <dt> o <b>SetGridSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridSecStep</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the number of graduations of the primary spacing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iStep </tt> [in] value of the number of subdivisions.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridSecStep"></a><a name="SetGridSecStep(int,int,CATCkeScale)"></a> <dt> o <b>SetGridSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridSecStep</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the number of graduations of the primary spacing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iStep </tt> [in] value of the number of subdivisions.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 </dd>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the number of graduation</dd>
</dl>
</dl>
</dl>
<a name="SetGridSnapMode"></a><a name="SetGridSnapMode(int,int)"></a> <dt> o <b>SetGridSnapMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridSnapMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the creation mode of points on the Grid.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero, points are created on the Grid.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridVPrimSpac"></a><a name="SetGridVPrimSpac(double,int)"></a> <dt> o <b>SetGridVPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridVPrimSpac</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSpacing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Definit le pas principal suivant V de la grille em MKS (m).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> double iSpacing </tt> [in] specifie la valeur du pas principal en MKS (m).
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridVPrimSpac"></a><a name="SetGridVPrimSpac(double,int,CATCkeScale)"></a> <dt> o <b>SetGridVPrimSpac</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridVPrimSpac</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSpacing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Definit le pas principal suivant V de la grille em MKS (m).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> double iSpacing </tt> [in] specifie la valeur du pas principal en MKS (m).
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 </dd>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale </tt> [in] Defines the scale for the grid step value</dd>
</dl>
</dl>
</dl>
<a name="SetGridVSecStep"></a><a name="SetGridVSecStep(int,int)"></a> <dt> o <b>SetGridVSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridVSecStep</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the number of graduations in "V" direction of the primary spacing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iStep </tt> [in] value of the number of graduations.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetGridVSecStep"></a><a name="SetGridVSecStep(int,int,CATCkeScale)"></a> <dt> o <b>SetGridVSecStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridVSecStep</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCkeScale','CATCkeScale')</script> <td><tt>iScale</tt><td><tt>= CATNormalScale </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the number of graduations in "V" direction of the primary spacing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iStep </tt> [in] value of the number of graduations.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 </dd>
    <dt><tt> <tt></tt>
   <dd> CATCkeScale iScale  </tt> [in] Defines the scale for the number of graduation</dd>
</dl>
</dl>
</dl>
<a name="SetGridVisuMode"></a><a name="SetGridVisuMode(int,int)"></a> <dt> o <b>SetGridVisuMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGridVisuMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the display of the Grid.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the Grid is displayed.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated.</dd>
</dl>
</dl>
</dl>
<a name="SetPosHorVertTo"></a><a name="SetPosHorVertTo(int,int)"></a> <dt> o <b>SetPosHorVertTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPosHorVertTo</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the detection mode of the picking assistant for elements it le mode de detection de l'assistant pour la creation des elements
 a l'horizontal ou a la vertical des autres elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetPosSupports"></a><a name="SetPosSupports(int,int)"></a> <dt> o <b>SetPosSupports</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPosSupports</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode of geometry detection of support elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero the detection mode is activated.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetShowPosition"></a><a name="SetShowPosition(int,int)"></a> <dt> o <b>SetShowPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShowPosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iShow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the display of position parameters (H and V) in the toolbar
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>unsigned</tt>
   <dd> int iShow</tt> [in] value
 <b>Legal value</b>:
 <dl>
 <dt> <tt>0</tt> <dd> Parameters are not displayed in the toolbar.
 <dt> <tt>1</tt> <dd> Parameters are displayes in the toolbar.
 </dl>
 </dd>
    <dt><tt> <tt>int</tt>
   <dd> iEvt</tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetShowPositionOnCursor"></a><a name="SetShowPositionOnCursor(int,int)"></a> <dt> o <b>SetShowPositionOnCursor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShowPositionOnCursor</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iShow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the display of position parameters (H and V) located on the cursor 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>unsigned</tt>
   <dd> int iShow</tt> [in] : <b>Legal values</b>:
 <dl>
 <dt> <tt>0</tt> <dd> Parameters are not displayed on the cursor.
 <dt> <tt>1</tt> <dd> Parameters are displayes on the cursor.
 </dl>
 </dd>
    <dt><tt> <tt>int</tt>
   <dd> iEvt</tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.
 <b>Valeurs legales </b>:</dd>
</dl>
</dl>
</dl>
<a name="SetSketcherSettings"></a><a name="SetSketcherSettings(CATSketcherSettings*)"></a> <dt> o <b>SetSketcherSettings</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSketcherSettings</b>(<td><script type="text/javascript"> activateLink('CATSketcherSettings','CATSketcherSettings*')</script> <td><tt>iSettings</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the initialization of the sketcher settings used by the application.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>CATSketcherSettings</tt>
   <dd> * iSettings</tt> [in] The concrete instance of the setting to activate. This argument may be
 <tt>NULL</tt> to initialize the standard management of the settings by using CATISketcherSettings interface.</dd>
</dl>
</dl>
</dl>
<a name="SetValidateConstraint"></a><a name="SetValidateConstraint(int,int)"></a> <dt> o <b>SetValidateConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetValidateConstraint</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the creation mode of constraints if a parameter is valuated in the toolbar "Sketcher Information".
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] If the value is not equal to zero, constraints are created.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<a name="SetViewNormalTo"></a><a name="SetViewNormalTo(int,int)"></a> <dt> o <b>SetViewNormalTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetViewNormalTo</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheck</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvt</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Definit the "enter" mode in the sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt></tt>
   <dd> int iCheck </tt> [in] if the value is not equal to zero, the sketh is openned with the projection plane parallel to the screen.
 </dd>
    <dt><tt> <tt></tt>
   <dd> int iEvt </tt> [in] iEvt: If the value is not equal to zero, an event is propagated in the current sketch.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSketcherSettings.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSktToolsUseItf1</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

