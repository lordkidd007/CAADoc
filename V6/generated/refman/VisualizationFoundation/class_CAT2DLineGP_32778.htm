<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT2DLineGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT2DLineGP"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT2DLineGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT2DLineGP_32778','CAT2DLineGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DLineGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of a 2D line.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DLineGP()"><b>CAT2DLineGP</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT2DLineGP(float[],int,int,int)"><b>CAT2DLineGP</b></a>(float[],int,int,int)
<dd>  Constructs a 2D line graphic primitives from point coordinates.
 <dt> o 
    <a href="#CAT2DLineGP(CATMathPoint2Df[],int,int,int)"><b>CAT2DLineGP</b></a>(CATMathPoint2Df[],int,int,int)
<dd>  Constructs a 2D line graphic primitives from points.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the 2D line.
 <dt> o 
    <a href="#Get(float**,int*,int*)"><b>Get</b></a>(float**,int*,int*)
<dd>  Retrieves line parameters, such as points coordinates, number of points and line type.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DLineGP"></a><a name="CAT2DLineGP()"></a> <dt> o <b>CAT2DLineGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineGP</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT2DLineGP"></a><a name="CAT2DLineGP(float[],int,int,int)"></a> <dt> o <b>CAT2DLineGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineGP</b>(<td> const <script type="text/javascript"> activateLink('float','float[]')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbPoints</tt><td><tt>=2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAlloc</tt><td><tt>=ALLOCATE</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLinetype</tt><td><tt>= LINES</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D line graphic primitives from point coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd>    Array of point coordinates: XYXYXY...
    Its size is equal to two times the number of points.
 </dd>
    <dt><tt> iNbPoints</tt>
   <dd>    The number of points.
 </dd>
    <dt><tt> iAlloc</tt>
   <dd>    Flag used to specify whether points must be duplicated or not.
    <br><b>Legal values</b>:
    <ul>
      <li>ALLOCATE :
        All data are duplicate into the graphic primitive</li>
      <li>DONT_ALLOCATE
        The graphic primitive has a pointer to the data given as parameter</li>
    </ul>
    The default value is ALLOCATE.
 </dd>
    <dt><tt> iLineType</tt>
   <dd>    Flag to specify the line type to use.
    <br><b>Legal values</b>:
    <ul>
      <li>LINES :
        The number of points must be even. A line will be drawn
            between points 1 and 2, another line will be drawn between
            points 3 and 4, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   point 3 X-----------------------X point 4
			</pre>
		</li>
      <li>LINE_STRIP :
        The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, another line will be drawn
            between points 2 and 3, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   /
                                                 /
                                               /
                                      point 3 X----------------------X point 4
			</pre>
		</li>
      <li>LINE_LOOP :
        Same as LINE_LOOP, excepted that one more line will be
            drawn between the last and the first points.
			<pre>
                                    point 1 X--------X point 2
                                             \      /
                                              \    /      
                                               \  /
                                                \/
                                                /\
                                               /  \
                                      point 3 X----X point 4
			</pre>
		</li>
    </ul>
    The default value is LINES.</dd>
</dl>
</dl>
</dl>
<a name="CAT2DLineGP"></a><a name="CAT2DLineGP(CATMathPoint2Df[],int,int,int)"></a> <dt> o <b>CAT2DLineGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineGP</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint2Df','CATMathPoint2Df[]')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>nbPoints</tt><td><tt>=2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>alloc</tt><td><tt>=ALLOCATE</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLinetype</tt><td><tt>= LINES</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D line graphic primitives from points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd>    Array of 2D points.
    Its size is equal to the number of points.
 </dd>
    <dt><tt> iNbPoints</tt>
   <dd>    The number of points.
 </dd>
    <dt><tt> iAlloc</tt>
   <dd>    Flag used to specify whether points must be duplicated or not.
    <br><b>Legal values</b>:
    <ul>
      <li>ALLOCATE :
        All data are duplicate into the graphic primitive</li>
      <li>DONT_ALLOCATE
        The graphic primitive has a pointer to the data given as parameter</li>
    </ul>
    The default value is ALLOCATE.
 </dd>
    <dt><tt> iLineType</tt>
   <dd>    Flag to specify the line type to use.
    <br><b>Legal values</b>:
    <ul>
      <li>LINES :
        The number of points must be even. A line will be drawn
            between points 1 and 2, another line will be drawn between
            points 3 and 4, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   point 3 X-----------------------X point 4
			</pre>
		</li>
      <li>LINE_STRIP :
        The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, another line will be drawn
            between points 2 and 3, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   /
                                                 /
                                               /
                                      point 3 X----------------------X point 4
			</pre>
		</li>
      <li>LINE_LOOP :
        Same as LINE_LOOP, excepted that one more line will be
            drawn between the last and the first points.
			<pre>
                                    point 1 X--------X point 2
                                             \      /
                                              \    /      
                                               \  /
                                                \/
                                                /\
                                               /  \
                                      point 3 X----X point 4
			</pre>
		</li>
    </ul>
    The default value is LINES.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the 2D line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>    The render through which the 2D line is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(float**,int*,int*)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves line parameters, such as points coordinates, number of points and line type.
 <b>Role</b>: To retrieve line parameters. This method must be called like this :
 <tt><pre>
                float * points;
                int nbPoints, lineType;

                Get(&points, &nbPoints, &lineType);
 </pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoints</tt>
   <dd>    Retrieves the points coordinates array.
    Array of points coordinates: XYZXYZXYZ...
    Its size is equal to three times the number of points.
 </dd>
    <dt><tt> oNbPoints</tt>
   <dd>    Retrieves the number of points.
 </dd>
    <dt><tt> oLineType</tt>
   <dd>    Retrieves the line type.
    <br><b>Legal values</b>:
    <ul>
      <li>LINES :
        The number of points must be even. A line will be drawn
            between points 1 and 2, another line will be drawn between
            points 3 and 4, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   point 3 X-----------------------X point 4
			</pre>
		</li>
      <li>LINE_STRIP :
        The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, another line will be drawn
            between points 2 and 3, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   /
                                                 /
                                               /
                                      point 3 X----------------------X point 4
			</pre>
		</li>
      <li>LINE_LOOP :
        Same as LINE_LOOP, excepted that one more line will be
            drawn between the last and the first points.
			<pre>
                                    point 1 X--------X point 2
                                             \      /
                                              \    /      
                                               \  /
                                                \/
                                                /\
                                               /  \
                                      point 3 X----X point 4
			</pre>
		</li>
    </ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT2DLineGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

