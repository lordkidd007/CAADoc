<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT3DFaceGPEditHelper</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT3DFaceGPEditHelper"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT3DFaceGPEditHelper</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DFaceGPEditHelper_48321','CAT3DFaceGPEditHelper','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DFaceGPEditHelper</b>
</p>
<p>
<b><i> Class to edit CAT3DFaceGP and CAT3DPlanarFace graphic primitive.</i></b><br>

 CATGraphicPrimitive must be edited in context, this class handles edition authorization.
 NB : Do not keep EditHelper alive wore than necessary. Edition context notifcation is done on destruction. 
 That's why heap allocation is forbidden.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DFaceGPEditHelper()"><b>CAT3DFaceGPEditHelper</b></a>()
<dd>  Constructor.
 <dt> o 
    <a href="#~CAT3DFaceGPEditHelper()"><b>~CAT3DFaceGPEditHelper</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetFace()"><b>GetFace</b></a>()
<dd>  Get the currently edited CAT3DFaceGP.
 <dt> o 
    <a href="#GetIndices(int**,int*,int**,int*,int**,int**,int*,int**)"><b>GetIndices</b></a>(int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  Retrieves the tessellation information from the face.
 <dt> o 
    <a href="#GetNormals(float**,int*)"><b>GetNormals</b></a>(float**,int*)
<dd>  Retrieves face normals.
 <dt> o 
    <a href="#GetTextureCoordinates(float**,int*)"><b>GetTextureCoordinates</b></a>(float**,int*)
<dd>  Retrieves the texture coordinates.
 <dt> o 
    <a href="#GetUV(float**,int*)"><b>GetUV</b></a>(float**,int*)
<dd>  Retrieves the face surfacic mesh parameters.
 <dt> o 
    <a href="#GetVertices(float**,int*)"><b>GetVertices</b></a>(float**,int*)
<dd>  Retrieves face vertices.
 <dt> o 
    <a href="#IsEditionPossible(CAT3DFaceGP*,CATRep*)"><b>IsEditionPossible</b></a>(CAT3DFaceGP*,CATRep*)
<dd>  Get if the edition of the given graphic primitive is possible, and if not, why.
 <dt> o 
    <a href="#Reset(CAT3DFaceGP*,CATRep*)"><b>Reset</b></a>(CAT3DFaceGP*,CATRep*)
<dd>  Set the currenlty edited CAT3DFaceGP with its edition context
 In case of success, if the EditHelper is not empty, the old edition context is notified.
 <dt> o 
    <a href="#ResetExtended(CAT3DFaceGP*,CATRep*,unsigned int)"><b>ResetExtended</b></a>(CAT3DFaceGP*,CATRep*,unsigned int)
<dd>  Set the currenlty edited CAT3DFaceGP with its edition context.
 <dt> o 
    <a href="#SetTextureCoordinates(float const*,unsigned int)"><b>SetTextureCoordinates</b></a>(float const*,unsigned int)
<dd>  Sets the texture coordinates.
 <dt> o 
    <a href="#SetUV(float const*)"><b>SetUV</b></a>(float const*)
<dd>  Sets the UV array.
</dl>
<dl>
</dl>
<dl>
 <h2>Data Member Index</h2> <br>
 <dt> o 
    <a href="#DoNotUpdateBoundingElement"><b>DoNotUpdateBoundingElement</b></a>
<dd>  <dt> o 
    <a href="#EnsureVBEditionPossible"><b>EnsureVBEditionPossible</b></a>
<dd>  <dt> o 
    <a href="#ReplaceByDuplicateIfMultiAggreg"><b>ReplaceByDuplicateIfMultiAggreg</b></a>
<dd> </dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DFaceGPEditHelper"></a><a name="CAT3DFaceGPEditHelper()"></a> <dt> o <b>CAT3DFaceGPEditHelper</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DFaceGPEditHelper</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor.
 Construct an empty helper.
 Use the Reset methods to be able to use it.
</dl>
<a name="~CAT3DFaceGPEditHelper"></a><a name="~CAT3DFaceGPEditHelper()"></a> <dt> o <b>~CAT3DFaceGPEditHelper</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CAT3DFaceGPEditHelper</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
 If the EditHelper is not empty, the edition context is notified.
</dl>
 <h2>Methods</h2> <br>
<a name="GetFace"></a><a name="GetFace()"></a> <dt> o <b>GetFace</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CAT3DFaceGP','CAT3DFaceGP*')</script>  <b>GetFace</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the currently edited CAT3DFaceGP.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The currently edited CAT3DFaceGP.
  If the EditHelper was empty, NULL is returned.
</dl>
</dl>
<a name="GetIndices"></a><a name="GetIndices(int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>GetIndices</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetIndices</b>(<td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tessellation information from the face.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTriangleIndices</tt>
   <dd>    Retrieves the array used to store the single triangles vertices. Each of its field represents
    a vertex index, in the <tt>oVertices</tt> array.
    As,  we find, in the <tt>*oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    So, the first three indices of the *oTriangleIndices array, are the indices of the face first
    single triangle three vertices.
    <pre>

                 -----------------       
                |*oTriangleIndices |
                 -----------------
                |       i00       |   }
                |       i01       |   } triangle 0 defined by index i00, i01 and i02
                |       i02       |   }
                |        .        |
                |        .        |
                |       ij0       |   }
                |       ij1       |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2       |   }
                |        .        |
                |        .        |
                 -----------------

   </pre>
    For example, index ij0 enables access to the face j-th single triangle first vertex,
    which coordinates are X = *oVertices[ij0], Y = *oVertices[ij0+1] and Z = *oVertices[ij0+2], and
    which normal has coordinates Nx = *oNormals[ij0], Ny = *oNormals[ij0+1] and Nz = *oNormals[ij0+2].
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd>    Retrieves the number of single triangles in the face. 
 </dd>
    <dt><tt> oTriangleStripIndices</tt>
   <dd>    Retrieves the array used to store the face triangles strips vertices. Each field contains a
    vertex index, belonging to one of the strips, in the oVertices array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | oTriangleStripIndices |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th strip first vertex 
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
 </dd>
    <dt><tt> oNbTriangleStrip</tt>
   <dd>    Retrieves the number of face triangles strips.
 </dd>
    <dt><tt> oNbVertexPerTriangleStrip</tt>
   <dd>    Retrieves an array containing the number of vertices for each face triangles strip.
    The size of this array is equal to <tt>*oNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |*oNbVertexPerTriangleStrip|
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(*oNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (*oNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> oTriangleFanIndices</tt>
   <dd>    Retrieves the array used to store the face triangles fans vertices. Each field contains a
    vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | *oTriangleFanIndices  |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle fan j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the face j-th fan first vertex
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
    Each ij0, j in [0, jn], represents the j-th fan center.
 </dd>
    <dt><tt> oNbTriangleFan</tt>
   <dd>    Retrieves the number of face triangles fans.
 </dd>
    <dt><tt> oNbVertexPerTriangleFan</tt>
   <dd>    Retrieves the array containing the number of vertices for each face triangles fan.
    The size of this array is equal to <tt>*oNbTriangleFan</tt>. For example, the first fan
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | *oNbVertexPerTriangleFan |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle fans(*oNbTriangleFan)
               |             nm           |   nm = number of vertices of the m-th fan. (*oNbVertexPerTriangleFan[m]
                --------------------------    

   </pre></dd>
</dl>
</dl>
</dl>
<a name="GetNormals"></a><a name="GetNormals(float**,int*)"></a> <dt> o <b>GetNormals</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetNormals</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves face normals.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it must be called like this :<br>
 <tt><pre>
 float* normals;
 ...
 GetNormals(&normals, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNormals</tt>
   <dd>    Retrieves an array made of face normals coordinates: XYZXYZXYZ...
    Its size is equal to three times the face normals number, if the face was not a planar face, 3 otherwise.
 </dd>
    <dt><tt> oNormalsArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number if the face was not a planar face, 3 otherwise.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.</dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**,int*)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDimension</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> oDimension</tt>
   <dd>    Retrieve the number of coordinates per vertex.</dd>
</dl>
</dl>
</dl>
<a name="GetUV"></a><a name="GetUV(float**,int*)"></a> <dt> o <b>GetUV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetUV</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oUV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oUVArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the face surfacic mesh parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oUV</tt>
   <dd>    Retrieves the UV array. Each vertex has an associated UV couple.
 </dd>
    <dt><tt> oUVArraySize</tt>
   <dd>    Retrieves the size of the UV array. 
    Equals 0 if the mesh is shared with another element or if the array is NULL, two times the number
    of vertices elsewhere.</dd>
</dl>
</dl>
</dl>
<a name="GetVertices"></a><a name="GetVertices(float**,int*)"></a> <dt> o <b>GetVertices</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetVertices</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves face vertices.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it must be called like this :<br>
 <tt><pre>
 float* vertices;
 ...
 GetVertices(&vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of face vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the face vertices number.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.</dd>
</dl>
</dl>
</dl>
<a name="IsEditionPossible"></a><a name="IsEditionPossible(CAT3DFaceGP*,CATRep*)"></a> <dt> o <b>IsEditionPossible</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('GPEditAuthorization','GPEditAuthorization')</script>  <b>IsEditionPossible</b>(<td><script type="text/javascript"> activateLink('CAT3DFaceGP','CAT3DFaceGP*')</script> <td><tt>iFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get if the edition of the given graphic primitive is possible, and if not, why.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFace</tt>
   <dd>   The face to be edited
 </dd>
    <dt><tt> iRep</tt>
   <dd>   The Rep which should contain the face
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   A CATGraphicPrimitiveEditHelper::EditAuthorization value, depending of the context.
</dl>
</dl>
<a name="Reset"></a><a name="Reset(CAT3DFaceGP*,CATRep*)"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Reset</b>(<td><script type="text/javascript"> activateLink('CAT3DFaceGP','CAT3DFaceGP*')</script> <td><tt>iFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Set the currenlty edited CAT3DFaceGP with its edition context
 In case of success, if the EditHelper is not empty, the old edition context is notified.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFace</tt>
   <dd>   The CAT3DFaceGP instance which will be edited.
 </dd>
    <dt><tt> iRep</tt>
   <dd>   The Rep containing the CAT3DFaceGP. Currently supported rep are CATSurfacicRep and CAT3DCustomRep.
   If the face is not contained in any Rep, this parameter can be NULL
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    If the face can be edited in the provided context, S_OK, otherwise, E_FAIL
   It should be noted that if the face is contained in more than one Rep, it will always fail.
   If the face is contained in a Stripped SurfacicRep, it will fail.
</dl>
</dl>
<a name="ResetExtended"></a><a name="ResetExtended(CAT3DFaceGP*,CATRep*,unsigned int)"></a> <dt> o <b>ResetExtended</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ResetExtended</b>(<td><script type="text/javascript"> activateLink('CAT3DFaceGP','CAT3DFaceGP*')</script> <td><tt>iFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iFlag</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Set the currenlty edited CAT3DFaceGP with its edition context. Compared to Reset, this methods supports additional flags
 which can perform operation to ensure that some edition features will be supported.
 CAUTION : using these flags can result in duplicate elements and can cause memory issues.
 In case of success, if the EditHelper is not empty, the old edition context is notified.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFace</tt>
   <dd>   The CAT3DFaceGP instance which will be edited.
 </dd>
    <dt><tt> iRep</tt>
   <dd>   The Rep containing the CAT3DFaceGP. Currently supported rep are CATSurfacicRep and CAT3DCustomRep.
   If the face is not contained in any Rep, this parameter can be NULL
 </dd>
    <dt><tt> iFlags</tt>
   <dd>   Additional flags which will perform operation needed to access some edition features.
     -EnsureVBEditionPossible : If the face's vertex buffer is referenced by several face, edition on vertices won't be available.
                                This flag will create a new VertexBuffer if needed to allow edition.
     -ReplaceByDuplicateIfMultiAggreg : If the face is aggregated in more than one Rep, this flag will make a copy of the face and replace the 
                                        original face in the rep. The face's VertexBuffer will also be duplicated.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    If the face can be edited in the provided context, S_OK, otherwise, E_FAIL
   If the face is contained in a Stripped SurfacicRep, it will fail.
</dl>
</dl>
<a name="SetTextureCoordinates"></a><a name="SetTextureCoordinates(float const*,unsigned int)"></a> <dt> o <b>SetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float const','float const*')</script> <td><tt>iTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iTextureFormat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the texture coordinates.
 If the face shares its vertices, it also shares its
 texture coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
    Because vertex and normal information is being sorted at the face
    creation, texture coordinates are to be generated with the tessellation
    parameters that are retrieved after the face creation (ie with
    properly translated indices). Nevertheless, a mapping operator can be
    applied at anytime, when the face is the owner of it's vertex data.
    If computed before the face creation, texture coordinates can be given
    at the face construction method. In this case, coordinates order is
    rearranged in parallel with vertices coordinates.
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    iTextureFormat is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl>
    If data is shared, the format for the given texture coordinates must be three.</dd>
</dl>
</dl>
</dl>
<a name="SetUV"></a><a name="SetUV(float const*)"></a> <dt> o <b>SetUV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetUV</b>(<td><script type="text/javascript"> activateLink('float const','float const*')</script> <td><tt>iUV</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the UV array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUV</tt>
   <dd>    Array of UV parameters. Its size is equal to 2/3 the vertices array size.
    The  management of this array follows the vertices array management concerning
    the allocation mode.</dd>
</dl>
</dl>
</dl>
 <h2>Data Members</h2> <br>
<a name="DoNotUpdateBoundingElement"></a> <dt> o <b>DoNotUpdateBoundingElement</b>
<pre>
  public static const unsigned int DoNotUpdateBoundingElement</dt>
</pre>
<dl>
  <dd>
</dl>
<a name="EnsureVBEditionPossible"></a> <dt> o <b>EnsureVBEditionPossible</b>
<pre>
  public static const unsigned int EnsureVBEditionPossible</dt>
</pre>
<dl>
  <dd>
</dl>
<a name="ReplaceByDuplicateIfMultiAggreg"></a> <dt> o <b>ReplaceByDuplicateIfMultiAggreg</b>
<pre>
  public static const unsigned int ReplaceByDuplicateIfMultiAggreg</dt>
</pre>
<dl>
  <dd>
</dl>
<hr>
 This object is included in the file: <b>CAT3DFaceGPEditHelper.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

