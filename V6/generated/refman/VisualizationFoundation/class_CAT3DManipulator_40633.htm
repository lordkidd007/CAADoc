<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT3DManipulator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT3DManipulator"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT3DManipulator</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DManipulator_40633','CAT3DManipulator','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DManipulator</b>
</p>
<p>
<b><i> Class to control a 3D representation.</i></b><br>

 <b>Role</b>:
 A CAT3DManipulator is a Controller attached to a 3D representation providing 
 a proposition of a new position for 3D manipulation after the representation
 selected by the user has been manipulated.
 <p>
 Usage of manipulators
 <ul>
 <li>In the instanciation : 
	<ol> 
	<li>	Instanciate a manipulator connected to the representation :
		  <pre>CAT3DManipulator * _Manip = new 
		    CAT3DManipulator( this, "MYName", MYRep, CAT3DManipulator::Translation);</pre>
	
	<li>	Position the manipulator	
		  <pre>_Manip->SetPosition( PositionComputedFromNewModelization)</pre>
			
	<li>	Set characteristics (Invariants)   Note: Do it after SetPosition()
		  <pre>Manip->SetTranslationDirection( CATMathJ);</pre>
			
	<li> 	Branch a callback in you father command to be informed about the manipulation
		  <pre>AddAnalyseNotificationCB( _Manip, CATManipulator::GetCATManipulate(), 
		    (CATCommandMethod) &MYCommand::MYCallback, NULL);</pre>
	</ol>
 <li>In the callback,
	<ol>
     <li> Read data of manipulation
		<ul>
		<li> read the RESULT of the manipulation
		<pre>CATMathAxis Position = ((CAT3DManipulator *)Command)->GetPosition();</pre>

		<li> read the event elementary TRANSFORMATION of the manipulation
	        <pre>CATTransformationNotification *TransfoNotif =
	        ((CATTransformationNotification *) Command->SendCommandSpecificObject(
	        CATTransformationNotification::ClassName(), Notification));
	        CATMathTransformation *Transformation = TransfoNotif->GetNotification();
		</pre></ul>
	<li>	In the callback, Update your modelization
	    
	<li>    In the callback, Reposition the manipulator if needed (usualy when there is constraints)
		  	<pre>_Manip->SetPosition( PositionComputedFromNewModelization)</pre>
	</ol>			
 </ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DManipulator(CATCommand*,CATString&amp;,CAT3DRep*,ManipulationStyle,ManipulationStyle)"><b>CAT3DManipulator</b></a>(CATCommand*,CATString&amp;,CAT3DRep*,ManipulationStyle,ManipulationStyle)
<dd>  Construction of the manipulator.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetManipulationStyle(ManipulationStyle&amp;,ManipulationStyle&amp;)"><b>GetManipulationStyle</b></a>(ManipulationStyle&amp;,ManipulationStyle&amp;)
<dd>  Gets the manipulation style.
 <dt> o 
    <a href="#GetPosition()"><b>GetPosition</b></a>()
<dd>  Gets the current position of the manipulator.
 <dt> o 
    <a href="#GetRotationLine(CATMathLine&amp;)"><b>GetRotationLine</b></a>(CATMathLine&amp;)
<dd>   Gets the invariant line of LineRotation and PlaneMovement.
 <dt> o 
    <a href="#GetRotationPoint(CATMathPoint&amp;)"><b>GetRotationPoint</b></a>(CATMathPoint&amp;)
<dd>   Gets the invariant point of Point Rotation.
 <dt> o 
    <a href="#GetTranslationDirection(CATMathDirection&amp;)"><b>GetTranslationDirection</b></a>(CATMathDirection&amp;)
<dd>   Gets the invariant direction of translation direction.
 <dt> o 
    <a href="#GetTranslationPlane(CATMathPlane&amp;)"><b>GetTranslationPlane</b></a>(CATMathPlane&amp;)
<dd>  Gets the invariant plane of translationPlane and PlaneMovement.
 <dt> o 
    <a href="#SetPosition(CATMathAxis&amp;)"><b>SetPosition</b></a>(CATMathAxis&amp;)
<dd>  Sets the position of the manipulator.
 <dt> o 
    <a href="#SetRotationLine(CATMathLine&amp;)"><b>SetRotationLine</b></a>(CATMathLine&amp;)
<dd>  Sets the invariant line of LineRotation and PlaneMovement.
 <dt> o 
    <a href="#SetRotationPoint(CATMathPoint&amp;)"><b>SetRotationPoint</b></a>(CATMathPoint&amp;)
<dd>  Sets the invariant point of PointRotation.
 <dt> o 
    <a href="#SetTranslationDirection(CATMathDirection&amp;)"><b>SetTranslationDirection</b></a>(CATMathDirection&amp;)
<dd>  Sets the invariant direction of DirectionTranslation.
 <dt> o 
    <a href="#SetTranslationPlane(CATMathPlane&amp;)"><b>SetTranslationPlane</b></a>(CATMathPlane&amp;)
<dd>  Sets the invariant plane of PlaneTranslation and PlaneMovement.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#ManipulationStyle"><b>ManipulationStyle</b></a>
<dd>  Defines the different types of manipulation available for
 a 3D representation.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DManipulator"></a><a name="CAT3DManipulator(CATCommand*,CATString&amp;,CAT3DRep*,ManipulationStyle,ManipulationStyle)"></a> <dt> o <b>CAT3DManipulator</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DManipulator</b>(<td><script type="text/javascript"> activateLink('CATCommand','CATCommand*')</script> <td><tt>iFather</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT3DRep','CAT3DRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('ManipulationStyle','ManipulationStyle')</script> <td><tt>iFirstStyle</tt><td><tt>=NoManipulation</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('ManipulationStyle','ManipulationStyle')</script> <td><tt>iSecondStyle</tt><td><tt>=NoManipulation</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Construction of the manipulator.  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstStyle</tt>
   <dd> = style of manipulation used by Mouse Left button drag  </dd>
    <dt><tt> iSecondStyle</tt>
   <dd> = style of manipulation used by Mouse Left+Middle buttons drag (left THEN middle)</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetManipulationStyle"></a><a name="GetManipulationStyle(ManipulationStyle&amp;,ManipulationStyle&amp;)"></a> <dt> o <b>GetManipulationStyle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetManipulationStyle</b>(<td><script type="text/javascript"> activateLink('ManipulationStyle','ManipulationStyle&amp;')</script> <td><tt>o_firstStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('ManipulationStyle','ManipulationStyle&amp;')</script> <td><tt>o_secondStyle</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the manipulation style.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstStyle</tt>
   <dd> = style of manipulation used by Mouse Left button drag  </dd>
    <dt><tt> iSecondStyle</tt>
   <dd> = style of manipulation used by Mouse Left+Middle buttons drag (left THEN middle)</dd>
</dl>
</dl>
</dl>
<a name="GetPosition"></a><a name="GetPosition()"></a> <dt> o <b>GetPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathAxis','CATMathAxis')</script>  <b>GetPosition</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Gets the current position of the manipulator. 
</dl>
<a name="GetRotationLine"></a><a name="GetRotationLine(CATMathLine&amp;)"></a> <dt> o <b>GetRotationLine</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetRotationLine</b>(<td><script type="text/javascript"> activateLink('CATMathLine','CATMathLine&amp;')</script> <td><tt>o_line</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Gets the invariant line of LineRotation and PlaneMovement.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> o_line</tt>
   <dd> = invariant line.</dd>
</dl>
</dl>
</dl>
<a name="GetRotationPoint"></a><a name="GetRotationPoint(CATMathPoint&amp;)"></a> <dt> o <b>GetRotationPoint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetRotationPoint</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>o_point</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Gets the invariant point of Point Rotation. 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> o_point</tt>
   <dd> = invariant point </dd>
</dl>
</dl>
</dl>
<a name="GetTranslationDirection"></a><a name="GetTranslationDirection(CATMathDirection&amp;)"></a> <dt> o <b>GetTranslationDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetTranslationDirection</b>(<td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>o_direction</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Gets the invariant direction of translation direction. 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> o_direction</tt>
   <dd> = invariant direction </dd>
</dl>
</dl>
</dl>
<a name="GetTranslationPlane"></a><a name="GetTranslationPlane(CATMathPlane&amp;)"></a> <dt> o <b>GetTranslationPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetTranslationPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>o_plane</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the invariant plane of translationPlane and PlaneMovement.  
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> o_plane</tt>
   <dd> = invariant plane.</dd>
</dl>
</dl>
</dl>
<a name="SetPosition"></a><a name="SetPosition(CATMathAxis&amp;)"></a> <dt> o <b>SetPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPosition</b>(<td> const <script type="text/javascript"> activateLink('CATMathAxis','CATMathAxis&amp;')</script> <td><tt>iPosition</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the position of the manipulator.
</dl>
<a name="SetRotationLine"></a><a name="SetRotationLine(CATMathLine&amp;)"></a> <dt> o <b>SetRotationLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRotationLine</b>(<td> const <script type="text/javascript"> activateLink('CATMathLine','CATMathLine&amp;')</script> <td><tt>iLine</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the invariant line of LineRotation and PlaneMovement.
</dl>
<a name="SetRotationPoint"></a><a name="SetRotationPoint(CATMathPoint&amp;)"></a> <dt> o <b>SetRotationPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRotationPoint</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the invariant point of PointRotation.
</dl>
<a name="SetTranslationDirection"></a><a name="SetTranslationDirection(CATMathDirection&amp;)"></a> <dt> o <b>SetTranslationDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTranslationDirection</b>(<td> const <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>iWAxis</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the invariant direction of DirectionTranslation.
</dl>
<a name="SetTranslationPlane"></a><a name="SetTranslationPlane(CATMathPlane&amp;)"></a> <dt> o <b>SetTranslationPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTranslationPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>iPlane</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the invariant plane of PlaneTranslation and PlaneMovement.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="ManipulationStyle"> <dt> o <b>ManipulationStyle</b>
<dl>
  <dd>
<pre>
enum <b>ManipulationStyle</b> {
  NoManipulation,
  DirectionTranslation,
  PlaneTranslation,
  PlaneMovement,
  LineRotation,
  PointRotation,
  FrontestPlaneTranslation
}
</pre>
 Defines the different types of manipulation available for
 a 3D representation.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NoManipulation</tt>
   <dd>             The CAT3DManipulator does no specific work </dd>
    <dt><tt> DirectionTranslation</tt>
   <dd>       The CAT3Dmanipulator contrains its position along a given direction during the manipulation </dd>
    <dt><tt> PlaneTranslation</tt>
   <dd>           The CAT3Dmanipulator contrains its position along a given plane during the manipulation </dd>
    <dt><tt> PlaneMovement</tt>
   <dd>              Do not use  </dd>
    <dt><tt> LineRotation</tt>
   <dd>               The CAT3Dmanipulator contrains its position on a circle normal to a given axis </dd>
    <dt><tt> PointRotation</tt>
   <dd>              The CAT3Dmanipulator contrains its position on a sphere centered on a given point </dd>
    <dt><tt> FrontestPlaneTranslation</tt>
   <dd>   The CAT3Dmanipulator contrains its position along a plane parallel to the screen</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT3DManipulator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

