<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CATVisMeasurableGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CATVisMeasurableGP"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CATVisMeasurableGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATVisMeasurableGP_42947','CATVisMeasurableGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATVisMeasurableGP</b>
</p>
<p>
<b><i> Class for measurement on Graphic Primitives.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATVisMeasurableGP(CATGraphicPrimitive*&amp;)"><b>CATVisMeasurableGP</b></a>(CATGraphicPrimitive*&amp;)
<dd>  Constructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCircle(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>GetCircle</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Retrieves the circle definition if the GP is a circle.
 <dt> o 
    <a href="#GetCone(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>GetCone</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Retrieves the cone definition if the GP is a cone.
 <dt> o 
    <a href="#GetCylinder(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>GetCylinder</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Retrieves the cylinder definition if the GP is a cylinder.
 <dt> o 
    <a href="#GetLine(CATMathPoint&amp;,CATMathPoint&amp;)"><b>GetLine</b></a>(CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Retrieves the line definition if the GP is a line.
 <dt> o 
    <a href="#GetPlane(CATMathPlane&amp;)"><b>GetPlane</b></a>(CATMathPlane&amp;)
<dd>  Retrieves the plane definition if the GP is a plane.
 <dt> o 
    <a href="#GetSphere(CATMathPoint&amp;,double&amp;)"><b>GetSphere</b></a>(CATMathPoint&amp;,double&amp;)
<dd>  Retrieves the sphere definition if the GP is a sphere.
 <dt> o 
    <a href="#GetTorus(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)"><b>GetTorus</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)
<dd>  Retrieves the torus definition if the GP is a torus.
 <dt> o 
    <a href="#GetType(CATVisMeasurableType&amp;)"><b>GetType</b></a>(CATVisMeasurableType&amp;)
<dd>  Retrieves the type of the Graphic Primitive.
 <dt> o 
    <a href="#SetCircle(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>SetCircle</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Defines the GP as a circle and sets the circle definition.
 <dt> o 
    <a href="#SetCone(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>SetCone</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Defines the GP as a cone and sets the cone definition.
 <dt> o 
    <a href="#SetCylinder(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"><b>SetCylinder</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)
<dd>  Defines the GP as a cylinder and sets the cylinder definition.
 <dt> o 
    <a href="#SetLine(CATMathPoint&amp;,CATMathPoint&amp;)"><b>SetLine</b></a>(CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Defines the GP as a line and sets the line definition.
 <dt> o 
    <a href="#SetPlane(CATMathPlane&amp;)"><b>SetPlane</b></a>(CATMathPlane&amp;)
<dd>  Defines the GP as a plane and sets the plane definition.
 <dt> o 
    <a href="#SetSphere(CATMathPoint&amp;,double&amp;)"><b>SetSphere</b></a>(CATMathPoint&amp;,double&amp;)
<dd>  Defines the GP as a sphere and sets the sphere definition.
 <dt> o 
    <a href="#SetTorus(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)"><b>SetTorus</b></a>(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)
<dd>  Defines the GP as a torus and sets the torus definition.
 <dt> o 
    <a href="#SetUnknown()"><b>SetUnknown</b></a>()
<dd>  Defines the GP as an unknown geometry.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATVisMeasurableGP"></a><a name="CATVisMeasurableGP(CATGraphicPrimitive*&amp;)"></a> <dt> o <b>CATVisMeasurableGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATVisMeasurableGP</b>(<td><script type="text/javascript"> activateLink('CATGraphicPrimitive','CATGraphicPrimitive*&amp;')</script> <td><tt>ipGP</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipGP</tt>
   <dd>   The graphic primitive to use for setting / getting measurement properties.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetCircle"></a><a name="GetCircle(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>GetCircle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCircle</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the circle definition if the GP is a circle.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCenter</tt>
   <dd>   The center point.
 </dd>
    <dt><tt> ioAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetCone"></a><a name="GetCone(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>GetCone</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCone</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioApex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oSemiAngle</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the cone definition if the GP is a cone.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioApex</tt>
   <dd>   The apex point.
 </dd>
    <dt><tt> ioAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> oSemiAngle</tt>
   <dd>   The semi-angle.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetCylinder"></a><a name="GetCylinder(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>GetCylinder</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCylinder</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the cylinder definition if the GP is a cylinder.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioPoint</tt>
   <dd>   The point.
 </dd>
    <dt><tt> ioAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetLine"></a><a name="GetLine(CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>GetLine</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLine</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioSttPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioEndPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the line definition if the GP is a line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioSttPoint</tt>
   <dd>   The start point.
 </dd>
    <dt><tt> ioEndPoint</tt>
   <dd>   The end point.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetPlane"></a><a name="GetPlane(CATMathPlane&amp;)"></a> <dt> o <b>GetPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>ioPlane</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the plane definition if the GP is a plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioPlane</tt>
   <dd>   The plane.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetSphere"></a><a name="GetSphere(CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>GetSphere</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSphere</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the sphere definition if the GP is a sphere.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCenter</tt>
   <dd>   The center point.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetTorus"></a><a name="GetTorus(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)"></a> <dt> o <b>GetTorus</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetTorus</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMajorRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMinorRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the torus definition if the GP is a torus.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioPoint</tt>
   <dd>   The point.
 </dd>
    <dt><tt> ioAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> oMajorRadius</tt>
   <dd>   The major radius.
 </dd>
    <dt><tt> oMinorRadius</tt>
   <dd>   The minor radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="GetType"></a><a name="GetType(CATVisMeasurableType&amp;)"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetType</b>(<td><script type="text/javascript"> activateLink('CATVisMeasurableType','CATVisMeasurableType&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the type of the Graphic Primitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd>   The </dd>
<script type="text/javascript"> activateLinkAnchor('CATVisMeasurableType','','CATVisMeasurableType') </script> of the GraphicPrimitive. 
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
</dl>
<a name="SetCircle"></a><a name="SetCircle(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>SetCircle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCircle</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a circle and sets the circle definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCenter</tt>
   <dd>   The center point.
 </dd>
    <dt><tt> iAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetCone"></a><a name="SetCone(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>SetCone</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCone</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iApex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iSemiAngle</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a cone and sets the cone definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iApex</tt>
   <dd>   The apex point.
 </dd>
    <dt><tt> iAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> iSemiAngle</tt>
   <dd>   The semi-angle.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetCylinder"></a><a name="SetCylinder(CATMathPoint&amp;,CATMathVector&amp;,double&amp;)"></a> <dt> o <b>SetCylinder</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCylinder</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a cylinder and sets the cylinder definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>   The point.
 </dd>
    <dt><tt> iAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetLine"></a><a name="SetLine(CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>SetLine</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLine</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iSttPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iEndPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a line and sets the line definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSttPoint</tt>
   <dd>   The start point.
 </dd>
    <dt><tt> iEndPoint</tt>
   <dd>   The end point.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetPlane"></a><a name="SetPlane(CATMathPlane&amp;)"></a> <dt> o <b>SetPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>iPlane</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a plane and sets the plane definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPlane</tt>
   <dd>   The plane.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetSphere"></a><a name="SetSphere(CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>SetSphere</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSphere</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a sphere and sets the sphere definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCenter</tt>
   <dd>   The center point.
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetTorus"></a><a name="SetTorus(CATMathPoint&amp;,CATMathVector&amp;,double&amp;,double&amp;)"></a> <dt> o <b>SetTorus</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetTorus</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iMajorRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iMinorRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as a torus and sets the torus definition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>   The point.
 </dd>
    <dt><tt> iAxis</tt>
   <dd>   The axis.
 </dd>
    <dt><tt> iMajorRadius</tt>
   <dd>   The major radius.
 </dd>
    <dt><tt> iMinorRadius</tt>
   <dd>   The minor radius.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<a name="SetUnknown"></a><a name="SetUnknown()"></a> <dt> o <b>SetUnknown</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetUnknown</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Defines the GP as an unknown geometry.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK if everything went fine, E_FAIL otherwise
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATVisMeasurableGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

