<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT2DImagePixelGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT2DImagePixelGP"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT2DImagePixelGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT2DImagePixelGP_40747','CAT2DImagePixelGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DImagePixelGP</b>
</p>
<p>
<b><i> Class to create a dynamic graphic primitive of a 2D image.</i></b><br>

 <b>Role</b>: 
	This graphic primitive allows to constructs an image with pixels
	in 2D.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DImagePixelGP(float[2],CATPixelImage*,int,int,int,int)"><b>CAT2DImagePixelGP</b></a>(float[2],CATPixelImage*,int,int,int,int)
<dd>  Constructs a 2D image Graphic primitive.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Get(float**,CATPixelImage**,int*,int*,int*)"><b>Get</b></a>(float**,CATPixelImage**,int*,int*,int*)
<dd>  Retrieves data about the 2D image Graphic primitive.
 <dt> o 
    <a href="#ImmediateDraw(CATRender&amp;,CATViewpoint*,CATViewport*)"><b>ImmediateDraw</b></a>(CATRender&amp;,CATViewpoint*,CATViewport*)
<dd>   Draws a 2D image.
 <dt> o 
    <a href="#SetAlphaMode(int)"><b>SetAlphaMode</b></a>(int)
<dd>  Sets the alpha mode.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DImagePixelGP"></a><a name="CAT2DImagePixelGP(float[2],CATPixelImage*,int,int,int,int)"></a> <dt> o <b>CAT2DImagePixelGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DImagePixelGP</b>(<td> const <script type="text/javascript"> activateLink('float[2','float[2]')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPixelImage','CATPixelImage*')</script> <td><tt>iPixelImage</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iZoomQuality</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iXPixelOffset</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iYPixelOffset</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iScaleOffset</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D image Graphic primitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>	the position of the graphic primitive in a 2D space (in model coordinates).
 </dd>
    <dt><tt> iPixelImage</tt>
   <dd>	the 2D image used to create the 2D graphic primitive.
 </dd>
    <dt><tt> iZoomQuality</tt>
   <dd>	the zoom quality.
	<br><b>legal values</b>:
	<ul><li>0 : no zoom available.</li>
	<li>1 : low quality zoom.</li>
	<li>2 : high quality zoom (smooth).</li></ul>
	The default value is 0 (no zoom).
 </dd>
    <dt><tt> iXPixelOffset</tt>
   <dd>	The offset along X axis. It allows to translate the graphic primitive from
	the <tt>iPoint</tt>. <tt>iXPixelOffset</tt> is expressed in pixels.
	<br><b>legal values</b>:
	the default value is 0 (no translation along X axis)
 </dd>
    <dt><tt> iYPixelOffset</tt>
   <dd>	The offset along Y axis. It allows to translate the graphic primitive from
	the <tt>iPoint</tt>. <tt>iYPixelOffset</tt> is expressed in pixels.
	<br><b>legal values</b>:
	the default value is 0 (no translation along Y axis)
 </dd>
    <dt><tt> iScaleOffset</tt>
   <dd>	Do not use.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Get"></a><a name="Get(float**,CATPixelImage**,int*,int*,int*)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATPixelImage','CATPixelImage**')</script> <td><tt>oPixelImage</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAlpha</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oXPixelOffset</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oYPixelOffset</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves data about the 2D image Graphic primitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoint</tt>
   <dd>	the position of the graphic primitive in a 2D space
 </dd>
    <dt><tt> oPixelImage</tt>
   <dd>	the image which composes the graphic primitive.
 </dd>
    <dt><tt> oAlpha</tt>
   <dd>	the alpha mode (the transparent mode).
	<br><b>legal values</b>:
	<ul><li>0 : alpha mode is activated</li>
	<li>1 : alpha mode is not activated</li></ul>
 </dd>
    <dt><tt> oXPixelOffset</tt>
   <dd>	The offset along X axis. It allows to translate the graphic primitive from
	the <tt>iPoint</tt>. <tt>oXPixelOffset</tt> is expressed in pixels.
 </dd>
    <dt><tt> oYPixelOffset</tt>
   <dd>	The offset along Y axis. It allows to translate the graphic primitive from
	the <tt>iPoint</tt>. <tt>oYPixelOffset</tt> is expressed in pixels.</dd>
</dl>
</dl>
</dl>
<a name="ImmediateDraw"></a><a name="ImmediateDraw(CATRender&amp;,CATViewpoint*,CATViewport*)"></a> <dt> o <b>ImmediateDraw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ImmediateDraw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATViewpoint','CATViewpoint*')</script> <td><tt>iViewpoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATViewport','CATViewport*')</script> <td><tt>iViewport</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Draws a 2D image.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>	the render used to draw the 2D image.
 </dd>
    <dt><tt> iViewpoint</tt>
   <dd>	the viewpoint used to draw the 2D image.
 </dd>
    <dt><tt> iViewport</tt>
   <dd>	the viewPort used to draw the 2D image.</dd>
</dl>
</dl>
</dl>
<a name="SetAlphaMode"></a><a name="SetAlphaMode(int)"></a> <dt> o <b>SetAlphaMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAlphaMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOnOff</tt>)</table></dt>
<dl>
  <dd>
 Sets the alpha mode.
 Alpha mode allows to define a degree of transparency for each pixel of the
 2D image representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOnOff</tt>
   <dd>	the integer which defines the alpha mode.
	<br><b>legal values</b>:
	<ul><li>0 : alpha mode is not activated</li>
	<li>1 : alpha mode is activated</li></ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT2DImagePixelGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

