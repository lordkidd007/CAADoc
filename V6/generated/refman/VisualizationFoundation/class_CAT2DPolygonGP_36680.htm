<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT2DPolygonGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT2DPolygonGP"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT2DPolygonGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT2DPolygonGP_36680','CAT2DPolygonGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DPolygonGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of a 2D polygon.</i></b><br>

 <b>Role</b>: <pre>
           Example of a CAT2DPolygon with 4 points :

             point 1 X--------------------X point 2
                     |                    |
                     |                    |
             point 4 X--------------------X point 3
              </pre></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DPolygonGP()"><b>CAT2DPolygonGP</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT2DPolygonGP(float[],int,int)"><b>CAT2DPolygonGP</b></a>(float[],int,int)
<dd>  Constructs a 2D polygon graphic primitive from a list of points.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the 2D line.
 <dt> o 
    <a href="#Get(float**,int*,int*,int*,int**,int**,int**)"><b>Get</b></a>(float**,int*,int*,int*,int**,int**,int**)
<dd>  Retrieves polygon parameters.
 <dt> o 
    <a href="#IsFilled()"><b>IsFilled</b></a>()
<dd>  Returns whether or not the 2D polygon is filled.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DPolygonGP"></a><a name="CAT2DPolygonGP()"></a> <dt> o <b>CAT2DPolygonGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DPolygonGP</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT2DPolygonGP"></a><a name="CAT2DPolygonGP(float[],int,int)"></a> <dt> o <b>CAT2DPolygonGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DPolygonGP</b>(<td> const <script type="text/javascript"> activateLink('float','float[]')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iFill</tt><td><tt>= FILL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D polygon graphic primitive from a list of points.
 The last point is linked to the first point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd>   Array containing the x, y  coordinates for
   each point of the polygon. Its size is equal
   to two times the number of points. So, the coordinates
   x, y of the first point are respectively stored in iPoints[0], and  iPoints[1],
   the coordinates x, y of the second point, in iPoints[2], iPoints[3], and so on...
 </dd>
    <dt><tt> iNbPoints</tt>
   <dd>   The number of points used to define the polygon.
 </dd>
    <dt><tt> iFill</tt>
   <dd>	the integer which allows to construct a 2D polygon
	just with edges or filled with graphic attributes.
	<br><b>legal values</b>: 
	<ul><li>NOFILL : just edges are drawn.</li>
	<li>FILL : the 2D circle arc or the 2D circle is filled
				with graphic attributes.</li></ul>
	<li>FILL_ANTIALIASED : the 2D circle arc or the 2D circle is filled
				with graphic attributes and antialiasing.</li></ul>
	The default value is FILL.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the 2D line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>    The render through which the 2D polygon is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(float**,int*,int*,int*,int**,int**,int**)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oFill</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oVertex</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves polygon parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoints</tt>
   <dd>   Array containing the x, y  coordinates for
   each point of the polygon. Its size is equal
   to two times the number of points. So, the coordinates
   x, y of the first point are respectively stored in iPoints[0], and  iPoints[1],
   the coordinates x, y of the second point, in iPoints[2], iPoints[3], and so on...
 </dd>
    <dt><tt> oNbPoint</tt>
   <dd>   The number of points used to define the polygon.
 </dd>
    <dt><tt> oFill</tt>
   <dd>	the integer which allows to construct a 2D polygon
	just with edges or filled with graphic attributes.
	<br><b>legal values</b>: 
	<ul><li>NOFILL : just edges are drawn.</li>
	<li>FILL : the 2D circle arc or the 2D circle is filled
				with graphic attributes.</li></ul>
 </dd>
    <dt><tt> oNbTriangles</tt>
   <dd>	The number of group of triangles which compose the 2D polygon after the tesselation.
 </dd>
    <dt><tt> oType</tt>
   <dd>	Array which contain the type of each group of triangles.
	<br><b>legal values</b>:
	<ul>
		<li>0 : single triangles</li>
		<li>1 : triangle strip</li>
		<li>2 : triangle fan</li>
		<li>4 : same as 0</li>
		<li>5 : same as 1</li>
		<li>6 : same as 2</li>
	</ul>
	Its size is equal to <tt>oNbTriangles</tt>.
 </dd>
    <dt><tt> oTriangles</tt>
   <dd>	Array which contain the number of vertex for each group of triangles.
	Its size is equal to <tt>oNbTriangles</tt>.
 </dd>
    <dt><tt> oVertex</tt>
   <dd>	Array of indices of vertex which compose the 2D polygon.<br>
	This array is composed of various arrays which represent one group of triangles.
	And each group of triangles have a type defined by the array "oType".
	<ul>
	<li>
		If the group is made of single triangles, indices are written 
		like in the following sample :
	<pre>
	1              4
	|\           /|
	| \         / |
	|  \       /  |
	|   \     /   |
	|____\   /____|
	2     3  5    6  
	</pre>
	</li>
	<li>
		if the group is a triangle strip, indices are written like in the following sample :
	<pre>
	1     3      4
	-------------
	\     |\     |\
	 \    | \    | \
	  \   |  \   |  \
	   \  |   \  |   \
	    \ |    \ |    \
	     \|_____\|_____\
	      2      5       6
	</pre>
	</li>
	<li>
		if the group is a triangle fan, indices are written like in the following sample :
	<pre>
	2      1
	 _______    
	|     /|\
	|    / | \
	|   /  |  \
	|  /   |   \
	| /    |    \
	|/_____|_____\
	3      4      5
	</pre>
	</li>
	</ul></dd>
</dl>
</dl>
</dl>
<a name="IsFilled"></a><a name="IsFilled()"></a> <dt> o <b>IsFilled</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>IsFilled</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns whether or not the 2D polygon is filled.
</dl>
<hr>
 This object is included in the file: <b>CAT2DPolygonGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

