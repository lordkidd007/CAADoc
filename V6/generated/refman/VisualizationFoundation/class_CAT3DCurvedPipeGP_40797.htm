<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationFoundation Class CAT3DCurvedPipeGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationFoundation.htm" href="../VisualizationFoundation.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationFoundation";	}
		function getCurrentObjectName() { 
 	return "CAT3DCurvedPipeGP"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationFoundation <script type="text/javascript" > writeClassCharacteristic(); </script> CAT3DCurvedPipeGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DCurvedPipeGP_40797','CAT3DCurvedPipeGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DCurvedPipeGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of a 3D curved pipe.</i></b><br>

 <b>Role</b>: A 3D curved pipe can be assimilated to the extrusion
 of a circle along a main 3D curve.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DCurvedPipeGP(void)"><b>CAT3DCurvedPipeGP</b></a>(void)
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT3DCurvedPipeGP(float*,int,float*,int,float*,float*,float)"><b>CAT3DCurvedPipeGP</b></a>(float*,int,float*,int,float*,float*,float)
<dd>  Constructs a 3D curved pipe from tesselation informations
 on the main curve and on circles belonging to the curved pipe.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the curved pipe.
 <dt> o 
    <a href="#Get(float**,int*,float**,int*,float**,float**,float*)"><b>Get</b></a>(float**,int*,float**,int*,float**,float**,float*)
<dd>  Retrieves the attributes of the class.
 <dt> o 
    <a href="#Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"><b>Get</b></a>(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  
 <dt> o 
    <a href="#GetReadOnly(int*,float const**,int*,float const**,int*,int const**,int*,int const**,int*,int const**,int const**,int*,int const**)"><b>GetReadOnly</b></a>(int*,float const**,int*,float const**,int*,int const**,int*,int const**,int*,int const**,int const**,int*,int const**)
<dd>  Retrieves the tesselation information from the curved pipe.
 <dt> o 
    <a href="#GetTextureCoordinates(float**)"><b>GetTextureCoordinates</b></a>(float**)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinates(float**,int*)"><b>GetTextureCoordinates</b></a>(float**,int*)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinatesReadOnly(float const**)"><b>GetTextureCoordinatesReadOnly</b></a>(float const**)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinatesReadOnly(float const**,int*)"><b>GetTextureCoordinatesReadOnly</b></a>(float const**,int*)
<dd>  Retrieves the texture coordinates.
 <dt> o 
    <a href="#GetVertices(int*,float**,int*)"><b>GetVertices</b></a>(int*,float**,int*)
<dd>  
 <dt> o 
    <a href="#GetVerticesReadOnly(int*,float const**,int*)"><b>GetVerticesReadOnly</b></a>(int*,float const**,int*)
<dd>  Retrieves curved pipe vertices coordinates.
 <dt> o 
    <a href="#SetTextureCoordinates(float*,int)"><b>SetTextureCoordinates</b></a>(float*,int)
<dd>  
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DCurvedPipeGP"></a><a name="CAT3DCurvedPipeGP(void)"></a> <dt> o <b>CAT3DCurvedPipeGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DCurvedPipeGP</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT3DCurvedPipeGP"></a><a name="CAT3DCurvedPipeGP(float*,int,float*,int,float*,float*,float)"></a> <dt> o <b>CAT3DCurvedPipeGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DCurvedPipeGP</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iCurveVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbCurveVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iCirclesVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbVerticesPerCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iBaseNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iEndNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iPipeRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 3D curved pipe from tesselation informations
 on the main curve and on circles belonging to the curved pipe.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurveVertices</tt>
   <dd>   Array made of main curve vertices coordinates: XYZXYZXYZ...
   Its size is equal to three times the number of vertices
   used to describe the main curve.
 </dd>
    <dt><tt> iNbCurveVertices</tt>
   <dd>   The number of vertices used to describe the main curve.
 </dd>
    <dt><tt> iCirclesVertices</tt>
   <dd>   Array made of curved pipe's circles coordinates. There is
   one circle per curve vertex, and a constant number of vertices
   to describe each of these circles.So, this array size is equal to
   <tt>iNbCurveVertices * iNbVerticesPerCircle * 3</tt>.
   For example, if we choose to describe each circle of the pipe with
   20 points, the pipe second circle first point coordinates are :
   <tt>x = iCirclesVertices[3*iNbVerticesPerCircle], y = iCirclesVertices[3*iNbVerticesPerCircle+1] and
   z = iCirclesVertices[3*iNbVerticesPerCircle+2].
 </dd>
    <dt><tt> iNbVerticesPerCircle</tt>
   <dd>   The number of vertices used to describe every circles of the pipe.
 </dd>
    <dt><tt> iBaseNormal</tt>
   <dd>   Array of curved pipe base circle normal coordinates. Its size is three
 </dd>
    <dt><tt> iEndNormal</tt>
   <dd>   Array of curved pipe end circle normal coordinates. Its size is three
 </dd>
    <dt><tt> iPipeRadius</tt>
   <dd>   The global pipe radius.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the curved pipe.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>   The render through which the curved pipe is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(float**,int*,float**,int*,float**,float**,float*)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oCurveVertex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbCurveVertex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oCircleVertex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbCircleVertex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oBaseNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oEndNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oRadiusInverse</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the attributes of the class.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 float * curveVertices;
 int nCurveVertices;
 ...
 Get(&curveVertices, &nCurveVertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCurveVertices</tt>
   <dd>   Retrieves an array made of main curve vertices coordinates: XYZXYZXYZ...
   Its size is equal to three times the number of vertices
   used to describe the main curve.
 </dd>
    <dt><tt> oNbCurveVertices</tt>
   <dd>   Retrieves the number of vertices used to describe the main curve.
 </dd>
    <dt><tt> oCirclesVertices</tt>
   <dd>   Retrieves an Array made of curved pipe's circles coordinates. There is
   one circle per curve vertex, and a constant number of vertices
   to describe each of these circles. So, this array size is equal to
   <tt>oNbCurveVertices * oNbVerticesPerCircle * 3</tt>.
   For example, if we choose to describe each circle of the pipe with
   20 points, the pipe second circle first point coordinates are :
   <tt>x = oCirclesVertices[3*oNbVerticesPerCircle], y = oCirclesVertices[3*oNbVerticesPerCircle+1] and
   z = oCirclesVertices[3*oNbVerticesPerCircle+2].
 </dd>
    <dt><tt> oNbVerticesPerCircle</tt>
   <dd>   Retrieves the number of vertices used to describe every circles of the pipe.
 </dd>
    <dt><tt> oBaseNormal</tt>
   <dd>   Retrieves the array made of curved pipe base circle normal coordinates. Its size is three.
 </dd>
    <dt><tt> oEndNormal</tt>
   <dd>   Retrieves the array made of curved pipe end circle normal coordinates. Its size is three.
 </dd>
    <dt><tt> iPipeRadius</tt>
   <dd>   Retrieves the global pipe radius.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R216
 See GetReadOnly
</dl>
</dl>
<a name="GetReadOnly"></a><a name="GetReadOnly(int*,float const**,int*,float const**,int*,int const**,int*,int const**,int*,int const**,int const**,int*,int const**)"></a> <dt> o <b>GetReadOnly</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetReadOnly</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float const','float const**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float const','float const**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int const','int const**')</script> <td><tt>oTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int const','int const**')</script> <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int const','int const**')</script> <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int const','int const**')</script> <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int const','int const**')</script> <td><tt>oNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tesselation information from the curved pipe.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float const* vertices;
 ...
 GetReadOnly(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 1: <tt>GetVertices</tt> always
    allocates the returned arrays.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>   Retrieves an array made of curved pipe vertices coordinates: XYZXYZXYZ...
   If we have a pipe made
   with NCircles circles and that each circle is described with NCirclePoints points,
   <tt>oVertices</tt> array size is equal to NCircles * NCirclePoints * 3 * 2.
   The array is structured like this:
   the first NCirclePoints*3 coordinates stored correspond to the NCirclePoints points of
   the first circle of the pipe. Then, are stored, respectively, the first point of the first circle,
   its corresponding point on the next circle, the second point of the first circle, its corresponding
   point on the next circle, ... Finally, the last NCirclePoints*3 coordinates correspond to the last circle.
   This kind of organization allows the drawing of the curved pipe body thanks to triangles strips, by taking the points
   in the order they are stored.
   For example, let's assume that we have a curved pipe made with a 3 vertices curve and 4 vertices circles.
   We have 3 circles called C1, C2 and C3. If we use the notation C1.P1 to designate the first point of the first
   circle, the array will look like this :
   <pre>
      
                               -----------
                              | oVertices |
                               -----------
                           {  |   C1.P1   |  
       first circle points {  |   C1.P2   |   
                           {  |   C1.P3   |   
                           {  |   C1.P4   |   
                              |   C1.P1   | }
                              |   C2.P1   | }
                              |   C1.P2   | }
                              |   C2.P2   | } 
                              |   C1.P3   | }
                              |   C2.P3   | }
                              |   C1.P4   | }
                              |   C2.P4   | }
                              |   C2.P1   | } intermediate pipe body
                              |   C3.P1   | }
                              |   C2.P2   | }
                              |   C3.P2   | }
                              |   C2.P3   | }
                              |   C3.P3   | }
                              |   C2.P4   | }
                              |   C3.P4   | }
                            { |   C3.P1   |
         last circle points { |   C3.P2   |
                            { |   C3.P3   |
                            { |   C3.P4   |   
                               -----------
                

   </pre>
 Of course, for each point we have in reality 3 fields in the array, corresponding to
 this point's coordinates. 
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>   the oVertices array size. This size is equal to three times the number of vertices
   used to describe the main curve, cross the number of vertices used to describe each circle,
   cross two.
 </dd>
    <dt><tt> oNormals</tt>
   <dd>   Retrieves an array made of normals coordinates. It is organized as <tt>oVertices</tt> : one vertex has exactly
   one normal at the same field entry.
 </dd>
    <dt><tt> oNormalsArraySize</tt>
   <dd>   Retrieves The size, in floats, of the <tt>oNormal</tt> array. Equal to three times the number
   of normals.
 </dd>
    <dt><tt> oTriangleIndices</tt>
   <dd>   Indices of pipe single triangles vertices. 
    Always equal to NULL.
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd>   Number of pipe single triangles. 
   Always equal to 0.
 </dd>
    <dt><tt> oTriangleStripIndices</tt>
   <dd>    Retrieves the array used to store the pipe triangles strips vertices. The pipe body is made
    with triangles strips. Each field contains a
    vertex index, belonging to one of the strips, in the oVertices array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | oTriangleStripIndices |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the pipe j-th strip first vertex 
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].   
 </dd>
    <dt><tt> oNbTriangleStrip</tt>
   <dd>    Retrieves the number of triangles strips used to describe the pipe body.
 </dd>
    <dt><tt> oNbVertexPerTriangleStrip</tt>
   <dd>    Retrieves an array containing the number of vertices for each pipe triangles strip.
    The size of this array is equal to <tt>*oNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |*oNbVertexPerTriangleStrip|
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(*oNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (*oNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>   
 </dd>
    <dt><tt> oTriangleFanIndices</tt>
   <dd>   Retrieves the array used to store the pipe triangles fans vertices indices. There is only 2 triangles fans
   in a curved pipe: one for each extremities circle.
   Each field contains a
   vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
   <tt>oVertices</tt> array, the XYZ coordinates for each
   vertex, the indices used to designate the vertices are multiples of three.
   <pre>


                   ----------------------
                  | *oTriangleFanIndices  |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n0 indices
                  |           .          |   }
                  |          i0n0        |   }
                  |                      |
                  |          i10         |   }
                  |          i11         |   }
                  |           .          |   } second triangle fan 
                  |           .          |   } with n1 vertices
                  |          i1n1        |   }
                   ----------------------


   </pre> 
   For example, index i10 allows to access the pipe second fan first vertex
   wich coordinates are X = *oVertices[i10], Y = *oVertices[i10 + 1] and Z = *oVertices[i10 + 2], and
   which normal coordinates are Nx = *oNormals[i10], Ny = *oNormals[i10 + 1] and Nz = *oNormals[i10 + 2].
 </dd>
    <dt><tt> oNbTriangleFan</tt>
   <dd>    Retrieves the number of pipe triangles fans. Always equal to 2.
 </dd>
    <dt><tt> oNbVertexPerTriangleFan</tt>
   <dd>    Retrieves the array containing the number of vertices for each pipe triangles fan.
    The size of this array is equal to 2. For example, the first fan
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | *oNbVertexPerTriangleFan |
                --------------------------
               |             n0           |
               |             n1           |   n1 = number of vertices of the second fan. (*oNbVertexPerTriangleFan[1]
                --------------------------    

   </pre></dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R14
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**,int*)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDimension</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R216
 see GetTextureCoordinatesReadOnly
</dl>
</dl>
<a name="GetTextureCoordinatesReadOnly"></a><a name="GetTextureCoordinatesReadOnly(float const**)"></a> <dt> o <b>GetTextureCoordinatesReadOnly</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinatesReadOnly</b>(<td><script type="text/javascript"> activateLink('float const','float const**')</script> <td><tt>oTextureCoord</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  
 in favor of GetTextureCoordinates (float ** oTextureCoord, int * oDimension)
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices.</dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinatesReadOnly"></a><a name="GetTextureCoordinatesReadOnly(float const**,int*)"></a> <dt> o <b>GetTextureCoordinatesReadOnly</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinatesReadOnly</b>(<td><script type="text/javascript"> activateLink('float const','float const**')</script> <td><tt>oTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDimension</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> oDimension</tt>
   <dd>    Retrieve the number of coordinates per vertex.</dd>
</dl>
</dl>
</dl>
<a name="GetVertices"></a><a name="GetVertices(int*,float**,int*)"></a> <dt> o <b>GetVertices</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetVertices</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R216
 see GetVerticesReadOnly
</dl>
</dl>
<a name="GetVerticesReadOnly"></a><a name="GetVerticesReadOnly(int*,float const**,int*)"></a> <dt> o <b>GetVerticesReadOnly</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetVerticesReadOnly</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float const','float const**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves curved pipe vertices coordinates.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 GetVertices(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 1: <tt>GetVertices</tt> always
    allocates the returned arrays.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>   Retrieves an array made of curved pipe vertices coordinates: XYZXYZXYZ...
   If we have a pipe made
   with NCircles circles and that each circle is described with NCirclePoints points,
   <tt>oVertices</tt> array size is equal to NCircles * NCirclePoints * 3 * 2.
   The array is structured like this:
   the first NCirclePoints*3 coordinates stored correspond to the NCirclePoints points of
   the first circle of the pipe. Then, are stored, respectively, the first point of the first circle,
   its corresponding point on the next circle, the second point of the first circle, its corresponding
   point on the next circle, ... Finally, the last NCirclePoints*3 coordinates correspond to the last circle.
   This kind of organization allows the drawing of curved pipe thanks to triangles strips, by taking the points
   in the order they are stored.
   For example, let's assume that we have a curved pipe made with a 3 vertices curve and 4 vertices circles.
   We have 3 circles called C1, C2 and C3. If we use the notation C1.P1 to designate the first vertex of the first
   circle, the array will look like this :
   <pre>
      
                               -----------
                              | oVertices |
                               -----------
                           {  |   C1.P1   |  
       first circle points {  |   C1.P2   |   
                           {  |   C1.P3   |   
                           {  |   C1.P4   |   
                              |   C1.P1   | }
                              |   C2.P1   | }
                              |   C1.P2   | }
                              |   C2.P2   | } 
                              |   C1.P3   | }
                              |   C2.P3   | }
                              |   C1.P4   | }
                              |   C2.P4   | }
                              |   C2.P1   | } intermediate pipe body
                              |   C3.P1   | }
                              |   C2.P2   | }
                              |   C3.P2   | }
                              |   C2.P3   | }
                              |   C3.P3   | }
                              |   C2.P4   | }
                              |   C3.P4   | }
                            { |   C3.P1   |
         last circle points { |   C3.P2   |
                            { |   C3.P3   |
                            { |   C3.P4   |   
                               -----------
                

   </pre>
 Of course, for each point we have in reality 3 fields in the array, corresponding to
 this point's coordinates.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>   the oVertices array size. This size is equal to three times the number of vertices
   used to describe the main curve, cross the number of vertices used to describe each circle,
   cross two.</dd>
</dl>
</dl>
</dl>
<a name="SetTextureCoordinates"></a><a name="SetTextureCoordinates(float*,int)"></a> <dt> o <b>SetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','PROTECT_DEPRECATED  void')</script>  <b>SetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iFormat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R216
 see CAT3DCurvedPipeGPEditHelper
 Sets the texture coordinates.
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    iTextureFormat is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT3DCurvedPipeGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisFoundation</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

