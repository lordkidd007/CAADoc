<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DELPPRProcessItf Interface DELIPPRProcessGroup</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DELPPRProcessItf.htm" href="../DELPPRProcessItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DELPPRProcessItf";	}
		function getCurrentObjectName() { 
 	return "DELIPPRProcessGroup"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELPPRProcessItf Interface DELIPPRProcessGroup</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIPPRProcessGroup_33284','DELIPPRProcessGroup','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIPPRProcessGroup</b>
</p>
<p>
<b><i> Interface to author process group.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddProcessOrGroup(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"><b>AddProcessOrGroup</b></a>(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)
<dd>  Adds a Process occurrence or a Group in the group.
 <dt> o 
    <a href="#CreateAndInsertGroup(DELIPPRProcessGroup*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"><b>CreateAndInsertGroup</b></a>(DELIPPRProcessGroup*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)
<dd>  Creates an empty Group and inserts it under this.
 <dt> o 
    <a href="#GetFather(CATBaseUnknown*&amp;)"><b>GetFather</b></a>(CATBaseUnknown*&amp;)
<dd>  Gets the father of the group.
 <dt> o 
    <a href="#GetOwner(CATIPLMNavReference*&amp;)"><b>GetOwner</b></a>(CATIPLMNavReference*&amp;)
<dd>  Gets the process under which the group is aggregated.
 <dt> o 
    <a href="#GetProcessesOrGroups(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)"><b>GetProcessesOrGroups</b></a>(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)
<dd>  Get the list of process occurrences or groups in the group.
 <dt> o 
    <a href="#GetProcessesOrGroupsFirstLevel(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)"><b>GetProcessesOrGroupsFirstLevel</b></a>(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)
<dd>  Gets the list of process occurrences or groups in the group on the first level (aggregated under the process owner of the Group).
 <dt> o 
    <a href="#IsEmpty()"><b>IsEmpty</b></a>()
<dd>  Checks if the group does contain any process or group.
 <dt> o 
    <a href="#IsObjectInsertionAuthorized(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"><b>IsObjectInsertionAuthorized</b></a>(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)
<dd>  Checks if an object can be inserted in the group.
 <dt> o 
    <a href="#IsObjectRemovalAuthorized(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"><b>IsObjectRemovalAuthorized</b></a>(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)
<dd>  Checks if an object can be removed from the group.
 <dt> o 
    <a href="#IsSubGroup()"><b>IsSubGroup</b></a>()
<dd>   Checks if the group is a subgroup.
 <dt> o 
    <a href="#RemoveProcessOrGroup(CATBaseUnknown*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"><b>RemoveProcessOrGroup</b></a>(CATBaseUnknown*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)
<dd>  Removes a Process occurrence or a Group from the group.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddProcessOrGroup"></a><a name="AddProcessOrGroup(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"></a> <dt> o <b>AddProcessOrGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddProcessOrGroup</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipiProcessOrGroupToAdd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup::ErrorDiagnostic','DELIPPRProcessGroup::ErrorDiagnostic&amp;')</script> <td><tt>oDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a Process occurrence or a Group in the group. 
 The added object must be a child of the group owner.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOrGroupToAdd</tt>
   <dd>      The object to add in the group: a process occurrence or a group
   </dd>
    <dt><tt> oDiagnostic</tt>
   <dd>      Precisions on the reason of the failure
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="CreateAndInsertGroup"></a><a name="CreateAndInsertGroup(DELIPPRProcessGroup*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"></a> <dt> o <b>CreateAndInsertGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateAndInsertGroup</b>(<td><script type="text/javascript"> activateLink('DELIPPRProcessGroup','DELIPPRProcessGroup*&amp;')</script> <td><tt>opiNewGroup</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup::ErrorDiagnostic','DELIPPRProcessGroup::ErrorDiagnostic&amp;')</script> <td><tt>oDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an empty Group and inserts it under this. 
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNewGroup</tt>
   <dd>      The newly created and inserted group
   </dd>
    <dt><tt> oDiagnostic</tt>
   <dd> [out]      Precisions on the reason of the failure
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="GetFather"></a><a name="GetFather(CATBaseUnknown*&amp;)"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFather</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>opiFather</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the father of the group.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiFather</tt>
   <dd>      The father of the group: the Process reference for a group; the upper group for a subgroup
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="GetOwner"></a><a name="GetOwner(CATIPLMNavReference*&amp;)"></a> <dt> o <b>GetOwner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOwner</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*&amp;')</script> <td><tt>opiOwner</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the process under which the group is aggregated.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiOwner</tt>
   <dd>       The process under which the group is aggregated
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="GetProcessesOrGroups"></a><a name="GetProcessesOrGroups(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)"></a> <dt> o <b>GetProcessesOrGroups</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProcessesOrGroups</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfProcessesOrGroups</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiContext</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get the list of process occurrences or groups in the group. 
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiContext</tt>
   <dd>      The context as Process reference for occurrences computation
   </dd>
    <dt><tt> oListOfProcessesOrGroups</tt>
   <dd>      The list of objects in the group: a list of process occurrences or groups
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="GetProcessesOrGroupsFirstLevel"></a><a name="GetProcessesOrGroupsFirstLevel(CATListPtrCATBaseUnknown&amp;,CATIPLMNavReference*)"></a> <dt> o <b>GetProcessesOrGroupsFirstLevel</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProcessesOrGroupsFirstLevel</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oListOfProcessesOrGroups</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiContext</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of process occurrences or groups in the group on the first level (aggregated under the process owner of the Group). 
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiContext</tt>
   <dd>       The context as Process Reference for occurrences computations
   </dd>
    <dt><tt> oListOfProcessesOrGroups</tt>
   <dd>      The list of objects in the first level group: a list of process occurrences or group
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="IsEmpty"></a><a name="IsEmpty()"></a> <dt> o <b>IsEmpty</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsEmpty</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the group does contain any process or group.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
      <dt>TRUE         : The group does not contain any object. </dt> 
      <dt>FALSE        : The group contains a process or a group. </dt> 
      </dl>
</dl>
</dl>
<a name="IsObjectInsertionAuthorized"></a><a name="IsObjectInsertionAuthorized(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"></a> <dt> o <b>IsObjectInsertionAuthorized</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsObjectInsertionAuthorized</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipiProcessOrGroupToAdd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup::ErrorDiagnostic','DELIPPRProcessGroup::ErrorDiagnostic&amp;')</script> <td><tt>oDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if an object can be inserted in the group.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOrGroupToAdd</tt>
   <dd>      The object to add in the group: a process occurrence or a group
   </dd>
    <dt><tt> oDiagnostic</tt>
   <dd>      Precisions on the reason of the failure
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <b>Legal values</b>:
      <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="IsObjectRemovalAuthorized"></a><a name="IsObjectRemovalAuthorized(CATBaseUnknown*,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"></a> <dt> o <b>IsObjectRemovalAuthorized</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsObjectRemovalAuthorized</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipiProcessOrGroupToRemove</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup::ErrorDiagnostic','DELIPPRProcessGroup::ErrorDiagnostic&amp;')</script> <td><tt>oDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if an object can be removed from the group.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOrGroupToRemove</tt>
   <dd>       The object to remove in the group: a process occurrence or a group
   </dd>
    <dt><tt> oDiagnostic</tt>
   <dd>       Precisions on the reason of the failure
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<a name="IsSubGroup"></a><a name="IsSubGroup()"></a> <dt> o <b>IsSubGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsSubGroup</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Checks if the group is a subgroup.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
      <dt>TRUE         : The group is a subgroup. </dt> 
      <dt>FALSE        : The group is not a subgroup. <dt> 
      </dl>
</dl>
</dl>
<a name="RemoveProcessOrGroup"></a><a name="RemoveProcessOrGroup(CATBaseUnknown*&amp;,DELIPPRProcessGroup::ErrorDiagnostic&amp;)"></a> <dt> o <b>RemoveProcessOrGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveProcessOrGroup</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>ipiProcessOrGroupToRemove</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup::ErrorDiagnostic','DELIPPRProcessGroup::ErrorDiagnostic&amp;')</script> <td><tt>oDiagnostic</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a Process occurrence or a Group from the group. 
 The added object must be a child of the group owner.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOrGroupToRemove</tt>
   <dd>      The object to remove from the group: a process occurrence or a group
   </dd>
    <dt><tt> oDiagnostic</tt>
   <dd> [out]      Precisions on the reason of the failure
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>       <dl>
			<dt><code>S_OK</code>          <dd>if the method succeeds
			<dt><code>E_INVALIDARG</code>  <dd>if the input type is not valid
			<dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
      </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIPPRProcessGroup.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DELPPRProcessItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

