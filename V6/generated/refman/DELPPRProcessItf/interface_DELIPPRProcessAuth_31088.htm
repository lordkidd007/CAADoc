<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DELPPRProcessItf Interface DELIPPRProcessAuth</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DELPPRProcessItf.htm" href="../DELPPRProcessItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DELPPRProcessItf";	}
		function getCurrentObjectName() { 
 	return "DELIPPRProcessAuth"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELPPRProcessItf Interface DELIPPRProcessAuth</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DELIPPRProcessAuth_31088','DELIPPRProcessAuth','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>DELIPPRProcessAuth</b>
</p>
<p>
<b><i> Interface to author the Functional Process model.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AssignProduct(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"><b>AssignProduct</b></a>(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)
<dd>  Creates an implement link between a process occurrence and a product occurrence.
 <dt> o 
    <a href="#CreateGroup(CATIPLMNavReference*,DELIPPRProcessGroup*&amp;)"><b>CreateGroup</b></a>(CATIPLMNavReference*,DELIPPRProcessGroup*&amp;)
<dd>  Creates an empty group of process instances under the given process reference.
 <dt> o 
    <a href="#CreateProcess(CATIType_var&amp;,void**,IID&amp;)"><b>CreateProcess</b></a>(CATIType_var&amp;,void**,IID&amp;)
<dd>  Creates a process reference.
 <dt> o 
    <a href="#CreateScope(CATIPLMNavReference*,CATIPLMNavReference*)"><b>CreateScope</b></a>(CATIPLMNavReference*,CATIPLMNavReference*)
<dd>  Creates a scope link between a process reference and a product reference.
 <dt> o 
    <a href="#InsertPredecessor(CATIPLMNavReference*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)"><b>InsertPredecessor</b></a>(CATIPLMNavReference*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)
<dd>  Inserts an existing process reference as a predecessor of a given process reference.
 <dt> o 
    <a href="#InsertPredecessor(CATIPLMNavOccurrence*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)"><b>InsertPredecessor</b></a>(CATIPLMNavOccurrence*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)
<dd>  Inserts an existing process reference as a predecessor of a given process occurrence.
 <dt> o 
    <a href="#RemoveAllGroups(CATIPLMNavReference*)"><b>RemoveAllGroups</b></a>(CATIPLMNavReference*)
<dd>  Removes all groups and sub-groups present under the given process reference.
 <dt> o 
    <a href="#RemoveGroup(CATIPLMNavReference*,DELIPPRProcessGroup*)"><b>RemoveGroup</b></a>(CATIPLMNavReference*,DELIPPRProcessGroup*)
<dd>  Removes a group of process instance under the given process reference.
 <dt> o 
    <a href="#RemovePredecessor(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"><b>RemovePredecessor</b></a>(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)
<dd>  Removes a process reference as a predecessor of a given process occurrence.
 <dt> o 
    <a href="#RemoveScope(CATIPLMNavReference*)"><b>RemoveScope</b></a>(CATIPLMNavReference*)
<dd>  Removes a scope link between a process reference and associated product reference.
 <dt> o 
    <a href="#UnAssignProduct(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"><b>UnAssignProduct</b></a>(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)
<dd>  Removes an implement link between a process occurrence and a product occurrence.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AssignProduct"></a><a name="AssignProduct(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"></a> <dt> o <b>AssignProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AssignProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProcessOcc</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProductOcc</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an implement link between a process occurrence and a product occurrence.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOcc</tt>
   <dd>   The process occurrence
 </dd>
    <dt><tt> ipiProductOcc</tt>
   <dd>   The product occurrence
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="CreateGroup"></a><a name="CreateGroup(CATIPLMNavReference*,DELIPPRProcessGroup*&amp;)"></a> <dt> o <b>CreateGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateGroup</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcess</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup','DELIPPRProcessGroup*&amp;')</script> <td><tt>opiGroup</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Creates an empty group of process instances under the given process reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcess</tt>
   <dd>   the process reference
 </dd>
    <dt><tt> opiGroup</tt>
   <dd>   the created group
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>method successfully ended
   <dt><code>E_FAIL</code>        <dd>method failed
   </dl>
</dl>
</dl>
<a name="CreateProcess"></a><a name="CreateProcess(CATIType_var&amp;,void**,IID&amp;)"></a> <dt> o <b>CreateProcess</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateProcess</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ihType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oppProcessReference</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPLMNavReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a process reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ihType</tt>
   <dd>   The process type to be chosen among the available types in the PLMProcessAdvTypePackage
 </dd>
    <dt><tt> oppProcessReference</tt>
   <dd>   The created process reference
 </dd>
    <dt><tt> iIID</tt>
   <dd>   The IID of the interface representing the created process reference
   <br><b>Legal values</b>: Any interface implemented on a process reference (IID_CATIPLMNavReference by default)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>if the type is not valid
   <dt><code>E_NOINTERFACE</code> <dd>if the requested interface is not implemented on the resulting object
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="CreateScope"></a><a name="CreateScope(CATIPLMNavReference*,CATIPLMNavReference*)"></a> <dt> o <b>CreateScope</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateScope</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcessReference</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProductReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a scope link between a process reference and a product reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessReference</tt>
   <dd>   The process reference
 </dd>
    <dt><tt> ipiProductReference</tt>
   <dd>   The product reference
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="InsertPredecessor"></a><a name="InsertPredecessor(CATIPLMNavReference*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)"></a> <dt> o <b>InsertPredecessor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertPredecessor</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcessRefSuccessor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcessRefPredecessor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiContextForOutputOcc</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oppProcessOcc</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPLMNavOccurrence</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Inserts an existing process reference as a predecessor of a given process reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessRefSuccessor</tt>
   <dd>   The process reference that will be the successor
 </dd>
    <dt><tt> ipiProcessRefPredecessor</tt>
   <dd>   The process reference that will be the predecessor
 </dd>
    <dt><tt> ipiContextForOutputOcc</tt>
   <dd>   The context (process reference) for the resulting occurrence
 </dd>
    <dt><tt> oppProcessOcc</tt>
   <dd>   The created process occurrence
 </dd>
    <dt><tt> iIID</tt>
   <dd>   The IID of the interface representing the created process occurrence
   <br><b>Legal values</b>: Any interface implemented on a process occurrence (IID_CATIPLMNavOccurrence by default)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_NOINTERFACE</code> <dd>if the requested interface is not implemented on the resulting object
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="InsertPredecessor"></a><a name="InsertPredecessor(CATIPLMNavOccurrence*,CATIPLMNavReference*,CATIPLMNavReference*,void**,IID&amp;)"></a> <dt> o <b>InsertPredecessor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertPredecessor</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProcessOccSuccessor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcessRefPredecessor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiContextForOutputOcc</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oppProcessOcc</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPLMNavOccurrence</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Inserts an existing process reference as a predecessor of a given process occurrence.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOccSuccessor</tt>
   <dd>   The process occurrence that will be the successor
 </dd>
    <dt><tt> ipiProcessRefPredecessor</tt>
   <dd>   The process reference that will be the predecessor
 </dd>
    <dt><tt> ipiContextForOutputOcc</tt>
   <dd>   The context (process reference) for the resulting occurrence
 </dd>
    <dt><tt> oppProcessOcc</tt>
   <dd>   The created process occurrence
 </dd>
    <dt><tt> iIID</tt>
   <dd>   The IID of the interface representing the created process occurrence
   <br><b>Legal values</b>: Any interface implemented on a process occurrence (IID_CATIPLMNavOccurrence by default)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_NOINTERFACE</code> <dd>if the requested interface is not implemented on the resulting object
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="RemoveAllGroups"></a><a name="RemoveAllGroups(CATIPLMNavReference*)"></a> <dt> o <b>RemoveAllGroups</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveAllGroups</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcess</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Removes all groups and sub-groups present under the given process reference.  
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcess</tt>
   <dd>   the process reference
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>method successfully ended
   <dt><code>E_FAIL</code>        <dd>method failed
   </dl>
</dl>
</dl>
<a name="RemoveGroup"></a><a name="RemoveGroup(CATIPLMNavReference*,DELIPPRProcessGroup*)"></a> <dt> o <b>RemoveGroup</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveGroup</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcess</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELIPPRProcessGroup','DELIPPRProcessGroup*')</script> <td><tt>ipiGroup</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Removes a group of process instance under the given process reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcess</tt>
   <dd>   the process reference
 </dd>
    <dt><tt> ipiGroup</tt>
   <dd>   the group to remove
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>method successfully ended
   <dt><code>E_INVALIDARG</code>  <dd>invalid argument
   <dt><code>E_FAIL</code>        <dd>method failed
   </dl>
</dl>
</dl>
<a name="RemovePredecessor"></a><a name="RemovePredecessor(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"></a> <dt> o <b>RemovePredecessor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemovePredecessor</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProcessOccSuccessor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProcessOccPredecessor</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a process reference as a predecessor of a given process occurrence.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOccSuccessor</tt>
   <dd>   The process occurrence that will be the successor
 </dd>
    <dt><tt> ipiProcessOccPredecessor</tt>
   <dd>   The predecessor process occurence that needs to be removed 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_NOINTERFACE</code> <dd>if the requested interface is not implemented on the resulting object
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="RemoveScope"></a><a name="RemoveScope(CATIPLMNavReference*)"></a> <dt> o <b>RemoveScope</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveScope</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavReference','CATIPLMNavReference*')</script> <td><tt>ipiProcessReference</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a scope link between a process reference and associated product reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessReference</tt>
   <dd>   The process reference
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<a name="UnAssignProduct"></a><a name="UnAssignProduct(CATIPLMNavOccurrence*,CATIPLMNavOccurrence*)"></a> <dt> o <b>UnAssignProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnAssignProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProcessOcc</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavOccurrence','CATIPLMNavOccurrence*')</script> <td><tt>ipiProductOcc</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes an implement link between a process occurrence and a product occurrence.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiProcessOcc</tt>
   <dd>   The process occurrence
 </dd>
    <dt><tt> ipiProductOcc</tt>
   <dd>   The product occurrence
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
   <dt><code>S_OK</code>          <dd>if the method succeeds
   <dt><code>E_INVALIDARG</code>  <dd>for an invalid argument
   <dt><code>E_FAIL</code>        <dd>if the method fails for any other reason
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>DELIPPRProcessAuth.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DELPPRProcessItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

