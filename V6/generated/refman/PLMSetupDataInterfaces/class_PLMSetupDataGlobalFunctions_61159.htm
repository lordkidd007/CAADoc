<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>PLMSetupDataInterfaces Class PLMSetupDataGlobalFunctions</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../PLMSetupDataInterfaces.htm" href="../PLMSetupDataInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "PLMSetupDataInterfaces";	}
		function getCurrentObjectName() { 
 	return "PLMSetupDataGlobalFunctions"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>PLMSetupDataInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> PLMSetupDataGlobalFunctions</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_PLMSetupDataGlobalFunctions_61159','PLMSetupDataGlobalFunctions','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>PLMSetupDataGlobalFunctions</b>
</p>
<p>
<b><i> Class used to provide global services for the Set Up Data management.</i></b><br>

 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('PLMISetupDataFinder PLMIBusinessRuleExecutionManager','','PLMISetupDataFinder PLMIBusinessRuleExecutionManager') </script>
</dl>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetBusinessRuleExecutionManager()"><b>GetBusinessRuleExecutionManager</b></a>()
<dd>  Provides a handler to a business rule execution manager
 <dt> o 
    <a href="#GetPLMSetupDataFinder()"><b>GetPLMSetupDataFinder</b></a>()
<dd>  Creates a new PLMISetupDataFinder instance.
 <dt> o 
    <a href="#GetPLMSetupDataFinder(CATUnicodeString&amp;)"><b>GetPLMSetupDataFinder</b></a>(CATUnicodeString&amp;)
<dd>  Retrieves the PLMISetupDataFinder instance whose identifier is equal to the given one.
 <dt> o 
    <a href="#RemovePLMSetupDataFinder(CATUnicodeString&amp;)"><b>RemovePLMSetupDataFinder</b></a>(CATUnicodeString&amp;)
<dd>  Removes the PLMISetupDataFinder instance whose identifier is equal to the given one.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetBusinessRuleExecutionManager"></a><a name="GetBusinessRuleExecutionManager()"></a> <dt> o <b>GetBusinessRuleExecutionManager</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('PLMIBusinessRuleExecutionManager','PLMIBusinessRuleExecutionManager_var')</script>  <b>GetBusinessRuleExecutionManager</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Provides a handler to a business rule execution manager
</dl>
<a name="GetPLMSetupDataFinder"></a><a name="GetPLMSetupDataFinder()"></a> <dt> o <b>GetPLMSetupDataFinder</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('PLMISetupDataFinder','PLMISetupDataFinder_var')</script>  <b>GetPLMSetupDataFinder</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Creates a new PLMISetupDataFinder instance.
 Note that the life cycle of the PLM resources loaded with the returned 
 Setup Data Finder instance is linked to the life cycle of this finder.
 With this method, the returned Setup Data Finder instance and PLM resources
 loaded via this finder will be kept in the memory until the V6 session is deleted.
 Use the methods GetSetupDataFinder(iFinderId) and RemoveSetupDataFinder(iFinderId)
 instead of this method if you want to easily manage this life cycle.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the set up data finder instance created
</dl>
</dl>
<a name="GetPLMSetupDataFinder"></a><a name="GetPLMSetupDataFinder(CATUnicodeString&amp;)"></a> <dt> o <b>GetPLMSetupDataFinder</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('PLMISetupDataFinder','PLMISetupDataFinder_var')</script>  <b>GetPLMSetupDataFinder</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFinderId</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the PLMISetupDataFinder instance whose identifier is equal to the given one.
 If there is no existing PLMISetupDataFinder instance with this identifer, 
 this method creates a new one and keep it internally.
 You must use the method RemoveSetupDataFinder with the same identifier to remove
 this instance once you have finished with its corresponding loaded PLM resources.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFinderId</tt>
   <dd> Name of the instance to retrieve
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the set up data finder instance (NULL_var if not found)
</dl>
</dl>
<a name="RemovePLMSetupDataFinder"></a><a name="RemovePLMSetupDataFinder(CATUnicodeString&amp;)"></a> <dt> o <b>RemovePLMSetupDataFinder</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemovePLMSetupDataFinder</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFinderId</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the PLMISetupDataFinder instance whose identifier is equal to the given one.
 This will remove all the resource tables managed by this Setup Data Finder instance,
 and then all the PLM resources loaded from these tables.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFinderId</tt>
   <dd> Name of the instance to remove
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  standard HRESULT
</dl>
</dl>
<hr>
 This object is included in the file: <b>PLMSetupDataGlobalFunctions.h</b><br>
If needed, your Imakefile.mk should include the module: <b>PLMSetupDataInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

