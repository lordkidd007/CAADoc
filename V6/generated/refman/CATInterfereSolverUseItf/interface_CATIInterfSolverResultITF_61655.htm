<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATInterfereSolverUseItf Interface CATIInterfSolverResultITF</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATInterfereSolverUseItf.htm" href="../CATInterfereSolverUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATInterfereSolverUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIInterfSolverResultITF"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATInterfereSolverUseItf Interface CATIInterfSolverResultITF</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIInterfSolverResultITF_61655','CATIInterfSolverResultITF','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIInterfSolverResultITF</b>
</p>
<p>
<b><i> This interface is implemented by CATInterfereSolverUseImpl.</i></b><br>

 <br><b>Role</b>: Contains API to manage Interference Solver.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAccuracy(double&amp;,double&amp;)"><b>GetAccuracy</b></a>(double&amp;,double&amp;)
<dd>  Get accuracy of interference.
 <dt> o 
    <a href="#GetClearanceValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"><b>GetClearanceValues</b></a>(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)
<dd>  Get clearance values of interference (in case of clearance result).
 <dt> o 
    <a href="#GetContactValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"><b>GetContactValues</b></a>(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)
<dd>  Get contact values of interference (in case of contact result).
 <dt> o 
    <a href="#GetFirstClearance(double**,int**,int&amp;)"><b>GetFirstClearance</b></a>(double**,int**,int&amp;)
<dd>  Get first surface (polyhedral) of object 1 of interference (in case of clearance result).
 <dt> o 
    <a href="#GetFirstContact(double**,int**,int&amp;)"><b>GetFirstContact</b></a>(double**,int**,int&amp;)
<dd>  Get first surface (polyhedral) of object 1 of interference (in case of contact result).
 <dt> o 
    <a href="#GetIntersectionCurves(double**,int**,int&amp;)"><b>GetIntersectionCurves</b></a>(double**,int**,int&amp;)
<dd>  Get intersection curve of interference (in case of clash result).
 <dt> o 
    <a href="#GetObjectsInInterference(int&amp;,int&amp;)"><b>GetObjectsInInterference</b></a>(int&amp;,int&amp;)
<dd>  Get Id Objects of interference.
 <dt> o 
    <a href="#GetPenetrationVector(CATMathPoint&amp;,CATMathPoint&amp;)"><b>GetPenetrationVector</b></a>(CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Get penetration vector of interference (in case of clash result).
 <dt> o 
    <a href="#GetSecondClearance(double**,int**,int&amp;)"><b>GetSecondClearance</b></a>(double**,int**,int&amp;)
<dd>  Get second surface (polyhedral) of object 2 of interference (in case of clearance result).
 <dt> o 
    <a href="#GetSecondContact(double**,int**,int&amp;)"><b>GetSecondContact</b></a>(double**,int**,int&amp;)
<dd>  Get second surface (polyhedral) of object 2 of interference (in case of contact result).
 <dt> o 
    <a href="#GetTypeStatus(CATIInterfSolverResultITF::InterfSolverItfType&amp;)"><b>GetTypeStatus</b></a>(CATIInterfSolverResultITF::InterfSolverItfType&amp;)
<dd>  Get type status of interference.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#InterfSolverItfType"><b>InterfSolverItfType</b></a>
<dd>  type status of interference.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAccuracy"></a><a name="GetAccuracy(double&amp;,double&amp;)"></a> <dt> o <b>GetAccuracy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAccuracy</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAccuracy1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAccuracy2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get accuracy of interference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAccuracy1</tt>
   <dd> [out] The 3D accuracy of the first tesselation object of interference. 
 </dd>
    <dt><tt> oAccuracy2</tt>
   <dd> [out] The 3D accuracy of the second tesselation object of interference. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetClearanceValues"></a><a name="GetClearanceValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>GetClearanceValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClearanceValues</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPt1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPt2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMinimumDistance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get clearance values of interference (in case of clearance result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPt1</tt>
   <dd> [out] The first point realized by the minimum distance of clearance. 
 </dd>
    <dt><tt> oPt2</tt>
   <dd> [out] The second point realized by the minimum distance of clearance. 
 </dd>
    <dt><tt> oMinimumDistance</tt>
   <dd> [out] The minimum distance realized by the clearance. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetContactValues"></a><a name="GetContactValues(CATMathPoint&amp;,CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>GetContactValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetContactValues</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPt1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPt2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMinimumDistance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get contact values of interference (in case of contact result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPt1</tt>
   <dd> [out] The first point realized by the minimum distance of contact. 
 </dd>
    <dt><tt> oPt2</tt>
   <dd> [out] The second point realized by the minimum distance of contact. 
 </dd>
    <dt><tt> oMinimumDistance</tt>
   <dd> [out] The minimum distance realized by the contact. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetFirstClearance"></a><a name="GetFirstClearance(double**,int**,int&amp;)"></a> <dt> o <b>GetFirstClearance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFirstClearance</b>(<td> const <script type="text/javascript"> activateLink('double','double**')</script> <td><tt>opVertices</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int**')</script> <td><tt>opTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbTriangles</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get first surface (polyhedral) of object 1 of interference (in case of clearance result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opVertices</tt>
   <dd> [out] The vertex coordinates of triangles : XYZXYZXYZ.... 
 </dd>
    <dt><tt> opTriangleIndices</tt>
   <dd> [out] The indices of triangles. 
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd> [out] The number of triangles. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetFirstContact"></a><a name="GetFirstContact(double**,int**,int&amp;)"></a> <dt> o <b>GetFirstContact</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFirstContact</b>(<td> const <script type="text/javascript"> activateLink('double','double**')</script> <td><tt>opVertices</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int**')</script> <td><tt>opTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbTriangles</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get first surface (polyhedral) of object 1 of interference (in case of contact result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opVertices</tt>
   <dd> [out] The vertex coordinates of triangles : XYZXYZXYZ.... 
 </dd>
    <dt><tt> opTriangleIndices</tt>
   <dd> [out] The indices of triangles <j> : opTriangleIndices[j],opTriangleIndices[j+1],opTriangleIndices[j+2], with 0<=j<3*oNbTriangle.
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd> [out] The number of triangles. 

 Details:<br>

    <pre>

                 --------------------       
                | *opTriangleIndices |
                 --------------------
                |       i00          |   }
                |       i01          |   } triangle 0 defined by index i00, i01 and i02
                |       i02          |   }
                |        .           |
                |        .           |
                |       ij0          |   }
                |       ij1          |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2          |   }
                |        .           |
                |        .           |
                 --------------------

   </pre>
    For example, index <ij0> enables access to the triangle <j> with :<br>
    <br>
    vertex 1 : X = (*opVertices)[ij0], Y = (*opVertices)[ij0 + 1] and Z = (*opVertices)[ij0 + 2]<br>
    vertex 2 : X = (*opVertices)[ij1], Y = (*opVertices)[ij1 + 1] and Z = (*opVertices)[ij1 + 2]<br>
    vertex 3 : X = (*opVertices)[ij2], Y = (*opVertices)[ij2 + 1] and Z = (*opVertices)[ij2 + 2]<br>

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetIntersectionCurves"></a><a name="GetIntersectionCurves(double**,int**,int&amp;)"></a> <dt> o <b>GetIntersectionCurves</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetIntersectionCurves</b>(<td> const <script type="text/javascript"> activateLink('double','double**')</script> <td><tt>opVertexPolyline</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int**')</script> <td><tt>opNbVertexPolyline</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbPolylines</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get intersection curve of interference (in case of clash result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opVertexPolyline</tt>
   <dd> [out] The vertex coordinates of polyline : XYZXYZXYZ.... 
 </dd>
    <dt><tt> opNbVertexPolyline</tt>
   <dd> [out] The number opNbVertexPolyline[i] of vertex of each polyline <i> with 0 <= i < oNbPolylines. 
 </dd>
    <dt><tt> oNbPolylines</tt>
   <dd> [out] The number of polylines. 

 Details:<br>

    <pre>

      -------------------------------------      
     | *opVertexPolyline                   |   } array of size [opNbVertexPolyline[0]+...+opNbVertexPolyline[oNbPolylines-1]]
      -------------------------------------
     |  x [0]                              |   }
     |  y [1]                              |   } vertex 0 of polyline 0          }
     |  y [2]                              |   }                                 }   
     |  x [3]                              |   }                                 }
     |  y [4]                              |   } vertex 1 of polyline 0          }
     |  z [5]                              |   }                                 }
     |  x [6]                              |   }                                 } polyline 0 of size [opNbVertexPolyline[0]]
     |  y [7]                              |   } vertex 2 of polyline 0 and ...  }
     |  z [8]                              |   }                                 }
     |  .                                  |                                                          
     |  .                                  |                                                          
     |  x [3*opNbVertexPolyline[i-1]    ]  |   }                                 }
     |  y [3*opNbVertexPolyline[i-1] + 1]  |   } vertex 0 of polyline i          } polyline i of size [opNbVertexPolyline[i]]
     |  z [3*opNbVertexPolyline[i-1] + 2]  |   }                                 }
     |  x [3*opNbVertexPolyline[i-1] + 3]  |   }                                 )
     |  y [3*opNbVertexPolyline[i-1] + 4]  |   } vertex 1 of polyline i and ...  }
     |  z [3*opNbVertexPolyline[i-1] + 5]  |   }
     |  .                                  |
     |  .                                  |
      -------------------------------------

   </pre>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetObjectsInInterference"></a><a name="GetObjectsInInterference(int&amp;,int&amp;)"></a> <dt> o <b>GetObjectsInInterference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetObjectsInInterference</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oId1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oId2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get Id Objects of interference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oId1</tt>
   <dd> [out] The identifier of the first object of interference. 
 </dd>
    <dt><tt> oId2</tt>
   <dd> [out] The identifier of the second object of interference. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetPenetrationVector"></a><a name="GetPenetrationVector(CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>GetPenetrationVector</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPenetrationVector</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPtStart</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPtEnd</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get penetration vector of interference (in case of clash result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtStart</tt>
   <dd> [out] The start point of penetration vector. 
 </dd>
    <dt><tt> oPtEnd</tt>
   <dd> [out] The end point of penetration vector. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetSecondClearance"></a><a name="GetSecondClearance(double**,int**,int&amp;)"></a> <dt> o <b>GetSecondClearance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSecondClearance</b>(<td> const <script type="text/javascript"> activateLink('double','double**')</script> <td><tt>opVertices</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int**')</script> <td><tt>opTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbTriangles</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get second surface (polyhedral) of object 2 of interference (in case of clearance result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opVertices</tt>
   <dd> [out] The vertex coordinates of triangles : XYZXYZXYZ.... 
 </dd>
    <dt><tt> opTriangleIndices</tt>
   <dd> [out] The indices of triangles. 
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd> [out] The number of triangles. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetSecondContact"></a><a name="GetSecondContact(double**,int**,int&amp;)"></a> <dt> o <b>GetSecondContact</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSecondContact</b>(<td> const <script type="text/javascript"> activateLink('double','double**')</script> <td><tt>opVertices</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int**')</script> <td><tt>opTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbTriangles</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get second surface (polyhedral) of object 2 of interference (in case of contact result).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opVertices</tt>
   <dd> [out] The vertex coordinates of triangles : XYZXYZXYZ.... 
 </dd>
    <dt><tt> opTriangleIndices</tt>
   <dd> [out] The indices of triangles. 
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd> [out] The number of triangles. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
<a name="GetTypeStatus"></a><a name="GetTypeStatus(CATIInterfSolverResultITF::InterfSolverItfType&amp;)"></a> <dt> o <b>GetTypeStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetTypeStatus</b>(<td><script type="text/javascript"> activateLink('CATIInterfSolverResultITF::InterfSolverItfType','CATIInterfSolverResultITF::InterfSolverItfType&amp;')</script> <td><tt>oItfType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get type status of interference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oItfType</tt>
   <dd> [out] The type status result of interference defined by </dd>
<script type="text/javascript"> activateLinkAnchor('InterfSolverItfType','','InterfSolverItfType') </script> enum.  
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>   <dd> If the operation is successful.
   <dt><tt>E_FAIL</tt> <dd> If the operation is failed.
   </dl>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="InterfSolverItfType"> <dt> o <b>InterfSolverItfType</b>
<dl>
  <dd>
<pre>
enum <b>InterfSolverItfType</b> {
  ITFSolverItfTypeNONE,
  ITFSolverItfTypeCLASH,
  ITFSolverItfTypeCONTACT,
  ITFSolverItfTypeCLEARANCE
}
</pre>
 type status of interference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>   ITFSolverItfTypeNONE</tt>
   <dd>     none result.
   </dd>
    <dt><tt>   ITFSolverItfTypeCLASH</tt>
   <dd>    clash result.
   </dd>
    <dt><tt>   ITFSolverItfTypeCONTACT</tt>
   <dd>    contact result.
   </dd>
    <dt><tt>   ITFSolverItfTypeCLEARANCE</tt>
   <dd>    clearance result.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIInterfSolverResultITF.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATInterfereSolverUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

