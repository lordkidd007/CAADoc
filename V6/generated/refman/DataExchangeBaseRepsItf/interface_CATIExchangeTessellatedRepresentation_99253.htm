<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DataExchangeBaseRepsItf Interface CATIExchangeTessellatedRepresentation</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DataExchangeBaseRepsItf.htm" href="../DataExchangeBaseRepsItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DataExchangeBaseRepsItf";	}
		function getCurrentObjectName() { 
 	return "CATIExchangeTessellatedRepresentation"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DataExchangeBaseRepsItf Interface CATIExchangeTessellatedRepresentation</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIExchangeTessellatedRepresentation_99253','CATIExchangeTessellatedRepresentation','0');</script>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>CATIExchangeTessellatedRepresentation</b>
</p>
<p>
<b><i> Interface to exchange tessellated representations (surfaces and curves).</i></b><br>

 <b>Role</b>: This interface provides a view on a XCAD document as a tessellated representation.
 <br>Available from CATIA V5R15.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetChild(void*,unsigned int,void*&amp;)"><b>GetChild</b></a>(void*,unsigned int,void*&amp;)
<dd>  Retrieves the node's ID from its index.
 <dt> o 
    <a href="#GetChildCount(void*,unsigned int*)"><b>GetChildCount</b></a>(void*,unsigned int*)
<dd>  Retrieves the number of children of the current node.
 <dt> o 
    <a href="#GetCircleData(void*,double[3],double[3],double*)"><b>GetCircleData</b></a>(void*,double[3],double[3],double*)
<dd>  Retrieves the 3D circle arc's parameters.
 <dt> o 
    <a href="#GetConeData(void*,double[3],double[3],double*)"><b>GetConeData</b></a>(void*,double[3],double[3],double*)
<dd>  Retrieves the cone's parameters.
 <dt> o 
    <a href="#GetCoordinateSystem(void*,double[3],double[3],double[3])"><b>GetCoordinateSystem</b></a>(void*,double[3],double[3],double[3])
<dd>  Retrieves the coordinates system.
 <dt> o 
    <a href="#GetCylinderData(void*,double[3],double[3],double*)"><b>GetCylinderData</b></a>(void*,double[3],double[3],double*)
<dd>  Retrieves the cylinder's parameters.
 <dt> o 
    <a href="#GetEdgeData(void*,void**,void**,float**,unsigned int*,int**)"><b>GetEdgeData</b></a>(void*,void**,void**,float**,unsigned int*,int**)
<dd>  Retrieves the edge's parameters.
 <dt> o 
    <a href="#GetFaceData(void*,int*,float**,int*,float**,int*,int**,int*,int**,int**,int*,int**,int**)"><b>GetFaceData</b></a>(void*,int*,float**,int*,float**,int*,int**,int*,int**,int**,int*,int**,int**)
<dd>  Retrieves the face's parameters.
 <dt> o 
    <a href="#GetGPType(void*,KindOfGP&amp;)"><b>GetGPType</b></a>(void*,KindOfGP&amp;)
<dd>  Retrieves the node's GP type.
 <dt> o 
    <a href="#GetNodeBoundingSphere(void*,float[3],float*)"><b>GetNodeBoundingSphere</b></a>(void*,float[3],float*)
<dd>  Retrieves the bounding sphere of a node.
 <dt> o 
    <a href="#GetNodeColor(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)"><b>GetNodeColor</b></a>(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)
<dd>  Retrieves the color of a node.
 <dt> o 
    <a href="#GetNodeOrientationMatrix(void*,float[3][3],float[3])"><b>GetNodeOrientationMatrix</b></a>(void*,float[3][3],float[3])
<dd>  Retrieves the orientation matrix of the node.
 <dt> o 
    <a href="#GetNodeType(void*,KindOfNode&amp;)"><b>GetNodeType</b></a>(void*,KindOfNode&amp;)
<dd>  Retrieves the node's type.
 <dt> o 
    <a href="#GetNodeUID(void*,CATUnicodeString&amp;)"><b>GetNodeUID</b></a>(void*,CATUnicodeString&amp;)
<dd>  Retrieves the node's UID.
 <dt> o 
    <a href="#GetPlaneData(void*,double[3],double[3])"><b>GetPlaneData</b></a>(void*,double[3],double[3])
<dd>  Retrieves the plane's parameters.
 <dt> o 
    <a href="#GetPointData(void*,float**,int*)"><b>GetPointData</b></a>(void*,float**,int*)
<dd>  Retrieves the point's parameters.
 <dt> o 
    <a href="#GetPolyLineData(void*,float**,int*,int*)"><b>GetPolyLineData</b></a>(void*,float**,int*,int*)
<dd>  Retrieves the polyline's parameters.
 <dt> o 
    <a href="#GetRootNode(unsigned int,void*&amp;)"><b>GetRootNode</b></a>(unsigned int,void*&amp;)
<dd>  Retrieves the root node's ID from its index.
 <dt> o 
    <a href="#GetRootNodesCount(unsigned int*)"><b>GetRootNodesCount</b></a>(unsigned int*)
<dd>  Retrieves the root nodes' number.
 <dt> o 
    <a href="#GetSAG(void*,float*,float*,float*)"><b>GetSAG</b></a>(void*,float*,float*,float*)
<dd>  Retrieves the tessellation options.
 <dt> o 
    <a href="#GetSphereData(void*,double[3],double*)"><b>GetSphereData</b></a>(void*,double[3],double*)
<dd>  Retrieves the sphere's parameters.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetChild"></a><a name="GetChild(void*,unsigned int,void*&amp;)"></a> <dt> o <b>GetChild</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetChild</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iChildIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*&amp;')</script> <td><tt>oChildNodeID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's ID from its index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> iChildIndex</tt>
   <dd>				the child's index from 0 to children number - 1.
 </dd>
    <dt><tt> oChildNodeID</tt>
   <dd>				the ID of the child.</dd>
</dl>
</dl>
</dl>
<a name="GetChildCount"></a><a name="GetChildCount(void*,unsigned int*)"></a> <dt> o <b>GetChildCount</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetChildCount</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oNodeCount</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the number of children of the current node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNodeCount</tt>
   <dd>				the number of children nodes.</dd>
</dl>
</dl>
</dl>
<a name="GetCircleData"></a><a name="GetCircleData(void*,double[3],double[3],double*)"></a> <dt> o <b>GetCircleData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCircleData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oCenterPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oNormalVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 3D circle arc's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oCenterPoint</tt>
   <dd>				the center of the circle.
 </dd>
    <dt><tt> oNormalVector</tt>
   <dd>				the normal to the circle plan, this vector is normalized.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>				the circle radius.</dd>
</dl>
</dl>
</dl>
<a name="GetConeData"></a><a name="GetConeData(void*,double[3],double[3],double*)"></a> <dt> o <b>GetConeData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetConeData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oAxisVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oHalfAngle</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the cone's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oBasePoint</tt>
   <dd>				the apex point of the cone.
 </dd>
    <dt><tt> oAxisVector</tt>
   <dd>				the vector defining the axis of the cone. Its length is the length of the cone.
 </dd>
    <dt><tt> oHalfAngle</tt>
   <dd>				the acute angle subtended between the axis and a generator of the cone ( 0 < angle < PI/2 ).</dd>
</dl>
</dl>
</dl>
<a name="GetCoordinateSystem"></a><a name="GetCoordinateSystem(void*,double[3],double[3],double[3])"></a> <dt> o <b>GetCoordinateSystem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCoordinateSystem</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oOriginPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oFirstVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oSecondVector</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the coordinates system.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oOriginPoint</tt>
   <dd>				the origin of the coordinate system.
 </dd>
    <dt><tt> oFirstVector</tt>
   <dd>				the first vector which defines the system.
 </dd>
    <dt><tt> oSecondVector</tt>
   <dd>				the second vector which defines the system.</dd>
</dl>
</dl>
</dl>
<a name="GetCylinderData"></a><a name="GetCylinderData(void*,double[3],double[3],double*)"></a> <dt> o <b>GetCylinderData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCylinderData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oAxisVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the cylinder's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oBasePoint</tt>
   <dd>				the center of the cylinder's base.
 </dd>
    <dt><tt> oAxisVector</tt>
   <dd>				the vector defining the axis of the cylinder. Its length is the length of the cylinder.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>				the radius of the cylinder's base circle.</dd>
</dl>
</dl>
</dl>
<a name="GetEdgeData"></a><a name="GetEdgeData(void*,void**,void**,float**,unsigned int*,int**)"></a> <dt> o <b>GetEdgeData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEdgeData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oFace1Node</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oFace2Node</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oFace1Vertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oVerticesNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oVerticesIndices</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the edge's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oFace1Node</tt>
   <dd>				the first face the edge belongs to. This face shares vertices informations with the edge.
 </dd>
    <dt><tt> oFace2Node</tt>
   <dd>				the second face the edge belongs to. This face can be set to NULL if doesn't exist.
 </dd>
    <dt><tt> oFace1Vertices</tt>
   <dd>				the first face vertices coordinates array: XYZXYZXYZ...
				***sizeOf GetEdgeData oFace1Vertices : 3*oVerticesNumber
 </dd>
    <dt><tt> oVerticesNumber</tt>
   <dd>				the number of vertices in the edge.
 </dd>
    <dt><tt> oVerticesIndices</tt>
   <dd>				edge vertices indices array, taken from the first face.
				This means that these indices allow to access vertices coordinates only through first face data.
				***sizeOf GetEdgeData oVerticesIndices : oVerticesNumber</dd>
</dl>
</dl>
</dl>
<a name="GetFaceData"></a><a name="GetFaceData(void*,int*,float**,int*,float**,int*,int**,int*,int**,int**,int*,int**,int**)"></a> <dt> o <b>GetFaceData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFaceData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oSingleTrianglesNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oSingleTrianglesIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oStripTrianglesNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oStripTrianglesIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerStripTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oFanTrianglesNumber</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oFanTrianglesIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerFanTriangle</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the face's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oVerticesNumber</tt>
   <dd>				the vertices number.
				If information on vertices is shared with another element, returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>				an array made of face vertices coordinates: XYZXYZXYZ...
				Its size is equal to three times the face vertices number.
				***sizeOf GetFaceData oVertices : 3*oVerticesNumber
 </dd>
    <dt><tt> oNormalsNumber</tt>
   <dd>				the number of normals.
				If information on normals is shared with another element, returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oNormals</tt>
   <dd>				an array made of normals coordinates. It is organized as <tt>oVertices</tt> : one vertex has exactly
				one normal at the same field entry.
				***sizeOf GetFaceData oNormals : 3*oNormalsNumber
 </dd>
    <dt><tt> oSingleTrianglesNumber</tt>
   <dd>				the number of single triangles in the face. 
 </dd>
    <dt><tt> oSingleTrianglesIndices</tt>
   <dd>				the array used to store the single triangles vertices. Each of its field represents
				a vertex index, in the <tt>oVertices</tt> array.
				As,  we find, in the <tt>*oVertices</tt> array, the XYZ coordinates for each
				vertex, the indices used to designate the vertices are multiples of three.
				***sizeOf GetFaceData oSingleTrianglesIndices : 3*oSingleTrianglesNumber
 </dd>
    <dt><tt> oStripTrianglesNumber</tt>
   <dd>				the number of face triangles strips.
 </dd>
    <dt><tt> oStripTrianglesIndices</tt>
   <dd>				the array used to store the face triangles strips vertices. Each field contains a
				vertex index, belonging to one of the strips, in the oVertices array.  As, we find, in the
				<tt>oVertices</tt> array, the XYZ coordinates for each
				vertex, the indices used to designate the vertices are multiples of three.
				***sizeOf GetFaceData oStripTrianglesIndices : ( sizeOf oNbVertexPerStripTriangle : oStripTrianglesNumber )
 </dd>
    <dt><tt> oNbVertexPerStripTriangle</tt>
   <dd>				an array containing the number of vertices for each face triangles strip.
				The size of this array is equal to <tt>*oStripTrianglesNumber</tt>. For example, the first strip
				is made with <tt>*oNbVertexPerStripTriangle[0]</tt> vertices.
				***sizeOf GetFaceData oNbVertexPerStripTriangle : oStripTrianglesNumber
 </dd>
    <dt><tt> oFanTrianglesNumber</tt>
   <dd>				the number of face triangles fans.
 </dd>
    <dt><tt> oFanTrianglesIndices</tt>
   <dd>				the array used to store the face triangles fans vertices. Each field contains a
				vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
				<tt>oVertices</tt> array, the XYZ coordinates for each
				vertex, the indices used to designate the vertices are multiples of three.
				***sizeOf GetFaceData oFanTrianglesIndices : ( sizeOf oNbVertexPerFanTriangle : oFanTrianglesNumber )
 </dd>
    <dt><tt> oNbVertexPerFanTriangle</tt>
   <dd>				the array containing the number of vertices for each face triangles fan.
				The size of this array is equal to <tt>*oFanTrianglesNumber</tt>. For example, the first fan
				is made with <tt>*oNbVertexPerFanTriangle[0]</tt> vertices.
				***sizeOf GetFaceData oNbVertexPerFanTriangle : oFanTrianglesNumber</dd>
</dl>
</dl>
</dl>
<a name="GetGPType"></a><a name="GetGPType(void*,KindOfGP&amp;)"></a> <dt> o <b>GetGPType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGPType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('KindOfGP','KindOfGP&amp;')</script> <td><tt>oGPType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's GP type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oGPType</tt>
   <dd>				the GP's type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node isn't a GP, returns S_FALSE.
</dl>
</dl>
<a name="GetNodeBoundingSphere"></a><a name="GetNodeBoundingSphere(void*,float[3],float*)"></a> <dt> o <b>GetNodeBoundingSphere</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeBoundingSphere</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oCenterPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the bounding sphere of a node.
 This sphere represents the smallest sphere containing the object under the node it's linked to.
 This information is used at the rendering time to know if a given element is visible on the screen
 and needs to be drawn or not.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oCenterPoint</tt>
   <dd>				the center of the sphere.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>				the radius of the sphere.</dd>
</dl>
</dl>
</dl>
<a name="GetNodeColor"></a><a name="GetNodeColor(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetNodeColor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeColor</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oAlpha</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the color of a node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oRed</tt>
   <dd>				the red component.
				<b>Legal values</b>: <tt>oRed</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oGreen</tt>
   <dd>				the green component.
				<b>Legal values</b>: <tt>oGreen</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oBlue</tt>
   <dd>				the blue component.
				<b>Legal values</b>: <tt>oBlue</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oAlpha</tt>
   <dd>				the alpha component.
				<b>Legal values</b>: <tt>oAlpha</tt> ranges from 0 to 255.</dd>
</dl>
</dl>
</dl>
<a name="GetNodeOrientationMatrix"></a><a name="GetNodeOrientationMatrix(void*,float[3][3],float[3])"></a> <dt> o <b>GetNodeOrientationMatrix</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeOrientationMatrix</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3][3','float[3][3]')</script> <td><tt>oRotationMatrix</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oTranslationVector</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the orientation matrix of the node.
 (in relation with its immediate father)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oRotationMatrix</tt>
   <dd>				the rotation component:
								oRotationMatrix[0][x] : U vector
								oRotationMatrix[1][x] : V vector
								oRotationMatrix[2][x] : W vector
 </dd>
    <dt><tt> oTranslationVector</tt>
   <dd>				the translation component.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node has no orientation matrix, returns S_FALSE.
</dl>
</dl>
<a name="GetNodeType"></a><a name="GetNodeType(void*,KindOfNode&amp;)"></a> <dt> o <b>GetNodeType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('KindOfNode','KindOfNode&amp;')</script> <td><tt>oNodeType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNodeType</tt>
   <dd>				the node's type.</dd>
</dl>
</dl>
</dl>
<a name="GetNodeUID"></a><a name="GetNodeUID(void*,CATUnicodeString&amp;)"></a> <dt> o <b>GetNodeUID</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeUID</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oNodeUID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's UID.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNodeUID</tt>
   <dd>				the node's UID.</dd>
</dl>
</dl>
</dl>
<a name="GetPlaneData"></a><a name="GetPlaneData(void*,double[3],double[3])"></a> <dt> o <b>GetPlaneData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPlaneData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oNormalVector</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the plane's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oBasePoint</tt>
   <dd>				a point on the plane.
 </dd>
    <dt><tt> oNormalVector</tt>
   <dd>				an unit vector perpendicular to the plane.</dd>
</dl>
</dl>
</dl>
<a name="GetPointData"></a><a name="GetPointData(void*,float**,int*)"></a> <dt> o <b>GetPointData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPointData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoints</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the point's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oPoints</tt>
   <dd>				the points coordinates array.
				Array of points coordinates: XYZXYZXYZ...
				Its size is equal to three times the number of points.
				***sizeOf GetPointData oPoints : 3*oNbPoints
 </dd>
    <dt><tt> oNbPoints</tt>
   <dd>				Retrieves the number of points.</dd>
</dl>
</dl>
</dl>
<a name="GetPolyLineData"></a><a name="GetPolyLineData(void*,float**,int*,int*)"></a> <dt> o <b>GetPolyLineData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPolyLineData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the polyline's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oPoints</tt>
   <dd>				the points coordinates array.
				Array of points coordinates: XYZXYZXYZ...
				Its size is equal to three times the number of points.
				***sizeOf GetPolyLineData oPoints : 3*oNbPoints
 </dd>
    <dt><tt> oNbPoints</tt>
   <dd>				Retrieves the number of points.
 </dd>
    <dt><tt> oLineType</tt>
   <dd>				Retrieves the line type.
				<br><b>Legal values</b>:
				<dl>
				<dt>LINES</dt>
				<dd>The number of points must be even. A line will be drawn
				between points 1 and 2, an other line will be drawn between
				points 3 and 4, ...</dd>
				<dt>LINE_STRIP</dt>
				<dd>The number of points can be either even or odd. A line will
				be drawn between points 1 and 2, then, an other line will be drawn
				between points 2 and 3, ...</dd>
				<dt>LINE_LOOP</dt>
				<dd>Same as <tt>LINE_LOOP</tt>, excepted that one more line will be
				drawn between the last and the first points.</dd>
				</dl></dd>
</dl>
</dl>
</dl>
<a name="GetRootNode"></a><a name="GetRootNode(unsigned int,void*&amp;)"></a> <dt> o <b>GetRootNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRootNode</b>(<td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRootIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*&amp;')</script> <td><tt>oRootNodeID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root node's ID from its index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRootIndex</tt>
   <dd>				the node's index from 0 to root nodes number - 1.
 </dd>
    <dt><tt> oRootNodeID</tt>
   <dd>				the root node's ID.</dd>
</dl>
</dl>
</dl>
<a name="GetRootNodesCount"></a><a name="GetRootNodesCount(unsigned int*)"></a> <dt> o <b>GetRootNodesCount</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRootNodesCount</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oNodeCount</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root nodes' number.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNodeCount</tt>
   <dd>				the number of root nodes.</dd>
</dl>
</dl>
</dl>
<a name="GetSAG"></a><a name="GetSAG(void*,float*,float*,float*)"></a> <dt> o <b>GetSAG</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSAG</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oSAGValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oAngleValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oStepValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tessellation options.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oSAGValue</tt>
   <dd>				the used SAG (geometric precision) for the tessellation.
 </dd>
    <dt><tt> oAngleValue</tt>
   <dd>				the max angle between consecutive normals for the tessellation.
 </dd>
    <dt><tt> oStepValue</tt>
   <dd>				the max size of edges for the tessellation.</dd>
</dl>
</dl>
</dl>
<a name="GetSphereData"></a><a name="GetSphereData(void*,double[3],double*)"></a> <dt> o <b>GetSphereData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSphereData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oCenterPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the sphere's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oCenterPoint</tt>
   <dd>				the center of the sphere.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>				the radius of the sphere.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIExchangeTessellatedRepresentation.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DataExchangeBaseRepsItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

