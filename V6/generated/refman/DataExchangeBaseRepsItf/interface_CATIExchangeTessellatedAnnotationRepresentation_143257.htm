<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DataExchangeBaseRepsItf Interface CATIExchangeTessellatedAnnotationRepresentation</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DataExchangeBaseRepsItf.htm" href="../DataExchangeBaseRepsItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DataExchangeBaseRepsItf";	}
		function getCurrentObjectName() { 
 	return "CATIExchangeTessellatedAnnotationRepresentation"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DataExchangeBaseRepsItf Interface CATIExchangeTessellatedAnnotationRepresentation</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIExchangeTessellatedAnnotationRepresentation_143257','CATIExchangeTessellatedAnnotationRepresentation','0');</script>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>CATIExchangeTessellatedAnnotationRepresentation</b>
</p>
<p>
<b><i> Interface to exchange Functional And Tolerancing Annotations (FTA) as tessellated representations.</i></b><br>

 <b>Role</b>: This interface provides a view on a XCAD document containing FTA as a tessellated representation.
 <br>Available from CATIA V5R19SP4 LA and V5R20 GA.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Get2DArcCircleData(void*,double**,double*,double*,double*,int*)"><b>Get2DArcCircleData</b></a>(void*,double**,double*,double*,double*,int*)
<dd>  Retrieves the 2D circle arc's parameters.
 <dt> o 
    <a href="#Get2DFaceData(void*,float**,int*,int*,int*,int**,int**,int**)"><b>Get2DFaceData</b></a>(void*,float**,int*,int*,int*,int**,int**,int**)
<dd>  Retrieves the 2D face's parameters.
 <dt> o 
    <a href="#Get2DGPType(void*,KindOf2DGP&amp;)"><b>Get2DGPType</b></a>(void*,KindOf2DGP&amp;)
<dd>  Retrieves the 2D node's GP type.
 <dt> o 
    <a href="#Get2DPolyLineData(void*,float**,int*,int*)"><b>Get2DPolyLineData</b></a>(void*,float**,int*,int*)
<dd>  Retrieves the 2D polyline's parameters.
 <dt> o 
    <a href="#Get2DPolygonData(void*,float**,int*,int**)"><b>Get2DPolygonData</b></a>(void*,float**,int*,int**)
<dd>  Retrieves the 2D polygon's parameters.
 <dt> o 
    <a href="#GetChild(void*,unsigned int,void*&amp;)"><b>GetChild</b></a>(void*,unsigned int,void*&amp;)
<dd>  Retrieves the node's ID from its index.
 <dt> o 
    <a href="#GetChildCount(void*,unsigned int*)"><b>GetChildCount</b></a>(void*,unsigned int*)
<dd>  Retrieves the number of children of the current node.
 <dt> o 
    <a href="#GetGeometricalIDList(int*,int*&amp;)"><b>GetGeometricalIDList</b></a>(int*,int*&amp;)
<dd>     Retrieves the geometrical entities (Face, edge, vertex, independent curve or point) on which an annotation is attached.
 <dt> o 
    <a href="#GetNodeAnnotationConstructionGeometry(void*,unsigned int&amp;,void**&amp;)"><b>GetNodeAnnotationConstructionGeometry</b></a>(void*,unsigned int&amp;,void**&amp;)
<dd>   GetNodeAnnotationConstructionGeometry

 <br><b>Role</b>: Retrieves the Construction geometry entities of the Annotations.
 <dt> o 
    <a href="#GetNodeAnnotationGroupAssociatedBodies(void*,unsigned int&amp;,void**&amp;)"><b>GetNodeAnnotationGroupAssociatedBodies</b></a>(void*,unsigned int&amp;,void**&amp;)
<dd>   GetNodeAnnotationGroupAssociatedBodies

 <br><b>Role</b>: Retrieves the bodies (geometric sets, .
 <dt> o 
    <a href="#GetNodeAnnotationGroupAssociatedCG(void*,unsigned int&amp;,void**&amp;)"><b>GetNodeAnnotationGroupAssociatedCG</b></a>(void*,unsigned int&amp;,void**&amp;)
<dd>   GetNodeAnnotationGroupAssociatedCG

 <br><b>Role</b>: Retrieves the CG (Construction geometry entities) 
 that are visually managed by this Group.
 <dt> o 
    <a href="#GetNodeAnnotationGroupAttributes(void*,void*&amp;,CATBoolean&amp;)"><b>GetNodeAnnotationGroupAttributes</b></a>(void*,void*&amp;,CATBoolean&amp;)
<dd>  
 <br><b>Role</b>: Retrieves the attributes for a Group node.
 <dt> o 
    <a href="#GetNodeAnnotationParallelToScreenState(void*,CATBoolean&amp;,CATBoolean&amp;)"><b>GetNodeAnnotationParallelToScreenState</b></a>(void*,CATBoolean&amp;,CATBoolean&amp;)
<dd>   <br><b>Role</b>: Retrieves the "Parallel To Screen" state for a node.
 <dt> o 
    <a href="#GetNodeAnnotationTolerance(void*,double&amp;)"><b>GetNodeAnnotationTolerance</b></a>(void*,double&amp;)
<dd>  Retrieves the node's tolerance value.
 <dt> o 
    <a href="#GetNodeAnnotationType(void*,CATString&amp;,CATString&amp;)"><b>GetNodeAnnotationType</b></a>(void*,CATString&amp;,CATString&amp;)
<dd>  Retrieves the node's Annotation type.
 <dt> o 
    <a href="#GetNodeAnnotationValidationString(void*,CATUnicodeString&amp;)"><b>GetNodeAnnotationValidationString</b></a>(void*,CATUnicodeString&amp;)
<dd>   Short role of the method.
 <dt> o 
    <a href="#GetNodeAssociatedAnnotation(void*,int*,void**&amp;)"><b>GetNodeAssociatedAnnotation</b></a>(void*,int*,void**&amp;)
<dd>  Retrieves the link to associated annotation of a node.
 <dt> o 
    <a href="#GetNodeCGCircleParameters(void*,double&amp;,double [3],double [3],double [3])"><b>GetNodeCGCircleParameters</b></a>(void*,double&amp;,double [3],double [3],double [3])
<dd>   GetNodeCGCircleParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Circle)

 
 <dt> o 
    <a href="#GetNodeCGCylinderParameters(void*,double [3],double&amp;,double [3],double [3])"><b>GetNodeCGCylinderParameters</b></a>(void*,double [3],double&amp;,double [3],double [3])
<dd>   GetNodeCGCylinderParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Cylinder)
 A cylinder will be obtained by the revolution of a line parallel to the given axis, 
  around the position point, at a distance given by the radius value of this point.
 <dt> o 
    <a href="#GetNodeCGLineParameters(void*,double [3],double [3])"><b>GetNodeCGLineParameters</b></a>(void*,double [3],double [3])
<dd>   GetNodeCGLineParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Line)

 
 <dt> o 
    <a href="#GetNodeCGPlaneParameters(void*,double [3],double [2][3],double[2][3],double&amp;)"><b>GetNodeCGPlaneParameters</b></a>(void*,double [3],double [2][3],double[2][3],double&amp;)
<dd>   GetNodeCGPlaneParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Plane)

 
 <dt> o 
    <a href="#GetNodeCGPointParameters(void*,double[3])"><b>GetNodeCGPointParameters</b></a>(void*,double[3])
<dd>   GetNodeCGPointParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Point)

 
 <dt> o 
    <a href="#GetNodeCGThreadComponents(void*,double [3],double&amp;,double [3],double [3],double [3],double [2][3],double[2][3],double&amp;,double [3],double [2][3],double[2][3],double&amp;)"><b>GetNodeCGThreadComponents</b></a>(void*,double [3],double&amp;,double [3],double [3],double [3],double [2][3],double[2][3],double&amp;,double [3],double [2][3],double[2][3],double&amp;)
<dd>   GetNodeCGThreadComponents

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Thread)
 A thread is defined by one cylinder (cf.
 <dt> o 
    <a href="#GetNodeCGThreadParameters(void*,double [3],double&amp;,double [3],double [3],double [3],double [3],double [3],double&amp;,double [3],double [3],double [3],double [3])"><b>GetNodeCGThreadParameters</b></a>(void*,double [3],double&amp;,double [3],double [3],double [3],double [3],double [3],double&amp;,double [3],double [3],double [3],double [3])
<dd>   GetNodeCGThreadParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Thread)
 A thread is represented by two parallel circle arcs, joined by two lines,
 with a third circle arc (internal), between both others (external : upper and lower).
 <dt> o 
    <a href="#GetNodeCGUID(void*,CATListOfInt&amp;)"><b>GetNodeCGUID</b></a>(void*,CATListOfInt&amp;)
<dd>   GetNodeCGUID

 <br><b>Role</b>: To get the UID of a Construction Geometry entity, from its NodeID.
 <dt> o 
    <a href="#GetNodeCameraAttributes(void*,CATUnicodeString&amp;,double&amp;,double&amp;)"><b>GetNodeCameraAttributes</b></a>(void*,CATUnicodeString&amp;,double&amp;,double&amp;)
<dd>  
 Retrieves the 3D camera attributes for a Group node.
 <dt> o 
    <a href="#GetNodeCameraParameters(void*,float[3],float[3],float[3],float[3])"><b>GetNodeCameraParameters</b></a>(void*,float[3],float[3],float[3],float[3])
<dd>  Retrieves the 3D viewpoint (camera) for a Group feature.
 <dt> o 
    <a href="#GetNodeColor(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)"><b>GetNodeColor</b></a>(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)
<dd>  Retrieves the color of a node.
 <dt> o 
    <a href="#GetNodeConstructionGeometryType(void*,CATUnicodeString&amp;)"><b>GetNodeConstructionGeometryType</b></a>(void*,CATUnicodeString&amp;)
<dd>   GetNodeConstructionGeometryNameAndType

 <br><b>Role</b>: Retrieves the Construction geometry entity Name and Type

 
 <dt> o 
    <a href="#GetNodeGPParallelToScreenOrigin(void*,float[3])"><b>GetNodeGPParallelToScreenOrigin</b></a>(void*,float[3])
<dd>   <br><b>Role</b>: Retrieves the "Parallel To Screen" origin for a GP node.
 <dt> o 
    <a href="#GetNodeGeometry(void*,int*,int*&amp;)"><b>GetNodeGeometry</b></a>(void*,int*,int*&amp;)
<dd>  Retrieves the link to geometry of a node.
 <dt> o 
    <a href="#GetNodeGeometryFullPath(void*,int&amp;,CATListOfCATUnicodeString*&amp;)"><b>GetNodeGeometryFullPath</b></a>(void*,int&amp;,CATListOfCATUnicodeString*&amp;)
<dd>   Retrieves the path of the link to geometry of a node.
 <dt> o 
    <a href="#GetNodeLineStyle(void*,unsigned short&amp;,unsigned short&amp;)"><b>GetNodeLineStyle</b></a>(void*,unsigned short&amp;,unsigned short&amp;)
<dd>   <br><b>Role</b>: Retrieves the line style characteristics for the current node
 
 <dt> o 
    <a href="#GetNodeOrientationMatrix(void*,float[2][2],float[2])"><b>GetNodeOrientationMatrix</b></a>(void*,float[2][2],float[2])
<dd>  Retrieves the 2D orientation matrix in the plane returned by GetNodePlane.
 <dt> o 
    <a href="#GetNodePlane(void*,float[3],float[3],float[3])"><b>GetNodePlane</b></a>(void*,float[3],float[3],float[3])
<dd>  Retrieves the 3D plane on a Node   
 defines the 3D plane in which all node 2D geometric definitions will be expressed.
 <dt> o 
    <a href="#GetNodeProperties(void*,unsigned int*,float*,CATUnicodeString&amp;)"><b>GetNodeProperties</b></a>(void*,unsigned int*,float*,CATUnicodeString&amp;)
<dd>  Retrieves the properties of a node.
 <dt> o 
    <a href="#GetNodeType(void*,KindOfNode&amp;)"><b>GetNodeType</b></a>(void*,KindOfNode&amp;)
<dd>  Retrieves the node's type.
 <dt> o 
    <a href="#GetNodeUDA(void*,unsigned int*,CATUnicodeString**,CATUnicodeString**)"><b>GetNodeUDA</b></a>(void*,unsigned int*,CATUnicodeString**,CATUnicodeString**)
<dd>  Retrieves the User Defined Attributes Attached to a node.
 <dt> o 
    <a href="#GetRootNode(unsigned int,void*&amp;)"><b>GetRootNode</b></a>(unsigned int,void*&amp;)
<dd>  Retrieves the root node's ID from its index.
 <dt> o 
    <a href="#GetRootNodesCount(unsigned int*)"><b>GetRootNodesCount</b></a>(unsigned int*)
<dd>  Retrieves the root nodes' number.
 <dt> o 
    <a href="#GetSAG(void*,float*,float*,float*)"><b>GetSAG</b></a>(void*,float*,float*,float*)
<dd>  Retrieves the tessellation options.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Get2DArcCircleData"></a><a name="Get2DArcCircleData(void*,double**,double*,double*,double*,int*)"></a> <dt> o <b>Get2DArcCircleData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DArcCircleData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double**')</script> <td><tt>oCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oBegin_angle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oEnd_angle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oFill</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D circle arc's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCenter</tt>
   <dd>	         the center of the 2D circle arc, it is a 2D point.
			 ***sizeOf Get2DArcCircleData oCenter : 2
 </dd>
    <dt><tt> oRadius</tt>
   <dd>	         the radius of the 2D circle arc.
 </dd>
    <dt><tt> oBegin_angle</tt>
   <dd>	         the begin angle to construct a 2D circle arc.
	         <br><b>legal values</b>: the default value is 0.
	         By this way, it creates a 2D circle.
 </dd>
    <dt><tt> oEnd_angle</tt>
   <dd>	         the end angle to construct a 2D circle arc.
	         <br><b>legal values</b>: the default value is 2*pi.
	         By this way, it creates a 2D circle.
 </dd>
    <dt><tt> oFill</tt>
   <dd>	         the integer which allows to construct a 2D circle arc
	         just with edges or filled with graphic attributes.
	         <br><b>legal values</b>: 
		         <br>NOFILL : (=0) just edges are drawn.
		         <br>FILL : (=1) the 2D circle arc or the 2D circle is filled
				              with graphic attributes.</dd>
</dl>
</dl>
</dl>
<a name="Get2DFaceData"></a><a name="Get2DFaceData(void*,float**,int*,int*,int*,int**,int**,int**)"></a> <dt> o <b>Get2DFaceData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DFaceData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oFill</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oVertex</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D face's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoints</tt>
   <dd>   Array containing the x, y  coordinates for
   each point of the polygon. Its size is equal
   to two times the number of points. So, the coordinates
   x, y of the first point are respectively stored in iPoints[0], and  iPoints[1],
   the coordinates x, y of the second point, in iPoints[2], iPoints[3], and so on...
   ***sizeOf Get2DFaceData oPoints : 2*oNbPoint
 </dd>
    <dt><tt> oNbPoint</tt>
   <dd>   The number of points used to define the polygon.
 </dd>
    <dt><tt> oFill</tt>
   <dd>	the integer which allows to construct a 2D polygon
	just with edges or filled with graphic attributes.
	<br><b>legal values</b>: 
	<ul><li>NOFILL : just edges are drawn.</li>
	<li>FILL : the 2D circle arc or the 2D circle is filled
				with graphic attributes.</li></ul>
 </dd>
    <dt><tt> oNbTriangles</tt>
   <dd>	The number of group of triangles which compose the 2D polygon after the tesselation.
 </dd>
    <dt><tt> oType</tt>
   <dd>	Array which contain the type of each group of triangles.
	<br><b>legal values</b>:
	<ul>
		<li>0 : single triangles</li>
		<li>1 : triangle strip</li>
		<li>2 : triangle fan</li>
	</ul>
	Its size is equal to <tt>oNbTriangles</tt>.
	***sizeOf Get2DFaceData oType : oNbTriangle
 </dd>
    <dt><tt> oTriangles</tt>
   <dd>	Array which contain the number of vertex for each group of triangles.
	Its size is equal to <tt>oNbTriangles</tt>.
	***sizeOf Get2DFaceData oTriangle : oNbTriangle
 </dd>
    <dt><tt> oVertex</tt>
   <dd>	Array of indices of vertex which compose the 2D polygon.<br>
	This array is composed of various arrays which represent one group of triangles.
	And each group of triangles have a type defined by the array "oType".
	<ul>
	<li>
		If the group is made of single triangles, indices are written 
		like in the following sample :
	<pre>
	1              4
	|\           /|
	| \         / |
	|  \       /  |
	|   \     /   |
	|____\   /____|
	2     3  5    6  
	</pre>
	</li>
	<li>
		if the group is a triangle strip, indices are written like in the following sample :
	<pre>
	1     3      5
	-------------
	\     |\     |\
	 \    | \    | \
	  \   |  \   |  \
	   \  |   \  |   \
	    \ |    \ |    \
	     \|_____\|_____\
	      2      4       6
	</pre>
	</li>
	<li>
		if the group is a triangle fan, indices are written like in the following sample :
	<pre>
	2      1
	 _______    
	|     /|\
	|    / | \
	|   /  |  \
	|  /   |   \
	| /    |    \
	|/_____|_____\
	3      4      5
	</pre>
	</li>
	</ul>
 DO NOT USE this method
	***sizeOf Get2DFaceData oVertex : ( sizeOf oTriangle : oNbTriangle )</dd>
</dl>
</dl>
</dl>
<a name="Get2DGPType"></a><a name="Get2DGPType(void*,KindOf2DGP&amp;)"></a> <dt> o <b>Get2DGPType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DGPType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('KindOf2DGP','KindOf2DGP&amp;')</script> <td><tt>oGPType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D node's GP type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oGPType</tt>
   <dd>				the GP's type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node isn't a 2D GP, returns E_FAIL.
 Mandatory method
</dl>
</dl>
<a name="Get2DPolyLineData"></a><a name="Get2DPolyLineData(void*,float**,int*,int*)"></a> <dt> o <b>Get2DPolyLineData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DPolyLineData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D polyline's parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oPoints</tt>
   <dd>				the points coordinates array.
				Array of points coordinates: XYXYXY...
				Its size is equal to two times the number of points.
				***sizeOf Get2DPolyLineData oPoints : 2*oNbPoints
 </dd>
    <dt><tt> oNbPoints</tt>
   <dd>				Retrieves the number of points.
 </dd>
    <dt><tt> oLineType</tt>
   <dd>				Retrieves the line type.
				<br><b>Legal values</b>:
				<dl>
				<dt>LINES</dt> (=0)
				<dd>The number of points must be even. A line will be drawn
				between points 1 and 2, an other line will be drawn between
				points 3 and 4, ...</dd>
				<dt>LINE_STRIP</dt> (=1)
				<dd>The number of points can be either even or odd. A line will
				be drawn between points 1 and 2, then, an other line will be drawn
				between points 2 and 3, ...</dd>
				<dt>LINE_LOOP</dt> (=2)
				<dd>Same as <tt>LINE_STRIP</tt>, excepted that one more line will be
				drawn between the last and the first points.</dd>
				</dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node hasn't a 2D Polyline Data, returns E_FAIL.
</dl>
</dl>
<a name="Get2DPolygonData"></a><a name="Get2DPolygonData(void*,float**,int*,int**)"></a> <dt> o <b>Get2DPolygonData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get2DPolygonData</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbContour</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbOfPtPerContour</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D polygon's parameters.
 Specification: The last contour is external, the others are internal (in order to define holes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oPoints</tt>
   <dd>				the points coordinates array.
				Array of points coordinates: XYXYXY...
				Its size is equal to two times the number of points.
				***sizeOf Get2DPolygonData oPoints : 2* ( sizeOf oNbOfPtPerContour : oNbContour )
 </dd>
    <dt><tt> oNbContour</tt>
   <dd>           The number of contour.   

 </dd>
    <dt><tt> oNbOfPtPerContour</tt>
   <dd>           The number of points for each contour.
		   ***sizeOf Get2DPolygonData oNbOfPtPerContour : oNbContour
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node hasn't a 2D Polygon Data, returns E_FAIL.
</dl>
</dl>
<a name="GetChild"></a><a name="GetChild(void*,unsigned int,void*&amp;)"></a> <dt> o <b>GetChild</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetChild</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iChildIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*&amp;')</script> <td><tt>oChildNodeID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's ID from its index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> iChildIndex</tt>
   <dd>				the child's index from 0 to children number - 1.
 </dd>
    <dt><tt> oChildNodeID</tt>
   <dd>				the ID of the child. 
 Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetChildCount"></a><a name="GetChildCount(void*,unsigned int*)"></a> <dt> o <b>GetChildCount</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetChildCount</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oNodeCount</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the number of children of the current node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNodeCount</tt>
   <dd>				the number of children nodes.
 Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetGeometricalIDList"></a><a name="GetGeometricalIDList(int*,int*&amp;)"></a> <dt> o <b>GetGeometricalIDList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGeometricalIDList</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbGeometricID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oGeometricalID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
    Retrieves the geometrical entities (Face, edge, vertex, independent curve or point) on which an annotation is attached.   
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbGeometricID</tt>
   <dd>				the number of Identifier of the geometric element to which one or more annotation are attached
 </dd>
    <dt><tt> oGeometricalID</tt>
   <dd>				the unique Identifier of the geometric element to which one or more annotation are attached   
 This method is called before the Geometrical Conversion in order to initialize the Mapping Table   
 Recommended method for FTA Links on Geometry
 Be careful: independent curve or point are treated only if the Mapping table is completed.
				***sizeOf GetGeometricalIDList oGeometricalID : oNbGeometricID</dd>
</dl>
</dl>
</dl>
<a name="GetNodeAnnotationConstructionGeometry"></a><a name="GetNodeAnnotationConstructionGeometry(void*,unsigned int&amp;,void**&amp;)"></a> <dt> o <b>GetNodeAnnotationConstructionGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationConstructionGeometry</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iRootNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oNbConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**&amp;')</script> <td><tt>oConstructionGeometryNodeID</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeAnnotationConstructionGeometry

 <br><b>Role</b>: Retrieves the Construction geometry entities of the Annotations.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRootNodeID</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> oNbConstructionGeometryNode</tt>
   <dd> [out]   the number of Construction geometry entities of the Annotations.
 </dd>
    <dt><tt> oConstructionGeometryNodeID</tt>
   <dd> [out]   The array of Identifiers of the number of Construction geometry entities of the Annotations.
   The caller must delete this array:
   delete [] oConstructionGeometryNodeID ;
   oConstructionGeometryNodeID = NULL ;
	***sizeOf GetNodeAnnotationConstructionGeometry oConstructionGeometryNodeID : oNbConstructionGeometryNode

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeAnnotationGroupAssociatedBodies"></a><a name="GetNodeAnnotationGroupAssociatedBodies(void*,unsigned int&amp;,void**&amp;)"></a> <dt> o <b>GetNodeAnnotationGroupAssociatedBodies</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationGroupAssociatedBodies</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oNbOfAssociatedBodiesID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**&amp;')</script> <td><tt>oAssociatedBodiesID</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeAnnotationGroupAssociatedBodies

 <br><b>Role</b>: Retrieves the bodies (geometric sets, ...) 
 that are visually managed by this Group.
 The associated bodies are not shown in default case; they become visible with the Group.
 This method should be used only with XCAD option to get 
 the 3D tessellated representation with structure.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> oNbOfAssociatedBodiesID</tt>
   <dd> [out]   the number of Identifiers of the Associated bodies
 </dd>
    <dt><tt> oAssociatedBodiesID</tt>
   <dd> [out]   The array of Identifiers of the Associated bodies, corresponding 
   to ID in the 3D tessellated representation with structure.
   The caller must delete this array:
   delete [] oAssociatedBodiesID ;
   oAssociatedBodiesID = NULL ;
	***sizeOf GetNodeAnnotationGroupAssociatedBodies oAssociatedBodiesID : oNbOfAssociatedBodiesID

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeAnnotationGroupAssociatedCG"></a><a name="GetNodeAnnotationGroupAssociatedCG(void*,unsigned int&amp;,void**&amp;)"></a> <dt> o <b>GetNodeAnnotationGroupAssociatedCG</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationGroupAssociatedCG</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oNbOfAssociatedCGID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**&amp;')</script> <td><tt>oAssociatedCGID</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeAnnotationGroupAssociatedCG

 <br><b>Role</b>: Retrieves the CG (Construction geometry entities) 
 that are visually managed by this Group.
 The associated CG are not shown in default case; they become visible with the Group.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> oNbOfAssociatedCGID</tt>
   <dd> [out]   the number of Identifiers of the Associated CG
 </dd>
    <dt><tt> oAssociatedCGID</tt>
   <dd> [out]   The array of Identifiers of the Associated CG, corresponding 
   to ID returned by GetNodeAnnotationConstructionGeometry.
   The caller must delete this array:
   delete [] oAssociatedBodiesID ;
   oAssociatedBodiesID = NULL ;
	***sizeOf GetNodeAnnotationGroupAssociatedCG oAssociatedCGID : oNbOfAssociatedCGID

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeAnnotationGroupAttributes"></a><a name="GetNodeAnnotationGroupAttributes(void*,void*&amp;,CATBoolean&amp;)"></a> <dt> o <b>GetNodeAnnotationGroupAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationGroupAttributes</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*&amp;')</script> <td><tt>oActiveViewNodeId</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oClippingState</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 
 <br><b>Role</b>: Retrieves the attributes for a Group node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>              The Group node's ID.
 </dd>
    <dt><tt> oActiveViewNodeId</tt>
   <dd> Active View NodeID.          <br> If NULL : There is no Active view for this group.
 </dd>
    <dt><tt> oClippingState</tt>
   <dd>			<br> TRUE : The active view is used to define a clipping plane.
          <br> FALSE : There is no clipping plane applied.</dd>
</dl>
</dl>
</dl>
<a name="GetNodeAnnotationParallelToScreenState"></a><a name="GetNodeAnnotationParallelToScreenState(void*,CATBoolean&amp;,CATBoolean&amp;)"></a> <dt> o <b>GetNodeAnnotationParallelToScreenState</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationParallelToScreenState</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oParallelToScreenState</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oZoomableState</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  <br><b>Role</b>: Retrieves the "Parallel To Screen" state for a node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> oParallelToScreenState</tt>
   <dd> [out]   The 'Parrallel to screen' state
 </dd>
    <dt><tt> oZoomableState</tt>
   <dd> [out]   The 'Zoomable' state (only if the 'Parrallel to screen' state is TRUE)

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeAnnotationTolerance"></a><a name="GetNodeAnnotationTolerance(void*,double&amp;)"></a> <dt> o <b>GetNodeAnnotationTolerance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationTolerance</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAnnotationTolerance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's tolerance value.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oAnnotationTolerance</tt>
   <dd>				the Annotation Tolerance.
</dd>
</dl>
</dl>
</dl>
<a name="GetNodeAnnotationType"></a><a name="GetNodeAnnotationType(void*,CATString&amp;,CATString&amp;)"></a> <dt> o <b>GetNodeAnnotationType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>oAnnotationType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>oAnnotationSubType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's Annotation type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oAnnotationType</tt>
   <dd>				the Annotation type.   
                XCAD_FTA_Datum, 
                XCAD_FTA_SizeAndDimension, 
                XCAD_FTA_Form, 
                XCAD_FTA_Orientation,
                XCAD_FTA_Position,   
                XCAD_FTA_RunOut,
                XCAD_FTA_NonSemantic,   
                XCAD_FTA_PartialSurface,      
                XCAD_FTA_View,      
 </dd>
    <dt><tt> oAnnotationSubType</tt>
   <dd>				the Annotation sub type.
           For Datum Type :
              XCAD_FTA_SUBTYPE_DatumSimple
              XCAD_FTA_SUBTYPE_DatumTarget
           For Size and Dimension Type :
              XCAD_FTA_SUBTYPE_LinearDimension
              XCAD_FTA_SUBTYPE_AngularDimension
              XCAD_FTA_SUBTYPE_ChamferDimension
              XCAD_FTA_SUBTYPE_BasicDim
              XCAD_FTA_SUBTYPE_OrientedLinearDimension
              XCAD_FTA_SUBTYPE_OrientedAngularDimension                    
           For Form Type :
              XCAD_FTA_SUBTYPE_Straightness
              XCAD_FTA_SUBTYPE_Flatness
              XCAD_FTA_SUBTYPE_Circularity
              XCAD_FTA_SUBTYPE_Cylindricity
              XCAD_FTA_SUBTYPE_ProfileOfAnyLine
              XCAD_FTA_SUBTYPE_ProfileOfASurface
              XCAD_FTA_SUBTYPE_PatternLocation
           For Orientation Type : 
              XCAD_FTA_SUBTYPE_Angularity
              XCAD_FTA_SUBTYPE_Perpendicularity
              XCAD_FTA_SUBTYPE_Parallelism
           For Position Type :
              XCAD_FTA_SUBTYPE_Position 
              XCAD_FTA_SUBTYPE_Concentricity
              XCAD_FTA_SUBTYPE_Symmetry
              XCAD_FTA_SUBTYPE_PositionOfAnyLine
              XCAD_FTA_SUBTYPE_PositionOfASurface
           For Runout Type : 
              XCAD_FTA_SUBTYPE_CircularRunOut
              XCAD_FTA_SUBTYPE_TotalRunOut
           For NonSemantic Type :
              XCAD_FTA_SUBTYPE_Roughness
              XCAD_FTA_SUBTYPE_Weld
              XCAD_FTA_SUBTYPE_Text
              XCAD_FTA_SUBTYPE_FlagNote
              XCAD_FTA_SUBTYPE_Noa
              XCAD_FTA_SUBTYPE_Group  
              XCAD_FTA_SUBTYPE_CoordinateDimension
              XCAD_FTA_SUBTYPE_GeneralTolerance
              XCAD_FTA_SUBTYPE_DatumTarget
              XCAD_FTA_SUBTYPE_DatumSimple
           For Partial surface (restricted area) Type :
              XCAD_FTA_SUBTYPE_RestrictedArea
           For View Type :
              XCAD_FTA_SUBTYPE_View
 Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetNodeAnnotationValidationString"></a><a name="GetNodeAnnotationValidationString(void*,CATUnicodeString&amp;)"></a> <dt> o <b>GetNodeAnnotationValidationString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAnnotationValidationString</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iAnnotationNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oValidationString</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Short role of the method.

 <br><b>Role</b>: Retrive CATUnicodeString equivalent for FTA.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAnnotationNode</tt>
   <dd> [in]   Annotation Node
 </dd>
    <dt><tt> oValidationString</tt>
   <dd> [out]   Equivalent UnicodeString

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeAssociatedAnnotation"></a><a name="GetNodeAssociatedAnnotation(void*,int*,void**&amp;)"></a> <dt> o <b>GetNodeAssociatedAnnotation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeAssociatedAnnotation</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbAssociatedAnnotationID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**&amp;')</script> <td><tt>oAssociatedAnnotationID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the link to associated annotation of a node.
 The associated annotation(s) has(have) been created before by same API.
 Datum simple pointing on one or several Datum targets.
 View pointing on one or several annotations (except Group or View annotations).
 Group pointing on one or several annotations (except Group or View annotations).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNbAssociatedAnnotationID</tt>
   <dd>				the number of Identifier of the associated annotation element to which the annotation is attached
 </dd>
    <dt><tt> oAssociatedAnnotationID</tt>
   <dd>				the Identifier of the associated annotation to which the annotation is attached
                The caller must delete this array...
				***sizeOf GetNodeAssociatedAnnotation oAssociatedAnnotationID : oNbAssociatedAnnotationID</dd>
</dl>
</dl>
</dl>
<a name="GetNodeCGCircleParameters"></a><a name="GetNodeCGCircleParameters(void*,double&amp;,double [3],double [3],double [3])"></a> <dt> o <b>GetNodeCGCircleParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGCircleParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oPlaneOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oPlaneFirstDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oPlaneSecondDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGCircleParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Circle)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oRadius</tt>
   <dd> [out]   The radius of the circle
 </dd>
    <dt><tt> oPlaneOrigin</tt>
   <dd> [out]   The Origin point coord (XYZ)
 </dd>
    <dt><tt> oPlaneFirstDirection</tt>
   <dd> [out]   The first vector coord (XYZ)
 </dd>
    <dt><tt> oPlaneSecondDirection</tt>
   <dd> [out]   The second vector coord (XYZ)

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGCylinderParameters"></a><a name="GetNodeCGCylinderParameters(void*,double [3],double&amp;,double [3],double [3])"></a> <dt> o <b>GetNodeCGCylinderParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGCylinderParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oPositionPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oEndPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGCylinderParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Cylinder)
 A cylinder will be obtained by the revolution of a line parallel to the given axis, 
  around the position point, at a distance given by the radius value of this point.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oPositionPoint</tt>
   <dd> [out]   The origin point coord (XYZ)
 </dd>
    <dt><tt> oRadius</tt>
   <dd> [out]   The radius value
 </dd>
    <dt><tt> oStartPoint</tt>
   <dd> [out]   The start point of the parallel axis of revolution, to build the cylinder
 </dd>
    <dt><tt> oEndPoint</tt>
   <dd> [out]   The end point of the parallel axis of revolution, to build the cylinder

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGLineParameters"></a><a name="GetNodeCGLineParameters(void*,double [3],double [3])"></a> <dt> o <b>GetNodeCGLineParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGLineParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oEndPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGLineParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Line)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oStartPoint</tt>
   <dd> [out]   The start point coord (XYZ)
 </dd>
    <dt><tt> oEndPoint</tt>
   <dd> [out]   The end point coord (XYZ)

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGPlaneParameters"></a><a name="GetNodeCGPlaneParameters(void*,double [3],double [2][3],double[2][3],double&amp;)"></a> <dt> o <b>GetNodeCGPlaneParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGPlaneParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oOriginPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [2][3','double [2][3]')</script> <td><tt>oFirstVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2][3','double[2][3]')</script> <td><tt>oSecondVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAngle</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGPlaneParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Plane)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oOriginPoint</tt>
   <dd> [out]   The origin point coord (XYZ)
 </dd>
    <dt><tt> oFirstVector</tt>
   <dd> [out]   The first vector start and end points coord (2 * XYZ)
 </dd>
    <dt><tt> oSecondVector</tt>
   <dd> [out]   The second vector start and end points coord (2 * XYZ)
 </dd>
    <dt><tt> oAngle</tt>
   <dd> [out]   The angle in radians

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGPointParameters"></a><a name="GetNodeCGPointParameters(void*,double[3])"></a> <dt> o <b>GetNodeCGPointParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGPointParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oPointParameters</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGPointParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Point)

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oPointParameters[3]</tt>
   <dd> [out]   The point coord (XYZ)

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGThreadComponents"></a><a name="GetNodeCGThreadComponents(void*,double [3],double&amp;,double [3],double [3],double [3],double [2][3],double[2][3],double&amp;,double [3],double [2][3],double[2][3],double&amp;)"></a> <dt> o <b>GetNodeCGThreadComponents</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGThreadComponents</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oThreadCylinderPositionPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThreadCylinderRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oThreadCylinderStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oThreadCylinderEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oThreadUpperPlaneOriginPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [2][3','double [2][3]')</script> <td><tt>oThreadUpperPlaneFirstVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2][3','double[2][3]')</script> <td><tt>oThreadUpperPlaneSecondVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThreadUpperPlaneAngle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oThreadLowerPlaneOriginPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [2][3','double [2][3]')</script> <td><tt>oThreadLowerPlaneFirstVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2][3','double[2][3]')</script> <td><tt>oThreadLowerPlaneSecondVector</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThreadLowerPlaneAngle</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGThreadComponents

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Thread)
 A thread is defined by one cylinder (cf. GetNodeCGCylinderParameters)
  and two planes (cf. twice GetNodeCGPlaneParameters).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oThreadCylinderPositionPoint</tt>
   <dd> [out]   cf. GetNodeCGCylinderParameters 2nd argument
 </dd>
    <dt><tt> oThreadCylinderRadius</tt>
   <dd> [out]   cf. GetNodeCGCylinderParameters 3rd argument
 </dd>
    <dt><tt> oThreadCylinderStartPoint</tt>
   <dd> [out]   cf. GetNodeCGCylinderParameters 4th argument
 </dd>
    <dt><tt> oThreadCylinderEndPoint</tt>
   <dd> [out]   cf. GetNodeCGCylinderParameters 5th argument
 </dd>
    <dt><tt> oThreadUpperPlaneOriginPoint</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 2nd argument
 </dd>
    <dt><tt> oThreadUpperPlaneFirstVector</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 3rd argument
 </dd>
    <dt><tt> oThreadUpperPlaneSecondVector</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 4th argument
 </dd>
    <dt><tt> oThreadUpperPlaneAngle</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 5th argument
 </dd>
    <dt><tt> oThreadLowerPlaneOriginPoint</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 2nd argument
 </dd>
    <dt><tt> oThreadLowerPlaneFirstVector</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 3rd argument
 </dd>
    <dt><tt> oThreadLowerPlaneSecondVector</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 4th argument
 </dd>
    <dt><tt> oThreadLowerPlaneAngle</tt>
   <dd> [out]   cf. GetNodeCGPlaneParameters 5th argument

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGThreadParameters"></a><a name="GetNodeCGThreadParameters(void*,double [3],double&amp;,double [3],double [3],double [3],double [3],double [3],double&amp;,double [3],double [3],double [3],double [3])"></a> <dt> o <b>GetNodeCGThreadParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGThreadParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oUpperCircleCenterPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oUpperCircleRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oUpperCirclePlaneFirstDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oUpperCirclePlaneSecondDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oUpperCircleStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oUpperCircleEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oLowerCircleCenterPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLowerCircleRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oLowerCirclePlaneFirstDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oLowerCirclePlaneSecondDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oLowerCircleStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double [3','double [3]')</script> <td><tt>oLowerCircleEndPoint</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGThreadParameters

 <br><b>Role</b>: Retrieves the Construction geometry entity Parameters (for a Thread)
 A thread is represented by two parallel circle arcs, joined by two lines,
 with a third circle arc (internal), between both others (external : upper and lower).
 This method gives the two external circle arcs.
 The start and end points of each arc are also the extremities of the thread lines
 (start upper arc to start lower arc, end upper arc to end lower arc).
 The average of both external circle arcs parameters gives the internal circle arc parameters.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oUpperCircleCenterPoint</tt>
   <dd> [out]   Center point coord. (X Y Z) of the Upper external circle
 </dd>
    <dt><tt> oUpperCircleRadius</tt>
   <dd> [out]   The radius of the Upper external circle
 </dd>
    <dt><tt> oUpperCirclePlaneFirstDirection</tt>
   <dd> [out]   The First direction of the Upper circle support plane
 </dd>
    <dt><tt> oUpperCirclePlaneSecondDirection</tt>
   <dd> [out]   The Second direction of the Upper circle support plane
 </dd>
    <dt><tt> oUpperCircleStartPoint</tt>
   <dd> [out]   The Strat point of the Upper external circle arc
 </dd>
    <dt><tt> oUpperCircleEndPoint</tt>
   <dd> [out]   The End point of the Upper external circle arc
 </dd>
    <dt><tt> oLowerCircleCenterPoint</tt>
   <dd> [out]   Center point coord. (X Y Z) of the Lower external circle
 </dd>
    <dt><tt> oLowerCircleRadius</tt>
   <dd> [out]   The radius of the Lower external circle
 </dd>
    <dt><tt> oLowerCirclePlaneFirstDirection</tt>
   <dd> [out]   The First direction of the Lower circle support plane
 </dd>
    <dt><tt> oLowerCirclePlaneSecondDirection</tt>
   <dd> [out]   The Second direction of the Lower circle support plane
 </dd>
    <dt><tt> oLowerCircleStartPoint</tt>
   <dd> [out]   The Strat point of the Lower external circle arc
 </dd>
    <dt><tt> oLowerCircleEndPoint</tt>
   <dd> [out]   The End point of the Lower external circle arc

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCGUID"></a><a name="GetNodeCGUID(void*,CATListOfInt&amp;)"></a> <dt> o <b>GetNodeCGUID</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCGUID</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oListOfIDs</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeCGUID

 <br><b>Role</b>: To get the UID of a Construction Geometry entity, from its NodeID.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   The CG node's ID.
 </dd>
    <dt><tt> oListOfIDs</tt>
   <dd> [out]   The list of UID for each geometrical component of the input CG.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeCameraAttributes"></a><a name="GetNodeCameraAttributes(void*,CATUnicodeString&amp;,double&amp;,double&amp;)"></a> <dt> o <b>GetNodeCameraAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCameraAttributes</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oCameraType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oCameraViewAngle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oCameraZoom</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 
 Retrieves the 3D camera attributes for a Group node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>              The Group node's ID.
 </dd>
    <dt><tt> oCameraType</tt>
   <dd>				The type of the camera.
	         <br><b>legal values</b>: 
		         <br>"3D_CONIC_CAMERA"
		         <br>"3D_CYLINDRIC_CAMERA"
		         <br>"UNKNOWN_CAMERA"
 </dd>
    <dt><tt> oCameraViewAngle</tt>
   <dd>			This parameter is used only for "3D_CONIC_CAMERA" cameras
 </dd>
    <dt><tt> oCameraZoom</tt>
   <dd>			This parameter is used only for "3D_CYLINDRIC_CAMERA" cameras
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node has no camera parameters, returns S_FALSE.
</dl>
</dl>
<a name="GetNodeCameraParameters"></a><a name="GetNodeCameraParameters(void*,float[3],float[3],float[3],float[3])"></a> <dt> o <b>GetNodeCameraParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeCameraParameters</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oZenith</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oTarget</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 3D viewpoint (camera) for a Group feature.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				The Group node's ID.
 </dd>
    <dt><tt> oOrigin</tt>
   <dd>				The origin (point) of the camera.
 </dd>
    <dt><tt> oDirection</tt>
   <dd>				The sight direction (vector) of a 3D camera.
           It results a rotation of the camera around it's origin.
           This direction must be perpendicular to the up direction.   
 </dd>
    <dt><tt> oZenith</tt>
   <dd>				The up direction (vector) of a 3D camera.
           It results a rotation of the camera around it's sight direction.
           This direction must be perpendicular to the sight direction.
 </dd>
    <dt><tt> oTarget</tt>
   <dd>				The target point of a 3D camera.
           It results a change of the camera sight direction.       
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node has no camera parameters, returns S_FALSE.
</dl>
</dl>
<a name="GetNodeColor"></a><a name="GetNodeColor(void*,unsigned int*,unsigned int*,unsigned int*,unsigned int*)"></a> <dt> o <b>GetNodeColor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeColor</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oRed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oGreen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oBlue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oAlpha</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the color of a node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oRed</tt>
   <dd>				the red component.
				<b>Legal values</b>: <tt>oRed</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oGreen</tt>
   <dd>				the green component.
				<b>Legal values</b>: <tt>oGreen</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oBlue</tt>
   <dd>				the blue component.
				<b>Legal values</b>: <tt>oBlue</tt> ranges from 0 to 255.
 </dd>
    <dt><tt> oAlpha</tt>
   <dd>				the alpha component.
				<b>Legal values</b>: <tt>oAlpha</tt> ranges from 0 to 255.</dd>
</dl>
</dl>
</dl>
<a name="GetNodeConstructionGeometryType"></a><a name="GetNodeConstructionGeometryType(void*,CATUnicodeString&amp;)"></a> <dt> o <b>GetNodeConstructionGeometryType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeConstructionGeometryType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iConstructionGeometryNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oConstructionGeometryType</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  GetNodeConstructionGeometryNameAndType

 <br><b>Role</b>: Retrieves the Construction geometry entity Name and Type

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstructionGeometryNode</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> oConstructionGeometryType</tt>
   <dd> [out]   The CG entity Type
   Depending on this type, the following methods GetNodeCG*Parameters can be used on the node's ID.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeGPParallelToScreenOrigin"></a><a name="GetNodeGPParallelToScreenOrigin(void*,float[3])"></a> <dt> o <b>GetNodeGPParallelToScreenOrigin</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeGPParallelToScreenOrigin</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oOrigin</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  <br><b>Role</b>: Retrieves the "Parallel To Screen" origin for a GP node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd> [in]   the node's ID.
 </dd>
    <dt><tt> Origin</tt>
   <dd>	The Origin in model coordinates of the "Parralel To Screen" GP.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeGeometry"></a><a name="GetNodeGeometry(void*,int*,int*&amp;)"></a> <dt> o <b>GetNodeGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeGeometry</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbGeometricID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oGeometricID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the link to geometry of a node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNbGeometricID</tt>
   <dd>				the number of Identifier of the geometric element to which the annotation is attached
 </dd>
    <dt><tt> oGeometricID</tt>
   <dd>				the Identifier of the geometric element to which the annotation is attached
				***sizeOf GetNodeGeometry oGeometricID : oNbGeometricID</dd>
</dl>
</dl>
</dl>
<a name="GetNodeGeometryFullPath"></a><a name="GetNodeGeometryFullPath(void*,int&amp;,CATListOfCATUnicodeString*&amp;)"></a> <dt> o <b>GetNodeGeometryFullPath</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeGeometryFullPath</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbOfGeometryPathes</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString*&amp;')</script> <td><tt>oGeometryPathesTable</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the path of the link to geometry of a node.

 <br><b>Role</b>: In addition to GetNodeGeometry() method, 
 this method gives the full path between the current annotation
 and the geometrical element(s) given by GetNodeGeometry() method.
 This method must be used only if the current annotation and
 the linked geometrical element(s) are not in the same Document.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd> [in]   The node's ID.
 </dd>
    <dt><tt> oNbOfGeometryPathes</tt>
   <dd> [out]   The number of Pathes (size of the array oGeometryPathesTable).
 </dd>
    <dt><tt> oGeometryPathesTable</tt>
   <dd> [out]   Array of List of CATUnicodeString to define the full pathes.
   Each element of this array is a List of CATUnicodeString that corresponds to a path.
   Each element of such list must be composed like this:
   "Type1:Value1:Type2:Value2<...>:" (the ":" character is a separator that must not be used in the path elements)
   Sample: if the path is MyAnnotation > MyProduct > MyPartInstance.1 > MyPart > MyBody 
   (where those strings are some Name identifiers), 
   the list describing this path will be composed by 5 strings:
   1 > "Name:MyAnnotation:"
   2 > "Name:MyProduct:"
   3 > "Name:MyPartInstance.1:"
   4 > "Name:MyPart:"
   5 > "Name:MyBody:"
   The identifiers types can be customized but the Name type is mandatory.
   Sample: "Name:MyProduct:Type:ASMProd:UID:0dfe4885:"
   Input and Output implementations must communicate on what kinds of identifiers are used by this method.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if one or more path is returned
   <code>E_FAIL</code> if no path is defined
   (e.g. when there is no linked geometry or if the linked geometry is in the same document, ...)

</dl>
</dl>
<a name="GetNodeLineStyle"></a><a name="GetNodeLineStyle(void*,unsigned short&amp;,unsigned short&amp;)"></a> <dt> o <b>GetNodeLineStyle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeLineStyle</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned short','unsigned short&amp;')</script> <td><tt>oPattern</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned short','unsigned short&amp;')</script> <td><tt>oRatio</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  <br><b>Role</b>: Retrieves the line style characteristics for the current node
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>              The Annotation node's ID.
 </dd>
    <dt><tt> oPattern</tt>
   <dd>		    	The line style pattern
          <br> This argument must be processed as a "linear bitmap" :
          <br> Each "1" bit represents a shown pixel
          <br> Each "0" bit represent an unshown pixel.
 </dd>
    <dt><tt> oRatio</tt>
   <dd>              The line style ratio
          <br> Use this argument as a magnification factor of the pattern.
          <br> Exemple : if pattern is 27242 (0110101001101010 in binary) and ratio is 3,
          <br> the line must be drawned like this (* are shown pixel, . are unshown) :
          <br>  ...******...***...***......******...***...***...

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, otherwise...

</dl>
</dl>
<a name="GetNodeOrientationMatrix"></a><a name="GetNodeOrientationMatrix(void*,float[2][2],float[2])"></a> <dt> o <b>GetNodeOrientationMatrix</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeOrientationMatrix</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[2][2','float[2][2]')</script> <td><tt>oRotationMatrix</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[2','float[2]')</script> <td><tt>oTranslationVector</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 2D orientation matrix in the plane returned by GetNodePlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oRotationMatrix</tt>
   <dd>				the rotation component.
 </dd>
    <dt><tt> oTranslationVector</tt>
   <dd>				the translation component.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node has no orientation matrix, returns S_FALSE.
</dl>
</dl>
<a name="GetNodePlane"></a><a name="GetNodePlane(void*,float[3],float[3],float[3])"></a> <dt> o <b>GetNodePlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodePlane</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oVectorX</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float[3','float[3]')</script> <td><tt>oVectorY</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 3D plane on a Node   
 defines the 3D plane in which all node 2D geometric definitions will be expressed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iNodeID</tt>
   <dd>				the node's ID.   
 </dd>
    <dt><tt> Origin</tt>
   <dd>				The Origin of space defining the plane.
 </dd>
    <dt><tt> VectorX</tt>
   <dd>				The X vector of the plane.
 </dd>
    <dt><tt> VectorY</tt>
   <dd>				The Y vector of the plane
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If current node has no plane, returns S_FALSE.
</dl>
</dl>
<a name="GetNodeProperties"></a><a name="GetNodeProperties(void*,unsigned int*,float*,CATUnicodeString&amp;)"></a> <dt> o <b>GetNodeProperties</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeProperties</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oShow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oThickness</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oNodeName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the properties of a node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oShow</tt>
   <dd>				the Show component.
           <b>Legal values</b>: 1=Show - 0=No_show
 </dd>
    <dt><tt> oThickness</tt>
   <dd>				the Thickness component.
				Real value of the thickness in millimeters.
 </dd>
    <dt><tt> oNodeName</tt>
   <dd>				the name of the Annotation</dd>
</dl>
</dl>
</dl>
<a name="GetNodeType"></a><a name="GetNodeType(void*,KindOfNode&amp;)"></a> <dt> o <b>GetNodeType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeType</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('KindOfNode','KindOfNode&amp;')</script> <td><tt>oNodeType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node's type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oNodeType</tt>
   <dd>				the node's type.
 Not Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetNodeUDA"></a><a name="GetNodeUDA(void*,unsigned int*,CATUnicodeString**,CATUnicodeString**)"></a> <dt> o <b>GetNodeUDA</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNodeUDA</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oNbParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString**')</script> <td><tt>oNodeParamsNames</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString**')</script> <td><tt>oNodeParamsValues</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the User Defined Attributes Attached to a node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt>  oNbParams,</tt>
   <dd>  				The Number of Text Fields  attached to the node 
 </dd>
    <dt><tt>  oNodeParamsNames,</tt>
   <dd>  				the Parameter Fields 
				***sizeOf GetNodeUDA oNodeParamsNames : oNbParams
 </dd>
    <dt><tt>  oNodeParamsValues</tt>
   <dd> 				The Value Fields
				***sizeOf GetNodeUDA oNodeParamsValues : oNbParams
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If no UDA, returns S_FALSE.
</dl>
</dl>
<a name="GetRootNode"></a><a name="GetRootNode(unsigned int,void*&amp;)"></a> <dt> o <b>GetRootNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRootNode</b>(<td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iRootIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*&amp;')</script> <td><tt>oRootNodeID</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root node's ID from its index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRootIndex</tt>
   <dd>				the node's index from 0 to root nodes number - 1.
 </dd>
    <dt><tt> oRootNodeID</tt>
   <dd>				the root node's ID.
 Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetRootNodesCount"></a><a name="GetRootNodesCount(unsigned int*)"></a> <dt> o <b>GetRootNodesCount</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRootNodesCount</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>oNodeCount</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root nodes' number.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNodeCount</tt>
   <dd>				the number of root nodes.
 Mandatory method</dd>
</dl>
</dl>
</dl>
<a name="GetSAG"></a><a name="GetSAG(void*,float*,float*,float*)"></a> <dt> o <b>GetSAG</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSAG</b>(<td> const <script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iNodeID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oSAGValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oAngleValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oStepValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tessellation options.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNodeID</tt>
   <dd>				the node's ID.
 </dd>
    <dt><tt> oSAGValue</tt>
   <dd>				the used SAG (geometric precision) for the tessellation.
 </dd>
    <dt><tt> oAngleValue</tt>
   <dd>				the max angle between consecutive normals for the tessellation.
 </dd>
    <dt><tt> oStepValue</tt>
   <dd>				the max size of edges for the tessellation.
 Not Mandatory method</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIExchangeTessellatedAnnotationRepresentation.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DataExchangeBaseRepsItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

