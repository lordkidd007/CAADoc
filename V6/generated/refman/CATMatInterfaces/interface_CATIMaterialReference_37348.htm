<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATMatInterfaces Interface CATIMaterialReference</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATMatInterfaces.htm" href="../CATMatInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATMatInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIMaterialReference"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATMatInterfaces Interface CATIMaterialReference</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIMaterialReference_37348','CATIMaterialReference','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIMaterialReference</b>
</p>
<p>
<b><i> Interface to Material Reference.</i></b><br>

 <b>Role:</b> Interface designed to add/suppress Material Domains and to get information on the Material.<br>
 <p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddConnection(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"><b>AddConnection</b></a>(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)
<dd>  Adds a connection to this material.
 <dt> o 
    <a href="#AddMaterialDomain(CATIType_var&amp;,CATIMaterialDomain*&amp;,CATLISTV(CATICkeParm_var)*,CATIAdpEnvironment*)"><b>AddMaterialDomain</b></a>(CATIType_var&amp;,CATIMaterialDomain*&amp;,CATLISTV(CATICkeParm_var)*,CATIAdpEnvironment*)
<dd>  Creates a new material domain representation which is added to this material reference.
 <dt> o 
    <a href="#GetAllConnections(CATListPtrCATBaseUnknown&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"><b>GetAllConnections</b></a>(CATListPtrCATBaseUnknown&amp;,CATIType_var&amp;,CATIAdpEnvironment*)
<dd>  Returns all the connections of a given type of this material.
 <dt> o 
    <a href="#GetAttributes(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)"><b>GetAttributes</b></a>(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)
<dd>   Retrieves the list of attributes and associated values.
 <dt> o 
    <a href="#GetAttributes(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)"><b>GetAttributes</b></a>(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)
<dd>  
 <dt> o 
    <a href="#GetDefaultConnection(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"><b>GetDefaultConnection</b></a>(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)
<dd>  Returns the default connection among connections of type iType.
 <dt> o 
    <a href="#GetMaterialDomain(CATLISTV(CATIType_var)&amp;,CATListPtrCATBaseUnknown&amp;)"><b>GetMaterialDomain</b></a>(CATLISTV(CATIType_var)&amp;,CATListPtrCATBaseUnknown&amp;)
<dd>  Returns the list of Domains exisiting on this material reference.
 <dt> o 
    <a href="#RemoveConnection(CATIMaterialRefCnx*&amp;)"><b>RemoveConnection</b></a>(CATIMaterialRefCnx*&amp;)
<dd>  Remove the given connection.
 <dt> o 
    <a href="#SetAttributes(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)"><b>SetAttributes</b></a>(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)
<dd>  Sets the list of attributes and associated values.
 <dt> o 
    <a href="#SetAttributes(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)"><b>SetAttributes</b></a>(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)
<dd>  
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddConnection"></a><a name="AddConnection(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"></a> <dt> o <b>AddConnection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddConnection</b>(<td><script type="text/javascript"> activateLink('CATIMaterialRefCnx','CATIMaterialRefCnx*&amp;')</script> <td><tt>opiCnx</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipiEnv</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Adds a connection to this material. <br>
 Such a connection enables to gather and expose part of the content of a domain.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiCnx</tt>
   <dd> [out, CATBaseUnknown#Release]	  The created connection.  <br>
 <font color="red">You have to release the pointer after use.</font>
 </dd>
    <dt><tt> iType</tt>
   <dd>   The type of creation to create.
 </dd>
    <dt><tt> ipiEnv</tt>
   <dd> 	  The environment (if null the current one will be used).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The connection is successfully created.
   <dl><dt>E_INVALIDARG</dt><dd> iType is not valid.
   <dt>E_FAIL</dt><dd>The operation failed during the creation of connection.
   </dl>
 
  <dt> Example: </dt>
  <dd> <pre class="code"> To create a CATIType <br> <code><br>
 CATIType_var  spiCnxType;   <br>
 CATCkePLMNavPublicServices::RetrieveKnowledgeType( "dsc_matrefelem_cnx_SmaBehavior", spiCnxType  );   <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>
</dl>
</dl>
<a name="AddMaterialDomain"></a><a name="AddMaterialDomain(CATIType_var&amp;,CATIMaterialDomain*&amp;,CATLISTV(CATICkeParm_var)*,CATIAdpEnvironment*)"></a> <dt> o <b>AddMaterialDomain</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddMaterialDomain</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMaterialDomain','CATIMaterialDomain*&amp;')</script> <td><tt>opiDomainRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATICkeParm_var)','CATLISTV(CATICkeParm_var)*')</script> <td><tt>ipListAttributes</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipiEnv</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Creates a new material domain representation which is added to this material reference. <br>
 <b>Role:</b> If domains of type iType are designed as unique, this method checks before that such a domain is not
 already aggregated to the material. This check is only done with data loaded in session. <br>
 The initilization business logic is called when creating a material domain. <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> 	  The type of the domain representation.
 </dd>
    <dt><tt> opiDomainRep</tt>
   <dd> [out, CATBaseUnknown#Release]	  Return the created material domain. <br>
   <font color="red">You have to release the pointer after use.</font>
 </dd>
    <dt><tt> iListAttributes</tt>
   <dd> 	  List of attributes to valuate on the created material domain representation
   (may overide values computed by BL).
 </dd>
    <dt><tt> ipiEnv</tt>
   <dd>   Environment in which the domain is created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The domain was created.
   <dt>E_FAIL</dt><dd>The operation failed and the domain is not created.
   </dl>

 
  <dt> Example: </dt>
  <dd> <pre class="code"> To create a CATIType <br><code><br>
 CATIType_var spiRenderingType = NULL_var; <br>
 CATMaterialTools::GetDomainRenderingType( spiRenderingType ) ; <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATMaterialTools','','CATMaterialTools') </script> <br>
 
  <dt> Example: </dt>
  <dd> <pre class="code"> to create a list of CATLISTV(CATICkeParm_var) <br><code><br>
 CATListValCATUnicodeString  iCtxAttrNameList; <br>
 CATListValCATUnicodeString  iCtxAttrValueList; <br> 
 for(...) <br>
 { 
 <blockquote>
 	 iCtxAttrNameList.Append(...);  <br>
 	 iCtxAttrValueList.Append(...); 
 </blockquote>
 } <br>
 int sizeValue = iCtxAttrValueList.Size(); <br>                 
 CATICkeParmFactory_var spCkeFactory = CATCKEVolatileFactory; <br> 
 CATLISTV(CATICkeParm_var) spAttrAsParm; <br>  
 for(int j = 1; j <= sizeValue; j++ ) <br> 
 {  
 <blockquote>
	    spAttrAsParm.Append(  spCkeFactory  ->  CreateString(  iCtxAttrNameList[j],  iCtxAttrValueList[j]  )  ); 
 </blockquote>  
 }  <br>
   </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATICkeParmFactory','','CATICkeParmFactory') </script> </br>
</dl>
</dl>
<a name="GetAllConnections"></a><a name="GetAllConnections(CATListPtrCATBaseUnknown&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"></a> <dt> o <b>GetAllConnections</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllConnections</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>opListCnx</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipiEnv</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns all the connections of a given type of this material.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListCnx</tt>
   <dd> [out, CATBaseUnknown#Release]	  The returned connections. <br>
    The caller should release the list elements. <br>
 <font color="red">You have to release the pointers after use.</font>
 </dd>
    <dt><tt> iType</tt>
   <dd>   The type of connection to retrieve. <br>
   It will return every connection of type iType or that derives from iType. 
 </dd>
    <dt><tt> ipiEnv</tt>
   <dd> 	  The environment (if null the current one will be used).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The connections were successfully removed.
   <dt>E_FAIL</dt><dd>The operation failed.  Nothing returned.
   </dl>

 
  <dt> Example: </dt>
  <dd> <pre class="code"> To create a CATIType. <br> <code><br>
 CATIType_var  spiCnxType;  <br>
 CATCkePLMNavPublicServices::RetrieveKnowledgeType( "dsc_matrefelem_cnx_SmaBehavior", spiCnxType  );  <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>
</dl>
</dl>
<a name="GetAttributes"></a><a name="GetAttributes(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)"></a> <dt> o <b>GetAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAttributes</b>(<td> const <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>iListName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATIValue_var)','CATLISTV(CATIValue_var)&amp;')</script> <td><tt>oListValue</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the list of attributes and associated values. <br>
 It is advised to use CATCkeObjectAttrWriteServices. <br>
 
<dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> <br> <code><br>
 CATICkeObject * piInstance  =  NULL;  <br>
 if(SUCCEEDED(piMatRef->QueryInterface(IID_CATICkeObject, (void**)& piInstance)) && piInstance)  <br>
 {  
 <blockquote>
	    CATUnicodeString attributeDisc = "V_discipline";  <br>
	    CATCkeObjectAttrWriteServices::GetValueAsString(piInstance, attributeDisc, CoreOrCovering);  <br>
     ......... <br>
	    piInstance -> Release(); piInstance = NULL;  
 </blockquote>
 }  <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>
</dl>
</dl>
<a name="GetAttributes"></a><a name="GetAttributes(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)"></a> <dt> o <b>GetAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAttributes</b>(<td><script type="text/javascript"> activateLink('CATListValCATUnicodeString','CATListValCATUnicodeString&amp;')</script> <td><tt>iAttributeNameList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATUnicodeString','CATListValCATUnicodeString&amp;')</script> <td><tt>iAttributeValueList</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  : Use GetAttributes with CATIValue list instead
</dl>
</dl>
<a name="GetDefaultConnection"></a><a name="GetDefaultConnection(CATIMaterialRefCnx*&amp;,CATIType_var&amp;,CATIAdpEnvironment*)"></a> <dt> o <b>GetDefaultConnection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDefaultConnection</b>(<td><script type="text/javascript"> activateLink('CATIMaterialRefCnx','CATIMaterialRefCnx*&amp;')</script> <td><tt>opiCnx</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAdpEnvironment','CATIAdpEnvironment*')</script> <td><tt>ipiEnv</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the default connection among connections of type iType.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiCnx</tt>
   <dd> [out, CATBaseUnknown#Release]   The returned default connection. <br>
   <font color="red">You have to release the pointer after use.</font>
 </dd>
    <dt><tt> iType</tt>
   <dd>   Used to filter connection kind.  <br>
   Connection taken into account will be of type iType or of a derived type from iType.
 </dd>
    <dt><tt> ipiEnv</tt>
   <dd> 	  The environment (if null the current one will be used).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> A default connection found and returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing is returned. The reasons could be 
                      an error, an unvalid iType, there is no connection in given type or
                      among all of the type's connections none is default. </dd>
   </dl>
   
 
  <dt> Example: </dt>
  <dd> <pre class="code"> To create a CATIType. <br> <code><br>
 CATIType_var  spiCnxType;  <br>
 CATCkePLMNavPublicServices::RetrieveKnowledgeType( "dsc_matrefelem_cnx_SmaBehavior", spiCnxType  );   <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>
</dl>
</dl>
<a name="GetMaterialDomain"></a><a name="GetMaterialDomain(CATLISTV(CATIType_var)&amp;,CATListPtrCATBaseUnknown&amp;)"></a> <dt> o <b>GetMaterialDomain</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialDomain</b>(<td> const <script type="text/javascript"> activateLink('CATLISTV(CATIType_var)','CATLISTV(CATIType_var)&amp;')</script> <td><tt>iTypesList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>opDomainList</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of Domains exisiting on this material reference. <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTypesList</tt>
   <dd> 	  A list of identifier used to filter the type of domains wanted. 
 </dd>
    <dt><tt> opDomainList</tt>
   <dd> [out, CATBaseUnknown#Release]	  The returned domains. CATBaseUnknown pointers that can
	  be casted to CATIMaterialDomain. <br>
 <font color="red">You have to release the pointers after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The list has at least a domain pointer.
   <dt>E_FAIL</dt><dd> No domain returned(the list is empty).
   </dl>

 
  <dt> Example: </dt>
  <dd> <pre class="code"> To create the list of CATITypes <br> <code><br>
 CATIType_var spDomSimulationType;  <br>
 CATIType_var spDomCompositesType; <br>  
 CATMaterialTools::GetDomainSimulationType( spDomSimulationType ); <br> 
 CATMaterialTools::GetDomainCompositesType( spDomCompositesType ); <br> 
 CATLISTV(CATIType_var) filterList; <br> 
 filterList.Append( spDomSimulationType ); <br> 
 filterList.Append( spDomCompositesType ); <br>    
 hResult = spMatRef->  GetMaterialDomain( filterList,  piDomainList ); <br>
 ......... <br>
 for(...) <br>
 { 
 <blockquote>
	    piDomainList[i]->Release(); piDomainList[i] = NULL; 
 </blockquote>
 } <br>
 piDomainList.RemoveAll(); <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATMaterialTools','','CATMaterialTools') </script> <br>
</dl>
</dl>
<a name="RemoveConnection"></a><a name="RemoveConnection(CATIMaterialRefCnx*&amp;)"></a> <dt> o <b>RemoveConnection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveConnection</b>(<td><script type="text/javascript"> activateLink('CATIMaterialRefCnx','CATIMaterialRefCnx*&amp;')</script> <td><tt>ipiCnx</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Remove the given connection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiCnx</tt>
   <dd> 	  The connection to remove. <br>
   <b>WARNING:</b> After this call all pointers on the connection object are invalid. <br>
            You should not use any of them afterwards except for Releasing. <br>	
   <b>WARNING:</b> After deleting a default connection, there may not be anymore default
            among remaining connections. <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The connection was successfully removed.
   <dl><dt>E_INVALIDARG</dt><dd> The given connection is not owned by this material.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<a name="SetAttributes"></a><a name="SetAttributes(CATListOfCATUnicodeString&amp;,CATLISTV(CATIValue_var)&amp;)"></a> <dt> o <b>SetAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAttributes</b>(<td> const <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>iListName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATIValue_var)','CATLISTV(CATIValue_var)&amp;')</script> <td><tt>iListValue</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the list of attributes and associated values. <br>
 This method should be prefered over SetAttributes with list of CATUnicodeStrings as it
 is robust to customization of the PLMEntity. <br>
 It is prefered to use a CATICkeObject instead. <br>
 
<dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> With a CATICkeObject <br> <code><br>
 CATICkeObject * piInstance  =  NULL; <br> 
 if(SUCCEEDED(piMatRef->QueryInterface(IID_CATICkeObject, (void**)& piInstance)) && piInstance)  <br>
 {  
 <blockquote>
	    CATUnicodeString attributeDisc = "V_discipline";  <br>
	    CATCkeObjectAttrWriteServices::SetValueWithString(piInstance, attributeDisc, CoreOrCovering);  <br>
     ......... <br>
	    piInstance -> Release(); piInstance = NULL;  
 </blockquote>
 }  <br>
 </code><br>
 </pre></dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>
</dl>
</dl>
<a name="SetAttributes"></a><a name="SetAttributes(CATListValCATUnicodeString&amp;,CATListValCATUnicodeString&amp;)"></a> <dt> o <b>SetAttributes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAttributes</b>(<td><script type="text/javascript"> activateLink('CATListValCATUnicodeString','CATListValCATUnicodeString&amp;')</script> <td><tt>iAttributeNameList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATUnicodeString','CATListValCATUnicodeString&amp;')</script> <td><tt>iAttributeValueList</tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  : Use SetAttributes with CATIValue list instead
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIMaterialReference.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMatInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

