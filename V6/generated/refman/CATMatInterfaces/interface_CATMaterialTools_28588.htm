<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATMatInterfaces Interface CATMaterialTools</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATMatInterfaces.htm" href="../CATMatInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATMatInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATMaterialTools"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATMatInterfaces Interface CATMaterialTools</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATMaterialTools_28588','CATMaterialTools','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATMaterialTools</b>
</p>
<p>
<b><i>  Class method to provide services on Material.</i></b><br>

 <b>Role:</b> Class designed to provide information about the Material.<br>
 <p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDomain(CATIMaterialDomainContent*,CATIMaterialDomain*&amp;)"><b>GetDomain</b></a>(CATIMaterialDomainContent*,CATIMaterialDomain*&amp;)
<dd>  Retrieves the domain from its applicative data.
 <dt> o 
    <a href="#GetDomainCompositesType(CATIType_var&amp;)"><b>GetDomainCompositesType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to composite domains.
 <dt> o 
    <a href="#GetDomainDraftingType(CATIType_var&amp;)"><b>GetDomainDraftingType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to drafting domains.
 <dt> o 
    <a href="#GetDomainInstance(CATIMaterialDomain*,CATIPLMNavEntity*&amp;)"><b>GetDomainInstance</b></a>(CATIMaterialDomain*,CATIPLMNavEntity*&amp;)
<dd>  Retrieves the domain instance from a domain.
 <dt> o 
    <a href="#GetDomainLinearElasticType(CATIType_var&amp;)"><b>GetDomainLinearElasticType</b></a>(CATIType_var&amp;)
<dd>  
 <dt> o 
    <a href="#GetDomainRenderingType(CATIType_var&amp;)"><b>GetDomainRenderingType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to rendering domains.
 <dt> o 
    <a href="#GetDomainSimulationType(CATIType_var&amp;)"><b>GetDomainSimulationType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to simulation domains.
 <dt> o 
    <a href="#GetMaterialCoreType(CATIType_var&amp;)"><b>GetMaterialCoreType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to material Core.
 <dt> o 
    <a href="#GetMaterialCoveringType(CATIType_var&amp;)"><b>GetMaterialCoveringType</b></a>(CATIType_var&amp;)
<dd>  Get the CATIType associated to material Covering.
 <dt> o 
    <a href="#GetMaterialFactory(CATIMaterialReferenceFactory*&amp;)"><b>GetMaterialFactory</b></a>(CATIMaterialReferenceFactory*&amp;)
<dd>  Retrieves a Factory to create new material.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDomain"></a><a name="GetDomain(CATIMaterialDomainContent*,CATIMaterialDomain*&amp;)"></a> <dt> o <b>GetDomain</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomain</b>(<td><script type="text/javascript"> activateLink('CATIMaterialDomainContent','CATIMaterialDomainContent*')</script> <td><tt>ipiCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMaterialDomain','CATIMaterialDomain*&amp;')</script> <td><tt>opiDom</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the domain from its applicative data. <br>
 In the case of domain based on V5SimuRep. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiCont</tt>
   <dd>   The applicative data which belong to a given Domain.
 </dd>
    <dt><tt> opiDom</tt>
   <dd> [out , CATBaseUnknown#Release]	The domain owner of ipiFeat. <br>
 <font color="red">You have to release the pointer after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The domain was successfully retrieved.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetDomainCompositesType"></a><a name="GetDomainCompositesType(CATIType_var&amp;)"></a> <dt> o <b>GetDomainCompositesType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainCompositesType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospDomCompositesType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to composite domains. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospDomCompositesType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetDomainDraftingType"></a><a name="GetDomainDraftingType(CATIType_var&amp;)"></a> <dt> o <b>GetDomainDraftingType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainDraftingType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospDomDraftingType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to drafting domains. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospDomDraftingType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetDomainInstance"></a><a name="GetDomainInstance(CATIMaterialDomain*,CATIPLMNavEntity*&amp;)"></a> <dt> o <b>GetDomainInstance</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainInstance</b>(<td><script type="text/javascript"> activateLink('CATIMaterialDomain','CATIMaterialDomain*')</script> <td><tt>ipiDom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMNavEntity','CATIPLMNavEntity*&amp;')</script> <td><tt>opiDomInst</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the domain instance from a domain.
 It is unique as specified in metadata (once instantiable).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDom</tt>
   <dd>   A material domain in session.
 </dd>
    <dt><tt> opiDomInst[out</tt>
   <dd> , CATBaseUnknown#Release]   The domain instance. <br>
 <font color="red">You have to release the pointer after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The domain instance is successfully returned.
   <dt>E_INVALIDARG</dt><dd> ipiDom is NULL.
   <dt>E_FAIL</dt><dd>The operation failed. The domain is loaded in session without its material.
   </dl>
</dl>
</dl>
<a name="GetDomainLinearElasticType"></a><a name="GetDomainLinearElasticType(CATIType_var&amp;)"></a> <dt> o <b>GetDomainLinearElasticType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainLinearElasticType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospDomLinearElasticType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R417 Use GetDomainSimulationType to retrieve Simulation Domain instead

 Get the CATIType associated to linear elastic domains. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospDomLinearElasticType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetDomainRenderingType"></a><a name="GetDomainRenderingType(CATIType_var&amp;)"></a> <dt> o <b>GetDomainRenderingType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainRenderingType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospDomRenderingType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to rendering domains. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospDomRenderingType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetDomainSimulationType"></a><a name="GetDomainSimulationType(CATIType_var&amp;)"></a> <dt> o <b>GetDomainSimulationType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDomainSimulationType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospDomSimulationType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to simulation domains. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospDomSimulationType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetMaterialCoreType"></a><a name="GetMaterialCoreType(CATIType_var&amp;)"></a> <dt> o <b>GetMaterialCoreType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialCoreType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospMatCoreType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to material Core. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospMatCoreType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetMaterialCoveringType"></a><a name="GetMaterialCoveringType(CATIType_var&amp;)"></a> <dt> o <b>GetMaterialCoveringType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialCoveringType</b>(<td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>ospMatCoveringType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the CATIType associated to material Covering. <br>
 Returns the root type. If those types have been derived use the Knowledge APIs to
 retrieve it. <br> 
 Use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','RetrieveKnowledgeType','CATCkePLMNavPublicServices.RetrieveKnowledgeType') </script> if you want to retrieve the type. <br> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ospMatCoveringType</tt>
   <dd>   A smart pointer to the type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The type was successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetMaterialFactory"></a><a name="GetMaterialFactory(CATIMaterialReferenceFactory*&amp;)"></a> <dt> o <b>GetMaterialFactory</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialFactory</b>(<td><script type="text/javascript"> activateLink('CATIMaterialReferenceFactory','CATIMaterialReferenceFactory*&amp;')</script> <td><tt>opiFact</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a Factory to create new material.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiFact</tt>
   <dd> [out, CATBaseUnknown#Release]   A pointer to the created factory .  <br>
 <font color="red">You have to release the pointer after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The factory is successfully returned.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMaterialTools.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMatIntfServices</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

