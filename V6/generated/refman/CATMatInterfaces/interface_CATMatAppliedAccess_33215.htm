<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATMatInterfaces Interface CATMatAppliedAccess</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATMatInterfaces.htm" href="../CATMatInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATMatInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATMatAppliedAccess"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATMatInterfaces Interface CATMatAppliedAccess</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATMatAppliedAccess_33215','CATMatAppliedAccess','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATMatAppliedAccess</b>
</p>
<p>
<b><i>  Services class to apply or retrieve material on support.</i></b><br>

 <b>Role</b>: Use these services to apply materials on objects.
 <br>
 Use also these services to retrieve materials applied on objects. 
 <br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('','','') </script>
<script type="text/javascript"> activateLinkAnchor('CATIMaterialReference','','CATIMaterialReference') </script> <p>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAllMaterialCovering(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)"><b>GetAllMaterialCovering</b></a>(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)
<dd>  Returns the stack of all covering materials that cover support defined in ipObjInCont.
 <dt> o 
    <a href="#GetMaterialCore(CATOmbObjectInContext* const,CATBaseUnknown*&amp;,CATUnicodeString&amp;)"><b>GetMaterialCore</b></a>(CATOmbObjectInContext* const,CATBaseUnknown*&amp;,CATUnicodeString&amp;)
<dd>  Returns the core material applied on the provided support or inherited from an upper support in the same context.
 <dt> o 
    <a href="#GetMaterialCovering(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)"><b>GetMaterialCovering</b></a>(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)
<dd>  Returns the list of covering materials applied on the support defined in ipObjInCont.
 <dt> o 
    <a href="#RemoveAppliedMaterial(CATIMatNewMaterialInstance*)"><b>RemoveAppliedMaterial</b></a>(CATIMatNewMaterialInstance*)
<dd>  Removes applied material.
 <dt> o 
    <a href="#SetMaterialCore(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)"><b>SetMaterialCore</b></a>(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)
<dd>  Applies a core material on the support defined in ipObjInCont.
 <dt> o 
    <a href="#SetMaterialCovering(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)"><b>SetMaterialCovering</b></a>(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)
<dd>  Applies a covering material on the support defined in ipObjInCont.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAllMaterialCovering"></a><a name="GetAllMaterialCovering(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetAllMaterialCovering</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllMaterialCovering</b>(<td> const <script type="text/javascript"> activateLink('CATOmbObjectInContext*','CATOmbObjectInContext* const')</script> <td><tt>ipObjInCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oMaterialList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iClassName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the stack of all covering materials that cover support defined in ipObjInCont. <br>
 Takes into account covering materials defined in the context of ipObjInCont, and also in 
 lower contexts (if they exist). <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObjInCont</tt>
   <dd>   Defines the support and its context.
 </dd>
    <dt><tt> oMaterialList</tt>
   <dd> [out, CATBaseUnknown#Release]    The list of materials (references or applied-materials). <br>
   First material in list will be the upper covering material layer (the visible one). <br>
   <font color="red">You have to release pointers after use.</font>
 </dd>
    <dt><tt> iClassName</tt>
   <dd>   the type of the returned CATBaseUnknown in list, either: <br>
   - CATIMaterialReference::ClassName() (to get the reference material directly). <br>
   - CATIMatNewMaterialInstance::ClassName()  (to get the applied material, instance). <br>
	  - CATIMaterialVector::ClassName()  (to get the vector). <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> At least one pointer is in the returned list.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetMaterialCore"></a><a name="GetMaterialCore(CATOmbObjectInContext* const,CATBaseUnknown*&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetMaterialCore</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialCore</b>(<td> const <script type="text/javascript"> activateLink('CATOmbObjectInContext*','CATOmbObjectInContext* const')</script> <td><tt>ipObjInCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>opiMaterial</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iClassName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the core material applied on the provided support or inherited from an upper support in the same context.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObjInCont</tt>
   <dd>   Defines the support and its context. <br>
   When the support (target of CATOmbObjectInContext) is an element inside a RepReference, a RepInstance must be defined.
 </dd>
    <dt><tt> opiMaterial</tt>
   <dd>  [out, CATBaseUnknown#Release]   The returned material (reference or applied-material). <br>
   <font color="red">You have to release the pointer after use.</font>
 </dd>
    <dt><tt> iClassName</tt>
   <dd>   the type of the returned CATBaseUnknown, either: <br>
   - CATIMaterialReference::ClassName() (to get the reference material directly). <br>
   - CATIMatNewMaterialInstance::ClassName() (to get the applied-material, instance). <br>
	  - CATIMaterialVector::ClassName()  (to get the vector). <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> A pointer is successfully returned in opiMaterial.
   <dl><dt>E_INVALIDARG</dt><dd> If ipObjInCont is NULL or if ipObjInCont is not valid for materials. <br>
                                 If iClassName is neither CATIMaterialReference nor CATIMatNewMaterialInstance. </dd>
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="GetMaterialCovering"></a><a name="GetMaterialCovering(CATOmbObjectInContext* const,CATListPtrCATBaseUnknown&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetMaterialCovering</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMaterialCovering</b>(<td> const <script type="text/javascript"> activateLink('CATOmbObjectInContext*','CATOmbObjectInContext* const')</script> <td><tt>ipObjInCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATBaseUnknown','CATListPtrCATBaseUnknown&amp;')</script> <td><tt>oMaterialList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iClassName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of covering materials applied on the support defined in ipObjInCont. <br>
 Only covering materials defined in the context of ipObjInCont will be retrieved. <br>
 If you expect get covering material from all contexts,
 use 
<script type="text/javascript"> activateLinkAnchor('CATIMatNewMaterialSupport','GetAllMaterialCovering','CATIMatNewMaterialSupport.GetAllMaterialCovering') </script> instead. <br> For more explanation, refer to the CAA encyclopedia.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObjInCont</tt>
   <dd>   Defines the support and its context.
 </dd>
    <dt><tt> oMaterialList</tt>
   <dd> [out, CATBaseUnknown#Release]    The list of materials (references or applied-materials). <br>
	   First material in the list is the upper covering material layer. <br>
   <font color="red">You have to release pointers after use.</font>
 </dd>
    <dt><tt> iClassName</tt>
   <dd>   the type of the returned CATBaseUnknown in list, either: <br>
   - CATIMaterialReference::ClassName() (to get the reference material directly). <br>
   - CATIMatNewMaterialInstance::ClassName()  (to get the applied material, instance). 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> At least one pointer is in the returned list.
   <dt>E_FAIL</dt><dd>The operation failed. Nothing returned.
   </dl>
</dl>
</dl>
<a name="RemoveAppliedMaterial"></a><a name="RemoveAppliedMaterial(CATIMatNewMaterialInstance*)"></a> <dt> o <b>RemoveAppliedMaterial</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveAppliedMaterial</b>(<td><script type="text/javascript"> activateLink('CATIMatNewMaterialInstance','CATIMatNewMaterialInstance*')</script> <td><tt>ipiAppliedMaterial</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes applied material. <br>
 Warning: Release ipiAppliedMaterial after RemoveAppliedMaterial return. But do not use ipiAppliedMaterial 
 object anymore, no behavior guarented.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiAppliedMaterial</tt>
   <dd>   Defines the applied material that will be removed.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The operation of removing succeeded.
   <dl><dt>E_INVALIDARG</dt><dd> ipiAppliedMaterial is NULL.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<a name="SetMaterialCore"></a><a name="SetMaterialCore(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)"></a> <dt> o <b>SetMaterialCore</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMaterialCore</b>(<td> const <script type="text/javascript"> activateLink('CATOmbObjectInContext*','CATOmbObjectInContext* const')</script> <td><tt>ipObjInCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMaterialGeneric','CATIMaterialGeneric*')</script> <td><tt>ipiMaterial</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oErrorCode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplace</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMatNewMaterialInstance','CATIMatNewMaterialInstance**')</script> <td><tt>opiMatCnx</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Applies a core material on the support defined in ipObjInCont.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObjInCont</tt>
   <dd>   Defines the support and the context used for applying material. <br>
   The context is the root reference defined by ipObjInCont. <br>
   If the support (target of ipObjInCont) is an element inside a RepReference then a RepInstance must 
   be provided in ipObjInCont to make it valid.
 </dd>
    <dt><tt> iCoreMaterial</tt>
   <dd>   The material reference to be applied on the support.
 </dd>
    <dt><tt> oErrorCode</tt>
   <dd>   An error code.
 </dd>
    <dt><tt> iReplace</tt>
   <dd>    Need to replace an already existing core material on that support.
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd> Do not replace existing core material (nothing is done).
   <dt>1</dt><dd> Replace existing core material.
   </dl>
 </dd>
    <dt><tt> opiMatCnx</tt>
   <dd> [out, CATBaseUnknown#Release]   If it is valued : return in this variable the new Cnx created. <br>
   <font color="red">You have to release pointers after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The operation of applying succeeded.
   <dl><dt>E_INVALIDARG</dt><dd> ipObjInCont is NULL or ipiMaterial is NULL.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<a name="SetMaterialCovering"></a><a name="SetMaterialCovering(CATOmbObjectInContext* const,CATIMaterialGeneric*,int&amp;,int,CATIMatNewMaterialInstance**)"></a> <dt> o <b>SetMaterialCovering</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMaterialCovering</b>(<td> const <script type="text/javascript"> activateLink('CATOmbObjectInContext*','CATOmbObjectInContext* const')</script> <td><tt>ipObjInCont</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMaterialGeneric','CATIMaterialGeneric*')</script> <td><tt>ipiMaterial</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oErrorCode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplace</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIMatNewMaterialInstance','CATIMatNewMaterialInstance**')</script> <td><tt>opiMatCnx</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Applies a covering material on the support defined in ipObjInCont.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObjInCont</tt>
   <dd>   Defines the support and the context used for applying material. <br>
   The context is the root reference defined by ipObjInCont.
 </dd>
    <dt><tt> iCoreMaterial</tt>
   <dd>   The material reference to be applied on the support.
 </dd>
    <dt><tt> oErrorCode</tt>
   <dd>   An error code.
 </dd>
    <dt><tt> iReplace</tt>
   <dd>    Need to replace an already existing covering material on that support.
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd> Do not replace existing core material (nothing is done).
   <dt>1</dt><dd> Replace existing core material.
   </dl>
 </dd>
    <dt><tt> opiMatCnx</tt>
   <dd> [out, CATBaseUnknown#Release]   If it is valued : return in this variable the new Cnx created. <br>
   <font color="red">You have to release pointers after use.</font>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     An HRESULT
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd> The operation of applying succeeded.
   <dl><dt>E_INVALIDARG</dt><dd> ipObjInCont is NULL or ipiMaterial is NULL.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMatAppliedAccess.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMatInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

