<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFmtUIInterfaces Interface CATIFmtViewManager</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFmtUIInterfaces.htm" href="../CATFmtUIInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFmtUIInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIFmtViewManager"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFmtUIInterfaces Interface CATIFmtViewManager</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFmtViewManager_34539','CATIFmtViewManager','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFmtViewManager</b>
</p>
<p>
<b><i> Interface to be used to manage Finite Element visualization.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddViewChangeCallback(CATBaseUnknown*,CATSubscriberMethod)"><b>AddViewChangeCallback</b></a>(CATBaseUnknown*,CATSubscriberMethod)
<dd>  Adds a callback for a given event subscriber when the Finite Element visualization mode is changed.
 <dt> o 
    <a href="#GetViewMode()"><b>GetViewMode</b></a>()
<dd>  Query for the currunt Finite Element visualization mode.
 <dt> o 
    <a href="#IsGroupVisualisationActive()"><b>IsGroupVisualisationActive</b></a>()
<dd>  Query if groups are visualized.
 <dt> o 
    <a href="#RemoveViewChangeCallback(CATBaseUnknown*,CATCallback)"><b>RemoveViewChangeCallback</b></a>(CATBaseUnknown*,CATCallback)
<dd>  Removes a visualization mode change callback with a given identifier added for a given event subscriber.
 <dt> o 
    <a href="#SendViewChangeNotification()"><b>SendViewChangeNotification</b></a>()
<dd>  Send a notification informing that the visualization mode has changed (see AddViewChangeCallback).
 <dt> o 
    <a href="#SetCustomVisualization(CATIFmtCustomVisualization*)"><b>SetCustomVisualization</b></a>(CATIFmtCustomVisualization*)
<dd>  Sets and activates a custom Finite Element visualization mode.
 <dt> o 
    <a href="#SetGroupVisualisation(CATBoolean)"><b>SetGroupVisualisation</b></a>(CATBoolean)
<dd>  Manage the visualisation of groups (currently limited to element's groups).
 <dt> o 
    <a href="#SetPickMode(CATBoolean)"><b>SetPickMode</b></a>(CATBoolean)
<dd>  Set the sensitivity to picking of the entire mesh (nodes and elements).
 <dt> o 
    <a href="#SetViewMode(CATFmtViewMode)"><b>SetViewMode</b></a>(CATFmtViewMode)
<dd>  Sets and activates a given Finite Element visualization mode.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddViewChangeCallback"></a><a name="AddViewChangeCallback(CATBaseUnknown*,CATSubscriberMethod)"></a> <dt> o <b>AddViewChangeCallback</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallback','CATCallback')</script>  <b>AddViewChangeCallback</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iClient</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSubscriberMethod','CATSubscriberMethod')</script> <td><tt>iMethod</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a callback for a given event subscriber when the Finite Element visualization mode is changed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClient</tt>
   <dd>   The event subscriber, that is the object that features the 
   <tt>iMethod</tt> method called whenever the visualization mode is changed.
 </dd>
    <dt><tt> iMethod</tt>
   <dd>   The subscriber's method to call whenever the visualization mode is changed.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The identifier of the created callback.
</dl>
</dl>
<a name="GetViewMode"></a><a name="GetViewMode()"></a> <dt> o <b>GetViewMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATFmtViewMode','CATFmtViewMode')</script>  <b>GetViewMode</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Query for the currunt Finite Element visualization mode.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The current visualization mode:
   <dl><dt>CATFmtViewNormal</dt><dd>Elements are displayed using their <b>Mesh Part</b> color.
   <dt>CATFmtViewQuality3Color</dt><dd>Elements are displayed using three different colors based on results of quality checks (good, poor, bad).
   <dt>CATFmtViewOrientation</dt><dd>Surface elements are displayed using two different colors for each side.
   <dt>CATFmtViewCustom</dt><dd>Surface elements are displayed using custom colors.
   </dl>
</dl>
</dl>
<a name="IsGroupVisualisationActive"></a><a name="IsGroupVisualisationActive()"></a> <dt> o <b>IsGroupVisualisationActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsGroupVisualisationActive</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Query if groups are visualized.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the groups visualization status.   <br><b>Legal values</b>: 
   <dl><dt>TRUE</dt><dd>Groups are visualized.
   <dt>FALSE</dt><dd>Groups are not visualized.</dl>
</dl>
</dl>
<a name="RemoveViewChangeCallback"></a><a name="RemoveViewChangeCallback(CATBaseUnknown*,CATCallback)"></a> <dt> o <b>RemoveViewChangeCallback</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveViewChangeCallback</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iClient</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCallback','CATCallback')</script> <td><tt>iId</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a visualization mode change callback with a given identifier added for a given event subscriber.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClient</tt>
   <dd>   The event subscriber
 </dd>
    <dt><tt> iId</tt>
   <dd>   The identifier of the callback to remove.
   <br><b>Legal values</b>: This identifier was returned by
   the </dd>
<script type="text/javascript"> activateLinkAnchor('','AddViewChangeCallback','AddViewChangeCallback') </script> method.
</dl>
</dl>
</dl>
<a name="SendViewChangeNotification"></a><a name="SendViewChangeNotification()"></a> <dt> o <b>SendViewChangeNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SendViewChangeNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Send a notification informing that the visualization mode has changed (see AddViewChangeCallback).
</dl>
<a name="SetCustomVisualization"></a><a name="SetCustomVisualization(CATIFmtCustomVisualization*)"></a> <dt> o <b>SetCustomVisualization</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCustomVisualization</b>(<td><script type="text/javascript"> activateLink('CATIFmtCustomVisualization','CATIFmtCustomVisualization*')</script> <td><tt>iCustomVisu</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets and activates a custom Finite Element visualization mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCustomVisu</tt>
   <dd>   Interface to be used to customize visualization.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The custom visualization have been succesfully activated.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<a name="SetGroupVisualisation"></a><a name="SetGroupVisualisation(CATBoolean)"></a> <dt> o <b>SetGroupVisualisation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGroupVisualisation</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iActive</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Manage the visualisation of groups (currently limited to element's groups).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iActive</tt>
   <dd>   Groups visualization status.
   <br><b>Legal values</b>: 
   <dl><dt>TRUE</dt><dd>Activate groups visualization.
   <dt>FALSE</dt><dd>Deactivate groups visualization.</dl></dd>
</dl>
</dl>
</dl>
<a name="SetPickMode"></a><a name="SetPickMode(CATBoolean)"></a> <dt> o <b>SetPickMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPickMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iPickable</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Set the sensitivity to picking of the entire mesh (nodes and elements).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPickable</tt>
   <dd>   Picking sensitivity.
   <br><b>Legal values</b>: 
   <dl><dt>TRUE</dt><dd>Nodes and elements are not sensitive to picking.
   <dt>FALSE</dt><dd>Nodes and elements can be picked.</dl></dd>
</dl>
</dl>
</dl>
<a name="SetViewMode"></a><a name="SetViewMode(CATFmtViewMode)"></a> <dt> o <b>SetViewMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetViewMode</b>(<td><script type="text/javascript"> activateLink('CATFmtViewMode','CATFmtViewMode')</script> <td><tt>iViewMode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets and activates a given Finite Element visualization mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iViewMode</tt>
   <dd>   Visualization mode to activate.
   <br><b>Legal values</b>: 
   <dl><dt>CATFmtViewNormal</dt><dd>Elements are displayed using their <b>Mesh Part</b> color.
   <dt>CATFmtViewQuality3Color</dt><dd>Elements are displayed using three different colors based on results of quality checks (good, poor, bad).
   <dt>CATFmtViewOrientation</dt><dd>Surface elements are displayed using two different colors for each side.</dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The visualization mode have been succesfully activated.
   <dt>E_FAIL</dt><dd>The operation failed.
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFmtViewManager.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFmtUIInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

