<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPLMUpdateUseItf Interface CATIPLMUpdateEngine</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPLMUpdateUseItf.htm" href="../CATPLMUpdateUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPLMUpdateUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIPLMUpdateEngine"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPLMUpdateUseItf Interface CATIPLMUpdateEngine</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPLMUpdateEngine_35521','CATIPLMUpdateEngine','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPLMUpdateEngine</b>
</p>
<p>
<b><i> Interface representing representing a PLMUpdate engine, allowing
 to read the global status of an object and to globally update
 this object.</i></b><br>


 <br><b>Role</b>:
   CATIPLMUpdateEngine interface allows to read the global status
   of an object and to globally update this object. Components that
   implement CATIPLMUpdateEngine are CATPLMUpdateEngine, generated
   thanks to the method InstantiateUpdateEngine in the
   CATPLMUpdateFactory class.
 <p>
   Do not forget that only one PLMUpdate engine can be used at each time.

 <dl>
  <dt> Example: </dt>
  <dd> <pre class="code">  CATIPLMUpdateEngine* engine = NULL;
  HRESULT rc = CATPLMUpdateFactory::InstantiateUpdateEngine(engine);
  if (S_OK == rc && (engine != NULL))
  {
    if (S_OK == engine->Init(iRootActor))
    {
      CATPLMUpdateStatus status = CATIPLMUpdateEngine::Undefined;
      if (S_OK == engine->GetGlobalPLMStatus(status))
      {
        switch(status)
        {
          case CATIPLMUpdateEngine::UpToDate:
          case CATIPLMUpdateEngine::UpToDateWithWarnings:
            break; // Already up to date.
          case CATIPLMUpdateEngine::OutOfDate:
          case CATIPLMUpdateEngine::OutOfDateDateWithWarnings:
            {
              HRESULT updRc = engine->GlobalPLMUpdate();
              if (S_OK == updRc)
              {
                ; // update successfull.
              }
              else if (S_FALSE == updRc)
              {
                ; // update successfull with warnings.
              }
              else if (E_FAIL == updRc)
              {
                ; // update unsuccessfull (errors).
              }
              else
                ; // Unexpected error management.
            }
          case CATIPLMUpdateEngine::Error:
            break; // Error management.
          case CATIPLMUpdateEngine::Undefined:
            break; // Unexpected error management.
        }
     }
     else
       ; // Unexpected error management.
    }
    else
      ; // Unexpected error management.

    // Do not forget to release the engine:
    engine->Release();
    engine = NULL;
  }
  else
    ; // Unexpected error management.

 </pre></dd>
<script type="text/javascript"> activateLinkAnchor('CATPLMUpdateFactory','','CATPLMUpdateFactory') </script>, CATPLMUpdateFactory#InstantiateUpdateEngine
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetGlobalPLMStatus(CATPLMUpdateStatus&amp;)"><b>GetGlobalPLMStatus</b></a>(CATPLMUpdateStatus&amp;)
<dd>   Returns global update status of the root actor.
 <dt> o 
    <a href="#GlobalPLMUpdate()"><b>GlobalPLMUpdate</b></a>()
<dd>   Globally update the root actor.
 <dt> o 
    <a href="#Init(CATBaseUnknown*)"><b>Init</b></a>(CATBaseUnknown*)
<dd>   Initializes the update process on the given root actor.
 <dt> o 
    <a href="#SetOptimizationMode(OptimMode)"><b>SetOptimizationMode</b></a>(OptimMode)
<dd>   Set the optimization mode.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATPLMUpdateStatus"><b>CATPLMUpdateStatus</b></a>
<dd>  Enumeration of possible statuses of the PLMUpdate engine (statuses returned by the
 GetGlobalPLMStatus method).
 <dt> o 
    <a href="#OptimMode"><b>OptimMode</b></a>
<dd>  PCS optimization mode (unload strategy).
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetGlobalPLMStatus"></a><a name="GetGlobalPLMStatus(CATPLMUpdateStatus&amp;)"></a> <dt> o <b>GetGlobalPLMStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGlobalPLMStatus</b>(<td><script type="text/javascript"> activateLink('CATPLMUpdateStatus','CATPLMUpdateStatus&amp;')</script> <td><tt>oGlobalStatus</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns global update status of the root actor.

 <br><b>Role</b>: Compute the global PLMUpdate status of the graph, which is
 equivalent to the global update status of the root actor.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oGlobalStatus</tt>
   <dd> [out]   The returned global PLMUpdate status.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok,
   <code>E_UNEXPECTED</code> if a serious error occured, if the engine is not
   inited for example.
</dl>
</dl>
<a name="GlobalPLMUpdate"></a><a name="GlobalPLMUpdate()"></a> <dt> o <b>GlobalPLMUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GlobalPLMUpdate</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Globally update the root actor.

 <br><b>Role</b>: This method globally update all actors of the PLMUpdate graph
 in the right order. After this update, if no error occured, the root actor is
 globally up to date.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if update has ended successfully, with no error or warning.
   <code>S_FALSE</code> if update has ended successfully, with no error but at
   least one warning.
   <code>E_FAIL</code> if update has ended on at least one error.
   <code>E_UNEXPECTED</code> if a serious error occured, if the engine is not
   inited for example.
</dl>
</dl>
<a name="Init"></a><a name="Init(CATBaseUnknown*)"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Init</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iRootActor</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Initializes the update process on the given root actor.

 <br><b>Role</b>: This method build the PLMUpdate graph from the given
 root actor. The graph is composed of the root actor and of all its
 direct and indirect dependencies.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRootActor</tt>
   <dd> [in]   The root actor from which the PLMUpdate graph will be computed. in the
   CAA scope, this actor must be a product reference or a 3DShape representation
   reference.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok,
   <code>E_INVALIDARG</code> if iRootActor is not a product reference or a
   3DShape representation reference,
   <code>E_UNEXPECTED</code> if a serious error occured.
</dl>
</dl>
<a name="SetOptimizationMode"></a><a name="SetOptimizationMode(OptimMode)"></a> <dt> o <b>SetOptimizationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetOptimizationMode</b>(<td><script type="text/javascript"> activateLink('OptimMode','OptimMode')</script> <td><tt>iOptimMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Set the optimization mode.

 <br><b>Role</b>: Set the optimization mode. The default value for optimization
 mode is IntermediateWithPartialUnload.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOptimMode</tt>
   <dd> [in]   The optimization mode that will be used during the global PLMUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok,
   <code>E_INVALIDARG</code> if iOptimMode is not a valid optimization mode,
   <code>E_UNEXPECTED</code> if a serious error occured.
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATPLMUpdateStatus"> <dt> o <b>CATPLMUpdateStatus</b>
<dl>
  <dd>
<pre>
enum <b>CATPLMUpdateStatus</b> {
  Status_UndefinedStatus,
  Status_UpToDate,
  Status_OutOfDate,
  Status_UpToDateWithWarnings,
  Status_OutOfDateDateWithWarnings,
  Status_Error
}
</pre>
 Enumeration of possible statuses of the PLMUpdate engine (statuses returned by the
 GetGlobalPLMStatus method). notions of persistent errors or warnings and volatile
 errors or warnings are introduced. A persistent error or warning is detected by the
 GetGlobalPLMStatus, a volatile error or warning is only detected during the update
 (GlobalPLMUpdate method), it is a runtime error or warning. The GlobalPLMUpdate method
 and the following enumeration only manage persistent errors.
</dl>
<a name="OptimMode"> <dt> o <b>OptimMode</b>
<dl>
  <dd>
<pre>
enum <b>OptimMode</b> {
  Optim_UndefinedMode,
  Optim_Memory,
  Optim_Intermediate,
  Optim_CPU,
  Optim_MemoryWithPartialUnload,
  Optim_IntermediateWithPartialUnload
}
</pre>
 PCS optimization mode (unload strategy). UndefinedMode: undefined optimization mode (should never be returned or given as input parameter).
 CPU: no unload.
 Memory: After the unit update of an actor, keep loaded load dependencies that have one
   (or several) load clients out of date in the current step and unload the other ones.
 MemoryWithPartialUnload: After the unit update of an actor, keep loaded load dependencies
   that have one (or several) load clients out of date in the current step and unload the
   other ones that were unloaded at the beginning of the update.
 Intermediate: After the unit update of an actor, keep loaded load dependencies that have
   one (or several) load clients out of date somewhere in the update graph and unload the
   other ones.
 IntermediateWithPartialUnload: After the unit update of an actor, keep loaded load
   dependencies that have one (or several) load clients out of date somewhere in the update
   graph and unload the other ones that were unloaded at the beginning of the update.

 The default option to use is IntermediateWithPartialUnload.
</dl>
<hr>
 This object is included in the file: <b>CATIPLMUpdateEngine.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMUpdateUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

