<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPLMUpdateUseItf Interface CATIPLMUpdateActor</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPLMUpdateUseItf.htm" href="../CATPLMUpdateUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPLMUpdateUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIPLMUpdateActor"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPLMUpdateUseItf Interface CATIPLMUpdateActor</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPLMUpdateActor_33856','CATIPLMUpdateActor','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../CATPLMUpdateUseItf/class_CATPLMUpdateActorADP_33550.htm">CATPLMUpdateActorADP</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIPLMUpdateActor</b>
</p>
<p>
<b><i> Interface to implement new update actors to integrate in the update graph
 and to participate in the update process.</i></b><br>


 <p><b>BOA information</b>: this interface can be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the "Object Modeler" chapter in the CAA Encyclopedia.</p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetErrorInCycleBehavior(ErrorInCycleBehavior&amp;)"><b>GetErrorInCycleBehavior</b></a>(ErrorInCycleBehavior&amp;)
<dd>  Returns the behavior of this actor in case the update fails (with an error).
 <dt> o 
    <a href="#GetInDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"><b>GetInDependencies</b></a>(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)
<dd>  Retrieves the list of IN dependencies of this actor.
 <dt> o 
    <a href="#GetOtherLoadDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;,LoadDepType&amp;)"><b>GetOtherLoadDependencies</b></a>(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;,LoadDepType&amp;)
<dd>  Retrieves the list of Load dependencies of this actor.
 <dt> o 
    <a href="#GetOtherRelatedActors(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"><b>GetOtherRelatedActors</b></a>(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)
<dd>  Retrieves the list of Other related actors of this actor.
 <dt> o 
    <a href="#GetOutDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"><b>GetOutDependencies</b></a>(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)
<dd>  Retrieves the list of OUT dependencies of this actor.
 <dt> o 
    <a href="#GetPLMComponentsPotentiallyModifiedByUpdate(CATListValCATBaseUnknown_var&amp;)"><b>GetPLMComponentsPotentiallyModifiedByUpdate</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>  Returns all PLM components on which write rights could be needed for update.
 <dt> o 
    <a href="#GetPLMStaticErrors(CATUnicodeString&amp;)"><b>GetPLMStaticErrors</b></a>(CATUnicodeString&amp;)
<dd>  Retrieves a static error or a static warning.
 <dt> o 
    <a href="#GetUnitStatus(CATPLMUpdateStatus&amp;)"><b>GetUnitStatus</b></a>(CATPLMUpdateStatus&amp;)
<dd>  Retrieves unit status of this actor.
 <dt> o 
    <a href="#GetVisibility(ActorVisibility&amp;)"><b>GetVisibility</b></a>(ActorVisibility&amp;)
<dd>  Retrieves the visibility of this actor.
 <dt> o 
    <a href="#IsActive(int&amp;)"><b>IsActive</b></a>(int&amp;)
<dd>  Retrieves the activity of this actor.
 <dt> o 
    <a href="#UnitPLMUpdate(CATUnicodeString&amp;)"><b>UnitPLMUpdate</b></a>(CATUnicodeString&amp;)
<dd>  Updates this actor unitarily.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#ActorVisibility"><b>ActorVisibility</b></a>
<dd>   Enumeration to determine if the current update actor should appear as a node in the displayed update graph
  that can be viewed in the update assistant.
 <dt> o 
    <a href="#CATPLMUpdateStatus"><b>CATPLMUpdateStatus</b></a>
<dd>  Enumeration of possible statuses of the public actor (statuses returned by the
 GetUnitStatus method).
 <dt> o 
    <a href="#ErrorInCycleBehavior"><b>ErrorInCycleBehavior</b></a>
<dd>   Enumeration of the ways in which the node associated to this actor should be dealt with in case an error occurs during
  the unit update of this actor.
 <dt> o 
    <a href="#LoadDepType"><b>LoadDepType</b></a>
<dd>   Enumeration of the ways in which the other load dependencies declared by this actor should be dealt with.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetErrorInCycleBehavior"></a><a name="GetErrorInCycleBehavior(ErrorInCycleBehavior&amp;)"></a> <dt> o <b>GetErrorInCycleBehavior</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetErrorInCycleBehavior</b>(<td><script type="text/javascript"> activateLink('ErrorInCycleBehavior','ErrorInCycleBehavior&amp;')</script> <td><tt>oBehavior</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the behavior of this actor in case the update fails (with an error).

 <br><b>Role</b>: This method returns the behavior of this actor in case it is
   in a complex node, and its update fails. In some case, other actors of the
   same complex node need to be updated first so that the update of the current
   actor succeeds, so we allow the current actor to have its update fail once.

 <br><b>Default Behavior</b>: the actor is in error at the first failed update attempt.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBehavior</tt>
   <dd> [out]   The behavior in case of failure at update.
   StopAtFirst = 0 : the node and the complex node are in error when the update of an actor failed with an error.
   StopAtSecond = 1 : at first error, the actor is considered as out of date, and it is really in error
                      when the update still fails at the second time in the cycle.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetInDependencies"></a><a name="GetInDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"></a> <dt> o <b>GetInDependencies</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInDependencies</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oDep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oListOfLoadMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of IN dependencies of this actor.

 <br><b>Role</b>: This method retrieves a list of IN dependencies, which
   are actors which must be already up to date before updating this actor.
   Note that all the IN dependencies may not be in the returned list, as
   they can also be integrated in the update graph through their own
   GetOutDependencies for example.

 <br><b>Default Behavior</b>: the default behavior of this method is to append
   nothing in the output list oDep.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDep</tt>
   <dd> [out]   The list of IN dependencies. Those elements should adhere either to
   CATIAssemblyUpdateActor, or to CATIPLMUpdateActor.

 </dd>
    <dt><tt> oListOfLoadMode</tt>
   <dd> [out]   The list of load mode in which the dependency must be, associated to oDep.
   PLMMode = 0, VisuMode = 1, LinkableMode = 2, EditMode = 3, DMUMode = 4, UVMode = 5.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetOtherLoadDependencies"></a><a name="GetOtherLoadDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;,LoadDepType&amp;)"></a> <dt> o <b>GetOtherLoadDependencies</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOtherLoadDependencies</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oDep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oListOfLoadMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('LoadDepType','LoadDepType&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of Load dependencies of this actor.

 <br><b>Role</b>: This method retrieves a list of Load dependencies, which
   are actors which need to be loaded before this actor is updated.

 <br><b>Default Behavior</b>: the default behavior of this method is to append
   nothing in the output list oDep.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDep</tt>
   <dd> [out]   The list of Load dependencies. Those elements should adhere either to
   CATIAssemblyUpdateActor, or to CATIPLMUpdateActor.

 </dd>
    <dt><tt> oListOfLoadMode</tt>
   <dd> [out]   The list of load mode in which the dependency must be, associated to oDep.
   PLMMode = 0, VisuMode = 1, LinkableMode = 2, EditMode = 3, DMUMode = 4, UVMode = 5.

 </dd>
    <dt><tt> oType</tt>
   <dd> [out]   The load type.
   Direct: the components in the oDep list will be loaded before updating this actor.
   DispatchIn: the components in the oDep list (if it is loadable) or their IN dependencies (if it is transitive) will be loaded before updating this actor.
   DispatchOut: the components in the oDep list (if it is loadable) or their OUT dependencies (if it is transitive) will be loaded before updating this actor.
 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetOtherRelatedActors"></a><a name="GetOtherRelatedActors(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"></a> <dt> o <b>GetOtherRelatedActors</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOtherRelatedActors</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oDep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oListOfLoadMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of Other related actors of this actor.

 <br><b>Role</b>: This method retrieves a list of Other related actors, which
   are neither IN, OUT nor LOAD dependencies of this actor. It may be useful
   to prepare caches of these related actors.

 <br><b>Default Behavior</b>: the default behavior of this method is to append
   nothing in the output list oDep.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDep</tt>
   <dd> [out]   The list of Other related actors. Those elements should adhere either to
   CATIAssemblyUpdateActor, or to CATIPLMUpdateActor.

 </dd>
    <dt><tt> oListOfLoadMode</tt>
   <dd> [out]   The list of load mode in which the related actor must be, associated to oDep.
   PLMMode = 0, VisuMode = 1, LinkableMode = 2, EditMode = 3, DMUMode = 4, UVMode = 5.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetOutDependencies"></a><a name="GetOutDependencies(CATListValCATBaseUnknown_var&amp;,CATListOfInt&amp;)"></a> <dt> o <b>GetOutDependencies</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOutDependencies</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oDep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oListOfLoadMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of OUT dependencies of this actor.

 <br><b>Role</b>: This method retrieves a list of OUT dependencies, which
   are actors which need that is actor is up to date before being updated.
   Note that most OUT dependencies already declared this actor as an
   IN dependency, and they do not need to be declared as OUT dependencies
   again. This method only needs to return OUT dependencies corresponding
   to actors which has not declared this actor as an IN dependency.

 <br><b>Default Behavior</b>: the default behavior of this method is to append
   nothing in the output list oDep.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDep</tt>
   <dd> [out]   The list of OUT dependencies. Those elements should adhere either to
   CATIAssemblyUpdateActor, or to CATIPLMUpdateActor.

 </dd>
    <dt><tt> oListOfLoadMode</tt>
   <dd> [out]   The list of load mode in which the dependency must be, associated to oDep.
   PLMMode = 0, VisuMode = 1, LinkableMode = 2, EditMode = 3, DMUMode = 4, UVMode = 5.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetPLMComponentsPotentiallyModifiedByUpdate"></a><a name="GetPLMComponentsPotentiallyModifiedByUpdate(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetPLMComponentsPotentiallyModifiedByUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPLMComponentsPotentiallyModifiedByUpdate</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oListImpacted</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns all PLM components on which write rights could be needed for update.

 <br><b>Role</b>: This method must return every PLM components that may be
   modified by the update of this CATIPLMUpdateActor. If a PLM component
   is not returned, that means that this PLM component is never modified by
   the update of this CATIPLMUpdateActor, whatever its state.

 <br><b>Default Behavior</b>: the default behavior of this method is to append
   nothing in the output list oComponentsList.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioComponentsList</tt>
   <dd> [inout]   The list in which every components on which write rights could be needed 
   will be added.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok,
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetPLMStaticErrors"></a><a name="GetPLMStaticErrors(CATUnicodeString&amp;)"></a> <dt> o <b>GetPLMStaticErrors</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPLMStaticErrors</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oDisplayedError</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a static error or a static warning.

 <br><b>Role</b>: In case the update returns a status in warning or in error
   even before being updated, the static warning or error can be retrieved using
   this method.

 <br><b>Default Behavior</b>: no default behavior for this method : it would fail.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDisplayedError</tt>
   <dd> [out]   In case the status is in error or in warning, this is the static error or
   warning to be displayed to the user.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if there is one error (oDisplayedError is valued),
   <code>S_FALSE</code> if there is one warning but no error (oDisplayedError is valued),
   <code>E_FAIL</code> if there is neither error nor warning.
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetUnitStatus"></a><a name="GetUnitStatus(CATPLMUpdateStatus&amp;)"></a> <dt> o <b>GetUnitStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetUnitStatus</b>(<td><script type="text/javascript"> activateLink('CATPLMUpdateStatus','CATPLMUpdateStatus&amp;')</script> <td><tt>oUnitStatus</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves unit status of this actor.

 <br><b>Role</b>: This method retrieves the PLM Update unit status of this actor.

 <br><b>Default Behavior</b>: by default, the returned status is "Up to Date".

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oUnitStatus</tt>
   <dd> [out]   The unit status of this actor.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="GetVisibility"></a><a name="GetVisibility(ActorVisibility&amp;)"></a> <dt> o <b>GetVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVisibility</b>(<td><script type="text/javascript"> activateLink('ActorVisibility','ActorVisibility&amp;')</script> <td><tt>oVisibility</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the visibility of this actor.

 <br><b>Role</b>: This method returns the visibility of this actor. If the actor is
 visible, it will appear in its own simple node in the update graph in the update
 assistant. If it is not visible, it will not appear in the graph but it will still
 appear in the detailed list below the graph when its complex node is selected.

 <br><b>Default Behavior</b>: the actor is not visible by default.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVisibility</tt>
   <dd> [out]   The visibility of the actor: 0 = NeverVisible, 1 = VisibleInList, 2 = AlwaysVisible.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="IsActive"></a><a name="IsActive(int&amp;)"></a> <dt> o <b>IsActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsActive</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oActivity</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the activity of this actor.

 <br><b>Role</b>: This method returns the activity of this actor. If the actor is
 inactive, it will not be inserted in the update graph and it will not participate
 to the PLM Update process.

 <br><b>Default Behavior</b>: the actor is active by default.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oActivity</tt>
   <dd> [out]   The activity of the actor: 0 = inactive, 1 = active.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if everything ran ok, 
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
<a name="UnitPLMUpdate"></a><a name="UnitPLMUpdate(CATUnicodeString&amp;)"></a> <dt> o <b>UnitPLMUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnitPLMUpdate</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oDisplayedError</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Updates this actor unitarily.

 <br><b>Role</b>: This method launches the process which will update
   this actor. At the end of this method, this method must be either
   up to date, or out of date with error (dynamic error).

 <br><b>Default Behavior</b>: no default behavior for this method : it would fail.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDisplayedError</tt>
   <dd> [out]   In case the update failed, this is the error to be displayed to the user.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <code>S_OK</code> if the update succeeded and the actor should be up to date now,
   <code>E_FAIL</code> if a dynamic error occured, in which case oDisplayedError is valued.
   <code>E_UNEXPECTED</code> if an unexpected error occurs.
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="ActorVisibility"> <dt> o <b>ActorVisibility</b>
<dl>
  <dd>
<pre>
enum <b>ActorVisibility</b> {
  NeverVisible,
  VisibleInList,
  AlwaysVisible
}
</pre>
  Enumeration to determine if the current update actor should appear as a node in the displayed update graph
  that can be viewed in the update assistant. In case this actor is set as not visible, it will not appear
  in the graph as a node, but will be merged with the another displayed node. As a result, this actor will
  still be seen in the detailed list of that node when selected, below the update graph.
  This is only used in the GetVisibility method.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NeverVisible</tt>
   <dd>   Actor is never visible, neither in the update graph nor in the detailed list below the update graph.
 </dd>
    <dt><tt> VisibleInList</tt>
   <dd>   Actor is not visible in the update graph, except in the detailed list below the update graph.
 </dd>
    <dt><tt> AlwaysVisible</tt>
   <dd>   Actor is visible in the update graph and in the detailed list below the update graph.</dd>
</dl>
</dl>
</dl>
<a name="CATPLMUpdateStatus"> <dt> o <b>CATPLMUpdateStatus</b>
<dl>
  <dd>
<pre>
enum <b>CATPLMUpdateStatus</b> {
  Status_UndefinedStatus,
  Status_UpToDate,
  Status_OutOfDate,
  Status_UpToDateWithWarnings,
  Status_OutOfDateWithWarnings,
  Status_Error,
  Status_DynamicError
}
</pre>
 Enumeration of possible statuses of the public actor (statuses returned by the
 GetUnitStatus method). Notions of persistent errors or warnings and volatile
 errors or warnings are introduced. A persistent error or warning is detected by the
 GetUnitStatus, a volatile error or warning is only detected during the update
 (UnitPLMUpdate method), it is a runtime error or warning. The UnitPLMUpdate method
 and the following enumeration only manage persistent errors.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Status_UndefinedStatus</tt>
   <dd>   Undefined status (should never be returned or given as input parameter).
 </dd>
    <dt><tt> Status_UpToDate</tt>
   <dd>   UpToDate, no persistent warnings or errors.
 </dd>
    <dt><tt> Status_OutOfDate</tt>
   <dd>   OutOfDate, no persistent warnings or errors.
 </dd>
    <dt><tt> Status_UpToDateWithWarnings</tt>
   <dd>   UpToDate, no persistent errors, but at least one persistent warning.
 </dd>
    <dt><tt> Status_OutOfDateWithWarnings</tt>
   <dd>   OutOfDate, no persistent errors, but at least one persistent warning.
 </dd>
    <dt><tt> Status_Error</tt>
   <dd>   Update operation is impossible because there is a persistent error.
 </dd>
    <dt><tt> Status_DynamicError</tt>
   <dd>   Update operation failed because a volatile error occurred.</dd>
</dl>
</dl>
</dl>
<a name="ErrorInCycleBehavior"> <dt> o <b>ErrorInCycleBehavior</b>
<dl>
  <dd>
<pre>
enum <b>ErrorInCycleBehavior</b> {
  StopAtFirst,
  StopAtSecond
}
</pre>
  Enumeration of the ways in which the node associated to this actor should be dealt with in case an error occurs during
  the unit update of this actor. Either an error in the unit update automatically stops the update process and triggers the
  update report to display that error, or the first error is "ignored" and the actor is given a second chance to be corretly
  updated (it may be useful in a complex node where this unit update requires that another node amongst the ones in the same
  complex node is updated first). In that case, the second error will stop the update process and display the update report.
  This is only used in the GetErrorInCycleBehavior method.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> StopAtFirst</tt>
   <dd>   Normal behavior : the node and the complex node are in error when the update of an actor failed with an error.
 </dd>
    <dt><tt> StopAtSecond</tt>
   <dd>   At first error, the actor is considered as out of date, and it is really in error when the update still fails at the second time in the cycle.</dd>
</dl>
</dl>
</dl>
<a name="LoadDepType"> <dt> o <b>LoadDepType</b>
<dl>
  <dd>
<pre>
enum <b>LoadDepType</b> {
  Direct,
  DispatchIn,
  DispatchOut
}
</pre>
  Enumeration of the ways in which the other load dependencies declared by this actor should be dealt with.
  In any case the load dependency will be loaded before this actor is updated. But it can also be chosen that
  the load dependency is loaded before that any IN dependency of this actor is updated (meaning that it is loaded
  way before this actor is updated), or that the load dependency remain loaded until the last OUT dependency of
  this actor (it should be the root) is updated (meaning that it remains loaded until the end of the PLM Update).
  This is only used in the GetOtherLoadDependencies method.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Direct</tt>
   <dd>   Direct : the load dependency is loaded before this actor is updated.
 </dd>
    <dt><tt> DispatchIn</tt>
   <dd>   Dispatch inwards: the load dependency is loaded before any IN dependency of this actor is updated.
 </dd>
    <dt><tt> DispatchOut</tt>
   <dd>   Dispatch outwards: the load dependency remains loaded before any OUT dependency of this actor is updated.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPLMUpdateActor.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMUpdateUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

