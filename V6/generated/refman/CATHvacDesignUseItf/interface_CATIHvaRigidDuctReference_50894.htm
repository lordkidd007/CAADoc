<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATHvacDesignUseItf Interface CATIHvaRigidDuctReference</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATHvacDesignUseItf.htm" href="../CATHvacDesignUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATHvacDesignUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIHvaRigidDuctReference"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATHvacDesignUseItf Interface CATIHvaRigidDuctReference</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIHvaRigidDuctReference_50894','CATIHvaRigidDuctReference','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIHvaRigidDuctReference</b>
</p>
<p>
<b><i> </i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAllPoints(CATLISTV(CATIMmiMechanicalFeature_var)&amp;)"><b>GetAllPoints</b></a>(CATLISTV(CATIMmiMechanicalFeature_var)&amp;)
<dd>  Gets the list of all point features of the duct
 
 <dt> o 
    <a href="#GetArcLengthofNode(CATListOfDouble&amp;)"><b>GetArcLengthofNode</b></a>(CATListOfDouble&amp;)
<dd>  Gets the Arc Length of Node.
 <dt> o 
    <a href="#GetBendAngleofNode(CATListOfDouble&amp;)"><b>GetBendAngleofNode</b></a>(CATListOfDouble&amp;)
<dd>  Gets the Bend angle of Node.
 <dt> o 
    <a href="#GetBendRadiusofNode(CATListOfDouble&amp;)"><b>GetBendRadiusofNode</b></a>(CATListOfDouble&amp;)
<dd>  Gets the Bend radius of Node.
 <dt> o 
    <a href="#GetCoordinateofNode(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)"><b>GetCoordinateofNode</b></a>(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)
<dd>  Gets the coordinate of Node.
 <dt> o 
    <a href="#GetEnds(CATIHvaHvacPortRef*&amp;,CATIHvaHvacPortRef*&amp;)"><b>GetEnds</b></a>(CATIHvaHvacPortRef*&amp;,CATIHvaHvacPortRef*&amp;)
<dd>  Gets the two end of Duct.
 <dt> o 
    <a href="#GetGuideCurve(CATIMmiMechanicalFeature*&amp;)"><b>GetGuideCurve</b></a>(CATIMmiMechanicalFeature*&amp;)
<dd>  Gets the guide curve of duct.
 <dt> o 
    <a href="#GetInteriorNode(int,CATIHvaHvacPortRef*&amp;)"><b>GetInteriorNode</b></a>(int,CATIHvaHvacPortRef*&amp;)
<dd>  Gets the interior node of route.
 <dt> o 
    <a href="#GetNumberOfNode(int&amp;)"><b>GetNumberOfNode</b></a>(int&amp;)
<dd>  Gets the number of nodes in Duct.
 <dt> o 
    <a href="#GetRotationPlaneofNode(CATListOfDouble&amp;)"><b>GetRotationPlaneofNode</b></a>(CATListOfDouble&amp;)
<dd>  Gets the Rotation Plane angle of Node.
 <dt> o 
    <a href="#GetStraightLengthofSegment(CATListOfDouble&amp;)"><b>GetStraightLengthofSegment</b></a>(CATListOfDouble&amp;)
<dd>  Gets the Straight Length of segment.
 <dt> o 
    <a href="#GetSweep(CATIMmiMechanicalFeature*&amp;)"><b>GetSweep</b></a>(CATIMmiMechanicalFeature*&amp;)
<dd>  Gets the sweep of duct.
 <dt> o 
    <a href="#ListBranchPorts(CATLISTP(CATIHvaHvacPortRef)&amp;,CATListOfDouble&amp;)"><b>ListBranchPorts</b></a>(CATLISTP(CATIHvaHvacPortRef)&amp;,CATListOfDouble&amp;)
<dd>  Gets the list of all the branch Ports.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAllPoints"></a><a name="GetAllPoints(CATLISTV(CATIMmiMechanicalFeature_var)&amp;)"></a> <dt> o <b>GetAllPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllPoints</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATIMmiMechanicalFeature_var)','CATLISTV(CATIMmiMechanicalFeature_var)&amp;')</script> <td><tt>ohListofMMiPointFeatures</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of all point features of the duct
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ohListofMMiPointFeatures</tt>
   <dd>   List of points of the duct
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - ohListofMMiPointFeatures is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetArcLengthofNode"></a><a name="GetArcLengthofNode(CATListOfDouble&amp;)"></a> <dt> o <b>GetArcLengthofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetArcLengthofNode</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListofArcLengthofNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Arc Length of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListofArcLengthofNode</tt>
   <dd>   This method returns a list of Double that is the Arc length of Node.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetBendAngleofNode"></a><a name="GetBendAngleofNode(CATListOfDouble&amp;)"></a> <dt> o <b>GetBendAngleofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBendAngleofNode</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListofBendAngleofNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Bend angle of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListofBendRadiusofNode</tt>
   <dd>   This method returns a list of Double that is the bend angle on Node.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetBendRadiusofNode"></a><a name="GetBendRadiusofNode(CATListOfDouble&amp;)"></a> <dt> o <b>GetBendRadiusofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBendRadiusofNode</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListofBendRadiusofNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Bend radius of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListofBendRadiusofNode</tt>
   <dd>   This method returns a list of Double that is the bend radius on Node.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetCoordinateofNode"></a><a name="GetCoordinateofNode(CATLISTP(CATMathPoint)&amp;,CATBaseUnknown*)"></a> <dt> o <b>GetCoordinateofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCoordinateofNode</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATMathPoint)','CATLISTP(CATMathPoint)&amp;')</script> <td><tt>oListPofCoordinateNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipIUnkOccToFindRoot</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Gets the coordinate of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListPofCoordinateNode</tt>
   <dd> (need to release it)   This method returns a list of CATMathPoint pointers that is the coordinate of Node in context 
   of Root product of the session in milimeters (mm). Root product will be found using the input ipIUnkOccToFindRoot.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATLISTP(CATMathPoint)].
 </dd>
    <dt><tt> ipIUnkOccToFindRoot</tt>
   <dd>   Occurrence used to find the Root Product in which context the coordinates of the nodes will be given out. If this input is NULL, then co-ordinates of the node will be in the context of the Reference of Duct.
   [in, CATBaseUnknown].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetEnds"></a><a name="GetEnds(CATIHvaHvacPortRef*&amp;,CATIHvaHvacPortRef*&amp;)"></a> <dt> o <b>GetEnds</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEnds</b>(<td><script type="text/javascript"> activateLink('CATIHvaHvacPortRef','CATIHvaHvacPortRef*&amp;')</script> <td><tt>opIEndDuctOne</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIHvaHvacPortRef','CATIHvaHvacPortRef*&amp;')</script> <td><tt>opIEndDuctTwo</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the two end of Duct.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIEndDuctOne</tt>
   <dd>   Duct end one [out, CATIHvaHvacPortRef#Release].
 </dd>
    <dt><tt> opIEndDuctTwo</tt>
   <dd>   Duct end two [out, CATIHvaHvacPortRef#Release].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - any one or both of the output pointers is not NULL</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetGuideCurve"></a><a name="GetGuideCurve(CATIMmiMechanicalFeature*&amp;)"></a> <dt> o <b>GetGuideCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGuideCurve</b>(<td><script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature*&amp;')</script> <td><tt>opIMMiCurveFeature</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the guide curve of duct.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIMMiCurveFeature</tt>
   <dd>   Guide curve of the duct [out, CATIMmiMechanicalFeature#Release].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - opIMMiCurveFeature is not NULL</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetInteriorNode"></a><a name="GetInteriorNode(int,CATIHvaHvacPortRef*&amp;)"></a> <dt> o <b>GetInteriorNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInteriorNode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRouteIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIHvaHvacPortRef','CATIHvaHvacPortRef*&amp;')</script> <td><tt>opIPortRefInteriorNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the interior node of route.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRouteIndex</tt>
   <dd>   route index from which the interior node is returned.
 </dd>
    <dt><tt> opIPortRefInteriorNode</tt>
   <dd>   Duct interior node [out, CATIHvaHvacPortRef#Release].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input Route Index is extremity index of route or Route index not valid</dd>
     <dd>opIPortRefInteriorNode is not NULL</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetNumberOfNode"></a><a name="GetNumberOfNode(int&amp;)"></a> <dt> o <b>GetNumberOfNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfNode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the number of nodes in Duct.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumberOfNode</tt>
   <dd>   Give the number of nodes that defines the Duct curve.
   Include: Directional point, passing point (which is or not an external reference),
   point which is External reference that come from Support or Hvac Part with Hole Port.
   The point of 1 point Part Port or 2 points Part port is also included.
   [out, Integer].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetRotationPlaneofNode"></a><a name="GetRotationPlaneofNode(CATListOfDouble&amp;)"></a> <dt> o <b>GetRotationPlaneofNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRotationPlaneofNode</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListofRotationPlaneofNode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Rotation Plane angle of Node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListofRotationPlaneofNode</tt>
   <dd>   This method returns a list of Double that is the Rotation plane angle of Node.
   The size of this list is equal to oNumberOfNode from GetNumberOfNode.
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetStraightLengthofSegment"></a><a name="GetStraightLengthofSegment(CATListOfDouble&amp;)"></a> <dt> o <b>GetStraightLengthofSegment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetStraightLengthofSegment</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListofStraightLengthofsegment</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Straight Length of segment.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListofStraightLengthofsegment</tt>
   <dd> (need to release it)   This method returns a list of Double that is the Straight Length of segment.
   The size of this list is equal to (oNumberOfNode-1) from GetNumberOfNode.
    index =1 is the length between Node 1 to Node 2, etc...
   [out, CATListOfDouble]
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful, even if there is Zero node to define this Duct</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="GetSweep"></a><a name="GetSweep(CATIMmiMechanicalFeature*&amp;)"></a> <dt> o <b>GetSweep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSweep</b>(<td><script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature*&amp;')</script> <td><tt>opIMMiSweepFeature</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the sweep of duct.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIMMiSweepFeature</tt>
   <dd>  Sweep of the duct [out, CATIMmiMechanicalFeature#Release].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - opIMMiSweepFeature is not NULL</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<a name="ListBranchPorts"></a><a name="ListBranchPorts(CATLISTP(CATIHvaHvacPortRef)&amp;,CATListOfDouble&amp;)"></a> <dt> o <b>ListBranchPorts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListBranchPorts</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATIHvaHvacPortRef)','CATLISTP(CATIHvaHvacPortRef)&amp;')</script> <td><tt>opListPorts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>opListCurvilinearLength</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of all the branch Ports.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opListPorts</tt>
   <dd>   List of all ports of this object [out, CATLISTP(CATIHvaHvacPortRef)].
 </dd>
    <dt><tt> opListCurvilinearLength</tt>
   <dd>   List of curvilinear position of branch port on Duct curve [out, CATListOfDouble].
   This list has the same size of opListPorts. There is a mapping where same index is same port.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value.
   <br><b>Legal values</b>:
   <dl>
     <dt>E_INVALIDARG</dt>
     <dd>Input is invalid - any one or both of the output list is not empty</dd>
     <dt>S_OK</dt>
     <dd>operation is successful</dd>
     <dt>E_FAIL</dt>
     <dd>operation failed</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIHvaRigidDuctReference.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATHvacDesignUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

