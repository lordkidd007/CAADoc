<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFmtModelInterfaces Class CATFmtGeometricalEngine</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFmtModelInterfaces.htm" href="../CATFmtModelInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFmtModelInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATFmtGeometricalEngine"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFmtModelInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATFmtGeometricalEngine</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATFmtGeometricalEngine_48422','CATFmtGeometricalEngine','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATFmtGeometricalEngine</b>
</p>
<p>
<b><i> Object that handles necessary informations about a finite element in order
 to compute a quality criterion.</i></b><br>
 
 See <script type="text/javascript"> activateLinkAnchor('CATIFmtCriterion','','CATIFmtCriterion') </script>.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATFmtGeometricalEngine(CATIFmtConnectivity*)"><b>CATFmtGeometricalEngine</b></a>(CATIFmtConnectivity*)
<dd>  Constructs a geometrical engine corresponding to a given connectivity.
 <dt> o 
    <a href="#~CATFmtGeometricalEngine()"><b>~CATFmtGeometricalEngine</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ComputeArea(int,int,double&amp;)"><b>ComputeArea</b></a>(int,int,double&amp;)
<dd>   Compute the element's face area (with intermediate nodes).
 <dt> o 
    <a href="#ComputeAxis(double[3],double[3][3])"><b>ComputeAxis</b></a>(double[3],double[3][3])
<dd>  Compute element's axis
 
 <dt> o 
    <a href="#ComputeEdgeAxis(CATMathAxis*&amp;,int,int,double*)"><b>ComputeEdgeAxis</b></a>(CATMathAxis*&amp;,int,int,double*)
<dd>   Compute element's edge axis
 
 <dt> o 
    <a href="#ComputeEdgeAxis(CATMathAxis*&amp;,int,double*,double*)"><b>ComputeEdgeAxis</b></a>(CATMathAxis*&amp;,int,double*,double*)
<dd>   Compute element's edge axis
 
 <dt> o 
    <a href="#ComputeEdgeInteriorAngle(int,double&amp;)"><b>ComputeEdgeInteriorAngle</b></a>(int,double&amp;)
<dd>   Compute element's edge angle
 Angle is computed between element faces belonging to edge
 
 <dt> o 
    <a href="#ComputeEdgeIsopar(double*,int,double*)"><b>ComputeEdgeIsopar</b></a>(double*,int,double*)
<dd>   Compute element's edge axis
 
 <dt> o 
    <a href="#ComputeEdgePosition(double*,int,double*)"><b>ComputeEdgePosition</b></a>(double*,int,double*)
<dd>   Compute position on element's edge
 
 <dt> o 
    <a href="#ComputeFaceAxis(CATMathAxis*&amp;,int,double*)"><b>ComputeFaceAxis</b></a>(CATMathAxis*&amp;,int,double*)
<dd>  Compute element's face axis
 
 <dt> o 
    <a href="#ComputeFaceAxis(double[],double[][3],int,double*)"><b>ComputeFaceAxis</b></a>(double[],double[][3],int,double*)
<dd>   Compute element's face axis
 
 <dt> o 
    <a href="#ComputeFaceAxis(double*,double*,double*,int,double*)"><b>ComputeFaceAxis</b></a>(double*,double*,double*,int,double*)
<dd>   Compute element's face axis
 
 <dt> o 
    <a href="#ComputeFaceCoordinates(int,double[][3],double[],int&amp;,double[][3])"><b>ComputeFaceCoordinates</b></a>(int,double[][3],double[],int&amp;,double[][3])
<dd>   Compute element's face local coordinates
 
 <dt> o 
    <a href="#ComputeFaceIsopar(double*,double*,double*,int,double*)"><b>ComputeFaceIsopar</b></a>(double*,double*,double*,int,double*)
<dd>   Compute element's face axis
 
 <dt> o 
    <a href="#ComputeFaceJacobian(int,double[][3],double[][2],double[][2],double&amp;)"><b>ComputeFaceJacobian</b></a>(int,double[][3],double[][2],double[][2],double&amp;)
<dd>   Compute the element's face jacobian
 
 <dt> o 
    <a href="#ComputeFaceNormal(int,int,double[3])"><b>ComputeFaceNormal</b></a>(int,int,double[3])
<dd>   Compute element's face normal
 
 <dt> o 
    <a href="#ComputeFaceParameters(int,double[],double[])"><b>ComputeFaceParameters</b></a>(int,double[],double[])
<dd>  Compute parameters on elemeent's face
 
 <dt> o 
    <a href="#ComputeFacePosition(double*,int,double*)"><b>ComputeFacePosition</b></a>(double*,int,double*)
<dd>   Compute position on element's face
 
 <dt> o 
    <a href="#ComputeFacePosition(int,double[],double[])"><b>ComputeFacePosition</b></a>(int,double[],double[])
<dd>   Compute position on element's face
 
 <dt> o 
    <a href="#ComputeFaceProjection(int,double[3],double[3],double[3],int&amp;)"><b>ComputeFaceProjection</b></a>(int,double[3],double[3],double[3],int&amp;)
<dd>  Compute projection of point on element's face 
 
 <dt> o 
    <a href="#ComputeIsopar(double[][3],double*)"><b>ComputeIsopar</b></a>(double[][3],double*)
<dd>   Compute element's axis
 
 <dt> o 
    <a href="#ComputeJacobian(double*,double[][3],double*,double&amp;)"><b>ComputeJacobian</b></a>(double*,double[][3],double*,double&amp;)
<dd>  Compute the element's jacobian
 
 <dt> o 
    <a href="#ComputeLength(int,int,double&amp;)"><b>ComputeLength</b></a>(int,int,double&amp;)
<dd>   Compute the element's edge length (with intermediate nodes).
 <dt> o 
    <a href="#ComputeMinBoxDistance(double[])"><b>ComputeMinBoxDistance</b></a>(double[])
<dd>  Get the minimum distance between a point and the element's bounding box
 
 <dt> o 
    <a href="#ComputePosition(double*,double*)"><b>ComputePosition</b></a>(double*,double*)
<dd>  Compute position on element
 
 <dt> o 
    <a href="#ComputeShrink(float[][3],float)"><b>ComputeShrink</b></a>(float[][3],float)
<dd>  Compute nodes coordinates with shrink
 
 <dt> o 
    <a href="#GetBox()"><b>GetBox</b></a>()
<dd>  Get the bounding box of element
 
 <dt> o 
    <a href="#GetCenter()"><b>GetCenter</b></a>()
<dd>   Get element's center
 
 <dt> o 
    <a href="#GetCenter(double*&amp;)"><b>GetCenter</b></a>(double*&amp;)
<dd>   Get the element's center.
 <dt> o 
    <a href="#GetConnectivity()"><b>GetConnectivity</b></a>()
<dd>  Get the connectivity associated with.
 <dt> o 
    <a href="#GetCoordinates()"><b>GetCoordinates</b></a>()
<dd>   Get nodes coordinates 
 
 <dt> o 
    <a href="#GetCoordinates(int)"><b>GetCoordinates</b></a>(int)
<dd>  Get node coordinates
 
 <dt> o 
    <a href="#GetDimension()"><b>GetDimension</b></a>()
<dd>   Get the dimension of the connectivity.
 <dt> o 
    <a href="#GetEdgeSizes()"><b>GetEdgeSizes</b></a>()
<dd>  Get the element's edges size (ignore intermediate nodes).
 <dt> o 
    <a href="#GetEdges()"><b>GetEdges</b></a>()
<dd>   Get element's edges (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMainAreas(double*&amp;)"><b>GetMainAreas</b></a>(double*&amp;)
<dd>   Get the element's faces area (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMainEdge(int,CATMathVector&amp;)"><b>GetMainEdge</b></a>(int,CATMathVector&amp;)
<dd>   Get the element's edge (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMainLengths(double*&amp;)"><b>GetMainLengths</b></a>(double*&amp;)
<dd>   Get element's edges length (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMainNormal(int,CATMathVector&amp;)"><b>GetMainNormal</b></a>(int,CATMathVector&amp;)
<dd>   Get the element's face normal (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMaxEdge()"><b>GetMaxEdge</b></a>()
<dd>   Get the element's maximum edge length.
 <dt> o 
    <a href="#GetMinEdge()"><b>GetMinEdge</b></a>()
<dd>   Get the element's minimum edge length.
 <dt> o 
    <a href="#GetMinHeight(double&amp;)"><b>GetMinHeight</b></a>(double&amp;)
<dd>   Get the element's minimum height.
 <dt> o 
    <a href="#GetNodesInteriorAngles(int,int&amp;,double*&amp;)"><b>GetNodesInteriorAngles</b></a>(int,int&amp;,double*&amp;)
<dd>  Compute element's nodes angle 
   Angle is computed between two consecutive edges of element's face
 
 <dt> o 
    <a href="#GetNormals(int)"><b>GetNormals</b></a>(int)
<dd>   Get the element's faces normal (ignore intermediate nodes).
 <dt> o 
    <a href="#GetVolume(double&amp;,int)"><b>GetVolume</b></a>(double&amp;,int)
<dd>  Get the element's volume.
 <dt> o 
    <a href="#Init(double* const[])"><b>Init</b></a>(double* const[])
<dd>  Initialize the geometrical engine with the geometry of a finite element.
 <dt> o 
    <a href="#Init(CATFmtElement const* const)"><b>Init</b></a>(CATFmtElement const* const)
<dd>  Initialize the geometrical engine with the geometry of a finite element.
 <dt> o 
    <a href="#SetCoordinates(int,double[])"><b>SetCoordinates</b></a>(int,double[])
<dd>   Set coordinates of specified node.
</dl>
<dl>
</dl>
<dl>
 <h2>Data Member Index</h2> <br>
 <dt> o 
    <a href="#_FHeight"><b>_FHeight</b></a>
<dd>  <dt> o 
    <a href="#_MinHeight"><b>_MinHeight</b></a>
<dd> </dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATFmtGeometricalEngine"></a><a name="CATFmtGeometricalEngine(CATIFmtConnectivity*)"></a> <dt> o <b>CATFmtGeometricalEngine</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATFmtGeometricalEngine</b>(<td> const <script type="text/javascript"> activateLink('CATIFmtConnectivity','CATIFmtConnectivity*')</script> <td><tt>iConnectivity</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a geometrical engine corresponding to a given connectivity.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConnectivity</tt>
   <dd> Connectivity to be associated with.
 See </dd>
<script type="text/javascript"> activateLinkAnchor('CATIFmtConnectivity','','CATIFmtConnectivity') </script>.
</dl>
</dl>
</dl>
<a name="~CATFmtGeometricalEngine"></a><a name="~CATFmtGeometricalEngine()"></a> <dt> o <b>~CATFmtGeometricalEngine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATFmtGeometricalEngine</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="ComputeArea"></a><a name="ComputeArea(int,int,double&amp;)"></a> <dt> o <b>ComputeArea</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeArea</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIntegrationType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oArea</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute the element's face area (with intermediate nodes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iIntegrationType</tt>
   <dd>   Type of numeric integration ( gauss scheme point of integration ). 
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>Center.
   <dl><dt>1</dt><dd>Low precision.
   <dl><dt>2</dt><dd>Medium precision.
   <dl><dt>3</dt><dd>High precision.
   </dl>
 </dd>
    <dt><tt> oArea</tt>
   <dd>   Area value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeAxis"></a><a name="ComputeAxis(double[3],double[3][3])"></a> <dt> o <b>ComputeAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeAxis</b>(<td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3][3','double[3][3]')</script> <td><tt>oDirections</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute element's axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOrigin</tt>
   <dd>   Origin coordinates (on element center)
 </dd>
    <dt><tt> oDirections</tt>
   <dd>   Axis three vectors
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeEdgeAxis"></a><a name="ComputeEdgeAxis(CATMathAxis*&amp;,int,int,double*)"></a> <dt> o <b>ComputeEdgeAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeEdgeAxis</b>(<td><script type="text/javascript"> activateLink('CATMathAxis','CATMathAxis*&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt><td><tt>=0 </tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=-1 </tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParams</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's edge axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAxis</tt>
   <dd>   Mathematical axis in dimension 3
   See </dd>
<script type="text/javascript"> activateLinkAnchor('CATMathAxis','','CATMathAxis') </script>. 
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iParams</tt>
   <dd>   Parameters on edge
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeEdgeAxis"></a><a name="ComputeEdgeAxis(CATMathAxis*&amp;,int,double*,double*)"></a> <dt> o <b>ComputeEdgeAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeEdgeAxis</b>(<td><script type="text/javascript"> activateLink('CATMathAxis','CATMathAxis*&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iNormal</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParams</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's edge axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAxis</tt>
   <dd>   Mathematical axis in dimension 3
   See </dd>
<script type="text/javascript"> activateLinkAnchor('CATMathAxis','','CATMathAxis') </script>. 
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> iNormal</tt>
   <dd>   Axis vector
 </dd>
    <dt><tt> iParams</tt>
   <dd>   Parameters on edge
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeEdgeInteriorAngle"></a><a name="ComputeEdgeInteriorAngle(int,double&amp;)"></a> <dt> o <b>ComputeEdgeInteriorAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeEdgeInteriorAngle</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>Value</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's edge angle
 Angle is computed between element faces belonging to edge
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> Value</tt>
   <dd>   The angle value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeEdgeIsopar"></a><a name="ComputeEdgeIsopar(double*,int,double*)"></a> <dt> o <b>ComputeEdgeIsopar</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeEdgeIsopar</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirU</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDerivates</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's edge axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDirU</tt>
   <dd>   Axis vector U 
 </dd>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> iDerivates</tt>
   <dd>   Shape functions derivates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeEdgePosition"></a><a name="ComputeEdgePosition(double*,int,double*)"></a> <dt> o <b>ComputeEdgePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeEdgePosition</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iFunctions</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute position on element's edge
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPosition</tt>
   <dd>   Coordinates of position
 </dd>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> iFunctions</tt>
   <dd>   Shape functions
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceAxis"></a><a name="ComputeFaceAxis(CATMathAxis*&amp;,int,double*)"></a> <dt> o <b>ComputeFaceAxis</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceAxis</b>(<td><script type="text/javascript"> activateLink('CATMathAxis','CATMathAxis*&amp;')</script> <td><tt>ioAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=0 </tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParams</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute element's face axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioAxis</tt>
   <dd>   Mathematical axis in dimension 3
   See </dd>
<script type="text/javascript"> activateLinkAnchor('CATMathAxis','','CATMathAxis') </script>. 
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iParams</tt>
   <dd>   Parameters on face
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceAxis"></a><a name="ComputeFaceAxis(double[],double[][3],int,double*)"></a> <dt> o <b>ComputeFaceAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceAxis</b>(<td><script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>oOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>oDirections</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=0 </tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParams</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's face axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOrigin</tt>
   <dd>   Origin coordinates
 </dd>
    <dt><tt> oDirections</tt>
   <dd>   Axis three vectors 
 </dd>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iParams</tt>
   <dd>   Parameters on face
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceAxis"></a><a name="ComputeFaceAxis(double*,double*,double*,int,double*)"></a> <dt> o <b>ComputeFaceAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceAxis</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirU</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirW</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDerivates</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's face axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDirU</tt>
   <dd>   Axis vector U
 </dd>
    <dt><tt> oDirV</tt>
   <dd>   Axis vector V
 </dd>
    <dt><tt> oDirW</tt>
   <dd>   Axis vector W
 </dd>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> Derivates</tt>
   <dd>   Shape functions derivates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceCoordinates"></a><a name="ComputeFaceCoordinates(int,double[][3],double[],int&amp;,double[][3])"></a> <dt> o <b>ComputeFaceCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceCoordinates</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>iDirections</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbNodesOfFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>oFaceCoor</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's face local coordinates
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iDirections</tt>
   <dd>   Axis three vectors 
 </dd>
    <dt><tt> iOrigin</tt>
   <dd>   Coordinates of reference position
 </dd>
    <dt><tt> oNbNodesOfFace</tt>
   <dd>   Number of nodes of face
 </dd>
    <dt><tt> oFaceCoor</tt>
   <dd>   Array containing nodes local coordinates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceIsopar"></a><a name="ComputeFaceIsopar(double*,double*,double*,int,double*)"></a> <dt> o <b>ComputeFaceIsopar</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceIsopar</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirU</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirW</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDerivates</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's face axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDirU</tt>
   <dd>   Axis vector U
 </dd>
    <dt><tt> oDirV</tt>
   <dd>   Axis vector V
 </dd>
    <dt><tt> oDirW</tt>
   <dd>   Axis vector W
 </dd>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iDerivates</tt>
   <dd>   Shape functions derivates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceJacobian"></a><a name="ComputeFaceJacobian(int,double[][3],double[][2],double[][2],double&amp;)"></a> <dt> o <b>ComputeFaceJacobian</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceJacobian</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbNodes</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>iCoor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[][2','double[][2]')</script> <td><tt>iDerivates</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[][2','double[][2]')</script> <td><tt>oJacobian</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDet</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute the element's face jacobian
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNbNodes</tt>
   <dd>   Number of nodes of face
 </dd>
    <dt><tt> iCoor</tt>
   <dd>   Nodes coordinates of face
 </dd>
    <dt><tt> iDerivates</tt>
   <dd>   Shape functions derivates
 </dd>
    <dt><tt> oJacobian</tt>
   <dd>   Jacobian matrix
 </dd>
    <dt><tt> oDet</tt>
   <dd>   Jacobian determinant
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceNormal"></a><a name="ComputeFaceNormal(int,int,double[3])"></a> <dt> o <b>ComputeFaceNormal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceNormal</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuNode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oNormal</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's face normal
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iNuNode</tt>
   <dd>   Local number of node, between 0 to NbNodes-1.
 </dd>
    <dt><tt> oNormal</tt>
   <dd>   Normalized vector
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceParameters"></a><a name="ComputeFaceParameters(int,double[],double[])"></a> <dt> o <b>ComputeFaceParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceParameters</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>oParams</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute parameters on elemeent's face
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iPosition</tt>
   <dd>   Coordinates of position
 </dd>
    <dt><tt> oParams</tt>
   <dd>   Parameters value
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFacePosition"></a><a name="ComputeFacePosition(double*,int,double*)"></a> <dt> o <b>ComputeFacePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFacePosition</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iFunctions</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute position on element's face
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPosition</tt>
   <dd>   Coordinates of position
 </dd>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> Functions</tt>
   <dd>   Shape functions
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFacePosition"></a><a name="ComputeFacePosition(int,double[],double[])"></a> <dt> o <b>ComputeFacePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFacePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>oPosition</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute position on element's face
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iParams</tt>
   <dd>   Parameters value
 </dd>
    <dt><tt> oPosition</tt>
   <dd>   Coordinates of position
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeFaceProjection"></a><a name="ComputeFaceProjection(int,double[3],double[3],double[3],int&amp;)"></a> <dt> o <b>ComputeFaceProjection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeFaceProjection</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oProjection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>oDistance2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLocation</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute projection of point on element's face 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iPoint</tt>
   <dd>   Coordinates of point to project.
 </dd>
    <dt><tt> oProjection</tt>
   <dd>   Coordinates of projected point.
 </dd>
    <dt><tt> oDistance2</tt>
   <dd>   oDistance2[0] square distance of projected point to face
   oDistance2[1] square distance of projected point to face: normal component
   oDistance2[2] square distance of projected point to face: lateral component
 </dd>
    <dt><tt> oLocation</tt>
   <dd>   Projection result status.
   <br><b>Legal values</b>: 
   <dl><dt>0</dt><dd>the projected point is inside the face.
   <dt>!=0</dt><dd>the projected point is outside the face or on face boundary.</dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeIsopar"></a><a name="ComputeIsopar(double[][3],double*)"></a> <dt> o <b>ComputeIsopar</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeIsopar</b>(<td><script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>oDirections</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDerivates</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute element's axis
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Directions</tt>
   <dd>   Axis three vectors 
 </dd>
    <dt><tt> Derivates</tt>
   <dd>   Shape functions derivates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeJacobian"></a><a name="ComputeJacobian(double*,double[][3],double*,double&amp;)"></a> <dt> o <b>ComputeJacobian</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeJacobian</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDerivates</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[][3','double[][3]')</script> <td><tt>iDirections</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oJacobian</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDet</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute the element's jacobian
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDerivates</tt>
   <dd>   Shape functions derivates
 </dd>
    <dt><tt> iDirections</tt>
   <dd>   Axis three vectors 
 </dd>
    <dt><tt> oJacobian</tt>
   <dd>   Jacobian matrix
 </dd>
    <dt><tt> oDet</tt>
   <dd>   Jacobian determinant
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeLength"></a><a name="ComputeLength(int,int,double&amp;)"></a> <dt> o <b>ComputeLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeLength</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIntegrationType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLength</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute the element's edge length (with intermediate nodes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> iIntegrationType</tt>
   <dd>   Type of numeric integration ( gauss scheme point of integration ). 
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>Center.
   <dl><dt>1</dt><dd>Low precision.
   <dl><dt>2</dt><dd>Medium precision.
   <dl><dt>3</dt><dd>High precision.
   </dl>
 </dd>
    <dt><tt> oLength</tt>
   <dd>   Length value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeMinBoxDistance"></a><a name="ComputeMinBoxDistance(double[])"></a> <dt> o <b>ComputeMinBoxDistance</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>ComputeMinBoxDistance</b>(<td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iXYZ</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the minimum distance between a point and the element's bounding box
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXYZ</tt>
   <dd>   Point coordinates.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The distance between a point and the bounding box
</dl>
</dl>
<a name="ComputePosition"></a><a name="ComputePosition(double*,double*)"></a> <dt> o <b>ComputePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputePosition</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPosition</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iFunctions</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute position on element
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPosition</tt>
   <dd>   Coordinates of position
 </dd>
    <dt><tt> iFunctions</tt>
   <dd>   Shape functions
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="ComputeShrink"></a><a name="ComputeShrink(float[][3],float)"></a> <dt> o <b>ComputeShrink</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeShrink</b>(<td><script type="text/javascript"> activateLink('float[][3','float[][3]')</script> <td><tt>oCoordinates</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iShrink</tt><td><tt>=0.95 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute nodes coordinates with shrink
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCoordinates</tt>
   <dd>   Array containing the nodes coordinates
 </dd>
    <dt><tt> iShrink</tt>
   <dd>   Value of shrink parameter.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetBox"></a><a name="GetBox()"></a> <dt> o <b>GetBox</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetBox</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the bounding box of element
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to the array containing box coordinates
</dl>
</dl>
<a name="GetCenter"></a><a name="GetCenter()"></a> <dt> o <b>GetCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','const double *')</script>  <b>GetCenter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get element's center
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to the array containing coordinates
</dl>
</dl>
<a name="GetCenter"></a><a name="GetCenter(double*&amp;)"></a> <dt> o <b>GetCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCenter</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oCenter</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's center.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCenter</tt>
   <dd>   A pointer to the array containing coordinates
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetConnectivity"></a><a name="GetConnectivity()"></a> <dt> o <b>GetConnectivity</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIFmtConnectivity','const CATIFmtConnectivity *')</script>  <b>GetConnectivity</b>(<td>)</table></dt>
<dl>
  <dd>
 Get the connectivity associated with.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A finite element connectivity.
   See 
<script type="text/javascript"> activateLinkAnchor('CATIFmtConnectivity','','CATIFmtConnectivity') </script>.
</dl>
</dl>
<a name="GetCoordinates"></a><a name="GetCoordinates()"></a> <dt> o <b>GetCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetCoordinates</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Get nodes coordinates 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to an array containing coordinates in the following order: X0, Y0, Z0, X1, Y1, Z1, ...
</dl>
</dl>
<a name="GetCoordinates"></a><a name="GetCoordinates(int)"></a> <dt> o <b>GetCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetCoordinates</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuNode</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Get node coordinates
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuNode</tt>
   <dd>   Local number of node, between 0 to NbNodes-1
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to the array containing coordinates in the following order: X, Y, Z ...
</dl>
</dl>
<a name="GetDimension"></a><a name="GetDimension()"></a> <dt> o <b>GetDimension</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','const int')</script>  <b>GetDimension</b>(<td>)</table></dt>
<dl>
  <dd>
  Get the dimension of the connectivity.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    Dimension value.
   <br><b>Legal values</b>:
   <dl><dt>1</dt><dd>1D element.
   <dl><dt>2</dt><dd>2D element.
   <dl><dt>3</dt><dd>3D element.
   </dl>
</dl>
</dl>
<a name="GetEdgeSizes"></a><a name="GetEdgeSizes()"></a> <dt> o <b>GetEdgeSizes</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','const double *')</script>  <b>GetEdgeSizes</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the element's edges size (ignore intermediate nodes).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to an array of edges size table (0 to NbEdges-1).
</dl>
</dl>
<a name="GetEdges"></a><a name="GetEdges()"></a> <dt> o <b>GetEdges</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetEdges</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get element's edges (ignore intermediate nodes).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to an array of element's edges
</dl>
</dl>
<a name="GetMainAreas"></a><a name="GetMainAreas(double*&amp;)"></a> <dt> o <b>GetMainAreas</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainAreas</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oAreas</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's faces area (ignore intermediate nodes). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAreas</tt>
   <dd>   Pointer to array of face area table (0 to NbFaces-1).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetMainEdge"></a><a name="GetMainEdge(int,CATMathVector&amp;)"></a> <dt> o <b>GetMainEdge</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainEdge</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oEdge</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's edge (ignore intermediate nodes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> oEdge</tt>
   <dd>   Vector between first and second node of the edge.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetMainLengths"></a><a name="GetMainLengths(double*&amp;)"></a> <dt> o <b>GetMainLengths</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainLengths</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oLengths</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get element's edges length (ignore intermediate nodes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLengths</tt>
   <dd>   Pointer to an array of edge length table (0 to NbEdges-1).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetMainNormal"></a><a name="GetMainNormal(int,CATMathVector&amp;)"></a> <dt> o <b>GetMainNormal</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainNormal</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oNormal</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's face normal (ignore intermediate nodes). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> oNormal</tt>
   <dd>   Normal vector (0 for 1D element).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetMaxEdge"></a><a name="GetMaxEdge()"></a> <dt> o <b>GetMaxEdge</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetMaxEdge</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's maximum edge length. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    Maximum value of edges length.
</dl>
</dl>
<a name="GetMinEdge"></a><a name="GetMinEdge()"></a> <dt> o <b>GetMinEdge</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetMinEdge</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's minimum edge length. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    Minimum value of edges length.
</dl>
</dl>
<a name="GetMinHeight"></a><a name="GetMinHeight(double&amp;)"></a> <dt> o <b>GetMinHeight</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMinHeight</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oHeight</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's minimum height.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oHeight</tt>
   <dd>  Minimum value of element's heights.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetNodesInteriorAngles"></a><a name="GetNodesInteriorAngles(int,int&amp;,double*&amp;)"></a> <dt> o <b>GetNodesInteriorAngles</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','inline HRESULT')</script>  <b>GetNodesInteriorAngles</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbNodesOfFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oAngles</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compute element's nodes angle 
   Angle is computed between two consecutive edges of element's face
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbEdges-1.
 </dd>
    <dt><tt> oNbNodesOfFace</tt>
   <dd>   Number of nodes of face
 </dd>
    <dt><tt> oAngles</tt>
   <dd>   The pointer to an array containing the angle values.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="GetNormals"></a><a name="GetNormals(int)"></a> <dt> o <b>GetNormals</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetNormals</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNormalize</tt><td><tt>=0 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Get the element's faces normal (ignore intermediate nodes).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A pointer to an array of faces normal table (0 to _NbFaces-1)
</dl>
</dl>
<a name="GetVolume"></a><a name="GetVolume(double&amp;,int)"></a> <dt> o <b>GetVolume</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVolume</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oValue</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIntegrationType</tt><td><tt>=0 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Get the element's volume.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oValue</tt>
   <dd>   Volume value
 </dd>
    <dt><tt> iIntegrationType</tt>
   <dd>   Type of numeric integration ( gauss scheme point of integration ). 
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>Center.
   <dl><dt>1</dt><dd>Low precision.
   <dl><dt>2</dt><dd>Medium precision.
   <dl><dt>3</dt><dd>High precision.
   </dl> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>The method is successfull.
   <dt>E_FAIL</dt><dd>The method has failed.
   </dl>
</dl>
</dl>
<a name="Init"></a><a name="Init(double* const[])"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Init</b>(<td> const <script type="text/javascript"> activateLink('double* const','double* const[]')</script> <td><tt>iCoordinates</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize the geometrical engine with the geometry of a finite element. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCoordinates</tt>
   <dd>   iCoordinates array containning pointer coordinates in the following order :
   iCoordinates[0] pointer of the first coordinates of node 0.
   iCoordinates[1] pointer of the first coordinates of node 1.
   ..
   iCoordinates[NbNodes-1] pointer of the first coordinates of node the last node.</dd>
</dl>
</dl>
</dl>
<a name="Init"></a><a name="Init(CATFmtElement const* const)"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Init</b>(<td><script type="text/javascript"> activateLink('CATFmtElement const*','CATFmtElement const* const')</script> <td><tt>iElement</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize the geometrical engine with the geometry of a finite element. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElement</tt>
   <dd>   Finite element to be used to initialize the geometrical engine.</dd>
</dl>
</dl>
</dl>
<a name="SetCoordinates"></a><a name="SetCoordinates(int,double[])"></a> <dt> o <b>SetCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCoordinates</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuNode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iXYZ</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Set coordinates of specified node. This method invalidate all previous results like a call to Init.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuNode</tt>
   <dd>   Local number of node, between 0 to NbNodes-1.
 </dd>
    <dt><tt> iXYZ</tt>
   <dd>   New coordinates of node.</dd>
</dl>
</dl>
</dl>
 <h2>Data Members</h2> <br>
<a name="_FHeight"></a> <dt> o <b>_FHeight</b>
<pre>
  protected int _FHeight</dt>
</pre>
<dl>
  <dd>
</dl>
<a name="_MinHeight"></a> <dt> o <b>_MinHeight</b>
<pre>
  protected double _MinHeight</dt>
</pre>
<dl>
  <dd>
</dl>
<hr>
 This object is included in the file: <b>CATFmtGeometricalEngine.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFmtModelInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

