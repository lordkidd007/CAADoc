<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATFmtModelInterfaces Interface CATIFmtConnectivity</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATFmtModelInterfaces.htm" href="../CATFmtModelInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATFmtModelInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIFmtConnectivity"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATFmtModelInterfaces Interface CATIFmtConnectivity</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFmtConnectivity_43515','CATIFmtConnectivity','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../CATFmtModelInterfaces/class_CATFmtExtIConnectivity_47090.htm">CATFmtExtIConnectivity</a> adapter class.</b></p>
<hr>
<p>
 interface <b>CATIFmtConnectivity</b>
</p>
<p>
<b><i> Interface representing a finite element connectivity.</i></b><br>

 <b>Role</b>: This interface provides all necessary informations about a finite
 element connectivity such as dimension, nodes number, edges and faces desciption, ...
 <br>
 <br><b><i>Conventions used for method arguments</i></b>:
 <ul>
 <li>Nodes are numbered between 0 and NbNodes - 1. 
 <li>Edges are numbered between 0 and NbEdges - 1. 
 <li>Faces are numbered between 0 and NbFaces - 1; 
 <li>An object backward pointer to an array containing objects data is the last position into the array
 concerning the object. For example, if you have an array of backward pointers PtDataOfNodes into an array DataOfNodes for
 the nodes of the connectivity, all the data concerning the i-th node will be located between 
 DataOfNodes[PtDataOfNodes[i]+1] and DataOfNodes[PtDataOfNodes[i+1]]  
 </ul>
 <p><b>BOA information</b>: this interface CANNOT be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateGeometricalEngine()"><b>CreateGeometricalEngine</b></a>()
<dd>  Creates an returns an new geometrical engine compatible with the connectivity.
 <dt> o 
    <a href="#GetEdgeConnectivity(int)"><b>GetEdgeConnectivity</b></a>(int)
<dd>  Returns the connectivity corresponding to an edge.
 <dt> o 
    <a href="#GetEdgesOfFaces(int*&amp;,int*&amp;,int*&amp;)"><b>GetEdgesOfFaces</b></a>(int*&amp;,int*&amp;,int*&amp;)
<dd>  Retrieves the faces definition in term of edges.
 <dt> o 
    <a href="#GetEdgesOfNodes(int*&amp;,int*&amp;)"><b>GetEdgesOfNodes</b></a>(int*&amp;,int*&amp;)
<dd>  Retrieves the edges connected to edges.
 <dt> o 
    <a href="#GetEdgesPermutation()"><b>GetEdgesPermutation</b></a>()
<dd>  Returns the edges permutation that should be applied in order to reverse the element.
 <dt> o 
    <a href="#GetFaceConnectivity(int)"><b>GetFaceConnectivity</b></a>(int)
<dd>  Returns the connectivity corresponding to a face.
 <dt> o 
    <a href="#GetFacesOfEdges(int*&amp;,int*&amp;)"><b>GetFacesOfEdges</b></a>(int*&amp;,int*&amp;)
<dd>  Retrieves the faces connected to edges.
 <dt> o 
    <a href="#GetFacesOfNodes(int*&amp;,int*&amp;)"><b>GetFacesOfNodes</b></a>(int*&amp;,int*&amp;)
<dd>  Retrieves the faces connected to nodes.
 <dt> o 
    <a href="#GetFacesPermutation()"><b>GetFacesPermutation</b></a>()
<dd>  Returns the faces permutation that should be applied in order to reverse the element.
 <dt> o 
    <a href="#GetGeometricalEngine()"><b>GetGeometricalEngine</b></a>()
<dd>  Returns the geometrical engine associated with the connectivity.
 <dt> o 
    <a href="#GetInfos()"><b>GetInfos</b></a>()
<dd>  Returns general informations on the finite element connectivity (dimension and sizes).
 <dt> o 
    <a href="#GetInteriorAngleOfEdges(double*&amp;)"><b>GetInteriorAngleOfEdges</b></a>(double*&amp;)
<dd>  Returns the ideal interior angle for each edge.
 <dt> o 
    <a href="#GetMainConnectivity()"><b>GetMainConnectivity</b></a>()
<dd>  Returns the connectivity with the same shape and main nodes
 
 <dt> o 
    <a href="#GetName()"><b>GetName</b></a>()
<dd>  Returns the name of the connectivity.
 <dt> o 
    <a href="#GetNodesOfEdges(int*&amp;,int*&amp;)"><b>GetNodesOfEdges</b></a>(int*&amp;,int*&amp;)
<dd>  Retrieves the edges definition in terms of nodes.
 <dt> o 
    <a href="#GetNodesOfFaces(int*&amp;,int*&amp;)"><b>GetNodesOfFaces</b></a>(int*&amp;,int*&amp;)
<dd>  Retrieves the faces definition in term of nodes.
 <dt> o 
    <a href="#GetNodesPermutation()"><b>GetNodesPermutation</b></a>()
<dd>  Returns the nodes permutation that should be applied in order to reverse the element.
 <dt> o 
    <a href="#GetNumber()"><b>GetNumber</b></a>()
<dd>  Returns the finite element connectivity number.
 <dt> o 
    <a href="#GetSIMEdgesMapping()"><b>GetSIMEdgesMapping</b></a>()
<dd>  Returns the nodes mapping that should be applied in order to persist the element in SIM.
 <dt> o 
    <a href="#GetSIMFacesMapping()"><b>GetSIMFacesMapping</b></a>()
<dd>  Returns the nodes mapping that should be applied in order to persist the element in SIM.
 <dt> o 
    <a href="#GetSIMName()"><b>GetSIMName</b></a>()
<dd>  Returns the SIM name of the connectivity.
 <dt> o 
    <a href="#GetSIMNodesMapping()"><b>GetSIMNodesMapping</b></a>()
<dd>  Returns the nodes mapping that should be applied in order to persist the element in SIM.
 <dt> o 
    <a href="#GetTypeOfNodes(int*&amp;)"><b>GetTypeOfNodes</b></a>(int*&amp;)
<dd>  Retrieves the type of each nodes.
 <dt> o 
    <a href="#Next()"><b>Next</b></a>()
<dd>  Returns the next finite element connectivity.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateGeometricalEngine"></a><a name="CreateGeometricalEngine()"></a> <dt> o <b>CreateGeometricalEngine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATFmtGeometricalEngine','CATFmtGeometricalEngine *')</script>  <b>CreateGeometricalEngine</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an returns an new geometrical engine compatible with the connectivity.
</dl>
<a name="GetEdgeConnectivity"></a><a name="GetEdgeConnectivity(int)"></a> <dt> o <b>GetEdgeConnectivity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIFmtConnectivity','CATIFmtConnectivity *')</script>  <b>GetEdgeConnectivity</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumEdge</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the connectivity corresponding to an edge.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumEdge</tt>
   <dd>   Edge number.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The connectivity of the edge.
</dl>
</dl>
<a name="GetEdgesOfFaces"></a><a name="GetEdgesOfFaces(int*&amp;,int*&amp;,int*&amp;)"></a> <dt> o <b>GetEdgesOfFaces</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetEdgesOfFaces</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtEdgesOfFaces</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oEdgesOfFaces</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oOrientOfEdges</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the faces definition in term of edges.
 <br>
 The edges of faces should be ordered in sequence in order to define the positive
 orientation for faces. For a 3D connectivity all the faces should be outward oriented.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtEdgesOfFaces</tt>
   <dd>   Array containing for each face a backward pointer in oEdgesOfFaces and oOrientOfEdges arrays.
 </dd>
    <dt><tt> oEdgesOfFaces</tt>
   <dd>   Array containing the edges number of the faces.
 </dd>
    <dt><tt> oOrientOfEdges</tt>
   <dd>   Array containing the edges orientation of the faces.
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>The edge is used with its default orientation.
   <dt>1</dt><dd>The edge is used with its reverse orientation.
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of faces in the connectivity.
</dl>
</dl>
<a name="GetEdgesOfNodes"></a><a name="GetEdgesOfNodes(int*&amp;,int*&amp;)"></a> <dt> o <b>GetEdgesOfNodes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetEdgesOfNodes</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtEdgesOfNodes</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oEdgesOfNodes</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the edges connected to edges.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtEdgesOfNodes</tt>
   <dd>   Array containing for each node a backward pointer in oEdgesOfNodes array.
 </dd>
    <dt><tt> oEdgesOfNodes</tt>
   <dd>   Array containing the edges number connected to nodes.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of nodes in the connectivity.
</dl>
</dl>
<a name="GetEdgesPermutation"></a><a name="GetEdgesPermutation()"></a> <dt> o <b>GetEdgesPermutation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetEdgesPermutation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the edges permutation that should be applied in order to reverse the element.
</dl>
<a name="GetFaceConnectivity"></a><a name="GetFaceConnectivity(int)"></a> <dt> o <b>GetFaceConnectivity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIFmtConnectivity','CATIFmtConnectivity *')</script>  <b>GetFaceConnectivity</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumFace</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the connectivity corresponding to a face.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumFace</tt>
   <dd>   Face number.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The connectivity of the face.
</dl>
</dl>
<a name="GetFacesOfEdges"></a><a name="GetFacesOfEdges(int*&amp;,int*&amp;)"></a> <dt> o <b>GetFacesOfEdges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetFacesOfEdges</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtFacesOfEdges</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>FacesOfEdges</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the faces connected to edges.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtFacesOfEdges</tt>
   <dd>   Array containing for each edge a backward pointer in FacesOfEdges array.
 </dd>
    <dt><tt> FacesOfEdges</tt>
   <dd>   Array containing the faces number connected to edges.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of edges in the connectivity.
</dl>
</dl>
<a name="GetFacesOfNodes"></a><a name="GetFacesOfNodes(int*&amp;,int*&amp;)"></a> <dt> o <b>GetFacesOfNodes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetFacesOfNodes</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtFacesOfNodes</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oFacesOfNodes</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the faces connected to nodes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtFacesOfNodes</tt>
   <dd>   Array containing for each node a backward pointer in oFacesOfNodes array.
 </dd>
    <dt><tt> oFacesOfNodes</tt>
   <dd>   Array containing the faces number connected to nodes.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of nodes in the connectivity.
</dl>
</dl>
<a name="GetFacesPermutation"></a><a name="GetFacesPermutation()"></a> <dt> o <b>GetFacesPermutation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetFacesPermutation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the faces permutation that should be applied in order to reverse the element.
</dl>
<a name="GetGeometricalEngine"></a><a name="GetGeometricalEngine()"></a> <dt> o <b>GetGeometricalEngine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATFmtGeometricalEngine','CATFmtGeometricalEngine *')</script>  <b>GetGeometricalEngine</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the geometrical engine associated with the connectivity.
</dl>
<a name="GetInfos"></a><a name="GetInfos()"></a> <dt> o <b>GetInfos</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATFmtConnectivityInfos','const CATFmtConnectivityInfos *')</script>  <b>GetInfos</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns general informations on the finite element connectivity (dimension and sizes).
</dl>
<a name="GetInteriorAngleOfEdges"></a><a name="GetInteriorAngleOfEdges(double*&amp;)"></a> <dt> o <b>GetInteriorAngleOfEdges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetInteriorAngleOfEdges</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oAnglesOfEdges</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the ideal interior angle for each edge.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAnglesOfEdges</tt>
   <dd>   Array containing for each edge the ideal interior angle.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of edges in the connectivity.
</dl>
</dl>
<a name="GetMainConnectivity"></a><a name="GetMainConnectivity()"></a> <dt> o <b>GetMainConnectivity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIFmtConnectivity','CATIFmtConnectivity *')</script>  <b>GetMainConnectivity</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the connectivity with the same shape and main nodes
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The main the connectivity.
</dl>
</dl>
<a name="GetName"></a><a name="GetName()"></a> <dt> o <b>GetName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('char','const char *')</script>  <b>GetName</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the connectivity.
</dl>
<a name="GetNodesOfEdges"></a><a name="GetNodesOfEdges(int*&amp;,int*&amp;)"></a> <dt> o <b>GetNodesOfEdges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNodesOfEdges</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtNodesOfEdges</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oNodesOfEdges</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the edges definition in terms of nodes.
 <br>
 The nodes of edges should be ordered in sequence in order to define the positive
 orientation for edges.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtNodesOfEdges</tt>
   <dd>   Array containing for each edge a backward pointer in oNodesOfEdges array.
 </dd>
    <dt><tt> oNodesOfEdges</tt>
   <dd>   Array containing the nodes number of edges.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of edges in the connectivity.
</dl>
</dl>
<a name="GetNodesOfFaces"></a><a name="GetNodesOfFaces(int*&amp;,int*&amp;)"></a> <dt> o <b>GetNodesOfFaces</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNodesOfFaces</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oPtNodesOfFaces</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oNodesOfFaces</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the faces definition in term of nodes.
 <br>
 Nodes of a face should be ordered in a compatible way with the face connectivity (see 
<script type="text/javascript"> activateLinkAnchor('','GetFaceConnectivity','GetFaceConnectivity') </script> method). 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtNodesOfFaces</tt>
   <dd>   Array containing for each face a backward pointer in the oNodesOfFaces array.
 </dd>
    <dt><tt> oNodesOfFaces</tt>
   <dd>   Array containing the nodes number of the faces.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of faces in the connectivity.
</dl>
</dl>
<a name="GetNodesPermutation"></a><a name="GetNodesPermutation()"></a> <dt> o <b>GetNodesPermutation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetNodesPermutation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the nodes permutation that should be applied in order to reverse the element.
</dl>
<a name="GetNumber"></a><a name="GetNumber()"></a> <dt> o <b>GetNumber</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNumber</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the finite element connectivity number.
 Connectivities are numbered between 0 and the total number of elements minus one.
 Take care of the fact that this number is not stable upon modifications, 
 for example in case of creation of a new connectivity.
</dl>
<a name="GetSIMEdgesMapping"></a><a name="GetSIMEdgesMapping()"></a> <dt> o <b>GetSIMEdgesMapping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetSIMEdgesMapping</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the nodes mapping that should be applied in order to persist the element in SIM.
</dl>
<a name="GetSIMFacesMapping"></a><a name="GetSIMFacesMapping()"></a> <dt> o <b>GetSIMFacesMapping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetSIMFacesMapping</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the nodes mapping that should be applied in order to persist the element in SIM.
</dl>
<a name="GetSIMName"></a><a name="GetSIMName()"></a> <dt> o <b>GetSIMName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('char','const char *')</script>  <b>GetSIMName</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the SIM name of the connectivity.
</dl>
<a name="GetSIMNodesMapping"></a><a name="GetSIMNodesMapping()"></a> <dt> o <b>GetSIMNodesMapping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','const int *')</script>  <b>GetSIMNodesMapping</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the nodes mapping that should be applied in order to persist the element in SIM.
</dl>
<a name="GetTypeOfNodes"></a><a name="GetTypeOfNodes(int*&amp;)"></a> <dt> o <b>GetTypeOfNodes</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTypeOfNodes</b>(<td> const <script type="text/javascript"> activateLink('int','int*&amp;')</script> <td><tt>oTypeOfNodes</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the type of each nodes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTypeOfNodes</tt>
   <dd>   Array containing for each node his type:.
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>Main node.
   <dt>1</dt><dd>Intermediate node on edge.
   <dt>2</dt><dd>Intermediate node on face.
   <dt>3</dt><dd>Intermediate node in volume.
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of nodes in the connectivity.
</dl>
</dl>
<a name="Next"></a><a name="Next()"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIFmtConnectivity','const CATIFmtConnectivity *')</script>  <b>Next</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the next finite element connectivity. This method should be used with
 the 
<script type="text/javascript"> activateLinkAnchor('CATFmtConnectivityServices','GetFirstConnectivity','CATFmtConnectivityServices.GetFirstConnectivity') </script> method to scan all connectivities.
</dl>
<hr>
 This object is included in the file: <b>CATIFmtConnectivity.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATFmtModelInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

