<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>PLMDictionaryNavServices Class CATCkePLMNavSpecializationAccessPublicServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../PLMDictionaryNavServices.htm" href="../PLMDictionaryNavServices.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "PLMDictionaryNavServices";	}
		function getCurrentObjectName() { 
 	return "CATCkePLMNavSpecializationAccessPublicServices"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>PLMDictionaryNavServices <script type="text/javascript" > writeClassCharacteristic(); </script> CATCkePLMNavSpecializationAccessPublicServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCkePLMNavSpecializationAccessPublicServices_136242','CATCkePLMNavSpecializationAccessPublicServices','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCkePLMNavSpecializationAccessPublicServices</b>
</p>
<p>
<b><i> Services enabling the access to PLM types that correspond to specialization types (or specialization extensions) created by a customer with KWD tool.</i></b><br>
<br> 
 These services make sense only if you're operating in Unified Typing mode.<br>
 
 Small introduction to the different kinds of PLM types.<br>
 - top modeler types: for instance VPMReference. It corresponds to types delivered by our software out of the box<br>
 - discipline types: for instance Drawing. They correspond to sub types of top modeler types for a given application.<br>
 - custo types: it is the types defined by the customers with DMC tool, in Former typing system.<br>
 - specialization types: it is the types defined by the customers with the new KWD tool. They are different from custo types.<br> 
 - extension types: An extension is put on an object by an application to extend its data model and its behaviors.<br>
 - specialization extension types: it correspond to a sub type of an extension defined by the customer with the new KWD tool.<br>
 - customer extension types: they correspond to an extension defined by a customer with the new KWD tool.<br>
 - deployment extension types: they are not available in CAA public APIs. A deployment extension is put on an object with a business rule to extend automatically its data model. Deployment extension are created with the DMA tool.<br>

 A PLM object has a primary type (modeler, discipline, specialization, custo) and potentially several secondary types (extension, specialization extension, customer extension, and deployment extensions).<br>

 The services of this CATCkePLMNavSpecializationAccessPublicServices header are aimed at manipulating specialization types, specialization extension types, customer extension types created with KWD tool.<br>
 If you want to list attributes of a specialization type or extension, please use <script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>.<br>  If you want to access custo types, please use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavCustoAccessPublicServices','','CATCkePLMNavCustoAccessPublicServices') </script>.<br>  If you want to access out of the box types, please use 
<script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>.<br>  If you want to read attributes on an object, please use 
<script type="text/javascript"> activateLinkAnchor('CATCkeObjectAttrReadServices','','CATCkeObjectAttrReadServices') </script>.<br>  If you want to write attributes on an object, please use 
<script type="text/javascript"> activateLinkAnchor('CATCkeObjectAttrWriteServices','','CATCkeObjectAttrWriteServices') </script>.<br>  
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIType','','CATIType') </script>, <script type="text/javascript"> activateLinkAnchor('CATAttributeInfos','','CATAttributeInfos') </script>, <script type="text/javascript"> activateLinkAnchor('CATICkeObject','','CATICkeObject') </script>, <script type="text/javascript"> activateLinkAnchor('CATCkeObjectAttrReadServices','','CATCkeObjectAttrReadServices') </script>, <script type="text/javascript"> activateLinkAnchor('CATCkeObjectAttrWriteServices','','CATCkeObjectAttrWriteServices') </script>, <script type="text/javascript"> activateLinkAnchor('CATCkePLMNavCustoAccessPublicServices','','CATCkePLMNavCustoAccessPublicServices') </script>, <script type="text/javascript"> activateLinkAnchor('CATCkePLMNavPublicServices','','CATCkePLMNavPublicServices') </script>
</dl>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#IsACustomerExtension(CATIType_var&amp;,CATBoolean&amp;)"><b>IsACustomerExtension</b></a>(CATIType_var&amp;,CATBoolean&amp;)
<dd>  Indicates if the type is a secondary type (extension) and if it is a customer extension (not inheriting from DS type)
 
 <dt> o 
    <a href="#IsASpecializationType(CATIType_var&amp;)"><b>IsASpecializationType</b></a>(CATIType_var&amp;)
<dd>  Indicates if a type is a specialization type, a specialization extension or a customer extension.
 <dt> o 
    <a href="#RetrieveSpecializationType(char*,CATIType_var&amp;)"><b>RetrieveSpecializationType</b></a>(char*,CATIType_var&amp;)
<dd>  Returns the Specialization type from a type name.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="IsACustomerExtension"></a><a name="IsACustomerExtension(CATIType_var&amp;,CATBoolean&amp;)"></a> <dt> o <b>IsACustomerExtension</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsACustomerExtension</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oResult</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the type is a secondary type (extension) and if it is a customer extension (not inheriting from DS type)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type  in input
 </dd>
    <dt><tt> oResult</tt>
   <dd> TRUE if customer extension, FALSE if not
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the type is NULL 
 	 <li> S_FALSE if the type is not an extension 
 	 <li> S_OK  
  </ol>
</dl>
</dl>
<a name="IsASpecializationType"></a><a name="IsASpecializationType(CATIType_var&amp;)"></a> <dt> o <b>IsASpecializationType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsASpecializationType</b>(<td> const <script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates if a type is a specialization type, a specialization extension or a customer extension.<br>
 Usage: Only for CAA customers. Do not use it internally.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type in input
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the type is not found
 	 <li> S_FALSE if the type is not a specialization type, specialization extension or customer extension
 	 <li> S_OK	if the type has been found
  </ol>
</dl>
</dl>
<a name="RetrieveSpecializationType"></a><a name="RetrieveSpecializationType(char*,CATIType_var&amp;)"></a> <dt> o <b>RetrieveSpecializationType</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RetrieveSpecializationType</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iTypeName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the Specialization type from a type name.<br>
 Usage: Only for CAA customers. Do not use it internally.<br>
 Works for specialization types, specialization extensions and customer extensions.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTypeName</tt>
   <dd> The type name in input. Only specialization types, specialization extension types and customer extensions are authorized.
 </dd>
    <dt><tt> oType</tt>
   <dd> the type found
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 	 <li> E_INVALIDARG if the type is not found or type name is not a specialization type.
 	 <li> S_OK	if the type has been found
  </ol>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCkePLMNavSpecializationAccessPublicServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>PLMDictionaryNavServices</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

