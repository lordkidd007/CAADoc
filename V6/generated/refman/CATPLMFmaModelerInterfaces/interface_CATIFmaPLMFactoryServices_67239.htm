<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPLMFmaModelerInterfaces Interface CATIFmaPLMFactoryServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPLMFmaModelerInterfaces.htm" href="../CATPLMFmaModelerInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPLMFmaModelerInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIFmaPLMFactoryServices"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPLMFmaModelerInterfaces Interface CATIFmaPLMFactoryServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFmaPLMFactoryServices_67239','CATIFmaPLMFactoryServices','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFmaPLMFactoryServices</b>
</p>
<p>
<b><i> Interface to give the capability to extend a specified reference product into a Fastener one.</i></b><br>

</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateFastenerReferenceFromType(CATBaseUnknown**,CATIType_var&amp;,CATIType_var&amp;,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateFastenerReferenceFromType</b></a>(CATBaseUnknown**,CATIType_var&amp;,CATIType_var&amp;,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>    This method creates a CATIA Fastener Product reference and a new PLM Fastener Representation compatible with 'New Typing' system.
 <dt> o 
    <a href="#CreateMCXAsFastener(CATBaseUnknown**,CATBaseUnknown*)"><b>CreateMCXAsFastener</b></a>(CATBaseUnknown**,CATBaseUnknown*)
<dd>  
 <dt> o 
    <a href="#CreateMCXAsFastenerFromType(CATBaseUnknown**,CATBaseUnknown*,CATIType_var&amp;)"><b>CreateMCXAsFastenerFromType</b></a>(CATBaseUnknown**,CATBaseUnknown*,CATIType_var&amp;)
<dd>   This method creates a new PLM Fastener Connection compatible with 'New Typing' system.
 <dt> o 
    <a href="#ExtendMCXAsFastener(CATBaseUnknown*)"><b>ExtendMCXAsFastener</b></a>(CATBaseUnknown*)
<dd>  
 <dt> o 
    <a href="#ExtendPrdAsFastener(CATBaseUnknown*,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>ExtendPrdAsFastener</b></a>(CATBaseUnknown*,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateFastenerReferenceFromType"></a><a name="CreateFastenerReferenceFromType(CATBaseUnknown**,CATIType_var&amp;,CATIType_var&amp;,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateFastenerReferenceFromType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateFastenerReferenceFromType</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>opFstReferenceProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iFastenerType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iRepresentationType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATFmaFeatureType1','CATFmaFeatureType1')</script> <td><tt>iFTyp1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFTyp2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPTyp1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPTyp2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iCatalogID</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iClientID</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
   This method creates a CATIA Fastener Product reference and a new PLM Fastener Representation compatible with 'New Typing' system.
   Both Fastener & Representation are of Knowledge type as defined in the metadata.
   It also creates into the Fastener representation, the fastener Feature in the CATFastenerCont container. The type of feature is given by input iFTyp1 and iFTyp2 parameters. 
   It retrieves the created CAA fastener feature created thanks to iFTyp2 (see below explanations) and aggregates it as a child of the Mechanical Part feature. 
   For information, this method sets the PLM Fastener Reference Exposed attributes:
   <ul>
     <li>the VPMReference and VPMRepReference V_Discipline attributes.</li>
     <li>the "Fastener" exposed V_FastenerType attribute is set to a string built from the input Fastener Feature Type name FTyp (iFTyp1, iFTyp2) and the Fastener Process Type PTyp (iPTyp1, iPTyp2) parameters according to the following rules:</li>
     <ul>
       <li>Feature type FTyp is built by concatenating the PLM Fastener Feature Type and if it exists the specific CAA Applicative input Feature Type iFTyp2.</li>
       <li>Process type PTyp is built by concatenating (Use “!” Character as a separator) the primary iPTyp1 string parameter with the secondary parameter iPTyp2 if iPTyp2 is not a Null string.</li>
       <li>The full Fastener Type descriptor is built by concatenating iFTyp and iPTyp  (Use “_” Character as separator).</li>
     </ul>
   </ul>
   It also adds the dynamic attributes (see data model) and set-up their default values.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opFstReferenceProduct</tt>
   <dd>     created Fastener product reference.
   </dd>
    <dt><tt> iFastenerType</tt>
   <dd>      the Knowledge type for Fastener reference (can be a modeler type, a discipline at creation of a functional specialization)
   </dd>
    <dt><tt> iRepresentationType</tt>
   <dd>      the Knowledge type for Fastener Representation (can be a modeler type, a discipline at creation of a functional specialization)
      currently, creation of Fastener Representation of user-defined Knowledge type is not supported. Hence this argument must be passed as NULL_var.
   </dd>
    <dt><tt> iFTyp1</tt>
   <dd>      the primary PLM Fastener Model Feature Type. It must be CATFstSpotAssy for SpotAssembly fastener creation. It may have several values:
      <ul>
         <li>CATFstSpot for Fst_Spot creation (like fasteners are generated by the DS Automotive Body in White Fasteners application).</li>
         <li>CATFstBead for Fst_Bead creation (like fasteners are generated by the DS F&A fasteners application.</li>
         <li>CATFstSpotAssy for Fst_SpotAssy creation (like fasteners will be generated in further released by DS mechanical Fasteners applications).</li>
      </ul>
   </dd>
    <dt><tt> iFTyp2</tt>
   <dd>      the secondary feature type.
   </dd>
    <dt><tt> iPTyp1</tt>
   <dd>      the primary process type.
   </dd>
    <dt><tt> iPTyp2</tt>
   <dd>      the secondary process type.
   </dd>
    <dt><tt> iCatalogID</tt>
   <dd>      the catalog name containing the iFTyp2 CAA feature.
   </dd>
    <dt><tt> iClientID</tt>
   <dd>      the client id related to catalog iCatalogID.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
    <dd>if this Product Reference was successfully extended to a PLM Fastener product reference.</dd>
    <dt>E_FAIL</dt>
    <dd>otherwise.</dd>
   </dl>
</dl>
</dl>
<a name="CreateMCXAsFastener"></a><a name="CreateMCXAsFastener(CATBaseUnknown**,CATBaseUnknown*)"></a> <dt> o <b>CreateMCXAsFastener</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateMCXAsFastener</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>opMCX</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipRootReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R214 use 
<script type="text/javascript"> activateLinkAnchor('','CreateMCXAsFastenerFromType','CreateMCXAsFastenerFromType') </script> <br>  This method creates a new PLM Fastener Connection implemented by a given fastener instance in a given root reference product. 
 
  
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipRootReference</tt>
   <dd> [in]      the root reference product that will contain the created Engineering Connection.
  </dd>
    <dt><tt> opMCX</tt>
   <dd> [out, CATBaseUnknown#Release]      the created Engineering Connection.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
    <dd>if the Engineering Connection has been successfully created and extended with fastener properties.</dd>
    <dt>E_INVALIDARG</dt>
    <dd>if ipRootReference is NULL or not a reference product.</dd>
    <dt>E_FAIL</dt>
    <dd>otherwise.</dd>
   </dl>

</dl>
</dl>
<a name="CreateMCXAsFastenerFromType"></a><a name="CreateMCXAsFastenerFromType(CATBaseUnknown**,CATBaseUnknown*,CATIType_var&amp;)"></a> <dt> o <b>CreateMCXAsFastenerFromType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateMCXAsFastenerFromType</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>opMCX</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipRootReference</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIType_var','CATIType_var&amp;')</script> <td><tt>iMCXType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  This method creates a new PLM Fastener Connection compatible with 'New Typing' system.
 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipRootReference</tt>
   <dd> [in]      the root reference product that will contain the created Engineering Connection.
  </dd>
    <dt><tt> iMCXType</tt>
   <dd> [in]      the Knowledge type for Connection
      if passed NULL_var handler, then standard Connection will be created
  </dd>
    <dt><tt> opMCX</tt>
   <dd> [out, CATBaseUnknown#Release]      the created Engineering Connection.
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
    <dd>if the Engineering Connection has been successfully created and extended with fastener properties.</dd>
    <dt>E_INVALIDARG</dt>
    <dd>if ipRootReference is NULL or not a reference product.</dd>
    <dt>E_FAIL</dt>
    <dd>otherwise.</dd>
   </dl>

</dl>
</dl>
<a name="ExtendMCXAsFastener"></a><a name="ExtendMCXAsFastener(CATBaseUnknown*)"></a> <dt> o <b>ExtendMCXAsFastener</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExtendMCXAsFastener</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iopMCX</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R214 use 
<script type="text/javascript"> activateLinkAnchor('','CreateMCXAsFastenerFromType','CreateMCXAsFastenerFromType') </script> <br>  This method enriches a newly created Engineering Connection into a PLM Fastener Connection implemented by a given fastener instance. 

  
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iopMCX</tt>
   <dd>      the newly created Engineering Connection.

  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
    <dd>if the Engineering Connection has been successfully extended with fastener properties.</dd>
    <dt>E_INVALIDARG</dt>
    <dd>if iopMCX is NULL or not an engineering connection.</dd>
    <dt>E_FAIL</dt>
    <dd>otherwise.</dd>
   </dl>

</dl>
</dl>
<a name="ExtendPrdAsFastener"></a><a name="ExtendPrdAsFastener(CATBaseUnknown*,CATFmaFeatureType1,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>ExtendPrdAsFastener</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExtendPrdAsFastener</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipReference</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATFmaFeatureType1','CATFmaFeatureType1')</script> <td><tt>iFTyp1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFTyp2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPTyp1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iPTyp2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iCatalogID</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iClientID</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  R214 use 
<script type="text/javascript"> activateLinkAnchor('','CreateFastenerReferenceFromType','CreateFastenerReferenceFromType') </script> <br>   This method creates a CATIA Fastener in a new PLM Fastener Representation associated to the input Reference Product. The new created Fastener is exposed by the input reference product thanks to the creation of a PLM Fastener Extension whose Type and Fastener Type descriptor are set depending on the input PLM Fastener Type Template.
   It also creates into the Fastener representation, the fastener Feature in the CATFastenerCont container. The type of feature is given by input iFTyp1 and iFTyp2 parameters. 
   It retrieves the created CAA fastener feature created thanks to iFTyp2 (see below explanations) and aggregates it as a child of the Mechanical Part feature. 
   For information, this method sets the PLM Fastener Reference Exposed attributes:
   <ul>
     <li>the VPMReference and VPMRepReference V_Discipline attributes.</li>
     <li>the PLM extension exposed V_Fastener Type attribute is set to a string built from the input Fastener Feature Type name FTyp (iFTyp1, iFTyp2) and the Fastener Process Type PTyp (iPTyp1, iPTyp2) parameters according to the following rules:</li>
     <ul>
       <li>Feature type FTyp is built by concatenating the PLM Fastener Feature Type and if it exists the specific CAA Applicative input Feature Type iFTyp2.</li>
       <li>Process type PTyp is built by concatenating (Use “!” Character as a separator) the primary iPTyp1 string parameter with the secondary parameter iPTyp2 if iPTyp2 is not a Null string.</li>
       <li>The full Fastener Type descriptor is built by concatenating iFTyp and iPTyp  (Use “_” Character as separator).</li>
     </ul>
   </ul>
   It also adds the dynamic attributes (see data model) and set-up their default values.
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipReference</tt>
   <dd>     product reference to extend as a fastener one.
   </dd>
    <dt><tt> iFTyp1</tt>
   <dd>      the primary PLM Fastener Model Feature Type. It must be CATFstSpotAssy for SpotAssembly fastener creation. It may have several values:
      <ul>
         <li>CATFstSpot for Fst_Spot creation (like fasteners are generated by the DS Automotive Body in White Fasteners application).</li>
         <li>CATFstBead for Fst_Bead creation (like fasteners are generated by the DS F&A fasteners application.</li>
         <li>CATFstSpotAssy for Fst_SpotAssy creation (like fasteners will be generated in further released by DS mechanical Fasteners applications).</li>
      </ul>
   </dd>
    <dt><tt> iFTyp2</tt>
   <dd>      the secondary feature type.
   </dd>
    <dt><tt> iPTyp1</tt>
   <dd>      the primary process type.
   </dd>
    <dt><tt> iPTyp2</tt>
   <dd>      the secondary process type.
   </dd>
    <dt><tt> iCatalogID</tt>
   <dd>      the catalog name containing the iFTyp2 CAA feature.
   </dd>
    <dt><tt> iClientID</tt>
   <dd>      the client id related to catalog iCatalogID.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
    <dd>if this Product Reference was successfully extended to a PLM Fastener product reference.</dd>
    <dt>E_FAIL</dt>
    <dd>otherwise.</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFmaPLMFactoryServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMFmaModelerInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

