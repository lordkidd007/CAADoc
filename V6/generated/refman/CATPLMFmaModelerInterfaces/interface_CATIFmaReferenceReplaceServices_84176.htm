<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPLMFmaModelerInterfaces Interface CATIFmaReferenceReplaceServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPLMFmaModelerInterfaces.htm" href="../CATPLMFmaModelerInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPLMFmaModelerInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIFmaReferenceReplaceServices"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPLMFmaModelerInterfaces Interface CATIFmaReferenceReplaceServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIFmaReferenceReplaceServices_84176','CATIFmaReferenceReplaceServices','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIFmaReferenceReplaceServices</b>
</p>
<p>
<b><i> Interface to give the capability to test if existing fastener reference can be replaced by new one.</i></b><br>

</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#IsFastenerReferenceReplacable(CATBaseUnknown*,CATBaseUnknown*)"><b>IsFastenerReferenceReplacable</b></a>(CATBaseUnknown*,CATBaseUnknown*)
<dd>    Tests if fastener can be replaced by new fastener.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="IsFastenerReferenceReplacable"></a><a name="IsFastenerReferenceReplacable(CATBaseUnknown*,CATBaseUnknown*)"></a> <dt> o <b>IsFastenerReferenceReplacable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsFastenerReferenceReplacable</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipFstRefToReplace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ipFstRefReplacing</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Tests if fastener can be replaced by new fastener.
   This service analyzes:
   <ul>
      The two input fastener refereneces i.e. 'reference to replace' and 'replacing reference' and inform the user that
      if it is possible to replace one by another.
      Reference replace is possible in the following cases
       1. If both fastener references are not primary secondary fasteners
       2. If both are primary secondary fasteners, then repalce is possible only if the following conditions are satisfied:
          a. 'Replacing reference' is evolution of 'reference to replace' i.e. both have same logical IDs
          b. Both references have same number of Seconday Fasteners
          c. The Secondary Fastener connections on replacing reference must have same logical IDs as those of the reference to replace.
   </ul>
	 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipFstRefToReplace</tt>
   <dd>      the Fastener reference which is to be replaced
  </dd>
    <dt><tt> ipFstRefReplacing</tt>
   <dd>      the Fastener reference which will replace the existing reference
  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
    <dt>S_OK</dt>
       <dd> if input Fastener references are valid and the replace is possible </dd>
    <dt>S_FALSE</dt>
       <dd> if input Fastener references are valid but the replace is NOT possible </dd>
    <dt>E_INVALIDARG</dt>
       <dd> if input is NULL</dd>
    <dt>E_FAIL</dt>
       <dd>otherwise.</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIFmaReferenceReplaceServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMFmaModelerInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

