<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Global Function CATCGMCreateTopSplitWire</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATCGMCreateTopSplitWire"; } 
	function getCurrentType() { 
 	return "global function"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces Global Function CATCGMCreateTopSplitWire</h1>

<br><dt><table><tr><td>  <script type="text/javascript"> activateLink('CATICGMHybSplit',' CATICGMHybSplit *')</script>  <b>CATCGMCreateTopSplitWire</b>(<td><script type="text/javascript"> activateLink('CATGeoFactory','CATGeoFactory*')</script> <td><tt>iFactory</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATTopData','CATTopData*')</script> <td><tt>iData</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iBodyToCut</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iCuttingBody</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATHybSelectionMode','CATHybSelectionMode')</script> <td><tt>iSelectMode</tt><td><tt>= POSITIVE_POSITIVE_SIDE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an operator that splits a CATWire domain by a CATShell,a CATWire or a
 CATVertexInVolume domain.
 <br>The body to split and the cutting body must only contain 
 one shell domain and one (shell, wire or vertexInVolume) domain respectively.
 <br><b>Orientation</b>: The orientation of the resulting body is the orientation
 of the body to cut.
 <br><b>Journal</b>:
 <ul>
 <li>The edges that are kept and not cut are written as <tt>CATCGMJournal::Keep</tt>
 <li>The edges that are cut are written as <tt>CATCGMJournal::Subdivision</tt> 
 <li>The new vertices are written as <tt>CATCGMJournal::Creation</tt>
 <li>The edges that are neither cut, nor kept, are written as <tt>CATCGMJournal::Deletion</tt>
 </ul>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFactory</tt>
   <dd> A pointer to the factory of the resulting body.
 </dd>
    <dt><tt> iData</tt>
   <dd> A pointer to the topological data.
 </dd>
    <dt><tt> iBodyToCut</tt>
   <dd> A pointer to the body to cut. It must only contain one wire
 domain.
 </dd>
    <dt><tt> iCuttingBody</tt>
   <dd> A pointer to the cutting body. It must only contain one (wire, shell or vertexInVolume)
 domain.
 </dd>
    <dt><tt> iSelectMode</tt>
   <dd> Identifies which partitions of the split body are kept.
 <ul>
 <li>Wire cut by a shell:
 <dl>
 <dt>POSITIVE_POSITIVE_SIDE or POSITIVE_NEGATIVE_SIDE</dt>
 <dd>The partitions to keep are pointed to by the shell orientation.</dd>
 <dt>NEGATIVE_POSITIVE_SIDE or NEGATIVE_NEGATIVE_SIDE</dt>
 <dd>The partitions to remove are pointed to by the shell orientation.</dd>
 </dl>
 </li>
 <li>Wire cut by a wire. The split partitions are alternately assigned NEGATIVE and POSITIVE values,
 the first partition being NEGATIVE when moving along the wire direction 
 (going from the start vertex to the end vertex). The result is independent on
 the cutting wire orientation:
 <dl>
 <dt>POSITIVE_POSITIVE_SIDE or POSITIVE_NEGATIVE_SIDE</dt>
 <dd>The POSITIVE partitions are kept.</dd>
 <dt>NEGATIVE_POSITIVE_SIDE or NEGATIVE_NEGATIVE_SIDE</dt>
 <dd>The POSITIVE partitions are removed.</dd>
 </dl>
 </li>
 <li>Wire cut by a Vertex. The wire is split into two partitions. The NEGATIVE part is the first one in the wire 
 when moving along the wire direction (going from the start vertex to the end vertex).
 <dl>
 <dt>POSITIVE_POSITIVE_SIDE or POSITIVE_NEGATIVE_SIDE</dt>
 <dd>The POSITIVE partitions are kept.</dd>
 <dt>NEGATIVE_POSITIVE_SIDE or NEGATIVE_NEGATIVE_SIDE</dt>
 <dd>The POSITIVE partitions are removed.</dd>
 </dl>
 </li>
 </ul>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  [out, IUnknown#Release] The pointer to the created operator. To be released with the <tt>Release</tt> method afer use.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCGMCreateTopBoolean.h</b><br>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

