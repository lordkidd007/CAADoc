<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Class CATICGMTopologicalBlendCurve</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICGMTopologicalBlendCurve"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATICGMTopologicalBlendCurve</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATICGMTopologicalBlendCurve_61244','CATICGMTopologicalBlendCurve','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATICGMTopologicalBlendCurve</b>
</p>
<p>
<b><i> Class defining the topological operator that connects two wire bodies.</i></b><br>

 <br> Continuity criteria can be precised: G0, G1 or G2.
 <br>The CATICGMTopologicalBlendCurve operator follows the global frame of the topological operators 
 and satisfies the smart mechanism: 
 the input bodies are not modified. A new resulting body is created, 
 possibly sharing data with the input bodies. The resulting blend can be created
 separately from the inputs, or linked to the inputs according to the <tt>SetTrimmingMode</tt> method.  
<ul>
 <li>A CATICGMTopologicalBlendCurve operator is created with the <tt>CATCGMCreateTopologicalBlendCurve</tt> global function.
 It must be directly released with the <tt>Release</tt> method after use. It is is not streamable. 
<li>Options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method 
<li>The result is accessed with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> method to remove it from the  geometric factory.
</ul>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATICGMTopologicalBlendCurve()"><b>CATICGMTopologicalBlendCurve</b></a>()
<dd>  Constructor
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs <tt>this</tt> operator (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetCurvatureParameter(CATLONG32,double)"><b>SetCurvatureParameter</b></a>(CATLONG32,double)
<dd>  Defines the influence of the curvature constraint (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetCurve(CATLONG32,CATBody*)"><b>SetCurve</b></a>(CATLONG32,CATBody*)
<dd>   Defines the topological blend curve limits (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetCurveParam(CATLONG32,CATBody*)"><b>SetCurveParam</b></a>(CATLONG32,CATBody*)
<dd>  Defines the topological blend curve limits (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetDefaultConfiguration(CATLONG32,CATLONG32&amp;)"><b>SetDefaultConfiguration</b></a>(CATLONG32,CATLONG32&amp;)
<dd>  Returns the starting direction keeping the wire of greatest length (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetSupportTrimmingMode(CATLONG32,CATLONG32)"><b>SetSupportTrimmingMode</b></a>(CATLONG32,CATLONG32)
<dd>  Defines whether the input bodies must be trimmed (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetTangencyParameter(CATLONG32,double)"><b>SetTangencyParameter</b></a>(CATLONG32,double)
<dd>  Defines the influence of the tangency constraint (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetTransitionContinuity(CATLONG32,CATLONG32)"><b>SetTransitionContinuity</b></a>(CATLONG32,CATLONG32)
<dd>  Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetTransitionOrientation(CATLONG32,CATLONG32)"><b>SetTransitionOrientation</b></a>(CATLONG32,CATLONG32)
<dd>  Modifies the starting direction of the connecting wire (<tt>ADVANCED mode</tt>).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATICGMTopologicalBlendCurve"></a><a name="CATICGMTopologicalBlendCurve()"></a> <dt> o <b>CATICGMTopologicalBlendCurve</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATICGMTopologicalBlendCurve</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor
</dl>
 <h2>Methods</h2> <br>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Runs <tt>this</tt> operator (<tt>ADVANCED</tt> mode).
 <br>It is possible to <tt>Run</tt> the operator with different inputs or parameters. Each time,
 a new body is created, that you must remove from the geometric factory 
<script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> if you do not want to keep it.
</dl>
<a name="SetCurvatureParameter"></a><a name="SetCurvatureParameter(CATLONG32,double)"></a> <dt> o <b>SetCurvatureParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCurvatureParameter</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iCurvatureParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the influence of the curvature constraint (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> iCurvatureParameter</tt>
   <dd> The value to multiply the curvature, in order to increase or decrease its influence.</dd>
</dl>
</dl>
</dl>
<a name="SetCurve"></a><a name="SetCurve(CATLONG32,CATBody*)"></a> <dt> o <b>SetCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCurve</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iWire</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Defines the topological blend curve limits (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or second (2) wire body. 
 </dd>
    <dt><tt> iWire</tt>
   <dd> The pointer to the new first wire.</dd>
</dl>
</dl>
</dl>
<a name="SetCurveParam"></a><a name="SetCurveParam(CATLONG32,CATBody*)"></a> <dt> o <b>SetCurveParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCurveParam</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iWireParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the topological blend curve limits (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or second (2) wire body. 
 </dd>
    <dt><tt> iWireParam</tt>
   <dd> The pointer to the new vertex body, defining where the connection must be done.</dd>
</dl>
</dl>
</dl>
<a name="SetDefaultConfiguration"></a><a name="SetDefaultConfiguration(CATLONG32,CATLONG32&amp;)"></a> <dt> o <b>SetDefaultConfiguration</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDefaultConfiguration</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32&amp;')</script> <td><tt>oTransitionOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the starting direction keeping the wire of greatest length (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> oTransitionOrientation</tt>
   <dd> The default orientation of the <tt>iWhichWire</tt>.
 <br><b>Legal values</b>: <tt>1</tt> if the connecting wire starts in the natural orientation of
 <tt>iWhichWire</tt>, </tt>-1</tt>
 for the opposite orientation.</dd>
</dl>
</dl>
</dl>
<a name="SetSupportTrimmingMode"></a><a name="SetSupportTrimmingMode(CATLONG32,CATLONG32)"></a> <dt> o <b>SetSupportTrimmingMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSupportTrimmingMode</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iTrimmingMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines whether the input bodies must be trimmed (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or second (2) wire body.
 </dd>
    <dt><tt> iTrimmingMode</tt>
   <dd> The trimming mode fot <tt>iWhichWire</tt>.
 <br><b>Legal values</b>: <tt>0</tt> if <tt>iWhichWire</tt> is not trimmed, <tt>1</tt> if 
 it is trimmed according to the smart mechanism.</dd>
</dl>
</dl>
</dl>
<a name="SetTangencyParameter"></a><a name="SetTangencyParameter(CATLONG32,double)"></a> <dt> o <b>SetTangencyParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTangencyParameter</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTangencyParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the influence of the tangency constraint (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> iTangencyParameter</tt>
   <dd> The value to multiply the tangent, in order to increase or decrease its influence.</dd>
</dl>
</dl>
</dl>
<a name="SetTransitionContinuity"></a><a name="SetTransitionContinuity(CATLONG32,CATLONG32)"></a> <dt> o <b>SetTransitionContinuity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTransitionContinuity</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iTransitionContinuity</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> iTransitionContinuity</tt>
   <dd> The continuity criteria
 <br><b>Legal values</b>: <tt>0</tt> for G0 continuity, <tt>1</tt> for G1 continuity (default value), 
 <tt>2</tt> for G2 continuity.</dd>
</dl>
</dl>
</dl>
<a name="SetTransitionOrientation"></a><a name="SetTransitionOrientation(CATLONG32,CATLONG32)"></a> <dt> o <b>SetTransitionOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTransitionOrientation</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iTransitionOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Modifies the starting direction of the connecting wire (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> oTransitionOrientation</tt>
   <dd> The orientation of the starting direction, with regards to the default direction given by
 <tt>SetDefaultConfiguration</tt>.
 <br><b>Legal values</b>: <tt>1</tt> if the connecting wire starts in the default orientation given
 by <tt>SetDefaultConfiguration</tt>, </tt>-1</tt>
 for the opposite orientation.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMTopologicalBlendCurve.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

