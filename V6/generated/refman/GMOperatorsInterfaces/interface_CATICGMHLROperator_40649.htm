<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Interface CATICGMHLROperator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICGMHLROperator"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces Interface CATICGMHLROperator</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICGMHLROperator_40649','CATICGMHLROperator','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICGMHLROperator</b>
</p>
<p>
<b><i> Class defining an operator that computes the edge visibility information of a model for the specified views.</i></b><br>

 A view is specified in terms of a <tt>CATMathPlane</tt> which defines the view direction and the projection support.
 It is possible to define multiple views and then run the operator once.
 <ul>
     <li> A <tt>CATICGMHLROperator</tt> operator is created with the <tt>CATCGMCreateHLROperator</tt> global functions.
     <li> It is the user's responsibility to release the operator after it has been used.
 </ul></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddBody(CATBody*)"><b>AddBody</b></a>(CATBody*)
<dd>  Adds a <tt>CATBody</tt> to the input HLR scene.
 <dt> o 
    <a href="#AddBodyInstance(CATBody*,CATMathTransformation const&amp;)"><b>AddBodyInstance</b></a>(CATBody*,CATMathTransformation const&amp;)
<dd>  Adds an instance of a <tt>CATBody</tt> to the input HLR scene.
 <dt> o 
    <a href="#EnableClashComputationMode()"><b>EnableClashComputationMode</b></a>()
<dd>  Activates the computation of clashes between different bodies of the scene.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Returns the current result of the HLR computation.
 <dt> o 
    <a href="#SetProjectionPlane(CATMathPlane const&amp;)"><b>SetProjectionPlane</b></a>(CATMathPlane const&amp;)
<dd>  Defines a mathematical plane for a new view to be used in the next computation.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddBody"></a><a name="AddBody(CATBody*)"></a> <dt> o <b>AddBody</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATULONG32','CATULONG32')</script>  <b>AddBody</b>(<td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iBody</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a <tt>CATBody</tt> to the input HLR scene.
 This body can be contained by another factory than the input one,
 but its scale has to be smaller or equal to the scale of the input factory.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBody</tt>
   <dd> The pointer to the <tt>CATBody</tt> to add to the scene.
 </dd>
    <dt><tt> iTransformation</tt>
   <dd> The pointer to the <tt>CATMathTransformation</tt> to apply to the input body.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The unique integer value as the "Identifier" of the current instance.
</dl>
</dl>
<a name="AddBodyInstance"></a><a name="AddBodyInstance(CATBody*,CATMathTransformation const&amp;)"></a> <dt> o <b>AddBodyInstance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATULONG32','CATULONG32')</script>  <b>AddBodyInstance</b>(<td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iBody</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathTransformation const','CATMathTransformation const&amp;')</script> <td><tt>iTransformation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an instance of a <tt>CATBody</tt> to the input HLR scene.
 This body can be contained by another factory than the input one,
 but its scale has to be smaller or equal to the scale of the input factory.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBody</tt>
   <dd> The pointer to the <tt>CATBody</tt> to add to the scene.
 </dd>
    <dt><tt> iTransformation</tt>
   <dd> The <tt>CATMathTransformation</tt> to apply on the input body.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The unique integer value as the "Identifier" of the current instance (<tt>CATBody</tt> is associated with a specific position matrix).
</dl>
</dl>
<a name="EnableClashComputationMode"></a><a name="EnableClashComputationMode()"></a> <dt> o <b>EnableClashComputationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EnableClashComputationMode</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Activates the computation of clashes between different bodies of the scene.
 The caller has to take into account the cost of this treatment and activate this mode only if the scene is known to contain overlapping bodies.
 By default, the <tt>ClashComputationMode</tt> is disabled.
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATHLRResult','CATHLRResult *')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the current result of the HLR computation.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>CATHLRResult</tt> pointer.
 The caller has to release the <tt>CATHLRResult</tt> object after use.
</dl>
</dl>
<a name="SetProjectionPlane"></a><a name="SetProjectionPlane(CATMathPlane const&amp;)"></a> <dt> o <b>SetProjectionPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetProjectionPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane const','CATMathPlane const&amp;')</script> <td><tt>iProjectionPlane</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines a mathematical plane for a new view to be used in the next computation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProjectionPlane</tt>
   <dd> The reference to the <tt>CATMathPlane</tt> which defines both the view direction and the projection support.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMHLROperator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

