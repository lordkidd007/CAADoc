<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Interface CATICGMHybBoolean</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICGMHybBoolean"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces Interface CATICGMHybBoolean</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICGMHybBoolean_38871','CATICGMHybBoolean','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICGMHybBoolean</b>
</p>
<p>
<b><i> Class defining the operator that performs Boolean operations on two bodies.</i></b><br>

<br>
 This operator operates on the 2D (CATShell), 1D (CATWire) and 0D (CATVertexInVolume)
 domains of a CATBody.
 It follows the general frame of all operators and satisfies the smart mechanism: the
 input bodies are not modified. A new resulting body is created, 
 possibly sharing data with the input bodies.
<ul>
 <li><tt>CATICGMHybBoolean</tt> is created with the <tt>CATCGMCreateTopTrim</tt> or <tt>CATCGMCreateTopSplit</tt> global functions.
 It must be
 directly released with the <tt>Release</tt> method after use.
 It is not streamable. 
<li>The result is accessed with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> method to remove it from the  geometric factory.
</ul>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATCGMCreateTopSplit','','CATCGMCreateTopSplit') </script>, <script type="text/javascript"> activateLinkAnchor('CATCGMCreateTopTrim','','CATCGMCreateTopTrim') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAmbiguousCells(CATLISTP(CATCell)&amp;)"><b>GetAmbiguousCells</b></a>(CATLISTP(CATCell)&amp;)
<dd>  Returns the list of ambiguous cells.
 <dt> o 
    <a href="#GetConfusionCells(CATLISTP(CATCell)&amp;)"><b>GetConfusionCells</b></a>(CATLISTP(CATCell)&amp;)
<dd>  Returns the list of overlapping cells.
 <dt> o 
    <a href="#GetNbAmbiguousCells()"><b>GetNbAmbiguousCells</b></a>()
<dd>   Returns the number of ambiguous cells.
 <dt> o 
    <a href="#GetNbConfusionCells()"><b>GetNbConfusionCells</b></a>()
<dd>   Returns the number of overlapping cells.
 <dt> o 
    <a href="#GetSelectedCellsByLayDownMode()"><b>GetSelectedCellsByLayDownMode</b></a>()
<dd>   Returns the number of cells kept or removed by using the <tt>SetSelectedCellsByLayDownMode</tt> method.
 <dt> o 
    <a href="#GetTangentDesignCells(CATLISTP(CATCell)&amp;)"><b>GetTangentDesignCells</b></a>(CATLISTP(CATCell)&amp;)
<dd>   Retrieves the list of tangent cells.
 <dt> o 
    <a href="#GetTangentDesignMode()"><b>GetTangentDesignMode</b></a>()
<dd>   Retrieves the tangent design mode.
 <dt> o 
    <a href="#IsResultTangentDesign()"><b>IsResultTangentDesign</b></a>()
<dd>   Retrieves the result of the tangent design analysis.
 <dt> o 
    <a href="#SetSelectedCells(CATLISTP(CATCell)&amp;,CATLISTP(CATCell)&amp;)"><b>SetSelectedCells</b></a>(CATLISTP(CATCell)&amp;,CATLISTP(CATCell)&amp;)
<dd>  Specifies the cells to be kept and the cells to be removed in the operation.
 <dt> o 
    <a href="#SetSelectedCellsByLayDownMode(int)"><b>SetSelectedCellsByLayDownMode</b></a>(int)
<dd>  When the cells specified in the SetSelectedCells method do not
 belong to the input bodies, the boolean operation cannot complete.
 <dt> o 
    <a href="#SetWarningOnTangentDesign(int)"><b>SetWarningOnTangentDesign</b></a>(int)
<dd>   (De)activates the detection of cells which are tangent to each other.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAmbiguousCells"></a><a name="GetAmbiguousCells(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>GetAmbiguousCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetAmbiguousCells</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>oListOfCells</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of ambiguous cells.
 In some cases, the operator is unable to detect which cells
 have to be removed. The operation completes, but the generated
 body generally contains all the input cells. 
 When there are ambiguous cells, the application must specify which
 cells are to be kept or removed by using the <tt>SetSelectedCells</tt> methods.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCells</tt>
   <dd> The list of ambiguous cells.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of ambiguous cells.
</dl>
</dl>
<a name="GetConfusionCells"></a><a name="GetConfusionCells(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>GetConfusionCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetConfusionCells</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>oListOfCells</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of overlapping cells.
 In some cases, the operator is unable to detect which cells
 have to be removed. The operation completes, but the generated
 body generally contains all the input cells. 
 When there are overlapping cells, the application must specify which
 cells are to be kept or removed by using the <tt>SetSelectedCells</tt> methods.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCells</tt>
   <dd> The list of overlapping cells.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of overlapping cells.
</dl>
</dl>
<a name="GetNbAmbiguousCells"></a><a name="GetNbAmbiguousCells()"></a> <dt> o <b>GetNbAmbiguousCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNbAmbiguousCells</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the number of ambiguous cells.
 In some cases, the operator is unable to detect which cells
 have to be removed. The operation completes, but the generated
 body generally contains all the input cells. 
 When there are ambiguous cells, the application must specify which
 cells are to be kept or removed by using the <tt>SetSelectedCells</tt> methods.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of ambiguous cells.
</dl>
</dl>
<a name="GetNbConfusionCells"></a><a name="GetNbConfusionCells()"></a> <dt> o <b>GetNbConfusionCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNbConfusionCells</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the number of overlapping cells.
 In some cases, the operator is unable to detect which cells
 have to be removed. The operation completes, but the generated
 body generally contains all the input cells. 
 When there are overlapping cells, the application must specify which
 cells are to be kept or removed by using the <tt>SetSelectedCells</tt> methods.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of overlapping cells.
</dl>
</dl>
<a name="GetSelectedCellsByLayDownMode"></a><a name="GetSelectedCellsByLayDownMode()"></a> <dt> o <b>GetSelectedCellsByLayDownMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSelectedCellsByLayDownMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the number of cells kept or removed by using the <tt>SetSelectedCellsByLayDownMode</tt> method.
 <pre>
 CATICGMHybSplit*  pSplitOpe =  CATCGMCreateTopSplitShellWithKeepRemove(piGeomFactory,&topdata,ToBeSplit,SplittingBody);   
 pSplitOpe->SetSelectedCellsByLayDownMode(1);  
 CATLISTP(CATCell) cellsToRemove ;
 CATLISTP(CATCell) cellsToKeep ;
 cellsToKeep.Append(listOfVertex[1]);
 pSplitOpe->SetSelectedCells(cellsToRemove,cellsToKeep); 
 pSplitOpe  ->  Run();  
	int nbCells = pSplitOpe->GetSelectedCellsByLayDownMode();
 </pre>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Number of cells kept or removed.
</dl>
</dl>
<a name="GetTangentDesignCells"></a><a name="GetTangentDesignCells(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>GetTangentDesignCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTangentDesignCells</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>oListOfCells</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the list of tangent cells.
 <pre>
 pIntersectOpe->SetWarningOnTangentDesign(1);
 ...
 pIntersectOpe->Run(); 
 CATBody *pBody =  pIntersectOpe->GetResult();
 if  (pIntersectOpe->IsResultTangentDesign())  
	{  
	  CATLISTP(CATCell)  ListOfCells;  
	  pIntersectOpe->GetTangentDesignCells(ListOfCells); 
   ...
 }
 </pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCells</tt>
   <dd> The list of tangent cells.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li>0: no tangent cells have been detected
 <li>1: tangent cells have been detected.
 </ul>
</dl>
</dl>
<a name="GetTangentDesignMode"></a><a name="GetTangentDesignMode()"></a> <dt> o <b>GetTangentDesignMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTangentDesignMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the tangent design mode.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li>0: the "tangent design" mode is not activated
 <li>1: the "tangent design" mode is activated.
 </ul>
</dl>
</dl>
<a name="IsResultTangentDesign"></a><a name="IsResultTangentDesign()"></a> <dt> o <b>IsResultTangentDesign</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsResultTangentDesign</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the result of the tangent design analysis.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <ul>
 <li>0: no tangent cells have been detected
 <li>1: tangent cells have been detected.
 </ul>
</dl>
</dl>
<a name="SetSelectedCells"></a><a name="SetSelectedCells(CATLISTP(CATCell)&amp;,CATLISTP(CATCell)&amp;)"></a> <dt> o <b>SetSelectedCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSelectedCells</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>iCellsToRemove</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>iCellsToKeep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the cells to be kept and the cells to be removed in the operation.
 At least one of the lists must be filled in. 
 The operator throws an exception when: 
 <ul>
    <li>both lists are empty
    <li>the specified cells do not belong to the input bodies
    <li>some cells to be cut are specified in either list. 
    A cell to be cut should not be added to any list
    <li>the list contents is not consistent with respect to the sides definition. 
    For example,  if a cell to be removed and a cell to be 
    kept should not be located on the same side.
 </ul>
 More generally, the operator throws when the lists which are specified do not allow the operator to
 compute in an unambiguous way the pieces to be kept or removed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCellsToRemove</tt>
   <dd> The list of cells to be removed.
 </dd>
    <dt><tt> iCellsToKeep</tt>
   <dd> The list of cells to be kept.</dd>
</dl>
</dl>
</dl>
<a name="SetSelectedCellsByLayDownMode"></a><a name="SetSelectedCellsByLayDownMode(int)"></a> <dt> o <b>SetSelectedCellsByLayDownMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSelectedCellsByLayDownMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>yes_or_no</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 When the cells specified in the SetSelectedCells method do not
 belong to the input bodies, the boolean operation cannot complete.
 When the cells specified in the SetSelectedCells methods are vertices,
 you can use <tt>SetSelectedCellsByLayDownMode</tt> to define the side to be kept or removed.
 If the vertices are not ON the cells to be kept or removed, the operator
 projects them onto the cells to be kept or removed. 
 This method applies to vertices only.
 By default (0), the cells are assumed to belong to the input bodies
 and are not "laid down" (projected).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> yes_or_no</tt>
   <dd> <ul>
 <li>0: the "lay down" mode is not activated
 <li>1: the "lay down" mode is activated.
 </ul></dd>
</dl>
</dl>
</dl>
<a name="SetWarningOnTangentDesign"></a><a name="SetWarningOnTangentDesign(int)"></a> <dt> o <b>SetWarningOnTangentDesign</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetWarningOnTangentDesign</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>yes_or_no</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  (De)activates the detection of cells which are tangent to each other.
 The tangent cells are retrieved by using the <tt>GetTangentDesignCells</tt> method.
 <pre>
 pIntersectOpe->SetWarningOnTangentDesign(1);
 ...
 pIntersectOpe->Run(); 
 CATBody *pBody =  pIntersectOpe->GetResult();
 if  (pIntersectOpe->IsResultTangentDesign())  
	{  
	  CATLISTP(CATCell)  ListOfCells;  
	  pIntersectOpe->GetTangentDesignCells(ListOfCells); 
   ...
 }
 </pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> yes_or_no</tt>
   <dd> <ul>
 <li>0: deactivates the "tangent design" mode
 <li>1: activates the "tangent design" mode.
 </ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMHybBoolean.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

