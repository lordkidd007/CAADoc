<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Interface CATICGMDynSplit</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICGMDynSplit"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces Interface CATICGMDynSplit</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICGMDynSplit_36052','CATICGMDynSplit','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICGMDynSplit</b>
</p>
<p>
<b><i> Class defining the operator that splits a 3D body.</i></b><br>

<br>
 The CATICGMDynSplit operator follows the global frame of the topological operators and satisfies the smart mechanism: 
 the input bodies are not modified. A new resulting body is created, 
 possibly sharing data with the input bodies.
<ul>
 <li>A CATICGMDynSplit operator is created with the <tt>CATCGMCreateDynSplit</tt> global function:
 It must be directly released with the <tt>Release</tt> method. It is not streamable. 
<li>Options can be precised (such as the splitting object) with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. 
<li>In both cases, the result is accessed with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> method to remove it from the  geometric factory.
</ul>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetRelimitation()"><b>GetRelimitation</b></a>()
<dd>  Indicates whether the Split Operation has removed some material to the body or not.
 <dt> o 
    <a href="#SetSelectionMode(CATDynSelectionMode)"><b>SetSelectionMode</b></a>(CATDynSelectionMode)
<dd>  Sets Selection Mode.
 <dt> o 
    <a href="#SetSplit(CATBody*)"><b>SetSplit</b></a>(CATBody*)
<dd>  Defines the splitting body.
 <dt> o 
    <a href="#SetSplit(CATPlane*)"><b>SetSplit</b></a>(CATPlane*)
<dd>  Defines the splitting plane.
 <dt> o 
    <a href="#SetSplit(CATSurface*)"><b>SetSplit</b></a>(CATSurface*)
<dd>  Defines the splitting surface.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetRelimitation"></a><a name="GetRelimitation()"></a> <dt> o <b>GetRelimitation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>GetRelimitation</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates whether the Split Operation has removed some material to the body or not.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>TRUE</tt> if it has removed some material, <tt>FALSE</tt> otherwise.
</dl>
</dl>
<a name="SetSelectionMode"></a><a name="SetSelectionMode(CATDynSelectionMode)"></a> <dt> o <b>SetSelectionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSelectionMode</b>(<td><script type="text/javascript"> activateLink('CATDynSelectionMode','CATDynSelectionMode')</script> <td><tt>iSelectionMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets Selection Mode.
 Allows to decide among 3 possible behaviors for the split operator
 (CATDynPositionVsPlaneMode, CATDynKeepMode, CATDynRemoveMode)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSelectionMode</tt>
   <dd> The selection mode. CATDynPositionVsPlaneMode by default.</dd>
</dl>
</dl>
</dl>
<a name="SetSplit"></a><a name="SetSplit(CATBody*)"></a> <dt> o <b>SetSplit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSplit</b>(<td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>iSplittingBody</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the splitting body.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSplittingBody</tt>
   <dd> The pointer to the body that splits the input body. <tt>iSplittingBody</tt> can contain several
 shell domains if their orientations are compatible.</dd>
</dl>
</dl>
</dl>
<a name="SetSplit"></a><a name="SetSplit(CATPlane*)"></a> <dt> o <b>SetSplit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSplit</b>(<td><script type="text/javascript"> activateLink('CATPlane','CATPlane*')</script> <td><tt>iSplittingPlane</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the splitting plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSplittingPlane</tt>
   <dd> The pointer to the plane that splits the input body.</dd>
</dl>
</dl>
</dl>
<a name="SetSplit"></a><a name="SetSplit(CATSurface*)"></a> <dt> o <b>SetSplit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSplit</b>(<td><script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iSplittingSurface</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the splitting surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSplittingSurface</tt>
   <dd> The pointer to the surface that splits the input body.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMDynSplit.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

