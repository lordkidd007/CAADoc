<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Interface CATICGMHybIntersect</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../GMOperatorsInterfaces.htm" href="../GMOperatorsInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "GMOperatorsInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATICGMHybIntersect"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>GMOperatorsInterfaces Interface CATICGMHybIntersect</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICGMHybIntersect_42978','CATICGMHybIntersect','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICGMHybIntersect</b>
</p>
<p>
<b><i> Class defining the operator that intersects two bodies.</i></b><br>

 <br>
 This operator operates on the 2D (CATShell), 1D (CATWire) and 0D (CATVertexInVolume)
 domains of a CATBody.
 It follows the general frame of all operator and satisfies to the smart mechanism: the
 input bodies are not modified. A new resulting body is created, 
 possibly sharing data with the input bodies.
 <ul>
  <li><tt>CATICGMHybIntersect</tt> is created with the <tt>CATCGMCreateTopIntersect</tt> global function.
  <li>It must be released with the <tt>Release</tt> method after use.
  <li>It is not streamable. 
  <li>The intersection can be restricted on a given domain on each body with the methods
    <tt>SetFirstDomainToIntersect</tt> and <tt>SetSecondDomainToIntersect</tt>
  <li>The result is accessed with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <script type="text/javascript"> activateLinkAnchor('CATICGMContainer','Remove','CATICGMContainer.Remove') </script> method to remove it from the  geometric factory.
  <li>When two coplanar skins are intersected, the returned body is a wire body along the boundary 
 of the intersection.
 </ul>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATCGMCreateTopIntersect','','CATCGMCreateTopIntersect') </script>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetTangentDesignCells(CATLISTP(CATCell)&amp;)"><b>GetTangentDesignCells</b></a>(CATLISTP(CATCell)&amp;)
<dd>  Retrieves the list of tangent cells.
 <dt> o 
    <a href="#GetTangentDesignMode()"><b>GetTangentDesignMode</b></a>()
<dd>  Retrieves the tangent design mode.
 <dt> o 
    <a href="#IsResultTangentDesign()"><b>IsResultTangentDesign</b></a>()
<dd>  Retrieves the result of the tangent design analysis.
 <dt> o 
    <a href="#SetFirstDomainToIntersect(CATDomain*)"><b>SetFirstDomainToIntersect</b></a>(CATDomain*)
<dd>  Defines which domain of the first body must be intersected.
 <dt> o 
    <a href="#SetSecondDomainToIntersect(CATDomain*)"><b>SetSecondDomainToIntersect</b></a>(CATDomain*)
<dd>  Defines which domain of the second body must be intersected.
 <dt> o 
    <a href="#SetWarningOnTangentDesign(int)"><b>SetWarningOnTangentDesign</b></a>(int)
<dd>  (De)activates the detection of cells which are tangent to each other.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetTangentDesignCells"></a><a name="GetTangentDesignCells(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>GetTangentDesignCells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTangentDesignCells</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>oListOfCells</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of tangent cells.
 <pre>
 pIntersectOpe->SetWarningOnTangentDesign(1);
 ...
 pIntersectOpe->Run();
 CATBody *pBody =  pIntersectOpe->GetResult();
 if  (pIntersectOpe->IsResultTangentDesign())
 {
   CATLISTP(CATCell)  ListOfCells;
   pIntersectOpe->GetTangentDesignCells(ListOfCells);
   ...
 }
 </pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfCells</tt>
   <dd> The list of tangent cells.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li>0: no tangent cells have been detected
 <li>1: tangent cells have been detected.
 </ul>
</dl>
</dl>
<a name="GetTangentDesignMode"></a><a name="GetTangentDesignMode()"></a> <dt> o <b>GetTangentDesignMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTangentDesignMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tangent design mode.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li>0: the "tangent design" mode is not activated
 <li>1: the "tangent design" mode is activated.
 </ul>
</dl>
</dl>
<a name="IsResultTangentDesign"></a><a name="IsResultTangentDesign()"></a> <dt> o <b>IsResultTangentDesign</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsResultTangentDesign</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the result of the tangent design analysis.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li>0: no tangent cells have been detected
 <li>1: tangent cells have been detected.
 </ul>
</dl>
</dl>
<a name="SetFirstDomainToIntersect"></a><a name="SetFirstDomainToIntersect(CATDomain*)"></a> <dt> o <b>SetFirstDomainToIntersect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFirstDomainToIntersect</b>(<td><script type="text/javascript"> activateLink('CATDomain','CATDomain*')</script> <td><tt>iDomainOnFirstBody</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines which domain of the first body must be intersected.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDomainOnFirstBody</tt>
   <dd> The pointer to the domain to intersect.</dd>
</dl>
</dl>
</dl>
<a name="SetSecondDomainToIntersect"></a><a name="SetSecondDomainToIntersect(CATDomain*)"></a> <dt> o <b>SetSecondDomainToIntersect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSecondDomainToIntersect</b>(<td><script type="text/javascript"> activateLink('CATDomain','CATDomain*')</script> <td><tt>iDomainOnSecondBody</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines which domain of the second body must be intersected.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDomainOnSecondBody</tt>
   <dd> The pointer to the domain to intersect.</dd>
</dl>
</dl>
</dl>
<a name="SetWarningOnTangentDesign"></a><a name="SetWarningOnTangentDesign(int)"></a> <dt> o <b>SetWarningOnTangentDesign</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetWarningOnTangentDesign</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>yes_or_no</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 (De)activates the detection of cells which are tangent to each other.
 The tangent cells are retrieved by using the <tt>GetTangentDesignCells</tt> method.
 <pre>
 pIntersectOpe->SetWarningOnTangentDesign(1);
  ...
 pIntersectOpe->Run();
 CATBody *pBody =  pIntersectOpe->GetResult();
 if  (pIntersectOpe->IsResultTangentDesign())
 {
       CATLISTP(CATCell)  ListOfCells;
       pIntersectOpe->GetTangentDesignCells(ListOfCells);
 ...
 }
 </pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> yes_or_no</tt>
   <dd> <ul>
 <li>0: deactivates the "tangent design" mode
 <li>1: activates the "tangent design" mode.
 </ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMHybIntersect.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

