<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATDmrOpnsSectionInterfaces Interface CATIOpnsSection</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATDmrOpnsSectionInterfaces.htm" href="../CATDmrOpnsSectionInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATDmrOpnsSectionInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIOpnsSection"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATDmrOpnsSectionInterfaces Interface CATIOpnsSection</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIOpnsSection_50922','CATIOpnsSection','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIOpnsSection</b>
</p>
<p>
<b><i> <p>
 This interface CATIOpnsSection enables to manage a section done between a plane and 
 productstructure loaded in session.</i></b><br>
 The computation of the result is based on a solver which take into
 account tesselated geometry.
 It allows you to set or get the position of plane, the mode of render (clipping or no), and export
 a section result in a new part.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Export(CATIMmiUsePrtPart*)"><b>Export</b></a>(CATIMmiUsePrtPart*)
<dd>  Export the result of the section between plane positioned and product structure, 
 in a  Part.
 <dt> o 
    <a href="#GetPlanePosition(CATMathPlane*)"><b>GetPlanePosition</b></a>(CATMathPlane*)
<dd>  Gets the position of the section.
 <dt> o 
    <a href="#GetSceneRender(CatSceneRenderMode*)"><b>GetSceneRender</b></a>(CatSceneRenderMode*)
<dd>  Gets the scene render mode of the section.
 <dt> o 
    <a href="#IsEmpty(CATBoolean&amp;)"><b>IsEmpty</b></a>(CATBoolean&amp;)
<dd>  Allow to determine if a section contains results or not.
 <dt> o 
    <a href="#SetPlaneDimensions(double,double)"><b>SetPlaneDimensions</b></a>(double,double)
<dd>  Set the dimension of the plane.
 <dt> o 
    <a href="#SetPlanePosition(CATMathPlane)"><b>SetPlanePosition</b></a>(CATMathPlane)
<dd>  Sets the position of the section.
 <dt> o 
    <a href="#SetSceneRender(CatSceneRenderMode)"><b>SetSceneRender</b></a>(CatSceneRenderMode)
<dd>  Sets the scene render mode of the section.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Export"></a><a name="Export(CATIMmiUsePrtPart*)"></a> <dt> o <b>Export</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Export</b>(<td><script type="text/javascript"> activateLink('CATIMmiUsePrtPart','CATIMmiUsePrtPart*')</script> <td><tt>ioPart</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Export the result of the section between plane positioned and product structure, 
 in a  Part.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioPart</tt>
   <dd>       The part in which the geometry of section will be saved as sketch polyline.
       The part should be created before call of export method.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK for persistent section else E_FAIL
</dl>
</dl>
<a name="GetPlanePosition"></a><a name="GetPlanePosition(CATMathPlane*)"></a> <dt> o <b>GetPlanePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPlanePosition</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane*')</script> <td><tt>oPlanePos</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the position of the section.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPlanePos</tt>
   <dd>        Position of plane and section with respect to the absolute coordinate system
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>           S_OK if succeeded else E_FAIL
</dl>
</dl>
<a name="GetSceneRender"></a><a name="GetSceneRender(CatSceneRenderMode*)"></a> <dt> o <b>GetSceneRender</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSceneRender</b>(<td><script type="text/javascript"> activateLink('CatSceneRenderMode','CatSceneRenderMode*')</script> <td><tt>opSRenderMode</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the scene render mode of the section. NO_CLIPPING or CLIPPING
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opSRenderMode</tt>
   <dd>        It can be valued with NO_CLIPPING or CLIPPING
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK if succeeded else E_FAIL
</dl>
</dl>
<a name="IsEmpty"></a><a name="IsEmpty(CATBoolean&amp;)"></a> <dt> o <b>IsEmpty</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsEmpty</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>ioIsEmpty</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Allow to determine if a section contains results or not.<br>

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioIsEmpty</tt>
   <dd>       TRUE if the section is empty, FALSE otherwise.<br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK if everthing is OK, E_FAIL otherwise.<br>
</dl>
</dl>
<a name="SetPlaneDimensions"></a><a name="SetPlaneDimensions(double,double)"></a> <dt> o <b>SetPlaneDimensions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPlaneDimensions</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>ioWidth</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>ioHeight</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Set the dimension of the plane.<br>
 The plane will be center to the center of the plane defined by the method SetPlanePosition.   
 The width and the height will allow to control the dimension of the plane.<br>

                       width
                /----------------/
               /                /
              /                /
             /       X        / Height
            /     Center     / 
           /                /
          /                /
         /----------------/

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioWidth</tt>
   <dd>       the width of the plane.<br>
 </dd>
    <dt><tt> ioHeight</tt>
   <dd>       the height of the plane.<br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK if everthing is OK, E_FAIL otherwise.<br>
</dl>
</dl>
<a name="SetPlanePosition"></a><a name="SetPlanePosition(CATMathPlane)"></a> <dt> o <b>SetPlanePosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPlanePosition</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane')</script> <td><tt>iPlanePosition</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the position of the section.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPlanePosition</tt>
   <dd>       Position of the plane and section with respect to the absolute coordinate system
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         S_OK if succeeded else E_FAIL
</dl>
</dl>
<a name="SetSceneRender"></a><a name="SetSceneRender(CatSceneRenderMode)"></a> <dt> o <b>SetSceneRender</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSceneRender</b>(<td><script type="text/javascript"> activateLink('CatSceneRenderMode','CatSceneRenderMode')</script> <td><tt>iSRenderMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the scene render mode of the section.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSceneRender</tt>
   <dd>        It can be valued with NO_CLIPPING or CLIPPING
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        S_OK if succeeded else E_FAIL
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIOpnsSection.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDmrOpnsSectionItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

