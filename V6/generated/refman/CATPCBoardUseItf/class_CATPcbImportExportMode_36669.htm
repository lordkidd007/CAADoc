<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPCBoardUseItf Class CATPcbImportExportMode</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPCBoardUseItf.htm" href="../CATPCBoardUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPCBoardUseItf";	}
		function getCurrentObjectName() { 
 	return "CATPcbImportExportMode"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPCBoardUseItf <script type="text/javascript" > writeClassCharacteristic(); </script> CATPcbImportExportMode</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATPcbImportExportMode_36669','CATPcbImportExportMode','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATPcbImportExportMode</b>
</p>
<p>
<b><i>    Class to Get/Set Export/Import information.</i></b><br>

 <br><b>Role</b>: To provide services to set and get various settings for Importing and Exporting IDF files.
 Following settings could be set and retrieve using this class:  
 <br>IDF file location : Refer <script type="text/javascript"> activateLinkAnchor('','SetIDFImportExportMode','SetIDFImportExportMode') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetIDFImportExportMode','GetIDFImportExportMode') </script> methods. <br>IDF file Name : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetFileName','SetFileName') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetFileName','GetFileName') </script> methods. <br>LIB file location: Refer 
<script type="text/javascript"> activateLinkAnchor('','SetLibraryImportExportMode','SetLibraryImportExportMode') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetLibraryImportExportMode','GetLibraryImportExportMode') </script> methods. <br>LIB file Name : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetLibName','SetLibName') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetLibName','GetLibName') </script> methods. <br>CSV file location & Name : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetCSVFileMode','SetCSVFileMode') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetCSVFileMode','GetCSVFileMode') </script> methods. <br>CSV file location & Name : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetCSVFile','SetCSVFile') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetCSVFile','GetCSVFile') </script> methods. <br>Component datasource	: Refer 
<script type="text/javascript"> activateLinkAnchor('','SetComponentDataSource','SetComponentDataSource') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetComponentDataSource','GetComponentDataSource') </script> methods. <br>Hole drill option : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetImportDrillHolesMode','SetImportDrillHolesMode') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetImportDrillHolesMode','GetImportDrillHolesMode') </script> methods. <br>PLM document attachment option : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetPLMDocumentAttachmentOption','SetPLMDocumentAttachmentOption') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetPLMDocumentAttachmentOption','GetPLMDocumentAttachmentOption') </script> methods. <br>PLM document vesioning option : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetPLMDocumentVersioningOption','SetPLMDocumentVersioningOption') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetPLMDocumentVersioningOption','GetPLMDocumentVersioningOption') </script> methods. <br>PLM Document creation type : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetPLMDocumentCreationTypeOption','SetPLMDocumentCreationTypeOption') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetPLMDocumentCreationTypeOption','GetPLMDocumentCreationTypeOption') </script> methods. <br>Exported file co-ordinate unit : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetExportUnit','SetExportUnit') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetExportUnit','GetExportUnit') </script> methods. <br>Exported IDF verison : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetExportedFileVersion','SetExportedFileVersion') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetExportedFileVersion','GetExportedFileVersion') </script> methods. <br>Decimal used for exported IDF file : Refer 
<script type="text/javascript"> activateLinkAnchor('','SetDecimalSeparator','SetDecimalSeparator') </script> and 
<script type="text/javascript"> activateLinkAnchor('','GetDecimalSeparator','GetDecimalSeparator') </script> methods.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATPcbImportExportMode()"><b>CATPcbImportExportMode</b></a>()
<dd>  Constructs CATPcbImportExportMode object.
 <dt> o 
    <a href="#~CATPcbImportExportMode()"><b>~CATPcbImportExportMode</b></a>()
<dd>  Destructs CATPcbImportExportMode object.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCSVFile(CATUnicodeString*)"><b>GetCSVFile</b></a>(CATUnicodeString*)
<dd>  Gets CSV file name.
 <dt> o 
    <a href="#GetCSVFileMode(ImportExportMode*)"><b>GetCSVFileMode</b></a>(ImportExportMode*)
<dd>  Gets the CSV file Export/Import Mode.
 <dt> o 
    <a href="#GetComponentCatalogFileName(CATUnicodeString*)"><b>GetComponentCatalogFileName</b></a>(CATUnicodeString*)
<dd>  Gets Component Catalog File Name file name.
 <dt> o 
    <a href="#GetComponentDataSource(ComponentDataSource*)"><b>GetComponentDataSource</b></a>(ComponentDataSource*)
<dd>  Gets Component data source for IDF Import.
 <dt> o 
    <a href="#GetDecimalSeparator(CATUnicodeString*)"><b>GetDecimalSeparator</b></a>(CATUnicodeString*)
<dd>  Gets decimal separator to be used in IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#GetExportUnit(CATUnicodeString*)"><b>GetExportUnit</b></a>(CATUnicodeString*)
<dd>  Gets unit for the IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#GetExportedFileVersion(int*)"><b>GetExportedFileVersion</b></a>(int*)
<dd>  Gets version of IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#GetFileName(CATUnicodeString*)"><b>GetFileName</b></a>(CATUnicodeString*)
<dd>  Gets IDF file name
 <br><b>Role</b>: This method is used to get IDF file name for Import/Export.
 <dt> o 
    <a href="#GetIDFImportExportMode(ImportExportMode*)"><b>GetIDFImportExportMode</b></a>(ImportExportMode*)
<dd>  Gets the IDF ImportExport Mode.
 <dt> o 
    <a href="#GetImportDrillHolesMode(HoleOptions*)"><b>GetImportDrillHolesMode</b></a>(HoleOptions*)
<dd>  Gets holes import mode.
 <dt> o 
    <a href="#GetLibName(CATUnicodeString*)"><b>GetLibName</b></a>(CATUnicodeString*)
<dd>  Gets component library file name.
 <dt> o 
    <a href="#GetLibraryImportExportMode(ImportExportMode*)"><b>GetLibraryImportExportMode</b></a>(ImportExportMode*)
<dd>  Gets the component Library Import Mode.
 <dt> o 
    <a href="#GetPLMDocumentAttachmentOption(PLMDocumentAttachment*)"><b>GetPLMDocumentAttachmentOption</b></a>(PLMDocumentAttachment*)
<dd>  Gets PLM Document Attachment option for IDF export.
 <dt> o 
    <a href="#GetPLMDocumentCreationTypeOption(PLMDocumentCreationType*)"><b>GetPLMDocumentCreationTypeOption</b></a>(PLMDocumentCreationType*)
<dd>  Gets creation type of IDF exported as PLM Document.
 <dt> o 
    <a href="#GetPLMDocumentVersioningOption(PLMDocumentVersioning*)"><b>GetPLMDocumentVersioningOption</b></a>(PLMDocumentVersioning*)
<dd>  Gets Versioning option for board assembly Export to PLM Document.
 <dt> o 
    <a href="#SetCSVFile(CATUnicodeString)"><b>SetCSVFile</b></a>(CATUnicodeString)
<dd>  Sets CSV file name.
 <dt> o 
    <a href="#SetCSVFileMode(ImportExportMode)"><b>SetCSVFileMode</b></a>(ImportExportMode)
<dd>  Sets the CSV file Export/Import Mode.
 <dt> o 
    <a href="#SetComponentCatalogFileName(CATUnicodeString)"><b>SetComponentCatalogFileName</b></a>(CATUnicodeString)
<dd>  Sets Component Catalog File Name file name.
 <dt> o 
    <a href="#SetComponentDataSource(ComponentDataSource)"><b>SetComponentDataSource</b></a>(ComponentDataSource)
<dd>  Sets Component data source for IDF Import.
 <dt> o 
    <a href="#SetDecimalSeparator(CATUnicodeString)"><b>SetDecimalSeparator</b></a>(CATUnicodeString)
<dd>  Sets decimal separator to be used in IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#SetExportUnit(CATUnicodeString)"><b>SetExportUnit</b></a>(CATUnicodeString)
<dd>  Sets unit for the IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#SetExportedFileVersion(int)"><b>SetExportedFileVersion</b></a>(int)
<dd>  Sets version of IDF file to export
 <br><b>Role</b>: 
 
 <dt> o 
    <a href="#SetFileName(CATUnicodeString)"><b>SetFileName</b></a>(CATUnicodeString)
<dd>  Sets IDF file name
 <br><b>Role</b>: This method is used to set IDF file name for Import/Export.
 <dt> o 
    <a href="#SetIDFImportExportMode(ImportExportMode)"><b>SetIDFImportExportMode</b></a>(ImportExportMode)
<dd>  Sets the IDF ImportExport Mode.
 <dt> o 
    <a href="#SetImportDrillHolesMode(HoleOptions)"><b>SetImportDrillHolesMode</b></a>(HoleOptions)
<dd>  Sets holes import mode.
 <dt> o 
    <a href="#SetLibName(CATUnicodeString)"><b>SetLibName</b></a>(CATUnicodeString)
<dd>  Sets component library file name.
 <dt> o 
    <a href="#SetLibraryImportExportMode(ImportExportMode)"><b>SetLibraryImportExportMode</b></a>(ImportExportMode)
<dd>  Sets the component Library Import Mode.
 <dt> o 
    <a href="#SetPLMDocumentAttachmentOption(PLMDocumentAttachment)"><b>SetPLMDocumentAttachmentOption</b></a>(PLMDocumentAttachment)
<dd>  Sets PLM Document Attachment option for IDF export.
 <dt> o 
    <a href="#SetPLMDocumentCreationTypeOption(PLMDocumentCreationType)"><b>SetPLMDocumentCreationTypeOption</b></a>(PLMDocumentCreationType)
<dd>  Sets creation type of IDF exported as PLM Document.
 <dt> o 
    <a href="#SetPLMDocumentVersioningOption(PLMDocumentVersioning)"><b>SetPLMDocumentVersioningOption</b></a>(PLMDocumentVersioning)
<dd>  Sets Versioning option for board assembly Export to PLM Document.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#ComponentDataSource"><b>ComponentDataSource</b></a>
<dd>  Component data source for IDF import.
 <dt> o 
    <a href="#HoleOptions"><b>HoleOptions</b></a>
<dd>  Hole drilling option for IDF Import.
 <dt> o 
    <a href="#ImportExportMode"><b>ImportExportMode</b></a>
<dd>  IDF Import/Export mode.
 <dt> o 
    <a href="#PLMDocumentAttachment"><b>PLMDocumentAttachment</b></a>
<dd>  IDF Exported as PLM document attachment option.
 <dt> o 
    <a href="#PLMDocumentCreationType"><b>PLMDocumentCreationType</b></a>
<dd>  IDF Exported as PLM document creation mode.
 <dt> o 
    <a href="#PLMDocumentVersioning"><b>PLMDocumentVersioning</b></a>
<dd>  IDF Exported as PLM document versioning option when existing PLM document is to be updated.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATPcbImportExportMode"></a><a name="CATPcbImportExportMode()"></a> <dt> o <b>CATPcbImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATPcbImportExportMode</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs CATPcbImportExportMode object.
 <br><b>Role</b>:
</dl>
<a name="~CATPcbImportExportMode"></a><a name="~CATPcbImportExportMode()"></a> <dt> o <b>~CATPcbImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATPcbImportExportMode</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructs CATPcbImportExportMode object.
 <br><b>Role</b>:
</dl>
 <h2>Methods</h2> <br>
<a name="GetCSVFile"></a><a name="GetCSVFile(CATUnicodeString*)"></a> <dt> o <b>GetCSVFile</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCSVFile</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oCSVfileName</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets CSV file name.
 <br><b>Role</b>: This method is used to get CSV file name for Import/Export of Board assembly. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCSVfileName</tt>
   <dd>   The name of the CSV file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>CSV file Name retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>CSV file Name could not be retrieved</dd>
   </dl>

</dl>
</dl>
<a name="GetCSVFileMode"></a><a name="GetCSVFileMode(ImportExportMode*)"></a> <dt> o <b>GetCSVFileMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCSVFileMode</b>(<td><script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode*')</script> <td><tt>oCSVImportExportMode</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets the CSV file Export/Import Mode.
 <br><b>Role</b>: This method is used to get CSV file location mode for Board Import/Export.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCSVImportExportMode</tt>
   <dd>   CSV file location mode
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>CSV File location for is local directory</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>CSV File location is database;CSV file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>CSV file location found</dd>
     <dt>E_FAIL </dt>
     <dd>CSV file location not found</dd>
   </dl>

</dl>
</dl>
<a name="GetComponentCatalogFileName"></a><a name="GetComponentCatalogFileName(CATUnicodeString*)"></a> <dt> o <b>GetComponentCatalogFileName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetComponentCatalogFileName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oCompCatalogfileName</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets Component Catalog File Name file name.
 <br><b>Role</b>: This method is used to get Component catalog file name for Importing Board assembly. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCompCatalogfileName</tt>
   <dd>   The name of the component catalog  file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Component catalog file Name retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Component catalog file Name could not be retrieved</dd>
   </dl>

</dl>
</dl>
<a name="GetComponentDataSource"></a><a name="GetComponentDataSource(ComponentDataSource*)"></a> <dt> o <b>GetComponentDataSource</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetComponentDataSource</b>(<td><script type="text/javascript"> activateLink('ComponentDataSource','ComponentDataSource*')</script> <td><tt>oCompDataSource</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets Component data source for IDF Import.
 <br><b>Role</b>: This method is used to get component data source for IDF import. This method succeeds when component datasource is either NONE or DATABASE
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCompDataSource</tt>
   <dd>   Component data source
   <br><b>Legal values</b>:
   <dl>
     <dt>NONE</dt>
     <dd>Component geometry is not searched</dd>
     <dt>DATABASE </dt>
     <dd>Component should be searched in database</dd>
     <dt>CATALOG </dt>
     <dd>Component should be searched in database</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Component Datasource found successfully.</dd>
     <dt>E_FAIL </dt>
     <dd>Component Datasource cound not be found </dd>
   </dl>

</dl>
</dl>
<a name="GetDecimalSeparator"></a><a name="GetDecimalSeparator(CATUnicodeString*)"></a> <dt> o <b>GetDecimalSeparator</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDecimalSeparator</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oUserDefinedDecimalValue</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets decimal separator to be used in IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd> 		decimal separator used in IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>.</dt>
     <dd>dot</dd>
     <dt>, </dt>
     <dd>comma</dd>
   </dl>
 
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF export Decimal Separator retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>IDF export Decimal Separator retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetExportUnit"></a><a name="GetExportUnit(CATUnicodeString*)"></a> <dt> o <b>GetExportUnit</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetExportUnit</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oExportedUnit</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets unit for the IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oExportedUnit</tt>
   <dd>		Unit for IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>MM</dt>
     <dd>Unit of exported co-ordinates is millimeter</dd>
     <dt>THOU</dt>
     <dd>Unit of exported co-ordinates is thou</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Export Unit retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Export Unit retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetExportedFileVersion"></a><a name="GetExportedFileVersion(int*)"></a> <dt> o <b>GetExportedFileVersion</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetExportedFileVersion</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oUnit</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets version of IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oUnit</tt>
   <dd>		version of IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>2</dt>
     <dd>Version of IDF file to export is IDF2.0 </dd>
     <dt>3 </dt>
     <dd>Version of IDF file to export is IDF3.0 </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Exported IDF version retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Exported IDF version retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetFileName"></a><a name="GetFileName(CATUnicodeString*)"></a> <dt> o <b>GetFileName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFileName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oFileName</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Gets IDF file name
 <br><b>Role</b>: This method is used to get IDF file name for Import/Export. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFileName</tt>
   <dd>   The name of the IDF file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF file Name retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>IDF file Name could not be retrieved</dd>
   </dl>

</dl>
</dl>
<a name="GetIDFImportExportMode"></a><a name="GetIDFImportExportMode(ImportExportMode*)"></a> <dt> o <b>GetIDFImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetIDFImportExportMode</b>(<td><script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode*')</script> <td><tt>oIDFImportExportMode</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets the IDF ImportExport Mode.
 <br><b>Role</b>: This method is used to get mode of IDF file Export/Import.Mode defines the location of IDF File.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oIDFImportExportMode</tt>
   <dd>    IDF file location for Export/Import.
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>IDF File location for export/import is local directory</dd>
     <dt>DESIGNERCENTRALMODE </dt>
     <dd>IDF File location for export/import is design central; IDF file is versioned document</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>IDF File location is for export/import is database;IDF file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF file location found</dd>
     <dt>E_FAIL </dt>
     <dd>IDF file location not found</dd>
   </dl>

</dl>
</dl>
<a name="GetImportDrillHolesMode"></a><a name="GetImportDrillHolesMode(HoleOptions*)"></a> <dt> o <b>GetImportDrillHolesMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetImportDrillHolesMode</b>(<td><script type="text/javascript"> activateLink('HoleOptions','HoleOptions*')</script> <td><tt>oDrilledHolesMode</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets holes import mode.
 <br><b>Role</b>: This method is used to get holes import mode for IDF import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDrilledHolesMode</tt>
   <dd>   Hole import mode
   <br><b>Legal values</b>:
   <dl>
     <dt>DRILLED</dt>
     <dd>Hole imported should be drilled</dd>
     <dt>NOTDRILLED </dt>
     <dd>Hole imported should NOT be drilled. Only representation are drawn i.e. CBDHoles are created</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Hole Drill mode retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Hole Drill mode retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetLibName"></a><a name="GetLibName(CATUnicodeString*)"></a> <dt> o <b>GetLibName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLibName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>oLIBFileName</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets component library file name.
 <br><b>Role</b>: This method is used to get component library file name for Import. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLIBFileName</tt>
   <dd>   The name of the LIB file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF file Name retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>IDF file Name could not be retrieved</dd>
   </dl>

</dl>
</dl>
<a name="GetLibraryImportExportMode"></a><a name="GetLibraryImportExportMode(ImportExportMode*)"></a> <dt> o <b>GetLibraryImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLibraryImportExportMode</b>(<td><script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode*')</script> <td><tt>oLIBImportExportMode</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets the component Library Import Mode.
 <br><b>Role</b>: This method is used to get mode of component library file for Board assembly Import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLIBImportExportMode</tt>
   <dd>   Component Library location for Import mode
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>LIB File location for is local directory</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>LIB File location is database;LIB file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>LIB file location found</dd>
     <dt>E_FAIL </dt>
     <dd>LIB file location not found</dd>
   </dl>

</dl>
</dl>
<a name="GetPLMDocumentAttachmentOption"></a><a name="GetPLMDocumentAttachmentOption(PLMDocumentAttachment*)"></a> <dt> o <b>GetPLMDocumentAttachmentOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPLMDocumentAttachmentOption</b>(<td><script type="text/javascript"> activateLink('PLMDocumentAttachment','PLMDocumentAttachment*')</script> <td><tt>oPLMDocumentAttachmentOption</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets PLM Document Attachment option for IDF export.
 <br><b>Role</b>: This method is used to get option of attaching "IDF exported as PLM Document" to the Root Document
 when board is exported as PLM Document
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPLMDocumentAttachmentOption</tt>
   <dd>   IDF Exported as "PLM Document" attachment option.
   <br><b>Legal values</b>:
   <dl>
     <dt>ATTACHED</dt>
     <dd>Exported PLM Document is attached to the Root Document</dd>
     <dt>NOTATTACHED </dt>
     <dd>Exported PLM Document is NOT attached to the Root Document</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMdocument Attachment Mode retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMdocument Attachment Mode retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetPLMDocumentCreationTypeOption"></a><a name="GetPLMDocumentCreationTypeOption(PLMDocumentCreationType*)"></a> <dt> o <b>GetPLMDocumentCreationTypeOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPLMDocumentCreationTypeOption</b>(<td><script type="text/javascript"> activateLink('PLMDocumentCreationType','PLMDocumentCreationType*')</script> <td><tt>oPLMDocumentCreationTypeOption</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets creation type of IDF exported as PLM Document.
 <br><b>Role</b>: This method is used to get creation type of IDF exported as PLM Document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPLMDocumentCreationTypeOption</tt>
   <dd>   IDF Exported as "PLM Document" creaton type.
   <br><b>Legal values</b>:
   <dl>
     <dt>CREATE_NEWDOC</dt>
     <dd>New PLM Document is to be created</dd>
     <dt>UPDATE_EXISTING_DOC </dt>
     <dd>Existing PLM Document is to be updated</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMdocument creatio type retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMdocument creatio type retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="GetPLMDocumentVersioningOption"></a><a name="GetPLMDocumentVersioningOption(PLMDocumentVersioning*)"></a> <dt> o <b>GetPLMDocumentVersioningOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPLMDocumentVersioningOption</b>(<td><script type="text/javascript"> activateLink('PLMDocumentVersioning','PLMDocumentVersioning*')</script> <td><tt>oPLMDocumentVersioningOption</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets Versioning option for board assembly Export to PLM Document.
 <br><b>Role</b>: This method is used to get Versioning option for board assembly Export to PLM Document. To be used in conbination with 
 
<script type="text/javascript"> activateLinkAnchor('','GetPLMDocumentCreationTypeOption','GetPLMDocumentCreationTypeOption') </script> 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPLMDocumentVersioningOption</tt>
   <dd>   IDF Exported to "PLM Document" versioning option.
   <br><b>Legal values</b>:
   <dl>
     <dt>NEWVERSION</dt>
     <dd>New version of attached document should be created</dd>
     <dt>CRUSHOLDER </dt>
     <dd>Existing version of attached document should be overwritten</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMdocument versioning option retrieved successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMdocument versioning option retrieval failed</dd>
   </dl>

</dl>
</dl>
<a name="SetCSVFile"></a><a name="SetCSVFile(CATUnicodeString)"></a> <dt> o <b>SetCSVFile</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCSVFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iCSVfileName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets CSV file name.
 <br><b>Role</b>: This method is used to set CSV file name for Import/Export of Board assembly. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCSVfileName</tt>
   <dd>   The name of the CSV file. If Import/Export mode is FILEBASEMODE
   then iCSVfileName should contain full path of the file else only
   document name should be provided.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>CSV file name set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>CSV file name setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetCSVFileMode"></a><a name="SetCSVFileMode(ImportExportMode)"></a> <dt> o <b>SetCSVFileMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCSVFileMode</b>(<td> const <script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode')</script> <td><tt>iCSVImportExportMode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the CSV file Export/Import Mode.
 <br><b>Role</b>: This method is used to set mode of CSV file location for Board Import/Export.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCSVImportExportMode</tt>
   <dd>   CSV file location mode
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>CSV File location for is local directory</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>CSV File location is database;CSV file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Mode set successful</dd>
     <dt>E_FAIL </dt>
     <dd>Mode setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetComponentCatalogFileName"></a><a name="SetComponentCatalogFileName(CATUnicodeString)"></a> <dt> o <b>SetComponentCatalogFileName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetComponentCatalogFileName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iCompCatalogfileName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets Component Catalog File Name file name.
 <br><b>Role</b>: This method is used to set component catalog file name for Import of board assembly.This method should
 be called when component datasource is CATALOG.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCompCatalogfileName</tt>
   <dd>   The name of the component catalog  file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Component catalog file name set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Component catalog  file name setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetComponentDataSource"></a><a name="SetComponentDataSource(ComponentDataSource)"></a> <dt> o <b>SetComponentDataSource</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetComponentDataSource</b>(<td> const <script type="text/javascript"> activateLink('ComponentDataSource','ComponentDataSource')</script> <td><tt>iCompDataSource</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets Component data source for IDF Import.
 <br><b>Role</b>: This method is used to set component data source for IDF import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCompDataSource</tt>
   <dd>   Component data source
   <br><b>Legal values</b>:
   <dl>
     <dt>NONE</dt>
     <dd>Component geometry is not searched</dd>
     <dt>DATABASE </dt>
     <dd>Component should be searched in database</dd>
     <dt>CATALOG </dt>
     <dd>Component should be searched in database</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Component datasource set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Component datasource setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetDecimalSeparator"></a><a name="SetDecimalSeparator(CATUnicodeString)"></a> <dt> o <b>SetDecimalSeparator</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDecimalSeparator</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iUserDefinedDecimalValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets decimal separator to be used in IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUserDefinedDecimalValue</tt>
   <dd>		decimal separator used in IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>.</dt>
     <dd>dot</dd>
     <dt>, </dt>
     <dd>comma</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF export Decimal Separator set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>IDF export Decimal Separator setting failed</dd>
   </dl>

</dl>
</dl>
<a name="SetExportUnit"></a><a name="SetExportUnit(CATUnicodeString)"></a> <dt> o <b>SetExportUnit</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetExportUnit</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iExportedUnit</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets unit for the IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iExportedUnit</tt>
   <dd>		Unit for IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>MM</dt>
     <dd>Unit of exported co-ordinates is millimeter</dd>
     <dt>THOU</dt>
     <dd>Unit of exported co-ordinates is thou</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Export Unit set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Export Unit setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetExportedFileVersion"></a><a name="SetExportedFileVersion(int)"></a> <dt> o <b>SetExportedFileVersion</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetExportedFileVersion</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iUnit</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets version of IDF file to export
 <br><b>Role</b>: 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUnit</tt>
   <dd>		version of IDF file to export
   <br><b>Legal values</b>:
   <dl>
     <dt>2</dt>
     <dd>Version of IDF file to export is IDF2.0 </dd>
     <dt>3 </dt>
     <dd>Version of IDF file to export is IDF3.0 </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Exported IDF file version set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Exported IDF file version setting failed</dd>
   </dl>

</dl>
</dl>
<a name="SetFileName"></a><a name="SetFileName(CATUnicodeString)"></a> <dt> o <b>SetFileName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFileName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iFileName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets IDF file name
 <br><b>Role</b>: This method is used to set IDF file name for Import/Export. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd>   The name of the IDF file. If Export/Import mode is FILEBASEMODE
   then iFileName should contain full path of the file else only
   document name should be provided.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>IDF file name set successful</dd>
     <dt>E_FAIL </dt>
     <dd>IDF file name setting failed</dd>
   </dl>

</dl>
</dl>
<a name="SetIDFImportExportMode"></a><a name="SetIDFImportExportMode(ImportExportMode)"></a> <dt> o <b>SetIDFImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetIDFImportExportMode</b>(<td> const <script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode')</script> <td><tt>iIDFImportExportMode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the IDF ImportExport Mode.
 <br><b>Role</b>: This method is used to set mode of IDF file Export/Import. Mode defines the location of file.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIDFImportExportMode</tt>
   <dd>   IDF file location for Export/Import
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>IDF File location for export/import is local directory</dd>
     <dt>DESIGNERCENTRALMODE </dt>
     <dd>IDF File location for export/import is design central; IDF file is versioned document</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>IDF File location is for export/import is database;IDF file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Mode set successful</dd>
     <dt>E_FAIL </dt>
     <dd>Mode setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetImportDrillHolesMode"></a><a name="SetImportDrillHolesMode(HoleOptions)"></a> <dt> o <b>SetImportDrillHolesMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetImportDrillHolesMode</b>(<td> const <script type="text/javascript"> activateLink('HoleOptions','HoleOptions')</script> <td><tt>iDrilledHolesMode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets holes import mode.
 <br><b>Role</b>: This method is used to set holes import mode for IDF import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDrilledHolesMode</tt>
   <dd>   Hole import mode
   <br><b>Legal values</b>:
   <dl>
     <dt>DRILLED</dt>
     <dd>Hole imported should be drilled</dd>
     <dt>NOTDRILLED </dt>
     <dd>Hole imported should NOT be drilled. Only representation are drawn i.e. CBDHoles are created</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Hole Drill Mode set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>Hole Drill Mode setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetLibName"></a><a name="SetLibName(CATUnicodeString)"></a> <dt> o <b>SetLibName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLibName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script> <td><tt>iLIBFileName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets component library file name.
 <br><b>Role</b>: This method is used to set component library file name for Import. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd>   The name of the LIB file. If Import mode is FILEBASEMODE
   then iFileName should contain full path of the file else only
   document name should be provided.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>LIB file name set successful</dd>
     <dt>E_FAIL </dt>
     <dd>LIB file name setting failed</dd>
   </dl>

</dl>
</dl>
<a name="SetLibraryImportExportMode"></a><a name="SetLibraryImportExportMode(ImportExportMode)"></a> <dt> o <b>SetLibraryImportExportMode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLibraryImportExportMode</b>(<td> const <script type="text/javascript"> activateLink('ImportExportMode','ImportExportMode')</script> <td><tt>iLIBImportExportMode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the component Library Import Mode.
 <br><b>Role</b>: This method is used to set mode of component library file for Board assembly Import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLIBImportExportMode</tt>
   <dd>   Component Library location for Import mode
   <br><b>Legal values</b>:
   <dl>
     <dt>FILEBASEMODE</dt>
     <dd>LIB File location for is local directory</dd>
     <dt>PLMDOCUMENTMODE </dt>
     <dd>LIB File location is database;LIB file is PLM Document </dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Mode set successful</dd>
     <dt>E_FAIL </dt>
     <dd>Mode setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetPLMDocumentAttachmentOption"></a><a name="SetPLMDocumentAttachmentOption(PLMDocumentAttachment)"></a> <dt> o <b>SetPLMDocumentAttachmentOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPLMDocumentAttachmentOption</b>(<td> const <script type="text/javascript"> activateLink('PLMDocumentAttachment','PLMDocumentAttachment')</script> <td><tt>iPLMDocumentAttachmentOption</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Sets PLM Document Attachment option for IDF export.
 <br><b>Role</b>: This method is used to set option of attaching "IDF exported as PLM Document" to the Root Document
 when board is exported as PLM Document
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPLMDocumentAttachmentOption</tt>
   <dd>   IDF Exported as "PLM Document" attachment option.
   <br><b>Legal values</b>:
   <dl>
     <dt>ATTACHED</dt>
     <dd>Exported PLM Document is attached to the Root Document</dd>
     <dt>NOTATTACHED </dt>
     <dd>Exported PLM Document is NOT attached to the Root Document</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMdocument Attachment Mode set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMdocument Attachment Mode setting failed </dd>
   </dl>

</dl>
</dl>
<a name="SetPLMDocumentCreationTypeOption"></a><a name="SetPLMDocumentCreationTypeOption(PLMDocumentCreationType)"></a> <dt> o <b>SetPLMDocumentCreationTypeOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPLMDocumentCreationTypeOption</b>(<td> const <script type="text/javascript"> activateLink('PLMDocumentCreationType','PLMDocumentCreationType')</script> <td><tt>iPLMDocumentCreationTypeOption</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets creation type of IDF exported as PLM Document.
 <br><b>Role</b>: This method is used to set creation type of IDF exported as PLM Document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPLMDocumentCreationTypeOption</tt>
   <dd>   IDF Exported as "PLM Document" creaton type.
   <br><b>Legal values</b>:
   <dl>
     <dt>CREATE_NEWDOC</dt>
     <dd>New PLM document is to be created</dd>
     <dt>UPDATE_EXISTING_DOC </dt>
     <dd>Existing PLM Document is to be updated</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMDocument creation type set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMDocument creation type setting failed</dd>
   </dl>

</dl>
</dl>
<a name="SetPLMDocumentVersioningOption"></a><a name="SetPLMDocumentVersioningOption(PLMDocumentVersioning)"></a> <dt> o <b>SetPLMDocumentVersioningOption</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPLMDocumentVersioningOption</b>(<td> const <script type="text/javascript"> activateLink('PLMDocumentVersioning','PLMDocumentVersioning')</script> <td><tt>iPLMDocumentVersioningOption</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets Versioning option for board assembly Export to PLM Document.
 <br><b>Role</b>: This method is used to set Versioning option for board assembly Export to PLM Document.The exported PLM document updates the existing 
 PLM document attached to the root assembly. Use this method when 
<script type="text/javascript"> activateLinkAnchor('','GetPLMDocumentCreationTypeOption','GetPLMDocumentCreationTypeOption') </script> method returns UPDATE_EXISTING_DOC 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPLMDocumentVersioningOption</tt>
   <dd>   IDF Exported as "PLM Document" versioning option.
   <br><b>Legal values</b>:
   <dl>
     <dt>NEWVERSION</dt>
     <dd>New version of attached document should be created</dd>
     <dt>CRUSHOLDER </dt>
     <dd>Existing version of attached document should be overwritten</dd>
   </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>PLMdocument versioning option set successfully</dd>
     <dt>E_FAIL </dt>
     <dd>PLMdocument versioning option setting failed</dd>
   </dl>

</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="ComponentDataSource"> <dt> o <b>ComponentDataSource</b>
<dl>
  <dd>
<pre>
enum <b>ComponentDataSource</b> {
  NONE,
  DATABASE,
  CATALOG
}
</pre>
 Component data source for IDF import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NONE</tt>
   <dd>   Component is not searched in database.
 </dd>
    <dt><tt> DATABASE</tt>
   <dd>   Component is searched in database.
 </dd>
    <dt><tt> CATALOG</tt>
   <dd>   Component is searched in database.</dd>
</dl>
</dl>
</dl>
<a name="HoleOptions"> <dt> o <b>HoleOptions</b>
<dl>
  <dd>
<pre>
enum <b>HoleOptions</b> {
  DRILLED,
  NOTDRILLED
}
</pre>
 Hole drilling option for IDF Import.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> DRILLED</tt>
   <dd>   Holes imported should be drilled.
 </dd>
    <dt><tt> NOTDRILLED</tt>
   <dd>   Holes imported should NOT be drilled.</dd>
</dl>
</dl>
</dl>
<a name="ImportExportMode"> <dt> o <b>ImportExportMode</b>
<dl>
  <dd>
<pre>
enum <b>ImportExportMode</b> {
  FILEBASEMODE,
  DESIGNERCENTRALMODE,
  PLMDOCUMENTMODE
}
</pre>
 IDF Import/Export mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> FILEBASEMODE</tt>
   <dd>   File is stored in a local directory.
 </dd>
    <dt><tt> DESIGNERCENTRALMODE</tt>
   <dd>   File is stored in design central as versioned document.
 </dd>
    <dt><tt> PLMDOCUMENTMODE</tt>
   <dd>   File is stored in database as PLMDocument.</dd>
</dl>
</dl>
</dl>
<a name="PLMDocumentAttachment"> <dt> o <b>PLMDocumentAttachment</b>
<dl>
  <dd>
<pre>
enum <b>PLMDocumentAttachment</b> {
  ATTACHED,
  NOTATTACHED
}
</pre>
 IDF Exported as PLM document attachment option.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ATTACHED</tt>
   <dd>   IDF exported as IDF is to be attached to the Root Product.
 </dd>
    <dt><tt> NOTATTACHED</tt>
   <dd>   IDF exported as IDF should NOT be attached to the Root Product.</dd>
</dl>
</dl>
</dl>
<a name="PLMDocumentCreationType"> <dt> o <b>PLMDocumentCreationType</b>
<dl>
  <dd>
<pre>
enum <b>PLMDocumentCreationType</b> {
  CREATE_NEWDOC,
  UPDATE_EXISTING_DOC
}
</pre>
 IDF Exported as PLM document creation mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CREATE_NEWDOC</tt>
   <dd>   New PLMDocument is to be created.
 </dd>
    <dt><tt> UPDATE_EXISTING_DOC</tt>
   <dd>   Existing PLMDocument is to be updated.</dd>
</dl>
</dl>
</dl>
<a name="PLMDocumentVersioning"> <dt> o <b>PLMDocumentVersioning</b>
<dl>
  <dd>
<pre>
enum <b>PLMDocumentVersioning</b> {
  NEWVERSION,
  CRUSHOLDER
}
</pre>
 IDF Exported as PLM document versioning option when existing PLM document is to be updated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NEWVERSION</tt>
   <dd>   New version of the PLM document is to be created.
 </dd>
    <dt><tt> CRUSHOLDER</tt>
   <dd>   Existing PLM document is to be overwritten.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATPcbImportExportMode.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CAAIDFImportExport</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

