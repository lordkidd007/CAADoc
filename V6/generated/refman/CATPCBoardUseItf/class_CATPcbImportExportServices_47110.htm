<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPCBoardUseItf Class CATPcbImportExportServices</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATPCBoardUseItf.htm" href="../CATPCBoardUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATPCBoardUseItf";	}
		function getCurrentObjectName() { 
 	return "CATPcbImportExportServices"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATPCBoardUseItf <script type="text/javascript" > writeClassCharacteristic(); </script> CATPcbImportExportServices</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATPcbImportExportServices_47110','CATPcbImportExportServices','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATPcbImportExportServices</b>
</p>
<p>
<b><i>    Class exposing services dedicated to Import and Export of IDF Files.</i></b><br>

 <b>Role</b>: To provide services for Importing and Exporting IDF files
 <p>
 To Import IDF file use API ImportIDFFile.
 To Export file use API ExportAsIDFFile.
 Location of IDF file to Import/Export can be in Database or in local directory</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ExportAsIDFFile(CATPcbImportExportMode*,CATIPrdObject*)"><b>ExportAsIDFFile</b></a>(CATPcbImportExportMode*,CATIPrdObject*)
<dd>  Exports Board Assembly to an IDF file.
 <dt> o 
    <a href="#ImportIDFFile(CATPcbImportExportMode*,CATIPrdObject**,CATOmbLifeCycleRootsBag&amp;)"><b>ImportIDFFile</b></a>(CATPcbImportExportMode*,CATIPrdObject**,CATOmbLifeCycleRootsBag&amp;)
<dd>  Imports an IDF file.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ExportAsIDFFile"></a><a name="ExportAsIDFFile(CATPcbImportExportMode*,CATIPrdObject*)"></a> <dt> o <b>ExportAsIDFFile</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExportAsIDFFile</b>(<td> const <script type="text/javascript"> activateLink('CATPcbImportExportMode','CATPcbImportExportMode*')</script> <td><tt>iExportMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPrdObject','CATIPrdObject*')</script> <td><tt>iRootBoardAssembly</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Exports Board Assembly to an IDF file.
 <br><b>Role</b>:Exports Circuit Board assembly "iRootBoardAssembly" to an IDF file.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iExportMode</tt>
   <dd>					A pointer to structure containing information of IDF file to Export.
 </dd>
    <dt><tt> iRootBoardAssembly</tt>
   <dd>					The Reference to the Root Product of the Exported assembly.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Export successful</dd>
     <dt>E_FAIL </dt>
     <dd>Export failed </dd>
   </dl>
 
  <dt> Example: </dt>
  <dd> <pre class="code">		CATPcbImportExportMode *pModeExport = NULL;
		CATIPrdObject_var hRootProduct;
		.....
		CATUnicodeString strNameFile;
		pModeExport = new CATPcbImportExportMode();
		if(NULL != pModeExport)
		{
			CATPcbImportExportMode::PLMdocumentAttachment PLMDocumentAttachmentOption			= CATPcbImportExportMode::ATTACHED;
			CATPcbImportExportMode::PLMDocumentVersioning PLMDocumentVersioningOption			= CATPcbImportExportMode::NEWVERSION;
			CATPcbImportExportMode::PLMDocumentCreationType PLMDocumentCreationTypeOption = CATPcbImportExportMode::CREATE_NEWDOC;
			CATPcbImportExportMode::ImportExportMode IDFImportExportMode									= CATPcbImportExportMode::FILEBASEMODE;

			pModeExport->SetExportUnit("MM");
			pModeExport->SetExportedFileVersion(3);
			pModeExport->SetDecimalSeparator(".");

			if ( IDF is to be exported to a file in a local directory)
			{
				strNameFile = "...\MyIDF.idf";
				pModeExport->SetFileName(strNameFile);
			}
			else if(IDF is to be exported to a new document and attached to the root product)
     {
				strNameFile										= "MyExportedIDF_AS_PLMDoc";
				IDFImportExportMode						= CATPcbImportExportMode::PLMDOCUMENTMODE;
				PLMDocumentCreationTypeOption = CATPcbImportExportMode::CREATE_NEWDOC;
				PLMDocumentAttachmentOption		= CATPcbImportExportMode::ATTACHED;
				pModeExport->SetFileName(strNameFile);
				pModeExport->SetIDFImportExportMode(IDFImportExportMode);
				pModeExport->SetPLMDocumentCreationTypeOption(PLMDocumentCreationTypeOption);
				pModeExport->SetPLMDocumentAttachmentOption(PLMDocumentAttachmentOption);
			}
			else if (IDF is to be exported to a new document and NOT to be attached to the root product)
			{
				strNameFile										= "MyExportedIDF_AS_PLMDoc";
				IDFImportExportMode						= CATPcbImportExportMode::PLMDOCUMENTMODE;
				PLMDocumentCreationTypeOption = CATPcbImportExportMode::CREATE_NEWDOC;
				PLMDocumentAttachmentOption		= CATPcbImportExportMode::NOTATTACHED;
				pModeExport->SetFileName(strNameFile);
				pModeExport->SetIDFImportExportMode(IDFImportExportMode);
				pModeExport->SetPLMDocumentCreationTypeOption(PLMDocumentCreationTypeOption);
				pModeExport->SetPLMDocumentAttachmentOption(PLMDocumentAttachmentOption);
			}
			else if (Existing IDF stored as PLM document is to be updated and new version is to be created i.e. existing document is NOT overwritten)
			{
				strNameFile										= "MyExportedIDF_AS_PLMDoc";
				IDFImportExportMode						= CATPcbImportExportMode::PLMDOCUMENTMODE;
				PLMDocumentCreationTypeOption = CATPcbImportExportMode::UPDATE_EXISTING_DOC;
				PLMDocumentVersioningOption		= CATPcbImportExportMode::NEWVERSION;
				pModeExport->SetFileName(strNameFile);
				pModeExport->SetIDFImportExportMode(IDFImportExportMode);
				pModeExport->SetPLMDocumentCreationTypeOption(PLMDocumentCreationTypeOption);
				pModeExport->SetPLMDocumentVersioningOption(PLMDocumentVersioningOption);
			}
			else if (Existing IDF stored as PLM document is to be updated and overwritten; NO new version is created)
			{
				strNameFile										= "MyExportedIDF_AS_PLMDoc";
				IDFImportExportMode						= CATPcbImportExportMode::PLMDOCUMENTMODE;
				PLMDocumentCreationTypeOption = CATPcbImportExportMode::UPDATE_EXISTING_DOC;
				PLMDocumentVersioningOption		= CATPcbImportExportMode::CRUSHOLDER;
				pModeExport->SetFileName(strNameFile);
				pModeExport->SetIDFImportExportMode(IDFImportExportMode);
				pModeExport->SetPLMDocumentCreationTypeOption(PLMDocumentCreationTypeOption);
				pModeExport->SetPLMDocumentVersioningOption(PLMDocumentVersioningOption);
			}
			else if (IDF file is to be exported to design central)
			{
				strNameFile = = "MyExportedIDF_AS_VersionedDocument";
				IDFImportExportMode = CATPcbImportExportMode::DESIGNERCENTRALMODE;
				pModeExport->SetFileName(strNameFile);
				pModeExport->SetIDFImportExportMode(IDFImportExportMode);
			}
			HESULT RC = CATPcbImportExportServices::ExportAsIDFFile (pModeExport,hRootProduct);
			if(SUCCEEDED(RC))
			{
				...
			}
			delete pModeExport;
			pModeExport = NULL;
		}</pre></dd>
</dl>
</dl>
<a name="ImportIDFFile"></a><a name="ImportIDFFile(CATPcbImportExportMode*,CATIPrdObject**,CATOmbLifeCycleRootsBag&amp;)"></a> <dt> o <b>ImportIDFFile</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ImportIDFFile</b>(<td> const <script type="text/javascript"> activateLink('CATPcbImportExportMode','CATPcbImportExportMode*')</script> <td><tt>iImportMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPrdObject','CATIPrdObject**')</script> <td><tt>oRootBoardAssembly</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATOmbLifeCycleRootsBag','CATOmbLifeCycleRootsBag&amp;')</script> <td><tt>oBag</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Imports an IDF file.
 <br><b>Role</b>:Retrieves Root product of the Board Assembly after successful import of IDF file.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iImportMode</tt>
   <dd>   A pointer to structure containing information of IDF file to import.
 </dd>
    <dt><tt> oRootBoardAssembly</tt>
   <dd>		The Root Product of the imported assembly. When the API succeeds it contains valid a value.
 </dd>
    <dt><tt> oBag</tt>
   <dd>		The Bag en which 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt>S_OK</dt>
     <dd>Import successful</dd>
     <dt>E_FAIL </dt>
     <dd>Import Failed </dd>
   </dl>
 
  <dt> Example: </dt>
  <dd> <pre class="code"> 				CATIPrdObject* pRootBoardAssembly = NULL;
			CATPcbImportExportMode * pImportMode = NULL;
			pImportMode = new CATPcbImportExportMode();
			CATUnicodeString strIDFFileToImport;
			CATUnicodeString strLIBFileName;
			CATPcbImportExportMode::ImportExportMode IDFLocation = CATPcbImportExportMode::FILEBASEMODE;
     CATPcbImportExportMode::ImportExportMode LIBLocation = CATPcbImportExportMode::FILEBASEMODE;
			if(NULL != pImportMode )
			{

				if (both IDF and Lib files are from local directory)
       {
					strIDFFileToImport = "...\MyIDF.idf";
					strLIBFileName     = "...\MyLib.lib";
					CATPcbImportExportMode::ImportExportMode IDFLocation = CATPcbImportExportMode::FILEBASEMODE;
					CATPcbImportExportMode::ImportExportMode LIBLocation = CATPcbImportExportMode::FILEBASEMODE;
				}
       else if(IDF file is PLMDocument stored in database and lib file location is local directory)
				{
					strIDFFileToImport = "MyIDF_AS_PLMDoc";
					strLIBFileName     = "...\MyLib.lib";
					IDFLocation = CATPcbImportExportMode::PLMDOCUMENTMODE;
					LIBLocation = CATPcbImportExportMode::FILEBASEMODE;
       }	   
				else if(IDF file is in local directory and lib file is PLMDocument stored in database)
       {
					strIDFFileToImport	= "...\MyIDF.idf";
					strLIBFileName			= "MyLIB_AS_PLMDoc";
					IDFLocation = CATPcbImportExportMode::FILEBASEMODE;
					LIBLocation = CATPcbImportExportMode::PLMDOCUMENTMODE;
				}
				else if(Both IDF and Lib files are PLMDocument's stored in database )
				{
					strIDFFileToImport  = "MyIDF_AS_PLMDoc";
					strLIBFileName      = "MyLIB_AS_PLMDoc";
					IDFLocation = CATPcbImportExportMode::PLMDOCUMENTMODE;
					LIBLocation = CATPcbImportExportMode::PLMDOCUMENTMODE;
				}	
				pImportMode->SetIDFImportExportMode(IDFLocation);
				pImportMode->SetFileName(strIDFFileToImport);

				pImportMode->SetLibraryImportExportMode(LIBLocation);
				pImportMode->SetLibName(strLIBFileName);

				HRESULT RC =  CATPcbImportExportServices::ImportIDFFile(pImportMode , pRootBoardAssembly);
				if((SUCCEEDED(RC)) && (NULL_var != pRootBoardAssembly))
				{
            ......
				}
			}</pre></dd>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATPcbImportExportServices.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CAAIDFImportExport</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

