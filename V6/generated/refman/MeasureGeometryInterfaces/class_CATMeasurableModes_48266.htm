<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>MeasureGeometryInterfaces Class CATMeasurableModes</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../MeasureGeometryInterfaces.htm" href="../MeasureGeometryInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "MeasureGeometryInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATMeasurableModes"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>MeasureGeometryInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATMeasurableModes</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMeasurableModes_48266','CATMeasurableModes','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMeasurableModes</b>
</p>
<p>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetCanonicDetectionMode(CATMeasurableInterfaceCanonicDetectionMode&amp;)"><b>GetCanonicDetectionMode</b></a>(CATMeasurableInterfaceCanonicDetectionMode&amp;)
<dd>  This mode is created for perfomance issue 
 It allows you to not detect canonicity on some entities
 This mode is set by default to MeasurableCanonicDetectionBest which always tries to detect canonicity

 <dt> o 
    <a href="#GetCrossDetectionMode(CATMeasurableInterfaceCrossDetectionMode&amp;)"><b>GetCrossDetectionMode</b></a>(CATMeasurableInterfaceCrossDetectionMode&amp;)
<dd> The cross detection allows you to recognize cone,cylinder and circle as CATIMeasurableLine
It also allows you to recognize sphere as CATIMeasurablePoint
This mode is set by default to MeasurableCanonicDetectionBest which does not try to do cross detection
 <dt> o 
    <a href="#SetCanonicDetectionMode(CATMeasurableInterfaceCanonicDetectionMode)"><b>SetCanonicDetectionMode</b></a>(CATMeasurableInterfaceCanonicDetectionMode)
<dd>  This mode is created for perfomance issue 
 It allows you to not detect canonicity on some entities
 This mode is set by default to MeasurableCanonicDetectionBest which always tries to detect canonicity

 <dt> o 
    <a href="#SetCrossDetectionMode(CATMeasurableInterfaceCrossDetectionMode)"><b>SetCrossDetectionMode</b></a>(CATMeasurableInterfaceCrossDetectionMode)
<dd> The cross detection allows you to recognize cone,cylinder and circle as CATIMeasurableLine
It also allows you to recognize sphere as CATIMeasurablePoint
This mode is set by default to MeasurableCanonicDetectionBest which does not try to do cross detection
</dl>
<dl>
</dl>
<dl>
 <h2>Data Member Index</h2> <br>
 <dt> o 
    <a href="#_CrossDetectionV4"><b>_CrossDetectionV4</b></a>
<dd>  Warning do not use this methode.
</dl>
 <h2>Methods</h2> <br>
<a name="GetCanonicDetectionMode"></a><a name="GetCanonicDetectionMode(CATMeasurableInterfaceCanonicDetectionMode&amp;)"></a> <dt> o <b>GetCanonicDetectionMode</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT',' HRESULT')</script>  <b>GetCanonicDetectionMode</b>(<td><script type="text/javascript"> activateLink('CATMeasurableInterfaceCanonicDetectionMode','CATMeasurableInterfaceCanonicDetectionMode&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 This mode is created for perfomance issue 
 It allows you to not detect canonicity on some entities
 This mode is set by default to MeasurableCanonicDetectionBest which always tries to detect canonicity

</dl>
<a name="GetCrossDetectionMode"></a><a name="GetCrossDetectionMode(CATMeasurableInterfaceCrossDetectionMode&amp;)"></a> <dt> o <b>GetCrossDetectionMode</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT',' HRESULT')</script>  <b>GetCrossDetectionMode</b>(<td><script type="text/javascript"> activateLink('CATMeasurableInterfaceCrossDetectionMode','CATMeasurableInterfaceCrossDetectionMode&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
The cross detection allows you to recognize cone,cylinder and circle as CATIMeasurableLine
It also allows you to recognize sphere as CATIMeasurablePoint
This mode is set by default to MeasurableCanonicDetectionBest which does not try to do cross detection
</dl>
<a name="SetCanonicDetectionMode"></a><a name="SetCanonicDetectionMode(CATMeasurableInterfaceCanonicDetectionMode)"></a> <dt> o <b>SetCanonicDetectionMode</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT',' HRESULT')</script>  <b>SetCanonicDetectionMode</b>(<td><script type="text/javascript"> activateLink('CATMeasurableInterfaceCanonicDetectionMode','CATMeasurableInterfaceCanonicDetectionMode')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 This mode is created for perfomance issue 
 It allows you to not detect canonicity on some entities
 This mode is set by default to MeasurableCanonicDetectionBest which always tries to detect canonicity

</dl>
<a name="SetCrossDetectionMode"></a><a name="SetCrossDetectionMode(CATMeasurableInterfaceCrossDetectionMode)"></a> <dt> o <b>SetCrossDetectionMode</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT',' HRESULT')</script>  <b>SetCrossDetectionMode</b>(<td><script type="text/javascript"> activateLink('CATMeasurableInterfaceCrossDetectionMode','CATMeasurableInterfaceCrossDetectionMode')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
The cross detection allows you to recognize cone,cylinder and circle as CATIMeasurableLine
It also allows you to recognize sphere as CATIMeasurablePoint
This mode is set by default to MeasurableCanonicDetectionBest which does not try to do cross detection
</dl>
 <h2>Data Members</h2> <br>
<a name="_CrossDetectionV4"></a> <dt> o <b>_CrossDetectionV4</b>
<pre>
  public static  int _CrossDetectionV4</dt>
</pre>
<dl>
  <dd>
 Warning do not use this methode. <br>

</dl>
<hr>
 This object is included in the file: <b>CATMeasurableModes.h</b><br>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

