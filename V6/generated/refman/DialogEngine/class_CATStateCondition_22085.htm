<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DialogEngine Class CATStateCondition</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DialogEngine.htm" href="../DialogEngine.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DialogEngine";	}
		function getCurrentObjectName() { 
 	return "CATStateCondition"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DialogEngine <script type="text/javascript" > writeClassCharacteristic(); </script> CATStateCondition</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATStateCondition_22085','CATStateCondition','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATStateCondition</b>
</p>
<p>
<b><i> Base class to create a condition.</i></b><br>

 <b>Role</b>: Conditions are used to check whether the dialog can go on.
 A condition may be
 <ul>
 <li>a guard condition linked to a transition. The condition is evaluated 
 when the transition is triggered. 
 If it evaluates TRUE, the transition fires. </li>
 <li>a state exit condition. It is evaluated before the guard conditions: 
 <ul>
 <li>whenever a state dialog agent is valued
 <li>when entering the state, if the state is empty or if the state 
 contains a one-shot agent already valued.
 </ul>
 If it evaluates FALSE, the guard conditions are not evaluated and no 
 transition fires.</li>
 </ul>
 <br>To create a condition, you can derive this class and override the <script type="text/javascript"> activateLinkAnchor('','GetStatus','GetStatus') </script> method or use the 
<script type="text/javascript"> activateLinkAnchor('CATStateCommand','Condition','CATStateCommand.Condition') </script> method and give as argument the address of a method to evaluate the condition.  
 <br>Conditions must be created in the 
<script type="text/javascript"> activateLinkAnchor('CATStateCommand','BuildGraph','CATStateCommand.BuildGraph') </script>  method.
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATDialogState','','CATDialogState') </script>, <script type="text/javascript"> activateLinkAnchor('CATDialogTransition','','CATDialogTransition') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATStateCondition()"><b>CATStateCondition</b></a>()
<dd>  Constructs an empty condition.
 <dt> o 
    <a href="#~CATStateCondition()"><b>~CATStateCondition</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetStatus()"><b>GetStatus</b></a>()
<dd>  Evaluates the condition.
 <dt> o 
    <a href="#QueryCATICmdCondition(CATICmdCondition**)"><b>QueryCATICmdCondition</b></a>(CATICmdCondition**)
<dd>  
 <dt> o 
    <a href="#SetData(void*)"><b>SetData</b></a>(void*)
<dd>  Sets data which may be useful to evaluate the condition.
 <dt> o 
    <a href="#SetMethod(ConditionMethod)"><b>SetMethod</b></a>(ConditionMethod)
<dd>  Sets the method to evaluate the condition.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATStateCondition"></a><a name="CATStateCondition()"></a> <dt> o <b>CATStateCondition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATStateCondition</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty condition.
 <br><b>Role</b>: Use it only when deriving the <tt>CATStateCondition</tt> 
 class, otherwise use the 
<script type="text/javascript"> activateLinkAnchor('CATStateCommand','Condition','CATStateCommand.Condition') </script> method to create a condition.
</dl>
<a name="~CATStateCondition"></a><a name="~CATStateCondition()"></a> <dt> o <b>~CATStateCondition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATStateCondition</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetStatus"></a><a name="GetStatus()"></a> <dt> o <b>GetStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>GetStatus</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Evaluates the condition.
 <br><b>Role</b>: Redefine this method when deriving <tt>
 CATStateCondition</tt>.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The result of the condition evaluation.
</dl>
</dl>
<a name="QueryCATICmdCondition"></a><a name="QueryCATICmdCondition(CATICmdCondition**)"></a> <dt> o <b>QueryCATICmdCondition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>QueryCATICmdCondition</b>(<td><script type="text/javascript"> activateLink('CATICmdCondition','CATICmdCondition**')</script> <td><tt>oCondition</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCondition</tt>
   <dd> [out, IUnknown#Release]</dd>
</dl>
</dl>
</dl>
<a name="SetData"></a><a name="SetData(void*)"></a> <dt> o <b>SetData</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetData</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iData</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets data which may be useful to evaluate the condition.
 <br><b>Role</b>: This data will be given as the argument of the <tt>
 ConditionMethod</tt> method.
 <br>Do not use this method if you derive the <tt>CATStateCondition</tt> 
 class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iData</tt>
   <dd>   An object that can be useful for the condition.
   <br><b>Warning</b>: A copy of <tt>iData</tt> is kept. 
   Deallocate this object only at end of the command.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT. 
   S_OK is always returned.
</dl>
</dl>
<a name="SetMethod"></a><a name="SetMethod(ConditionMethod)"></a> <dt> o <b>SetMethod</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetMethod</b>(<td><script type="text/javascript"> activateLink('ConditionMethod','ConditionMethod')</script> <td><tt>iMeth</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the method to evaluate the condition.
 <br><b>Role</b>: This method must be a method of the CATStateCommand 
 object which defines the statechart.
 <br>Do not use <tt>SetMethod</tt> if you derive the 
 <tt>CATStateCondition</tt> class.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeth</tt>
   <dd>   The method which evaluates the condition.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT. 
   S_OK is always returned.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATStateCondition.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDialogEngine</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

