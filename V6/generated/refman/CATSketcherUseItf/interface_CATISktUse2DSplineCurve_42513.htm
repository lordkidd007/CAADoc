<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATSketcherUseItf Interface CATISktUse2DSplineCurve</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATSketcherUseItf.htm" href="../CATSketcherUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATSketcherUseItf";	}
		function getCurrentObjectName() { 
 	return "CATISktUse2DSplineCurve"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATSketcherUseItf Interface CATISktUse2DSplineCurve</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATISktUse2DSplineCurve_42513','CATISktUse2DSplineCurve','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATISktUse2DSplineCurve</b>
</p>
<p>
<b><i> </i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddLastPoint(CATISktUse2DPoint*,int)"><b>AddLastPoint</b></a>(CATISktUse2DPoint*,int)
<dd>   Inserts control point in the spline at the last position.
 <dt> o 
    <a href="#Compute(int)"><b>Compute</b></a>(int)
<dd>   Computes the spline, according to the recorded control points.
 <dt> o 
    <a href="#GetClosure(int*)"><b>GetClosure</b></a>(int*)
<dd>  Gets whether the curve is closed.
 <dt> o 
    <a href="#GetCstPoints(CATLISTV(CATISktUse2DCstPoint_var)&amp;)"><b>GetCstPoints</b></a>(CATLISTV(CATISktUse2DCstPoint_var)&amp;)
<dd>   Gives the list of the control points of the spline.
 <dt> o 
    <a href="#GetDegree(int*)"><b>GetDegree</b></a>(int*)
<dd>   Gives the degree of the curve (3 or 5)
  
 <dt> o 
    <a href="#InsertControlPointAfter(CATISktUse2DPoint*,unsigned long,int)"><b>InsertControlPointAfter</b></a>(CATISktUse2DPoint*,unsigned long,int)
<dd>   Inserts control point in the spline.
 <dt> o 
    <a href="#RemovePoint(CATISktUse2DPoint*,int)"><b>RemovePoint</b></a>(CATISktUse2DPoint*,int)
<dd>   Removes control point in the spline.
 <dt> o 
    <a href="#SetClosure(int)"><b>SetClosure</b></a>(int)
<dd>  Sets whether the curve is closed.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddLastPoint"></a><a name="AddLastPoint(CATISktUse2DPoint*,int)"></a> <dt> o <b>AddLastPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddLastPoint</b>(<td><script type="text/javascript"> activateLink('CATISktUse2DPoint','CATISktUse2DPoint*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Inserts control point in the spline at the last position.<br>
  If a 2D point is given (and not a control point), a new control point is created
  and aggregated in the spline.<br>
  If a 2D control point is given, it will be aggregated in the spline.<br>
  If the 2D control point is previously aggregated in a spline, the return code will be E_FAIL.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>  The new point to be inserted. (@see CATISktUse2DPoint and CATISktUse2DCstPoint for more information).
  </dd>
    <dt><tt> iEvaluationType</tt>
   <dd>  Unused.</dd>
</dl>
</dl>
</dl>
<a name="Compute"></a><a name="Compute(int)"></a> <dt> o <b>Compute</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Compute</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Computes the spline, according to the recorded control points.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvaluationType</tt>
   <dd>  Unused.</dd>
</dl>
</dl>
</dl>
<a name="GetClosure"></a><a name="GetClosure(int*)"></a> <dt> o <b>GetClosure</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClosure</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oClosed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets whether the curve is closed.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oClosed</tt>
   <dd>       Closing flag
<dl><dt>1</dt><dd> for a closed curve</dd>
    <dt>0</dt><dd> for an open curve</dd>
</dl></dd>
</dl>
</dl>
</dl>
<a name="GetCstPoints"></a><a name="GetCstPoints(CATLISTV(CATISktUse2DCstPoint_var)&amp;)"></a> <dt> o <b>GetCstPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCstPoints</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DCstPoint_var)','CATLISTV(CATISktUse2DCstPoint_var)&amp;')</script> <td><tt>oCstPointsList</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Gives the list of the control points of the spline.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCstPointsList</tt>
   <dd>  The list of the control points. (@see CATISktUse2DPoint and CATISktUse2DCstPoint for more information).</dd>
</dl>
</dl>
</dl>
<a name="GetDegree"></a><a name="GetDegree(int*)"></a> <dt> o <b>GetDegree</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDegree</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDegree</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Gives the degree of the curve (3 or 5)
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDegree</tt>
   <dd>  The degree of the spline curve</dd>
</dl>
</dl>
</dl>
<a name="InsertControlPointAfter"></a><a name="InsertControlPointAfter(CATISktUse2DPoint*,unsigned long,int)"></a> <dt> o <b>InsertControlPointAfter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertControlPointAfter</b>(<td><script type="text/javascript"> activateLink('CATISktUse2DPoint','CATISktUse2DPoint*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('unsigned long','unsigned long')</script> <td><tt>iPosition</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Inserts control point in the spline.<br>
  If a 2D point is given (and not a control point), a new control point is created
  and aggregated in the spline.<br>
  If a 2D control point is given, it will be aggregated in the spline.<br>
  If the 2D control point is previously aggregated in a spline, the return code will be E_FAIL.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>  The new point to be inserted. (@see CATISktUse2DPoint and CATISktUse2DCstPoint for more information).
  </dd>
    <dt><tt> iPosition</tt>
   <dd>  The position at which to insert the point.
  To insert a new control point as the first element, set iPosition to 0.
  </dd>
    <dt><tt> iEvaluationType</tt>
   <dd>  Unused.</dd>
</dl>
</dl>
</dl>
<a name="RemovePoint"></a><a name="RemovePoint(CATISktUse2DPoint*,int)"></a> <dt> o <b>RemovePoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemovePoint</b>(<td><script type="text/javascript"> activateLink('CATISktUse2DPoint','CATISktUse2DPoint*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Removes control point in the spline.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>  The point to be removed. (@see CATISktUse2DPoint and CATISktUse2DCstPoint for more information).
  </dd>
    <dt><tt> iEvaluationType</tt>
   <dd>  Unused.</dd>
</dl>
</dl>
</dl>
<a name="SetClosure"></a><a name="SetClosure(int)"></a> <dt> o <b>SetClosure</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetClosure</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iClosed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets whether the curve is closed.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClosed</tt>
   <dd>       Closing flag
<dl><dt>1</dt><dd> for a closed curve</dd>
    <dt>0</dt><dd> for an open curve</dd>
</dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATISktUse2DSplineCurve.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

