<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATSketcherUseItf Interface CATISktUse2DWFFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATSketcherUseItf.htm" href="../CATSketcherUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATSketcherUseItf";	}
		function getCurrentObjectName() { 
 	return "CATISktUse2DWFFactory"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATSketcherUseItf Interface CATISktUse2DWFFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATISktUse2DWFFactory_37617','CATISktUse2DWFFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATISktUse2DWFFactory</b>
</p>
<p>
<b><i> Provides the client with the functionality for creating 2D geometric elements.</i></b><br>

 <b>Role</b>:</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateArc(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"><b>CreateArc</b></a>(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**)
<dd>  Creates an Arc on a 2D Curve.
 <dt> o 
    <a href="#CreateCenterCircle(double*,double)"><b>CreateCenterCircle</b></a>(double*,double)
<dd>  Creates a 2D axis circle.
 <dt> o 
    <a href="#CreateCenterLine(double*,double*)"><b>CreateCenterLine</b></a>(double*,double*)
<dd>  Creates a 2D axis line.
 <dt> o 
    <a href="#CreateChamfer(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*,double*,int)"><b>CreateChamfer</b></a>(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*,double*,int)
<dd>  Creates a chamfer segment.
 <dt> o 
    <a href="#CreateCircle(double*,double)"><b>CreateCircle</b></a>(double*,double)
<dd>  Creates a 2D circle.
 <dt> o 
    <a href="#CreateCircle(double*,double*,double*,int)"><b>CreateCircle</b></a>(double*,double*,double*,int)
<dd>  Creates a 2D arc through three points.
 <dt> o 
    <a href="#CreateCircle(double*,double,double,double)"><b>CreateCircle</b></a>(double*,double,double,double)
<dd>  Creates a 2D arc.
 <dt> o 
    <a href="#CreateCircleTgt(double*,double*,double*,int)"><b>CreateCircleTgt</b></a>(double*,double*,double*,int)
<dd>  Creates a 2D arc with two points and a tangent.
 <dt> o 
    <a href="#CreateConicCurve(CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,double)"><b>CreateConicCurve</b></a>(CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,double)
<dd>  Creates a 2D conic curve.
 <dt> o 
    <a href="#CreateConnectCurve(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,int,int,int,int,double,double)"><b>CreateConnectCurve</b></a>(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,int,int,int,int,double,double)
<dd>  Creates a 2D connecting curve between two 2D curves.
 <dt> o 
    <a href="#CreateConstructionCircle(double*,double)"><b>CreateConstructionCircle</b></a>(double*,double)
<dd>  Creates a 2D construction circle.
 <dt> o 
    <a href="#CreateConstructionLine(double*,double*)"><b>CreateConstructionLine</b></a>(double*,double*)
<dd>  Creates a 2D construction line.
 <dt> o 
    <a href="#CreateContour(CATISktUse2DCurve_var&amp;,CATContourClass,CATAutosearchMode)"><b>CreateContour</b></a>(CATISktUse2DCurve_var&amp;,CATContourClass,CATAutosearchMode)
<dd>  Dedicated to curve connectivity detection using CATIA V4 tolerance.
 <dt> o 
    <a href="#CreateCorner(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*)"><b>CreateCorner</b></a>(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*)
<dd>  Creates a bi-tangent arc.
 <dt> o 
    <a href="#CreateCstPoint(double*,double*,double*)"><b>CreateCstPoint</b></a>(double*,double*,double*)
<dd>  Creates a 2D control point.
 <dt> o 
    <a href="#CreateCubicSplineCurve(CATLISTV(CATISktUse2DPoint_var)&amp;,int)"><b>CreateCubicSplineCurve</b></a>(CATLISTV(CATISktUse2DPoint_var)&amp;,int)
<dd>  Creates a 2D cubic spline curve (degree = 3).
 <dt> o 
    <a href="#CreateEllipse(double*,double*,double,double)"><b>CreateEllipse</b></a>(double*,double*,double,double)
<dd>  Creates a 2D ellipse.
 <dt> o 
    <a href="#CreateEllipse(double*,double*,double,double,double,double)"><b>CreateEllipse</b></a>(double*,double*,double,double,double,double)
<dd>  Creates a 2D arc of ellipse.
 <dt> o 
    <a href="#CreateHyperbola(double*,double*,double,double)"><b>CreateHyperbola</b></a>(double*,double*,double,double)
<dd>  Creates a 2D hyperbola.
 <dt> o 
    <a href="#CreateHyperbola(double*,double*,double,double,double,double)"><b>CreateHyperbola</b></a>(double*,double*,double,double,double,double)
<dd>  Creates a 2D hyperbola.
 <dt> o 
    <a href="#CreateLine(double*,double*)"><b>CreateLine</b></a>(double*,double*)
<dd>  Creates a 2D line.
 <dt> o 
    <a href="#CreateLine(double*,double*,double,double)"><b>CreateLine</b></a>(double*,double*,double,double)
<dd>  Creates a 2D line.
 <dt> o 
    <a href="#CreateOffsetCurve(int,CATBaseUnknown*,double)"><b>CreateOffsetCurve</b></a>(int,CATBaseUnknown*,double)
<dd>  Creates a 2D offset curve of a 2D curve.
 <dt> o 
    <a href="#CreateOutput(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"><b>CreateOutput</b></a>(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)
<dd>  Creates a 2D Output Geometry from 2D Geometry.
 <dt> o 
    <a href="#CreateOutputAxis(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"><b>CreateOutputAxis</b></a>(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)
<dd>  Creates a 2D Output axis Geometry from 2D point.
 <dt> o 
    <a href="#CreateOutputPlane(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"><b>CreateOutputPlane</b></a>(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)
<dd>  Creates a 2D Output plane from 2D line.
 <dt> o 
    <a href="#CreateOutputProfile(CATLISTV(CATBaseUnknown_var)&amp;,IID&amp;,CATBaseUnknown**)"><b>CreateOutputProfile</b></a>(CATLISTV(CATBaseUnknown_var)&amp;,IID&amp;,CATBaseUnknown**)
<dd>  Creates a 2D Output Profile from 2D Geometries.
 <dt> o 
    <a href="#CreateParabola(double*,double*,double)"><b>CreateParabola</b></a>(double*,double*,double)
<dd>  Creates a 2D parabola.
 <dt> o 
    <a href="#CreateParabola(double*,double*,double,double,double)"><b>CreateParabola</b></a>(double*,double*,double,double,double)
<dd>  Creates a 2D parabola.
 <dt> o 
    <a href="#CreatePoint(double*)"><b>CreatePoint</b></a>(double*)
<dd>  Creates a 2D point.
 <dt> o 
    <a href="#CreatePolyline(unsigned long,double*,boolean)"><b>CreatePolyline</b></a>(unsigned long,double*,boolean)
<dd>  Creates a 2D polyline.
 <dt> o 
    <a href="#CreateSplineCurve(CATLISTV(CATISktUse2DPoint_var)&amp;,int)"><b>CreateSplineCurve</b></a>(CATLISTV(CATISktUse2DPoint_var)&amp;,int)
<dd>  Creates a 2D quintic spline curve (degree = 5).
 <dt> o 
    <a href="#CreateUnspec(CATCurve_var&amp;)"><b>CreateUnspec</b></a>(CATCurve_var&amp;)
<dd>  Creates a curve from a CATPCurve object.
 <dt> o 
    <a href="#Duplicate(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,CATMathTransformation2D&amp;)"><b>Duplicate</b></a>(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,CATMathTransformation2D&amp;)
<dd>  Duplicates a set of 2D geometries and applies a transformation to the result.
 <dt> o 
    <a href="#FixTogether(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,IID&amp;,CATBaseUnknown**,int)"><b>FixTogether</b></a>(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,IID&amp;,CATBaseUnknown**,int)
<dd>  Creates a Fix Together Constraint (rigid set) of 2D Geometries.
 <dt> o 
    <a href="#IntersectGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)"><b>IntersectGeometry</b></a>(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)
<dd>  Intersects 3D or 2D external geometry.
 <dt> o 
    <a href="#OffsetGeometry(int,CATBaseUnknown*,double,int,CATBaseUnknown*,double*,int,int)"><b>OffsetGeometry</b></a>(int,CATBaseUnknown*,double,int,CATBaseUnknown*,double*,int,int)
<dd>  Offsets 3D geometry.
 <dt> o 
    <a href="#ProjectGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)"><b>ProjectGeometry</b></a>(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)
<dd>  Projects 3D or 2D external geometry on a sketch.
 <dt> o 
    <a href="#SilhouetteGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int)"><b>SilhouetteGeometry</b></a>(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int)
<dd>  Creates the silhouette of a surface.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateArc"></a><a name="CreateArc(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"></a> <dt> o <b>CreateArc</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateArc</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iPoint1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iPoint2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oArc</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an Arc on a 2D Curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] The curve on which the arc must be created.
 </dd>
    <dt><tt> <tt>iPoint1</tt></tt>
   <dd> [in] 2D start point for the arc.
 </dd>
    <dt><tt> <tt>iPoint2</tt></tt>
   <dd> [in] 2D end point for the arc.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oArc</tt></tt>
   <dd> [out] Pointer to the created Arc.</dd>
</dl>
</dl>
</dl>
<a name="CreateCenterCircle"></a><a name="CreateCenterCircle(double*,double)"></a> <dt> o <b>CreateCenterCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCenterCircle</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D axis circle.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D origin point coordinates.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Radius of the circle.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCenterLine"></a><a name="CreateCenterLine(double*,double*)"></a> <dt> o <b>CreateCenterLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCenterLine</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D axis line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D origin point coordinates.
 </dd>
    <dt><tt> <tt>iDirection</tt></tt>
   <dd> [in] 2D direction coordinates (will be normalized).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateChamfer"></a><a name="CreateChamfer(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*,double*,int)"></a> <dt> o <b>CreateChamfer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateChamfer</b>(<td><script type="text/javascript"> activateLink('CATISktUse2DCurve','CATISktUse2DCurve*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATISktUse2DCurve','CATISktUse2DCurve*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParam1</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iParam2</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iChamfer</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a chamfer segment.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] First geometric element.
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Second geometric element.
 </dd>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] Indicated 2D point coordinates.
 </dd>
    <dt><tt> <tt>iParam1</tt></tt>
   <dd> [in] Optional first parameter of the chamfer segment.
 </dd>
    <dt><tt> <tt>iParam2</tt></tt>
   <dd> [in] Optional second parameter of the chamfer segment.
 </dd>
    <dt><tt> <tt>iChamfer</tt></tt>
   <dd> [in] Indicates the computation mode of the chamfer,
 thus the significance of the two parameters iParam1 and iParam2:
  If iChamfer == 1 (Length of the chamfer and its angle):
   iParam1 means the length of the chamfer segment.
   iParam2 means the angle of the chamfer segment with the tangent to the first curve
    at the nearest intersection point from the indicated 2D point.
  If iChamfer == 2 (Length1 and Length2 define the chamfer):
   iParam1 means the distance of the chamfer segment with either the intersecting point
    of the two curves, if it exists, or the end point of the first curve.
   iParam2 means the distance of the chamfer segment with either the intersecting point
    of the two curves, if it exists, or the end point of the second curve.
  If iChamfer == 3 (Length1 and Angle define the chamfer):
   iParam1 means the distance of the chamfer segment with either the intersecting point
    of the two curves, if it exists, or the end point of the first curve.
   iParam2 means the angle of the chamfer segment with the tangent of the first curve
    at the nearest intersection point from the indicated 2D point.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCircle"></a><a name="CreateCircle(double*,double)"></a> <dt> o <b>CreateCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCircle</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D circle.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Radius of the circle.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCircle"></a><a name="CreateCircle(double*,double*,double*,int)"></a> <dt> o <b>CreateCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCircle</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iStartPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iEndPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRelimit</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D arc through three points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iStartPoint</tt></tt>
   <dd> [in] 2D start point coordinates.
 </dd>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D second point coordinates.
 </dd>
    <dt><tt> <tt>iEndPoint</tt></tt>
   <dd> [in] 2D end point coordinates.
 </dd>
    <dt><tt> <tt>iRelimit</tt></tt>
   <dd> [in] Trimming mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The arc is trimmed on given points.
 <dt> <tt>0</tt>  <dd> The arc is not trimmed.
 </dl>
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCircle"></a><a name="CreateCircle(double*,double,double,double)"></a> <dt> o <b>CreateCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCircle</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D arc.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Radius of the circle.
 </dd>
    <dt><tt> <tt>iStartParam</tt></tt>
   <dd> [in] Parameter of the start point (0<=iStartParam<2*PI).
 </dd>
    <dt><tt> <tt>iEndParam</tt></tt>
   <dd> [in] Parameter of the end point (iStartParam<iEndParam<4*PI).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCircleTgt"></a><a name="CreateCircleTgt(double*,double*,double*,int)"></a> <dt> o <b>CreateCircleTgt</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCircleTgt</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iStartPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iStartTangent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iEndPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRelimit</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D arc with two points and a tangent.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iStartPoint</tt></tt>
   <dd> [in] 2D start point coordinates.
 </dd>
    <dt><tt> <tt>iStartTangent</tt></tt>
   <dd> [in] 2D tangent coordinates.
 </dd>
    <dt><tt> <tt>iEndPoint</tt></tt>
   <dd> [in] 2D end point coordinates.
 </dd>
    <dt><tt> <tt>iRelimit</tt></tt>
   <dd> [in] Trimming mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The arc is trimmed on given points.
 <dt> <tt>0</tt>  <dd> The arc is not trimmed.
 </dl>
 </dd>
</dl>
</dl>
</dl>
<a name="CreateConicCurve"></a><a name="CreateConicCurve(CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,double)"></a> <dt> o <b>CreateConicCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateConicCurve</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEndPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oConic</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iStartTangent</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iEndTangent</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iFirstIntermediatePoint</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iFirstIntermediateTangent</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iSecondIntermediatePoint</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iSecondIntermediateTangent</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iThirdIntermediatePoint</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iTangentIntersectionPoint</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iConicParm</tt><td><tt>=0.5</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D conic curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iStartPoint</tt></tt>
   <dd> [in] Starting point of conic curve.
 </dd>
    <dt><tt> <tt>iEndPoint</tt></tt>
   <dd> [in] Ending point of conic curve.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oConic</tt></tt>
   <dd> [out] Pointer to the created conic curve.
 </dd>
    <dt><tt> <tt>iFirstIntermediatePoint</tt></tt>
   <dd> [in] Optional: First intermediate passing thru point.
 </dd>
    <dt><tt> <tt>iFirstIntermediateTangent</tt></tt>
   <dd> [in] Optional: Tangent at the first intermediate passing thru point.
 </dd>
    <dt><tt> <tt>iSecondIntermediatePoint</tt></tt>
   <dd> [in] Optional: Second intermediate passing thru point.
 </dd>
    <dt><tt> <tt>iSecondIntermediateTangent</tt></tt>
   <dd> [in] Optional: Tangent at the second intermediate passing thru point.
 </dd>
    <dt><tt> <tt>iThirdIntermediatePoint</tt></tt>
   <dd> [in] Optional: Third intermediate passing thru point.
 </dd>
    <dt><tt> <tt>iTangentIntersectionPoint</tt></tt>
   <dd> [in] Optional: Tangent intersection point.
 </dd>
    <dt><tt> <tt>iConicParm</tt></tt>
   <dd> [in] Optional: Conic parameter.
 <br><b>Legal values</b>: 
 <dl><dt>>0</dt><dd>should be greater than 0
 <dt>0.5</dt><dd>default value
 <dt><1</dt><dd>should be lower than 1
 </dl>
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATISktUse2DConicCurve','','CATISktUse2DConicCurve') </script>
</dl>
</dl>
<a name="CreateConnectCurve"></a><a name="CreateConnectCurve(CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,CATBaseUnknown*,IID&amp;,CATBaseUnknown**,int,int,int,int,double,double)"></a> <dt> o <b>CreateConnectCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateConnectCurve</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iPoint1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iPoint2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oConnect</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iContinuity1</tt><td><tt>=2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iContinuity2</tt><td><tt>=2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrient1</tt><td><tt>=1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrient2</tt><td><tt>=1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTension1</tt><td><tt>=1.0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTension2</tt><td><tt>=1.0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D connecting curve between two 2D curves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] First 2D curve to connect.
 </dd>
    <dt><tt> <tt>iPoint1</tt></tt>
   <dd> [in] 2D start point for the connecting curve.
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Second 2D curve to connect.
 </dd>
    <dt><tt> <tt>iPoint2</tt></tt>
   <dd> [in] 2D end point for the connecting curve.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oConnect</tt></tt>
   <dd> [out] Pointer to the created connecting curve
 </dd>
    <dt><tt> <tt>iContinuity1</tt></tt>
   <dd> [in] Optional: Continuity with first curve.
 <br><b>Legal values</b>: 
 <dl><dt>0</dt><dd>C0 - point continuity
 <dt>1</dt><dd>C1 - tangent continuity
 <dt>2</dt><dd>C2 - curvature continuity
 </dl>
 </dd>
    <dt><tt> <tt>iContinuity2</tt></tt>
   <dd> [in] Optional: Continuity with second curve.
 <br><b>Legal values</b>: 
 <dl><dt>0</dt><dd>C0 - point continuity
 <dt>1</dt><dd>C1 - tangent continuity
 <dt>2</dt><dd>C2 - curvature continuity
 </dl>
 </dd>
    <dt><tt> <tt>iOrientation1</tt></tt>
   <dd> [in] Optional: If same orientation, the connecting curve starts tangent to iCurve1 at iPoint1.
 <br><b>Legal values</b>: 
 <dl><dt>1</dt><dd>same orientation
 <dt>-1</dt><dd>opposite orientation
 </dl>
 </dd>
    <dt><tt> <tt>iOrientation2</tt></tt>
   <dd> [in] Optional: If same orientation, the connecting curve ends tangent to iCurve2 at iPoint2.
 <br><b>Legal values</b>: 
 <dl><dt>1</dt><dd>same orientation
 <dt>-1</dt><dd>opposite orientation
 </dl>
 </dd>
    <dt><tt> <tt>iTension1</tt></tt>
   <dd> [in] Optional: Standard tension = 1.0; increase this value to straighten the connecting curve.
 </dd>
    <dt><tt> <tt>iTension2</tt></tt>
   <dd> [in] Optional: Standard tension = 1.0; increase this value to straighten the connecting curve.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATISktUse2DConnectCurve','','CATISktUse2DConnectCurve') </script>
</dl>
</dl>
<a name="CreateConstructionCircle"></a><a name="CreateConstructionCircle(double*,double)"></a> <dt> o <b>CreateConstructionCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateConstructionCircle</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D construction circle.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Radius of the circle.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateConstructionLine"></a><a name="CreateConstructionLine(double*,double*)"></a> <dt> o <b>CreateConstructionLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateConstructionLine</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D construction line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D origin point coordinates.
 </dd>
    <dt><tt> <tt>iDirection</tt></tt>
   <dd> [in] 2D direction coordinates (will be normalized).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateContour"></a><a name="CreateContour(CATISktUse2DCurve_var&amp;,CATContourClass,CATAutosearchMode)"></a> <dt> o <b>CreateContour</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateContour</b>(<td> const <script type="text/javascript"> activateLink('CATISktUse2DCurve_var','CATISktUse2DCurve_var&amp;')</script> <td><tt>i2DGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATContourClass','CATContourClass')</script> <td><tt>iClass</tt><td><tt>=ContourClass_Undefined</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATAutosearchMode','CATAutosearchMode')</script> <td><tt>iMode</tt><td><tt>=AutosearchMode_NoMultipleSolutions</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Dedicated to curve connectivity detection using CATIA V4 tolerance.
</dl>
<a name="CreateCorner"></a><a name="CreateCorner(CATISktUse2DCurve*,CATISktUse2DCurve*,double*,double*)"></a> <dt> o <b>CreateCorner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCorner</b>(<td><script type="text/javascript"> activateLink('CATISktUse2DCurve','CATISktUse2DCurve*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATISktUse2DCurve','CATISktUse2DCurve*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iRadius</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a bi-tangent arc.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] First geometric element.
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Second geometric element.
 </dd>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] Indicated 2D point coordinates.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Optional radius of the arc (unspecified by default).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCstPoint"></a><a name="CreateCstPoint(double*,double*,double*)"></a> <dt> o <b>CreateCstPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCstPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iTangent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCurvature</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D control point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D point coordinates.
 </dd>
    <dt><tt> <tt>iTangent</tt></tt>
   <dd> [in] 2D tangent coordinates or NULL.
 </dd>
    <dt><tt> <tt>iCurvature</tt></tt>
   <dd> [in] 2D curvature coordinates or NULL.
 The curvature direction has to be orthogonal to the tangent.
 Radius of curvature is 1/norm(curvature).
 The curvature vector can be (0,0), indicating an infinite radius of curvature (line).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateCubicSplineCurve"></a><a name="CreateCubicSplineCurve(CATLISTV(CATISktUse2DPoint_var)&amp;,int)"></a> <dt> o <b>CreateCubicSplineCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateCubicSplineCurve</b>(<td> const <script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DPoint_var)','CATLISTV(CATISktUse2DPoint_var)&amp;')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D cubic spline curve (degree = 3).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoints</tt></tt>
   <dd> [in] List of spline control points.
 </dd>
    <dt><tt> <tt>iEvaluationType</tt></tt>
   <dd> [in] Evaluation mode (NOT USED).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateEllipse"></a><a name="CreateEllipse(double*,double*,double,double)"></a> <dt> o <b>CreateEllipse</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateEllipse</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iMajorDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iMajorRadius</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iMinorRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D ellipse.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iMajorDirection</tt></tt>
   <dd> [in] 2D major axis direction coordinates.
 </dd>
    <dt><tt> <tt>iMajorRadius</tt></tt>
   <dd> [in] Major semi-axis of the ellipse.
 </dd>
    <dt><tt> <tt>iMinorRadius</tt></tt>
   <dd> [in] Minor semi-axis of the ellipse.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateEllipse"></a><a name="CreateEllipse(double*,double*,double,double,double,double)"></a> <dt> o <b>CreateEllipse</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateEllipse</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iMajorDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iMajorRadius</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iMinorRadius</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D arc of ellipse.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iMajorDirection</tt></tt>
   <dd> [in] 2D major axis direction coordinates.
 </dd>
    <dt><tt> <tt>iMajorRadius</tt></tt>
   <dd> [in] Major semi-axis of the ellipse.
 </dd>
    <dt><tt> <tt>iMinorRadius</tt></tt>
   <dd> [in] Minor semi-axis of the ellipse.
 </dd>
    <dt><tt> <tt>iStartParam</tt></tt>
   <dd> [in] Parameter of the start point (0<=iStartParam<2*PI).
 </dd>
    <dt><tt> <tt>iEndParam</tt></tt>
   <dd> [in] Parameter of the end point (iStartParam<iEndParam<4*PI).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateHyperbola"></a><a name="CreateHyperbola(double*,double*,double,double)"></a> <dt> o <b>CreateHyperbola</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateHyperbola</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D hyperbola.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iAxis</tt></tt>
   <dd> [in] 2D axis direction coordinates.
 </dd>
    <dt><tt> <tt>iRadius1</tt></tt>
   <dd> [in] Radius of the hyperbola.
 </dd>
    <dt><tt> <tt>iRadius2</tt></tt>
   <dd> [in] Imaginary radius of the hyperbola.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateHyperbola"></a><a name="CreateHyperbola(double*,double*,double,double,double,double)"></a> <dt> o <b>CreateHyperbola</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateHyperbola</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D hyperbola.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iAxis</tt></tt>
   <dd> [in] 2D axis direction coordinates.
 </dd>
    <dt><tt> <tt>iRadius1</tt></tt>
   <dd> [in] Radius of the hyperbola.
 </dd>
    <dt><tt> <tt>iRadius2</tt></tt>
   <dd> [in] Imaginary radius of the hyperbola.
 </dd>
    <dt><tt> <tt>iStartParam</tt></tt>
   <dd> [in] Parameter of the start point.
 </dd>
    <dt><tt> <tt>iEndParam</tt></tt>
   <dd> [in] Parameter of the end point.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateLine"></a><a name="CreateLine(double*,double*)"></a> <dt> o <b>CreateLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateLine</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iStartPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iEndPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iStartPoint</tt></tt>
   <dd> [in] 2D start point coordinates.
 </dd>
    <dt><tt> <tt>iEndPoint</tt></tt>
   <dd> [in] 2D end point coordinates.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateLine"></a><a name="CreateLine(double*,double*,double,double)"></a> <dt> o <b>CreateLine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateLine</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D origin point coordinates.
 </dd>
    <dt><tt> <tt>iDirection</tt></tt>
   <dd> [in] 2D direction coordinates (will be normalized).
 </dd>
    <dt><tt> <tt>iStartParam</tt></tt>
   <dd> [in] Parameter of the start point (iPoint + iStartParam * iDirection).
 </dd>
    <dt><tt> <tt>iEndParam</tt></tt>
   <dd> [in] Parameter of the end point (iPoint + iEndParam * iDirection).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateOffsetCurve"></a><a name="CreateOffsetCurve(int,CATBaseUnknown*,double)"></a> <dt> o <b>CreateOffsetCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateOffsetCurve</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCornerType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iRefGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D offset curve of a 2D curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCornerType</tt></tt>
   <dd> [in] Corner computation mode.
 </dd>
    <dt><tt> <tt>iRefGeom</tt></tt>
   <dd> [in] Offseted curve.
 </dd>
    <dt><tt> <tt>iValue</tt></tt>
   <dd> [in] Signed offset value.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateOutput"></a><a name="CreateOutput(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"></a> <dt> o <b>CreateOutput</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateOutput</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oOutput</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D Output Geometry from 2D Geometry.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] 2D Geometry of the current sketch.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oOutput</tt></tt>
   <dd> [out] Pointer to the created Output Geometry</dd>
</dl>
</dl>
</dl>
<a name="CreateOutputAxis"></a><a name="CreateOutputAxis(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"></a> <dt> o <b>CreateOutputAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateOutputAxis</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oOutput</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D Output axis Geometry from 2D point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] 2D Geometry of the current sketch.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oOutput</tt></tt>
   <dd> [out] Pointer to the created Output Geometry</dd>
</dl>
</dl>
</dl>
<a name="CreateOutputPlane"></a><a name="CreateOutputPlane(CATBaseUnknown*,IID&amp;,CATBaseUnknown**)"></a> <dt> o <b>CreateOutputPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateOutputPlane</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oOutput</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D Output plane from 2D line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] 2D Geometry of the current sketch.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oOutput</tt></tt>
   <dd> [out] Pointer to the created Output Geometry</dd>
</dl>
</dl>
</dl>
<a name="CreateOutputProfile"></a><a name="CreateOutputProfile(CATLISTV(CATBaseUnknown_var)&amp;,IID&amp;,CATBaseUnknown**)"></a> <dt> o <b>CreateOutputProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateOutputProfile</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)&amp;')</script> <td><tt>i2DGeoms</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oOutput</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D Output Profile from 2D Geometries.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>io2DGeoms</tt></tt>
   <dd> [in/out] The set of geometries that defines the profile domain.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oOutput</tt></tt>
   <dd> [out] Pointer to the created Output Profile</dd>
</dl>
</dl>
</dl>
<a name="CreateParabola"></a><a name="CreateParabola(double*,double*,double)"></a> <dt> o <b>CreateParabola</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateParabola</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFocalDistance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D parabola.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iAxis</tt></tt>
   <dd> [in] 2D axis direction coordinates.
 </dd>
    <dt><tt> <tt>iFocalDistance</tt></tt>
   <dd> [in] Focal distance of the parabola.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateParabola"></a><a name="CreateParabola(double*,double*,double,double,double)"></a> <dt> o <b>CreateParabola</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateParabola</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFocalDistance</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D parabola.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D center point coordinates.
 </dd>
    <dt><tt> <tt>iAxis</tt></tt>
   <dd> [in] 2D axis direction coordinates.
 </dd>
    <dt><tt> <tt>iFocalDistance</tt></tt>
   <dd> [in] Focal distance of the parabola.
 </dd>
    <dt><tt> <tt>iStartParam</tt></tt>
   <dd> [in] Parameter of the start point.
 </dd>
    <dt><tt> <tt>iEndParam</tt></tt>
   <dd> [in] Parameter of the end point.
 </dd>
</dl>
</dl>
</dl>
<a name="CreatePoint"></a><a name="CreatePoint(double*)"></a> <dt> o <b>CreatePoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreatePoint</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] 2D point coordinates.
 </dd>
</dl>
</dl>
</dl>
<a name="CreatePolyline"></a><a name="CreatePolyline(unsigned long,double*,boolean)"></a> <dt> o <b>CreatePolyline</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreatePolyline</b>(<td> const <script type="text/javascript"> activateLink('unsigned long','unsigned long')</script> <td><tt>nPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>pPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>isClosed</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D polyline.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>nPoints</tt></tt>
   <dd> [in] number of 2D points.
 </dd>
    <dt><tt> <tt>pPoints</tt></tt>
   <dd> [in] 2D point coordinates.
 </dd>
    <dt><tt> <tt>isClosed</tt></tt>
   <dd> [in] if TRUE, an additional arc will be created between the last and the first points to close the polyline curve.
 </dd>
</dl>
</dl>
</dl>
<a name="CreateSplineCurve"></a><a name="CreateSplineCurve(CATLISTV(CATISktUse2DPoint_var)&amp;,int)"></a> <dt> o <b>CreateSplineCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateSplineCurve</b>(<td> const <script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DPoint_var)','CATLISTV(CATISktUse2DPoint_var)&amp;')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iEvaluationType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2D quintic spline curve (degree = 5).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoints</tt></tt>
   <dd> [in] List of spline control points.
 </dd>
    <dt><tt> <tt>iEvaluationType</tt></tt>
   <dd> [in] Evaluation mode (NOT USED).
 </dd>
</dl>
</dl>
</dl>
<a name="CreateUnspec"></a><a name="CreateUnspec(CATCurve_var&amp;)"></a> <dt> o <b>CreateUnspec</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>CreateUnspec</b>(<td> const <script type="text/javascript"> activateLink('CATCurve_var','CATCurve_var&amp;')</script> <td><tt>iCurve</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a curve from a CATPCurve object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] CATPCurve (also a CATCurve) to create.
 </dd>
</dl>
</dl>
</dl>
<a name="Duplicate"></a><a name="Duplicate(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,CATMathTransformation2D&amp;)"></a> <dt> o <b>Duplicate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)')</script>  <b>Duplicate</b>(<td> const <script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)&amp;')</script> <td><tt>iGeoms</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathTransformation2D','CATMathTransformation2D&amp;')</script> <td><tt>ioTransfo</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Duplicates a set of 2D geometries and applies a transformation to the result.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeoms</tt></tt>
   <dd> [in] List of geometric elements to duplicate.
 </dd>
    <dt><tt> <tt>ioTransfo</tt></tt>
   <dd> [inout] 2D transformation to apply to the duplicated elements.
 </dd>
</dl>
</dl>
</dl>
<a name="FixTogether"></a><a name="FixTogether(CATLISTV(CATISktUse2DWFGeometry_var)&amp;,IID&amp;,CATBaseUnknown**,int)"></a> <dt> o <b>FixTogether</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>FixTogether</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)&amp;')</script> <td><tt>io2DGeoms</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oFixTogether</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAddFamily</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a Fix Together Constraint (rigid set) of 2D Geometries.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>io2DGeoms</tt></tt>
   <dd> [in/out] The set of geometries on which the Fix Together must be created.
 The list of geometries with/without dependencies is returned after creation.
 </dd>
    <dt><tt> <tt>iIID</tt></tt>
   <dd> [in] Interface identifier for which a pointer is requested.
 </dd>
    <dt><tt> <tt>oFixTogether</tt></tt>
   <dd> [out] Pointer to the created Fix Together Constraint.
 </dd>
    <dt><tt> <tt>iAddFamily</tt></tt>
   <dd> [in] Optional: Dependencies management.
 <br><b>Legal values</b>: 
 <dt>0</dt><dd>Not management of dependencies
 <dt><1</dt><dd>default value: the geometries will be added with their dependencies 
 </dl>
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATISktUse2DFixTogether','','CATISktUse2DFixTogether') </script>
</dl>
</dl>
<a name="IntersectGeometry"></a><a name="IntersectGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)"></a> <dt> o <b>IntersectGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>IntersectGeometry</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iGeom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)&amp;')</script> <td><tt>oGeoms</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPhantom</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iNearGeom</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSel2DPt</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDatum</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCanonic</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Intersects 3D or 2D external geometry.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] External geometric element to intersect with the sketch plane.
 </dd>
    <dt><tt> <tt>oGeoms</tt></tt>
   <dd> [out] List of handlers on the created objects.
 </dd>
    <dt><tt> <tt>iPhantom</tt></tt>
   <dd> [in] Creation mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The geometric elements are created in phantom mode (invisible).
 <dt> <tt>0</tt>  <dd> The geometric elements are created in standard mode (visible).
 </dl>
 </dd>
    <dt><tt> <tt>iNearGeom</tt></tt>
   <dd> [in] Optional external geometric element to keep the nearest solution.
 </dd>
    <dt><tt> <tt>iSel2DPt</tt></tt>
   <dd> [in] Optional 2D point coordinates to keep only the nearest solution
 for a canonical surface projection.
 </dd>
    <dt><tt> <tt>iDatum</tt></tt>
   <dd> [in] Datum mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The generated geometric elements are not associative.
 <dt> <tt>0</tt>  <dd> The generated geometric elements are associative.
 </dl>
 </dd>
    <dt><tt> <tt>iCanonic</tt></tt>
   <dd> [in] To manage canonicity.
 <dl>
 <dt> <tt>1</tt>  <dd> If possible the final geometry will be canonical.
 <dt> <tt>0</tt>  <dd> No canonicity management.
 </dl>
 </dd>
</dl>
</dl>
</dl>
<a name="OffsetGeometry"></a><a name="OffsetGeometry(int,CATBaseUnknown*,double,int,CATBaseUnknown*,double*,int,int)"></a> <dt> o <b>OffsetGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>OffsetGeometry</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCornerType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iRefGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPropagType</tt><td><tt>=OffsetPropagType_None</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iInitGeom</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iInitPt</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOperMode</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCanonical</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Offsets 3D geometry.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCornerType</tt></tt>
   <dd> [in] Corner computation mode.
 </dd>
    <dt><tt> <tt>iRefGeom</tt></tt>
   <dd> [in] External geometric element.
 </dd>
    <dt><tt> <tt>iValue</tt></tt>
   <dd> [in] Signed offset value.
 </dd>
    <dt><tt> <tt>iPropagType</tt></tt>
   <dd> [in] Optional propagation mode. See CAT2DOffsetDefs.
 </dd>
    <dt><tt> <tt>iInitGeom</tt></tt>
   <dd> [in] Optional external geometric element to keep the nearest solution.
 </dd>
    <dt><tt> <tt>iIniPt</tt></tt>
   <dd> [in] Optional 2D point coordinates to keep the nearest solution.
 </dd>
</dl>
    <dt><tt> <tt>iCanonic</tt></tt>
   <dd> [in] To manage canonicity.</dd>
</dl>
</dl>
<a name="ProjectGeometry"></a><a name="ProjectGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int,int)"></a> <dt> o <b>ProjectGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>ProjectGeometry</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iGeom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)&amp;')</script> <td><tt>oGeoms</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPhantom</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iNearGeom</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSel2DPt</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDatum</tt><td><tt>=0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCanonic</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Projects 3D or 2D external geometry on a sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] External geometric element to project on the sketch plane.
 </dd>
    <dt><tt> <tt>oGeoms</tt></tt>
   <dd> [out] List of handlers on the created objects.
 </dd>
    <dt><tt> <tt>iPhantom</tt></tt>
   <dd> [in] Creation mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The geometric elements are created in phantom mode (invisible).
 <dt> <tt>0</tt>  <dd> The geometric elements are created in standard mode (visible).
 </dl>
 </dd>
    <dt><tt> <tt>iNearGeom</tt></tt>
   <dd> [in] Optional external geometric element to keep the nearest solution.
 </dd>
    <dt><tt> <tt>iSel2DPt</tt></tt>
   <dd> [in] Optional 2D point coordinates to keep only the nearest solution
 for a canonical surface projection.
 </dd>
    <dt><tt> <tt>iDatum</tt></tt>
   <dd> [in] Datum mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The generated geometric elements are not associative.
 <dt> <tt>0</tt>  <dd> The generated geometric elements are associative.
 </dl>
 </dd>
    <dt><tt> <tt>iCanonic</tt></tt>
   <dd> [in] To manage canonicity.
 <dl>
 <dt> <tt>1</tt>  <dd> If possible the final geometry will be canonical.
 <dt> <tt>0</tt>  <dd> No canonicity management.
 </dl>
 </dd>
</dl>
</dl>
</dl>
<a name="SilhouetteGeometry"></a><a name="SilhouetteGeometry(CATBaseUnknown_var&amp;,CATLISTV(CATISktUse2DWFGeometry_var)&amp;,int,CATBaseUnknown*,double*,int)"></a> <dt> o <b>SilhouetteGeometry</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIMmiMechanicalFeature','CATIMmiMechanicalFeature_var')</script>  <b>SilhouetteGeometry</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iGeom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISktUse2DWFGeometry_var)','CATLISTV(CATISktUse2DWFGeometry_var)&amp;')</script> <td><tt>oGeoms</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPhantom</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iNearGeom</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSel2DPt</tt><td><tt>=NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDatum</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the silhouette of a surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] External geometric element
 </dd>
    <dt><tt> <tt>oGeoms</tt></tt>
   <dd> [out] List of handlers on the created objects.
 </dd>
    <dt><tt> <tt>iPhantom</tt></tt>
   <dd> [in] Creation mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The geometric elements are created in phantom mode (invisible).
 <dt> <tt>0</tt>  <dd> The geometric elements are created in standard mode (visible).
 </dl>
 </dd>
    <dt><tt> <tt>iNearGeom</tt></tt>
   <dd> [in] Optional external geometric element to keep the nearest solution.
 </dd>
    <dt><tt> <tt>iSel2DPt</tt></tt>
   <dd> [in] Optional 2D point coordinates to keep only the nearest solution
 </dd>
    <dt><tt> <tt>iDatum</tt></tt>
   <dd> [in] Datum mode.
 <dl>
 <dt> <tt>1</tt>  <dd> The generated geometric elements are not associative.
 <dt> <tt>0</tt>  <dd> The generated geometric elements are associative.
 </dl>
 </dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATISktUse2DWFFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

