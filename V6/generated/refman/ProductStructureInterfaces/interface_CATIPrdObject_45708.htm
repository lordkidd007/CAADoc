<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ProductStructureInterfaces Interface CATIPrdObject</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../ProductStructureInterfaces.htm" href="../ProductStructureInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "ProductStructureInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIPrdObject"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>ProductStructureInterfaces Interface CATIPrdObject</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPrdObject_45708','CATIPrdObject','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPrdObject</b>
</p>
<p>
<b><i> Interface to navigate on PLM typed features.</i></b><br>

 <br><b>Role</b>: This interface enables to navigate on PLM features in Instance<->Reference and Children to Parent 
 directions.
	<br>It is implemented by following PLM features :
 <ul>
	<li>Product Instance & Product Reference</li>
	<li>Representation Instance</li>
	<li>Port</li>
	<li>Connection Instance & Connection Reference</li>
 </ul>
	However, for many of these features, some of these interface methods have no sense. Check the detailed return codes
	documentation.
	<br>Refer to the Product Model technical article in the documentation for graphical explanations and definition of
 used concepts such as <b>context</b>, <b>searching direction</b>, <b>instance/reference</b>, <b>parent/child</b>.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#FindInstance(CATIPrdObject*,CATBaseUnknown*&amp;,IID&amp;)"><b>FindInstance</b></a>(CATIPrdObject*,CATBaseUnknown*&amp;,IID&amp;)
<dd>    Retrieves a Product under a given context in the Instance to Reference direction.
 <dt> o 
    <a href="#GetAllInstances(CATIPrdIterator*&amp;,IID&amp;)"><b>GetAllInstances</b></a>(CATIPrdIterator*&amp;,IID&amp;)
<dd>    Retrieves all the Product Instances.
 <dt> o 
    <a href="#GetAllInstancesInContexts(CATListValCATBaseUnknown_var*,CATIPrdIterator*&amp;,IID&amp;)"><b>GetAllInstancesInContexts</b></a>(CATListValCATBaseUnknown_var*,CATIPrdIterator*&amp;,IID&amp;)
<dd>    Retrieves all the Product Instances under a list of given contexts.
 <dt> o 
    <a href="#GetFatherProduct(CATBaseUnknown*&amp;,IID&amp;)"><b>GetFatherProduct</b></a>(CATBaseUnknown*&amp;,IID&amp;)
<dd>    Retrieves the parent Product.
 <dt> o 
    <a href="#GetInstances(CATIPrdIterator*&amp;,IID&amp;)"><b>GetInstances</b></a>(CATIPrdIterator*&amp;,IID&amp;)
<dd>    Retrieves the Product Instances located in the Reference to Instance path.
 <dt> o 
    <a href="#GetReferenceObject(CATBaseUnknown*&amp;,IID&amp;)"><b>GetReferenceObject</b></a>(CATBaseUnknown*&amp;,IID&amp;)
<dd>    Retrieves the Reference object.
 <dt> o 
    <a href="#GetRootFather(CATBaseUnknown*&amp;,IID&amp;)"><b>GetRootFather</b></a>(CATBaseUnknown*&amp;,IID&amp;)
<dd>    Retrieves the Root parent Product.
 <dt> o 
    <a href="#IsAnInstanceOf(CATIPrdObject*)"><b>IsAnInstanceOf</b></a>(CATIPrdObject*)
<dd>    Checks whether the current Product is an instance of another given Product.
 <dt> o 
    <a href="#IsReference()"><b>IsReference</b></a>()
<dd>    Checks whether the current object is a Reference object.
 <dt> o 
    <a href="#IsRoot()"><b>IsRoot</b></a>()
<dd>    Checks whether the current object is a Root object.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="FindInstance"></a><a name="FindInstance(CATIPrdObject*,CATBaseUnknown*&amp;,IID&amp;)"></a> <dt> o <b>FindInstance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>FindInstance</b>(<td><script type="text/javascript"> activateLink('CATIPrdObject','CATIPrdObject*')</script> <td><tt>iContext</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>oInstance</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves a Product under a given context in the Instance to Reference direction.
   <br><b>Role</b>: This method searches the Product Instance of <tt>this</tt>'s Reference Product aggregated under
		a given context. The search starts from <tt>this</tt> Product among Products on the same Instance to Reference path,
		in the Instance to Reference direction.
		<br>This means the context should match detailed location conditions, unless the method would fail in indetermination
		case.
		<br>See the Product Model technical article for detailed and graphical documentation.
		<br>This method can be called either on a Product Reference or on a Product Instance, but it is not implemented
		for any other kind of feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iContext</tt>
   <dd>      The Product which should be a parent of the searched Product.
			 <br>The method will fail in indetermination case if the context is not located in the right searching direction:
			 <ul>
				<li>if it belongs to the children of <tt>this</tt>'s Product Reference or Product Instances.</li>
				<li>if it belongs to <tt>this</tt>'s parents's Product Instances located on the Reference to Instance path.</li>
			 </ul>
			 <br>It can be either a Reference Product or an Instance Product.
   </dd>
    <dt><tt> oInstance</tt>
   <dd> [out, CATBaseUnknown#Release]      The searched Product under the given context, in the right direction.
			 <br>It can be, in particular cases:
			 <ul>
				<li>the context itself if <tt>iContext</tt> is one of <tt>this</tt>'s Product Instances located on the 
				Instance to Reference path.</li>
				<li><tt>this</tt> itself if <tt>iContext</tt> is one of <tt>this</tt>'s parents,
				or if <tt>iContext</tt> is equal to <tt>this</tt>.</li>
				<li><tt>this</tt>'s Product Reference if <tt>iContext</tt> is equal to <tt>this</tt>'s Product Reference,
				or if <tt>this</tt> is itself a Product Reference.</li>
			 </ul>
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the returned object. 
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
			 </dd>
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">			<br>For example :
			<pre>CATIPrdObject * pCurrentObject = ... ;
CATIPrdObject * pContext = ...;
CATBaseUnknown * pSearchedInstance = NULL;
if (SUCCEEDED(pCurrentObject->FindInstance(pContext, pSearchedInstance, IID_CATIMyInterface )))
{
	CATIMyInterface * pMyInterfaceOnSearchedInstance = (CATIMyInterface *) pSearchedInstance;
	...
	pSearchedInstance->Release(); pSearchedInstance = NULL;
}</pre>
   </pre></dd>
  <dt> <b>Returns:</b> 
  <dd> 			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The searched Product was successfully found.</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd><tt>iContext</tt> is not a valid pointer.</dd>
     <dt><tt>E_NOTIMPL </tt></dt>
     <dd><tt>this</tt> is neither a Product Reference nor a Product Instance.</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>No Product was founded in the given context or in case of undetermination.</dd>
			</dl>
</dl>
</dl>
<a name="GetAllInstances"></a><a name="GetAllInstances(CATIPrdIterator*&amp;,IID&amp;)"></a> <dt> o <b>GetAllInstances</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllInstances</b>(<td><script type="text/javascript"> activateLink('CATIPrdIterator','CATIPrdIterator*&amp;')</script> <td><tt>oInstances</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves all the Product Instances.
   <br><b>Role</b>: This method creates an iterator managing all the Product Instances of <tt>this</tt>'s Reference
		Product.
		<br>See the Product Model technical article for detailed and graphical documentation.
		<br>This method can be called either on a Product Reference or on a Product Instance, but it is not implemented
		by any other kind of feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oInstances</tt>
   <dd> [out, CATBaseUnknown#Release]      The iterator managing all the Product Instances. Use its </dd>
<script type="text/javascript"> activateLinkAnchor('CATIPrdIterator','Next','CATIPrdIterator.Next') </script> method to iterate on			 the instances.
   
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the objects managed by <tt>oInstances</tt> iterator. 
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
			 <br>For example :
			<pre>CATIPrdObject * pCurrentObject = ... ;
CATIPrdIterator * pIterator = NULL;
if (SUCCEEDED(pCurrentObject->GetAllInstances(pIterator, IID_CATIMyInterface )))
{
	CATIMyInterface * pMyInterfaceOnInstance = NULL;
	while (SUCCEEDED(pIterator->Next(pMyInterfaceOnInstance)))
	{
		...
		pMyInterfaceOnInstance->Release(); pMyInterfaceOnInstance = NULL;
	}
	pIterator->Release(); pIterator = NULL;
}</pre>
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The iterator was successfully created.</dd>
     <dt><tt>E_NOTIMPL </tt></dt>
     <dd><tt>this</tt> is neither a Product Reference nor a Product Instance.</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>The iterator creation failed.</dd>
   </dl>
</dl>
</dl>
<a name="GetAllInstancesInContexts"></a><a name="GetAllInstancesInContexts(CATListValCATBaseUnknown_var*,CATIPrdIterator*&amp;,IID&amp;)"></a> <dt> o <b>GetAllInstancesInContexts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAllInstancesInContexts</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var*')</script> <td><tt>iContexts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPrdIterator','CATIPrdIterator*&amp;')</script> <td><tt>oInstances</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves all the Product Instances under a list of given contexts.
   <br><b>Role</b>: This method creates an iterator managing all Product Instances of <tt>this</tt>'s Product Reference.
		Each of these Product Instance is aggregated by one of the given context.
		<br>See the Product Model technical article for detailed and graphical documentation.
		<br>This method can be called either on a Product Reference or on a Product Instance, but it is not implemented
		for any other kind of feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iContexts</tt>
   <dd>      The list of contexts.
			 <br>Each context can be a Product Reference or a Product Instance.
   </dd>
    <dt><tt> oInstances</tt>
   <dd> [out, CATBaseUnknown#Release]      The iterator that owns the Product Instances. Use its </dd>
<script type="text/javascript"> activateLinkAnchor('CATIPrdIterator','Next','CATIPrdIterator.Next') </script> method to iterate on the instances.   
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the objects managed by the iterator.
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
		<br>See </dd>
<script type="text/javascript"> activateLinkAnchor('','GetAllInstances','GetAllInstances') </script> for an example of use.   
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The iterator was successfully created.</dd>
     <dt>E_INVALIDARG </dt>
     <dd>The given contexts set is invalid.</dd>
     <dt><tt>E_NOTIMPL </tt></dt>
     <dd><tt>this</tt> is neither a Product Reference nor a Product Instance.</dd>
     <dt><tt>E_FAIL</tt> </dt>
     <dd>The iterator creation failed.</dd>
   </dl>
</dl>
</dl>
</dl>
<a name="GetFatherProduct"></a><a name="GetFatherProduct(CATBaseUnknown*&amp;,IID&amp;)"></a> <dt> o <b>GetFatherProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFatherProduct</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>oProduct</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves the parent Product.
   <br><b>Role</b>: This method retrieves the aggregating Product of <tt>this</tt> object.
		<br>It can be called either on a Reference object or an Instance.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd> [out, CATBaseUnknown#Release]      The parent Product.
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the returned object.
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default)
		<br>See </dd>
<script type="text/javascript"> activateLinkAnchor('','FindInstance','FindInstance') </script> for an example of use.   
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The parent Product was successfully retrieved.</dd>
     <dt><tt>E_FAIL</tt> </dt>
     <dd>The calling object does not have any parent Product or an unexpected error occured.</dd>
   </dl>
</dl>
</dl>
</dl>
<a name="GetInstances"></a><a name="GetInstances(CATIPrdIterator*&amp;,IID&amp;)"></a> <dt> o <b>GetInstances</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInstances</b>(<td><script type="text/javascript"> activateLink('CATIPrdIterator','CATIPrdIterator*&amp;')</script> <td><tt>oInstances</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves the Product Instances located in the Reference to Instance path.
   <br><b>Role</b>: This method creates an iterator managing the Product Instances located from <tt>this</tt> on the
		Reference to Instance path.
		<br>See the Product Model technical article for detailed and graphical documentation.
		<br>This method can be called either on a Product Reference or on a Product Instance, but it is not implemented
		for any other kind of feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oInstances</tt>
   <dd> [out, CATBaseUnknown#Release]      The iterator managing the searched Product Instances. Use its </dd>
<script type="text/javascript"> activateLinkAnchor('CATIPrdIterator','Next','CATIPrdIterator.Next') </script> method to iterate on the instances.   
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the objects managed by <tt>oInstances</tt> iterator. 
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
		<br>See </dd>
<script type="text/javascript"> activateLinkAnchor('','GetAllInstances','GetAllInstances') </script> for an example of use.   
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The iterator was successfully created.</dd>
     <dt><tt>E_NOTIMPL </tt></dt>
     <dd><tt>this</tt> is neither a Product Reference nor a Product Instance.</dd>
     <dt><tt>E_FAIL</tt> </dt>
     <dd>The iterator creation failed.</dd>
   </dl>
</dl>
</dl>
</dl>
<a name="GetReferenceObject"></a><a name="GetReferenceObject(CATBaseUnknown*&amp;,IID&amp;)"></a> <dt> o <b>GetReferenceObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferenceObject</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>oReference</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves the Reference object.
   <br><b>Role</b>: This method retrieves the Reference object of <tt>this</tt> object.
		<br>When called on a Reference object, it successfully retrieves itself.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oReference</tt>
   <dd> [out, CATBaseUnknown#Release]      The Reference object.
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the returned object. 
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
		<br>See </dd>
<script type="text/javascript"> activateLinkAnchor('','FindInstance','FindInstance') </script> for an example of use.   
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Reference object was successfully retrieved.</dd>
     <dt><tt>E_FAIL</tt> </dt>
     <dd>The Reference object was not successfully retrieved.</dd>
   </dl>
</dl>
</dl>
</dl>
<a name="GetRootFather"></a><a name="GetRootFather(CATBaseUnknown*&amp;,IID&amp;)"></a> <dt> o <b>GetRootFather</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRootFather</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>oProduct</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves the Root parent Product.
   <br><b>Role</b>: This method retrieves the topmost aggregating Product of <tt>this</tt> object.
		<br>It can be called either on a Reference object or an Instance.
		<br>Particular case: when it is called on a Representation Instance, this method does the same as 
<script type="text/javascript"> activateLinkAnchor('','GetFatherProduct','GetFatherProduct') </script>   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd> [out, CATBaseUnknown#Release]      The searched Root parent Product.
			<br>It will be <tt>this</tt> itself if <tt>this</tt> is not aggregated (if <tt>this</tt> is 
			a Product Reference for example)
			<br>It is equal to the parent Product when the method is called on a Representation Instance.
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the returned object. 
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
		<br>See </dd>
<script type="text/javascript"> activateLinkAnchor('','FindInstance','FindInstance') </script> for an example of use.   
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Root Product was successfully retrieved.</dd>
     <dt><tt>E_FAIL</tt> </dt>
     <dd>The Root Product was not successfully retrieved.</dd>
   </dl>
</dl>
</dl>
</dl>
<a name="IsAnInstanceOf"></a><a name="IsAnInstanceOf(CATIPrdObject*)"></a> <dt> o <b>IsAnInstanceOf</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsAnInstanceOf</b>(<td><script type="text/javascript"> activateLink('CATIPrdObject','CATIPrdObject*')</script> <td><tt>ipObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Checks whether the current Product is an instance of another given Product.
   <br><b>Role</b>: This method browses the Reference to Instance path, starting from the given Product and searches 
		for <tt>this</tt> Product.
		<br>This method can be called either on a Product Reference or on a Product Instance, but it is not implemented
		by any other kind of feature.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipObject</tt>
   <dd>      The given Product.<br>It can be a Product Instance or a Product Reference.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     A logical value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>TRUE</tt></dt>
     <dd><tt>this</tt> is an instance of <tt>ipObject</tt>.</dd>
     <dt><tt>FALSE</tt></dt>
     <dd>Either <tt>this</tt> is not an instance of <tt>ipObject</tt> or <tt>this</tt> is neither a Product Instance nor a Product Reference.</dd>
   </dl>
</dl>
</dl>
<a name="IsReference"></a><a name="IsReference()"></a> <dt> o <b>IsReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsReference</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
   Checks whether the current object is a Reference object.
   <br><b>Role</b>: This method checks if <tt>this</tt> is a Reference object.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A logical value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>TRUE</tt></dt>
     <dd>The current object is a Reference object (can only be a VPMReference)</dd>
     <dt><tt>FALSE</tt></dt>
     <dd>The current object is not a Reference object.</dd>
   </dl>
</dl>
</dl>
<a name="IsRoot"></a><a name="IsRoot()"></a> <dt> o <b>IsRoot</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsRoot</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
   Checks whether the current object is a Root object.
   <br><b>Role</b>: This method checks if <tt>this</tt> is a Root object.
	<br> On a Root object, <tt>GetFatherProduct</tt> does not return any father, and <tt>GetRootFather</tt> return <tt>this</tt>.
		
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>    A logical value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>TRUE</tt></dt>
     <dd>VPMReference, VPMRootOccurrence and multi-instantiable VPMRepReference are Root object</dd>
     <dt><tt>FALSE</tt></dt>
     <dd>VPMInstance, VPMPort, VPMRepInstance, VPMOccurrence, mono-instantiable VPMRepReference are NOT Root object.</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPrdObject.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATProductStructureInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

