<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ProductStructureInterfaces Interface CATIPLMProducts</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../ProductStructureInterfaces.htm" href="../ProductStructureInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "ProductStructureInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATIPLMProducts"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>ProductStructureInterfaces Interface CATIPLMProducts</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPLMProducts_48662','CATIPLMProducts','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPLMProducts</b>
</p>
<p>
<b><i> Interface to navigate and modify the Product Structure model.</i></b><br>

 <br><b>Role</b>: It enables to navigate on model in the "Ancestor->Children" direction.
 It also enables to build and modify a Product Structure by adding one or several Products,
 removing or replacing Product Instances.
 <br> This interface manages either Product Instance or Product Reference.
 Each method documentation specifies its own product requirement.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddProduct(CATIPLMProducts*,CATBaseUnknown*&amp;,IID&amp;,CATPrdEditionParameters*)"><b>AddProduct</b></a>(CATIPLMProducts*,CATBaseUnknown*&amp;,IID&amp;,CATPrdEditionParameters*)
<dd>    Adds a Product to a Product Reference.
 <dt> o 
    <a href="#AddProducts(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;,CATPrdEditionParameters*)"><b>AddProducts</b></a>(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;,CATPrdEditionParameters*)
<dd>    Adds a list of Products to a Product Reference.
 <dt> o 
    <a href="#Count(int&amp;)"><b>Count</b></a>(int&amp;)
<dd>    Retrieves the <b>direct</b> children count.
 <dt> o 
    <a href="#GetProductByName(CATUnicodeString&amp;,CATIPLMProducts*&amp;)"><b>GetProductByName</b></a>(CATUnicodeString&amp;,CATIPLMProducts*&amp;)
<dd>    Retrieves a Product Instance from its name.
 <dt> o 
    <a href="#Iterator(CATIPrdIterator*&amp;,IID&amp;,CATBoolean)"><b>Iterator</b></a>(CATIPrdIterator*&amp;,IID&amp;,CATBoolean)
<dd>    Creates an iterator to navigate on <b>direct</b> children.
 <dt> o 
    <a href="#RemoveProduct(CATIPLMProducts*,CATPrdEditionParameters*)"><b>RemoveProduct</b></a>(CATIPLMProducts*,CATPrdEditionParameters*)
<dd>    Removes a Product Instance.
 <dt> o 
    <a href="#RemoveProductByName(CATUnicodeString&amp;,CATPrdEditionParameters*)"><b>RemoveProductByName</b></a>(CATUnicodeString&amp;,CATPrdEditionParameters*)
<dd>    Removes a Product Instance from its name.
 <dt> o 
    <a href="#ReplaceProduct(CATIPLMProducts*,CATIPLMProducts*,CATBoolean,CATIPLMProducts*&amp;,CATPrdEditionParameters*)"><b>ReplaceProduct</b></a>(CATIPLMProducts*,CATIPLMProducts*,CATBoolean,CATIPLMProducts*&amp;,CATPrdEditionParameters*)
<dd>    Replaces a given Product Instance with another one.
 <dt> o 
    <a href="#VisitChildren(CATIVisitor*)"><b>VisitChildren</b></a>(CATIVisitor*)
<dd>    Visits <b>direct</b> children.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddProduct"></a><a name="AddProduct(CATIPLMProducts*,CATBaseUnknown*&amp;,IID&amp;,CATPrdEditionParameters*)"></a> <dt> o <b>AddProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*')</script> <td><tt>ipReference</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*&amp;')</script> <td><tt>opInstance</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPrdEditionParameters','CATPrdEditionParameters*')</script> <td><tt>iParameters</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Adds a Product to a Product Reference.
		<br><b>Role</b>: This method instanciates the given Product Reference and aggregates the newly created instance
		under the calling Product (<tt>this</tt>). 
		PLM Attributes of created instance are initialized using Business Logic "IdentificationInitialization".    
		<br>This method must be only called on a Product Reference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipReference</tt>
   <dd>      The Product Reference to be instanciated.
   </dd>
    <dt><tt> opInstance</tt>
   <dd> [out, CATBaseUnknown#Release]      The newly created and aggregated Product Instance.
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the returned object.
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_CATIPrdObject by default) 
			 <br>For example :
			<pre>CATIPLMProducts * ipSubProductRef = ... ;
CATBaseUnknown * pNewInstance = NULL;
if (SUCCEEDED(pRefTarget->AddProduct(ipSubProductRef, pNewInstance, IID_CATIMyInterface )))
{
	CATIMyInterface * pMyInterfaceOnNewInstance = (CATIMyInterface *) pNewInstance;
	...
	pNewInstance->Release(); pNewInstance = NULL;
}</pre>
   </dd>
    <dt><tt> iParameters</tt>
   <dd>      Reserved for future use, must be specified as NULL.
      <!--A set of parameters to be applied on the created product instance.<br> 
      For example, we may apply effectivity parameter, maturity parameter, etc.-->
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT value. 
   <br><b>Legal values</b>:
   <dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product Reference was successfully added and the interface pointer is successfully returned</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd>Either <tt>ipReference</tt> or <tt>this</tt> is not a Product Reference</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>The Product Reference was not successfully added</dd>
   </dl>
</dl>
</dl>
<a name="AddProducts"></a><a name="AddProducts(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;,CATPrdEditionParameters*)"></a> <dt> o <b>AddProducts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddProducts</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>ispReferences</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oAddedInstancesList</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPrdEditionParameters','CATPrdEditionParameters*')</script> <td><tt>iParameters</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Adds a list of Products to a Product Reference.
		<br><b>Role</b>: This method instanciates each Product Reference and aggregates these newly created instances
		under <tt>this</tt>. 
   PLM Attributes of each created instance are initialized using Business Logic "IdentificationInitialization".    
		<br>This method must be called on a Product Reference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ispReferences</tt>
   <dd>      The list of Product References to be instanciated.
   </dd>
    <dt><tt> oAddedInstancesList</tt>
   <dd>      The set of newly created and aggregated instances.
   </dd>
    <dt><tt> iParameters</tt>
   <dd>      Reserved for future use, must be specified as NULL.
      <!--A set of parameters to be applied on the created product instance.<br> 
      For example, we may apply effectivity parameter, maturity parameter, etc.-->
	</dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product References were successfully added</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd>Either at least one element of <tt>ispReferences</tt> or <tt>this</tt> is not a Product Reference</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>All Product References were not successfully added</dd>
   </dl>
</dl>
</dl>
<a name="Count"></a><a name="Count(int&amp;)"></a> <dt> o <b>Count</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Count</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbChildren</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves the <b>direct</b> children count.
   <br><b>Role</b>: This method retrieves the direct children count either of a Reference or an Instance Product.
		<br>To retrieve these children themselves, use the 
<script type="text/javascript"> activateLinkAnchor('','Iterator','Iterator') </script> method.   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbChildren</tt>
   <dd>      The count of direct children.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The count was successfully retrieved</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>Otherwise</dd>
   </dl>
</dl>
</dl>
<a name="GetProductByName"></a><a name="GetProductByName(CATUnicodeString&amp;,CATIPLMProducts*&amp;)"></a> <dt> o <b>GetProductByName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProductByName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iInstanceName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*&amp;')</script> <td><tt>opInstance</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Retrieves a Product Instance from its name.
   <br><b>Role</b>: This method performs a search through the <b>direct</b> children of <tt>this</tt>.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInstanceName</tt>
   <dd>       The name of the Product Instance to retrieve.<br>
			 This name can be obtained by using the </dd>
<script type="text/javascript"> activateLinkAnchor('CATIPLMIdentifierSet','GetIdentifierSet','CATIPLMIdentifierSet.GetIdentifierSet') </script> method.   
    <dt><tt> opInstance</tt>
   <dd> [out, CATBaseUnknown#Release]      The searched Product Instance.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product Instance was successfully retrieved</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>Otherwise</dd>
   </dl>
</dl>
</dl>
<a name="Iterator"></a><a name="Iterator(CATIPrdIterator*&amp;,IID&amp;,CATBoolean)"></a> <dt> o <b>Iterator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Iterator</b>(<td><script type="text/javascript"> activateLink('CATIPrdIterator','CATIPrdIterator*&amp;')</script> <td><tt>opIterator</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIID</tt><td><tt>= IID_CATIPrdObject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iOnlyActiveFilter</tt><td><tt>= FALSE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Creates an iterator to navigate on <b>direct</b> children.
		<br><b>Role</b>: This method creates an iterator which enables to scan direct children.
   <br>Do not modify the Product Structure (by removing, replacing or adding children for example) 
		while scanning children with an iterator !
		
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIPrdIterator','','CATIPrdIterator') </script>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opIterator</tt>
   <dd> [out, CATBaseUnknown#Release]      The created iterator.
   </dd>
    <dt><tt> iIID</tt>
   <dd>      The interface IID to query on the children managed by the iterator.
    <br><b>Legal values</b>: It should be expressed as IID_CATIXX,
    where CATIXX is the interface to which a pointer is requested (IID_</dd>
<script type="text/javascript"> activateLinkAnchor('CATIPrdObject','','CATIPrdObject') </script> by default) 			 <br>For example :
			<pre>CATIPLMProducts * pMyCurrentProduct = ... ;
CATIPrdIterator * pIterator = NULL;
if (SUCCEEDED(pMyCurrentProduct->Iterator(pIterator, IID_CATIMyInterface )))
{
	CATIMyInterface * pMyInterfaceOnChildren = NULL;
	while (SUCCEEDED(pIterator->Next(pMyInterfaceOnChildren)))
	{
		...
		pMyInterfaceOnChildren->Release(); pMyInterfaceOnChildren = NULL;
	}
	pIterator->Release(); pIterator = NULL;
}</pre>
   
    <dt><tt> iOnlyActiveFilter</tt>
   <dd>			<b>Legal values</b>:
			<dl>
				<dt><tt>TRUE</tt></dt>
     <dd>To return only activated products</dd>
     <dt><tt>FALSE</tt></dt>
     <dd>To return all products. This is the default value</dd>
   </dl>
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The iterator was successfully created</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>The iterator creation failed</dd>
   </dl>
</dl>
</dl>
<a name="RemoveProduct"></a><a name="RemoveProduct(CATIPLMProducts*,CATPrdEditionParameters*)"></a> <dt> o <b>RemoveProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*')</script> <td><tt>ipInstanceToRemove</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPrdEditionParameters','CATPrdEditionParameters*')</script> <td><tt>iParameters</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Removes a Product Instance.
		<br><b>Role</b>: This method removes a Product Instance aggregated by <tt>this</tt> which is a Product Reference.
		<br>This method must be called on a Product Reference and <tt>ipInstanceToRemove</tt> must be one of its first Product Instances.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipInstanceToRemove</tt>
   <dd>       The Product Instance to remove, aggregated by <tt>this</tt>.
   </dd>
    <dt><tt> iParameters</tt>
   <dd>      Reserved for future use, must be specified as NULL.
      <!--A set of parameters to be applied on the created product instance.<br> 
      For example, we may apply effectivity parameter, maturity parameter, etc.-->
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product Instance was successfully removed</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd>Either <tt>this</tt> is not a Reference Product,
					or <tt>ipInstanceToRemove</tt> is not a direct child of <tt>this</tt></dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>The Product Instance was not successfully removed</dd>
   </dl>
</dl>
</dl>
<a name="RemoveProductByName"></a><a name="RemoveProductByName(CATUnicodeString&amp;,CATPrdEditionParameters*)"></a> <dt> o <b>RemoveProductByName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveProductByName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iInstanceName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPrdEditionParameters','CATPrdEditionParameters*')</script> <td><tt>iParameters</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Removes a Product Instance from its name.
		<br><b>Role</b>: This method removes a Product Instance aggregated by <tt>this</tt> from its name.
		<br>This method must be called on a Product Reference and <tt>iInstanceName</tt> must be the name of one of its first Product Instances.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInstanceName</tt>
   <dd>      The name of the Product Instance to remove.<br>
			 This name can be obtained by using  </dd>
<script type="text/javascript"> activateLinkAnchor('CATIPLMIdentifierSet','GetIdentifierSet','CATIPLMIdentifierSet.GetIdentifierSet') </script> method.   
    <dt><tt> iParameters</tt>
   <dd>      Reserved for future use, must be specified as NULL.
      <!--A set of parameters to be applied on the created product instance.<br> 
      For example, we may apply effectivity parameter, maturity parameter, etc.-->
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product Instance was successfully removed</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd><tt>this</tt> is not a Product Reference</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>Either <tt>iInstanceName</tt> is not the name of a <b>direct</b> child of <tt>this</tt>,
			or the Product Instance was not successfully removed</dd>
   </dl>
</dl>
</dl>
<a name="ReplaceProduct"></a><a name="ReplaceProduct(CATIPLMProducts*,CATIPLMProducts*,CATBoolean,CATIPLMProducts*&amp;,CATPrdEditionParameters*)"></a> <dt> o <b>ReplaceProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ReplaceProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*')</script> <td><tt>ipOldInstance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*')</script> <td><tt>ipNewReference</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iAllInstances</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIPLMProducts','CATIPLMProducts*&amp;')</script> <td><tt>opNewInstance</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATPrdEditionParameters','CATPrdEditionParameters*')</script> <td><tt>iParameters</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Replaces a given Product Instance with another one.
		<br><b>Role</b>: This method instanciates a given Product Reference and replaces the given old instance by this newly
		created Product Instance.
		<br>It must be called on a Product Reference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipOldInstance</tt>
   <dd>      The old Product Instance to be replaced. It must be a <b>direct</b> child of <tt>this</tt>. 
   </dd>
    <dt><tt> ipNewReference</tt>
   <dd>      The replacing Reference Product.
   </dd>
    <dt><tt> iAllInstances</tt>
   <dd>			<b>Legal values</b>:
			<dl>
				<dt>TRUE</dt>
     <dd>If the Reference Product of <tt>ipOldInstance</tt> is multi-instanciated, replace is performed on each 
					of all loaded instances</dd>
     <dt>FALSE</dt>
     <dd>Replace is performed on <tt>ipOldInstance</tt> only</dd>
   </dl>
   </dd>
    <dt><tt> opNewInstance</tt>
   <dd> [out, CATBaseUnknown#Release]      The new Product Instance replacing the old one given in argument.
   </dd>
    <dt><tt> iParameters</tt>
   <dd>      Reserved for future use, must be specified as NULL.
      <!--A set of parameters to be applied on the created product instance.<br> 
      For example, we may apply effectivity parameter, maturity parameter, etc.-->
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The Product Instance was successfully replaced</dd>
     <dt><tt>E_INVALIDARG </tt></dt>
     <dd><tt>this</tt> is not a Product Reference</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>Otherwise</dd>
   </dl>
</dl>
</dl>
<a name="VisitChildren"></a><a name="VisitChildren(CATIVisitor*)"></a> <dt> o <b>VisitChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>VisitChildren</b>(<td><script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor*')</script> <td><tt>ipVisitor</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Visits <b>direct</b> children.
		<br><b>Role</b>: This method scans all direct children of <tt>this</tt> with a 
<script type="text/javascript"> activateLinkAnchor('CATIVisitor','','CATIVisitor') </script> 		and performs the Visit method of the given visitor on each of them.
		<br>It can be called either on a Product Instance or a Product Reference.
		<br>
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipVisitor</tt>
   <dd>      The children visitor whose Visit method will be applied on children.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  			An HRESULT value. 
			<br><b>Legal values</b>:
			<dl>
     <dt><tt>S_OK</tt></dt>
     <dd>The visit was successfully completed</dd>
     <dt><tt>E_FAIL</tt></dt>
     <dd>Otherwise</dd>
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPLMProducts.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATProductStructureInterfaces</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

