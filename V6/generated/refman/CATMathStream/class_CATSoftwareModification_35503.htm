<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATMathStream Class CATSoftwareModification</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATMathStream.htm" href="../CATMathStream.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATMathStream";	}
		function getCurrentObjectName() { 
 	return "CATSoftwareModification"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATMathStream <script type="text/javascript" > writeClassCharacteristic(); </script> CATSoftwareModification</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATSoftwareModification_35503','CATSoftwareModification','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATSoftwareModification</b>
</p>
<p>
<b><i> Class defining a software modification.</i></b><br>

 The CATSoftwareConfiguration and CATSoftwareModification classes allow you to modify the code of a 
 topological operator while keeping the upwards compatibility of the data generated by the operator.
 If you create and save a feature with a certain code level, any attempt to modify this feature later on with
 a new algorithm will apply the level of code used prior to saving the feature. This guarantees no regression
 in the operator behaviour.
 By using the versioning mechanism, you can store the code level which is used to create a feature and
 manage the code levels to be used for future calls. 
 <p>
 <b>Example</b>
    <pre>
    IID ModifId = { 0xa3208510, 0xe070, 0x11d3,{0xb0, 0xa8, 0x4c, 0x54, 0x01, 0x00, 0x00, 0x00}};
    CATSoftwareModification Modif(ModifId,2);
    ...
    my_operator::Run()
    CATSoftwareConfiguration* Config;
    Config = GetConfig();  
    Config = AddModification(Modif);
    int Level = Config->GetModificationLevel(Modif);
    switch(Level)
    {
       case 0 : // initial version
            {
               ...
               break;
             }
       case 1 : // version 1
             {
               ...
               break;
             }
       case 2 :  // version 2
             {
                ... 
                break;
              }
       default :
              {
                ... 
                break;
              }
      }
    </pre></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATSoftwareModification(IID&amp;,short)"><b>CATSoftwareModification</b></a>(IID&amp;,short)
<dd>  Constructs a CATSoftwareModification.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Dump(ostream&amp;)"><b>Dump</b></a>(ostream&amp;)
<dd>  Dumps the content of a CATSoftwareModification;
 
 <dt> o 
    <a href="#GetCurrentLevel()"><b>GetCurrentLevel</b></a>()
<dd>  Retrieves the current level of a mofification.
 <dt> o 
    <a href="#GetModification(IID&amp;)"><b>GetModification</b></a>(IID&amp;)
<dd>  Retrieves a CATSoftwareModification from its IID.
 <dt> o 
    <a href="#GetModificationId()"><b>GetModificationId</b></a>()
<dd>  Retrieves the IID of a mofification.
 <dt> o 
    <a href="#SetCurrentLevel(short)"><b>SetCurrentLevel</b></a>(short)
<dd>  Modifies the current level of a mofification.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATSoftwareModification"></a><a name="CATSoftwareModification(IID&amp;,short)"></a> <dt> o <b>CATSoftwareModification</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSoftwareModification</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>ModificationId</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iLevel</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATSoftwareModification.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iModificationID</tt>
   <dd> The CATSoftwareModification identifier.
 </dd>
    <dt><tt> iLevel</tt>
   <dd> The current level of the modification. The initial level should be 0. 
</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Dump"></a><a name="Dump(ostream&amp;)"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Dump</b>(<td><script type="text/javascript"> activateLink('ostream','ostream&amp;')</script> <td><tt>os</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Dumps the content of a CATSoftwareModification;
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> os</tt>
   <dd> The stream where the CATSoftwareModification is to be dumped.</dd>
</dl>
</dl>
</dl>
<a name="GetCurrentLevel"></a><a name="GetCurrentLevel()"></a> <dt> o <b>GetCurrentLevel</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('short','short')</script>  <b>GetCurrentLevel</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the current level of a mofification.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The level of the modification.
</dl>
</dl>
<a name="GetModification"></a><a name="GetModification(IID&amp;)"></a> <dt> o <b>GetModification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATSoftwareModification','CATSoftwareModification*')</script>  <b>GetModification</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iModificationID</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a CATSoftwareModification from its IID.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iModificationID</tt>
   <dd> The given (code) modification identified by its IID.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The modification (a NULL pointer if the CATSoftwareModificationis not found).
</dl>
</dl>
<a name="GetModificationId"></a><a name="GetModificationId()"></a> <dt> o <b>GetModificationId</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('IID','const IID*')</script>  <b>GetModificationId</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the IID of a mofification.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The identifier of the modification.
</dl>
</dl>
<a name="SetCurrentLevel"></a><a name="SetCurrentLevel(short)"></a> <dt> o <b>SetCurrentLevel</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCurrentLevel</b>(<td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iLevel</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the current level of a mofification.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLevel</tt>
   <dd> The new level of the modification.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSoftwareModification.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMathStream</b>
<hr/><p><i>
Copyright &#169; 1999-2015, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

