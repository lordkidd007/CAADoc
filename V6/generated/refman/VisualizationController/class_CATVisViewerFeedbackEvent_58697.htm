<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationController Class CATVisViewerFeedbackEvent</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../VisualizationController.htm" href="../VisualizationController.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "VisualizationController";	}
		function getCurrentObjectName() { 
 	return "CATVisViewerFeedbackEvent"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>VisualizationController <script type="text/javascript" > writeClassCharacteristic(); </script> CATVisViewerFeedbackEvent</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATVisViewerFeedbackEvent_58697','CATVisViewerFeedbackEvent','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATVisViewerFeedbackEvent</b>
</p>
<p>
<b><i> Class notification for CATViewer interactions.</i></b><br>

 <b>Role</b>: A such notification is sent when an interaction occurs in a 
 <script type="text/javascript"> activateLinkAnchor('CATViewer','','CATViewer') </script> which has the feedback mode active. The 
<script type="text/javascript"> activateLinkAnchor('CATViewer','GetFeedbackMode','CATViewer.GetFeedbackMode') </script> method enables you to set the feedback mode, and the 
 
<script type="text/javascript"> activateLinkAnchor('CATViewer','SetFeedbackMode','CATViewer.SetFeedbackMode') </script> method enables you to unset it. <br>This class notification offers methods to access information concerning the 
 interaction, be it a mouse motion or a button action.
 <br>To receive such notifications, you should set a callback on a
 <tt>CATViewer::VIEWER_FEEDBACK_UPDATE</tt> class event. 
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATViewer','','CATViewer') </script>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATVisViewerFeedbackEvent()"><b>~CATVisViewerFeedbackEvent</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetContext()"><b>GetContext</b></a>()
<dd>   Retrieves the context that gave birth to the event.
 <dt> o 
    <a href="#GetElementsUnder()"><b>GetElementsUnder</b></a>()
<dd>   Retrieves elements under the mouse.
 <dt> o 
    <a href="#GetIntersection()"><b>GetIntersection</b></a>()
<dd>   Retrieves the intersection point between the mouse pointer and the underlying geometry.
 <dt> o 
    <a href="#GetMousePosition(int*,int*)"><b>GetMousePosition</b></a>(int*,int*)
<dd>   Retrieves the mouse pointer position in screen coordinates.
 <dt> o 
    <a href="#GetViewer()"><b>GetViewer</b></a>()
<dd>   Retrieves the viewer that triggered the event.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#EventContext"><b>EventContext</b></a>
<dd>   Defines the notification creation context.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATVisViewerFeedbackEvent"></a><a name="~CATVisViewerFeedbackEvent()"></a> <dt> o <b>~CATVisViewerFeedbackEvent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATVisViewerFeedbackEvent</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetContext"></a><a name="GetContext()"></a> <dt> o <b>GetContext</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATVisViewerFeedbackEvent::EventContext','CATVisViewerFeedbackEvent::EventContext')</script>  <b>GetContext</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the context that gave birth to the event.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The event context.
</dl>
</dl>
<a name="GetElementsUnder"></a><a name="GetElementsUnder()"></a> <dt> o <b>GetElementsUnder</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATSO','CATSO*')</script>  <b>GetElementsUnder</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves elements under the mouse.
 <br><b>Role</b>This methods enables you to know all the elements 
  (until the geometry level) under the mouse. The elements in the 
<script type="text/javascript"> activateLinkAnchor('CATSO','','CATSO') </script> are sorted: the first (0 index) is the nearest, and the last (n-1 index) is
 the further.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The set of element under the mouse.
</dl>
</dl>
<a name="GetIntersection"></a><a name="GetIntersection()"></a> <dt> o <b>GetIntersection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATGraphicElementIntersection','CATGraphicElementIntersection*')</script>  <b>GetIntersection</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the intersection point between the mouse pointer and the underlying geometry.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The intersection point.
</dl>
</dl>
<a name="GetMousePosition"></a><a name="GetMousePosition(int*,int*)"></a> <dt> o <b>GetMousePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetMousePosition</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oXPixel</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oYPixel</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the mouse pointer position in screen coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oXPixel</tt>
   <dd>   The X position. The range of the value is between <tt>0</tt> and
  the width (-1) of the support (</dd>
<script type="text/javascript"> activateLinkAnchor('CATSupport','GetWidthAndHeight','CATSupport.GetWidthAndHeight') </script> ).   <br><tt>oXPixel</tt> increases from left to right. 
 
    <dt><tt> oYPixel</tt>
   <dd>   The Y position. The range of the value is between <tt>0</tt> and
  the height (-1) of the support (</dd>
<script type="text/javascript"> activateLinkAnchor('CATSupport','GetWidthAndHeight','CATSupport.GetWidthAndHeight') </script> ).   <br> <tt>oYPixel</tt> increases from top to bottom.
</dl>
</dl>
</dl>
<a name="GetViewer"></a><a name="GetViewer()"></a> <dt> o <b>GetViewer</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATViewer','CATViewer*')</script>  <b>GetViewer</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Retrieves the viewer that triggered the event.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The viewer.
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="EventContext"> <dt> o <b>EventContext</b>
<dl>
  <dd>
<pre>
enum <b>EventContext</b> {
  Preactivate,
  MoveOver,
  Move,
  EndPreactivate,
  BeginManipulate,
  Activate,
  Context,
  EndManipulate
}
</pre>
  Defines the notification creation context.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Preactivate</tt>
   <dd>  There are two cases to consider:
   <ul>
    <li>The mouse pointer, coming from the background, enters on a graphic representation. 
        Two notifications with the following context are sent in this order:</li>
     <ol>
      <li>A <tt>EndPreactivate</tt> context: 
          The pointer returned by </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is null </li>      <li>A <tt>Preactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null </li>     </ol>
    <li>The mouse pointer leaves a graphic representation to the background. 
    Two notifications with the following context are sent in this order:</li>
     <ol>
      <li>A <tt>EndPreactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null </li>      <li>A <tt>Preactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is null </li>     </ol>
   </ul>
 
    <dt><tt> MoveOver</tt>
   <dd>  The mouse pointer leaves a graphic representation to enter on a new one.
  The pointer returned by </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null. 
    <dt><tt> Move</tt>
   <dd>  The mouse pointer moves on a graphic representation or the background. In the first case,
 the pointer returned by </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null, otherwise the pointer is nul. 
    <dt><tt> EndPreactivate</tt>
   <dd>  There are two cases to consider:
   <ul>
    <li>The mouse pointer, coming from the background, enters on a graphic representation. 
        Two notifications with the following context are sent in this order:</li>
     <ol>
      <li>A <tt>EndPreactivate</tt> context: 
          The pointer returned by </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is null </li>      <li>A <tt>Preactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null </li>     </ol>
    <li>The mouse pointer leaves a graphic representation to the background. 
    Two notifications with the following context are sent in this order:</li>
     <ol>
      <li>A <tt>EndPreactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null </li>      <li>A <tt>Preactivate</tt> context: 
          The pointer returned by 
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is null </li>     </ol>
   </ul>
 
    <dt><tt> BeginManipulate</tt>
   <dd>   If a graphic representation is taken for manipulation, the pointer returned 
   by </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null, otherwise if the background is taken    for manipulation, the pointer is null. 

 
    <dt><tt> Activate</tt>
   <dd>  If a graphic representation is selected, the pointer returned by 
  </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null, otherwise if the background is selected,   the pointer is null.
 
    <dt><tt> Context</tt>
   <dd>  Contextual action is asked. If a graphic representation is selected, the pointer returned by 
  </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null, otherwise if the background is selected,   the pointer is null.

 
    <dt><tt> EndManipulate</tt>
   <dd>  When a manipulation is ended, the manipulated object is released, the pointer returned by 
  </dd>
<script type="text/javascript"> activateLinkAnchor('','GetElementsUnder','GetElementsUnder') </script> is not null, otherwise if the background is selected,   the pointer is null.
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATVisViewerFeedbackEvent.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisController</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

