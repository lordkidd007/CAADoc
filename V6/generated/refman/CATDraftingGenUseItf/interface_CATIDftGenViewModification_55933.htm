<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATDraftingGenUseItf Interface CATIDftGenViewModification</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATDraftingGenUseItf.htm" href="../CATDraftingGenUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATDraftingGenUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIDftGenViewModification"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATDraftingGenUseItf Interface CATIDftGenViewModification</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftGenViewModification_55933','CATIDftGenViewModification','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftGenViewModification</b>
</p>
<p>
<b><i> This interface contains methods to modify generative drafting views.</i></b><br>

 <b>Role</b>: This interface is implemented by hlrview object (applicative extension of the view).</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddBreakout(CATListPtrCATMathPoint2D,CATMathPlane,CATBoolean)"><b>AddBreakout</b></a>(CATListPtrCATMathPoint2D,CATMathPlane,CATBoolean)
<dd>   Adds a breakout.
 <dt> o 
    <a href="#AddBroken(double*,double*,CATBoolean,CATBoolean,CATBoolean)"><b>AddBroken</b></a>(double*,double*,CATBoolean,CATBoolean,CATBoolean)
<dd>   Adds a break.
 <dt> o 
    <a href="#AddClippingBox(CATMathPoint,CATMathPoint,CATMathPoint,CATMathPoint,CATBoolean)"><b>AddClippingBox</b></a>(CATMathPoint,CATMathPoint,CATMathPoint,CATMathPoint,CATBoolean)
<dd>   Adds a clipping box.
 <dt> o 
    <a href="#AddClippingWithCircle(CATDftDetailType,double*,double,CATBoolean)"><b>AddClippingWithCircle</b></a>(CATDftDetailType,double*,double,CATBoolean)
<dd>   Adds a clipping with circle.
 <dt> o 
    <a href="#AddClippingWithProfile(CATDftDetailType,CATListPtrCATMathPoint2D,CATBoolean)"><b>AddClippingWithProfile</b></a>(CATDftDetailType,CATListPtrCATMathPoint2D,CATBoolean)
<dd>   Adds a clipping with profile.
 <dt> o 
    <a href="#ApplyBreakoutTo(CATIDftView*,CATBoolean)"><b>ApplyBreakoutTo</b></a>(CATIDftView*,CATBoolean)
<dd>   Applies breakout to a view.
 <dt> o 
    <a href="#ApplyClippingBoxTo(CATIDftView*,CATBoolean)"><b>ApplyClippingBoxTo</b></a>(CATIDftView*,CATBoolean)
<dd>   Applies clipping box to a view.
 <dt> o 
    <a href="#ApplyLinksTo(CATIDftView*,CATBoolean)"><b>ApplyLinksTo</b></a>(CATIDftView*,CATBoolean)
<dd>   Applies links to a view.
 <dt> o 
    <a href="#ApplyOverloadPropertiesTo(CATIDftView*,CATBoolean)"><b>ApplyOverloadPropertiesTo</b></a>(CATIDftView*,CATBoolean)
<dd>   Applies overload properties to a view.
 <dt> o 
    <a href="#ModifyGenViewProperties(CATDftGenViewProperties*,CATBoolean)"><b>ModifyGenViewProperties</b></a>(CATDftGenViewProperties*,CATBoolean)
<dd>   Modifies generative view properties.
 <dt> o 
    <a href="#ModifyLinks(CATIUnknownList*,CATBoolean)"><b>ModifyLinks</b></a>(CATIUnknownList*,CATBoolean)
<dd>   Modifies links.
 <dt> o 
    <a href="#ModifyProjectionPlane(CATMathPlane,CATBoolean)"><b>ModifyProjectionPlane</b></a>(CATMathPlane,CATBoolean)
<dd>   Modifies projection plane.
 <dt> o 
    <a href="#RemoveBox3D()"><b>RemoveBox3D</b></a>()
<dd>  Removes a box3D operator in the view.
 <dt> o 
    <a href="#SetBox3DOptions(CATDrwGenBox3DType,CATDrwGenBox3DMode)"><b>SetBox3DOptions</b></a>(CATDrwGenBox3DType,CATDrwGenBox3DMode)
<dd>  Sets parameters on a box operator.
 <dt> o 
    <a href="#UnBreak(CATBoolean)"><b>UnBreak</b></a>(CATBoolean)
<dd>   Removes break.
 <dt> o 
    <a href="#UnBreakout(CATBoolean)"><b>UnBreakout</b></a>(CATBoolean)
<dd>   Removes breakout.
 <dt> o 
    <a href="#UnClip(CATBoolean)"><b>UnClip</b></a>(CATBoolean)
<dd>   Removes clip.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddBreakout"></a><a name="AddBreakout(CATListPtrCATMathPoint2D,CATMathPlane,CATBoolean)"></a> <dt> o <b>AddBreakout</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddBreakout</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D')</script> <td><tt>iListOfPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane')</script> <td><tt>iDepthPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Adds a breakout.

 <br><b>Role</b>: this method adds a breakout on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfPoints</tt>
   <dd> [in]   List of 2D points defining the breakout profile.
 </dd>
    <dt><tt> iDepthPlane</tt>
   <dd> [in]   A 3D plane (parallel to view's projection plane) defining the breakout depth.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the breakout has been correctly added.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="AddBroken"></a><a name="AddBroken(double*,double*,CATBoolean,CATBoolean,CATBoolean)"></a> <dt> o <b>AddBroken</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddBroken</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iFirstPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSecondPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibVertical</tt><td><tt>= FALSE</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibArePointsInUnbrokenView</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Adds a break.

 <br><b>Role</b>: this method adds a break on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstPoint[2]</tt>
   <dd> [in]   Coordinates of anchor point of the first limit of the break.
 </dd>
    <dt><tt> iSecondPoint[2]</tt>
   <dd> [in]   Coordinates of anchor point of the second limit of the break.
 </dd>
    <dt><tt> iVertical</tt>
   <dd> [in]   defines if the break is vertical or horizontal.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.
 </dd>
    <dt><tt> ibArePointsInUnbrokenView</tt>
   <dd> [in]      eg. Original Unbroken View - user has to create 2 broken operators at points 
     1) (100, 0) & (300, 0)and
     2) (400, 0) & (500, 0)
      __________ ________________________________ __________ __________ __________ 
     |          |                                |          |          |          |
     |          |                                |          |          |          |
     |__________|________________________________|__________|__________|__________|
            (100, 0)                         (300, 0)   (400, 0)   (500, 0)
     After 1st break at (100, 0) & (300, 0) the resulting view is as follows
      __________  __________ __________ __________
     |          ||          |          |          |
     |          ||          |          |          |
     |__________||__________|__________|__________|
            (100, 0)    (205,0)    (305,0)
     Points (205, 0) & (305, 0) represent the points (400, 0) & (500, 0) respectively in unbroken view.

   TRUE : the points are passed corresponding to the unbroken view (irrespective of whether a broken operator is present on the view or not).
          eg.In the above case user has to pass the points as (400, 0) & (500, 0) to create the second broken operator.

   FALSE : the points are passed corresponding to the current view (irrespective of whether a broken operator is present on the view or not).
           eg. In the above case user has to pass the points as (205, 0) & (305, 0) to create the second broken operator.
           If the user passes points as (400, 0) & (500, 0), the points will be out of the bounding box of the current view.

     In both the cases the resulting view will be the same as follows
      __________  __________  __________
     |          ||          ||          |
     |          ||          ||          |
     |__________||__________||__________|
            (100, 0)    (205,0)

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the break has been correctly added.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="AddClippingBox"></a><a name="AddClippingBox(CATMathPoint,CATMathPoint,CATMathPoint,CATMathPoint,CATBoolean)"></a> <dt> o <b>AddClippingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddClippingBox</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script> <td><tt>iFirstBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script> <td><tt>iSecondBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script> <td><tt>iThirdBasePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script> <td><tt>iDepthPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Adds a clipping box.

 <br><b>Role</b>: this method adds a cclipping on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstBasePoint</tt>
   <dd> [in]   The first point of the clipping box base.
 </dd>
    <dt><tt> iSecondBasePoint</tt>
   <dd> [in]   The second point of the clipping box base.
 </dd>
    <dt><tt> iThirdBasePoint</tt>
   <dd> [in]   The third point of the clipping box base.
 </dd>
    <dt><tt> iDepthPoint</tt>
   <dd> [in]   A point defining the depth of the clipping box.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the clipping box has been correctly added.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="AddClippingWithCircle"></a><a name="AddClippingWithCircle(CATDftDetailType,double*,double,CATBoolean)"></a> <dt> o <b>AddClippingWithCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddClippingWithCircle</b>(<td><script type="text/javascript"> activateLink('CATDftDetailType','CATDftDetailType')</script> <td><tt>iViewType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Adds a clipping with circle.

 <br><b>Role</b>: this method adds a circular clipping on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iViewType</tt>
   <dd> [in]   Type of the clipping (DftGenRelimit3D, DftGenQuick).
 </dd>
    <dt><tt> iCenter[2]</tt>
   <dd> [in]   Coordinates of the circle centre.
 </dd>
    <dt><tt> iRadius</tt>
   <dd> [in]   Radius of the circle centre.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the clipping has been correctly added.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="AddClippingWithProfile"></a><a name="AddClippingWithProfile(CATDftDetailType,CATListPtrCATMathPoint2D,CATBoolean)"></a> <dt> o <b>AddClippingWithProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddClippingWithProfile</b>(<td><script type="text/javascript"> activateLink('CATDftDetailType','CATDftDetailType')</script> <td><tt>iViewType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D')</script> <td><tt>iListOfPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Adds a clipping with profile.

 <br><b>Role</b>: this method adds a polygonal clipping on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iViewType</tt>
   <dd> [in]   Type of the clipping (DftGenRelimit3D, DftGenQuick).
 </dd>
    <dt><tt> iListOfPoints</tt>
   <dd> [in]   List of 2D points defining the clipping profile.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the clipping has been correctly added.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ApplyBreakoutTo"></a><a name="ApplyBreakoutTo(CATIDftView*,CATBoolean)"></a> <dt> o <b>ApplyBreakoutTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ApplyBreakoutTo</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView*')</script> <td><tt>ipiDftView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Applies breakout to a view.

 <br><b>Role</b>: this method applies breakout(s) contained in a view to another one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDftView</tt>
   <dd> [in]   The view on which breakout(s) will be applied.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the breakout has been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ApplyClippingBoxTo"></a><a name="ApplyClippingBoxTo(CATIDftView*,CATBoolean)"></a> <dt> o <b>ApplyClippingBoxTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ApplyClippingBoxTo</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView*')</script> <td><tt>ipiDftView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Applies clipping box to a view.

 <br><b>Role</b>: this method applies clipping box contained in a view to another one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDftView</tt>
   <dd> [in]   The view on which breakout(s) will be applied.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the clipping box has been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ApplyLinksTo"></a><a name="ApplyLinksTo(CATIDftView*,CATBoolean)"></a> <dt> o <b>ApplyLinksTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ApplyLinksTo</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView*')</script> <td><tt>ipiDftView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Applies links to a view.

 <br><b>Role</b>: this method applies link(s) of a view to another one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDftView</tt>
   <dd> [in]   The view on which link(s) will be applied.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the links have been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ApplyOverloadPropertiesTo"></a><a name="ApplyOverloadPropertiesTo(CATIDftView*,CATBoolean)"></a> <dt> o <b>ApplyOverloadPropertiesTo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ApplyOverloadPropertiesTo</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView*')</script> <td><tt>ipiDftView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Applies overload properties to a view.

 <br><b>Role</b>: this method applies overload properties of a view to another one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiDftView</tt>
   <dd> [in]   The view on which overload properties will be applied.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the overload properties have been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ModifyGenViewProperties"></a><a name="ModifyGenViewProperties(CATDftGenViewProperties*,CATBoolean)"></a> <dt> o <b>ModifyGenViewProperties</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ModifyGenViewProperties</b>(<td><script type="text/javascript"> activateLink('CATDftGenViewProperties','CATDftGenViewProperties*')</script> <td><tt>iNewGenProperties</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Modifies generative view properties.

 <br><b>Role</b>: This method allows to apply properties to a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewGenProperties</tt>
   <dd> [in]   A pointer on the CATDftGenViewProperties class defining properties of the view.
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if properties have been correctly modified.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ModifyLinks"></a><a name="ModifyLinks(CATIUnknownList*,CATBoolean)"></a> <dt> o <b>ModifyLinks</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ModifyLinks</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList*')</script> <td><tt>iListNewLinks</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Modifies links.

 <br><b>Role</b>: this method applies new link(s) to 3D on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListNewLinks</tt>
   <dd> [in]   The list of 3D pointed elements. 
   </dd>
</dl>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the links have been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="ModifyProjectionPlane"></a><a name="ModifyProjectionPlane(CATMathPlane,CATBoolean)"></a> <dt> o <b>ModifyProjectionPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ModifyProjectionPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane')</script> <td><tt>iNewProjectionPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Modifies projection plane.

 <br><b>Role</b>: this method applies a new projection plane on a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewProjectionPlane</tt>
   <dd> [in]   The new projection plane
 </dd>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if the new projection plane has been correctly applied.
   <br>E_INVALIDARG : if the arguments are incorrect.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="RemoveBox3D"></a><a name="RemoveBox3D()"></a> <dt> o <b>RemoveBox3D</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveBox3D</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Removes a box3D operator in the view.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure occurred.
 </dl>
</dl>
</dl>
<a name="SetBox3DOptions"></a><a name="SetBox3DOptions(CATDrwGenBox3DType,CATDrwGenBox3DMode)"></a> <dt> o <b>SetBox3DOptions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetBox3DOptions</b>(<td> const <script type="text/javascript"> activateLink('CATDrwGenBox3DType','CATDrwGenBox3DType')</script> <td><tt>iClippingType</tt><td><tt>=ClippingByBox</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATDrwGenBox3DMode','CATDrwGenBox3DMode')</script> <td><tt>iClippingMode</tt><td><tt>=Relimit</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets parameters on a box operator.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClippingType</tt>
   <dd> (box, slice or back clipping plane)   </dd>
    <dt><tt> iClippingMode</tt>
   <dd> ** NOT IMPLEMENTED **  </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>if a box does not exist on the view
</dl>
</dl>
<a name="UnBreak"></a><a name="UnBreak(CATBoolean)"></a> <dt> o <b>UnBreak</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnBreak</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Removes break.

 <br><b>Role</b>: this method removes all breaks contained in a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if breaks have been correctly removed.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="UnBreakout"></a><a name="UnBreakout(CATBoolean)"></a> <dt> o <b>UnBreakout</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnBreakout</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Removes breakout.

 <br><b>Role</b>: this method removes all breakouts contained in a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if breakouts have been correctly removed.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<a name="UnClip"></a><a name="UnClip(CATBoolean)"></a> <dt> o <b>UnClip</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnClip</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iComputeUpdate</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Removes clip.

 <br><b>Role</b>: this method removes clipping applied to a generative view.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iComputeUpdate</tt>
   <dd> [in]   TRUE : the view is updated.
   FALSE : the view is not updated. See CATIDftGenViewUpdate.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    S_OK : if clipping has been correctly removed.
   <br>E_FAIL : if the operation failed.

</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftGenViewModification.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingGenUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

