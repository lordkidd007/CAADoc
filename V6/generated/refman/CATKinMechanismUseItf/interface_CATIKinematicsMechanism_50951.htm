<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATKinMechanismUseItf Interface CATIKinematicsMechanism</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATKinMechanismUseItf.htm" href="../CATKinMechanismUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATKinMechanismUseItf";	}
		function getCurrentObjectName() { 
 	return "CATIKinematicsMechanism"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>CATKinMechanismUseItf Interface CATIKinematicsMechanism</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIKinematicsMechanism_50951','CATIKinematicsMechanism','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIKinematicsMechanism</b>
</p>
<p>
<b><i> Interface which identifies a kinematic mechanism
 <b>Role</b>: A mechanism manipulates engineering connections and kinematics Commands .</i></b><br>

 The state of the mechanism is represented by the values of its commands.
 The methods provided by this interface allow to access this information and 
 perfom a kinematics simulation</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CleanSimulation()"><b>CleanSimulation</b></a>()
<dd>   Cleans the simulation environment.
 <dt> o 
    <a href="#GetDOFStatus(int&amp;,int&amp;,CATBoolean&amp;)"><b>GetDOFStatus</b></a>(int&amp;,int&amp;,CATBoolean&amp;)
<dd>   Returns the DOF and the status of a mechanism.
 <dt> o 
    <a href="#GetEngineeringConnectionsList(CATListValCATBaseUnknown_var&amp;)"><b>GetEngineeringConnectionsList</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>   Returns the list of the engineering connections of the mechanism.
 <dt> o 
    <a href="#GetFatherProduct(CATIPLMProducts_var&amp;)"><b>GetFatherProduct</b></a>(CATIPLMProducts_var&amp;)
<dd>   Returns the father product containing the mechanism.
 <dt> o 
    <a href="#GetImpactedProductsList(CATListValCATBaseUnknown_var&amp;)"><b>GetImpactedProductsList</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>   Returns the list of the products involved in the mechanism.
 <dt> o 
    <a href="#GetKinCommandsList(CATListValCATBaseUnknown_var&amp;)"><b>GetKinCommandsList</b></a>(CATListValCATBaseUnknown_var&amp;)
<dd>  Returns the list of the kinematics commands of the mechanism.
 <dt> o 
    <a href="#PrepareSimulation()"><b>PrepareSimulation</b></a>()
<dd>   Initializes the kinematics solver environment, preparing it for a kinematics simulation.
 <dt> o 
    <a href="#RunSimulation(CATListOfDouble&amp;,CATListValCATBaseUnknown_var&amp;,CATListPtrCATMathTransformation&amp;,CATKinematicsSimulationStatus&amp;)"><b>RunSimulation</b></a>(CATListOfDouble&amp;,CATListValCATBaseUnknown_var&amp;,CATListPtrCATMathTransformation&amp;,CATKinematicsSimulationStatus&amp;)
<dd>   Runs a kinematics simulation on a mechanism which can be simulated.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CleanSimulation"></a><a name="CleanSimulation()"></a> <dt> o <b>CleanSimulation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CleanSimulation</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Cleans the simulation environment.It should be called after the last RunSimulation call.
</dl>
<a name="GetDOFStatus"></a><a name="GetDOFStatus(int&amp;,int&amp;,CATBoolean&amp;)"></a> <dt> o <b>GetDOFStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDOFStatus</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oDOFWithoutCmd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oDOFWithCmd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oSimulationReady</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the DOF and the status of a mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDOFWithoutCmd</tt>
   <dd>    The degree of freedom without kinematics commands
 </dd>
    <dt><tt> oDOFWithCmd</tt>
   <dd>    The degree of freedom with kinematics commands
 </dd>
    <dt><tt> oSimulationReady</tt>
   <dd>    returns whether a mecahanism can be simulated or not.</dd>
</dl>
</dl>
</dl>
<a name="GetEngineeringConnectionsList"></a><a name="GetEngineeringConnectionsList(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetEngineeringConnectionsList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEngineeringConnectionsList</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oConnectionsList</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the list of the engineering connections of the mechanism.An engineering connection defines a kinematics joint 
 and adheres to the CATIEngConnection public interface. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oConnectionsList</tt>
   <dd>    This method gives the list of all the engineering connections 
    which are involved in the mechanism. 
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIEngConnection','','CATIEngConnection') </script>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATLISTV(CATBaseUnknown_var)','','CATLISTV(CATBaseUnknown_var)') </script>
</dl>
</dl>
<a name="GetFatherProduct"></a><a name="GetFatherProduct(CATIPLMProducts_var&amp;)"></a> <dt> o <b>GetFatherProduct</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFatherProduct</b>(<td><script type="text/javascript"> activateLink('CATIPLMProducts_var','CATIPLMProducts_var&amp;')</script> <td><tt>oProduct</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the father product containing the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd>    The father product in which the mecanisme has been created.</dd>
</dl>
</dl>
</dl>
<a name="GetImpactedProductsList"></a><a name="GetImpactedProductsList(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetImpactedProductsList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetImpactedProductsList</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oProductsList</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the list of the products involved in the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProductsList</tt>
   <dd>    The list of products.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATLISTV(CATBaseUnknown_var)','','CATLISTV(CATBaseUnknown_var)') </script>
</dl>
</dl>
<a name="GetKinCommandsList"></a><a name="GetKinCommandsList(CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>GetKinCommandsList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetKinCommandsList</b>(<td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oCmdlist</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of the kinematics commands of the mechanism.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCmdList</tt>
   <dd>    The list of commands.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIKinematicsCommand','','CATIKinematicsCommand') </script>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATLISTV(CATBaseUnknown_var)','','CATLISTV(CATBaseUnknown_var)') </script>
</dl>
</dl>
<a name="PrepareSimulation"></a><a name="PrepareSimulation()"></a> <dt> o <b>PrepareSimulation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PrepareSimulation</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Initializes the kinematics solver environment, preparing it for a kinematics simulation. 
 The regular way to use is only the following one:
 
<dl>
  <dt> Example: </dt>
  <dd> <pre class="code"> A_mechanism->PrepareSimulation(..);
 <br/>Make several A_mechanism ->RunSimulation (..);
 <br/>A_Mechanism->CleanSimulation(..);</pre></dd>
</dl>
</dl>
<a name="RunSimulation"></a><a name="RunSimulation(CATListOfDouble&amp;,CATListValCATBaseUnknown_var&amp;,CATListPtrCATMathTransformation&amp;,CATKinematicsSimulationStatus&amp;)"></a> <dt> o <b>RunSimulation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RunSimulation</b>(<td> const <script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iListOfCmdValues</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>oListOfMovingProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATMathTransformation','CATListPtrCATMathTransformation&amp;')</script> <td><tt>oListOfNewPositions</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATKinematicsSimulationStatus','CATKinematicsSimulationStatus&amp;')</script> <td><tt>oRunStatus</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
  Runs a kinematics simulation on a mechanism which can be simulated. 
 A call of PrepareSimulation must be done before using this method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfCmdValues</tt>
   <dd>   This list contains the list of the command values to be reached during a kinematics simulation. 
   The number and the order of this list should match with the number 
   and the order of the command list given by GetCommandList() method.
   <br />Regarding the units for the command values, an angle is measured with degrees whereas a distance is measured with millimeters.
 </dd>
    <dt><tt> oListOfNewPositions</tt>
   <dd>    This list contains the new position for each product listed in the previous list. The position is the absolute position of the product. 
  <br />After using this list of CATMathTransformation pointers, each pointer must be deleted, in order to avoid any memory leak. 
 </dd>
</dl>
  <dt> Example: </dt>
  <dd> <pre class="code">     A_mechanism ->RunSimulation (..,ListOfNewPositions,);
  <br/> loop for each pointer of ListOfNewPositions
  <br/>    if (ptrNewPos) delete ptrNewPos; iptrNewPos = NULL;
 </pre></dd>
    <dt><tt> oRunStatus</tt>
   <dd>     The simulation status.
 </dd>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATLISTV(CATBaseUnknown_var)','','CATLISTV(CATBaseUnknown_var)') </script>, <script type="text/javascript"> activateLinkAnchor('CATKinematicsSimulationStatus','','CATKinematicsSimulationStatus') </script>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIKinematicsMechanism.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATKinMechanismUseItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

