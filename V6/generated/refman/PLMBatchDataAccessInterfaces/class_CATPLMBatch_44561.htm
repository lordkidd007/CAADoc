<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>PLMBatchDataAccessInterfaces Class CATPLMBatch</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../PLMBatchDataAccessInterfaces.htm" href="../PLMBatchDataAccessInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "PLMBatchDataAccessInterfaces";	}
		function getCurrentObjectName() { 
 	return "CATPLMBatch"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>PLMBatchDataAccessInterfaces <script type="text/javascript" > writeClassCharacteristic(); </script> CATPLMBatch</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATPLMBatch_44561','CATPLMBatch','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATPLMBatch</b>
</p>
<p>
<b><i> Class to provide services to generate input parameters used for instantiation and processing of batch application.</i></b><br>

 BatchMonitor tool (CATIA->Tools->Utility).
 <br><b>Role:</b> This class mainly Serves following purposes.<br>
 <ul>
 <li>Provides ability to set the list of data to be processed by the batch applications.</li>
 <li>Provides ability to fill and save input of the batch application with respect to batch Infrastructure formats. </li>
 </ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATPLMBatch(CATString&amp;)"><b>CATPLMBatch</b></a>(CATString&amp;)
<dd>  Constructs a CATPLMBatch object from batch application name.
 <dt> o 
    <a href="#~CATPLMBatch()"><b>~CATPLMBatch</b></a>()
<dd>  Destructs CATPLMBatch object.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#FillXmlFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>FillXmlFile</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Valuates the PLMBatch xml parameter file that is to be used by Batch application for processsing.
 <dt> o 
    <a href="#GetApplicativeOptions(CATListOfCATUnicodeString&amp;)"><b>GetApplicativeOptions</b></a>(CATListOfCATUnicodeString&amp;)
<dd>  Gets Applicative options.
 <dt> o 
    <a href="#GetReportName(CATUnicodeString&amp;)"><b>GetReportName</b></a>(CATUnicodeString&amp;)
<dd>  Retrieves the PLMBatch main report complete path (without extension).
 <dt> o 
    <a href="#SetApplicativeParameters(CATString&amp;,CATListOfCATUnicodeString&amp;)"><b>SetApplicativeParameters</b></a>(CATString&amp;,CATListOfCATUnicodeString&amp;)
<dd>  Sets Applicative parameters.
 <dt> o 
    <a href="#SetReportParameters(CATString&amp;,CATUnicodeString&amp;)"><b>SetReportParameters</b></a>(CATString&amp;,CATUnicodeString&amp;)
<dd>  Sets Report parameters.
 <dt> o 
    <a href="#SetSelectedObjects(CATListOfCATUnicodeString&amp;)"><b>SetSelectedObjects</b></a>(CATListOfCATUnicodeString&amp;)
<dd>  Communicates the list of V5 documents that are to be processed by batch applications.
 <dt> o 
    <a href="#SetSelectedObjects(CATLISTP(CATIAdpPLMIdentificator)&amp;)"><b>SetSelectedObjects</b></a>(CATLISTP(CATIAdpPLMIdentificator)&amp;)
<dd>  Communicates the list of PLM Components to be processed by the batch application.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATPLMBatch"></a><a name="CATPLMBatch(CATString&amp;)"></a> <dt> o <b>CATPLMBatch</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATPLMBatch</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iBatchName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATPLMBatch object from batch application name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBatchName</tt>
   <dd>		The name of batch application. It must be same name that is defined in the batchdesc resource. 
		This batchdesc xml file for each batch could be found in the resources->batchdesc folder of the runtime view .</dd>
</dl>
</dl>
</dl>
<a name="~CATPLMBatch"></a><a name="~CATPLMBatch()"></a> <dt> o <b>~CATPLMBatch</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATPLMBatch</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructs CATPLMBatch object.
</dl>
 <h2>Methods</h2> <br>
<a name="FillXmlFile"></a><a name="FillXmlFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>FillXmlFile</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>FillXmlFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>LicenceFile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iXMLFile</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Valuates the PLMBatch xml parameter file that is to be used by Batch application for processsing.
 <br><br><b>Role:</b> This method prepares an XML file that is passed on to the batch application as input.
 Batch application uses this paramters provided in the xml file for its processing requirements. Even if this method is mainly 
 used in a multi process environment it is also possible to create an xml parameters file in mono process mode.
 This xml file is compatible with the standard Batch environment (i.e it can be used as input of the standard CATBatchStarter exe).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> LicenceFile</tt>
   <dd> full path of a file containing the licensing information for this batch. 
 <br>Each line of this file must be formatted as follows (no blank allowed between the strings and the '|' separator!): 
 <ul><table bgcolor=white><tr><td>batch_name|product.slt </td></tr></table></ul>
 where product.slt is the name of the configuration/product used by the licensing when running the batch.
 <br>DLName and environment variables are supported. 
 <ul>For instance a LicenceFile=$CATTemp/${UID}.txt defintion will search licence in a YWE.txt file (when UID variable is set to YWE) in the CATTemp directory. </ul>
 If LicenceFile is null, default licence defined in the Settings will be taken for the batch.
 </dd>
    <dt><tt> iXMLFile</tt>
   <dd>		The complete path of the xml parameter file to be created.
 <UL>
  <li>in case of a null string, the CATPLMBatch object creates a <i>iBatchName.xml</i> file in the $PLMBATCH_Default_ReportDir directory.</li>
  <li>no replace capability: if the file already exists, it will be automatically overwritten.</li>
  <li>DLName and environment variables are supported.</li> 
  <ul>For instance iXMLFile=$CATTemp/${UID}.xml defintion will create a YWE.xml file (when UID variable is set to YWE) in the CATTemp directory.</ul>
 When null, the valid iXMLFile path is returned (.i.e $PLMBATCH_Default_ReportDir\iBatchName.xml).
 </UL>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>E_FAIL</tt> <dd> if the directory does not exist, or no write access on iXMLFile.
    <br>Use CATError object to retrieve the complete information regarding the failure.
   <dt><tt>S_OK</tt>  <dd> if the file is successfully created. Then iXMLFile is set to the exact xml file name.
 </dl>
</dl>
</dl>
<a name="GetApplicativeOptions"></a><a name="GetApplicativeOptions(CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetApplicativeOptions</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetApplicativeOptions</b>(<td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>oOptionName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets Applicative options.
 <br><br><b>Role:</b> This method allows you to get applicative options for the current batch application.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOptionName</tt>
   <dd>        The option list 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The return value:
 <ul>
 <li><tt>S_OK</tt> The list of option has been successfully valuated. </li>
 <li><tt>E_FAIL</tt> The list of possible option can not be valuated:
 You can use 
<script type="text/javascript"> activateLinkAnchor('CATError','','CATError') </script> object to retrieve the complete information regarding the failure. </ul>
 </dl>
</dl>
</dl>
<a name="GetReportName"></a><a name="GetReportName(CATUnicodeString&amp;)"></a> <dt> o <b>GetReportName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReportName</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oReportFile</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the PLMBatch main report complete path (without extension).
 <br><br><b>Role:</b> This method retrieves the complete path of the main report file, without its extension.
 Then, <UL><LI>add the ".htm" extension to access to the batch global report file, 
 <LI>or add the ".xml" extension to access to the mapping file for application which generates a mapping file.
 <br>The report is created in the output target directory. 
 <br>This output target directory for the batch can be customised by setting the environment variable <i>"PLMBATCH_Default_ReportDir"</i> to the desired directory.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oReportFile</tt>
   <dd>         The complete path of the report file, without the extension. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>E_FAIL</tt> <dd> if the ReportName can not be retrieved.
   <br>Use CATError object to retrieve the complete information regarding the failure.
   <dt><tt>S_OK</tt>  <dd> if the Report name is successfully retrieved.
 </dl>
</dl>
</dl>
<a name="SetApplicativeParameters"></a><a name="SetApplicativeParameters(CATString&amp;,CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>SetApplicativeParameters</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetApplicativeParameters</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iOptionName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>iOptionValueList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets Applicative parameters.
 <br><br><b>Role:</b> This method allows you to set applicative parameters for the current batch application and a given option.
 The list of possible options for an application are displayed in the CAA Encyclopedia; Refer to the CAA V5 PLM Batch section 
 within Enterprise PLM SOA.
 <p>Incase the possible values for the Option Name is a multilist, then multiple calls to this API for the same Option Name 
 will concatenate the input list,
 Otherwise only the value with the last call will be set.</p>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOptionName</tt>
   <dd>        The option name 
 </dd>
    <dt><tt> iOptionValueList</tt>
   <dd>        The value list to be set for the option 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The return value:
 <ul>
 <li><tt>S_OK</tt> The option has been successfully valuated. </li>
 <li><tt>E_INVALIDARG</tt>: <tt>iOptionName</tt> is empty or <tt>iOptionValueList</tt> is an empty list </li>
 <li><tt>E_FAIL</tt> This option can not be valuated:
 You can use 
<script type="text/javascript"> activateLinkAnchor('CATError','','CATError') </script> object to retrieve the complete information regarding the failure. <ul>
 <li> <tt>iOptionName</tt> is not a valid option of the current bach application, or </li>
 <li> <tt>iOptionValueList</tt> contains invalid values for the <tt>iOptionName</tt> option. <li>
 </ul>
 </ul>
 </dl>
</dl>
</dl>
<a name="SetReportParameters"></a><a name="SetReportParameters(CATString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>SetReportParameters</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetReportParameters</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iOptionName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iOptionValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets Report parameters.
 <br><br><b>Role:</b> This method allows you to define Report section values for the current batch application.
 PLMBatch official documentation have to publish the list of possible options for an application.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOptionName</tt>
   <dd>        The Report option that is valuated. The list of possible option is documented in the PLMBatch Data Access CAA documentation.
 </dd>
    <dt><tt> iOptionValue</tt>
   <dd>        Value attached to the option 'iOptionName'. The list of possible values of every iOptionName is documented in the PLMBatch Data Access CAA documentation. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The return value:
 <ul>
 <li><tt>S_OK</tt> The option has been successfully valuated. </li>
 <li><tt>E_INVALIDARG</tt>: Invalid input
 <tt>iOptionName</tt> is not a valid option of the application or 
 <tt>iOptionValue </tt> contains invalid value for the iOptionName option. </li>
 <li><tt>E_FAIL</tt> This option can not be valuated:
 You can use 
<script type="text/javascript"> activateLinkAnchor('CATError','','CATError') </script> object to retrieve the complete information regarding the failure. <ul>
 <li> <tt>iOptionName</tt> is not a valid option of the current bach application, or </li>
 <li> <tt>iOptionValue</tt> contains invalid values for the <tt>iOptionName</tt> option. <li>
 </ul>
 </ul>
 </dl>
</dl>
</dl>
<a name="SetSelectedObjects"></a><a name="SetSelectedObjects(CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>SetSelectedObjects</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSelectedObjects</b>(<td> const <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>iListofPath</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Communicates the list of V5 documents that are to be processed by batch applications. 
 <br><br><b>Role:</b> In a more global view, this service is dedicated to the setting of V5 documents for batch processing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListofPath</tt>
   <dd> 		The List of complete path of the V5 documents to process within the batch process. Selected objects are added to previously 
	    set objects in case of several call. Empty list resets all previously set list.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>E_FAIL</tt> <dd> if all the documents can not be added. Almost one document does not exist, or does not have 
   read access, or has a type (extension) that is not correct or not supported by the batch application.   
    <br>Use CATError object to retrieve the complete information regarding the failure.
    <dt><tt>S_OK</tt>  <dd> if the list of documents have been successfully set. 
  </dl>
</dl>
</dl>
<a name="SetSelectedObjects"></a><a name="SetSelectedObjects(CATLISTP(CATIAdpPLMIdentificator)&amp;)"></a> <dt> o <b>SetSelectedObjects</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSelectedObjects</b>(<td> const <script type="text/javascript"> activateLink('CATLISTP(CATIAdpPLMIdentificator)','CATLISTP(CATIAdpPLMIdentificator)&amp;')</script> <td><tt>iListofObjects</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Communicates the list of PLM Components to be processed by the batch application. 
 <br><br><b>Role:</b> In a more global view, this service is dedicated to setting of PLM Components for batch processing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListofObjects</tt>
   <dd> 		The list of PLM Components to be processed by the batch application. Selected objects are added to previously set objects 
      in case of several calls. 
		Empty list resets all previously set list.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>E_FAIL</tt> <dd> if almost one object can not be added. Almost one object does not exist, or does not have read access, 
	 or does not have a type (latetype) correct /supported by the batch application. 
    <br>Use CATError object to retrieve the complete information regarding the failure.
   <dt><tt>S_OK</tt>  <dd> if the list of objects has been successfully set.
   </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATPLMBatch.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPLMBatch</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

