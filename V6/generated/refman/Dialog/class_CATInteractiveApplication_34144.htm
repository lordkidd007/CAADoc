<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Dialog Class CATInteractiveApplication</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../Dialog.htm" href="../Dialog.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "Dialog";	}
		function getCurrentObjectName() { 
 	return "CATInteractiveApplication"; } 
	function getCurrentType() { 
 	return "class"; }  
 function writeClassCharacteristic() { 
 	    var objtype = getCurrentType(); 
 	    var objname = getCurrentObjectName(); 
 	    var objdsCh = getDsCharacteristic(objname, objtype); 
 	    if (objdsCh!=null) document.write(objdsCh); 
 	} 
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>Dialog <script type="text/javascript" > writeClassCharacteristic(); </script> CATInteractiveApplication</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATInteractiveApplication_34144','CATInteractiveApplication','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATInteractiveApplication</b>
</p>
<p>
<b><i> base class for all interactive applications.</i></b><br>

 <b>Role</b>: Base class for an interactive application,
 whether it displays only a single dialog window, a classical Single 
 Document Interface (SDI) application, or a Multiple Document 
 Interface (MDI) application such as CATIA Version 5.
 <p>
 To create your interactive application, you should: 
 <ul>
 <li>Create a class for your application that derives from 
 CATInteractiveApplication</li> 
 <li>Override at least the methods BeginApplication and EndApplication</li>
 </ul>
 To not instanciate this class directly.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATInteractiveApplication(CATCommand*,CATString&amp;)"><b>CATInteractiveApplication</b></a>(CATCommand*,CATString&amp;)
<dd>  Constructs an interactive application.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BuildApplicationEnvironment(int,char**,char**)"><b>BuildApplicationEnvironment</b></a>(int,char**,char**)
<dd>  Initializes the application environment.
 <dt> o 
    <a href="#Destroy()"><b>Destroy</b></a>()
<dd>  Terminate the application.
 <dt> o 
    <a href="#EndApplication()"><b>EndApplication</b></a>()
<dd>  Application mean to transmit the return code to this software.
 <dt> o 
    <a href="#GetArgs(int*,char***)"><b>GetArgs</b></a>(int*,char***)
<dd>  Retrieve the arguments passed to the application.
 <dt> o 
    <a href="#GetArgs()"><b>GetArgs</b></a>()
<dd>  Retrieve the arguments passed to the application.
 <dt> o 
    <a href="#GetUIClass()"><b>GetUIClass</b></a>()
<dd>  Retrieve the user interface class (P1, P2, P3).
 <dt> o 
    <a href="#SetAutomaticContextualHelp()"><b>SetAutomaticContextualHelp</b></a>()
<dd>  Request that the contextual help be automatically set to any control of 
 any window.
 <dt> o 
    <a href="#SetBusyCursor()"><b>SetBusyCursor</b></a>()
<dd>  Request that the display cursor be changed to a busy cursor.
 <dt> o 
    <a href="#SetSplashScreen(CATString&amp;)"><b>SetSplashScreen</b></a>(CATString&amp;)
<dd>  Assign a splash screen.
 <dt> o 
    <a href="#UpdateDisplay()"><b>UpdateDisplay</b></a>()
<dd>  Request that the display be updated.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATInteractiveApplication"></a><a name="CATInteractiveApplication(CATCommand*,CATString&amp;)"></a> <dt> o <b>CATInteractiveApplication</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATInteractiveApplication</b>(<td><script type="text/javascript"> activateLink('CATCommand','CATCommand*')</script> <td><tt>iParent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iApplicationName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an interactive application.
 <br><b>Role:</b>
 Note that, deriving this class, your interactive application constructor 
 should have a single argument: its name. When calling this base class
 constructor from the derived class one, a NULL value should be passed
 as iParent.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParent</tt>
   <dd>   The parent class in the </dd>
<script type="text/javascript"> activateLinkAnchor('CATCommand','','CATCommand') </script> agregation    hierarchy. 
 
    <dt><tt> iApplicationName</tt>
   <dd>   The application name.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="BuildApplicationEnvironment"></a><a name="BuildApplicationEnvironment(int,char**,char**)"></a> <dt> o <b>BuildApplicationEnvironment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>BuildApplicationEnvironment</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iArgc</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char**')</script> <td><tt>iArgv</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char**')</script> <td><tt>iEnvVariableList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initializes the application environment.
 <p>
 Called with UNIX only.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArgc</tt>
   <dd>   The number of arguments passed to the application. 
 </dd>
    <dt><tt> iArgv</tt>
   <dd>   The argument list. 
 </dd>
    <dt><tt> iEnvVariableList</tt>
   <dd>   The environment variable list.</dd>
</dl>
</dl>
</dl>
<a name="Destroy"></a><a name="Destroy()"></a> <dt> o <b>Destroy</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Destroy</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Terminate the application.
 The application must call this service when it wants to
 end the application. In practice, the application will call
 this service when the user selects File/Exit , and only
 at this moment.
 <p>
 This method calls the EndApplication method (that the application
 must overload) which transmit to this software your return code.
</dl>
<a name="EndApplication"></a><a name="EndApplication()"></a> <dt> o <b>EndApplication</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>EndApplication</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Application mean to transmit the return code to this software.
 The application calls the Destroy method (when the user selects 
 File/Exit, see 
<script type="text/javascript"> activateLinkAnchor('','Destroy','Destroy') </script>, which calls the EndApplication  method. You overload the EndApplication method, transmitting this
 way the recturn code to this software.
</dl>
<a name="GetArgs"></a><a name="GetArgs(int*,char***)"></a> <dt> o <b>GetArgs</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetArgs</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oArgCount</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char***')</script> <td><tt>oArgList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieve the arguments passed to the application.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oArgCount</tt>
   <dd>   The number of arguments passed to the application. 
 </dd>
    <dt><tt> oArgList</tt>
   <dd>   The argument list. 
   The variable to pass here as a parameter has to be contructed the
   following way: you declare a char** in the calling service and 
   pass its address as oArgList to the GetArgs of your class
   deriving from CATInteractiveApplication.</dd>
</dl>
</dl>
</dl>
<a name="GetArgs"></a><a name="GetArgs()"></a> <dt> o <b>GetArgs</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&')</script>  <b>GetArgs</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieve the arguments passed to the application.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The argument list.
</dl>
</dl>
<a name="GetUIClass"></a><a name="GetUIClass()"></a> <dt> o <b>GetUIClass</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetUIClass</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieve the user interface class (P1, P2, P3).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The user interface style. 
   <br><b>Legal values</b>: <tt>1</tt> if the style is P1,
   or <tt>2</tt> if the style is P2, or <tt>3</tt> if the style is P3.
</dl>
</dl>
<a name="SetAutomaticContextualHelp"></a><a name="SetAutomaticContextualHelp()"></a> <dt> o <b>SetAutomaticContextualHelp</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAutomaticContextualHelp</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Request that the contextual help be automatically set to any control of 
 any window. 
 <p>
 This service will be called only once during execution.
 Then, when this service has been called, activating "What's This" command
 becomes available to the end-user. To activate the "What's This" command, 
 the end-user will have to select the possible dedicated icon or, on Windowsonly, 
 the panel question mark selection, or, on WIndows and UNIX, the panel help 
 button selection. 
 <p>
 We remind you what the "What's This" command is.  
 It turns the cursor to a question mark, and then, 
 when the end-user clicks a control, displays the control associated 
 "Long Help" in a balloon. The clicks, after displaying the balloon,
 ends the current "What's This" command.
 Entering the "What's This" command will be done, at the Dialog framework
 level, through calling the QueryHelpOnContext method on any 
<script type="text/javascript"> activateLinkAnchor('CATDlgWindow','','CATDlgWindow') </script> .
</dl>
<a name="SetBusyCursor"></a><a name="SetBusyCursor()"></a> <dt> o <b>SetBusyCursor</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetBusyCursor</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Request that the display cursor be changed to a busy cursor.
</dl>
<a name="SetSplashScreen"></a><a name="SetSplashScreen(CATString&amp;)"></a> <dt> o <b>SetSplashScreen</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSplashScreen</b>(<td><script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iFileName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assign a splash screen.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd>   The splash file name. The extension must not be appended.
   The file will be a .png or a .bmp picture.
   It must be located in the splashscreens directory of the 
   graphic directory defined using the <tt>CATGraphicPath</tt> environment variable.</dd>
</dl>
</dl>
</dl>
<a name="UpdateDisplay"></a><a name="UpdateDisplay()"></a> <dt> o <b>UpdateDisplay</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>UpdateDisplay</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Request that the display be updated.
 At the end of a given interaction, the panels display is automatically
 updated (the X server does it), thus no call to this service has 
 to be made. A call to this service will be made only if, during a
 long process, the application wants to update the display so that to
 give a regular feedback to the user.
</dl>
<hr>
 This object is included in the file: <b>CATInteractiveApplication.h</b><br>
If needed, your Imakefile.mk should include the module: <b>DI0PANV2</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

