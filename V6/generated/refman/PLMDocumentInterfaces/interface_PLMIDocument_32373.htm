<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>PLMDocumentInterfaces Interface PLMIDocument</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../PLMDocumentInterfaces.htm" href="../PLMDocumentInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "PLMDocumentInterfaces";	}
		function getCurrentObjectName() { 
 	return "PLMIDocument"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>PLMDocumentInterfaces Interface PLMIDocument</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_PLMIDocument_32373','PLMIDocument','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>PLMIDocument</b>
</p>
<p>
<b><i> Interface managing Documents.</i></b><br>


 <br><b>Role</b>: This interface is implemented by Documents. You cannot use it in a RACE environment.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CheckInFile(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CheckInFile</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Check In a file to the document.
 <dt> o 
    <a href="#CheckOutFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CheckOutFile</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Check out a file from the document.
 <dt> o 
    <a href="#CreateFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateFile</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Create a file on the document.
 <dt> o 
    <a href="#DeleteFile(CATUnicodeString&amp;)"><b>DeleteFile</b></a>(CATUnicodeString&amp;)
<dd>  Delete a file on the document.
 <dt> o 
    <a href="#DownloadFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>DownloadFile</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Downloads a file from the document.
 <dt> o 
    <a href="#GetParents(CATListPtrCATIAdpPLMIdentificator&amp;)"><b>GetParents</b></a>(CATListPtrCATIAdpPLMIdentificator&amp;)
<dd>  Gets Parents of current Document.
 <dt> o 
    <a href="#ListFileNames(CATListValCATUnicodeString&amp;)"><b>ListFileNames</b></a>(CATListValCATUnicodeString&amp;)
<dd>  Retrieves the list of file name for a given document.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CheckInFile"></a><a name="CheckInFile(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CheckInFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CheckInFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iOldFileName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iNewFilePath</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFileComment</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Check In a file to the document.
 <br><b>Role</b>:This method check in a file on the document. Previous version of the file will be replaced.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOldFileName</tt>
   <dd> [in]   Name of the file which is to be replaced.
 </dd>
    <dt><tt> iNewFilePath</tt>
   <dd> [in]   The full path from which the file will be uploaded, it should be an existing file(optional). 
   If the file is not Checked Out an error will be returned. 
 </dd>
    <dt><tt> iFileComment</tt>
   <dd> [in]   Comment associated with the file (optional). 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_CHECKIN_FILEPATH_1</tt> : Invalid input file path. Please check the file name.</li>
          <li><tt>DD_CHECKIN_FILEPATH_2</tt> : Invalid input file path: /P1. Please check if the file path is accessible.</li>
          <li><tt>DD_CHECKIN_FILEPATH_3</tt> : Invalid input file path: /P1. The file name /P2 already exists on the document.</li>
        </ul>
   </ul>
</dl>
</dl>
<a name="CheckOutFile"></a><a name="CheckOutFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CheckOutFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CheckOutFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFileName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iCheckOutPath</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Check out a file from the document.
 <br><b>Role</b>:This method check out the file content in the provided path.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd> [in]	  The file name to check out. If this file name does not exist, an error will be returned.
 </dd>
    <dt><tt> iDownloadPath</tt>
   <dd> [in]   The path on which the file will be check out. It should be an existing writable directory. The file will be created with name <tt>iFileName</tt>.  
   If there is a file with that name in the directory, it will be overwritten.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_INVALIDARG if the input file name is null, or does not exist.</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_DOWNLOAD_CHECKEDOUT</tt> : Already Checked Out: /P1. File is already checked out.</li>
          <li><tt>DD_DOWNLOAD_FILENAME</tt>   : Invalid input file name: /P1. Please check if the file name exists on the document.</li>
          <li><tt>DD_DOWNLOAD_FILEPATH</tt>   : Invalid input path for checkout : /P1. Please check the permissions.</li>
        </ul>
   </ul>
</dl>
</dl>
<a name="CreateFile"></a><a name="CreateFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFileComment</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Create a file on the document.
 <br><b>Role</b>:This method creates a new file on the document. No file with the same name should exist on the document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilePath</tt>
   <dd> [in]   The full path from which the file will be uploaded, it should be an existing file. The file will be created with name of the file at the end of the path.  
   If there is a file with that name on the document, an error will be returned. 
 </dd>
    <dt><tt> iFileComment</tt>
   <dd> [in]   Comment associated with the file (optional). 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_INVALIDARG if the input file path is null, or is file is not found,</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_UPLOAD_FILEPATH_1</tt> : Invalid input file path: /P1. Please check if the file path is accessible.</li>
          <li><tt>DD_UPLOAD_FILEPATH_2</tt> : Invalid input file path. The file name /P1 already exists on the document.</li>
        </ul>
   </ul>
</dl>
</dl>
<a name="DeleteFile"></a><a name="DeleteFile(CATUnicodeString&amp;)"></a> <dt> o <b>DeleteFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DeleteFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFileName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Delete a file on the document.
 <br><b>Role</b>:This method delete a file on the document. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd> [in]   The file name to be deleted.  
   If there is no file with that name on the document, an error will be returned. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_INVALIDARG if the input file path is null, or is file is not found,</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_DELETE_FILENAME</tt> : Invalid input file name: /P1. Please check if the file name exists on the document.</li>
        </ul>
   </ul>
</dl>
</dl>
<a name="DownloadFile"></a><a name="DownloadFile(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>DownloadFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DownloadFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFileName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iDownloadPath</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Downloads a file from the document.
 <br><b>Role</b>:This method downloads the file content in the provided path.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFileName</tt>
   <dd> [in]	  The file name to be downloaded. If this file name does not exist, an error will be returned.
 </dd>
    <dt><tt> iDownloadPath</tt>
   <dd> [in]   The path on which the file will be downloaded. It should be an existing writable directory. The file will be created with name <tt>iFileName</tt>.  
   If there is a file with that name in the directory, it will be overwritten.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_INVALIDARG if the input file name is null, or does not exist.</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_DOWNLOAD_FILENAME</tt> : Invalid input file name: /P1. Please check if the file name exists on the document.</li>
          <li><tt>DD_DOWNLOAD_FILEPATH</tt> : Invalid input path for download : /P1. Please check the permissions.</li>
        </ul>
   </ul>
</dl>
</dl>
<a name="GetParents"></a><a name="GetParents(CATListPtrCATIAdpPLMIdentificator&amp;)"></a> <dt> o <b>GetParents</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParents</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATIAdpPLMIdentificator','CATListPtrCATIAdpPLMIdentificator&amp;')</script> <td><tt>oParentsObjects</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets Parents of current Document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oParentsObjects</tt>
   <dd>   The Parents of current Document.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
    <li>S_OK if the parents are successfully retrieved.</li>
    <li>E_FAIL otherwise.</li>
   </ul>
</dl>
</dl>
<a name="ListFileNames"></a><a name="ListFileNames(CATListValCATUnicodeString&amp;)"></a> <dt> o <b>ListFileNames</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ListFileNames</b>(<td><script type="text/javascript"> activateLink('CATListValCATUnicodeString','CATListValCATUnicodeString&amp;')</script> <td><tt>oFileNames</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the list of file name for a given document.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFileNames</tt>
   <dd> [out]   The list of file name associated to a document.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    <ul>
    <li>S_OK if the operation was successfull,</li>
    <li>E_FAIL if an error occurs. In this case, more information can be retrieved using the CATError::CATGetLastError method.@see CATError.
        The possible <b>returned errors</b> are:</li>
        <ul>
          <li><tt>DD_DOC_NOFILE</tt> : No file associated to the document.</li>
        </ul>
   </ul>
</dl>
</dl>
<hr>
 This object is included in the file: <b>PLMIDocument.h</b><br>
If needed, your Imakefile.mk should include the module: <b>PLMDocumentInterfacesItf</b>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

