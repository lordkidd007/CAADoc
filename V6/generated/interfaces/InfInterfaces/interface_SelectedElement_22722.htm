<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>InfInterfaces SelectedElement (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../InfInterfaces.htm" href="../InfInterfaces.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "InfInterfaces";	}
		function getCurrentObjectName() { 
 	return "SelectedElement"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>SelectedElement<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_SelectedElement_22722','SelectedElement','0');</script>
<b><i> Abstract object which allows manipulating an element selected during a selection operation.</i></b><br>

 <dl>
  <dt> <b>See also:</b> 
  <dd> <script type="text/javascript"> activateLinkAnchor('CATIASelection','SelectElement','CATIASelection.SelectElement') </script>
</dl>
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#LeafProduct"><b>LeafProduct</b></a>
<dd>  Returns the leaf product instance which aggregates this selected element in the specification tree.
 <dt>
    <a href="#Reference"><b>Reference</b></a>
<dd>  Returns a Reference version of the Value property.
 <dt>
    <a href="#Type"><b>Type</b></a>
<dd>  Returns the filter string that the selected element matched during the selection operation.
 <dt>
    <a href="#Value"><b>Value</b></a>
<dd>  Returns the actual selected automation object.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#GetCoordinates"><b>GetCoordinates</b></a>
<dd>  Returns the coordinates of the pick point.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="LeafProduct"><dt>

<table><tr><td>o Property <b>LeafProduct</b>(<td>) As <script type="text/javascript"> activateLink('CATIABase','CATIABase')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the leaf product instance which aggregates this selected element in the specification tree.
 <br><b>Role</b>: The 
<script type="text/javascript"> activateLinkAnchor('CATIABase','','CATIABase') </script> returned is a 
<script type="text/javascript"> activateLinkAnchor('CATIAVPMRepInstance','','CATIAVPMRepInstance') </script> , 
<script type="text/javascript"> activateLinkAnchor('CATIAVPMInstance','','CATIAVPMInstance') </script> or 
<script type="text/javascript"> activateLinkAnchor('CATIAVPMReference','','CATIAVPMReference') </script> if a product appears in the specification tree, in the path corresponding to the current selection, or a fake 
<script type="text/javascript"> activateLinkAnchor('CATIABase','','CATIABase') </script> whose 
<script type="text/javascript"> activateLinkAnchor('CATIABase','Name','CATIABase.Name') </script> property is equal to "InvalidLeafProduct" otherwise.</br> Used in combination with 
<script type="text/javascript"> activateLinkAnchor('CATIABase','Parent','CATIABase.Parent') </script> property (which enables navigation in the object structure), the script can browse the path of the selected element.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example supposes that a product structure similar to the following one be opened:
 <pre>
  +------------+ 
  !Product55228!                                                  <- VPMReference
  +------------+
      !
      +- Representation55228 (instance hidden)
      !
      +- Product55227 (Product55227.1)                            <- VPMReference (VPMInstance)
            !
            +- Product55226 (Product55226.1)                      <- VPMReference (VPMInstance)
                  !
                  +- Representation55226 (instance hidden)        <- Part/VPMRepReference (VPMRepInstance)
                            !
                            +- PartBody
                                  !
                                  +- Pad.1                        <- Select the Pad
 </pre> 

 The leaf product instance in this case is Representation55226.1 (adheres to CATIAVPMRepInstance).<br>
 <br>
 The script asks the user to select a feature. It then browses the specification tree with a bottom-up approach starting from the selected element, and displays message boxes containing the names and types of the automation objects.
 When the bottom-up approach cannot continue, a top-down approach is started from the root product, to display the names, types, and abcissa of the encountered products.
 <pre>
 Option Explicit

 Sub CATMain()
 
   Dim Selection
   Set Selection = CATIA.ActiveEditor.Selection
 
   'We ask the user to select a feature
   Dim Status, InputObjectType(0)
   InputObjectType(0) = "AnyObject" 
   Status = Selection.SelectElement(InputObjectType, "Select a feature", False)
   If (Status = "Cancel") Then Exit Sub
 
   Dim Feature, LeafProduct
   Set Feature = Selection.Item(1).Value
   Set LeafProduct = Selection.Item(1).LeafProduct
   MsgBox "Selected feature name = " & Feature.Name & "; type = " & TypeName(Feature)
   MsgBox "Corresponding LeafProduct name = " & LeafProduct.Name & "; type = " & TypeName(LeafProduct)
 
   If (LeafProduct.Name="InvalidLeafProduct") Then Exit Sub
 
   Dim BottomUp, WholeTreeProcessed, Node, NextNode
   BottomUp = True
   WholeTreeProcessed = False
   Set Node = Feature
 
   MsgBox "**** Starting bottom-up browsing ****"
 
   Dim Position, AxisComponentsArray(11)
   
   On Error Resume Next
   Do While (Not WholeTreeProcessed)
     MsgBox "Current node name = " & Node.Name & "; type = " & TypeName(Node)
     
     'We determine the next automation tree Node or product
     If (BottomUp) Then
       Err.Clear
       Set NextNode = Node.Parent      'this method will fail for representations (no parent defined because of multirepresentation capability)
       If (Err.Number <> 0) Then
         On Error GoTo 0              'deactivate error handler

         'Bottom-up browsing cannot go upper than the representation. Then start a top-down approach starting from the root product.
         'VPM editor must be active for top-down browsing
         If TypeName(CATIA.ActiveEditor.ActiveObject) <> "VPMReference" Then Exit Sub

         Dim oContext
         Set oContext= CATIA.ActiveEditor.GetService("PLMProductContext")
         Set NextNode = oContext.RootOccurrence
         BottomUp = False
         MsgBox "**** Bottom-up browsing ended. Starting top-down browsing. ****"
       End If
     Else
       If TypeName(Node) = "VPMOccurrence" Then
         'Our current node is a VPMOccurrence. We display its abscissa in the tree
         Set Position = Node.Position
         Call Position.GetComponents(AxisComponentsArray)    'Format: (x0,x1,x2) (y3,y4,y5) (z6,z7,z8) (o9,o10,o11)
         MsgBox "Position of the current VPMOccurrence = " & AxisComponentsArray(9)
       End If
       
       'Can we find our leaf product among the VPMRepInstances aggregated under the current VPMReference?
       'If so, break the loop
       Dim ReferenceNode
       If TypeName(Node) = "VPMRootOccurrence" Then
         Set ReferenceNode = Node.ReferenceRootOccurrenceOf
       Else
         Set ReferenceNode = Node.InstanceOccurrenceOf.ReferenceInstanceOf
       End If
       If (ReferenceNode.RepInstances.Count > 0) Then    
         Dim oRepInstance
         For Each oRepInstance In ReferenceNode.RepInstances
           If (oRepInstance.Name = LeafProduct.Name) Then
             WholeTreeProcessed = True
             MsgBox "**** Found the leaf product under " & Node.Name & ". End of loop. ****"
             Exit For
           End If
         Next
       End If
       
       'Otherwise, go down a VPMOccurrence level (in this example, we do not support multiple occurrences, but a recursive approach would make it easily)
       If (Not WholeTreeProcessed) Then
         Set NextNode = Node.Occurrences.Item(1)
       End If
     End If
     
     Set Node = NextNode
   Loop
 
 End Sub
 </pre>
 The following message boxes should be displayed:
 <pre>
     Selected feature name = Pad.1; type = Pad
     Corresponding LeafProduct name = Representation55226.1; type = VPMRepInstance
     **** Starting bottom-up browsing ****
     Current node name = Pad.1; type = Pad
     Current node name = Shapes; type = Shapes
     Current node name = PartBody; type = Body
     Current node name = Bodies; type = Bodies
     Current node name = Representation55226 --- IN_WORK; type = Part
     Current node name = ---Representation55226; type = VPMRepReference
     **** Bottom-up browsing ended. Starting top-down browsing. ****
     Current node name = ---Product55228; type = VPMRootOccurrence
     Current node name = ---Product55227.2; type = VPMOccurrence
     Position of the current VPMOccurrence = 0
     Current node name = ---Product55226.1; type = VPMOccurrence
     Position of the current VPMOccurrence = 0
     **** Found the leaf product under Product55226.1. End of loop. ****
 </pre></pre></dd>
</dl>
</dl>
<a name="Reference"><dt>

<table><tr><td>o Property <b>Reference</b>(<td>) As <script type="text/javascript"> activateLink('Reference','Reference')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns a Reference version of the Value property.
 <br><b>Role</b>: Returns a 
<script type="text/javascript"> activateLinkAnchor('CATIAReference','','CATIAReference') </script> version of 
<script type="text/javascript"> activateLinkAnchor('','Value','Value') </script> .
</dl>
<a name="Type"><dt>

<table><tr><td>o Property <b>Type</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the filter string that the selected element matched during the selection operation.
 <br><b>Note</b>: This property returns a string describing the first of the filters passed as the iFilterType
 parameter of interactive selection operations that the selected element fulfilled. This string constant may be
 an automation object name corresponding to the iFilterType parameter, or a 
<script type="text/javascript"> activateLinkAnchor('CATSelectionFilter','','CATSelectionFilter') </script> value name. 
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  <pre>
 Set Selection = CATIA.ActiveEditor.Selection
 ' We ask the user to select a Prism or a Hole
 ReDim InputObjectType(1)
 InputObjectType(0) = "Prism"
 InputObjectType(1) = "Hole"
 Status = Selection.SelectElement(InputObjectType, "Select a prism or a hole", True)
 If (Status = "Cancel") Then Exit Sub
 AutomationType = Selection.Item(1).Type</pre>
 If the user selects a Pad, the script <tt>AutomationType</tt> variable will contain <tt>"Prism"</tt>
 and not <tt>"Pad"</tt>, as <tt>"Prism"</tt> was the first filter that the Pad matched (Pads' fathers are Prisms).
 <br><p>Therefore, you may also want to use VB's native TypeName function instead of this property to get the actual type of the selected element: in this case, <tt>MsgBox TypeName(Selection.Item(1).Value)</tt> will display Pad.</pre></dd>
</dl>
</dl>
<a name="Value"><dt>

<table><tr><td>o Property <b>Value</b>(<td>) As <script type="text/javascript"> activateLink('CATBaseDispatch','CATBaseDispatch')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the actual selected automation object.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="GetCoordinates"><dt>

<table><tr><td>o Sub <b>GetCoordinates</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>ioPoint</tt>)</table></dt>
<dl>
  <dd>
 Returns the coordinates of the pick point.  
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoint</tt>
   <dd> The coordinates of the pick point, i.e. the hit between the geometric object and the cursor.</br> 
 The length of this parameter can be 2 or 3. <br>
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example retrieves the coordinates of the pick point in the
 array myArray:
<pre>
 Dim oSelElem As SelectedElement
 Set oSelElem = CATIA.ActiveEditor.Selection.Item(1)
 ReDim myArray(2)
 oSelElem.GetCoordinates myArray
</pre></pre></dd>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

