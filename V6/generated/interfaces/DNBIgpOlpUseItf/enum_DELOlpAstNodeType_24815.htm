<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DNBIgpOlpUseItf Enumeration DELOlpAstNodeType</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DNBIgpOlpUseItf.htm" href="../DNBIgpOlpUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DNBIgpOlpUseItf";	}
		function getCurrentObjectName() { 
 	return "DELOlpAstNodeType"; } 
	function getCurrentType() { 
 	return "enum"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DELOlpAstNodeType <font size=-1>(Enumeration)</font></h1>
<pre>
enum <b>DELOlpAstNodeType</b> {
  delAstROOT,
  delAstFILE,
  delAstMODULE,
  delAstTASK,
  delAstCONTROLLER,
  delAstINSTRUCTIONS,
  delAstPOSITIONS,
  delAstDECLARATIONS,
  delAstPARAMETERS,
  delAstARGUMENTS,
  delAstSTATEMENTS,
  delAstHEADER,
  delAstSTATEMENT,
  delAstMOTION,
  delAstVARIABLE,
  delAstRUN,
  delAstIF,
  delAstELSEIF,
  delAstELSE,
  delAstENDIF,
  delAstFOR,
  delAstENDFOR,
  delAstWHILE,
  delAstENDWHILE,
  delAstDO,
  delAstUNTIL,
  delAstTEST,
  delAstCASE,
  delAstCASEDEFAULT,
  delAstENDTEST,
  delAstGOTO,
  delAstLABEL,
  delAstASSIGN,
  delAstRETURN,
  delAstWAIT,
  delAstEXPRESSION,
  delAstGROUPEXP,
  delAstUNARYEXP,
  delAstBINARYEXP,
  delAstCONDEXP,
  delAstFUNCTION,
  delAstTOKEN,
  delAstKEYWORD,
  delAstIDENTIFIER,
  delAstSTRING,
  delAstCOMMENT,
  delAstCONST_INTEGER,
  delAstCONST_DOUBLE,
  delAstCONST_BOOLEAN,
  delAstOPERATOR,
  delAstFORMAT,
  delAstEOL,
  delAstPULSE
}
</pre>
<b><i> Classifies the language element stored in a node.</i></b><br>
<BR>
 see <script type="text/javascript"> activateLinkAnchor('DELMIAOlpAstNode','Type','DELMIAOlpAstNode.Type') </script> <P><b><i>Branch Nodes</i></b> should be one of the following types.
 </P>
 <dl>
   <dt><tt>delAstROOT</tt></dt>
   <dd>Top level node of the entire AST tree.<BR>This is the only node type where position in the tree matters.  All children of the root node are individual robot program files.  The ID of each child node is the file name with extension.</dd>
   <dt><tt>delAstFILE</tt></dt>
   <dd>Robot file</tt></dt>
   <dt><tt>delAstMODULE</tt></dt>
   <dd>Rapid MODULE</tt></dt>
   <dt><tt>delAstTASK</tt></dt>
   <dd>Robot task</dd>
   <dt><tt>delAstCONTROLLER</tt></dt>
   <dd>Controller information<BR>For example profile definitions, global position definitions, etc.</dd>
   <dt><tt>delAstINSTRUCTIONS</tt></dt>
   <dd>List of instructions.<BR>Each child of this node should be an instruction or comment.</dd>
   <dt><tt>delAstPOSITIONS</tt></dt>
   <dd>List of position definitions.<BR>Used in languages where positions definitions are done in the header or footer.</dd>
   <dt><tt>delAstDECLARATIONS</tt></dt>
   <dd>List of declarations.<BR>Each child of this node should be a declaration or comment.</dd>
   <dt><tt>delAstPARAMETERS</tt></dt>
   <dd>List of parameters.<BR>Each child of this node should be a task declaration parameter.</dd>
   <dt><tt>delAstARGUMENTS</tt></dt>
   <dd>List of arguments<BR>Each child of this node should be a run argument.</dd>
   <dt><tt>delAstSTATEMENTS</tt></dt>
   <dd>List of statements.<BR>General purpose list of items.</dd>
   <dt><tt>delAstHEADER</tt></dt>
   <dd>A generic header or footer statement</dd>
   <dt><tt>delAstSTATEMENT</tt></dt>
   <dd>Used for branches where no other type applies.<BR>Often used for grouping a part of an instruction.  When used in an instruction list this is a custom instruction.</dd>
   <dt><tt>delAstMOTION</tt></dt>
   <dd>A robot motion instruction</dd>
   <dt><tt>delAstVARIABLE</tt></dt>
   <dd>A variable</dd>
   <dt><tt>delAstRUN</tt></dt>
   <dd>A task call</dd>
   <dt><tt>delAstIF</tt></dt>
   <dd>An IF block</dd>
   <dt><tt>delAstELSEIF</tt></dt>
   <dd>An ELSEIF block</dd>
   <dt><tt>delAstELSE</tt></dt>
   <dd>An ELSE block</dd>
   <dt><tt>delAstENDIF</tt></dt>
   <dd>end IF block</dd> 
   <dt><tt>delAstFOR</tt></dt>
   <dd>A FOR block</dd>
   <dt><tt>delAstENDFOR</tt></dt>
   <dd>end FOR block</dd>
   <dt><tt>delAstWHILE</tt></dt>
   <dd>A WHILE block</dd>
   <dt><tt>delAstENDWHILE</tt></dt>
   <dd>end WHILE block</dd>
   <dt><tt>delAstDO</tt></dt>
   <dd>A DO UNTIL block</dd>
   <dt><tt>delAstUNTIL</tt></dt>
   <dd>end DO UNTIL block</dd>
   <dt><tt>delAstTEST</tt></dt>
   <dd>start TEST block</dd>
   <dt><tt>delAstCASE</tt></dt>
   <dd>A CASE block</dd>
   <dt><tt>delAstCASEDEFAULT</tt></dt>
   <dd>A DEFAULT CASE block</dd>
   <dt><tt>delAstENDTEST</tt></dt>
   <dd>end TEST block</dd>
   <dt><tt>delAstGOTO</tt></dt>
   <dd>A GOTO statement</dd>
   <dt><tt>delAstLABEL</tt></dt>
   <dd>A GOTO label</dd>
   <dt><tt>delAstASSIGN</tt></dt>
   <dd>An assign statement</dd>
   <dt><tt>delAstRETURN</tt></dt>
   <dd>A return statement</dd>
   <dt><tt>delAstWAIT</tt></dt>
   <dd>A wait statement</dd>
   <dt><tt>delAstEXPRESSION</tt></dt>
   <dd>An expression.</dd>
   <dt><tt>delAstGROUPEXP</tt></dt>
   <dd>An expression which has grouping (parentheses)</dd>
   <dt><tt>delAstUNARYEXP</tt></dt>
   <dd>An expression with a unary operator (e.g. -x)</dd>
   <dt><tt>delAstBINARYEXP</tt></dt>
   <dd>An expression with a binary operator (e.g. x+y)</dd>
   <dt><tt>delAstCONDEXP</tt></dt>
   <dd>A conditional expression (e.g. "x?y:z" or "if x then y else z")</dd>
   <dt><tt>delAstFUNCTION</tt></dt>
   <dd>A a function expression (e.g. sin(x))</dd>
 </dl>
 <P><b><i>Leaf Nodes</i></b> should be one of the following types.</P>
 <dl>
   <dt><tt>delAstTOKEN</tt></dt>
   <dd>Used for leaf node where no other type applies</dd>
   <dt><tt>delAstKEYWORD</tt></dt>
   <dd>A keyword from the language</dd>
   <dt><tt>delAstIDENTIFIER</tt></dt>
   <dd>A variable name or other user definable identifier</dd>
   <dt><tt>delAstSTRING</tt></dt>
   <dd>A string value</dd>
   <dt><tt>delAstCOMMENT</tt></dt>
   <dd>A comment</dd>
   <dt><tt>delAstCONST_INTEGER</tt></dt>
   <dd>An integer literal value</dd>
   <dt><tt>delAstCONST_DOUBLE</tt></dt>
   <dd>A real number literal value</dd>
   <dt><tt>delAstCONST_BOOLEAN</tt></dt>
   <dd>A boolean literal value</dd>
   <dt><tt>delAstOPERATOR</tt></dt>
   <dd>A puntuation token or expression operator</dd>
   <dt><tt>delAstFORMAT</tt></dt>
   <dd>A string value with no meaning other than to control the formatting of the program text</dd>
   <dt><tt>delAstEOL</tt></dt>
   <dd>A special node which means end of line.<BR>The value of an EOL node should never be set.</dd>
 </dl>
<hr>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

