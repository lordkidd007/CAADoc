<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DNBIgpOlpUseItf OlpAstBranch (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DNBIgpOlpUseItf.htm" href="../DNBIgpOlpUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DNBIgpOlpUseItf";	}
		function getCurrentObjectName() { 
 	return "OlpAstBranch"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>OlpAstBranch<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_OlpAstBranch_20720','OlpAstBranch','0');</script>
<b><i> Represents a branch node of the Abstract Syntax Tree (AST).</i></b><br>
<BR>
 <font color="red">This interface can only be used by a translator
 within the Robotics Off-line Programming (OLP)
 Download or Upload command</font>.<BR>
 An OLP AST is a parsed version of a robot program in 
 the native language of the robot.  A branch is a collection 
 of nodes.<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#Id"><b>Id</b></a>
<dd>  Identifies the function of the node or otherwise
 helps the translator find a node among its siblings.
 <dt>
    <a href="#Instructions"><b>Instructions</b></a>
<dd>  The DELMIA instructions associated with this AST node.
 <dt>
    <a href="#Type"><b>Type</b></a>
<dd>  Classifies the language element stored in this node.
 <dt>
    <a href="#Value"><b>Value</b></a>
<dd>  The unparsed text contained by this node and all its children, without line endings.
 <dt>
    <a href="#ValueWithEOL"><b>ValueWithEOL</b></a>
<dd>  The unparsed text contained by this node and all its children, with line endings.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Append"><b>Append</b></a>
<dd>  Append a child node to this collection.
 <dt>
    <a href="#AppendEOL"><b>AppendEOL</b></a>
<dd>  Create and append a leaf node whose value is a new line.
 <dt>
    <a href="#AppendLeaf"><b>AppendLeaf</b></a>
<dd>  Create and append a leaf node to this collection.
 <dt>
    <a href="#AppendSpace"><b>AppendSpace</b></a>
<dd>  Create and append a leaf node whose value is a single space.
 <dt>
    <a href="#Clone"><b>Clone</b></a>
<dd>  Create a deep copy of the node.
 <dt>
    <a href="#CreateBranch"><b>CreateBranch</b></a>
<dd>  Creates a new branch node.
 <dt>
    <a href="#CreateLeaf"><b>CreateLeaf</b></a>
<dd>  Creates a new leaf node.
 <dt>
    <a href="#ExistsChildByID"><b>ExistsChildByID</b></a>
<dd>  Tests for existence of a child node with given id and if found returns it.
 <dt>
    <a href="#ExistsChildByType"><b>ExistsChildByType</b></a>
<dd>  Tests for existence of a child node with given type and if found returns it.
 <dt>
    <a href="#ExistsChildrenByID"><b>ExistsChildrenByID</b></a>
<dd>  Tests for existence of children with given id and if found 
 returns a list of nodes.
 <dt>
    <a href="#ExistsChildrenByType"><b>ExistsChildrenByType</b></a>
<dd>  Tests for existence of children with given type and if found 
 returns a list of nodes.
 <dt>
    <a href="#FindChildByID"><b>FindChildByID</b></a>
<dd>  Finds a child node which has the id and returns it.
 <dt>
    <a href="#FindChildByType"><b>FindChildByType</b></a>
<dd>  Finds a child node which has the specified type and returns it.
 <dt>
    <a href="#FindChildrenByID"><b>FindChildrenByID</b></a>
<dd>  Finds each child node which has the id and returns a list of nodes.
 <dt>
    <a href="#FindChildrenByType"><b>FindChildrenByType</b></a>
<dd>  Finds each child node which has the type and returns a list of nodes.
 <dt>
    <a href="#FindGrandChildDoubleValue"><b>FindGrandChildDoubleValue</b></a>
<dd>  Finds a child node which has the specified ID and then finds a 
 child of that node which is of type CONST_DOUBLE and returns the 
 value of that node as a double.
 <dt>
    <a href="#FindGrandChildIntValue"><b>FindGrandChildIntValue</b></a>
<dd>  Finds a child node which has the specified ID and then finds a 
 child of that node which is of type CONST_INTEGER and returns the 
 value of that node as an integer.
 <dt>
    <a href="#Insert"><b>Insert</b></a>
<dd>  Insert a child node to this collection.
 <dt>
    <a href="#Item"><b>Item</b></a>
<dd>  Retrieves a child node using its index or its ID.
 <dt>
    <a href="#Remove"><b>Remove</b></a>
<dd>  Remove a child node from the branch.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="Id"><dt>

<table><tr><td>o Property <b>Id</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> </table></dt>
<dl>
  <dd>
 Identifies the function of the node or otherwise
 helps the translator find a node among its siblings.<BR>
 For example an id could be used to identify a part of a motion statement
 (speed) or to identify the variable name in a list of declarations.
</dl>
<a name="Instructions"><dt>

<table><tr><td>o Property <b>Instructions</b>(<td>) As <script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> </table></dt>
<dl>
  <dd>
 The DELMIA instructions associated with this AST node.
 If it has not been set, the associated instructions are 
 retrieved from the parent.  Each value in the array 
 is a 
<script type="text/javascript"> activateLinkAnchor('DELMIAOlpInstruction','','DELMIAOlpInstruction') </script>.
</dl>
<a name="Type"><dt>

<table><tr><td>o Property <b>Type</b>(<td>) As <script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> </table></dt>
<dl>
  <dd>
 Classifies the language element stored in this node.<BR>
 For example: keyword, variable, comment, statement, or header.
</dl>
<a name="Value"><dt>

<table><tr><td>o Property <b>Value</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 The unparsed text contained by this node and all its children, without line endings.
 The value can only be set for leaf nodes.
</dl>
<a name="ValueWithEOL"><dt>

<table><tr><td>o Property <b>ValueWithEOL</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 The unparsed text contained by this node and all its children, with line endings.
 The value can only be set for leaf nodes.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Append"><dt>

<table><tr><td>o Sub <b>Append</b>(<td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>iChild</tt>)</table></dt>
<dl>
  <dd>
 Append a child node to this collection.<BR>
 NULL values are ignored.  They are not appended but the function still succeeds.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChild</tt>
   <dd> The child to append.</dd>
</dl>
</dl>
</dl>
<a name="AppendEOL"><dt>

<table><tr><td>o Sub <b>AppendEOL</b>(<td>)</table></dt>
<dl>
  <dd>
 Create and append a leaf node whose value is a new line.
</dl>
<a name="AppendLeaf"><dt>

<table><tr><td>o Sub <b>AppendLeaf</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iValue</tt>)</table></dt>
<dl>
  <dd>
 Create and append a leaf node to this collection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The new node's type.
 </dd>
    <dt><tt> iID</tt>
   <dd> The new node's ID.
 </dd>
    <dt><tt> iValue</tt>
   <dd> The new node's value.</dd>
</dl>
</dl>
</dl>
<a name="AppendSpace"><dt>

<table><tr><td>o Sub <b>AppendSpace</b>(<td>)</table></dt>
<dl>
  <dd>
 Create and append a leaf node whose value is a single space.
</dl>
<a name="Clone"><dt>

<table><tr><td>o Func <b>Clone</b>(<td>) As <script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> </table></dt>
<dl>
  <dd>
 Create a deep copy of the node.<BR>
 A node cannot have 2 parents, so you must clone it before adding it
 to another branch.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The new copy.
</dl>
</dl>
<a name="CreateBranch"><dt>

<table><tr><td>o Func <b>CreateBranch</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>) As <script type="text/javascript"> activateLink('OlpAstBranch','OlpAstBranch')</script> </table></dt>
<dl>
  <dd>
 Creates a new branch node.  The new node is not added to the children of this branch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The new node's type.
 </dd>
    <dt><tt> iID</tt>
   <dd> The new node's ID.
 </dd>
    <dt><tt> oNode</tt>
   <dd> </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The created node.
</dl>
</dl>
<a name="CreateLeaf"><dt>

<table><tr><td>o Func <b>CreateLeaf</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iValue</tt>) As <script type="text/javascript"> activateLink('OlpAstLeaf','OlpAstLeaf')</script> </table></dt>
<dl>
  <dd>
 Creates a new leaf node.  The new node is not added to the children of this branch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The new node's type.
 </dd>
    <dt><tt> iID</tt>
   <dd> The new node's ID.
 </dd>
    <dt><tt> iValue</tt>
   <dd> The new node's value.
 </dd>
    <dt><tt> oNode</tt>
   <dd> </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The created node.
</dl>
</dl>
<a name="ExistsChildByID"><dt>

<table><tr><td>o Func <b>ExistsChildByID</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>oChild</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Tests for existence of a child node with given id and if found returns it.  
 It is assumed that the ID is unique among all children of this node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The ID of the child to find.
 </dd>
    <dt><tt> oChild</tt>
   <dd> The child, if found.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if not found, -1 if found
</dl>
</dl>
<a name="ExistsChildByType"><dt>

<table><tr><td>o Func <b>ExistsChildByType</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>oChild</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Tests for existence of a child node with given type and if found returns it.  
 It is assumed that the ID is unique among all children of this node.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type of the child to find.
 </dd>
    <dt><tt> oChild</tt>
   <dd> The child, if found.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if not found, -1 if found
</dl>
</dl>
<a name="ExistsChildrenByID"><dt>

<table><tr><td>o Func <b>ExistsChildrenByID</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>oChildren</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Tests for existence of children with given id and if found 
 returns a list of nodes. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The ID of the children to find.
 </dd>
    <dt><tt> oChildren</tt>
   <dd> The children, if found.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if not found, -1 if found
</dl>
</dl>
<a name="ExistsChildrenByType"><dt>

<table><tr><td>o Func <b>ExistsChildrenByType</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>oChildren</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Tests for existence of children with given type and if found 
 returns a list of nodes.  
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type of the children to find.
 </dd>
    <dt><tt> oChildren</tt>
   <dd> The children, if found.
 </dd>
</dl>
</dl>
</dl>
<a name="FindChildByID"><dt>

<table><tr><td>o Func <b>FindChildByID</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>) As <script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> </table></dt>
<dl>
  <dd>
 Finds a child node which has the id and returns it.  If a child
 with that ID does not exist, an error is generated.  It is assumed
 that the ID is unique among all children of this node.  The ID search is
 case insensitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The ID of the child to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The found child.
</dl>
</dl>
<a name="FindChildByType"><dt>

<table><tr><td>o Func <b>FindChildByType</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>) As <script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> </table></dt>
<dl>
  <dd>
 Finds a child node which has the specified type and returns it.  
 If a child with that type does not exist, an error is generated.
 It is assumed that only 1 node has the given type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type of the child to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The found child.
</dl>
</dl>
<a name="FindChildrenByID"><dt>

<table><tr><td>o Func <b>FindChildrenByID</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>) As <script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> </table></dt>
<dl>
  <dd>
 Finds each child node which has the id and returns a list of nodes.  If a child
 with that ID does not exist, an error is generated.  The ID search is
 case insensitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The ID of the children to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The found children.
</dl>
</dl>
<a name="FindChildrenByType"><dt>

<table><tr><td>o Func <b>FindChildrenByType</b>(<td><script type="text/javascript"> activateLink('DELOlpAstNodeType','DELOlpAstNodeType')</script> <td><tt>iType</tt>) As <script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> </table></dt>
<dl>
  <dd>
 Finds each child node which has the type and returns a list of nodes.   
 If a child with that type does not exist, an error is generated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The type of the children to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The found children.
</dl>
</dl>
<a name="FindGrandChildDoubleValue"><dt>

<table><tr><td>o Func <b>FindGrandChildDoubleValue</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>) As <script type="text/javascript"> activateLink('double','double')</script> </table></dt>
<dl>
  <dd>
 Finds a child node which has the specified ID and then finds a 
 child of that node which is of type CONST_DOUBLE and returns the 
 value of that node as a double.<BR>
 If the child or grandchild node is not found, or if the value is 
 cannot be converted to an double, an error is generated.  It is 
 assumed that only 1 node has the given ID or type.  The ID search 
 is case insensitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The id of the child to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The value of the grandchild node.
</dl>
</dl>
<a name="FindGrandChildIntValue"><dt>

<table><tr><td>o Func <b>FindGrandChildIntValue</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iID</tt>) As <script type="text/javascript"> activateLink('long','long')</script> </table></dt>
<dl>
  <dd>
 Finds a child node which has the specified ID and then finds a 
 child of that node which is of type CONST_INTEGER and returns the 
 value of that node as an integer.<BR>
 If the child or grandchild node is not found, or if the value is 
 cannot be converted to an integer, an error is generated.  It is 
 assumed that only 1 node has the given ID or type.  The ID search 
 is case insensitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iID</tt>
   <dd> The id of the child to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The value of the grandchild node.
</dl>
</dl>
<a name="Insert"><dt>

<table><tr><td>o Sub <b>Insert</b>(<td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>iRelativeChild</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iBefore</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>iChild</tt>)</table></dt>
<dl>
  <dd>
 Insert a child node to this collection.<BR>
 NULL values are ignored.  They are not inserted but the function still succeeds.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelativeChild</tt>
   <dd> The child to insert before or after.  If NULL then the child is inserted
 at beginning (if iBefore is TRUE), or at the end (if iBefore is FALSE).
 </dd>
    <dt><tt> iBefore</tt>
   <dd> If true iChild is inserted before iRelativeChild, otherwise after.
 </dd>
    <dt><tt> iChild</tt>
   <dd> The child to insert.</dd>
</dl>
</dl>
</dl>
<a name="Item"><dt>

<table><tr><td>o Func <b>Item</b>(<td><script type="text/javascript"> activateLink('CATVariant','CATVariant')</script> <td><tt>iIndex</tt>) As <script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> </table></dt>
<dl>
  <dd>
 Retrieves a child node using its index or its ID.<BR>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd>   The index or the ID of the node to retrieve from
   the collection of nodes.
   As a number, this index is the index of the parameter
   in the collection.
   The index of the first parameter in the collection is 1, and
   the index of the last parameter is Count.
   As a string, it is the ID you assigned to the node using
   the </dd>
</dl>
<script type="text/javascript"> activateLinkAnchor('DELMIAOlpAstNode','Id','DELMIAOlpAstNode.Id') </script> property or when the node was created. 
  <dt> <b>Returns:</b> 
  <dd>  The node retrieved.
</dl>
</dl>
<a name="Remove"><dt>

<table><tr><td>o Sub <b>Remove</b>(<td><script type="text/javascript"> activateLink('OlpAstNode','OlpAstNode')</script> <td><tt>iChild</tt>)</table></dt>
<dl>
  <dd>
 Remove a child node from the branch.<BR>
 NULL values are ignored.  They are not removed but the function still succeeds.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChild</tt>
   <dd> The child to remove.</dd>
</dl>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

