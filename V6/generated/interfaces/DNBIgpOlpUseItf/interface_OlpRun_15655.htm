<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DNBIgpOlpUseItf OlpRun (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DNBIgpOlpUseItf.htm" href="../DNBIgpOlpUseItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DNBIgpOlpUseItf";	}
		function getCurrentObjectName() { 
 	return "OlpRun"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>OlpRun<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_OlpRun_15655','OlpRun','0');</script>
<b><i>   An instruction that calls another procedure.</i></b><br>
<BR>
 <font color="red">This interface can only be used by a translator
 within the Robotics Off-line Programming (OLP)
 Download or Upload command</font>.<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#Arguments"><b>Arguments</b></a>
<dd>  The arguments passed to the procedure.
 <dt>
    <a href="#Procedure"><b>Procedure</b></a>
<dd>  The procedure that is run from this instruction.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#AssignUndefinedProcedure"><b>AssignUndefinedProcedure</b></a>
<dd>  Assign a procedure that is not defined in the robot program.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="Arguments"><dt>

<table><tr><td>o Property <b>Arguments</b>(<td>) As <script type="text/javascript"> activateLink('OlpAstBranch','OlpAstBranch')</script> </table></dt>
<dl>
  <dd>
 The arguments passed to the procedure.<BR>
 The order of the arguments corresponds to the order of the 
 procedure inputs retrieved from 
<script type="text/javascript"> activateLinkAnchor('DELMIAOlpProcedure','LocalVariables','DELMIAOlpProcedure.LocalVariables') </script>. The AST format is an "Arguments" node
 which contains a list of "Expression" and "Operator" nodes.
 Each "Expression" node has the id "Argument" and is in the 
 proper format to be used with 
<script type="text/javascript"> activateLinkAnchor('DELMIAOlpExpressionFixerDownload','','DELMIAOlpExpressionFixerDownload') </script>. The operator nodes are just commas.<BR>
 When set, each child node with id="Argument" will be taken
 as an argument, in order.  
 You can find more information on the OLP Expression AST format in the documentation 
 under Automation | Robotics | Robotics Offline Programming | Offline Programming Expression Translation.
 The AST Arguments format used in function expressions as described in that document
 is the same as the AST Arguments format used here.
</dl>
<a name="Procedure"><dt>

<table><tr><td>o Property <b>Procedure</b>(<td>) As <script type="text/javascript"> activateLink('OlpProcedure','OlpProcedure')</script> </table></dt>
<dl>
  <dd>
 The procedure that is run from this instruction.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="AssignUndefinedProcedure"><dt>

<table><tr><td>o Sub <b>AssignUndefinedProcedure</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELOlpDataType','DELOlpDataType')</script> <td><tt>iDataType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DELOlpIODirection','DELOlpIODirection')</script> <td><tt>iDirection</tt>)</table></dt>
<dl>
  <dd>
 Assign a procedure that is not defined in the robot program.<BR>
 This method is used to assign a procedure to this run
 instruction which is not defined in the robot programs 
 selected for upload.  If a procedure with this name
 already exists that has the correct number of arguments, it 
 will be reused.  If it does not exists, it will be created.  
 When created, the procedure will have the same number of arguments 
 as those set on this instruction.  You must have set the arguments 
 before calling this method.<BR>
 <B>Note:</B> Do not use this method to create a procedure
 which you will upload as normal.  That will bypass
 any user options for creating new tasks on upload vs.
 overwriting existing tasks.  
 <B>Note:</B> Do not use this method to assign a procedure
 that you have already uploaded by name.  The name assigned
 to procedures you upload may not match if there was already
 an existing procedure with that name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>	The name of the procedure.
 </dd>
    <dt><tt> iDataType</tt>
   <dd>	The data type to use for all arguments.<BR>
  This is only used when creating a new procedure.
 </dd>
    <dt><tt> iDirection</tt>
   <dd>	The direction to use for all arguments.
  This is only used when creating a new procedure.</dd>
</dl>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

