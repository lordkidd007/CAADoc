<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingIDLItf DrawingGenView (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingIDLItf.htm" href="../DraftingIDLItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingIDLItf";	}
		function getCurrentObjectName() { 
 	return "DrawingGenView"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DrawingGenView<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DrawingGenView_21477','DrawingGenView','0');</script>
<b><i> Manages the Generative View.</i></b><br>

 <p>
 A generative view is created from the projection of an assembly definition containing instances 
 of 3D shape representation. A generative view is an extension of the view created by using <script type="text/javascript"> activateLinkAnchor('CATIADrawingDefineGenView','','CATIADrawingDefineGenView') </script> method. This interface manages these kind of views.
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#GVSName"><b>GVSName</b></a>
<dd>  Returns or sets the generative view style of a generative view.
 <dt>
    <a href="#GenViewProperties"><b>GenViewProperties</b></a>
<dd>  Returns or sets the generative view properties of a generative view.
 <dt>
    <a href="#NumberOfBreakouts"><b>NumberOfBreakouts</b></a>
<dd>  Returns the number of breakouts contained in the generative view.
 <dt>
    <a href="#NumberOfBreaks"><b>NumberOfBreaks</b></a>
<dd>  Returns the number of breaks contained in the broken generative view.
 <dt>
    <a href="#NumberOfLinks"><b>NumberOfLinks</b></a>
<dd>  Returns the number of view links of the generative view.
 <dt>
    <a href="#ParentView"><b>ParentView</b></a>
<dd>  Returns the parent view.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#AddBreakout"><b>AddBreakout</b></a>
<dd> 	Adds a breakout on the current view.
 <dt>
    <a href="#AddBrokenView"><b>AddBrokenView</b></a>
<dd>  Adds a broken operator to a the generative drawing view.
 <dt>
    <a href="#AddClippingBox"><b>AddClippingBox</b></a>
<dd>   Adds a clipping box.
 <dt>
    <a href="#AddClippingWithCircle"><b>AddClippingWithCircle</b></a>
<dd> 	Adds a Circular exact clipping on the current view.
 <dt>
    <a href="#AddClippingWithProfile"><b>AddClippingWithProfile</b></a>
<dd> 	Adds a polygonal clipping on the current view.
 <dt>
    <a href="#AddLink"><b>AddLink</b></a>
<dd>  Adds a link to the generative view.
 <dt>
    <a href="#ApplyBreakoutTo"><b>ApplyBreakoutTo</b></a>
<dd>  If a view have gone through a breakout view operation, this method realize 
 a breakout view on the view given as parameter, and the other types of 
 the view remain.
 <dt>
    <a href="#ApplyClippingBoxTo"><b>ApplyClippingBoxTo</b></a>
<dd>  Applies a clipping box to the generative view given as parameter
 <br><b>Role</b>: 
 If a view have gone through a clipping box view operation, this method realize 
 a clipping view on the view given as parameter, and the other types of 
 the view remain.
 <dt>
    <a href="#ForceUpdate"><b>ForceUpdate</b></a>
<dd>  Forces the Update of the generative view even if not necessary.
 <dt>
    <a href="#GetAssociatedRootProduct"><b>GetAssociatedRootProduct</b></a>
<dd>  Returns the root product associated to the drawing view.
 <dt>
    <a href="#GetAxisSystem"><b>GetAxisSystem</b></a>
<dd>  Retrieves the axis systeme associated with the view.
 <dt>
    <a href="#GetLink"><b>GetLink</b></a>
<dd>  Returns the link of the generative view.
 <dt>
    <a href="#GetNumberOfInfoForLink"><b>GetNumberOfInfoForLink</b></a>
<dd>  Returns the number of info associated to a link of the generative view.
 <dt>
    <a href="#IsClipped"><b>IsClipped</b></a>
<dd>  Returns whether the drawing view is a clipping view.
 <dt>
    <a href="#IsClippedByBox"><b>IsClippedByBox</b></a>
<dd>  Returns whether the drawing view contains a 3D clipping Box opaerator.
 <dt>
    <a href="#ModifyProjectionPlane"><b>ModifyProjectionPlane</b></a>
<dd>  Modifies the drawing generative view projection plane.
 <dt>
    <a href="#PutLinks"><b>PutLinks</b></a>
<dd>  Applies links on a generative view.
 <dt>
    <a href="#RemoveGVS"><b>RemoveGVS</b></a>
<dd>  Removes the GVS associated to the generative view.
 <dt>
    <a href="#RemoveLink"><b>RemoveLink</b></a>
<dd>  Removes a link of the generative view.
 <dt>
    <a href="#SetAxisSystem"><b>SetAxisSystem</b></a>
<dd>  Defines an axis systeme in the view.
 <dt>
    <a href="#UnBreak"><b>UnBreak</b></a>
<dd>  Removes the break view operation applied on the generative view.
 <dt>
    <a href="#UnBreakout"><b>UnBreakout</b></a>
<dd>  Removes the breakout applied on the generative view.
 <dt>
    <a href="#UnClip"><b>UnClip</b></a>
<dd>  Removes the clip applied on the generative view.
 <dt>
    <a href="#Update"><b>Update</b></a>
<dd>  Updates the generative view.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="GVSName"><dt>

<table><tr><td>o Property <b>GVSName</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the generative view style of a generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 <!-- @sample -->
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example gets the GVS name of the <tt>MyView</tt> drawing view.
 <pre>
 Dim myGVSName as CATBSTR
 Set myGVSName = myView.DrawingGenView.<font color="red">GVSName</font>
 </pre>
 </dl>
</dl>
<a name="GenViewProperties"><dt>

<table><tr><td>o Property <b>GenViewProperties</b>(<td>) As <script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the generative view properties of a generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 <!-- @sample -->
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example gets the <tt>ViewToWorkOn</tt> drawing view.
 <pre>
 Dim myGenViewProp as DrawingGenViewProp
 Set mygenViewProp = myView.DrawingGenView.<font color="red">GenViewProperties</font>
 </pre>
 </dl>
</dl>
<a name="NumberOfBreakouts"><dt>

<table><tr><td>o Property <b>NumberOfBreakouts</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the number of breakouts contained in the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  <pre>
 Dim nbBreakouts as long
 nbBreakouts = myView.DrawingGenView.<font color="red">NumberOfBreakouts</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="NumberOfBreaks"><dt>

<table><tr><td>o Property <b>NumberOfBreaks</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the number of breaks contained in the broken generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  <pre>
 Dim nbBreaks as long
 nbBreaks = myView.DrawingGenView.<font color="red">NumberOfBreaks</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="NumberOfLinks"><dt>

<table><tr><td>o Property <b>NumberOfLinks</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the number of view links of the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example returns the number of links associated to the  <tt>MyView</tt> drawing view.
 <pre>
 Dim nbLinks as long
 nbLinks = myView.DrawingGenView.<font color="red">NumberOfLinks</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="ParentView"><dt>

<table><tr><td>o Property <b>ParentView</b>(<td>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the parent view.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example returns in <tt>MyParentView</tt> the parent view of the
 <tt>MyView</tt> drawing view.
 <pre>
 Dim MyParentView As DrawingView
 Set MyParentView = MyView.<font color="red">ParentView</font>
 </pre></pre></dd>
</dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="AddBreakout"><dt>

<table><tr><td>o Sub <b>AddBreakout</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane2</tt>)</table></dt>
<dl>
  <dd>
	Adds a breakout on the current view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Profil</tt>
   <dd> 			the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
			of dimension 2*n, n the number of control points on profile. 
		</dd>
    <dt><tt> Plane1</tt>
   <dd>			the first reference plane, stored as a CATSafeArrayVariant [9] :
			Plane1 [0...2] : Plane origine coordinates
			Plane1 [3...5] : First direction vector coordinates
			Plane1 [6...8] : Second direction vector coordinates.
          This plane must intersect the 3D Volume.
		</dd>
    <dt><tt> Plane2</tt>
   <dd>			the second reference plane, stored as a CATSafeArrayVariant [9] :
			This plane2 is not used.</dd>
</dl>
</dl>
</dl>
<a name="AddBrokenView"><dt>

<table><tr><td>o Sub <b>AddBrokenView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iBrokenLinesExtremities</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYDirection</tt>)</table></dt>
<dl>
  <dd>
 Adds a broken operator to a the generative drawing view.
 The broken area is represented by two lines and a direction in the source view.
 <br><b>Legal valueNote</b>: Only vertical or horizontal break segments are authorized.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBrokenLinesExtremities</tt>
   <dd>   The lines defining the broken profile.
   This lines is passed as its point coordinate table. 
   Only two lines have to be defined.
   It has the following contents:
   <dl>
     <dt><tt>iBrokenLinesExtremities[0] = X1</tt>     <dd>x coordinate of the first point for the first line
     <dt><tt>iBrokenLinesExtremities[1] = Y1</tt>     <dd>y coordinate of the first point for the first line
     <dt><tt>iBrokenLinesExtremities[2] = X2</tt>     <dd>x coordinate of the second point for the first line
     <dt><tt>iBrokenLinesExtremities[3] = Y2</tt>     <dd>y coordinate of the second point for the first line
     <dt><tt>iBrokenLinesExtremities[4] = X3</tt>     <dd>x coordinate of the first point for the second line
     <dt><tt>iBrokenLinesExtremities[5] = Y3</tt>     <dd>y coordinate of the first point for the second line
     <dt><tt>iBrokenLinesExtremities[6] = X4</tt>     <dd>x coordinate of the second point for the second line
     <dt><tt>iBrokenLinesExtremities[7] = Y4</tt>     <dd>y coordinate of the second point for the second line
   </dl>
 </dd>
    <dt><tt> iXDirection,iYDirection</tt>
   <dd>   The direction stands for the translation.
   The direction must be horizontal or vertical.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a broken view.
 The direction for the translation is horizontal.
 The broken area is defined by two vertical lines.
 <pre>
 Dim myBrokenPoints(7) as CATSafeArrayVariant
 myBrokenPoints(0) = Array(X1, Y1, X2, Y2, X3, Y3, X4, Y4)
 MyView.DrawingGenView.<font color="red">AddBrokenView</font> X1, Y1, X2, Y2, X3, Y3, X4, Y4, XDirection, YDirection
 </pre></pre></dd>
</dl>
</dl>
<a name="AddClippingBox"><dt>

<table><tr><td>o Sub <b>AddClippingBox</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iBoxDefintion</tt>)</table></dt>
<dl>
  <dd>
  Adds a clipping box.
 <br><b>Role</b>: this method adds a breakout on a generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBoxDefintion</tt>
   <dd> [in]   <dl>
     <dt><tt>iBrokenLinesExtremities[0] = X1</tt>     <dd>x coordinate of the first point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[1] = Y1</tt>     <dd>y coordinate of the first point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[2] = Z1</tt>     <dd>z coordinate of the first point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[3] = X2</tt>     <dd>x coordinate of the second point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[4] = Y2</tt>     <dd>y coordinate of the second point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[5] = Z2</tt>     <dd>z coordinate of the second point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[6] = X3</tt>     <dd>x coordinate of the third point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[7] = Y3</tt>     <dd>y coordinate of the third point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[8] = Z3</tt>     <dd>z coordinate of the third point of the clipping box base
     <dt><tt>iBrokenLinesExtremities[9] = X4</tt>     <dd>x coordinate of a point defining the depth of the clipping box
     <dt><tt>iBrokenLinesExtremities[10] = Y4</tt>     <dd>y coordinate of a point defining the depth of the clipping box
     <dt><tt>iBrokenLinesExtremities[11] = Z4</tt>     <dd>z coordinate of a point defining the depth of the clipping box
   </dl></dd>
</dl>
</dl>
</dl>
<a name="AddClippingWithCircle"><dt>

<table><tr><td>o Sub <b>AddClippingWithCircle</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>XCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>YCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>Radius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>ComputeMode</tt>)</table></dt>
<dl>
  <dd>
	Adds a Circular exact clipping on the current view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> XCenter,</tt>
   <dd> YCenter 			Clipping circle center position. 
		</dd>
    <dt><tt> Radius</tt>
   <dd>			Clipping circle radius.
		</dd>
    <dt><tt> ComputeMode</tt>
   <dd>   <tt>true</tt>: To create a clipping view.
   <tt>false</tt>: to create a quick clipping view.
		  Computation mode: if true exact mode, if false quick mode.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example adds a quick clipping to <tt>MyView</tt> 
 The clipped area is a circle defined using its center coordinates (100.,
 150.), and its radius (75.) with respsect to the parent view axis system.
 <pre>
 MyView.DrawingGenView.<font color="red">AddClippingWithCircle</font> 100., 150., 75.,false
 </pre></pre></dd>
</dl>
</dl>
<a name="AddClippingWithProfile"><dt>

<table><tr><td>o Sub <b>AddClippingWithProfile</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>profil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>ComputeMode</tt>)</table></dt>
<dl>
  <dd>
	Adds a polygonal clipping on the current view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> profil</tt>
   <dd> 			the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
			of dimension 2*n, n the number of control points on profile. 
		</dd>
    <dt><tt> ComputeMode</tt>
   <dd>   <tt>true</tt>: To create a clipping view.
   <tt>false</tt>: to create a quick clipping view.
		  Computation mode: if true exact mode, if false quick mode.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example adds a quick clipping to <tt>MyView</tt> 
 The clipped area is a polygonal defined by points.
 <pre>
 Dim myProfile(7)
 myProfile(0) = Array (10.,200.,100,.200.,100.,50.,300.,50.)
 MyView.DrawingGenView.<font color="red">AddClippingWithProfile</font> myProfile,false
 </pre></pre></dd>
</dl>
</dl>
<a name="AddLink"><dt>

<table><tr><td>o Sub <b>AddLink</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iInfoOnViewLink</tt>)</table></dt>
<dl>
  <dd>
 Adds a link to the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 If you add a link to a view pointing the root product, only the new link is kept: the link on the root product is removed.
 If you remove the last link of the view, a link to the root product is automatically created.
 The number of links is automatically increased.
 <br><b>Precondition</b>: A link to a PartBody must be defined from 3 elements: 
   a CATIABody element (the PartBody)
   a CATIAVPMRepInstance element (the representation instance)
   a CATIAPLMOccurrence element (the PLM occurence).
 <br><b>Precondition</b>: The validity of a link can be checked using 
<script type="text/javascript"> activateLinkAnchor('CATIADrawingGenService','CheckViewLinkIntegrity','CATIADrawingGenService.CheckViewLinkIntegrity') </script>. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iInfoOnViewLink</tt>
   <dd>   The information on the link to add.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example adds a link to a PartBody and a link to a PLM occurrence on the <tt>MyView</tt> drawing view.
 <pre>
   Dim ViewLink1 (2) as CATSafeArrayVariant
   ViewLink1 (0)= myPartBody
   ViewLink1 (1)= myPLMRepInst
   ViewLink1 (2)= myPLMOcc1
   Dim ViewLink2 (0) as CATSafeArrayVariant
   ViewLink2 (0)= myPLMOcc2
   myView.DrawingGenView.<font color="red"> AddLink </font> ViewLink1
   myView.DrawingGenView.<font color="red"> AddLink </font> ViewLink2
 </pre></pre></dd>
</dl>
</dl>
<a name="ApplyBreakoutTo"><dt>

<table><tr><td>o Sub <b>ApplyBreakoutTo</b>(<td><script type="text/javascript"> activateLink('DrawingGenView','DrawingGenView')</script> <td><tt>iDestinationView</tt>)</table></dt>
<dl>
  <dd>
 If a view have gone through a breakout view operation, this method realize 
 a breakout view on the view given as parameter, and the other types of 
 the view remain.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDestinationView</tt>
   <dd> [in] The view on which the breakout is applied.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example apply the last breakout view done on <tt>MyView</tt>, if so,
 on the view <tt>MyDestinationView</tt>.
 <pre>
 MyView.DrawingGenView.<font color="red">ApplyBreakoutTo</font>(MyDestinationView)
 </pre></pre></dd>
</dl>
</dl>
<a name="ApplyClippingBoxTo"><dt>

<table><tr><td>o Sub <b>ApplyClippingBoxTo</b>(<td><script type="text/javascript"> activateLink('DrawingGenView','DrawingGenView')</script> <td><tt>iDestinationView</tt>)</table></dt>
<dl>
  <dd>
 Applies a clipping box to the generative view given as parameter
 <br><b>Role</b>: 
 If a view have gone through a clipping box view operation, this method realize 
 a clipping view on the view given as parameter, and the other types of 
 the view remain.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDestinationView</tt>
   <dd> [in] The view on which the clipping box is applied.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example apply the last clipping box view done on <tt>MyView</tt>, if so,
 on the view <tt>MyDestinationView</tt>.
 <pre>
 MyView.DrawingGenView.<font color="red">ApplyClippingBoxTo</font>(MyDestinationView)
 </pre></pre></dd>
</dl>
</dl>
<a name="ForceUpdate"><dt>

<table><tr><td>o Sub <b>ForceUpdate</b>(<td>)</table></dt>
<dl>
  <dd>
 Forces the Update of the generative view even if not necessary.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example updates the  <tt>MyView</tt> drawing view.
 <pre>
 MyView.DrawingGenView.<font color="red">ForceUpdate</font>()
 </pre></pre></dd>
</dl>
</dl>
<a name="GetAssociatedRootProduct"><dt>

<table><tr><td>o Func <b>GetAssociatedRootProduct</b>(<td>) As <script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> </table></dt>
<dl>
  <dd>
 Returns the root product associated to the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example returns the root product associated to the  <tt>MyView</tt> drawing view.
 <pre>
 Dim myRootPrd as CATIABase
 Set myRootPrd = myView.DrawingGenView.<font color="red">GetAssociatedRootProduct</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="GetAxisSystem"><dt>

<table><tr><td>o Sub <b>GetAxisSystem</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>oProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>oAxisSysteme</tt>)</table></dt>
<dl>
  <dd>
 Retrieves the axis systeme associated with the view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd>		The reference product stored as a CATIABase.
		</dd>
    <dt><tt> oAxisSysteme</tt>
   <dd>		The axis system stored as a CATIABase.</dd>
</dl>
</dl>
</dl>
<a name="GetLink"><dt>

<table><tr><td>o Sub <b>GetLink</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iIndexLink</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>oInfoOnViewLink</tt>)</table></dt>
<dl>
  <dd>
 Returns the link of the generative view.
 <br><b>Role</b>: This method returns 1 element for a link on a PLM instance, it returns 3 elements for a link on a PartBody, 
  A link to a PartBody is defined from 3 elements: 
   a CATIABody element (the PartBody)
   a CATIAVPMRepInstance element (the representation instance)
   a CATIAPLMOccurrence element (the PLM occurence).
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIndexLink</tt>
   <dd>   The index of a link of the view.
 </dd>
    <dt><tt>  oInfoOnViewLink</tt>
   <dd>   informations associated to the link (1 element for a link to a PLM Instance, 3 elements for a link to a PartBody).
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example returns the first link (to a PartBody) of the <tt>MyView</tt> drawing view.
 <pre>
 Dim oInfoOnViewLinks (3) as CATSafeArrayVariant
 myView.DrawingGenView.<font color="red"> GetLink </font> 1, oInfoOnViewLinks
 set myBody As Body
 set myBody = oInfoOnViewLinks(0)
 Dim myVPMRepInst As VPMRepInstance
 set myVPMRepInst = oInfoOnViewLinks(1)
 Dim myPLMOcc As PLMOccurrence
 set myPLMOcc = oInfoOnViewLinks(2)
 </pre></pre></dd>
</dl>
</dl>
<a name="GetNumberOfInfoForLink"><dt>

<table><tr><td>o Func <b>GetNumberOfInfoForLink</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iIndexLink</tt>) As <script type="text/javascript"> activateLink('long','long')</script> </table></dt>
<dl>
  <dd>
 Returns the number of info associated to a link of the generative view.
 <br><b>Role</b>: This method returns 1 for a link on a PLM instance, it returns 3 for a link on a PartBody, 
  A link to a PartBody is defined from 3 elements: 
   a CATIABody element (the PartBody)
   a CATIAVPMRepInstance element (the representation instance)
   a CATIAPLMOccurrence element (the PLM occurence).
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIndexLink</tt>
   <dd>   The index of a link of the view.
 </dd>
    <dt><tt>  oNbInfoOnViewLink</tt>
   <dd>   number of information associated to the link (1 or 3).
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example returns the number of information associated the first link of the <tt>MyView</tt> drawing view.
 <pre>
 Dim nbInfoOnLinks as long
 myView.DrawingGenView.<font color="red"> GetNumberOfInfoForLink </font> 1, nbInfoOnLinks
 </pre></pre></dd>
</dl>
</dl>
<a name="IsClipped"><dt>

<table><tr><td>o Func <b>IsClipped</b>(<td>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Returns whether the drawing view is a clipping view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  <pre>
 Dim Clip as boolean
 Clip = myView.DrawingGenView.<font color="red">IsClipped</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="IsClippedByBox"><dt>

<table><tr><td>o Func <b>IsClippedByBox</b>(<td>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Returns whether the drawing view contains a 3D clipping Box opaerator.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  <pre>
 Dim Clip as boolean
 Clip = myView.DrawingGenView.<font color="red">IsClippedByBox</font>
 </pre></pre></dd>
</dl>
</dl>
<a name="ModifyProjectionPlane"><dt>

<table><tr><td>o Sub <b>ModifyProjectionPlane</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProjPlane</tt>)</table></dt>
<dl>
  <dd>
 Modifies the drawing generative view projection plane.
 <br><b>Role</b>: The projection plane is the plane to which the document's geometrical
 objects are projected and is used as the drawing view plane.
 This plane is defined in the document 3D space using the components of two
 of its vectors.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProjPlane</tt>
   <dd> [in]   <dl>
     <dt><tt>iProjPlane[0] = X1</tt>     <dd>x coordinate of the first vector with respect to the document 3D axis
     <dt><tt>iProjPlane[1] = Y1</tt>     <dd>y coordinate of the first vector with respect to the document 3D axis
     <dt><tt>iProjPlane[2] = Z1</tt>     <dd>z coordinate of the first vector with respect to the document 3D axis
     <dt><tt>iProjPlane[3] = X2</tt>     <dd>x coordinate of the second vector with respect to the document 3D axis
     <dt><tt>iProjPlane[4] = Y2</tt>     <dd>y coordinate of the second vector with respect to the document 3D axis
     <dt><tt>iProjPlane[5] = Z2</tt>     <dd>z coordinate of the second vector with respect to the document 3D axis
   </dl>
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example sets the projection plane of the <tt>MyView</tt> drawing view
 to the XY plane, that is the plane defined with the vectors (1., 0., 0.) and
 (0., 1., 0.).
 <pre>
 MyView.<font color="red">SetProjectionPlane</font> 1., 0., 0., 0., 1., 0. 
 </pre></pre></dd>
</dl>
</dl>
<a name="PutLinks"><dt>

<table><tr><td>o Sub <b>PutLinks</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iNbLink</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iInfoOnViewLinks</tt>)</table></dt>
<dl>
  <dd>
 Applies links on a generative view. The view can be linked to a product reference, a 
 set of product instances, or a set of PartBodies aggregated by the same root product.
 <br><b>Precondition</b>: A generative view has always a link as a consequence,
   PutLinks fails if the input list is empty.
   PutLinks fails if the input list contains instances, PartBodies not aggregated by the root product used during
 the view creation.
 <br><b>Precondition</b>: A link to a PartBody must be defined from 3 elements: 
   a CATIABody element (the PartBody)
   a CATIAVPMRepInstance element (the representation instance)
   a CATIAPLMOccurrence element (the PLM occurence).
 <br><b>Precondition</b>: The validity of a link can be checked using 
<script type="text/javascript"> activateLinkAnchor('CATIADrawingGenService','CheckViewLinkIntegrity','CATIADrawingGenService.CheckViewLinkIntegrity') </script>. <br><b>Precondition</b>: A generative view may be linked to other data: For 
 example, FTA View, 2DLayout for 3D Design view, Scene, PLM filter
   PutLinks fails if a such link is processed.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example puts 2 links to
     a product PLM occurence (CATIAPLMOccurrence) 
     and a PartBody (CATIABase + CATIAVPMRepInstance + CATIAPLMOccurrence) 
     on the  <tt>MyView</tt> drawing view.
 <pre>
   NbLink = 2;
   Dim iInfoOnViewLinks (3) as CATSafeArrayVariant
   iInfoOnViewLinks (0)= myPLMOcc1
   iInfoOnViewLinks (1)= myPartBody
   iInfoOnViewLinks (2)= myPLMRepInst
   iInfoOnViewLinks (3)= myPLMOcc2
   myView.DrawingGenView.<font color="red"> PutLinks </font> NbLink, iInfoOnViewLinks
 </pre></pre></dd>
</dl>
</dl>
<a name="RemoveGVS"><dt>

<table><tr><td>o Sub <b>RemoveGVS</b>(<td>)</table></dt>
<dl>
  <dd>
 Removes the GVS associated to the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example removes the GVS of the <tt>MyView</tt> drawing view.
 <pre>
 MyView.DrawingGenView.<font color="red">RemoveGVS</font>()
 </pre></pre></dd>
</dl>
</dl>
<a name="RemoveLink"><dt>

<table><tr><td>o Sub <b>RemoveLink</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iIndexLink</tt>)</table></dt>
<dl>
  <dd>
 Removes a link of the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 If you want to remove several links, remove the links with bigger index first!
 If you remove the last link of the view, a link to the root product is automatically created.
 The number of links is automatically decreased.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIndexLink</tt>
   <dd>   The index of a link of the view.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example removes the second link of the <tt>MyView</tt> drawing view.
 <pre>
 myView.DrawingGenView.<font color="red"> RemoveLink </font> 2
 </pre></pre></dd>
</dl>
</dl>
<a name="SetAxisSystem"><dt>

<table><tr><td>o Sub <b>SetAxisSystem</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iAxisSysteme</tt>)</table></dt>
<dl>
  <dd>
 Defines an axis systeme in the view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProduct</tt>
   <dd>		The reference product stored as a CATIABase.
		</dd>
    <dt><tt> iAxisSysteme</tt>
   <dd>		The axis system stored as a CATIABase.</dd>
</dl>
</dl>
</dl>
<a name="UnBreak"><dt>

<table><tr><td>o Sub <b>UnBreak</b>(<td>)</table></dt>
<dl>
  <dd>
 Removes the break view operation applied on the generative view.
 <br><b>Role</b>: If a view have been broken with lines in order to hide an area of this view,
 this method undoes this modification of the view, and the other types
 of view remain.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example removes the BrokenView type from <tt>MyView</tt> if so.
 <pre>
 MyView.DrawingGenView.<font color="red">UnBreak</font>()
 </pre></pre></dd>
</dl>
</dl>
<a name="UnBreakout"><dt>

<table><tr><td>o Sub <b>UnBreakout</b>(<td>)</table></dt>
<dl>
  <dd>
 Removes the breakout applied on the generative view.
 <br><b>Role</b>: If a view have gone through a breakout view operation, this method removes 
 all the breakout view done on this view, and the other types of view remain.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example removes all the breakouts view done on <tt>MyView</tt> if so.
 <pre>
 MyView.DrawingGenView.<font color="red">UnBreakout</font>()
 </pre></pre></dd>
</dl>
</dl>
<a name="UnClip"><dt>

<table><tr><td>o Sub <b>UnClip</b>(<td>)</table></dt>
<dl>
  <dd>
 Removes the clip applied on the generative view.
 <br><b>Role</b>: If a view have been clipped, this method removes the last clipping view done
 on this view, and the other types of view remain.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example removes the last clipping view done on <tt>MyView</tt> if so.
 <pre>
 MyView.DrawingGenView.<font color="red">UnClip</font>()
 </pre></pre></dd>
</dl>
</dl>
<a name="Update"><dt>

<table><tr><td>o Sub <b>Update</b>(<td>)</table></dt>
<dl>
  <dd>
 Updates the generative view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example updates the <tt>MyView</tt> drawing view.
 <pre>
 MyView.DrawingGenView.<font color="red">Update</font>()
 </pre></pre></dd>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

