<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingIDLItf DrawingDefineGenView (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../DraftingIDLItf.htm" href="../DraftingIDLItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "DraftingIDLItf";	}
		function getCurrentObjectName() { 
 	return "DrawingDefineGenView"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>DrawingDefineGenView<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DrawingDefineGenView_31309','DrawingDefineGenView','0');</script>
<b><i> Creates the Generative View.</i></b><br>

 <p>
 A generative view is created from the projection of an assembly definition containing instances 
 of 3D shape representation.<hr>
<dl>
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#DefineAuxiliaryView"><b>DefineAuxiliaryView</b></a>
<dd>  Defines an auxiliary drawing view.
 <dt>
    <a href="#DefineCircularDetailView"><b>DefineCircularDetailView</b></a>
<dd>  Defines a detail or a clipped drawing view.
 <dt>
    <a href="#DefineFrontView"><b>DefineFrontView</b></a>
<dd>  Defines a drawing front view.
 <dt>
    <a href="#DefineIsometricView"><b>DefineIsometricView</b></a>
<dd>  Defines an isometric drawing view.
 <dt>
    <a href="#DefinePolygonalDetailView"><b>DefinePolygonalDetailView</b></a>
<dd>  Defines a detail or a clipped drawing view.
 <dt>
    <a href="#DefineProjectionView"><b>DefineProjectionView</b></a>
<dd>  Defines a projection drawing view.
 <dt>
    <a href="#DefineSectionView"><b>DefineSectionView</b></a>
<dd>  Defines a section drawing view.
 <dt>
    <a href="#DefineStandAloneSection"><b>DefineStandAloneSection</b></a>
<dd> 	Defines a section view without a reference view.
 <dt>
    <a href="#DefineUnfoldedView"><b>DefineUnfoldedView</b></a>
<dd>  Defines a unfolded drawing view.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="DefineAuxiliaryView"><dt>

<table><tr><td>o Func <b>DefineAuxiliaryView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>YEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> <td><tt>iParentView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines an auxiliary drawing view.
 <br><b>Role</b>: The projection plane of this auxiliary drawing view is defined in its parent
 view using a line segment which represents the trace of the projection
 plane, considered as being normal to this parent view projection plane.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXStartPoint,iYStartPoint</tt>
   <dd>   The coordinates of the trace line segment start point,
   expressed with respect of the parent view axis system
 </dd>
    <dt><tt> iXEndPoint,iYEndPoint</tt>
   <dd>   The coordinates of the trace line segment end point,
   expressed with respect of the parent view axis system
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd>   This side is defined according to the trace line segment.
   This segment is oriented from its start point to its end point.
   When looking along this segment, from its start point towards its
   end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
   auxiliary view as if it were seen from the left of the segment
   in the parent view.
   Setting <tt>iSideToDraw</tt> to 1 (counterclockwise) draws the
   auxiliary view as if it were seen from the right of the segment.
   <br>
   0 Clockwise
   <br>
   1 Counterclockwise
 </dd>
    <dt><tt> iParentView</tt>
   <dd>   The parent view in which the line segment
   representing the projection plane trace is defined
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as an auxiliary view of
 its parent view <tt>MyParentViewGB</tt>.
 The trace of the auxiliary view projection plane passes by the points
 of coordinates (100., 50.) and (500., 250.) respectively.
 The section is seen from the right of the trace line segment defining
 the auxiliary view projection plane.
 <pre>
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   Set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineAuxiliaryView</font> 10., 10., 100., 50., 500., 250., 1, MyParentView, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineCircularDetailView"><dt>

<table><tr><td>o Func <b>DefineCircularDetailView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> <td><tt>iParentView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a detail or a clipped drawing view.
 <br><b>Role</b>: this method creates a detail from a parent view or a clipped view if the "parent view" parameter is the current view to modify.
 The clipped area is represented by a circle in the parent view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt> iXCenter,iYCenter</tt>
   <dd>   The circle center coordinates, expressed in the parent view axis system
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The circle radius
 </dd>
    <dt><tt> iParentView</tt>
   <dd>   The parent view in which the circular clipping is defined.
   For a clipped view, <tt>iParentView</tt> must be set to
   the current drawing view.
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a detail view of the view
 considered as its parent view <tt>MyParentView</tt>.
 The clipped area is a circle defined using its center coordinates (100.,
 150.), and its radius (75.) with respsect to the parent view axis system.
 <pre>
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   Set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineCircularDetailView</font> 10., 10., 100., 150., 75., MyParentView, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineFrontView"><dt>

<table><tr><td>o Func <b>DefineFrontView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iListofPrdInst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a drawing front view.
 <br><b>Role</b>: The front view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt>  iListofPrdInst</tt>
   <dd>   List of product instances from which the view will be created.
 </dd>
    <dt><tt>  iPlane</tt>
   <dd>		The projection plane definition by two vectors defined in the 3D axis system of the pointed product: 
		[0...2] : First direction vector coordinates
		[3...5] : Second direction vector coordinates.
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example creates <tt>MyView</tt> in the sheet <tt>MySheet</tt> as a front view by projecting the
 representation in the YZ 3D plane.
 <pre>
 Dim myListofPrdInst(0)
 myListofPrdInst(0) = myPLMInst
 Dim myProjPlane(5)
 myProjPlane(5)= Array(0.,1.,0.,0.,0.,1.)
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   Dim myViews As DrawingViews
   set myViews = mySheet.Views
   Dim myView As DrawingView
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineFrontView</font> 10., 10., myListofPrdInst, myProjPlane, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineIsometricView"><dt>

<table><tr><td>o Func <b>DefineIsometricView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iListofPrdInst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines an isometric drawing view.
 <br><b>Role</b>: The isometric view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt>  iListofPrdInst</tt>
   <dd>   List of product instances from which the view will be created.
 </dd>
    <dt><tt>  iPlane</tt>
   <dd> 		The projection plane definition by two vectors defined in the 3D axis system of the pointed product: 
		[0...2] : First direction vector coordinates
		[3...5] : Second direction vector coordinates.
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as an isometric view by projecting the
 represented document in the YZ 3D plane.
 <pre>
 Dim myListofPrdInst(0)
 myListofPrdInst(0) = myPLMInst
 Dim myProjPlane(5)
 myProjPlane(5)= Array(-0.707, 0.707, 0., 0., 0., 1.)
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   set myView As DrawingView
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineIsometricView</font> 10., 10., myListofPrdInst, myProjPlane, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefinePolygonalDetailView"><dt>

<table><tr><td>o Func <b>DefinePolygonalDetailView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> <td><tt>iParentView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a detail or a clipped drawing view.
 <br><b>Role</b>: this method creates a detail from a parent view or a clipped view if the "parent view" parameter is the current view to modify.
 The clipped area is represented by a profile in the parent view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt> iProfile</tt>
   <dd>   The polyline defining the detail profile.
   This polyline is passed as its point coordinate table. 
   The polyline is automatically closed. 
   It has the following contents:
   <dl>
     <dt><tt>iProfile[0] = X1</tt>     <dd>x coordinate of the first point
     <dt><tt>iProfile[1] = Y1</tt>     <dd>y coordinate of the first point
     <dt><tt>iProfile[2] = X2</tt>     <dd>x coordinate of the second point
     <dt><tt>iProfile[3] = Y2</tt>     <dd>y coordinate of the second point
     <dt><tt>...</tt>
     <dt><tt>iProfile[2n-2] = Xn</tt>  <dd>x coordinate of the nth and last point
     <dt><tt>iProfile[2n-1] = Yn</tt>  <dd>y coordinate of the nth and last point
   </dl>
 </dd>
    <dt><tt> iParentView</tt>
   <dd>   The parent view in which the poligonal clipping
   is defined.
   For a clipped view, <tt>iParentView</tt> must be set to the current drawing view.
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a detail view of the view
 considered as its parent view <tt>MyParentView</tt>.
 The clipped area is a square defined using its four corners with respsect to the parent view axis system.
 <pre>
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   Set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefinePolygonalDetailView</font> 10., 10., 0., 0., 100., 0., 100., 100., 0., 100., MyParentView"", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineProjectionView"><dt>

<table><tr><td>o Func <b>DefineProjectionView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> <td><tt>iParentView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CatProjViewType','CatProjViewType')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a projection drawing view.
 <br><b>Role</b>: A projection view is a view created from a front view. The type of projection is defined by the enum  
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt> iParentView</tt>
   <dd>   The parent generative view.
 </dd>
    <dt><tt> iType</tt>
   <dd>   The type of the drawing view with respect to its parent view
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a right view of the front view
 considered as its parent view <tt>MyParentFrontView</tt>.
 <pre>
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineProjectionView</font> MyParentFrontView, catRightView, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineSectionView"><dt>

<table><tr><td>o Func <b>DefineSectionView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iSectionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iProfileType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> <td><tt>iParentView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a section drawing view.
 <br><b>Role</b>: A section drawing view is defined using a section profile defined itself as
 a polyline, a section type to indicate whether to draw the section or only
 the section cut, a section profile type that can be offset or aligned,  
 the side of the section to draw, and the parent view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt> iProfile</tt>
   <dd>   The polyline defining the section profile.
   This polyline is passed as its point coordinate table.
   It has the following contents:
   <dl>
     <dt><tt>iProfile[0] = X1</tt>     <dd>x coordinate of the first point
     <dt><tt>iProfile[1] = Y1</tt>     <dd>y coordinate of the first point
     <dt><tt>iProfile[2] = X2</tt>     <dd>x coordinate of the second point
     <dt><tt>iProfile[3] = Y2</tt>     <dd>y coordinate of the second point
     <dt><tt>...</tt>
     <dt><tt>iProfile[2n-2] = Xn</tt>  <dd>x coordinate of the nth and last point
     <dt><tt>iProfile[2n-1] = Yn</tt>  <dd>y coordinate of the nth and last point
   </dl>
 </dd>
    <dt><tt> iSectionType</tt>
   <dd>   The section type: <tt>SectionCut</tt> or <tt>SectionView</tt>
 </dd>
    <dt><tt> iProfileType</tt>
   <dd>   The cutting profile type: <tt>CatOffsetSectionProfile</tt> or <tt>CatAlignedSectionProfile</tt>
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd>   The side of the section to draw.
   This side is defined according to the first segment of the section
   profile.
   This segment is oriented from its start point to its end point.
   When looking along this segment, from its start point towards its
   end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
   section seen from the left of the segment.
   Setting <tt>iSideToDraw</tt> to 1 (counterclockwise)draws the
   section seen from the right of the segment.
   <br>
   0 Clockwise
   <br>
   1 Counterclockwise
 </dd>
    <dt><tt> iParentView</tt>
   <dd>   The generative parent view.
   The section profile is defined with respect to this parent view axis
   system
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as an offset section view of the view
 considered as its parent view <tt>MyParentView</tt>.
 The section is seen from the left of the first section profile segment.
 The section profile is defined in the <tt>SectionProfile</tt> array.
 <pre>
 Dim SectionProfile(7)
 SectionProfile(0) = Array (10.,200.,100,.200.,100.,50.,300.,50.)
 set myDrawService = CATIA.GetSessionService("CATDrawingService")
 set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   set myView As DrawingView
   set MyView = myViews.drawingDefineGenView.<font color="red">DefineSectionView</font> 10.,10.,SectionProfile,SectionView, CatAlignedSectionProfile, 0, MyParentView, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineStandAloneSection"><dt>

<table><tr><td>o Func <b>DefineStandAloneSection</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iListofPrdInst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>profil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>type_of_section</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>type_of_profile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSide</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
	Defines a section view without a reference view.
 <br><b>Role</b>: A section view with no reference view is completely defined from its profile and the projection plane.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt>  iListofPrdInst</tt>
   <dd>   List of product instances from which the view will be created. 
	</dd>
    <dt><tt> profil</tt>
   <dd> 		the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
		of dimension 2*n, n the number of control points on profile.
	</dd>
    <dt><tt> type_of_section</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> SectionCut </tt>
			<tt> SectionView </tt>
	</dd>
    <dt><tt> type_of_profile</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> CatAlignedSectionProfile </tt>
			<tt> CatOffsetSectionProfile </tt>
	</dd>
    <dt><tt> iPlane</tt>
   <dd>		the reference plane, on which the profile lies 
		iPlane [0...2] : First direction vector coordinates
		iPlane [3...5] : Second direction vector coordinates.
	</dd>
    <dt><tt> iSide</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> 1 </tt> or
			<tt> -1 </tt>
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a standalone section view with a profile defined by 3 points and a
 section plane defined by represented document in the YZ 3D plane.
 <pre>
   Dim myProfile(5)
   myProfile(5)= Array(-30.,-150.,-30.,-50,22.,-50.0)
   Dim myProjPlane(5)
   myProjPlane(5)= Array(0.,1.,0.,0.,0.,1.)
   set myDrawService = CATIA.GetSessionService("CATDrawingService")
   set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.DefineStandAloneSection arrayOfVariantOfDouble1, "SectionView", "CatOffsetSectionProfile", myProjPlane, 1, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<a name="DefineUnfoldedView"><dt>

<table><tr><td>o Func <b>DefineUnfoldedView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iListofPrdInst</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iViewStyle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iComputeUpdate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingGenViewProperties','DrawingGenViewProperties')</script> <td><tt>iViewProp</tt>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script> </table></dt>
<dl>
  <dd>
 Defines a unfolded drawing view.
 <br><b>Role</b>: The unfolded view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iXPos</tt>
   <dd>   First coordinate of the view anchor point.
 </dd>
    <dt><tt>  iYPos</tt>
   <dd>   Second coordinate of the view anchor point.
 </dd>
    <dt><tt>  iListofPrdInst</tt>
   <dd>   List of product instances from which the view will be created.
 </dd>
    <dt><tt>  iPlane</tt>
   <dd> 		The projection plane definition by two vectors defined in the 3D axis system of the pointed product: 
		[0...2] : First direction vector coordinates
		[3...5] : Second direction vector coordinates.
 </dd>
    <dt><tt>  iViewStyle</tt>
   <dd>    The Generative View Style (GVS) define in the Drawing standard. If the string is empty no GVS will be applied.
 </dd>
    <dt><tt>  iComputeUpdate</tt>
   <dd>    <tt>true</tt>: To update the generative view after the definition.
   <tt>false</tt>: to differ the view update.
 </dd>
    <dt><tt>  iViewProp</tt>
   <dd>   Define the view properties.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example defines <tt>MyView</tt> as a unfolded view by projecting the
 represented document in the YZ 3D plane.
 <pre>
   Dim myListofPrdInst(0)
   myListofPrdInst(0) = myPLMInst
   Dim myProjPlane(5)
   myProjPlane(5)= Array(0.,1.,0.,0.,0.,1.)
   set myDrawService = CATIA.GetSessionService("CATDrawingService")
   set myViewProp = myDrawService.DrawingGenViewProp
   set myViews As DrawingViews
   set myViews = mySheet.Views
   Set myView As DrawingView  
   set MyView = myViews.DrawingDefineGenView.<font color="red">DefineUnfoldedView</font> 10. ,10, myListofInst, myProjPlane, "", true, myViewProp
 </pre></pre></dd>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

