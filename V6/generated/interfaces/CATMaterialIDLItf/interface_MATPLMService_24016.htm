<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATMaterialIDLItf MATPLMService (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<link href="../_index/cdg.css" rel="stylesheet" type="text/css"> 
<script type="text/javascript">var PubDirExist = false; var ProDirExist = false; var PrivDirExist = false;</script> 
<script type="text/javascript" src="../_index/cdg.js"></script> 
<script language="Javascript" id="jsLinkjs" type="text/javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" id="jsFwLinkjs" type="text/javascript" src="jsFwLink.js"></script> 
<script language="Javascript" id="jsTreejs" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<div class="menu1" id="menuViewPPP" > 
 	<a href="javascript:writeIndex('IPublic')" name="viewPPP" id="PublicView"  class="ongletPub" > Public View</a> 
 	<a href="javascript:writeIndex('IProtected')" name="viewPPP" id="ProtectedView" class="ongletPro"  > Protected View</a>  
 	<a href="javascript:writeIndex('IPrivate')" name="viewPPP" id="PrivateView" class="ongletPriv" > Private View</a> 
 </div> 
 <div id="indexView" class="menu1">	 
 <a name="multiview" class="onglet" rel="../_index/main.htm" href="../_index/main.htm">All Frameworks</a>   
 <a name="multiview" class="onglet"  rel="../_index/tree.htm" href="../_index/tree.htm">Class Hierarchy</a>   
 <a name="multiview" class="onglet"  rel="../CATMaterialIDLItf.htm" href="../CATMaterialIDLItf.htm">This Framework</a>
<a name="multiview" class="onglet"  rel="../_index/HomeIdx.htm" href="../_index/HomeIdx.htm">Indexes</a>  
 <a id="multiviewP" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'0')"  >Previous</a>  
 	<a id="multiviewN" class="onglet" href="javascript:openLinkNP(getCurrentObjectName(),getCurrentType(),'1')"  >Next</a> 
 </div> 
<script type="text/javascript" > 
 	function getCurrentLevel() { 
 return "";	} 
	function getCurrentFw() { 
	return "CATMaterialIDLItf";	}
		function getCurrentObjectName() { 
 	return "MATPLMService"; } 
	function getCurrentType() { 
 	return "interface"; }  
 function callInit() { 
 		if (PubDirExist == true || ProDirExist == true || PrivDirExist == true) {  
 			var parent = document.getElementById("indexView"); 
 			if (parent && (ProDirExist == true || PrivDirExist == true) ) { 
 			var elem = document.getElementById("multiviewP"); 
 			if(elem) parent.removeChild(elem); 
 			elem = document.getElementById("multiviewN"); 
 			if(elem) parent.removeChild(elem); }
 			initData(); 
 		} else { 
 			var elem; 
 			var parent = document.getElementById("menuViewPPP"); 
 			if (parent) { 
 				elem = document.getElementById("PublicView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("ProtectedView"); 
 				parent.removeChild(elem); 
 				elem = document.getElementById("PrivateView"); 
 				parent.removeChild(elem); 
 			} 
 if (locateObject(getCurrentObjectName(), getCurrentType(), '0')==0) { 
 				elem = document.getElementById("multiviewP"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 			if (locateObject(getCurrentObjectName(), getCurrentType(), '1')==0) { 
 				elem = document.getElementById("multiviewN"); 
 				if (elem) { elem.removeAttribute("href"); elem.removeAttribute("onclick"); } 
 			} 
 }	 
 	} 
 	window.onload = callInit; 
  </script> 
 
<h1>MATPLMService<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_MATPLMService_24016','MATPLMService','0');</script>
<b><i> Interface representing the PLMNew service.</i></b><br>
 It can be retrieves using the 
 <script type="text/javascript"> activateLinkAnchor('CATIAApplication','','CATIAApplication') </script>.GetSessionService("MATPLMService")  <br><b>Role</b>: provides the services to create and edit in authoring session a new PLM entity.
 In case this material is not granted the PLMCreate method of the interface fails.
 The data are created in the default authoring customization domain (environment).</p>
<hr>
<dl>
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#GetMaterialCore"><b>GetMaterialCore</b></a>
<dd>  Method which allows to get the core material applied on the provided support 
 or inherited from an upper support in the same context.
 <dt>
    <a href="#GetMaterialCovering"><b>GetMaterialCovering</b></a>
<dd>  Returns the list of covering materials applied on the support defined in iSupport.
 <dt>
    <a href="#GetMaterialsInSession"><b>GetMaterialsInSession</b></a>
<dd>  Get all materials in session.
 <dt>
    <a href="#PLMCreate"><b>PLMCreate</b></a>
<dd>  Method which allows to create a new material reference.
 <dt>
    <a href="#RemoveAppliedMaterial"><b>RemoveAppliedMaterial</b></a>
<dd>  Removes applied material.
 <dt>
    <a href="#SetDisplayMsgBox"><b>SetDisplayMsgBox</b></a>
<dd>  Allow to display or not a message Box when there is an error.
 <dt>
    <a href="#SetMaterialCore"><b>SetMaterialCore</b></a>
<dd>  Applies a core material on the support defined in iSupport.
 <dt>
    <a href="#SetMaterialCovering"><b>SetMaterialCovering</b></a>
<dd>  Applies a covering material on the support defined in iSupport.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="GetMaterialCore"><dt>

<table><tr><td>o Sub <b>GetMaterialCore</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iSupport</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('MaterialGeneric','MaterialGeneric')</script> <td><tt>oCoreMaterial</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AppliedMaterial','AppliedMaterial')</script> <td><tt>oCoreAppliedMaterial</tt>)</table></dt>
<dl>
  <dd>
 Method which allows to get the core material applied on the provided support 
 or inherited from an upper support in the same context.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSupport</tt>
   <dd>   Defines the support and its context.
   When the support (target of CATOmbObjectInContext) is an element inside a RepReference, a RepInstance must be defined
 </dd>
    <dt><tt> oCoreMaterial</tt>
   <dd>   The returned material reference.
 </dd>
    <dt><tt> oCoreAppliedMaterial</tt>
   <dd>   The returned applied-material.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to retrieve the core material applied on the provided support
   <pre>
   Dim MatService As MATPLMService
   Set MatService = CATIA.GetSessionService("MATPLMService")
   Dim oCoreMatRef As Material
   Dim oCoreMatCnx As AppliedMaterial
   ...
   Dim MyLinkRootOccRepInsFeat As AnyObject
   Set MyLinkRootOccRepInsFeat = MyContext.ComposeLink(oRootOcc, MyPartInstance, MyReference)
   MatService.GetMaterialCore MyLinkRootOccRepInsFeat, oCoreMatRef, oCoreMatCnx</pre></dd>
</dl>
</dl>
<a name="GetMaterialCovering"><dt>

<table><tr><td>o Sub <b>GetMaterialCovering</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iSupport</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIACollection','CATIACollection')</script> <td><tt>oListCoveringMaterials</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AppliedMaterials','AppliedMaterials')</script> <td><tt>oCoveringAppliedMaterials</tt>)</table></dt>
<dl>
  <dd>
 Returns the list of covering materials applied on the support defined in iSupport.
 Only covering materials defined in the context of iSupport will be retrieved.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSupport</tt>
   <dd>   Defines the support and its context.
 </dd>
    <dt><tt> oListCoveringMaterials</tt>
   <dd>    The list of materials references
	   First material in the list is the upper covering material layer.
 </dd>
    <dt><tt> oCoveringAppliedMaterials</tt>
   <dd>   The returned applied-material lists.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to retrieve the core material applied on the provided support
   <pre>
   Dim MatService As MATPLMService
   Set MatService = CATIA.GetSessionService("MATPLMService")
   Dim oCoveringMatRef As Object
   Dim oCoveringMatCnx As AppliedMaterials
   ...
   Dim MyLinkRootOccRepInsFeat As AnyObject
   Set MyLinkRootOccRepInsFeat = MyContext.ComposeLink(oRootOcc, MyPartInstance, MyReference)
   MatService.GetMaterialCovering MyLinkRootOccRepInsFeat, oCoveringMatRef, oCoveringMatCnx</pre></dd>
</dl>
</dl>
<a name="GetMaterialsInSession"><dt>

<table><tr><td>o Sub <b>GetMaterialsInSession</b>(<td><script type="text/javascript"> activateLink('CATIACollection','CATIACollection')</script> <td><tt>oMaterialsInSession</tt>)</table></dt>
<dl>
  <dd>
 Get all materials in session.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> opiMaterialsInSession</tt>
   <dd>   The list of all materials in session.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to get all material in session.
   <pre>
   Dim MatService As MATPLMService
   Dim ListMaterialInSession As Object
   ...
   MatService.GetMaterialsInSession ListMaterialInSession</pre></dd>
</dl>
</dl>
<a name="PLMCreate"><dt>

<table><tr><td>o Sub <b>PLMCreate</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iUserType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('MaterialGeneric','MaterialGeneric')</script> <td><tt>oPLMMatEntity</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIAEditor','CATIAEditor')</script> <td><tt>oEditor</tt>)</table></dt>
<dl>
  <dd>
 Method which allows to create a new material reference.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUserType</tt>
   <dd>   The user discipline to identify the entity to create.
   <br><b>Legal values</b>:
   <tt>dsc_matref_ref_Covering</tt>: to create a Covering material,
   <tt>dsc_matref_ref_Core</tt>: to create a Core material,
 </dd>
    <dt><tt> oPLMMatEntity</tt>
   <dd>   The newly material created.
 </dd>
    <dt><tt> oEditor</tt>
   <dd>   The resulting editor on the newly created data.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to create a new material reference.
   <pre>
   Dim MatService As MATPLMService
   Dim oMaterialEditor As Editor
   Dim oNewMaterialDomain As MaterialDomain
   Dim oNewCoveringMatRef As Material
   Set MatService = CATIA.GetSessionService("MATPLMService")
   ...
   MatService.PLMCreate "dsc_matref_ref_Covering", oNewCoveringMatRef, oMaterialEditor
   oNewCoveringMatRef.AddDomain "dsc_matref_rep_Rendering", oNewMaterialDomain</pre></dd>
</dl>
</dl>
<a name="RemoveAppliedMaterial"><dt>

<table><tr><td>o Sub <b>RemoveAppliedMaterial</b>(<td><script type="text/javascript"> activateLink('AppliedMaterial','AppliedMaterial')</script> <td><tt>iAppliedMaterial</tt>)</table></dt>
<dl>
  <dd>
 Removes applied material.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiAppliedMaterial</tt>
   <dd>   Defines the applied material that will be removed.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to remove an applied material
   <pre>
   Dim MatService As MATPLMService
   Dim oCoreMatCnx As AppliedMaterial
   ...
   MatService.RemoveAppliedMaterial oCoreMatCnx</pre></dd>
</dl>
</dl>
<a name="SetDisplayMsgBox"><dt>

<table><tr><td>o Sub <b>SetDisplayMsgBox</b>(<td><script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iboolDisplayMsgBox</tt>)</table></dt>
<dl>
  <dd>
 Allow to display or not a message Box when there is an error.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iboolDisplayMsgBox</tt>
   <dd>   TRUE  = display a message Box.
   FALSE = not display a message Box.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to not display a message box when there is an error.
   <pre>
   Dim MatService As MATPLMService
   ...
   MatService.SetDisplayMsgBox FALSE</pre></dd>
</dl>
</dl>
<a name="SetMaterialCore"><dt>

<table><tr><td>o Sub <b>SetMaterialCore</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iSupport</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('MaterialGeneric','MaterialGeneric')</script> <td><tt>iCoreMaterial</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AppliedMaterial','AppliedMaterial')</script> <td><tt>oCoreAppliedMaterial</tt>)</table></dt>
<dl>
  <dd>
 Applies a core material on the support defined in iSupport. 
 If a core material is already applied on that support, it is replaced.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSupport</tt>
   <dd>   Defines the support and the context used for applying material.
   The context is the root reference defined by iSupport.
   If the support (target of iSupport) is an element inside a RepReference then a RepInstance must 
   be provided in iSupport to make it valid.
 </dd>
    <dt><tt> iCoreMaterial</tt>
   <dd>   The material reference to be applied on the support.
 </dd>
    <dt><tt> oCoreAppliedMaterial</tt>
   <dd>   The new applied material created.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to retrieve the core material applied on the provided support
   <pre>
   Dim MatService As MATPLMService
   Dim iCoreMatRef As Material
   Dim MyLinkRootOccRepInsFeat As AnyObject
   Set MyLinkRootOccRepInsFeat = MyContext.ComposeLink(oRootOcc, MyPartInstance, MyReference)
   ...
   Dim oCoreMatCnx As AppliedMaterial
   MatService.SetMaterialCore MyLinkRootOccRepInsFeat, iCoreMatRef, oCoreMatCnx</pre></dd>
</dl>
</dl>
<a name="SetMaterialCovering"><dt>

<table><tr><td>o Sub <b>SetMaterialCovering</b>(<td><script type="text/javascript"> activateLink('CATIABase','CATIABase')</script> <td><tt>iSupport</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('MaterialGeneric','MaterialGeneric')</script> <td><tt>iCoveringMaterial</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AppliedMaterial','AppliedMaterial')</script> <td><tt>oCoveringAppliedMaterial</tt>)</table></dt>
<dl>
  <dd>
 Applies a covering material on the support defined in iSupport. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSupport</tt>
   <dd>   Defines the support and the context used for applying material.
   The context is the root reference defined by iSupport.
   If the support (target of iSupport) is an element inside a RepReference then a RepInstance must 
   be provided in iSupport to make it valid.
 </dd>
    <dt><tt> iCoveringMaterial</tt>
   <dd>   The material reference to be applied on the support.
 </dd>
    <dt><tt> oCoveringAppliedMaterial</tt>
   <dd>   The new applied-material created.
 </dd>
</dl>
  <dt> Example: </dt> 
  <dd> <pre class="code">  This example shows you how to retrieve the core material applied on the provided support
   <pre>
   Dim MatService As MATPLMService
   Dim iCoveringMatRef As Material
   Dim MyLinkRootOccRepInsFeat As AnyObject
   Set MyLinkRootOccRepInsFeat = MyContext.ComposeLink(oRootOcc, MyPartInstance, MyReference)
   ...
   Dim oCoveringMatCnx As AppliedMaterial
   MatService.SetMaterialCore MyLinkRootOccRepInsFeat, iCoveringMatRef, oCoveringMatCnx</pre></dd>
</dl>
</dl>
<hr/><p><i>
Copyright &#169; 1999-2014, Dassault Syst&#232;mes. All rights reserved.
</i></p>
</body>

</html>

