<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Extending a Product Reference as Electrical Physical System</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Extending a Product Reference as Electrical Physical System</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAEwrReferenceFactory use case. This use case 
		explains how to extend a product as Electrical Physical System.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAEwrReferenceFactory Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAEwrReferenceFactory Do</a></li>
				<li><a href="#How">How to Launch CAAEwrReferenceFactory</a></li>
				<li><a href="#Where">Where to Find the CAAEwrReferenceFactory Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA EHD Interfaces. Its main intent is to allow you to extend a product as Electrical Physical System.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAEwrReferenceFactory Use Case</h2>
<p>CAAEwrReferenceFactory.m is a use case of the CAAElecRoutingItf.edu framework 
that illustrates the CATIA EHD Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEwrReferenceFactory Do</h3>
<p>The goal of CAAEwrReferenceFactory use case is to show how to extend a product as Electrical Physical System.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAEwrReferenceFactory</h3>
<p>To launch CAAEwrReferenceFactory , you will need to set up the build time 
environment, then compile CAAEwrReferenceFactory along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAEwrReferenceFactory Repository Server User Password SecutityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td> The version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type for Product Reference or Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <strong>CAAEwrReferenceFactory.3dxml</strong>
    file from the  <strong>CAAElecRoutingItf.edu</strong> framework.
</p>
<p><code> InstallRootFolder\CAADoc\CAAElecRoutingItf.edu\InputData\CAAEwrReferenceFactory.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>RootPRD</code></li>
  <li><a><code><strong>Version</strong></code></a>:
    ---</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEwrReferenceFactory Code</h3>
<p>The CAAEwrReferenceFactory sample is made of a single class named CAAEwrReferenceFactory 
located in the CAAEwrReferenceFactory.m module of the CAAElecRoutingItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAElecRoutingItf.edu\CAAEwrReferenceFactory.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CATAdpDictionaryServices</em></td>
		<td>Class to provide all basic functions to browse and navigate on PLM dictionaries.</td>
	</tr>
	<tr>
		<td><em>CAAOpenPLMComponent</em></td>
		<td>Class to manage Open of Reference in session.</td>
	</tr>
	<tr>
		<td><em>CATIPrd3DPartFactory</em></td>
		<td>Class dedicated to the 3DPart object Creation.</td>
	</tr>
	<tr>
		<td><em>CATIEwrReferenceFactory</em></td>
		<td>Interface to extend product as Electrical Physical System.</td>
	</tr>
	<tr>
		<td><em>CATIEwrWireHarness</em></td>
		<td>Interface to manage Electrical Physical System.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Electrical environment and it&#8217;s components creation 
by looking at the code of the Main. There are 10 logical steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Setting the Current Environment to "envToUse" from Input</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Opening the "RootPRD" Model (arg[7])</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Retrieving the Electrical Geometry Instance</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Retrieving the Normal Product Instance and its Reference</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Retrieving CATIEwrReferenceFactory on the Product 
		Reference</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Extending the Product as Electrical Physical System and 
		Linking It with the Electrical Geometry in the Data</a></td>
	</tr>	
	<tr>
		<td>10</td>
		<td><a href="#Step10">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
if (9 != argc)
{
cout &lt;&lt; endl;
cout &lt;&lt;&quot;CAAEwrReferenceFactory &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Version : The version attribute value of the reference to be opened.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;PLMType: PLM Type for PLM Reference or PLM Representation Reference.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
cout &lt;&lt; endl;
retCode = 1;
goto EscapeWay;
}

//------------------------------------------------------------------
// - For Setting StrPLMType
//------------------------------------------------------------------ 
StrPLMType= argv[7];

//------------------------------------------------------------------
// - For Setting Repository
//------------------------------------------------------------------ 
repository = argv[1];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection parameters initialization.</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter("Repository", argv[1]);
if (FAILED(hr)){retCode = 2;goto EscapeWay;}

hr = CATPLMSessionServices::SetPLMSessionParameter("Server", argv[2]);
if (FAILED(hr)){retCode = 3;goto EscapeWay;} 

hr = CATPLMSessionServices::SetPLMSessionParameter("UserID", argv[3]);
if (FAILED(hr)){retCode = 4;goto EscapeWay;}

hr = CATPLMSessionServices::SetPLMSessionParameter("UserPasswd", argv[4]);
if (FAILED(hr)){retCode = 5;goto EscapeWay;}

hr = CATPLMSessionServices::SetPLMSessionParameter("SecurityCtx", argv[5]);
if (FAILED(hr)){retCode = 6;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
if (FAILED(hr)){retCode = 7;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting the Current Environment to "envToUse" from 
Input</h3>
<pre class="code">...
hr = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
if (SUCCEEDED(hr) &amp;&amp; (NULL != pSessionHelpers))
{
  hr = pSessionHelpers-&gt; SetCurrentEnvironment(envToUse);
  if ( FAILED(hr) ){retCode = 8;goto EscapeWay;}
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Opening the "RootPRD" Model (arg[7])</h3>
<pre class="code">...
rootPrdName = argv[7] ;
 hr = ::CAAOpenPLMComponent(StrPLMType, rootPrdName, strVersion, IID_CATIPLMProducts,(void **)&amp;pIRootProduct, Bag, blnExpandAllMode);
 if ((FAILED(hr)) || (NULL == pIRootProduct))
  {
    retCode = 9;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Electrical Geometry Instance</h3>
<pre class="code">...
//NOTE:- Instead of retrieving the existing Electrical Geometry and Normal Product, user can also
// -- Create New product, Extend the Reference as Electrical Geometry
// -- Create one more New product, Use this new Product to be extended as Electrical Physical System and to link with earlier extended Electrical Geometry Instance
// -- Refer Use case CAAExtendPrdAsHarnessBundle for the details of Extending a Product as Electrical Geometry
hr = pIRootProduct-&gt;GetProductByName(strGBNInstName,pIGBN1Inst);
if((FAILED(hr)) || (NULL == pIGBN1Inst)){retCode = 14;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving the Normal Product Instance and its Reference</h3>
<pre class="code">...
hr = pIRootProduct-&gt;GetProductByName(strNormalPRD_TOBE_WIREHARNESS_Name,pIToBeWireHarnessInst);
if((FAILED(hr)) || (NULL == pIToBeWireHarnessInst)){retCode = 15;goto EscapeWay;}

//Try to retrieve "CATIEwrReferenceFactory" on the normal Product instance
//QI FAILs because the API succeeds only on Reference product
hr = pIToBeWireHarnessInst-&gt;QueryInterface(IID_CATIEwrReferenceFactory,(void **)&amp;pIEwrReferenceFactory);
if((SUCCEEDED(hr)) || (NULL != pIEwrReferenceFactory)){retCode = 16;goto EscapeWay;}

hPRDToBeWireHarnessRef = pIToBeWireHarnessInst;
if(NULL_var == hPRDToBeWireHarnessRef){retCode = 17;goto EscapeWay;}

if(hPRDToBeWireHarnessRef-&gt;IsReference()){retCode = 18;goto EscapeWay;}

//Get the Reference Product
hr = hPRDToBeWireHarnessRef-&gt;GetReferenceObject(pIUnkToBeWireHarnessRef);
if((FAILED(hr)) || (NULL == pIUnkToBeWireHarnessRef)){retCode = 19;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving CATIEwrReferenceFactory on the Product Reference</h3>
<pre class="code">...
//QI on CATIEwrReference factory NOW succeeds (as now its been done on reference)
hr = pIUnkToBeWireHarnessRef-&gt;QueryInterface(IID_CATIEwrReferenceFactory,(void **)&amp;pIEwrReferenceFactory);
if((FAILED(hr)) || (NULL == pIEwrReferenceFactory)){retCode = 20;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Extending the Product as Electrical Physical System and 
Linking It with the Electrical Geometry in the Data</h3>
<pre class="code">...
pIListGeoHarness = new CATListValCATBaseUnknown_var();
if(NULL == pIListGeoHarness){retCode = 22;goto EscapeWay;}

pIListGeoHarness-&gt;Append(pIGBN1Inst);

//ExtendAsElecPhysicalSystem succeeds with a given valid input list of Geo Harness
hr = pIEwrReferenceFactory-&gt;ExtendAsElecPhysicalSystem(pIListGeoHarness);
hEwrWireHarness = pIEwrReferenceFactory;
if((FAILED(hr)) || (NULL_var == hEwrWireHarness)){retCode = 23;goto EscapeWay;}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
if (FAILED(hr)) 
{
  cout &lt;&lt; "The SESSION is not Closed" &lt;&lt; endl;
  retCode = 47;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to extend a product as Electrical Physical System.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [April 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
