<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Modifying 2D Layout of Logical Reference/Instance Interactively</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Modifying 2D Layout of Logical Reference/Instance 
		Interactively</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article demonstrates to an end user how to modify the 2D layout 
		parameters associated with Logical Reference/Instance interactively in CATIA. 
		The Technical article[<a href="#References">1</a>] delves deeper into the 
		details of 2D Layout parameters associated with the Logical Reference/Instance.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALmiUcModifyLogical2DLayoutInteractively 
				Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALmiUcModifyLogical2DLayoutInteractively 
						Do</a></li>
					<li><a href="#How">How to Launch CAALmiUcModifyLogical2DLayoutInteractively</a></li>
					<li><a href="#Where">Where to Find the CAALmiUcModifyLogical2DLayoutInteractively 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case educates an end-user how to modify the 2D layout of Logical Reference/Instance 
interactively, using the API's of <em>CATIFL2DEntity</em> interface.</p>
<p>You will learn how to use the selected Logical Reference/Instance to retrieve 
its existing 2D Layout parameters, and then modify these parameters with the ones 
input by the user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALmiUcModifyLogical2DLayoutInteractivelyUse Case</h2>
<p>CAALmiUcModifyLogical2DLayoutInteractively is a use case of the CAALogicalModelerUseItf.edu 
framework that mainly illustrates CATFLEditorItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALmiUcModifyLogical2DLayoutInteractively Do</h3>
<p>The CAALmiUcModifyLogical2DLayoutInteractively use case is a command in CATIA 
for modifying the 2D layout of Logical Reference/Instance interactively. It enables 
an end user to select a Logical Reference/Instance from FL Editor in CATIA.</p>
<p>The use case adds a &quot;<strong>CAA RFL PLM</strong>&quot; toolbar (as an add-in [<a href="#References">2</a>]) 
to the &quot;VPM Functional Logical Editor&quot; Workbench in CATIA.</p>
<p>The &quot;<strong>CAA RFL PLM</strong>&quot; toolbar is as seen in the [<a href="#Fig1">Fig.1]
</a>below. It contains in first position a command named<strong> Modify the 2D Layout</strong> 
which will be further used by the user to modify the 2D Layout of Logical reference/instance.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: CAA RFL PLM Toolbar</caption>
	<tr>
		<td>
		<img alt="CAA RFL PLM Toolbar" src="images/CAAFLUcToolbarAddin.png"/></td>
	</tr>
</table>
<p>Once the user activates the command, it enables the end user to select a Logical 
object from the FL Editor. When the selected object is not UI activated, it implies 
that the user has selected the logical instance , else the Logical Reference.</p>
<p>As soon as the user selects the Logical object, the following dialog box appears:</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: Modify 2D Layout Dialog Box</caption>
	<tr>
		<td>
		<img alt="Modify 2D Layout Dialog Box" src="images/CAAFLUcModifyLogical2DLayoutInteractively_Fig2.jpg"/></td>
	</tr>
</table>
<p>As depicted in the &quot;Modify 2D Layout Dialog Box&quot; Dialog Box above , 
the various fields of this Dialog Box are from top down :</p>
<ul>
	<li><strong>PositionX</strong>: Horizontal Position of the lower left corner of the 2D 
		Layout associated with the selected Logical reference or instance.</li>
	<li><strong>PositionY</strong>: Vertical Position of the lower left corner of the 2D Layout 
		associated with the selected Logical reference or instance.</li>
	<li><strong>Width</strong>: Width of the 2D Layout associated with the selected Logical 
		reference or instance.</li>
	<li><strong>Height</strong>: Height of the 2D Layout associated with the selected Logical 
		reference or instance.</li>
</ul>
<p>In the <strong>&quot;Modify 2D Layout Dialog Box</strong>&quot; Dialog Box[<a href="#Fig2">Fig.2</a>] 
above, the user edits the 2D layout parameters of the selected Logical Reference/Instance.</p>
<p>Next, three cases are possible:</p>
<ul>
	<li>If the user clicks <strong>"Apply"</strong> Button:
		<ul>
			<li>Retrieves the 2d layout parameters(of selected component) from the 
				Dialog, sets the new parameters on the selected component.</li>
			<li>Updates the 3d Visu in CATIA for the modified component.</li>
		</ul>
	</li>
	<li>If the user clicks <strong>"Ok"</strong> button:
		<ul>
			<li>Retrieves the 2d layout parameters(of selected component) from the 
				Dialog, sets the new parameters on the selected component.</li>
			<li>Updates the 3d Visu in CATIA for the modified component.</li>
			<li>Closes the Dialog</li>
		</ul>
	</li>
	<li>If the user clicks <strong>"Cancel"</strong> button or close the dialog window:
		<ul>
			<li>Cancels the command.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALmiUcModifyLogical2DLayoutInteractively</h3>
<p>To launch CAALmiUcModifyLogical2DLayoutInteractively, you will need to set up 
the build time environment, then compile CAALmiUcModifyLogical2DLayoutInteractively 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">3</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Connect</strong> to the database.</li>
	<li>Select your <strong>environment</strong>.</li>
	<li><strong>Open</strong> the &quot;<strong>VPM Functional Logical Editor</strong>&quot;.</li>
	<li>Check that the <strong>CAA RFL PLM</strong> toolbar (See <a href="#Addin">Add-in Access</a>) 
		is existing, as shown in <a href="#Fig1">Fig.1</a> above.</li>
	<li>When the user launches the &quot;<strong>Modify 2D Layout</strong>&quot; command, 
		it enables the user to select either a Logical Reference/Instance in the 
		spec tree. Next, as soon as the user selects the Logical reference/instance, 
		<strong>Modify 2D Layout Dialog Box</strong>&quot; Dialog Box appears, whose various 
		fields will be populated with the respective 2D Layout parameters of the 
		selected Logical reference/instance.</li>
</ul>
<p>The <a href="#What">What Does CAALmiUcModifyLogical2DLayoutInteractively Do</a> 
section provides further details on the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The &quot;VPM Functional Logical Editor&quot; Workbench add in within CATIA, 
is available thanks to a data extension of the CATRFLToolbarAddIn component. This 
necessitates the following entries in the .dico file.</p>
<pre class="code">...
#CAA# CATRFLToolbarAddIn  CATIPLMEditorWorkbenchAddin	libCAARFLPLMToolbar
#CAA# CATRFLToolbarAddIn  CATIWorkbenchAddin      	libCAARFLPLMToolbar
...</pre>
<p>Before launching CATIA, remove #CAA# characters in the CAAFLEditorServices.edu.dico 
in front of the above lines.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALmiUcModifyLogical2DLayoutInteractively 
Code</h3>
<p>The CAALmiUcModifyLogical2DLayoutInteractively use case is made of several classes/files 
located in the CAARFLPLMToolbar.m module of the CAAFLEditorServices.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFLEditorServices.edu\CAARFLPLMToolbar.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>CAARFLPLMModifyLgl2DRefOrInstanceCmdDlg.cpp is the dialog class implementation 
		to display the data input by user necessary for modifying 2D Layout parameters 
		of selected Logical Reference/Instance.</li>
	<li>CAARFLPLMModifyLgl2DRefOrInstanceCmd.cpp is the state command implementation. 
		It enables an end user to select a Logical Reference/Instance and is responsible 
		for launching the dialog box for modifying the 2D Layout parameters of the 
		selected Logical Reference/Instance.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAALmiUcModifyLogical2DLayoutInteractively use 
case:</p>
<ol>
	<li><a href="#Step1">Retrieving the Existing 2D Layout of the Selected Logical 
		Reference/Instance</a></li>
	<li><a href="#Step2">Showing the Dialog with the Retrieved 2D Layout Parameters 
		of the Selected Logical Reference/Instance</a></li>
	<li><a href="#Step3">Retrieving the Edited 2D Layout Parameters from the Dialog</a></li>
	<li><a href="#Step4">On "Apply" Button Click, Updating the 3D Visu in CATIA 
		for the Modified Component</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Existing 2D Layout of the Selected Logical 
Reference/Instance</h3>
<p>Activating the command enables the end user to select either a Logical object 
from the FL Editor. As soon as the user selects the Logical object, the method
<code>Retrieve2dLayoutOfSelRefOrInst</code> is called. This method is responsible for 
retrieving the existing 2D Layout parameters of the selected object and passes the 
retrieved parameters to the Dialog.</p>
<pre class="code">...
  CATBoolean CAARFLPLMModifyLgl2DRefOrInstanceCmd::<strong>Retrieve2dLayoutOfSelRefOrInst</strong>(void* iData)
  {
	CATPathElement* <strong>pathmodelOfSelectedObj</strong> = _daPathEleLglRefOrInstance-&gt;GetValue();

	CATIFL2DEntity *<strong>opiLgl2dEntityOnSelObj</strong>=NULL;
	HRESULT rc = <strong>RetrieveFL2DEntityPtrOnSelObj</strong>(pathmodelOfSelectedObj,<strong>opiLgl2dEntityOnSelObj</strong>);

	if(SUCCEEDED(rc) &amp;&amp; NULL!=opiLgl2dEntityOnSelObj)
	{
	     _pCAARFLPLMModifyLgl2DRefOrInstanceCmdDlg-&gt;<strong>Put2DParaInDlg</strong>(opiLgl2dEntityOnSelObj);
...</pre>
<p>The extract above is a part of the <code>Retrieve2dLayoutOfSelRefOrInst</code> command 
method. We retrieve the Logical object selected by the user from the Editor.</p>
<p>The dialog agent associated with the initial selection state returns a CATPathElement 
object, whose first element is the selected occurrence.</p>
<pre class="code">...
   void CAARFLPLMModifyLgl2DRefOrInstanceCmd::BuildGraph()
   {
     <strong>_daPathEleLglRefOrInstance = new CATPathElementAgent("PathEleLglRefOrInstance");
     _daPathEleLglRefOrInstance-&gt;AddElementType(IID_CATIPLMNavOccurrence);</strong>
...</pre>
<p>This <em>CATPathElement</em> object (<code>daPathEleLglRefOrInstance</code>) 
is passed to the method <code>RetrieveFL2DEntityPtrOnSelObj</code> of the command 
class for retrieving the 2D Layout parameters of the selected occurrence and return 
it in form of <em>CATIFL2DEntity</em> interface pointer, as depicted in the code 
just above.</p>
<p><code>RetrieveFL2DEntityPtrOnSelObj</code> is responsible for retrieving the 2D Layout 
parameters of the selected occurrence and return it in form of <em>CATIFL2DEntity</em> 
interface pointer.</p>
<p>Let us move into the implementation details of <code>RetrieveFL2DEntityPtrOnSelObj</code> 
method.</p>
<pre class="code">...
	HRESULT CAARFLPLMModifyLgl2DRefOrInstanceCmd::<strong>RetrieveFL2DEntityPtrOnSelObj(CATPathElement* ipathmodelOfSelectedObj, 
						                          CATIFL2DEntity *&amp;opiLgl2dEntityOnSelObj)</strong>
	{
	  HRESULT rc =E_FAIL;
	
	  opiLgl2dEntityOnSelObj=NULL;
	  CATBaseUnknown *<strong>pCatBaseOnSelRefOrInstance</strong>=NULL;
	  if(NULL!=ipathmodelOfSelectedObj)
		<strong>pCatBaseOnSelRefOrInstance= (*ipathmodelOfSelectedObj)[(ipathmodelOfSelectedObj-&gt;GetSize())-1];</strong>
	  ...
	  <strong>CATBoolean isSelInstUIActive= FALSE;</strong>
	  isSelInstUIActive= <strong>IsSelectedObjectUIActivated</strong>(ipathmodelOfSelectedObj);

 	  CATIPLMNavOccurrence *pNavOccurenceObj = NULL ;
	  <strong>rc = pCatBaseOnSelRefOrInstance-&gt;QueryInterface(IID_CATIPLMNavOccurrence, (void**) &amp;pNavOccurenceObj);</strong> 
	  if(SUCCEEDED(rc))
	  {
		<strong>if(TRUE==isSelInstUIActive)</strong>
		{
			CATIPLMNavReference *pReference=NULL;
			<strong>pNavOccurenceObj-&gt;GetRelatedReference(pReference);</strong>
			if(NULL!=pReference)
			{
				rc= <strong>pReference-&gt;QueryInterface(IID_CATIFL2DEntity,(void**)&amp;opiLgl2dEntityOnSelObj);</strong>
				...
		}
		else
		{
		   CATIPLMNavInstance *pInstance=NULL;
		    <strong>pNavOccurenceObj-&gt;GetRelatedInstance(pInstance);</strong> 
		    if ( NULL != pInstance )
                     {
              	      <strong>rc= pInstance-&gt;QueryInterface(IID_CATIFL2DEntity,(void**)&amp;opiLgl2dEntityOnSelObj);</strong>
...</pre>
<p>The method <code>RetrieveFL2DEntityPtrOnSelObj</code> begins with retrieving 
the <em>CATBaseUnknown</em> of the selected occurrence, the selected occurrence 
being the first element of <em>CATPathElement</em> object. Since, it is important 
to know whether selected occurrence is UI activated or not, we call the method
<code>IsSelectedObjectUIActivated</code>, whose responsibility is to check whether 
the selected object is UI activated or not and accordingly return TRUE/FLASE.</p>
<p>Please note that, since we have selected an occurrence, if the call to <code>IsSelectedObjectUIActivated</code> 
returns TRUE, we retrieve the related reference of selected occurrence , else retrieve 
the related instance (as mentioned in the code abstract above). We then retrieve 
the <em>CATIFL2DEntity</em> pointer on the retrieved related reference/instance. 
The <em>CATIFL2DEntity</em> pointer retrieved here is then further passed to the 
method <code>Put2DParaInDlg</code> of Dialog class to retrieve the 2D Layout parameters 
of the selected Logical reference/Instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Showing the Dialog with the Retrieved 2D Layout Parameters 
of the Selected Logical Reference/Instance</h3>
<p>In this section, we use the <em>CATIFL2DEntity</em> pointer (retrieved in the 
previous section ) in the method <code>Put2DParaInDlg</code> of Dialog class, whose responsibility 
is to retrieve the 2D Layout parameters of the selected Logical Reference/Instance.</p>
<pre class="code">void <strong>CAARFLPLMModifyLgl2DRefOrInstanceCmdDlg::Put2DParaInDlg(CATIFL2DEntity *ipLgl2dEntity)</strong>
{
...
	float oX = 0.f;
	float oY = 0.f;
	<strong>HRESULT rc = _opiLgl2dEntity -&gt; Get2DPosition(oX, oY);</strong>
	...
	_InitialPositionXOfEditedObject=oX;
	_InitialPositionYOfEditedObject=oY;
	...
	<strong>_pEditorForPosX-&gt;SetFloatValue(oX);</strong>
	<strong>_pEditorForPosY-&gt;SetFloatValue(oY);</strong>
	...
	float oW = 0.f;
	float oH = 0.f;
	<strong>rc = _opiLgl2dEntity -&gt;Get2DSize(oW, oH);</strong>
	...
	_InitialWidthOfEditedObject=oW;
	_InitialHeightOfEditedObject=oH;
	...
	<strong>_pEditorForWidth-&gt;SetFloatValue(oW);</strong>
	<strong>_pEditorForHeight-&gt;SetFloatValue(oH);</strong>
	...
	<strong>this-&gt;SetVisibility(CATDlgShow);</strong>
}</pre>
<p>The execution corresponding to the code extract above occurs in a sequence as 
listed below :</p>
<ul>
	<li>Retrieve the initial 2d position of the currently selected component.</li>
	<li>Enter the retrieved 2d position values in dialog.</li>
	<li>Retrieve the initial 2d size and width of the currently selected component.</li>
	<li>Enter the retrieved 2d size and width values in dialog.</li>
	<li>Show the Dialog Box.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Edited 2D Layout Parameters from the Dialog</h3>
<p>When the user edits the 2D layout parameters of the selected component in the 
Dialog, we retrieve these edited parameters.</p>
<pre class="code">...
  <strong>void CAARFLPLMModifyLgl2DRefOrInstanceCmdDlg::Edit2DparaOfRefOrInstance()</strong>
  {
      if(NULL!=_opiLgl2dEntity)
      {
	   float oX = 0.f;
	   float oY = 0.f;
	   <strong>oX= _pEditorForPosX-&gt;GetFloatValue();</strong>
	   <strong>oY=_pEditorForPosY-&gt;GetFloatValue();</strong>

	   float oW = 0.f;
	   float oH = 0.f;
	   <strong>oW= _pEditorForWidth-&gt;GetFloatValue();
	   oH= _pEditorForHeight-&gt;GetFloatValue();</strong>
...</pre>
<p>Depending on whether the user clicks &quot;<strong>OK</strong> " or " <strong>
Apply</strong>" button, the edited parameters in the Dialog are then set on the 
selected component. The further details are mentioned in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>On "Apply" Button Click, Updating the 3D Visu in CATIA for 
the Modified Component</h3>
<p>If the user clicks &quot;<strong>Apply</strong>&quot; button , the edited 2D 
layout parameters in the Dialog are then set on the selected component.</p>
<pre class="code">
...
   <strong> HRESULT rc = _opiLgl2dEntity -&gt; Set2DPosition(oX, oY);
</strong>    ...
   <strong> rc = _opiLgl2dEntity-&gt;Set2DSize(oW, oH);</strong>
...</pre>
<p>The API <code>CATIFL2DEntity::Set2DPosition</code> not only sets the 2D position parameters 
of the Logical Reference/Instance, BUT it also <strong>updates the 3D Visu in CATIA
</strong>of the Logical Reference/Instance depending on which the API is called.</p>
<p>Similarly, the API <code>CATIFL2DEntity::Set2DSize</code> not only sets the 2D size(Width, 
Height) parameters of the Logical Reference/Instance, BUT it also <strong>updates 
the 3D Visu in CATIA</strong> of the Logical Reference/Instance depending on which 
the API is called.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates the end user how to modify the 2D layout parameters 
associated with Logical Reference/Instance interactively in CATIA.</p>
<p>Once the command is launched, it enables the user to select a Logical Reference/Instance 
from FL Editor. Further, the user modifies the various 2D layout parameters associated 
with the selected component. For setting the modified 2D Layout parameters on the 
selected Logical Reference/Instance, the API <code>CATIFL2DEntity::Set2DPosition</code> 
and <code>CATIFL2DEntity::Set2DSize</code> are used.</p>
<p>Here, It is important to <strong>note the fact</strong> - The API's of <em>CATIFL2DEntity</em> 
interface (<code>CATIFL2DEntity::Set2DPosition</code> and <code>CATIFL2DEntity::Set2DSize</code>) 
not only sets the 2D Parameters on the Logical Reference/Instance <strong>BUT</strong> 
internally it also updates the 3D Visu in CATIA for the respective reference/instance
<strong>i.e.</strong> the end user does not have to update the 3D Visu for the selected 
component explicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAALmiLogicalModeler/CAALmiTaLogical2DLayout.htm">
		Logical Reference with 2D Layout</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAFLUcToolbarAddIn.htm">Adding a Toolbar to the VPM Functional 
		Logical Editor Workbench</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
