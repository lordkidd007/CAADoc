<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Adding a Toolbar to the VPM Functional Logical Editor Workbench</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Adding a Toolbar to the CATIA Functional and Logical Design Application</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article presents the CAARFLPLMToolbarAddIn use case which illustrates 
		how to create a toolbar that is active in the CATIA Functional and Logical 
		Design App.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAARFLPLMToolbarAddIn Use Case</a>
				<ul>
					<li><a href="#What">What Does CAARFLPLMToolbarAddIn Do</a></li>
					<li><a href="#How">How to Launch CAARFLPLMToolbarAddIn</a></li>
					<li><a href="#Where">Where to Find the CAARFLPLMToolbarAddIn 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>By implementing the <em>CATIPLMEditorWorkbenchAddin</em>, a toolbar with its 
commands can be made active in the CATIA Functional and Logical Design Application.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAARFLPLMToolbarAddIn Use Case</h2>
<p>CAARFLPLMToolbarAddIn is a use case of the CAAFLEditorServices.edu framework 
that illustrates the CATFLEditorServices framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAARFLPLMToolbarAddIn Do</h3>
<p>The goal of CAARFLPLMToolbarAddIn is to demonstrate how to implement the <em>
CATIPLMEditorWorkbenchAddin</em> interface. It consists of the following parts:</p>
<ul>
	<li>Code to create the toolbar.</li>
	<li>Resource definition for the visual aspects of the interface.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAARFLPLMToolbarAddIn</h3>
<p>To launch CAARFLPLMToolbarAddIn:</p>
<ol>
	<li>Set the current directory to <code>InstallRootFolder\CAADoc\CAAFLEditorServices.edu</code>
		<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is 
		the folder where the API CD-ROM is installed.</p>
	</li>
	<li>Set up the build time environment and build the <code>CAARFLPLMToolbar.m</code> 
		module (see reference <a href="#References">[1]</a>)</li>
	<li>Edit the <code>CNext\code\dictionary\CAAFLEditorServices.edu.dico</code> 
		dictionary by uncommenting #CAA# from the following lines:
		<pre class="code"># CAARFLPLMToolbarAddIn use case
#CAA# CATRFLToolbarAddIn	CATIPLMEditorWorkbenchAddin	libCAARFLPLMToolbar
#CAA# CATRFLToolbarAddIn      CATIWorkbenchAddin      	libCAARFLPLMToolbar</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code>.</li>
	<li>Start CATIA V6 by executing <code>mkrun -c 3DEXPERIENCE</code>.</li>
	<li>Launch the CATIA Functional and Logical Design App with 3D Modeling 
	(West quadrant of Compass) -&gt; Functional and Logical Design.</li>
	<li>Display the toolbar named &quot;CAA RFL PLM&quot; if necessary ( Display 
		/ Toolbars / CAA RFL PLM addin toolbar).</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAARFLPLMToolbarAddIn Code</h3>
<p>CAARFLPLMToolbarAddIn code is located in the <code>InstallRootFolder/CAAFLEditorServices.edu/CAARFLPLMToolbar.m/src</code> 
folder, where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three parts in CAARFLPLMToolbarAddIn:</p>
<ol>
	<li><a href="#Step1">Toolbar Creation and Layout</a></li>
	<li><a href="#Step3">User Interface</a></li>
</ol>
<p>We will now detail each of those sections:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Toolbar Creation and Layout</h3>
<p>The implementation of <em>CATIPLMEditorWorkbenchAddin</em> is provided by our
<em>CAARFLPLMToolbarAddIn</em> class. Its purpose is to create the toolbar and to 
do the layout the commands on it. Only two methods need be defined: <code>CreateToolbars</code> 
and <code>CreateCommands</code>.</p>
<pre class="code">...
class CAARFLPLMToolbarAddIn : public CATIPLMEditorWorkbenchAddin

{
  // Used in conjunction with CATImplementClass in the .cpp file 
  CATDeclareClass;

  public:

     CAARFLPLMToolbarAddIn();
     virtual ~CAARFLPLMToolbarAddIn();

     // Instantiates the command headers for the commands
     void CreateCommands();

     // Creates toolbars and arranges the commands inside
     CATCmdContainer * CreateToolbars();
  
  private:

     // Copy constructor, not implemented
     // Set as private to prevent from compiler automatic creation as public.
     CAARFLPLMToolbarAddIn(const CAARFLPLMToolbarAddIn &amp;iObjectToCopy);

     // Assigment operator, not implemented
     // Set as private to prevent from compiler automatic creation as public.
     CAARFLPLMToolbarAddIn &amp; operator = (const CAARFLPLMToolbarAddIn &amp;iObjectToCopy);

};
...</pre>
<p>The purpose of the <code>CreateToolbars</code> method is to create all the command 
headers of our toolbar. In this case a toolbar named <code>CAAToolbar</code> with 
a command named <code>CAARFLPLMToolbarAddInCmd1</code> is created.</p>
<pre class="code">...
CATCmdContainer * CAARFLPLMToolbarAddIn::<strong>CreateToolbars</strong> ()
{
    //  Declaration  of  toolbar  for  Addin   
    NewAccess(CATCmdContainer, pCAARFLPLMToolbarAddInTL, CAARFLPLMToolbarAddInTL);  

    // To add commands in the toolbar decoment the following lines and replace the string pPointerToTheCommandToAdd, NameOfTheCommandClassToAdd NameOfTheCommandHeaderToAdd (defined in the CreateCommands method below) by the proper ones
    //NewAccess(CATCmdStarter,pPointerToTheCommandToAdd,NameOfTheCommandClassToAdd);
    //SetAccessCommand(pPointerToTheCommandToAdd,"NameOfTheCommandHeaderToAdd");
    //SetAccessChild(pCAARFLPLMToolbarAddInTL, pPointerToTheCommandToAdd);

    AddToolbarView(pCAARFLPLMToolbarAddInTL,  -1,  Right);  

    return pCAARFLPLMToolbarAddInTL;
}
...</pre>
<p>The purpose of the <code>CreateCommands</code> method is to create all the command 
headers of our toolbar.</p>
<pre class="code">...
#include "CATCreateWorkshop.h"
#include "CATAfrCommandHeader.h"

void CAARFLPLMToolbarAddIn::CreateCommands ()
{
   // To declare a new command header, uncomment and adapt the following lines
   // static const XXX sParam = ???;
   // new CAAPLMEditorHeaderAddIn("NameOfTheCommandHeaderToAdd ","ModuleName","NameOfTheCppContainingTheCommandCode", (void*)&amp;sParam); 
}
...</pre>
<p>Now that we have completed the code implementation, we need to take care of the 
user interface with the help of resource files.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>User Interface</h3>
<p>The title of the toolbar named <code>CAARFLPLMToolbarAddIn</code> is defined 
by the <code>CAARFLPLMToolbarAddIn.CATNls</code> which can be found in <code>InstallRootFolder\CAAFLEditorServices.edu\CNext\resources\msgcatalog</code>, 
where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<pre class="code">CAARFLPLMToolbarAddInTL.Title = &quot;CAA RFL PLM&quot;;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to create a toolbar with a command:</p>
<ul>
	<li>Implement the <em>CATIPLMEditorWorkbenchAddin</em> interface to create a 
		toolbar and layout the commands.</li>
	<li>Derive from CATCommand to implement the command action.</li>
	<li>Define resource files for the user interface.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
