<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating Applicative Containers in Context</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating Applicative Container</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtCreateAppliContInContext</code> 
		use case. It illustrates the steps involved to create an Applicative Container 
		[<a href="#References">1</a>] inside a PLM Product Representation Reference 
		in three contexts namely. a PLM Object, an existing Applicative Container, 
		and an existing feature. In other words, each newly applicative container 
		is created inside the PLM Product Representation Reference defined by the 
		context.</p>
		<p>The PLM Product Representation Reference is a PLM Technological Representation, 
		so it means that it will be created with an initial applicative container. 
		This first creation is not detailed here. Refer to the use case &quot;Creating 
		PLM Technological Representation&quot; [<a href="#References">2</a>].</p>
		<p>If you have to create an applicative container for a 3DShape, or for 
		a PLM Technological Representation (in addition of the first one of this 
		later), this article is dedicated for you.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtCreateAppliContInContext Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtCreateAppliContInContext Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtCreateAppliContInContext
				</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtCreateAppliContInContext 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#CAAFmExtCreateRepRef">CAAFmExtCreateRepRef Function</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved to create an Applicative Container in a three 
different contexts namely. a PLM object (a PLM Product Representation Reference), 
an existing Applicative Container and an existing feature. The UC further illustrates 
retrieving each of the Applicative Container, with their names as input.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtCreateAppliContInContext Use Case</h2>
<p><code>CAAFmExtCreateAppliContInContext</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtCreateAppliContInContext Do</h3>
<p>The UC illustrates creating an Applicative Container in three different contexts 
namely. a Product Rep Ref (a PLM Technological Representation), another Applicative 
Container and a feature.</p>
<p>For this purpose, its execution proceeds as follows:</p>
<ul>
	<li>To begin with, it creates a Credentials object which includes the ownership 
	credentials of the &quot;<strong>CAAOsmCatalogSU</strong>&quot; catalog and as an application 
	based on the Feature Modeler Infrastructure</li>
	<li>Next it creates a new PLM Technological Representation (with a default container) 
	not detailed here [<a href="#References">2</a>] - we name this New PLM Technological 
	Representation, the PLM Rep Ref, since for the next of the UC, the PLM Product 
	Representation Reference could be a 3DShape, or a PLM Technological Representation.
	</li>
	<li>It creates a second applicative container inside the new PLM Rep Ref using 
	this new PLM Rep Ref as context,</li>
	<li>It creates a third applicative Container inside the new PLM Rep Ref using 
	an applicative container (the initial one) as context</li>
	<li>It further instantiates the &quot;<strong>CAAOsmNovel</strong>&quot; StartUp (defined 
	in the &quot;<strong>CAAOsmCatalogSU</strong>&quot; catalog) inside the second Applicative 
	Container</li>
	<li>It then creates a forth and last an Applicative Container inside the new 
	PLM Rep Ref using the new feature as context</li>
	<li>It finally retrieves each of the three Applicative Containers we created 
	in the previous steps. The containers are identified by their names</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtCreateAppliContInContext</h3>
<p>To launch <code>CAAFmExtCreateAppliContInContext</code>, you will need to set 
up the build time environment, then compile <code>CAAFmExtCreateAppliContInContext
</code>along with its prerequisites, set up the run time environment, and then execute 
the sample. This is fully described in the referenced article [<a href="#References">3</a>].
</p>
<p>mkrun -c &quot;<em>CAAFmExtCreateAppliContInContexts Repository Server UserId Password 
SecurityCtx Environment</em>&quot; where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtCreateAppliContInContext Code</h3>
<p><code>CAAFmExtCreateAppliContInContext</code> code is located in the <code>CAAFmExtCreateAppliContInContext.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtCreateAppliContInContext.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the root 
folder of your API installation. It is made of a unique source file named <code>
CAAFmExtCreateAppliContInContext.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps of the <code>CAAFmExtCreateAppliContInContext</code> UC are:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create a credentials object">Creating a Credentials Object</a></li>
	<li><a href="#Create an Appli Cont with 3D Shape as context">Creating an Applicative 
	Container with a PLM Rep Ref as context</a></li>
	<li><a href="#Create Appli Cont with another Appli Cont as context">Creating 
	an Applicative Container with an existing Applicative Container as context</a></li>
	<li><a href="#Create Appli Cont with feat as context">Creating an Applicative 
	Container with an existing feature as context</a></li>
	<li><a href="#Retrieve appli Cont using name">Retrieving Applicative Containers 
	using their names</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">4</a>]. The Use Case creates a PLM Technological Representation 
further detailed in the referenced article [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a credentials object"></a>Creating a Credentials object</h3>
<p>The current UC involves instantiating the &quot;<strong>CAAOsmNovel</strong>&quot; feature 
(defined in the &quot;<strong>CAAOsmCatalogSU</strong>&quot; catalog) inside an Applicative 
Container. We would thus need the credentials as an owner of the &quot;<strong>CAAOsmCatalogSU</strong>&quot; 
catalog and as an application based on the Feature Modeler Infrastructure. The TA 
&quot;<strong>Understanding Credentials</strong>&quot; [<a href="#References">5</a>] details 
the Credentials concept.</p>
<p>First we register as based on the Feature modeler infrastructure.</p>
<pre class="code">
#include &quot;CATFmFeatureModelerID.h&quot;
CATFmCredentials MyCredential;
rc = MyCredential.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,&quot;CAAFmExtFeatureModeler&quot;)
...</pre>
<p>The call to <code>RegisterAsApplicationBasedOn</code> of a <em>CATFmCredentials</em> 
instance (<code>MyCredentials</code>) registers an application as being based on 
a given Infrastructure. The first inputs of the API is the Infrastructure ID. Today 
you only have <code>CATFmFeatureModelerID</code>, and ID exposed by the header file, 
&quot;CATFmFeatureModelerID.h&quot;. The second argument is the PartnerId for licensing purpose. 
In all the CAAFeatureModelerExtend.edu framework use cases, we use the string &quot;<code>CAAFmExtFeatureModeler</code>&quot;.</p>
<p>Then we register as owner of the feature catalog.</p>
<pre class="code">
rc = MyCredential.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAOsmCatalogSU&quot;,&quot;CAAOsmClientId&quot;);
</pre>
<p>The call to <code>RegisterAsCatalogOwner</code> on a <em>CATFmCredentials</em> 
instance (<code>MyCredentials</code>) appends it with the ownership credentials 
of a feature catalog. The API inputs include a set, the Catalog name (<code>CAAOsmCatalogSU</code>) 
and its associated clientID (<code>CAAOsmClientID</code>), an input at the time 
of catalog creation. The UC &quot;<strong>Working with Credentials</strong>&quot; [<a href="#References">6</a>] 
explains the steps involved while working with Credentials.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create an Appli Cont with 3D Shape as context"></a>Creating an Applicative 
Container with a PLM Rep Ref as Context</h3>
<p>We begin by creating an Applicative Container with the newly Technological Representation 
as context.</p>
<pre class="code">
...
CATFmContainerFacade MyContFacadeFromNewRepRef(MyCredential);
CATUnicodeString NameOfContWithPLMRepRefCtxt = &quot;ContCreatedWithPLMRepRefContext&quot; ;
CATUnicodeString TypeofContainer = &quot;CAAFmExtAppliCont&quot; ;
rc = <strong>CATFmContainerServices::CreateApplicativeContainer</strong>(MyCredential, <strong>pPsiCreatedRepRef</strong>,
                                                             TypeofContainer,
                                                             NameOfContWithPLMRepRefCtxt,
                                                             MyContFacadeFromNewRepRef);                                                            
...
</pre>
<p>The <code>CreateApplicativeContainer()</code> static method of the <em>CATFmContainerServices</em> 
class creates an Applicative Container inside the main stream of the input Product 
Representation Reference</p>
<p>The arguments are:</p>
<ul>
	<li><code>MyCredential</code>, a <em>CATFmCredentials</em> instance, is required 
	to retrieve the licensing info. This information is given by the second argument 
	of the <code>RegisterAsApplicationBaseOn</code> method.</li>
	<li><code>pPsiCreatedRepRef</code>, a <em>CATIPsiRepresentationReference</em>* 
	type representing the created PLM Technological Representation #<a href="#Prolog">Prolog</a>.</li>
	<li><code>TypeofContainer</code>, a <em>CATUnicodeString</em> type, representing 
	the late type of the Container. The late type implement <em>CATInit</em>, if 
	you want to add your own behavior to the container. It implements the Factory 
	Interface to instantiate features inside the container. Our late type is &quot;<strong>CATFmExtAppliCont</strong>&quot;.</li>
	<li><code>NameOfContWithPLMRepRefCtxt</code>, a <em>CATUnicodeString</em> type, 
	representing the identifier for our container namely. &quot;<strong>ContCreatedWithPLMRepRefContext</strong>&quot;. 
	Please note the name reflects the methodology of creation.</li>
	<li><code>MyContFacadeFromNewRepRef</code>, a <em>CATFmContainerFacade</em> type, 
	representing the output Applicative Container as a facade. Please note we have 
	associated Credentials (MyCredential) with it, which allow us to instantiate 
	features in this container, in the steps ahead.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create Appli Cont with another Appli Cont as context"></a>Creating 
an Applicative Container with an existing Applicative Container as Context</h3>
<p>We next create an Applicative Container with the context as an existing Applicative 
Container. The new Container is created in the same stream as that of the contextual 
Applicative Container.</p>
<p>The context Applicative Container was retrieved as a <em>CATFmContainerFacade</em> 
type earlier. We require this context as a <em>CATBaseUnknown</em>* type. The
<code>QueryInterfaceOnContainer()</code> call of the <em>CATFmContainerFacade</em> 
class, retrieves the underlying container feature, as one of its implementing interface 
type, in the current case as a <em>CATBaseUnknown</em>* type (<code>piNewContAsContext).
</code></p>
<pre class="code">
...
    CATFmContainerFacade MyContFacadeFromNewCont;
    CATUnicodeString NameOfContWithContCtxt = &quot;ContCreatedWithContContext&quot; ;
    rc =  <strong>CATFmContainerServices::CreateApplicativeContainer</strong>(MyCredential, <strong>pNewContainer</strong>,
                                                             TypeofContainer,
                                                             NameOfContWithContCtxt,
                                                             MyContFacadeFromNewCont);
...</pre>
<p>The <code>CreateApplicativeContainer</code>() call of the <em>CATFmContainerServices</em> 
is again invoked. Note the second argument : <code>pNewContainer.</code> It is a
<em>CATBaseUnknown</em> interface pointer on the container created with the PLM 
Technological Representation see <a href="#Prolog">Prolog</a>. The newly container 
is named &quot;<strong>ContCreatedWithContContext</strong>&quot;, clearly depicting the methodology 
of container creation, in the current step. The new container returned is <code>
MyContFacadeFromNewCont</code>, a <em>CATFmContainerFacade</em> type. There is no 
credential for the new container since we will not work with it further.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create Appli Cont with feat as context"></a>Creating an Applicative 
Container with an existing Feature as Context</h3>
<p>We next create an Applicative Container with the context as an existing feature. 
The Container is created in the same stream as that of the Applicative Container 
of the feature held as context for the creation.</p>
<pre class="code">
...
CATFmContainerFacade MyContFacadeFromNewFeat;
CATUnicodeString NameOfContWithFeatCtxt   = &quot;ContCreatedWithFeatCtxt&quot; ;
rc = <strong>CATFmContainerServices::CreateApplicativeContainer</strong>(MyCredential, <strong>piNewFeatAsContext</strong>,
                                                             TypeofContainer,
                                                             NameOfContWithFeatCtxt,
                                                             MyContFacadeFromNewFeat);
...
</pre>
<p>The <code>CreateApplicativeContainer</code>() call of the <em>CATFmContainerServices</em> 
is again invoked. Note the second argument : <code>piNewFeatAsContext.</code> It 
is a <em>CATBaseUnknown</em> interface pointer on a feature created previously (and 
not detailed here). The newly container is named &quot;<strong>ContCreatedWithFeatCtxt</strong>&quot;, 
clearly depicting the methodology of container creation, in the current step. The 
new container returned is <code>MyContFacadeFromNewFeat</code>, a <em>CATFmContainerFacade</em> 
type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve appli Cont using name"></a>Retrieving Applicative Containers 
using their Names</h3>
<p>We retrieve each of the three Applicative Containers, we created in the earlier 
steps. The containers are identified by their names.</p>
<pre class="code">
	...
CATIPLMNavRepReference * piNavRepRef= NULL;
rc = <strong>pPsiCreatedRepRef-&gt;QueryInterface(IID_CATIPLMNavRepReference,(void **)&amp;piNavRepRef)</strong>;
...
CATBaseUnknown * piApplicativeContainer = NULL ;
rc = <strong>piNavRepRef-&gt;RetrieveApplicativeContainer</strong>(<strong>NameOfContWithPLMRepRefCtxt</strong>,
	    				IID_CATBaseUnknown,
	        				(void **)&amp;piApplicativeContainer);
...
</pre>
<p>The <code>RetrieveApplicativeContainer</code> method of the <em>CATIPLMNavRepReference</em> 
Interface implemented by the product rep ref retrieves an Applicative Container 
from the main stream of the Rep Ref.</p>
<p>The name of the Container to be retrieved, is the first argument input to the 
method. Since we have three Containers to be retrieved, the method is invoked thrice, 
each time with the name of the Applicative Container as input.</p>
<p>The Applicative Container is returned as <code>piApplicativeContainer</code>, 
a <em>CATBaseUnknown*</em> type. The steps involved are detailed in the UC &quot;<strong>Creating 
Applicative Containers</strong>&quot; [<a href="#References">8</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">4</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAFmExtCreateRepRef"></a>CAAFmExtCreateRepRef</h2>
<p>In the use cases of this framework (CAAFeatureModelerExt.edu), the created PLM 
Product Representation are all PLM Technological Representations. The creation of 
such a PLM Object is illustrated in a CAA Product framework use case [<a href="#References">2</a>].
</p>
<p>Since the kind of PLM Product Representation being an useless information for 
our use cases, only the container level is important, and since the code to create 
such a PLM Object is not done by one call, we have created a function, <em>CAAFmExtCreateRepRef</em>, 
in the CAAFmExtUtilities.m module to encapsulate the PLM Technological Representation 
creation.</p>
<p><em>CAAFmExtCreateRepRef:</em></p>
<ul>
	<li>Calls the API to create the PLM Technological Representation (including 
	the creation of an initial applicative container).</li>
	<li>Retrieves the applicative container from the PLM Technological Representation.</li>
</ul>
<p>The signature of this function is as follows:</p>
<table class="fill">
	<colgroup>
		<col span="1" align="left"><col span="1" align="center">
	</colgroup>
	<tr>
		<th>Argument</th>
		<th>i/o</th>
		<th>Meaning</th>
	</tr>
	<tr>
		<td>CATFmCredentials iMyCredential</td>
		<td>i</td>
		<td></td>
	</tr>
	<tr>
		<td>CATString iRepositoryName</td>
		<td>i</td>
		<td>Useful to retrieve the environment</td>
	</tr>
	<tr>
		<td>CATString iEnviromentName</td>
		<td>i</td>
		<td>Useful for the API to create a PLM Technological Representation</td>
	</tr>
	<tr>
		<td>CATUnicodeString iContainerType,</td>
		<td>i</td>
		<td>The type of the container</td>
	</tr>
	<tr>
		<td>CATUnicodeString iContainerName</td>
		<td>i</td>
		<td>The name of the container</td>
	</tr>
	<tr>
		<td>const IID &amp; iIID</td>
		<td>i</td>
		<td>The interface type on the returned PLM Technological Representation</td>
	</tr>
	<tr>
		<td>void ** oRepRef</td>
		<td>o</td>
		<td>The interface pointer on the newly PLM Technological Representation</td>
	</tr>
	<tr>
		<td>CATBaseUnknown ** opContainer</td>
		<td>o</td>
		<td>A CATBaseUnknown pointer on the new applicative container</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates creating an Applicative Containers is fundamentally three 
different contexts namely. 3D Shape, an existing Applicative Container and an existing 
feature. This is accomplished with the <code>CreateApplicativeContainer</code>() 
call of the <em>CATFmContainerServices</em> class. Our three Containers are of the 
same type, but have distinct names.</p>
<p>Finally we retrieve each of these three Applicative Containers from the PLM Product 
Representation Reference with the <em>CATIPLMNavRepReference</em> interface, using 
their names as a key input.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaApplicativeContainer.htm">Understanding Applicative 
		Container</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAFmExtUcWorkingWithCredentials.htm">Working with Credentials</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Creating Applicative Container</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Apr 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

</body>

</html>
