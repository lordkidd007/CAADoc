<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating StartUps in Catalogs</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating StartUps in Catalogs</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article accompanies the CAAOsmCatalogSU use case. It explains how 
		to create a catalog, StartUps within the catalog and to add attributes to 
		it. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Where to Locate a catalog of StartUps?">Where to Locate 
			a Catalog of StartUps</a></li>
			<li><a href="#UseCase">The CAAOsmCatalogSU Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAOsmCatalogSU Do</a></li>
				<li><a href="#How">How to Create the CAAOsmCatalogSU.CATfct Catalog</a></li>
				<li><a href="#Where">Where to Find the CAAOsmCatalogSU OSM</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in knowing the Feature 
modeler. Its main intent is to explain how to define and create StartUps within 
Catalogs. Through this use case, you will also learn some important concepts about 
the underlying data structure of a feature in general and about the recommended 
ways of dealing with features. More specifically, you will learn how to:</p>
<ul>
	<li>Create and update a Catalog.</li>
	<li>Create StartUps within the Catalog.</li>
	<li>Add attributes to a StartUp.</li>
</ul>
<p>Before getting to the use case itself, it is important to get an understanding 
of what StartUps are and how they are used in modeling features. See the referenced 
article [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Where to Locate a catalog of StartUps?"></a>Where to Locate a Catalog 
of StartUps?</h2>
<p>When accessing a catalog of StartUps, it must be found under the run-time directory:</p>
<p><code>InstallRootFolder\intel_a\resources\graphic\</code></p>
<p>where <code>InstallRootFolder</code> is the directory where the API CD-ROM is 
installed.</p>
<p>In order for the catalog to be accessible from the run-time directory, it should 
be stored in the following folder:</p>
<p><code>InstallRootFolder\CAADoc\<em>framework</em>\CNext\resources\graphic\</code></p>
<p>where <code><em>framework</em></code> is the framework containing the catalog 
creation code. When updating the run-time view (mkCreateRuntimeView), the catalog 
will be automatically transferred to the run-time folder.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOsmCatalogSU Use Case</h2>
<p>CAAOsmCatalogSU is a use case of the CAAFeatureModelerExt.edu framework that 
illustrates CATIA FeatureModelerExt framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="What"></a>What Does CAAOsmCatalogSU Do</h3>
<p>The goal of CAAOsmCatalogSU is to create a catalog and to define StartUps within 
it. The notion of &quot;books&quot; is used as an example. The StartUps describe different 
kinds of books such as novels or dictionaries. First, several StartUps are created 
that will be used as feature attributes later on. They are &quot;CAAOsmPublisher&quot; and 
&quot;CAAOsmChapter&quot;. Next, the actual &quot;Book&quot; StartUps are created: &quot;CAAOsmBook&quot;, &quot;CAAOsmNovel&quot; 
(which is a kind of &quot;CAAOsmBook&quot;) and &quot;CAAOsmDictionary&quot; (which is also a kind of 
&quot;CAAOsmBook&quot;). Here is a schematic relational view of these StartUps and their attributes:</p>
<table>
	<caption><a name="Fig._1">Fig. 1</a> - The StartUps of the CAAOsmCatalogSu Catalog</caption>
	<tr>
		<td>
		<img alt="StartUps of CAAOsmCatalogSu Catalog" src="images/CAAOsmBook.gif" width="718" height="382"></td>
	</tr>
</table>
<ul>
	<li><strong>CAAOsmBook</strong> defines a book - it as a title and pointes a 
	publisher, a feature defined by the CAAOsmPublisher StartUp</li>
	<li><strong>CAAOsmPublisher</strong> defines a publisher - it as a name and 
	an address</li>
	<li><strong>CAAOsmNovel</strong> defines a novel, a kind of book. So, its supertype 
	is &quot;CAAOsmBook&#39;s&quot; type. by consequence the attributes of a novel are those of 
	a book and itself like the author name and a list of chapter, so a list of pointer 
	on CAAOsmChapter feature. </li>
	<li><strong>CAAOsmChapter</strong> defines a chapter, a part of a novel. A chapter 
	has a title, and a first and last page number.</li>
	<li><strong>CAAOsmDictionary </strong>defines a dictionary, like a novel, it 
	is a kind of book. its supertype is &quot;CAAOsmBook&#39;s&quot; type too.</li>
</ul>
<p>Additionally two another features are created. <strong>CAAOsmAdd </strong>and<strong> 
CAAOsmSquare </strong>are used by another use case dealing with update mechanism 
[<a href="#References">2</a>]. </p>
<p>The use case describes how to generate the feature catalog, the contents of the 
OSM file, and finally the NLS file associated with the catalog. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Create the CAAOsmCatalogSU.CATfct Catalog</h3>
<p>To create the CAAOsmCatalogSU.CATfct catalog, you will need to set up the run 
time environment and then execute the <strong>CATfctEditorAssisant</strong> tool 
as indicated.</p>
<pre class="code">$ mkrun -c sh
$ cd  <em>your_workspace_root </em>
$ # Create empty catalog and empty osm
$ <strong>CATfctEditorAssistant</strong> <strong>-create-new-catalog -catalog-name </strong>CAAOsmCatalogSU.CATfct<strong> -with-client-id</strong> CAAOsmClientId <strong>-into-directory </strong>outptudirectoryforcreatedcatalog
$ # Upgrade the empty catalog with the input osm
$ <strong>CATfctEditorAssistant</strong> <strong>-update-catalog </strong>CAAOsmCatalogSU.CATfct<strong> -with-osm </strong>osmfilepathwithfilename<strong> -with-client-id</strong> CAAOsmClientId <strong>-into-directory </strong>outptudirectoryforupdatedcatalog  
$ exit # the mkrun shell</pre>
<p><strong>Notes</strong>:</p>
<p>CATfctEditorAssistant looks for the catalog and outputs it in two different locations:</p>
<ul>
	<li>On input, the catalog argument is stripped of its directory and looked up 
	in the run-time view. At your workspace level, it is the <code><em>workspace_root
	</em>/ <em>OS_directory </em>/resources/graphic</code> directory. </li>
	<li>On output, the catalog is written at the location specified by the catalog 
	argument.</li>
</ul>
<p>The place to store catalogs in your workspace is <code><em>workspace_root
</em>/CNext/resources/graphic</code>. Any catalog found in this directory will be 
automatically copied to the run-time view <code><em>workspace_root </em>/ <em>OS_directory
</em>/resources/graphic </code>by the mkrtv command. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Where"></a>Where to Find the CAAOsmCatalogSU OSM</h3>
<p>The CAAOsmCatalogSU.osm file is located in the InputData directory of the CAAFeatureModelerExt.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\InputData</code></p>
<p>where <code>InstallRootFolder</code> is the root folder of your API installation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six logical steps in CAAOsmCatalogSU:</p>
<ol>
	<li><a href="#Create_Catalog">Creating a catalog</a></li>
	<li><a href="#Add_StartUps">Adding StartUps</a></li>
	<li><a href="#Adding_Derived">Adding derived StartUps</a></li>
	<li><a href="#Declaring_Derivable">Declaring derivable StartUps</a></li>
	<li><a href="#Updating_Catalog">Updating the catalog</a></li>
	<li><a href="#Localizing">Localizing the catalog</a></li>
</ol>
<p>We will now comment each of those sections by looking at the OSM code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Create_Catalog"></a>Creating a Catalog</h3>
<p>To create a catalog, just run the CATfctEditorAssistant with the <strong>-new-catalog</strong> 
option:</p>
<pre class="code">CATfctEditorAssistant <strong>-create-new-catalog -catalog-name </strong>CAAOsmCatalogSU<strong> -with-client-id</strong> CAAOsmClientId <strong>-into-directory</strong> $PWD/OS_directory/resouces/graphic</pre>
<p>A client identification must always be specified with the <strong>-with-client-id</strong> 
option. This identification string serves as the key to this catalog. It is required</p>
<ul>
	<li>At run-time when the catalog is open</li>
	<li>At build-time when the catalog is updated or referred to by another catalog</li>
</ul>
<p>The identification string is also appended to the name of the StartUps added 
to the catalog. It should be specific to each catalog in order to insure the uniqueness 
of the StartUp names across multiple catalogs, thus enabling multiple catalogs to 
be used at the same time.</p>
<p>Once the above command has been executed, you will find two new files:</p>
<ol>
	<li>CATOsmCatalogSU.CATfct</li>
	<li>CATOsmCatalogSU.osm</li>
</ol>
<p>Both files represent the same version of an empty catalog with a root container. 
The only difference is that the <code>.osm</code> file is readable while the
<code>.CATfct</code> catalog is not:</p>
<pre class="code">/*
 Copyright Dassault Systemes 2006
 .osm file skeleton
*/
document `CAAOsmCatalogSU.CATfct` {
        container RootCont #root {
        }
}</pre>
<p><strong>Note</strong>: from now on, we will continue to modify the generated 
OSM file to add all the StartUps as defined by [<a href="#Fig._1">Fig. 1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Add_StartUps"></a>Adding StartUps</h3>
<p>To add a StartUp, you just need to add the OSM statement with the <strong>feature</strong> 
keyword and the <strong>#startup</strong> facet. For example, here is how the StartUp
<strong>CAAOsmBook</strong> is added to the catalog:</p>
<pre class="code">document `CAAOsmCatalogSU.CATfct` {
	container RootCont #root {
		<strong>feature CAAOsmBook #startup</strong> {
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Add_StartUps0"></a>Adding Attributes to StartUps</h3>
<p>The StartUp CAAOsmBook is defined as having two attributes [<a href="#Fig._1">Fig. 
1</a>] which are:</p>
<ul>
	<li><strong>Title</strong> a string</li>
	<li><strong>BookPublisher</strong> an feature</li>
</ul>
<p>This is done by adding two lines in the feature CAAOsmBook definition:</p>
<pre class="code">document `CAAOsmCatalogSU.CATfct` {
	container RootCont #root {
		<strong>feature CAAOsmBook </strong>#startup {
			string <strong>Title</strong>
			specobject <strong>BookPublisher</strong>
		}
...</pre>
<p>You can note in this example that StartUp can have two types of attributes:</p>
<ul>
	<li>Title is a &quot;simple&quot; attribute: a string</li>
	<li>BookPublisher is &quot;feature&quot; attribute</li>
</ul>
<p>More complex attributes can also be defined like the list of &quot;features&quot; as in 
the case of CAAOsmNovel and its NovelChapter attribute. The presence of CAAOsmBook 
on the feature statement will be explained in the next section.</p>
<pre class="code">...
		feature CAAOsmNovel CAAOsmBook #startup #inheritability(caa){
			string Author
			<strong>component</strong> <strong>NovelChapter</strong> <strong>#list</strong>
		}
...</pre>
<p>The attribute can also have quality specification (<strong>IN</strong>,
<strong>OUT</strong>, <strong>NEUTRAL</strong>) as used by the Build/Update mechanism 
[<a href="#References">2</a>]. The quality specification is declared with the facets
<strong>#in</strong> and <strong>#out</strong>. For example:</p>
<pre class="code">...
		feature CAAOsmSquare #startup {
			int Num <strong>#in</strong>
			int Square <strong>#out</strong>
		}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Adding_Derived"></a>Adding Derived StartUps</h3>
<p>To add a StartUp that derives from another one, you just need to specify the 
deriving StartUp with the definition statement. For example, <strong>CAAOsmNovel</strong> 
which derives from CAAOsmBook is defined as:</p>
<pre class="code">...
		feature <strong>CAAOsmNovel</strong> <strong>CAAOsmBook</strong> #startup #inheritability(caa){
			string Author
			component NovelChapter #list</pre>
<pre>		}		
...</pre>
<p>Derivation is not limited to StartUps being defined in the same catalog as exemplified 
above. StartUps from other catalogs can be specified using the @<em>`catalog
</em>.CATfct` syntax. Please refer to [<a href="#References">3</a>] for more information.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Declaring_Derivable"></a>Declaring Derivable StartUps</h3>
<p>In the previous section, we have created the CAAOsmNovel StartUp that derives 
from CAAOsmBook. This derivation is allowed because both StartUps are defined in 
the same catalog. If CAAOsmBook is defined in another catalog than CAAOsmNovel&#39;s, 
it needs to be declared derivable with the <strong>#inherability(caa)</strong> facet. 
To illustrate the purpose we have used CAAOsmNovel. To be able to derive this StartUp 
whatever the catalog, we have declared the novel StartUp as derivable:</p>
<pre class="code">...
		feature CAAOsmNovel CAAOsmBook #startup <strong>#inheritability(caa)</strong>{
			string Author
			component NovelChapter #list
		}
...</pre>
<p>The use case <a name="Top0"></a>Creating an Externally Derived StartUp shows 
you the use of the declaration. [<a href="#References">4</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Updating_Catalog"></a>Updating the Catalog</h3>
<p>Here is the OSM complete with all the StartUps:</p>
<pre class="code">document `CAAOsmCatalogSU.CATfct` {
	container RootCont #root {
		feature CAAOsmBook #startup {
			string Title
			specobject BookPublisher
		}
		feature CAAOsmDictionary CAAOsmBook #startup {
			string Language
		}
		feature CAAOsmNovel CAAOsmBook #startup #inheritability(caa) {
			string Author
			component NovelChapter #list
		}
		feature CAAOsmChapter #startup {
			string ChapterTitle
			int FirstPage
			int LastPage
		}
		feature CAAOsmPublisher #startup {
			string PublisherAddress
			string PublisherName
		}
		feature CAAOsmAdd #startup #inherability(caa) {
			int First #in
			int Second #in
			int Sum #out
		}
		feature CAAOsmSquare #startup {
			int Num #in
			int Square #out
		}
	}
}</pre>
<p>Now that the OSM is complete with all the required StartUps and attributes, you 
can use CATfctEditorAssistant to create the corresponding catalog. This is done 
by upgrading the empty catalog created <a href="#Create_Catalog">previously</a>.</p>
<pre class="code">CATfctEditorAssistant <strong>-update-catalog </strong>CAAOsmCatalogSU<strong> -with-client-id</strong> CAAOsmClientId <strong>-with-osm</strong> $PWD <strong>-into-directory</strong> $PWD</pre>
<p>Again, keep in mind that CATfctEditorAssitant will look up the catalog in the 
run-time view but will output to the location specified on the command-line.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Localizing"></a>Localizing the Catalog</h3>
<p>During an interactive session, StartUps may appear in the specifications tree 
where they are displayed with their catalog names. NLS names can be given to the 
StartUps by creating a <code>.CATNls</code> file. This file has the same name as 
the <code>.CATfct</code> catalog&#39;s with <strong>NLS</strong> appended.</p>
<p>For example, the catalog <strong>CAAOsmCatalogSU.CATfct</strong> would have a 
corresponding NLS file called <strong>CAAOsmCatalogSUNLS.CATNls</strong>. The file 
is delivered in the <code>CNext/resources/msgcatalog</code> directory of your framework.
</p>
<p>The contents of this text file must follow a precise format: for each StartUp 
name that is displayed, there must be a line of the form </p>
<p><em>StartUpName </em>= &quot; <em>NLS StartUpName </em>&quot;;</p>
<p>For example, to display <code>Novel </code>wherever there is a <code>CAAOsmNovel
</code>StartUp, the following line must be present in the .CATNls file:</p>
<pre class="code">CAAOsmNovel=&quot;Novel&quot;;</pre>
<p>Here is the contents of the CAAOsmCatalogNLS.CATNls file created for the CAAOsmCatalog.CATfct 
feature catalog file:</p>
<pre class="code">CAAOsmPublisher=&quot;Publisher&quot;;
CAAOsmChapter=&quot;Chapter&quot;;
CAAOsmBook=&quot;Book&quot;;
CAAOsmNovel=&quot;Novel&quot;;
CAAOsmDictionary=&quot;Dictionary&quot;;
CAAOsmAdd=&quot;Add&quot;;
CAAOsmSquare=&quot;Square&quot;;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to create and define StartUps in Catalogs. 
It has also exposed a number of concepts on the feature modeler, such as types and 
supertypes, simple and feature attributes. Specifically, this use case has illustrated:</p>
<ul>
	<li>The creation and update of catalogs using the <code>CATfctEditorAssistant</code> 
	command-line tool</li>
	<li>The usage of the client ID to access catalogs</li>
	<li>The usage of the OSM language to define StartUps</li>
	<li>The localization of the catalog by creating the corresponding NLS file.</li>
</ul>
<p>Other use cases will demonstrate how to use features based on these StartUps.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAOsmTaOverview.htm">Feature Modeler Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtUcBuildUpdate.htm">The Build/Update Mechanism</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmTaModelingStartUps.htm">OSM Language Reference</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmExtUcExtDerivedSU.htm">Creating an Externally Derived 
		StartUp</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2000]</td>
		<td>Document modified</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Feb 2002]</td>
		<td>Document modified</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [May 2007]</td>
		<td>OSM version</td>
	</tr>
	<tr>
		<td>Version: <strong>5</strong> [May 2011] </td>
		<td>Document modfied</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
