<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Making Referencing Links</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Making Referencing Links</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtReferencedAttr</code> use case 
		which explains how to make referencing links to other features by using 
		attributes of the type <code>specobject</code>. The UC further illustrates 
		that the lifecycle of the &quot;referenced&quot; feature is independent of the &quot;referencing&quot; 
		feature.</p>
		<p>You can first previously read the technical article about the attribute 
		in general, &quot;Understanding Feature Attributes&quot; [<a href="#References">1</a>], 
		like the specific one about link attribute &quot; Understanding Feature Links&quot; 
		[<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtReferencedAttr Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtReferencedAttr Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtReferencedAttr</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtReferencedAttr Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This Use Case primarily teaches an end-user the relevance of the specobject attribute, 
to create a referencing link between features.</p>
<p>User thus learns:</p>
<ul>
	<li>Steps involved to create a referencing link between features.</li>
	<li>Typical characteristics of a referencing link which includes:<ul>
		<li>Lifecycle of the referenced feature is not bound to the Referencing 
		feature. This implies the referenced feature continues to exist and could 
		be referenced in another context, though all referencing feature may cease 
		to exist.</li>
		<li>A feature could be referenced by multiple referencing features.</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtReferencedAttr Use Case</h2>
<p><code>CAAFmExtReferencedAttr</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtReferencedAttr Do</h3>
<p>The Use Case refers to the features defined in the &quot;<strong>CAAOsmCatalogSU</strong>&quot; 
Catalog (an output of the UC [<a href="#References">3</a>] execution). An extract 
of the OSM file with those feature definitions relevant to the current UC follows.</p>
<pre class="code">... feature <strong>CAAOsmPublisher</strong> #startup { string PublisherAddress 
string PublisherName } feature <strong>CAAOsmBook</strong> #startup { <strong>specobject</strong>
<strong>BookPublisher</strong> string Title } feature <strong>CAAOsmNovel</strong> CAAOsmBook #startup 
#inheritability(caa) { string Author component NovelChapter #list } ...</pre>
<p>The &quot;<code>CAAOsmNovel</code>&quot; attribute &quot;<code>BookPublisher</code> &quot; (inherited 
from the feature &quot;<code>CAAOsmBook</code>&quot;) is of type <code>specobject</code>. 
An attibute of type <code>specobject</code> when valuated results in a referencing 
link. The feature characterized with the attribute of type <code>specobject</code> 
is termed as a &quot;<strong>referencing</strong>&quot; feature, while the feature assigned 
to this attribute is the &quot;<strong>referenced</strong>&quot; feature.</p>
<p>Now let us see the UC execution. The main steps are as listed below:</p>
<ul>
	<li>It instantiates a &quot;<code>CAAOsmNovel</code>&quot; StartUp, to output two features 
	named <code>Novel1</code> and <code>Novel2</code>.</li>
	<li>It also instantiates a &quot;<code>CAAOsmPublisher</code>&quot; StartUp, to output 
	the feature named <code>Publisher</code>.</li>
	<li><code>Novel1</code> and <code>Novel2</code> pointes to <code>Publisher
	</code>through their <code>BookPublisher</code> attribute. It thus illustrates 
	that a feature (referenced) could be referenced by multiple features (referencing).</li>
	<li>It checks that <code>Publisher</code> has no parent (a <code>specobject</code> 
	link is not an aggregation).</li>
	<li>The reference to <code>Publisher</code> from the <code>Novel2</code> is 
	deleted (<code>Publisher</code> is now pointed to by one feature).</li>
	<li>Then <code>Novel1</code> is deleted . ( <code>Publisher</code> is now pointed 
	to by zero feature).</li>
	<li>Finally <code>Novel2</code> pointes to <code>Publisher</code> again ( Publisher 
	is not dead after the last referencing removal).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtReferencedAttr</h3>
<p>To launch <code>CAAFmExtReferencedAttr</code> , you will need to set up the build 
time environment, then compile <code>CAAFmExtReferencedAttr</code> along with its 
prerequisites, set up the run time environment, and then execute the sample. This 
is fully described in the referenced article [<a href="#References">4</a>].</p>
<pre class="code">mkrun -c &quot;CAAFmExtReferencedAttr <em>Repository Server User Password SecurityCtx Environment</em>&quot;</pre>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as Host:Port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtReferencedAttr Code</h3>
<p><code>CAAFmExtAggregatedAttr</code> code is located in the <code>CAAFmExtReferencedAttr.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtReferencedAttr.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the root 
folder of your API installation. It is made of a unique source file named <code>
CAAFmExtReferencedAttr.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps in CAAFmExtReferencedAttr:</p>
<ul>
	<li><a href="#Create_Document">Prolog</a></li>
	<li><a href="#Create a Ref Link">Creating a Referencing Link between features</a></li>
	<li><a href="#Single feat referred by Multiple feats">Illustrating a single 
	feature could be referenced by multiple features</a></li>
	<li><a href="#Checking No Parent Link">Checking No Parent Link</a></li>
	<li><a href="#Checking No Parent Link">Removing a Reference Link</a></li>
	<li><a href="#illustrate lifecycle feature">Illustrating the Lifecycle of a 
	&quot;referenced&quot; feature is independent of the &quot;referencing&quot; feature</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<p>We will now comment each of these sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create_Document"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">5</a>].</p>
<p>The Use Case creates a new PLM Technological Representation a subject discussed 
in the UC [<a href="#References">6</a>] with an applicative container [<a href="#References">7</a>].</p>
<p>The next step is to create a Credentials object (<code>MyCredentials</code>, 
a <em>CATFmCredentials</em> class object), which represents a set of credentials 
to work with CAAOsmCatalog features [<a href="#References">8</a>].</p>
<p>It further instantiates twice the &quot;<strong>CAAOsmNovel</strong>&quot; StartUp (<code>oFeatFacadeOnNovel1</code>,
<code>oFeatFacadeOnNovel2</code> both <em>CATFmFeatureFacade</em> class objects). 
It then instantiates a &quot;<strong>CAAOsmPublisher</strong>&quot; StartUp (<code>oFeatFacadeOnPublishr</code>, 
a <em>CATFmFeatureFacade</em> class object). The UC &quot;<strong>Creating Features</strong>&quot; 
[<a href="#References">9</a>] details the steps to instantiate a feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a Ref Link"></a>Creating a Referencing Link between features</h3>
<p>Creating a Referencing Link simply involves valuating the specobject attribute 
of the <code>Novel1</code> feature with the <code>Publisher</code> feature.</p>
<pre class="code">CATFmAttributeName BookPublshrAttrName(&quot;BookPublisher&quot;);
...
CATFmAttributeValue AttrAsFmValue;
AttrAsFmValue.<strong>SetFeature</strong>(oFeatFacadeOnPublisher);
...</pre>
<p>To begin with we create <code>AttrAsFmValue</code> (a <em>CATFmAttributeValue</em> 
type) with the <code>Publisher</code> feature assigned to it. The call to <code>
SetFeature</code> of the <em>CATFmAttributeValue</em> class sets a feature to an 
Attribute Value.</p>
<pre class="code">...
rc = oFeatFacadeOnNovel1.<strong>SetValue</strong>(BookPublshrAttrName,AttrAsFmValue);
...</pre>
<p>Next the call to <code>SetValue</code> on <code>oFeatFacadeOnNovel1 (a</code>
<em>CATFmFeatureFacade</em> class) valuates the <code>Novel1</code> attribute &quot;<code>BookPublisher</code>&quot; 
of type specobject. Its inputs include:</p>
<ul>
	<li><code>BookPublshrAttrName</code>, a <em>CATFmAttributeName</em> type representing 
	the attribute for valuation.</li>
	<li><code>AttrAsFmValue</code>, a <em>CATFmAttributeValue</em> type representing 
	the value to be set.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Single feat referred by Multiple feats"></a>Illustrating a single feature 
could be referenced by multiple features</h3>
<p>We now create another reference link, this time from <code>Novel2</code> feature 
to the same <code>Publisher</code> feature, that referenced in the earlier case.</p>
<pre class="code">rc = oFeatFacadeOnNovel2.<strong>SetValue</strong>(BookPublshrAttrName,AttrAsFmValue);</pre>
<p>We invoke <code>SetValue</code> on <code>oFeatFacadeOnNovel2</code> (a <em>CATFmFeatureFacade</em> 
type). This creates a second reference link to the <code>Publisher</code> feature. 
It thus confirms the fact that a feature could be referenced by multiple features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Checking No Parent Link"></a>Checking No Parent Link</h3>
<p>We check that <code>Publisher</code> feature has no parent.</p>
<pre class="code">rc = oFeatFacadeOnPublisher<strong>.GetParentFeature</strong>(AttrAsFmValue);
if (SUCCEEDED(rc))
{
    CATFmFeatureFacade FeatFacadeOnParent;
    AttrAsFmValue.<strong>GetFeature</strong>(FeatFacadeOnParent);
 
    CATBaseUnknown_var Parent = FeatFacadeOnParent.<strong>GetFeature</strong>();
    if ( <strong>NULL_var</strong> != Parent ) rc= E_FAIL ; 
...</pre>
<p>The <code>GetParentFeature</code> method will be successful since the credentials 
to introspect the Publisher feature are sufficient. So it is why we must check that 
the returned parent is NULL.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Removing a Reference Link</h3>
<p>We remove the links between <code>Publisher</code> and <code>Novel2</code>.</p>
<pre class="code">...
AttrAsFmValue.<strong>SetFeature</strong>(<strong>NULL</strong>);
rc =  oFeatFacadeOnNovel2.<strong>SetValue</strong>(BookPublshrAttrKey,AttrAsFmValue);
...</pre>
<p>We just invoke <code>SetValue</code> on <code>oFeatFacadeOnNovel2</code> (a
<em>CATFmFeatureFacade</em> type) with the NULL value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="illustrate lifecycle feature"></a>Illustrating Lifecycle of a &quot;Referenced 
Feature&quot; is independent of its &quot;Referencing Feature&quot;</h3>
<p>After the deferencing from <code>Novel2</code>, <code>Publisher</code> feature 
is pointed by only one feature. Now, we delete <code>Novel1</code>.</p>
<pre class="code">rc = <strong>oFeatFacadeOnNovel1.DeleteSelf()</strong>;</pre>
<p>The call to <code>DeleteSelf</code> of the <em>CATFmFeatureFacade</em> class 
destroys <code>Novel1</code>.</p>
<pre class="code">...
AttrAsFmValue.SetFeature(oFeatFacadeOnPublisher);
rc = <strong>oFeatFacadeOnNovel2.SetValue</strong>(BookPublshrAttrName,AttrAsFmValue);</pre>
<p>But <code>Novel2</code> can again pointes <code>to Publisher</code> which is 
still alive.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">5</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC fundamentally explains the steps involved to create a reference link between 
features. It is realized by valuating the &quot;referencing&quot; feature attribute of type 
specobject with the &quot;referenced&quot; feature.</p>
<p>The UC also illustrates that the features related by a &quot;Referencing link&quot;, do 
not share a father-child relationship. This further implies that the lifecycle of 
the &quot;referencing&quot; feature is independent of the feature that it refers to.</p>
<p>It also illustrates the steps to delete a referencing link.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaFeatureAttribute.htm">Understanding Feature Attributes</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaLinkingFeatures.htm">Understanding Feature Links</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Containers</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAFmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2000]</td>
		<td>Document modified</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2006]</td>
		<td>Document modified for PLM Component</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jul 2007]</td>
		<td>Integration of CATOsmSUHandler</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
