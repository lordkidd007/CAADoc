<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating External Links</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating External Links</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtCreateExternalLink </code>use 
		case. It primarily illustrates the steps involved to create an external 
		link, a kind of a referencing link which can span across PLM boundaries. 
		A basic understanding of the External Links is a prerequisite to realize 
		the relevance of the current UC. [<a href="#References">1</a>]</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtCreateExternalLink Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtCreateExternalLink Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtCreateExternalLink </a>
				</li>
				<li><a href="#Where">Where to Find the CAAFmExtCreateExternalLink 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved to create an external link, pointing to a 
target feature.</p>
<p>A feature always occurs in a PLM Context and is thus completely defined by specifying 
it with its Context. User learns to create an Object In Context equivalent of the 
target feature.</p>
<p>User next learns to create an external link by valuating an attribute of type 
&quot;external&quot; of the source feature with the &quot;Object In Context&quot; equivalent of the 
target feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtCreateExternalLink Use Case</h2>
<p><code>CAAFmExtCreateExternalLink </code>is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtCreateExternalLink Do</h3>
<table>
	<caption><a name="Fig.1"></a>Fig.1 Final Feature Model</caption>
	<tr>
		<td>
		<img alt="Final Feature Model" src="images/CAAFmExtWorkingWithExternalLink_Fig1.jpg"></td>
	</tr>
</table>
<p>The UC simpy creates a link from the Reader to the Book feature. This link spans 
across PLM boundaries, possible thanks to an external attribute &quot;CAAFmExtBookRead&quot; 
characterizing the &quot;Book Reader&quot; feature. The steps of the UC execution follow. 
The resulting output feature model is depicted in [<a href="#Fig.1">Fig.1</a>] above.</p>
<ul>
	<li>Creates a PLM Technological Representation, referred to as the Source with 
	an Applicative Container. We finally instantiate the &quot;Book Reader&quot; feature in 
	this Container.</li>
	<li>Creates a second PLM Technological Representation, referred to as the Target 
	with an Applicative Container as well. Finally the &quot;Book&quot; feature is instantiated 
	in this Container.</li>
	<li>It creates an equivalent <strong>Object In Context</strong>, for the Book 
	feature. In the current case, since our external link points to the Book feature 
	in the target PLM Technological Representation, the context is simply the Rep 
	Ref.</li>
	<li>Valuates the external attribute &quot;<strong>CAAFmExtBookRead</strong>&quot; of the 
	Reader feature, in the process creating an external link which points to the 
	&quot;Book&quot; feature.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAFmExtCreateExternalLink</h3>
<p>To launch <code>CAAFmExtCreateExternalLink </code>, you will need to set up the 
build time environment, then compile <code>CAAFmExtCreateExternalLinks </code>along 
with its prerequisites, set up the run time environment, and then execute the sample. 
This is fully described in the referenced article [<a href="#References">2</a>].</p>
<p>mkrun -c &quot;<code>CAAFmExtCreatingExternalLink </code><em>Repository Server UserId 
Password SecurityCtx Environment</em>&quot;</p>
<p>Where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtCreateExternalLink Code</h3>
<p><code>CAAFmExtCreateExternalLink </code>code is located in the <code>CAAFmExtCreatingExternalLink.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtCreatingExternalLink.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the root 
folder of your API installation. It is made of a unique source file named <code>
CAAFmExtCreatingExternalLink.cpp</code>.</p>
<p>In addition, the UC also refers to the Catalogs <code>CACAAFmExtExternalLinkCatalog.CATfct</code>. 
The Catalogs are provided at the location</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CNext\resources\graphic</code></p>
<p>and by running the mkrtv tool, user copies it to the WS RTV.</p>
<p>In addition we have also provided the OSM files corresponding to these catalogs 
at the location below, just in case you would like to generate the <code>CATfct</code> 
with the <code>CATfctEditorAssistant</code> tool [<a href="#References">4</a>]</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\InputData</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps in <code>CAAFmExtCreateExternalLink</code></p>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#1">Create the Target Object (In Context)</a></li>
	<li><a href="#2">Valuate the external attribute of the source feature (Create 
	an External Link)</a></li>
	<li><a href="#Prolog">Epilog</a></li>
</ul>
<p>We proceed to detail the steps involved.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository [<a href="#References">3</a>]. Next we create the Credentials object 
which authorize working with the features defined in the &quot;<strong>CAAFmExtExternalLinkCatalog</strong>&quot;. 
In addition we append this Credentials object with a Credential which authorizes 
working with Applicative Containers defined by the Feature Modeler. [<a href="#References">4</a>]</p>
<p>Next we create two PLM Technological Representation, a source and a target [<a href="#References">5</a>] 
with an applicative container [<a href="#References">6</a>] created inside each 
Techno Rep. We instantiate a &quot;<strong>CAAFmExtExternalLinkBookReader</strong>&quot; feature 
inside the source PLM Object while the &quot;<strong>CAAFmExtExternalLinkBook</strong>&quot; 
feature occurs inside the target PLM Object.</p>
<p>We now proceed to create an external link, referencing the Reader feature from 
the Book feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="1"></a>Create the Target Object In Context</h3>
<p>Our target feature (Book) occurs in its aggregating Rep Ref (target ) context. 
We proceed to create an Object In Context equivalent of our target feature.</p>
<pre class="code">CATBaseUnknown* piTargetObject = NULL;
rc = <strong>oFeatFacadeOnBook.QueryInterfaceOnFeature(IID_CATBaseUnknown,(void**)&amp;piTargetObject)</strong>;
</pre>
<p><code>oFeatFacadeOnBook</code> represents the feature facade on the Book feature, 
instantiated earlier. It is a <code>CATFmFeatureFacade</code> type. </p>
<p>The call to <code>QueryInterfaceOnFeature</code>() of the <em>CATFmFeatureFacade</em> 
class invoked on <code>oFeatFacadeOnBook</code>, retrieves the feature bound to 
the facade, as a <em>CATBaseUnknown</em>* type (<code>piTargetObject</code>).</p>
<pre class="code">CATLISTP(CATIPLMComponent) iPathOfInstances;
CATIPLMComponent* iRepInstance = NULL;

CATOmbObjectInContext* pObjectInContext = NULL;
rc = <strong>CATOmbObjectInContext::CreateObjectInContext</strong>(iPathOfInstances,iRepInstance,<strong>piTargetObject</strong>,<strong>pObjectInContext</strong>);</pre>
<p>The call to the static routine <code>CreateObjectInContext</code>() of the
<em>CATOmbObjectInContext</em> class creates an Object In Context, <code>pObjectInContext</code>, 
a <em>CATOmbObjectInContext</em>* type. </p>
<p>You&#39;ll find the path of Instances (<code>iPathOfInstances</code>, a <em>CATLISTP(CATILPLMComponent)</em> 
type) and the Rep Instance (<code>iRepInstance</code>, a <em>CATIPLMComponent</em>* 
type), typically the inputs for creating an Object In Context, hold no relevance 
in the current case, since our context is simply the Rep Ref (PLM Technological 
Representation) aggregating the target feature. Hence, we pass an empty path of 
instances and a NULL pointer for the Rep Instance, as the first two arguments to 
the call above.</p>
<p>Please note that the responsibility to release the <code>pObjectInContext</code>, 
the <em>CATOmbObjectInContext</em>* type returned, is with the caller.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="2"></a>Valuate the External Attribute of the Source Feature (Create 
External Link)</h3>
<p>This step simply involves valuating an external attribute &quot;<strong>CAAFmExtBookRead</strong>&quot; 
of the Reader feature, with the Book feature, more precisely its equivalent Object 
In Context (<code>pObjectInContext</code>) we created above.</p>
<p>Now since a feature attribute is valuated with a <em>CATFmAttributeValue</em> 
type, we must create an AttributeValue equivalent of the Object In Context.</p>
<pre class="code">CATFmAttributeValue AttrValueForExternalLink;
<strong>AttrValueForExternalLink.SetExternalObject(pObjectInContext)</strong>;
</pre>
<p>The call to <code>SetExternalObject</code> of the <em>CATFmAttributeValue</em> 
class creates an Attribute Value equivalent of an Object In Context. <code>AttrValueForExternalLink</code>, 
a <em>CATFmAttributeValue</em> type, represents the updated Attribute Value object 
for the external attribute valuation below.</p>
<pre class="code">CATFmAttributeName BookReadExternalAttrKey(&quot;CAAFmExtBookRead&quot;);
rc = <strong>oFeatFacadeOnBookReader.SetValue(BookReadExternalAttrKey,AttrValueForExternalLink)</strong>;</pre>
<p>The call to <code>SetValue</code>() of the <em>CATFmFeatureFacade</em> class 
invoked on <code>oFeatFacadeOnBookReader</code>, sets a value to a feature attribute. 
The inputs to the call are:</p>
<ul>
	<li>The external attribute &quot;<strong>CAAFmExtBook</strong>&quot; for valuation, represented 
	as a <em>CATFmAttributeName</em> type (<code>BookReadExternalAttrKey</code>).</li>
	<li>The attribute value, represented by <code>AttrValueForExternalLink</code>, 
	a <em>CATFmAttribueValue</em> type, updated in the earlier step.
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">4</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to create an external link. An external 
link is a link referencing a target feature which either exists in the same Rep 
Ref as the source feature or in another Rep Ref.</p>
<p>In the current Use Case, we create an external link, where a Reader feature refers 
to the Book feature. An Object in Context equivalent of the target Book feature 
is created as a <em>CATOmbObjectInContext</em> type. The Book feature context is 
simply the Rep Ref that aggregates it.</p>
<p>Finally it valuates the external attribute of the Reader feature with the Object 
In Context equivalent of the Book feature, thus effectively creating an external 
link, in the process.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaLinkingFeatures.htm">Understanding Link Attributes 
		- 1</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Container</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [May 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
