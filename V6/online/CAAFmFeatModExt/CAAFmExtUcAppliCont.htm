<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working Applicative Container</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Working Applicative Container</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtAppliCont</code> use case. 
		It illustrates the steps involved to work with an existing Applicative Container 
		[<a href="#References">1</a>] inside a PLM Product Representation Reference, 
		retrieve it and to scan through its contents (features), using the secured 
		feature modeler access mechanism.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtAppliCont Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtAppliCont Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtAppliCont</a>
				</li>
				<li><a href="#Where">Where to Find the CAAFmExtAppliCont Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>You will learn how to:</p>
<ul>
	<li>Retrieve an Applicative Container from a PLM Representation Reference.</li>
	<li>Create a Credentials [<a href="#References">2</a>] object to handle the 
	Applicative Container.</li>
	<li>Scan through the Applicative Container contents.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtAppliCont Use Case</h2>
<p><code>CAAFmExtAppliCont</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtAppliCont Do</h3>
<p>The UC illustrates working with an Applicative Container. For this purpose it 
refers to the features defined in the &quot;<code>CAAOsmCatalogSU</code>&quot; catalog [<a href="#References">3</a>]. 
The execution proceeds as follows:</p>
<ul>
	<li>Creates a new PLM technological Representation (a PLM Rep Ref) with an Applicative 
	Container ,&quot;CAAFmExtAppliCont&quot; in its main stream</li>
	<li>Retrieves the Applicative Container from the PLM Rep Ref by Its name</li>
	<li>Creates a Credentials object to be registered as owner of the feature catalog 
	&quot;<code>CAAOsmCatalogSU&quot;</code>, and based on Feature modeler Infrastructure</li>
	<li>Instantiates a &quot;<code>CAAOsmNovel</code>&quot; feature with a &quot;<code>CAAOsmChapter</code>&quot; 
	feature aggregated under it.</li>
	<li>Scans through the Applicative Container to retrieve all features owned by 
	the application (those created from <code>CAAOsmCatalogSU</code> catalog)</li>
	<li>Scans through the Applicative Container to retrieve selectively the root 
	features owned by the application.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtAppliCont</h3>
<p>To launch <code>CAAFmExtAppliCont</code>, you will need to set up the build time 
environment, then compile <code>CAAFmExtAppliCont</code> along with its prerequisites, 
set up the run time environment, and then execute the sample. This is fully described 
in the referenced article [<a href="#References">4</a>].</p>
<p>mkrun -c &quot;<em>CAAFmExtAppliCont Repository Server UserId Password SecurityCtx 
Environment</em>&quot;</p>
<p>Where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtAppliCont Code</h3>
<p><code>CAAFmExtAppliCont</code> code is located in the <code>CAAFmExtAppliCont.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootDirectory\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtAppliCont.m</code></p>
<p>where <code>InstallRootDirectory</code> [<a href="#References">4</a>] is the 
root directory of your CAA installation. It is made of a unique source file named
<code>CAAFmExtAppliCont.cpp</code> .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps in CAAFmExtAppliCont:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create a credentials object">Creating a Credentials Object</a></li>
	<li><a href="#Retrieve an Appli Cont">Retrieving an Applicative Container from 
	a PLM Representation Reference</a></li>
	<li><a href="#Create a container facade">Creating a Facade to Handle the Container</a></li>
	<li><a href="#Scan through an Appli Cont">Scanning through all features inside 
	the Applicative Container</a></li>
	<li><a href="#Scan through root feats">Scanning through the Root features inside 
	the Applicative Container</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
[<a href="#References">5</a>]. The Use Case creates a new PLM Technological 
Representation a subject discussed in the UC [<a href="#References">6</a>] with 
an applicative container (type and name are <code>&#39;CAAFmExtAppliCont&#39;</code>). The 
new PLM Technological Representation is <code>pNavRepRefOnCreatedRepRef</code>, 
a <em>CATIPLMNavRepReference</em> interface pointer.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a credentials object"></a>Creating a Credentials Object</h3>
<p>In our use case we instantiate StartUp, and scan a container. So as explained 
in the referenced technical article [<a href="#References">2</a>], the credentials 
object needs to contain two accreditations:</p>
<ul>
	<li>Infrastructure Identification</li>
	<li>Owner of the catalog containing StartUp to instantiate</li>
</ul>
<pre class="code"><strong>CATFmCredentials MyCredentials</strong>;</pre>
<p>A credential object is a <code>CATFmCredentials</code> class instance.</p>
<pre class="code">...
CATUnicodeString iParnerId(&quot;CAAFmExtFeatureModeler&quot;);
CATUnicodeString iCatalogName(&quot;CAAOsmCatalogSU&quot;);
<strong>rc = MyCredentials.RegisterAsApplicationBasedOn(CATFmFeatureModelerId,iParnerId)</strong>
...</pre>
<p>The call to <code>RegisterAsApplicationBaseOn()</code> of a <em>CATFmCredentials</em> 
instance (<code>MyCredentials</code>) appends it with the privilege to work with 
container of the specified input infrastructure. The <code>CATFmFeatureModelerId</code>, 
is an identifier exposed by the Feature Modeler enabling us to instantiate and scan 
a container while your are owner of the catalog containing feature to instantiate 
or to retrieve. The last argument, PartnerId, a string is required for licensing 
test.</p>
<p>We proceed to append our Credentials object with the Catalog Credentials, as 
well</p>
<pre class="code">...
CATUnicodeString iCatalogName(&quot;CAAOsmCatalogSU&quot;);
CATUnicodeString clientId(&quot;CAAOsmClientId&quot;);
rc = MyCredentials.<strong>RegisterAsCatalogOwner</strong>(iCatalogName,clientId);
...</pre>
<p>The call to <code>RegisterAsCatalogOwner</code> on a <em>CATFmCredentials</em> 
instance (<code>MyCredentials</code>) appends it with the ownership credentials 
of a feature catalog. The API inputs include a set, the Catalog name (<code>CAAOsmCatalogSU</code>) 
and its associated clientID (<code>CAAOsmClientID</code>), an input at the time 
of catalog creation. See the referenced use case [<a href="#References">3</a>] about 
the catalog creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve an Appli Cont"></a>Retrieving an Applicative Container from 
a PLM Representation Reference</h3>
<p>From any PLM Product Representation Reference (3D Shape/ techno Rep ...) you 
can get an applicative container by its name as follows:</p>
<pre class="code">
...
CATBaseUnknown * piApplicativeContainer = NULL ;
rc = pNavRepRefOnCreatedRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>(<strong>NameofContainer</strong>,
						      IID_CATBaseUnknown,
						     (void **)&amp;piApplicativeContainer);
...						     
</pre>
<p>The <code>RetrieveApplicativeContainer</code> method of the <em>CATIPLMNavRepReference</em> 
Interface implemented by the product rep ref retrieves an Applicative Container 
from the main stream of the Rep Ref. The name of the Container to be retrieved, 
is the first argument input to the method. The Applicative Container is returned 
as <code>piApplicativeContainer</code>, a <em>CATBaseUnknown</em> interface pointer.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a container facade"></a>Creating a Facade to Handle the Container</h3>
<p>We proceed to create a Container Facade.</p>
<pre class="code"><strong>CATFmContainerFacade</strong> MyContainerFacade<strong>(MyCredential,piApplicativeContainer)</strong>;</pre>
<p><code>MyContainerFacade</code>, a <em>CATFmContainerFacade</em> class instance 
is created with a call to its parametrized constructor whose arguments are:</p>
<ul>
	<li><code>MyCredential</code>, a <em>CATFmCredentials</em> class representing 
	the Container Credentials, we create in the next section</li>
	<li><code>piApplicativeContainer</code>, a <em>CATBaseUnknown</em> pointer, 
	representing the Applicative Container we retrieved in the earlier step</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Instantiating Features in an Applicative Container</h3>
<p>Now that we have a valid Applicative Container Facade in place, we may use it 
for both instantiating a feature in this Container and further to retrieve it by 
scanning through the Container. We begin with the instantiation.</p>
<p>We instantiate a &quot;<code>CAAOsmNovel</code>&quot; feature. A &quot;<code>CAAOsmChapter</code>&quot; 
feature is further instantiated, aggregated under the Novel feature, both inside 
our Container. The details of the steps involved in this instantiation and the role 
of our Container Facade in the instantiation, is a subject of another UC [<a href="#References">6</a>]</p>
<p>We proceed now to scan through our Container.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Scan through an Appli Cont"></a>Scanning through all features inside 
the Applicative Container</h3>
<p>We begin by scanning for all features (for which you are granted to handle) 
inside our Applicative Container.</p>
<pre class="code">CATFmFeatureIterator oIteratorOnAllFeats;
rc = <strong>MyContainerFacade.ScanFeatures</strong>(oIteratorOnAllFeats);</pre>
<p>The <code>ScanFeatures</code> method of the <em>CATFmContainerFacade</em> class 
retrieves all features inside the container according to its credentials. The return 
is <code>oIteratorOnAllFeats</code>, a <em>CATFmFeatureIterator</em> class object.
</p>
<pre class="code">int featcount = 0;
CATFmFeatureFacade oFeat(MyCredential);
rc =  <strong>oIterator.Next(oFeat)</strong>;
<strong>while(SUCCEEDED(rc))
</strong>{
   CATUnicodeString oDisplayName;
   oFeat.GetDisplayName(oDisplayName);
   ...
   featcount++;
   rc =  <strong>oIteratorOnAllFeats.Next(oFeat)</strong>;
}</pre>
<p>The <code>Next</code> call on a <em>CATFmFeatureIterator</em> returns the retrieved 
feature as a feature facade. We wish to reiterate here that the scan returns only 
those features (through the Iterator), which the client owns. This ownership is 
determined by the Credentials object (<code>MyCredentials</code>) associated with 
the Container Facade.</p>
<p>Note that <code>oFeat</code> is created without feature. At each iteration, the 
retrieved feature is bound to the facade. We can use <code>GetDisplayName</code> 
on <code>oFeat</code> because the facade has been created with <code>MyCredentials</code> 
as credentials.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Scan through root feats"></a>Scanning through the Root features inside 
the Applicative Container</h3>
<p>We next scan through the applicative container, to retrieve only the root features, 
meaning the non-aggregated features.</p>
<table class="code">
	<tr>
		<td>
		<pre>CATFmFeatureIterator oIteratorForRootFeats;
rc = <strong>MyContainerFacade.ScanRootFeatures</strong>(oIteratorForRootFeats);</pre>
		</td>
	</tr>
</table>
<p>The <code>ScanRootFeatures</code> method of the <em>CATFmContainerFacade</em> 
class retrieves all the root features inside the container according to its credentials. 
The return is <code>oIteratorForRootFeats</code>, a <em>CATFmFeatureIterator</em> 
class object.</p>
<table class="code">
	<tr>
		<td>
		<pre>int featcount = 0;
CATFmFeatureFacade oRootFeat(MyCredential);
rc =  <strong>oIteratorForRootFeats.Next(oRootFeat)</strong>;
<strong>while(SUCCEEDED(rc))
</strong>{
   CATUnicodeString oDisplayName;
   HRESULT hr = oRootFeat.GetDisplayName(oDisplayName);
   featcount++;
   rc =  <strong>oIteratorForRootFeats.Next(oRootFeat)</strong>;
}</pre>
		</td>
	</tr>
</table>
<p>The <code>Next</code> call on a <em>CATFmFeatureIterator</em> returns the retrieved 
feature as a feature facade. We wish to reiterate here that the scan returns only 
those root features (through the Iterator), which the client owns. This ownership 
is determined by the Credentials object (<code>MyCredentials</code>) associated 
with the Container Facade.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">4</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates working with an Applicative Container. Working with an Applicative 
Container primarily involves instantiation features in it and subsequently retrieving 
those features, by scanning through it. In order to work with an Applicative Container, 
one requires authorization, expressed as a set of credentials.</p>
<p>These credentials are the ownership credentials of the feature instantiated in 
and retrieved from the container and the credentials as a Feature Modeler client 
which allows one to work (instantiate &amp; scan) with any kind of containers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaApplicativeContainer.htm">Understanding Applicative 
		Container</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2000]</td>
		<td>Document modified</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jul 2007]</td>
		<td>Integration of CATOsmSUHandler</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Nov 2009]</td>
		<td>Specs Migration to Facade</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
