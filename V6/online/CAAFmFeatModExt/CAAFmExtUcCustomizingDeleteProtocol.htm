<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Customizing Delete Protocol</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Customizing Delete Protocol</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtCustomizingDeleteProtocol</code> 
		use case (UC). The UC illustrates the steps involved to customize deleting 
		a feature. This is accomplished with the <em>CATIFmFeatureBehaviorCustomization</em> 
		implementation on a feature. The customization allows an end-user to impose 
		conditions on feature delete and also specify a set of operations for execution 
		before a feature delete. The technical article &quot;<strong>Understanding Delete 
		Protocol Customization</strong>&quot; [<a href="#References">1</a>] delves in 
		depth into this concept.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtCustomizingDeleteProtocol Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtCustomizingDeleteProtocol 
				Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtCustomizingDeleteProtocol</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtCustomizingDeleteProtocol 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved to customize delete operation on a feature. 
He is thus introduced to the <em>CATIFmFeatureBehaviorCustomization</em> implementation 
on a feature to realize this.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtCustomizingDeleteProtocol Use Case</h2>
<p>The <code>CAAFmExtCustomizingDeleteProtocol</code> is a use case of the <code>
CAAFeatureModelerExt.edu</code> framework that illustrates <code>FeatureModelerExt</code> 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtCustomizingDeleteProtocol Do</h3>
<p>The use case is split in three different operations:</p>
<ul>
	<li><a href="#StartUp Creation">StartUp creation</a></li>
	<li>
	<a href="#Delete customization, i.e. the implement of CATIFmFeatureBehaviorCustomization">
	Delete customization, i.e. the implementation of <em>CATIFmFeatureBehaviorCustomization</em></a></li>
	<li>
	<a href="#Creation of Different Data model Configurations to check the deletion result">
	Creation of different Data model configurations to check the deletion result</a></li>
</ul>
<p>Lets us describe each part.</p>
<p><strong><a name="StartUp Creation"></a>StartUp Creation</strong></p>
<p>This use case is based on three StartUps defined in in the <code>CAAFmExtDelete1.CATfct</code> 
file. These 3 startups are:</p>
<ul>
	<li><code>CAAFmExtA</code>, with
	<ul>
		<li><code>Attr_AB</code> as component</li>
		<li><code>Attr_AC</code> as specobject</li>
		<li><code>Attr_AD</code> as specobject</li>
		<li><code>Attr_AE</code> as integer (useless for this UC)</li>
	</ul>
	</li>
	<li><code>CAAFmExtB</code>, with <code>Attr_BC</code> as component</li>
	<li><code>CAAFmExtC</code>, with <code>Attr_Info</code> as string , default 
	value is &quot;DoNotDelete&quot;</li>
</ul>
<p>and one defined in the <code>CAAFmExtDelete2.CATfct</code> file.</p>
<ul>
	<li><code>CAAFmExtD</code>, with one attribute, <code>Attr_AD</code> as boolean</li>
</ul>
<p>All are fully implementing the CATIUseEntity interface [<a href="#References">2</a>]
</p>
<p>The <a href="#Where">Where to Find the CAAFmExtCustomizingDeleteProtocol Code</a> 
section gives you all information to retrieve the delivered osm files.</p>
<p><strong>
<a name="Delete customization, i.e. the implement of CATIFmFeatureBehaviorCustomization">
</a>Delete customization, i.e. the implement of <em>CATIFmFeatureBehaviorCustomization</em></strong></p>
<p>The <em>CATIFmFeatureBehaviorCustomization</em> has been implemented on three 
StartUp</p>
<p><code>CAAFmExtA</code>, to customize the BeforeRemove</p>
<ul>
	<li>CanBeDeleted = always yes</li>
	<li>BeforeRemove = call the deletion (DataCommonProtocolServices::Delete) for 
	the two pointed features (*)</li>
</ul>
<p>(*) By default, the pointed features are not deleted.</p>
<p><code>CAAFmExtB</code>, to show that Feature modeler engine does not use CanBeDeleted 
when the feature is deleting .</p>
<ul>
	<li>CanBeDeleted = always no</li>
	<li>BeforeRemove = nothing special</li>
</ul>
<p><code>CAAFmExtC</code>, to customize the CanBeDeleted</p>
<ul>
	<li>CanBeDeleted = Yes, if Attr_Info=&quot;CanDelete&quot; otherwise No.</li>
	<li>BeforeRemove = nothing special</li>
</ul>
<p><strong>
<a name="Creation of Different Data model Configurations to check the deletion result">
</a>Creation of Different Data model Configurations to check the deletion result</strong></p>
<p>The main use case creates three configuration of FeatA an instance of the StartUp
<code>CAAFmExtA</code>. After each creation of Feat A (aggregating/pointing features), 
we delete it using the DataCommonProtocolServices::Delete, and then we check what 
are the remaining features.</p>
<p>The <strong>first scenario</strong> uses this data model.</p>
<table>
	<caption><a name="Fig.1">Fig.1</a> Data Model for Scenario 1</caption>
	<tr>
		<td><img alt="Data Model for Scenario 1" src="images/CAAFmExtCustomizingDeleteProtocol_Fig1.gif"></td>
	</tr>
</table>
<p>When <code>FeatA</code> is deleted</p>
<ul>
	<li>Its aggregating feature <code>FeatB</code> is automatically deleted</li>
	<li>Its implementation of BeforeRemove asks the deletion of
	<ul>
		<li><code>FeatC</code>, but DataCommonProtocolServices::Delete fails, because 
		the implementation of CanBeDeleted for <code>CAAFmExtC</code> prohibits 
		the deletion since <code>Attr_Info</code> =&quot;DoNoDelete&quot;</li>
		<li><code>FeatD</code>, and DataCommonProtocolServices::Delete is successful, 
		because the default implementation of the Delete method (<code>CAAFmExtC</code> 
		doesn&#39;t implement <em>CATIFmFeatureBehaviorCustomization)</em>, is to success 
		when a feature is not aggregated.</li>
	</ul>
	</li>
</ul>
<p>So, after the first scenario, only<code> FeatC</code> is still alive.</p>
<p>The <strong>second scenario</strong> uses the same data model as depicted by 
[<a href="#Fig.1">Fig.1</a>], with just one exception, the value of <code>Attr_Info</code> 
for <code>FeatC</code> is now &quot;CanDelete&quot;.</p>
<p>When <code>FeatA</code> is deleted</p>
<ul>
	<li>Its aggregating feature <code>FeatB</code> is automatically deleted ( no 
	change from Scn 1)</li>
	<li>Its implementation of BeforeRemove asks the deletion of
	<ul>
		<li><code>FeatC</code>, and DataCommonProtocolServices::Delete is now successful, 
		because the implementation of CanBeDeleted for <code>CAAFmExtC</code> authorizes 
		the deletion since <code>Attr_Info</code> =&quot;CanBeDeleted&quot;</li>
		<li><code>FeatD</code>, and DataCommonProtocolServices::Delete is successful, 
		because the default implementation of the Delete method (<code>CAAFmExtC</code> 
		doesn&#39;t implement <em>CATIFmFeatureBehaviorCustomization)</em>, is to success 
		when a feature is not aggregated. ( no change from Scn 1)</li>
	</ul>
	</li>
</ul>
<p>So, after the second scenario, all features are dead.</p>
<p>The <strong>third scenario</strong> uses a little bite different data model. 
In red the changes ( <code>FeatD</code> is now aggregating by a feature <code>FeatA1</code>, 
and <code>FeatC</code> is aggregated by <code>FeatD</code>)</p>
<table>
	<caption><a name="Fig.3"></a>Fig.3</caption>
	<tr>
		<td>
		<img alt="Fig.3" src="images/CAAFmExtCustomizingDeleteProtocol_Fig3.jpg"></td>
	</tr>
</table>
<p>When <code>FeatA</code> is deleted</p>
<ul>
	<li>Its aggregating feature <code>FeatB</code> is automatically deleted ( no 
	change from Scn 1/2)</li>
	<li>Its implementation of BeforeRemove asks the deletion of
	<ul>
		<li><code>FeatC</code>, but DataCommonProtocolServices::Delete fails, because 
		the implementation of CanBeDeleted for <code>CAAFmExtC</code> prohibits 
		the deletion since <code>Attr_Info</code> =&quot;DoNoDelete&quot; . But <code>FeatC</code> 
		will be finally deleted by the destruction of <code>FeatB</code></li>
		<li><code>FeatD</code>, but DataCommonProtocolServices::Delete fails, because 
		the default implementation of the Delete method (<code>CAAFmExtC</code> 
		doesn&#39;t implement <em>CATIFmFeatureBehaviorCustomization)</em>, is to fail 
		when a feature is aggregated.</li>
	</ul>
	</li>
</ul>
<p>So, after the first scenario, only <code>FeatD</code> is still alive (and
<code>FeatA1</code>)</p>
<p><strong>Note</strong> : Before to start a new scenario, the remaining feature 
in session are deleted. For that, the use case uses the <code>DeleteSelf</code> 
method of the <em>CATFmFeatureFacade</em>. This method is always successful, if 
the credential are valid, because the method does not call the <code>CanBeDeleted</code> 
method of <em>CATIFmFeatureBehaviorCustomization</em></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtCustomizingDeleteProtocol<br>
</h3>
<p>To launch <code>CAAFmExtCustomizingDeleteProtocol</code>, you will need to set 
up the build time environment, then compile <code>CAAFmExtCustomizingDeleteProtocol
</code>along with its prerequisites, set up the run time environment, and then execute 
the sample. This is fully described in the referenced article [<a href="#References">3</a>].
</p>
<p>mkrun -c &quot;CAAFmExtCustoDelete Repository Server UserId Password SecurityCtx Environment&quot;</p>
<p>Where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<p>Don&#39;t forget to update the runtime view to have the <code>CAAFmExtDelete1.CATfct/CAAFmExtDelete2.CATfct</code> 
files.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtCustomizingDeleteProtocol Code</h3>
<p><code>CAAFmExtCustomizingDeleteProtocol</code> code is located in the <code>CAAFmExtCustoDelete.m</code> 
and <code>CAAFmExtModeler.m</code> use case modules of the <code>CAAFeatureModelerExt.edu</code> 
framework. The path follows:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtCustoDelete.m</code></p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtModeler.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the 
root folder of your APi installation. It is made of source files namely.</p>
<ul>
	<li><code>CAAFmExtCustoDelete.cpp</code>, which has the UC main in it.</li>
	<li><code>CAAEFmExtA.cpp</code>, <code>CAAEFmExtB.cpp</code>, <code>CAAEFmExtC.cpp</code> 
	the <em>CATIFmFeatureBehaviorCustomization</em> implementation for <code>CAAFmExtA
	</code>, <code>CAAFmExtB</code>, and <code>CAAFmExtC</code> respectively.</li>
</ul>
<p>The <code>CAAFmExtDelete1.CATfct/CAAFmExtDelete2.CATfct</code> files are located 
in the resource graphic folder:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CNext\CNext\resources\graphic</code></p>
<p>The osm files generated from these StartUp catalog are provided in another folder:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\InputData</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps of <code>CAAFmExtCustomizingDeleteProtocol</code> are:</p>
<ol>
	<li><a href="#CATIFmFeatureBehaviorCustomization Implementation">CATIFmFeatureBehaviorCustomization 
	Implementation</a></li>
	<li><a href="#Delete Service custo for feat A">The Delete Service Customization 
	for Feat A</a></li>
	<li><a href="#Delete service custo for feat B">The Delete Service Customization 
	for Feat B</a></li>
	<li><a href="#Delete service custo for feat C">The Delete Service Customization 
	for Feat C</a></li>
	<li><a href="#Invoking delete of feat A">Invoking the Delete Service on Feat 
	A</a></li>
	<li><a href="#Invoking the Feature Facade Deletion">Invoking the Feature Deletion 
	Through Facade</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Delete Service custo for feat A"></a>
<a name="CATIFmFeatureBehaviorCustomization Implementation"></a>CATIFmFeatureBehaviorCustomization 
Implementation</h3>
<p>This interface is implementable with the BOA mechanism; It implies to create 
a header file and a source file for your StartUp late type [<a href="#References">4</a>]. 
Here extract of code for the <code>CAAEFmExtA</code> late type.</p>
<ul>
	<li>For the header</li>
</ul>
<p>A new class, CAAEFmExtA is created. Its header file is a follows.</p>
<pre class="code">...
class <strong>CAAEFmExtA</strong>:  public CATFmFeatureCustomizationAdaptor
{
  CATDeclareClass;
public:
     HRESULT <strong>CanBeRemoved</strong>(CATBoolean &amp; oDeletable) const;
     virtual HRESULT <strong>BeforeRemove</strong>();
private:
	
      // Standard constructors and destructors for an implementation class
      CAAEFmExtA();
      virtual ~CAAEFmExtA();

      CATFmCredentials _MyCredential;
};
...</pre>
<p>The class is deriving from the adaptor class <em>CATFmFeatureCustomizationAdaptor</em> 
class. So on your own class, you only have to add the methods to overriden.</p>
<ul>
	<li>For the source</li>
</ul>
<pre class="code">...
<strong>CATImplementClass</strong>(CAAEFmExtA,
		  DataExtension, 
		  CATIFmFeatureBehaviorCustomization,
		  <strong>CAAFmExtA</strong>);

...
<strong>CATImplementBOA</strong>(CATIFmFeatureBehaviorCustomization,CAAEFmExtA);
...</pre>
<p><code>CAAFmExtA</code> is the late type implementing <em>CATIFmFeatureBehaviorCustomization</em>. 
CAAEFmExtA is the class implementing the data extension.</p>
<p>Don&#39;t forget to update the dictionary file (CAAFeatureModelerExt.edu\CNext\code\dictionary\CAAFeatureModelerExt.edu.dico), 
and to add an entry point for the new implementation.</p>
<pre class="code">...
<strong>CAAFmExtA</strong> CATIFmFeatureBehaviorCustomization  libCAAFmExtModeler
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>The Delete Service Customization for Feat A</h3>
<p>The <code>CanBeRemoved()</code> implementation overridden by <code>CAAFmExtA</code>, 
follows. It simply returns <strong>S_OK</strong> and valuates <code>oDeletable</code> 
to <strong>TRUE</strong>. In other words, it allows <code>CAAFmExtA</code> to be 
always deleted.</p>
<pre class="code">HRESULT <strong>CAAEFmExtA::CanBeRemoved(CATBoolean &amp; oDeletable)</strong> const
{
    <strong>oDeletable = TRUE;
    return S_OK</strong>;
}</pre>
<p>The <code>BeforeRemove()</code> implementation overridden by <code>CAAFmExtA</code>, 
follows.</p>
<p>The first step is to call the delete service on the referenced feature hold by 
the attribute <code>Attr_AC</code>.</p>
<pre class="code">HRESULT <strong>CAAEFmExtA::BeforeRemove</strong>()
{
    CATFmFeatureFacade <strong>FeatFacadeOnThis</strong>(_MyCredential,this);
...
</pre>
<p>Using this and the credential created in the class constructor, a feature facade 
is created. With this facade you can got the value of its attribute.</p>
<pre class="code">...
    CATFmAttributeValue AttrValue ;
    CATFmAttributeName AttrNameAC(&quot;Attr_AC&quot;);
    HRESULT rc = FeatFacadeOnThis.<strong>GetValue</strong>(AttrNameAC,AttrValue);
    if ((S_OK == rc) &amp;&amp; (AttrValue.GetFeature() != NULL_var)  ) // FeatA points to an existing FeatC
    {
...</pre>
<p>Here, since the attribute is a feature, you know that if <code>GetValue</code> 
is successul, the returned value (<code>AttrValue</code>) has been modified, but 
it can be a NULL value. So you have to check that <code>AttrValue</code>is not a 
NULL value.</p>
<pre class="code">...
        CATIUseEntity* piUseEntityOnC = NULL;
        rc = AttrValue.<strong>QueryInterfaceOnFeature</strong>(IID_CATIUseEntity,(void**)&amp;piUseEntityOnC);
        if (SUCCEEDED(rc) &amp;&amp;( NULL!=piUseEntityOnC))
        {
           <strong>DataCommonProtocolServices::Delete</strong>(piUseEntityOnC);

           piUseEntityOnC-&gt;Release();
           piUseEntityOnC = NULL;
        }
</pre>
<p>Finally, you call the delete service provided by <em>DataCommonProtocolServices</em> 
class. If you are not owner of the catalog defining the referenced feature, you 
cannot use the DeleteSelf method of the <em>CATFmFeatureFacade</em> class.</p>
<p>But be careful, invoking the delete service does not ensure the real deletion.</p>
<p>On similar lines we invoke the delete service on the referenced feature hold 
by the attribute <code>Attr_AD</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Delete service custo for feat B"></a>The Delete Service Customization 
for Feat B</h3>
<p>The <em>CATIFmFeatureBehaviorCustomization</em> on <code>CAAFmExtB</code> follows. 
It returns <strong>S_OK</strong> for all the methods, as depicted for the calls
<code>CanBeRemoved()</code> and <code>BeforeRemove()</code> below.</p>
<pre class="code">HRESULT <strong>CAAEFmExtB::CanBeRemoved(CATBoolean &amp; oDeletable)</strong> const
{
    // always returns OK
    <strong>oDeletable = FALSE</strong>;
    <strong>return S_OK</strong>;
}
</pre>
<p>Instances of <code>CAAFmExtB</code> could not be deleted through the DataCommonProtocolServices::Delete. 
But you can observe these same instances are nevertheless deleted, when Feature 
modeler launches their deletion.</p>
<pre class="code">HRESULT <strong>CAAEFmExtB::BeforeRemove()</strong>
{
    <strong>return S_OK</strong>;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Delete service custo for feat C"></a>The Delete Service Customization 
for Feat C</h3>
<p>TThe <em>CATIFmFeatureBehaviorCustomization</em> on <code>CAAFmExtB</code> follows.
</p>
<pre class="code">HRESULT <strong>CAAEFmExtC::CanBeRemoved(CATBoolean &amp; oDeletable)</strong> <strong>const</strong>
{
    CATFmFeatureFacade FeatFacadeOnThis(_MyCredential,<strong>const_cast&lt;CAAEFmExtC *&gt;</strong>(this));
    CATFmAttributeValue AttrValue;
    CATFmAttributeName AttrNameAttr_Info(&quot;Attr_Info&quot;);
    HRESULT rc = FeatFacadeOnThis.<strong>GetValue</strong>(AttrNameAttr_Info,AttrValue);

    if (S_OK == rc)
    {
        CATUnicodeString CUSAttrInfo;
        rc = AttrValue.<strong>GetString</strong>(CUSAttrInfo);
        if (S_OK == rc)
        {
            CATUnicodeString strDoNotDelete (&quot;DoNotDelete&quot;);
            CATUnicodeString strCanDelete(&quot;CanDelete&quot;);
            if ( strDoNotDelete == CUSAttrInfo)
                oDeletable = <strong>FALSE</strong>;
            else if (strCanDelete== CUSAttrInfo )
                oDeletable = <strong>TRUE</strong>;
        }
    }
 ...</pre>
<p>Here observe the first line, the way the <em>CATFmFeatureFacade</em> class instance 
is created. &quot;<strong>const_cast&lt;CAAEFmExtC *&gt;</strong> is used before this, because 
the method is const. The method is const because it must not change the implementation 
of this.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Invoking delete of feat A"></a>Invoking the Delete Service on Feat 
A</h3>
<p>The delete service is invoked on <strong>FeatA</strong>, in our UC main, as depicted 
in the code extract that follows.</p>
<pre class="code">rc = FeatFacadeOnA.<strong>QueryInterfaceOnFeature</strong>(IID_CATIUseEntity,(void**)&amp;piUseEntityOnFeatA);
if (SUCCEEDED(rc))
{
   rc = <strong>DataCommonProtocolServices::Delete(piUseEntityOnFeatA)</strong>;
</pre>
<p>It simply involves retrieving the <em>CATIUseEntity</em> pointer on <strong>Feat 
A</strong>, an input for the Delete service call that happens next. Please remember 
the <em>CATIUseEntity</em> implementation on features need not be explicitly coded. 
It is accomplished with an entry in the <strong>OSM</strong> file to that effect 
[<a href="#References">2</a>].</p>
<p>Next, we have a check for each feature involved to confirm if it is still alive. 
The behavior here would correspond to each scenario. What follows is a sample check 
for <strong>Feat A</strong>.</p>
<pre class="code">   <strong>if (FAILED(rc) || (TRUE == FeatFacadeOnA.IsValid()))</strong>
    {
        rc = E_FAIL;
        cout &lt;&lt; &quot;   Feat A delete fails&quot; &lt;&lt; endl;
    } else
        cout &lt;&lt; &quot;   Feat A delete succeeds&quot; &lt;&lt; endl;</pre>
<p>The call to <code>IsValid()</code> of the <em>CATFmFeatureFacade</em> class checks 
if the feature is valid (if it is still alive). A similar check is applied for other 
features as well namely. <strong>Feat B</strong>, <strong>Feat C</strong> and
<strong>Feat D</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Invoking the Feature Facade Deletion"></a>Invoking the Feature Deletion 
Through Facade</h3>
<p>Between each scenario, the remaining features are deleted by calling the
<code>DeleteSelf()</code> of the <em>CATFmFeatureFacade</em> class, to ensure their 
deletion.</p>
<pre class="code">
...
if (SUCCEEDED(hr) &amp;&amp; (TRUE == FeatFacadeOnB.<strong>IsValid</strong>()) )
{
        hr = FeatFacadeOnB.<strong>DeleteSelf</strong>();
}
 ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to customize feature delete. It involves 
implementing the <em>CATIFmFeatureBehaviorCustomization</em> Interface on our feature. 
The method <code>CanBeRemoved()</code> implementation imposes conditions on deletion 
invoked by the Delete service, by while the method <code>BeforeRemove()</code> specifies 
a set of operations to be executed prior to delete.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaCustoDelete.htm">Understanding Delete Protocol Customization</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaCommonProtocol.htm">Common Protocol Integration</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmExtTaNamingFeatures.htm">Understanding Feature Naming</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Aug 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
