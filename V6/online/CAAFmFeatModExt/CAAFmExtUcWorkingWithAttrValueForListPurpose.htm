<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with an Attribute Value as a List</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Working with Attribute Value as a List</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtWorkingWithAttrValueForListPurpose
		</code>use case (UC). The UC illustrates working with the <em>CATFmAttributeValue</em> 
		class fundamentally viewing it as a class which represents data of type 
		list. There is another UC &quot;<strong>Working with Attribute Value</strong>&quot; 
		[<a href="#References">1</a>] which fundamentally explains the APIs in the
		<em>CATFmAttributeValue</em> class, while the current UC focuses primarily 
		on its list aspect.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtWorkingWithAttrValueForListPurpose 
			Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtWorkingWithAttrValueForListPurpose 
				Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtWorkingWithAttrValueForListPurpose</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtWorkingWithAttrValueForListPurpose 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to work with a <em>CATFmAttributeValue</em> class, especially 
considering it as a class which refers to a data of type list beneath.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtWorkingWithAttrValueForListPurpose Use Case</h2>
<p>The <code>CAAFmExtWorkingWithAttrValueForListPurpose</code> is a use case of 
the <code>CAAFeatureModelerExt.edu</code> framework that illustrates <code>FeatureModelerExt</code> 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtWorkingWithAttrValueForListPurpose Do</h3>
<p>The UC illustrates working with a <em>CATFmAttributeValue</em> class as a list. 
It refers to a feature whose definition follows. The contents below depict the contents 
of the <strong>CAAFmExtElementCatalog.osm</strong> file.</p>
<pre class="code">feature <strong>CAAFmExtLists</strong> #startup 
{
   int MyListOfInteger <strong>#list</strong>
   string MyListOfString <strong>#list</strong>
   MyListOfString = [&quot;firststring&quot;,&quot;secondstring&quot;,&quot;thirdstring&quot;]
}</pre>
<p>The &quot;<strong>CAAFmExtLists</strong>&quot; StartUp is characterized with two attributes 
namely:</p>
<ul>
	<li><strong>MyListOfInteger</strong>, a list of int type. This attribute is 
	not default valuated.</li>
	<li><strong>MyListOfString</strong>, a list of string type. This attribute is 
	default valuated as depicted by the <strong>OSM</strong> contents above.</li>
</ul>
<p>The UC instantiates this StartUp, to begin with. It further proceeds with its 
execution and in the process clarifies key concepts, as listed below:</p>
<ul>
	<li>It retrieves the value of the two attributes listed above. We confirm the 
	list of int attribute value is of size 0, while that of the list of string attribute 
	has size 3. The default valuation of these attributes is thus taken into account 
	on feature instantiation.</li>
	<li>It next creates an Attribute Value (AV), valuated with a single value (type 
	int, string). It then assigns this AV to our feature attributes. The assignment 
	succeeds. This implies that a feature attribute of type list can be assigned 
	an AV which was valuated with a single value. In other words, the values underlying 
	an AV is fundamentally treated as a list.</li>
	<li>The UC then illustrates steps to work with an attribute of type &quot;list of 
	string&quot;. It begins by creating an AV which is assigned an empty list of strings. 
	This list is further modified with calls to <code>Append</code>, <code>Insert</code>,
	<code>Set</code>, <code>Remove</code>, etc.</li>
	<li>The UC then illustrates steps involved to with an attribute of type &quot;list 
	of int&quot;. It creates an AV which is assigned an array of integers. This list 
	can further be modified and introspected with calls to <code>Append</code>,
	<code>Insert</code>, <code>Set</code>, <code>Remove</code>, <code>Get</code> 
	all of the <em>CATFmAttributeValue</em> class.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAFmExtWorkingWithAttrValueForListPurpose<br>
</h3>
<p>To launch <code>CAAFmExtWorkingWithAttrValueForListPurpose</code>, you will need 
to set up the build time environment, then compile <code>CAAFmExtWorkingWithAttrValueForListPurpose</code> 
along with its prerequisites, set up the run time environment, and then execute 
the sample. This is fully described in the referenced article [<a href="#References">2</a>].
</p>
<p>mkrun -c &quot;<em><code>CAAFmExtWorkingWithAttrValueForListPurpose</code> Repository 
Server UserId Password SecurityCtx Environment</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtWorkingWithAttrValueForListPurpose 
Code</h3>
<p><code>CAAFmExtWorkingWithAttrValueForListPurpose</code> code is located in the
<code>CAAFmExtWorkingWithAttrValueForListPurpose.m</code> use case module of the
<code>CAAFeatureModelerExt.edu</code> framework. The path follows:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtWorkingWithAttrValueForListPurpose.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is 
the root folder of your API installation. It is made of source file: <code>CAAFmExtWorkingWithAttrValueForListPurpose.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps of <code>CAAFmExtWorkingWithAttrValueForListPurpose</code> 
are:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#List attr default valuated">List Attribute (type Int, String) 
	Default Valuated</a></li>
	<li><a href="#AV Single value can be assigned to list">CATFmAttributeValue set 
	with a single value can be assigned to an Attribute of type List</a></li>
	<li><a href="#working with list of string">Working with an Attribute of type 
	&quot;List of String&quot;</a></li>
	<li><a href="#working with list of int">Working with an Attribute of type &quot;List 
	of Int&quot;</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">3</a>].</p>
<p>Then the use case creates a PLM Technological Representation with an applicative 
container [<a href="#References">4</a>].</p>
<p>It proceeds to create the Credentials object which allow user an authorization 
to access the catalog referred in the &quot;<strong>What does the UC do</strong>&quot; section. 
The article &quot;<strong>Understanding Credentials</strong>&quot; [<a href="#References">5</a>] 
delves in depth into the concept of credentials.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="List attr default valuated"></a>List Attribute (type Int, String) Default 
Valuated</h3>
<p>The <strong>OSM</strong> file depicted in the &quot;<strong>What does the UC do</strong>&quot; 
section above illustrates that the &quot;<strong>CAAFmExtLists</strong>&quot; StartUp is characterized 
by a list of string attribute namely. <strong>MyListOfString</strong> and a list 
of int attribute namely. <strong>MyListOfInteger</strong>.</p>
<p>The list of string attribute is default valuated in the <strong>OSM</strong> 
file with three string values. While the list of int attribute is not default valuated.</p>
<p>In our UC main we have instantiated this feature and we further retrieve these 
attribute values in the code extract that follows. We confirm the size of the value 
retrieved conforms with the default valuation.</p>
<pre class="code"><strong>CATFmAttributeName AttrNameMyListOfInt(&quot;MyListOfInteger&quot;), AttrNameMyListOfString(&quot;MyListOfString&quot;)</strong>;

CATFmAttributeValue AttrValue;
rc = <strong>FeatFacadeOnList.GetValue(AttrNameMyListOfInt,AttrValue)</strong>;
<strong>if ((S_FALSE != rc) || (0 != AttrValue.Size())) return 1</strong>;</pre>
<p>The call to <code>GetValue()</code> of the <em>CATFmFeatureFacade</em> class 
retrieves an attribute value.</p>
<p>Its input <code>AttrNameMyListOfInt</code>, a <em>CATFmAttributeName</em> type, 
represents the feature attribute of type, list of integer.</p>
<p>The other input is <code>AttrValue</code>, a <em>CATFmAttributeValue</em> type 
which stores in it, the retrieved value. We invoke <code>Size()</code> on it, to 
confirm if the size is 0. This is since the list of integer attribute is not default 
valuated. <code>GetValue</code> returns S_FALSE, because the list of integer ( primitive 
type) is empty. ( for a non primitive type, S_FALSE is never possible).</p>
<pre class="code">rc = <strong>FeatFacadeOnList.GetValue(AttrNameMyListOfString,AttrValue)</strong>;
<strong>if ((S_OK != rc) || (3 != AttrValue.Size())) return 1</strong>;</pre>
<p>We again call <code>GetValue()</code> of the <em>CATFmFeatureFacade</em> class, 
this time to retrieve its list of string attribute value.</p>
<p>Its input <code>AttrNameMyListOfString</code>, a <em>CATFmAttributeName</em> 
type, represents the feature attribute of type, list of string.</p>
<p>The other input is <code>AttrValue</code>, a <em>CATFmAttributeValue</em> type 
which stores in it, the retrieved value. We invoke <code>Size()</code> on it, to 
confirm if the size is 3. This is since the list of string attribute was default 
valuated with three strings. <code>GetValue</code> returns S_OK, because the list 
of string ( primitive type) is not empty.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="AV Single value can be assigned to list"></a>CATFmAttributeValue set 
with a single value can be assigned to an Attribute of type List</h3>
<p>A <em>CATFmAttributeValue</em> type fundamentally stores the value as a list. 
It implies that we could assign it to a feature attribute of a list type.</p>
<pre class="code">CATUnicodeString str1(&quot;Ganesh&quot;);
CATFmAttributeValue AV1(str1);
rc = <strong>FeatFacadeOnList.SetValue(AttrNameMyListOfString,AV1)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>We create a <em>CATFmAttributeValue</em> type (<strong>AV1</strong>) with a single 
string input. We assign this value to our feature attribute.</p>
<p>We call <code>SetValue()</code> of the <em>CATFmFeatureFacade</em> class (<strong>FeatFacadeOnList</strong>). 
It assigns value <strong>AV1</strong> to the feature attribute represented by
<strong>AttrNameMyListOfString</strong>, a <strong>list of</strong> string.</p>
<p>The call returns <strong>SUCCESS</strong>. It implies an Attribute Value set 
with a single string value can be assigned to a feature attribute of type list.
</p>
<pre class="code">int int1 = 10;
CATFmAttributeValue AV2(int1);
rc = <strong>FeatFacadeOnList.SetValue(AttrNameMyListOfInt,AV2)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>This code illustrates the same concept as the one above, except this time we 
operate on a list of integers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="working with list of string"></a>Working with an Attribute of type 
&quot;List of String&quot;</h3>
<p>We illustrate the steps involved while working with an attribute of type &#39;list 
of string&quot;</p>
<pre class="code"><strong>CATFmAttributeValue AV3 = CATFmAttributeValue::CreateEmptyList(CATFmKind_string)</strong>;
if (0 != AV3.Size()) return 1;</pre>
<p>The static all to <code>CreateEmptyList()</code> of the <em>CATFmAttributeValue</em> 
class, returns a <em>CATFmAttributeValue</em> type (AV3), valuated with an empty 
list of type specified as input namely. <strong>CATFmKind_string</strong>.</p>
<pre class="code">CATUnicodeString str4(&quot;Rohit&quot;);
CATFmAttributeValue AV4(str4);
rc = AV3<strong>.Append(AV4)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>We proceed to populate this list with its 1st element. The call to <code>Append(</code>) 
of the <em>CATFmAttributeValue</em> class accomplishes this. It takes a <em>CATFmAttributeValue</em> 
type (<strong>AV4</strong>), as an input which is equivalent of a string.</p>
<pre class="code">CATUnicodeString str5(&quot;Mohit Chauhan&quot;);
CATFmAttributeValue AV5(str5);
rc = <strong>AV3.Insert(2,AV5)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>The call to <code>Insert()</code> of the <em>CATFmAttributeValue</em> class inserts 
an element in the list. If the index specified is the one after the last, this call 
is equivalent to that of the call to <code>Append()</code>. Our list so far has 
a single element. So our index input is 2, which will effectively append our list 
with another string.</p>
<pre class="code"><strong>CATFmAttributeValue::Swap(AV4,AV5)</strong>;
rc = <strong>AV3.Set(1,AV4)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>The static call to <code>Swap(</code>) of the <em>CATFmAttributeValue</em> class, 
swaps the underlying values of the two <em>CATFmAttributeValue</em> types provided 
as input.</p>
<pre class="code">rc = <strong>AV3.Set(1,AV4)</strong>;
if (FAILED(rc)) return 1;
    
rc = <strong>AV3.Set(2,AV5)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>The call to <code>Set()</code> of the <em>CATFmAttributeValue</em> class sets 
a value at an index specified as input. The value is input as its <em>CATFmAttributeValue</em> 
equivalent.</p>
<pre class="code">rc = <strong>AV3.Remove(2)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>The call to <code>Remove()</code> of the <em>CATFmAttributeValue</em> class removes 
the value at the index specified as input. The list size thus reduces by one.</p>
<pre class="code">rc = <strong>FeatFacadeOnList.SetValue(AttrNameMyListOfString,AV3)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>Finally, we valuate the list of string attribute of the feature with a call to
<code>SetValue()</code> of the <em>CATFmFeatureFacade</em> class (<strong>FeatFacadeOnList</strong>). 
Its input <strong>AttrNameMyListOfString</strong>, is a <em>CATFmAttributeName</em> 
type representing the feature attribute of type &quot;<strong>list of string</strong>&quot;.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="working with list of int"></a>Working with an Attribute of type &quot;List 
of Int&quot;</h3>
<p>The steps below illustrate working with an attribute of type &quot;<strong>list of 
integers</strong>&quot;.</p>
<pre class="code">CATFmAttributeValue AV8;
<strong>int iArrayOfInteger[5] = {2,4,6,8,10}</strong>;
int iSize = 5;
<strong>AV8.BuildFromCArrayOfInt(iArrayOfInteger,iSize)</strong>;        
</pre>
<p>The call to <code>BuildFromCArrayOfInt()</code> of the <em>CATFmAttributeValue</em> 
class valuates a <em>CATFmAttributeValue</em> object (AV8) with an array of integers.
</p>
<pre class="code">CATFmAttributeValue AV6;
rc = <strong>AV8.Get(3,AV6)</strong>;
if (FAILED(rc)) return 1;

int m = 0;
rc = <strong>AV6.GetInteger(m)</strong>;
if (FAILED(rc)) return 1;
 
CATFmAttributeValue AV7;
int l = 7;
<strong>AV7.SetInteger(l)</strong>;
rc = <strong>AV8.Set(3,AV7)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>The call to <code>Get()</code> of the <em>CATFmAttributeValue</em> class (<strong>AV8</strong>), 
retrieves the value at an index input, as a <em>CATFmAttributeValue</em> type (AV6).
</p>
<p>Further, the call to <code>GetInteger()</code> of the <em>CATFmAttributeValue</em> 
class, retrieves the integer value (<strong>m</strong>).</p>
<pre class="code">CATFmAttributeValue AV7;
int l = 7;
<strong>AV7.SetInteger(l)</strong>;
rc = <strong>AV8.Set(3,AV7)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>You may set a specified value at an index of the <em>CATFmAttributeValue</em> 
type (AV8). It is done with a call to <code>SetValue()</code>. Its inputs include 
an index and a <em>CATFmAttributeValue</em> type (<strong>AV7</strong>) equivalent 
for the integer to set, which is created with a call to <code>SetInteger()</code> 
of the <em>CATFmAttributeValue</em>class (<strong>AV7</strong>).</p>
<pre class="code">rc = <strong>FeatFacadeOnList.SetValue(AttrNameMyListOfInt,AV8)</strong>;
if (FAILED(rc)) return 1;</pre>
<p>Finally, we valuate the list of int attribute of the feature with a call to
<code>SetValue()</code> of the <em>CATFmFeatureFacade</em> class (<strong>FeatFacadeOnList</strong>). 
Its input <strong>AttrNameMyListOfInt</strong>, is a <em>CATFmAttributeName</em> 
type representing the feature attribute of type &quot;<strong>list of int</strong>&quot;.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">3</a>] for a detailed 
description of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the usage of a <em>CATFmAttributeValue</em> class as a data 
type which is fundamentally a list. It deals with list of int and string, in its 
illustrations. It illustrates the steps involved to modify and introspect this list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaWorkWithAttribute.htm">Working with the CATFmAttributeValue 
		Class</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials
		</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Aug 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
