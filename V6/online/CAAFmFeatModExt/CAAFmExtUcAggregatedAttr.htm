<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Setting up Aggregating Links</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Setting up Aggregating Links</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtAggregatedAttr</code> use case. 
		This Use Case illustrates the steps involved to aggregate a feature (child) 
		under another feature (parent). Aggregation simply involves valuating the
		<strong>component</strong> attribute of a feature (parent) with another 
		feature (child).</p>
		<p>You can first previously read the technical article about the attribute 
		in general, &quot;Understanding Feature Attributes&quot; [<a href="#References">1</a>], 
		like the specific one about link attribute &quot; Understanding Feature Links&quot; 
		[<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtAggregatedAttr Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtAggregatedAttr Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtAggregatedAttr</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtAggregatedAttr Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to aggregate a feature (child) under another feature (parent). 
In the process user understands the relevance of an attribute of type <strong>component</strong>, 
which realizes this aggregation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtAggregatedAttr Use Case</h2>
<p><code>CAAFmExtAggregatedAttr</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtAggregatedAttr Do</h3>
<p>The UC illustrates aggregating a child feature under a parent feature, by valuating 
the latter&#39;s attribute of type <strong>component</strong>. The features referred 
to, in this UC are those defined in the catalog &quot;<strong>CAAOsmCatalogSU</strong>&quot;, 
generated as an output of the UC &quot;<strong>Creating StartUps in Catalogs</strong>&quot; 
[<a href="#References">3</a>].</p>
<p>The main steps are:</p>
<ul>
	<li>Creating three <strong>Chapter</strong> features (CAAOsmChapter Startup)</li>
	<li>Checking there are without parent</li>
	<li>Creating one <strong>Novel</strong> feature (CAAOsmNovel Startup)</li>
	<li>Valuating its attribute &quot;<strong>NovelChapter</strong>&quot;, of type <strong>
	component</strong>, with the three <strong>Chapter</strong> features instantiated 
	earlier.</li>
	<li>Checking the parent feature</li>
	<li>Scans through the three <strong>Chapter</strong> features aggregated under 
	the<strong> Novel</strong> feature</li>
</ul>
<p>The final feature aggregation is depicted in [<a href="#Fig.1">Fig.1</a>] below.</p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Aggregation</caption>
	<tr>
		<td>
		<img alt="Aggregation" src="images/CAAFmExtUCAggregatedAttr_Fig1.gif" width="540" height="234"></td>
	</tr>
</table>
<p>The output as depicted in [<a href="#Fig.1">Fig.1</a>] exactly corresponds to 
the definition of the &quot;<strong>CAAOsmNovel</strong>&quot; feature. An extract of the 
associated OSM file which contains the definition follows.</p>
<pre class="code">feature <strong>CAAOsmNovel</strong> CAAOsmBook #startup #inheritability(caa) {
    string Author
    <strong>component</strong> <strong>NovelChapter</strong> #list
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtAggregatedAttr</h3>
<p>To launch <code>CAAFmExtAggregatedAttr</code>, you will need to set up the build 
time environment, then compile <code>CAAFmExtAggregatedAttr</code> along with its 
prerequisites, set up the run time environment, and then execute the sample. This 
is fully described in the referenced article [<a href="#References">4</a>].</p>
<pre class="code">mkrun -c &quot;CAAFmExtAggregatedAttr <em>Repository</em> <em>Server</em> <em>User</em> <em>Password</em> <em>SecurityCtx</em> <em>Environment</em>&quot;</pre>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtAggregatedAttr Code</h3>
<p><code>CAAFmExtAggregatedAttr</code> code is located in the <code>CAAFmExtAggregatedAttr.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CACAAFmExtAggregatedAttr.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the 
root folder of your API installation. It is made of a unique source file named
<code>CAAFmExtAggregatedAttr.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps in the CAAFmExtAggregatedAttr:</p>
<ul>
	<li><a href="#Create_doc">Prolog</a></li>
	<li><a href="#Creating Chapter &amp; Novel Features">Creating Chapter &amp; Novel 
	Features</a></li>
	<li><a href="#Checking no Parent Feature">Checking Parent Feature Before Aggregation</a></li>
	<li><a href="#Creating Chapter &amp; Novel Features">Aggregating the Chapter Features under the Novel Feature</a></li>
	<li><a href="#Confirm aggregation">Checking Parent Feature After Aggregation</a></li>
	<li><a href="#Scan through">Scanning through the Chapter Features Aggregated under Novel</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<p>An explanation of each of those steps follows:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create_doc"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
[<a href="#References">5</a>].</p>
<p>The Use Case creates a new PLM Technological Representation a subject discussed 
in the UC [<a href="#References">6</a>] with an applicative 
container [<a href="#References">7</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creating Chapter &amp; Novel Features"></a>Creating Chapter &amp; Novel 
Features</h3>
<p>This step just shows the creation of one Chapter and the only one Novel features.</p>
<pre class="code">...
CATUnicodeString ChapterStartUpType("`CAAOsmChapter`@`CAAOsmCatalogSU.CATfct`");
CATFmStartUpFacade ChapterStartUpFacade(MyCredential, ChapterStartUpType);
...
CATFmFeatureFacade oFeatFacadeOnChptrInst1 (MyCredential);
rc = ChapterStartUpFacade.<strong>InstantiateIn</strong>(MyContainerFacade,oFeatFacadeOnChptrInst1);
...
</pre>
<p><code>oFeatFacadeOnChptrInst1</code> is the feature facade bound to the first 
chapter. On the similar way, <code>oFeatFacadeOnChptrInst</code>2, <code>oFeatFacadeOnChptrInst</code>3 
are created for the second and third chapters. The valuation of the chapter&#39;s attributes 
are not detailed here.</p>
<pre class="code">...
CATUnicodeString NovelStartUpType("`CAAOsmNovel`@`CAAOsmCatalogSU.CATfct`");
CATFmStartUpFacade NovelStartUpFacade(MyCredential, NovelStartUpType);
...
CATFmFeatureFacade oFeatFacadeOnNovel(MyCredential);
rc = NovelStartUpFacade.<strong>InstantiateIn</strong>(MyContainerFacade,oFeatFacadeOnNovel);
...
</pre>
<p><code>oFeatFacadeOnNovel</code> is the feature facade bound to the Novel feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Checking no Parent Feature"></a>Checking Parent Feature Before Aggregation</h3>
<p>While the Chapters are not aggregated by a feature, the parent doesn&#39;t exist. 
Let&#39;s us explain step by step the piece of code</p>
<pre class="code">...
rc = oFeatFacadeOnChptrInst1.<strong>GetParentFeature</strong>(AttrAsFmValue);
if (SUCCEEDED(rc))
...
</pre>
<p>First we call <code>GetParentFeature</code> method of the <em>CATFmFeatureFacade</em> 
class. This method fails if you are not the owner of the catalog defining the StartUp 
where come from the feature to retrieve its parent, but this method doesn&#39;t fail 
if there is no parent. So here since we are granted to handle <code>oFeatFacadeOnChptrInst1</code>, 
we must check the result of<code> GetParentFeature</code>. This method returns a
<em>CATFmAttributeValue.</em></p>
<p>From a <em>CATFmAttributeValue</em> containing a feature there is two possibilities 
to check if there is really a parent feature.</p>
<p>First test :</p>
<pre class="code">...
   CATBaseUnknown_var Parent = AttrAsFmValue.<strong>GetFeature</strong>();
   if ( NULL_var !=  Parent ) return 1 ;
...</pre>
<p>You retrieve as a smart pointer the feature behind the <em>CATFmAttributeValue</em> 
using the <code>GetFeature</code> method. This method returns <code>NULL_var</code>.</p>
<p>Second test :</p>
<pre class="code">...
   CATFmFeatureFacade FeatFacadeOnParent(MyCredential);
   AttrAsFmValue.<strong>GetFeature</strong>(FeatFacadeOnParent);
  
   CATUnicodeString oDisplayName;
   rc = FeatFacadeOnParent.<strong>GetDisplayName</strong>(oDisplayName);
   if (SUCCEEDED(rc) ) return 1 ;
...</pre>
<p>You convert the <em>CATFmAttributeValue (</em><code>AttrAsFmValue</code>) into 
a <em>CATFmFeatureFacade</em> (<code>FeatFacadeOnParent</code>). And then you use 
a <em>CATFmFeatureFacade</em> method, the method will fail because there is no feature 
bound to the facade. If you are the owner of the catalog defining the parent feature, 
and you have used the appropriate credential to handle its facade, all method of 
the <em>CATFmFeatureFacade</em> method will be valid for the test. if you are not 
the owner, use methods which don&#39;t require a credential (<code>GetFeature</code> 
method for example).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Aggregating the Chapter Features under the Novel Feature</h3>
<p>Aggregating a feature simply involves valuating its parent feature attribute 
of type <strong>component</strong>. The &quot;<strong>CAAOsmNovel</strong>&quot; StartUp contains 
the attribute &quot;<strong>NovelChapter</strong>&quot; a list of component. It is this attribute 
which we valuate with the three chapters.</p>
<pre class="code">...
CATFmAttributeName NovelChptrAttrName(&quot;NovelChapter&quot;);
...
AttrAsFmValue.SetFeature(oFeatFacadeOnChptrInst1);
rc = <strong>oFeatFacadeOnNovel.SetValue(NovelChptrAttrName,1,AttrAsFmValue)</strong>;
...
AttrAsFmValue.SetFeature(oFeatFacadeOnChptrInst2);
rc = <strong>oFeatFacadeOnNovel.AppendValue(NovelChptrAttrName,AttrAsFmValue)</strong>;
...
AttrAsFmValue.SetFeature(oFeatFacadeOnChptrInst3);
rc = <strong>oFeatFacadeOnNovel.AppendValue(NovelChptrAttrName,AttrAsFmValue)</strong>;
...
</pre>
<p>The <code>SetValue</code>() call of the <code>CATFmFeatureFacade</code> class, 
valuates the feature attribute, to begin with. Subsequently, the <code>AppendValue</code>() 
call further appends values to the feature attribute. (The first <code>SetValue</code>, 
could be an <code>AppendValue</code> too).</p>
<p>The calls are invoked on the <strong>Novel</strong> feature (<code>oFeatFacadeOnNovel</code>, 
a <em>CATFmFeatureFacade</em> type) with inputs</p>
<ul>
	<li><code>NovelChptrAttrName</code>, a <em>CATFmAttributeName</em> type representing 
	the &quot;<strong>NovelChapter</strong>&quot;</li>
	<li><code>AttrAsFmValue</code>, a <em>CATFmAttributeValue</em> type, set to each 
	chapter feature in sequence</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Confirm aggregation"></a>Checking Parent Feature After Aggregation</h3>
<p>Now the Chapters are aggregated so the parent must exist. Let&#39;s us explain step 
by step the piece of code</p>
<pre class="code">...
rc = oFeatFacadeOnChptrInst1.<strong>GetParentFeature</strong>(AttrAsFmValue);
if (SUCCEEDED(rc))
...
</pre>
<p>First we call <code>GetParentFeature</code> method of the <em>CATFmFeatureFacade</em> 
class. For the same reason as the first test,
<a href="#Checking no Parent Feature">#before</a> , this method is successful and 
returns a <em>CATFmAttributeValue.</em></p>
<p>From a <em>CATFmAttributeValue</em> containing a feature there is two possibilities 
to check if there is really a parent feature.</p>
<p>First test :</p>
<pre class="code">...
   CATBaseUnknown_var Parent = AttrAsFmValue.<strong>GetFeature</strong>();
   if ( NULL_var ==  Parent ) return 1 ;
...</pre>
<p>You retrieve as a smart pointer the feature behind the <em>CATFmAttributeValue</em> 
using the <code>GetFeature</code> method. Now this method does not return <code>
NULL_var</code>.</p>
<p>Second test :</p>
<pre class="code">...
   CATFmFeatureFacade FeatFacadeOnParent(MyCredential);
   AttrAsFmValue.<strong>GetFeature</strong>(FeatFacadeOnParent);
  
   CATUnicodeString oDisplayName;
   rc = FeatFacadeOnParent.<strong>GetDisplayName</strong>(oDisplayName);
   
...</pre>
<p>You convert the <em>CATFmAttributeValue (</em><code>AttrAsFmValue</code>) into 
a <em>CATFmFeatureFacade</em> (<code>FeatFacadeOnParent</code>) and then you use 
a method of <em>CATFmFeatureFacade</em> .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Scan through"></a>Scanning through the Chapter Features Aggregated 
under Novel</h3>
<p>Here we check the contents of the NovelChapter attribute after the three aggregation.</p>
<pre class="code">rc = oFeatFacadeOnNovel<strong>.GetValue</strong>(NovelChptrAttrKey,AttrAsFmValue);
...</pre>
<p>The <code>GetValue</code> call of the <em>CATFmFeatureFacade</em> class retrieves 
a feature attribute value. Here we retrieve the value of the &quot;<strong>NovelChapter</strong>&quot; 
attribute as a <em>CATFmAttributeValue value (</em><code>AttrAsFmValue</code>)</p>
<pre class="code">...
for (int i=1; i&lt;=AttrAsFmValue.<strong>Size</strong>(); i++)
{
...</pre>
<p>Since &quot;<strong>NovelChapter</strong>&quot; is an attribute of type <strong>list of 
component</strong>, its value represents a list of child features aggregated under 
the &quot;<strong>CAAOsmNovel</strong>&quot; feature. So we can use the <code>Size</code> 
method of <em>CATFmAttributeValue</em> to do a loop. (this method <code>Size</code> 
returns 0 for an attribute which is not a list)</p>
<p>So for each element of the list, we find a chapter like that:</p>
<pre class="code">...
    oFmAttrValueOnCurrentChapter = AttrAsFmValue[i];

    CATFmFeatureFacade FeatFacadeOnCurrentChapter(MyCredential);
    oFmAttrValueOnCurrentChapter.<strong>GetFeature</strong>(FeatFacadeOnCurrentChapter);
		
    oAttrValueOnChapterTitle.<strong>Clear</strong>();
    rc = FeatFacadeOnCurrentChapter.<strong>GetValue</strong>(ChptrTitleAttrName,oAttrValueOnChapterTitle);
    if (SUCCEEDED(rc))
    {
	 CATUnicodeString strTitle;
	 oAttrValueOnChapterTitle.<strong>GetString</strong>(strTitle);
...
</pre>
<p>The <code>GetFeature</code>() call of the <em>CATFmAttributeValue</em> class, 
retrieves the feature associated with our attribute value as a facade (<code>FeatFacadeOnCurrentChapter)</code></p>
<p>We next retrieve the &quot;<strong>ChapterTitle</strong>&quot; attribute value of each 
aggregated &quot;<strong>CAAOsmChapter</strong>&quot; feature. The value is retrieved as a
<em>CATFmAttributeValue</em> type (<code>oAttrValueOnChapterTitle</code>).</p>
<p>The <code>GetString</code>() call of the <em>CATFmAttributeValue</em> class finally 
returns the Chapter Title as a <code>CATUnicodeString</code> type (strTitle). The 
titles of the aggregated Chapters are displayed for user to confirm if the &quot;<strong>CAAOsmNovel</strong>&quot; 
feature indeed aggregates three <strong>Chapter</strong> features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">5</a>] 
for a detailed description of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This Use Case illustrates the steps involved to aggregate a feature (child) under 
another feature (parent). It instantiates three &quot;<strong>CAAOsmChapter</strong>&quot; 
features and aggregates them under the &quot;<strong>CAAOsmNovel</strong>&quot; feature. The 
aggregation is realized by valuating the &quot;<strong>NovelChapter</strong>&quot; attribute, 
of type <strong>list of component</strong> of the &quot;<strong>CAAOsmNovel</strong>&quot; 
feature, with the &quot;<strong>CAAOsmChapter</strong>&quot; features.</p>
<p>The UC finally confirms the aggregation by listing the aggregated &quot;<strong>CAAOsmChapter</strong>&quot; 
features. Additionally it also retrieves the parent of a &quot;<strong>CAAOsmChapter</strong>&quot; 
feature and confirms it as a &quot;<strong>CAAOsmNovel</strong>&quot; feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>Understanding Feature Attributes</td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaLinkingFeatures.htm">Understanding Feature Links</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Containers</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
