<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with a Knowledge Parameter Defined as a Feature Attribute</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Working with a Knowledge Parameter Defined as a Feature Attribute</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtWorkingWithParamAsFeat
		</code>use case (UC). A Knowledge Parameter is typically useful to an end-user 
		for application in various formulas and relations. This Knowledge Parameter 
		could be associated with a feature by aggregating it under the feature, 
		by valuating its component attribute. The UC illustrates working with this 
		Knowledge Parameter, in feature context. The Technical Article &quot;<strong>Attribute 
		as a Knowledge Parameter</strong>&quot; [<a href="#References">1</a>] delves 
		into the depth of this subject.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtWorkingWithParamAsFeat Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtWorkingWithParamAsFeat Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtWorkingWithParamAsFeat</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtWorkingWithParamAsFeat 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved in integrating a knowledge parameter as a 
feature attribute of a <strong>component</strong> type. The key learnings are:</p>
<ul>
	<li>Creating a Knowledge Parameter.</li>
	<li>Aggregating this Knowledge Parameter (which is a feature) under another 
	feature by valuating its <strong>component</strong> attributes.</li>
	<li>Retrieving the Knowledge Parameter values primarily by the following two 
	methods:<ul>
		<li>The standard <code>GetValue</code>() call of the <em>CATFmFeatureFacade</em> 
		class.</li>
		<li>The <code>GetKnowledgeParameter</code>() call of the <em>CATFmFeatureFacade</em> 
		class to retrieve its Knowledge Parameter.</li>
	</ul>
	</li>
	<li>Valuating the Knowledge Parameters associated with a feature.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtWorkingWithParamAsFeat Use Case</h2>
<p>The <code>CAAFmExtWorkingWithParamAsFeat </code>is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtWorkingWithParamAsFeat Do</h3>
<p>The UC illustrates working with a feature attribute of type <strong>component</strong> 
which aggregates a Knowledge Parameter. The UC refers to the feature defined in 
the &quot;<strong>CAAFmExtParameter</strong>&quot; catalog. The feature definition is as depicted 
below:</p>
<pre class="code">feature <strong>`CAAFmExtParamAsFeatSquare`</strong>#2 #startup {
<strong>			component `CAAFmExtFill`
			component `CAAFmExtSideSize`</strong>
		}</pre>
<p>The &quot;<strong>CAAFmExtParamAsFeatSquare</strong>&quot; feature StartUp is characterized 
by two attributes </p>
<ul>
	<li><strong>CAAFmExtFill</strong>, of type <strong>component</strong>. </li>
	<li><strong>CAAFmExtSideSize</strong>, of type <strong>component</strong>.</li>
</ul>
<p>The UC execution proceeds as follows:</p>
<ul>
	<li>It instantiates the &quot;<strong>CAAFmExtParamAsFeatSquare</strong>&quot; feature.</li>
	<li>It then creates a Knowledge Parameter of type <strong>boolean</strong> and
	<strong>length</strong>.</li>
	<li>It next aggregates this Knowledge Parameter under our feature, by valuating 
	the two feature attributes of type <strong>component</strong> namely.
	<strong>CAAFmExtFill</strong> and <strong>CAAFmExtSideSize</strong>.</li>
	<li>It then illustrates the method to retrieve these Knowledge Parameter values, 
	primarily by two methods:<ul>
		<li>The <code>GetValue</code>() call of the <em>CATFmFeatureFacade</em> 
		class which represents the standard way of retrieving our feature (Knowledge 
		Parameter).</li>
		<li>The call to <code>GetKnowledgeParameter</code>() of the <em>CATFmFeatureFacade</em> 
		class, which returns the Knowledge Parameter. This is the recommended way.</li>
	</ul>
	</li>
	<li>It also illustrates the method to valuate (modify) these Knowledge Parameter 
	values.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAFmExtWorkingWithParamAsFeat<br>
</h3>
<p>To launch <code>CAAFmExtWorkingWithParamAsFeat</code>, you will need to set up 
the build time environment, then compile <code>CAAFmExtWorkingWithParamAsFeat</code> 
along with its prerequisites, set up the run time environment, and then execute 
the sample. This is fully described in the referenced article [<a href="#References">2</a>].
</p>
<p>mkrun -c &quot;<em><code>CAAFmExtWorkingWithParamAsFeature</code> Repository Server 
UserId Password SecurityCtx Environment</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>Don&#39;t forget to update the runtime view to have the <code>CAAFmExtParameter.CATfct</code> 
files.</p>
<h3><a name="Where"></a>Where to Find the CAAFmExtWorkingWithParamAsFeat Code</h3>
<p><code>CAAFmExtWorkingWithParamAsFeat </code>code is located in the <code>CAAFmExtWorkingWithParamAsFeature.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework. The path 
follows:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtWorkingWithParamAsFeature.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed. It is made of source files namely.</p>
<ul>
	<li><code>CAAFmExtWorkingWithParamAsFeat.cpp</code>, which has the UC main in 
	it.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>The <code>CAAFmExtParameter.CATfct </code>files are located in the resource graphic 
folder:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CNext\resources\graphic</code></p>
<p>The osm files generated from these StartUp catalog are provided in another folder:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\InputData</code></p>
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps of <code>CAAFmExtWorkingWithParamAsFeat </code>are:</p>
<ol>
	<li><a href="#Create know param">Creating a Knowledge Parameter</a></li>
	<li><a href="#integrating know param with a feat attr">Integrating the Knowledge 
	Parameter with a Feature Attribute</a></li>
	<li><a href="#Retrieve the know param value">Retrieving the Knowledge Parameter 
	Value Associated with a Feature Attribute</a></li>
	<li><a href="#Modify the know param value">Modifying the Knowledge Parameter 
	Value Associated with a Feature Attribute</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create know param"></a>Creating a Knowledge Parameter</h3>
<p>The first step is to create a Knowledge Parameter.</p>
<pre class="code"><strong>CATCkeGlobalFunctions::InitializeLiteralsEnvironment()</strong>;    
<strong>CATICkeParmFactory_var ParamFact = MyContFacade.GetContainer()</strong>;
</pre>
<p>To begin with, an environment for Knowledge has to be initialized. This is realized 
with a call to the global routine <code>InitializeLiteralsEnvironment</code>() of 
the <em>CATCkeGlobalFunctions</em> class.</p>
<p>The next step is to retrieve the Container as a <em>CATICkeParmFactory_var</em> 
type (ParamFact). This is accomplished with a call to <code>GetContainer</code>() 
of the <em>CATFmContainerFacade</em> class.</p>
<pre class="code">CATUnicodeString iBoolParamName(&quot;BoolParam&quot;);
CATCke::Boolean iBoolParamValue = 1; 
<strong>CATICkeParm_var spCkeParmOnBoolParam = ParamFact-&gt;CreateBoolean(iBoolParamName,iBoolParamValue)</strong>;</pre>
<p>The Knowledge Parameter of type <strong>boolean</strong> is created with a call 
to the <code>CreateBoolean</code>() routine of the <em>CATICkeParmFactory</em> Interface. 
This Interface has a dedicated routine for each primitive type. The <code>CreateLength</code>() 
routine creates the Knowledge Parameter of type <strong>length</strong>, on similar 
lines. </p>
<p>The inputs to this call are:</p>
<ul>
	<li><code>iBoolParamName</code>, a <em>CATUnicodeString</em> type, representing 
	the name of the Parameter.</li>
	<li><code>iBoolParamValue</code>, a <em>CATCke</em>::<code>Boolean</code> type 
	which represents the parameter value. In this case it is a boolean value, True.</li>
</ul>
<p>The return of this call is the Knowledge Parameter, <code>spCkeParmOnBoolParam</code>, 
a <em>CATICkeParm_var</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="integrating know param with a feat attr"></a>Integrating the Knowledge 
Parameter with a Feature Attribute</h3>
<p>This Knowledge Parameter now has to be associated with the Feature Attribute.</p>
<pre class="code">
rc = spCkeParmOnBoolParam-&gt;<strong>QueryInterface</strong>(IID_CATBaseUnknown, (void**)&amp; pKnowlegeAsCBU);
...
TheAttributeValue.<strong>SetFeature</strong>(pKnowlegeAsCBU);
rc = FeatFacadeOnParamAsFeatSquare.<strong>SetValue</strong>(AttrNameFill,TheAttributeValue);</pre>
<p>Firstly, we retrieve a <em>CATBaseUnknown</em>* type (<code>pKnowledgeAsCBU</code>) 
on the Knowledge Parameter. This is accomplished with a call to <code>QueryInterface</code> 
on our Knowledge Parameter, retrieved in the previous step.</p>
<p>The call to <code>SetFeature</code>() of the <em>CATFmAttributeValue</em> class 
sets the Parameter feature to the Attribute Value.</p>
<p>Finally the call to <code>SetValue</code>() of the <em>CATFmFeatureFacade</em> 
class sets this value to our feature attribute, &quot;<strong>CAAFmExtFill</strong>&quot;</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the know param value"></a>Retrieving the Knowledge Parameter 
Value Associated with a Feature Attribute</h3>
<p>The Knowledge Parameter value set to a feature attribute can be retrieved in 
two different ways. The first is the standard method by invoking the <code>GetValue</code>() 
routine of the <em>CATFmFeatureFacade</em> class.</p>
<pre class="code">
rc = <strong>F</strong>eatFacadeOnParamAsFeatSquare.<strong>GetValue</strong>(AttrNameFill,TheAttributeValue);
...
<strong>spCkeParmOnFeat = TheAttributeValue.GetFeature()</strong>;  
</pre>
<p>The call to <code>GetValue</code>() of the <em>CATFmFeatureFacade</em> class 
retrieves the attribute value as a <em>CATFmAttributeValue</em> type.</p>
<p>The call to <code>GetFeature</code>() of the <em>CATFmAttributeValue</em> class 
retrieves our feature, in this case the Knowledge Parameter as a <em>CATICkeParm_var</em> 
type (<code>spCkeParmOnFeat</code>).</p>
<p>Alternatively, the Knowledge Parameter could also be retrieved as seen below.</p>
<pre class="code">
rc = FeatFacadeOnParamAsFeatSquare.<strong>GetKnowledgeParameter</strong>(AttrNameSideSize,IID_CATICkeParm,(void**)&amp; piCkeParmOnAttrValue);
</pre>
<p>The <code>GetKnowledgeParameter</code>() call of the <em>CATFmFeatureFacade</em> 
class retrieves the Knowledge Parameter, as a <em>CATICkeParm</em>* type (<code>piCkeParmOnAttrValue</code>). 
The inputs to the API are:</p>
<ul>
	<li><strong>AttrNameSideSize</strong>, a <em>CATFmAttributeName</em> type which 
	represents the &quot;<strong>CAAFmExtSideSize</strong>&quot; attribute.</li>
	<li><em>IID_CATICkeParm</em>, an <code>IID</code> type, which represents the 
	an Interface type. The Knowledge Parameter is retrieved as this type.</li>
	<li><code>piCkeParmOnAttrValue</code>, a <em>CATICkeParm</em>* type, representing 
	the retrieved Knowledge Parameter.</li>
</ul>
<p>The final step is to simply retrieve the value of this Knowledge Parameter.
</p>
<pre class="code">
<strong>CATICkeInst_var spCkeInstonFeat=  spCkeParmOnFeat-&gt;Value()</strong>;
...     
<strong>CATCke::Boolean oBoolVal = spCkeInstonFeat-&gt;AsBoolean()</strong>; </pre>
<p>This is realized with a call to <code>Value</code>() of the <em>CATICkeParm</em> 
Interface, reprsenting the Knowledge Parameter. It returns the value as a <em>CATICkeInst_var</em> 
type (spCkeInstOnFeat).</p>
<p>Next, based on the primitive type you are working on, you have several calls 
in the <em>CATICkeInst</em> class, dedicated to each primitive type. In the current 
case, we invoke the <code>AsBoolean</code>() function, which returns the value as 
a <em>CATCke</em>::<code>Boolean</code> type (<code>oBoolVal</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Modify the know param value"></a>Modifying the Knowledge Parameter 
Value Associated with a Feature Attribute</h3>
<p>The knowledge Parameter is simply set with a new value (modified) as seen below.
</p>
<pre class="code">
<strong>piCkeParmOnAttrValue-&gt;Valuate(15.00)</strong>;	</pre>
<p>The Valuate() call of the <em>CATICkeParm</em> class does this valuation. This 
API is overloaded for all different types.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to integrate a Knowledge Parameter inside 
a feature attribute. The user is introduced to the steps involved while working 
with such an attribute and the process to set and retrieve its value. Most importantly, 
the user is introduced to the <code>GetKnowledgeParameter</code>() call of the
<em>CATFmFeatureFacade</em> class and to the <em>CATICkeParm</em> Interface, primarily 
responsible for working with values associated with a Knowledge Parameter.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaUnderstandingKnowledge.htm">Attribute as a Knowledge 
		Parameter</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmExtTaFeatureAttribute.htm">Understanding Feature Attributes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Aug 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
