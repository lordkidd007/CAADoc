<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Defining Feature Extensions</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Defining Feature Extensions</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtDefineExtensions</code> use 
		case. This use case explains the steps involved to define a feature extension 
		inside a feature catalog. A prerequisite is an understanding of the basic 
		feature modeler concepts [<a href="#References">1</a>], Feature Extensions 
		[<a href="#References">2</a>], Modeling StartUps [<a href="#References">3</a>] 
		and Creating StartUp Catalogs [<a href="#References">4</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtDefineExtensions Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtDefineExtensions Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtDefineExtensions</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtDefineExtensions 
				OSM</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved to define a feature extension and to further 
generate a Catalog. The key learning include</p>
<ul>
	<li>the relevance of the <code>OSM</code> file, which has the feature extension 
	definition in it</li>
	<li>Working with the <code>CATfctEditorAssistant</code> tool to generate a feature 
	catalog</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtDefineExtensions Use Case</h2>
<p><code>CAAFmExtDefineExtensions</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="What"></a>What Does CAAFmExtDefineExtensions Do</h3>
<p>The goal of <code>CAAFmExtDefineExtensions</code> is to illustrate creating feature 
extensions. This use case will define two new catalogs, each one containing a different 
set of feature extensions. Here is an image of the contents of the first extensions 
catalog:</p>
<p>The UC creates catalogs which consists of the feature extension definitions.</p>
<p>The Catalog &quot;<code>CAAOsmExt1Catalog</code>&quot; has the definitions of two feature 
extensions namely. &quot;<code>CAAOsmHistoricalNovel</code>&quot; and &quot;<code>CAAOsmBiographicalNovel</code>&quot;, 
as depicted in [<a href="#Fig.1">Fig.1</a>]</p>
<table>
	<caption><a name="Fig.1"></a>Fig.1 CAAOsmExt1Catalog.CATfct Catalog</caption>
	<tr>
		<td>
		<img alt="CAAOsmExt1Catalog.CATfct Catalog" src="images/CAAOsmExtensions1Cat.gif" width="283" height="130"></td>
	</tr>
</table>
<p>The &quot;<code>CAAOsmHistoricalNovel</code>&quot; is characterized by an attribute &quot;Epoch&quot; 
of type string, which represents the period that the novel is based on. </p>
<p>The &quot;<code>CAAOsmBiographicalNovel</code>&quot; feature extensions inherits from &quot;<code>CAAOsmHistoricalNovel</code>&quot;. 
It is characterized by two attributes namely.</p>
<ul>
	<li>&quot;Epoch&quot;, of type string, an attribute inherited from the parent feature.</li>
	<li>&quot;Domain&quot;, of type string, explicitly added by the derived feature extension. 
	It represents the domain that the biography is based on</li>
</ul>
<p>The contents of the &quot;<code>CAAOsmExt2Catalog</code>&quot; Catalog are depicted below 
[<a href="#Fig.2">Fig.2</a>]</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2 CAAOsmExt2Catalog.CATfct Catalog</caption>
	<tr>
		<td>
		<img alt="CAAOsmExt2Catalog.CATfct Catalog" src="images/CAAOsmExtensions2Cat.gif" width="255" height="59"></td>
	</tr>
</table>
<p>The &quot;CAAOsmChildrensNovel&quot; is a feature extension characterized by the attribute 
&quot;AgeGroup&quot; of type int. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtDefineExtensions</h3>
<p>To launch CAAFmExtDefineExtensions, you will need to set up the run time environment, 
to begin with. The steps that follow are detailed in the UC &quot;Create StartUp Catalogs&quot; 
[<a href="#References">4</a>].</p>
<pre class="code">$ mkrun -c cmd
$ cd <em>your_workspace_root</em>
$ # Make sure that no previous catalog exists in the run-time view, including in the concatenation
$ rm <em>OS_directory</em>/resources/graphic/CAAOsmExt1Catalog.CATfct
</pre>
<p>We launch a child console having set the mkrun environment with the command &quot;mkrun 
-c cmd&quot; (cmd is a Windows console command interpreter, the equivalent for which 
on Unix is &quot;sh&quot;). </p>
<p>We next switch to the workspace directory and remove all the catalog (CATfct) 
files, we intend to create ahead, which might exist in the WS RTV or in one of the 
WS concatenations. In the present case, we run the &quot;rm&quot; command to delete <code>
CAAOsmExt1Catalog.CATFct</code>.</p>
<pre class="code">$ # Create empty catalog and the OSM file corresponding to it
$ CATfctEditorAssistant <strong>-create-new-catalog -catalog-name </strong>CAAOsmExt1Catalog.CATfct<strong> -with-client-id</strong> CAAOsmClientId1 <strong>-into-directory </strong>$PWD/<em>OS_directory</em>/resources/graphic</pre>
<p>We next launch the CATfctEditorAssistant executable, which is available in the 
CAA Installation RTV [<a href="#References">5</a>]. We initially create a new empty 
catalog and the OSM corresponding to it, in the directory specified by the -into-directory 
flag.</p>
<p>The clientID is a key input to the process generating a new catalog. Hereafter, 
the client will be authorized to access a catalog only on authentication of the 
clientID input.</p>
<pre class="code">$ # Upgrade the empty catalog with the InputData osm. Note that the upgraded catalog will be output in the current directory
$ CATfctEditorAssistant -<strong>update-catalog</strong> CAAOsmExt1Catalog.CATfct -<strong>with-client-id</strong> CAAOsmClientId1 <strong>-with-osm</strong> $PWD <strong>-into-directory</strong> $PWD</pre>
<p>We proceed to upgrade the catalog with an updated OSM file as input. The OSM 
file, output by the previous step is updated with all feature extensions, . The 
empty Catalog is referred to from the WS RTV, while the upgraded Catalog (<code>CAAOsmExt1Catalog.CATfct</code>) 
is generated in the directory you specify by the -into-directory flag.</p>
<p>The upgradation of the Catalog returns SUCCESS, only on authentication of the 
clientID input.</p>
<pre class="code">$ # Remove the empty catalog and osm
$ rm <em>OS_directory</em>/resources/graphic/CAAOsmExt1Catalog.CATfct empty.osm
$ exit # the mkrun shell</pre>
<p>Finally we remove the empty OSM and Catalog files, which are no longer relevant.</p>
<p><strong>Notes</strong>: </p>
<p><code>CATfctEditorAssistant</code> treats the Catalog arguments in distinct ways 
listed below:</p>
<ul>
	<li>On input, the catalog argument is stripped of its directory and looked up 
	in the run-time view. At your workspace level, it is the <code><em>workspace_root</em>/<em>OS_directory</em>/resources/graphic</code> 
	directory. </li>
	<li>On output, the catalog is written at the location specified by the catalog 
	argument</li>
</ul>
<p>The place to store catalogs in your workspace is Fram<code>ework/CNext/resources/graphic</code>. 
Any catalog found in this directory, inside the WS folder, will be automatically 
copied to the run-time view <code><em>workspace_root</em>/<em>OS_directory</em>/resources/graphic
</code>by the mkrtv command. </p>
<p>The procedure above will create the extension catalog <code>CAAOsmExt1Catalog.CATfct</code>. 
To create the extension catalog <code>CAAOsmExt2Catalog.CATfct</code>, replay the 
same procedure by replacing <code>CAAOsmClientId1</code>, <code>CAAOsmExt1Catalog.osm</code> 
and <code>CAAOsmExt1Catalog.CATfct</code> with <code>CAAOsmClientId2</code>,
<code>CAAOsmExt2Catalog.osm</code> and <code>CAAOsmExt2Catalog.CATfct</code> respectively.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtDefineExtensions OSM</h3>
<p>Both OSM files corresponding to the two extension catalogs are located in the 
InputData directory of the CAAFeatureModelerExt.edu framework:</p>
<p><code><em>InstallRootFolder</em>/CAAFeatureModelerExt.edu/InputData</code></p>
<p>where <em><code>InstallRootFolder</code></em> [<a href="#References">5</a>] 
is the root folder of your API installation. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Two extensions catalogs are created in this use case. There are 3 logical steps 
in <code>CAAFmExtDefineExtensions </code>:</p>
<ol>
	<li><a href="#Defining StartUp (1)">Defining StartUp (1)</a></li>
	<li><a href="#Defining StartUp (2)">Defining StartUp (2)</a></li>
	<li><a href="#Generating the Catalog">Generating the Catalog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Defining StartUp (1)"></a>Defining StartUp (1)</h3>
<p>Each extension Catalog has an associated OSM file. The OSM file has the feature 
extensions defined within it.</p>
<p>The contents of the <code>CAAOsmExt1Catalog.osm</code> file, associated with 
the &quot;<code>CAAOsmExt1Catalog</code>&quot;, are depicted below. It defines the &quot;<code>CAAOsmHistoricalNovel</code>&quot; 
and &quot;<code>CAAOsmBiographicalNovel</code>&quot; feature extensions.</p>
<pre class="code">document `CAAOsmExt1Catalog.CATfct` {
        container RootCont #root {
                feature <strong>CAAOsmHistoricalNovel</strong> #startup #<strong>extension</strong> {
                        <strong>#creation::parameter=</strong>metadata_NovelExtn
                        string Epoch
                        Epoch=&quot;Middle Ages&quot; 
                }
                feature <strong>CAAOsmBiographicalNovel</strong> CAAOsmHistoricalNovel #startup #<strong>extension</strong> {
                        string Domain
                        Domain=&quot;Music&quot; 
                } 
        }
...</pre>
<p>The first point you might notice is the <strong><code>#extension</code></strong> 
facet, which specifies that the StartUp is an Extension StartUp and not a regular 
one. The other point is that a StartUp can be derived from another one, as in this 
case of <code>CAAOsmBiographicalNovel</code> inherits from <code>CAAOsmHistoricalNovel</code>.
</p>
<p>Also, the &quot;<code>CAAOsmHistoricalNovel</code>&quot; feature is associated with an 
attribute &quot;Epoch&quot; of type string, default valuated to &quot;Middle Ages&quot;. </p>
<p>While <code>CAAOsmBiographicalNovel</code>&quot; feature is associated with an attribute 
&quot;Domain&quot; of type string, default valuated to &quot;Music&quot;.</p>
<p>Then, note the metadata declaration (<strong>#creation::parameter) </strong>for<strong>
</strong><code>CAAOsmHistoricalNovel. CAAOsmBiographicalNovel</code> deriving from
<code>CAAOsmHistoricalNovel</code> inherits of the same metadata:</p>
<pre class="code">    metadata <strong>metadata_NovelExtn</strong> {
      `ContType` = &quot;CAAFmExtApplication1&quot;
      `Container` = &quot;CAAFmExtApplication1&quot;
      `Extends` = [&quot;CAAOsmNovel&quot;]
      `IsLocal` = true
    }
} // OSM end
...</pre>
<p>The &quot;<code>CAAOsmHistoricalNovel</code>&quot; and <code>CAAOsmBiographicalNovel</code> 
can be thus a local feature extension to the &quot;<code>CAAOsmNovel</code>&quot; feature, 
instantiated inside the Applicative Container &quot;CAAFmExtApplication1&quot;. </p>
<p><strong>Notes:</strong></p>
<ul>
	<li>The metadata MUST contains the 4 lines (`ContType` /`Container` /`Extends` 
	/`IsLocal` )</li>
	<li>the `` can be omitted when you create/upgrade the osm file</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Defining StartUp (2)"></a>Defining StartUp (2)</h3>
<p>The contents of the <code>CAAOsmExt2Catalog.osm</code> file, associated with 
the &quot;<code>CAAOsmExt2Catalog</code>&quot; are depicted below. This defines the &quot;<code>CAAOsmChildrensNovel</code>&quot; 
extension.</p>
<pre class="code">document `CAAOsmExt1Catalog.CATfct` {
        container RootCont #root {
                feature <strong>CAAOsmChildrensNovel</strong> #startup #extension {
                       <strong> #creation::parameter</strong>=metadata_ChildrensNovelExtn
                        int AgeGroup
                        AgeGroup=12
                }
        } 
}</pre>
<p>The &quot;<code>CAAOsmChildrensNovel</code>&quot; is defined as a feature extension, characterized 
by an attribute &quot;AgeGroup&quot; of type Int, default valuated to 12.</p>
<p>The metadata declared by <strong>#creation::parameter</strong>= facet is as follows:</p>
<pre class="code">    metadata <strong>metadata_ChildrensNovelExtn</strong> {
      `ContType` = &quot;CAAFmExtApplication2&quot;
      `Container` = &quot;CAAFmExtApplication2&quot;
      `Extends` = [&quot;CAAOsmNovel&quot;]
      `IsLocal` = true
    }
} // OSM end
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Generating the Catalog"></a>Generating the Catalog</h3>
<p>Now that we have created the OSM files for the Catalog, the next step is to generate 
the Catalog. The <code>CATfctEditorAssistant</code> tool, available in the CAA Install 
RTV, generates a new Catalog. The previous section which dealt with &quot;How to Launch 
the UC&quot; details this step further.</p>
<h3><a name="Creating the CATRsc file"></a><a name="InShort"></a>In Short</h3>
<p>The UC details the steps involved to define a Feature Extension and to subsequently 
generate a Catalog. In the process, the user learns the relevance of</p>
<ul>
	<li>the <code>OSM</code> file, editable by an end-user which consists of the 
	feature extension definitions</li>
	<li>the <code>CATfctEditorAssistant</code> tool, to generate a feature catalog</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAOsmTaOverview.htm">Feature Modeler Concepts</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaFeatureExtension.htm">Understanding Feature Extension</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmTaModelingStartUps.htm">Modeling StartUps</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUp in Catalogs</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Feb 2005]</td>
		<td>Document updated for new interface</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
