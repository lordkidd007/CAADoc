<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Getting Started with Feature Modeler APIs</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Getting Started with Feature Modeler APIs</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtIntroFeatModelAPI</code> use 
		case. The UC is an introduction to the Feature Modeler <strong>Facade</strong>,
		<strong>Credentials</strong> and <strong>Attribute</strong> classes, their 
		most commonly invokes APIs and their inter relationship. The <strong>Facade</strong> 
		and the <strong>Credentials</strong> classes are key to realizing a secured 
		access to the feature model. The UC primarily involves creating Credentials, 
		instantiating a feature and subsequently setting and retrieving its attribute 
		values. A prior understanding of the secured feature model access mechanism 
		will help [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtIntroFeatModelAPI Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtIntroFeatModel API Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtIntroFeatModel API</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtIntroFeatModel API 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This UC gives an end user:</p>
<ul>
	<li>An introduction to the most fundamental feature facade classes.</li>
	<li>The relations between these classes.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtIntroFeatModelAPI Use Case</h2>
<p>The <code>CAAFmExtIntroFeatModelAPI</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtIntroFeatModelAPI Do</h3>
<p>The UC is primarily to introduce user to the fundamental Feature Modeler classes, 
their key APIs and the inter-relationship between these. The execution proceeds 
along the steps listed below:</p>
<ul>
	<li>It creates a PLM Technological Representation with an Applicativ container.</li>
	<li>lt next creates a <strong>Credentials</strong> object, authorizing access 
	to the &quot;<strong>CAAOsmCatalogSU</strong>&quot; Catalog.</li>
	<li>Instantiates a facade over the &quot;<strong>CAAOsmNovel</strong>&quot; StartUp.</li>
	<li>Instantiates the &quot;<strong>CAAOsmNovel</strong>&quot; feature, returned as a
	<strong>Feature Facade</strong>.</li>
	<li>Valuates the <strong>attribute</strong> &quot;<strong>Author</strong>&quot; of the 
	Novel.</li>
	<li>Retrieves the <strong>attribute</strong> &quot;<strong>Author</strong>&quot; value 
	of the Novel.</li>
	<li>Retrieves the Novel feature as a <em>CAAIFmExtNovel</em> type.</li>
	<li>Valuates the <strong>attribute</strong> &quot;<strong>Title</strong>&quot; of the
	<strong>Novel</strong>, using the <strong>Interface</strong> service.</li>
	<li>Retrieves the <strong>attribute</strong> &quot;<strong>Title</strong>&quot; value 
	of the <strong>Novel</strong>, using the <strong>Interface</strong> service.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAFmExtIntroFeatModelAPI</h3>
<p>To launch <code>CAAFmExtIntroFeatModelAPI</code>, you will need to set up the 
build time environment, then compile <code>CAAFmExtIntroFeatModelAPI</code> along 
with its prerequisites, set up the run time environment, and then execute the sample. 
This is fully described in the referenced article [<a href="#References">2</a>].
</p>
<p>mkrun -c &quot;<em><code>CAAFmExtFeatModelerAPIIntroUse</code> Repository Server UserId 
Password SecurityCtx Environment</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtIntroFeatModelAPI Code</h3>
<p><code>CAAFmExtIntroFeatModelAPI</code> code is located in the <code>CAAFmExtFeatModelerAPIIntroUse.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtFeatModelerAPIIntroUse.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the root 
folder of your API installation. It is made of a unique source file named <code>
CAAFmExtFeatModelerAPIIntroUse.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps of <code>CAAFmExtIntroFeatModelAPI</code> are:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create credentials">Creating the Credentials (CATFmCredentials)</a></li>
	<li><a href="#Instantiate SU">Instantiating a StartUp (CATFmStartUpFacade, CATFmFeatureFacade)</a></li>
	<li><a href="#Work with feat attr">Working with Feature Attributes (CATFmAttributeName, 
	CATFmAttributeValue)</a><ol>
		<li><a href="#Set value to a feat attr">Set a Value to a Feature Attribute
		</a></li>
		<li><a href="#Retrieve value of a feat attr">Retrieve the Value of a Feature 
		Attribute</a></li>
	</ol>
	</li>
	<li><a href="#Work with feat Interface">Working with a Feature Interface</a><ol>
		<li><a href="#Retrieve the feat Interface">Retrieve a Feature Interface 
		(QueryInterfaceOnFeature)</a></li>
		<li><a href="#Set value to feat attr,using interface service">Set a Value 
		to a Feature Attribute, using an Interface Service</a></li>
		<li><a href="#Get value to feat attr,using interface service">Get a Value 
		of a Feature Attribute, using an Interface Service</a></li>
	</ol>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">3</a>]. The Use Case creates a new PLM Technological Representation 
a subject discussed in the UC [<a href="#References">4</a>] with an applicative 
container.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create credentials"></a>Creating the Credentials (CATFmCredentials)</h3>
<p><strong>Credentials</strong>, are essentially required to work with a feature 
(instantiation, introspection). This concept is dealt in depth, in the Technical 
Article [<a href="#References">5</a>].</p>
<pre class="code"><strong>CATFmCredentials</strong> MyCredential;
CATUnicodeString <strong>InfraId</strong>(&quot;CATFmFeatureModelerID&quot;);
CATUnicodeString <strong>partnerId</strong>(&quot;CAAFmExtFeatureModeler&quot;);
rc = MyCredential.<strong>RegisterAsApplicationBasedOn</strong>(InfraId,partnerId)

CATUnicodeString <strong>clientId</strong>(&quot;CAAOsmClientId&quot;);
CATUnicodeString <strong>iCatalogName</strong>(&quot;CAAOsmCatalogSU&quot;);
rc = MyCredential.<strong>RegisterAsCatalogOwner</strong>(iCatalogName,clientId);
...			
</pre>
<p>A <strong>Credentials</strong> object is represented by the <em>CATFmCredentials</em> 
class, in our applications. It is instantiated to begin with, and we next append 
it with the credentials.</p>
<p>The method <code>RegisterAsApplicationBasedOn()</code> of the <em>CATFmCredentials</em> 
class, appends it with the credentials which authorizes working with an Applicative 
Container, whose the access right are managed by an infrastructure exposed by Feature 
Modeler (<code>CATFmFeatureModelerID</code>). The second argument is for licensing 
purpose. It represents your PartnerId, the one of your PID if you are Partner), 
or a string representing your society if you are customer. In all the CAA use cases 
of CAAFmFeatureModeler.edu this string will be &quot;CAAFmExtFeatureModeler&quot;.</p>
<p>The method <code>RegisterAsCatalogOwner()</code> of the same class, appends it 
with the credentials to work with a Catalog.</p>
<p>Working with Credentials, is further studied in the UC [<a href="#References">6</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Instantiate SU"></a>Instantiating a StartUp (CATFmStartUpFacade, CATFmFeatureFacade)</h3>
<p>We now create a feature. It is instantiated from its StartUp.</p>
<pre class="code">CATUnicodeString NovelStartUpType(&quot;`CAAOsmNovel`@`CAAOsmCatalogSU.CATfct`&quot;);
<strong>CATFmStartUpFacade NovelStartUpFacade(MyCredential,NovelStartUpType)</strong>;

<strong>CATFmFeatureFacade</strong> FeatFacadeOnNovelFeat(MyCredential);
rc = <strong>NovelStartUpFacade.InstantiateIn</strong>(ContFacade,FeatFacadeOnNovelFeat);</pre>
<p>A <strong>StartUp</strong> is handled using a <em>CATFmStartUpFacade</em> type 
(<code>NovelStartUpFacade</code>), in our application. The call to <code>InstantiateIn()</code> 
of the <em>CATFmStartUpFacade</em> class, instantiates the StartUp and returns the 
resulting feature facade, a <em>CATFmFeatureFacade</em> type (<code>FeatFacadeOnNovelFeat</code>). 
Since a feature exists inside a Container, the <strong>Container Facade</strong> 
(<code>ContFacade</code>) is an input for the Instantiation call.</p>
<p>The UC[] delves further into the topic of instantiation features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Work with feat attr"></a>Working with Feature Attributes (CATFmAttributeName, 
CATFmAttributeValue)</h3>
<p>A feature is characterized by attributes [<a href="#References">9</a>]. An application 
valuates a feature attribute and retrieves it, as and when required.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Set value to a feat attr"></a>Set a Value to a Feature Attribute</h4>
<p>An Attribute Value is represented in the code by its <em>CATFmAttributeValue</em> 
equivalent.</p>
<pre class="code"><strong>CATFmAttributeName AuthorAttrName(&quot;Author&quot;)</strong>;

CATFmAttributeValue AuthorAttrValue;
CATUnicodeString strAuthor(&quot;William Shakespeare&quot;);
<strong>AuthorAttrValue.SetString(strAuthor)</strong>;

rc = <strong>FeatFacadeOnNovelFeat.SetValue</strong>(AuthorAttrName,AuthorAttrValue);
</pre>
<p>The <code>SetValue()</code> call of the <em>CATFmFeatureFacade</em> valuates 
an attribute. The attribute itself is identified by its name, represented by the
<em>CATFmAttributeName</em> class type. Working with feature attributes is discussed 
in depth in the UC[<a href="#References">10</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Retrieve value of a feat attr"></a>Retrieve the Value of a Feature 
Attribute</h4>
<p>We normally retrieve a feature attribute value.</p>
<pre class="code">CATFmAttributeValue RetrievedAuthorAsAttrValue;
rc = <strong>FeatFacadeOnNovelFeat.GetValue</strong>(AuthorAttrName,RetrievedAuthorAsAttrValue);
if (rc != S_OK) return 1; 
 
CATUnicodeString strAuthorRetrieved;
rc = <strong>RetrievedAuthorAsAttrValue.GetString</strong>(strAuthorRetrieved);</pre>
<p>The <code>GetValue()</code> call of the <em>CATFmFeatureFacade</em> class, retrieves 
an attribute value. The value is retrieved as a <em>CATFmAttributeValue</em> type 
(<code>RetrievedAuthorAsAttrValue</code>). The real attribute value is then extracted 
by the <code>GetString()</code> call of the <em>CATFmAttributeValue</em> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Work with feat Interface"></a>Working with a Feature Interface</h3>
<p>As we saw earlier, a Feature is handled using a Facade. Alternatively, a feature 
may also be handled by <strong>Interfaces</strong> which it implements, as illustrated 
by the steps that follow.</p>
<h4><a name="Retrieve the feat Interface"></a>Retrieving a Feature Interface (QueryInterfaceOnFeature)</h4>
<p>Our feature implements the <em>CAAIFmExtNovel</em> type, which we retrieve in 
the current step.</p>
<pre class="code">CAAIFmExtNovel * piFmExtNovelOnNovel = NULL ;
rc = <strong>FeatFacadeOnNovelFeat.QueryInterfaceOnFeature(IID_CAAIFmExtNovel ,(void**)&amp;piFmExtNovelOnNovel)</strong>;</pre>
<p>The call to <code>QueryInterfaceOnFeature()</code> of the <em>CATFmFeatureFacade</em> 
class retrieves an Interface pointer on the underlying feature. As you might have 
noticed this call, resembles in form to our <code>QueryInterface()</code> call.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Set value to feat attr,using interface service"></a>Set a Value to 
a Feature Attribute, using an Interface Service</h4>
<p>We set a <strong>Title</strong> to our <strong>Novel</strong>.</p>
<pre class="code">CATUnicodeString Title(&quot;Julius Caesar&quot;);
rc = <strong>piFmExtNovelOnNovel-&gt;SetTitle(Title)</strong>;</pre>
<p>The <code>SetTitle()</code> call of the <em>CAAIFmExtNovel</em> class, retrieves 
the Novel Title, as a <em>CATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Get value to feat attr,using interface service"></a>Retrieve the Value 
of a Feature Attribute, using an Interface Service</h4>
<p>We retrieve the <strong>Title</strong> of our <strong>Novel</strong>.</p>
<pre class="code">CATUnicodeString TitleRetrieved;
rc = <strong>piFmExtNovelOnNovel-&gt;GetTitle(&amp;TitleRetrieved)</strong>;</pre>
<p>The <code>GetTitle()</code> call of the <em>CAAIFmExtNovel</em> class, retrieves 
the Novel Title, as a <em>CATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">3</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This UC introduces the Feature Modeler <strong>Facade</strong>, <strong>Credentials</strong> 
and <strong>Attribute</strong> classes and also depicts their inter-relation. It 
further invokes the most commonly used APIs of these classes.</p>
<p>The UC realizes this by creating a <strong>Credentials</strong> object, which 
authorizes access to the &quot;<strong>CAAOsmCatalogSU</strong>&quot; catalog. It instantiates 
the StartUp &quot;<strong>CAAOsmNovel</strong>&quot;, using an instance of a <em>CATFmStartUpFacade</em> 
class. The feature occurs inside a container, represented as a <em>CATFmContainerFacade</em> 
type in user application. The instantiated feature is retrieved as a <em>CATFmFeatureFacade</em> 
type.</p>
<p>The UC then delves into valuating a feature attribute (&quot;<strong>Author</strong>&quot; 
of the Novel) and retrieving its value, using the <em>CATFmFeatureFacade</em> service. 
An attribute value is represented by the <em>CATFmAttributeValue</em> class type 
in our code.</p>
<p>Finally, the Use Case retrieves an Interface handler (<em>CAAIFmExtNovel</em>) 
on our Novel feature. Using the Interface service, it sets and later retrieves the 
attribute &quot;<strong>Title</strong>&quot; of the Novel.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAFmExtUcWorkingWithCredentials.htm">Working with Credentials</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtTaApplicativeContainer.htm">Understanding Applicative 
		Container</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Container</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAFmExtTaFeatureAttribute.htm">Understanding Feature Attribute</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td><a href="CAAFmExtUcSimpleAttr.htm">Accessing Feature Attributes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Jun 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
