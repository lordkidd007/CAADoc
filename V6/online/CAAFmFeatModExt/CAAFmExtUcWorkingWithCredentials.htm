<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with Credentials</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Working with Credentials</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtWorkingWithCredentials</code> 
		use case. It illustrates working with the Credentials object. This involves 
		an understanding of the privileges/restrictions of one working with features 
		in varying roles (credentials). An essential prerequisite to fully understand 
		the current UC is a strong grasp of the Credentials concept, a subject dealt 
		with in the TA &quot;<strong>Understanding Credentials</strong>&quot; [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtWorkingWithCredentials Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtWorkingWithCredentials Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtWorkingWithCredentials</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtWorkingWithCredentials 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The key learning include</p>
<ul>
	<li>Access privileges offered by &quot;<strong>Ownership Credentials</strong>&quot; associated 
	with Feature Modeler entities namely. feature, startup, and container</li>
	<li>Typical characteristics of a Credentials object</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtWorkingWithCredentials Use Case</h2>
<p><code>CAAFmExtWorkingWithCredentials</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtWorkingWithCredentials Do</h3>
<p>The UC is based on the feature model defined below [<a href="#Fig.1">Fig. 1</a>]</p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Feature Model for UC Execution</caption>
	<tr>
		<td>
		<img alt="Feature Model for UC Execution" src="images/CAAFmExtWorkingWithCredentials_Fig1.gif" width="539" height="273"></td>
	</tr>
</table>
<ul>
	<li>The &quot;CAAFmExtBaseCatalogForCredential.CATfct&quot; catalog (referred hereafter 
	as the <strong>Base</strong> catalog) defining
	<ul>
		<li>The &quot;CAAFmExtLibBook&quot; base feature (referred hereafter as &quot;Book&quot;)</li>
		<li>The &quot;CAAFmExtLibrary&quot; feature, the parent to the Book feature. (i.e: 
		The Library aggregates the books within)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtRefCatalogForCredential.CATfct&quot; catalog (referred hereafter 
	as the <strong>Reference</strong> catalog) defining<ul>
		<li>The &quot;CAAFmExtLibBookPublisher&quot; feature, &quot;pointed to&quot; by the Book feature 
		(referred hereafter as &quot;Publisher&quot;)</li>
		<li>The &quot;CAAFmExtLibBookReader&quot; feature, &quot;pointing to&quot; the Book feature 
		(referred hereafter as &quot;Reader&quot;)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtExtnCatalogForCredential.CATfct&quot; catalog (referred hereafter 
	as the <strong>Extension</strong> catalog) defines
	<ul>
		<li>The &quot;CAAFmExtLibraryHistoricalNovel&quot; feature, an extension to the base 
		(book) feature (referred hereafter as &quot;HistoricalNovel&quot;)</li>
	</ul>
	</li>
	<li>The &quot;CAAFmExtCatalogForCredential.CATfct&quot; catalog defines
	<ul>
		<li>The &quot;CAAFmExtCompany&quot; feature, a CAA Inheritable feature, from which 
		we derive the CAAFmExtLibBookPublisher feature</li>
	</ul>
	</li>
</ul>
<p>The UC execution proceeds as listed below:</p>
<ul>
	<li>Create a Credentials object, exclusively for the Base, Extension and the 
	Referenced/Referencing Catalog</li>
	<li>Create an all-inclusive credentials object. This will include the credentials 
	to work with all catalogs and also the Applicative Container</li>
	<li>Instantiate the features and link them, as depicted in [<a href="#Fig.1">Fig.1</a>] 
	above</li>
	<li>Illustrates working as an owner of the Base catalog (only)
	<ul>
		<li>Succeeds in introspecting the Book feature</li>
		<li>Succeeds in retrieving the feature referenced (Publisher) and the feature 
		extension (HistoricalNovel) to the Book feature</li>
		<li>Success in retrieving the features pointing to (Reader/Library) the 
		Book feature</li>
		<li>Succeeds in limited introspection of the HistoricalNovel feature, thanks 
		to the services exposed by the Interface it implements</li>
		<li>Fails in introspecting the referenced (Publisher) and the extension 
		features (HistoricalNovel)</li>
	</ul>
	</li>
	<li>Succeeds in introspecting the features retrieved from Book, using a feature 
	facade with appropriate credentials</li>
	<li>Failure to introspect a parent feature (Company) with credentials of the 
	child (Publisher)</li>
	<li>Working with Book feature without actually owning the Base catalog
	<ul>
		<li>Create a facade over the base feature, but associated with credentials 
		of the Extension catalog</li>
		<li>Succeeds in retrieving the feature extension (historicalNovel) to the 
		Book feature</li>
		<li>Creates a facade over the base feature, but associated with credentials 
		of the Reference catalog</li>
		<li>Succeeds in retrieving the referencing feature (Reader) to the Book</li>
	</ul>
	</li>
	<li>Illustrates output of scanning an Applicative Container in various roles<ul>
		<li>Create a Credentials object with the Base catalog credentials and Feature 
		Infrastructure credentials</li>
		<li>Create a facade over our applicative container associated with the above 
		credentials</li>
		<li>Scan through this applicative Container. It outputs only those features 
		defined in the Base catalog (Book &amp; Library)</li>
		<li>Append the credentials object with the Extension catalog credentials</li>
		<li>Create another facade over the applicative container associated with 
		this credential</li>
		<li>Scan through the applicative container. This time, it outputs features 
		defined both in the Base catalog (Book &amp; Library), as well as the extension 
		catalog (HistoricalNovel)</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtWorkingWithCredentials</h3>
<p>To launch <code>CAAFmExtWorkingWithCredentials</code>, you will need to set up 
the build time environment, then compile <code>CAAFmExtWorkingWithCredentials
</code>along with its prerequisites, set up the run time environment, and then execute 
the sample. This is fully described in the referenced article [<a href="#References">2</a>].</p>
<p>mkrun -c &quot;<code>CAAFmExtWorkingWithCredentials</code><em> Repository Server UserId 
Password SecurityCtx Environment</em>&quot;</p>
<p>Where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtWorkingWithCredentials Code</h3>
<p><code>CAAFmExtWorkingWithCredentials</code> code is located in the <code>CAAFmExtWorkingWithCredentials</code><code>.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\</code><code>CAAFmExtWorkingWithCredentials</code><code>.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the 
root folder of your API installation. It is made of a unique source file named
<code>CAAFmExtWorkingWithCredentials.cpp</code>.</p>
<p>In addition, the UC also refers to the Catalogs <code>CAAFmExtBaseCatalogForCredential.CATfct</code>,
<code>CAAFmExtExtnCatalogForCredential.CATfct</code> and <code>CAAFmExtRefCatalogForCredential.CATfct</code>. 
The Catalogs are provided at the location</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CNext\resources\graphic</code></p>
<p>and by running the mkrtv tool, user copies it to the WS RTV.</p>
<p>In addition we have also provided the OSM files corresponding to these catalogs 
at the location below, just in case you would like to generate the <code>CATfct</code> 
with the <code>CATfctEditorAssistant</code> tool [<a href="#References">3</a>]</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\InputData</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight logical steps in <code>CAAFmExtWorkingWithCredentials</code>:</p>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create credential">Creating the Credentials</a></li>
	<li><a href="#Instantiate features">Instantiating features</a></li>
	<li><a href="#Working as an Owner of the Base feat">Working as Owner of the 
	Base Catalog</a></li>
	<li><a href="#Introspect features retrieved from base">Introspecting Features 
	retrieved from Book feature using Appropriate Credentials</a></li>
	<li><a href="#Introspect features retrieved from base">Working as not the Owner 
	of the Base Catalog</a></li>
	<li><a href="#Working as a client of container">Working with Applicative Container</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository [<a href="#References">4</a>]. Then the use case creates a PLM Technological 
Representation with an applicative container [<a href="#References">5</a>], and 
creates a facade over the container (<code>MyContFacade</code>, a <em>CATFmContainerFacade</em> 
class object) [<a href="#References">6</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create credential"></a>Creating the Credentials</h3>
<p>In this use case we create 4 credentials objects ( a <em>CATFmCredentials</em> 
class object). One for each feature Catalog, and one gathering all accreditations. 
The first three elementary creations are for educative motive, in your real application, 
usually you will use one credentials object gathering all your accreditations.
</p>
<p>First we create a credential to handle feature created from StartUp defined in 
the Base feature catalog.</p>
<pre class="code">...
<strong>CATFmCredentials</strong> CredentialForBaseCatalog ;
rc = CredentialForBaseCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,&quot;CAAFmExtFeatureModeler&quot;);
...</pre>
<p>When a credential is created, the first thing is to declare on which infrastructure 
is based your application. The call to <code>RegisterAsApplicationBasedOn</code> 
is extremely important, by its contents, and by the fact it must done in first. 
The argument of this method are:</p>
<ul>
	<li>A pointer to a key identifying the infrastructure , here CATFmFeatureModelerID</li>
	<li>A string representing your Partner identification - for licensing purpose 
	- In all use cases of the CAAFeatureModelerExt.edu framework , we are using 
	&quot;CAAFmExtFeatureModeler&quot; as Partner Id.</li>
</ul>
<p>Then we can add the accreditation for the feature catalog.</p>
<pre class="code">...
CATUnicodeString clientId(&quot;CAAFmExtCatalogForCredential&quot;);
CATUnicodeString iBaseCatalogName(&quot;CAAFmExtBaseCatalogForCredential&quot;),

rc = CredentialForBaseCatalog<strong>.RegisterAsCatalogOwner(iBaseCatalogName,clientId)</strong>;
...</pre>
<p>The call to <code>RegisterAsCatalogOwner</code> of the <em>CATFmCredentials</em> 
class updates the Credentials object with the ownership credentials of a Catalog. 
Its inputs are</p>
<ul>
	<li><code>iBaseCatalogName</code>, a <em>CATUnicodeString</em> type which represents 
	the Catalog name</li>
	<li><code>clientId</code>, a <em>CATUnicodeString</em> type which represents a 
	string provided as an input at the time of generating/updating this catalog. 
	Thus, the <code>clientId</code> is known only to those authorized to work with 
	this catalog [<a href="#References">3</a>]</li>
</ul>
<p>Then, we do the same thing, for Reference and Extension catalogs:</p>
<pre class="code">
...
CATFmCredentials CredentialForExtnCatalog, CredentialForRefCatalog;
rc = CredentialForExtnCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,&quot;CAAFmExtFeatureModeler&quot;);
rc = CredentialForExtnCatalog.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAFmExtExtnCatalogForCredential&quot;,clientId);
...    
rc = CredentialForRefCatalog.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,&quot;CAAFmExtFeatureModeler&quot;);
rc = CredentialForRefCatalog.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAFmExtRefCatalogForCredential&quot;,clientId);
...   
</pre>
<p>Finally we create the credentials object gathering all the previous accreditations, 
plus the accreditation to work with container.</p>
<pre class="code">...   
<strong>CATFmCredentials CredentialsForAll</strong>;
CredentialsForAll <strong>+=</strong> CredentialForBaseCatalog;
CredentialsForAll.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAFmExtExtnCatalogForCredential&quot;,clientId);
CredentialsForAll.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAFmExtRefCatalogForCredential&quot;,clientId);
...</pre>
<p>An all-inclusive Credentials object is created by appending existing credentials 
object (<code>CredentialForRefCatalog</code> and <code>CredentialForBaseCatalog</code>), 
like using the <code>RegisterAsCatalogOwner</code> method. You can observe that
<code>RegisterAsCatalogOwner</code> adds a new accreditation, a Credentials object 
being like a key-chain.</p>
<p>Before leaving this section:</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Note</span>: Since the current Use 
		Case illustrates working with a Credentials object, we have had to create 
		distinct credentials object for each catalog. While typically in an industrial 
		scenario its more convenient to create an all-inclusive credential, which 
		will grant ownership privileges to all feature modeler entities (Catalogs, 
		Containers) in the scope of client applications.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Instantiate features"></a>Instantiating and Valuating Features</h3>
<p>The current step deals with instantiating features and linking them as depicted 
in [<a href="#Fig.1">Fig.1</a>] above. The UC execution will be based on this model.</p>
<p>We first create the Library feature.</p>
<pre class="code">...
CATUnicodeString LibraryStartUpType("`CAAFmExtLibrary`@`CAAFmExtBaseCatalogForCredential.CATfct`");
CATFmStartUpFacade <strong>LibraryStartUpFacade</strong>(CredentialForBaseCatalog, LibraryStartUpType);

CATFmFeatureFacade oFeatFacadeOnLibrary(CredentialForBaseCatalog);
rc = LibraryStartUpFacade.<strong>InstantiateIn</strong>(MyContFacade,oFeatFacadeOnLibrary);
...    
</pre>
<p>About the declarations:</p>
<ul>
	<li><code>LibraryStartUpFacade</code>, a <em>CATFmStartUpFacade</em> class object, 
	represents the facade to handle the <code>CAAFmExtLibrary</code> Startup. Its 
	credentials, <code>CredentialForBaseCatalog</code>, will enable us to realize 
	the instantiation</li>
	<li><code>oFeatFacadeOnLibrary</code>, a <em>CATFmFeatureFacade</em> class object 
	will be bind to the newly created Library feature. The credentials associated 
	are those of the Base catalog, in order to modify the new feature is few code 
	lines.</li>
	<li><code>MyContFacade</code>, a <em>CATFmContainerFacade</em> class object represents 
	a facade over an applicative container, associated with an-inclusive Credentials 
	whose to be owner of Base catalog.</li>
</ul>
<p>The <code>InstantiateIn</code> method of the <em>CATFmStartUpFacade</em> class 
finally realizes the instantiation within the container provided as input. The new 
feature, named hereafter Library, is bound to the <code>oFeatFacadeOnLibrary</code> 
facade.</p>
<p>On the same schema, we create the Book feature.</p>
<pre class="code">...
CATUnicodeString LibBookStartUpType("`CAAFmExtLibBook`@`CAAFmExtBaseCatalogForCredential.CATfct`");
CATFmStartUpFacade <strong>BookStartUpFacade</strong>(CredentialForBaseCatalog, LibBookStartUpType);

CATFmFeatureFacade oFeatFacadeOnBook(CredentialForBaseCatalog);
rc = BookStartUpFacade.InstantiateIn(MyContFacade,oFeatFacadeOnBook);...    
</pre>
<p>The CAAFmExtLibBook startup is also defined by the Base catalog, like the CAAFmExtLibrary 
startup ; so the same credentials, <code>CredentialForBaseCatalog</code>, is used 
to create the Startup facade (<code>LibraryStartUpFacade)</code> and the feature 
facade (<code>oFeatFacadeOnBook</code>) containing the new feature (named Book)</p>
<p>So we can modify an attribute of the Library feature through its facade <code>
oFeatFacadeOnLibrary</code>since its contains the ownership of the Base catalog.</p>
<pre class="code">...
CATFmAttributeName LibBooksAttrName(&quot;LibraryBooks&quot;);
CATFmAttributeValue AttrValue;
AttrValue.SetFeature(oFeatFacadeOnBook);
rc = oFeatFacadeOnLibrary.<strong>SetValue</strong>(LibBooksAttrName,AttrValue);  
...</pre>
<p>The <code>SetValue</code> method of the <em>CATFmFeatureFacade</em> class modify 
the <code>LibraryBooks</code> attribute (a component) of the Library feature. In 
the Instantiating Feature use case [<a href="#References">6</a>], you learn that
<code>InstantiateIn</code> + <code>SetValue</code> is merged by<code>InstantiateUnder.</code></p>
<p>Then a list of features are created to get the data model as depicted in [<a href="#Fig.1">Fig.1</a>]
</p>
<ul>
	<li>a Publisher feature, <code>oFeatFacadeOnPublisher</code> is the facade bound 
	to this feature and with <code>CredentialForRefCatalog</code> as credential
	</li>
	<li>a Reader feature, <code>oFeatFacadeOnReader</code> is the facade bound to 
	this feature and with <code>CredentialForRefCatalog</code> as credential
	</li>
</ul>
<p>and feature&#39;s attribute are modified with the same way as the Library feature:</p>
<ul>
	<li>The Reader pointes the Book feature using <code>SetValue</code> on the
	<code>oFeatFacadeOnReader</code> facade with <code>AttrValue</code> = <code>
	oFeatFacadeOnBook</code> as attribute value, and <code>BooksRead</code> as 
	attribute name as argument.</li>
	<li>The Book pointes the Published feature using <code>SetValue</code> on the
	<code>oFeatFacadeOnBook</code> facade with <code>AttrValue</code> = <code>oFeatFacadeOnPublisher</code> 
	as attribute value , and <code>BookPublisher</code> as attribute name as argument.
	</li>
</ul>
<p>Finally we add an extension to the Book feature. We create the HistoricalNovel 
extension to the Book feature.</p>
<p>first we create a facade over the Book feature whose the credentials are only 
for the Extension catalog. To be owner of the extension is enough to add an extension 
to a any base feature.</p>
<pre class="code">...	
CATFmFeatureFacade FeatFacadeOnBookWithOnlyExtnCatalogCreds(CredentialForExtnCatalog);
FeatFacadeOnBookWithOnlyExtnCatalogCreds = oFeatFacadeOnBook.<strong>GetFeature</strong>();
...
</pre>
<p>Then we realize the extension addition using <code>FeatFacadeOnBookWithOnlyExtnCatalogCreds</code>
</p>
<pre class="code">...	
rc = FeatFacadeOnBookWithOnlyExtnCatalogCreds.AddExtension(&quot;CAAFmExtHistNovel&quot;,AttrValue);
CATFmFeatureFacade oFeatFacadeOnHistNovelExtn(CredentialForExtnCatalog,AttrValue);
...
</pre>
<p><code>oFeatFacadeOnHistNovelExtn</code>, is a <em>CATFmFeatureFacade</em> class 
object representing the <code>HistoricalNovel</code> extension.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Working as an Owner of the Base feat"></a>Working as Owner of the Base 
Catalog</h3>
<p>In this section we study the privileges and restrictions associated with the 
ownership of a feature catalog. So we <code>oFeatFacadeOnBook</code> the facade 
of the Book feature with <strong>only</strong> the Base catalog as credentials.
</p>
<h4>Privileges of Owner of Base Catalog</h4>
<p>An owner of a catalog defining the StartUp of a feature, has the privilege to 
introspect it. By introspection, we imply, for example, an authorization to retrieve 
and set its attribute value. The attributes could be either be the primitive or 
the link (specobject, component, external) types.</p>
<p><strong>Success to Retrieve Global Information</strong></p>
<p>The display name [<a href="#References">7</a>] is an information requesting an 
authorization too.</p>
<pre class="code">...
CATUnicodeString TheFeatureBookName ; 
rc = oFeatFacadeOnBook.<strong>GetDisplayName</strong>(TheFeatureBookName);
if (FAILED(rc)) return 1;   
...</pre>
<p>Then you try to retrieve the feature aggregating the Book feature (its parent)</p>
<pre class="code">...	
rc = oFeatFacadeOnBook<strong>.GetRootParentFeature</strong>(AttrValue);
if (FAILED(rc)) return 1;
...   
CATFmFeatureFacade FeatFacadeOnParentLibraryFeat;
rc = <strong>AttrValue.GetFeature(FeatFacadeOnParentLibraryFeat)</strong>;
if (FAILED(rc)) return 1;
...
CATBaseUnknown_var spLibrary = FeatFacadeOnParentLibraryFeat.<strong>GetFeature</strong>() ;
if (NULL_var == spLibrary ) return 1;
...</pre>
<p>The call to <code>GetRootParentFeature</code> of the <em>CATFmFeatureFacade</em> 
class returns the root parent of a feature. By &quot;Root parent&quot; we imply the aggregating 
feature, which itself is not aggregated in turn.</p>
<p><strong>Success to Retrieve Attributes Value</strong></p>
<pre class="code">...	
CATFmAttributeName iAttrNameForTitle(&quot;Title&quot;);
rc = oFeatFacadeOnBook<strong>.GetValue(iAttrNameForTitle,AttrValue)</strong>;
...
CATUnicodeString strTitle;
rc = <strong>AttrValue.GetString(strTitle)</strong>;
if (FAILED(rc)) return 1;
...</pre>
<p>We retrieve the value of the attribute &quot;Title&quot; (primitive type) for the Book 
feature.</p>
<p><a name="We proceed to retrieve a feature referenced by the Book feature.">
</a>We proceed to retrieve a feature referenced by the Book feature.</p>
<pre class="code">...
CATFmAttributeName iAttrNameForPublisher(&quot;BookPublisher&quot;);
rc = <strong>FeatFacadeOnBookWithOnlyBaseCatalogCreds.GetValue(iAttrNameForPublisher,AttrValue)</strong>;
if (FAILED(rc)) return 1;
...    
CATFmFeatureFacade FeatFacadeOnRetrievedPublisher;
rc = <strong>AttrValue.GetFeature(FeatFacadeOnRetrievedPublisher)</strong>;
if (FAILED(rc)) return 1;
...
CATBaseUnknown_var spPublisher = FeatFacadeOnRetrievedPublisher.<strong>GetFeature</strong>() ;
if ( NULL_var == spPublisher ) return 1;    
...</pre>
<p>We retrieve the value of the attribute &quot;BookPublisher&quot; of type specobject associated 
with the Book feature. The call to <code>GetValue</code> of the <em>CATFmFeatureFacade</em> 
class, retrieves an attribute value. The call to <code>GetFeature</code> of the
<em>CATFmAttributeValue</em> returns the referenced feature.</p>
<p>We next proceed to retrieve the extension to the Book feature.</p>
<pre class="code">...
CATFmFeatureFacade FeatFacadeOnRetrievedHistNovelExtn;
rc = oFeatFacadeOnBook.<strong>GetExtension</strong>(&quot;CAAFmExtHistNovel&quot;,FeatFacadeOnRetrievedHistNovelExtn);   
if (FAILED(rc)) return 1;
...</pre>
<p>The <code>GetExtension</code> call of the <em>CATFmFeatureFacade</em> class retrieves 
an extension to the Book (base) feature.</p>
<p><strong>Success to Retrieve the Pointing Features</strong></p>
<p>Our objective is to retrieve the Reader feature.</p>
<pre class="code"><strong>CATFmPointingFeatureIterator</strong> oIteratorOnPointing;
rc = oFeatFacadeOnBook<strong>.ScanPointingFeatures(</strong>oIteratorOnPointing<strong>)</strong>;
if (FAILED(rc)) return 1;
...
CATFmFeatureFacade FeatFacadeOnPointing ;
rc = <strong>oIteratorOnPointing.Next(</strong>FeatFacadeOnPointing<strong>)</strong>;
if (FAILED(rc)) return 1;
</pre>
<p>The call to <code>ScanPointingFeatures</code> on a <em>CATFmFeatureFacade</em> 
returns SUCCESS and an Iterator on the features pointing to the invoking Book feature. 
This iterator is not empty, we got the only one feature pointing the Book : the 
Reader feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>Restrictions of Owning only Base Catalog</h4>
<p><strong>Failure to introspect the Retrieved Feature</strong></p>
<p>In the earlier section, we discussed the privileges of an owner of the Base Catalog. 
We observed that the owner can retrieve the referenced feature (Publisher), feature 
extensions (HistoricalNovel), pointing feature (Reader), but one cannot introspect 
the retrieved features, which implies that the process of retrieving a feature from, 
does not transfer the credentials. In other words, the feature facade of the retrieved 
feature is either with the credentials it originally held or without any.</p>
<pre class="code">CATFmAttributeName iAttrNamePublisherName(&quot;PublisherName&quot;);
rc = <strong>FeatFacadeOnRetrievedPublisher.</strong>GetValue(iAttrNamif (SUCCEEDED(rc)) return 1; 
...   
   CATFmAttr...   
CATFmAttributeName iAttrNameEpoch(&quot;Epoch&quot;);
rc = <strong>FeatFacadeOnRetrievedHistNovelExtn.</strong>GetValue(iAttrNameEpoch,AttrValue);
if (SUCCEEDED(rc)) return 1;</pre>
<p>We try retrieve to retrieve the values of the attributes of the Publisher, and 
the HistoricalNovel feature, but both fail because <code>FeatFacadeOnRetrievedPublisher</code>
and <code>FeatFacadeOnRetrievedHistNovelExtn</code> are to facades 
created without credentials.</p>
<p><strong><a name="Limited Introspection of Retrieved Feature"></a>Limited Introspection 
of Retrieved Feature</strong></p>
<p>But nevertheless, if the introspection of a feature is made a part of its Interface 
implementation, one can work with such a feature, without actually owning it, simply 
by invoking its exposed Interface services. For example. the HistoricalNovel feature 
extension implements the <em>CAAIFmExtHistNovel</em> Interface. In the code that follows, 
we retrieve this Interface to our feature extension and invoke its services.</p>
<pre class="code">CAAIFmExtHistNovel* piHistNovel = NULL;
rc = <strong>FeatFacadeOnRetrievedHistNovelExtn.QueryInterfaceOnFeature(IID_CAAIFmExtHistNovel,(void**)&amp;piHistNovel)</strong>;
...
CATUnicodeString strAttrEpoch;
<strong>rc = piHistNovel-&gt;GetEpoch(&amp;strAttrEpoch)</strong>;
...
</pre>
<p>The call to he call to <code>QueryInterfaceOnFeature</code> of the <em>CATFmFeatureFacade</em> 
class, returns an Interface pointer on the underlying feature. Here we retrieve
<code>piHistNovel</code>, a <em>CAAIFmExtHistNovel</em> * type on the underlying feature 
extension. Next the <code>GetEpoch</code>() call of the <em>CAAIFmExtHistNovel</em> 
Interface, retrieves the value of the &quot;Epoch&quot; attribute of the HistoricalNovel feature 
extension.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Introspect features retrieved from base"></a>Introspecting Features 
Retrieved from Book Feature Using Appropriate Credential</h3>
<p>In the earlier section we observed though we could retrieve features linked to 
the base, we fail to introspect them. Then how does one work with these retrieved 
features? The answer is contained in the code that follows</p>
<pre class="code"><strong>CATFmFeatureFacade FeatFacadeOnPublisherWithRefCatalogCreds(CredentialForRefCatalog,spPublisher)</strong>;
rc = <strong>FeatFacadeOnPublisherWithRefCatalogCreds.GetValue</strong>(iAttrNamePublisherName,AttrValue);
if (FAILED(rc)) return 1;
...</pre>
<p>So, we have to create a facade on the Publisher feature, <code>spPublisher,
</code>using the appropriate credential,<code>CredentialForRefCatalog</code> - (Publisher 
is defined by the Reference Catalog) .The feature facade <code>FeatFacadeOnPublisherWithRefCatalogCreds
</code>having the right to introspect the Publisher feature, the <code>GetValue,</code> 
method will be successful. <code>spPublisher</code> has been retrieved some lines 
before nes before
<a href="#We proceed to retrieve a feature referenced by the Book feature.">#</a>It 
is significant to note that with the Publisher credentials we fail to introspect 
Company, the feature it derives from.</p>
<pre class="code">CATFmAttributeName iAttrNameCompanyKind(&quot;CAAFmExtCompanyKind&quot;);
rc = <strong>FeatFacadeOnPublisherWithRefCatalogCreds.GetValue(iAttrNameCompanyKind,AttrValue)</strong>;
if (SUCCEEDED(rc)) return 1;
...  </pre>
<p>We attempt to retrieve the &quot;CAAFmExtCompanyKind&quot; attribute value of the Company 
feature. We confirm it returns FAILURE. A feature cannot be introspected with the 
credentials of its derived feature, and vice versa.</p>
<p>To introspect the extension feature, HistoricalNovel, we create an appropriate 
facade.</p>
<pre class="code"><strong>CATFmFeatureFacade FeatFacadeOnExtnWithExtnCredentials(CredentialForExtnCatalog)</strong>;
FeatFacadeOnExtnWithExtnCredentials = piHistNovel ;
rc = <strong>FeatFacadeOnExtnWithExtnCredentials.GetValue(iAttrNameEpoch,AttrValue)</strong>;e);
...</pre>
<p>We succeed in retrieving the value of the attribute &quot;Epoch&quot; of the HistoricalNovel 
feature extension because <code>FeatFacadeOnExtnWithExtnCredentials</code> bound 
to the HistoricalNovel feature owns the right catalog credential. <code>piHistNovel</code> 
, the HistoricalNovel feature has been retrieved some lines before
<a href="#Limited Introspection of Retrieved Feature">#</a><br>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Working with base feat, without owning it"></a>Working as not the Owner 
of the Base Catalog</h3>
<p>One may not be the owner of a catalog , but yet may succeed in retrieving the 
&quot;<strong>feature extensions</strong>&quot; and those &quot;referenc&quot; it, provided the base 
feature facade is associated with the credentials of the features being sought. 
The scenario that follows is an attempt to retrieve the HistoricalNovel feature 
extension to a Book feature, using a feature facade on Book associated with the 
credentials of only the HistoricalNovel extension.</p>
<pre class="code">...
<strong>CATFmFeatureFacade FeatFacadeOnBaseFeatWithOnlyExtnCreds(CredentialForExtnCatalog)</strong>;
FeatFacadeOnBaseFeatWithOnlyExtnCreds = oFeatFacadeOnBook;
rc = FeatFacadeOnBaseFeatWithOnlyExtnCreds.<strong>GetExtension</strong>(&quot;CAAFmExtHistNovel&quot;,AttrValue);
if (FAILED(rc)) return 1;
CATFmFeatureFacade FeatFacadeOnHistoricalNovelExtn(CredentialForExtnCatalog,AttrValue);</pre>
<p>We begin by creating a Feature Facade associated with only the feature extension 
credentials. It is then linked to an underlying Book feature. Next, we observe the 
call to <code>GetExtension</code> on the base feature to retrieve extensions to 
it, returns success. Please note that the call to <code>AddExtension</code>() to 
instantiate an extension to a base feature, also returns SUCCESS.</p>
<p>On similar lines, the code that follows succeeds in retrieving an iterator on 
the features pointing to a base feature. In this case, we could retrieve all Readers 
who read a book.</p>
<pre class="code">...
<strong>CATFmFeatureFacade FeatFacadeOnBaseFeatWithOnlyRefCreds(CredentialForRefCatalog)</strong>;
FeatFacadeOnBaseFeatWithOnlyRefCreds = oFeatFacadeOnBook;
CATFmPointingFeatureIterator oIteratorOnReader2;
rc = FeatFacadeOnBaseFeatWithOnlyRefCreds.<strong>ScanPointingFeatures</strong>(oIteratorOnReader2);
... 
</pre>
<p>The iterator on the pointing features <code>oIteratorOnReader2</code>, a <em>CATFmPoingingFeatureIterator</em> 
type is populated with all the referencing features (Readers of a Book). We scan 
through this iterator to retrieve all these features.</p>
<pre class="code">...
<strong>CATFmFeatureFacade FeatFacadeOnReader2(CredentialForRefCatalog)</strong>;
...
while <strong>(SUCCEEDED(oIteratorOnReader2.Next(FeatFacadeOnReader2)))</strong>
{
   CATUnicodeString strDisplayNameOfReader;
   HRESULT hr2 = <strong>FeatFacadeOnReader2.GetType(strDisplayNameOfReader)</strong>;         ...         ...    
</pre>
<p>The call tocode() of the feature iterator returns SUCCESS, which implies that 
the iterator was indeed populated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Working as a client of container"></a>Working with Applicative Container 
Container</h3>
<p>The current section illustrates the significance of the Credentials associated 
with an Applicative Container Facade. We scan through an applicative container to 
retrieve the features instantiated in it. The scanning requires the credentials 
associated with the container facade grant two distinct authorizations</p>
<ul>
	<li>Feature Modeler authorization to scan an applicative container: using
	</li>
	<li>Authorization to work with Catalogs whose features are being retrieved from 
	the container: using</li>
</ul>
<p>The credential <code>CredentialForBaseCatalog</code> already created is correct, 
so for the UC purpose we create another credential but based on an existing one
<code>CredentialForBaseCatalog</code>.</p>
<pre class="code">
...
CATFmCredentials CredentialsForContainerScan(CredentialForBaseCatalog);
...</pre>
<p><code>CredentialForBaseCatalog,</code> so <code>CredentialsForContainerScan
</code>can scan a container defined by the Feature infrastructure, and can retrieve 
features issued from the Base catalog.</p>
<p>This credentials object is next associated with a Container Facade object. We 
create a Container facade exclusively for this step, though we have already have 
one created earlier (<code>MyContFacade</code>) at the time of instantiating the 
features. The reason we do not reuse an earlier facade is because it is associated 
with an all-inclusive credentials while now we are studying the impact of credentials 
on the container scan, and hence will have a Container facade associated with credentials 
which will be gradually appended as the study progresses.</p>
<pre class="code">
...
CATFmContainerFacade ContFacadeForScanBaseFeats(CredentialsForContainerScan) ;
ContFacadeForScanBaseFeats = MyContFacade ;
...
</pre>
<p>Here we simply instantiate a Container Facade object associated with the newly 
created Credentials object. It is further linked to our applicative container, which 
has all our features in it.</p>
<p>We proceed to scan through this Container, and analyse the result.</p>
<pre class="code">CATFmFeatureIterator oIteratorOnContainerFeats;
rc = <strong>ContFacadeForScanBaseFeats.ScanFeatures(oIteratorOnContainerFeats)</strong>; ); 

CATFmFeatureFacade FeatReturnedByFirstContScan(CredentialForBaseCatalog);
CATUnicodeString strContainerFeatType;
CATUnicodeString strTypeBookFeat<strong>(&quot;CAAFmExtLibBook&quot;)</strong>;
CATUnicodeString strTypeLibraryFeat(&quot;<strong>CAAFmExtLibrary</strong>&quot;);
CATBoolean bValidFeature= TRUE;
while (( TRUE ==bValidFeature) &amp;&amp; SUCCEEDED(oIteratorOnContainerFeats.Next(FeatReturnedByFirstContScan)))
{
   strContainer FeatType= &quot;&quot;;
   HRESULT hr = <strong>FeatReturnedByFirstContScan.GetType(strContainerFeatType)</strong>;
 
   CATUnicodeString SubStr = strContainerFeatType.SubString(0,15);
   if ( (strcmp(strTypeBookFeat,SubStr)) &amp;&amp; (strcmp(strTypeLibraryFeat,SubStr)) )
      bValidFeature = FALSE;	
   else     
 ...
</pre>
<p>It is observed that the output of this scan, are only the feature whose the Startup 
is defined by the Base catalog.</p>
<p>We proceed with our study by appending the Credentials object with a credentials 
that authorizes access to the Extension catalog.</p>
<pre class="code">CredentialsForContainerScan +=CredentialForExtnCatalog;
...</pre>
<p>The += operator of the <em>CATFmCredentials</em> class, comes in handy here. We 
update <code>CredentialsForContainerScan</code>, a <em>CATFmCredentials</em> type, 
created exclusively for the current study. with the extension catalog credentials.</p>
<p>We create another Container Facade, this time associated with this updated credentials 
object, as seen below.</p>
<pre class="code"><strong>CATFmContainerFacade ContFacadeForScanBaseAndExtnFeats(CredentialsForContainerScan)</strong>;</pre>
<p>Yet again, we scan through this container, this time governed by the updated 
credentials object. We proceed to analyze the results of this scan.</p>
<pre class="code">...         
    CATFmFeatureIterator oIterOnContFeatsWithUpdatedCredentials;
    ContFacadeForScanBaseAndExtnFeats.ScanFeatures(oIterOnContFeatsWithUpdatedCredentials);
    CATFmFeatureFacade <strong>FeatReturnedBySecondContScan</strong>(<strong>CredentialsForContainerScan</strong>);
    CATUnicodeString strTypeExtnFeat(&quot;<strong>CAAFmExtHistNov</strong>&quot;);
    while (( TRUE ==bValidFeature) &amp;&amp; SUCCEEDED(oIterOnContFeatsWithUpdatedCredentials.Next(FeatReturnedBySecondContScan)))
    {
        strContainerFeatType= &quot;&quot;;
        FeatReturnedBySecondContScan.<strong>GetDisplayName</strong>(strContainerFeatType);
        CATUnicodeString SubStr = strContainerFeatType.SubString(0,15);
        if ( (strcmp(strTypeBookFeat,SubStr)) &amp;&amp;
             (strcmp(strTypeLibraryFeat,SubStr)) &amp;&amp;			
             (strcmp(strTypeExtnFeat,SubStr)) )
                     bValidFeature = FALSE;	
         else
...
</pre>
<p>The features retrieved, as a result of the scan, this time include both the features 
defined in the Base and the Extension catalog. In the current context, we retrieve 
the Book/Library and the HistoricalNovel features. This is confirmed since the retrieved 
features have a type which match either the string &quot;<strong>CAAFmExtLibBook</strong>&quot;, 
&quot;<strong>CAAFmExtLibrary</strong>&quot; or &quot;<strong>CAAFmExtHistNov.</strong>&quot; Note the 
credential of <code>FeatReturnedBySecondContScan</code>, the feature facade used 
to retrieve each element of the iterator. Its credentials, <code>CredentialsForContainerScan,</code> 
contains the required catalog credentials (Extension and Base). So, it is why the 
GetType method is working fine.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">4</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates working with a Credentials object. Typically, in the Feature 
Modeler domain, the credentials are those associated with owning a catalog and an 
authorization to scan through an applicative container.</p>
<p>An owner of a feature (catalog) is allowed to introspect it (retrieve and set 
attribute values, retrieve referenced features and feature extensions). But one 
cannot introspect the retrieved features or do so to a limited extent, having accessed 
the services exposed by an Interface implemented by the retrieved features.</p>
<p>A referencing feature and a feature extension could be retrieved from a base 
feature, by simply having the ownership privileges of the retrieved features. It 
is not required in this case, to own the base feature.</p>
<p>Finally, the Use Case illustrates the case of scanning through an applicative 
container. If one simply owns only the base catalog, the scan returns only the base 
features. In other words the scan retrieves only those features owned by the user. 
In addition user must also be a registered client of the feature modeler to be authorized 
to scan through the applicative container.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAFmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtTaNamingFeatures.htm">Understanding Feature Naming</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Mar 2010]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
