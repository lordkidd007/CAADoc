<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with Feature Extensions</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Working with Feature Extensions</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtExtensionManagement</code> use 
		case. It deals with working with feature extensions. These feature extensions 
		are those defined in the &quot;Creating Feature extension&quot; use case [<a href="#References">1</a>].
		</p>
		<p>A prerequisite is an understanding of the Feature Extensions [<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtExtensionManagement Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtExtensionManagement Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtExtensionManagement</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtExtensionManagement 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The UC teaches users to work with Feature Extensions. The key learnings are listed 
below:</p>
<ul>
	<li>Adding, retrieving and deleting a Feature Extensions to a Base feature</li>
	<li>Retrieving the base feature of any feature extension</li>
	<li>Understanding the minimal credentials for methods managing extension [<a href="#References">3</a>]</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtExtensionManagement Use Case</h2>
<p><code>CAAFmExtExtensionManagement</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="What"></a>What Does CAAFmExtExtensionManagement Do</h3>
<p>The use case starts to create a PLM Technological Representation with an applicative 
container [<a href="#References">4</a>] whose the name is &quot;<code>CAAFmExtBaseFeatureCont</code>&quot; 
. Then it proceeds to instantiate the <code>CAAOsmNovel</code>&#39;s StartUp. The new 
instance, named <code>Novel</code> or base feature further, is created inside this 
new container &quot;<code>CAAFmExtBaseFeatureCont</code>&quot;.</p>
<p>The &quot;<code>CAAOsmNovel</code>&quot; StartUp is defined in the feature catalog &quot;<code>CAAOsmCatalogSU</code>&quot;, 
generated by running the UC [<a href="#References">5</a>]. [<a href="#Fig.1">Fig.1</a>], 
just below, depicts the StartUp with its associated attributes.</p>
<table>
	<caption><a name="Fig.1"></a>Fig.1 The &quot;CAAOsmNovel&quot; Base Feature</caption>
	<tr>
		<td>
		<img alt="CAAOsmNovel Base Feature" src="images/CAAOsmExtensionsSUCat.gif" width="307" height="132"></td>
	</tr>
</table>
<p>After the <code>Novel</code> creation we proceed to add it extensions.</p>
<p>We first add it the &quot;<code>CAAOsmHistoricalNovel&quot;</code> extension. This feature 
extension is defined in the &quot;<code>CAAOsmExt1Catalog</code>&quot; catalog [<a href="#References">1</a>]. 
The [<a href="#Fig.2">Fig.2</a>] below depicts the &quot;<code>CAAOsmHistoricalNovel</code>&quot; 
StartUp. It has an attribute &quot;<code>Epoch</code>&quot;, of type string, default valuated 
to &quot;Middle Ages&quot;, associated with it.</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2 The &quot;CAAOsmHistoricalNovel&quot; Feature</caption>
	<tr>
		<td>
		<img alt="CAAOsmHistoricalNovel Feature" src="images/CAAOsmExtensions1.1Cont.gif" width="430" height="51"></td>
	</tr>
</table>
<p>The new extension is automatically instantiated inside the applicative container 
whose the name, &quot;<code>CAAFmExtApplication1</code>&quot;, is defined by the resource 
file of the extension feature [<a href="#References">1</a>].</p>
<p>Then we add to <code>Novel</code> the &quot;<code>CAAOsmBiographicalNovel</code>&quot; 
extension. This feature extension deriving from &quot;<code>CAAOsmHistoricalNovel&quot;</code> 
is also defined in the &quot;<code>CAAOsmExt1Catalog</code>&quot; catalog . [<a href="#Fig.3">Fig.3</a>] 
depicts the &quot;<code>CAAOsmBiographicalNovel</code>&quot; StartUp. It has an attribute 
&quot;<code>Domain</code>&quot; of type string, default valuated to &quot;Music&quot; associated with 
it. In addition it also inherits the attribute <code>Epoch</code>, of type string, 
from its parent feature (<code>CAAOsmHistoricalNovel).</code></p>
<table>
	<caption><a name="Fig.3"></a>Fig.3 The &quot;CAAOsmBiographicalNovel&quot; Feature</caption>
	<tr>
		<td>
		<img alt="CAAOsmBiographicalNovel Feature" src="images/CAAOsmExtensions1.2Cont.gif" width="462" height="77"></td>
	</tr>
</table>
<p>The new extension is also automatically instantiated inside the applicative container 
&quot;<code>CAAFmExtApplication1</code>&quot; as defined by the resource file of the extension 
feature [<a href="#References">1</a>].</p>
<p>Finally a third extension, &quot;<code>CAAOsmChildrensNovel</code>&quot; is added to the
<code>Novel</code> feature. This feature extensions is defined in the &quot;<code>CAAOsmExt2Catalog</code>&quot; 
feature catalog [<a href="#References">1</a>]. [<a href="#Fig.4">Fig.4</a>] depicts 
the &quot;CAAOsmChildrensNovel&quot; StartUp. It has an attribute &quot;<code>AgeGroup</code>&quot; 
of type integer, default valuated to 12, associated with it.</p>
<table>
	<caption><a name="Fig.4"></a>Fig. 4 The &quot;CAAOsmChildrensNovel&quot; Feature</caption>
	<tr>
		<td>
		<img alt="CAAOsmChildrensNovel Feature" src="images/CAAOsmExtensions2.1Cont.gif" width="431" height="48"></td>
	</tr>
</table>
<p>The new extension is automatically instantiated inside the applicative container 
whose the name, &quot;<code>CAAFmExtApplication2</code>&quot;, is defined by the resource 
file of the extension feature [<a href="#References">1</a>].</p>
<p>The [<a href="#Fig.5">Fig.5</a>] above depicts the final output of this UC at 
a glance.</p>
<table>
	<caption><a name="Fig.5"></a>Fig.5 An Overview of the UC Output</caption>
	<tr>
		<td><img alt="Overview of UC Output" src="images/CAAOsmExtensions.gif"></td>
	</tr>
</table>
<p>Once data are created, we make some different tests with retrieval methods:</p>
<ul>
	<li>We retrieve the <code>CAAOsmChildrensNovel</code> extension, and we displays 
	the value of the <code>AgeGroup</code> attribute, using a <em>CATFmFeatureFacade</em> 
	on the extension.</li>
	<li>We retrieve the <code>CAAOsmBiographicalNovel</code> extension, and we displays 
	the value of the <code>Epoch</code> &amp; <code>Domain</code> attributes, using 
	an interface implemented by the extension.</li>
	<li>We retrieve the base feature (Novel) from <code>CAAOsmChildrensNovel and 
	CAAOsmBiographicalNovel,</code> you will see that according to the credentials 
	you can get or not the base feature.</li>
</ul>
<p>The Use Case then proceeds to scan through the features extended by the Novel 
feature, instantiated in the Applicative Container &quot;<code>CAAFmExtApplication1</code>&quot;. 
It outputs the two feature extensions (types <code>CAAOsmHistoricalNovel</code> 
and <code>CAAOsmBiographicalNovel</code>). It next removes these two feature extensions. 
So, finally out of three feature extension instances, we are left only with one.</p>
<p>Finally it scans through features extended by the &quot;Novel&quot; feature across all 
Applicative Containers. The count output is one, since we have a single instance 
of the &quot;<code>CAAOsmChildrensNovel</code>&quot; feature extension, inside the Applicative 
Container &quot;<code>CAAFmExtApplication2</code>&quot;.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAFmExtExtensionManagement</h3>
<p>To launch <code>CAAFmExtExtensionManagement</code>, you will need to set up the 
build time environment, then compile <code>CAAFmExtExtensionManagement</code> along 
with its prerequisites, set up the run time environment, and then execute the use 
case. This is fully described in the referenced article [<a href="#References">6</a>]. 
To launch the use case, execute the following command:</p>
<p>mkrun -c &quot;<em>CAAFmExtExtensionManagement Repository Server UserId Password SecurityCtx 
Environment</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<p><strong>Note</strong>: The catalog&#39;s (<code>CAAOsmCatalogSU</code>, <code>CAAOsmExt1Catalog</code>,<code>CAAOsmExt2Catalog</code>) 
must be found under the run-time directory :current workspace + os_directory + resources 
+ graphic directory. In order for the catalog to be accessible from the run-time 
directory, it should be located in the CNext + resources + graphic directory of 
the CAAFeatureModelerExt.edu framework then when updating the run-time view (mkrtv), 
the catalog will be automatically moved to the run-time directory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtExtensionManagement Code</h3>
<p>The main <code>CAAFmExtExtensionManagement</code> code is located in the
<code>CAAFmExtModeler.m</code>, <code>CAAFmExtExtensionDefinition.m</code> and
<code>CAAFmExtExtensionManagement.m</code> module of the <code>CAAFeatureModelerExt.edu</code> 
framework. These modules are at the location</p>
<p><code>InstallRootFolder\CAAFeatureModelerExt.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">6</a>] is the root 
folder of your API installation.</p>
<p>The <code>CAAFmExtExtensionManagement.m</code> module consists of primarily the 
two files listed below, which constitute the UC Main</p>
<ul>
	<li><code>CAAFmExtManageExtensionMain.cpp</code> which has the main routine.</li>
	<li><code>CAAFmExtManageExtensionUse.cpp</code> which has the global routine
	<code>CAAFmExtManageExtensions</code>. This has all calls which constitute working 
	with feature extensions. The Main calls this routine.</li>
</ul>
<p>The <code>CAAFmExtModeler.m</code> module consists of the <code>CAAIFmExtNovel</code> 
implementation on the <code>CAAOsmNovel</code> late type, in the <code>CAAEFmExtNovel.cpp</code>.</p>
<p>The <code>CAAFmExtensionDefinition.m</code> module consists of the <code>CAAIFmExtBiogNovel</code> 
implementation on the <code>CAAOsmBiographicalNovel</code> late type, in the
<code>CAAEFmExtBiogNovel.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are ten logical steps in CAAFmExtExtensionManagement:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create credential">Create a Credential Object</a></li>
	<li><a href="#Create the Base Feature">Create the Base Feature</a></li>
	<li><a href="#Create the Base Feature">Instantiate Feature Extensions to a Base 
	Feature</a></li>
	<li><a href="#Retrieve an Extension to use it through a Feature Facade">Retrieve 
	an Extension to use it through a Feature Facade</a></li>
	<li><a href="#Retrieve an Extension to use it through an Interface">Retrieve 
	an Extension to use it through an Interface</a></li>
	<li><a href="#Retrieve base feat from feat extn">Retrieve Base Feature from 
	Feature Extension</a></li>
	<li><a href="#Scan feat extn 1">Scan Feature Extensions to the Base Feature 
	inside an Applicative Container</a></li>
	<li><a href="#Remove feat extn">Remove Feature Extensions</a></li>
	<li><a href="#Scan feat extn 2">Scan Feature Extensions to the Base Feature 
	whatever their Applicative Container</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">7</a>]. The Use Case creates a new PLM Technological Representation 
a subject discussed in the UC [<a href="#References">8</a>] with an applicative 
container [<a href="#References">9</a>]. This container is handled through a <em>
CATFmContainerFacade</em> instance class, <code>MyContFacade</code>. This facade 
is created with the credential detailed just below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create credential"></a>Create a Credential Object</h3>
<p>To instantiate a feature, a client should own the catalog in which this feature 
is defined. The instantiated features are:</p>
<ul>
	<li>&quot;<code>CAAOsmNovel</code>&quot; (base feature) defined in the &quot;<code>CAAOsmCatalogSU</code>&quot; 
	catalog.</li>
	<li>&quot;<code>CAAOsmHistoricalNovel</code>&quot; and &quot;<code>CAAOsmBiographicalNovel</code>&quot;, 
	both feature extensions defined in the &quot;<code>CAAOsmExt1Catalog</code>&quot; whose 
	the client Id is <code>CAAOsmClientId1</code>.</li>
	<li>&quot;<code>CAAOsmChildrensNovel</code>&quot;, a feature extension defined in the 
	catalog &quot;<code>CAAOsmExt2Catalog</code>&quot; whose the client Id is <code>CAAOsmClientId2</code>.</li>
</ul>
<p>A unique credential object,<code> MyCredentials</code>, a <em>CATFmCredentials</em><code>
</code>class instance, is created to fit all the needs of the use case.</p>
<pre class="code"><strong>CATFmCredentials</strong> MyCredentials;
...
</pre>
<p>This is followed by declaring that we are an application based on Feature modeler 
infrastructure:</p>
<pre class="code">...
rc = MyCredentials.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID<strong>,&quot;</strong>CAAFmExtFeatureModeler&quot;<strong>)</strong></pre>
<p>And finally followed by declaring that we are an owner of different catalogs.</p>
<pre class="code">...
CATUnicodeString clientId(&quot;CAAOsmClientId&quot;);
CATUnicodeString iCatalogName(&quot;CAAOsmCatalogSU&quot;);
MyCredentials<strong>.RegisterAsCatalogOwner</strong>(iCatalogName,clientId);
...
CATUnicodeString clientId1(&quot;CAAOsmClientId1&quot;);
CATUnicodeString iCatalogName1(&quot;CAAOsmExt1Catalog&quot;);
MyCredentials<strong>.RegisterAsCatalogOwner</strong>(iCatalogName1,clientId1);
...
CATUnicodeString clientId2(&quot;CAAOsmClientId2&quot;);
CATUnicodeString iCatalogName2(&quot;CAAOsmExt2Catalog&quot;);
MyCredentials<strong>.RegisterAsCatalogOwner</strong>(iCatalogName2,clientId2);
</pre>
<p>The <code>RegisterAsCatalogOwner</code> method of the <code>CATFmCredentials</code> 
class, appends the client credentials in steps, authorizing the client access to 
the StartUps defined in various catalogs.</p>
<p>Users will have a better understanding about Credentials on studying the TA &quot;<strong>Understanding 
Credentials</strong>&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create the Base Feature"></a>Create the Base Feature</h3>
<pre class="code">...
CATFmStartUpFacade MyStartUpFacade(MyCredential,&quot;CAAOsmNovel&quot;);

CATFmAttributeValue AttrValue;
CATFmFeatureFacade FeatFacadeOnNovelInstBaseFeat(<strong>MyCredential</strong>);
rc = MyStartUpFacade.<strong>InstantiateIn</strong>(MyContFacade,FeatFacadeOnNovelInstBaseFeat);
...</pre>
<p><code>FeatFacadeOnNovelInstBaseFeat</code> is the facade of the <code>Novel</code> 
feature newly instantiated within the <code>CAAFmExtBaseFeatureCont</code> container 
(handled by <code>MyContFacade</code>). Note the credential associated with the 
new facade: <code>MyCredential</code> : it will allow us to introspect the base 
feature as to add it the three extensions.</p>
<p>The steps of instantiation are detailed in the UC &quot;<strong>Creating Features</strong>&quot; 
[<a href="#References">10</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Instantiate Feature Extensions</h3>
<p>We proceed to instantiate the feature extensions to the &quot;<code>Novel</code>&quot; 
feature (base feature). The feature facade bound to the &quot;<code>Novel</code>&quot; feature 
is <code>FeatFacadeOnNovelInstBaseFeat</code> created just above. In our use case 
the credential associated with the base feature contains the right to access the 
base feature catalog and the extension catalog. But usually you only have the credential 
for the extension catalogs. It is enough to add an extension for any kind base feature. 
So the facade of the base feature must be bound to a credential where you are at 
least declared as owner of the extension catalog.</p>
<p>We start with the <code>CAAOsmHistoricalNovel</code> extension.</p>
<pre class="code">CATString strHistoricExtNovel(&quot;CAAOsmHistoricalNovel&quot;);
rc =  FeatFacadeOnNovelInstBaseFeat<strong>.AddExtension(</strong>strHistoricNovel<strong>,AttrValue)</strong>;
CATFmFeatureFacade FeatFacadeOnHistNovelExtn(MyCredential,AttrValue);
...
</pre>
<p>The <code>AddExtension</code> method of the <em>CATFmFeatureFacade</em> class 
instantiates a Feature Extension to a base feature. The arguments are:</p>
<ul>
	<li><code>strHistoricExtNovel</code>, a <em>CATString</em> type representing 
	the name of the feature extension.</li>
	<li><code>FeatFacadeOnHistNovelExtn</code>, a <em>CATFmFeatureFacade</em> type 
	on the Feature Extension created. Note that this facade is without credential. 
	It is without effect on the result of the AddExtension method. It is the facade 
	of the base feature (<code>FeatFacadeOnNovelInstBaseFeat</code> ) which must 
	at least contain the right to access the extension catalog.</li>
</ul>
<p>Then we do the same thing for <code>CAAOsmBiographicalNovel</code> extension.</p>
<pre class="code">...
CATString strBiographicalExtNovel(&quot;CAAOsmBiographicalNovel&quot;);
rc =  FeatFacadeOnNovelInstBaseFeat<strong>.AddExtension(</strong>strBiographicalExtNovel<strong>,AttrValue)</strong>;
CATFmFeatureFacade FeatFacadeOnBiogNovelExtn(MyCredential,AttrValue);
...</pre>
<p>And finally the <code>CAAOsmChildrensNovel</code> extension:</p>
<pre class="code">CATString strChildrensExtNovel(&quot;CAAOsmChildrensNovel&quot;);
rc = FeatFacadeOnNovelInstBaseFeat.<strong>AddExtension</strong>(strChildrensExtNovel,<strong>AttrValue</strong>);
		CATFmFeatureFacade FeatFacadeOnChildrensNovelExtn(MyCredential,AttrValue);</pre>
<p>Before leaving this step we should add four things:</p>
<ul>
	<li>The three extension addition are possible because the credential used to 
	create <code>FeatFacadeOnNovelInstBaseFeat</code> contains the privilege to 
	handle each feature extension catalog.</li>
	<li>Feature extension as any kind of feature are instantiated within an application 
	container. But you don&#39;t provide the name of the container in your code, because 
	Feature modeler engine retrieves the information from the resource file associated 
	with the extension feature. The stream containing the applicative container 
	is deducted from the base feature. Indeed, the base feature and its extension 
	must be in the same stream [<a href="#References">4</a>].</li>
	<li>When the applicative container does not exist (it is the case for <code>
	CAAOsmHistoricalNovel &amp; CAAOsmChildrensNovel)</code>, Feature modeler automatically 
	creates it.</li>
	<li>The returned facade for the newly extension features are without credential. 
	It is the use case choice.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve an Extension to use it through a Feature Facade"></a>Retrieve 
an Extension to use it through a Feature Facade</h3>
<p>This step consists in retrieving the extension (<code>CAAOsmChildrensNovel)</code> 
from the base feature in order to handle it through a feature facade.</p>
<pre class="code">rc = FeatFacadeOnNovelInstBaseFeat<strong>.GetExtension(</strong>strChildrensExtNovel<strong>, AttrValue)</strong>;
CATFmFeatureFacade FeatFacadeOnChildrenNovelExt(MyCredential,AttrValue);</pre>
<p>The <code>GetExtension</code> method of the <em>CATFmFeatureFacade</em> returns 
an extension feature. The arguments include:</p>
<ul>
	<li><code>strChildrensExtNovel</code>, a <em>CATString</em> type, representing 
	the name of the feature extension.</li>
	<li><code>FeatFacadeOnChildrenNovelExt</code>, a <em>CATFmFeatureFacade</em> 
	type, representing the facade over the &quot;<code>CAAOsmChildrensNovel</code>&quot; feature 
	extension output.</li>
</ul>
<p>The <code>GetExtension</code> succeeds because FeatFacadeOnNovelInstBaseFeat, 
the facade on the base feature, contains at least the right to handle the catalog 
defining CAAOsmChildrensNovel StartUp.</p>
<p>Since FeatFacadeOnChildrenNovelExt is created with <code>MyCredential</code> 
as credential we can introspect the feature extension (<code>MyCredential</code> 
contains the privilege to handle the feature catalog of <code>CAAOsmChildrensNovel)</code></p>
<pre class="code">CATFmAttributeName AgeGroupAsName(&quot;AgeGroup&quot;);
CATFmAttributeValue AgeGroupAsValue ;
rc = FeatFacadeOnChildrenNovelExt.<strong>GetValue</strong>(AgeGroupAsName,AgeGroupAsValue);
if (FAILED(rc)) return 1;
int AgeGroup = 0 ;
AgeGroupAsValue.GetInteger(AgeGroup);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve an Extension to use it through an Interface"></a>Retrieve 
an Extension to use it through an Interface</h3>
<p>This step consists in retrieving a feature extension (<code>CAAOsmBiographicalNovel)</code> 
from a base feature in order to handle it through an interface implemented by the 
feature extension.</p>
<pre class="code">...
rc = <strong>FeatFacadeOnNovelInstBaseFeat.GetExtension</strong>(strBiographicalExtNovel,AttrValue);
CATFmFeatureFacade FeatFacadeOnBiogNovelExt(MyCredential,AttrValue);
...</pre>
<p>To begin with we retrieve the &quot;<code>CAAOsmBiographicalNovel</code>&quot; feature 
on similar lines, as in the previous step. It is retrieved as <code>FeatFacadeOnBiogNovelExt</code>, 
a <em>CATFmFeatureFacade</em> type. But note that here the facade is created without 
credential. It does not matter. We will work with the feature extension pointer, 
a data that you can always freely retrieved from a facade.</p>
<p>Our feature extension exposes its services through the <em>CAAIFmExtBiogNovel</em> 
Interface. So the next step is to retrieve this interface and subsequently invoke 
its services.</p>
<pre class="code">...	
CAAIFmExtBiogNovel *piBiogNovelOnFeatExt = NULL;
rc = <strong>FeatFacadeOnBiogNovelExt.QueryInterfaceOnFeature</strong>(IID_CAAIFmExtBiogNovel ,(void**)&amp;piBiogNovelOnFeatExt);
...</pre>
<p>The <code>QueryInterfaceOnFeature</code> call of the <em>CATFmFeatureFacade</em> 
class, returns an interface type, of user choice, on the underlying feature. In 
the current case, we retrieve <code>piBiogNovelOnFeatExt</code>, a <em>CAAIFmExtBiogNovel</em> 
interface pointer on our feature extension. We proceed to call various services 
exposed by our feature extension.</p>
<pre class="code">...	
CATUnicodeString epoch(&quot;&quot;);
rc = <strong>piBiogNovelOnFeatExt -&gt; GetEpoch</strong>(&amp;epoch);

epoch = &quot;Renaissance&quot;;
rc = <strong>piBiogNovelOnFeatExt -&gt; SetEpoch</strong>(epoch);
...</pre>
<p>The <code>GetEpoch()</code> method of the <em>CAAIFmExtBiogNovel</em> Interface, 
simply retrieves the &quot;Epoch&quot; attribute value of our &quot;<code>CAAOsmBiographicalNovel</code>&quot; 
feature while the <code>SetEpoch()</code> method sets the &quot;Epoch&quot; attribute value.</p>
<p>On similar lines, we retrieve and valuate the &quot;Domain&quot; attribute, as well.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve base feat from feat extn"></a>Retrieve the Base Feature</h3>
<p>The objective is to retrieve from an extension feature its base feature (Novel).</p>
<p>First we try with the <code>CAAOsmBiographicalNovel</code> extension<code>
</code>from its facade, <code>FeatFacadeOnBiogNovelExt</code>, retrieved at the 
previous step <a href="#Retrieve an Extension to use it through an Interface">Retrieve 
an Extension to use it through an Interface</a>.</p>
<pre class="code">...	
CATFmAttributeValue TheBaseFeatureAsValue ; 
rc = FeatFacadeOnBiogNovelExt.<strong>GetBaseFeature</strong>(TheBaseFeatureAsValue);
if ( SUCCEEDED(rc) ) return 1 ;
...
</pre>
<p>ThThe <code>GetBaseFeature</code> fails because <code>FeatFacadeOnBiogNovelExt
</code>is without credential.</p>
<p>Then we try with the <code>CAAOsmChildrensNovel</code> extension from its facade,
<code>FeatFacadeOnChildrenNovelExt</code>, retrieved at the previous step
<a href="#Retrieve an Extension to use it through an Interface"></a>
<a href="#Retrieve an Extension to use it through a Feature Facade">Retrieve an 
Extension to use it through a Feature Facade</a>.</p>
<pre class="code">...	
TheBaseFeatureAsValue.Clear();
rc = FeatFacadeOnChildrenNovelExt.<strong>GetBaseFeature</strong>(TheBaseFeatureAsValue);
...</pre>
<p>This case, the <code>GetBaseFeature</code> is successful because <code>FeatFacadeOnChildrenNovelExt
</code>contains the credential as owner of the catalog defining the <code>CAAOsmChildrensNovel
</code>StartUp.</p>
<p>The <code>Clear</code> method has been added to be sure that <code>TheBaseFeatureAsValue</code> 
does not contain an underlying feature. ( it should not be the case since the previous
<code>GetBaseFeature</code> has failed)</p>
<pre class="code">...	
CATBaseUnknown_var MyBaseFeatureAsFeature = TheBaseFeatureAsValue.<strong>GetFeature</strong>() ;
...
<strong>CAAIFmExtNovel</strong> * pBaseFeatureAsIFmExtNovel = NULL ;
rc = MyBaseFeatureAsFeature-&gt; QueryInterface(IID_CAAIFmExtNovel , ( void **) &amp;  pBaseFeatureAsIFmExtNovel);
...</pre>
<p>This last section just confirms that the retrieved base feature is a CAAOsmNovel 
feature. From the facade containing the base feature, <code>MyBaseFeatureAsFeature</code>, 
we get the underlying feature, <code>pBaseFeatureAsIFmExtNovel</code> , and then 
we call a query interface on a specific interface implemented by CAAOsmNovel,
<em>CAAIFmExtNovel</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Scan feat extn 1"></a>Scan Feature Extensions to the Base Feature within 
an Applicative Container</h3>
<p>We next retrieve extensions to our base feature (<code>CAAOsmNovel</code>), those 
which exist inside the Applicative Container &quot;<code>CAAOsmApplication1&quot;</code>. 
We are expecting 2 (<code>CAAOsmBiographicalNovel.1 &amp; CAAOsmHistoricalNovel.1)</code></p>
<pre class="code">...
CATFmFeatureIterator oExtensionsIterator;
CATString CAAFmExtApplication1ID (&quot;CAAFmExtApplication1&quot;);
rc = <strong>FeatFacadeOnNovelInstBaseFeat.ScanExtensionsInContainer</strong>(CAAFmExtApplication1ID,oExtensionsIterator);
...</pre>
<p>The <code>ScanExtensionsInContainer</code> method of the <em>CATFmFeatureFacade</em> 
class, called on the base feature<code> FeatFacadeOnNovelInstBaseFeat</code>, retrieves 
its feature extensions inside the Applicative Container whose the Identifier is 
provided as input.</p>
<p>The return is in the form of a feature iterator (<code>oExtensionsIterator)</code>, 
a <em>CATFmFeatureIterator</em> type. The <code>Next</code> method of the <em>CATFmFeatureIterator</em> 
allows us to scan through the iterator to retrieve the feature extensions.</p>
<pre class="code">...
int iCountOfExtns = 0;
CATFmFeatureFacade FeatFacadeOnExtn (MyCredential);
rc =<strong> oExtensionsIterator.Next</strong>(FeatFacadeOnExtn);
while (SUCCEEDED(rc))
{
   CATUnicodeString oDisplayName;
   rc = FeatFacadeOnExtn.<strong>GetDisplayName</strong>(oDisplayName);
   if ( SUCCEEDED(rc) )
   {
      iCountOfExtns++;
      rc = <strong>oExtensionsIterator.Next</strong>(FeatFacadeOnExtn);
      ...
}
if (2 != iCountOfExtns) return 1;
...
</pre>
<p>The <code>GetDisplayName</code> method of the <em>CATFmFeatureFacade</em> retrieves 
the display name [<a href="#References">11</a>] of the feature extension.</p>
<p>About credentials:</p>
<ul>
	<li><code>ScanExtensionsInContainer</code> is always successful, but the returned 
	extension can be more or less. Here since the credentials of <code>FeatFacadeOnNovelInstBaseFeat
	</code>(the base feature) contains at least the privilege to handle the base 
	feature, you will get all extensions of this base feature. If the credential 
	is without the privilege to work with the base feature, the iterator only returns 
	the extension whose you are granted to handle. [<a href="#References">3</a>]</li>
	<li><code>GetDisplayName</code> is successful because <code>FeatFacadeOnExtn</code> 
	contains the privilege to handle any feature of our use case.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Remove feat extn"></a>Remove Feature Extensions</h3>
<p>We selectively remove the feature extensions instantiated in the Applicative 
Container &quot;<code>CAAOsmApplication1</code>&quot;.</p>
<pre class="code"><strong>CATFmFeatureIterator</strong> ListExtensionToDelete;
rc = FeatFacadeOnNovelInstBaseFeat.<strong>ScanExtensionsInContainer</strong>(CAAFmExtApplication1ID,ListExtensionToDelete);
... 
CATFmFeatureFacade FeatFacadeOnExtensionToDelete;  
while ( SUCCEEDED(rc) &amp;&amp; SUCCEEDED(ListExtensionToDelete.<strong>Next</strong>(FeatFacadeOnExtensionToDelete)) )
{
   rc = FeatFacadeOnNovelInstBaseFeat.<strong>RemoveExtension</strong>(FeatFacadeOnExtensionToDelete.GetFeatureAsValue());
}
</pre>
<p>First we got the list of extension from the base feature (we could have re-used 
the iterator of the previous step). Then for each extension of the list we delete 
them. Here you can see that the facade used to retrieved each extension from the 
list (<code>FeatFacadeOnExtensionToDelete</code>) is without credential. It is useless, 
since <code>FeatFacadeOnNovelInstBaseFeat</code> contains credential of the base 
feature. So whatever the credential of the extension facade, the <code>RemoveExtension</code> 
will be successful.</p>
<p>This results in removing the two feature extensions each of types <code>CAAOsmHistoricalNovel</code> 
and <code>CAAOsmBiographical</code>.</p>
<p><strong>Remember about credentials</strong>: if you are only owner of the Extension 
StartUp, when calling <code>RemoveExtension</code> on a base feature, you could 
only delete this kind of Extension on the feature. One facade, the base or the extension, 
must at least contain the right credential.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Scan feat extn 2"></a>Scan Feature Extensions to the Base Feature whatever 
their Applicative Container</h3>
<p>We next retrieve the extensions to our base feature (<code>Novel</code>). In 
all we had instantiated three feature extensions. Of which, in the earlier step, 
we removed the two feature extensions inside the Applicative Container &quot;<code>CAAFmExtApplication1</code>&quot;. 
Thus, we are now left with only a single feature extension of type &quot;<code>CAAOsmChildrensNovel</code>&quot;, 
inside the Applicative Container &quot;<code>CAAFmExtApplication2</code>&quot;.</p>
<pre class="code">CATFmFeatureIterator oExtensionsIterator1;
rc =  <strong>FeatFacadeOnNovelInstBaseFeat.ScanExtensions</strong>(oExtensionsIterator1);
...</pre>
<p>The <code>ScanExtensions</code> method of the <em>CATFmFeatureFacade</em> class 
called on the base feature (<code>FeatFacadeOnNovelInstBaseFeat</code>) retrieves 
all its feature extensions.</p>
<p>The return is in the form of a feature iterator (<code>oExtensionsIterator1</code>, 
a <em>CATFmFeatureIterator</em> type. The Next method of the <em>CATFmFeatureIterator</em> 
allows us to scan through the iterator to retrieve the feature extensions.</p>
<pre class="code">...
iCountOfExtns = 0;
CATFmFeatureFacade FeatFacadeOnExtn1;
rc =  <strong>oExtensionsIterator1.Next</strong>(FeatFacadeOnExtn1);
while (SUCCEEDED(rc))
{
	CATUnicodeString oDisplayName1;
	rc = FeatFacadeOnExtn1.GetDisplayName(oDisplayName1);
	iCountOfExtns++;
	rc = <strong>oExtensionsIterator1.Next</strong>(FeatFacadeOnExtn1);
}
	
if (1 != iCountOfExtns) return 1;
...</pre>
<p>The <code>GetDisplayName</code> method of the <em>CATFmFeatureFacade</em> retrieves 
the name of the feature extension.</p>
<p>We confirm that the count of the feature extensions is one.</p>
<p>About credentials:</p>
<ul>
	<li><code>ScanExtensions</code> is always successful, but the returned extension 
	can be more or less. Here since the credentials of <code>FeatFacadeOnNovelInstBaseFeat
	</code>(the base feature) contains at least the privilege to handle the base 
	feature, you will get all extensions of this base feature. If the credential 
	is without the privilege to work with the base feature, the iterator only returns 
	the extension whose you are granted to handle.</li>
	<li><code>GetDisplayName</code> is successful because <code>FeatFacadeOnExtn</code> 
	contains the privilege to handle any feature of our use case.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>See the referenced article [<a href="#References">7</a>] for a detailed description 
of the steps to go through when saving the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAA services of the <em>CATFmFeatureFacade</em> class inside the <code>FeatureModelerExt</code> 
framework invoked in this UC, are listed below:</p>
<ul>
	<li><code>AddExtension</code>, to add an extension to a base feature.</li>
	<li><code>GetExtension</code>, to retrieve an extension to a base feature, the 
	extensionID being an input.</li>
	<li><code>ScanExtensionsInContainer</code>, to scan through the extensions to 
	a base feature, within a specified container.</li>
	<li><code>RemoveExtensionsInContainer</code>, to remove extensions to a base 
	feature, within a specified container.</li>
	<li><code>ScanExtensions</code>, to scan through all extensions to a base feature.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmExtUcCreateExtensions.htm">Defining Feature Extensions</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaFeatureExtension.htm">Understanding Feature Extensions</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmExtTaApplicativeContainer.htm">Understanding Applicative 
		Container</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Container</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td><a href="CAAFmExtUcInstantiation.htm">Creating Features</a></td>
	</tr>
	<tr>
		<td>[11]</td>
		<td><a href="CAAFmExtTaNamingFeatures.htm">Understanding Feature Naming</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2001]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2003]</td>
		<td>Update to add a link to the &quot;Creating Features in an App. Cont.&quot; article</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Feb 2005]</td>
		<td>Document updated to integrate the new feature extension API</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jul 2007]</td>
		<td>Integration of CATOsmSUHandler</td>
	</tr>
	<tr>
		<td>Version: <strong>5</strong> [Dec 2009]</td>
		<td>Migrated to the Facade Authentication Mechanism</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
