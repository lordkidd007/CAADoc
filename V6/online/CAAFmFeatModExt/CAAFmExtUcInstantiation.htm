<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating Features</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Features</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAFmExtInstantiation</code> use case. 
		It illustrates the steps involved to create a feature from a StartUp [<a href="#References">1</a>] 
		(defined within a feature Catalog) and from another feature. It also instantiates 
		a feature as an aggregate (component) under another feature. The Feature 
		Modeler authentication mechanism [<a href="#References">2</a>] ensures that 
		the instantiation is realized only if the user owns the catalog.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmExtInstantiation Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmExtInstantiation Do</a></li>
				<li><a href="#How">How to Launch CAAFmExtInstantiation</a></li>
				<li><a href="#Where">Where to Find the CAAFmExtInstantiation Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to instantiate a feature either from a Startup, or from another 
feature. It is an illustration of the prototype/instance data model as described 
in the referenced technical article [<a href="#References">1</a>].</p>
<p>Besides the reader also learns to create an appropriate Accreditations object 
which authenticates his ownership of the Catalog and authorize him to instantiate 
its StartUps and handle its features. In the process the UC introduces the user 
to the fundamental secured feature access mechanism implemented by the Feature Modeler 
(detailed in the technical article [<a href="#References">2</a>]).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmExtInstantiation Use Case</h2>
<p><code>CAAFmExtInstantiation</code> is a use case of the <code>CAAFeatureModelerExt.edu</code> 
framework that illustrates <code>FeatureModelerExt</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmExtInstantiation Do</h3>
<p>The Use Case creates a new PLM Technological Representation and within it, an 
applicative container [<a href="#References">3</a>] . At the end it saves the PLM 
Technological Representation in the database. The StartUps referred to in this UC 
are defined in the &quot;CAAOsmCatalogSU&quot; catalog, generated with the clientID set to 
&quot;CAAOsmClientID&quot; in an earlier UC [<a href="#References">4</a>]</p>
<p>The steps of the UC scenario are listed below</p>
<ul>
	<li>Instantiate the &quot;CAAOsmNovel&quot; StartUp, to create the &quot;Novel&quot; feature</li>
	<li>Instantiate the &quot;Novel&quot; feature (the result of the previous instantiation)</li>
	<li>Instantiate the &quot;CAAOsmChapter&quot; StartUp as an aggregate under the &quot;Novel&quot; 
	feature (instance created in step 1)</li>
	<li>Instantiate the &quot;CAAOsmPublisher&quot; StartUp by changing the StartUp latetype 
	bind to the current StartUp facade</li>
</ul>
<p>The traces of this UC execution is seen below.</p>
<pre class="code">The Product Representation Reference is created
Applicative container created OK
Success in instantiating a Novel <strong>Novel</strong> from its CAAOsmNovel StartUp
Success in instantiating a Novel feature <strong>Novel</strong> from an existing Novel feature
Success in instantiating a Chapter <strong>Chapter.1</strong> aggregated under a Novel Novel
Success in changing the StartUp latetype
Success in instantiating a Publisher</pre>
<p>Please take note of the default display names of the three features, instantiated 
in this UC. The aggregated feature are indexed with a number while the none aggregated 
are without an index. By default the display name is the NLS name of the StartUp. 
This feature naming principles are detailed in a referenced article [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmExtInstantiation</h3>
<p>To launch <code>CAAFmExtInstantiation</code>, you will need to set up the build 
time environment, then compile <code>CAAFmExtInstantiation</code> along with its 
prerequisites, set up the run time environment, and then execute the sample. This 
is fully described in the referenced article [<a href="#References">6</a>].</p>
<p>mkrun -c &quot;<code>CAAFmExtInstantiation</code><em> Repository Server UserId Password 
SecurityCtx Environment</em>&quot;</p>
<p>Where</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(Since use case modifies PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT&#39;s custo)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmExtInstantiation Code</h3>
<p><code>CAAFmExtInstantiation</code> code is located in the <code>CAAFmExtInstantiation.m</code> 
use case module of the <code>CAAFeatureModelerExt.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFeatureModelerExt.edu\CAAFmExtInstantiation.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">6</a>] is the root 
folder of your API installation. It is made of a unique source file named <code>
CAAFmExtInstantiationMain.cpp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight logical steps in <code>CAAFmExtInstantiation</code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Create credential">Creating Accreditations Object</a></li>
	<li><a href="#Create a SU Facade">Creating a StartUp Facade</a></li>
	<li><a href="#Instantiate a SU">Instantiating the StartUp</a></li>
	<li><a href="#Instantiate the New Feature">Instantiating the Newly Created Feature</a>
	</li>
	<li><a href="#Instantiation and Aggregation">Instantiation and Aggregation</a></li>
	<li><a href="#Changing the Bound StartUp">Changing the Bound StartUp</a></li>
	<li><a href="#Instantiate the New Feature">Epilog</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The fundamental steps to create a batch session with a connection to an input 
repository, is detailed in the article &quot;<strong>Connecting to V6 Server</strong>&quot; 
[<a href="#References">7</a>]. The Use Case creates a new PLM Technological Representation 
a subject discussed in the UC [<a href="#References">8</a>] with an applicative 
container handled by a facade, <code>MyContFacade</code>, a <strong><em>C</em></strong><em>ATFmContainerFacade</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create credential"></a>Creating Accreditations object</h3>
<p>An Accreditations object defines the identity of a user in the specs world. If 
the user is identified as the owner of a feature, user will be authorized to operate 
on this feature. So effectively you may consider the Accreditations object as a 
key to secure your IP (Intellectual Property). This subject of secured feature access 
is further detailed in the technical article [<a href="#References">2</a>]</p>
<p>An accreditations object is an instance of the <em>CATFmCredentials</em> class, 
created with a call to its default constructor.</p>
<pre class="code"><strong>CATFmCredentials</strong> <strong>MyCredentials;</strong></pre>
<p>The first step is to update the Accreditations object with the ownership privileges 
to work with Applicative Container:</p>
<pre class="code">
CATUnicodeString partnerId(&quot;CAAFmExtFeatureModeler&quot;);
rc = MyCredentials.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,partnerId)
</pre>
<p>The Accreditations object is then upgraded to add the client identity, as an 
owner of the &quot;CAAOsmCatalogSU&quot; catalog, which defines the two StartUps (CAAOsmNovel, 
CAAOsmChapter) instantiated in the steps ahead.</p>
<pre class="code">CATUnicodeString clientId(&quot;CAAOsmClientID&quot;);
CATUnicodeString iCatalogName(&quot;CAAOsmCatalogSU&quot;);
<strong>rc</strong> = MyCredentials.<strong>RegisterAsCatalogOwner(iCatalogName,clientId)</strong>;
</pre>
<p>The <code>RegisterAsCatalogOwner</code>() call of the <em>CATFmCredentials</em> 
class input arguments include the catalog name (CAAOsmCatalogSU) and the clientID 
(CAAOsmClientID). Remember the clientID is used initially for catalog generation, 
and subsequently each time it is upgraded [<a href="#References">9</a>]. So, if 
client owns a catalog, he&#39;ll be aware of its ClientID. The Accreditations object 
(<code>MyCredentials</code>) can thus be updated with the ownership privileges of 
the &quot;CAAOsmCatalogSU&quot; catalog.</p>
<p>We next proceed to explain the usage of this Accreditations object (<code>MyCredentials</code>)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a SU Facade"></a>Creating a StartUp Facade</h3>
<p>Our interest is to instantiate a &quot;CAAOsmNovel&quot; StartUp. We create a StartUp facade 
bound to the StartUp type and the Accreditations object (MyCredentials, created 
earlier). The feature modeler secured access mechanism authenticates the client 
identity as an owner of the Catalog stored in the Accreditations object prior to 
instantiating the StartUp.</p>
<pre class="code">CATUnicodeString MyStartUpType(&quot;`CAAOsmNovel`@`CAAOsmCatalogSU.CATfct`&quot;);
<strong>CATFmStartUpFacade</strong> MyStartUpNovelFacade<strong>(</strong>MyCredentials<strong>,MyStartUpType);</strong></pre>
<p><code>MyStartUpNovelFacade</code>, is the facade for the &quot;<code>CAAOsmNovel</code>&quot; 
StartUp.</p>
<p>The first argument, <code>MyCredentials</code>, is the client accreditations. 
We updated it earlier, with the ownership privileges of the &quot;CAAOsmCatalogSU&quot; catalog. 
This authorizes the facade thus created to access the catalog contents and to instantiate 
the &quot;CAAOsmNovel&quot; StartUp.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Instantiate a SU"></a>Instantiating the StartUp</h3>
<p>Here, we can realize the StartUp instantiation.</p>
<pre class="code">CATFmFeatureFacade oInstanceNovelFromStartUp(MyCredential);
rc = MyStartUpNovelFacade<strong>.InstantiateIn</strong>(MyContainerFacade,oInstanceNovelFromStartUp);</pre>
<p>The call to the <code>InstantiateIn</code> method on <code>MyStartUpNovelFacade</code>, 
a <em>CATFmStartUpFacade</em> class created just earlier, instantiates our StartUp 
inside the Container as a input. The resulting feature is returned as a <em>CATFmFeatureFacade</em> 
type.</p>
<p>Please note that <code>oInstanceNovelFromStartUp</code> is initially created 
with only a credential, the <code>InstantiateIn</code> just binds the new feature 
to the facade. Thanks the credentials, the application can use <code>oInstanceNovelFromStartUp</code> 
to manage its attribute, or displays its display name:</p>
<pre class="code">CATUnicodeString NovelInstFromFeatName;
rc = oInstanceNovelFromFeature.<strong>GetDisplayName</strong>(NovelInstFromFeatName);</pre>
<p>Here <code>GetDisplayName</code> will not fail, since <code>oInstanceNovelFromStartUp</code> 
contains the accreditations to handle CAAOsmNovel feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Instantiate the New Feature"></a>Instantiate the Newly Created Feature</h3>
<p>The new feature created above, in turn serves as a reference for further instantiation, 
in accordance with the prototype-instance model [<a href="#References">1</a>].
</p>
<pre class="code">CATFmFeatureFacade oInstanceNovelFromFeature(MyCredential);
rc = oInstanceNovelFromStartUp.<strong>InstantiateIn</strong>(MyContainerFacade,oInstanceNovelFromFeature);</pre>
<p>The call to <code>InstantiateIn</code> method on <code>InstanceNovelFromStartUp</code>, 
further instantiates it. The return is <code>oInstanceNovelFromFeature</code>, a
<em>CATFmFeatureFacade</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Instantiation and Aggregation"></a>Instantiation and Aggregation</h3>
<p>Now we illustrate the call which instantiates a StartUp (or a feature) and also 
realizes the aggregation of the new feature, simultaneously.</p>
<p>First we create a StartUp facade for the <code>CAAOsmChapter</code> StartUp on 
similar lines, as we did earlier for the <code>CAAOsmNovel</code>.</p>
<pre class="code">
CATUnicodeString MyChapterStartUpType("`CAAOsmChapter`@`CAAOsmCatalogSU.CATfct`");
CATFmStartUpFacade<strong></strong> MyStartUpChapterFacade(MyCredentials, MyChapterStartUpType);
</pre>
<p>Next we create an object, which represents the attribute &quot;NovelChapter&quot; ( list 
of components) associated with the &quot;CAAOsmNovel&quot; StartUp. This attribute is valuated 
with the Chapter instances, for aggregating under the Novel.</p>
<pre class="code">CATFmFeatureKey MyKeyNovelChapter(&quot;NovelChapter&quot;);</pre>
<p>Then we call instantiation.</p>
<pre class="code">
CATFmFeatureFacade oFeatFacadeOnChapter(MyCredential);		
rc = MyStartUpChapterFacade<strong>.InstantiateUnder</strong>(MyContainerFacade,oInstanceNovelFromStartUp,
		                           MyKeyNovelChapter,<strong>oFeatFacadeOnChapter</strong>);</pre>
<p>The <code>InstantiateUnder</code> API of the <em>CATFmStartUpFacade</em> class 
involves</p>
<ol>
	<li>Instantiating a StartUp (<code>MyStartUpChapterFacade</code>) within a container 
	(<code>MyContainerFacade</code>, the first container)</li>
	<li>Aggregating the instantiated (aggregated) feature under an input (aggregating) 
	feature.
	<ol>
		<li>The argument, <code>oInstanceNovelFromStartUp</code>, is the feature 
		facade bound to the aggregating feature (Novel). This facade must contain 
		the accreditation to handle the feature. You cannot aggregate a feature 
		(i.e. modify one attribute of the aggregating feature) without to be authorized.
		</li>
		<li>The third argument is an attribute of the third argument. it can be 
		either a component, or a list of component. In this last case, the new feature 
		is added at the end of the list</li>
		<li><code>oFeatFacadeOnChapter</code>, a <em>CATFmFeatureFacade</em> type, 
		representing the feature facade on the newly created Chapter feature. Please 
		note that this feature facade was linked to the right credentials, during 
		its instantiation with a call to its parametrized constructor, which takes 
		a Credential, as input</li>
	</ol>
	</li>
</ol>
<p>An important observation is that the display name of the instantiated Chapter 
feature is suffixed with a number (traces included in the what does the UC do section). 
This enumerated suffix to a feature name is a characteristic typical to an aggregated 
features. This makes an aggregated feature distinct from a standalone instantiation. 
The &quot;Naming Features&quot; article [<a href="#References">5</a>] explains the policy 
defined for feature naming.</p>
<p>We finally retrieve the display name of the newly instantiated Chapter, aggregated 
under the Novel.</p>
<pre class="code">
CATUnicodeString ChptInstName;
rc = <strong>FeatFacadeOnChapter.GetDisplayName</strong>(ChptInstName);
if (FAILED(rc)) return 1;</pre>
<p>The <code>GetDisplayName</code>() method of the <em>CATFmFeatureFacade</em> class 
returns the display name of the associated feature. The call is invoked on <code>
FeatFacadeOnChapter</code>, a <em>CATFmFeatureFacade</em> type, on our new Chapter 
instance. Since this feature facade is associated with the correct credentials, 
this call is expected to succeed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Changing the Bound StartUp"></a>Changing the Bound StartUp</h3>
<p>We finally show how you can use the same StartUp facade to instantiate a feature 
from another latetype.</p>
<pre class="code">
rc = MyStartUpChapterFacade.<strong>BindTo</strong>(&quot;CAAOsmPublisher&quot;);
...
CATFmFeatureFacade oFeatFacadeOnPublisher(MyCredential);
rc = MyStartUpChapterFacade.<strong>InstantiateIn</strong>(MyContFacade,oFeatFacadeOnPublisher);
...</pre>
<p>The <code>Bindto()</code> method of the <em>CATFmStartUpFacade</em> class changes 
the latetype bind to the facade.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Epilog</h3>
<p>See the referenced article [<a href="#References">7</a>] for a detailed description 
of the steps involved to save the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case demonstrates the steps involved to instantiate a StartUp. The feature 
thus instantiated, is held as a reference, for further instantiation, in accordance 
with the Prototype-Instance model detailed in the &quot;Feature Modeler Overview&quot; article 
[<a href="#References">1</a>].</p>
<p>The Feature Modeler Secured Access mechanism ensures that the instantiation is 
possible only if the client owns the catalog and has the Feature infrastructure 
privileges on the container within which the features exist. An Accreditation object 
stores these client privileges, and is a bound to a facade objects, which are wrappers 
around the features (Feature, StartUp, Container), . Any operation on a feature 
invoked through its facade object succeeds, only if the associated Accreditation 
object grants the required authorization.</p>
<p>Finally the UC illustrates a very simple method to both instantiate a feature 
as well as realize its aggregation, with a single call to the InstantiateUnder method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAOsmTaOverview.htm">Feature Modeler Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmExtTaUnderstandingCredentials.htm">Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAFmExtTaApplicativeContainer.htm">Understanding Applicative 
		Container</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAOsmUcCatalogSU.htm">Creating StartUps in Catalogs</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmExtTaNamingFeatures.htm">Naming Features</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcCreateAndInstantiateTechnoRep.htm')">
		Creating PLM Technological Representation</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmExtUcAppliCont.htm">Working with Applicative Container</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAFmExtTaUnderstandingCatalogs.htm">Understanding StartUp 
		Catalog</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Nov 2009]</td>
		<td>Creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
