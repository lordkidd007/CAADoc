<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Managing Feature Events for View Refresh</title>
</head>

<body onload="createToc();highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Feature Events for View Refresh</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article gives a brief introduction to managing Feature Events. The 
		article explains the methodology of subscription to Events generated by 
		the Feature Modeler. In addition this article also gives an insight about 
		how this event based infrastructure provides a mechanism to customize the 
		code to match the requirements of the developer through a User-Defined class.</p>
		<p>Before reading this article, the user is expected to have good knowledge 
		about the Credentials &amp; Facades[<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#Feature Events concept">Feature Events Concept</a></li>
			<li><a href="#Subscriber Concept">Subscriber Concept</a></li>
			<li>
			<a href="#Subscribing to Feature Events - Infrastructure overview">Subscribing 
			to Feature Events - Infrastructure overview</a></li>
			<li><a href="#Managing Feature Events for View-Refresh">Managing Feature 
			Events for View-Refresh (User-defined class)</a></li>
			<li><a href="#In_Short">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>The Feature Modeler Events initiative aims at providing an Infrastructure and 
a set of APIs to allow customers to update their applicative data (particularly 
product view or rendering) using an event-based technology. Before, some Feature 
Modeler operations that used to cause modifications on the Feature Data Model were 
not able to reflect the changes implied by such operations on their own data. This 
was the reason to provide the event based technology which will take care of those 
necessary changes.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Feature Events concept"></a>Feature Events Concept</h2>
<p>Feature Modeler Events initiative aims at managing listener subscription for 
the dispatched Feature Modeler modification events for enabling appropriate refresh 
of associated views in GUIs. Whenever there is any modification in a feature, the 
two most important things expected by the end-user are : 1) Refresh of the 3D View 
2) Update the specification tree.</p>
<p>So in order to meet these basic requirements of the user, Feature Modeler Events 
have been created which is an Event-Based technology.<br>
An event is the elementary entity of the infrastructure. It is sent by the publisher 
and received by the subscriber, and contains information about the underlying feature 
modification.<br>
According to this technology, whenever there will be any modification to the feature, 
Feature Modeler will internally emit an event (through a Publisher).<br>
The type of this event will depend upon the type of modification of the feature.<br>
There are three types of modifications/events:<br>
i) Instantiated E.g. Instantiating a feature from start-up/reference feature<br>
ii) ChangeValue E.g. Setting a value to the feature/Changing the value<br>
iii) Remove e.g. Deleting the feature</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Subscriber Concept"></a>Subscriber Concept</h2>
<p>Subscriber, also called as the Receiver is the object which receives the event. 
Basically the Subscriber does the work of catching the relevant feature event and 
calling the User-Defined method from the User-defined class to be processed. Thus 
thanks to this concept, the user or the administrator is given the opportunity to 
change the way the method behaves. The publisher is managed by Feature Modeler and 
thus cannot be customized, but the subscriber can be and has to be customized, in 
order to define the tasks to process when receiving an event.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Subscriber Concept"></a>Subscribing to Feature Event<a name="Subscribing to Feature Events - Infrastructure overview"></a>s 
- Infrastructure overview</h2>
<p>This infrastructure has to be instantiated by the software components which uses 
it. It offers a set of APIs allowing a subscriber to register with the Feature Modeler 
publisher. The main objective is to provide CAA Applications the ability to process 
user-defined code on Event-based technology. In order to achieve this objective, 
this infrastructure paves the way to do so on Event based call to invoke user-defined 
code. It means that whenever there will be any kind of modification (please see 
different kinds of modifications also), Feature Modeler will initiate an event which 
the CAA developer catches. Once this is done, the CAA customer has to write his 
own method which will contain the code to be processed. Ref Fig.1</p>
<p>
<img alt="" src="images/CAAPstTaManagingFeatureEventsForViewRefresh_image1.jpg" width="815" height="456"></p>
<p>Steps for Subscription are as follows:</p>
<p><strong>1.</strong> The first step is to create the event subscriber. Actually, 
the event subscriber requires an event publisher to be created which can emit events 
on Feature modifications. Feature Modeler takes care of publishing the events for 
respective modifications</p>
<pre class="code">
...
<strong>CAAPstINFEventSubscriber</strong> *subscriber = new CAAPstINFEventSubscriber;
...
</pre>
<p><strong>2.</strong> Define his own class which includes a method, to be called 
at event reception. This method will contain the User-defined code. In this case 
we have written the code to Refresh the view</p>
<pre class="code">
...
class <strong>CAAPstINFEventSubscriber</strong>: public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;

public:
  void <strong>OnEvent</strong>(CATFmEvent &amp;iEvent); <span>// User defined method to Refresh your view (for example)</span>

private:
  int NbEvents; <span>// Statistics: number of events received</span>
}
...

<strong>Note:</strong> Note that the input argument to this method is a <strong><em>CATFmEvent</em></strong> object which will be automatically generated by Feature Modeler as of now.
</pre>
<p><strong>3.</strong> Subscribe to events likely to occur on all startups late 
types of a catalog with the <em>CATFmCatalogFacade::Subscribe( )</em> method.<br>
In this we first build the credentials object, then we build <em>CATFmCatalogFacade</em> 
object. At last call <em>Subscribe()</em></p>
<pre class="code">
...
	CATFmCredentials <strong>MyCredential</strong>;
	rc = MyCredential.<strong>RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,&quot;CAAPstProductStructure&quot;);
	rc = MyCredential.<strong>RegisterAsCatalogOwner</strong>(&quot;CAAPstINFCatalog.CATfct&quot;,&quot;CAAPstINFClientId&quot;);
	
	CATFmCatalogFacade <strong>CatalogFacade</strong> (MyCredential, &quot;CAAPstINFCatalog.CATfct&quot;);

<strong>	rc</strong> = CatalogFacade.<strong>Subscribe</strong>(*subscriber, (CATFmEventSubscriberMethod) &amp;CAAPstINFEventSubscriber::<strong>OnEvent</strong>);
	if ( FAILED(rc) ) return;
...

<strong>Note:</strong> The user-defined method given as input parameter to the Subscribe method has to be a CATFmEventSubscriberMethod.
In other words, it must have the right signature, namely:
void <strong>&lt;UserDefinedMethod&gt;</strong> (CATFmEvent &amp;);</pre>
<p>Now, In order to subscribe to the feature events, first of all we should know 
that the User-Defined method in this case is a Call-back method. So here we are 
going to write i.e. the class implementing the CATInit interface. Please refer to 
this article [<a href="#References">3</a>] to get a glance at the Implementation 
Use-case.</p>
<p>This Call-back method has <em>CATFmEvent</em> as its input argument. So once
<em>Subscribe( )</em> is called at the time of loading the applicative containers, 
it will then call the user-defined Call-Back method which will then take care of 
all the feature modifications taking place in the particular catalog for which we 
have defined the ownership (please refer to use-case for catalog ownership). So 
after subscription, for any feature modifications taking place, feature modeler 
will send an event, the Call-Back method will catch that event <em>(CATFmEvent)</em> 
and process the user-defined code.</p>
<p>
<img alt="" src="images/CAAPstTaManagingFeatureEventsForViewRefresh_image2.jpg" width="816" height="456"></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="VPM Product Occurrence Automation Model (Interface view)"></a>Managing 
Feature Events for View-Refresh<a name="Managing Feature Events for View-Refresh"></a> 
(User-Defined class)</h2>
<p>As of now, the goal of the event-based technology is to Refresh the view and 
update the Specification-tree interactively. Thanks to this technology, users are 
now able to immediately see the impact/changes taking place on the features.<br>
This is done just by writing the code for View Refresh inside the user-defined method. 
So whenever there is any modification in feature, the user-defined method is invoked 
and the code to refresh the view is processed. For relevant information you can 
refer to a use case presented in this reference article[<a href="#References">2</a>].<br>
The following UML sequence diagram summarizes the infrastructure mechanism:</p>
<p>
<img alt="" src="images/CAAPstTaManagingFeatureEventsForViewRefresh_image3.jpg" width="633" height="572">
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>Here the View-Refresh on the Product side happens when the user-defined method 
for view-refresh and specification tree update is executed. This code/method i.e. 
OnEvent ( ) method is written in the user defined class (in this case it is <em>
CAAPstINFEventSubscriber</em>).<br>
In this class we can use the methods of <em>CATFmEvent</em> class in order to find 
the feature event type i.e. whether the event emitted is of type Instanciation or 
ChangeValue or Remove, thanks to the method <em>GetType ( ).<br>
</em>Then, the method <em>Next( )</em> offers the possibility to iterate on impacted 
objects, when an event is received.<br>
The method <em>GetObject( )</em> allows to retrieve the object from which the Event 
has been emitted (source).<br>
The method <em>GetAttribute( )</em> allows to retrieve the attribute impacted by 
the modification, if any.</p>
<p>Here is an extract from this user-defined class <em>CAAPstINFEventSubscriber</em> 
for View-Refresh and Specification-tree update.</p>
<pre class="code">
...
	CATIModelEvents *piModelEvents = NULL;          
	rc = spFeature-&gt;QueryInterface(IID_CATIModelEvents,  (void**)&amp;piModelEvents);
...

Note: Here &#39;<strong>spfeature</strong>&#39; is a smart pointer to the modified feature and is retrieved by using the method GetFeature() of CATFmFeatureFacade</pre>
<p>Once the CATIModelEvents interface is queried, we proceed with view refresh notification 
and specification-tree update.</p>
<pre class="code">
....
	CATModify Notif (spFeature);
	piModelEvents -&gt; Dispatch(Notif); 
....

	CATIRedrawEvent_var spRedrawEvent = spFeature ;
	spRedrawEvent-&gt;Redraw();
....
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="In_Short">In Short</a></h2>
<p>Feature Events Infrastructure provides a very customizable technology to subscribe 
to the events emitted by Feature modeler upon any feature modifications (Instantiate 
or ChangeValue or Remove). It is customizable because on subscribing to these feature 
modeler generated events, the user-defined method is invoked where the CAA customer 
can write the code that he wishes to process.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaUnderstandingCredentials.htm">
		Understanding Credentials</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcINFMVCUpdate.htm')">
		Managing View Refresh</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcINFInitCont.htm')">
		Initializing the Applicative Container at Runtime</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [March 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
