<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>VPMEditor Customization</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>VPMEditor Customization</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to customize VPMEditor in connection with data 
		model customization.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPuiProd1 Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPuiProd1 Do</a></li>
					<li><a href="#How">How to Launch CAAPuiProd1</a></li>
					<li><a href="#Where">Where to Find the CAAPuiProd1 Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to:</p>
<ul>
	<li>Define default value or naming policy for product structure objects creation.</li>
	<li>Customize display name and panel content in term of attribute.</li>
	<li>Check assembly rules consistency.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPuiProd1 Use Case</h2>
<p>CAAPuiProd1 is a use case of the CAAProductStructureUI.edu framework that illustrates 
VPMEditor capabilities in term of customization. Interfaces implemented in this 
use case are part of PLMSessionInterfaces framework.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPuiProd1 Do</h3>
<p>Capabilities will be illustrated along following scenario:</p>
<ol>
	<li>Create &quot;BA1&quot; assembly using VPM Editor
		<p>The &quot;BA1&quot; assembly structure is displayed in following panel. 
		It can be created from scratch in VPMEditor workshop:</p>
		<ol>
			<li>Start VPM Editor workbench and rename the created Product using 
				Edit/Properties command.</li>
			<li>Insert in the root product a new Mechanical Product, giving the 
				product and associated 3DShape the &quot;Hood&quot; names.</li>
			<li>Insert in the root product a new Product, giving the product the &quot;Slider 
				BodyDetail&quot; name.</li>
			<li>Insert in the &quot;Slider BodyDetail&quot; product a new Mechanical 
				Product, giving the product and associated 3DShape the &quot;Door&quot; 
				names.</li>
			<li>Copy the &quot;Slider BodyDetail&quot; product and paste it again 
				in the root product.</li>
		</ol>
		<p>You will obtain inside VPMEditor:</p>
		<p>
		<img alt="VPM Editor" height="622" src="images/CAAPuiProd1_01.jpg" width="757"/></p>
	</li>
	<li>Define your creation preferences
		<p>The &quot;Creation Preferences&quot; section is part of the &quot;Identification&quot; 
		tab available in &quot;Tools / Options...&quot; menu. It allows to define 
		the preferred environment which will be chosen by the system when creating 
		new objects.</p>
		<p>
		<img alt="Change Preferences" height="123" src="images/CAAPuiProd1_02.jpg" width="494"/></p>
		<p>Here, we select &quot;Test_and_Try&quot; environment.</p>
	</li>
	<li>Insert a new &quot;Body assembly&quot; inside &quot;BA1&quot; assembly
		<p>Use &quot;Insert new product&quot; command to achieve this task. This 
		command will display a panel to valuate attributes of this product.</p>
		<p>
		<img alt="Insert Dialog Box" height="345" src="images/CAAPuiProd1_03.jpg" width="442"/></p>
		<p>You will learn in this use case where to define list of visible attribute 
		at creation time and how to give them a pre-valuation by implementing a 
		script containing your Business Logic. Here <em>View</em> atttibute is filled 
		by the pre-valuation mechanism linked to the creation Business Logic.</p>
		<p>Assembly becomes:</p>
		<p>
		<img alt="VPM Editor" height="622" src="images/CAAPuiProd1_04.jpg" width="757"/></p>
		<p>You will also learn where to define list of attributes taken into account 
		for the display name in the specification tree.</p>
	</li>
	<li>Change your creation preferences
		<p>Select &quot;BodyPartViews&quot; environment and set &quot;Default view&quot; 
		to &quot;BodyDetail&quot;.</p>
		<p>
		<img alt="Change Preferences" height="103" src="images/CAAPuiProd1_05.jpg" width="423"/></p>
	</li>
	<li>Insert a new &quot;Body part&quot; with a &quot;Body part representation&quot; 
		attached inside &quot;BA2&quot; assembly
		<p>Use &quot;Insert new mechanical product&quot; command to achieve this 
		task. Creation panel will look like:</p>
		<p>
		<img alt="Insert Dialog Box" height="272" src="images/CAAPuiProd1_06.jpg" width="880"/></p>
		<p>Assembly becomes:</p>
		<p>
		<img alt="Insert Dialog Box" height="622" src="images/CAAPuiProd1_07.jpg" width="757"/></p>
	</li>
	<li>Check assembly rules
		<p>We want to apply following rules for instance:</p>
		<ul>
			<li>Assembly only contains &quot;Product structure view&quot; or &quot;Body 
				Part view&quot; product.</li>
			<li>&quot;Body Part view&quot; product has no product child.</li>
			<li>Thickness must be between 0.5 and 1.5.</li>
		</ul>
		<p>To do that a command is provided as part of this use case to check consistency 
		of the assembly in session based on the rules above.</p>
		<p>&quot;Consistency check&quot; command is available in &quot;Use case 
		Prod1 toolbar&quot; toolbar.</p>
		<p>
		<img alt="VPM Editor" height="622" src="images/CAAPuiProd1_08.jpg" width="757"/></p>
		<p>Running this command on &quot;BA1&quot; product will lead to a report 
		looking like:</p>
		<p>
		<img alt="Check Report" height="172" src="images/CAAPuiProd1_09.jpg" width="471"/></p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPuiProd1</h3>
<p>To launch CAAPuiProd1, you will need to:</p>
<ol>
	<li>Set up the build time environment, then compile CAAPuiProd1 along with its 
		prerequisites[<a href="#References">1</a>]</li>
	<li>
		<p>Edit the <code>InstallRootFolder\CNext\code\dictionary\CAAProductStructureUI.edu.dico</code> 
		dictionary by uncommenting the #CAA# from the following lines:</p>
		<pre class="code">#CAA# CAAPuiProd1WorkshopAddinLT CATIPRDWorkshopAddin libCAAPuiProd1
#CAA# CAAPuiProd1WorkshopAddinLT CATIWorkbenchAddin libCAAPuiProd1</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code></li>
	<li>Start CATIA by executing <code>mkrun</code></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPuiProd1 Code</h3>
<p>The CAAPuiProd1 use case is made of several classes located in the CAAPuiProd1.m 
module of the CAAProductStructureUI.edu framework: <code>InstallRootFolder\CAAProductStrctureUI.edu\CAAPuiProd1.m\</code></p>
<p>Some resource file are also linked to this use case. They are available in :</p>
<p><code>InstallRootFolder\CAAProductStrctureUI.edu\CNext\resources\msgcatalog</code></p>
<p><code>and</code></p>
<p><code>InstallRootFolder\CAAProductStructureUI.edu\CNext\resources\knowledge\scripts</code>.</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPuiProd1:</p>
<ol>
	<li><a href="#Step1">Associate creation Business Logic to a customized type</a></li>
	<li><a href="#Step2">Implement pre-valuation mechanism</a></li>
	<li><a href="#Step3">Define masks</a></li>
	<li><a href="#Step4">Implement check consistency command</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Associate creation Business Logic to a customized type</h3>
<p>The Business Logic involved is a part of the Identification Initialization Business 
Logic.</p>
<p>The link to the initialization scripts is declared in the sample CAAVPMBodyPartViewsCustomization.CATRuleExit 
file.</p>
<pre class="code">&lt;Scripts&gt;
  &lt;Script OpeningID=&quot;PLMIdentificationInitialization&quot; Type=&quot;CAABodyPartView&quot; ScriptName=&quot;VPMViewsReference_BLInitialization&quot;&gt; 
  &lt;/Script&gt;
  &lt;Script OpeningID=&quot;PLMIdentificationInitialization&quot; Type=&quot;CAABodyRepView&quot; ScriptName=&quot;VPMViewsReference_BLInitialization&quot;&gt;
  &lt;/Script&gt;
&lt;/Scripts&gt;</pre>
<p>It references the same VPMViewsReference_BLInitialization.CATRule script implementation 
used for both environment <em>BodyPartViews</em> and <em>Test_and_Try</em>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implement pre-valuation mechanism</h3>
<p>Having a look at the content of the VPMViewsReference_BLInitialization.CATRule 
script, we can notice the way the initialization of <em>DefaultView</em> parameter, 
which is going to appear in panel as <em>Default view</em>, is performed.</p>
<pre>...
Let Prefix_default(STRING)
Let View_default(STRING)

Let Prefix(String)
Let View(STRING)
...
Prefix_default=&quot;Id&quot;
View_default=&quot;Unset&quot;

...
View_default=BuildMessageNLS(&quot;VPMViewsCusto&quot;,&quot;ViewDefault&quot;)

...
/*retrieve &quot;DefaultView&quot; parameter setting*/
if ( Parameters-&gt;HasAttribute(&quot;ViewDefault&quot;) == true ) {
  View_default=Parameters-&gt;GetAttributeString(&quot;ViewDefault&quot;)
}

...
   View=View_default 

...
if ( ThisObject-&gt;HasAttribute(&quot;E_viewName&quot;) == true ) {
   ThisObject-&gt;SetAttributeString(&quot;E_viewName&quot;,View)
}
...</pre>
<p>The &quot;E_viewName&quot; parameter is given its initial value, either from &quot;ViewDefault&quot; 
creation parameter value, or from a default value defined in a message file. This 
value will be displayed in the creation panel.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Define masks</h3>
<p>Masks allow to define the content in terms of attributes of most of the panel 
of VPMEditor and also to drive the content of display name in specification tree 
[<a href="#References">2</a>].</p>
<p>New product and representation, insert product and representation content is 
driven by <em>Create</em> mask and edit properties by <em>Write</em> mask.</p>
<p>Display name in specification tree can also be customized. Display name is built 
by concatenation of attributes values. Customization of display name is shared by 
VPM Editor and VPM Navigator. Mask is a way to define the list of attribute to take 
into account whne building display name. Mask dedicated to this task is <em>Tree</em> 
mask.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Implement check consistency command</h3>
<p>Adding a new toolbar and command to the VPM Editor workbench will not be detailed 
here, please see related use case [<a href="#References">3</a>]. In this use case 
it is performed thanks to <em>CAAPuiProd1WorkshopAddin</em> class.</p>
<p>We will focus on the content of the command itself which is <em>CAAPuiProd1CheckCmd</em> 
class. An additional class is used to display the report: <em>CATProd1ReportPanel</em>. 
It only contains some basic usage of <em>Dialog</em> framework, we won't detail 
it here.</p>
<pre class="code">...
class CAAPuiProd1CheckCmd: public CATStateCommand 
{

// Allows customization/internationalization of command's messages
// ---------------------------------------------------------------
DeclareResource(CAAPuiProd1CheckCmd , CATStateCommand )

public:
CAAPuiProd1CheckCmd();

virtual ~CAAPuiProd1CheckCmd();

/**
* Defines command automata (states, transitions and agents).
*/
void BuildGraph();


private:
CATBoolean Check( void *data);
void PerformChecks(CATBaseUnknown *iObj);
CATUnicodeString GetAlias(CATBaseUnknown *iObj);

CATPathElementAgent *_ObjAcq;
CATDialogAgent *_ReportEnd, *_ReportClose;

CATProd1ReportPanel *_ReportPanel;
};
...</pre>
<p><em>CAAPuiProd1CheckCmd</em> is a state command [<a href="#References">4</a>].</p>
<pre class="code">...
void CAAPuiProd1CheckCmd::BuildGraph()
{
 //States creation
 CATDialogState * InitialState = GetInitialState(&quot;Acquisition&quot;);
 CATDialogState * ReportState = AddDialogState(&quot;Report&quot;);

 //Acquisition agent
 _ObjAcq= new CATPathElementAgent(&quot;ObjectSelection&quot;,&quot;CATIPLMProducts&quot;,CATDlgEngValuedFromCSO|CATDlgEngMultiAcquisition);
 InitialState-&gt;AddDialogAgent(_ObjAcq);

 //Panel creation
 CATApplicationFrame *AFrame = CATApplicationFrame::GetFrame();
 if(AFrame)
  _ReportPanel = new CATProd1ReportPanel(AFrame-&gt;GetMainWindow());

 if (_ReportPanel)
  {
   _ReportEnd= new CATDialogAgent(&quot;ReportEnd&quot;);
   _ReportEnd-&gt;AcceptOnNotify(_ReportPanel, _ReportPanel-&gt;GetDiaCLOSENotification());
   ReportState-&gt;AddDialogAgent(_ReportEnd);
   _ReportClose= new CATDialogAgent(&quot;ReportClose&quot;);
   _ReportClose-&gt;AcceptOnNotify(_ReportPanel, _ReportPanel-&gt;GetWindCloseNotification());
   ReportState-&gt;AddDialogAgent(_ReportClose);

   //Transition creation
   AddTransition(InitialState, ReportState,
                 IsOutputSetCondition ( _ObjAcq),
                 Action ((ActionMethod) &amp;CAAPuiProd1CheckCmd::Check));
                 AddTransition(ReportState, NULL,
                 OrCondition(IsOutputSetCondition(_ReportEnd),IsOutputSetCondition(_ReportClose)));
  }  
}
...</pre>
<p><em>BuildGraph</em> method contains the graph description. Two states were defined: 
one for user selection of starting node in specification tree and the second one 
for report display. On user selection in the tree, <em>check</em> method is called. 
This method just retrieve the selection and launch the checks which are contains 
in <em>PerformChecks</em> method. <em>PerformChecks</em> method is a recursive one.</p>
<pre class="code">...
void CAAPuiProd1CheckCmd::PerformChecks(CATBaseUnknown *iObj)
{
 if (!iObj)
  return;

  CATUnicodeString TypeAlias;
  CATIPLMComponent * Component = NULL;
  if (SUCCEEDED(iObj-&gt;QueryInterface(IID_CATIPLMComponent,(void**)&amp;Component)))
  {
    CATIAdpType * AdpType = NULL;
    if (SUCCEEDED(Component-&gt;GetAdpType(AdpType)))
    {
      CATIType * oKweType = NULL;
      CATPLMTypeServices::GetKweTypeFromAdpType(AdpType, oKweType);
      if (oKweType)
      {
        TypeAlias=oKweType-&gt;Name();
        oKweType-&gt;Release(); oKweType=NULL;
      }
    }
    if (AdpType)
    {
      AdpType-&gt;Release(); AdpType = NULL;
    }
    Component-&gt;Release();Component=NULL;
  }

...</pre>
<p>First we retrieve the PLM type of the input object. CATIPLMComponent interface 
is implemented by the product and allows us to retrieve the CATIAdpType, the CATIType 
and finally the type name as string.</p>
<pre class="code">...
CATIPLMProducts * prd = NULL;
if (SUCCEEDED(iObj-&gt;QueryInterface(IID_CATIPLMProducts,(void**)&amp;prd)))
 {
  int nbChildren=0;
  prd-&gt;Count(nbChildren);
...</pre>
<p>As product, the input object inplements also CATIPLMProducts. This interface 
allows us to know the number of product instantiated into this one.</p>
<pre class="code">...
<strong>if (TypeAlias==&quot;CAABodyPartView&quot;)
 {
  if (nbChildren)
   {
    if (_ReportPanel)</strong>
      {
       CATUnicodeString Message(&quot;BodyPart should not have children.&quot;);
       CATUnicodeString Name(GetAlias(iObj));
       _ReportPanel-&gt;AddInfo(Name,Message);
     }
   }
...</pre>
<p>We run checks on <em>CAABodyPartView</em> product. First is to verify that there 
is no product instantiated inside this one. Error message is added to the report 
whether the rule is not observed.</p>
<pre class="code">...
<strong>CATICkeObject_var hCkeObject = iObj;
if (!! hCkeObject)
{
  double thickness=0.0;
  if(SUCCEEDED( CATCkeObjectAttrReadServices::GetValueAsReal(hCkeObject, CATUnicodeString(&quot;E_thickness&quot;), thickness)))
  {</strong>
<strong>    if ((thickness&lt;0.5 || thickness&gt;1.5) &amp;&amp; _ReportPanel)</strong>
     {
      CATUnicodeString Message(&quot;Invalid thickness (&quot;);
      CATUnicodeString val;
      val.BuildFromNum(thickness);
      Message.Append(val);
      Message.Append(&quot; is not a good value). It must be between 0.5 and 1.5.&quot;);
      CATUnicodeString Name(GetAlias(iObj));
      _ReportPanel-&gt;AddInfo(Name,Message);
    }
...</pre>
<p>Second check for <em>CAABodyPartView</em> is about thickness value. CATICkeObject 
is a knowledge interface allowing access to PLMAttribute values of product object. 
Here also error message is added to the report whether the rule is not observed 
(thickness between 0.5 and 1.5).</p>
<pre class="code">...
else if (TypeAlias==&quot;CAAVPMReferenceView&quot;)
 {
  if (nbChildren)
   {
    CATIPrdIterator * pIterator = NULL;
    if (SUCCEEDED(prd-&gt;Iterator(pIterator, IID_CATIPrdObject )))
     {
      CATIPrdObject * child = NULL;
      while (SUCCEEDED(pIterator-&gt;Next((CATBaseUnknown *&amp;)child)) &amp;&amp; child)
       {
        CATBaseUnknown *ref=NULL;
        if (SUCCEEDED(child-&gt;GetReferenceObject(ref)) &amp;&amp; ref)
         {
          PerformChecks(ref);
...
{
else
{
 if (_ReportPanel)
  {
   CATUnicodeString Message(&quot;It is not a BodyPart or a BodyAssembly.&quot;);
   CATUnicodeString Name(GetAlias(iObj));
   _ReportPanel-&gt;AddInfo(Name,Message);
  }
}
...</pre>
<p>For CAAVPMReferenceView, there is only one rule to verify: only CAAVPMReferenceView 
and CAABodyPartView should be instantiated into it. Thanks to <em>CATIPrdIterator</em> 
we are going to navigate through instances aggregated into this product. Then, for 
each instance we retrieve the reference and call PerformChecks ont it recursivly. 
As soon as the product is nt of type CAAVPMReferenceView and CAABodyPartView we 
will reach last else and add an error in the report.</p>
<pre class="code">...
CATUnicodeString CAAPuiProd1CheckCmd::GetAlias(CATBaseUnknown *iObj)
{
 CATUnicodeString Alias;
 CATIAlias *pAlias = NULL;
 if (iObj &amp;&amp; SUCCEEDED(iObj-&gt;QueryInterface(IID_CATIAlias,(void**)&amp;pAlias)))
  {
   Alias=pAlias-&gt;GetAlias();
   pAlias-&gt;Release();pAlias=NULL;
  }

 return Alias;
}
...</pre>
<p><em>GetAlias</em> method is used to retrieve the &quot;external name&quot; of 
the object in order to put in inteh report. This is handled thanks to CATIAlias 
interface on the product object.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows customization capabilites of VPM Editor around PLM attributes.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllMask.htm">
		PLM Security Masks Overview</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPuiUcPrsConfigAddin.htm">Adding a Toolbar to the VPM Editor 
		Workbench</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">
		Getting Started with State Dialog Commands</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Feb 2008]</td>
		<td>Update on implementation and usage of knowledge interfaces</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Sep 2008]</td>
		<td>Update with Initialization Business Logic</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
