<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating New Product Reference With PLM New Services</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating New Product Reference With PLM New Services</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article illustrates about creating new Product reference using PLM 
		New services. Then UC retrieves newly created Product Reference and load 
		it in Editor.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPuiCreateAndEditNewProdRef Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPuiCreateAndEditNewProdRef 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPuiCreateAndEditNewProdRef</a></li>
					<li><a href="#Where">Where to Find the CAAPuiCreateAndEditNewProdRef 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In This Use case we learn about creating new PLM Component using PLM New services. 
In this process we learn abut implementing the Listener &amp; how to Associate it 
with New Engine.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPuiCreateAndEditNewProdRef Use Case</h2>
<p>CAAPuiCreateAndEditNewProdRef is a use case of the CAAProductStructureUI.edu 
framework that illustrates the ProductStructureUI framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPuiCreateAndEditNewProdRef Do</h3>
<p>In standard usage, a new PLM Component is created with a State Command, which 
typically drives him through the following states:</p>
<ul>
	<li>Choose the PLM Entity type for creation.</li>
	<li>Input the PLM Attributes associated with this type.</li>
</ul>
<p>The CAA Openness provided allows an end-user to customize this State Command, 
so that the PLM Entity type for creation is pre-determined. The customization scenario, 
thus launches the standard state command but directly from the 2nd state, prompting 
an end-user to input the PLM Attributes for creation.</p>
<p>Thus, when the user activates the &quot;<strong>CAA-Create New ProdRef</strong>&quot; 
integrated within &quot;<strong>CAAPLMCommandsToolbar</strong>&quot; toolbar in 
the <strong>General Workshop</strong> in <strong>CATIA</strong>, as indicated, the 
dialog panel [<a href="#Fig1">Fig. 1</a>] appears.</p>
<p>This panel allows to feed in PLM Attribute values (these PLM attributes appear 
depending on the PLM Security mask) for the creation of the New Product reference.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Dialog Panel for Creating New Product Reference
	</caption>
	<tr>
		<td>
		<img alt="Dialog Panel" height="354" src="images/CAAPuiCreateAndEditNewProdRef_image2.jpg" width="446"/></td>
	</tr>
</table>
<p>On Finish button click of the above dialog panel new object gets created. The 
created PLM Product is visible, and editable inside in the VPLM Physical Editor 
as shown in [<a href="#Fig2">Fig. 2</a>] .</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: Newly Created Product Reference Loaded in 
	Editor</caption>
	<tr>
		<td>
		<img alt="Product Reference" height="129" src="images/CAAPuiCreateAndEditNewProdRef_image3.jpg" width="324"/></td>
	</tr>
</table>
<p>Please note that before loading the Product reference in editor it exist in session 
(like dead object), we cannot access this object interactively, means we cannot 
propagate it into the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPuiCreateAndEditNewProdRef</h3>
<p>To launch CAAPuiCreateAndEditNewProdRef:</p>
<ol>
	<li>Set the current folder to <code>InstallRootFolder\CAADoc\CAAProductStructureUI.edu</code></li>
	<li>Set up the build time environment and build the CAAPuiCreateAndEditNewProdRefAddin.m 
		and CAAPuiCreateAndEditNewProdRefCmd.mmodule (see reference
		[<a href="#References">2</a>])</li>
	<li>Edit the CNext/code/dictionary/CAAProductStructureUI.edu.dico dictionary 
		by uncommenting the #CAA# from the following lines:
		<pre class="code">#CAAPuiCreateAndEditNewProdRef use case
#CAA# CAAPuiCreateAndEditNewProdRefAddinType	CATIAfrGeneralWksAddin	libCAAPuiCreateAndEditNewProdRefAddin
#CAA# CAAPuiCreateAndEditNewProdRefAddinType  CATIWorkbenchAddin      libCAAPuiCreateAndEditNewProdRefAddin</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code></li>
	<li>Start CATIA by executing <code>mkrun</code></li>
	<li>Start the Physical Product Design App</li>
	<li>Click on the command &quot;<strong>CAA-Create New ProdRef</strong>&quot;
		<p><img alt="" height="484" src="images/CAAPuiCreateAndEditNewProdRef_image1.jpg" width="715"/></p>
	</li>
	<li>New Product Reference creation panel will appear.</li>
	<li>Fill the Attribute values and click on finish button.</li>
	<li>CATIA displays newly created object appeared inside the Editor.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPuiCreateAndEditNewProdRef Code</h3>
<p>The CAAPuiCreateAndEditNewProdRef use case is located in the CAAPuiCreateAndEditNewProdRefCmd.m 
module of the CAAProductStructureUI.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureUI.edu\CAAPuiCreateAndEditNewProdRefCmd.m</code></p>
<p>For the Add-In, it includes the CAAPuiCreateAndEditNewProdRefAddin class, located 
in the CAAPuiCreateAndEditNewProdRefAddin.m module of the CAAProductStructureUI.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureUI.edu\CAAPuiCreateAndEditNewProdRefAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four steps in CAAPuiCreateAndEditNewProdRef:</p>
<ol>
	<li><a href="#Step1">Getting PLM Engine to Access PLM New Capability</a></li>
	<li><a href="#Step2">Setting the Type of Object to Be Created</a></li>
	<li><a href="#Step3">Creating Implementation of Listener</a></li>
	<li><a href="#Step4">Sending the Listener to the Engine and Executing PLM New</a></li>
</ol>
<p>We will now detail each of those sections:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Getting PLM Engine to Access PLM New Capability</h3>
<p>This UC is One shot shared command. We first retrieve the PLM New Engine.</p>
<pre class="code">...
CATStatusChangeRC CAAPuiCreateAndEditNewProdRefCmd::Activate(CATCommand *iFromClient, 
						       CATNotification *iEvtDat)
{
   CATIPLMNewEnginePublic_var spPLMNewEngine;
   if (SUCCEEDED(hr)) hr = CATPLMNewServicesPublic::GetPLMNewEnginePublic (spPLMNewEngine);
   ...
}</pre>
<p>Call to CATPLMNewServicesPublic::GetPLMNewEnginePublic gives pointer of CATIPLMNewEnginePublic 
Type, which gives access to PLM New capability.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Type of Object to Be Created</h3>
<p>For New Creation PLM Entity type is pre-determined. This Usecase is illustrating 
PLM New for Product Reference. so PLM Entity Type is set to <strong>VPMReference</strong>.</p>
<pre class="code">   ... 
     CATUnicodeString usPLMType = "VPMReference";
     CATIType_var spTypeOnObject = NULL_var;

     hr =  CATCkePLMNavPublicServices::RetrieveKnowledgeType (usPLMType, spTypeOnObject);
     if(SUCCEEDED(hr))
     {
        if (NULL_var == spTypeOnObject) hr = E_UNEXPECTED;
        hr = spPLMNewEngine -&gt;SetType (spTypeOnObject);
     }</pre>
<p>The call to CATCkePLMNavPublicServices::RetrieveKnowledgeType uses the PLM Type 
String &amp; retrieve the knowledge Type CATIType_var. This Type is used for specifying 
the PLMType For Creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating Implementation of Listener</h3>
<p>We need to create Own implementation for <strong>CATIPLMNewEngineListenerPublic
</strong>.</p>
<p>There are two ways for implementing an interface. either user can implement this 
interface on same component or create new component. In this Usecase ,we are illustrating 
implementation on the same component.</p>
<pre class="code"> HRESULT CAAPuiCreateAndEditNewProdRefCmd::AfterCreation(CATICkeObject_var&amp; ispCreatedCkeObject)
{
    ... 
    if (NULL_var != ispCreatedCkeObject) rc = S_OK;
    
    CATUnicodeString usObjectName;
    if(SUCCEEDED (rc))  rc = ispCreatedCkeObject -&gt;GetLogicalName (usObjectName);
   
    if(SUCCEEDED(rc))
    {
      cout&lt;&lt;&quot; Name of the component is : " &lt;&lt;usObjectName.ConvertToChar();
    }
    return rc;
}</pre>
<p>we are able to access the newly created data through CAAPuiCreateAndEditNewProdRefCmd::AfterCreation 
method. It is retrieved as CATICkeObject. This method is called within CATIPLMNewEnginePublic::StartNew( 
) , when Component is successfully created.</p>
<p>Note: Call to AfterCreation method is handled by PLM New Engine. No need to call 
this method explicitly.</p>
<pre class="code">HRESULT CAAPuiCreateAndEditNewProdRefCmd::CancelCreation()
{
	HRESULT rc = E_FAIL;
	cout&lt;&lt;&quot; CAAPuiCreateAndEditNewProdRefCmd::CancelCreation"&lt;&lt; endl;
	return rc;
}</pre>
<p>This method is called within CATIPLMNewEnginePublic::StartNew( ) ,When Component 
Creation is canceled by User.</p>
<p>Note: Call to CancelCreation method is handled by PLM New Engine. No need to 
call this method explicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Sending the Listener to the Engine and Executing PLM New</h3>
<p>In this Usecase we retrieve the implementation of <strong>CATIPLMNewEngineListenerPublic
</strong>to associate it with the New Engine.</p>
<pre class="code">...
      if(SUCCEEDED(hr)) hr = this -&gt; QueryInterface (IID_CATIPLMNewEngineListenerPublic, (void **) &amp;piPLMNewEngineListener);
				
      if (SUCCEEDED(hr) &amp;&amp; NULL != piPLMNewEngineListener)
      {
	hr = spPLMNewEngine -&gt; AssociateListener (piPLMNewEngineListener);
	if(SUCCEEDED(hr))  hr = spPLMNewEngine -&gt; StartNew ();
      }</pre>
<p>In this Case we have implemented the Listener interface on the same component, 
so we can retrieve it by Query Interface on <strong>&quot;this&quot;</strong>. Send 
Listener to the Engine &amp; Execute the PLM New. we can see the new Product Reference 
in interactive CATIA as shown in [Fig. 2].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort">In Short</a></h2>
<p>This use case illustrates about customization of the State command for the new 
PLM entity creation. As we could see in interactive normal CATIA PLM Component creation 
is two stage process in first stage we select the PLM Component type and in second 
stage actual PLM Component creation method get launched according to selection. 
Here in this UC we illustrates about hard coding first stage for Product Reference 
and creating command using PLM new services.</p>
<p>When we launch this UC (one shot command) command will internally creates a New 
Engine &amp; Associate a Listener with it.</p>
<p>In the call of Activate we get the handle for created component. Here, It is 
a Product Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References">References</a></h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPuiUcPrsConfigAddin.htm">Adding a Toolbar to the Product 
		Structure Workshop</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History">History</a></h2>
<table class="history">
	<tr>
		<td>Version: 1 [Mar 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
