<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Logical 2D Picture Representation Reference</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


<style type="text/css">
.style1 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
</style>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Logical 2D Picture Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>CAALmiCreate2DPictureLglRepRef<b> </b></code>
      use case. The objective of the UC is to illustrate the creation of a 
		Logical 2D picture Representation Reference. It further opens the Logical 
		Reference and aggregates the newly created Logical 2D Picture Rep Ref under it.
		      <p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiCreate2DPictureLglRepRef Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiCreate2DPictureLglRepRef do</a></li>
            <li><a href="#How">How to launch CAALmiCreate2DPictureLglRepRef</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiCreate2DPictureLglRepRef</a><a href="#Where"> code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>


<p>You will learn :</p>
<ul>
	<li>Creation of a Logical 2D picture Representation Reference</li>
		<li>Aggregate the newly created Logical 2D Picture Rep Ref under the loaded Logical Reference</li>
	</ul>
	
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiCreate2DPictureLglRepRef Case</h2>
<p> <code>CAALmiCreate2DPictureLglRepRef </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp;
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiCreate2DPictureLglRepRef Do</h3>
<p>The use case illustrates the creation of a Logical 2D picture Representation Reference. 
It further opens the logical reference and then aggregates the newly created Logical 2D Picture Rep Ref under the loaded Logical reference.</p>
<table>
	<caption align="center"><a name="Fig.1"></a>Fig.1 Logical Reference aggregating a Logical 2D Picture Rep Ref </caption>
	<tr>
		<td>
		<img src="images/CAALmiCreate2DPictureLglRepRef_Fig1.jpg"></td>
	</tr>
</table>
<p> <a href="#Fig.1">Fig.1</a> above shows a Logical Reference(<strong>Logical1</strong>) aggregating a logical 2d Picture Rep Instance(<strong>Bluehills.1</strong>) under it.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiCreate2DPictureLglRepRef</h3>
<p>To launch <code>CAALmiCreate2DPictureLglRepRef</code>, you will need to set up the build time
environment, then compile <code>CAALmiCreate2DPictureLglRepRef<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot;CAALmiCreate2DPictureLglRepRef Repository Server User 
Password SecurityCtx PLMType 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPicturePath IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13"  >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Designer ( as the use case does modify the PLM Data)</o:p>
              </td>
		</tr>
		
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>		
		
<tr>
			<th> iPicturePath </th>
			<td>A path corresponding to a picture file</td>
		</tr>

  <tr>
    <th >IDAttribute1*<td >Identification attribute name for opening Root</td>
  </tr>
		
		 <tr>
    <th >AttrValue1*<td>Identification attribute name value for opening Root</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p>You can directly execute this use case if you know how to locate your own component. If not, you can import a 3D XML file supplied in the CAALogicalModelerUseItf.edu framework .The input Logical model is retrieved by importing <code>CAALmiOpenLogicalRef</code>.<a><code>3dxml</code></a> 
file from the <a><code>CAALogicalModelerUseItf.edu</code></a> fwk.</p>
<table >
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData\</code>
		<code>CAALmiOpenLogicalRef.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">2</a>] is the 
directory where the CAA CD-ROM is installed.</p>

<p align="left">This 3D XML file contains the root Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiOpenLogicalRef_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiCreate2DPictureLglRepRef
Code</h3>
<p>The <a><code>CAALmiCreate2DPictureLglRepRef</code></a> use case is located in the
<a><code>CAALmiCreate2DPictureLglRepRef.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreate2DPictureLglRepRef.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAALmiCreate2DPictureLglRepRef</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Create2DPicRepref">Create Logical 2D Picture Representation Reference</a></li>
		
	<li><a href="#OpenLglRef">Open the Logical Reference</a>
			
	</li>
	<li>
    <a href="#Associate">Aggregate the newly created Logical 2D Picture Rep Ref under the loaded Logical Reference</a>
  </li>

  <li>
    <a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiCreate2DPictureLglRepRef<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it&nbsp; 
involve the modification of the PLM data, So a Designer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">3</a>] delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Create2DPicRepref"></a>Create Logical 2D Picture Representation Reference</h3>


<p>To create the Logical 2D Picture Rep Ref, we require a factory object. </p>
<p>In this step, we begin with retrieving a pointer on the factory to create the logical 
representation reference. The factory interface pointer retrieved here is <i>CATILogRepresentationReferenceFactory 
   </i> type.  </p>

<pre class="code">
...
  <strong> CATILogRepresentationReferenceFactory</strong> *piLogicalRepRefFactory = NULL; 
   hr = <strong>CATLogFactoriesProvider::GetRepresentationReferenceFactory</strong>(piLogicalRepRefFactory);
...
</pre>
<p>The 
	retrieved factory interface pointer
   is then used to create the Logical 2D Picture logical Rep Ref.</p>
<pre class="code"> 
...
    CATILog2DPictureRepReference *opiLgl2DPictureRepRef=NULL;
    CATUnicodeString iPicturePath(iArgv[7]);
    CATListValCATICkeParm_var iUselesslist;
    hr= piLogicalRepRefFactory-&gt;<strong>CreateWith2DPicture</strong>(NULL_var, 
  					  NULL, 
					  iUselesslist,
					  iPicturePath,
					  opiLgl2DPictureRepRef);
...
</pre>

 <p>The method <code>CATILogRepresentationReferenceFactory::CreateWith2DPicture</code> is used with the following input arguments:</p>
   <ul>
   <li><code>NULL_var</code> , First argument is <em>CATIType, </em>The Creation API is 
	specific so it internally takes input for Logical Repref creation.<em> </em></li>
	<li><span class="style1">NULL</span> is a <i>CATIAdpEnvironment</i> pointer 
	and we are providing it as NULL this means API will take current set 
	Environment as an input. </li>
		<li><code>UselessList</code> is a none used input argument.</li>
     <li><code>iPicturePath, </code> A CATUnicodeString type, A path corresponding to a picture file
.</li>

     <li><code>opiLgl2DPictureRepRef</code>,CATILog2DPictureRepReference type, an output argument which contains pointer on the created 
		Logical 2D Picture Rep Ref </li>
   </ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="OpenLglRef"></a>Open the Logical Reference</h3>
<p>Opening the Logical Reference fundamentally involves </p>
<ul>
	<li>Retrieve the Logical Reference to be opened, from an underlying database</li>
	<li>Open the Logical Reference in session</li>
	
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Retrieve the Logical Ref"></a>Retrieve the Logical Reference to be opened, from an underlying database</h4>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference to be opened.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
		<li>Build an Identification Attribute-Value set </li>
		<li >Retrieve the Knowledge Type of Logical Reference to be opened. The 
		key input for this is the PLMType of the component to be opened.</li>
		<li>Run Query and retrieve the Identificator of the Logical Reference from the 
	underlying database</li>
	</ol>
<p style="height: 8px"> The implementation details of Retrieving the Identificator of the PLM Object providing its ID Set as an input , is described in
the article [<a href="#References">4</a>] .</p>
<p>The Logical reference identificator (retrieved in this section) is further used to open 
the Logical reference [<a href="#References">6</a>]. </p>
<script type="text/javascript">insertLinkToTop();</script>



<h4><a name="Open the Logical Reference"></a>Open the Logical Reference in session</h4>
<p>Here we will open the Logical reference using the identificator (retrieved 
just above).</p>
<pre class="code">
...
    CATIAdpPLMIdentificator* opiAdpIdentifierOnRootLglRef= NULL;
    ...
    <strong>CATOmbLifeCycleRootsBag</strong> Bag;
    <strong>CATAdpOpener</strong> opener(Bag);
    <strong>CATILogReference</strong> *piLogRefOnComp= NULL;
    hr= opener.<strong>CompleteAndOpen</strong>(opiAdpIdentifierOnRootLglRef,IID_CATILogReference, (void**) &amp;<strong>piLogRefOnComp</strong>);
...</pre>
<p>The logical reference opened in this step is further used to aggregate the 
newly created Logical 2D Picture Rep Ref under it, whose implementation details are given in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Associate"></a>Aggregate the newly created Logical 2D Picture Rep Ref under the loaded Logical Reference</h3>
<p>In this step, we will aggregate the newly created Logical 2D Picture Rep Ref under the loaded Logical Reference. For this , we will first retrieve the <i>CATILog2DPictures </i>
interface pointer on the logical reference (opened in the previous step [<a href="#Open the Logical Reference">#</a>] 
).</p>
<pre class="code">
...
    CATILog2DPictures *ipLog2DPicturesOnLglRef=NULL;
    hr= piLogRefOnComp-&gt;QueryInterface(IID_CATILog2DPictures, (void **)&amp;ipLog2DPicturesOnLglRef);
    ...
    hr= ipLog2DPicturesOnLglRef-&gt;<strong>Associate2DPicture</strong>(opiLgl2DPictureRepRef);
...
</pre>
<p> Next, we make a call to the method<code> CATILog2DPictures::Associate2DPicture</code> providing, the newly created 
Logical 2D Picture rep ref as an input. 
This will aggregate the newly created Logical 2D Picture Rep Ref under the loaded Logical Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreate2DPictureLglRepRef </code>use case ends by simply closing the PLM 
session [<a href="#References">3</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case basically illustrates the creation of a Logical 2D picture Representation Reference. It further opens the Logical 
		Reference and aggregates the newly created Logical 2D Picture Rep Ref under it.
</p>
<p>It also demonstrates the usage of the Logical APIs in the steps involved to 
create a new Logical 2D Picture Rep Ref and to aggregate it under the loaded Logical 
Reference. These are:</p>
<ul>
	<li><code>CATILogRepresentationReferenceFactory::CreateWith2DPicture</code> to 
	create a Logical 2D Picture Rep Ref</li>
	<li><code>CATILog2DPictures::Associate2DPicture</code> 
	to aggregate the Logical 2D Picture rep ref under the logical reference</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td>[1] </td>
       <td>
       <a href="CAALmiTaLogical2DLayout.htm">
       Logical 2D Layout - Technical Article</a></td>
     </tr>

   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[3]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
  </tr>
  <tr>
       <td valign="top">[4]</td>
       <td>
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">
		Understanding PLM Environment</a></td>
     </tr>
 <tr>
       <td valign="top">[5]</td>
       <td>
       <a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
     </tr>

	<tr>
       <td valign="top" height="12">[6]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>

	<tr>        
        <td valign="top" height="12">[7]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	
     
   	<tr>
       <td valign="top" height="12">[8]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
    	
 
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Jan 2010] </td>
    <td valign="top"> Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


