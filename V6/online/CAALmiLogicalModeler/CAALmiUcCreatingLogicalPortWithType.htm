<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Logical Port With Type</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

<style type="text/css">
.style1 {
	border-color: #c0c0c0;
	border-width: 0;
}
.style2 {
	text-align: left;
}
</style>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1" style="height: 32px">
		<h1>Creating Logical Port With Type</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This use case mainly illustrates creation of Logical port associated 
		with Logical 
		System Type.
      <ul>
       
		<li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiCreatingLogicalPortWithTypeUse Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiCreatingLogicalPortWithType do</a></li>
            <li><a href="#How">How to launch CAALmiCreatingLogicalPortWithType</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiCreatingLogicalPortWithType</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learnings from this Use Case are:</p>
<ul>
	<li>Creation of New Logical Port which is associated with Logical System 
	Type </li>
	<li>Creation of direction attribute for Logical Port</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiCreatingLogicalPortWithType Use Case</h2>
<p> <code>CAALmiCreatingLogicalPortWithType </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiCreatingLogicalPortWithType Do</h3>
<p>It is possible to 
create Logical Port without Logical System Type. But here in this use case we are 
creating Logical port associated with Logical System Type.&nbsp; </p>
<p>Initially we open the Logical reference under which we want to create Port. 
</p>
<p>Then we create Port beneath opened Logical reference.</p>
<p>For creation of Logical Port associated with Type requires two inputs as 
follows, these inputs we create in this use case before creation of Logical Port</p>
<ul>
	<li>Logical System Type Reference, this object we create in this use case. Creation of Logical System Type reference 
	is detailed in [<a href="#References">4</a>] 
	use case. This also show how to create an Interface (Port's evolution).&nbsp;</li>
	<li>The direction attribute (<em>V_Direction</em>), in this use case we 
	create <strong>In</strong> direction attribute.  </li>
</ul>
<p class="style2">The below [<a href="#Fig.1">Fig.1</a>] shows the created sample logical port 
which has In direction and Logical System type associated.&nbsp; </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Logical Port with Type</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcCreatingLogicalPortWithType_Image1.jpg"></td>
	</tr>
</table>
<p>The final Structure will look like as shown in [<a href="#Fig.1">Fig.1</a>].&nbsp; 
The red marked object in figure represents port.&nbsp; </p>
<p>Finally we save the objects. We could retrieve the Logical reference that we 
have opened&nbsp; earlier and see the newly created port along with its Logical 
System Type. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiCreatingLogicalPortWithType</h3>
<p>To launch <code>CAALmiCreatingLogicalPortWithType</code>, you will need to set up the build time
environment, then compile <code>CAALmiCreatingLogicalPortWithType<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiCreatingLogicalPortWithType Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Designer ( as the use case  modifies/creates the PLM Data) </o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
  <tr>
    <th height="35">IDAttribute1*<td height="16">Identification attribute name for opening Root</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Identification attribute name value for opening Root</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p align="left">CAALmiCreatingLogicalPortWithType.3dxml this 3D XML file contains the root Product&nbsp; Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiCreatingLogicalPortWithType_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiCreatingLogicalPortWithType
Code</h3>
<p>The <a><code>CAALmiCreatingLogicalPortWithType</code></a> use case is located in the
<a><code>CAALmiCreatingLogicalPortWithType.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreatingLogicalPortWithType.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
   <p>There are several logical steps in CAALmiCreatingLogicalPortWithType use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li><a href="#Create dir">Creates direction for port</a><li>
		<a href="#Create port">Creates Port Associated With Logical Type Beneath Opened Logical Reference 
		</a> <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
   <p>It begins with a check to ensure bare minimum number of arguments are 
	input for use case execution. </p>
<p>Finally, we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching a CAA use case.</p>
<p>Next we open the Logical reference (<code>piLogRefOnComp</code>). The details of querying and opening are 
detailed in [<a href="#References">3</a>] use case.&nbsp; </p>
<p>Further we create Logical System Type (<code>piLogicalTypeRef</code>) [<a href="#References">4</a>].This 
created Logical System Type we want to associate it with Logical port that we 
will create in next few steps. </p>
   <script type="text/javascript">insertLinkToTop();</script>

  
   <h3><a name="Create dir"></a>Creates direction for port</h3>
  
       <pre class="code">...
    CATICkeParmFactory_var spCkeParmFactory = CATCkeGlobalFunctions::<strong>GetVolatileFactory</strong>();
    ...
    CATIParmDictionary_var spParmDico = CATCkeGlobalFunctions::GetParmDictionary();
    ...	
    CATICkeParm_var spInDir = spCkeParmFactory-&gt;<strong>CreateEnumere</strong>(spParmDico-&gt;GetEnumType(), "<strong>V_Direction</strong>", <strong>CATILogPort::In</strong>);
    ...
    CATLISTV(CATICkeParm_var) iListOfPortAttr;
    iListOfPortAttr.Append(spInDir);
...</pre>
      
   <p>Here using knowledge APIs we create <em>V_Direction</em> Attribute (<em>CATICkeParm_var</em>, <code>spInDir</code>). 
	In this use case we are creating direction <strong>In</strong><em> </em>
	attribute.<em> </em>&nbsp;</p>
<p>Next we append this direction attribute <code>spInDir</code> in the newly created attribute list (<code>iListOfPortAttr</code>).</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Create port"></a>Creates Port Associated With Logical Type Beneath Opened Logical Reference </h3>
  
       <pre class="code">...
    <strong>CATILogPorts</strong> * piLogPortsOnLogComp = NULL;
    hr = piLogRefOnComp-&gt;QueryInterface(IID_CATILogPorts,(void**)&amp;piLogPortsOnLogComp);
...	
    <strong>CATILogPort</strong> *piLogicalPortOnLogPort = NULL;
    hr = piLogPortsOnLogComp-&gt;<strong>Add</strong>(NULL_var,
			       NULL, 
			       iListOfPortAttr,
			       piLogicalTypeRef, 
			       piLogicalPortOnLogPort);
...</pre>
   
   <p>Here we retrieve <em>CATILogPorts</em> interface pointer (<code>piLogPortsOnLogComp </code>) on 
	the&nbsp;opened Logical Root Reference(<code>piLogRefOnComp</code>) using 
	query interface.</p>
<p>The method <code>Add </code> of <em>CATILogPorts</em> creates/Adds 
	a Logical Port object beneath Logical Reference (<code>piLogPortsOnLogComp</code>). 
The type of the Logical Port to create, is internally computed by this API so 
here we pass <em>CATIType</em> as NULL_var.&nbsp; A significant point to note 
here is that the environment is input to this API and in this case we are 
passing it as NULL, So API takes current Environment as 
input.&nbsp; The list of attribute-value is 
having direction Attribute with its values in this case we have created for In 
direction, other attributes get valuated as per business Logic.</p>
<p>Next input argument is Logical type reference&nbsp;(<code>piLogicalTypeRef</code>) 
, this is the Logical System type that will be associated with the newly created 
logical Port. The 
	Port object&nbsp;(<code>piLogicalPortOnLogPort</code>) is returned as a <em>CATILogPort</em> type.</p>
   <script type="text/javascript">insertLinkToTop();</script>

   <!---------------------------------comment------------------------------------->

	 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreatingLogicalPortWithType</code> use case ends by simply closing the PLM
session. Since all use cases&nbsp;necessarily conclude by saving and closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case mainly illustrates the creation of the Logical Port beneath 
opened Logical reference. Before creation of port we create Logical Type 
reference that we want to associate with the port and the port direction (This 
case we have given <em>In</em> as direction).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         <tr>        
        <td valign="top" height="12">[4]</td>
        <td height="12"><a href="CAALmiUcCreatingLogicalTypeModel.htm">Creating Logical Type Model</a></td>
    </tr>

   	</table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


