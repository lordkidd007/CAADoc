<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Browsing a Logical Model with Generic APIs</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

<style type="text/css">
.style1 {
	list-style-type: circle;
}
.style2 {
}
.style3 {
}
.style4 {
	color: #0000FF;
}
</style>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Logical Model with Generic APIs</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>
		CAALmiBrowsingLogicalModelWithGenericAPI<b> </b></code>
      use case. The Use Case details the steps involved in the CAA Customization 
		to browse through a Logical Model, using the Generic APIs (CAA 
		Exposition) of the <code>
		CATPLMComponentInterfaces</code> framework.<p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiBrowsingLogicalModelWithGenericAPI Use Case</a>
          <ul>
            <li><a href="#What">What does the 
			CAALmiBrowsingLogicalModelWithGenericAPI do</a></li>
            <li><a href="#How">How to launch 
			CAALmiBrowsingLogicalModelWithGenericAPI</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiBrowsingLogicalModelWithGenericAPI</a> <a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The Use Case teaches an end user to browse through a Logical Model hierarchy 
using the Generic CAA browsing APIs (the CATPLMComponentInterfaces framework 
capabilities)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiBrowsingLogicalModelWithGenericAPI Use Case</h2>
<p> <code>CAALmiBrowsingLogicalModelWithGenericAPI </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATPLMComponentInterfaces</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiBrowsingLogicalModelWithGenericAPI do</h3>
<p>The input for this Use Case is a <span class="style2">Logical</span> <code>
Model</code>&nbsp;as depicted in [<a href="#Fig.1">Fig.1</a>] below. </p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Input Logical Model</caption>
	<tr>
		<td>
		<img src="images/CAALmiUCBrowsingLogicalModelWithGenericAPI_Fig1.jpg"></td>
	</tr>
</table>
<p>It consists of a root Logical Reference <span class="style2">
<strong>CAALmiBrowsingLogicalModel_RootRef</strong></span>.&nbsp;</p>
<p>The Root aggregates <span class="style2"><strong>CAALmiBrowsingLogicalModel_ChildRef.1</strong></span>, an 
instance of a Logical Reference <span class="style2"><strong>CAALmiBrowsingLogicalModel_ChildRef</strong></span> 
beneath it.</p>
<p>The Root aggregates an instance of a Logical Representation Reference(Rep 
Ref) <strong>CAALmiBrowsingLogicalModel_RepRef</strong> beneath it.</p>
<p>The process to retrieve a PLM Component from the database, essentially 
requires two inputs:</p>
<ul>
	<li>A list of attribute-values, provided as an input for UC execution</li>
	<li>The PLMType of the PLM Component being queried</li>
</ul>
<p>The above query when run, outputs a list of PLM identificators, which conform 
to the search criteria (a list is output, since the attribute-value list input, 
is not Identification). The UC retrieves the first Identificator in this list 
for browsing. This PLM entity is then loaded in session in <strong>AUTHORING</strong> 
mode, a mode which essentially loads in session the Logical References, 
Instances, Rep Ref and Rep Instances which build up the Logical hierarchy. The 
Ports, Interfaces and Connections are not so far, included within the scope of 
Generic CAA Exposition.</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2 Logical Model Browse Output</caption>
	<tr>
		<td>
		<img src="images/CAALmiUCBrowsingLogicalModelWithGenericAPI_Fig2.jpg"></td>
	</tr>
</table>
<p>The Use Case browses our input model and outputs its hierarchy as depicted in 
[<a href="#Fig.2">Fig.2</a>] above. The model appears exactly similar to the way 
it is represented in the spec tree.&nbsp; For Reference and Rep Reference V_Name 
attribute is displayed, otherwise PLM_ExternalID attribute is displayed. This is 
due to the default environment (OneClick and New Typing V2 activated). Though only 
these attributes (PLM_ExternalID and V_Name) values of each PLM Entity in the 
hierarchy is output, the Use Case can also output all the public attribute values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiBrowseLogicalModelWithGenericAPI</h3>
<p>To launch <code>CAALmiBrowsingLogicalModelWithGenericAPI</code>, you will need to set up the build time
environment, then compile <code>CAALmiBrowsingLogicalModelWithGenericAPI<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiBrowsingLogicalModelWithGenericAPI Repository Server User 
Password SecurityCtx PLMType 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iAllAttributes&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number\RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
		 <tr>
    <td height="35"><b>iAllAttributes</b></td>
    <td height="16">TRUE&nbsp; = All Public Attribute values of PLM Entities in 
	the hierarchy to be output<br>
	FALSE = Only the PLM_ExternalID or V_Name attribute value of PLM Entities in the 
	hierarchy to be output</td>
  </tr>
  <tr>
    <th height="35">Attribute1*<td height="16">Attribute Name</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Attribute Value</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p align="left">CAALmiBrowsingLglRef.3dxml this 3D XML file contains the root Product&nbsp; Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>: slog00001025</li>
  <li><a><code>Version</code></a>: A.1</li>
  <li><a><code>(V_Name</code></a>: CAALmiBrowsingLogicalModel_RootRef)</li>
</ul>
<p align="left"><b>Attention</b>: This 3dxml have been created with OneClick and Unified Typing activated (default environment).</p>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the 
CAALmiBrowsingLogicalModelWithGenericAPI
Code</h3>
<p>The <a><code>CAALmiBrowsingLogicalModelWithGenericAPI</code></a> use case is located in the
<a><code>CAALmiBrowsingLogicalModelWithGenericAPI.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiBrowsingLogicalModelWithGenericAPI.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>
CAALmiBrowsingLogicalModelWithGenericAPI</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li class="style3"><a href="#Retrieve the Logical Ref">Retrieve Logical Reference 
	to browse from underlying database</a><ol>
	<li class="style3"><a href="#Build an IDSet">Build an Attribute-Value set</a> </li>
	<li class="style3" style="height: 14px"><a href="#Retrieve the Usable type">Retrieve the Usable Type of PLM Component to browse</a></li>
	</ol>
	</li>
	<li class="style3"><a href="#Run Query">Run Query and retrieve Logical Reference from the 
	underlying database</a></li>
	</ol>
	</li>
	<li class="style3"><a href="#Browse the Logical Structure">Browse the Logical Reference with Generic API</a></li>
  <li>
    <p style="line-height: 100%; margin-top: 0"><a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiBrowsingLogicalModelWithGenericAPI<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply browses through a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [2] 
delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the Logical Ref"></a>Retrieve the Logical Reference to browse, from an underlying database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference for browse. The query to an underlying database for a PLM Component is 
built with primarily two inputs</p>
<ul>
	<li>An attribute-value set list </li>
	<li>The PLMType of the PLM Component being queried</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Build an IDSet"></a>Build an Attribute-Value set</h4>
<p>To begin with we have to identify and load a Logical Reference (to browse) in 
session. A list of attribute-value set is provided as input for UC execution. 
This list with the usable type retrieved in the next step, builds up our 
database query. When this query is run, it outputs a list of PLM Identificators 
which conform to the search criteria. Our component to browse is the first in 
this output list. </p>
<pre class="code"><strong>CATAdpAttributeSet  oAttributeSet</strong>;
CATListOfCATString listOfAttribute;
CATListOfCATUnicodeString listOfValues ;
for (int AttrIndex=8; AttrIndex &lt;= (8+((NbAttributes-1)*2)); AttrIndex++)
{
   const CATString Attribute(iArgv[AttrIndex]);
   const CATUnicodeString Value(iArgv[AttrIndex+1]);
   <strong>oAttributeSet.AddAttribute</strong>(Attribute,Value);

   AttrIndex++;
}</pre>
<p>An attribute-value set are built with user inputs. The <code>CATAdpAttributeSet</code> represents a list of 
attribute name-value pair. Its <code>CATAdpAttributeSet ::AddAttribute()</code> call appends 
an attribute-value set progressively to build this list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Retrieve the Usable type"></a>Retrieve the PLM Type of PLM Component to Browse</h4>
<p>As mentioned earlier, the PLM Type is another critical input for building our 
database query. The PLM Type is referred to as a Knowledge type&nbsp; 
particularly when it is used in the context of building a database query. (While 
a PLM Type is referred to as an authoring custo, when it serves as an input for 
creating a new PLM Component )</p>
<pre class="code">const char* strPLMType = iArgv[6];
CATIType_var spCATType;
hr= CATCkePLMNavPublicServices::RetrieveKnowledgeType(strPLMType,spCATType);
if ( NULL_var == spCATType ) 
{
hr= CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType(strPLMType,spCATType);
...</pre>
<p>The call to RetrieveKnowledgeType And RetrieveCustoType returns CATIType_var with the PLM Type 
String as an input provided by the user. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Run Query"></a>Run Query and Retrieve Logical Reference from the Underlying Database</h4>
<p>At this stage, we have with us the inputs (PLM type and the 
attribute-value sets) which together define our database query. Since those are 
not Identification attributes, the output of the query is obviously a list of 
PLM Identificators which conform to the search criteria. We select the first in 
the list, as our subject of browsing.</p>
<pre class="code">...
   CATLISTP(CATAdpQueryResult) oQueryResults;
   ...
   hr = CATAdpPLMQueryServices::<strong>GetElementsFromAttributes</strong>( spCATType,oAttributeSet,oQueryResults );
	
   <strong>CATAdpQueryResult</strong>* opQueryResult = oQueryResults[1];
   <strong>CATIAdpPLMIdentificator</strong>* oIdentifier = NULL;
   ...
   hr = opQueryResult-&gt;<strong>GetIdentifier</strong>(oIdentifier);
   ...	   				  
   <strong>CATOmbLifeCycleRootsBag</strong> Bag;
   <strong>CATAdpOpener</strong> opener(Bag);
   <strong>CATIPLMNavReference</strong> *piNavRefOnComp = NULL;
   hr= opener.<strong>CompleteAndOpen</strong>(oIdentifier,IID_CATIPLMNavReference, (void**) &amp;<strong>piNavRefOnComp</strong>);
...</pre>
<p>Here, we load the Logical Reference in the current session. Use Case loads the entire PLM Model [<a href="#References">5</a>] in session, which includes the Logical Ref/Inst/Rep 
Ref/Rep Inst, Ports, Interfaces and Connections. The Generic APIs though, let us browse a 
Logical Model for all those entities except Ports, Interfaces and Connections. 
The Logical APIs to browse a logical hierarchy, is limited in scope though. 
It lets us browse the hierarchy only for the Logical Refs/Insts. We have a 
Use Case &quot;<strong>Browsing a Logical Model</strong>&quot; which deals 
with browsing a logical hierarchy with dedicated Logical APIs [<a href="#References">6</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><b><u><a name="Browse the Logical Structure"></a></u>Browse the Logical 
Reference with Generic APIs</b></h3>
<p>The process to browse a Logical Reference involves simply retrieving the 
Child Instances immediately under a Root Reference. We then retrieve the 
Reference associated with each direct Instance, and recursively browse down the 
Logical Model hierarchy.</p>
<pre class="code">HRESULT <strong>BrowseReference</strong>(<strong>CATIPLMNavReference</strong>* <strong>iReference</strong>,CATBoolean iAllAtributes, int iDepth)
{
   ...	
   CATListPtrCATIPLMNavEntity ListChildInstance;
   <strong>CATPLMCoreType coreType =</strong> <strong>PLMCoreInstance</strong>;
   hr = <strong>pReference-&gt;ListChildren(ListChildInstance,1, &amp;coreType);</strong>
   int j = 1;
   while (j&lt;=ListChildInstance.Size() && (SUCCEEDED(hr)))
   {
      CATIPLMNavEntity_var spChildInst = ListChildInstance[j];
      ...	
      CATIPLMNavInstance* piNavInst = NULL;
<strong>      hr =spChildInst-&gt;QueryInterface(IID_CATIPLMNavInstance,(void **)&amp;piNavInst);
</strong>      ...					
      CATIPLMNavReference * pReferenceOfChild = NULL;
      hr = <strong>piNavInst-&gt;GetReferenceInstanceOf(pReferenceOfChild);</strong>
      ...	
      hr = <strong>BrowseReference</strong>(<strong>pReferenceOfChild</strong>,iAllAtributes,iDepth+3);
...		
      j++;
...
</pre>
<p>The <code>BrowseReference()</code> routine browses an input Logical Reference. </p>
<p>The <code>CATIPLMNavReference::ListChildren()</code> implementation on a 
Logical Reference, returns a list of direct children beneath it, based on an 
input filter defined by the PLMCore type. Here we have set the core type to 
PLMCoreInstance, to retrieve a list of Logical Instances directly beneath the 
invoking Logical Reference.</p>
<p>The direct logical instance is retrieved as a <code>CATIPLMNavEntity</code> type. We then 
do a QueryInterface to retrieve the logical instance as a <code>CATIPLMNavInstance</code> 
type.</p>
<p>The <code>CATIPLMInstance::GetReferenceInstanceOf()</code> implementation on a Logical 
Instance returns its associated Reference</p>
<p>We next have a recursive call to the<code> <span class="style2">BrowseReference()</span></code> routine for the direct 
Logical Reference last retrieved.</p>
<pre class="code">...	
   CATListPtrCATIPLMNavEntity ListChildRepInstance;
   <strong>coreType = PLMCoreRepInstance;</strong>
   hr = <strong>pReference-&gt;ListChildren(ListChildRepInstance,1, &amp;coreType);</strong>
   int k = 1;
   while (k&lt;=ListChildRepInstance.Size() &amp;&amp; (SUCCEEDED(hr)))
   {
      CATIPLMNavEntity_var spChildRepInst = ListChildRepInstance[k]; 
      ...					
      CATIPLMNavRepInstance* piNavRepInst = NULL;
      hr = <strong>spChildRepInst-&gt;QueryInterface(IID_CATIPLMNavRepInstance,(void **)&amp;piNavRepInst);
</strong>      if (SUCCEEDED(hr))
      {
         CATIPLMNavRepReference * pRepReferenceOfChild = NULL;
	hr = <strong>piNavRepInst-&gt;GetRepReferenceInstanceOf(pRepReferenceOfChild);</strong>
         ...			
	k++;
...</pre>
<p>As we said before the <code>CATIPLMNavReference::ListChildren()</code> call on a Logical 
Reference, returns us the direct children beneath it, filtered by the PLMCore 
type input. Here, the core type input is a <code>PLMCoreRepInstance</code>, to retrieve all 
direct Rep Instances beneath the Logical Reference. The Rep Instance is 
retrieved as a <code>CATIPLMNavEntity</code> type.</p>
<p>The <code>CATIPLMNavRepInstance::GetRepReferenceInstanceOf()</code> implementation on a 
Rep Inst, returns its associated Rep Reference, as a <code>CATIPLMNavRepReference</code> 
type.</p>
<p>The argument iAllAttributes to the <code>BrowseReference()</code> routine, if set to TRUE, 
outputs all public attributes of the PLM entities in the logical model 
hierarchy. If FALSE, it displays only the PLM_ExternalID or V_Name attribute 
values of the entities in the hieararchy. The last argument iDepth represents 
the indent at which the PLM Entity attributes would be displayed in the output. 
We suitably indent the output, so that the UC output in console appears exactly 
similar to the Logical model hierarchy, as it appears in the spec tree.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiBrowsingLogicalModelWithGenericAPI </code>use case ends by simply closing 
the PLM session. [<a href="#References">2</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case <code>CAALmiBrowsingLogicalModelWithGenericAPI<b> </b></code>details the steps involved in the CAA Customization 
		to browse through a Logical Model, using the Generic CAA APIs exposed by 
the <code>
		CATPLMComponentInterfaces</code> framework.</p>
<p>To begin with the Use Case builds up a database query with the 
attribute-value sets input by user and the usable type retrieved through other 
user inputs. The usable type is that defined by the environment input by user, 
for the <code>RFLVPMLogicalReference</code> PLM type in the 
<code>RFLVPMLogical</code> Modeler scope. The 
query when run on an underlying database, outputs a list of PLM Identificators. 
The Use Case loads the first entity in this list, in session which serves as our 
Logical Reference for browsing.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<p>The Use Case illustrates the
<code>&nbsp;CATPLMComponentIntrefaces</code> framework capabilities listed 
below:<ul>
		<li class="style1"><code>CATIPLMNavReference::ListChildren()</code> 
		implementation on a Logical Reference to list the child Instances and 
		Rep Instances 
		beneath it</li>
		<li class="style1"><code>
		CATIPLMNavInstance::GetReferenceInstanceOf()</code> implementation on a 
		Logical Instance to retrieve its associated Ref</li>
		<li class="style1"><code>
		CATIPLMNavRepInstance::GetRepReferenceInstanceOf()</code> implementation on a 
		Logical Rep Instance to retrieve its associated Rep Ref</li>
	</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	<tr>
       <td valign="top" height="12">[4]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>
     
   	<tr>
       <td valign="top" height="12">[5]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
     
   	<tr>
       <td valign="top" height="12">[6]</td>
       <td>
       <a href="CAALmiUcBrowsingLogicalModel.htm">Browsing a Logical Model</a></td>
     </tr>
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2009]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


