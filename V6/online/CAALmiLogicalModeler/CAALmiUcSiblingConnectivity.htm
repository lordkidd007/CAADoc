<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Sibling Connectivity with Ports</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


<style type="text/css">
.style1 {
	border-color: #c0c0c0;
	border-width: 0;
}
.style2 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
</style>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Sibling Connectivity with Ports</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p> This use case simply creates Sibling connection between Logical 
		Instances through Logical Ports.</p>
      
      <ul>
     <li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiSiblingConnectivity Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiSiblingConnectivity do</a></li>
            <li><a href="#How">How to launch CAALmiSiblingConnectivity</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiSiblingConnectivity</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>Most importantly, user learns to create an Sibling connection between two 
Logical Instances through Logical Ports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiSiblingConnectivity Case</h2>
<p> <code>CAALmiSiblingConnectivity </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiSiblingConnectivity Do</h3>
<p>In this use case we are creating Sibling connections. Sibling connection 
means the connection between two Instances those are on the same level. </p>
<p>To create Sibling connection we need to retrieve relevant objects, using 
which connection will establish. We retrieve four objects from input Logical 
structure. </p>
<p>The [<a href="#Fig.1">Fig.1</a>] shows two Logical Instances and Ports, 
we retrieve objects listed below</p>
<ul>
	<li>Child Instance 1 (<code>CAALmiSiblingConnectivity_Child1.1</code>)</li>
	<li>Port representing Child Instance 1 (<code>Port1</code>)</li>
	<li>Child Instance 2 (<code>CAALmiSiblingConnectivity_Child2.1</code>)</li>
	<li>Port representing Child Instance 2 (<code>Port2</code>)</li>
</ul>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Sibling Ports</caption>
	<tr>
		<td>
		<img src="images/CAALmiSiblingConnectivity_Image_1.jpg"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.1">Fig.1</a>] shows instances in between Sibling connection to be formed 
through the ports <code>Port1</code> and <code>Port2</code>.&nbsp; </p>
<p>Next use case creates connection between two instance objects (<code>CAALmiSiblingConnectivity_Child1.1 </code>
and <code>CAALmiSiblingConnectivity_Child2.2</code>). We call this formed connection 
as Sibling connection. </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.2"></a>Fig.2 Sibling Connection</caption>
	<tr>
		<td>
		<img src="images/CAALmiSiblingConnectivity_Image_2.jpg"></td>
	</tr>
</table>
<p>The above image shows the sibling connection [<a href="#Fig.2">Fig.2</a>] 
which is established between two logical instances those are on same level 
through ports . </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiSiblingConnectivity </h3>
<p>To launch <code>CAALmiSiblingConnectivity</code>, you will need to set up the build time
environment, then compile <code>CAALmiSiblingConnectivity<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiSiblingConnectivity Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>. Choose Role as Designer ( as the use case  modifies/creates the PLM Data) </o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
  <tr>
    <th height="35">IDAttribute1*<td height="16">Identification attribute name for opening Root</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Identification attribute name value for opening Root</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p align="left">CAALmiSiblingConnectivity.3dxml this 3D XML file contains the root Product&nbsp; Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiSiblingConnectivity_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiSiblingConnectivity
Code</h3>
<p>The <a><code>CAALmiSiblingConnectivity</code></a> use case is located in the
<a><code>CAALmiSiblingConnectivity.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiSiblingConnectivity.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAALmiSiblingConnectivity use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a> </li>
	<li><a href="#retrieveInstPort">Retrieve two instance objects in between Connection to be made and the ports through which Connection will realize </a></li>
	<li><a href="#CreateConnection">Creating Connection Between Two Instances Through Ports </a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
   
<h3><a name="Prolog"></a> Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">2</a>]delves further into the process of building and launching a CAA use case.</p>
<p>Initially we load the Logical Reference. The loading mode is &quot;Authoring&quot; mode 
[<a href="#References">3</a>] to enable to load in session all the Logical 
structure including Ports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="retrieveInstPort"></a>Retrieve two instance objects in between Connection to be made and the ports through which Connection will realize </h3>
<p>In this step we retrieve four objects through input Logical structure. 
	The retrieved objects are as follows</p>

<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<ul>
	<li>Two instances in between we want to create connection<ul>
		<li>Instance 1 (<code>piLogConnectableOnFromLogInst</code>) 
			as a <em>CATILogConnectable</em> interface pointer)</li>
		<li>Instance 2 (<code>piLogConnectableOnToLogInst</code>) 
			as a <em>CATILogConnectable</em> interface pointer)</li>
	</ul>
	</li>
	<li>The Ports through which connection is made
	<ul>
		<li>Port 1 representing Instance 1 (<code>piLogicalPortOnFromPort</code>) 
			as a <em>CATLogConnectionPoint</em> pointer)</li>
		<li>Port 2 representing Instance 2 (<code>piLogicalPortOnToPort</code>) 
			as a <em>CATLogConnectionPoint</em> pointer)</li>
	</ul>
	</li>
</ul>

<p><strong>With old API (handling only Ports)</strong></p>
<ul>
	<li>Two instances in between we want to create connection<ul>
		<li>Instance 1 (<code>piLogicalInstanceOnFromLogInst</code> 
			as a <em>CATILogInstance</em> interface pointer)</li>
		<li>Instance 2 (<code>piLogicalInstanceOnToLogInst</code> 
			as a <em>CATILogInstance</em> interface pointer)</li>
	</ul>
	</li>
	<li>The Ports through which connection is made
	<ul>
		<li>Port 1 representing Instance 1 (<code>piLogicalPortOnFromPort</code> 
			as a <em>CATILogPort</em> interface pointer)</li>
		<li>Port 2 representing Instance 2 (<code>piLogicalPortOnToPort</code>) 
			as a <em>CATILogPort</em> interface pointer)</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="CreateConnection"></a>Creating connection between two Instances through Ports</h3>
<p>Now use case creates a connection between two instances through 
	representing ports.</p>

<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<pre class="code">...
	<strong>CATILogConnection</strong> *opiLogicalConnection = NULL;
	hr = piLogConnectableOnToLogInst-&gt;<strong>Connect</strong>(NULL_var,
		pLogConnectionPointOnFromLogPort,
		piLogConnectableOnToLogInst, 
		pLogConnectionPointOnToLogPort,
		opiLogicalConnection);
...</pre>
<p>A call to <code>CATILogConnectable::Connect</code> creates a connection which connects two 
	Connection Point aggregated under Connectables. Here the first Connectable is the 
	Instance 1 (<code>piLogConnectableOnToLogInst</code>) and its Connection Point is the 
	Port aggregated under it (<code>pLogConnectionPointOnFromLogPort</code>). 
	The second Connectable is the Instance 2 (<code>piLogConnectableOnToLogInst</code>)
	and its Connection Point is the Port aggregated under it 
	(<code>pLogConnectionPointOnToLogPort</code>). </p>
<p>This API can be used for Parent-Child and Sibling Connectivity [<a href="#References">4</a>].</p>
<p><code>CATLogConnectionPoint</code> can be used for Interfaces and Ports.
	So, <code>CATILogConnectable::Connect</code> can also being used to connect Interfaces [<a href="#References">5</a>].</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Logical 
	connection type. The API will return Connection object.</p>

<p><strong>With old API (handling only Ports)</strong></p>
<pre class="code">...    
	CATListValCATICkeParm_var iLLogAttributesValues;
	<strong>CATILogConnection</strong> *opLogicalConnection = NULL;
	hr = piLogicalInstanceOnFromLogInst-&gt;<strong>Connect</strong>(piLogicalPortOnFromPort,
		piLogicalInstanceOnToLogInst, 
		piLogicalPortOnToPort,
		NULL_var,
		NULL, 
		iLLogAttributesValues, 
		opLogicalConnection);
...  </pre>
<p>A call to <code>Connect </code> of <em>CATILogInstance</em> creates connection between 
	two instances (<code>piLogicalInstanceOnFromLogInst and piLogicalInstanceOnToLogInst</code>), <code>piLogicalPortOnFromPort</code> is a port aggregated under the 
	instance (<code>piLogicalInstanceOnFromLogInst</code>) on which we have made a call for connect API. <code>piLogicalInstanceOnToLogInst</code> is a other instance to which we want to 
	connect first one, and <code>piLogicalPortOnToPort </code>is the another port 
	aggregated under second instance.</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate 
	logical connection type. Then we pass environment as NULL, due to this API will 
	consider current environment as input. Then we pass attribute list which is 
	empty since the attributes valuated by business logic internally. The API will 
	return Connection object <code>opLogicalConnection </code>.&nbsp; </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiSiblingConnectivity</code> use case ends by simply 
	saving and closing the PLM
	session. Since all use cases&nbsp; necessarily conclude by saving and closing the PLM
	session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
	Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>
	
   <script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>
<p>The use case will create Sibling connection between two Logical Instance 
through Logical Ports.&nbsp; </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
<table >
	<tr>
		<td valign="top" height="12">[1]</td>
		<td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a CAA Use Case</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[2]</td>
		<td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating a Basic PLM Batch</a></td>
	</tr>
	<tr>        
		<td valign="top" height="12">[3]</td>
		<td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>   
	<tr>
		<td>[4]</td>
		<td><a href="CAALmiUcExposingPort.htm">Parent-Child Connectivity (with Ports)</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAALmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (with Interfaces)</a></td>
	</tr>
</table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
		<td valign="top">Document created</td>
	</tr>
	<tr>
		<td valign="top">Version: <strong>2</strong> [Jul 2014]</td>
		<td valign="top">Updated to add New Connectivity API</td>
	</tr>
	<tr>
		<script type="text/javascript">insertLinkToTop();</script> 
	</tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


