<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">
	<head>
		<title>Logical Modeler- Technical Article</title>
		<meta content="False" name="vs_showGrid">
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
		<style type="text/css">
.style1 {
	border-color: #c0c0c0;
	border-width: 0;
}
</style>

	<body>
	<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Logical Modeler- Technical Article</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
		 <!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2><a name="Top"></a>Abstract</h2>
					<p>The objective of this article is to provide an overview 
					of the Logical Modeler.&nbsp;Along with Logical modeler 
					objects this articles speaks about Logical APIs [<a href="#References">1</a>] 
					and the connectivity between logical syetems. </p>
					<UL>
						<li>
							<A href="#Introduction">Introduction to Logical Modeler</A>
						<li>
						<A href="#Logical System">Logical System </A>
						<li>
						<a href="#Logical Interface - Port">Logical Interface - Port </a>
						<li>
						<a href="#Logical System Type">Logical System Type</a><li>
						<A href="#Connectivity Between Systems">Connectivity Between Systems  </A>
						<li>
						<A href="#Multiplexer / Demultiplexer">Multiplexer / Demultiplexer</A>
<li>
						<A href="#Associating Data Contents">Associating Data Contents </A>


						<li>
							<A href="#InShort">In Short</A>

						<li>
							<A href="#References">References</A>

					</UL>
				</td>
			</tr>
		</table>
		 <!---------------------------------comment------------------------------------->
			<h2><A name="Introduction"></A>Introduction to Logical Modeler
 
</h2>
<p>The Logical domain enables to define How a product is defined. Two main 
aspects are addressed within this domain:</p>
<ul>
	<li>The logical architecture (static aspect):<ul>
		<li>by defining the systems' decomposition and the exchanges between 
		these systems.</li>
		<li>by defining 3D representations enabling to design 3D preliminary 
		architecture (space reservation).</li>
	</ul>
	</li>
	<li>The logical behavior associated to a logical system by defining 
	equations and algorithms that will rule its behavior. (dynamic aspect). 
	These behaviors will be compiled and simulated to obtain the way the system 
	reacts and interacts with other ones and validate that it corresponds to the 
	desired behavior or not.</li>
</ul>
	<p>The Logical Modeler mainly addresses the static aspect of the logical domain and provides ways to associate behaviors to systems. 
</p>
	
		
<script type="text/javascript">insertLinkToTop()</script>


<h2><A name="Logical System"></A>Logical System</h2>

<p><strong>Concept :</strong></p>
<p>A Logical System is a Logical unit having the following features:</p>
<ul>
	<li>It has several interfaces specifying what the system emits or receives.</li>
	<li>It can be decomposed into subsystems.</li>
	<li>A behavior can be associated to it.</li>
	<li>3D representations can be associated to it and it can be positioned in 
	3D.</li>
</ul>
<p>Related to other domains, it can:</p>
<ul>
	<li>Realize one or several requirements (Requirement domain), functions (Functional domain).</li>
	<li>Be realized by one or several products (Physical domain).</li>
</ul>
	<p>For example  a Lighting system is made of two sub-systems namely. </p>
<ul>
	<li>Power supply system  (realized by a Battery on the physical side)</li>
	<li>Illuminating  system (realized by a Bulb or tube on the physical side)</li>
</ul>
	<table cellspacing="1" class="style1">
		<caption><a name="Fig.1"></a>Fig.1 Lighting System</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image1.jpg"></td>
	</tr>
	</table>
	<p>In our example, Power supply as well as Illumination systems are used to define the Lighting system but they could be reused (as well as the lighting system) to define other systems. To enable system reusability and decomposition, Instance/Reference paradigm is used to model Logical Systems.</p>
<p>It is interesting to note here that the Logical sub-systems in the [<a href="#Fig.1">Fig.1</a>] above namely. that for Power Supply and for illumination, are relevant in different contexts. In other words, power supply can be for lighting, for driving automobiles, 
aero planes, turbines, pumps etc.  Hence, a logical system can be fundamentally treated as a Ref-Inst model in the PLM world. This implies that each sub-system is infact an instance of a Logical Reference. </p>
<p>This also implies that this lighting system itself, is fundamentally a Logical Reference, which can be reused (instantiated) in various different contexts. In other words, this Lighting system could be used for illuminating multiplexes, malls, automobiles, ships, submarines, rockets etc. </p>
<p>Thus the model above evolves to a Logical Ref-Inst model as depicted in the [<a href="#Fig.2">Fig.2</a>] that follows.</p>
	<table cellspacing="1" class="style1">
		<caption><a name="Fig.2"></a>Fig.2 Logical Model for Lighting System</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image2.jpg"></td>
	</tr>
</table>
	<p>The Lighting system aggregates a Battery system and a Light (Bulb/Tube) system. Means Lightning reference contains two instances, one instance is of Battery and other instance is illuminating device(Bulb/tube). </p>
<p><strong>Modeler Object:</strong></p>
<p>Following two are the main modeler objects</p>
<ul>
	<li>Logical Reference</li>
	<li>Logical Instance</li>
</ul>
<p><strong>Logical Reference </strong></p>
<p>The Logical Reference is the basic entity modeling a Logical System.</p>
<p><strong>Logical Instance</strong></p>
<p>Logical Instance models the decomposition of a logical component into sub-components (or child logical component). This object holds different attributes (Name, Descriptions, etc) and 2 relations:</p>
<ul>
	<li>Composition link pointing to the parent logical component</li>
	<li>Instantiation link pointing to the child logical component</li>
</ul>
<p>It also holds the configuration information of the sub-component (availability).</p>
<p>The following [Fig.3] shows a sample basic structure of Logical Model. </p>
	<table cellspacing="1" class="style1">
		<caption><a name="Fig.3"></a>Fig.3 Sample Logical Structure</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image3.jpg"></td>
	</tr>
</table>
<p>The above picture [<a href="#Fig.3">Fig.3</a>] shows a Logical Structure, it has one Logical Root aggregating three children. Same structure is represented in 2d view, which is shown in same image beside it. </p>
<p> <strong>API :</strong></p>
<p><code>CATILogReferenceFactory::CreateReference()</code> creates the Logical reference .<br>
<code>CATILogInstances::Add()</code> instantiates the child reference under the Root 
reference.<br>
The implementation details of this section are given in the use case &#8220;Creating 
Logical Model&#8221; [<a href="#References">2</a>].<br>
</p>

<script type="text/javascript">insertLinkToTop()</script>
   
   <h2><a name="Logical Interface - Port"></a>Logical Interface - Port</h2>
   <p><strong>Concept </strong>:</p>
   <p>In logical system, Interfaces (System Type Exposition Instances) have
   very important role. It is the communication point for the logical system 
   which means it is an interface for a logical system to communicate with other logical system.</br>
	Logical Interfaces are the Ports evolution, even if they are still available.
</p>
<p>The Interface can have '4' directions:</p>
<ul>
	<li>In: during execution, signal is received by the component</li>
	<li>Out: during execution, signal is emitted by the component</li>
	<li>In/Out: during execution, signal can be emitted and received by the component</li>
	<li>No Direction: Related to acausal notion. It&#8217;s a kind of equipotential and does not vary along the time. &#8216;NoDirection&#8217; refers to a value shared by two systems .</li>
</ul>
<p>In addition, the interface have a Type. This Type defines the type of data/signals transmitted through the interface. With Ports, it is optional.</p>
<p>The interface also holds an Identifier attribute. This attribute characterizes the Interface 
Instance usage and will help addressing advanced Interchangeability scenarios. 
Briefly, it will help maintaining connectivity when replacing a System by another one.</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.4"></a>Fig.4 Logical Interfaces</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image4.jpg"></td>
	</tr>
</table>
<p>The above image [<a href="#Fig.4">Fig.4</a>] shows the Logical Reference which has following components </p>
<ul>
	<li>Output Interface  (Represented by bubble <em>O</em> in the <a href="#Fig.4">Fig.4</a> )</li>
	<li>Two Input Interfaces (Represented by bubble <em>I</em> in the 
	<a href="#Fig.4">Fig.4</a> )  </li>
</ul>
   <p><strong>Modeler Object</strong> :</p>
   <p>Logical System Type Exposition Instance (RFLVPMSystemTypeExpositionInstance): defines the interface of a Logical Reference. 
   It owns properties like a direction, an associated System Type and an Identifier.</p>
   <p>Logical Port (RFLVPMLogicalPort): defines the interface of a Logical Reference. 
   It owns properties like a direction and optionally an associated System Type. 
   Intended to be replaced by System Type Exposition Instance</p>
<p> <strong>API :</strong></p>
<p><code>CATILogTypeExpositionInstances::Add()</code> add an interface. It instantiates a System Type Reference by creating 
the System Type Exposition Instance under the Reference (calling this API on Logical Reference).</p>
<p>The implementation details of this API are given in the use case &quot;Creating Logical System Type Model&quot;   [<a href="#References">3a</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<p><code>CATILogPorts::Add()</code> creates the Port under the Reference (calling this API on Logical Reference).</p>
<p>The implementation details of this API are given in the use case &quot;Creating Logical Port With Type&quot;   [<a href="#References">3b</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->

<h2><a name="Logical System Type"></a>Logical System Type</h2>
<p><strong>Concept </strong>:</p>
<p>Information associated to a Logical Interface/Port to specify the type of data going through that Interface/Port. Types can be defined by the user.</p>
<p>This Type defines the type of data/signals transmitted through the Interface/Port. </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.5"></a>Fig.5 Sample Structure of Logical System Type</caption>
<tr>
	<td>
	<img src="images/CAALmiTALogicalModeler_image5.jpg"></td>
</tr>
</table>
<p>The above image [<a href="#Fig.5">Fig.5</a>] shows the Logical System Type structure which contains following objects</p>
<ul>
	<li>One Root (commonly this Root Logical System Type known as Structure Type)</li>
	<li>Two Instances (Logical System Type instance commonly known as sub types). They also have an Identifier attribute as the interfaces.</li>
</ul>
<p>With Logical Interface, the System Type Reference is directly associated to the signal during the creation of the interface.
With Logical Port, it is necessary to associate it with Logical System Type 
Instance to define the signals transmitted or received through Port.&nbsp;
</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.5 B"></a>Fig.5 B&nbsp; Equivalence between Logical Interface and a Logical System Type 
	associated with Logical Port </caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image5B.jpg"></td>
	</tr>
</table>
<p>As above [<a href="#Fig.5 B">Fig.5 B</a>] image shows that the output 
port (O) is associate with Logical Type instance. The arrow is always in 
between Port <em>(</em>In this case Port <em>O)</em> and Type instance 
object (Type instance) represents association between port and Type (Arrow 
points towards Type). When the Type instance is linked with port the Type 
instance is aggregated under Reference of aggregating Port. </p>
<p>With Interface, the Type Reference is directly instantiated by the Type Exposition Instance. It is using less PLM Object for the same need.</p>
<p><strong>Modeler Object</strong> :</p>
<p><strong>Logical System Type Reference</strong> (RFLVPMSystemTypeReference): Defines the signal that can be emitted or received by a Logical Interface/Port.</p>
<p> <strong>Logical System Type Instance</strong> (RFLVPMSystemTypeInstance): entity that enable to define a structured type; a type defined of subtypes. It defines a usage of a logical type reference (and is the master piece of the system type re-usability).</p>
<p> <strong>API :</strong></p>
<p><code>CATILogReferenceFactory::CreateTypeReference()</code> creates a Logical System Type 
Reference.</p>
<p><code>CATILogTypeReference::AddSubType()</code> Adds/Creates Sub Type</p>
<p><code>CATILogTypeExpositionInstances::Add()</code> add an interface. It instantiates a System Type Reference by creating 
the System Type Exposition Instance under the Reference (calling this API on Logical Reference).</p>
<p><code>CATILogPort::SetType</code> Enables to associate a Type of Port</p>
<p>The implementation details of this API are given in the use case &quot;Creating 
Logical Type Model&quot;   [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->

<h2><a name="Connectivity Between Systems"></a>Connectivity Between Systems</h2>
<p><strong>Concept :</strong></p>
<p>Connection between interfaces or ports of logical entities. This relation models a data exchange
(runtime view) between the logical components (the interfaces/ports defining the type of data exchanged through the connection).
</p>
<p>A Logical Connection enables to establish connectivity between Logical Systems. We can distinguish two patterns:</p>
	<ul>
		<li>Sibling pattern</li>
		<li>Parent child pattern</li>
	</ul>
<p>The Logical Connection links two <strong>Connection Points</strong> by the way of <strong>Connectables</strong>.</br>
There are two objects that can be used as Connectable: the Logical Reference and the Logical Instance. And these one exposes several Connection Points.</br>
A Connection Point is used to connect and navigate between Systems. It can be:
<ul>
	<li>A Logical Port.</li>
	<li>A Logical Interface (one Type Exposition Instance with or without a path of sub-Type Instances).</li>
</ul>
This also means that connectivity with interfaces allow to <strong>connect the sub-decomposition of a structured data</strong>.
</p>
<p>Here one point to note in connectivity, is that each connection should 
respect the aspect of Type Compatibility. Which means connection points those are 
associated with same (or compatible) Logical System Type can communicate with each other. </p>
<p><strong>Sibling Connectivity</strong></p>
<p>A logical connection links two systems (more accurately their interfaces/ports) at the same level and located under the same parent system.</p>
<table>
	<caption align="center"><a name="Fig.6"></a>Fig. 6&nbsp; Sibling Connectivity</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image6.jpg"></td>
	</tr>
</table>
<p>As an example the above image [<a href="#Fig.6">Fig.6</a>] shows that the two logical systems aggregated under the one logical reference has connection.  </p>
<p>Logical instance 1.1 has connection with Logical instance 2.1 .  As above [<a href="#Fig.6">Fig.6</a>] shows Inst1.1 has one interface which has direction out 
and Inst 2.1 has one interface which has direction in. The connection between two instances Inst1.1 and Inst2.1 realized through respective interfaces of those instances. 
These Instances (Inst 1.1 and Inst 2.1) are same level objects. </p>
	<table cellspacing="1" class="style1">
		<caption><a name="Fig.7"></a>Fig.7 Sibling Connectivity Structure</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image7.jpg"></td>
	</tr>
	</table>
<p>The above image [<a href="#Fig.7">Fig.7</a>] shows the reference-Instance mode of the model shown above. In 
this model two logical instances aggregated under Logical Reference are on same level. One instance 1 represented by output Interface (in 
<a href="#Fig.7">Fig.7 </a>it is shown by <em>O</em> bubble), other instance 2 represented by Input Interface (In 
<a href="#Fig.7">Fig.7</a> it is shown by <em>I</em> bubble). Connection is made between these two instances through 
Interfaces as we could see in image with black line. The connection object is instantiated under Logical Reference.</p>

<p><strong>Parent-Child Connectivity</strong></p>
<p>A parent-child connection links a Connection Point of a system to a Connection Point of 
the parent system (parent meaning that it aggregates the other system). The 
Connection Point of the parent system exposes the Connection Point of the system.</p>
<p>This type of pattern is generally used to propagate (expose) information at the 
parent level and therefore pass it along to other branches of the Logical tree.
</p>
<table>
	<caption align="center"><a name="Fig.8"></a>Fig. 8&nbsp;Parent-Child Connectivity</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image8.jpg"></td>
	</tr>
</table>
<p>As above image [<a href="#Fig.8">Fig.8</a>] shows Logical system in which one root aggregating Logical Instance. 
Root Reference has one Interface and the aggregating Logical instance also has one Interface. 
These parent and child connected through parent-child connectivity.</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.9"></a>Fig.9&nbsp;Parent child connectivity data model</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image9.jpg"></td>
	</tr>
</table>
<p>The above logical mode [ <a href="#Fig.9">Fig.9</a>] described through reference instance model in 
the following image [Fig.9]. In this model one interface is representing Root 
Reference, One instance aggregated under Root which has one interface. Now the 
connection established in between these two Interfaces. This connection is known as 
parent child connection.</p>
<p><strong>Modeler Object:</strong></p>
<p>Logical Connection (RFLVPMLogicalConnection): enables to define the connectivity between logical systems in the system to subsystems decomposition.</p>
<p> <strong>API :</strong></p>
<p><strong>Recommanded: </strong>The <code>CATILogConnectable::Connect()</code> connects 
	this Connectable element and a target Connectable element using Connection Point. 
	This can be used for Parent-Child Connectivity and Sibling Connectivity. It is working 
	with Interfaces and Ports.</p>
<p>The implementation details of this API are given in the use case &#8220;Sibling 
Connectivity&#8221; [<a href="#References">5a</a>].</p>
<p>The <code>CATILogInstance::Connect()</code> and <code>CATILogPort::Connect()</code> are respectively 
	used to create Sibling Connection and Parent-Child Connection. They can be used but are
	<strong>not recommended</strong> because only usable with Ports (can not be used with Interfaces).</p>
<p>If needed, the implementation details of these API are given in the use case &#8220;Sibling Connectivity&#8221; 
	and &quot;Parent-Child Connectivity&quot; [<a href="#References">5b and 6</a>].</p>
<p>The next section will deal in providing an overview of Logical Multiplexer/Demultiplexer.&nbsp;</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->

<h2><A name="Multiplexer / Demultiplexer"></A>Multiplexer / Demultiplexer</h2>
<p><strong>Concept </strong>:</p>
<p>Usually when two systems communicate to each other there is need of transferring signals to each other. 
	When a system emits a structured signal whose sub-signals need to be used by other systems, a specific 
	object is needed to decompose this structured signal into each kind of sub-signals: the demultiplexer. 
	In the same way, when elementary signals need to be gathered into a structured signal that a system needs, 
	another specific is needed: the multiplexer.</p>
<p>Multiplexer is object which takes multiple inputs and returns single 
output. Demultiplexer is exactly apposite to the multiplexer, demultiplexer 
takes single input and outputs it in several outputs. </p>
<p>The necessity of Mux/Demux comes into picture when the more than two 
systems want to communicate and there is need of splitting signals or vice 
versa.</p>
<p><strong>/!\ The multiplexer lose is interest since the existence of the Interfaces. Even when data (System Type Reference) is Structured, Interfaces allow to connect the sub-decomposition of the data.</strong></p>
<p>For an example multiplexer is explained below. Demultiplexer is exactly 
apposite to multiplexer in terms of input/output.</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.10"></a>Fig.10 Multiplexer </caption>
<tr>
	<td>
	<img src="images/CAALmiTALogicalModeler_image10.jpg"></td>
</tr>
</table>
<p>The above picture [<a href="#Fig.10">Fig.10</a>] shows the view of Multiplexer it has two input ports and one output port. </p>
<p>This mux/Dumux is instantiated under Logical Reference. The exposed ports have Types (Logical Type it defines the type of ports, due to that the connection between need to follow basic rule just like the same type should followed by input as well as output ports).</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.11"></a>Fig.11 Structure of Multiplexer</caption>
	<tr>
		<td style="height: 14px">
		<img src="images/CAALmiTALogicalModeler_image11.png" width="622" height="454"></td>
	</tr>
</table>
<p>The above model [<a href="#Fig.11">Fig.11</a>] shows the Logical structure with Mux. In this structure we could see the one logical Reference aggregates a Mux Instance. </p>
<p>The Mux contains three ports </p>
<ul>
	<li>Two input ports( associated with Sub Types)</li>
	<li>One output port (associated with Structured Logical System Type )</li>
</ul>
<p>Each port is associated with the one type. Here we could see that the Logical Type structure, in that the output port is associated with aggregating Logical Type and each input type is associated with the aggregated Logical Type. </p>
   <p><strong>Modeler Object</strong> :</p>
   <p>Logical Mux/Demux Reference (RFLVPMLogicalCommunicationReference): Specific reference dedicated to multiplex or demultiplex a structured logical type.</p>
<p>Logical Mux/Demux Instance (RFLVPMLogicalCommunicationInstance):  An instance simply corresponds to an usage of a reference in a given context. Since we can define several usages of a reference, the instance allows to use and reuse a reference. So, the Logical Mux/Demux instance corresponds a usage of a Multiplexer/Demultiplexer].</p>

   <p><strong>API </strong>:</p>
   <p><code>CATILogReferenceFactory:: CreateMultiplexer()</code> creates the Logical Multiplexer reference.
The implementation details of this API are given in the use case &#8220;Creating Multiplexer (Mux) Reference&#8221; 
	[<a href="#References">7</a>]</p>
   <p><code>CATILogReferenceFactory::CreateDemultiplexer()</code> creates the Logical Demultiplexer reference.</p>
	
	<script type="text/javascript">insertLinkToTop()</script>
	<h3><a name="Mux Demux usage"></a>Multiplexer/Demultiplexer Usage :</h3>
	<p>As we have discussed above the whenever there is need of splitting or combining signal and transferring to other system in that case Multiplexer/ Demultiplexer play important role. </p>
<p>Lets we take one case of Demultiplexer to explain usage. The following 
[Fig.12] shows that usage of the Demux. </p>
<p>In [Fig. 12] one Logical Reference aggregates the three different Logical instances. </p>
<ol>
	<li>One Logical Instance (Inst1 ) outputs one signal of Logical System Type( Structure Type). </li>
	<li>Second Instance (Inst2) has one input Port associated with Logical System Type  (Sub Type 1) </li>
	<li>Third Instance (Inst3) has one Input Port associated with Logical System Type  (Sub Type 2) </li>
</ol>
<p>One Demux is also instantiated on same level as of Inst1/Inst2/inst3 . This Demux consists of </p>
<ul>
	<li>One Input port of Logical Sytem Type (Structure Type)</li>
	<li>Output port of Logical Sub Type (Sub Type 1)</li>
	<li>Output port of Logicla Sub Type (Sub Type 2)</li>
</ul>
<p>Now we make connection between the three instances (One output and two input) using Demux .  </p>
<ul>
	<li>Output of Inst 1 (Structure Type )- &gt; input of demux</li>
	<li>One output of Demux (Sub Type 1)-&gt; input of Inst 2</li>
	<li>Second output of Demux (Sub Type 2)-&gt;input of Inst 3</li>
</ul>
<p>Here we could observe that while making connections between Instance  port to Demux Port we follow two main aspects </p>
<ul>
	<li>Port direction (Direction should be compatible, means e.g. Output port connected with Input port)</li>
	<li>&#8226;	Port Type (Connection in between two same Logical System Type Ports)</li>
</ul>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.12"></a>Fig.12 Mux Reference Usage</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image12.jpg"></td>
	</tr>
</table>
<p>the above [<a href="#Fig.12">Fig.12</a>] shows the three references connected 
through Demultiplexer. In the following structure we see that the actual structural model for the above model displayed in the CATIA RFLP editor view. </p>
<table >
	<caption><a name="Fig.13"></a>Fig.13 Mux Reference Usage Structure</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image13.png"></td>
	</tr>
</table>
<p>As we could see that the one Logical root reference contains the three instances beneath and one Mux/Demux instance.  </p>
<p>As per the fig shown above we could see that one instance have output port and other two have input ports. And as per our earlier explanation we see that input ports represent the sub types and Output port associated with aggregating type.  </p>
	<p>Using a Demultiplexer, the structured logical system type emitted by the system Inst1 will be decomposed into distinct logical system types corresponding to the subtypes of the structured system type, which then will be each one used by the systems Inst2, Inst3</p>
<p><strong>API </strong>:</p>
<p><code>CATILogInstance::Connect()</code> creates connection between the Mux/Demux instance(and its associated port) and the other instances (and its associate port) of the aggregating Logical model.</p>
<p>The implementation details of this API are given in the use case &#8220;Mux/Demux Reference Usage&#8221;  [<a href="#References">8</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->

<h2><A name="Associating Data Contents"></A>Associating Data Contents</h2>
   <p><strong>Concept </strong>:</p>
   <p>The user needs to associate the some information, drawing, pictures, other docs with the logical system then in that case we can achieve that thought Logical Representation Reference (RepRef). Here we can attach non CATIA data to the RepRef. </p>
   <table cellspacing="1" class="style1">
	<caption><a name="Fig.14"></a>Fig.14 Logical Rep reference with Picture</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image14.jpg"></td>
	</tr>
</table>
<table cellspacing="1" class="style1">
	<caption>Fig.15 Logical Rep reference Data Model</caption>
	<tr>
		<td>
		<img src="images/CAALmiTALogicalModeler_image15.jpg"></td>
	</tr>
</table>
<p>We can associate data contents to the Logical rep ref and these data contents can be of any type(e.g. Document file, picture file etc.) </p>
<p>Please note that in Logical Modeler, Logical Representation reference can hold only the data with NON-Catia document type  (e.g xls, doc, txt, xml, pdf, etc).</p>
<p><strong>Modeler Object</strong> :</p>
<p>Logical Representations Reference (RFLVPMLogicalRepReference): entity that can carry various kind of data (available in CAA: non CATIA content, 2DPictures).</p>
<p>Logical Representation Instance (RFLVPMLogicalRepInstance): entity that enable to associate a Logical Representation Reference to a Logical Reference. It defines a usage of a representation reference (and is the master piece of the representation reusability).</p>
<p><strong>API </strong>:</p>
<p><code>CATILogRepresentationReferenceFactory::CreateNonCATIAContentRepReference ()</code> creates the multi-instantiable 
	Logical Rep Ref.</p>
<p><code>CATILogRepresentations::AddWithNonCATIAContent()</code> creates the Mono-instantiable Logical Rep Ref.</p>
<p>The implementation details of these API&#8217;s are given in the use case &#8220;Creating Logical Rep Reference for non-CATIA contents&#8221;   [<a href="#References">9</a>].</p>
<p>There is a strong semantic difference between these two APIs: a mono instantiable rep reference is strongly associated to its aggregated reference meaning that data contained by this rep to the context of this reference and cannot be shared as the multi-instantiable rep reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="InShort"></a>In Short</h2>
<p>The article provides an introduction to Logical Modeler along 
	with the various objects existing in it . The article also illustrates the 
	Logical system and the connectivity between the systems.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->
<h2><a name="References"></a>References</h2>
<table >
	<colgroup>
		<col valign="top" span="1">
	</colgroup>
	<tr>
		<td valign="top" height="12">[1]</td>
		<td><a href="CAALmiTaLogicalModelerAPI.htm">Logical Modeler Behaviors</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[2]</td>
		<td><a href="CAALmiUcCreatingLogicalModel.htm">Creating Logical Model</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[3a]</td>
		<td><a href="CAALmiUcCreatingLogicalTypeModel.htm">Creating Logical System Type Model</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[3b]</td>
		<td><a href="CAALmiUcCreatingLogicalPortWithType.htm">Creating Logical Port With Type</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[4]</td>
		<td><a href="CAALmiUcCreatingLogicalTypeModel.htm">Creating Logical Type Model</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[5a]</td>
		<td><a href="CAALmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (Interfaces)</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[5b]</td>
		<td><a href="CAALmiUcSiblingConnectivity.htm">Sibling Connectivity (Ports)</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[6]</td>
		<td><a href="CAALmiUcExposingPort.htm">Parent-Child Connectivity</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[7]</td>
		<td><a href="CAALmiUcCreatingMuxDemuxReference.htm">Creating Mux Demux Reference</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[8]</td>
		<td><a href="CAALmiUcMuxDemuxReferenceUsage.htm">Mux-Demux Usage</a></td>
	</tr>
	<tr>
		<td valign="top" height="12">[9]</td>
		<td><a href="CAALmiUcCreatingLogRepRefWithNONCatiaCnts.htm">Creating Logical Representation Reference</a></td>
	</tr>	
</table>
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
	<tr>
		<td vAlign="top">Version: <strong>1</strong> [Oct 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2014]</td>
		<td>Add Logical Interfaces</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>

 <!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

	</body>
	</head>
</html>


