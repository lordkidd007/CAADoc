<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Parent-Child Connectivity</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

<style type="text/css">
.style1 {
	border-color: #c0c0c0;
	border-width: 0;
}
</style>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Parent-Child Connectivity</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This use case simply creates Parent-Child connection between Logical 
		Reference and aggregating Instance through Logical Ports.  
      <ul>
      <li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiExposingPortUse Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiExposingPort do</a></li>
            <li><a href="#How">How to launch CAALmiExposingPort</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiExposingPort</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>Most importantly, user learns to create an Parent-Child connection between 
Logical reference and Logical Instances through Logical Ports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiExposingPortUse Case</h2>
<p> <code>CAALmiExposingPort </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiExposingPort Do</h3>
<p>In this Use case we creates parent to child connection between Logical 
Reference and aggregating Instances through Logical Ports. This will results into 
exposition of Port.</p>
<p>As following [<a href="#Fig.1">Fig.1</a>] shows input model have one Root 
Logical Reference which has one port. The Root Reference aggregates one child 
Instance which also has one port.&nbsp; To create connection between these 
parent and child objects we need to retrieve relevant object for creation of 
connection.&nbsp; </p>
<p>In this use case we mainly retrieves following objects</p>
<ul>
	<li>Child Instance (<code>CAALmiUcExposingPort_Child1.1</code>)</li>
	<li>Port representing child instance (<code>ChildPort1</code>)</li>
	<li>Port representing Root (<code>RootPort2</code>)</li>
</ul>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1&nbsp; Parent Child Ports</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcExposingPort_image1.jpg"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.1">Fig.1</a>] shows two ports one under child and 
one under Root. </p>
<p>Next use case creates connection between Parent and child object through ports (One is under 
Root (<code>RootPort2</code>) other is under child(<code>ChildPort1</code>)). 
This connection is called as Parent child connection. </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.2"></a>Fig.2&nbsp; Parent Child Connection</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcExposingPort_image2.jpg"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.2">Fig.2</a>] shows Parent Child Connection which 
represents exposition of Child Object Port through Root Object Port.&nbsp; If we 
observe both ports has same direction (The name itself also represents 
directions ChildPort1 Out&nbsp; and RootPOrt2 Out). </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiExposingPort</h3>
<p>To launch <code>CAALmiExposingPort</code>, you will need to set up the build time
environment, then compile <code>CAALmiExposingPort<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiExposingPort Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Designer ( as the use case  modifies/creates the PLM Data) </o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
  <tr>
    <th height="35">IDAttribute1*<td height="16">Identification attribute name for opening Root</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Identification attribute name value for opening Root</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p align="left">CAALmiUcExposingPort.3dxml this 3D XML file contains the root Product&nbsp; Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiUCExposingPort_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiExposingPort
Code</h3>
<p>The <a><code>CAALmiExposingPort</code></a> use case is located in the
<a><code>CAALmiExposingPort.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiExposingPort.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in <code>CAALmiExposingPort </code>use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li>
		<a href="#Retrieve The instance and the ports through which Connection will realize">Retrieve 
		Instance And The Ports Through Which Connection Will Realize</a><li>
		<a href="#Creating connection To Expose Port of Child Instance on Root Level">Creating connection To Expose Port of Child Instance on Root Level     
		</a>     <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">2</a>]delves further into the process of building and launching a CAA use case.</p>
<p>Initially we load the Logical Reference. The loading mode is &quot;Authoring&quot; mode 
[<a href="#References">3</a>] to enable to load in session all the Logical 
structure including Ports. This input model contains one port 
representing Root and Child instance with representing port. </p>

   <script type="text/javascript">insertLinkToTop();</script>

   <h3>
	<a name="Retrieve The instance and the ports through which Connection will realize">
	</a>Retrieve Instance and the ports through which Connection will realize </h3>
<p>In this step we retrieve three objects from the input structure. Through 
	these three objects will realize connection. </p>
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<ul>
	<li>Child Logical Instance (This is instance aggregated under Root) (<code>CAALmiUcExposingPort_Child1.1, piLogConnectableOnChildLogiInst</code> 
	as a <em>CATILogConnectable</em> interface pointer)</li>
	<li>Logical Port representing Child instance (<code>ChildPort1, pLogConnectionPointOnPortAggregatedUnderRoot</code>
	as a <em>CATLogConnectionPoint</em> pointer)</li>
	<li>Logical Port representing Root (<code>RootPort2, pLogConnectionPointOnPortAggregatedUnderChild </code> 
	as a <em>CATLogConnectionPoint</em> pointer)</li>
</ul>
<p><strong>With old API (handling only Ports)</strong></p>
<ul>
	<li>Child Logical Instance (This is instance aggregated under Root) (<code>CAALmiUcExposingPort_Child1.1, piLogicalInstanceOnChildLogInst</code>)
	as a <em>CATILogInstance</em> interface pointer)</li>
	<li>Logical Port representing Child instance (<code>ChildPort1, piLogicalPortOnPortAggregatedUnderChild </code>)
	as a <em>CATILogPort</em> interface pointer)</li>
	<li>Logical Port representing Root (<code>RootPort2, piLogicalPortOnPortAggregatedUnderRoot </code>)
	as a <em>CATILogPort</em> interface pointer)</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script><h3>
<!---------------------------------comment------------------------------------->

<a name="Creating connection To Expose Port of Child Instance on Root Level">
</a>Creating connection To Expose Port of Child Instance on Root Level</h3>
   <p>Here we create Connection between the Root and child instance through port 
	representing Root and port representing child Instance. This is Parent Child Connection, but effectively as we see 
	that the Port which is representing Child Instance get exposed at root level 
	through this Connection.</p>
   
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<pre class="code">...
	<strong>CATILogConnection</strong> *opLogicalConnection = NULL;
	hr = piLogConnectableOnRootRef-&gt;<strong>Connect</strong>(NULL_var,
		pLogConnectionPointOnPortAggregatedUnderRoot,
		piLogConnectableOnChildLogiInst, 
		pLogConnectionPointOnPortAggregatedUnderChild,
		opLogicalConnection);
...</pre>
<p>A call to <code>CATILogConnectable::Connect</code> creates a connection which connects two 
Connection Point aggregated under Connectables. Here the first Connectable is the 
Root Reference (<code>piLogConnectableOnRootRef</code>) and its Connection Point is the 
Port aggregated under it (<code>pLogConnectionPointOnPortAggregatedUnderRoot</code>). 
The second Connectable is the Child Instance (<code>piLogConnectableOnChildLogiInst</code>)
and its Connection Point is the Port under the Child Reference 
(<code>pLogConnectionPointOnPortAggregatedUnderChild</code>). </p>
<p>This API can be used for Parent-Child and Sibling Connectivity [<a href="#References">4</a>].</p>
<p><code>CATLogConnectionPoint</code> can be used for Interfaces and Ports.
So, <code>CATILogConnectable::Connect</code> can also being used to connect Interfaces [<a href="#References">5</a>].</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Logical 
connection type. The API will return Connection object.</p>

<p><strong>With old API (handling only Ports)</strong></p>
<pre class="code">...
	CATListValCATICkeParm_var iLLogAttributesValues;
	CATILogConnection *opLogicalConnection = NULL;
	hr = piLogicalPortOnPortAggregatedUnderRoot-&gt;<strong>Connect</strong>(piLogicalInstanceOnChildLogInst, 
		piLogicalPortOnPortAggregatedUnderChild,
		NULL_var,
		NULL, 
		iLLogAttributesValues, 
		opLogicalConnection);
...  </pre>
<p>A call to <code>Connect</code> of <em>CATILogPort</em> creates a connection which connects two ports one is 
	aggregated under Root <code>piLogicalPortOnPortAggregatedUnderRoot </code>and other is <code>piLogicalPortOnPortAggregatedUnderChild </code>&nbsp;under Child instance 
	(<code>piLogicalInstanceOnChildLogInst</code>)</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate 
	logical connection type. Then we pass environment as NULL, due to this API will 
	consider current environment as input. Then we pass attribute list which is 
	empty since the attributes valuated by Business Logic internally. The API will 
	return Connection object <code>opLogicalConnection</code>.&nbsp; </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiExposingPort</code> use case ends by simply saving and closing the PLM
session. Since all use cases&nbsp; necessarily conclude by saving and closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>
<p>The use case creates Parent Child connection. In this actually we are 
connecting two ports one is aggregated under Root and other is aggregated under 
Child Instance. </p>
<script type="text/javascript">insertLinkToTop();</script>


<h2><a name="References"></a>References</h2>
<table >
	<tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
	</tr>
   
	<tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
	</tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALmiUcSiblingConnectivity.htm">Sibling Connectivity (Ports)</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAALmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (Interfaces)</a></td>
	</tr>
</table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
		<td valign="top">Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2014]</td>
		<td>Updated to add New Connectivity API</td>
	</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>
</body>
</html>


