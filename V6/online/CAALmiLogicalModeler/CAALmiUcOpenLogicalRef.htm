<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Opening a Logical Reference with 2D Layout</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


<style type="text/css">
.style1 {
	font-size: small;
}
</style>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Opening a Logical Reference with 2D Layout</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>CAALmiOpenLogicalRef<b> </b></code>
      use case. The objective of the UC is to illustrate the relevance of loading mode of a Logical Reference, in order to
      retrieve the position and size of its associated 2D Layout. The Technical article[<a href="#References">1</a>] delves deeper into the details of 2D Layout parameters associated with the 
      Logical Reference/Instance.
      <p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiOpenLogicalRef Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiOpenLogicalRef do</a></li>
            <li><a href="#How">How to launch CAALmiOpenLogicalRef</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiOpenLogicalRef</a><a href="#Where"> code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>


<p>You will learn :</p>
<ul>
	<li>Relevance of loading mode of a Logical reference, in order to retrieve the position and size of its associated 2D Layout
( using the API's of <strong>CATIFL2DEntity</strong> interface) .</li>
		<li>We fail to retrieve the parameters of the 2D Layout associated with a 
Logical Reference loaded in Navigation mode	</li>
		<li>We succeed in retrieving the parameters of the 2D Layout associated with a Logical Reference loaded in Authoring mode </li>
	</ul>
	
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiOpenLogicalRef Case</h2>
<p> <code>CAALmiOpenLogicalRef </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code><span class="style1">CAT</span></code><span class="style1">LogicalModelerUseItf</span>&nbsp; and <code>CATFLEditorItf</code>
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiOpenLogicalRef Do</h3>
<p>The use case illustrates the relevance of loading mode of a Logical Reference, in order to retrieve the position and size of its associated 2D Layout. </p>

<p>A significant point to note here is that though its the Logical Reference 
which exposes the CAA service to retrieve this information (size and position), it is the associated Logical Rep 
Ref, which stores
this information. Hence, its mandatory to load the associated logical rep ref of the aggregated rep instance in session, which calls for 
loading the aggregating Logical Reference in session in Authoring Mode.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiOpenLogicalRef</h3>
<p>To launch <code>CAALmiOpenLogicalRef</code>, you will need to set up the build time
environment, then compile <code>CAALmiOpenLogicalRef<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiOpenLogicalRef Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13"  >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number\RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
		 
  <tr>
    <th height="35">IDAttribute1*<td height="16">IDSet attribute Name</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Attribute Value</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the Knowledge&nbsp; type of the Logical Reference to be opened.</p>
<p>You can directly execute this use case if you know how to locate your own component, i.e. its PLM environment, 
PLMType and 
its ID Set attributes. If not, you can import a 3D XML file supplied in the CAALogicalModelerUseItf.edu framework .The input Logical model is retrieved by importing <code><b>CAALmiOpenLogicalRef</b></code>.<a><code><b>3dxml</b></code></a> 
file from the <a><code><b>CAALogicalModelerUseItf.edu</b></code></a> fwk.</p>
<table >
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData\</code>
		<code>CAALmiOpenLogicalRef.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>

<p align="left">This 3D XML file contains the root Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiOpenLogicalRef_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiOpenLogicalRef
Code</h3>
<p>The <a><code>CAALmiOpenLogicalRef</code></a> use case is located in the
<a><code>CAALmiOpenLogicalRef.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiOpenLogicalRef.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAALmiOpenLogicalRef</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve the Logical Ref">Retrieve Logical Reference 
	to open from underlying database</a> 
	
  </li>
		
	<li><a href="#Retrieve the 2D Layout">Retrieve the 2D Layout associated with the Logical Reference</a>
		<ol>
		 <li><a href="#Open the Logical Reference in Navigation Mode">Failure to retrieve 2D Layout Parameters in Navigation Mode
		</a> </li>
		<li><a href="#Open the Logical Reference in Authoring Mode">Success in retrieving the 2D Layout Parameters in Authoring Mode
				</a> </li>

		</ol>
	</li>
  <li>
    <a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiOpenLogicalRef<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply opens a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">3</a>] delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the Logical Ref"></a>Retrieve the Logical Reference to be opened, from an underlying database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference to be opened.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
		<li>Build an Identification Attribute-Value set </li>
		<li>Run Query and retrieve the Identificator of the Logical Reference from the 
	underlying database</li>
	</ol>
<p> The implementation details of Retrieving the Identificator of the PLM Object providing its 
Attribute Set as an input , is described in
the article [<a href="#References">4</a>] .</p>
<p>The Logical reference identificator (retrieved in this section) is further used to open 
the Logical reference, whose implementation details are described in the next 
section. </p>
<script type="text/javascript">insertLinkToTop();</script>



<h3><b><u><a name="Retrieve the 2D Layout"></a></u>Retrieve the 2D Layout associated with the Logical Reference</b></h3>
<p>Here we will open the Logical reference and then retrieve its associated 2D Layout.</p>
<p><strong>Note</strong> : In this section , the use case will illustrate the
<strong>fact</strong> 
that though its the Logical Reference 
which exposes the CAA service to retrieve this information (size and position), it is the associated Logical Rep 
Ref, which stores
this information. Hence, its mandatory to load the associated logical rep ref of the aggregated rep instance in session, which calls for 
loading the aggregating Logical Reference in session in Authoring Mode.</p>
<h4><a name="Open the Logical Reference in Navigation Mode"></a>Failure to retrieve 2D Layout Parameters in Navigation Mode</h4>
<p>We begin this section by opening the Logical Reference in Navigation mode. In 
this mode the logical root ref is loaded with all its aggregated logical 
instances, while the Rep Instances associated with the model, are not loaded in 
session.</p>
<pre class="code">
...
   <strong>CATOmbLifeCycleRootsBag</strong> Bag_OpenedLglRef;
    <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::<strong>Navigation</strong>);
    <strong>CATAdpOpener</strong> opener(Bag_OpenedLglRef,params);
    <strong>CATILogReference</strong> *piLogRefOnComp= NULL;
    hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATILogReference, (void**) &amp;piLogRefOnComp);
...</pre>
<p>Next , we try to retrieve the parameters of the 2D Layout&nbsp; associated with the opened Logical Reference using the global method <code>Retrieve2DLayoutOfOpenedLglRef</code>, providing 
the opened logical reference as an input. </p>
<p>The task of the global method <code>Retrieve2DLayoutOfOpenedLglRef</code> is to retrieve the 
parameters of the 2D Layout associated with the opened Logical Reference.</p>
<pre class="code">
...
    hr= <strong>Retrieve2DLayoutOfOpenedLglRef</strong>(piLogRefOnComp);
...</pre>
<p> The call to the method <code>Retrieve2DLayoutOfOpenedLglRef</code> returns <b>E_FAIL</b>. Now, 
in order to know the reason of this failure , lets check 
the implementation of the method <code>Retrieve2DLayoutOfOpenedLglRef</code>.</p>
<pre class="code">
...
    HRESULT <strong>Retrieve2DLayoutOfOpenedLglRef</strong>(<strong>CATILogReference * &amp;piLogRefOnComp</strong>)
    {
       <strong> </strong>HRESULT hr=E_FAIL;
        if ( NULL == piLogRefOnComp ) return E_FAIL ;
        ...
        CATIFL2DEntity *piFL2DEntityOnLogRef = NULL;
        HRESULT hr1= E_FAIL ;
        HRESULT hr2= E_FAIL ;
<strong>        </strong>hr = <strong>piLogRefOnComp -&gt;QueryInterface</strong>(<strong>IID_CATIFL2DEntity</strong>, 
			                 (void**) &amp;<strong>piFL2DEntityOnLogRef</strong>);
     
        if (SUCCEEDED(hr))
        {
           if ( NULL != piFL2DEntityOnLogRef)
           {
              float oPositionX = 0.f;
              float oPositionY = 0.f;
              hr1 = <strong>piFL2DEntityOnLogRef -&gt; Get2DPosition</strong>(oPositionX, oPositionY);
              ...       
           }
       
       
           if ( NULL != piFL2DEntityOnLogRef)
           {
              float oWidth= 0.f;
              float oHeight= 0.f;
              hr2= <strong>piFL2DEntityOnLogRef -&gt; Get2DSize</strong>(oWidth, oHeight);
	     ...
           }        
           ...
        <strong>if ( SUCCEEDED(hr1) &amp;&amp; SUCCEEDED(hr2) ) return S_OK; else return E_FAIL</strong> ;
    }
...
</pre>
<p>As depicted in the code abstract above, we begin with doing QI on the opened Logical Reference for the <strong>
<em>CATIFL2DEntity </em> </strong>interface pointer.</p>
<p>Looking at the code abstract above, we can conclude that the call to the method <code>Retrieve2DLayoutOfOpenedLglRef</code> 
returns <b>E_FAIL</b> ,for one of the cases listed below :</p>
<ul>
	<li>Call to <strong>CATIFL2DEntity::Get2DPosition</strong> fails</li>
	<li>Call to <strong>CATIFL2DEntity::Get2DSize</strong> fails</li>
	<li>The input is a Logical Reference without 2D Layout. In this case the QI 
	for CATIFL2DEntity fails</li>
</ul>
<p>Effectively, the routine returns SUCCESS, if all three conditions listed 
above SUCCEED.</p>
<p>Now we go by the assumption that the input Logical Reference is with 2D 
Layout. Hence the QI succeeds. Further, since we have opened the Logical 
Reference in a Navigation Mode,&nbsp; both the calls of the <strong>CATIFL2DEntity</strong> Interface&nbsp; 
namely, <strong>Get2DPosition</strong> and <strong>Get2DSize</strong> return FAILURE. As a result, the routine returns FAILURE.</p>
<h4><a name="Open the Logical Reference in Authoring Mode"></a>Success in retrieving the 2D Layout Parameters in Authoring Mode</h4>

<p>Similar to the previous section, we open the Logical Reference , but in 
<strong>Authoring</strong> Mode here . We then try to retrieve its 
associated 2D Layout , by making the call to the global method <code>Retrieve2DLayoutOfOpenedLglRef</code> , 
providing the opened logical reference as an input .</p>
<pre class="code">
...
   <strong>CATAdpOpener</strong> opener2(Bag_OpenedLglRef);
    hr= opener2.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATILogReference, (void**) &amp;piLogRefOnComp);
    ...
    hr= <strong>Retrieve2DLayoutOfOpenedLglRef</strong>(piLogRefOnComp);
...</pre>
<p> Since we have gone with the assumption that the input Logical Reference is 
with 2D Layout. Hence, the call to QI for the CATIFL2DEntity  Interface always returns 
SUCCESS.</p>
<p> Further since we have opened this Logical Reference in Authoring mode, both 
the calls <strong>Get2DPosition</strong> and <strong>Get2DSize</strong>&nbsp; would also return SUCCESS.</p>
<p> As a result, the routine returns SUCCESS, since all three conditions listed 
in the previous section[<a href="#Open the Logical Reference in Navigation Mode">#</a>] , have returned SUCCESS, in the current case.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiOpenLogicalRef </code>use case ends by simply closing the PLM 
session [<a href="#References">3</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case basically illustrates the relevance of loading mode of a Logical Reference, in order to retrieve the position and size of its associated 2D Layout
( using the API's namely, <strong>Get2DPosition</strong>  and <strong>Get2DSize</strong> of <strong>CATIFL2DEntity</strong> interface) . </p>
<p>It reflects the fact that though the interface <strong>CATIFL2DEntity</strong> is implemented on the Logical Reference, 
it is the associated logical rep ref of the aggregated rep instance which stores the 2D Layout 
parameters (position and size) . Hence, in order to retrieve the 2D Layout 
parameters of the Logical Reference , it is mandatory to load the Logical 
Reference in AUTHORING Mode (since loading the Logical reference in Authoring 
mode will also load the associated logical rep ref of the aggregated rep instance in session ).</p>
<p>Hence, the use case concludes that :</p>
<ul>
<li>We fail to retrieve the parameters of the 2D Layout associated with a 
Logical Reference loaded in Navigation mode
		</li>
<li>We succeed in retrieving the parameters of the 2D Layout associated with a Logical Reference loaded in Authoring mode </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td>[1] </td>
       <td>
       <a href="CAALmiTaLogical2DLayout.htm">
       Logical 2D Layout - Technical Article</a></td>
     </tr>

   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[3]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
  </tr>
  
    	<tr>
       <td valign="top" height="12">[4]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying a PLM Object With Attribute Set</a></td>
     </tr>

	<tr>
       <td valign="top" height="12">[5]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>

	<tr>        
        <td valign="top" height="12">[6]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	
     
   	<tr>
       <td valign="top" height="12">[7]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
     
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Jan 2010] </td>
    <td valign="top"> Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


