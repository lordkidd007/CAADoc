<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Removing Logical 2D Picture</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Removing Logical 2D Picture</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>CAALmiRemove2DPicture<b> </b></code>
      				use case. The objective of the UC is to remove a Logical 2D Picture aggregated under a Logical Reference.<p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiRemove2DPicture Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiRemove2DPicture do</a></li>
            <li><a href="#How">How to launch CAALmiRemove2DPicture</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiRemove2DPicture</a><a href="#Where"> code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>


<p>You will learn how to:</p>
<ul>
	
		<li>Remove a Logical 2D Picture aggregated under a Logical Reference (using the API <strong>RemoveAssociated2DPicture</strong> of the <i>
<strong>CATILog2DPictures</strong></i> interface).</li>
		
	</ul>
	
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiRemove2DPicture Case</h2>
<p> <code>CAALmiRemove2DPicture </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code> 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiRemove2DPicture Do</h3>
<p>The use case is meant to remove a Logical 2D Picture aggregated under a Logical Reference.</p>
<p>In the current UC, we have opened the Logical Reference <strong>(CAALmiRemove2DPicture_RootPV1-New195)</strong> 
,which aggregates the Logical 2D Picture (<strong>BluehillsPV1-New205</strong>) under it , as depicted in the <a href="#Fig.1">Fig.1</a> below.
 </p>
 <p><b>WORD OF CAUTION :</b> Interactively in CATIA , the logical 2D picture aggregated under the Logical Reference can only be seen ,when we instantiate that reference 
 under some other logical reference. Hence, from the code point of view, we have actually opened the Logical Reference <strong>(CAALmiRemove2DPicture_RootPV1-New195)</strong> , this is just for the
 <strong>DISPLAY </strong>purpose that we have shown the logical reference(Logical196) in the <a href="#Fig.1">Fig.1</a> below. </p>

<table >
  <caption align="center"><a name="Fig.1"></a>Fig.1 </caption>
  <tr>
    <td>
    <img src="images/CAALmiUcRemove2DPicture_Fig1.jpg"></td>

  </tr>
</table>
<p> Just after opening the Logical reference <strong>(CAALmiRemove2DPicture_RootPV1-New195)</strong> , we then browse through all its aggregated Logical 2D 
Picture Rep Ref to find the Rep Ref, which is to be removed from the loaded 
logical reference.</p>
<p>Once the logical 2D picture rep ref (which is to be removed) is found , 
we then remove it from the loaded logical reference . See the <a href="#Fig.2">Fig.2</a> below.
</p>

<table>
  <caption align="center"><a name="Fig.2"></a>Fig.2 </caption>
  <tr>
    <td>
    <img src="images/CAALmiUcRemove2DPicture_Fig2.jpg"></td>

  </tr>
</table>
<p> <a href="#Fig.2">Fig.2</a> depicts the Logical Reference <strong>(CAALmiRemove2DPicture_RootPV1-New195)</strong> 
, after removing the Logical 2D Picture Rep Ref (<strong>BluehillsPV1-New205</strong>) aggregated under it.</p>



<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiRemove2DPicture</h3>
<p>To launch <code>CAALmiRemove2DPicture</code>, you will need to set up the build time
environment, then compile <code>CAALmiRemove2DPicture<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiRemove2DPicture Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PLM_ExternalID_RepRef IDAttribute1_Ref&nbsp;value1 [IDAttribute2_Ref value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13"  >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number\RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>A string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Designer ( as the use case does modify the PLM Data)</o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
				<tr>
			<th>  PLM_ExternalID_RepRef</th>
			<td>PLM_ExternalID of the Logical 2D Picture Rep Ref to be removed 
			from the loaded logical reference</td>
		</tr>

		
  <tr>
    <th >IDAttribute1_Ref*<td >IDSet attribute Name for the Logical reference to 
	be opened</td>
  </tr>
		
		 <tr>
    <th >value1*<td >Attribute Value for the Logical reference to be opened</td>
  </tr>
		</table>


<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the PLM Type of the Logical Reference to be opened.</p>
<p>You can directly execute this use case if you know how to locate your own component, i.e. its PLM environment, 
PLMType and 
its ID Set attributes. If not, you can import a 3D XML file supplied in the CAALogicalModelerUseItf.edu framework .The input Logical model is retrieved by importing <code>CAALmiRemove2DPicture</code>.<a><code>3dxml</code></a> 
file from the <a><code>CAALogicalModelerUseItf.edu</code></a> framework.</p>
<table >
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData\</code>
		<code>CAALmiRemove2DPicture.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>

<p align="left">This 3D XML file contains the root Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiRemove2DPicture_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiRemove2DPicture
Code</h3>
<p>The <a><code>CAALmiRemove2DPicture</code></a> use case is located in the
<a><code>CAALmiRemove2DPicture.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiRemove2DPicture.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAALmiRemove2DPicture</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve the Logical Ref">Retrieve Logical Reference 
	to open from underlying database</a> 
	 
  </li>
		
		 <li><a href="#Open the Logical Reference in Authoring Mode">Open the Logical Reference in Authoring Mode		</a> </li>
				
	
	<li><a href="#Remove">Remove the Logical 2D picture Rep ref aggregated under the Logical Reference</a></li>
  <li>
    <a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiRemove2DPicture<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply opens a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">3</a>] delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the Logical Ref"></a>Retrieve the Logical Reference to be opened, from an underlying database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference to be opened.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
		<li>Build an Identification Attribute-Value set </li>
		<li>Run Query and retrieve the Identificator of the Logical Reference from the 
	underlying database</li>
	</ol>
<p> The implementation details of Retrieving the Identificator of the PLM Object providing its 
Attribute Set as an input , is described in
the article [<a href="#References">4</a>] .</p>
<p>The Logical reference identificator (retrieved in this section) is further used to open 
the Logical reference, whose implementation details are described in the next 
section. </p>
<script type="text/javascript">insertLinkToTop();</script>




<h3><a name="Open the Logical Reference in Authoring Mode"></a>Open the Logical Reference in Authoring Mode</h3>
<p>Here we will open the Logical reference, so that all the aggregated Logical 2D Picture 
Rep Ref will also be loaded in session. </p>
<pre class="code">
...
   <strong>CATOmbLifeCycleRootsBag</strong> Bag;
   <strong>CATAdpOpener</strong> opener(Bag);
   <strong>CATILogReference</strong> *piLogRefOnComp= NULL;	
   hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATILogReference, (void**) &amp;<strong>piLogRefOnComp</strong>);
...</pre>
<p>The logical reference retrieved here is : <code>piLogRefOnComp</code> (in form of <strong><i>CATILogReference 
</i></strong>interface pointer) is further used in the next section to retrieve all the aggregated logical 2D Picture Rep Ref.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Remove"></a>Remove the Logical 2D picture Rep ref aggregated under the Logical Reference</h3>
<p>This step is the crux of the UC . Here, we remove the Logical 2D Picture Rep Ref aggregated under the loaded Logical Reference.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
	
		<li >Retrieves the Logical 2D picture Rep ref whose the attribute are those of the input			
		</li>
		<li>Remove the Logical 2D picture Rep ref aggregated under the Logical Reference</li>
	</ol>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Retrieves the Logical 2D picture Rep ref"></a>Retrieves the Logical 2D picture Rep ref whose the attribute are those of the input</h4>
<p>We begin this step by retrieving the list of Logical 2D Picture Rep Ref aggregated under the loaded Logical Reference  by making the call to the method <code>GetAssociated2DPictures </code> . </p>


<pre class="code">
...
    CATILog2DPictures *piLog2DPicturesOnLglRef=NULL;
    hr= piLogRefOnComp-&gt;QueryInterface(IID_CATILog2DPictures, (void **)&amp;piLog2DPicturesOnLglRef);
    if (FAILED(hr) || (NULL==piLog2DPicturesOnLglRef)) return 1;

    CATListValCATILog2DPictureRepReference_var spoAssociatedLog2DPicRepRef;
    hr= piLog2DPicturesOnLglRef-&gt;<strong>GetAssociated2DPictures</strong>(spoAssociatedLog2DPicRepRef);
    if(FAILED(hr)) return 1;
...</pre>
<p>As depicted in the code abstract above, we begin with doing QI on the opened Logical Reference for the <i>CATILog2DPictures </i>interface pointer.
</p>
<p> Since we have opened this Logical Reference in <strong>Authoring</strong> 
mode, the call to the method <code>GetAssociated2DPictures </code>return 
<strong>S_OK </strong>, which implies that the method succeeds to find the list 
of the aggregated Logical 2D Picture Rep Ref under the loaded Logical Reference.</p>

<p>The list of Logical 2D Picture retrieved here is further used , 
in order to retrieve the Logical 2D picture Rep ref whose the attribute are those of the 
user input.</p>

<pre class="code">
...
    <strong>CATILog2DPictureRepReference *piRepRefToRemove = NULL;</strong>
    int  iSizeList  =  spoAssociatedLog2DPicRepRef.Size(); 
    for (int i=1; i&lt;=iSizeList; i++)
    {
	<strong>CATICkeObject_var spCkeObjectOn2DPicRepRef= spoAssociatedLog2DPicRepRef[i];</strong>
	CATUnicodeString stringValue;
	<strong>CATCkeObjectAttrReadServices::GetValueAsString</strong>(spCkeObjectOn2DPicRepRef,"PLM_ExternalID",stringValue);

	if(PLM_ID_RepRef==(stringValue))
	{
	    <strong>piRepRefToRemove= (CATILog2DPictureRepReference *)spoAssociatedLog2DPicRepRef[i];</strong>
	     ...
...</pre>
<p>As depicted in the code extract above, we retrieve the PLM_ExternalID of all 
the retrieved Logical 2D Pictures (aggregated under the loaded Logical 
Reference) and compare it with the PLM_ExternalID being provided as the user 
input( the ninth command line argument in our case).&nbsp; When the required 
Logical 2D Picture Rep Ref is found , we then remove this aggregated Logical 2D 
Picture from the loaded Logical Reference (using the API <strong>RemoveAssociated2DPicture</strong> of the <i>
<strong>CATILog2DPictures</strong></i> interface).</p>
<script type="text/javascript">insertLinkToTop();</script>
<h4>Remove the Logical 2D picture Rep ref aggregated under the Logical Reference</h4>
<p>In this section, we remove the Logical 2D Picture (retrieved 
in the previous section [<a href="#Retrieves the Logical 2D picture Rep ref">#</a>] ) 
aggregated under the loaded Logical Reference by making a call to the <strong>RemoveAssociated2DPicture</strong> 
API of the <i>
<strong>CATILog2DPictures</strong></i> interface. This API takes the Logical 2D Picture(to be removed from the logical 
reference) as its input.</p>
<pre class="code">
...
   <strong> hr= piLog2DPicturesOnLglRef-&gt;RemoveAssociated2DPicture</strong>(<strong>piRepRefToRemove);</strong>
    if(FAILED(hr)) return 1;
...
</pre>
<p>Please note that the API <code>RemoveAssociated2DPicture</code> only breaks the association of a 
Logical 2D Picture Representation Reference with a Logical Reference but does not delete the 2D Picture Representation Reference. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiRemove2DPicture </code>use case ends by simply closing the PLM 
session [<a href="#References">3</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case is basically meant to  remove a Logical 2D Picture aggregated under a Logical Reference(using the API <strong>RemoveAssociated2DPicture</strong> of the <i>
<strong>CATILog2DPictures</strong></i> interface).&nbsp; </p>

<p><strong>NOTE</strong> : The API <code>RemoveAssociated2DPicture</code> only breaks the association of a 
Logical 2D Picture Representation Reference with a Logical Reference <strong>BUT</strong> does not delete the 2D Picture Representation Reference. </p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td>[1] </td>
       <td>
       <a href="CAALmiTaLogical2DLayout.htm">
       Logical 2D Layout - Technical Article</a></td>
     </tr>

   <tr>
       <td valign="top">[2]</td>
       <td ><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top">[3]</td>
       <td ><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
  </tr>
  
    	<tr>
       <td valign="top" >[4]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying a PLM Object With Attribute Set 
		</a> </td>
     </tr>

	<tr>
       <td valign="top">[5]</td>
       <td >
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>

	<tr>        
        <td valign="top">[6]</td>
        <td ><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	
     
   	<tr>
       <td valign="top">[7]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
     
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Feb 2010] </td>
    <td valign="top"> Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


