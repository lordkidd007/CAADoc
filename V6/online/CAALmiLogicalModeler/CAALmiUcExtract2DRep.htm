<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Extracting 2D Rep of the Logical Reference</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Extracting 2D Rep of the Logical Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>CAALmiExtract2dRep<b> </b></code>
      use case. The objective of the UC is to extract the 2D Rep associated with 
		the logical reference. The use case further saves the retrieved 2D Rep 
		in an image file format( <strong>.emf</strong> in the current UC).
      <p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiExtract2dRep Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiExtract2dRep do</a></li>
            <li><a href="#How">How to launch CAALmiExtract2dRep</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiExtract2dRep</a><a href="#Where"> code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>


<p>You will learn :</p>
<ul>
	<li>Retrieving the 2D Rep associated with the logical reference (using the API <strong>Extract2DGraphRepresentation</strong> of the <i>
<strong>CATIFL2DEntity</strong></i> interface)</li>
		<li>Creating the picture from 2D Rep and saving the picture in an image file 
		format (<strong>.emf</strong> 
		in the current UC)</li>
	</ul>
	
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiExtract2dRep Case</h2>
<p> <code>CAALmiExtract2dRep </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATFLEditorItf</code> and <code>PrintBase</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiExtract2dRep Do</h3>
<p>The use case is meant to extract the 2D Rep associated with the logical 
reference. The use case then creates the picture from the retrieved 2D Rep and 
save the newly created picture in an image file format (.emf in the current UC).</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiExtract2dRep</h3>
<p>To launch <code>CAALmiExtract2dRep</code>, you will need to set up the build time
environment, then compile <code>CAALmiExtract2dRep<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiExtract2dRep Repository Server User 
Password SecurityCtx istrFileName iImageDirectory PLMType IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13"  >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number\RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</o:p>
              </td>
		</tr>
		<tr>
			<th> <b>istrFileName</b></th>
			<td>Name of the file to create (without extension)</td>
		</tr>
		<tr>
			<th> <b>iImageDirectory</b></th>
			<td>Repository of the file</td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
  <tr>
    <th height="35">IDAttribute1*<td height="16">IDSet attribute Name</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Attribute Value</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the PLM type of the Logical Reference to be opened.</p>
<p>You can directly execute this use case if you know how to locate your own component, i.e. 
PLMType and 
its ID Set attributes. If not, you can import a 3D XML file supplied in the CAALogicalModelerUseItf.edu framework .The input Logical model is retrieved by importing <code><b>CAALmiExtract2dRep</b></code>.<a><code><b>3dxml</b></code></a> 
file from the <a><code><b>CAALogicalModelerUseItf.edu</b></code></a> fwk.</p>
<table >
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData\</code>
		<code>CAALmiExtract2dRep.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>

<p align="left">This 3D XML file contains the root Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiExtract2dRep_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiExtract2dRep
Code</h3>
<p>The <a><code>CAALmiExtract2dRep</code></a> use case is located in the
<a><code>CAALmiExtract2dRep.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiExtract2dRep.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAALmiExtract2dRep</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve the Logical Ref">Retrieves the Logical Reference and Load it in Authoring Mode </a> 
	
  </li>
		
	<li><a href="#Extract the 2D Rep associated with the Logical Reference">Extract the 2D Rep associated with the Logical Reference</a>
		<ol>
		 <li><a href="#Extract the 2D Rep associated with the loaded Logical Reference">Extract the 2D Rep associated with the loaded Logical Reference		</a> </li>
		<li><a href="#Save the retrieved 2D Rep(of Logical Reference) in an Image file">Save the retrieved 2D Rep(of Logical Reference) in an Image file format
				</a> </li>

		</ol>
	</li>
  <li>
    <a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiExtract2dRep<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply opens a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">2</a>] delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the Logical Ref"></a>Retrieves the Logical Reference and Load it in Authoring Mode </h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference to be opened.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
		<li>Build an Identification Attribute-Value set </li>
		<li>Run Query and retrieve the Identificator of the Logical Reference from the 
	underlying database</li>
	</ol>
<p> The implementation details of Retrieving the Identificator of the PLM Object providing its 
Attribute Set as an input , is described in
the article [<a href="#References">3</a>] .</p>
<p>Next, we open the logical reference in Authoring mode ,using the 
identificator(retrieved just above) of the logical reference . In this mode the 
logical root reference is loaded with all its aggregated logical instances and 
also the Rep Instances associated with the model loaded in session.</p>
<script type="text/javascript">insertLinkToTop();</script>



<h3><b><u><a name="Extract the 2D Rep associated with the Logical Reference"></a></u>Extract the 2D Rep associated with the Logical Reference</b></h3>
<p>This step is the crux of the current UC . We begin this step by extracting 
the 2D Rep associated with the loaded logical reference. The use case further 
creates the picture from the retrieved 2D Rep and save the newly created picture 
in an image file format(.emf in the current UC).</p>
<pre class="code">
...
      <strong>CATRep * opRep =NULL;</strong>
      hr= <strong>Extract2dRepofOpenedLglRef(piLogRefOnComp, opRep);
</strong>      ...
      CATUnicodeString istrFileName(iArgv[6]); 
      CATUnicodeString iImageDirectory(iArgv[7]);
      hr= <strong>Save2dRepInImageFile(opRep,istrFileName,iImageDirectory);</strong>
...
</pre>
<p> <strong>Note</strong> :  <strong>Please note that</strong> the pointer <b>opRep</b> (CATRep * 
, containing the 2D Rep associated with the loaded logical reference)&nbsp;
<strong>must not be released</strong> by the user .</p>
<h4><a name="Extract the 2D Rep associated with the loaded Logical Reference"></a>Extract the 2D Rep associated with the loaded Logical Reference</h4>
<p>In this step , we extract the 2D Rep associated with the logical reference 
,retrieved in the previous step [<a href="#Retrieve the Logical Ref">#</a>] .</p>
<pre class="code">
...
    HRESULT <strong>Extract2dRepofOpenedLglRef(CATILogReference * &amp;piLogRefOnComp,CATRep * &amp;opRep)</strong>
    {
	HRESULT hr=E_FAIL;
	
         CATIFL2DEntity *piFL2DEntityOnLogRef = NULL;
	hr = piLogRefOnComp-&gt;QueryInterface(IID_CATIFL2DEntity, (void**) &amp;piFL2DEntityOnLogRef);
	...
	   hr= piFL2DEntityOnLogRef-&gt;<strong>Extract2DGraphRepresentation</strong>(opRep);
	...
	return hr;
    
...
</pre>
<p>As depicted in the code abstract above, we begin with doing QI on the opened Logical Reference for the <strong>
<em>CATIFL2DEntity </em> </strong>interface pointer.</p>
<p>We make a call to the <code>CATIFL2DEntity::Extract2DGraphRepresentation</code> 
to extract the 2D Rep (<strong>in form of </strong> <i><strong>CATRep </strong> </i>
<strong>*</strong>) associated with the loaded logical reference. The 2D Rep 
retrieved in this step is further saved in an image file , whose implementation 
details are described in the next section.<h4><a name="Save the retrieved 2D Rep(of Logical Reference) in an Image file"></a>Save the retrieved 2D Rep(of Logical Reference) in an Image file</h4>

<p>In this step , we creates the picture from the retrieved 2D Rep[<a href="#Extract the 2D Rep associated with the loaded Logical Reference">#</a>] and save the 
newly created picture in an image file (.emf in the current UC).</p>
<pre class="code">
...
    HRESULT <strong>Save2dRepInImageFile(CATRep * &amp;ipRep,CATUnicodeString istrFileName,CATUnicodeString iImageDirectory)</strong>
    {
	if(NULL ==ipRep) return E_FAIL;

	HRESULT hr = E_FAIL;
	const CATString <strong>iFileLanguage("EMF")</strong>; // windows metafile
	CATSupport * pSupport = new CATSupport(1, 1);
	if (NULL != pSupport)
	{
	    float xmin, xmax, ymin, ymax;
	    ((CAT2DRep*)ipRep)-&gt;<strong>GetBoundingElement</strong>().GetParameter(&amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax);
		
	    const float factor = pSupport-&gt;<strong>GetMMInSupportUnit</strong>()/0.278f;
		
	    const float supportWidth  = (xmax-xmin)*factor / pSupport-&gt;GetRatioWH();
	    const float supportHeight = (ymax-ymin)*factor;
	    pSupport-&gt;SetWidthAndHeight(supportWidth+1, supportHeight+1);
	    CAT2DViewpoint * pViewpoint2D = new <strong>CAT2DViewpoint</strong>;
	    if (NULL != pViewpoint2D)
	    {
		pSupport-&gt;<strong>AddViewpoint</strong>(pViewpoint2D);

		pViewpoint2D-&gt;<strong>AddRep</strong>((CAT2DRep*)ipRep);
		pViewpoint2D-&gt;SetDepth(1);
		pViewpoint2D-&gt;<strong>Reframe</strong>(supportWidth, supportHeight, pSupport-&gt;GetMMInSupportUnit(), pSupport-&gt;GetRatioWH());
	    }

	    CATPrintImage * pImage = NULL;
	    pImage = new <strong>CATPrintSupportImageBase</strong>(pSupport, pViewpoint2D, CATPRINTRENDER_VECTOR);

	    CATPrintParameters p;
	    p.SetImageFormatUse(TRUE);
	    p.SetWhitePixel(0); 
		
	    float rp, gp, bp;
	    p.GetBackgroundColor( rp, gp, bp);
	    float fGamma = p.GetGamma();

	    const char * charImageDirectory = iImageDirectory.ConvertToChar();
	    CATLibStatus status = ::<strong>CATCreateDirectory</strong>(charImageDirectory);
	    if (CATLibSuccess == status)
	    {
		if(1==result) hr = S_OK;
		...
	    }

	return hr;
}...</pre>

<p>This step can be divided into the following two sub-steps :</p>
<ol>
		<li>Creating the picture from the retrieved 2D Rep </li>
		<li >Saving the newly created picture in an image file format (.emf in 
		the current UC )</li>
	</ol>
<p><strong>Creating the picture from the 2D Rep</strong> 
basically involves the usage of following classes : </p>
<p>1) CATSupport : is used for graphic visualization and for plotting of the 
retrieved 2D Rep&nbsp; </p>
<p>

2)

CAT2DViewPoint :
represents the way the 2D picture of the 2D Rep is seen&nbsp; </p>
<p>

Here, we make a call to <code>CAT2DViewPoint::AddRep</code>&nbsp; to add the retrieved 2D Rep 
to the CAT2DViewPoint&nbsp; and then a call to <code>CAT2DViewPoint::Reframe</code> reframes the input 2D Rep in the window.</p>


<p><strong>Saving the newly created picture in an image file format&nbsp;
</strong> basically involves the usage of following classes :</p>


<font SIZE="2">
<p>1) CATPrintImage: is used to build a print image of the retrieved 2D Rep</p>
<p>2) CATPrintFileDevice : is used to print the image of the 2D Rep in an image 
file format&nbsp; . </p>
<p>Here making a call to <code>CATPrintFileDevice::Print</code> prints the image of the 2D 
Rep in an image file format . <strong>Please note that</strong> , in the current 
UC , we have used .<strong>emf</strong> format for printing the 2D Rep image.</p>
</font>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiExtract2dRep </code>use case ends by simply closing the PLM 
session [<a href="#References">2</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case basically illustrates the end user the way to extract the 2D Rep associated with the logical reference. The use case further saves the retrieved 2D Rep in an image file 
format (<strong> .emf </strong>in the current UC). </p>
<ul>
	<li>Retrieving the 2D Rep(in form of <i><strong>CATRep</strong></i>) associated with the logical reference (using the API <strong>Extract2DGraphRepresentation</strong> of the <i>
<strong>CATIFL2DEntity</strong></i> interface)</li>
		<li>Creating the picture from 2D Rep and saving the picture in an image 
		file format ( using the API's of classes : <b>CATSupport , CAT2DViewPoint , CATPrintImage , CATPrintFileDevice )</b></li>
	</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   

   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
  </tr>
  
    	<tr>
       <td valign="top" height="12">[3]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying a PLM Object With Attribute Set</a></td>
     </tr>

	<tr>
       <td valign="top" height="12">[4]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>

	<tr>        
        <td valign="top" height="12">[5]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	
     
   	<tr>
       <td valign="top" height="12">[6]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
     
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [April 2010] </td>
    <td valign="top"> Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


