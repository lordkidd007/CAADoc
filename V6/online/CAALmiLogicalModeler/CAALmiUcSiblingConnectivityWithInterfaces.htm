<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Sibling Connectivity</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Sibling Connectivity With Interfaces</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case creates Sibling Connection i.e. it creates the connection 
		between two sibling (same level) interfaces (System Type Exposition Instance).</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALmiSiblingConnectivityWithInterfaces Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALmiSiblingConnectivityWithInterfaces Do</a></li>
					<li><a href="#How">How to Launch CAALmiSiblingConnectivityWithInterfaces</a></li>
					<li><a href="#Where">Where to Find the CAALmiSiblingConnectivityWithInterfaces 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learning's from this Use Case are:</p>
<ul>
	<li>How to create the Sibling connection (same level) between two interfaces.</li>
	<li>Objects involved while creation of connection.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALmiSiblingConnectivityWithInterfaces Use Case</h2>
<p>CAALmiSiblingConnectivityWithInterfaces is a use case of the CAALogicalModelerUseItf.edu framework 
that illustrates CATLogicalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALmiSiblingConnectivityWithInterfaces Do</h3>
<p>In this use case we have created Sibling connection. Sibling connection means 
the connection between interfaces those are on the same level.</p>
<p>Initially in this use case we retrieve four objects to form connection:</p>
<ul>
	<li>Instance 1 under which the Source Interface is aggregated (<strong>Logical Instance 1</strong>).</li>
	<li>Source Connection Point 1 (<strong>System Type Exposition Instance Out</strong>).</li>
	<li>Instance 2 Under which the Target Interface is aggregated (<strong>Logical Instance 2</strong>).</li>
	<li>Target Connection Point 2 (<strong>System Type Exposition Instance In</strong>).</li>
</ul>
<p>Both System Type Exposition Instances are instantiating the same Logical System Type Reference in order to be compatible for a connection.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1 Sibling Interfaces</caption>
	<tr>
		<td>
		<img alt="Sibling Interfaces" src="images/CAALmiSiblingConnectivityWithInterfaces_Image_1.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig1">Fig. 1</a>] shows siblings Interfaces.</p>
<p>Then we form connection from Source instance object to Target instance object. 
This formed connection we call it as <strong>Sibling connection</strong>.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Sibling Connection</caption>
	<tr>
		<td>
		<img alt="Sibling Connection" src="images/CAALmiSiblingConnectivityWithInterfaces_Image_2.jpg"/></td>
	</tr>
</table>
<p>The above image shows the sibling connection (its name is <strong>Logical Sibling Connection</strong>) 
[<a href="#Fig2">Fig. 2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALmiSiblingConnectivityWithInterfaces</h3>
<p>To launch CAALmiSiblingConnectivityWithInterfaces, you will need to set up the build time environment, 
then compile CAALmiSiblingConnectivityWithInterfaces along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAALmiSiblingConnectivityWithInterfaces Repository Server User Password 
SecurityCtx PLMType IDSetAttribute1 IDSetAttributeValue1 [IDSetAttribute1* IDSetAttributeValue1* 
...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerInterface/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The String representing PLMType</td>
	</tr>
	<tr>
		<th>IDSetAttribute1*</th>
		<td>First Identification Set(IDSet) attribute for the Logical Reference
		</td>
	</tr>
	<tr>
		<th>IDSetAttributeValue1*</th>
		<td>First IDSet attribute value for the Logical Reference</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the PLM type of the Logical Reference to be opened.</p>
<p><code>CAALmiSiblingConnectivityWithInterfaces.3dxml</code> is the 3D XML file contains the 
root Logical Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: log00000001_E6ECA968-0000-3F08-5396C1FB000769D9</li>
	<li><code>Version</code>: ---</li>
	<li><code>V_Name</code>: CAALmiSiblingConnectivityWithInterfaces_RootRef</li>
</ul>
<p><strong>Attention</strong>: This 3dxml have been created with OneClick and Unified Typing activated (default environment).</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALmiSiblingConnectivityWithInterfaces Code</h3>
<p>The CAALmiSiblingConnectivityWithInterfaces use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAALogicalModelerUseItf.edu\CAALmiSiblingConnectivityWithInterfaces.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAALmiSiblingConnectivityWithInterfaces use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving the two Logical Instances as Logical Connectable</a></li>
	<li><a href="#Step2">Retrieving associated Logical Connection Point: System Type Exposition Instances 
	between which the sibling connection is to be made</a></li>
	<li><a href="#Step3">Creating Connection between two Instances through Interfaces</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A PLM session 
is an environment essential for running a CAA use case. The article [<a href="#References">1</a>]delves 
further into the process of building and launching a CAA use case.</p>
<p>Here we open in Authoring mode [<a href="#References">3</a>] the Logical structure 
input provided by the use case . This input model contains two instances with Interfaces.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the two Logical Instances as Logical Connectable</h3>
<p>In this step we retrieve two objects from the input Logical structure. The 
objects retrieved are the two instances in between we want to create connection:</p>
<ul>
	<li>Instance 1 under which the Source Interface is aggregated (<strong>piLogConnectableOnLogiInst_1</strong> 
		as a <em>CATILogConnectable</em> interface pointer).</li>
	<li>Instance 2 Under which the target Interface is aggregated (<strong>piLogConnectableOnLogiInst_2</strong> 
		as a <em>CATILogConnectable</em> interface pointer).</li>
</ul>

<h3><a name="Step2"></a>Retrieving associated Logical Connection Point: System Type Exposition Instances 
	between which the sibling connection is to be made</h3>
<p>In this step we retrieve two objects from the input Logical structure. The 
objects retrieved are the corresponding Interfaces through which connection is made:</p>
<ul>
	<li>Source Interface 1 (<strong>pLogConnectionPointOnConnectionPoint_1</strong> as a <em>CATLogConnectionPoint</em> 
		pointer).</li>
	<li>Target Interface 2 (<strong>pLogConnectionPointOnConnectionPoint_2</strong> as a <em>CATLogConnectionPoint</em> 
		pointer).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating Connection between two Instances through Interfaces</h3>
<p>Now use case creates a connection between two instances through retrieved Interfaces.</p>
<pre class="code">...
    CATIType_var spType = NULL_var;
    <strong>CATILogConnection</strong> *opiLogicalConnection = NULL;
    hr = piLogConnectableOnLogiInst_1-&gt;<strong>Connect</strong>(spType,
		pLogConnectionPointOnConnectionPoint_1,
		piLogConnectableOnLogiInst_2, 
		pLogConnectionPointOnConnectionPoint_2,
		opiLogicalConnection);
...</pre>
<p>A call to <code>CATILogConnectable::Connect</code> creates connection between two 
connectables, <code>pLogConnectionPointOnConnectionPoint_1</code> is an Interface aggregated under the instance
<code>piLogConnectableOnLogiInst_1</code> on which we have made a call for connect 
API. <code>piLogConnectableOnLogiInst_2</code> is an other instance to which we want 
to connect first one. And <code>pLogConnectionPointOnConnectionPoint_2</code> is the other Interface 
aggregated under second instance.</p>
<p>A Connectable can be a Logical Instance or a Logical Reference. Here <code>CATILogConnectable::Connect</code> is used
for Sibling Connectivity, but it can also being used to create Parent-Child Connectivity
 (one of the Connectable is a Reference) [<a href="#References">4</a>].</p>
<p><code>CATLogConnectionPoint</code> can be used for Interfaces and Ports.
So, <code>CATILogConnectable::Connect</code> can also being used to connect Ports [<a href="#References">5</a>].</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Logical 
connection type. The API will return Connection object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAALmiSiblingConnectivityWithInterfaces use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case basically illustrated the user how to create the Sibling Connection 
(using <code>CATILogConnectable::Connect</code> API). Sibling connection means the 
connection between Interfaces those are on the same level. The four objects required 
to form sibling connection are:</p>
<ul>
	<li>Instance 1 under which the Source Interface is aggregated.</li>
	<li>Source Interface (System Type Exposition Instance 1).</li>
	<li>Instance 2 Under which the Target Interface is aggregated.</li>
	<li>Target Interface (System Type Exposition Instance 2).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALmiUcExposingPort.htm">Parent-Child Connectivity</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAALmiUcSiblingConnectivity.htm">Sibling Connectivity (Ports)</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jun 2014]</td>
		<td>&gt;Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
