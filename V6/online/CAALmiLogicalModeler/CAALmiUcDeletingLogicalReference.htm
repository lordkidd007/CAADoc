<html>
	<head>
		<title>Deleting Product Reference</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

                <style type="text/css">
.style3 {
	border-color: #c0c0c0;
	border-width: 0;
}
</style>

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Deleting Logical Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This use case basically illustrates deletion of Logical 
					Reference in addition Use Case clarifies certain key concepts related to 
					deleting a <code>Logical Reference</code> from the database. </p>
				<ul>
							<li><A href="#Learn">What You Will Learn 
                                With This Use Case</A>
							<li><a href="#UseCase">The 
                                CAALmiDeletingLogicalReference Use Case</a>
							<ul type="disc">
								<li><a href="#What">What Does 
                                        CAALmiDeletingLogicalReference Do</a>
								<li><a href="#How">How to Launch 
								CAALmiDeletingLogicalReference </a>
								<li><a href="#Where">Where to Find the 
								CAALmiDeletingLogicalReference Code</a> </li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A> </li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to delete the Logical Structure objects (<code>Logical References</code>) </p>
<p>In the process user also learns to:</p>
<ul>
	<li>Retrieve the <code>Identificator</code> of an input Logical Reference, an input for the delete API</li>
	<li>Deploy <code>CATOmbLifeCycleRootsBag</code> in the client code, 
	to gain complete control over the lifecycle of a PLM Component</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAALmiDeletingLogicalReference
        Use Case</h2>
		<p><code><a>CAALmiDeletingLogicalReference</a></code> is a use case of the 
        <code><a>CAALogicalModelerUseItf.edu</a></code> framework that 
			illustrates <code>CATLogicalModelerUseItf</code> framework capabilities.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAALmiDeletingLogicalReference
        Do</h3>
		<p>The Use case basically talks about deletion of Logical reference. </p>
<p>For deletion of Logical reference one basic prerequisite is the Component 
which we want delete should not be loaded in session while deleting. This case 
is illustrated in this Use Case. In the beginning of the Use case we list all 
the references those we want to delete and&nbsp; further we load them in 
session. Next, the Use Case makes an attempt to delete Logical Reference when 
they are loaded in session which results in to failure of deletion process. Then 
further Use case unloads the Logical Reference from session now again use cases 
attempts to delete Logical References, this results into success if the input 
elements to delete are valid like expressed just after.</p>
<p>While illustration of&nbsp;deletion of logical Reference the Use Case first 
demonstrates the process of loading and unloading of Logical Reference component 
in session. For details of lifecycle management of PLM component we can refer [<a href="#References">5</a>] 
Technical Article.&nbsp; But the use case is also the means to learn the other 
features of the Logical reference deletion:</p>
<ul>
	<li>If there exists an instance of a Mono-Instantiable Logical Rep Ref, under the Logical Ref, the Mono-Instantiable Rep Ref too gets deleted from the database</li>
	<li>A PLM Logical Reference cannot be deleted if an instance of it exists
					aggregated under another Logical Reference, not contained in the list of 
				References for deletion</li>
	<li>A Logical Reference fails to get deleted if its state is LOCKED in the database</li>
</ul>
<p>With the input model, C<code>AALmiDeletingLogicalReference_Root,</code>&nbsp; 
[<a href="#Fig.1">Fig.1</a>], see &quot;<a href="#How">How to Launch CAALmiDeletingLogicalReference 
section</a>&quot; section how to get it, try to delete some elements</p>
<table cellspacing="1" class="style3">
	<caption><a name="Fig.1"></a>Fig.1 Logical Model Structure</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcDeletingLogicalReference_image1.jpg"></td>
	</tr>
</table>
<ul>
	<li>Delete Root Reference (CAALmiDeletingLogicalReference_Root) - you could 
	observe that after the deletion,
	<ul>
		<li>Logical2DRepRef, the 2DLayout Rep Ref will be deleted.&nbsp; The 
		Logical rep instance, and its Logical rep ref are deleted when the 
		Logical Reference is deleted. </li>
		<li>CAALmiDeletingLogicalReference_Child.1 is deleted , but if you make 
		a query in DB, CAALmiDeletingLogicalReference_Child still exists</li>
	</ul>
	</li>
	<li>Delete CAALmiDeletingLogicalReference_Child : it will fail, because, in 
	DB , there is at least one instantiation of this Logical Reference (CAALmiDeletingLogicalReference_Child.1)</li>
</ul>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAALmiDeletingLogicalReference</h3>
		<p>To launch <code>CAALmiDeletingLogicalReference</code>, you will need to set up the build time environment, 
			then compile <code>CAALmiDeletingLogicalReference<b> </b></code>along with its prerequisites, set up the run time 
			environment, and then execute the use case [<a href="#References">2</a>].&nbsp;</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a>CAALmiDeletingLogicalReference </code><a><code><i>Repository Server User Password SecurityCtx PLMType
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PLM_ExternalID1 majorrevision1 [PLM_ExternalID2 majorrevision2 ...]</i>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th><b>Server</b></th>
    <td>The server as ServerName:ServerPort/rootURI</td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project). 
	Choose Role as Designer</td>
  </tr>
  <tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
	<tr>
    <th ><b>PLM_ExternalID1</b></th>
    <td>The <code>PLM_ExternalID</code> value of a Logical Reference for deletion </td>
  </tr>
  <tr>
    <th ><b>majorrevision1</b></th>
    <td>The <code>majorrevision</code> of a Logical Reference for deletion </td>
  </tr>
  <tr>
    <th ><b>PLM_ExternalID#</b></th>
    <td>The <code>PLM_ExternalID</code> of another Logical Reference for deletion (optional)</td>
  </tr>
	<tr>
    <th ><b>majorrevision#</b></th>
    <td>The <code>majorrevision</code> of another Logical Reference for deletion (optional)</td>
  </tr>
  </table>

<p>The input model for this use case is retrieved by importing the <code>CAALmiDeletingLogicalReference</code><a><code>.3dxml</code></a> file which 
located at:</p>
<table id="table15" width="974">
    <tr>
      <td width="972"><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData</code></td>
    </tr>
</table>
	<p align="left">In order to better understand the concepts listed in the 
		&quot;<a href="#What">What does the CAALmiDeletingLogicalReference do</a> 
	&quot; section, we recommend the Use Case be run on the input model retrieved by 
	importing the <code>3dxml</code> listed above. User has an 
		option to import the input model with or without prefix. The Use Case 
		deletes certain components of the input model. Hence we advise 
		re-importing the <code>3dxml</code>, each time the deletion 
		succeeds while running each scenario of the Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="Where"></a>Where to Find the CAALmiDeletingLogicalReference
        Code</h3>
<p>The <code>CAALmiDeletingLogicalReference<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\</code><a><code>CAA</code></a><code>LogicalModelerUseItf</code>.<code>edu\</code>
	<code>CAALmiDeletingLogicalReference.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">3</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
		<ul >
			<li><a href="#Prolog">Prolog</a><li>
			<a href="#Retrieve Identificator">Retrieve Identificators of input 
			Logical References</a></li>
			<li>
			<a href="#Load Logical Ref">Load Logical Reference in session</a></li>
			<li>
			<a href="#Delete the input PLM Refs currently loaded in the Session">Delete the input Logical References currently loaded in the Session</a></li>
			<li><a href="#Unload the input PLM Comps from the current session">Unload the input Logical References from the Session</a></li>
			<li>
			<a href="#Delete the input PLM Refs just unloaded from the current session">Delete the input Logical References just Unloaded from the Session</a></li>
			<li><a href="#Epilog">Epilog</a></li>
	</ul>
    <script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiDeletingLogicalReference</code> use case begins by creating a 
session and connecting to the Input Repository  with an 
appropriate role (Designer, in this case). The Use Case&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
[<a href="#References">3</a>] deals with Opening and Closing a PLM Session.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
        <a name="Retrieve Identificator"></a>Retrieve Identificators of input 
		Logical Reference</h3>
		<p>We begin by retrieving the <code>Identificator</code> [<a href="#References">1</a>] 
		of each input Logical Reference, prerequisite for this is retrieving usable type 
		of&nbsp;the input Logical Reference.</p>
		
<p>At this stage, we have with us the inputs (PLM type string and the 
attribute-value sets of PLMExtrenal_ID and majorrevision attributes) which together define our database query. The query 
enables us retrieve an Identificator of a PLM Component, conforming to the 
search criteria, defined by the query[<a href="#References">4</a>]. </p>
		<table class="code" id="table51">
			<tr>
				<td><pre>...
    CATUnicodeString PLM_ExternalIDValue;
    CATUnicodeString RevisionValue;
    
    CATLISTP(CATIAdpPLMIdentificator) AdpIdentificatorListofLogicalReferencesToDelete;
    CATOmbLifeCycleRootsBag Bag;
     
     for (int AttrValueIndex=7; AttrValueIndex&lt;=(7+((NbPLMComps-1)*2)); AttrValueIndex++)
     {
	  CATListOfCATString iListAttributeName ;
	  CATListOfCATUnicodeString iListAttributeValue ;
		
	  iListAttributeName.Append("PLM_ExternalID");
          iListAttributeName.Append( CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());
	   
   	  PLM_ExternalIDValue = iArgv[AttrValueIndex];
	  RevisionValue      = iArgv[++AttrValueIndex];
		
	  iListAttributeValue.Append(PLM_ExternalIDValue);
	  iListAttributeValue.Append(RevisionValue);
		
	  CATIAdpPLMIdentificator* opiIDComp = NULL;
   
	  hr = CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				              istrPLMType,opiIDComp);
  
        ... 
        AdpIdentificatorListofLogicalReferencesToDelete.<strong>Append</strong>(opiIDComp);
...</pre>
				</td>
			</tr>
		</table>
		<p>A call to <code>CAARetrieveIDofUniquePLMObject </code> makes a 
		query on database and returns a identificator.</p>
	<p>&nbsp;<code>opiIDComp</code>, which is appended to a list of
<code>Identificators</code> namely <code>AdpIdentificatorListofLogicalReferencesToDelete</code>. 
This list has the <code>Identificators</code> of all PLM Components input 
by the user, for deletion.</p>
<script type="text/javascript">insertLinkToTop();</script> 
	<h3>
<a name="Load Logical Ref"></a>Load Logical Reference in session</h3>
<p>
Now we load the Logical Reference in the session. We open the Logical reference 
for which we have retrieved identificator.&nbsp; </p>
<table class="code" id="table51">
			<tr>
				<td><pre>...
       <strong>CATILogReference</strong> *piLogRefOnComp = NULL;
       ...
       <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
       <strong>CATAdpOpener</strong> opener(Bag,params);
       hr= opener.<strong>CompleteAndOpen</strong>(oIdentifier,IID_CATILogReference, (void**) &amp;piLogRefOnComp);
   }
...</pre>
				</td>
			</tr>
		</table>
<p>
A call to <code>CompleteAndOpen</code> of <em>CATAdpOpener</em> loads the Logical reference in 
the session of given identificator.</p>
<p>
At a later stage we will unload this PLM Component from the current 
	session. Hence, to have a control over the lifecycle of the input PLM 
	Components, a <code>BAG</code> is deployed. Thus all input Logical Reference Components are 
	inserted within the <code>BAG</code>, thus letting the execution have 
	selectively, a complete control over their lifecycle. Please refer to the 
	tech article [<a href="#References">5</a>] to understand the details of the 
	BAG concept.</p>
<script type="text/javascript">insertLinkToTop();</script> 
<h3>
<a name="Delete the input PLM Refs currently loaded in the Session"></a>Delete 
the input Logical References currently loaded in the Session</h3>

<p>The input Logical References are all loaded in the current session. An attempt to 
delete them is expected to fail, since a PLM Component can be deleted only if it 
is not loaded in the current session.</p>
		<table class="code" id="Table38">
			<tr>
				<td><pre>...
	hr = <b>CATLogDeleteServices::DeleteLogicalReferencess</b>(<b>AdpIdentificatorListofLogicalReferencesToDelete</b>);
	if (<b>S_OK == hr</b>)
		<b>return 1</b>;
...</pre>
				</td>
			</tr>
		</table>
		<p>The <code>CATLogDeleteServices::DeleteLogicalReferencess</code> 
		call takes a list namely. <code>AdpIdentificatorListofLogicalReferencesToDelete</code>, as 
		an input. This list has the <code>Identificators</code> of all 
		PLM Components for deletion. Since this call is expected to return <code>
		FAILURE</code>, we exit the execution if it returns <code>SUCCESS</code>.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
<h3 ><a name="Unload the input PLM Comps from the current session">
</a>Unload the input Logical References from the Session</h3>
	<p>We proceed to unload all the input PLM Components from the current 
	session, one of the pre-requisites to successfully delete a PLM Component, a 
	&quot;<b>short transaction</b>&quot; operation done directly on the database. </p>
		<table class="code" id="Table37">
			<tr>
				<td><pre>...
	hr = <b>Bag.RemoveAll</b>();
...</pre>
				</td>
			</tr>
		</table>
		<p align="left"><code>CATOmbLifeCycleRootsBag</code>::<code>RemoveAll</code> 
		call empties the contents of the <code>BAG</code>, and thus 
		unloads all PLM Components, controlled through this <code>BAG</code>,&nbsp; 
		from the current session.</p>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
		<a name="Delete the input PLM Refs just unloaded from the current session">
		</a>Delete the input Logical References just Unloaded from the Session</h3>
	<p>The final step is to delete the input Logical References from the database. 
	Since none of the input components are loaded in the current session, the 
	delete operation is expected to succeed, ofcourse, subject to the other 
	pre-requisites for it, being met.</p>
		<table class="code" id="Table44">
			<tr>
				<td><pre>...
	hr = <b>CATLogDeleteServices::DeleteLogicalReferencess</b>(<b>AdpIdentificatorListofLogicalReferencesToDelete</b>);
...</pre>
				</td>
			</tr>
		</table>
		<p align="left">The <code>CATLogDeleteServices::DeleteLogicalReferencess</code> 
		call takes a list namely. <code>AdpIdentificatorListofLogicalReferencesToDelete</code>, as 
		an input. This list has the <code>Identificators</code> of all 
		Logical Reference Components for deletion. These <code>Identificators</code> 
		are still valid, though the corresponding components have been unloaded 
		from the current session. The technical article &quot;<b>PLM Component 
		Identifier</b>&quot; [<a href="#References">1</a>] delves deeper into this subject.</p>
	<script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Epilog"></a>Epilog</h3>
<p align="left">The <code>CAALmiDeletingLogicalReference</code> use case ends by simply closing the PLM session. Since all use cases necessarily conclude by closing the PLM session, we have a dedicated article on this topic namely &quot;Creating a
Basic PLM Batch&quot; [<a href="#References">3</a>].&nbsp;</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p align="left">The Use Case illustrates the deletion of Product Structure 
objects (<code>Logical References</code>) using the&nbsp;<code>CATLogDeleteServices::DeleteLogicalReferences</code> 
APIs. It enables an end-user run a list of scenarios on a data model provided, 
which serve to clarify the following concepts related to the delete operation</p>
<ul>
	<li>A PLM Logical Reference can be deleted only if it does not exist in the 
	current session.					If there exists an instance of a MononInstantiable Logical Rep Ref, under the Logical Ref, the Monoinstantiable Rep Ref too gets deleted from the database</li>
	<li>A PLM Logical Reference cannot be deleted if an instance of it exists
					aggregated under another Logical Reference, not contained in the list of 
				References for deletion</li>
	<li>A Logical Reference fails to get deleted if its state is LOCKED in the database</li>
</ul>
<p align="left">The delete APIs identifies a PLM Components for deletion by its
<code>Identificator</code>. Since one of the pre-requisites for the 
delete operation is to unload the PLM Component from session, it is significant 
to note here that an <code>Identificator</code> still remains valid, even 
after the unloading. The article &quot;<b>PLM Component Identifier</b>&quot; [<a href="#References">1</a>] 
delves deeper into that subject.</p>					
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			<tr>
			<td vAlign="top" >[1]</td>
				<td >
				<a href="../CAAPlmServerAccess/CAAPlmTaCATIAdpPLMIdentificator.htm">PLM Component Identifier</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[2]</td>
				<td ><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
						and Launching a CAA Use Case</A></td>
			</tr>
			<tr>
				<td vAlign="top" >[3]</td>
				<td >
                <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
                Creating a PLM Basic Batch</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[4]</td>
				<td ><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[5]</td>
				<td >
				<a href="../CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm">
				Understanding PLM Component Life Cycle</a></td>
			</tr>
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Nov 2009]</td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		  <script type="text/javascript">insertCopyright();</script>
	</body>
</html>


