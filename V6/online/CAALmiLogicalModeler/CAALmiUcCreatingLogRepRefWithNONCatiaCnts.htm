<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Logical Representation Reference</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

<style type="text/css">
.style1 {
	list-style-type: circle;
}
.style2 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
.style3 {
	background-color: #F8FBFF;
}
</style>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Logical Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>       This use case illustrates the end user how to create the Logical Representation Reference(Rep Ref) for non-CATIA contents 
(e.g xls, doc, txt, xml, pdf, etc) . </p>
      <ul>
      <li> <a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAALmiCreatingLogRepRefWithNONCatiaCnts Use Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiCreatingLogRepRefWithNONCatiaCnts do</a></li>
            <li><a href="#How">How to launch CAALmiCreatingLogRepRefWithNONCatiaCnts</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiCreatingLogRepRefWithNONCatiaCnts</a> <a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The learning from this Use Case are:</p>
<ul>
	<li>Creating and instantiating Mono-instantiable Logical Rep Ref with non 
	CATIA content </li>
	<li>Creating and instantiating Multi-instantiable Logical Rep Ref with non 
	CATIA content </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiCreatingLogRepRefWithNONCatiaCnts Use Case</h2>
<p> <code>CAALmiCreatingLogRepRefWithNONCatiaCnts </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogical</code><span class="style2">ModelerUseItf</span>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiCreatingLogRepRefWithNONCatiaCnts Do</h3>
<p>This use case illustrates how to create the Logical Rep Ref for non-CATIA contents 
(e.g xls, doc, txt, xml, pdf, etc) . </p>
<p>In the current UC, we have opened the Logical Reference [<a href="#Fig.1">Fig.1</a>] .</p>
<table>
	<caption align="center"><a name="Fig.1"></a>Fig. 1&nbsp; Input Logical 
	Reference </caption>
	<tr>
		<td>
		<img src="images/CAALmiCreatingLogRepRefWithNONCatiaCnts_image1.jpg"></td>
	</tr>
</table>

      <p>Just after opening the Logical reference, we creates a mono-instantiable Logical Rep Ref&nbsp; and a multi-instantiable 
		Logical Rep Ref and then instantiates 
		it under the opened Logical reference.</p>
 

<table>
	<caption align="center"><a name="Fig.2"></a>Fig. 2&nbsp; Logical 
	Reference aggregating Logical Rep Ref</caption>
	<tr>
		<td>
		<img src="images/CAALmiCreatingLogRepRefWithNONCatiaCnts_image2.jpg"></td>
	</tr>
</table>
<p><a href="#Fig.2">Fig.2 </a>above shows a root Logical Reference <code>CAALmiCreatingLogRepRefWithNONCatiaCnts_RootRef---</code></p>
<p>The Root aggregates a 
mono-instantiable Logical Rep Ref <code>Logical Representation 1</code>&nbsp; 
beneath it</p>
<p>The Root also aggregates a multi-instantiable Logical Rep Ref <code>Logical Representation 2</code> beneath it</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiCreatingLogRepRefWithNONCatiaCnts </h3>
<p>To launch <code>CAALmiCreatingLogRepRefWithNONCatiaCnts</code>, you will need to set up the build time
environment, then compile <code>CAALmiCreatingLogRepRefWithNONCatiaCnts<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiCreatingLogRepRefWithNONCatiaCnts Repository Server User 
Password SecurityCtx DocumentPath_RepRef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PLMType IDAttributeName1_Ref&nbsp;value1_Ref [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p> . Choose Role as Designer ( as the use case does modifies the PLM Data)</o:p>
              </td>
		</tr>
			
		<tr>
			<th style="height: 19px"> <b>DocumentPath_RepRef</b></th>
			<td style="height: 19px">The file path of the non CATIA document (including its extension) ,to associate with 
			Logical Rep Ref</td>
		</tr>
	    <tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
  <tr>
    <th height="35">IDSetAttribute1*<td height="16">First Identification Set(IDSet) attribute for the 
	Logical Reference to be opened</td>
  </tr>
		
		 <tr>
    <th height="35">IDSetAttributeValue1*<td height="16">First IDSet attribute value for the 
	Logical Reference to be opened</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the PLMType of the 
Logical Reference to be opened.</p>
<p align="left"><code>CAALmiCreatingLogRepRefWithNONCatiaCnts.3dxml</code> is the 3D XML file contains the root 
Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiCreatingLogRepRefWithNONCatiaCnts_RootRef</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>

<!---------------------------------comment------------------------------------->

<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Where"></a>Where to Find the CAALmiCreatingLogRepRefWithNONCatiaCnts
Code</h3>
<p>The <a><code>CAALmiCreatingLogRepRefWithNONCatiaCnts</code></a> use case is located in the
<a><code>CAALmiCreatingLogRepRefWithNONCatiaCnts.m</code></a> module of the <a><code>
CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreatingLogRepRefWithNONCatiaCnts.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>
CAALmiCreatingLogRepRefWithNONCatiaCnts</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
   <li class="style3"><a href="#Retrieve the Functional Ref">Retrieves 
	Logical Reference from Underlying Database</a></li>
	<li class="style3">
	<a href="#Creates the Mono-Instantiable Functional Rep Ref">creates and instantiates the Mono-Instantiable 
	Logical Rep Ref(with Non-Catia contents)</a></li>
	<li class="style3">
	<a href="#Creates the Multi-Instantiable Functional Rep Ref">Creates the Multi-Instantiable 
	Logical Rep Ref(with Non-Catia contents)</a></li>
	<li class="style3">
	<a href="#Aggregates the newly created Multi-Instantiable Functional Rep Ref">Aggregates the newly created Multi-Instantiable 
	Logical Rep Ref under the opened Logical Reference
	</a></li>
	<li>
	<p style="line-height: 100%; margin-top: 0"><a href="#Epilog">Epilog</a>
	</li>
</ol>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiCreatingLogRepRefWithNONCatiaCnts<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply browses through a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [2] 
delves further deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Retrieve the Functional Ref"></a>Retrieve the Logical Reference from 
Underlying Database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference. The query to an underlying database for a PLM Component is 
built with primarily two inputs</p>
<ul>
	<li>An IDSet attribute-value list </li>
	<li>The PLMType of the PLM Component being queried</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Creates the Mono-Instantiable Functional Rep Ref"></a>creates and instantiates the 
Mono-Instantiable Logical Rep Ref(with Non-Catia contents)</h3>
<p>Here we creates 
	a mono-instantiable Logical Rep Ref with an associated non-Catia stream 
(given the path of a document) that will be aggregated by the opened Logical Reference.
Main supported non CATIA documents are the following ones: xls, doc, txt, xml, 
pdf, jpg etc.</p>


<pre class="code">
...
    CATUnicodeString iDocumentPath(iArgv[6]);
    ...
<span class="style3">    </span><strong>CATILogRepresentations</strong> *piLogRepsOnInputLogtRef=NULL;
    hr= piLogtRef-&gt;QueryInterface(IID_CATILogRepresentations, (void**) &amp;piLogRepsOnInputLogtRef);
    ...
    CATILogRepresentationReference *opiMonoInstLogtRepRef=NULL;
    CATLISTV(CATICkeParm_var) UselessList;
    hr= piLogRepsOnInputLogtRef-&gt;<strong>AddWithNonCATIAContent</strong>(NULL_var, NULL ,UselessList,
						iDocumentPath, opiMonoInstLogtRepRef);
...
</pre>


   <p>The method <code>AddWithNonCATIAContent </code> of <em>CATILogRepresentations</em> creates 
	a mono-instantiable Logical Rep Ref with an associated non-Catia stream. The list of attribute-value is empty since values get 
	valuated as per business Logic.&nbsp;A significant point to note here is 
	that the environment is input to this API and in this case we are passing it 
	the Logical Rep Reference to create, is internally computed by this API so here 
	we pass <em>CATIType</em> as NULL_var.
	The file path of the non CATIA document 
	(including its extension) is also an input to the API ( iDocumentPath, in 
	the code abstract above). The 
	Rep Ref is returned as a <i>CATILogRepresentationReference </i>type.</p>


<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Creates the Multi-Instantiable Functional Rep Ref"></a>Creates the Multi-Instantiable 
Logical Rep Ref (with Non-Catia contents)</h3>
<p>Here we create the Multi-Instantiable Logical Rep Ref(with Non-Catia contents).</p>
<pre class="code">
...
    <strong>CATILogRepresentationReferenceFactory</strong> *piLogtRepRefFactory = NULL;
    hr = <strong>CATLogFactoriesProvider::GetRepresentationReferenceFactory</strong>(piLogtRepRefFactory);
    ...
<span class="style3">    </span><strong>CATILogRepresentationReference</strong>* opiMultiInstLogtRepRef  = NULL;
    hr = piLogtRepRefFactory-&gt;<strong>CreateWithNonCATIAContent</strong>( NULL_var, NULL, UselessList,
						iDocumentPath,opiMultiInstLogtRepRef);
...
</pre>



   <p>A call to<code> GetRepresentationReferenceFactory</code> of <em>CATLogFactoriesProvider</em>&nbsp;returns us the factory pointer, as a <code>CATILogRepresentationReferenceFactory </code> 
	type. </p>
   
   <p>The method <code>CreateWithNonCATIAContent </code> of <em>CATILogRepresentationReferenceFactory</em> creates 
	a multi-instantiable Logical Rep Ref with non-Catia Contents. The list of attribute-value is empty since values get 
	valuated as per business Logic.&nbsp; A significant point to note here 
	is that the environment is input to this API and in this case we are passing 
	it as a non NULL value,so it takes the current Environment as 
	input. The type of 
	the Logical Rep Ref to create, is internally computed by this API so here 
	we pass <em>CATIType</em> as NULL_var. The file path of the non CATIA 
	document (including its extension) is also an input to the API ( iDocumentPath, 
	in the code abstract above). The 
	Rep Ref is returned as a <i>CATILogRepresentationReference</i>type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Aggregates the newly created Multi-Instantiable Functional Rep Ref"></a>Aggregates the newly created Multi-Instantiable 
Logical Rep Ref under the opened Logical Reference</h3>
   <p>We now instantiate the multi-instantiable Logical Rep Ref(created in 
	[<a href="#Creates the Multi-Instantiable Functional Rep Ref">#</a>]) under the opened 
	Logical Reference.</p>
   
   
<pre class="code">
...
         <strong>CATILogRepresentationInstances</strong> *piLogRepInstsOnInputLogtRef=NULL;
	hr= piLogtRef-&gt;QueryInterface(IID_CATILogRepresentationInstances, (void**) &amp;piLogRepInstsOnInputLogtRef);
	...
	<strong>CATILogRepresentationInstance</strong> *opiLogtRepInstance=NULL;
	hr= piLogRepInstsOnInputLogtRef-&gt;<strong>Add</strong>(opiMultiInstLogtRepRef, UselessList,opiLogtRepInstance);
...
</pre>



  <p>A call to <code>Add</code> of <em>CATILogRepresentationInstances</em> implementation on a 
	Logical 
	Reference, instantiates a multi-instantiable Logical rep ref (with non-Catia 
	contents) under it. The new child rep instance 
	is retrieved as a <i>CATILogRepresentationInstance </i>type. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreatingLogRepRefWithNONCatiaCnts </code>use case ends by simply closing 
the PLM session. [<a href="#References">2</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p> This use case illustrates the end user how to create the Logical Representation Reference(Rep Ref) for non-CATIA contents 
(e.g xls, doc, txt, xml, pdf, etc) .</p>
<ul>
	
		<li class="style1"><strong>CATILogRepresentations::AddWithNonCATIAContent</strong> to create the Mono-instantiable 
		Logical Rep Ref </li>
		<li class="style1"><strong>CATILogRepresentationReferenceFactory::CreateNonCATIAContentRepReference</strong> to create the Multi-instantiable 
		Logical Rep Ref </li>

		
	</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	<tr>
       <td valign="top" height="12">[4]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>
     
   	<tr>
       <td valign="top" height="12">[5]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Dec 2010]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
