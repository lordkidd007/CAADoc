<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Retrieving Associated Logical 2D Picture</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Associated Logical 2D Picture</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code>CAALmiGetAssociated2DPicture<b> </b></code>
      		use case. The objective of the UC is to illustrate the relevance of 
		loading mode of a Logical Reference, in order to retrieve the Logical 2D 
		Picture Rep Ref aggregated under it.&nbsp; The use case further display the 
		identification attributes of the retrieved Logical 2D Picture Rep Ref. <p><a href="#Learn">What You Will Learn With This Use Case</a></p>
      <ul>
        <li><a href="#UseCase">The CAALmiGetAssociated2DPicture Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiGetAssociated2DPicture do</a></li>
            <li><a href="#How">How to launch CAALmiGetAssociated2DPicture</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiGetAssociated2DPicture</a><a href="#Where"> code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>


<p>You will learn :</p>
<ul>
	<li>Relevance of loading mode of a Logical reference, in order to retrieve 
	the Logical 2D Picture Rep Ref aggregated under it</li>
		<li>We fail to retrieve the Logical 2D Picture Rep Ref aggregated under the 
Logical Reference loaded in Navigation mode	</li>
		<li>We succeed in retrieving the Logical 2D Picture Rep Ref aggregated under the 
Logical Reference loaded in Authoring mode </li>
	</ul>
	
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiGetAssociated2DPicture Case</h2>
<p> <code>CAALmiGetAssociated2DPicture </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code> 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiGetAssociated2DPicture Do</h3>
<p>The use case illustrates the relevance of loading mode of a Logical 
Reference, in order to retrieve the Logical 2D Picture Rep Ref aggregated under 
it.  It further display the identification attributes of the retrieved Logical 2D Picture Rep Ref.</p>

<table>
 <caption align="center"><a name="Fig.1"></a>Fig.1 </caption>

  <tr>
    <td>
    <img src="images/CAALmiUcGetAssociated2DPicture_Fig1.jpg"></td>

  </tr>
</table>
<p> The figure just above shows the Logical 2D Picture Rep Ref namely 
: <strong>Winter</strong> aggregated under the Logical Reference 
<strong>CAALmiGetAssociated2DPicture_Root.</strong></p>
<p>The output of UC execution display the <strong>identities of the Logical 2D Pictures</strong> 
(majorrevision and PLM_ExternalID) aggregated under the Logical Reference 
<strong>CAALmiGetAssociated2DPicture_Root</strong>.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiGetAssociated2DPicture</h3>
<p>To launch <code>CAALmiGetAssociated2DPicture</code>, you will need to set up the build time
environment, then compile <code>CAALmiGetAssociated2DPicture<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiGetAssociated2DPicture Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13"  >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number\RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
		 
  <tr>
    <th height="35">IDAttribute1*<td height="16">IDSet attribute Name for the 
	Logical reference to be opened</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Attribute Value for the Logical 
	reference to be opened</td>
  </tr>
		</table>


<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the Knowledge type of the Logical Reference to be opened.</p>
<p>You can directly execute this use case if you know how to locate your own component, i.e. its PLM environment, 
PLMType and 
its ID Set attributes. If not, you can import a 3D XML file supplied in the CAALogicalModelerUseItf.edu framework .The input Logical model is retrieved by importing <code>CAALmiGetAssociated2DPicture</code>.<a><code>3dxml</code></a> 
file from the <a><code>CAALogicalModelerUseItf.edu</code></a> framework.</p>
<table >
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\InputData\</code>
		<code>CAALmiGetAssociated2DPicture.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>

<p align="left">This 3D XML file contains the root Logical Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiGetAssociated2DPicture_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiGetAssociated2DPicture
Code</h3>
<p>The <a><code>CAALmiGetAssociated2DPicture</code></a> use case is located in the
<a><code>CAALmiGetAssociated2DPicture.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiGetAssociated2DPicture.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code> [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAALmiGetAssociated2DPicture</a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve the Logical Ref">Retrieve Logical Reference 
	to open from underlying database</a> 
	
  </li>
		
		 <li><a href="#Open the Logical Reference in Navigation Mode"> Failure to retrieve a Logical 2D Picture when aggregating Logical Reference is loaded in Navigation Mode		</a> </li>
		<li><a href="#Open the Logical Reference in Authoring Mode">Success in retrieving the Logical 2D Picture Rep Ref in Authoring Mode				</a> </li>

		
	
	<li><a href="#Display">Display Identification attributes of the retrieved Logical 2D Picture Rep Ref</a></li>
  <li>
    <a href="#Epilog">Epilog</a>
  </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALmiGetAssociated2DPicture<b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply opens a Logical Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">3</a>] delves further deeper into this subject.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve the Logical Ref"></a>Retrieve the Logical Reference to be opened, from an underlying database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical 
Reference to be opened.</p>
<p>This step can be divided into the following three sub-steps :</p>

<ol>
		<li>Build an Identification Attribute-Value set </li>
		<li>Run Query and retrieve the Identificator of the Logical Reference from the 
	underlying database</li>
	</ol>
<p> The implementation details of Retrieving the Identificator of the PLM Object providing its 
Attribute Set as an input , is described in
the article [<a href="#References">4</a>] .</p>
<p>The Logical reference identificator (retrieved in this section) is further used to open 
the Logical reference, whose implementation details are described in the next 
section. </p>
<script type="text/javascript">insertLinkToTop();</script>




<h3><a name="Open the Logical Reference in Navigation Mode"></a> Failure to retrieve a Logical 2D Picture when aggregating Logical Reference is loaded in Navigation Mode</h3>
<p>Here we will open the Logical reference and then retrieve the Logical 2D 
Picture Rep Ref aggregated under it.</p>
<p>We begin this section by opening the Logical Reference in Navigation mode. In 
this mode the logical root ref is loaded with all its aggregated logical 
instances, while the Rep Instances associated with the model, are not loaded in 
session.</p>
<pre class="code">
...
     <strong>CATOmbLifeCycleRootsBag</strong> Bag_OpenedLglRef;
     <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::<strong>Navigation</strong>);
     <strong>CATAdpOpener</strong> opener(Bag_OpenedLglRef,params);
     <strong>CATICkeObject</strong> *piCkeObjectOnComp= NULL;
     hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATICkeObject, (void**) &amp;piCkeObjectOnComp);
...</pre>
<p>Next , we try to retrieve the Logical 2D Picture Rep Ref aggregated under the Logical Reference . </p>
<pre class="code">
...
    <strong>CATILog2DPictures</strong> *<strong>piLog2DPicturesOnLglRef</strong>=NULL;
    hr= piCkeObjectOnComp-&gt;QueryInterface(IID_CATILog2DPictures, (void **)&amp;piLog2DPicturesOnLglRef);
    ...
    CATListValCATILog2DPictureRepReference_var spoAssociatedLog2DPicRepRef;
    hr= piLog2DPicturesOnLglRef-&gt;<strong>GetAssociated2DPictures</strong>(spoAssociatedLog2DPicRepRef);
...</pre>
<p>As depicted in the code abstract above, we begin with doing QI on the opened Logical Reference for the <strong>
<em>CATILog2DPictures </em> </strong>interface pointer.</p>
<p>Next, we try to retrieve the Logical 2D Picture Rep Ref aggregated under the loaded Logical Reference using the API <code>CATILog2DPictures::GetAssociated2DPictures 
</code> . The method <code>GetAssociated2DPictures </code> returns the list of Logical 2D Picture Rep Ref( in form of <code>CATListValCATILog2DPictureRepReference_var </code>)
 aggregated under the loaded Logical reference.</p>

<p><strong>NOTE </strong>: The call to the method <code>GetAssociated2DPictures </code> 
returns <strong>S_FALSE</strong> , if the aggregated Logical 2D Picture Rep Ref under the loaded Logical Reference are not loaded in session or do not exist and
<b>S_OK</b> , if there exist the aggregated Logical 2D Picture Rep Ref under the loaded Logical Reference and are loaded in session. </p>
<p>Now we go by the assumption that the input Logical Reference has a Logical 2D 
Picture Rep Ref aggregated under it. Further, since we have opened the Logical 
Reference in a <strong>Navigation</strong> Mode,&nbsp; the call to the method <strong>GetAssociated2DPictures </strong> return 
<strong>S_FALSE</strong>. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Open the Logical Reference in Authoring Mode"></a>Success in retrieving the Logical 2D Picture Rep Ref in Authoring Mode</h3>

<p>Similar to the previous section, we open the Logical Reference , but in 
<strong>Authoring</strong> Mode here . We then try to retrieve the Logical 2D Picture Rep Ref aggregated under it, by making the call to the method <code>GetAssociated2DPictures </code> 
.</p>
<pre class="code">
...
    <strong>CATAdpOpener</strong> opener2(Bag_OpenedLglRef);
    hr= opener2.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATICkeObject, (void**) &amp;piCkeObjectOnComp);
    ...
    hr= piCkeObjectOnComp-&gt;QueryInterface(IID_CATILog2DPictures, (void **)&amp;piLog2DPicturesOnLglRef);
    if (FAILED(hr) || (NULL==piLog2DPicturesOnLglRef)) return 1;

    hr= piLog2DPicturesOnLglRef-&gt;<strong>GetAssociated2DPictures</strong>(spoAssociatedLog2DPicRepRef);
    if(FAILED(hr)) return 1;
...</pre>

<p> Since we have gone with the assumption that the input Logical Reference has 
a Logical 2D Picture Rep Ref aggregated under it. </p>
<p> Further since we have opened this Logical Reference in <strong>Authoring</strong> mode, the call to the method <code>GetAssociated2DPictures </code>return 
<strong>S_OK </strong>, which implies that the method succeeds to find the aggregated 
Logical 2D Picture Rep Ref under the loaded Logical Reference.</p>
<p>The Logical 2D Picture retrieved here is further used in the next section for displaying its identification attributes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Display"></a>Display Identification attributes of the retrieved Logical 2D Picture Rep Ref</h3>
<p>This step is possible thanks an API of the <em>CATCkePLMNavPublicServices</em> class.</p>
<pre class="code">
...
    CATListValCATAttributeInfos ListOfAttributeInfos;
    hr = <strong>CATCkePLMNavPublicServices</strong>::ListAttributesFromObject(CATCkePLMTypeAttrServices::Identification,
					                      piCkeObjectOnComp,
						              ListOfAttributeInfos, FALSE);
...</pre>


<p> Then the output list, a list of&nbsp; <em>CATAttributeInfos</em> class is 
displayed as described in the article [<a href="#References">5</a>] .</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiGetAssociated2DPicture </code>use case ends by simply closing the PLM 
session [<a href="#References">3</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2><p>The use case basically illustrates the 
relevance of loading mode of a Logical Reference, in order to retrieve the 
Logical 2D Picture Rep Ref aggregated under it(using the API <strong>GetAssociated2DPictures </strong> of the <i>
<strong>CATILog2DPictures</strong></i> interface).&nbsp; The use 
case further display the identification attributes of the retrieved Logical 2D 
Picture Rep Ref.</p>

<p>Hence, the use case concludes that :</p>
<ul>
<li>We fail to retrieve the Logical 2D Picture aggregated under the 
Logical Reference loaded in Navigation mode	</li>
		<li>We succeed in retrieving the Logical 2D Picture aggregated under the 
Logical Reference loaded in Authoring mode </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td>[1] </td>
       <td>
       <a href="CAALmiTaLogical2DLayout.htm">
       Logical 2D Layout - Technical Article</a></td>
     </tr>

   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[3]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
  </tr>
  
    	<tr>
       <td valign="top" height="12">[4]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying a PLM Object With Attribute Set 
		</a></td>
     </tr>
<tr>
       <td valign="top" height="12">[5]</td>
       <td>
       <a href="../CAAPlmPLMCompAttribute/CAAAdpUcPLMComponentAttributesAccess.htm">
		Displaying PLM Attributes of PLM Component</a></td>
     </tr>

	<tr>
       <td valign="top" height="12">[6]</td>
       <td height="12">
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
     </tr>

	<tr>        
        <td valign="top" height="12">[7]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	
     
   	<tr>
       <td valign="top" height="12">[8]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
     </tr>
     
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Feb 2010] </td>
    <td valign="top"> Document created</td>
  </tr>
  <tr>
    <td valign="top">Version: <strong>2</strong> [Nov 2010] </td>
    <td valign="top"> Document updated to introduce CATCkePLMNavPublicServices</td>
  </tr>

  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


