<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Mux Demux Reference</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


<style type="text/css">
.style1 {
	border-color: #c0c0c0;
	border-width: 0;
}
</style>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Multiplexer (Mux) Demultiplexer (Demux) Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>In the Logical domain, logical systems send and receive signals. 
		This communication is realized with the aid of two kinds of logical 
		entities namely. Multiplexer (commonly referred to as Mux) and 
		Demultiplixer (commonly referred to as DeMux). </p>
		<p>A multiplexer is a device that combines several input signal information into one output 
		signal. While a demultiplexer is a device taking a single signal input and separates 
		it into multiple outputs. </p>
		<p><strong>/!\ The Multiplexer/Demultiplexer lose is interest since the existence of the 
		Interfaces (System Type Exposition Instance: Port's evolution). Even when data (System Type Reference) 
		is Structured, Interfaces allow to connect the sub-decomposition of the data.</strong></p>
		<p>In the 
		Logical modeler , the Multiplexer/Demultiplexer is modeled as Logical Multiplexer/Demultiplexer Reference. This use case 
		illustrates creating a logical Multiplexer-Demultiplexer Reference.</p>
      <ul>
      <li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiCreatingMuxDemuxReference Use Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiCreatingMuxDemuxReference do</a></li>
            <li><a href="#How">How to launch CAALmiCreatingMuxDemuxReference</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiCreatingMuxDemuxReference</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The learnings from this Use Case are:</p>
<ul>
	<li>Creation of&nbsp; Multiplexer (Mux) Reference</li>
	<li>Creation of Demultiplexer (Demux) Reference</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiCreatingMuxDemuxReference Use Case</h2>
<p> <code>CAALmiCreatingMuxDemuxReference </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiCreatingMuxDemuxReference Do</h3>
<p>This UC illustrates creation of&nbsp; Mux and DeMux.</p>
<p>A key input to the API creating Mux/DeMux is the Logical Structure, as the 
one depicted in the [<a href="#Fig.1">Fig.1</a>] that follows. </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Logical Type structure </caption>
	<tr>
		<td>
		<img src="images/CAALmiUcCreatingMuxDemuxReference_image.jpg">&nbsp;</td>
	</tr>
</table>
&nbsp;<p>The above Logical Structure primarily comprises of a Logical System 
type as a Root entity which aggregates two instances of Logical System types, 
since our Multiplexer Reference Object combines two input signals to output a 
single signal. The steps involved to create this structure is detailed in a dedicated 
article [<a href="#References">4</a>]. These child instances are commonly 
referred to as SubTypes.</p>
<p>We now proceed to create a Multiplexer Reference Object, which is depicted in 
the [<a href="#Fig.2">Fig.2</a>] that follows. The Logical System Type structure created above [<a href="#Fig.1">Fig.1</a>] 
is a key input for this step. </p>
<table cellspacing="1" class="style1">
	<caption style="width: 462px; height: 23px"><a name="Fig.2"></a>Fig.2&nbsp; Mux Structure</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcCreatingMuxDemuxReference_MuxStruct_Image3.jpg" width="455" height="401">&nbsp;</td>
	</tr>
</table>
<p>This figure [<a href="#Fig.2">Fig.2</a>] signifies that our Multiplexer Reference object 
aggregates two input ports and a single output port ( three balloon shape 
objects in fig representing Ports in the [<a href="#Fig.2">Fig.2</a>] below Mux reference). The port is the communication point for the logical system which means it is the interface for the logical system to communicate with other logical system. </p>
<p>The two input ports are defined for receiving signals of type</p>
<ul>
	<li><strong>LogicalSystemType2.1</strong></li>
	<li><strong>LogicalSystemType3.1&nbsp; </strong></li>
</ul>
<p>The single output port is defined to output a signal of type</p>
<ul>
	<li>&nbsp;<strong>RootLogicalSystemType1.1</strong></li>
</ul>
<p>Please note that this RootLogicalSystemType1.1 instance object gets created 
while creation of Mux/Demux. The Mux/Demux creation API internally does 
instantiation of Root Logical System type (RootLogicalSystemType1) below Mux/Demux 
Reference.&nbsp; </p>
<p>And vice versa, our DeMultiplexer Reference Object splits a single input 
signal to output two output signals. So, our DeMultiplexer Reference object 
aggregates a single input port and two output ports.</p>
<p>The single input port is defined to receive a signal of type</p>
<ul>
	<li><strong>RootLogicalSystemType1.1</strong>&nbsp; </li>
</ul>
<p>The two output ports are defined to output two signals of types respectively 
listed below:</p>
<ul>
	<li><strong>LogicalSystemType2.1</strong></li>
	<li><strong>LogicalSystemType3.1</strong></li>
</ul>
<h3><a name="How"></a>How to Launch CAALmiCreatingMuxDemuxReference </h3>
<p>To launch <code>CAALmiCreatingMuxDemuxReference</code>, you will need to set up the build time
environment, then compile <code>CAALmiCreatingMuxDemuxReference<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiCreatingMuxDemuxReference Repository Server User 
Password SecurityCtx<b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Designer ( as the use case modifies/creates the PLM Data)</o:p>
              </td>
		</tr>
			
	
		</table>




<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiCreatingMuxDemuxReference
Code</h3>
<p>The <a><code>CAALmiCreatingMuxDemuxReference</code></a> use case is located in the
<a><code>CAALmiCreatingMuxDemuxReference.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreatingMuxDemuxReference.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
	<p>There are several logical steps in <a><code>CAAFmiCreatingMuxDemuxReference</code></a> use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li>
		<a href="#Creating the Functional Flow Structure">Creating the Logical 
		Type Structure</a></li>
		<li>
		<a href="#Creating a Multiplexer with created Functional Flow structure">Creating a Multiplexer with created 
		Logical Type structure     
		</a></li>
		<li>
		<a href="#Creating a Demultiplexer with created Functional Flow structure">Creating a Demultiplexer with created 
		Logical Type structure     
		</a></li>

		    <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching a CAA use case.</p>

   <script type="text/javascript">insertLinkToTop();</script>

   <h3>
	<a name="Creating the Functional Flow Structure">
	</a>Creating the Logical Type Structure </h3>
   <p>To create Mux-demux reference we need Logical System Type structure which 
	contains Type and Subtype. Creating the Logical type structure we have 
	discussed in detail in [<a href="#References">4</a>] use case. </p>

   <script type="text/javascript">insertLinkToTop();</script><h3>
<a name="Creating a Multiplexer with created Functional Flow structure">
</a>Creating a Multiplexer with created Logical Type structure</h3>
   <p>Here we create the Multiplexer Reference with created Logical Type structure [<a href="#Creating the Functional Flow Structure">#</a>].</p>
   
   
       <pre class="code">...
         CATIType * piType = NULL;
		...	
	CATListValCATICkeParm_var LFctAttributesValues;
	CATILogMuxDemuxReference *piLogicalMultiplexerReference = NULL;
	hr = piLogReferenceFactory-&gt;<strong>CreateMultiplexer</strong>(piType, 
					  NULL,
					  LFctAttributesValues,
					  piFirstLogicalTypeRef,
					  piLogicalMultiplexerReference);
...</pre>
   
   <p>The method <code>CATILogReferenceFactory::CreateMultiplexer </code> on <code>
	(piLogReferenceFactory)</code> Logical factory object creates 
	a Logical Multiplexer Reference. The list of attribute-value is empty since values get 
	valuated as per business Logic.&nbsp; A significant point to note here 
	is that the environment is input to this API and in this case we are passing 
	it as NULL, If we pass it as NULL the API takes current Environment as 
	input. The type of 
	the Functional Reference to create, is internally computed by this API so here 
	we pass <em>CATIType</em> as NULL_var. The <code>piFirstLogicalTypeRef </code>
	Logical System Type reference created in previous step input for the 
	creation of Mux reference 
	.The 
	reference is returned as a <i>CATILogMuxDemuxReference </i>type.</p>


		<script type="text/javascript">insertLinkToTop();</script> 
		<h3>
<a name="Creating a Demultiplexer with created Functional Flow structure">
</a>Creating a Demultiplexer with created Logical Type structure</h3>
   <p>Here we create the Demultiplexer Reference with created Logical Type structure [<a href="#Creating the Functional Flow Structure">#</a>].</p>
   
   
       <pre class="code">...
	CATILogMuxDemuxReference *piLogicalDemultiplexerReference = NULL;
	hr = piLogReferenceFactory-&gt;<strong>CreateDemultiplexer</strong>(piType,   
						NULL,
						LFctAttributesValues,
						piFirstLogicalTypeRef,
						piLogicalDemultiplexerReference);													
...</pre>
   
   <p>The method <code>CATILogReferenceFactory::CreateDemultiplexer </code>on <code>(piLogReferenceFactory)</code> 
	Logical factory object creates 
	a Functional Demultiplexer Reference. The list of attribute-value is empty since values get 
	valuated as per business Logic.&nbsp; A significant point to note here 
	is that the environment is input to this API and in this case we are passing 
	it as NULL, If we pass it as NULL the API takes current Environment as 
	input. The type of 
	the Functional Reference to create, is internally computed by this API so here 
	we pass <em>CATIType</em> as NULL_var. The <code>piFirstLogicalTypeRef </code>
	Logical System Type reference created in previous step input for the 
	creation of Demux reference. The 
	reference is returned as a <i>CATILogMuxDemuxReference </i>type.</p>

<script type="text/javascript">insertLinkToTop();</script>
		 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAFmiCreatingMuxDemuxReference</code> use case ends by simply closing the PLM
session. Since all use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>



<script type="text/javascript">insertLinkToTop();</script><h2><a name="InShort"></a>In Short</h2>
<p>In this use case we simply creates Mux and Demux reference. To Create Mux/Demux 
we need Logical type structure which contains Type and Subtype. To provide 
Logical type structure we create that also in this use case. </p>
<p>In this use case we only create Mux/Demux reference but some important steps 
we could follow to use this newly created Mux/Demux reference</p>
<ul>
	<li>Query the Mux/Demux from database [<a href="#References">3</a>]</li>
	<li>Open it in session </li>
	<li>Then instantiate Mux/Demux reference under Logical reference using <code>CATILogInstances::Add</code> method.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         <tr>        
        <td valign="top" height="12">[4]</td>
        <td height="12"> <a href="CAALmiUcCreatingLogicalTypeModel.htm">Creating Logical Type Model</a></td>
    </tr>

 
   	
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


