<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Logical Type Model</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>



</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating Logical System Type Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This use cases creates a (simple) Logical Type Structure with Logical Type references, Logical Type instances and Type Exposition Instances.
		<ul>
		<li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiCreatingLogicalTypeModelUse Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiCreatingLogicalTypeModel do</a></li>
            <li><a href="#How">How to launch CAALmiCreatingLogicalTypeModel</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiCreatingLogicalTypeModel</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The learnings from this Use Case are:</p>
<ul>
	<li>Creation of Logical Reference </li>
	<li>Creation of Logical System Type Reference </li>
	<li>Instantiating Logical System Type Reference, under Logical Reference. 
	(The Logical System Type Exposition instance commonly known as the Logical Interface: Ports evolution)</li>
	<li>Instantiating Logical System Type Reference, under another Logical System Type Reference. 
	(The Logical System Type instance commonly known as Sub Logical System Type))</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiCreatingLogicalTypeModelUse Case</h2>
<p> <code>CAALmiCreatingLogicalTypeModel </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiCreatingLogicalTypeModel Do</h3>
<p>This Use case simply creates a Logical System Type structure. Logical System 
Types are the types of the interfaces (System Type Exposition Instance or Ports). 
Logical System Types defines the signal that can be emitted or received by a Logical Interface. </p>
<p>Initially the use case creates a root Logical Reference and two Logical Type reference.
<p>Further to this, the first Logical System Type reference is instantiated under Root Logical Reference
 (This Logical System Type Exposition instance known as Interface).&nbsp;&nbsp; </p>
<p>And finally, the second Logical System Type reference is instantiated under the first Logical 
System Type Reference (This Logical System Type instance known as Sub Type).&nbsp;&nbsp; </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Logical System Type Structure</caption>
	<tr>
		<td>
		<img alt="" src="images/CAALmiUcCreatingLogicalTypeModel_LogicalTypeModel.png"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.1">Fig.1</a>] shows the Logical System Type 
structure. The created objects in above structure are as follows</p>
<ul>
	<li>Logical Root Reference (Root Object)</li>
	<li>Type Exposition Instance (Logical System Type Exposition instance known as Interface)</li>
	<li>First Logical System Type Reference</li>
	<li>Type Instance (Logical System Type instance known as Sub Type)</li>
	<li>Second Logical System Type Reference</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiCreatingLogicalTypeModel</h3>
<p>To launch <code>CAALmiCreatingLogicalTypeModel</code>, you will need to set up the build time
environment, then compile <code>CAALmiCreatingLogicalTypeModel<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiCreatingLogicalTypeModel Repository Server User 
Password SecurityCtx<b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>. Choose Role as Designer ( as the use case modifies/creates the PLM Data)</o:p>
              </td>
		</tr>
		
	
		</table>




<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiCreatingLogicalTypeModel
Code</h3>
<p>The <a><code>CAALmiCreatingLogicalTypeModel</code></a> use case is located in the
<a><code>CAALmiCreatingLogicalTypeModel.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreatingLogicalTypeModel.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
   <p>There are several logical steps in CAALmiCreatingLogicalTypeModel use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li><a href="#Create">Create a Logical System Type Structure</a><ul>
		<li><a href="#Retrieves a Reference Factory">Retrieves a Reference Factory</a></li>
		<li><a href="#Creates a Logical Reference (Root)">Creates a Logical Reference (Root)</a></li>
		<li><a href="#Creates the first Logical System Type Reference">Creates the first Logical System Type Reference</a></li>
		<li><a href="#Creates the second Logical System Type Reference">Creates the second Logical System Type Reference</a></li>
		<li><a href="#Instantiates the first Logical Type Reference under Root Reference">
			Instantiates the first Logical Type Reference under Root Reference</a></li>
		<li><a href="#Instantiates the second Logical Type Reference as Sub Type under the first Logical Type Reference">
			Instantiates the second Logical Type Reference as Sub Type under the first Logical Type Reference</a></li>
		</ul>
     <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
   <p>It begins with a check to ensure bare minimum number of arguments are 
	input for use case execution. This includes in the order listed below:</p>
   <ul>
   <li>five arguments(Repository, Server-Port, user , password, Security Context) 
	essential for creating a V6 session.</li>
   </ul>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>] delves further into the process of building and launching a CAA use case.</p>
   <script type="text/javascript">insertLinkToTop();</script>

   <h3><a name="Create"></a>Create a Logical System Type Structure </h3>
   <p>Creating a Logical Structure, fundamentally involves&nbsp; </p>
<ul>

	<li>Creating a Root Logical Reference </li>
	<li>Creating two Logical System Type Reference </li>
	<li>Instantiating the first Logical System Type Reference, under the root 
	Logical Reference, implying creating a Logical System Type Exposition instance 
	(Logical Interface - It is Ports evolution)</li>
	<li>Instantiating the second Logical System Type Reference, under the first
	Logical System Type Reference. Implying creating a Logical System Type Instance (Sub Type)</li>
</ul>

	
  <script type="text/javascript">insertLinkToTop();</script>
  
   <h4><a name="Retrieves a Reference Factory"></a>Retrieves a Reference Factory</h4>
  
       <pre class="code">...
   <strong>CATILogReferenceFactory</strong>* piLogReferenceFactory=NULL;
   hr = <strong>CATLogFactoriesProvider::GetReferenceFactory</strong>(piLogReferenceFactory);
...</pre>
      
   <p>From a call to <code>GetReferenceFactory</code>&nbsp; of <em>CATLogFactoriesProvider</em>
	we retrieve the factory pointer <code>piLogReferenceFactory</code> of type <em>CATILogReferenceFactory</em>. </p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates a Logical Reference (Root)"></a>Creates a Logical Reference (Root)</h4>
  
       <pre class="code">...
    <strong>CATILogReference</strong>* piRootLogicalRef  = NULL;
    CATLISTV(CATICkeParm_var) UselessList ;
    CATIType_var spType ;
    hr = piLogReferenceFactory->CreateReference(spType, 
                                                NULL, 
                                                UselessList, 
                                                piRootLogicalRef);
...</pre>
   
   <p>The method <code>CreateReference </code> of <em>CATILogReferenceFactory</em> creates 
	a Logical Reference.&nbsp; The type of the Logical Reference to create, 
	is internally computed by this API so here we pass <em>CATIType</em> as NULL_var. 
	A significant point to note here is that the environment is input to this 
	API and in this case we are passing it as NULL, so API takes current Environment as input. The list of attribute-value is 
	empty since values get valuated as per business Logic. The 
	reference is returned as a <em>CATILogReference</em> type we call it as 
	Root.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates the first Logical System Type Reference"></a>Creates the first Logical System Type Reference</h4>
  
       <pre class="code">...
    <strong>CATILogTypeReference</strong>* piFirstLogicalTypeRef  = NULL;
    hr = piLogReferenceFactory-&gt;<strong>CreateTypeReference</strong>( spType, 
				 	NULL,
					UselessList,
					piFirstLogicalTypeRef);
...</pre>
   
   <p>The method <code>CreateTypeReference </code> of <em>CATILogReferenceFactory</em> creates 
	a Logical System Type reference.&nbsp; The type of the Logical System Type 
	Reference to create, is internally computed by this API so here we pass <em>CATIType</em> as NULL_var. 
	A significant point to note here is that the environment is input to this 
	API and in this case we are passing it as NULL, so API takes current Environment as input. The list of attribute-value is 
	empty since values get valuated as per business Logic. The 
	reference is returned as a <em>CATILogTypeReference</em> type we call it as 
	Root.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates the second Logical System Type Reference"></a>Creates the second Logical System Type Reference </h4>
<pre class="code">
...
    CATILogTypeReference* piSecondLogicalTypeRef = NULL;
    hr = piLogReferenceFactory-&gt;<strong>CreateTypeReference</strong>(spType, 
						NULL,
						UselessList,
						piSecondLogicalTypeRef );
...</pre>
   <p>The creation of the second Logical System Type Reference is exactly similar as the first 
	Logical System Type Reference [<a href="#Creates the first Logical System Type Reference">#</a>].</p>
	<script type="text/javascript">insertLinkToTop();</script>
	
	<h4><a name="Instantiates the first Logical Type Reference under Root Reference">
	</a>Instantiates the first Logical Type Reference under Root Reference</h4>
    <p>We now instantiate the first Logical System Type Reference under the Root Reference.</p>
   
   
     <pre class="code">...
    CATICkeParmFactory_var spParmFactory = CATCkeGlobalFunctions::GetVolatileFactory();
    CATIParmDictionary_var spParmDico = CATCkeGlobalFunctions::GetParmDictionary();
    CATLISTV(CATICkeParm_var) iListOfExpoInstAttr;
    CATICkeParm_var spInDirectionPara = spParmFactory->CreateEnumere (spParmDico->GetEnumType(), "V_Direction", CATLogDirection::In);
    iListOfInstAttr.Append(spInDirectionPara);
    const CATUnicodeString iInstIdentifier = "New_ExpoType";
    
    CATILogTypeExpositionInstances * piLogTypeExpoInstancesOnRootLogRef = NULL;
    hr = piRootLogicalRef->QueryInterface(IID_CATILogTypeExpositionInstances,(void **)&piLogTypeExpoInstancesOnRootLogRef);
    ...
    
    <strong>CATILogTypeExpositionInstance</strong> * piLogicalTypeExpoInstanceUnderRootRef = NULL;
    hr = piLogTypeExpoInstancesOnRootLogRef-&gt;<strong>Add</strong>( piFirstLogicalTypeRef,
						  iInstIdentifier,
						  iListOfExpoInstAttr,
						  piLogicalTypeExpoInstanceUnderRootRef);
...</pre>

  <p>A call to <code>Add</code> of <em>CATILogTypeExpositionInstances</em> implementation on a 
	Logical Reference, instantiates a Logical System Type Reference under it. 
	The new child instance is retrieved as a <em>CATILogTypeExpositionInstance</em> type. </p>
    <script type="text/javascript">insertLinkToTop();</script>

	<h4><a name="Instantiates the second Logical Type Reference as Sub Type under the first Logical Type Reference">
	</a>Instantiates the second Logical Type Reference as Sub Type under the first Logical Type Reference</h4>
	<p>We now instantiate the second Logical System Type Reference under the first one.</p>
   

    <pre class="code">...
    CATLISTV(CATICkeParm_var) iListOfInstAttr;
    CATICkeParm_var spInstPara = spParmFactory->CreateString("V_Identifier", "New_SubType");
    iListOfInstAttr.Append(spInstPara);
    
    <strong>CATILogTypeInstance</strong> * piLogicalInstanceOfsecondTypeRef = NULL;
    
    hr = piFirstLogicalTypeRef-&gt;<strong>AddSubType</strong>( piSecondLogicalTypeRef,
					  iListOfInstAttr,
					  piLogicalInstanceOfsecondTypeRef);
...</pre>
  <p>A call to <code>AddSubType</code> of <em>CATILogTypeReference</em> implementation on a 
	Logical System Type Reference, instantiates another Logical System Type Reference under it as Sub 
	Type. The new child instance 
	is retrieved as a <em>CATILogTypeInstance</em> type. </p>
    <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->

	 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreatingLogicalTypeModel</code> use case ends by simply closing the PLM
session. Since all use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

	
   <script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case mainly creates Logical System Type structure. This structure 
contains Root Logical Reference which aggregates a System Type reference which itself aggregates Sub System Type beneath it. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top">Version: <strong>2</strong> [Jun 2014]</td>
    <td valign="top">Document updated</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


