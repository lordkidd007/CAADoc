<html>

  <head>
  <meta http-equiv="Content-Language" content="fr">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 12.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
  <title>Creating a Logical Reference with 2D Layout </title>
  <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


  </head>

  <body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Logical Reference with 2D Layout</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

  
   <!---------------------------------comment------------------------------------->
   <table class="abstract">
     <tr>
       <td>
       <h2>Abstract</h2>
       <p>The use case illustrates the steps involved to create a Logical reference with 2d layout.
       It further retrieves the initial 2d coordinates and the size(width,height) 
		of the 2d layout, and finally change the initial values by input values.</p>
       <ul>
         <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
         <li><a href="#UseCase">The CAALmiCreateReference2DLayout Use Case</a>
         <ul>
           <li><a href="#What">What Does CAALmiCreateReference2DLayout Do</a></li>
           <li><a href="#How">How to Launch CAALmiCreateReference2DLayout</a></li>
           <li><a href="#Where">Where to Find the CAALmiCreateReference2DLayout Code</a></li>
         </ul>
         </li>
         <li><a href="#Step">Step-by-Step</a></li>
         <li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
       </ul>
       </td>
     </tr>
   </table>

   <!---------------------------------comment------------------------------------->
   <h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
   <p>This use case is intended to show you how to create a Logical Reference with 2D layout. You will learn:</p>
   <ul>
     <li>How to create a Logical Reference with 2D layout </li>
     <li>How to retrieve the default 2D layout of the created Logical2D reference</li>
     <li>How to modify the 2D layout of the created Logical2D reference</li>
     
   </ul>
   <p>This reference is created in the <b>RFLVPMLogical</b> Modeler. </p>
 <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="UseCase"></a>The CAALmiCreateReference2DLayout Use Case</h2>
   <p><code>CAALmiCreateReference2DLayout </code> is a use case of the <code>
	CAALogicalModelerUseItf.edu</code> 
   framework that mainly illustrates <code>CATFLEditorItf</code> and 
	<code>KnowledgeInterfaces </code>frameworks capabilities.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="What"></a>What Does CAALmiCreateReference2DLayout Do</h3>
   <p>The CAALmiCreateReference2DLayout use case illustrates how to create a logical reference with 2d layout. The use case then 
	retrieves the default 2d layout of the 
   created logical2d reference and then modifies it with the values input.</p>
  
   
   <table cellpadding="0" cellspacing="0" id="AutoNumber1" class="style1">
     <caption align="center"><a name="Fig.1"></a>Fig.1: Logical Reference with 2D Layout</caption>
     <tr>
       <td><img border="0" src="images/CAALmiUcCreateReference2DLayout_Fig1.jpg"></td>
     </tr>
   </table>
 <p>Fig 1 above depicts a newly created Logical Reference with 2d Layout. A logical reference is distinct from the other PLM References, in one respect. It is created with a Logical Rep Instance aggregated beneath it.
  This Rep Instance represents a 2D Layout, as seen in [Fig.1].
 </p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="How"></a>How to Launch CAALmiCreateReference2DLayout </h3>
   <p>To launch CAALmiCreateReference2DLayout , you will need to set up the build time 
	environment, then compile CAALmiCreateReference2DLayout along with its 
	prerequisites, set up the run time environment, and then execute the use 
	case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAALmiCreateReference2DLayout Repository Server User Password 
SecurityCtx Environment &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PositionX PositionY Width Height &quot;</code></p>
  
   <p>where:</p>
   
   
    <table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th><b>Server</b></th>
    <td>The server as <i>Host:port_number/RootURI</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project). 
	Choose Role as Designer(as the use case modifies the PLM data)</td>
  </tr>
  <tr>
    <th><b>Environment</b></th>
    <td>A PLM Environment containing a RFLVPMLogical modeler customization</td>
  </tr>
  <tr>
    <th><b>PositionX</b></th>
    <td>Position value(X-Axis) to set for the created Logical2D ref</td>
  </tr>
<tr>
    <th><b>PositionY</b></th>
    <td>Position value(Y-Axis) to set for the created Logical2D ref</td>
  </tr>
  <tr>
    <th><b>Width</b></th>
    <td>Width value to set for the created Logical2D ref</td>
  </tr>

<tr>
    <th><b>Height</b></th>
    <td>Height value to set for the created Logical2D ref</td>
  </tr>
	
	
  </table>


   
   
   
   
   
   
   
   
   
   
   
  <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="Where"></a>Where to Find the CAALmiCreateReference2DLayout Code</h3>
   <p>The CAALmiCreateReference2DLayout use case is made of a single file located in 
	the CAALmiCreateReference2DLayout.m module of the CAALogicalModelerUseItf.edu 
	framework:</p>
   <table>
     <tr>
       <td><code>
		InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreateReference2DLayout.m\</code></td>
     </tr>
   </table>
   <p>+ other global functions defined in the </p>
   <table id="table17">
     <tr>
       <td><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></td>
     </tr>
   </table>
   <p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is 
	the directory where the CAA CD-ROM is installed.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="Step"></a>Step-by-Step</h2>
   <p>There are several logical steps in CAALmiCreateReference2DLayout use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li><a href="#Create">Create a Logical reference with 2d layout</a></li>
     	<ol>
     	<li><a href="#Set the current enviornment">Set the current enviornment</a> </li>
     	
		<li><a href="#Instantiates">Instantiates the factory</a> </li>
		<li><a href="#Create Logical2D">Create Logical2D reference</a> </li>
     	</ol>
     <li><a href="#Retrieve the 2D layout of created logical2d ref">
     Retrieve the default 2D layout of created logical2d reference</a></li>
	<li><a href="#Set the 2D layout of created logical2d ref">Set the 2D layout of created logical2d reference with values input</a></li>
     <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h2><a name="Prolog"></a> Prolog</h2>
   <p>It begins with a check to ensure bare minimum number of arguments are 
	input for use case execution. This includes in the order listed below:</p>
   <ul>
   <li>five arguments(Repository, Server-Port, user , password, Security Context) 
	essential for creating a V6 session.</li>
	<li>Four numeral arguments, namely X,Y coordinates, width &amp; height , to 
	relocate &amp; resize the 2d layout.</li>

   </ul>
<p>We further checks the four arguments to relocate and resize the 2d layout , 
are numerals. </p>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching a CAA use case.</p>
   <script type="text/javascript">insertLinkToTop();</script>

   <h2><a name="Create"></a>Create a Logical reference with 2d layout</h2>
   <p>This is the crux of the use case. This step is detailled below.</p>
	   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Set the current enviornment"></a>Set the current enviornment</h3>
<p>This step begin with setting the current environment (the one input by the user).</p>
       <pre class="code">...
	CATString EnvToUse = iArgv[6];
	PLMPSISessionHelpers * pHelpers = NULL ;
	PLMPSISessionHelpers::GetSessionHelpers(pHelpers);
	...
	rc = pHelpers-&gt;<strong>SetCurrentEnvironment</strong>(EnvToUse);
...</pre>
       
   <p>The call to <code>PLMPSISessionHelpers::SetCurrentEnvironment
   </code> sets the input environment as the current environment.
	Read the Technical Article Understanding PLM Environment [<a href="#References">3</a>].</p>
   <script type="text/javascript">insertLinkToTop();</script>

	
  <script type="text/javascript">insertLinkToTop();</script>
  
   <h3><a name="Instantiates"></a>Instantiates the factory</h3>
   <p>In this step, we instantiates the factory and retrieves a pointer on the factory to create the logical reference(with 2d layout).
   This interface pointer retrieved here is <i>CATIFLEditorReferenceFactorytype
   </i> type. </p>
  
       <pre class="code">...
<b>CATIFLEditorReferenceFactory </b>*piFactory = NULL;
rc= ::<b>CATInstantiateComponent</b>("CATEFLEditorReferenceFactory", IID_CATIFLEditorReferenceFactory,
	 			    (void **)&amp;piFactory);
...</pre>
      
   <p>Here we have used <code>CATInstantiateComponent</code> to create an instance of the <code>CATEFLEditorReferenceFactory</code>
   class. It also returns a pointer on the factory interface <i>CATIFLEditorReferenceFactory </i> as an output argument. The 
	retrieved factory interface pointer
   is then used to create the logical reference(with 2d layout).The creation of logical2d ref is mentioned is illustrated below. </p>
   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Create Logical2D"></a>Create Logical2D reference</h3>
   <p>The most important step of the UC is performed here: Create the logical reference(with 2d layout)</p>
  
       <pre class="code">...
<b>CATILogReference </b>*opiCreatedReference=NULL;
CATListValCATICkeParm_var iUselessList;
if (NULL != piFactory)
{
	rc = piFactory-&gt;<b>CreateLogicalRefWith2DLayout</b>(NULL_var,oIAdpEnvironment,iUselessList,opiCreatedReference);
...</pre>
   
   <p>The method <code>CATIFLEditorReferenceFactory::CreateLogicalRefWith2DLayout</code> is used with the following input arguments:</p>
   <ul>
	<li>NULL_var , a <i>CATIType_var</i> type, The type of the Logical Reference to create. If this argument is a NULL pointer, the modeler type RFLVPMLogicalReference will be used by default for creation .</li>
	<li>Environment pointer , a <i>CATIAdpEnvironment</i>* type, the current 
	setted 
	environment .</li>
	<li>iUselessList, a CATListValCATICkeParm_var type, this list of PLM attributes must be empty since the PLM attributes of the newly created object are valuated by the method 
	.</li>
     
     <li>opiCreatedReference,<em> CATILogReference</em> type, an output argument which contains pointer on the created Logical2d reference </li>
   </ul>
  <p>The pointer on the created logical2d reference retrieved in this step is then used to retrieve the default 2d layout of the created logical2d reference which is performed
  in the next step.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Retrieve the 2D layout of created logical2d ref"></a>Retrieve the 
	default 2D layout of created logical2d ref </h3>
   <p>In this step,we retrieve the default 2d layout( 2d position, Width &amp; 
	Height) of the created logical 2d reference. It begins with retrieving a pointer on <i>CATIFL2DEntity</i> 
   on the created logical reference ,which manages the 2d layout of the logical2d reference.
   <pre class="code">
...
<b>CATIFL2DEntity </b>*piFL2DEntity = NULL;
if (NULL != opiCreatedReference)
	rc = <b>opiCreatedReference</b>-&gt;QueryInterface(IID_CATIFL2DEntity, (void**) &amp;piFL2DEntity);
...</pre>
<p>Once the <i>CATIFL2DEntity</i> pointer is retrieved on the created logical2d reference, we use it to retrieve the default 2d layout
 of the created reference.</p>
 <pre class="code">
 ...
float oPositionX = 0.f;
float oPositionY = 0.f;

rc = <b>piFL2DEntity-&gt;Get2DPosition</b>(oPositionX, oPositionY);
 ...
float oWidth = 0.f;
float oHeight = 0.f;

rc = <b>piFL2DEntity-&gt;Get2DSize</b>(oWidth, oHeight);
...
 </pre>
     <p>Making a call to <code>CATIFL2DEntity::Get2DPosition</code> and <code>CATIFL2DEntity::Get2DSize</code>
     returns the default 2d position and size parameters of the created logical2d reference.</p> 
     <p>Once we retrieve the default 2d layout of the created logical2d reference, we then set the 2D layout with the values input by the user. Its 
     implementation details are mentioned in the next step.</p>
  
   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Set the 2D layout of created logical2d ref"></a>
   Set the 2D layout of created logical2d ref with values input</h3>
   <p>In this step, we set the 2D layout of the created logical2d reference with the values input by the user. </p>
   
   
       <pre class="code">...
float iposX=opdoubleForPosX;
float iposY=opdoubleForPosY;
		
rc = <b>piFL2DEntity-&gt;Set2DPosition</b>(iposX,iposY);
...
float iWidth=opdoubleForWidth;
float iHeight=opdoubleForHeight;
		
rc =<b> piFL2DEntity-&gt;Set2DSize</b>(iWidth, iHeight);
  </pre>
  <p>Please note that the inputs required by the methods <code>CATIFL2DEntity::Set2DPosition</code> and <code>CATIFL2DEntity::Set2DSize</code>
  are of type <b>float</b>. So , type conversion of the input arguments( for modifying 2d layout of the logical reference) is required.Thus , we 
	first convert these input arguments to the type<b> double</b> and then pass it to the methods <code>CATIFL2DEntity::Set2DPosition</code> and 
  <code>CATIFL2DEntity::Set2DSize</code>
.</p>
<p>Finally, we save the modified logical reference(with 2d layout) in the 
repository. Its implementation details are mentioned below.</p>    
   
  
   <script type="text/javascript">insertLinkToTop();</script>
   <h3><a name="Save"></a>Save the newly created Logical2D reference in repository</h3>
   <p>The last step consists in to save the created logical2d reference. Here we use the <code>Save</code> method of the <i>
   CATAdpSaver</i> class. </p>
   <pre class="code">
...
<strong>CATAdpSaver</strong> saver;
rc  =  saver.<strong>Save</strong>();
...
 </pre>
      
	 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreateReference2DLayout</code> use case ends by simply closing the PLM
session. Since all PS use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

	
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="InShort"></a>In Short</h2>
	<p>This use case creates a Logical reference(with 2d Layout).The use case further retrieves the 
	initial 2d coordinates and the size(width,height) of the 2d layout,	and then 
	changes the 2d layout with the values input by the user.
	</p>
 	<script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="References"></a>References</h2>
   <table >
     
     <tr>
       <td valign="top">[1]</td>
       <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
     </tr>
     <tr>
       <td valign="top">[2]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
       Creating a Basic PLM Batch </a></td>
     </tr>
     <tr>
       <td valign="top">[3]</td>
       <td>
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">
		Understanding PLM Environment</a></td>
     </tr>
     <tr>
       <td valign="top">[4]</td>
       <td>
       <a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
     </tr>
   </table>
 
   <!---------------------------------comment------------------------------------->
   <h2><a name="History"></a>History</h2>
   <table >
     <tr>
       <td valign="top">Version: <strong>1</strong> [Aug 2009]</td>
       <td valign="top">Document created</td>
     </tr>
     <tr>
       <script type="text/javascript">insertLinkToTop();</script>
     </tr>
   </table>
  
   <!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>
  </body>
</html>

