<html>

  <head>
  <meta http-equiv="Content-Language" content="en-gb">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 12.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
  <title>Creating a Logical Structure Model
 </title>
  <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>




  </head>

  <body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Logical <span lang="en-us">Structure 
		Model</span></h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

  
   <!---------------------------------comment------------------------------------->
   <table class="abstract">
     <tr>
       <td>
       <h2>Abstract</h2>
       <p>The use case illustrates the steps involved in the CAA Customization 
		to create a Logical structure. This logical structure consists of a root 
		Logical reference with an instance of another Logical Reference under 
		it. </p>
       <ul>
         <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
         <li><a href="#UseCase">The CAALmiCreatingLogicalModel Use Case</a>
         <ul>
           <li><a href="#What">What Does CAALmiCreatingLogicalModel Do</a></li>
           <li><a href="#How">How to Launch CAALmiCreatingLogicalModel</a></li>
           <li><a href="#Where">Where to Find the CAALmiCreatingLogicalModel Code</a></li>
         </ul>
         </li>
         <li><a href="#Step">Step-by-Step</a></li>
         <li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
       </ul>
       </td>
     </tr>
   </table>

   <!---------------------------------comment------------------------------------->
   <h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
   <p>This use case teaches an end-user the CAA Exposition to build a logical 
	Model,&nbsp; provided by the&nbsp; <code>CATLogicalModelerUseItf </code>
	framework. The capabilities are listed below:</p>
   <ul>
     <li><code>CATLogFactoriesProvider::GetReferenceFactory</code> to retrieve the 
		<em>CATILogReferenceFactory</em> factory</li>
		<li><code>CATILogReference::CreateReference </code>which actually creates the logical reference</li>
		<li><code>CATILogInstances::Add</code> implementation on a Logical 
		reference, responsible for 
		instantiating a child reference under root</li>
     
   </ul>
 <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="UseCase"></a>The CAALmiCreatingLogicalModel Use Case</h2>
   <p><code>CAALmiCreatingLogicalModel </code> is a use case of the <code>
	CAALogicalModelerUseItf.edu</code> 
   framework that mainly illustrates <code>CATLogicalModelerUseItf </code>frameworks capabilities.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="What"></a>What Does CAALmiCreatingLogicalModel Do</h3>
   <p>The CAALmiCreatingLogicalModel use case creates 
	Logical Structure. To begin with it creates a Root reference. Next, it 
	creates a child reference. Finally, it instantiates the child reference 
	under the Root. </p>
<p>Since a PLM Entity creation, essentially dosen't reqire list of attribute-values 
as input so the Use Case builds pass empty list for the Root 
reference, child reference and the child instance.</p>
<table cellspacing="1" class="style3">
	<caption><a name="Fig.1"></a>Fig.1 Logical Structure </caption>
	<tr>
		<td>
		<img src="images/CAALmiUcCreatingLogicalModel_image.jpg"></td>
	</tr>
</table>
<p>The Logical structure created by the Use Case is depicted in [<a href="#Fig.1">Fig.1</a>] 
above. </p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="How"></a>How to Launch CAALmiCreatingLogicalModel </h3>
   <p>To launch CAALmiCreatingLogicalModel , you will need to set up the build time 
	environment, then compile CAALmiCreatingLogicalModel along with its 
	prerequisites, set up the run time environment, and then execute the use 
	case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAALmiCreatingLogicalModel Repository Server User Password 
SecurityCtx &quot;</code></p>
  
   <p>where:</p>
   
   
    <table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th><b>Server</b></th>
    <td>The server as <i>Host:port_number/RootURI</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project). 
	Choose Role as Designer(as the use case modifies the PLM data)</td>
  </tr>
 
	
  </table>
   
   
   
   
   
   
   
   
   
   
   
  <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h3><a name="Where"></a>Where to Find the CAALmiCreatingLogicalModel Code</h3>
   <p>The CAALmiCreatingLogicalModel use case is made of a single file located in 
	the CAALmiCreatingLogicalModel.m module of the CAALogicalModelerUseItf.edu 
	framework:</p>
   <table>
     <tr>
       <td><code>
		InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiCreatingLogicalModel.m\</code></td>
     </tr>
   </table>
   <p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is 
	the directory where the CAA CD-ROM is installed.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="Step"></a>Step-by-Step</h2>
   <p>There are several logical steps in CAALmiCreatingLogicalModel use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li><a href="#Create">Create a Logical Structure</a><ul>
		<li><a href="#Create a Reference Factory">Create a Reference Factory</a></li>
		<li><a href="#Create a Logical Reference (Root)">Create a Logical Reference (Root)</a></li>
		<li><a href="#Create a Logical Reference (Child)">Create a Logical Reference (Child)</a></li>
		<li><a href="#Instantiate the Child Reference under Root">Instantiate the Child Reference under Root</a></li>
		</ul>
     <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
   <p>It begins with a check to ensure bare minimum number of arguments are 
	input for use case execution. This includes in the order listed below:</p>
   <ul>
   <li>five arguments(Repository, Server-Port, user , password, Security Context) 
	essential for creating a V6 session.</li>
   </ul>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching a CAA use case.</p>
<p>Please note that Before creation of the Logical Reference we need to Set 
current Environment since in object creation by default API takes current 
environment as input.&nbsp; </p>
   <script type="text/javascript">insertLinkToTop();</script>

   <h3><a name="Create"></a>Create a Logical Structure </h3>
   <p>Creating a Logical Structure, fundamentally involves </p>
<ul>
	<li>Creating a Logical Reference</li>
	<li>Instantiating a Logical Reference in root context, implying creating a 
	Logical Instance</li>
</ul>

	
  <script type="text/javascript">insertLinkToTop();</script>
  
   <h4><a name="Create a Reference Factory"></a>Create a Reference Factory</h4>
  
       <pre class="code">...
   CATILogReferenceFactory* piLogReferenceFactory=NULL;
   hr = <strong>CATLogFactoriesProvider::GetReferenceFactory</strong>(piLogReferenceFactory);
...</pre>
      
   <p>A c<code>all to CATLogFactoriesProvider::GetReferenceFactory</code>&nbsp; 
	returns us the factory pointer, as a <code>CATILogReferenceFactory</code> 
	type. </p>
   <script type="text/javascript">insertLinkToTop();</script>
   <h4><a name="Create a Logical Reference (Root)"></a>Create a Logical Reference (Root)</h4>
  
       <pre class="code">...
    CATILogReference* piFirstLogicalRef  = NULL;
    CATLISTV(CATICkeParm_var) UselessList ;
    CATIType_var spType ;
     hr = piLogReferenceFactory-&gt;<strong>CreateReference</strong>(spType, 
   					  NULL, 
 					  UselessList, 
					  piFirstLogicalRef);
...</pre>
   
   <p>The method <code>CATILogReferenceFactory::CreateReference </code>creates 
	a Logical reference. The list of attribute-value is empty since values get 
	valuated as per business Logic.&nbsp; A significant point to note here 
	is that the environment is input to this API and in this case we are passing 
	it as NULL, If we pass it as NULL the API takes current Environment as 
	input. The type of 
	the Logical Reference to create, is internally computed by this API so here 
	we pass <em>CATIType</em> as NULL_var. The 
	reference is returned as a CATILogReference type.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   <h4><a name="Create a Logical Reference (Child)"></a>Create a Logical Reference (Child) </h4>
<pre class="code">
...
   CATILogReference* piSecondLogicalRef = NULL;
   hr = piLogReferenceFactory-&gt;CreateReference( spType, NULL, UselessList , piSecondLogicalRef );
...</pre>
   <p>The creation of the Child Reference is exactly similar as that of the Root 
	Reference.</p><script type="text/javascript">insertLinkToTop();</script><h4><a name="Instantiate the Child Reference under Root"></a>
   Instantiate the Child Reference under Root</h4>
   <p>We now instantiate the Child Reference under the Root.</p>
   
   
       <pre class="code">...
   CATILogInstances * piLogInstancesOnFirstLogicalRef = NULL;
   CATILogInstance * piLogicalInstanceOfsecondRef = NULL;
   hr = <strong>piFirstLogicalRef-&gt;QueryInterface(IID_CATILogInstances,(void **)&amp;piLogInstancesOnFirstLogicalRef);</strong>
	
   if (SUCCEEDED(hr))
   {
      CATLISTV(CATICkeParm_var) UselessList3 ;
      hr = <strong>piLogInstancesOnFirstLogicalRef-&gt;Add(</strong>piSecondLogicalRef,
 					UselessList3, 
					<strong>piLogicalInstanceOfsecondRef</strong>);
 }  </pre>
  <p>A call to <code>CATILogInstances::Add</code> implementation on a Logical 
	Reference, instantiates another Reference under it. The new child instance 
	is retrieved as a CATILogInstance type. </p>
         <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->

	 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALmiCreatingLogicalModel</code> use case ends by simply closing the PLM
session. Since all use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

	
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="InShort"></a>In Short</h2>
	<p>This use case creates a Root Logical reference. It further creates 
	another Logical Reference and instantiates it under Root. </p>
 	<script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   <h2><a name="References"></a>References</h2>
   <table >
     
     <tr>
       <td valign="top">[1]</td>
       <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
     </tr>
     <tr>
       <td valign="top">[2]</td>
       <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
       Creating a Basic PLM Batch </a></td>
     </tr>
     <tr>
       <td valign="top">[3]</td>
       <td>
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">
		Understanding PLM Environment</a></td>
     </tr>
     <tr>
       <td valign="top">[4]</td>
       <td>
       <a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
     </tr>
   </table>
 
   <!---------------------------------comment------------------------------------->
   <h2><a name="History"></a>History</h2>
   <table >
     <tr>
       <td valign="top">Version: <strong>1</strong> [Aug 2009]</td>
       <td valign="top">Document created</td>
     </tr>
     <tr>
       <script type="text/javascript">insertLinkToTop();</script>
     </tr>
   </table>
  
   <!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>
  </body>
</html>

