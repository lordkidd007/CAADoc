<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Navigating Logical Connection</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Navigating Logical Connection</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This use case Navigates Logical Connections. 
		
		Here in this use case we retrieve connection and objects associated with it.
      <ul>
      	<li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAALmiNavigatingConnections Use Case</a>
          <ul>
            <li><a href="#What">What does the CAALmiNavigatingConnectionsdo</a></li>
            <li><a href="#How">How to launch CAALmiNavigatingConnections</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAALmiNavigatingConnections</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The learnings from this Use Case are:</p>
<ul>
	<li>Retrieving Logical Connection object</li>
	<li>Retrieving the object associated with logical Connection</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAALmiNavigatingConnectionsUse Case</h2>
<p> <code>CAALmiNavigatingConnections </code>is a use case of the <code>
CAALogicalModelerUseItf.edu</code>
framework that illustrates the <code>CATLogicalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAALmiNavigatingConnections Do</h3>
<p>In this use case we retrieve Connection and the Object associated objects. </p>
<p>Initially we open the Logical reference. Then we navigate through and 
retrieve Connection aggregated under Root reference. </p>
<p>Next we retrieve objected associated with the Logical Connection. The 
associated objects means the two instances in between which this Connection is 
realized though the Ports Of Instances. </p>
<ul>
	<li>Logical Child 1 Instance Object (<code>CAALmiNavigatingConnections_Child1.1</code>)</li>
	<li>Logical Port Object aggregated under Logical Child 1 (<code>Port1</code>)</li>
	<li>Logical Child 2 Instance Object (<code>CAALmiNavigatingConnections_Child2.1</code>)</li>
	<li>Logical Port Object aggregated under Logical Child 2 (<code>Port2</code>)</li>
</ul>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Logical Connection</caption>
	<tr>
		<td>
		<img src="images/CAALmiUcNavigatingConnections_image1.jpg"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.1">Fig.1</a>] shows the Logical connection with its 
associated objects.&nbsp; </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAALmiNavigatingConnections</h3>
<p>To launch <code>CAALmiNavigatingConnections</code>, you will need to set up the build time
environment, then compile <code>CAALmiNavigatingConnections<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAALmiNavigatingConnections Repository Server User 
Password SecurityCtx PLMType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IDAttribute1&nbsp;AttrValue1 [IDAttribute2 Value2 ...] <b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>
              . Choose Role as Reviewer ( as the use case does not modify the PLM Data) </o:p>
              </td>
		</tr>
		<tr>
			<th> <b>PLMType</b></th>
			<td>A String Representing PLM Type</td>
		</tr>
		
  <tr>
    <th height="35">IDAttribute1*<td height="16">Identification attribute name for opening Root</td>
  </tr>
		
		 <tr>
    <th height="35">AttrValue1*<td height="16">Identification attribute name value for opening Root</td>
  </tr>
		</table>




<p align="left">* We could have several such Attribute-Value set. </p>
<p align="left">CAALmiNavigatingConnections.3dxml this 3D XML file contains the root Product&nbsp; Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALmiNavigatingConnections_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAALmiNavigatingConnections
Code</h3>
<p>The <a><code>CAALmiNavigatingConnections</code></a> use case is located in the
<a><code>CAALmiNavigatingConnections.m</code></a> module of the <a><code>CAALogicalModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogicalModelerUseItf.edu\CAALmiNavigatingConnections.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in <code>CAALmiNavigatingConnections </code>use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li>
		<a href="#Retrieve The Connection Object From Input Structure">Retrieve The Connection Object From Input Structure</a><li>
		<a href="#Retrieve Related Objects To The Logical Connection Retrieved In Previous Step">Retrieve Related Objects To The Logical Connection Retrieved In Previous Step</a><li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching a CAA use case.</p>
<p>Here we open in Authoring mode [<a href="#References">3</a>] the Logical 
structure input provided by the use case . This input model contains two 
instances with ports and connection between them. </p>

   <script type="text/javascript">insertLinkToTop();</script>

   <h3>
	<a name="Retrieve The Connection Object From Input Structure"></a>Retrieve The Connection Object From Input Structure </h3>
   <p>In this step we retrieve the list of Logical Connection objects aggregated 
	under Root.&nbsp; From that list we retrieve first connection. </p>
	
	 <pre class="code">...
   CATListValCATILogConnection_var listLogicalConnections ;
   hr = piLogConnectionsOnRoot-&gt;<strong>List</strong>(listLogicalConnections);
   ...
   CATILogConnection_var spLogConnectionOnFirstConnection = listLogicalConnections[1];
...  </pre>
<p>A call to <code>CATILogConnections::List </code>lists all Connections 
directly aggregated under Root. Then we retrieve <code>spLogConnectionOnFirstConnection</code> first Connection object from list. </p>

	
  
   <script type="text/javascript">insertLinkToTop();</script><h3>
<a name="Retrieve Related Objects To The Logical Connection Retrieved In Previous Step">
</a>Retrieve Related Objects To The Logical Connection Retrieved In Previous Step</h3>
	<p>Now in this step we retrieve the related objects to the retrieved Logical 
	connection. These related objects means the Instances in which the 
	connection done through the Ports.&nbsp;&nbsp; </p>
	<p><strong>With new API (handling Ports and Interfaces)</strong></p>
	<pre class="code">...
	<strong>CATBaseUnknown_var</strong> spLogicalInstance1;
	<strong>CATBaseUnknown_var</strong> spLogicalConnectionPoint1;
	<strong>CATBaseUnknown_var</strong> spLogicalInstance2;
	<strong>CATBaseUnknown_var</strong> spLogicalConnectionPoint2;

	hr = spLogConnectionOnFirstConnection-&gt;<strong>GetConnectedElements</strong>(spLogicalInstance1,
		spLogicalConnectionPoint1,
		spLogicalInstance2,
		spLogicalConnectionPoint2);
...</pre>
	<p>A call to <code>CATILogConnection::GetConnectedElements</code> retrieves the 
	objects related to the Connection. The Instances between connection is done (<code>spLogicalInstance1</code>,
	<code>spLogicalInstance2</code>) through the Connection Points (<code>spLogicalConnectionPoint1, spLogicalConnectionPoint2</code>).</p>
	<p>With the retrieved Connection Points, we retrieve the Ports. </p>
	<pre class="code">...
	CATListValCATBaseUnknown_var oLPathOfConnectionPoint;
	hr = pConnectionPoint-><strong>GetPath</strong>(oLPathOfConnectionPoint);
...</pre>
	<p>A call to <code>CATLogConnectionPoint::GetPath</code> retrieves the path of the
	Connection Point. In that case, this path contains a Port.</p>
	
	<p><strong>With old API (handling only Ports)</strong></p>
	<pre class="code">...
	CATILogInstance *piLogInstOnChild1Instance = NULL;
	CATILogPort *piLogPortOnPortUnderChild1 = NULL;
	CATILogInstance *piLogInstOnChild2Instance = NULL;
	CATILogPort *piLogPortOnPortUnderChild2 = NULL;

	hr = spLogConnectionOnFirstConnection-&gt;<strong>GetConnectedElements</strong>(piLogInstOnChild1Instance,
		piLogPortOnPortUnderChild1,
		piLogInstOnChild2Instance,
		piLogPortOnPortUnderChild2);
...  </pre>
	<p>A call to <code>CATILogConnection::GetConnectedElements </code>retrieves 
	the objects related to Connection. The Instances between connection is done (<code>piLogInstOnChild1Instance, piLogInstOnChild2Instance</code>) 
	through the Ports (<code>piLogPortOnPortUnderChild1,piLogPortOnPortUnderChild2</code>). </p>
	<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

	<h3><a name="Epilog"></a>Epilog</h3>
	<p>The <code>CAALmiSiblingConnectivity</code> use case ends by simply closing the PLM
	session. Since all use cases&nbsp; necessarily conclude by closing the PLM
	session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
	Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

	<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
	<h2><a name="InShort"></a>In Short</h2>
	<p>In this use case we are retrieving Connection from the given structure. Then 
	the objects associated with the Logical connection. The associated objects means 
	the two instances in between which this Connection is realized though the Ports 
	Of Instances. </p>
	<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

	<tr>        
        <td valign="top" height="12">[3]</td>
        <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding &amp; Opening PLM Components</a></td>
    </tr>
         
   	</table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <strong>1</strong> [Aug 2010]</td>
		<td valign="top">Document created</td>
	</tr>
	<tr>
		<td valign="top">Version: <strong>2</strong> [Jul 2014]</td>
		<td valign="top">Updated to add New Connectivity API</td>
	</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


