<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a PLM Data Model</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a PLM Data Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3><a name="Top"></a>Abstract</h3>
		<p>This article discusses the CAAOmbBrowsingPLMModel use case. The use case 
		shows how to browse a <strong>PLM Data Model</strong> with <strong>generic 
		APIs</strong>. In other words, with the same APIs you can browse a Product 
		model, a Config Model, etc. This use case is the illustration of the reference 
		articles [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAOmbBrowsingPLMModel Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAOmbBrowsingPLMModel Do</a></li>
					<li><a href="#How">How to Launch CAAOmbBrowsingPLMModel</a></li>
					<li><a href="#Where">Where to find the CAAOmbBrowsingPLMModel 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case primarily teaches the user to browse a <strong>PLM Model</strong> 
using the <strong>generic APIs</strong> of the CATPLMComponentInterfaces framework. 
You will notice that only the PLM Reference, PLM Instance, PLM Representation Reference 
and PLM Representation instance [<a href="#References">2</a>] can be browsed. The 
PLM Port and PLM Connection are not browsable by the generic APIs. To retrieve such 
PLM components refer to the modeler's documentation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOmbBrowsingPLMModel Use Case</h2>
<p>CAAOmbBrowsingPLMModel is a use case of the CAAOjectModelerBase.edu framework 
that illustrates the CATPLMComponentInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAOmbBrowsingPLMModel Do</h3>
<p>The use case browses the PLM Data Model. [<a href="#Fig1">Fig. 1</a>] depicts 
the input data for this Use Case delivered in a 3dxml file (<a href="#model">*</a>). 
We have taken a Product Model as an example, but the results are equally valid for 
all PLM Data Models.</p>
<table>
	<caption><a name="Fig1">Fig.1</a> Input Product Model</caption>
	<tr>
		<td>
		<img alt="Input Product Model" src="images/CAACor2BrowsingPLMModel_InputModel.jpg"/></td>
	</tr>
</table>
<p>The Product Model could be loaded in either of the following modes and the results 
correspond to the loading mode:</p>
<ul>
	<li><strong>Navigate mode</strong>: Only the PLM Reference and PLM Instance 
		are loaded. The output therefore depicts only those entities of the product 
		model.
		<pre class="code"><strong>Reference display name = CAACor2BrowsingPLMModel_Root---IN_WORK
(1 children beneath)</strong>
     &lt;Instance display name = CAACor2BrowsingPLMModel_Child1.1&gt; 
     <strong>&lt;Reference display name = CAACor2BrowsingPLMModel_Child1---IN_WORK&gt;
     (1 children beneath)</strong>
          &lt;Instance display name = CAACor2BrowsingPLMModel_Child2.1&gt;
          <strong>&lt;Reference display name = CAACor2BrowsingPLMModel_Child2---IN_WORK&gt;
          (0 children beneath)</strong></pre>
	</li>
	<li><strong>Authoring mode</strong>: PLM Reference, PLM Instance, PLM Representation 
		Reference and PLM Representation Instance are all loaded. The output therefore 
		depicts all those entities of the product model.
		<pre class="code"><strong>Reference display name = CAACor2BrowsingPLMModel_Root---IN_WORK
(1 children beneath)</strong>
     &lt;Instance display name = CAACor2BrowsingPLMModel_Child1.1&gt; 
     <strong>&lt;Reference display name = CAACor2BrowsingPLMModel_Child1---IN_WORK&gt;
     (1 children beneath)</strong>
          &lt;Instance display name = CAACor2BrowsingPLMModel_Child2.1&gt; 
          <strong>&lt;Reference display name = CAACor2BrowsingPLMModel_Child2---IN_WORK&gt;
          (0 children beneath) 
          (1 Rep Inst beneath)</strong>
               &lt;RepInst display name = CAACor2BrowsingPLMModel_RepRef.1&gt; 
               <strong>(1 Rep Inst beneath)</strong>
                  &lt;RepInst display name = CAACor2BrowsingPLMModel_RepRef---.1&gt; 
          <strong>(0 Rep Inst beneath)</strong>
</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAOmbBrowsingPLMModel</h3>
<p>To launch CAAOmbBrowsingPLMModel , you will need to set up the build time environment, 
then compile CAAOmbBrowsingPLMModel along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAOmbBrowsingPLMModel Repository Server User Password SecurityCtx 
PLMType PLM_ExternalID V_version [WithRep]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (since we only browse the PLM Data, no modifications)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation 
		Reference to be opened(*)</td>
	</tr>
	<tr>
		<th>V_version1</th>
		<td>The <code>V_version</code> of a PLM Reference or PLM Representation 
		Reference to be opened(*)</td>
	</tr>
	<tr>
		<th>WithRep</th>
		<td>Optional: To navigate through Rep Ref </td>
	</tr>
</table>
<p><a name="model"></a><strong>*</strong> The input model is retrieved by importing the CAAOmbBrowsingPLMModel.3dxml 
file from the CAAObjectModelerBase.edu fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\InputData\CAAOmbBrowsingPLMModel.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the foler 
where the API CD-ROM is installed.</p>
<p>This &quot;3D XML file&quot; contains the root Product Reference with the following 
attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: CAACor2BrowsingPLMModel_Root </li>
	<li><strong>Version</strong>: ---</li>
</ul>
<p>Here we have provided a 3D XML file only for the convenience of the user so that 
one doesn't have to recreate the input model. It can simply be imported from this 
file, and used for the execution further. But the user does have the liberty to 
use any input model of his choice, based on his discretion.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">3</a>] 
for how to import and re-import such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAOmbBrowsingPLMModel Code</h3>
<p>The CAAOmbBrowsingPLMModel use case is located in the CAAOmbBrowsingPLMModel.m 
module of the CAAObjectModelerBase.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\CAAOmbBrowsingPLMModel.m\</code></p>
<p>Where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAOmbBrowsingPLMModel:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the Root PLM Reference</a></li>
	<li><a href="#Step2">The BrowseReference Global Function</a></li>
	<li><a href="#Step3">Seeking the First-Level Instances under the Current Reference</a></li>
	<li><a href="#Step4">Seeking the PLM Rep Instances and PLM Rep Refs under the 
		Current Reference</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAOmbBrowsingPLMModel use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we ain't modifying PLM data). There are other parameters as well, details 
of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">4</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Root PLM Reference</h3>
<p>The first step consists in to retrieve in database the PLM Component Identificator<strong>
</strong>.The <em>CATIAdpPLMIdentificator</em>* is found thanks to the <code>CATAdpPLMQueryServices</code> 
API using the identifier set attributes (input attributes). Then using <em>CATIAdpPLMIdentificator</em>*, 
the Root PLM Reference can be opened in the session and the <em>CATIPLMNavReference</em>* 
(<code>pINavReferenceOnRoot</code>) can be sought from it. We have an option here 
to either load the entire PLM Data Model or only the Base model. The article &quot;<cite>Querying, 
Expanding &amp; Opening PLM Component</cite>&quot; [<a href="#References">5</a>] 
has a section which provides an explanation on the <code>CompleteAndOpen</code> 
method of <em>CATAdpOpener</em> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>TThe BrowseReference Global Function</h3>
<p>The most important call in the use case main, is that to <code>BrowseReference</code> 
which has calls to various CATPLMComponentInterfaces APIs for browsing the PLM Data 
Model.</p>
<pre class="code"><strong>int main(int iArgc, char *iArgv[])</strong>
{
	...
	<strong>hr = BrowseReference(pINavReferenceOnRoot,1,WithRep);</strong>		
}</pre>
<p>In the main, we have already sought the <em>CATIPLMNavReference</em>* (<code>pINavReferenceOnRoot</code>) 
on Root PLM Reference in the previous step. The <code>BrowseReference</code> routine 
is invoked with this Root pointer, as its 1st argument.</p>
<p>The second argument (<strong>int</strong> shift) is set to 1, since the Root 
Reference is printed at the extreme left (<strong>indent = 1</strong>) in a PLM 
Data Model representation. And the third argument the CATBoolean (<code>WithRep</code>) 
is set to <strong>TRUE</strong> if user intends to navigate through entire PLM Data 
Model otherwise <strong>FALSE </strong>, depending upon the input value.</p>
<p>The <code>BrowseReference</code> global routine has fundamentally two steps as 
explained below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Seeking the First-Level Instances under the Current Reference</h3>
<p>The PLM Root Reference is printed, to begin with. The first-level instances below 
the Root Reference are sought and printed. The respective PLM References of each 
of these first-level instances are then retrieved and a recursive call is made to 
the <code>BrowseReference</code> routine. Each of these elements are output to the 
console.</p>
<pre class="code">HRESULT BrowseReference(CATIPLMNavReference* pReference,int shift,
                        CATBoolean WithRep)
{
      ...	
	CATListPtrCATIPLMNavEntity ListChildInstance;<strong>
	CATPLMCoreType </strong>coreType<strong> = PLMCoreInstance;
	
	</strong>hr = pReference<strong>-&gt;ListChildren</strong>(ListChildInstance,1,&amp;coreType);
      	...
      	int j=1 ;
	while (j&lt;=ListChildInstance.Size())
	{
		CATIPLMNavEntity* piChildInst = ListChildInstance[j];
      		... 
      		CATIPLMNavInstance* piNavInst = NULL;
		hr = piChildInst-&gt;QueryInterface(IID_<strong>CATIPLMNavInstance</strong>,(void **)&amp;piNavInst);
		...
     		CATIPLMNavReference* pReferenceOfChild = NULL;
		hr = piNavInst<strong>-&gt;GetReferenceInstanceOf</strong>(pReferenceOfChild);
      		...
     		hr <strong>= BrowseReference</strong>(pReferenceOfChild ,shift+3 ,WithRep);
      		...
		j++ ;
	}
	</pre>
<p>Here we seek all the first level instances under the input PLM Reference with 
a call to <code>CATIPLMNavReference::ListChildren</code> on the input <code>pReference</code>.</p>
<p>The fact that we can seek selectively only the instances below the Reference 
(and not PLM Rep Instances ) is owing to the 3rd argument, a <code>CATPLMCoreType</code> 
type, which we have set to <code>PLMCoreInstance</code>. This implies that we have 
set a filter which enables us retrieve only instances aggregated under the Reference.</p>
<p>The next step is to seek the PLM Reference with a call to the <code>CATIPLMNavInstance::GetReferenceInstanceOf</code>API 
on each of the first-level instances retrieved earlier.</p>
<p>What obviously follows is a recursive call to <code>BrowseReference</code> to 
navigate the rest of the hierarchy of the product model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Seeking the PLM Rep Instances and PLM Rep Refs under the 
Current Reference</h3>
<p>Next we seek the PLM Rep Instances and their respective PLM Rep References aggregated 
under the input Root PLM Reference .The PLM Rep Instances and the Content Kind of 
the PLM Rep References is then output in the consol .</p>
<pre class="code">... 
       	if (WithRep == TRUE)	
       	{
	    <strong>coreType</strong> = <strong>PLMCoreRepInstance</strong>; 
             CATListPtrCATIPLMNavEntity ListChildRepInstance;
	    hr = pReference<strong>-&gt;ListChildren</strong>(ListChildRepInstance,1,&amp;coreType);		
	     ... 
       	    int j=1; 
       	    while ( j&lt;=ListChildRepInstance.Size() )
	    {
                CATIPLMNavEntity* piChildRepInst = ListChildRepInstance[j];
                ... 
                CATIPLMNavRepInstance* piNavRepInst = NULL;
                HRESULT hr = piChildRepInst<strong>-&gt;</strong>QueryInterface(IID_<strong>CATIPLMNavRepInstance,</strong>(void **)&amp;piNavRepInst);	
                ... 
                CATIPLMNavRepReference* pRepReferenceOfChild = NULL;
                hr = piNavRepInst-&gt;<strong>GetRepReferenceInstanceOf</strong>(pRepReferenceOfChild);							
      	       ... 
       	       CATPLMAuthoringStreamDescriptorKind oContentKind ;
                hr = pRepReferenceOfChild-&gt;<strong>GetContentKind</strong>(oContentKind); 
                ...				
                j++; 
              }
	}
...	</pre>
<p>We proceed with this step, subject to the condition that the user expects the 
PLM Rep Instances to be navigated through in the PLM Data Model, by specifying the 
last argument as <strong>WithRep</strong>.</p>
<p>Here again the <code>CATPLMCoreType</code> set as <code>PLMCoreRepInstance</code>, 
enables us to retrieve the list of only PLM Rep Instances aggregated below the Root 
Reference.</p>
<p>The next step is to seek the PLM Rep Reference from associated Rep Instances 
and then retrieve the kind of authoring Stream Descriptor using <code>CATIPLMNavRepReference::GetContentKind</code> 
which could be either TechnologicalContent or NonCATIA.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAOmbBrowsingPLMModel use case ends by simply closing the PLM session. Since 
all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic viz. &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
[<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to browse a PLM Data Model with various
<strong>generic APIs</strong> belonging to the CATPLMComponentInterfaces framework.</p>
<p>Based on the user choice the PLM Data Model gets loaded in the session. If user 
intends to navigate through the entire data model ,the Root PLM Reference gets opened 
in &quot;<strong>Authoring</strong>&quot; mode with a call to <code>CATAdpOpenener::CompleteAndOpen</code>, 
otherwise it gets opened in &quot;<strong>Navigation</strong>&quot; mode which loads 
only the <strong>Base Model</strong> in the current session. The article [<a href="#References">5</a>] &quot;<strong>Querying, 
Expanding &amp; Opening PLM Component</strong>&quot; is dedicated exclusively on 
this subject.</p>
<p>Further depending upon the user choice ,this PLM Data Model is browsed for the
<strong>PLM References</strong>, <strong>PLM Instances</strong>, <strong>PLM</strong>
<strong>Rep References </strong>and <strong>PLM Rep Instances</strong>if user happens 
to opt for the Authoring Mode else the PLM Data Model gets browsed only for the
<strong>PLM References </strong>and <strong>PLM Instances</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACor2TaNavigateCoreData.htm">Navigating on PLM Core Data</a>
		</td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCorePrinciples.htm">
		PLM Core Model Overview</a> </td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a> </td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
