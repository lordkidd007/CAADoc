<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Making Your Components Printable</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Making Your Components Printable</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to make your objects printable.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPrtPrintableObjects Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPrtPrintableObjects Do</a></li>
					<li><a href="#How">How to Launch CAAPrtPrintableObjects</a></li>
					<li><a href="#Where">Where to Find the CAAPrtPrintableObjects 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to make a component printable by making 
the component implement the <em>CATIPrintable</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPrtPrintableObjects Use Case</h2>
<p>CAAPrtPrintableObjects is a use case of the CAAPrint.edu framework that illustrates 
the Print framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPrtPrintableObjects Do</h3>
<p>CAAPrtPrintableObjects is a program that creates a simple component using a single 
class named <em>CAAPrtPrintableString</em> that holds a character string. This component 
implements the <em>CATIPrintable</em> interface [<a href="#References">1</a>] and 
its single method <code>CreatePrintableImage</code> that creates and returns the 
component printable image. This is an instance of the <em>CAAPrtStringImage</em> 
class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPrtPrintableObjects</h3>
<p>To launch CAAPrtPrintableObjects, you will need to set up the build time environment, 
then compile CAAPrtPrintableObjects along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPrtPrintableObjects Code</h3>
<p>The CAAPrtPrintableObjects use case is made of a several classes located in the 
CAAPrtPrintableObjects.m module of the CAAPrint.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAPrint.edu\CAAPrtPrintableObjects.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To make a component printable, there are four main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Makes the component implement <em>CATIPrintable</em></a></td>
		<td>CAAPrtPrintableString class</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creates the printable image class</a></td>
		<td>CAAPrtStringImage class</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Writes the <code>GetSize</code> method</a></td>
		<td>CAAPrtStringImage class</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Writes the <code>Decode</code> method</a></td>
		<td>CAAPrtStringImage class</td>
	</tr>
</table>
<p>The CAAPrtPrintableString component is created using a single class whose name 
is the component name.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Makes the Component Implement CATIPrintable</h3>
<p>The <em>CAAPrtPrintableString</em> class header file is as follows.</p>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;     <em>// To derive from CATBaseUnknown</em>
#include &quot;CATUnicodeString.h&quot;   <em>// The string to represent</em>

class CATPrintImage;  <em>// To return the image</em>

class  CAAPrtPrintableString : public CATBaseUnknown
{
 public:
  <strong>CATDeclareClass</strong>;   <em>// Declares that this class belongs to a component</em>

  CAAPrtPrintableString (const CATUnicodeString &amp; iString);
  virtual ~CAAPrtPrintableString ();

  <em>// CATIPrintable interface method </em>
  CATPrintImage * <strong>CreatePrintableImage</strong>(void); <em>// Returns the image representing the strin</em>g
 
 private:
  CATUnicodeString _string;  <em>// The string to print held by the component </em>
};</pre>
<p>The <code>CATDeclareClass</code> macro declares that this class is part of a 
component. The class has a constructor that takes the character string as input 
parameter, a destructor, the <code>CreatePrintableImage</code> method of the <em>
CATIPrintable</em> interface, and the character string.</p>
<p>Its source file is a follows.</p>
<pre class="code">#include &quot;CAAPrtPrintableString.h&quot;   <em>// Header of the current class</em>
#include &quot;CAAPrtStringImage.h&quot;       <em>// The class of the image to print</em>

<em>// Print framework</em>
#include &quot;TIE_CATIPrintable.h&quot;
  
<em>// Declares that this class implements the CATIPrintable interface</em>
<strong>TIE_CATIPrintable(CAAPrtPrintableString); </strong>

<em>// Declares that this class is an implementation</em>
<strong>CATImplementClass</strong>(<strong>CAAPrtPrintableString</strong>,<strong> Implementation</strong>, CATBaseUnknown, CATnull);

CAAPrtPrintableString::CAAPrtPrintableString(const CATUnicodeString &amp; iString)
                     : _string(iString)
{}

CAAPrtPrintableString::~CAAPrtPrintableString()
{}

<em>// CATIPrintable implementation
// Returns the image representing the printable object</em>
CATPrintImage * CAAPrtPrintableString::CreatePrintableImage(void)
{
  return new CAAPrtStringImage(_string);
}</pre>
<p>The <code>TIE_CATIPrintable</code> macro creates a TIE object that decouples 
the interface and its implementation. Clients that hold a pointer to the <em>CATIPrintable</em> 
interface have in fact a pointer to the TIE object, and not to the <em>CAAPrtPrintableString</em> 
instance.</p>
<p>The <code>CATImplementClass</code> macro declares that the <em>CAAPrtPrintableString</em> 
class is an implementation, that is, the component main class, other possible classes 
making up the component being extensions, and that the component OM-derives from
<em>CATBaseUnknown</em>.</p>
<p>The implementation of the <code>CreatePrintableImage</code> method of <em>CATIPrintable</em> 
simply returns an instance of the <em>CAAPrtStringImage</em> class.</p>
<p>The framework's interface dictionary should include the following line.</p>
<pre class="code">CATPrtPrintableString   CATIPrintable  libCAAPrtPrintableObjects</pre>
<p>This declares that the <em>CATPrtPrintable</em> component implements the <em>
CATIPrintable</em> interface, and that the implementation code is located in the 
shared library or DLL named libCAAPrtPrintableObjects. If the TIE and the method 
code are located in two different shared libraries or DLL, the one that must be 
inserted in the interface dictionary is the one that contains the TIE code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Printable Image Class</h3>
<p>The printable image class header file is as follows.</p>
<pre class="code">...
class CATPrintGenerator;  <em>// To use a generator to draw the image</em>
class CATPrintParameters; <em>// To use print parameters</em>

class CAAPrtStringImage : public CATPrintImage
{
  public:
    CAAPrtStringImage(const CATUnicodeString &amp;iString);
    virtual ~CAAPrtStringImage();
    
    <em>// Retrieves the image size</em>
    int GetSize(float&amp; iWidth, float&amp; iHeight);
    // <em>Draws the image using a given generator and specified print parameters</em>
    int Decode(CATPrintGenerator* iGenerator, const CATPrintParameters&amp; iParameters);

  private:
    CATUnicodeString _string;   <em>// The string to draw</em>  
};</pre>
<p>This class holds the character string, and has two methods:</p>
<ol>
	<li><code>GetSize</code> to determine and return the printed component size</li>
	<li><code>Decode</code> that draws the component image to print using a set 
		of print parameters.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Writing the GetSize Method</h3>
<pre class="code">...
int CAAPrtStringImage::<strong>GetSize</strong>(float&amp; oWidth, float&amp; oHeight)
{
  <em>// The size depends on the string length</em>
  int lg = _string.GetLengthInChar();
  oHeight = 50.f;
  oWidth  = (lg+4)*10.;
  return 1;
}
...</pre>
<p><code>GetSize</code> determines the character string length expressed in number 
of characters, and computes from this length a height and a width of the character 
string to print.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Writing the Decode Method</h3>
<pre class="code">...
int CAAPrtStringImage::<strong>Decode</strong>(CATPrintGenerator* iGenerator, const CATPrintParameters&amp; iParameters)
{
  iGenerator-&gt;<strong>Begin</strong>(iParameters);    <em>// Initializes generation</em>
  ...
  iGenerator-&gt;<strong>End</strong>();                 <em>// Ends generation</em>
  return 1;        <em>// Returns 1 to indicate successful execution</em>
}
...</pre>
<p>The <code>Decode</code> method encloses its code between the call to the generator
<code>Begin</code> method with the print parameters, and the call to the generator
<code>End</code> method, just before returning. Now have a look at what can be put 
between these two method calls.</p>
<pre class="code">  ...
  iGenerator-&gt;<strong>SetDrawWidth</strong>(0.0f);    <em>// Sets line width</em>
 
  int Black=0;                        <em>// Defines the black color</em>
  iGenerator-&gt;<strong>DefineColor</strong>(Black, 0.0f, 0.0f, 0.0f);
  int Red =1;                         <em>// Defines the red color</em>
  iGenerator-&gt;<strong>DefineColor</strong>(Red, 1.f, 0.f, 0.f); 
  iGenerator-&gt;<strong>SelectDrawColor</strong>(Black); <em>// Sets the black color as the drawing color</em>

  <em>// Defines the text direction: horizontal, from left to right</em>
  iGenerator -&gt;<strong>SetTextAttribute</strong>(CATPRINTTEXT_DIRECTION, 0.0);
  <em>// Sets the Courier font</em>
  iGenerator -&gt;<strong>SetTextAttribute</strong>(CATPRINTTEXT_TYPEFACE, CATPRINTTEXT_COURIER);
  <em>// Requests bold caracters</em>
  iGenerator -&gt;<strong>SetTextAttribute</strong>(CATPRINTTEXT_WEIGHT,   CATPRINTTEXT_BOLD);
  <em>// Defines the character height</em>
  iGenerator -&gt;<strong>SetTextAttribute</strong>(CATPRINTTEXT_HEIGHT, 16.72);
  ...</pre>
<p>Some initializations are first performed, such as the drawing line width, the 
black and red colors, the black color being set as the color to use, and some attributes 
of the text to print.</p>
<pre class="code">  ...
  int lg = _string.GetLengthInChar();
  
  float y = 10.;
  float x = 10.;
  float x0 = x;
  float y1 = 4*y;
  float y0 = y;
  float x1 = (lg+3)*x;

  <em>// Draws the string</em>
  iGenerator -&gt;<strong>DrawGeometricText</strong>(x0+x, y0+y, _string);

  iGenerator-&gt;<strong>SelectDrawColor</strong>(Red); <em>// Sets the red color as the drawing color</em>
  iGenerator-&gt;<strong>MoveTo</strong>(x0, y0); <em>      // Moves to the bottom left corner of the frame</em>
  
  for (int i=1; i&lt;=lg+2; i++)       <em>// Draws a bottom zigzag line</em>
  {
    iGenerator-&gt;<strong>LineTo</strong>(x0+i*x-x/2, y0-y/2);
    iGenerator-&gt;<strong>LineTo</strong>(x0+i*x, y0);
  }
  ...</pre>
<p>The text is drawn first in black using the <code>DrawGeometricText</code> method, 
and it is then surrounded by zigzag lines drawn in red. The red color is selected 
using the <code>DrawGeometricText</code> method.The pen moves to the (x0,y0) point, 
and then the bottom zigzag line drawing begins. The three others zigzag line drawing 
are not shown.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved and what to do to make a component printable. 
The component must implement the <em>CATIPrintable</em> interface whose single method
<code>CreatePrintableImage</code> returns an object that bears two methods:
<code>GetSize</code> that defines the print size from the component contents, and
<code>Decode</code> that decodes this component contents and that actually prints 
it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPrtTaPrintableObjects.htm">Making Your Components Printable</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
