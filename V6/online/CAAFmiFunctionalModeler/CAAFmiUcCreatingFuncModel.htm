<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Functional Structure</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Functional Structure</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>The use case illustrates the steps involved in the CAA Customization 
		to create a Functional structure. This Functional structure consists of 
		a root Functional reference with functional instances and functional representation 
		instances( Rep Inst) under it.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiCreatingFuncModel Use Case</a>
				<ul>
					<li><a href="#What">What Soes the CAAFmiCreatingFuncModel Do</a></li>
					<li><a href="#How">How to Launch CAAFmiCreatingFuncModel</a></li>
					<li><a href="#Where">Where to Find the CAAFmiCreatingFuncModel 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learning from this Use Case are:</p>
<ul>
	<li>The CATFunctionalModelerUseItf framework CAA Exposition to create a Functional 
		Model
		<ul>
			<li>Retrieving the factory to create the Functional Reference.</li>
			<li>Creating the root Functional Reference.</li>
			<li>Instantiating the child reference under the root functional reference.</li>
			<li>Instantiating the functional representation reference under the 
				root functional reference.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiCreatingFuncModel Use Case</h2>
<p>CAAFmiCreatingFuncModel is a use case of the CAAFunctModelerUseItf.edu framework 
that illustrates the CATFunctionalModelerUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiCreatingFuncModel Do</h3>
<p>This use case creates Functional Structure. To begin with it creates a Root Functional 
Reference. Next, it creates a child reference and instantiates the child reference 
under the Root. The use case also instantiates the Rep Inst under the Root, the 
functional representation reference being input to the use case.</p>
<p>The Functional structure created by the Use Case is depicted in [<a href="#Fig1">Fig. 
1</a>] below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1:; Functional Model</caption>
	<tr>
		<td>
		<img alt="Functional Model" src="images/CAAFmiCreatingFuncModel_Fig2.jpg"/></td>
	</tr>
</table>
<p><a href="#Fig1">Fig. 1</a> above shows a root Functional Reference <code>CAAFmiCreateFuncModel_RootRef---</code>.</p>
<p>The Root aggregates a Functional instance <code>CAAFmiCreateFuncModel_ChildRef.1</code> 
beneath it.</p>
<p>The Root also aggregates a Functional Rep Ref <code>CAAFmiCreateFuncModel_RepRef</code> 
beneath it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiCreatingFuncModel</h3>
<p>To launch CAAFmiCreatingFuncModel, you will need to set up the build time environment, 
then compile CAAFmiCreatingFuncModel along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiCreatingFuncModel Repository Server User Password 
SecurityCtx PLMType Attribute_name1_RepRef Attribute_value1_RepRef [IDAttribute2 
Value2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer ( as the use case does modifies the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String representing PLM Type</td>
	</tr>
	<tr>
		<th>Attribute_name1_RepRef*</th>
		<td>The attribute name for Functional Rep Ref</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Attribute Value</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes of the Functional Rep Ref.</p>
<p>CAAFmiCreatingFuncModel.3dxml is the 3D XML file contains the root Functional 
Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiCreatingFuncModel_RepRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiCreatingFuncModel Code</h3>
<p>The CAAFmiCreatingFuncModel use case is located in the CAAFmiCreatingFuncModel.m 
module of the CAAFunctModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreatingFuncModel.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several Functional steps in CAAFmiCreatingFuncModel use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Functional Representation Reference Identificator 
		to Open from Underlying Database</a></li>
	<li><a href="#Step2">Creating a Functional Structure</a>
		<ul>
			<li><a href="#Step21">Creating a Reference Factory</a></li>
			<li><a href="#Step22">Creating a Functional Reference (Root)</a></li>
			<li><a href="#Step23">Creating a Functional Reference (Child)</a></li>
			<li><a href="#Step24">Instantiating the Child Reference under Root</a></li>
			<li><a href="#Step25">Opening the Input Functional Representation Reference 
				(Rep Ref)</a></li>
			<li><a href="#Step26">Instantiating the Functional Rep Ref under Root</a></li>
		</ul>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAFmiBrowsingFunctionalModel use case, to begin with, creates 
a PLM Session. Its defined by the repository to be connected to, server, user, password 
and a Security Context. The Security context primarily defines a role with which 
the user is logged into the current session. In the current Use Case, since it creates 
a Functional Model . So a Designer role serves our purpose in this case. The article &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [2] delves further deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Functional Representation Reference Identificator 
to Open from Underlying Database</h3>
<p>To begin with, we retrieve from the underlying database, the Functional Representation 
Reference(Rep Ref) to be opened.</p>
<p>This step can be divided into the following three sub-steps:</p>
<ol>
	<li>Build an Attribute-Value set.</li>
	<li>Run Query and retrieve the Identificator of the Functional Rep Ref from 
		the underlying database.</li>
</ol>
<p>The implementation details of Retrieving the Identificator of the PLM Object 
providing its Attribute Set and PLM Type as an input, is described in the article 
[<a href="#References">3</a>].</p>
<p>The Functional Rep Ref identificator (retrieved in this section) is further used 
to open the Functional Rep Ref, whose implementation details are described in
<a href="#Step25">Opening the Input Functional Representation Reference (Rep Ref)</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Functional Structure</h3>
<p>Creating a Functional Structure, fundamentally involves:</p>
<ul>
	<li>Creating a Functional Reference.</li>
	<li>Instantiating a Functional Reference in root context, implying creating 
		a Functional Instance.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Creating a Reference Factory</h4>
<pre class="code">...
    CATIFctReferenceFactory *opFunctRefFactory=NULL;
    hr = <strong>CATFctFactoriesProvider::GetReferenceFactory</strong>(opFunctRefFactory);
...</pre>
<p>A call to <code>CATFctFactoriesProvider::GetReferenceFactory</code> returns us 
the factory pointer, as a <code>CATIFctReferenceFactory</code> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Creating a Functional Reference (Root)</h4>
<pre class="code">...
   <strong>CATIFctReference</strong>* piRootFunctRef  = NULL;
   CATLISTV(CATICkeParm_var) UselessList;
	
   <strong>hr =</strong> opFunctRefFactory<strong>-&gt;CreateReference( NULL_var, NULL, UselessList, piRootFunctRef);</strong>
...</pre>
<p>The method <code>CATIFctReferenceFactory::CreateReference</code> creates a Functional 
reference. The list of attribute-value is empty since values get valuated as per 
business Logic. A significant point to note here is that the environment is input 
to this API and in this case we are passing it as NULL, If we pass it as NULL the 
API takes current Environment (*) as input. The type of the Functional Reference 
to create, is internally computed by this API so here we pass <em>CATIType</em> 
as NULL_var. The reference is returned as a <em>CATIFctReference</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Creating a Functional Reference (Child)</h4>
<pre class="code">...
   CATIFctReference* piChildFunctRef = NULL;
   hr = opFunctRefFactory-&gt;CreateReference( NULL_var, NULL, UselessList, piChildFunctRef);
...</pre>
<p>The creation of the Child Reference is almost similar as for the Root Reference. 
In this case, for the demonstration, the environment is explicitly given. NULL could 
be possible, since the use case code has set one as the current one.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step24"></a>Instantiating the Child Reference under Root</h4>
<p>We now instantiate the Child Reference under the Root.</p>
<pre class="code">...
 	<strong>CATIFctInstances * piFctInstancesOnRootFunctRef</strong> = NULL;
	<strong>CATIFctInstance</strong> * piFctInstOfChildFunctRef_1 = NULL;
	<strong>CATIFctInstance</strong> * piFctInstOfChildFunctRef_2 = NULL;
	hr = piRootFunctRef-&gt;QueryInterface(IID_CATIFctInstances,(void **)&amp;piFctInstancesOnRootFunctRef);
	...
	hr = piFctInstancesOnRootFunctRef<strong>-&gt;Add</strong>(piChildFunctRef,
					  UselessList, 
					  piFctInstOfChildFunctRef_1);
	...
	hr = piFctInstancesOnRootFunctRef<strong>-&gt;Add</strong>(piChildFunctRef,
					  UselessList, 
					  piFctInstOfChildFunctRef_2);
	...
	hr = piFctInstancesOnRootFunctRef<strong>-&gt;Remove</strong>(piFctInstOfChildFunctRef_2);
	...
...</pre>
<p>A call to <code>CATIFctInstances::Add</code> implementation on a Functional Reference, 
instantiates another Reference under it. The new child instance is retrieved as 
a <em>CATIFctInstance</em> type.</p>
<p>A call to <code>CATIFctInstances::Remove</code> implementation on a Functional 
Reference, removes the input child instance from the functional reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step25"></a>Opening the Input Functional Representation Reference</h4>
<pre class="code">...
   CATIAdpPLMIdentificator* oAdpIdentifierOnInputFuncRepRef= NULL;
   ...
   <strong>CATOmbLifeCycleRootsBag</strong> Bag;
   <strong>CATAdpOpener</strong> opener(Bag);
   <strong>CATIFctRepresentationReference</strong> *piFunctRepRef= NULL;
   hr= opener.<strong>CompleteAndOpen</strong>(oAdpIdentifierOnInputFuncRepRef,IID_CATIFctRepresentationReference, (void**) &amp;piFunctRepRef);
...</pre>
<p>A call to <code>CompleteAndOpen</code> of <em>CATAdpOpener</em> returns us the 
Functional Rep Ref pointer, as a <em>CATIFctRepresentationReference</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step26"></a>Instantiating the Functional Rep Ref under Root</h4>
<p>We now instantiate the input Functional Rep Ref under the Root.</p>
<pre class="code">...
 	<strong>CATIFctRepresentationInstances * piFctRepInstsOnRootFunctRef = NULL;</strong>
	hr = piRootFunctRef-&gt;QueryInterface(IID_CATIFctRepresentationInstances,(void **)&amp;piFctRepInstsOnRootFunctRef);
	...
	<strong>CATIFctRepresentationInstance</strong> *piFctInstOfInputFunctRepRef_1=NULL;
	<strong>CATIFctRepresentationInstance</strong> *piFctInstOfInputFunctRepRef_2=NULL;
	<strong>hr=</strong> piFctRepInstsOnRootFunctRef<strong>-&gt;Add</strong>(piFunctRepRef,UselessList,piFctInstOfInputFunctRepRef_1);
	...
	<strong>hr=</strong> piFctRepInstsOnRootFunctRef<strong>-&gt;Add</strong>(piFunctRepRef,UselessList,piFctInstOfInputFunctRepRef_2);
	...
	<strong>hr=</strong> piFctRepInstsOnRootFunctRef<strong>-&gt;Remove</strong>(piFctInstOfInputFunctRepRef_2);	
	...
...</pre>
<p>A call to <code>CATIFctRepresentationInstances::Add</code> implementation on 
a Functional Reference, instantiates functional rep ref under it. The new child 
rep instance is retrieved as a <em>CATIFctRepresentationInstance</em> type.</p>
<p>A call to <code>CATIFctRepresentationInstances::Remove</code> implementation 
on a Functional Reference, removes the input child rep instance from the functional 
reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiCreatingFuncModel use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic viz. &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case creates a Root Functional reference. It further creates another 
Functional Reference and instantiates it under Root. The use case further instantiates 
the functional representation reference under the root functional reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
