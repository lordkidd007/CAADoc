<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a Functional Model with Generic APIs</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Functional Model with Generic APIs</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAFmiBrowsingFuncModelWithGenericAPI use 
		case. The Use Case details the steps involved in the CAA Customization to 
		browse through a Functional Model, using the Generic APIs (CAA Exposition) 
		of the CATPLMComponentInterfaces framework.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiBrowsingFuncModelWithGenericAPI Use 
				Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFmiBrowsingFuncModelWithGenericAPI 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiBrowsingFuncModelWithGenericAPI</a></li>
					<li><a href="#Where">Where to Find the CAAFmiBrowsingFuncModelWithGenericAPI 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Use Case teaches an end user to browse through a Functional Model hierarchy 
using the Generic CAA browsing APIs (the CATPLMComponentInterfaces framework capabilities)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiBrowsingFuncModelWithGenericAPI Use Case</h2>
<p>CAAFmiBrowsingFuncModelWithGenericAPI is a use case of the CAAFunctModelerUseItf.edu 
framework that illustrates the CATPLMComponentInterfaces frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiBrowsingFuncModelWithGenericAPI Do</h3>
<p>The input for this Use Case is a Functional Model as depicted in [<a href="#Fig1">Fig. 
1</a>] below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Functional Model</caption>
	<tr>
		<td>
		<img alt="Input Functional Model" src="images/CAAFmiBrowsingFunctionalModel_2.jpg"/></td>
	</tr>
</table>
<p>It consists of a root Functional Reference <strong>CAAFmiBrowsingFunctionalModel_RootRef</strong></p>
<p>The Root aggregates <strong>CAAFmiBrowsingFunctionalModel_ChildRef.1</strong>, 
an instance of a Functional Reference <strong>CAAFmiBrowsingFunctionalModel_ChildRef</strong> 
beneath it.</p>
<p>The Root aggregates an instance of a Functional Representation Reference(Rep 
Ref) <strong>CAAFmiBrowsingFunctionalModel_RepRef</strong> beneath it.</p>
<p>The process to retrieve a PLM Component from the database, essentially requires 
two inputs:</p>
<ul>
	<li>A list of attribute-values, provided as an input for UC execution.</li>
	<li>PLMType determine the Knowledge type of the functional reference to be browsed.</li>
</ul>
<p>The above query when run, outputs a list of PLM identificators, which conform 
to the search criteria (a list is output, since the attribute-value list input, 
is not Identification). The UC retrieves the first Identificator in this list for 
browsing. This PLM entity is then loaded in session in <strong>AUTHORING</strong> 
mode, a mode which essentially loads in session the Functional References, Instances, 
Rep Ref and Rep Instances which build up the Functional hierarchy. The Ports, 
Interfaces and Connections are not so far, included within the scope of Generic 
CAA Exposition.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Functional Model Browse Output</caption>
	<tr>
		<td>
		<img alt="Functional Model Browse Output" src="images/CAAFmiBrowsingFuncModelWithGenericApi_1.jpg"/></td>
	</tr>
</table>
<p>The Use Case browses our input model and outputs its hierarchy as depicted in 
[<a href="#Fig2">Fig. 2</a>] above. The model appears exactly similar to the way 
it is represented in the spec tree. For Reference and Rep Reference V_Name 
attribute is displayed, otherwise PLM_ExternalID attribute is displayed. This is 
due to the default environment (OneClick and New Typing V2 activated). Though only 
these attributes (PLM_ExternalID and V_Name) values of each PLM Entity in the 
hierarchy is output, the Use Case can also output all the public attribute values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALmiBrowseFunctionalModelWithGenericAPI</h3>
<p>To launch CAAFmiBrowsingFuncModelWithGenericAPI, you will need to set up the 
build time environment, then compile CAAFmiBrowsingFuncModelWithGenericAPI along 
with its prerequisites, set up the run time environment, and then execute the use 
case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiBrowsingFuncModelWithGenericAPI Repository Server 
User Password SecurityCtx PLMType iAllAttributes IDAttribute1 AttrValue1 [IDAttribute2 
Value2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number\RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role. Organization. Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLMTye </td>
	</tr>
	<tr>
		<th>iAllAttributes</th>
		<td>TRUE = All Public Attribute values of PLM Entities in the hierarchy 
		to be output<br />
		FALSE = Only the PLM_ExternalID or V_Name attribute value of PLM Entities in the hierarchy 
		to be output</td>
	</tr>
	<tr>
		<th>Attribute1*</th>
		<td>Attribute Name</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Attribute Value</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. </p>
<p>CAAFmiBrowsingFunctionalModel.3dxml is the 3D XML file contains the root Functional 
Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: sfct00000023</li>
	<li><code>Version</code>: A.1</li>
	<li>(<code>V_Name</code>: CAAFmiBrowsingFunctionalModel_RootRef)</li>
</ul>
<p><b>Attention</b>: This 3dxml have been created with OneClick and Unified Typing activated (default environment).</p>
<p><b>Attention</b>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiBrowsingFuncModelWithGenericAPI 
Code</h3>
<p>The CAAFmiBrowsingFuncModelWithGenericAPI use case is located in the CAAFmiBrowsingFuncModelWithGenericAPI.m 
module of the CAAFunctionalModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctionalModelerUseItf.edu\CAAFmiBrowsingFuncModelWithGenericAPI.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAFmiBrowsingFuncModelWithGenericAPI:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Functional Reference to Browse from Underlying 
		Database</a></li>
	<li><a href="#Step2">Browsing the Functional Reference with Generic APIs</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAFmiBrowsingFuncModelWithGenericAPI use case, to begin with, creates a 
PLM Session. Its defined by the repository to be connected to, server, user, password 
and a Security Context. The Security context primarily defines a role with which 
the user is logged into the current session. In the current Use Case, since it simply 
browses through a Functional Model hierarchy, it does not involve any modification 
of the PLM data. So a Reviewer role serves our purpose in this case. The article &quot;Connecting 
to V6 Server&quot; [<a href="#References">2</a>] delves further deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Functional Reference to Browse from Underlying 
Database</h3>
<p>To begin with, we retrieve from the underlying database, the Functional Reference 
for browse. The query to an underlying database for a PLM Component is built with 
primarily two inputs:</p>
<ul>
	<li>An IDSet attribute-value list.</li>
	<li>The PLMType of the PLM Component being queried.</li>
</ul>
<p>This part is explained in the referenced article [<a href="#References">6</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Browsing the Functional Reference with Generic APIs</h3>
<p>The process to browse a Functional Reference involves simply retrieving the Child 
Instances immediately under a Root Reference. We then retrieve the Reference associated 
with each direct Instance, and recursively browse down the Functional Model hierarchy.</p>
<pre class="code">HRESULT <strong>BrowseReference</strong>(<strong>CATIPLMNavReference</strong>* <strong>piNavRefOnFuncRef</strong>,CATBoolean iAllAtributes, int iDepth)
{
   ...	
   CATListPtrCATIPLMNavEntity ListChildInstance;
   <strong>CATPLMCoreType coreType =</strong> <strong>PLMCoreInstance</strong>;
   hr = piNavRefOnFuncRef<strong>-&gt;ListChildren(ListChildInstance,1, &amp;coreType);</strong>
   int j = 1;
   while (j&lt;=ListChildInstance.Size() &amp;&amp; (SUCCEEDED(hr)))
   {
      CATIPLMNavEntity_var spChildInst = ListChildInstance[j];
      ...	
      <strong>CATIPLMNavInstance</strong>* piNavInst = NULL;
<strong>      hr =</strong>spChildInst-&gt;QueryInterface(IID_CATIPLMNavInstance,(void **)&amp;piNavInst);<strong>
</strong>      ...					
      <strong>CATIPLMNavReference</strong> * piNavRefOnFuncRefOfChild= NULL;
      hr = piNavInst<strong>-&gt;GetReferenceInstanceOf(piNavRefOnFuncRefOfChild);</strong>
      ...	
      hr = <strong>BrowseReference</strong>(<strong>piNavRefOnFuncRefOfChild</strong>,iAllAtributes,iDepth+2);
...		
      j++;
...</pre>
<p>The <code>BrowseReference()</code> routine browses an input Functional Reference.</p>
<p>The <code>CATIPLMNavReference::ListChildren()</code> implementation on a Functional 
Reference, returns a list of direct children beneath it, based on an input filter 
defined by the PLMCore type. Here we have set the core type to PLMCoreInstance, 
to retrieve a list of Functional Instances directly beneath the invoking Functional 
Reference.</p>
<p>The direct Functional instance is retrieved as a <code>CATIPLMNavEntity</code> 
type. We then do a QueryInterface to retrieve the Functional instance as a <code>
CATIPLMNavInstance</code> type.</p>
<p>The <code>CATIPLMInstance::GetReferenceInstanceOf()</code> implementation on 
a Functional Instance returns its associated Reference.</p>
<p>We next have a recursive call to the <code>BrowseReference()</code> routine for 
the direct Functional Reference last retrieved.</p>
<pre class="code">...	
   CATListPtrCATIPLMNavEntity ListChildRepInstance;
   <strong>coreType = PLMCoreRepInstance;</strong>
   hr = <strong>piNavRefOnFuncRef-&gt;ListChildren(ListChildRepInstance,1, &amp;coreType);</strong>
   int k = 1;
   while (k&lt;=ListChildRepInstance.Size() &amp;&amp; (SUCCEEDED(hr)))
   {
      CATIPLMNavEntity_var spChildRepInst = ListChildRepInstance[k]; 
      ...					
      <strong>CATIPLMNavRepInstance</strong>* piNavRepInst = NULL;
      hr = spChildRepInst-&gt;QueryInterface(IID_CATIPLMNavRepInstance,(void **)&amp;piNavRepInst);<strong>
</strong>      if (SUCCEEDED(hr))
      {
         <strong>CATIPLMNavRepReference</strong>* pRepReferenceOfChild= NULL;
	hr = piNavRepInst<strong>-&gt;GetRepReferenceInstanceOf(pRepReferenceOfChild);</strong>
         ...			
	k++;
...</pre>
<p>As we said before the <code>CATIPLMNavReference::ListChildren()</code> call on 
a Functional Reference, returns us the direct children beneath it, filtered by the 
PLMCore type input. Here, the core type input is a <code>PLMCoreRepInstance</code>, 
to retrieve all direct Rep Instances beneath the Functional Reference. The Rep Instance 
is retrieved as a <code>CATIPLMNavEntity</code> type.</p>
<p>The <code>CATIPLMNavRepInstance::GetRepReferenceInstanceOf()</code> implementation 
on a Rep Inst, returns its associated Rep Reference, as a <em>CATIPLMNavRepReference</em> 
type.</p>
<p>The argument <code>iAllAttributes</code> to the <code>BrowseReference()</code> 
routine, if set to TRUE, outputs all public attributes of the PLM entities in the 
Functional model hierarchy. If FALSE, it displays only the PLM_ExternalID or V_Name attribute 
value of the entities in the hieararchy. The last argument iDepth represents the 
indent at which the PLM Entity attributes would be displayed in the output. We suitably 
indent the output, so that the UC output in console appears exactly similar to the 
Functional model hierarchy, as it appears in the spec tree.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiBrowsingFuncModelWithGenericAPI use case ends by simply closing the 
PLM session. [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case CAAFmiBrowsingFuncModelWithGenericAPI details the steps involved 
in the CAA Customization to browse through a Functional Model, using the Generic 
CAA APIs exposed by the CATPLMComponentInterfaces framework.</p>
<p>To begin with the Use Case builds up a database query with the attribute-value 
sets input by user and the usable type retrieved through other user inputs. The 
PLM Type is that provided as input by the user, as a <code>RFLPLMFunctionalReference</code>. 
The query when run on an underlying database, outputs a list of PLM Identificators. 
The Use Case loads the first entity in this list, in session which serves as our 
Functional Reference for browsing.</p>
<p>The Use Case illustrates the CATPLMComponentInterfaces framework capabilities 
listed below:</p>
<ul>
	<li><code>CATIPLMNavReference::ListChildren()</code> implementation on a Functional 
		Reference to list the child Instances and Rep Instances beneath it.</li>
	<li><code>CATIPLMNavInstance::GetReferenceInstanceOf()</code> implementation 
		on a Functional Instance to retrieve its associated Ref.</li>
	<li><code>CATIPLMNavRepInstance::GetRepReferenceInstanceOf()</code> implementation 
		on a Functional Rep Instance to retrieve its associated Rep Ref.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAFmiUcBrowsingFunctionalModel.htm">Browsing a Functional 
		Model</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
