<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Mux-Demux Usage</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Mux-Demux Usage</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This use case demonstrates the Usage of Multiplexer (Mux) Demultiplexer 
		(demux) reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiMuxDemuxReferenceUsage Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFmiMuxDemuxReferenceUsage 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiMuxDemuxReferenceUsage</a></li>
					<li><a href="#Where">Where to Find the CAAFmiMuxDemuxReferenceUsage 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The leanings from this Use Case are:</p>
<ul>
	<li>The necessity of Mux/demux Reference.</li>
	<li>The usage of Mux/Demux Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiMuxDemuxReferenceUsage Use Case</h2>
<p>CAAFmiMuxDemuxReferenceUsage is a use case of the CAAFunctModelerUseItf.edu framework 
that illustrates the CATFunctionalModelerUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiMuxDemuxReferenceUsage Do</h3>
<p>In this use case we are actually using Demux reference to demonstrate its use.</p>
<p><strong>/!\ The Multiplexer/Demultiplexer lose is interest since the existence of the 
Interfaces (Flow Exposition Instance: Port's evolution). Even when data (Flow Reference) 
is Structured, Interfaces allow to connect the sub-decomposition of the data.</strong></p>
<p>We have following three reference with port as per following description, The 
structured Flow Reference aggregating Flow of two Sub Flows (in this case Sub Flow 
1 and Sub Flow 2):</p>
<ol>
	<li>The Functional Reference 1 has one output port - Structured Flow.</li>
	<li>The Functional Reference 2 has one input port - Sub Flow 1.</li>
	<li>The Functional Reference 3 has one input port - Sub Flow 2.</li>
</ol>
<p>Now the problem is the Functional reference 1 port (output) transmits the Control/data 
for Reference 2 Port (Input) and Reference 3 Port (Input). To resolve this problem 
we need one entity which will Serve the both purpose.</p>
<ul>
	<li>Split the data required for two input ports.</li>
	<li>Maintain compatibility of the Flow.</li>
</ul>
<p>Here comes the solution - Demultiplexer.</p>
<p>So we introduced Demux reference. The Demux Reference has following Ports:</p>
<ul>
	<li>Input port Of Demux Reference (Structured Flow).</li>
	<li>Output port 1 Of Demux Reference (Sub Flow 1).</li>
	<li>Output port 2 Of Demux Reference (Sub Flow 2).</li>
</ul>
<p>And Problem we resolve by making connections between three references and Demux 
reference as per following:</p>
<ul>
	<li>Reference 1 Out Port -&gt; Input port Of Demux Reference (Structured Flow).</li>
	<li>Output port 1 Of Demux Reference -&gt; Reference 2 Input Port (Sub Flow 
		1).</li>
	<li>Output port 2 Of Demux Reference -&gt; Reference 3 Input Port (Sub Flow 
		2).</li>
</ul>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Demux Reference Usage</caption>
	<tr>
		<td>
		<img alt="Demux Reference Usage" src="images/CAAFmiMuxDemuxUsage_1.jpg"/></td>
	</tr>
</table>
<p>the above [<a href="#Fig1">Fig. 1</a>] shows the three references connected through 
Demultiplexer.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Demux Reference Usage Structure</caption>
	<tr>
		<td>
		<img alt="Demux Reference Usage Structure" src="images/CAAFmiMuxDemuxUsage_2.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig2">Fig. 2</a>] shows the structure of the Functional 
Reference model which is using Demux Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiMuxDemuxReferenceUsage</h3>
<p>To launch CAAFmiMuxDemuxReferenceUsage, you will need to set up the build time 
environment, then compile CAAFmiMuxDemuxReferenceUsage along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiMuxDemuxReferenceUsage Repository Server User Password 
SecurityCtx PLMType IDAttribute1 AttrValue1 [IDAttribute2 Value2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies/creates the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String representing PLM Type (Project)</td>
	</tr>
	<tr>
		<th>IDAttribute1*</th>
		<td>Identification attribute name for opening Root</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Identification attribute name value for opening Root</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set.</p>
<p>CAAFmiMuxDemuxUsage.3dxml this 3D XML file contains the root Functional 
Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiMuxDemuxReferenceUsage_RootRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiMuxDemuxReferenceUsage Code</h3>
<p>The CAAFmiMuxDemuxReferenceUsage use case is located in the
CAAFmiMuxDemuxReferenceUsage.m module of the CAAFunctModelerUseItf.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiMuxDemuxReferenceUsage.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several Functional steps in CAAFmiMuxDemuxReferenceUsage use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Instance and Ports From Input Structure</a></li>
	<li><a href="#Step2">Retrieving Direction and Flows of Ports</a></li>
	<li><a href="#Step3">Creating Connection to Structure Port under Demux Inst 
		with In Port</a></li>
	<li><a href="#Step4">Creating Connection to Sub Flow Port under Demux Inst with 
		Out Ports</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A PLM session 
is an environment essential for running a CAA use case. The article [<a href="#References">1</a>] 
delves further into the process of building and launching a CAA use case.</p>
<p>Please note that we need to Set current Environment since in object creation 
by default API takes current environment as input. In further connection creation 
the connection object gets created based on these inputs.</p>
<p>Here we open in Authoring mode [<a href="#References">3</a>] the Functional structure 
input provided by the use case. This input model contains instances with ports and 
Demux instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Instance and Ports From Input Structure</h3>
<p>In this step we retrieve ten objects from the input Functional structure. The 
objects retrieved are as follows:</p>
<ul>
	<li>4 instances:
		<ul>
			<li>Instance 1: piFuncInstanceOnFirstInst</li>
			<li>Instance 2: piFuncInstanceOnSecondInst</li>
			<li>Instance 3: piFuncInstanceOnThirdInst</li>
			<li>Instance 4: piFuncInstanceOnDemuxInst</li>
		</ul>
	</li>
	<li>6 Ports:
		<ul>
			<li>Port 1: piFuncPortOnPortUnderFirstChildInst</li>
			<li>Port 2: piFuncPortOnPortUnderSecondChildInst</li>
			<li>Port 3: piFuncPortOnPortUnderThirdChildInst</li>
			<li>Port 4: piFuncPortOnStructurePortUnderDemuxInst</li>
			<li>Port 5: piFuncPortOnSubFlow1PortUnderDemuxInst</li>
			<li>Port 6: piFuncPortOnSubFlow2PortUnderDemuxInst</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving Direction and Flows of Ports</h3>
<p>The retrieval of the Direction and Flow is necessary to match the appropriate 
ports, since the Demux instance/ connection respect the convention rule of the Flow 
and direction.</p>
<p>In next steps according to the Port Direction and Flow we could proceed for the 
connection as per the case.</p>
<p>Now use case finds direction of each instance port. The directions could be In/Out 
in this case as per our specific input structure.</p>
<pre class="code">...    
    CATIFctPort::PortDirection PortDir1;
    hr = piFuncPortOnPortUnderFirstChildInst-&gt;<strong>GetDirection</strong>(PortDir1);
...</pre>
<p>A call to <code>CATIFctPort::GetDirection</code> retrieves port direction
<code>PortDir1</code>.</p>
<p>Next the use case retrieves Flow of each Instance port and the Demux port. The 
return object is <em>CATIFctFlowReference</em> type.</p>
<pre class="code">...    
    CATIFctFlowReference * piFuncFlowRefOnFlowofPortUnderFirstChildInst = NULL;
    hr = piFuncPortOnPortUnderFirstChildInst-&gt;<strong>GetFlow</strong>(piFuncFlowRefOnFlowofPortUnderFirstChildInst);
...</pre>
<p>A call to <code>CATIFctPort::GetFlow</code> returns the Flow of the Port (<code>piFuncFlowRefOnFlowofPortUnderFirstChildInst
</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating Connection to Structure Port under Demux Inst with 
In Port</h3>
<p>Now use case creates a connection between Structure port of the Demux and the 
In port. Following code snippet showing one example case in which First Child instance 
has Out port as consideration, the other cases we could see in detail in source 
code.</p>
<pre class="code">...    
	CATListValCATICkeParm_var iLFctAttributesValues;
	CATIFctConnection *opiFuncConnection = NULL;    
	...
	hr =piFuncInstanceOnDemuxInst-&gt;<strong>Connect</strong>(piFuncPortOnStructurePortUnderDemuxInst,
					piFuncInstanceOnFirstInst, 
					piFuncPortOnPortUnderFirstChildInst,
					NULL_var,
					NULL, 
					iLFctAttributesValues, 
					opiFuncConnection);
...</pre>
<p>A call to <code>CATIFctInstance::Connect</code> creates connection between the 
Structured Flow port (<code>piFuncPortOnStructurePortUnderDemuxInst</code>) of the 
Demux instance and the In instance port (<code>piFuncPortOnPortUnderFirstChildInst</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating Connection to Sub Flow Port under Demux Inst with 
Out Ports</h3>
<p>Now use case creates a connection between sub Flow port of the Demux instance 
and the Out Instance port. In this article section we are showing as one case code 
as an example. The details about other cases we can see in the source code.</p>
<pre class="code">...
       CATIFctConnection *opiFuncConnection2 = NULL;
       ...    
       hr = piFuncInstanceOnFirstInst-&gt;<strong>Connect</strong>(piFuncPortOnPortUnderFirstChildInst,
					piFuncInstanceOnDemuxInst, 
					piFuncPortOnSubFlow1PortUnderDemuxInst,
					NULL_var,
					NULL, 
					iLFctAttributesValues, 
					opiFuncConnection2);
...</pre>
<p>A call to <code>CATIFctInstance::Connect</code> creates connection between the 
Sub Flow port (<code>piFuncPortOnSubFlow1PortUnderDemuxInst</code>) of the Demux 
instance and the Out instance port (<code>piFuncPortOnPortUnderFirstChildInst</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAALmiMuxDemuxReferenceUsage use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In this use case we are showing the usage of the Demux reference. In this we 
are showing how the one reference port Control/Data converted suitable for the Other 
two reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
