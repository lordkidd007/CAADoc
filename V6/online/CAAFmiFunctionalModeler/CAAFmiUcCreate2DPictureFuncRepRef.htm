<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Functional 2D Picture Representation Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Functional 2D Picture Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAFmiCreate2DPictureFuncRepRef use case. 
		The objective of the UC is to illustrate the creation of a Functional 2D 
		picture Representation Reference. It further opens the Functional Reference 
		and aggregates the newly created Functional 2D Picture Rep Ref under it.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiCreate2DPictureFuncRepRef Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFmiCreate2DPictureFuncRepRef 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiCreate2DPictureFuncRepRef</a></li>
					<li><a href="#Where">Where to Find the CAAFmiCreate2DPictureFuncRepRef 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>You will learn how to:</p>
<ul>
	<li>Create a Functional 2D picture Representation Reference.</li>
	<li>Aggregate the newly created Functional 2D Picture Rep Ref under the loaded 
		Functional Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiCreate2DPictureFuncRepRef Case</h2>
<p>CAAFmiCreate2DPictureFuncRepRef is a use case of the CAAFunctionalModelerUseItf.edu 
framework that illustrates the CATFunctionalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiCreate2DPictureFuncRepRef Do</h3>
<p>The use case illustrates the creation of a Functional 2D picture Representation 
Reference. It further opens the Functional reference and then aggregates the newly 
created Functional 2D Picture Rep Ref under the loaded Functional reference.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Functional Reference Aggregating a Functional 
	2D Picture Rep Ref</caption>
	<tr>
		<td>
		<img alt="Functional Reference" src="images/CAAFmiCreate2DPictureFuncRepRef_1.jpg"/></td>
	</tr>
</table>
<p><a href="#Fig1">Fig. 1</a> above shows a Functional Reference(<strong>CAAFmiCreate2DPictureFuncRepRef_InputRef</strong>) 
aggregating a Functional 2d Picture Rep Instance(<strong>Bluehills.1</strong>) under 
it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiCreate2DPictureFuncRepRef</h3>
<p>To launch CAAFmiCreate2DPictureFuncRepRef, you will need to set up the build 
time environment, then compile CAAFmiCreate2DPictureFuncRepRef along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiCreate2DPictureFuncRepRef Repository Server User 
Password SecurityCtx PLMType iPicturePath IDAttribute1 AttrValue1 [IDAttribute2 
Value2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role. Organization. Project). 
		Choose Role as Designer (as the use case does modify the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The PLM Type defined by the RFLPLMFunctional Modeler</td>
	</tr>
	<tr>
		<th>iPicturePath</th>
		<td>A path corresponding to a picture file</td>
	</tr>
	<tr>
		<th>IDAttribute1*</th>
		<td>Identification attribute name for opening Root</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Identification attribute name value for opening Root</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set.</p>
<p>You can directly execute this use case if you know how to locate your own component. 
If not, you can import a 3D XML file supplied in the CAAFunctModelerUseItf.edu framework 
.The input Functional model is retrieved by importing CAAFmiCreate2DPictureFuncRepRef.3dxml 
file from the CAAFunctionalModelerUseItf.edu fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\InputData\CAAFmiCreate2DPictureFuncRepRef.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Functional Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiCreate2DPictureFuncRepRef_InputRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><b>Attention</b>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiCreate2DPictureFuncRepRef Code</h3>
<p>The CAAFmiCreate2DPictureFuncRepRef use case is located in the CAAFmiCreate2DPictureFuncRepRef.m 
module of the CAAFunctModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreate2DPictureFuncRepRef.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAFmiCreate2DPictureFuncRepRef:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Creating Functional 2D Picture Representation Reference</a></li>
	<li><a href="#Step2">Opening the Functional Reference</a></li>
	<li><a href="#Step3">Aggregating the Newly Created Functional 2D Picture Rep 
		Ref under the Loaded Functional Reference</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAFmiCreate2DPictureFuncRepRef use case, to begin with, creates a PLM Session. 
Its defined by the repository to be connected to, server, user, password and a Security 
Context. The Security context primarily defines a role with which the user is logged 
into the current session. In the current Use Case, since it involve the modification 
of the PLM data, So a Designer role serves our purpose in this case. The article &quot;Connecting 
to V6 Server&quot; [<a href="#References">2</a>] delves further deeper into this 
subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating Functional 2D Picture Representation Reference</h3>
<p>To create the Functional 2D Picture Rep Ref, we require a factory object.</p>
<p>In this step, we begin with retrieving a pointer on the factory to create the 
Functional representation reference. The factory interface pointer retrieved here 
is <em>CATIFctRepresentationReferenceFactory</em> type.</p>
<pre class="code">...
	<strong>CATIFctRepresentationReferenceFactory</strong> *piFuncRepRefFactory = NULL; 
	hr = <strong>CATFctFactoriesProvider::GetRepresentationReferenceFactory</strong>(piFuncRepRefFactory);
...</pre>
<p>The retrieved factory interface pointer is then used to create the Functional 
2D Picture Functional Rep Ref.</p>
<pre class="code">...
    <strong>CATIFct2DPictureRepReference</strong> *opiFunc2DPictureRepRef=NULL;
    CATUnicodeString iPicturePath(iArgv[7]);
	
    CATListValCATICkeParm_var iUselesslist;
    hr= piFuncRepRefFactory-&gt;<strong>CreateWith2DPicture</strong>(NULL_var,
					NULL, 
					iUselesslist,
					iPicturePath,
					opiFunc2DPictureRepRef);
...</pre>
<p>The method <code>CATIFctRepresentationReferenceFactory::CreateWith2DPicture</code> 
is used with the following input arguments:</p>
<ul>
	<li>NULL_var, a <em>CATIType_var</em> type. The type of the 2D Picture Representation 
		Reference to create. If this argument is a NULL pointer, the modeler type 
		RFLPLMFunctionalRepReference will be used by default for creation.</li>
	<li>NULL is a <em>CATIAdpEnvironment</em> pointer and we are providing it as 
		NULL this means API will take current set Environment as an input.</li>
	<li>UselessList is a none used input argument.</li>
	<li>iPicturePath, a CATUnicodeString type, A path corresponding to a picture 
		file.</li>
	<li>opiFunc2DPictureRepRef,<em>a CATIFct2DPictureRepReference</em> type, an 
		output argument which contains pointer on the created Functional 2D Picture 
		Rep Ref.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the Functional Reference</h3>
<p>Opening the Functional Reference fundamentally involves:</p>
<ul>
	<li>Retrieve the Functional Reference to be opened, from an underlying database.</li>
	<li>Open the Functional Reference in session.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Retrieving the Functional Reference to Be Opened, from 
an Underlying Database</h4>
<p>To begin with, we retrieve from the underlying database, the Functional Reference 
to be opened.</p>
<p>This step can be divided into the following three sub-steps:</p>
<ol>
	<li>Build an Identification Attribute-Value set</li>
	<li>Run Query and retrieve the Identificator of the Functional Reference from 
		the underlying database</li>
</ol>
<p>The implementation details of Retrieving the Identificator of the PLM Object 
providing its Attribute Set and PLM Type as an input, is described in the article 
[<a href="#References">3</a>].</p>
<p>The Functional reference identificator (retrieved in this section) is further 
used to open the Functional reference [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Opening the Functional Reference in Session</h4>
<p>Here we will open the Functional reference using the identificator (retrieved 
just above).</p>
<pre class="code">
...
    CATIAdpPLMIdentificator* opiAdpIdentifierOnRootFuncRef= NULL;
    ...
    <strong>CATOmbLifeCycleRootsBag</strong> Bag_OpenedFuncRef;
    <strong>CATAdpOpener</strong> opener(Bag_OpenedFuncRef);
    <strong>CATIFctReference</strong> *piFuncRefOnComp= NULL;
    hr= opener.<strong>CompleteAndOpen</strong>(opiAdpIdentifierOnRootFuncRef,IID_CATIFctReference, (void**) &amp;piFuncRefOnComp);
...</pre>
<p>The Functional reference opened in this step is further used to aggregate the 
newly created Functional 2D Picture Rep Ref under it, whose implementation details 
are given in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Aggregating the Newly Created Functional 2D Picture Rep 
Ref under the Loaded Functional Reference</h3>
<p>In this step, we will aggregate the newly created Functional 2D Picture Rep Ref 
under the loaded Functional Reference. For this, we will first retrieve the
<em>CATIFct2DPictures</em> interface pointer on the Functional reference (opened in the 
previous step).</p>
<pre class="code">
...
    <strong>CATIFct2DPictures</strong> *ipFct2DPicturesOnLglRef=NULL;
    hr= piFuncRefOnComp-&gt;QueryInterface(IID_CATIFct2DPictures, (void **)&amp;ipFct2DPicturesOnLglRef);
    ...
    hr= ipFct2DPicturesOnLglRef-&gt;<strong>Associate2DPicture</strong>(opiFunc2DPictureRepRef);
...
</pre>
<p>Next, we make a call to the method <code>CATIFct2DPictures::Associate2DPicture</code> 
providing, the newly created Functional 2D Picture rep ref as an input. This will 
aggregate the newly created Functional 2D Picture Rep Ref under the loaded Functional 
Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiCreate2DPictureFuncRepRef use case ends by simply closing the PLM session 
[<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case basically illustrates the creation of a Functional 2D picture Representation 
Reference. It further opens the Functional Reference and aggregates the newly created 
Functional 2D Picture Rep Ref under it.</p>
<p>It also demonstrates the usage of the Functional APIs in the steps involved to 
create a new Functional 2D Picture Rep Ref and to aggregate it under the loaded 
Functional Reference. These are:</p>
<ul>
	<li><code>CATIFctRepresentationReferenceFactory::CreateWith2DPicture</code> 
		to create a Functional 2D Picture Rep Ref.</li>
	<li><code>CATIFct2DPictures::Associate2DPicture</code> to aggregate the Functional 
		2D Picture rep ref under the Functional reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
	</tr>
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
