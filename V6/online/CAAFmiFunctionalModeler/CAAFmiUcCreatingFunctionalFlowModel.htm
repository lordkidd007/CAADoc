<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Functional Flow Model</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>



</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating Functional Flow Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This use cases creates a (simple) Functional Flow Structure with Functional Flow references, Functional Flow instances and Flow Exposition Instances.
		<ul>
		<li><a href="#Learn">What You Will Learn With This Use Case</a>
        <li><a href="#UseCase">The CAAFmiCreatingFunctionalFlowModelUse Case</a>
          <ul>
            <li><a href="#What">What does the CAAFmiCreatingFunctionalFlowModel do</a></li>
            <li><a href="#How">How to launch CAAFmiCreatingFunctionalFlowModel</a></li>
            <li><a href="#Where">Where to find the </a><a href="#Where">
			CAAFmiCreatingFunctionalFlowModel</a><a href="#Where">code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The learnings from this Use Case are:</p>
<ul>
	<li>Creation of Functional Reference </li>
	<li>Creation of Functional Flow Reference </li>
	<li>Instantiating Functional Flow Reference, under Functional Reference. 
	(The Functional Flow Exposition instance commonly known as the Functional Interface: Ports evolution)</li>
	<li>Instantiating Functional Flow Reference, under another Functional Flow Reference. 
	(The Functional Flow instance commonly known as Sub Functional Flow))</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAAFmiCreatingFunctionalFlowModelUse Case</h2>
<p> <code>CAAFmiCreatingFunctionalFlowModel </code>is a use case of the <code>
CAAFunctModelerUseItf.edu</code>
framework that illustrates the <code>CATFunctionalModelerUseItf</code>&nbsp; 
frameworks&nbsp; capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAFmiCreatingFunctionalFlowModel Do</h3>
<p>This Use case simply creates a Functional Flow structure. Functional Flows
 are the types of the interfaces (Flow Exposition Instance or Ports). 
Functional Flows defines the signal that can be emitted or received by a Functional Interface. </p>
<p>Initially the use case creates a root Functional Reference and two Functional Flow reference.
<p>Further to this, the first Functional Flow reference is instantiated under Root Functional Reference
 (This Functional Flow Exposition instance known as Interface).&nbsp;&nbsp; </p>
<p>And finally, the second Functional Flow reference is instantiated under the first Functional 
Flow Reference (This Functional Flow instance known as Sub Flow).&nbsp;&nbsp; </p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.1"></a>Fig.1 Functional Flow Structure</caption>
	<tr>
		<td style="width: 62px">
		<img alt="" src="images/CAAFmiUcCreatingFunctionalFlowModel_FunctionalFlowModel.jpg"></td>
	</tr>
</table>
<p>The above [<a href="#Fig.1">Fig.1</a>] shows the Functional Flow 
structure. The created objects in above structure are as follows</p>
<ul>
	<li>Functional Root Reference (Root Object)</li>
	<li>Flow Exposition Instance (Functional Flow Exposition instance known as Interface)</li>
	<li>First Functional Flow Reference</li>
	<li>Flow Instance (Functional Flow instance known as Sub Flow)</li>
	<li>Second Functional Flow Reference</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAAFmiCreatingFunctionalFlowModel</h3>
<p>To launch <code>CAAFmiCreatingFunctionalFlowModel</code>, you will need to set up the build time
environment, then compile <code>CAAFmiCreatingFunctionalFlowModel<b> </b></code>along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p> <a><code>mkrun -c &quot; CAAFmiCreatingFunctionalFlowModel Repository Server User 
Password SecurityCtx<b>&quot;</b></code></a> </p>
<p>where:</p>


<table class="border1"  id="table13" style="border-style: solid" >
  <tr>		
  	<th> <b>Repository</b> </th>
			<td><script type="text/javascript">insertRepository();</script> </td>
		</tr>
		<tr>
			<th> <b> Server</b> </th>
			<td>The name and port of the server as <i>name</i>:<i>port_number/RootURI</i></td>
		</tr>
		<tr>
			<th> <b> User</b> </th>
			<td>The user name</td>
		</tr>
		<tr>
			<th> <b> Password</b> </th>
			<td>The user password to authenticate the user</td>
		</tr>
		<tr>
			<th> <b>SecurityCtx</b> </th>
			<td>a string
              representing the security context ( Role. Organization. Project&nbsp;
              )<o:p>. Choose Role as Designer ( as the use case modifies/creates the PLM Data)</o:p>
              </td>
		</tr>
		
	
		</table>




<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAAFmiCreatingFunctionalFlowModel
Code</h3>
<p>The <a><code>CAAFmiCreatingFunctionalFlowModel</code></a> use case is located in the
<a><code>CAAFmiCreatingFunctionalFlowModel.m</code></a> module of the <a><code>CAAFunctModelerUseItf.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreatingFunctionalFlowModel.m</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</code></a> [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
   <p>There are several Functional steps in CAAFmiCreatingFunctionalFlowModel use case.</p>
   <ol>
     <li><a href="#Prolog">Prolog</a> </li>
     <li><a href="#Create">Create a Functional Flow Structure</a><ul>
		<li><a href="#Retrieves a Reference Factory">Retrieves a Reference Factory</a></li>
		<li><a href="#Creates a Functional Reference (Root)">Creates a Functional Reference (Root)</a></li>
		<li><a href="#Creates the first Functional Flow Reference">Creates the first Functional Flow Reference</a></li>
		<li><a href="#Creates the second Functional Flow Reference">Creates the second Functional Flow Reference</a></li>
		<li><a href="#Instantiates the first Functional Flow Reference under Root Reference">
			Instantiates the first Functional Flow Reference under Root Reference</a></li>
		<li><a href="#Instantiates the second Functional Flow Reference as Sub Flow under the first Functional Flow Reference">
			Instantiates the second Functional Flow Reference as Sub Flow under the first Functional Flow Reference</a></li>
		</ul>
     <li>
     <a href="#Epilog">
		Epilog</a></li>
		
   </ol>
   <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->
   
   <h3><a name="Prolog"></a> Prolog</h3>
   <p>It begins with a check to ensure bare minimum number of arguments are 
	input for use case execution. This includes in the order listed below:</p>
   <ul>
   <li>five arguments(Repository, Server-Port, user , password, Security Context) 
	essential for creating a V6 session.</li>
   </ul>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>] delves further into the process of building and launching a CAA use case.</p>
   <script type="text/javascript">insertLinkToTop();</script>

   <h3><a name="Create"></a>Create a Functional Flow Structure </h3>
   <p>Creating a Functional Structure, fundamentally involves&nbsp; </p>
<ul>

	<li>Creating a Root Functional Reference </li>
	<li>Creating two Functional Flow Reference </li>
	<li>Instantiating the first Functional Flow Reference, under the root 
	Functional Reference, implying creating a Functional Flow Exposition instance 
	(Functional Interface - It is Ports evolution)</li>
	<li>Instantiating the second Functional Flow Reference, under the first
	Functional Flow Reference. Implying creating a Functional Flow Instance (Sub Flow)</li>
</ul>

	
  <script type="text/javascript">insertLinkToTop();</script>
  
   <h4><a name="Retrieves a Reference Factory"></a>Retrieves a Reference Factory</h4>
  
       <pre class="code">...
   <strong>CATIFctReferenceFactory</strong>* piFctReferenceFactory=NULL;
   hr = <strong>CATFctFactoriesProvider::GetReferenceFactory</strong>(piFctReferenceFactory);
...</pre>
      
   <p>From a call to <code>GetReferenceFactory</code>&nbsp; of <em>CATFctFactoriesProvider</em>
	we retrieve the factory pointer <code>piFctReferenceFactory</code> of type <em>CATIFctReferenceFactory</em>. </p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates a Functional Reference (Root)"></a>Creates a Functional Reference (Root)</h4>
  
       <pre class="code">...
    <strong>CATIFctReference</strong>* piRootFunctionalRef  = NULL;
    CATLISTV(CATICkeParm_var) UselessList ;
    CATIType_var spType ;
    hr = piFctReferenceFactory->CreateReference(spType, 
                                                NULL, 
                                                UselessList, 
                                                piRootFunctionalRef);
...</pre>
   
   <p>The method <code>CreateReference </code> of <em>CATIFctReferenceFactory</em> creates 
	a Functional Reference.&nbsp; The type of the Functional Reference to create, 
	is internally computed by this API so here we pass <em>CATIType</em> as NULL_var. 
	A significant point to note here is that the environment is input to this 
	API and in this case we are passing it as NULL, so API takes current Environment as input. The list of attribute-value is 
	empty since values get valuated as per business Logic. The 
	reference is returned as a <em>CATIFctReference</em> type we call it as 
	Root.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates the first Functional Flow Reference"></a>Creates the first Functional Flow Reference</h4>
  
       <pre class="code">...
    CATICkeParmFactory_var spParmFactory = CATCkeGlobalFunctions::GetVolatileFactory();
    CATIParmDictionary_var spParmDico = CATCkeGlobalFunctions::GetParmDictionary();
    CATLISTV(CATICkeParm_var) iListOfFlowRefAttr;
    CATICkeParm_var spFlowRefPara = spParmFactory->CreateEnumere (spParmDico->GetEnumType(),"V_Category","Data");
    iListOfFlowRefAttr.Append(spFlowRefPara);

    <strong>CATIFctFlowReference</strong>* piFirstFunctionalFlowRef  = NULL;
    hr = piFctReferenceFactory-&gt;<strong>CreateFlowReference</strong>( spType, 
				 	NULL,
					iListOfFlowRefAttr,
					piFirstFunctionalFlowRef);
...</pre>
   
   <p>The method <code>CreateFlowReference </code> of <em>CATIFctReferenceFactory</em> creates 
	a Functional Flow reference.&nbsp; The type of the Functional Flow 
	Reference to create, is internally computed by this API so here we pass <em>CATIType</em> as NULL_var. 
	A significant point to note here is that the environment is input to this 
	API and in this case we are passing it as NULL, so API takes current Environment as input. The list of attribute-value is 
	empty since values get valuated as per business Logic. The 
	reference is returned as a <em>CATIFctFlowReference</em> type we call it as 
	Root.</p>
   <script type="text/javascript">insertLinkToTop();</script>
   
   <h4><a name="Creates the second Functional Flow Reference"></a>Creates the second Functional Flow Reference </h4>
<pre class="code">
...
    CATIFctFlowReference* piSecondFunctionalFlowRef = NULL;
    hr = piFctReferenceFactory-&gt;<strong>CreateFlowReference</strong>(spType, 
						NULL,
						iListOfFlowRefAttr,
						piSecondFunctionalFlowRef );
...</pre>
   <p>The creation of the second Functional Flow Reference is exactly similar as the first 
	Functional Flow Reference [<a href="#Creates the first Functional Flow Reference">#</a>].</p>
	<script type="text/javascript">insertLinkToTop();</script>
	
	<h4><a name="Instantiates the first Functional Flow Reference under Root Reference">
	</a>Instantiates the first Functional Flow Reference under Root Reference</h4>
    <p>We now instantiate the first Functional Flow Reference under the Root Reference.</p>
   
   
     <pre class="code">...
    CATLISTV(CATICkeParm_var) iListOfExpoInstAttr;
    CATICkeParm_var spInDirectionPara = spParmFactory->CreateEnumere (spParmDico->GetEnumType(), "V_Direction", CATFctDirection::In);
    iListOfInstAttr.Append(spInDirectionPara);
    const CATUnicodeString iInstIdentifier = "New_ExpoFlow";
    
    CATIFctFlowExpositionInstances * piFctFlowExpoInstancesOnRootFunctRef = NULL;
    hr = piRootFunctionalRef->QueryInterface(IID_CATIFctFlowExpositionInstances,(void **)&piFctFlowExpoInstancesOnRootFunctRef);
    ...
    
    <strong>CATIFctFlowExpositionInstance</strong> * piFunctionalFlowExpoInstanceUnderRootRef = NULL;
    hr = piFctFlowExpoInstancesOnRootFunctRef-&gt;<strong>Add</strong>( piFirstFunctionalFlowRef,
						  iInstIdentifier,
						  iListOfExpoInstAttr,
						  piFunctionalFlowExpoInstanceUnderRootRef);
...</pre>

  <p>A call to <code>Add</code> of <em>CATIFctFlowExpositionInstances</em> implementation on a 
	Functional Reference, instantiates a Functional Flow Reference under it. 
	The new child instance is retrieved as a <em>CATIFctFlowExpositionInstance</em> type. </p>
    <script type="text/javascript">insertLinkToTop();</script>

	<h4><a name="Instantiates the second Functional Flow Reference as Sub Flow under the first Functional Flow Reference">
	</a>Instantiates the second Functional Flow Reference as Sub Flow under the first Functional Flow Reference</h4>
	<p>We now instantiate the second Functional Flow Reference under the first one.</p>
   

    <pre class="code">...
    CATLISTV(CATICkeParm_var) iListOfInstAttr;
    CATICkeParm_var spInstPara = spParmFactory->CreateString("V_Identifier", "New_SubFlow");
    iListOfInstAttr.Append(spInstPara);
    
    <strong>CATIFctFlowInstance</strong> * piFunctionalInstanceOfsecondFlowRef = NULL;
    hr = piFirstFunctionalFlowRef-&gt;<strong>AddSubFlow</strong>( piSecondFunctionalFlowRef,
					  iListOfInstAttr,
					  piFunctionalInstanceOfsecondFlowRef);
...</pre>
  <p>A call to <code>AddSubFlow</code> of <em>CATIFctFlowReference</em> implementation on a 
	Functional Flow Reference, instantiates another Functional Flow Reference under it as Sub 
	Flow. The new child instance 
	is retrieved as a <em>CATIFctFlowInstance</em> type. </p>
    <script type="text/javascript">insertLinkToTop();</script>
   <!---------------------------------comment------------------------------------->

	 <h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAFmiCreatingFunctionalFlowModel</code> use case ends by simply closing the PLM
session. Since all use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>

	
   <script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case mainly creates Functional Flow structure. This structure 
contains Root Functional Reference which aggregates a Flow reference which itself aggregates Sub Flow beneath it. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="References"></a>References</h2>
   <table >
   <tr>
       <td valign="top" height="12">[1]</td>
       <td height="12"><a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a></td>
   </tr>
   
   <tr>
       <td valign="top" height="12">[2]</td>
       <td height="12"><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
      
    </tr>

   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Jun 2014]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


