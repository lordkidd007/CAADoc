<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Functional Representation Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Functional Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This use case illustrates the end user how to create the Functional Representation 
		Reference(Rep Ref) for non-CATIA contents (e.g xls, doc, txt, xml, pdf, 
		etc).</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiCreatingFuncRepRefWithNONCatiaCnts 
				Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFmiCreatingFuncRepRefWithNONCatiaCnts 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiCreatingFuncRepRefWithNONCatiaCnts</a></li>
					<li><a href="#Where">Where to Find the CAAFmiCreatingFuncRepRefWithNONCatiaCnts 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learning from this Use Case are:</p>
<ul>
	<li>The CATFunctionalModelerUseItf framework CAA Exposition to create the Functional 
		Rep Ref (for non-Catia contents):
		<ul>
			<li><code>CATIFctRepresentations::AddWithNonCATIAContent</code> to create 
				the Mono-instantiable Functional Rep Ref.</li>
			<li><code>CATIFctRepresentationReferenceFactory::CreateNonCATIAContentRepReference</code> 
				to create the Multi-instantiable Functional Rep Ref.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiCreatingFuncRepRefWithNONCatiaCnts Use Case</h2>
<p>CAAFmiCreatingFuncRepRefWithNONCatiaCnts is a use case of the CAAFunctModelerUseItf.edu 
framework that illustrates the CATFunctionalModelerUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiCreatingFuncRepRefWithNONCatiaCnts Do</h3>
<p>This use case illustrates how to create the Functional Rep Ref for non-CATIA 
contents (e.g xls, doc, txt, xml, pdf, etc). </p>
<p>In the current UC, we have opened the Functional Reference [<a href="#Fig1">Fig. 
1</a>].</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Functional Reference</caption>
	<tr>
		<td>
		<img alt="Input Functional Reference" src="images/CAAFmiCreatingFuncRepRefWithNONCatiaCnts_1.jpg"/></td>
	</tr>
</table>
<p>Just after opening the functional reference, we creates the mono-instantiable 
Functional Rep Ref and a multi-instantiable Functional Rep Ref and then instantiates 
it under the opened functional reference.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Functional Reference Aggregating Functional 
	Rep Ref</caption>
	<tr>
		<td>
		<img alt="Functional Reference" src="images/CAAFmiCreatingFuncRepRefWithNONCatiaCnts_2.jpg"/></td>
	</tr>
</table>
<p><a href="#Fig2">Fig. 2</a> above shows a root Functional Reference <code>CAAFmiCreateFuncModel_RootRef---</code>.</p>
<p>The Root aggregates a mono-instantiable Functional Rep Ref <code>Functional Representation 1</code> 
beneath it.</p>
<p>The Root also aggregates a multi-instantiable Functional Rep Ref <code>Functional Representation 2</code> 
beneath it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiCreatingFuncRepRefWithNONCatiaCnts</h3>
<p>To launch CAAFmiCreatingFuncRepRefWithNONCatiaCnts, you will need to set up the 
build time environment, then compile CAAFmiCreatingFuncRepRefWithNONCatiaCnts along 
with its prerequisites, set up the run time environment, and then execute the use 
case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiCreatingFuncRepRefWithNONCatiaCnts Repository Server 
User Password SecurityCtx DocumentPath_RepRef PLMType IDAttributeName1_Ref value1_Ref 
[IDAttribute2 Value2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case does modifies the PLM Data).</td>
	</tr>
	<tr>
		<th>DocumentPath_RepRef</th>
		<td>The file path of the non CATIA document (including its extension) ,to 
		associate with Functional Rep Ref</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLMType for the Functional Reference</td>
	</tr>
	<tr>
		<th>IDSetAttribute1*</th>
		<td>First Identification Set(IDSet) attribute for the Functional Reference 
		to be opened</td>
	</tr>
	<tr>
		<th>IDSetAttributeValue1*</th>
		<td>First IDSet attribute value for the Functional Reference to be opened</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the PLM type of the Functional Reference to be opened.</p>
<p><code>CAAFmiCreatingFuncRepRefWithNonCatiaCnts.3dxml</code> is the 3D XML file 
contains the root Functional Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiCreatingFuncRepRefWithNonCatiaCnts_RefForInputRepRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiCreatingFuncRepRefWithNONCatiaCnts 
Code</h3>
<p>The CAAFmiCreatingFuncRepRefWithNONCatiaCnts use case is located in the CAAFmiCreatingFuncRepRefWithNONCatiaCnts.m 
module of the CAAFunctModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreatingFuncRepRefWithNONCatiaCnts.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAFmiBrowsingFuncModelWithGenericAPI:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Functional Reference from Underlying Database</a></li>
	<li><a href="#Step2">Creating the Mono-Instantiable Functional Rep Ref (with 
		Non-CATIA Contents)</a></li>
	<li><a href="#Step3">Creating the Multi-Instantiable Functional Rep Ref (with 
		Non-CATIA Contents)</a></li>
	<li><a href="#Step4">Aggregating the Newly Created Multi-Instantiable Functional 
		Rep Ref under the Opened Functional Reference </a></li>
	<li><a href="#Epilog">Epilog</a> </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAAFmiBrowsingFuncModelWithGenericAPI<b> </b></code>use case, to begin 
with, creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply browses through a Functional Model hierarchy, it does not 
involve any modification of the PLM data. So a Reviewer role serves our purpose 
in this case. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
[2] delves further deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Functional Reference from Underlying Database</h3>
<p>To begin with, we retrieve from the underlying database, the Functional Reference 
for browse. The query to an underlying database for a PLM Component is built with 
primarily two inputs</p>
<ul>
	<li>An IDSet attribute-value list.</li>
	<li>The PLMType of the PLM Component being queried.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Mono-Instantiable Functional Rep Ref (with 
Non-CATIA Contents)</h3>
<p>Here we creates a mono-instantiable Functional Rep Ref with an associated non-Catia 
stream (given the path of a document) that will be aggregated by the opened Functional 
Reference. Main supported non CATIA documents are the following ones: xls, doc, 
txt, xml, pdf, jpg etc.</p>
<pre class="code">...
         CATUnicodeString iDocumentPath(iArgv[6]);
	...
	<strong>CATIFctRepresentations</strong> *piFuncRepsOnInputFunctRef=NULL;
	hr= piFunctRef-&gt;QueryInterface(IID_CATIFctRepresentations, (void**) &amp;piFuncRepsOnInputFunctRef);

	if (FAILED(hr) || (NULL==piFuncRepsOnInputFunctRef)) return 1;

	CATIFctRepresentationReference *opiMonoInstFunctRepRef=NULL;
	CATLISTV(CATICkeParm_var) UselessList;
	hr= piFuncRepsOnInputFunctRef-&gt;<strong>AddWithNonCATIAContent</strong>(NULL_var, NULL ,UselessList,
							iDocumentPath, opiMonoInstFunctRepRef);
...</pre>
<p>The method <code>CATIFctRepresentations::AddWithNonCATIAContent</code> creates 
a mono-instantiable Functional Rep Ref with an associated non-CATIA stream. The 
list of attribute-value is empty since values get valuated as per business Logic. 
In this case we are passing <em>CATIAdpEnvironment</em>* as NULL, so that it takes 
as the current Environment as input. The type of the Functional Rep Reference to 
create, is internally computed by this API so here we pass <em>CATIType</em> as 
NULL_var. The file path of the non CATIA document (including its extension) is also 
an input to the API (<code>iDocumentPath</code>, in the code abstract above). The Rep Ref is 
returned as a <em>CATIFctRepresentationReference</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Multi-Instantiable Functional Rep Ref (with 
Non-CATIA Contents)</h3>
<p>Here we create the Multi-Instantiable Functional Rep Ref(with Non-Catia contents).</p>
<pre class="code">...
	CATIFctRepresentationReferenceFactory *piFunctRepRefFactory = NULL;
	hr = <strong>CATFctFactoriesProvider::GetRepresentationReferenceFactory</strong>(piFunctRepRefFactory);
	
	if (FAILED(hr) || (NULL == piFunctRepRefFactory)) return 1;

	<strong>CATIFctRepresentationReference</strong>* opiMultiInstFunctRepRef  = NULL;
	hr = piFunctRepRefFactory-&gt;<strong>CreateWithNonCATIAContent</strong>( NULL_var, NULL, UselessList,
							iDocumentPath,opiMultiInstFunctRepRef);
...</pre>
<p>A call to <code>CATFctFactoriesProvider::GetRepresentationReferenceFactory</code> 
returns us the factory pointer, as a <em>CATIFctRepresentationReferenceFactory</em> 
type.</p>
<p>The method <code>CATIFctRepresentationReferenceFactory::CreateWithNonCATIAContent</code> 
creates a multi-instantiable Functional Rep Ref with non-CATIA Contents. The list 
of attribute-value is empty since values get valuated as per business Logic. In 
this case we are passing <em>CATIAdpEnvironment</em>* as a NULL value, so that it 
takes as current Environment as input. The type of the Functional Rep Ref to create, 
is internally computed by this API so here we pass <em>CATIType</em> as NULL_var. 
The file path of the non CATIA document (including its extension) is also an input 
to the API (<code>iDocumentPath</code>, in the code abstract above). The Rep Ref is returned 
as a <em>CATIFctRepresentationReference</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Aggregating the Newly Created Multi-Instantiable Functional 
Rep Ref under the Opened Functional Reference</h3>
<p>We now instantiate the multi-instantiable Functional Rep Ref(created in the step 
above.</p>
<pre class="code">...
         <strong>CATIFctRepresentationInstances</strong> *piFuncRepInstsOnInputFunctRef=NULL;
	hr= piFunctRef-&gt;QueryInterface(IID_CATIFctRepresentationInstances, (void**) &amp;piFuncRepInstsOnInputFunctRef);
	...
	CATIFctRepresentationInstance *opiFunctRepInstance=NULL;
	hr= piFuncRepInstsOnInputFunctRef-&gt;<strong>Add</strong>(opiMultiInstFunctRepRef, UselessList,opiFunctRepInstance);
...</pre>
<p>A call to <code>CATIFctRepresentationInstances::Add</code> implementation on 
a Functional Reference, instantiates a multi-instantiable functional rep ref (with 
non-Catia contents) under it. The new child rep instance is retrieved as a <em>CATIFctRepresentationInstance</em> 
type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiCreatingFuncRepRefWithNONCatiaCnts use case ends by simply closing 
the PLM session. See [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates the end user how to create the Functional Representation 
Reference(Rep Ref) for non-CATIA contents (e.g xls, doc, txt, xml, pdf, etc).</p>
<ul>
	<li><code>CATIFctRepresentations::AddWithNonCATIAContent</code> to create the 
		Mono-instantiable Functional Rep Ref.</li>
	<li><code>CATIFctRepresentationReferenceFactory::CreateNonCATIAContentRepReference</code> 
		to create the Multi-instantiable Functional Rep Ref.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Query, Expand and Open a PLM Reference in various Expand Modes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
