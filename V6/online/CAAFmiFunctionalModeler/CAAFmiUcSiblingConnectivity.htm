<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Sibling Connectivity with Ports</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Sibling Connectivity with Ports</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case creates Sibling Connection i.e. it creates the connection 
		between two sibling (same level) Instances through Ports.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiSiblingConnectivity Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiSiblingConnectivity Do</a></li>
					<li><a href="#How">How to Launch CAAFmiSiblingConnectivity</a></li>
					<li><a href="#Where">Where to Find the CAAFmiSiblingConnectivity 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learning's from this Use Case are:</p>
<ul>
	<li>How to create the Sibling connection (same level) between two ports.</li>
	<li>Objects involved while creation of connection.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiSiblingConnectivity Use Case</h2>
<p>CAAFmiSiblingConnectivity is a use case of the CAAFunctModelerUseItf.edu framework 
that illustrates CATFunctionalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiSiblingConnectivity Do</h3>
<p>In this use case we have created Sibling connection. Sibling connection means 
the connection between ports (or interfaces) those are on the same level.</p>
<p>Initially in this use case we retrieve four objects to form connection:</p>
<ul>
	<li>Instance 1 under which the Source Port is aggregated (<strong>CAAFmiSiblingConnectivity_ChildRef2.1</strong>).</li>
	<li>Source Port (<strong>ChildPort2 Emission</strong>).</li>
	<li>Instance 2 Under which the Target port is aggregated (<strong>CAAFmiSiblingConnectivity_ChildRef1.1</strong>).</li>
	<li>Target Port (<strong>ChildPort1 Consumption</strong>).</li>
</ul>
<table>
	<caption><a name="Fig1"></a>Fig. 1 Sibling Ports</caption>
	<tr>
		<td>
		<img alt="Sibling Ports" src="images/CAAFmiSiblingConnectivity_1.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig1">Fig. 1</a>] shows siblings Ports.</p>
<p>Then we form connection from Source instance object to Target instance object. 
This formed connection we call it as <strong>Sibling connection</strong>.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Sibling Connection</caption>
	<tr>
		<td>
		<img alt="Sibling Connection" src="images/CAAFmiSiblingConnectivity_2.jpg"/></td>
	</tr>
</table>
<p>The above image shows the sibling connection (its name is <strong>SiblingConnection</strong>) 
[<a href="#Fig2">Fig. 2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiSiblingConnectivity</h3>
<p>To launch CAAFmiSiblingConnectivity, you will need to set up the build time environment, 
then compile CAAFmiSiblingConnectivity along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFmiSiblingConnectivity Repository Server User Password 
SecurityCtx PLMType IDSetAttribute1 IDSetAttributeValue1 [IDSetAttribute1* IDSetAttributeValue1* 
...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The String representing PLMType</td>
	</tr>
	<tr>
		<th>IDSetAttribute1*</th>
		<td>First Identification Set(IDSet) attribute for the Functional Reference
		</td>
	</tr>
	<tr>
		<th>IDSetAttributeValue1*</th>
		<td>First IDSet attribute value for the Functional Reference</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the PLM type of the Functional Reference to be opened.</p>
<p><code>CAAFmiSiblingConnectivity.3dxml</code> is the 3D XML file contains the 
root Functional Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiSiblingConnectivity_RootRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiSiblingConnectivity Code</h3>
<p>The CAAFmiSiblingConnectivity use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiSiblingConnectivity.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAAFmiSiblingConnectivity use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving the two Instances in which Connection to Be 
		Made and the Ports through which Connection Will Realize</a></li>
	<li><a href="#Step2">Creating Connection between two Instances through Ports</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A PLM session 
is an environment essential for running a CAA use case. The article [<a href="#References">1</a>]delves 
further into the process of building and launching a CAA use case.</p>
<p>Here we open in Authoring mode [<a href="#References">3</a>] the Functional structure 
input provided by the use case . This input model contains two instances with ports.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the two Instances in which Connection to Be Made 
and the Ports through which Connection Will Realize</h3>
<p>In this step we retrieve four objects from the input Functional structure. the 
objects retrieved are as follows:</p>
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<ul>
	<li>Two instances in between we want to create connection:
		<ol>
			<li>Instance 1 under which the Source Port aggregated (<strong>piFctConnectableOnFuncInst_1</strong> 
				as a <em>CATIFctConnectable</em> interface pointer).</li>
			<li>Instance 2 Under which the target port is aggregated (<strong>piFctConnectableOnFuncInst_2</strong> 
				as a <em>CATIFctConnectable</em> interface pointer).</li>
		</ol>
	</li>
	<li>The Ports through which connection is made:
		<ul>
			<li>Source Port 1 (<strong>pFctConnectionPointOnFuncPort_1</strong> as a <em>CATFctConnectionPoint</em> 
				 pointer).</li>
			<li>Target Port 2 (<strong>pFctConnectionPointOnFuncPort_2</strong> as a <em>CATFctConnectionPoint</em> 
				 pointer).</li>
		</ul>
	</li>
</ul>

<p><strong>With old API (handling only Ports)</strong></p>
<ul>
	<li>Two instances in between we want to create connection:
		<ol>
			<li>Instance 1 under which the Source Port aggregated (<strong>piFctInstanceOnFuncInst_1</strong> 
				as a <em>CATIFctInstance</em> interface pointer).</li>
			<li>Instance 2 Under which the target port is aggregated (<strong>piFctInstanceOnFuncInst_2</strong> 
				as a <em>CATIFctInstance</em> interface pointer).</li>
		</ol>
	</li>
	<li>The Ports through which connection is made:
		<ul>
			<li>Source Port 1 (<strong>piFctPortOnFuncPort_1</strong> as a <em>CATIFctPort</em> 
				interface pointer).</li>
			<li>Target Port 2 (<strong>piFctPortOnFuncPort_2</strong> as a <em>CATIFctPort</em> 
				interface pointer).</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Connection between two Instances through Ports</h3>
<p>Now use case creates a connection between two instances through retrieved ports.</p>
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<pre class="code">...
	<strong>CATIFctConnection</strong> *opiFunctionalConnection = NULL;
	hr = piFctConnectableOnFuncInst_1-&gt;<strong>Connect</strong>(NULL_var,
		pFctConnectionPointOnFuncPort_1,
		piFctConnectableOnFuncInst_2, 
		pFctConnectionPointOnFuncPort_2,
		opiFunctionalConnection);
...</pre>
<p>A call to <code>CATIFctConnectable::Connect</code> creates a connection which connects two 
Connection Point aggregated under Connectables. Here the first Connectable is the 
first Instance (<code>piFctConnectableOnFuncInst_1</code>) and its Connection Point is the 
Port aggregated under it (<code>pFctConnectionPointOnFuncPort_1</code>). 
The second Connectable is the second Instance (<code>piFctConnectableOnFuncInst_2</code>)
and its Connection Point is the Port aggregated under it  
(<code>pFctConnectionPointOnFuncPort_2</code>). </p>
<p>This API can be used for Parent-Child and Sibling Connectivity [<a href="#References">4</a>].</p>
<p><code>CATLogConnectionPoint</code> can be used for Interfaces and Ports.
So, <code>CATILogConnectable::Connect</code> can also being used to connect Interfaces [<a href="#References">5</a>].</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Logical 
connection type. The API will return Connection object.</p>

<p><strong>With old API (handling only Ports)</strong></p>
<pre class="code">...    
	CATListValCATICkeParm_var iLFctAttributesValues;
	<strong>CATIFctConnection</strong> *opiFunctionalConnection = NULL;
	hr = piFctInstanceOnFuncInst_1-&gt;<strong>Connect</strong>(piFctPortOnFuncPort_1,
		piFctInstanceOnFuncInst_2, 
		piFctPortOnFuncPort_2,
		NULL_var,
		NULL, 
		iLFctAttributesValues, 
		opiFunctionalConnection);
...</pre>
<p>A call to <code>CATIFctInstance::Connect</code> creates connection between two 
instances, <code>piFctPortOnFuncPort_1</code> is a port aggregated under the instance
<code>piFctInstanceOnFuncInst_1</code> on which we have made a call for connect 
API. <code>piFctInstanceOnFuncInst_2</code> is a other instance to which we want 
to connect first one. and <code>piFctPortOnFuncPort_2</code> is the another port 
aggregated under second instance.</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Functional 
connection type. Then we pass Environment as NULL, due to this API will consider 
current environment as input (the input environment has been set as current previously). 
Then we pass attribute list which is empty since the attributes valuated by Business 
Logic internally. The API will return Connection object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiSiblingConnectivity use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h2><a name="InShort"></a>In Short</h2>
<p>This use case basically illustrated the user how to create the Sibling Connection. 
Sibling connection means the connection between Instances those are on the same level. 
The four objects required to form sibling connection with Ports are:</p>
<ul>
	<li>Instance 1 under which the Source Port is aggregated.</li>
	<li>Source Port 1.</li>
	<li>Instance 2 Under which the target port is aggregated.</li>
	<li>Target Port 2.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmiUcExposingPort.htm">Parent-Child Connectivity (with Ports)</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (with Interfaces)</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2014]</td>
		<td>Updated to add New Connectivity API</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
