<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing with Modeler APIs</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing with Modeler APIs</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case basically browses a Functional Model with Functional Modeler 
		API's. The Use Case details the steps involved in the CAA Customization 
		to browse through a Functional Model, using the CATFunctionalModelerUseItf 
		framework (restricted to the Functional Modeler) CAA Exposition.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiBrowsingFunctionalModelUse Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiBrowsingFunctionalModel 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiBrowsingFunctionalModel</a></li>
					<li><a href="#Where">Where to Find the CAAFmiBrowsingFunctionalModel 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user browses the structure of a Functional model. It means 
showing, from top to leaves, all the:</p>
<ul>
	<li>The Functional references.</li>
	<li>The child Functional instances and Functional Rep Instances under them.</li>
	<li>The child Functional Reference associated with the child Instances and Rep 
		Instances.</li>
	<li>Recursive browsing of the child Functional References.</li>
	<li>The Ports under the Functional Reference.</li>
	<li>The Flow Reference associated with the Port.</li>
	<li>Recursive browsing of the Flow Reference.</li>
	<li>The Interfaces (Flow Exposition Instances) under the Functional Reference.</li>
	<li>The Flow Reference associated with the Interface.</li>
	<li>Recursive browsing of the Flow Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiBrowsingFunctionalModel Use Case</h2>
<p>CAAFmiBrowsingFunctionalModel is a use case of the CAAFunctModelerUseItf.edu 
framework that illustrates CATFunctionalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiBrowsingFunctionalModel Do</h3>
<p>The input for this Use Case is a Functional Model as depicted in [<a href="#Fig1">Fig. 
1</a>] below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Functional Model</caption>
	<tr>
		<td>
		<img alt="Input Functional Model" src="images/CAAFmiBrowsingFunctionalModel_2.jpg"/></td>
	</tr>
</table>
<p>It consists of a root Functional Reference <code>CAAFmiBrowsingFunctionalModel_RootRef</code>.</p>
<p>The Root aggregates <code>CAAFmiBrowsingFunctionalModel_ChildRef.1</code>, an 
instance of a Functional Reference <code>CAAFmiBrowsingFunctionalModel_ChildRef</code> 
beneath it.</p>
<p>This Reference in turn aggregates a Functional Port <code>PortUnderChild</code>, 
associated with the Functional Flow <code>Flow 1</code>.</p>
<p>The Root aggregates an instance of a Functional Representation Reference(Rep 
Ref) <code>CAAFmiBrowsingFunctionalModel_RepRef</code> beneath it.</p>
<p>The Root in turn aggregates a Functional Interface <code>Interface.1</code>, 
associated with the Functional Flow <code>Flow 1</code>.</p>
<p>The process to retrieve a PLM Component from the database, essentially requires 
two inputs:</p>
<ul>
	<li>A list of IDSet attribute-values, provided as an input for UC execution.</li>
	<li>PLMType determine the Knowledge type of the functional reference to be browsed.</li>
</ul>
<p>The Use Case thus retrieves an Identificator of the Functional Root, in the underlying 
database. It next loads it in session, in <strong>Authoring</strong> mode, which 
essentially loads in session all the Functional References and Instances, Functional 
Rep Refs, Rep Instances, Interfaces and Ports.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2. Functional Model Browse Output</caption>
	<tr>
		<td>
		<img alt="Functional Model Browse Output" src="images/CAAFmiBrowsingFunctionalModel_1.jpg"/></td>
	</tr>
</table>
<p>The Use Case browses our input model and outputs its hierarchy as depicted in 
[<a href="#Fig2">Fig. 2</a>] above. For Reference and Rep Reference V_Name 
attribute is displayed, otherwise PLM_ExternalID attribute is displayed. This is 
due to the default environment (OneClick and New Typing V2 activated). Though only 
these attributes (PLM_ExternalID and V_Name) values of each PLM Entity in the 
hierarchy is output, the Use Case can also output all the public attribute values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiBrowsingFunctionalModel</h3>
<p>To launch CAAFmiBrowsingFunctionalModel, you will need to set up the build time 
environment, then compile CAAFmiBrowsingFunctionalModel along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFmiBrowsingFunctionalModel Repository Server User Password 
SecurityCtx PLMType iAllAttributes IDSetAttribute1 IDSetAttributeValue1 [IDSetAttribute1* 
IDSetAttributeValue1* ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user identifier</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data)
		</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String representing the PLMType For Functional Reference</td>
	</tr>
	<tr>
		<th>AllAtributes</th>
		<td>Yes (val=1), No (val=0)</td>
	</tr>
	<tr>
		<th>IDSetAttribute1*</th>
		<td>First Identification Set(IDSet) attribute for the Functional Reference 
		to browse</td>
	</tr>
	<tr>
		<th>IDSetAttributeValue1*</th>
		<td>First IDSet attribute value for the Functional Reference to browse</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the PLMType of the Functional Reference to be browsed.</p>
<p>CAAFmiBrowsingFunctionalModel.3dxml is the 3D XML file contains 
the root Functional Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: sfct00000023</li>
	<li><code>Version</code>: A.1</li>
	<li>(<code>V_Name</code>: CAAFmiBrowsingFunctionalModel_RootRef)</li>
</ul>
<p><strong>Attention</strong>: This 3dxml have been created with OneClick and Unified Typing activated (default environment).</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiBrowsingFunctionalModel Code</h3>
<p>The CAAFmiBrowsingFunctionalModel use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAACAAFunctModelerUseItf.edu\CAAFmiBrowsingFunctionalModel.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAFmiBrowsingFunctionalModel:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Functional Reference to Browse from Underlying 
		Database</a></li>
	<li><a href="#Step2">Browsing the Functional Reference</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAFmiBrowsingFunctionalModel use case, to begin with, creates a PLM Session. 
Its defined by the repository to be connected to, server, user, password and a Security 
Context. The Security context primarily defines a role with which the user is logged 
into the current session. In the current Use Case, since it simply browses through 
a Functional Model hierarchy, it does not involve any modification of the PLM data. 
So a Reviewer role serves our purpose in this case. The article &quot;Connecting 
to V6 Server&quot; [<a href="#References">2</a>] delves further deeper into this 
subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Functional Reference to Browse from Underlying 
Database</h3>
<p>To begin with, we retrieve from the underlying database, the Functional Reference 
for browse. The query to an underlying database for a PLM Component is built with 
primarily two inputs</p>
<ul>
	<li>An attribute-value list</li>
	<li>The PLMType of the PLM Component being queried</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step11"></a>Building an Identification Attribute-Value Set</h4>
<p>A PLM Type essentially defines a set of attributes, to uniquely identify it in 
the underlying database. These are referred to as IDSet attributes. A list of such 
attribute-value set, combined with the PLM Type uniquely identifies a PLM Component 
in the underlying database. This list is one of the inputs for the database query. 
The list is built, as depicted by the code extract below</p>
<pre class="code"><strong>CATListOfCATString iListAttributeName ;
CATListOfCATUnicodeString iListAttributeValue ;

for (int AttrIndex=8; AttrIndex &lt;= (8+((NbAttributes-1)*2)); AttrIndex++)
  {
    const CATString Attribute =  CATCkePLMNavPublicServices::RetrieveBasicAttributeNameFromPreviousOne(NULL_var,iArgv[AttrIndex]).CastToCharPtr();
    cout &lt;&lt; "The attribute name  is " &lt;&lt; Attribute.CastToCharPtr() &lt;&lt; endl;
    iListAttributeName.Append(Attribute); 		
    const CATUnicodeString Value(iArgv[AttrIndex+1]);
    cout &lt;&lt; "The attribute value is " &lt;&lt; Value.ConvertToChar() &lt;&lt; endl;
    iListAttributeValue.Append(Value);
    // Attribute names occur alternatively in the input arguments
    // So we need to jump two steps each time for each iteration of this loop
     AttrIndex++;
}</strong>
</pre>
<p>An attribute-value set are built with user inputs. The count of the attribute-value 
set is defined by the PLMType of the Functional Reference to browse.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Running Query and Retrieving Functional Reference from 
the Underlying Database</h4>
<p>At this stage, we have with us the inputs (PLMType and the attribute-value sets) 
which together define our database query. The query enables us retrieve an Identificator 
of a PLM Component, conforming to the search criteria, defined by the query. We 
then load this Component in session.</p>
<pre class="code">...
   CATIAdpPLMIdentificator* opiIDComp = NULL;
   hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				    istrPLMType,opiIDComp);
   ...
   hr= opener.CompleteAndOpen(opiIDComp,IID_CATIFctReference, (void**) &amp;piFunctRef);
...</pre>
<p>It next loads the functional reference in session, which essentially loads in 
session all the Functional References and Instances , Functional Rep Refs , Rep 
Instances, Interfaces and Ports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Browsing the Functional Reference</h3>
<p>The process to browse a Functional Reference involves retrieving the Child Instances, 
Rep Instances, Interfaces, Ports immediately under a Root Reference. We then retrieve the Reference 
associated with each direct Instance. With the child reference, we further browse 
down the Functional hierarchy. So the browsing is effectively a recursive process.</p>
<pre class="code">HRESULT <strong>BrowseReference</strong>(<strong>CATIFctReference</strong>* ipiFunctRef,
		      CATBoolean iAllAtributes, int iDepth)
{
   ...	
   CATIPLMNavEntity_var spiNavEntOnFuncRef =ipiFunctRef;
   ...
   <strong>CATIFctInstances</strong>_var spiFctInstsOnFuncRef=ipiFunctRef;
   CATListValCATIFctInstance_var ListOfInstsUnderFuncRef;
   ...	
   <strong>hr = </strong>spiFctInstsOnFuncRef<strong>-&gt;List(ListOfInstsUnderFuncRef);</strong>   
   ...	
   int j=1;
   while (SUCCEEDED(hr) &amp;&amp; (j&lt;=ListOfInstsUnderFuncRef.Size()))
   {
      ...         
      <strong>CATIFctInstance</strong>_var spiFuncInst =spiNavEntityOnFuncInst;
      <strong>CATIFctReference</strong>* piFuncRefOfInst = NULL;
      ...
      <strong>hr = spiFuncInst-&gt;GetReferenceInstanceOf(piFuncRefOfInst);</strong>      
      ...         
     <strong> hr = BrowseReference(piFuncRefOfInst,iAllAtributes, iDepth+1+1);</strong>
      ...
   }
   ...
   
   <strong>CATIFctRepresentationInstances</strong>_var spiFuncRepInstsUnderFuncRef=ipiFunctRef;
   CATListValCATIFctRepresentationInstance_var ListOfRepInstsUnderFuncRef;
   ...
   <strong>hr = </strong>spiFuncRepInstsUnderFuncRef<strong>-&gt;List(ListOfRepInstsUnderFuncRef);</strong>
   while (SUCCEEDED(hr) &amp;&amp; (k&lt;=ListOfRepInstsUnderFuncRef.Size()))
   {
    ...
 	<strong>CATIFctRepresentationInstance</strong>_var spiFuncRepInst =spiNavEntOnFuncRepInst;
	<strong>CATIFctRepresentationReference</strong>* piFuncRepRefOfRepInst = NULL;
	...
	hr = spiFuncRepInst-&gt;<strong>GetRepReferenceInstanceOf</strong>(piFuncRepRefOfRepInst);
	...
   }	
   
   ...
   <strong>CATIFctPorts</strong>_var spiFuncPortsOnFuncRef=ipiFunctRef;
   CATListValCATIFctPort_var ListOfPortsUnderFuncRef;
   ...
   <strong>hr = </strong>spiFuncPortsOnFuncRef<strong>-&gt;List(ListOfPortsUnderFuncRef);</strong>
   while (SUCCEEDED(hr) &amp;&amp; (j&lt;=ListOfPortsUnderFuncRef.Size()))
   {
      ...
         <strong>CATIFctPort</strong>_var spiFuncPort = ListOfPortsUnderFuncRef[j];
	<strong>CATIFctFlowReference</strong> *piAssociatedFlowRef=NULL;
	<strong>hr= </strong>spiFuncPort<strong>-&gt;GetFlow(piAssociatedFlowRef);</strong>
	...
	hr= <strong>BrowseFlowRef</strong>(piAssociatedFlowRef,iAllAtributes,iDepth+1+1);
      ...
   }
   ...
   <strong>CATIFctFlowExpositionInstances</strong>_var spiFuncFlowExpositionInstancesOnFuncRef=ipiFunctRef;
   CATListValCATIFctFlowExpositionInstance_var ListOfFlowExpositionInstUnderFuncRef;
   ...
   <strong>hr = </strong>spiFuncFlowExpositionInstancesOnFuncRef<strong>-&gt;List(ListOfFlowExpositionInstUnderFuncRef);</strong>
   while (SUCCEEDED(hr) &amp;&amp; (j&lt;=ListOfFlowExpositionInstUnderFuncRef.Size()))
   {
	...
	<strong>CATIFctFlowExpositionInstance</strong>_var spiFuncFlowExpoInst = ListOfFlowExpositionInstUnderFuncRef[j];
	<strong>CATIFctFlowReference</strong> *piAssociatedFlowRef=NULL;
	<strong>hr= </strong>spiFuncFlowExpoInst<strong>-&gt;GetFlowReference(piAssociatedFlowRef);</strong>
	...
	hr= <strong>BrowseFlowRef</strong>(piAssociatedFlowRef,iAllAtributes,iDepth+1+1);
	...
   }
}</pre>
<p>The <code>CATIFctInstances::List()</code> implementation on a Functional Reference, 
returns a list of direct Functional Instances under the Reference.</p>
<p>The <code>CATIFctInstance::GetReferenceInstanceOf()</code> implementation on 
a Functional Instance, returns its associated Reference.</p>
<p>What follows is a recursive call to the same subroutine namely. <code>BrowseReference()</code>, 
with the Functional Reference, retrieved in the earlier step.</p>
<p>The <code>CATIFctRepresentationInstances::List()</code> implementation on a Functional 
Reference, returns a list of direct Functional Rep Instances under the Reference.</p>
<p>The <code>CATIFctRepresentationInstance::GetRepReferenceInstanceOf()</code> implementation 
on a Functional Rep Instance, returns its associated Representation Reference.</p>
<p>The <code>CATIFctPorts::List()</code> implementation on a Functional Reference, 
returns a list of direct Functional Ports under the Reference.</p>
<p>The <code>CATIFctPort::GetFlow()</code> implementation on a Functional Port, 
returns its associated Functional Flow Reference.</p>
<p>The <code>CATIFctFlowExpositionInstances::List()</code> implementation on a Functional Reference, 
returns a list of direct Functional Interfaces (Flow Exposition Instances) under the Reference.</p>
<p>The <code>CATIFctFlowExpositionInstance::GetFlowReference()</code> implementation on a Functional 
Interface, returns its associated Functional Flow Reference.</p>
<p>Let us have a look at the implementation details of routine <code>BrowseFlowRef()</code>:</p>
<pre class="code">...
    <strong>HRESULT BrowseFlowRef(CATIFctFlowReference *ipiFlowRef, CATBoolean iAllAtributes,int iDepth)</strong>
    {
	CATListValCATIFctFlowInstance_var ListOfSubFlows;
	hr= ipiFlowRef-&gt;<strong>ListSubFlows</strong>(ListOfSubFlows);
	...
	while (SUCCEEDED(hr) &amp;&amp; (j&lt;=ListOfSubFlows.Size()))
	{ 
	  ...
	  <strong>CATIFctFlowInstance</strong>_var spiFlowInst=spiNavEntOnSubFlow;
	  <strong>CATIFctFlowReference</strong>* piFlowRef= NULL;
	  ...
	  hr = spiFlowInst-&gt;<strong>GetReferenceInstanceOf</strong>(piFlowRef);
	  ...
	  hr = <strong>BrowseFlowRef</strong>(piFlowRef,iAllAtributes,iDepth+1+1);
	  ...
	}
		  
   }
...</pre>
<p>The <code>CATIFctFlowReference::ListSubFlows()</code> implementation on a Functional 
Flow Reference, returns a list of sub flows under the Flow Reference.</p>
<p>The <code>CATIFctFlowInstance::GetReferenceInstanceOf()</code> implementation 
on a Functional Flow Instance, returns its associated Flow Reference.</p>
<p>What follows is a recursive call to the same subroutine namely. <code>BrowseFlowRef()</code>, 
with the Functional Flow Reference, retrieved in the earlier step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiBrowsingFunctionalModel use case ends by simply closing the PLM session 
[<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case CAAFmiBrowsingFunctionalModel details the steps involved in the 
CAA Customization to browse through a Functional Model, using the CATFunctionalModelerUseItf 
framework (restricted to the Functional Modeler) CAA Exposition.</p>
<p>The Use Case thus retrieves an Identificator of the Functional Root Reference, 
in the underlying database. It next loads it in session, in <strong>Authoring</strong> 
mode, which essentially loads in session all the Functional References and Instances 
, Functional Rep Refs , Rep Instances, Interfaces and Ports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2014]</td>
		<td>Add Functional Interfaces</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
