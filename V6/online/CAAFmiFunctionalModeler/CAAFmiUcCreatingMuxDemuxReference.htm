<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Multiplexer (Mux) Demultiplexer (Demux) Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Multiplexer (Mux) Demultiplexer (Demux) Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>In the Functional domain, functional systems send and receive data information. 
		This communication is realized with the aid of two kinds of functional entities 
		namely, Multiplexer (commonly referred to as Mux) and Demultiplixer (commonly 
		referred to as DeMux).</p>
		<p>A multiplexer is a device that combines several data input into one data 
		output . While a demultiplexer is a device taking a single data input and 
		separates it into multiple outputs.</p>
		<p><strong>/!\ The Multiplexer/Demultiplexer lose is interest since the existence of the 
		Interfaces (Flow Exposition Instance: Port's evolution). Even when data (Flow Reference) 
		is Structured, Interfaces allow to connect the sub-decomposition of the data.</strong></p>
		<p>In the Functional modeler , the Multiplexer/Demultiplexer is modeled 
		as Functional Multiplexer/Demultiplexer Reference. This use case illustrates 
		creating a Functional Multiplexer-Demultiplexer Reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiCreatingMuxDemuxReference Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFmiCreatingMuxDemuxReference 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiCreatingMuxDemuxReference</a></li>
					<li><a href="#Where">Where to Find the CAAFmiCreatingMuxDemuxReference 
						code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learnings from this Use Case are:</p>
<ul>
	<li>Creation of&nbsp;Multiplexer (Mux) Reference.</li>
	<li>Creation of Demultiplexer (Demux) Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiCreatingMuxDemuxReference Use Case</h2>
<p>CAAFmiCreatingMuxDemuxReference is a use case of the CAAFunctModelerUseItf.edu 
framework that illustrates the CATFunctionalModelerUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiCreatingMuxDemuxReference Do</h3>
<p>This UC illustrates creation of Mux and DeMux.</p>
<p>A key input to the API creating Mux/DeMux is the Functional Structure, as the 
one depicted in the [<a href="#Fig1">Fig. 1</a>] that follows.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Functional Flow Structure</caption>
	<tr>
		<td>
		<img alt="Functional Flow Structure" src="images/CAAFmiCreatingMuxDemuxRef_4.jpg"/></td>
	</tr>
</table>
<p>The above Functional Structure primarily comprises of a Functional Flow as a 
Root entity which aggregates two instances of Functional Flows, since our Multiplexer 
Reference Object combines two input data to output a single data. The steps involved 
to create this structure is detailed in a dedicated article [<a href="#References">4</a>]. 
These child instances are commonly referred to as SubFlows.</p>
<p>We now proceed to create a Multiplexer Reference Object, which is depicted in 
the [<a href="#Fig2">Fig. 2</a>] that follows. The Functional Flow structure created 
above [<a href="#Fig1">Fig. 1</a>] is a key input for this step.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Mux Structure</caption>
	<tr>
		<td>
		<img alt="Mux Structure" src="images/CAAFmiCreatingMuxDemuxRef_3.jpg"/></td>
	</tr>
</table>
<p>The figure [<a href="#Fig2">Fig. 2</a>] signifies that our Multiplexer Reference 
object aggregates two input ports and a single output port (three balloon shape 
objects in fig representing Ports in the below Mux reference). The port is the communication 
point for the functional system which means it is the interface for the functional 
system to communicate with other functional system.</p>
<p>The two input ports are defined for receiving data of type:</p>
<ul>
	<li>SubFlow1.1</li>
	<li>SubFlow2.1</li>
</ul>
<p>The single output port is defined to output a data of type:</p>
<ul>
	<li>RootFlowRef.1</li>
</ul>
<p>Please note that this RootFlowRef.1 instance object gets created while creation 
of Mux/Demux. The Mux/Demux creation API internally does instantiation of Root Functional 
Flow (RootFlowRef) below Mux/Demux Reference.</p>
<p>And vice versa, our DeMultiplexer Reference Object splits a single input data 
to output two output data. So, our DeMultiplexer Reference object aggregates a single 
input port and two output ports.</p>
<p>The single input port is defined to receive a data of type:</p>
<ul>
	<li>RootFlowRef.1</li>
</ul>
<p>The two output ports are defined to output two data of types respectively listed 
below:</p>
<ul>
	<li>SubFlow1.1</li>
	<li>SubFlow2.1</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiCreatingMuxDemuxReference</h3>
<p>To launch CAAFmiCreatingMuxDemuxReference, you will need to set up the build 
time environment, then compile CAAFmiCreatingMuxDemuxReference along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAFmiCreatingMuxDemuxReference Repository Server User 
Password SecurityCtx&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies/creates the PLM Data).</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiCreatingMuxDemuxReference Code</h3>
<p>The CAAFmiCreatingMuxDemuxReference use case is located in the CAAFmiCreatingMuxDemuxReference.m 
module of the CAAFunctModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreatingMuxDemuxReference.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAAFmiCreatingMuxDemuxReference use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Creating the Functional Flow Structure</a></li>
	<li><a href="#Step2">Creating a Multiplexer with Created Functional Flow Structure</a></li>
	<li><a href="#Step3">Creating a Demultiplexer with Created Functional Flow Structure</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A PLM session 
is an environment essential for running a CAA use case. The article [<a href="#References">1</a>]delves 
further into the process of building and launching a use case.</p>
<p>Please note that if we do not set any environment then in object creation by default 
API takes current environment as input. In further Mux-Demux creation the object 
will get created based on these inputs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Functional Flow Structure</h3>
<p>To create Mux-demux reference we need Functional Flow structure which contains 
Flow and Subflow. Creating the Functional flow structure we have discussed in detail 
in [<a href="#References">4</a>] use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Multiplexer with Created Functional Flow Structure</h3>
<p>Here we create the Multiplexer Reference with the Functional Flow structure created 
above.</p>
<pre class="code">...
  CATListValCATICkeParm_var LFctAttributesValues;
  CATIFctMuxDemuxReference *piFuncMultiplexerReference = NULL;
  hr = piFctReferenceFactory-&gt;<strong>CreateMultiplexer</strong>(NULL_var, 
                                                NULL,
                                                LFctAttributesValues,
                                                piFirstFuncFlowRef,
                                                piFuncMultiplexerReference);
...</pre>
<p>The method <code>CATIFctReferenceFactory::CreateMultiplexer</code> creates a 
Functional Multiplexer Reference. The list of attribute-value is empty since values 
get valuated as per business Logic. A significant point to note here is that the 
environment is input to this API and in this case we are passing it as NULL, If 
we pass it as NULL the API takes current Environment as input. The type of the Functional 
Reference to create, is internally computed by this API so here we pass <em>CATIType</em> 
as NULL_var. The reference is returned as a <em>CATIFctMuxDemuxReference</em> type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Demultiplexer with Created Functional Flow Structure</h3>
<p>Here we create the Demultiplexer Reference with Functional Flow structure created 
above.</p>
<pre class="code">...
  CATIFctMuxDemuxReference *piFuncDemultiplexerReference= NULL;
  hr = piFctReferenceFactory-&gt;<strong>CreateDemultiplexer</strong>(NULL_var, 
                                                  NULL,
                                                  LFctAttributesValues,
                                                  piFirstFuncFlowRef,
                                                  piFuncDemultiplexerReference);
...</pre>
<p>The method <code>CATIFctReferenceFactory::CreateDemultiplexer</code> creates 
a Functional Demultiplexer Reference. The list of attribute-value is empty since 
values get valuated as per business Logic. A significant point to note here is that 
the environment is input to this API and in this case we are passing it as NULL, 
If we pass it as NULL the API takes current Environment as input. The type of the 
Functional Reference to create, is internally computed by this API so here we pass
<em>CATIType</em> as NULL_var. The reference is returned as a <em>CATIFctMuxDemuxReference</em> 
type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiCreatingMuxDemuxReference use case ends by simply closing the PLM session. Since 
all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In this use case we simply creates Mux and Demux reference. To Create Mux/Demux 
we need Functional Flow structure which contains Flow and SubFlow. To provide Functional 
Flow structure we create that also in this use case.</p>
<p>In this use case we only create Mux/Demux reference but some important steps 
we could follow to use this newly created Mux/Demux reference:</p>
<ul>
	<li>Query the Mux/Demux from database [<a href="#References">3</a>].</li>
	<li>Open it in session.</li>
	<li>Then instantiate Mux/Demux reference under Functional reference using
		<code>CATIFctInstances::Add</code> method.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmiUcCreatingFlow.htm">Creating Flow</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
