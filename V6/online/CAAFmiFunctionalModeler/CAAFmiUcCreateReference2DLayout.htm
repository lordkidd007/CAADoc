<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Functional Reference with 2D Layout</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Functional Reference with 2D Layout</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The use case illustrates the steps involved to create a Functional reference 
		with 2D layout. It further retrieves the initial 2D coordinates and the 
		size (width, height) of the 2D layout, and finally change the initial values 
		by input values.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiCreateReference2DLayout Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiCreateReference2DLayout 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFmiCreateReference2DLayout</a></li>
					<li><a href="#Where">Where to Find the CAAFmiCreateReference2DLayout 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create a Functional Reference with 
2D layout. You will learn:</p>
<ul>
	<li>How to create a Functional Reference with 2D layout.</li>
	<li>How to retrieve the default 2D layout of the created Functional 2D reference.</li>
	<li>How to modify the 2D layout of the created Functional 2D reference.</li>
</ul>
<p>This reference is created in the <strong>RFLPLMFunctional</strong> Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiCreateReference2DLayout Use Case</h2>
<p>CAAFmiCreateReference2DLayout is a use case of the CAAFunctModelerUseItf.edu 
framework that mainly illustrates CATFLEditorItf and KnowledgeInterfaces frameworks 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiCreateReference2DLayout Do</h3>
<p>The CAAFmiCreateReference2DLayout use case illustrates how to create a Functional 
reference with 2D layout. The use case then retrieves the default 2D layout of the 
created Functional 2D reference and then modifies it with the values input.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Functional Reference with 2D Layout</caption>
	<tr>
		<td>
		<img alt="Functional Reference with 2D Layout" src="images/CAAFmiCreateReference2DLayout_1.jpg"/></td>
	</tr>
</table>
<p>[<a href="#Fig1">Fig. 1</a>] above depicts a newly created Functional Reference 
with 2D Layout. A Functional reference is distinct from the other PLM References, 
in one respect. It is created with a Functional Rep Instance aggregated beneath 
it. This Rep Instance represents a 2D Layout, as seen in [<a href="#Fig1">Fig. 1</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiCreateReference2DLayout</h3>
<p>To launch CAAFmiCreateReference2DLayout, you will need to set up the build time 
environment, then compile CAAFmiCreateReference2DLayout along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFmiCreateReference2DLayout Repository Server User Password 
SecurityCtx Environment PositionX PositionY Width Height &quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as Host:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM Environment containing a RFLPLMFunctional modeler customization</td>
	</tr>
	<tr>
		<th>PositionX</th>
		<td>Position value(X-Axis) to set for the created Functional 2D ref</td>
	</tr>
	<tr>
		<th>PositionY</th>
		<td>Position value(Y-Axis) to set for the created Functional 2D ref</td>
	</tr>
	<tr>
		<th>Width</th>
		<td>Width value to set for the created Functional 2D ref</td>
	</tr>
	<tr>
		<th>Height</th>
		<td>Height value to set for the created Functional 2D ref</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiCreateReference2DLayout Code</h3>
<p>The CAAFmiCreateReference2DLayout use case is made of a single file located in 
the CAAFmiCreateReference2DLayout.m module of the CAAFunctModelerUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiCreateReference2DLayout.m</code></p>
<p>and other global functions defined in:</p>
<p><code>InstallRootFolder\CAADoc\CAAPLMClientAdapter.edu\CAAAdpUtilities.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several Functional steps in CAAFmiCreateReference2DLayout use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Creating a Functional Reference with 2D Layout</a></li>
	<li><a href="#Step2">Retrieving the Default 2D Layout of Created Functional 
		2D Reference</a></li>
	<li><a href="#Step3">Setting the 2D Layout of Created Functional 2D Reference 
		with Values Input</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>It begins with a check to ensure bare minimum number of arguments are input for 
use case execution. This includes in the order listed below:</p>
<ul>
	<li>Five arguments(Repository, Server-Port, user , password, Security Context) 
		essential for creating a V6 session.</li>
	<li>Four numeral arguments, namely X,Y coordinates, width &amp; height , to 
		relocate &amp; resize the 2D layout.</li>
</ul>
<p>We further checks the four arguments to relocate and resize the 2D layout , are 
numerals.</p>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>] delves further into the process of building and launching 
a CAA use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a Functional Reference with 2D Layout</h3>
<p>This is the crux of the use case. This step is detailed below.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step11"></a>Retrieving the Input Environment</h4>
<pre class="code">...
<strong>CATIAdpEnvironment</strong>* oIAdpEnvironment = NULL;
rc = CATAdpDictionaryServices::<strong>GetEnvironment</strong>(iArgv[1],iArgv[6],&amp;oIAdpEnvironment);
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step12"></a>Instantiating the Factory</h4>
<p>In this step, we instantiates the factory and retrieves a pointer on the factory 
to create the Functional reference(with 2D layout). This interface pointer retrieved 
here is <em>CATIFLEditorReferenceFactoryLA</em> type.</p>
<pre class="code">...
<strong>CATIFLEditorReferenceFactoryLA</strong> *piFactory = NULL;
rc= ::<strong>CATInstantiateComponent</strong>("CATEFLEditorReferenceFactoryLA", IID_CATIFLEditorReferenceFactoryLA,(void **)&amp;piFactory);
...</pre>
<p>Here we have used <code>CATInstantiateComponent</code> to create an instance 
of the <em>CATEFLEditorReferenceFactoryLA</em> class. It also returns a pointer 
on the factory interface <em>CATIFLEditorReferenceFactoryLA</em> as an output argument. 
The retrieved factory interface pointer is then used to create the Functional reference(with 
2D layout).The creation of Functional 2D ref is mentioned is illustrated below.
</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step13"></a>Creating Functional 2D Reference</h4>
<p>The most important step of the UC is performed here: Create the Functional reference(with 
2D layout)</p>
<pre class="code">...
<strong>CATIFctReference</strong> *opiCreatedFuncReference=NULL;
CATListValCATICkeParm_var iUselessList;
if (NULL != piFactory)
{
	rc = piFactory-&gt;<strong>CreateFunctionRefWith2DLayout</strong>(NULL_var, oIAdpEnvironment, iUselessList, opiCreatedFuncReference);
...</pre>
<p>The method <code>CATIFLEditorReferenceFactoryLA::CreateFunctionRefWith2DLayout</code> 
is used with the following input arguments:</p>
<ul>
	<li><code>NULL_var</code>, a <em>CATIType_var</em> type. The type of the Functional Reference 
		to create. If this argument is a NULL pointer, the modeler type RFLPLMFunctionalReference 
		will be used by default for creation.</li>
	<li><code>oIAdpEnvironment</code>, the environment pointer, a <em>CATIAdpEnvironment</em>* type retrieved earlier.</li>
	<li><code>iUselessList</code>, a CATListValCATICkeParm_var type, this list of PLM attributes 
		must be empty since the PLM attributes of the newly created object are valuated 
		by the method.</li>
	<li><code>opiCreatedFuncReference</code>, <em>CATIFctReference</em> type, an output argument 
		which contains pointer on the created Functional 2D reference.</li>
</ul>
<p>The pointer on the created Functional 2D reference retrieved in this step is 
then used to retrieve the default 2D layout of the created Functional 2D reference 
which is performed in the next step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Default 2D Layout of Created Functional 2D 
Reference</h3>
<p>In this step,we retrieve the default 2D layout( 2D position, Width &amp; Height) 
of the created Functional 2D reference. It begins with retrieving a pointer on
<em>CATIFL2DEntity</em> on the created Functional reference ,which manages the 2D 
layout of the Functional 2D reference.</p>
<pre class="code">...
<strong>CATIFL2DEntity</strong> *piFL2DEntity = NULL;
rc = <strong>opiCreatedFuncReference</strong>-&gt;QueryInterface(IID_CATIFL2DEntity, (void**) &amp;piFL2DEntity);
...</pre>
<p>Once the <em>CATIFL2DEntity</em> pointer is retrieved on the created Functional 
2D reference, we use it to retrieve the default 2D layout of the created reference.</p>
<pre class="code">...
float oPositionX = 0.f;
float oPositionY = 0.f;

rc = <strong>piFL2DEntity-&gt;Get2DPosition</strong>(oPositionX, oPositionY);
 ...
float oWidth = 0.f;
float oHeight = 0.f;

rc = <strong>piFL2DEntity-&gt;Get2DSize</strong>(oWidth, oHeight);
...</pre>
<p>Making a call to <code>CATIFL2DEntity::Get2DPosition</code> and <code>CATIFL2DEntity::Get2DSize</code> 
returns the default 2D position and size parameters of the created Functional 2D 
reference.</p>
<p>Once we retrieve the default 2D layout of the created Functional 2D reference, 
we then set the 2D layout with the values input by the user. Its implementation 
details are mentioned in the next step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting the 2D Layout of Created Functional 2D Reference 
with Values Input</h3>
<p>In this step, we set the 2D layout of the created Functional 2D reference with 
the values input by the user.</p>
<pre class="code">...
float iposX=opdoubleForPosX;
float iposY=opdoubleForPosY;
		
rc = <strong>piFL2DEntity-&gt;Set2DPosition</strong>(iposX,iposY);
...
float iWidth=opdoubleForWidth;
float iHeight=opdoubleForHeight;
		
rc =<strong> piFL2DEntity-&gt;Set2DSize</strong>(iWidth, iHeight);</pre>
<p>Please note that the inputs required by the methods <code>CATIFL2DEntity::Set2DPosition</code> 
and <code>CATIFL2DEntity::Set2DSize</code> are of type <strong>float</strong>. So, 
type conversion of the input arguments( for modifying 2D layout of the Functional 
reference) is required. Thus, we first convert these input arguments to the type
<strong>double</strong> and then pass it to the methods <code>CATIFL2DEntity::Set2DPosition</code> 
and <code>CATIFL2DEntity::Set2DSize</code>.</p>
<p>Finally, we save the modified Functional reference(with 2D layout) in the repository. 
Its implementation details are mentioned below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiCreateReference2DLayout use case ends by simply saving and closing 
the PLM session as described by &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case creates a Functional reference (with 2D Layout).The use case further 
retrieves the initial 2D coordinates and the size (width, height) of the 2D layout, 
and then changes the 2D layout with the values input by the user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
