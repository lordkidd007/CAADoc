<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Functional Modeler Presentation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Functional Modeler Presentation</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>The objective of this article is to provide an overview of the Functional 
		Modeler.</p>
		<ul>
			<li><a href="#Part1">Introduction to Functional Modeler</a></li>
			<li><a href="#Part2">Functional System</a></li>
			<li><a href="#Part3">Functional Flow</a></li>
			<li><a href="#Part4">Connectivity Between Systems</a></li>
			<li><a href="#Part5">Multiplexer / Demultiplexer</a></li>
			<li><a href="#Part6">Associating Data Contents</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part1"></a>Introduction to Functional Modeler</h2>
<p><strong>Definition</strong>: Describes what do you need to achieve and what are 
the services you will use. It mainly does the following:</p>
<ul>
	<li>Defines the functions (services) the product must provide to fulfill its 
		requirements and their decomposition into sub-functions.</li>
	<li>Defines the inputs and outputs of the functions and relations between the 
		functions (explicit exchanges between functions).</li>
</ul>
<p>The base of the functional modeler is modeled as the Functional system, whose 
details are given in the next section .</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part2"></a>Functional System</h2>
<p><strong>Concept :</strong></p>
<p>The functional system is the definition of the elementary functions the product 
should provide to a user (external view); it does not define how they will be provided. 
A function can be decomposed in sub-functions. A functional system is the hierarchical 
assemblage of interconnected sub-systems to form an integrated whole. A functional 
system can be reused (instantiated).</p>
<p><strong>Modeler Object:</strong></p>
<p>In this Modeler, Functional system is modeled as: Functional Reference.</p>
<p><strong>Functional Reference and Functional Instance</strong></p>
<p>The Functional Reference is the base object of the functional definition of the 
product: Elementary service to be provided by the product to a user. The Functional 
Instance models the decomposition of a functional reference into sub-functions (or 
child function). It can be also considered as an Usage by a Functional Reference 
of another. This object holds different attributes (name, descriptions&#8230;) and 
2 relations:</p>
<ul>
	<li>Composition link pointing to the parent Functional Reference.</li>
	<li>Instantiation link pointing to the child Functional Reference.</li>
</ul>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Functional Model</caption>
	<tr>
		<td>
		<img alt="Functional Model" src="images/CAAFmiTAFunctionalModel_1.jpg"/></td>
	</tr>
</table>
<p><strong>API:</strong></p>
<p>The <code>CATIFctReferenceFactory::CreateReference()</code> creates the functional 
reference.</p>
<p>The <code>CATIFctInstances::Add()</code> instantiates the child reference under 
the Root reference.</p>
<p>The implementation details of this section are given in the use case &#8220;Creating 
Functional Reference /Instance&#8221; [<a href="#References">2</a>].</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Functional Model</caption>
	<tr>
		<td>
		<img alt="Functional Model" src="images/CAAFmiTAFunctionalModel_ForRef.jpg"/></td>
	</tr>
</table>
<p>Once the functional system is created, next comes the service which will be handled 
by this system. It is detailed in next section.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part3"></a>Functional Flow</h2>
<p><strong>Concept</strong>:</p>
<p>It is defined as a data/control that a Function emits or consumes. Two categories 
of flow exist:</p>
<ul>
	<li>Data flow: it models the data exchange.</li>
	<li>Control flow: it models the activation/deactivation of functions.</li>
</ul>
<p>Flow is produced by a unique emitter and can be consumed by one or several functions. 
Flow can be structured.</p>
<p><strong>Modeler Object</strong>:</p>
<p>In this Modeler, Functional flow is modeled as: Functional Flow Reference. The 
association (emission or consumption) of a data/control flow with a function is 
modeled as Interface. The Functional Flow is associated with the Functional Flow Exposition Instance (Interface). 
See the figure [<a href="#Fig4">#</a>] below.</p>
Interfaces have been created in order to replace the Functional Port, but they are still available. In that case, the Functional Flow is associated with the Functional Port(through 
the Flow Instance). See the figure [<a href="#Fig6">#</a>] below.</p>
<p><strong>Functional Interface (Flow Exposition Instance)</strong></p>
<ul>
	<li>Describes data/control exchange of a System (through a Functional Flow Ref).</li>
	<li>Holds a Direction (Consumption (In), Emission (Out)).</li>
	<li>Holds an Identifier attribute.</li>
</ul>
<p>The Identifier attribute characterizes the Interface Instance usage. 
This specific attribute will help addressing advanced Interchangeability scenarios. 
Briefly, it will help maintaining connectivity when replacing a System by another one.
</p>
<p>This Flow Exposition Instance allows to connect a given field of a structured Interface. 
A Functional System associated to a structured connector with sub-components (Flow Exposition Instance with sub-Flow Instances) 
 can be pointed by Functional Connection</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3: Functional Interface</caption>
	<tr>
		<td>
		<img alt="Functional Interface" src="images/CAAFmiTAFunctionalModel_6.jpg"/></td>
	</tr>
</table>
<p><strong>API</strong>:</p>
<p>The <code>CATIFctReferenceFactory::CreateFlowReference()</code> creates the functional 
flow reference.</p>
<p>The <code>CATIFctFlowExpositionInstances::Add()</code> creates the Flow Exposition Instance under the reference (calling 
this API).</p>
<table>
	<caption><a name="Fig4"></a>Fig. 4: Functional Reference with Functional Flow 
	(Associated with Interface)</caption>
	<tr>
		<td>
		<img alt="Functional Reference with Functional Flow" src="images/CAAFmiTAFunctionalModel_ForFlow1.jpg"/></td>
	</tr>
</table>
<p>The implementation details of this section are given in the use case &#8220;
Creating Functional Flow Model&#8221; [<a href="#References">3</a>].</p>
<p>Usually when two systems talk to each other there is need of transferring data 
to each other. For this ,the systems require some connectivity in between them. 
This is detailed in the <a href="#Part4">Connectivity section</a>.</p>

<p><strong>Functional Port</strong></p>
<ul>
	<li>Holds composition link to a Functional Reference.</li>
	<li>Describes data/control exchange of a System (through a Functional Flow Ref).</li>
	<li>Holds a Direction (Consumption (In), Emission (Out)).</li>
</ul>
<table>
	<caption><a name="Fig5"></a>Fig. 5: Functional Flow</caption>
	<tr>
		<td>
		<img alt="Functional Flow" src="images/CAAFmiTAFunctionalModel_2.jpg"/></td>
	</tr>
</table>
<p><strong>API</strong>:</p>
<p>The <code>CATIFctReferenceFactory::CreateFlowReference()</code> creates the functional 
flow reference.</p>
<p>The <code>CATIFctPorts::Add()</code> creates the Port under the reference (calling 
this API).</p>
<table>
	<caption><a name="Fig6"></a>Fig. 6: Functional Reference with Functional Flow 
	(Associated with Port)</caption>
	<tr>
		<td>
		<img alt="Functional Reference with Functional Flow" src="images/CAAFmiTAFunctionalModel_ForFlow2.jpg"/></td>
	</tr>
</table>
<p>The implementation details of this section are given in the use case &#8220;Creating 
Functional Reference /Instance /Port / Flow&#8221; [<a href="#References">5</a>].</p>
<p>Usually when two systems talk to each other there is need of transferring data 
to each other. For this ,the systems require some connectivity in between them. 
This is detailed in the next section.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part4"></a>Connectivity Between Systems</h2>
<p><strong>Concept</strong>:</p>
<p>Connectivity between systems is defined as the relationships between Connections Points 
(Interfaces or Ports) of Systems, which materialize data exchange between systems.</p>
<p><strong>Modeler Object</strong>:</p>
<p>In this Modeler, connectivity is modeler in terms of Functional Connection. There 
are basically two type of connectivity:</p>
<ul>
	<li>Sibling Connectivity.</li>
	<li>Parent-Child Connectivity.</li>
</ul>
<p>A Functional Connection links two <strong>Connection Points</strong> by the way of <strong>Connectables</strong>.</br>
There are two objects that can be used as Connectable: the Functional System and the Functional Instance. And these one exposes several Connection Points.</br>
A Connection Point is used to connect and navigate between Systems. It can be:
<ul>
	<li>A Functional Port.</li>
	<li>A Functional Interface (one Flow Exposition Instance with or without a path of sub-Flow Instances).</li>
</ul>
</p>
<p><strong>Sibling Connectivity</strong>:</p>
<p>Connection between 2 sub-elements of the same functional component.</p>
<table>
	<caption><a name="Fig7a"></a>Fig. 7.a: Sibling Connectivity with Interfaces</caption>
	<tr>
		<td>
		<img alt="Sibling Connectivity with Interfaces" src="images/CAAFmiTAFunctionalModel_3_a.jpg"/></td>
	</tr>
</table>
<p>On this connection, the two Connectables are "FuncInst2.1" and "FuncInst3.1". And the associated Connections Points are "FlowExpo1.1" and "FlowExpo1.2".</p>
<table>
	<caption><a name="Fig7b"></a>Fig. 7.b: Sibling Connectivity with Ports</caption>
	<tr>
		<td>
		<img alt="Sibling Connectivity with Ports" src="images/CAAFmiTAFunctionalModel_3_b.jpg"/></td>
	</tr>
</table>

<p><strong>Parent-Child Connectivity</strong></p>
<p>This connectivity is between the connection point of a functional reference and the connection point 
of one of its sub-component (This type of pattern is used to propagate (expose) 
information at the parent level and therefore pass it along to other branches of 
the functional tree).</p>
<table>
	<caption><a name="Fig8"></a>Fig. 8: Parent-Child Connectivity</caption>
	<tr>
		<td>
		<img alt="Parent-Child Connectivity" src="images/CAAFmiTAFunctionalModel_4.jpg"/></td>
	</tr>
</table>
<p>On this connection, the two Connectables are "FuncRef1" and "FuncInst2.1". And the associated Connections Points are "FlowExpo1.1" and "FlowExpo1.2".</p>
<p><strong>API :</strong></p>
<p>The <code>CATIFctConnectable::Connect()</code> connects this Connectable element and a target Connectable element using Connection Point. 
This can be used for Parent-Child Connectivity and Sibling Connectivity.</p>
<table>
	<caption><a name="Fig9"></a>Fig. 9: Sibling Connection with Interfaces</caption>
	<tr>
		<td>
		<img alt="Sibling Connection with Interfaces" src="images/CAAFmiSiblingConnectivityWithInterfaces_2.jpg"/></td>
	</tr>
</table>
<table>
	<caption><a name="Fig10"></a>Fig. 10: Parent Child Connection</caption>
	<tr>
		<td>
		<img alt="Parent Child Connectivity" src="images/CAAFmiTAFunctionalModel_ForParentChildConnectivity.jpg"/></td>
	</tr>
</table>
<p>The implementation details of this API are given in the use case &#8220;Sibling 
Connectivity&#8221; [<a href="#References">6a</a>].</p>
<p><code>CATIFctInstance::Connect()</code> and <code>CATIFctPort::Connect()</code> can be used but are <strong>not recommended</strong>: only usable with Ports (can not be used with Interfaces).</p>
<p>If needed, the implementation details of these API are given in the use case &#8220;Sibling 
Connectivity&#8221; and &#8220;Exposing Port&#8221; [<a href="#References">6b and 7</a>].</p>
<p>The next section will deal in providing an overview of Functional Multiplexer/Demultiplexer.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part5"></a>Multiplexer / Demultiplexer</h2>
<p><strong>Concept</strong>:</p>
<p>A multiplexer is a device that combines several input data information into one 
output data. While a demultiplexer is a device taking a single data input and separate 
it over multiple data output.</p>
<p><strong>/!\ The multiplexer lose is interest since the existence of the Interfaces. Even when data is Structured, Interfaces allow to connect the sub-decomposition of the data.</strong></p>
<p><strong>Modeler Object</strong>:</p>
<p>In this modeler, the Multiplexer/Demultiplexer is modeled as Functional Multiplexer/Demultiplexer 
reference.</p>
<p>[<a href="#Fig11">Fig.11</a>] below shows one example of Mux reference. In which 
two input and one output.</p>
<table>
	<caption><a name="Fig11"></a>Fig. 11: Functional Multiplexer</caption>
	<tr>
		<td>
		<img alt="Functional Multiplexer" src="images/CAAFmiCreatingMuxDemuxRef_3.jpg"/></td>
	</tr>
</table>
<p>Rule : All the input and output ports of the Mux/Demux Ref should belong to the 
same flow type. This Mux/Demux is instantiated under functional Reference.</p>
<p><strong>API</strong>:</p>
<p>The <code>CATIFctReferenceFactory:: CreateMultiplexer()</code> creates the functional 
Multiplexer reference. The implementation details of this API are given in the use 
case &#8220;Creating Multiplexer (Mux) Reference&#8221;.</p>
<p>The <code>CATIFctReferenceFactory::CreateDemultiplexer()</code> creates the functional 
Demultiplexer reference.</p>
<p>The implementation details of this API are given in the use case &#8220;Creating 
Mux-Demux Reference&#8221; [<a href="#References">8</a>].</p>
<p><strong>Multiplexer/Demultiplexer Usage</strong>:</p>
<p>We will demonstrate the usage of Mux/Demux by taking an example of Demux below 
[<a href="#References">9</a>].</p>
<p>We have following three reference with port as per following description, The 
structured Flow Reference aggregating Flow of two Sub Flows (in this case Sub Flow 
1 and Sub Flow 2).</p>
<ol>
	<li>The Functional Reference 1 has one output port - Structured Flow.</li>
	<li>The Functional Reference 2 has one input port - Sub Flow 1.</li>
	<li>The Functional Reference 3 has one input port - Sub Flow 2.</li>
</ol>
<p>Now the problem is the Functional reference 1 port (output) transmits the control/data 
for Reference 2 Port (Input) and Reference 3 Port (Input). To resolve this problem 
we need one entity which will Serve the both purpose:</p>
<ul>
	<li>Split the data required for two input ports.</li>
	<li>Maintain compatibility of the Flow.</li>
</ul>
<p>Here comes the solution - Demultiplexer.</p>
<p>So we introduced Demux reference. The Demux Reference has following Ports:</p>
<ul>
	<li>Input port Of Demux Reference (Structured Flow).</li>
	<li>Output port 1 Of Demux Reference (Sub Flow 1).</li>
	<li>Output port 2 Of Demux Reference (Sub Flow 2).</li>
</ul>
<p>And Problem we resolve by making connections between three references and Demux 
reference as per following:</p>
<ul>
	<li>Reference 1 Out Port -&gt; Input port Of Demux Reference (Structured Flow).</li>
	<li>Output port 1 Of Demux Reference -&gt; Reference 2 Input Port (Sub Flow 
		1).</li>
	<li>Output port 2 Of Demux Reference -&gt; Reference 3 Input Port (Sub Flow 
		2).</li>
</ul>
<table>
	<caption><a name="Fig12"></a>Fig. 12: Demux Reference Usage</caption>
	<tr>
		<td>
		<img alt="Demux Reference Usage" src="images/CAAFmiMuxDemuxUsage_1.jpg"/></td>
	</tr>
</table>
<p>the above [<a href="#Fig13">Fig. 13</a>] shows the three references connected 
through Demultiplexer.</p>
<table>
	<caption><a name="Fig13"></a>Fig. 13: Demux Reference Usage Structure</caption>
	<tr>
		<td>
		<img alt="Demux Reference Usage Structure" src="images/CAAFmiMuxDemuxUsage_2.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig13">Fig. 13</a>] shows the structure of the Functional 
Reference model which is using Demux Reference.</p>
<p><strong>API</strong>:</p>
<p>The <code>CATIFctInstance::Connect()</code> creates connection between the Mux/Demux 
instance(and its associated port) and the other instances (and its associate port) 
of the aggregating functional model.</p>
<p>The implementation details of this API are given in the use case &#8220;Mux/Demux 
Reference Usage&#8221; [<a href="#References">9</a>].</p>
<p>The next section will illustrate the user : how to describe the behaviour of 
the functional system.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Part6"></a>Associating Data Contents</h2>
<p><strong>Concept</strong>:</p>
<p>We can associate data contents to the functional rep ref and these data contents 
can be of any type(e.g. Document file , picture file etc.).</p>
<p>Please note that in Functional Modeler , Functional Representation reference 
can hold only the data with NON-Catia document type (e.g xls, doc, txt, xml, pdf, 
etc).</p>
<p><strong>Modeler Object</strong>:</p>
<p>In this Modeler, data contents (to be associated with the system) are modeled 
as Functional Representation Reference(Rep Ref).</p>
<p><strong>API</strong>:</p>
<p>The <code>CATIFctRepresentationReferenceFactory::CreateNonCATIAContentRepReference()</code> 
creates the multi-instantiable functional Rep Ref.</p>
<p>The <code>CATIFctRepresentations::AddWithNonCATIAContent()</code> creates the 
Mono-instantiable Functional Rep Ref.</p>
<table>
	<caption><a name="Fig14"></a>Fig. 14: Functional Reference Aggregating Functional 
	Rep Ref</caption>
	<tr>
		<td><img alt="Functional Reference" src="images/CAAFmiTAFunctionalModel_ForRepRef.jpg"/></td>
	</tr>
</table>
<p>The implementation details of these API&#8217;s are given in the use case &#8220;Creating 
Functional Rep Reference for non-CATIA contents&#8221; [<a href="#References">10</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The article provides an introduction to Functional Modeler along with the various 
objects existing in it. The article also illustrates the functional system and 
the connectivity between the systems.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmiQrFunctModelerBehavior.htm">Functional Modeler Behaviors</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmiUcCreatingFuncModel.htm">Creating Functional Model</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAFmiUcCreatingFunctionalFlowModel.htm">Creating Functional Flow Model</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmiUcCreatingFlow.htm">Creating Flow</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmiUcCreatingPort.htm">Creating Port</a></td>
	</tr>
	<tr>
		<td>[6a]</td>
		<td><a href="CAAFmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (Interfaces)</a></td>
	</tr>
	<tr>
		<td>[6b]</td>
		<td><a href="CAAFmiUcSiblingConnectivity.htm">Sibling Connectivity (Ports)</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAFmiUcExposingPort.htm">Parent-Child Connectivity</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAFmiUcCreatingMuxDemuxReference.htm">Creating Mux Demux Reference</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAFmiUcMuxDemuxReferenceUsage.htm">Mux-Demux Usage</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td><a href="CAAFmiUcCreatingFuncRepRefWithNONCatiaCnts.htm">Creating Functional 
		Representation Reference</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jun 2014]</td>
		<td>Add Functional Interfaces</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
