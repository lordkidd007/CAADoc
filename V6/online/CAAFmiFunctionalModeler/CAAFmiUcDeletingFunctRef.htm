<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Deleting Functional Reference/Representation Reference</title>
<style type="text/css">
.auto-style1 {
	background-color: #F9F9F9;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Deleting Functional Reference/Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case clarifies certain key concepts related to deleting a Functional 
		Reference / Functional Representation Reference(Rep Ref) from the database. 
		These are:</p>
		<ul>
			<li>Delete is a &quot;<strong>Short Transaction</strong>&quot; operation done 
				directly on the database. Hence, a Functional Reference can be deleted 
				only if it is no longer loaded in the current session.</li>
			<li>A Functional Reference cannot be deleted if an instance of it exists 
				aggregated under another Functional Reference, not contained in 
				the list of References for deletion.</li>
			<li>A Functional Rep Ref cannot be deleted if an instance of it exists 
				aggregated under another Functional Reference, not contained in 
				the list of References for deletion.</li>
		</ul>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiDeletingFunctRef Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiDeletingFunctRef Do</a></li>
					<li><a href="#How">How to Launch CAAFmiDeletingFunctRef</a></li>
					<li><a href="#Where">Where to Find the CAAFmiDeletingFunctRef 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to delete the Functional objects (Functional 
Reference and Rep Ref) using the <code>CATFctDeleteServices::DeleteFunctionalReferences</code> 
API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiDeletingFunctRef Use Case</h2>
<p>CAAFmiDeletingFunctRef is a use case of the CAAFunctModelerUseItf.edu framework 
that illustrates CATFunctionalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiDeletingFunctRef Do</h3>
<p>The Use Case attempts to delete a list of Functional References / Functional 
Rep Ref, an input for the Use Case execution.</p>
<p>The scenario is as follows:</p>
<ul>
	<li>Looks for a list of Functional Reference or Functional Representation Reference 
		(given as input).</li>
	<li>Loads them in session.</li>
	<li>Tries to delete the loaded element (failure).</li>
	<li>Unloads all these components from the current session.</li>
	<li>Subject to other factors being favorable for the delete operation, the delete 
		operation, this time succeeds.</li>
</ul>
<p>We propose you to execute this use case with the following data model. So, consider 
the PLM Components depicted in <a href="#Fig1">Fig. 1</a> below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Model</caption>
	<tr>
		<td><img alt="Input Model" src="images/CAAFmiDeletingFunctRef_1.jpg"/></td>
	</tr>
</table>
<p>The Root has an instance of <code>CAAFmiDeletingFunctRef_NewChildRef</code> namely
<code>CAAFmiDeletingFunctRef_NewChildRef.1</code> beneath it, which aggregates an 
instance of a Rep Ref <code>CAAFmiDeletingFunctRef_NewMultiRepRef</code> beneath 
it.</p>
<p>This Use Case execution enables us to run various scenarios listed below, with 
inputs as a subset of the PLM Components above:</p>
<ul>
	<li><code>Input: CAAFmiDeletingFunctRef_NewRootRef ---</code>
		<ul>
			<li>Success: the root is deleted with all its aggregated Functional 
				Instances, Ports and a Rep Ref whose the mono-instances exists beneath 
				this functional reference.</li>
		</ul>
	</li>
</ul>
<ul>
	<li><code>Input: CAAFmiDeletingFunctRef_NewChildRef---</code>
		<ul>
			<li>Deletion fails, since <code>CAAFmiDeletingFunctRef_NewChildRef</code> 
				instantiated in <code>CAAFmiDeletingFunctRef_NewRootRef</code> context, 
				which is NOT one of the PLM Components being deleted.</li>
		</ul>
	</li>
</ul>
<ul>
	<li><code>Input : CAAFmiDeletingFunctRef_NewMultiRepRef---</code>
		<ul>
			<li>Deletion fails, since <code>CAAFmiDeletingFunctRef_NewMultiRepRef</code> 
				instantiated by a reference, <code>CAAFmiDeletingFunctRef_NewChildRef</code> 
				which is NOT included in the list of PLM Refs for deletion.</li>
		</ul>
	</li>
	<li><code>Input: CAAFmiDeletingFunctRef_NewMultiRepRef--- CAAFmiDeletingFunctRef_NewChildRef 
		---CAAFmiDeletingFunctRef_NewRootRef ---</code>
		<ul>
			<li>Deletion succeeds, since
				<ul>
					<li><code>CAAFmiDeletingFunctRef_NewMultiRepRef</code> deleted 
						since its only immediate reference context <code>CAAFmiDeletingFunctRef_NewChildRef</code> 
						included in the list for deletion.</li>
					<li><code>CAAFmiDeletingFunctRef_NewChildRef</code>, deleted 
						since its only immediate reference context <code>CAAFmiDeletingFunctRef_NewRootRef</code> 
						is included in the list for deletion.</li>
				</ul>
			</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiDeletingFunctRef</h3>
<p>To launch CAAFmiDeletingFunctRef, you will need to set up the build time environment, 
then compile CAAFmiDeletingFunctRef along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFmiDeletingFunctRef Repository Server User Password SecurityCtx 
PLMType PLMChildType PLM_ExternalID1 majorrevision1 [PLM_ExternalID2 majorrevision2 ...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The String Representing PLMType for the Functional objects</td>
	</tr>
	<tr>
		<th>PLMChildType</th>
		<td>The String Representing PLMType for the Child Functional objects</td>
	</tr>
	<tr>
		<th>PLM_ExternalID1</th>
		<td>The <code>PLM_ExternalID</code> of a Functional Reference or 
		Functional Rep Ref for deletion</td>
	</tr>
	<tr>
		<th>majorrevision1</th>
		<td>The <code>majorrevision</code> of a Functional Reference or Functional Rep 
		Ref for deletion</td>
	</tr>
	<tr>
		<th>PLM_ExternalID#</th>
		<td>The <code>PLM_ExternalID</code> of a Functional Reference or Functional 
		Rep Ref for deletion (optional)</td>
	</tr>
	<tr>
		<th>majorrevision#</th>
		<td>The <code>majorrevision</code> of a Functional Reference or Functional 
		Rep Ref for deletion (optional)</td>
	</tr>
</table>
<p>CAAFmiDeletingFunctRef.3dxml is the 3D XML file contains the root Functional 
Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiDeletingFunctRef_NewRootRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiDeletingFunctRef Code</h3>
<p>The CAAFmiDeletingFunctRef use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiDeletingFunctRef.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Identificators of Input Functional Reference/Rep 
		Ref</a></li>
	<li><a href="#Step2">Loading Functional Reference/Rep Ref in Session</a></li>
	<li><a href="#Step3">Deleting the Input Functional Reference/Rep Ref Currently 
		Loaded in the Session</a></li>
	<li><a href="#Step4">Unloading the Input Functional Reference/Rep Ref from the 
		Session</a></li>
	<li><a href="#Step5">Deleting the Input Functional Reference/Rep Ref just Unloaded 
		from the Session</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAFmiDeletingFunctRef use case begins by creating a session and connecting 
to the Input Repository with an appropriate role (Designer, in this case). The Use 
Case &quot;Connecting to V6 Server&quot; [<a href="#References">3</a>] deals 
with Opening and Closing a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Identificators of Input Functional Reference/Rep 
Ref</h3>
<p>We begin by retrieving the <code>Identificator</code> [<a href="#References">1</a>] 
of each input Functional Reference/Rep Ref, prerequisite for this is retrieving 
usable type of the input Functional Reference/Rep Ref.</p>
<p>At this stage, we have with us the inputs (type and attribute-value sets of PLMExtrenal_ID 
and majorrevision attributes) which together define our database query. The query enables 
us retrieve an Identificator of a PLM Component, conforming to the search criteria, 
defined by the query[<a href="#References">4</a>].</p>
<pre class="code">...
for (int AttrValueIndex=8; AttrValueIndex&lt;=(8+((NbAttributes-1)*2)); AttrValueIndex++)
{
  //Create attribute set with PLM_ExternalID and Revision PLM attributes
  CATListOfCATString iListAttributeName ;
  CATListOfCATUnicodeString iListAttributeValue ;

  iListAttributeName.Append(&quot;PLM_ExternalID&quot;);
  iListAttributeName.Append( CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());

  PLM_ExternalIDValue = iArgv[AttrValueIndex];
  RevisionValue      = iArgv[++AttrValueIndex];
		
  iListAttributeValue.Append(PLM_ExternalIDValue);
  iListAttributeValue.Append(RevisionValue);

  CATIAdpPLMIdentificator* opiIDComp = NULL;
  const char* iStrPLMType_ForRef = iArgv[6];
  const char* iStrPLMType_ForRepRef = iArgv[7];

  hr = CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
                                      iStrPLMType_ForRef,opiIDComp);
  ...
  if ((S_OK==hr) &amp;&amp; (NULL != opiIDComp)) // Components retrieved from database
  ...
  else
  { 
    hr = CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
                                        iStrPLMType_ForRepRef,opiIDComp);
    if(FAILED(hr) || (opiIDComp==NULL)) return 1;
    {	
      cout &lt;&lt;  "   Success in retrieving the Functional RepRef Identifier from db" &lt;&lt; endl;
    }
  }
  AdpIdentificatorListofFunctRefToDelete.Append(opiIDComp);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Loading Functional Reference/Rep Ref in Session</h3>
<p>Now we load the Functional Reference/Rep Ref in the session. We open the Functional 
Reference/Rep Ref for which we have retrieved identificator.</p>
<pre class="code">...
  <strong>CATOmbLifeCycleRootsBag Bag;</strong>
  <strong>CATAdpOpener</strong> opener(Bag);
  <strong>CATIPLMNavEntity</strong> *piNavEntityOnFunctComp= NULL;
  hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMNavEntity, (void**) &amp;piNavEntityOnFunctComp);
...</pre>
<p>A call to <code>CompleteAndOpen</code> of <em>CATAdpOpener</em> loads the Functional 
reference or Functional Representation Reference in the session of given identificator.</p>
<p>At a later stage we will unload this PLM Component from the current session. 
Hence, to have a control over the lifecycle of the input PLM Components, a <code>
BAG</code> is deployed. A call to <code>CompleteAndOpen</code> inserts the PLM Component 
in the <code>BAG</code>. Thus all input Functional Reference/Rep Ref Components 
are inserted within the <code>BAG</code>, thus letting the execution have selectively, 
a complete control over their lifecycle. Please refer to the tech article [<a href="#References">5</a>] 
to understand the details of the BAG concept.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Deleting the Input Functional Reference/Rep Ref Currently 
Loaded in the Session</h3>
<p>The input Functional Reference/Rep Ref are all loaded in the current session. 
An attempt to delete them is expected to fail, since a PLM Component can be deleted 
only if it is not loaded in the current session.</p>
<pre class="code">...
  hr = <strong>CATFctDeleteServices::DeleteFunctionalReferences</strong>(AdpIdentificatorListofFunctRefToDelete);
<span class="auto-style1">  </span><strong>if (S_OK == hr) return 1;</strong>
...</pre>
<p>The <code>CATFctDeleteServices::DeleteFunctionalReferences</code> call takes 
a list namely. <code>AdpIdentificatorListofFunctRefToDelete</code>, as an input. 
This list has the <code>Identificators</code> of all PLM Components(Functional Reference/Rep 
Ref) for deletion. Since this call is expected to return <code>FAILURE</code>, we 
exit the execution if it returns <code>SUCCESS</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Unloading the Input Functional Reference/Rep Ref from the 
Session</h3>
<p>We proceed to unload all the input PLM Components(Functional Reference/Rep Ref) 
from the current session, one of the pre-requisites to successfully delete a PLM 
Component, a &quot;<strong>short transaction</strong>&quot; operation done directly on the 
database.</p>
<pre class="code">...
  hr = <strong>Bag.RemoveAll</strong>();
...</pre>
<p><code>CATOmbLifeCycleRootsBag</code>::<code>RemoveAll</code> call empties the 
contents of the <code>BAG</code>, and thus unloads all PLM Components, controlled 
through this <code>BAG</code>, from the current session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Deleting the Input Functional Reference/Rep Ref just Unloaded 
from the Session</h3>
<p>The final step is to delete the input Functional Reference/Rep Ref from the database. 
Since none of the input components are loaded in the current session, the delete 
operation is expected to succeed, ofcourse, subject to the other pre-requisites 
for it, being met.</p>
<pre class="code">...
  hr = CATFctDeleteServices::DeleteFunctionalReferences(AdpIdentificatorListofFunctRefToDelete);
...</pre>
<p>The <code>CATFctDeleteServices::DeleteFunctionalReferences</code> call takes 
a list namely. <code>AdpIdentificatorListofFunctRefToDelete</code>, as an input. 
This list has the <code>Identificators</code> of all Functional Reference/Rep Ref 
Components for deletion. These <code>Identificators</code> are still valid, though 
the corresponding components have been unloaded from the current session. The technical 
article &quot;PLM Component Identifier&quot; [<a href="#References">1</a>] delves 
deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiDeletingFunctRef use case ends by simply closing the PLM session. Since 
all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic namely &quot;Connecting to V6 Server&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates the deletion of Functional objects(Functional Reference 
and Rep Ref) using the <code>CATFctDeleteServices::DeleteFunctionalReferences</code> 
API. It enables an end-user run a list of scenarios on a data model provided, which 
serve to clarify the following concepts related to the delete operation.</p>
<ul>
	<li>A Functional Reference can be deleted from the database, only if it does 
		not exist in the current session. Reason being, delete is a "short transaction" 
		operation done directly on the database.</li>
	<li>A Functional Reference cannot be deleted if an instance of it exists aggregated 
		under another Functional Reference, not contained in the list of References 
		for deletion.</li>
	<li>A Functional Rep Ref cannot be deleted if an instance of it exists aggregated 
		under another Functional Reference, not contained in the list of References 
		for deletion.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
