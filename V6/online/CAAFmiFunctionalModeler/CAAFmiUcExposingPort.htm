<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Parent-Child Connectivity</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Parent-Child Connectivity</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case use case simply Exposes Port (Parent-Child Connection).</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiExposingPort Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiExposingPort Do</a></li>
					<li><a href="#How">How to Launch CAAFmiExposingPort</a></li>
					<li><a href="#Where">Where to Find the CAAFmiExposingPort Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to expose Port (Parent-Child Connection). It 
creates the connection between two ports. One Port is aggregated under a Root Functional 
Reference, and other one under a child Functional Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiExposingPort Use Case</h2>
<p>CAAFmiExposingPort is a use case of the CAAFunctModelerUseItf.edu framework that 
illustrates CATFunctionalModelerUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiExposingPort Do</h3>
<p>In this Use case we create Parent to child Connection which results into exposition 
of Port.</p>
<p>In this use case we mainly retrieves following objects:</p>
<ul>
	<li>Child Instance (<code>CAAFmiExposingPort_ChildRef.1</code> ) aggregating 
		the Port (<code>ChildPort Emission</code>).</li>
	<li>Port which is aggregated under Root (<code>ParentPort Emission</code>).</li>
</ul>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Parent Child Ports</caption>
	<tr>
		<td>
		<img alt="Parent Child Ports" src="images/CAAFmiExposingPort_1.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig1">Fig. 1</a>] shows two ports one under child and one 
under Root.</p>
<p>Then we create connection (<code>ParentChildConnection</code>) between these 
two retrieved ports (One is under Root other is under child).</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Parent Child Connection</caption>
	<tr>
		<td>
		<img alt="Parent Child Connection" src="images/CAAFmiExposingPort_2.jpg"/></td>
	</tr>
</table>
<p>The above [<a href="#Fig2">Fig.2</a>] shows Parent Child Connection which represents 
exposition of Child Object Port through Root Object Port.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiExposingPort</h3>
<p>To launch CAAFmiExposingPort, you will need to set up the build time environment, 
then compile CAAFmiExposingPort along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFmiExposingPort Repository Server User Password SecurityCtx 
PLMType IDSetAttribute1 IDSetAttributeValue1 [IDSetAttribute1* IDSetAttributeValue1* 
...]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The String representing PLMType for the Functional objects</td>
	</tr>
	<tr>
		<th>IDSetAttribute1*</th>
		<td>First Identification Set(IDSet) attribute for the Functional Reference</td>
	</tr>
	<tr>
		<th>IDSetAttributeValue1*</th>
		<td>First IDSet attribute value for the Functional Reference</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the usable custo type of the Functional Reference 
to be opened.</p>
<p>CAAFmiExposingPort.3dxml is the 3D XML file contains the root Functional Reference 
with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAFmiExposingPort_RootRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiExposingPort Code</h3>
<p>The CAAFmiExposingPort use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAFunctModelerUseItf.edu\CAAFmiExposingPort.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAAFmiExposingPort use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving The Instance and the Ports through which Connection 
		Will Realize</a></li>
	<li><a href="#Step2">Creating Connection to Expose Port of Child Instance on 
		Root Level</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>We connect to the input repository and a PLM session is created. A PLM session 
is an environment essential for running a CAA use case. The article [<a href="#References">1</a>] 
delves further into the process of building and launching a CAA use case.</p>
<p>Here we open in Authoring mode [<a href="#References">3</a>] the Functional structure 
input provided by the use case . This input model contains one port under Root and 
Child instance with port to which this use case going to expose.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving The Instance and the Ports through which Connection 
Will Realize</h3>
<p>In this step we retrieve three objects from the input structure. Through these 
three objects will realize connection.</p>
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<ul>
	<li>Child Functional Instance. This instance is aggregated under the Root. (<strong>piFctConnectableOnChildFctInst</strong> 
		as a <em>CATIFctConnectable</em> interface pointer).</li>
	<li>Functional Port Aggregated by the Reference of FuncInst1 (Port Aggregated 
		under above Instance) (<strong>pFctConnectionPointOnPortAggregatedUnderChild</strong> as a
		<em>CATFctConnectionPoint</em> pointer).</li>
	<li>Functional Port Aggregated under Root (<strong>pFctConnectionPointOnPortAggregatedUnderRoot</strong> 
		as a <em>CATFctConnectionPoint</em> pointer).</li>
</ul>
<p><strong>With old API (handling only Ports)</strong></p>
<ul>
	<li>Child Functional Instance. This instance is aggregated under the Root. (<strong>piFunctInstanceOnChildFctInst</strong> 
		as a <em>CATIFctInstance</em> interface pointer).</li>
	<li>Functional Port Aggregated by the Reference of FuncInst1 (Port Aggregated 
		under above Instance) (<strong>piFunctPortOnPortAggregatedUnderChild</strong> as a
		<em>CATIFctPort</em> interface pointer).</li>
	<li>Functional Port Aggregated under Root (<strong>piFunctPortonPortAggregatedUnderRoot</strong> 
		as a <em>CATIFctPort</em> interface pointer).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Connection to Expose Port of Child Instance on 
Root Level</h3>
<p>Here we create Connection between the Port aggregated under Root and the Child 
Instance. This is Parent Child Connection, but effectively as we see that the Port 
which is representing Child Instance get exposed at root level through this Connection.</p>
<p><strong>With new API (handling Ports and Interfaces)</strong></p>
<pre class="code">...
	<strong>CATIFctConnection</strong> *opFunctionalConnection = NULL;
	hr = piFctConnectableOnRootRef-&gt;<strong>Connect</strong>(NULL_var,
		pFctConnectionPointOnPortAggregatedUnderRoot,
		piFctConnectableOnChildFctInst, 
		pFctConnectionPointOnPortAggregatedUnderChild,
		opFunctionalConnection);
...</pre>
<p>A call to <code>CATIFctConnectable::Connect</code> creates a connection which connects two 
Connection Point aggregated under Connectables. Here the first Connectable is the 
Root Reference (<code>piFctConnectableOnRootRef</code>) and its Connection Point is the 
Port aggregated under it (<code>pFctConnectionPointOnPortAggregatedUnderRoot</code>). 
The second Connectable is the Child Instance (<code>piFctConnectableOnChildFctInst</code>)
and its Connection Point is the Port under the Child Reference 
(<code>pFctConnectionPointOnPortAggregatedUnderChild</code>). </p>
<p>This API can be used for Parent-Child and Sibling Connectivity [<a href="#References">4</a>].</p>
<p><code>CATLogConnectionPoint</code> can be used for Interfaces and Ports.
So, <code>CATILogConnectable::Connect</code> can also being used to connect Interfaces [<a href="#References">5</a>].</p>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Logical 
connection type. The API will return Connection object.</p>
<p><strong>With old API (handling only Ports)</strong></p>
<pre class="code">...
	CATListValCATICkeParm_var iLFctAttributesValues;
	<strong>CATIFctConnection</strong> *opiFunctionalConnection = NULL;
	hr = piFunctPortonPortAggregatedUnderRoot-&gt;<strong>Connect</strong>(piFunctInstanceOnChildFctInst, 
					  piFunctPortOnPortAggregatedUnderChild,
					  NULL_var,
					  NULL, 
					  iLFctAttributesValues, 
					  opiFunctionalConnection);
...</pre>
<p>A call to <code>CATIFctPort::Connect</code> creates a connection which connects 
two ports:</p>
<ol>
	<li>One port is aggregated under Root: <code>piFunctPortonPortAggregatedUnderRoot</code>.</li>
	<li>An other port is under Child instance: <code>piFunctPortOnPortAggregatedUnderChild</code>.</li>
</ol>
<p>Here we pass <em>CATIType</em> as NULL_var this will select the appropriate Functional 
connection type. Then we pass Environment as NULL, due to this API will consider 
current environment as input (the input environment has been set as current previously). 
Then we pass attribute list which is empty since the attributes valuated by Business 
Logic internally. The API will return Connection object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAFmiExposingPort use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case basically illustrates the user how to expose a Port (Parent-Child 
Connection). It creates the connection between two ports. One Port is aggregated 
under a Root Functional Reference, and other one under a child Functional Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAFmiUcSiblingConnectivity.htm">Sibling Connectivity (Ports)</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAFmiUcSiblingConnectivityWithInterfaces.htm">Sibling Connectivity (Interfaces)</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2014]</td>
		<td>Updated to add New Connectivity API</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
