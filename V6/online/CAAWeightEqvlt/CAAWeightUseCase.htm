<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Reading Weights and Volumes in a Product Structure</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Reading Weights and Volumes in a Product Structure</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article discusses the CAAWeightUseCase use case. This use case explains 
		how to retrieve Weight and Volume in a Product Structure.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWeightUseCase Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAWeightUseCase Do</a></li>
					<li><a href="#How">How to Launch CAAWeightUseCase</a> </li>
					<li><a href="#Where">Where to Find the CAAWeightUseCase Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
<p>This use case is intended to show you how to access to the Weight and Volume 
in the Product Structure.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UseCase"></a>The CAAWeightUseCase Use Case</h3>
<p>CAAWeightUseCase is a use case of the CAAWeightEquivalentUseItf.edu framework 
that illustrates CATWeightEquivalentUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWeightUseCase Do?</h3>
<table>
	<caption>Fig.1: The Product Structure Inserted in the 3Dxml file.</caption>
	<tr>
		<td>
		<img alt="The Product Structure inserted in the 3Dxml file" height="604" src="images/CAAWeight1.jpg" width="807"/></td>
	</tr>
</table>
<p>Fig. 1 represents the product structure in standard representation mode.</p>
<table>
	<caption>Fig.2: Represents the Same Product Structure in Weight Definition Mode.</caption>
	<tr>
		<td>
		<img alt="Represents the same product structure in Weight Definition mode" height="604" src="images/CAAWeight2.jpg" width="807"/></td>
	</tr>
</table>
<p>Fig. 2 The product structure delivered with this use case contains a root product 
aggregating several instances:</p>
<ul>
	<li>- Each instance is an instance of one reference which has a declared weight.</li>
	<li>- The Weight at the root product level is the sum of the whole of the references 
		weights. This is a computed weight.</li>
</ul>
<table>
	<caption>Fig.3: Represents the Same Product Structure in Weight Distribution 
	Mode</caption>
	<tr>
		<td>
		<img alt="Represents the same product structure in Weight Distribution mode" height="604" src="images/CAAWeight3.jpg" width="807"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="How"></a>How to Launch CAAWeightUseCase</h4>
<p>To launch CAAWeightUseCase, you will need to set up the build time environment, 
then compile CAAWeightUseCase along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c <i> &quot;CAAWeightUseCase Repository Server Username Password SecurityCtx PLMType WCG_CAA_Sample_Root ---</i>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLMType </td>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1<i> </i></td>
		<td>WCG_CAA_Sample_Root</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version<i> </i></td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>]</li>
	<li>The PLMType is necessary to locate the component in database.</li>
	<li>The last two arguments respectively define the <strong>attribute name</strong> 
		and its <strong>value</strong> for the first attribute. If the authoring 
		customization requires more that one attribute, add as many couple ( attribute 
		name, attribute value) than required attribute.</li>
</ul>
<p><strong>Import PLM Data:</strong><br />
The use case may require input PLM Data: PLM Reference or PLM Representation Reference. 
This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must 
import these PLM Data in the database using the PLM Access / Import As 3D XML command 
prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAAWeightEquivalentUseItf.edu 
framework:</p>
<p><code>InstallRootDirectory\CAADoc\CAAWeightEquivalentUseItf.edu\InputData\WCG_CAA_Sample_Root.3dxml</code></p>
<p>where <code>InstallRootDirectory</code> [<a href="#References">1</a>] is the 
directory where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Where"></a>Where to Find the CAAWeightUseCase Code</h4>
<p>The CAAWeightUseCase use case is made of a single source file named CAAWeightUseCase.cpp 
located in the CAAWeightUseCase.m module of the CAAWeightEquivalentUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAWeightEquivalentUseItf.edu\CAAWeightUseCase.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>There are seven steps in CAAWeightUseCase:</p>
<ol>
	<li><a href="#Step1">Opening the 3D Data</a></li>
	<li><a href="#Step2">Retrieving the Root Product</a></li>
	<li><a href="#Step3">Computing the Weight at the Root Product Level</a></li>
	<li><a href="#Step4">Retrieving the Instances Children from the Root Product</a></li>
	<li><a href="#Step5">For Each Instance, Retrieving the Associated Reference 
		and the Declared or Computed Weight of This One</a></li>
	<li><a href="#Step6">Computing the Sum of the Whole of the References and Comparing 
		With the Computed Weight at the Root Product Level</a></li>
	<li><a href="#Step7">Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step1"></a>Opening the 3D Data</h4>
<pre class="code">...
// 1. Creates a PLM session and connect to the input repository
// ====================================================
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);

if (SUCCEEDED(hr))
{
 cout &lt;&lt; &quot;The Session has been opened&quot; &lt;&lt; endl;
}
else
{
  cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository&quot; &lt;&lt; endl;
  return rc;
}
...</pre>
<p>This section represents the usual sequence to create a session and intialize 
the environment.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step2"></a>Retrieving the Root Product</h4>
<pre class="code">...

const char* comp_PLMType = iargv[6];

// 3. Open the Root Reference
// ==========================
// Open Product in Authoring mode
CATIPLMRepInstances* piRepInstOnRoot= NULL;

// Entire product model is loaded
 // Open Product in Authoring mode: Entire product model is loaded
  CATBoolean ExpandAllMode = TRUE;
  CATOmbLifeCycleRootsBag Bag;
  
  hr = ::CAAOpenPLMComponent(comp_PLMType,comp_externalId,comp_version,
                             IID_CATIPLMRepInstances,(void **)&amp;piRepInstOnRoot,Bag,ExpandAllMode);

if(FAILED(hr) || (NULL==piRepInstOnRoot))
{
  cout &lt;&lt; &quot;Failure to open the product structure &quot; &lt;&lt; endl;
}</pre>
<p>The CAAOpenPLMComponent service encapsulates a set of CAA APIs [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step3"></a>Computing the Weight at the Root Product Level</h4>
<pre class="code">...
CATIPLMNavReference *piPLMNavRef = NULL;
  if (piRepInstOnRoot &amp;&amp; SUCCEEDED(piRepInstOnRoot-&gt;QueryInterface(IID_CATIPLMNavReference,(void **)&amp;piPLMNavRef)))
  {
    if (NULL != piPLMNavRef)
    {
      double oRelatedRootWeight = 0.0;
      double oRelatedRootVolume = 0.0;

      // 6. Compute of Weight &amp; Volume at the product root level.
      // ========================================================
      CATIEquivalentProxyBSMUse *myBSMExtRoot = NULL;
      HRESULT RC = piPLMNavRef-&gt;QueryInterface(IID_CATIEquivalentProxyBSMUse,(void**)&amp;myBSMExtRoot);
      if( (SUCCEEDED(RC)) &amp;&amp; (NULL != myBSMExtRoot) )
      {
        //by the way, we force its computation
        int iTryAnUpdate = 1;
        CATIComputedEquivalentUse * computedEquivalent = NULL ;
        myBSMExtRoot-&gt;RetrieveComputedExtension(computedEquivalent, 1) ;

        if (NULL != computedEquivalent)
        {
          if (SUCCEEDED(computedEquivalent-&gt;GetMass(oRelatedRootWeight)))
     ...</pre>
<p>The weight at the Root product level is a computed value.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step4"></a>Retrieving the Instances Children from the Root Product</h4>
<pre class="code">...
// 7. Loop on all instances from Root Product. 
// ===========================================
CATListPtrCATIPLMNavEntity childrenList;
CATPLMCoreType coreType = PLMCoreInstance;double oResultWeight = 0.0;
if( SUCCEEDED(piPLMNavRef-&gt;ListChildren(childrenList,1,&amp; coreType)) )
{
  int nbChildren = childrenList.Size();
  CATIPLMNavEntity * pChil = NULL;
  for ( int j = 1; j &lt;= nbChildren; j++ )
  {
    CATBaseUnknown_var spNavEntity = childrenList[j];
    if( NULL_var!=spNavEntity )
    {
      CATIPrdObject_var spPrd(childrenList[j]);
      if( NULL_var!=spPrd )
      {
     ...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step5"></a>For Each Instance, Retrieving the Associated Reference and 
the Declared or Computed Weight of This One</h4>
<pre class="code">...
        // 7.1 Retrieve the reference from the instance. 
        // =============================================
        CATIPLMNavReference * piRef = NULL;
        if( SUCCEEDED(spPrd-&gt;GetReferenceObject((CATBaseUnknown*&amp;)piRef,IID_CATIPLMNavReference)) )
        {
          // Retrieve the name of the reference
          CATUnicodeString refName;
          CATIPLMNavEntity *piPLMNavEnt=NULL;
          if (SUCCEEDED(piRef-&gt;QueryInterface(IID_CATIPLMNavEntity,(void **)&amp; piPLMNavEnt)))
          {
            CATListOfCATUnicodeString attrNameList, attrValueList;
            attrNameList.Append("PLM_ExternalID");
            hr = piPLMNavEnt-&gt;GetPublicAttributes( attrNameList, attrValueList);
            refName = attrValueList[1];
            piPLMNavEnt-&gt;Release();
            piPLMNavEnt=NULL;
          }

          CATIEquivalentProxyBSMUse *myBSMExt = NULL;
          hr = piRef-&gt;QueryInterface(IID_CATIEquivalentProxyBSMUse,(void**)&amp;myBSMExt);
          if((SUCCEEDED(hr)) &amp;&amp; (NULL != myBSMExt))
          {
            // 7.2 Retrieve the declared weight for the current reference. 
            // ===========================================================
            CATIDeclaredWeightEquivalentUse * declaredEquivalent = NULL;
            if (SUCCEEDED(hr))
            {
              myBSMExt-&gt;RetrieveDeclaredWeightExtension(NULL, declaredEquivalent);
              double oRelatedWeight = 0.;
              if (NULL != declaredEquivalent)
              {
                if (SUCCEEDED(declaredEquivalent-&gt;GetMass(oRelatedWeight)))
                {
                  oResultWeight+=oRelatedWeight;
                  cout &lt;&lt; &quot;Failure to open the product structure &quot; &lt;&lt; endl;
                  cout  &lt;&lt; &quot; The declared Mass for the &quot; &lt;&lt; refName &lt;&lt; &quot; reference = &quot;&lt;&lt; oRelatedWeight &lt;&lt; endl;
                }
                else
                  cout  &lt;&lt; &quot; "Problem to compute the mass for the reference = &quot;&lt;&lt; refName &lt;&lt; endl;

              declaredEquivalent-&gt;Release();
              declaredEquivalent = NULL;
            }
            // 7.3 Retrieve the Computed weight for the current reference. 
            // ===========================================================
            else
            {
              CATIComputedEquivalentUse * computedEquivalent = NULL;
              myBSMExt-&gt;RetrieveComputedExtension(computedEquivalent);

              if (NULL != computedEquivalent)
              {
                if (SUCCEEDED(computedEquivalent-&gt;GetMass(oRelatedWeight)))
                {
                  oResultWeight+=oRelatedWeight;
                  cout &lt;&lt;  &quot;The computed Mass for the &quot;&lt;&lt;  refName &lt;&lt;  &quot; reference = &quot;&lt;&lt;  oRelatedWeight &lt;&lt; endl &lt;&lt;  endl;
                }
                else
                  cout &lt;&lt;  &quot;Problem to compute the mass for the reference = &quot;&lt;&lt;  refName &lt;&lt;  endl;

                computedEquivalent-&gt;Release() ;
                computedEquivalent = NULL ;
              }
            }

            myBSMExt-&gt;Release() ;
            myBSMExt = NULL ;
          }

        }
        piRef-&gt;Release();piRef=NULL;
      }
    }
  }
 }
 }
...</pre>
<p>the reference is retrieval from the current instance. The weight of a reference 
can be computed from the volume and its material (Support reference) or declared 
for others references .</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step6"></a>Computing the Sum of the Whole of the References and Comparing 
With the Computed Weight at the Root Product Level</h4>
<pre class="code">...
// 8. Check of results:
// =====================
if (CATFabs(oRelatedRootWeight - oResultWeight) &lt; 0.0001)
{
  rc = 0;
  cout &lt;&lt; " Computed OK" &lt;&lt; endl;
}
else
{
  cout &lt;&lt;&quot; oResultWeight = &quot; &lt;&lt; oResultWeight &lt;&lt; endl;
  cout &lt;&lt;&quot; oRelatedRootWeight = &quot; &lt;&lt; oRelatedRootWeight &lt;&lt; endl;
  cout &lt;&lt; &quot; Computed KO &quot; &lt;&lt; endl;
}

...</pre>
<p>The computed weight at the root product level is equal to the sum of the weights 
(computed or declared) of the references used in the product structure [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step7"></a>Closing the Session</h4>
<pre class="code">...
// 9. Close the PLM session
  //=======================
hr = Bag.RemoveAll();
hr = ::CAAAdpCloseSession();
if (FAILED(hr)) {
cout &lt;&lt; &quot;ERROR closing PLM session&quot; &lt;&lt; endl;
rc =1; 
}
else
cout &lt;&lt; &quot; PLM session closed&quot; &lt;&lt; endl;

cout &lt;&lt; &quot;CAAWeightUseCase ended&quot; &lt;&lt; endl;
return rc;
}</pre>
<p>This section represents the usual sequence for closing a CATIA Session reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="InShort"></a>In Short</h3>
<p>This use case shows the way to:</p>
<ol>
	<li>Opening a product reference and scan the instances aggregated by the Root 
		Product.</li>
	<li>Retrieving a computed Weight at the Root product level.</li>
	<li>Retrieving the declared or computed Weight for each reference pointed by 
		an instance aggregated by the root.</li>
	<li>Closing the Session.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="References"></a>References</h3>
<table>
	<tr>
		<td valign="top">[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td valign="top">[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModeler/CAAPstUcBrowsingProductModel.htm');return false;">
		Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td valign="top">[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAWeightEqvlt/CAAWCGOverview.htm');return false;">
		Weight &amp; Center of Gravity Overview</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="History"></a>History</h3>
<table>
	<tr>
		<td>Version: <strong>1</strong> [March 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
