<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating Dialog Panel Based On PLM Mask</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>


</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Dialog Panel Based On PLM Mask&nbsp; </h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -------------------------------comment---------------------------------- -->
<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This Use Case illustrates the steps involved in the CAA customization 
		to build a dialog panel to interactively valuate a list of attributes, 
		provided as one of the inputs for various PLM entity processing. For 
		example, if a PLM Entity type is to be searched for, in the underlying 
		database, it requires a list of attribute-value sets to build a database 
		query. We could thus build a dialog panel with those attributes listed 
		in it, seeking the values for those from an end-user.</p>
		<p>A mask plays a key role in these interactive operations on a PLM 
		entity, since its the Mask which determines the list of attributes for 
		interactive valuation by an end-user corresponding to a PLM Entity 
		processing on a specific Knowledge type. The Technical Article &quot;PLM Security Mask 
		Overview&quot; [<a href="#References">2</a>] 
		details the Mask concept and is a useful reference in the current 
		context.</p>
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpCreatingDlgBasedOnKnwTypeAndMask Use Case</a>
          <ul>
            <li><a href="#What">What Does CAAAdpCreatingDlgBasedOnKnwTypeAndMask Do</a></li>
            <li><a href="#How">How to Launch CAAAdpCreatingDlgBasedOnKnwTypeAndMask&nbsp;</a></li>
            <li><a href="#Where">Where to Find the CAAAdpCreatingDlgBasedOnKnwTypeAndMask&nbsp;Code</a></li>
          </ul>
        <li><a href="#Step">Step-by-Step</a></li>
        <li><a href="#InShort">In Short</a></li>
        <li><a href="#References">References</a></li>
      </ul>
      </table>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The most important learnings for an end-user from this Use Case are:</p>
<ul>
	<li>The Knowledge capabilities to retrieve a list of attributes associated 
	with a PLM Entity processing for a specific knowledge type. In the process 
	user gets an understanding of the Mask concept and the way it is actually 
	deployed in real life applications</li>
	<li>The Knowledge capabilities which &nbsp;enable us build a dialog frame 
	directly associated with each PLM Attribute, thus letting an end user 
	valuate and update an attribute list at run time, in sync with the value 
	input by the user in the Knowledge panel</li>
</ul>
 <script type="text/javascript">insertLinkToTop();</script>
<h2><a name="UseCase"></a>The CAAAdpCreatingDlgBasedOnKnwTypeAndMask&nbsp;Use Case</h2>
<p><code>CAAAdpCreatingDlgBasedOnKnwTypeAndMask</code> is a use case of the <code>CAAPLMClientAdapter</code>.<code>edu</code>
framework that 
mainly illustrates <code>KnowledgeInterfaces</code> frameworks capabilities.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h3><a name="What"></a>What Does<b>  CAAAdpCreatingDlgBasedOnKnwTypeAndMask </b>Do</h3>
<p>This UC fundamentally illustrates the steps involved to build a dialog panel 
to interactively valuate a list of attributes, an input for PLM Entity 
processing. It could be either creating a PLM entity or searching for an entity 
type in an underlying database.</p>
<p>To begin with, on Command launch the dialog panel as depicted in [<a href="#Fig.1">Fig.1</a>] 
appears.It lists the Mask types in a dedicated combo.</p>
<table cellspacing="1" class="style1">
	<caption style="width: 564px"><a name="Fig.1"></a>Fig.1 PLM&nbsp; Type and Mask Type Selection 
	Dialog Panel </caption>
	<tr>
		<td>
		<img alt="" src="images/PLMTypewithMaskTypeInputDLg.jpg"></td>
	</tr>
</table>
<p>User selects the PLMType, and Mask of his choice from the drop 
down combo. </p>
<p>With these inputs, user clicks on &quot;Launch Dialog&quot;. An action associated with 
this event, launches the dialog panel as depicted in [<a href="#Fig.4">Fig.2</a>] 
below.</p>
<table cellspacing="1" class="style1">
	<caption><a name="Fig.2"></a>Fig.2 Sample Dialog Panel For Create</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAdpUcCreatingDlgBasedOnMask_CreateMask.jpg"></td>
	</tr>
</table>
<p>The dialog panel above simply lists the attributes made available for 
end-user valuation, to be provided as an input for the PLM entity processing, 
determined by the Mask, user chose in the earlier panel.</p>
<p>Thus, for example, if the user has chosen MaskCreate, [<a href="#Fig.4">Fig.2</a>] 
will depict a panel with a list of attributes for valuation, for PLM Entity 
creation.&nbsp;</p>

<table cellspacing="1" class="style1">
	<caption style="width: 564px"><a name="Fig.1"></a>Fig.3 PLM&nbsp; Type and Mask Type Selection 
	Dialog Panel </caption>
	<tr>
		<td>
		<img alt="" src="images/PLMTypewithMaskTypeInputDLg_Query.jpg"></td>
	</tr>
</table>
<p> If the Mask chosen is QueryMask, the attribute list valuated through panel in [<a href="#Fig.4">Fig.4</a>] will serve as an input for creating a database query. 
</p>

<table cellspacing="1" class="style1">
	<caption><a name="Fig.2"></a><a name="Fig.4">Fig.4 Sample Dialog Panel For Query 
	</a> </caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAdpUcCreatingDlgBasedOnMask_QueryMask.jpg"></td>
	</tr>
</table>

<p>The knowledge capabilities have been effectively leveraged in this Use Case. 
First to retrieve a list of attributes associated with processing a PLM Entity 
(Mask) of a specific knowledge type.&nbsp;And then, with the knowledge parameters 
corresponding to the PLM attributes, a dialog frame is built [<a href="#Fig.4">Fig.2</a>], which at 
run time valuates a list of attributes in sync with the user inputs to this 
Knowledge panel. The list then readily serves (without further processing) as an 
input for various PLM entity processing done subsequently.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a href="#Where" name="How"></a>How to Launch CAAAdpCreatingDlgBasedOnKnwTypeAndMask</h3>
<p>To launch <code>CAAAdpCreatingDlgBasedOnKnwTypeAndMask</code> , you will need to set up the build time environment,
then compile <code>CAAAdpCreatingDlgBasedOnKnwTypeAndMask</code> along with its prerequisites, set up the run time
environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><b>Connect</b> to the database</li>
	<li>On the Action Bar Area Right click <b>-&gt; Customize</b> and check that 
	the <b>CAA PLM Mask</b> (<a href="#Addin">See Addin 
	section</a>) is existing.</li>
	<li>Launch &quot;Create Dialog Panel Based On PLM Mask&quot; command
	<table cellspacing="1" class="style1">
		<tr>
			<td>
			<img src="images/CAAAdpUcCreatingDlgBasedOnMask_image3.jpg" width="28" height="26"></td>
		</tr>
	</table>
	</li>
</ul>
 <script type="text/javascript">insertLinkToTop();</script>
<b><h3><a name="Addin"></a>Addin Access</h3>
</b><p>The&nbsp; <b>PLM Client Adapter</b>&nbsp; Add-In to the General workshop within CATIA, is
available thanks to a data extension of the <code>CAAAdpGeneralWksAddin</code>
component.&nbsp; This necessitates the following entries in the .<code>dico</code> file 
[<a href="#References">1</a>].</p>
<table class="code" id="table9">
  <tr>
    <td>
      <pre>...
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIWorkbenchAddin libCAAAdpGeneralWksAddin
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIAfrGeneralWksAddin libCAAAdpGeneralWksAddin
...</pre>
    </td>
  </tr>
</table>
<p>Before launching CATIA, uncomment the above lines&nbsp;(remove bold chars) in the <code>CAAPLMClientAdapter</code>.<code>edu</code>.<code>dico</code>.
These primarily indicate that the add-in is fundamentally a <code><i> CATIWorkbenchAddin</i></code>
and a <code><i>CATIAfrGeneralWksAddin</i></code> implementation residing in the
<code>CAAAdpGeneralWksAddin</code> shared lib. </p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h3><a name="Where"></a>Where to Find the CAAAdpCreatingDlgBasedOnKnwTypeAndMask Code</h3>
<p>The <code>CAAAdpCreatingDlgBasedOnKnwTypeAndMask<b> </b></code> use case is made of several 
classes spread across multiple files&nbsp; located in
the <code>CAAAdpMaskedFilteredAttributesValueEditor.m</code> module of the
<code>CAAPLMClientAdapter<b>.</b>edu</code> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\CAAAdpMaskedFilteredAttributesValueEditor.m\</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">3</a>] is the directory where the CAA CD-ROM
is installed.</p>
<ul>
	<li><code>CAAAdpCreatingDlgBasedOnKnwTypeAndMaskhdrCmd</code>.<code>cpp</code>&nbsp;
      is the command
      implementation.&nbsp;</li>
	<li><code>CAAAdpPLMClassAndMaskChoiceDlg.cpp</code> as seen in the [<a href="#Fig.1">Fig.1</a>] and <code>CAAAdpMaskedFilteredAttributesValueEditorDlg.cpp</code> 
	as seen in the [<a href="#Fig.4">Fig.2</a>] are the dialog boxes.</li>
</ul>
<p>The utility for retrieving masked PLM Attributes is&nbsp; located in 
<code>CAAAdpUtilities.m</code> module </p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></td>
  </tr>
</table>
<ul>
	<li><code>CAAAdpRetrieveListOfFilteredAttributesFromMask.cpp</code> is the utility method 
	for retrieving Masked PLM Attributes.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<table id="table10">
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\</code><code>CAAAdpGeneralWksAddin</code><code>.m\</code></td>
  </tr>
</table>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The only most important step in the <code>CAAAdpCreatingDlgBasedOnKnwTypeAndMask</code> 
use case is</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Build first panel">Build a Dialog Panel to Seek User Inputs 
	(PLM Type, PLM Mask)
	</a> </li>
	<li>
	<a href="#Retrieve Knowlwdge type">Retrieve the Knowledge Type</a></li>
	<li><a href="#knowledge dialog">Build a "PLM Processing Inputs" Knowledge Dialog</a></li>
</ol>
 <script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Prolog"></a>Prolog</h3>
<p>A dialog-box based command &quot;<b>Creating Dialog Panel Based on PLM Mask</b>&quot; is integrated 
within the General Workshop of CATIA, as a part of its PLM Client Adapter 
Add-in.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Build first panel"></a>Build a Dialog Panel to 
Seek User Inputs (PLM Type, PLM Mask Type) </h3>
<pre class="code">
CATStatusChangeRC CAAAdpCreatingDlgBasedOnKnwTypeAndMaskhdrCmd::Activate(CATCommand   * iPublishingCommand,
						                  CATNotification     * iNotification)
{    
...
<b>   CAAAdpPLMClassAndMaskChoiceDlg  * _pPLMClassChoiceDlg = new CAAAdpPLMClassAndMaskChoiceDlg();
</b>   _pPLMClassChoiceDlg-&gt;Build()<b>;
...</b></pre>
 

<p>Our <em>CATCommand</em> instantiates this panel User inputs the PLM Type 
and Mask through it. </p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve Knowlwdge type"></a>Retrieve the Knowledge 
Type</h3>

<p>With the input PLM Type String&nbsp; the UC computes CATIType.</p>
<pre class="code">
...
    
    CATIType_var spCATType;
	hr= CATCkePLMNavPublicServices::RetrieveKnowledgeType(iStrPLMType,spCATType);
	if  (  NULL_var ==  spCATType ) 
	{
		hr= CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType(iStrPLMType,spCATType);
		CustoCase = TRUE ;
		...
</pre>
<h3>
<a name="knowledge dialog"></a>Build a &quot;PLM Processing Inputs&quot; Knowledge 
Dialog </h3>

<p>At this stage the Knowledge type was retrieved in the earlier step. The Mask 
type, which determines the kind of processing (Create, Edit, Search) to be done 
on the PLM entity type (Knowledge type) is also input by user. The kind of 
processing on a specific knowledge type determines the list of attributes 
provided as input for the PLM operation and available for interactive valuation 
by an end-user. The Knowledge capabilities enable us not only retrieve this list 
of attributes but also create an interactive Knowledge panel which is directly 
associated with this retrieved list of attributes. This direct association 
enables us a synchronized update of our list of attributes, as and when the user 
inputs or updates the attribute values through the knowledge panel. The steps 
involved in creating this Knowledge panel forms the crux of the current Use 
Case, and are detailed below.</p>
<p>On &quot;Launch dialog&quot; click of the previous dialog panel, the action associate 
builds a knowledge panel, with a list of attributes for end user. The dialog 
panel is instantiated with primarily two inputs Knowledge Type and Mask Type</p>

<pre class="code">
void <strong>CAAAdpMaskedFilteredAttributesValueEditorDlg::Build</strong>()
{
    ...
   hr = <strong>CAAAdpRetrieveListOfFilteredAttributesFromMask</strong>(_iListOfAttributes,_strPLMMask,_piTypeOnInputUsableType);
   ...
</pre>
<p>The dialog build method begins with a call to 
<code>CAAAdpRetrieveListOfFilteredAttributesFromMask</code> its a Knowledge 
utility service provided within our CAA EDU workspace. Its implementation 
follows:</p>
<pre class="code">
<strong>CAAAdpRetrieveListOfFilteredAttributesFromMask</strong>(CATListValCATAttributeInfos &amp;oListOfAttrInfo,
					 CATUnicodeString strMaskType,
					 const CATIType_var&amp; iKweType)
{
   ...
   if(0==strcmp("MaskCreate",strMaskType))
  {
      hr = <strong>CATCkePLMNavPublicServices::ListFilteredAttributesFromMaskAndType(iKweType,NULL,</strong>
                                                       CATCkePLMTypeAttrServices::MaskCreate,
                                                       oListOfAttrInfo); 
   ...
}
</pre>

<p>The knowledge API <strong>CATCkePLMNavPublicServices::ListFilteredAttributesFromMaskAndType</strong> returns is a list of attributes 
[<a href="#References">4</a>] available for end user 
valuation for PLM Processing (CreateMask, QueryMask determined) on the knowledge 
type input, each attribute is retrieved as a <em>CATAttributeInfos</em> type. </p>
<p>Next, we create label associated with each attribute.</p>
<pre class="code">
...
   CATUnicodeString strNLSName = "" ;
   hr = <strong>CATAttributeInfos</strong><strong>::GetNLSName(_piTypeOnInputUsableType,AttrInfo,strNLSName);
</strong>   ...
   CATDlgLabel * pLblAttrNlsName = new CATDlgLabel(this, "Label");
<strong>   pLblAttrNlsName-&gt;SetTitle(strNLSName);
</strong>...
</pre>
<p>The call to <code>CATAttInfos::GetNLSName()</code> returns us the NLS name associated with each attribute in the context of an input Knowledge type. 
Please note A same attribute can have 2 NLS names for two types of the same hierarchy. As an example, the PLM_ExternalID attribute is inherited by PLMProductDS from the VPMReference, up its hierarchy. So, its quite possible that PLM_ExternalID could have a different NLS names for these two types.</p>
<p>Next, we build the label and set its title to the NLS name of the attribute, 
we just retrieved. </p>
<p>We proceed to build an edit control for each attribute, through which user can input values.</p>
<pre class="code">
...
   CATICkeParm_var spCkeParmWithDefaultValue;
<strong>   hr = AttrInfo.GetDefaultValue(spCkeParmWithDefaultValue);
</strong>...
</pre>
<p>The call to <code>CATAttributeInfo::GetDefaultValue()</code> returns us a Knowledge Parameter, as a 
<em>CATICkeParm</em> type (<code>spCkeParmWithDefaultValue</code>). A Knowledge Parameter is a variable with a name and a content that can be passed as an argument of a Knowledge expression for further evaluation.

</p>
<p>In our case though, please note, the Parameter returned (<code>spCkeParmWithDefaultValue</code>) has only the Attribute default value in it, but not the attribute name. We set the Parameter with the attribute name in the step ahead.</p>

<pre class="code">
...
<strong>CATICkeParm_var ClonedCkeParm = CATCkeGlobalFunctions::GetVolatileFactory()-&gt;Copy</strong>(<strong>spCkeParmWithDefaultValue);
</strong><strong>ClonedCkeParm-&gt;Rename(AttrInfo.Name());
</strong>...
</pre>


<p>Before we set the Attribute Name,  an important point to note. The <code>CATAttributeInfos::GetDefaultValue()</code> call returns us a Knowledge Parameter, an alias which points  to the  default attribute value. &#8220;Alias&#8221; in bold to emphasize that if the caller modifies the Knowledge parameter, he effectively ends up modifying the default value stored in the Attribute Info object, which is not recommended.</p>
<p>Hence, it is proposed that we clone the Knowledge Parameter, and proceed further with our processing, with this cloned copy. </p>
<p>The call to <code>CATCkeGlobalFunctions::GetVolatileFactory()</code> returns us a Factory for creating Parameters.</p>
<p>The call to <code>CATICkeParmFactory::Copy</code> creates a copy (<code>ClonedCkeParm</code>) of an input Knowledge Parameter (<code>spCkeParmWithDefaultValue</code>)</p>
<p>We finally set the attribute name on the cloned Parameter with a call to <code>CATICkepParm::Rename()</code>. The input is the Attribute Name, retrieved 
from attribute info.</p>
<p>Next, we further leverage the Knowledge capabilities to build an editor from a Parameter.</p>
<pre class="code">
...
<strong>   CATICkeParamFrame_var _spCkeParamFrameOnFeatureParam1 = ClonedCkeParm; 
...</strong>					
   CATDlgFrame* pParamFrame = NULL;
<strong>   pParamFrame = _spCkeParamFrameOnFeatureParam1 -&gt;GetInPanelEdition</strong> <strong>
	                                          (NULL_var,
	                                          this,
	                                          CATCkeNoLabel|CATCkeNoRename|CATCkeNoFormula,
	                                          (AttrInfo.Name()));</strong>
...
</pre>
<p>The <code>CATICkeParamFrame::GetInPanelEdition()</code> implementation on a Knowledge Parameter returns us an dialog frame. The typical characteristic of this frame is that it is directly linked (associated) with the parameter it was built from. Meaning, any value input or modified by user through this editor, results in updating the associated Parameter at runtime (in sync).  Thus, lets assume that user overrides the default value with his own value in the editor, it results in a synchronized update of our Cloned Parameter, as well.</p>
<p>Lastly we append our cloned parameters to a list, and store it within our Knowledge Panel class.</p>
<pre class="code">
...
    <strong>_oListValCATICkeParm.Append(ClonedCkeParm);</strong>
...
</pre>
<p>Any application which accesses the Knowledge Panel service, simply retrieves this list for further processing. Thus if a PLM Entity is to be created, it has to simply seek this list from the knowledge panel to further provide it as an input for the creation process.</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="InShort"></a>In Short</h2>
      <p>This Use Case illustrates the steps involved in the CAA customization 
		to build a dialog panel to interactively valuate a list of attributes, 
		provided as one of the inputs for various PLM entity processing. For 
		example, if a PLM Entity type is to be searched for, in the underlying 
		database, it requires a list of attribute-value sets to build a database 
		query. We could thus build a dialog panel with those attributes listed 
		in it, seeking the values for those from an end-user.</p>
<p>In the process the UC illustrates the Knowledge capabilities fundamentally 
to&nbsp;</p>
<ul>
	<li>Retrieve a list of attributes associated with a PLM Entity processing 
	for a specific knowledge type. The Mask capabilities were leveraged here</li>
	<li>To&nbsp; build a dialog frame directly associated with each PLM 
	Attribute, thus letting an end user valuate and update an attribute list at 
	run time, in sync with the value input by the user in the Knowledge panel</li>
</ul>
<p>The list of attribute-value set, thus built then serve as input for PLM 
entity processing, in the subsequent stages. (beyond the scope of the current 
Use Case)&nbsp;</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="References"></a>References</h2>
<table>
  <colgroup>
		<col valign="top" span="1">
	</colgroup>
   <tr>
    <td>[1]</td>
    <td><a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">Creating
      an Add-in</a></td>
  </tr>
  <tr>
    <td>[2]</td>
    <td>
	<a href="../CAAPLMAllConcepts/CAAPLMTaAllMask.htm">PLM Security Mask Overview</a></td>
  </tr>
  <tr>
    <td>[3]</td>
    <td><a href="../CAADocUseCases/CAADocRunSample.htm">Building
      and Launching a CAA Use Case</a></td>
  </tr>
  <tr>
    <td>[4]</td>
    <td>
       <a href="CAAPLMTaAllKnowPLMAttributes.htm">Accessing PLM Attributes</a></td>
  </tr>
    <tr>
    <td>[5]</td>
    <td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPstProductModeler/CAAPstUcCreationOfProductRefrenceUIUsingCreateMask.htm')">Creating a Product Reference Interactively Product</a></td>
  </tr>

</table>

<!-- -------------------------------comment---------------------------------- -->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2009]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
 <script type="text/javascript">insertLinkToTop();</script>
   </tr>
</table>

<!-- -------------------------------comment---------------------------------- -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


