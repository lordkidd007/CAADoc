<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Working With PLM Mask</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Working With PLM Mask</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -------------------------------comment---------------------------------- -->
<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This is an interactive Use Case which demonstrates retrieving Attributes of a 
      PLM Object, governed by a 
      Query Mask criteria. User then valuates these attributes, a query is built 
      and run on an underlying database to output a set of PLM Objects 
      conforming to the query run.</p>
      <p>The Use Case is driven by a dialog-box based command, a part of the <b>
      PLM Client Adapter </b>Add-In to the <b>General Workshop </b>within <b>CATIA.</b> We have dedicated articles on <b> Add-ins</b> [<a href="#References">1</a>]
      and <b> Dialog-box</b> based commands [<a href="#References">2</a>].</p>
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpWorkingWithPLMMaskhdrCmd Use Case</a>
          <ul>
            <li><a href="#What">What Does CAAAdpWorkingWithPLMMaskhdrCmd Do</a></li>
            <li><a href="#How">How to Launch CAAAdpWorkingWithPLMMaskhdrCmd&nbsp;</a></li>
            <li><a href="#Where">Where to Find the CAAAdpWorkingWithPLMMaskhdrCmd&nbsp;Code</a></li>
          </ul>
        <li><a href="#Step">Step-by-Step</a></li>
        <li><a href="#InShort">In Short</a></li>
        <li><a href="#References">References</a></li>
      </ul>
      </td>
    </tr>
  </table>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case mainly we learn how to use masked attributes interactively 
for Query purpose.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<h2><a name="UseCase"></a>The CAAAdpWorkingWithPLMMaskhdrCmd&nbsp;Use Case</h2>
<p><code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> is a use case of the <code><b>CAAPLMClientAdapter</b></code>.<code><b>edu</b></code>
framework that 
mainly illustrates <code><b>KnowledgeInterfaces</b></code> frameworks capabilities.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h3><a name="What"></a>What Does<b>  CAAAdpWorkingWithPLMMaskhdrCmd&nbsp;</b>Do</h3>
<p>The <code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> use case is 
fundamentally a command integrated in CATIA to demonstrate interactively the 
process to retrieve a list of attributes associated with a PLM Object, which 
are governed by a Query Mask criteria. A Query panel is then built which enables 
an end-user to valuate these masked attributes, and thus build and launch a 
query on an underlying database to seek those PLM Objects, which satisfy an 
input query criteria.</p>
<p>This command is a part of the &quot;<b>CAA PLM Mask</b>&quot; toolbar, a
<b>PLM Client Adapter</b>&nbsp; Add-In in the <b> General Workshop</b> within <b>CATIA</b>.</p>
<p>This toolbar is listed in the <b>Customize</b> dialog panel, in its <b>
Toolbars</b> tab, as <a href="#Fig.1">Fig.1</a> depicts.</p>
<p>&nbsp;<a name="Fig.1"></a>Fig.1 Tools --&gt; Customize --&gt;Toolbar UI </p>
<table border="0" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td width="100%"><img border="0" src="images/CAAAdpWorkingWithPLMMaskhdrCmd_Tools_Cust_Toolbar.jpg" width="464" height="397"></td>
  </tr>
</table>
<ul>
	<li><a href="#Fig.2">Fig.2</a> depicts the &quot;<b>CAA PLM Mask</b>&quot; 
    toolbar with the &quot;<b>Working With PLM Mask</b>&quot; command which appears as an icon <img border="0" src="images/CAAPstListPLMComponent_Icon.jpg" width="22" height="22">&nbsp;&nbsp;within 
    it.<table border="0" width="100%" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
      <caption>
        <p align="left"><a name="Fig.2"></a>Fig.2 &quot;<b>CAA PLM Mask</b>&quot;<i>
        </i>Toolbar<i> with the newly added </i>&quot;<b>Working With PLM Mask</b>&quot;
        <i>command</i></caption>
      <tr>
        <td width="100%"><img border="0" src="images/CAAPstListPLMComponent_Toolbar.jpg" width="43" height="65">&nbsp;&nbsp;</td>
      </tr>
    </table>
</ul>
<ul>
	<li>On activating&nbsp;&nbsp;<img border="0" src="images/CAAPstListPLMComponent_Icon.jpg" width="22" height="22">, a new dialog
      box titled &quot;<b>PLM Class Choice</b>&quot;
      will
      appear, as shown in <a href="#Fig.3">Fig.3</a>.&nbsp; The main purpose 
    of this panel is to select PLM Type for Query.</li>
</ul>
<table >
    <caption> <a name="Fig.3"></a>&nbsp;Fig 3. PLM Class Choice Dialog</caption>
    <tr>
        <td width="100%">
        <img alt="" src="images/PLMClassChoice.jpg" width="199" height="115"></td>
      </tr>
 </table>
<p>This dialog box displays list of all PLMTypes for default repository 
(repository to which the current session connects to). </p>
<p>User then selects a PLM type. The query to be launched on an underlying 
database, is for a PLM Object of this type. User then clicks on the&nbsp; &quot;<b>Launch 
Query Dialog</b>&quot; button, in response to which a &quot;<b>Query panel</b>&quot; 
as seen in [Fig. 4] is built.</p>
<p>In addition to the type, the masked attributes associated with the 
type suitably valuated, are also essential inputs for building a database query. 
Hence the Use Case retrieves these masked attributes for the PLM Type, 
appends a label-EditBox dialog elements set within the Attribute-Values frame to 
the query panel, and thus, on the run updates it. One such update for a <strong>
VPMReference</strong>, as depicted in [Fig. 4] below.</p>
<p>This implies that for each type which has a different set of masked 
attributes associated with it, a custom query panel like the one seen below, but 
with dialog elements for a different set of attributes, will be built. A multi 
list also exists within this query panel, to displays the results of the query.</p>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111">
  <caption><a name="Fig.4"></a>Fig 4. Query Dialog</caption>
  <tr>
    <td width="100%">
        <img alt="" src="images/QueryonPLMType.jpg" width="467" height="629"></td>
      </tr>
  
</table>
<p>At this stage, the user suitably valuates the masked attributes displayed 
above, inputs for building a&nbsp; query criteria of his choice. Next, the 
&quot;Query&quot; button is clicked in response to which an attribute set (query criteria) 
is built and run on an underlying database.</p>
<p>The results of this query execution are then displayed in the multilist, as 
seen&nbsp; above. Each row in the multilist corresponds 
to a set of attribute values of a PLM Object queried from the database. In 
other words, the total count of the PLM Objects returned by the query is thus 
exactly equal to the rows that finally occur in this multilist.</p>
<p>Please note that here in this use case the query criteria (attribute set) has 
been built with only &quot;String&quot; type PLM Attributes. This filtering is mandatory 
since the CAA API which launches a query on an underlying database, processes 
only &quot;String&quot; type attributes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a href="#Where" name="How"></a>How to Launch CAAAdpWorkingWithPLMMaskhdrCmd</h3>
<p>To launch <code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> , you will need to set up the build time environment,
then compile <code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> along with its prerequisites, set up the run time
environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><b>Connect</b> to the database</li>
	<li>On the <b>Tools</b> menu click <b>Customize</b> and check that 
	the <b>CAA PLM Mask</b> (<a href="#Addin">See Addin 
	section</a>) is existing ,as shown in <a href="#Fig.1">Fig.1</a> above.
      User can
      set the visibility of the created toolbar in the <b>View</b>-&gt;<b>Toolbars
      </b>option.</li>
</ul>
<p>The <a href="#What">What Does <code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> Do</a> 
section provides further details on the steps ahead. </p>
 <script type="text/javascript">insertLinkToTop();</script>
<b><h3><a name="Addin"></a>Addin Access</h3>
</b><p>The&nbsp; <b>PLM Client Adapter</b>&nbsp; Add-In to the General workshop within CATIA, is
available thanks to a data extension of the <code><b>CAAAdpGeneralWksAddin</b></code>
component.&nbsp; This necessitates the following entries in the .<code><b>dico</b></code> file.</p>
<table class="code" id="table9">
  <tr>
    <td>
      <pre>...
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIWorkbenchAddin libCAAAdpGeneralWksAddin
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIAfrGeneralWksAddin libCAAAdpGeneralWksAddin
...</pre>
    </td>
  </tr>
</table>
<p>Before launching CATIA, uncomment the above lines&nbsp;(remove bold chars) in the <code><b>CAAPLMClientAdapter</b></code>.<code><b>edu</b></code>.<code><b>dico</b></code>.
These primarily indicate that the add-in is fundamentally a <code><b><i> CATIWorkbenchAddin</i></b></code>
and a <code><b><i>CATIAfrGeneralWksAddin</i></b></code> implementation residing in the
<code><b>CAAAdpGeneralWksAddin</b></code> shared lib. </p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h3><a name="Where"></a>Where to Find the CAAAdpWorkingWithPLMMaskhdrCmd Code</h3>
<p>The <code><b>CAAOmbListPLMComponent</b></code> use case is made of several 
classes spread across multiple files&nbsp; located in
the <code><b>CAAAdpCommands</b></code>.<code><b>m</b></code><code><b> </b></code> module of the
<code><b>CAAPLMClientAdapter</b></code><code><b>.</b></code><code><b>edu</b></code> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\CAAAdpCommands.m\</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">3</a>] is the directory where the CAA CD-ROM
is installed.</p>
<ul>
	<li><code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code>.<code><b>cpp</b></code>&nbsp;
      is the Dialog-box based command
      implementation, the heart of this use case.&nbsp;</li>
	<li><code>CAAAdpPLMClassChoiceDlg.cpp</code> and <code>CAAAdpQueryDlg.cpp</code> are the dialog boxes.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<table id="table10">
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\</code><code>CAAAdpGeneralWksAddin</code><code>.m\</code></td>
  </tr>
</table>
<p>
In this use case, localization is accomplished using the following set of files:</p>
<ul>
<li>CAAAdpGeneralWksAddinHeader.CATNls - localization of command headers of the general workshop addin</li>
<li>CAAAdpGeneralWksAdn.CATNls - localization of the toolbars of the General workshop addin</li>
<li>CAAAdpPLMClassChoiceDlg.CATNls - localization of the PLM Class choice dialog</li>
<li>CAAAdpQueryDlg.CATNls- localization of the Query Dialog panel</li>
<li>CAAAdpGeneralWksAddinHeader.CATRsc - to integrate an icon for displaying our command </li>
</ul>
<p> The above set of CATNls and CATRsc files are located in the following 
directory path. These will subsequently be available in the Runtime environment.</p>
<table id="table11">
  <tr>
    <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\</code><code>CNext\resources\msgcatalog</code><code>\</code></td>
  </tr>
</table>

 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The only most important step in the <code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code> 
use case is</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Launch the Main Panel">Launch the Main&nbsp; Panel</a></li>
	<li>
	<a href="#Build Main Pannel To Seek The PLMType input Given By The User">
	Build Main Pannel To Seek The PLMType input Given By The User</a></li>
  <li><a href="#Launch the Query Panel">Instantiate and Launch the Query Panel</a></li>
	<li><a href="#Build the Query panel">Build the Query panel with the attributes governed by QueryMask 
  criteria, for input usable type</a></li>
	<li><a href="#Running the Query">Build and Run the Query</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<h3><a name="Prolog"></a>Prolog</h3>
<p>A dialog-box based command &quot;<b>Working with PLM Mask</b>&quot; is integrated 
within the General Workshop of CATIA, as a part of its PLM Client Adapter 
Add-in.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Launch the Main Panel"></a>Launch the Main Panel</h3>
<p>The dialog box based command (<b><code>CATCommand</code></b>) simply instantiates the Main 
panel in its constructor, as seen below. Please note that a call to its destructor occurs 
immediately after this, implying its lifecycle comprises of only 2 calls namely. 
Constructor and Destructor. Hence it is yet again possible to relaunch this 
command though the dialog panels of the Use Case are still active.</p>
<table class="code">
  <tr>
    <td style="height: 82px">
      <pre>CAAAdpWorkingWithPLMMaskhdrCmd::CAAAdpWorkingWithPLMMaskhdrCmd()
{      
...
   <b>CAAAdpPLMClassChoiceDlg</b>  * pPLMClassChoiceDlg = new CAAAdpPLMClassChoiceDlg();
   pPLMClassChoiceDlg-&gt;<b>Build</b>();
...</pre>
      <pre>}</pre>
    </td>
  </tr>
</table>

<p>A <code><b>CAAAdpPLMClassChoiceDlg</b></code> instantiated above, refers to the Main panel in 
this Use Case. The next step is to call a build on this main panel, which 
inserts various dialog elements in it and populates them, as seen in the next 
step.</p>
<h3><a name="Build Main Pannel To Seek The PLMType input Given By The User">Build Main Pannel To Seek The PLMType input Given By The User</a></h3>
<p>This Dialog pannel takes PLM Type as input from the user.</p>
<table class="code">
  <tr>
    <td>
      <pre>void <b>CAAAdpPLMClassChoiceDlg</b>::<b>Build</b>()
{
    ...
    <b>_pComboUsableType</b>-&gt;SetSensitivity(<b>CATDlgDisable</b>);

    ...
    <b>_pLaunchQueryDialogButton</b>-&gt;SetSensitivity(<b>CATDlgDisable</b>);

    ...
   // Subscribing an action on the PLMType selection, through drop down combo 
   AddAnalyseNotificationCB(_pComboUsableType, _pComboUsableType-&gt;GetComboSelectNotification(),
                           (CATCommandMethod)&amp;CAAAdpPLMClassChoiceDlg::OnPLMTypeSelection,
                           NULL);



     //========================================
     // Subscribes to the Change push button
     //========================================
     AddAnalyseNotificationCB(_pLaunchQueryDialogButton, _pLaunchQueryDialogButton-&gt;GetPushBActivateNotification(),
                             (CATCommandMethod)&amp;CAAAdpPLMClassChoiceDlg::OnLaunchQueryDlgBtnClickEvent,
                              NULL);

   
}</pre>
    </td>
  </tr>
</table>
<p>The Main panel, has a combo for listing the types.</p>

<p>The <code><b>AddAnalyseNotification</b></code> calls subscribes the Main panel 
for PLMType Selection.  An action "OnPLMTypeSelection" is triggered in response to this notification/event.</p>

<p>The <code><b>AddAnalyseNotification</b></code> calls [2] subscribes the Main panel for the 
&quot;<b>Launch Query Dialog</b>&quot; button click event.&nbsp; An action &quot;<code><b>OnLaunchQueryDlgBtnClickEvent</b></code>&quot; is triggered in 
response to this notification/event.</p>
<p>&nbsp;In response to this button click event, a query panel is invoked.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Launch the Query Panel"></a>Instantiate and Launch the Query panel</h3>

<p>At this stage, the most important input for creating a query panel is 
retrieved from the user inputs. </p>
<table class="code">
  <tr>
    <td>
      <pre>...</pre>
      <pre>void <b>CAAAdpPLMClassChoiceDlg</b>::<b>OnLaunchQueryDlgBtnClickEvent</b>(CATCommand* iPublishingCommand,
  							  CATNotification* iNotification,
							  CATCommandClientData iUsefulData)
{
	
     HRESULT hr = E_FAIL;

     const char* iStrPLMType = _strPLMTypeSelected.ConvertToChar();
     CATBoolean CustoCase = FALSE ;

     CATIType_var spCATType; 
     hr= CATCkePLMNavPublicServices::RetrieveKnowledgeType(iStrPLMType,spCATType);
       if ( NULL_var == spCATType ) 
       {
          hr= CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType(iStrPLMType,spCATType);
         CustoCase = TRUE ;
           if ( NULL_var == spCATType )
            {
             return ;
            }
       }
       if ( FALSE == CustoCase )
         {
          cout &lt;&lt; &quot; It is successfull to find knowledge type ( non custo) :&quot; ; 
         }else
           {
            cout &lt;&lt; &quot; It is successfull to find knowledge type (custo) :&quot; ; 
            }
      cout &lt;&lt; spCATType-&gt;Name().ConvertToChar() &lt;&lt; endl;

      _pCAAAdpQueryDlg = new CAAAdpQueryDlg(spCATType);
      _pCAAAdpQueryDlg-&gt;Build();
 }</pre>
	
    </td>
  </tr>
</table>
<p>The <code><b>CAAAdpPLMClassChoiceDlg</b>::<b>OnLaunchQueryDlgBtnClickEvent</b></code> method above,&nbsp; is an action associated with the &quot;<b>Launch Query Dialog</b>&quot; 
button click event on the main panel. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Build the Query panel"></a>Build the Query panel with the attributes governed by QueryMask criteria, for input usable type</h3>
<p>The Query panel build comprises of two sections</p>
<ul>
  <li>
      A section which simply displays the user-selected&nbsp; PLM Type and hence remains constant across runs. </li>
</ul>
<table class="code">
  <tr>
    <td>
      <pre>void <b>CAAAdpQueryDlg::Build</b>()
{
	CATUnicodeString strPLMType;
        if(NULL_var != _spiCATIType)
        {
           strPLMType = _spiCATIType-&gt;Name();
           _pEditPLMClassType-&gt;SetText(strPLMType);
         }</pre>
		<pre>....</pre>
    </td>
  </tr>
</table>

<blockquote>
  <p>A call to <i><code><b>CATIType</b></code></i>::Name 
  retrieves the Name of the type selected by an end-user, an input at the time 
	of query panel instantiation. </p>
</blockquote>

<ul>
  <li>The next section is built based on the&nbsp; list of masked attributes 
  retrieved for the type input, at run time.</li>
</ul>
<table class="code">
  <tr>
    <td>
      <pre>...</pre>
      <pre>	CATListValCATAttributeInfos iListOfAttributes;</pre>
      <pre>  	<b>hr = RetrieveMaskedPLMAttributesForType(iListOfAttributes);</b>
...

	<b>_ArrstrMultiListResultColTitles = new CATUnicodeString[iSizeAttrList];	</b>
	for (int i=1; i&lt;;=iSizeAttrList; i++)
	{
	    <b>CATAttributeInfos AttrInfo = iListOfAttributes[i];</b>
		
	    CATIType_var spAttrType = AttrInfo.Type();
	    CATUnicodeString attrtypename;
	   <b> attrtypename = spAttrType-&gt;UserName();</b>
		
	   <b> </b>if( <b>attrtypename == "String" </b>)
	    {
		<b>_ArrstrMultiListResultColTitles</b>[LoopCounter]<b> = AttrInfo.Name();</b>
		_pLblQuery = new CATDlgLabel(pPLMAttributeValuesFrame, (AttrInfo.Name()).ConvertToChar());
		
		CATUnicodeString strNLSName = "" ;
     	        CATAttributeInfos::GetNLSName(_spiCATIType,AttrInfo,strNLSName);
		_pLblQuery-&gt;SetTitle(strNLSName);
			
		<b>_pEditQuery</b> = <b>new CATDlgEditor</b>(pPLMAttributeValuesFrame, EditorAttName);
	         <b>_lstOfEditor.Append(_pEditQuery);</b></pre>
      <pre>		...
	    }	}
</pre>
      <pre>...</pre>
    </td>
  </tr>
</table>

<p>A call to <code><b>RetrieveMaskedPLMAttributesForType</b></code> returns a list of masked attribute 
infos (<code><b>iListOfAttributes</b></code>), 
associated with the input usable type. Each element in this list is a 
<code><b>CATAttributeInfos</b></code> object (<code><b>AttrInfo</b></code>), which returns all information associated 
with a PLM attribute (type, name) [<a href="#References">4</a>]</p>

<p>Among these attributes, only those of the type &quot;<b>String</b>&quot; are 
identified to build an attribute set (query criteria) at a later stage to launch 
a query. This filtering is mandatory owing to a restriction of the CAA API which 
queries the DB (****::*****) which processes only string type attributes.</p>

<p>Now for each of these string type attribues we will have a&nbsp; 
label (<code><b>_pLblQuery</b></code>) and editBox (<code><b>_pEditQuery</b></code>) dialog 
elements added to the Query panel.&nbsp;These edit boxes are also included in a list 
<code><b>_lstOfEditor</b></code>. Since each masked attribute of the type 
string, has an editor associated with it, the <code><b>_lstOfEditor</b></code> 
maps directly with this set of attributes.&nbsp; The query panel is thus 
completely built. </p>

<p>Also, <code><b>_ArrstrMultiListResultColTitles</b></code>, an array of <code>
<b>CATUnicodeString</b></code> is  valuated 
with the names of the masked attributes of type string. This list is significant at a later 
stage, to assign titles to columns in a multi-list which displays the query 
results. Yet again, the list maps directly with the names of the masked 
attributes of type string.&nbsp; </p>

<p>The above mappings are significant especially at a later stage, when an 
attribute set needs to be built, for launching a query on the underlying 
database.</p>

<p>The call to <code><b>RetrieveMaskedPLMAttributesForType</b></code> which 
occurs above, infact has in its implementation, the crux of this Use Case, which 
involves retrieving a list of masked attributes of input usable type.</p>
<table class="code">
  <tr>
    <td>
      <pre>HRESULT <b>CAAAdpQueryDlg::RetrieveMaskedPLMAttributesForType</b>()</pre>
      <pre>{</pre>
      <pre>    if (NULL_var != _spiCATIType)
     {
      cout &lt;&lt;The Knowledge type is :&quot; &lt;&lt; _spiCATIType-&gt;Name().ConvertToChar() &lt;&lt;endl; 

       CATListValCATAttributeInfos _iListOfAttributes;
       hr = <strong>CATCkePLMNavPublicServices</strong><b>::ListFilteredAttributesFromMaskAndType</b>(_spiCATIType,NULL,
   							   CATCkePLMTypeAttrServices::<b>MaskQuery</b>,
					                     <b>_iListOfAttributes</b>); 
...</pre>
    </td>
  </tr>
</table>

<p>Next, a call to <strong>CATCkePLMNavPublicServices</strong><b>::ListFilteredAttributesFromMaskAndType </b>with knowledge type and the mask criteria&nbsp; (<code><b>MaskQuery</b></code>) as an input,&nbsp; 
will return you the list of associated masked attributes. Second argument,&nbsp;&nbsp; 
CATIAdpEnvironment * passed as NULL implies that Current environment is used.<br>
</p>

<p>Now with the query panel, completely built, the user has to simply valuate 
the attributes displayed in this panel, build a query and run it on an 
underlying database.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Running the Query"></a>Build and Run the Query </h3>

<p>An end-user at this stage valuates the attributes displayed in the query 
panel with appropriate values. A database query is thus built and subsequently 
run to output a set of PLM Objects, displayed in the multi-list within the 
query panel.</p>

<table class="code">
  <tr>
    <td>
      <pre>void <b>CAAAdpQueryDlg::BuildAndRunQuery</b>()</pre>
      <pre>{
   ...      
   CATAdpAttributeSet iAttributeSet;
   int AttrCnt = <b>_lstOfEditor.Size()</b>;
</pre>
      <pre>   </pre>
      <pre>   for (int j=1; j&lt;=AttrCnt; j++)
  {
      CATUnicodeString <b>AttributeValue</b>(<b>((CATDlgEditor*)_lstOfEditor[j])-&gt;GetText()</b>);

  ...
      const CATString <b>AttributeName</b>(<b>_ArrstrMultiListResultColTitles</b>[j-1].ConvertToChar());
      hr = <b>iAttributeSet</b>.<b>AddAttribute</b>(<b>AttributeName</b>,<b>AttributeValue</b>);
  }
 
...
  CATListPtrCATAdpQueryResult oQueryResults; 
  hr = <b>CATAdpPLMQueryServices</b>::<b>GetElementsFromAttributes</b>(_spiCATIType,
                        			      <b>   iAttributeSet</b>,
					         oQueryResults);
...</pre>
    </td>
  </tr>
</table>

<p>A database query is built simply by creating an&nbsp; attribute set, 
iAttributeSet&nbsp; [<a href="#References">5</a>]. An AttributeSet object is 
built with a set attribute name-value pairs. The attribute names are parsed from 
the list <code><b>_ArrstrMultiListResultColTitles </b></code>while the 
corresponding values are retrieved from those stored in Edit Boxes, contained in 
the list,&nbsp; <code><b>_lstOfEditor</b></code>,&nbsp; As mentioned in an 
earlier step, when these lists were built, we did confirm that those exactly map 
to the list of masked PLM attributes.</p>

<p>The next call is to <code><b>CATAdpPLMQueryServices</b>::<b>GetElementsFromAttributes</b></code> with the 
usable type and attribute set as an input. The query is finally run on the 
underlying database, and result is is a <code><b>CATListPtrCATAdpQueryResult</b> </code>
object<code> (<b>oQueryResults</b>)</code>, a list of <code><b>CATAdpQueryResult</b></code> 
objects.</p>

<p>The final step is to parse this result, extract the attribute name-value 
pairs for each PLM Object, and display them within the multilist.</p>

<table class="code">
  <tr>
    <td>
      <pre>...
     QueryResSize = oQueryResults.Size();

     for (int k=1; k&lt;=QueryResSize; k++)
     {
	CATAdpQueryResult* pCurrentResult = NULL;
	<b>pCurrentResult = oQueryResults</b>[k];
	
	CATAdpAttributeSet oAttrSet;
	hr = <b>pCurrentResult-&gt;GetAttributeSet</b>(oAttrSet);
	...</pre>
      <pre>	CATString strAttributeName;
	CATUnicodeString strAttrValue;			
	int current=0;
	while(S_OK == (<b>oAttrSet</b>.<b>NextAttribute</b>(current,<b>strAttributeName</b>,<b>strAttrValue</b>)))
	{
	     for (int n=0; n&lt;=AttrCnt; n++)
	     {
		CATString <b>strMultiListTitle</b>(<b>_ArrstrMultiListResultColTitles</b>[n].ConvertToChar());
		if (<b>strMultiListTitle == strAttributeName</b>) 
		{
		    <b> _pMultiListResult</b>-&gt;SetColumnItem(n,<b>strAttrValue</b>);
		     break;
		}
	     }
	}
     }

...
</pre>
    </td>
  </tr>
</table>



<p>Each <code><b>CATAdpQueryResult</b></code> object corresponds to a PLM Object output by the 
query run on an underlying database. Thus, each <code><b>QueryResult</b></code> object has an 
attribute set (<code><b>CATAdpAttributeSet</b></code>) within it, which comprises of a set of 
attribute name-value pairs of the PLM Object.</p>

<p>A call to <code><b>CATAdpQueryResult</b></code>::<code><b>GetAttributeSet</b></code> by each 
<code><b>QueryResult</b></code> object (<code><b>pCurrentResult</b></code>) 
returns a <code><b>CATAdpAttributeSet</b></code> object (<code><b>oAttrSet</b></code>) [<a href="#5">5</a>]. The next step is to parse 
through each attribute set, with a call to <code><b>CATAttributeSet</b></code>::<code><b>NextAttribute</b></code> to 
output an attribute name (<code><b>strAttributeName</b></code>) and its corresponding value (<code><b>strAttrValue</b></code>) 
[<a href="#5">5</a>]. It is significant to note here that the attributes output here are only 
those which were input in an earlier step, for creating an attribute set (query 
criteria) for launching a query in an underlying database.</p>

<p>The attribute values are finally displayed in the multilist&nbsp; within 
columns dedicated for each attribute. Thus each row in the multilist corresponds 
to a set of attribute values of a PLM Object queried from the database. </p>

<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The dialog box based command dies immediately after its creation. So, its 
role is only to create the &quot;PLM Class Choice&quot; panel in its constructor and then immediately a 
call to its destructor occurs.&nbsp; </p>
<p>From the main &quot;PLM Class Choice&quot; panel, please note, multiple query panels 
can be invoked, for various&nbsp; types.</p>
<p>Thus the life cycle of the dialog-box based command, the main panel and the 
query panels are mutually exclusive.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="InShort"></a>In Short</h2>
<p>A &quot;Working with PLM Mask&quot; command is integrated in a toolbar within the 
&quot;General Workshop&quot; of CATIA. Activating this command, instantiates the 
<code><b>CATCommand</b></code> &quot;<code><b>CAAAdpWorkingWithPLMMaskhdrCmd</b></code>&quot;. The 
<code><b>CATCommand</b></code> constructor, 
instantiates the &quot;<code><b>CAAAdpPLMClassChoiceDlg</b></code>&quot; dlg box which lists the 
PLM Types ,selected by an end-user. User identifies a type from this list, for a query in the 
db</p>
<p>The current dlg panel next instantiates a &quot;<code><b>CAAAdpQueryDlg</b></code>&quot; panel with the 
PLM 
type set as an input. This query panel then retrieves and displays the set of 
attributes associated with this type used for querying purpose (governed 
by a Security Mask defined by a <code><b>QueryMask</b></code> criteria). User then valuates these 
attributes to create a query, run on the underlying db. A set of PLM Objects 
in the db, satisfying this query criteria are identified and their 
attribute-value sets are displayed within this panel.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="References"></a>References</h2>
<table>
  <colgroup>
		<col valign="top" span="1">
	</colgroup>
<tr> 
    <td>[1]</td>
    <td><a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">Creating
      an Add-in</a></td>
  </tr>
  <tr>
    <td>[2]</td>
    <td><a href="../CAADlgDialog/CAADlgTaOverview.htm">Dialog
      Overview</a></td>
  </tr>
  <tr>
    <td>[3]</td>
    <td><a href="../CAADocUseCases/CAADocRunSample.htm">Building
      and Launching a CAA Use Case</a></td>
  </tr>
  <tr>
    <td>[4]</td>
    <td>
       <a href="CAAPLMTaAllKnowPLMAttributes.htm">Accessing PLM Attributes</a></td>
  </tr>
   <tr>
    <td style="height: 23px">[<a name="5">5</a>]</td>
    <td style="height: 23px"><a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying PLM Components</a></td>
  </tr>
  <tr>
    <td>[6]</td>
    <td>
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">Understanding PLM Environment</a></td>
  </tr>
</table>

<!-- -------------------------------comment---------------------------------- -->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong> [Mar 2008]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
 <script type="text/javascript">insertLinkToTop();</script>
   </tr>
</table>

<!-- -------------------------------comment---------------------------------- -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


