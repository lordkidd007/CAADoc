<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Retrieving PLM Class Attribute Information</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving PLM Class Attribute Information</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>The objective of this use case is to retrieve attribute information as 
		exposed by the PLM Dictionary (dico) on the server, through the Knowledge 
		Layer on the client side.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAdpPLMAttributes Use Case</a>
			<ul>
				<li><a href="#What">What does the CAAAdpPLMAttributes do</a></li>
				<li><a href="#How">How to launch CAAAdpPLMAttributes </a></li>
				<li><a href="#Where">Where to find the CAAAdpPLMAttributes code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
 </td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The objective of this use case is to demonstrate the steps involved in </p>
<ul>
	<li>Retrieving the knowledge element representing the projection inside the 
	knowledge dictionary of one PLM Class [<a href="#References">1</a>] </li>
	<li>Displaying all its PLM Attribute, and displaying for each one PLM dictionary 
	information.</li>
</ul>
<p>This use case is the illustration of one part of the technical article, &quot;Accessing 
PLM Attributes&quot; [<a href="#References">2</a>]. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAdpPLMAttributes Use Case</h2>
<p><code><strong>CAAAdpPLMAttributes</strong></code> is a use case of the <code>
<strong>CAAPLMClientAdapter.edu</strong></code> framework that mainly illustrates 
KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAdpPLMAttributes Do</h3>
<p>The use case scenario is simple, from one PLM class type, name inside the PLM 
dictionary, we retrieve its projection inside the knowledge dictionary. The name 
of the PLM class is equivalent in both dictionary (PLM and Knowledge).</p>
<p>Then we retrieve all its PLM attributes, each one representing by a <em>CATAttributeInfo</em> 
class. From this knowledge class we can display for a PLM attribute:</p>
<blockquote>
	<ul>
		<li>its Name, its writable status , if mandatory or not, </li>
		<li>its default value (if any)</li>
		<li>its type (integer, string, date,...)</li>
		<li>In case of list type, the type of the element in the list (same type 
		for each element)</li>
		<li>In case of enum type, the possible values of the enumerated type.</li>
	</ul>
</blockquote>
<p>The <a href="CAAAdpPLMAttributesResult.htm">Results</a> of PLMProductDS , the 
PLMProductDS customization of the VPMReference (PLM Reference of PRODUCT) are linked 
with this Use Case for sample. </p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAdpPLMAttributes</h3>
<p>To launch <code><strong>CAAAdpPLMAttributes</strong></code> , you will need to 
set up the build time environment, then compile <code><strong>CAAAdpPLMAttributes</strong></code> 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">3</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code><a>mkrun -c &quot;</a><em>CAAAdpPLMAttributes</em></code><em> </em><a><code>
<em>Repository Server User Password SecurityCtx PLMType</em>&quot;</code></a> </p>
<p>where:</p>
<table>
	<tr>
		<th><strong>Repository</strong></th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th><strong>Server</strong></th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th><strong>User</strong></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><strong>Password</strong></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><strong>SecurityCtx</strong></th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose role as reviewer (since we only browse the PLM Data, no modifications)</td>
	</tr>
	<tr>
		<th><strong>PLMType</strong></th>
		<td>A String Represents PLM type </td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAdpPLMAttributes Code</h3>
<p>The <code><strong>CAAAdpPLMAttributes</strong></code> use case is one main file 
in the <code>CAAAdpPLMAttributes</code><a>.m</a> module of the <a><code><strong>
CAAPLMClientAdapter</strong><strong>.edu</strong></code></a> framework:</p>
<table>
	<tr>
		<td><code>InstallRootDirectory\</code><code>CAAPLMClientAdapter</code>.<code>edu</code><code>\CAAAdpPLMAttributes.m\CAAAdpPLMAttributes.cpp</code></td>
	</tr>
</table>
<p>and a function displaying the contents of of PLM Class attribute inside the
<code>CAAAdpUtilities</code>.m module:</p>
<table id="table1">
	<tr>
		<td><code>InstallRootDirectory\CAAPLMClientAdapter</code>.<code>edu\CAAAdpUtilities.m\CAAAdpDisplayAttributeInfo.cpp</code></td>
	</tr>
</table>
<p>where <code><a><strong>InstallRootDirectory</strong></a></code> [<a href="#References">2</a>] 
is the directory where the CAA CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps of the use case:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Find the knowledge type (Success)">Find the Knowledge Type</a></li>
	<li>
	<a href="#Retrieve all the PLM attributes of the input PLM Class Type and display for each PLM Attribute">
	Retrieve all the PLM attributes From a Custo Type</a></li>
	<li><a href="#Retrieve all the PLM attributes from Modeler">Retrieve all the 
	PLM Attributes from a Knowledge Type</a></li>
	<li><a href="#DisplayAttributeInfo">Retrieve Elementary Attribute Information 
	for input KnowledgeType</a><ol>
		<li><a href="#General Information (name, type, writable, mandatory)">Retrieve 
		General Information (name, NLS Name, type, writable, mandatory) </a>
		</li>
		<li><a href="#Default Value">Retrieve Default Value</a></li>
		<li><a href="#ListType">Retrieve List Element Type for an Attribute of type 
		List</a></li>
		<li><a href="#Retrieve possible values for a list of enum">Retrieve Possible 
		Values for a List of Enum</a></li>
		<li><a href="#EnumValue">Retrieve Values for an Attribute of type Enum</a></li>
	</ol>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><strong>CAAAdpPLMAttributes</strong></code> use case begins by creating 
a session and connecting to the input Repository. This, being the most fundamental 
prerequisite for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we ain&#39;t modifying PLM data but only retrieving it from the database). 
There are other parameters as well, details of which can be found in the &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; use case article [<a href="#References">4</a>]. This 
article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Find the knowledge type (Success)"></a>Find the Knowledge Type</h3>
<pre class="code">
 ...
  CATBoolean CustoCase = FALSE ;
  CATIType_var spCATType;
  hr= <strong>CATCkePLMNavPublicServices::RetrieveKnowledgeType</strong>(iArgv[6],spCATType);
  if  (  NULL_var ==  spCATType ) 
  {
     hr= <strong>CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType</strong>(iArgv[6],spCATType);
...</pre>
<p>The first call tries to retrieve a modeler type, and if the method fails we try 
with the method only processing custo type. <code>iArgv[6]</code> is type name.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>
<a name="Retrieve all the PLM attributes of the input PLM Class Type and display for each PLM Attribute">
</a>Retrieve all the PLM attributes from a Custo Type</h3>
<pre class="code">
...
    CATListValCATAttributeInfos iListOfAttributes;
    hr =<strong> CATCkePLMNavCustoAccessPublicServices::ListAttributesFromCustoType</strong>(CATCkePLMTypeAttrServices::All,
                                                   spCATType,
                                                   <strong>iListOfAttributes</strong>,
                                                   FALSE); 
...</pre>
<p>The last argument, <code><strong>FALSE</strong></code>, means you request all 
the PLM Attributes : Read only and Read/Write.</p>
<h3><a name="Retrieve all the PLM attributes from Modeler"></a>Retrieve all the 
PLM attributes from a Knowledge Type</h3>
<pre class="code">
...
    CATListValCATAttributeInfos iListOfAttributes;
    hr =<strong> CATCkePLMNavPublicServices::ListAttributesFromType</strong>(CATCkePLMTypeAttrServices::All,
                                                   spCATType,
                                                   <strong>iListOfAttributes</strong>,
                                                   FALSE); 
...</pre>
<p>The last argument, <code><strong>FALSE</strong></code>, means you request all 
the PLM Attributes : Read only and Read/Write.</p>
<h3><a name="DisplayAttributeInfo"></a>Retrieve Elementary Attribute Information 
for input KnowledgeType </h3>
<p>In this step we extract information from each <em>CATAttributeInfos
</em>class<em> </em>instance, contained in the list above, <strong><code>iListOfAttributes</code>,
</strong>by a call to <code><strong>CAAAdpDisplayAttributeInfo</strong></code> method. 
This method is a local method used to parse a <em>CATAttributeInfos </em>class instance.</p>
<table class="code" width="912">
	<tr>
		<td>
		<pre>... 
    int iSizeList = iListOfAttributes.Size(); 
    for (int i=1; i&lt;=iSizeList; i++)
    {
       CATAttributeInfos <strong>AttrInfo</strong> = <strong>iListOfAttributes</strong>[i];

       hr = ::<strong>CAAAdpDisplayAttributeInfo</strong>(AttrInfo, spCATType, <strong>FALSE</strong>);
    }
 ...</pre>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>This method is defined by three arguments:</p>
<ul>
	<li><code>AttrInfo: </code>The current <em>CATAttributeInfos </em>class instance</li>
	<li><code>spCATType : </code>The knowledge type of the PLM class, <code>spCATType 
	- </code>see<a href="#Find the knowledge type (Success)"> Find the knowledge 
	type</a> section - this argument will be useful to display the NLS name of the 
	PLM Attribute</li>
	<li>A boolean specifing if the method must deplay help / authorized value. 
	But since the call to ListAttributesFromType / ListAttributesFromCustoType return 
	attribute information as defined by the dico (knowledge) view, the help and 
	authorized values of an attribute (specifically defined by the MASK view [<a href="#References">6</a>]) 
	are not available here with the <em>CATAttributeInfos </em>class<em> </em>instance. 
	This information is passed to the <code><strong>CAAAdpDisplayAttributeInfo</strong></code> 
	routine, through its last CATBoolean argument, set to FALSE. This method is 
	used by another use case displaying masked view of PLM attributes [<a href="#References">7</a>].</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="General Information (name, type, writable, mandatory)"></a>Retrieve 
General Information (Name, type, writable, mandatory)</h4>
<table class="code">
	<tr>
		<td>
		<pre>...  
	CATUnicodeString attrName;
	attrName = AttrInfo.<strong>Name</strong>();
	
	CATUnicodeString attrNLSName;
	CATAttributeInfos::<strong>GetNLSName</strong>(KnowPLMClassType,AttrInfo,attrNLSName);
...</pre>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p><code><strong>CATAttributeInfos</strong></code>::<code><strong>Name</strong></code> 
returns internal name of attribute. To retrieve its NLS name you must use the static 
function, the <code>GetNLSName</code> method. The first argument is the the knowledge 
type of the PLM Class for which we display the PLM attribute. This method is recursive, 
it means that if no specific NLS name has been specified by the customized PLM Class, 
the method will retrieve the first NLS name defined from the customized PLM Class 
to the core level class.</p>
<table class="code" id="table5">
	<tr>
		<td>
		<pre>...  	
	CATBoolean bAttrTypeIsWritable = AttrInfo.<strong>IsWritable</strong>();
	
	CATBoolean bAttrTypeIsMandatory = AttrInfo.<strong>IsMandatory</strong>();
...</pre>
		</td>
	</tr>
</table>
<p>Moreover <code><strong>IsWritable</strong></code> and <code><strong>IsMandatory</strong></code> 
returns a Boolean set to TRUE, if the attribute is Writable and Mandatory respectively. 
There is no method to know if the PLM attribute is part of the identifier set.</p>
<table class="code" id="table6">
	<tr>
		<td>
		<pre>...  	
	CATUnicodeString attrtypename, attrtypeusername;
	CATIType_var spAttrType = AttrInfo.<strong>Type</strong>();
	attrtypename = spAttrType<strong>-&gt;Name</strong>();
	attrtypeusername = spAttrType<strong>-&gt;UserName</strong>();
...</pre>
		</td>
	</tr>
</table>
<p><code><strong>CATAttributeInfos</strong></code>::<code><strong>Type</strong></code> 
returns a <code><strong>CATItype*</strong></code> on a component which defines the 
attribute type. A call to <code><em><strong>CATIType::</strong></em><strong>Name
</strong></code>and <code><strong>CATIType</strong></code>::<code><strong>UserName</strong></code> 
returns the internal name and User name of the attribute type. It can be Integer, 
String, Float, Boolean, LIST, Date, a generic name, but for an enumere type, it 
is the name of the enumere type. If you take PLMPortDS (a PLM Port customization 
of the Product Port), the enum type for V_direction attribute is &quot; <code>V_DirectionEnum</code>&quot;.
<code>V_DirectionEnum </code>will be the value returned by the n<code>ame</code> 
method of the <em>CATAttributeInfos </em>class<em>.</em></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Default Value"></a>Retrieve Default Value</h4>
<p>Here we are retrieving the default value of the current PLM attribute. </p>
<table class="code">
	<tr>
		<td>
		<pre> ...
         CATICkeParm_var spCkeParmOnDefaultValue ;
	hr = <strong>AttrInfo.GetDefaultValue</strong>(spCkeParmOnDefaultValue);
	if ((SUCCEEDED(hr))&amp;&amp;(NULL_var!=spCkeParmOnDefaultValue))
	{
	      if ( (NULL_var != spAttrType) &amp;&amp;
		  (FALSE == spAttrType-&gt;<strong>IsaSortOf</strong>(CATCkeGlobalFunctions::GetParmDictionary()-&gt;<strong>GetListType</strong>()))
		)
	       {
	           CATCke::Boolean bIsSet = <strong>spCkeParmOnDefaultValue-&gt;IsSet</strong>();
	           if (<strong>CATCke::True</strong> == bIsSet)
	           {
		      <strong>CATICkeInst_var</strong> spCkeInstOnDefaultValue = spCkeParmOnDefaultValue-&gt;<strong>Value</strong>();
		      CATUnicodeString strValue = <strong>spCkeInstOnDefaultValue</strong>-&gt;<strong>AsString</strong>();
				 
	           } else cout &quot;no default value&quot; ;
	       } else cout &quot;no default value for a LIST&quot; ;
	} else 
	    return 1;
...</pre>
		</td>
	</tr>
</table>
<p>The <code><strong>GetDefaultValue</strong></code> method of the <em>CATAttributeInfos</em> 
class always returns a knowledge parameter for a PLM attribute. <code>spCkeParmOnDefaultValue</code>, 
returned by <code><strong>GetDefaultValue</strong></code> method, will be never 
NULL. </p>
<p>Except the LIST knowledge type (List and Set PLM dictionary types), it can or 
cannot exist a default value. For a LIST, no default value is defined in all cases. 
Note the way to check that the PLM atttribute is a LIST, we are using the <code>
IsaSortOf </code>method of the <em>CATIType</em> interface. <code>spAttrType</code> 
is the value returned by the Type method on the <em>ATAttributeInfos</em> class. 
See <a href="#General Information (name, type, writable, mandatory)">earlier</a> 
section.</p>
<p>So, except the LIST case, we use the <code>IsSet</code> method on the knowledge 
parameter representing the default value. If this method returns true <code>(</code><strong><code>CATCke::True)</code></strong> 
there is a default value, and we can display it as a string value, otherwise if 
the method returns (<strong><code>CATCke::False)</code></strong> there is no default 
value. If you read the technical article [<a href="#References">2</a>], you will 
see that only date, string, enum (and list) can be without default value. For integer, 
float, bolean types there are always a value. (values defined by PLM dictionary 
engine).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="ListType"></a>Retrieve List Element Type for an Attribute of type List</h4>
<p>Here we are retrieving the type which a List can hold. This information is given 
by the knowledge parameter representing the default value. In case of LIST attribute, 
this knowledge parameter, implements the <em>CATIList</em> interface.</p>
<table class="code">
	<tr>
		<td>
		<pre>...
   if(  (NULL_var != spAttrType)  &amp;&amp; 
        (spAttrType-&gt;<strong>IsaSortOf</strong>(CATCkeGlobalFunctions::GetParmDictionary()-&gt;<strong>GetListType</strong>())) &amp;&amp; 
	(NULL_var != spCkeParmOnDefaultValue))
   {
	<strong>CATIList</strong> * piListOnDefaultValue = NULL;
	hr = <strong>spCkeParmOnDefaultValue</strong>-&gt;QueryInterface(<strong>IID_CATIList</strong>,(void**)&amp;<strong>piListOnDefaultValue</strong>);
	...</pre>
		<pre>	CATUnicodeString strListElementType = piListOnDefaultValue<strong>-&gt;GetListType</strong>();
	...
    }
...</pre>
		</td>
	</tr>
</table>
<p>We have seen in the <a href="#Default Value">Default Value</a> section, just 
above, how to check that the knowledge attribute is a list using the <code>IsaSortOf</code> 
method. The <strong><code>GetListType </code></strong>method of the <em>CATIList</em> 
interface returns the type of the element inside the list. ( same type for all element 
in the list).</p>
<p><code>spAttrType</code> is the value returned by the Type method on the <em>CATAttributeInfos</em> 
class. See <a href="#General Information (name, type, writable, mandatory)">earlier</a> 
section.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Retrieve possible values for a list of enum"></a>Retrieve Possible 
Values for a List of Enum</h4>
<p>At this step, you know that the PLM attribute is a LIST, you have retrieved the 
type of each element by using the<strong><code> GetListType </code></strong>method 
of the <em>CATIList</em> interface implemented on the default value. see
<a href="#ListType">just above</a> section. Now imagine the list is a list of enum. 
This step describes how you can retrieve the possible values for this enum.</p>
<p>You have seen that <strong><code>GetListType</code></strong> method returns a 
string. This string for an enum is not the generic name &quot;enum&quot;, but the name of 
the enumere. So before to retrieve the enumere values, you can check that the string 
returned by <strong><code>etListType</code></strong> method is not integer, 
boolean, date, string. In our use case, we have choosen to retrieve in the knwoledge 
dictionary the type corresponding to the string returned by <strong><code>GetListType</code></strong> 
method, wathever the string value.</p>
<table class="code" id="table3">
	<tr>
		<td>
		<pre>...
   CATITypeDictionary_var spCATTypeDictionary;
   spCATTypeDictionary = CATGlobalFunctions::<strong>GetTypeDictionary</strong>();

   CATIType_var spCATTypeForEnum;
   hr= spCATTypeDictionary-&gt;<strong>FindType</strong>(<strong>strListElementType</strong>,spCATTypeForEnum);
...</pre>
		</td>
	</tr>
</table>
<p><code>strListElementType</code> is the string returned by <strong><code>GetListType</code></strong> 
method. The <code>FindType</code> method retrieves in the knowledge dictionary a 
knwoledge type matching the input string. For your information, if the PLM Attribute 
requires an enum value, the knwoledge dictionary contains it.</p>
<p>We have found the type, now we are checking that it implements the <em>CATIEnumere</em> 
interface.</p>
<pre class="code">...
   if ( NULL_var != spCATTypeForEnum )
   {
      <strong>CATIEnumere</strong> * piEnumereOnType = NULL;
      HRESULT rc = spCATTypeForEnum-&gt;QueryInterface(IID_CATIEnumere,(void**)&amp;piEnumereOnType);
      if ( SUCCEEDED(rc) )
      {
...</pre>
<p>If the knowledge type implements the <em>CATIEnumere</em> interface you can find 
the enumere values. It is described just below.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="EnumValue"></a>Retrieve Values for an Attribute of type Enum</h4>
<p>For an enum type, we have a pre-defined set of authorized values. The objective 
of this section is to list them.</p>
<table class="code">
	<tr>
		<td>
		<pre>...
    if ( (NULL_var != spAttrType) &amp;&amp;
	(spAttrType-&gt;<strong>IsaSortOf</strong>(CATCkeGlobalFunctions::GetParmDictionary()-&gt;<strong>GetEnumType</strong>()))  
     {
	<strong>CATIEnumere</strong> * piEnumereOnType = NULL;

	hr = spAttrType-&gt;QueryInterface(IID_CATIEnumere,(void**)&amp;piEnumereOnType);
	if(SUCCEEDED(hr))
	{
	     CATListOfCATUnicodeString strListAuthorizedValueNLS;
	     CATListOfCATUnicodeString * pistrListAuthorizedValue = NULL;
 
              pistrListAuthorizedValue = piEnumereOnType-&gt;<strong>Values</strong>(&amp;strListAuthorizedValueNLS);
	 }
    }
...</pre>
		</td>
	</tr>
</table>
<p>First we make a test to know if the current PLM attribute is an enum. If for 
all other types you can use the string returned by the <code>name</code> method 
of the <em>CATAttributeInfos</em> class to make a check, for an enum it is 
impossible excepted if you know the exact name of the enumerate type. In deed, the
<code>name</code> method does not return &quot;enum&quot; , but the type deriving from the 
enum type. The one defined in the PLM dictionary. See the
<a href="#General Information (name, type, writable, mandatory)">Retrieve General 
Information (Name, type, writable, mandatory)</a> section.</p>
<p>When the PLM attribute is an enum, the knowledge attribute type, <code>spAttrType,
</code>implements the <em>CATIEnumere</em> interface. This interface has a method 
to display the authorized values (<code>Values</code> method). </p>
<p>First we make a test to know if the current PLM attribute is an enum. If for 
all other types you can use the string returned by the <code>name</code> method 
of the <em>CATAttributeInfos</em> class to make a check, for an enum it is 
impossible excepted if you know the exact name of the enumerate type. In deed, the
<code>name</code> method does not return &quot;enum&quot; , but the type deriving from the 
enum type. The one defined in the PLM dictionary. See the
<a href="#General Information (name, type, writable, mandatory)">Retrieve General 
Information (Name, type, writable, mandatory)</a> section.</p>
<p>When the PLM attribute is an enum, the knowledge attribute type, <code>spAttrType,
</code>implements the <em>CATIEnumere</em> interface. This interface has a method 
to display the authorized values (<code>Values</code> method). </p>
<p>Attention, the list of values (a list of string), <code>pistrListAuthorizedValue</code>, 
must not be deleted. The other output list, <code>strListAuthorizedValueNLS</code>, 
can contain the NLS values. Here since the input pointer is NULL, the method will 
not fill the NLS name of each value.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><strong>CAAAdpPLMAttributes</strong></code> use case ends by simply 
closing the PLM session. Since all PS use cases necessarily conclude by closing 
the PLM session, we have a dedicated article on this topic viz. &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [<a href="#References">4</a>]. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In short, this use case illustrates how to retrieve PLM type from the knowledge 
dictionary, and to get information from each PLM Attribute associated with the PLM 
type:</p>
<ul>
	<li>Find knowledge type using<em> CATCkePLMNavPublicServices</em> for a modeler 
	type, and <em>CATCkePLMNavCustoAccessPublicServices</em> for a custo type</li>
	<li>List the PLM Attributes with the help of ListAttributesFromType of
	<em>CATCkePLMNavPublicServices</em> for a modeler type, and ListAttributesFromCustoType 
	of<em> CATCkePLMNavCustoAccessPublicServices </em>for a custo type.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllPLMDictionary.htm">
		Understanding PLM Dictionary</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPLMTaAllKnowPLMAttributes.htm">Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a> </td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating 
		a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">
		Understanding PLM Environment</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllMask.htm">
		PLM Security Mask Overview</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAAdpUcDisplayMaskedPLMAttributes.htm">Retrieving Masked PLM 
		Class Attribute Information</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jan 2008]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2010]</td>
		<td>Document updated due to new services to get PLM Type and PLM Attribute 
		Information</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
