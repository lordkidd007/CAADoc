<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Retrieving Masked PLM Class Attribute Information</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Masked PLM Class Attribute Information</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The objective is to retrieve PLM Attributes, associated with PLM Class, 
		available when we are using security mask.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAdpDisplayMaskedPLMAttributes Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAAdpDisplayMaskedPLMAttributes Do</a></li>
				<li><a href="#How">How to Launch CAAAdpDisplayMaskedPLMAttributes</a></li>
				<li><a href="#Where">Where to Find the CAAAdpDisplayMaskedPLMAttributes 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows how you can retrieve PLM Attributes associated with a PLM 
object type for a given PLM Mask.</p>
<p>The purpose of PLM mask is to filter the user interface of PLM applications, 
by using specific PLM Attributes. The filtering is done, mainly for security reasons, 
in order to provide finely tuned object access control. You can you refer to the 
referenced technical article [<a href="#References">5</a>] for more details.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAdpDisplayMaskedPLMAttributes Use Case</h2>
<p><code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code> is a use case 
of the <code><strong>CAAPLMClientAdapter.edu</strong></code> framework that illustrates
<code><strong>KnowledgeInterfaces</strong></code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAdpDisplayMaskedPLMAttributes Do</h3>
<p>In this use case, we are displaying the PLM Attributes of an input PLM Object, 
filtered by PLM mask.</p>
<p>Here in this use case firstly we are retrieving Knowledge type from knowledge 
dictionary using the PLM Class Type of an input PLM Object. Then from knowledge 
type, we are retrieving PLM Attributes filtered according to mask type using specific 
API (<code>ListFilteredAttributesFromMask</code> method of <code>CATCkePLMTypeAttrServices</code>)
</p>
<p>Here we are filtering PLM Attributes for 6 pre-defined masks: Create, Query, 
EZQuery, Read, Write, and Tree.</p>
<p>In &quot;<a href="CAAAdpDisplayMaskedPLMAttributesResult.htm">Mask Results</a>&quot; doc, 
we are describing results of this use case for PLMProductDS input for all PLMMask 
Type and with DS mask. </p>
<p>Please note that result of this use case is depending on <strong>delivered filter 
mask</strong>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAdpDisplayMaskedPLMAttributes</h3>
<p>To launch <code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code>, you 
will need to set up the build time environment, then compile <code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code> 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code><strong><a>mkrun -c &quot;</a><em>CAAAdpDisplayMaskedPLMAttributes</em></strong></code><em>
</em><a><code><strong><em>Repository Server User Password SecurityCtx PLMType MaskType</em></strong></code></a>
</p>
<p>where:</p>
<table class="border1">
	<tr>
		<th><strong>Repository</strong></th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th><strong>Server</strong></th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th><strong>User</strong></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><strong>Password</strong></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><strong>SecurityCtx</strong></th>
		<td>a string representing the security context (Role.Organization.Project).
		</td>
	</tr>
	<tr>
		<th><strong>PLMType</strong></th>
		<td>A String Representing PLM Type </td>
	</tr>
	<tr>
		<th>Mask<strong>Type</strong></th>
		<td>Represents the PLM Mask Type (MaskWrite, MaskQuery, MaskEZQuery, MaskCreate, 
		MaskRead, MaskTree)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAdpDisplayMaskedPLMAttributes Code</h3>
<p>The <code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code> use case is 
made of a single file located in the <code><strong>CAAAdpDisplayMaskedPLMAttributes.m</strong></code> 
module of the <code><strong>CAAPLMClientAdapter.edu</strong></code> framework:
</p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpDisplayMaskedPLMAttributes.m\</code></p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\CAAAdpDisplayAttributeInfo.cpp</code></p>
<p>where <code><strong>InstallRootFolder</strong></code> [<a href="#References">1</a>] 
is the folder where the CAA CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in CAAAdpDisplayMaskedPLMAttributes :</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Retrieve the Knowledge Type">Retrieve the Knowledge Type</a></li>
	<li><a href="#AuthorizedValue">Retrieve the masked PLM attributes</a></li>
	<li><a href="#AuthorizedValue">Displaying Attribute Information extracted from 
	CATAttributeInfos</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code> use case begins 
by creating a session and connecting to the input Repository. This, being the most 
fundamental prerequisite for all batch use cases, it is the first step in their 
execution.</p>
<p>In this case, we create a session and connect to Repository. There are other 
parameters as well, details of which can be found in the &quot;<strong>Creating a Basic 
PLM Batch</strong>&quot; use case article [<a href="#References">3</a>]. This article 
primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the Knowledge Type"></a>Retrieve the Knowledge Type</h3>
<p>Here in this step we are retrieving Knowledge type from Knowledge dictionary. 
For this we are giving PLMType as input. For this necessary steps we can found in 
the &quot;<strong>Working with PLM Attributes</strong>&quot;[<a href="#References">2</a>] 
use case article.</p>
<p>Please remember for retrieving Knowledge type we have to load the metadata[<a href="#References">4</a>] 
in session. For that purpose, here we have retrieved PLM Environment in this use 
case.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the PLM attributes"></a>Retrieve the masked PLM Attributes</h3>
<p>This is the important step of this use case. In this step, we retrieve masked 
PLM Attributes of input type. For retrieving MaskType PLM attributes, we are giving 
valid PLM Mask Type i.e. one of the mask types from following list, which describes 
purpose of each mask.</p>
<ul>
	<li>MaskWrite : for component modification purpose</li>
	<li>MaskQuery : for full fledge query purpose</li>
	<li>MaskEZQuery : for simplified query purpose</li>
	<li>MaskCreate : for component creation purpose</li>
	<li>MaskRead : for component display purpose</li>
	<li>MaskTree : for tree display purpose</li>
</ul>
<table class="code">
	<tr>
		<td>
		<pre>...
	CATListValCATAttributeInfos <strong>iListOfAttributes</strong>;
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
 							        <strong>CATCkePLMTypeAttrServices</strong>::<strong>MaskWrite</strong>,
					                          <strong>iListOfAttributes</strong>); 
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
							        CATCkePLMTypeAttrServices::<strong>MaskQuery</strong>,
						                 iListOfAttributes); 
	
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
							        CATCkePLMTypeAttrServices::<strong>MaskEZQuery</strong>,
						                 iListOfAttributes); 
	
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
							        CATCkePLMTypeAttrServices::<strong>MaskCreate</strong>,
						                 iListOfAttributes); 
	
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
							        CATCkePLMTypeAttrServices::<strong>MaskRead</strong>,
						                 iListOfAttributes); 
...</pre>
		<pre>	hr = CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType(spTypeOnInputPLMClassType,
							        CATCkePLMTypeAttrServices::<strong>MaskTree</strong>,
						                 iListOfAttributes); 
...
         int  iSizeList  =  iListOfAttributes.Size(); 
         for (int i=1; i&lt;=iSizeList; i++)
         {
	<strong>    CATAttributeInfos</strong> AttrInfo =  <strong>iListOfAttributes[i]</strong>;
	    hr = ::<strong>CAAAdpDisplayAttributeInfo</strong>(AttrInfo, <strong>TRUE</strong>);</pre>
		<pre>...</pre>
		<pre>	}
 ...
</pre>
		</td>
	</tr>
</table>
<p>For retrieving Masked PLM attribute list, we are using <strong>ListFilteredAttributesFromMaskAndCustoType</strong> 
method of <strong>CATCkePLMNavCustoAccessPublicServices</strong>. Here we are giving 
PLM Mask Type and <code><strong>CATIType</strong></code><code><strong>*</strong></code>(Type 
that is retrieved from <code><strong>PLMType</strong></code>) as input, and retrieving 
list whose elements are of the type <code><strong>CATAttributeInfos</strong></code>, 
which map to each attribute associated with the <code><strong>PLMType</strong></code>. 
The next step is to retrieve attribute information from each <code><strong>CATAttributeInfos</strong></code> 
object by a call to a global routine namely. ::<code><strong>CAAAdpDisplayAttributeInfo.
</strong></code></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DisplayAttributeInfo"></a>Displaying Attribute Information extracted 
from CATAttributeInfos</h3>
<p>A global routine <code><strong>CAAAdpDisplayAttributeInfo</strong></code>, exposed 
by the <code><strong>CAAPLMClientAdapter</strong></code>.<code><strong>edu/CAAAdpUtilities</strong></code> 
library extracts PLM Class attribute information from a CATAttributeInfos object 
input. It outputs Attribute Name, Attribute Type, its <code><strong>IsWritable</strong></code>,
<code><strong>IsMandatory</strong></code> values (yes/no) and its default values 
[6]. </p>
<p>In addition, the <code><strong>CAAAdpDisplayAttributeInfo</strong></code> routine, 
also extracts the Help and Authorized values associated with an attribute, stored 
within the CATAttributeInfos object. But it is important to note that this information 
is available with the CATAttributeInfos object, only if its retrieved through the
<strong>CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType</strong> 
call, which returns us a list of CATAttributeInfos objects represented the masked 
PLM Class attributes information.</p>
<p>The sections below, detail the sections of the <code><strong>CAAAdpDisplayAttributeInfo</strong></code> 
routine which extract the Help and Authorized values of a Masked PLM Attribute..</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="HelpValue"></a>Help Value</h4>
<p>An attribute information available through its Masked view also includes its 
Help values and Authorized values[<a href="#References">4</a>]. It should be noted 
that at a time, its either the help value or the authorized values, which is valuated 
for any attribute. Meaning, we cannot have an attribute whose both the help and 
authorized values are valuated, at the same time. </p>
<p>The help values of an attribute are retrieved as depicted below.</p>
<table class="code">
	<tr>
		<td>
		<pre>HRESULT   <strong>CAAAdpDisplayAttributeInfo</strong>(const CATAttributeInfos &amp;AttrInfo, CATBoolean bMaskView)
{</pre>
		<pre>      ...
      if(<strong>TRUE == bMaskView</strong>)
      {
	 if((attrtypename == &quot;<strong>String</strong>&quot;)||(attrtypename == &quot;<strong>Boolean</strong>&quot;))
	 {
	      <strong>CATListOfCATUnicodeString</strong> strListHelpValue;
	      hr = <strong>AttrInfo.GetHelpValues</strong>(<strong>strListHelpValue</strong>);
	  }else
	  {
  	      <strong>CATListOfDouble</strong> dblListHelpValue;
	      hr = <strong>AttrInfo.GetHelpValues</strong>(dblListHelpValue);
	  }
       }
...</pre>
		</td>
	</tr>
</table>
<p><strong><code>CATAttributeInfos::</code></strong><code><strong>GetHelpValues</strong></code> 
returns a list of help values. It is overridden to return this list as either a
<code><strong>CATListOfDouble</strong></code> (for int, dimension data types) or
<code><strong>CATListOfCATUnicodeString</strong></code> (for the rest). Please note 
that attributes of the type List, enum and those which have authorized values associated 
with them, will not have help values associated with them.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="AuthorizedValue"></a>Authorized Value</h4>
<p>This step retrieves an authorized values for an attribute, visible through its 
Masked view. We repeat that if a help value exists for an attribute (section above), 
then it will not have an authorized value associated with it. The Parameters Management 
object which stores the default values of an attribute (retrieved in an earlier 
step) returns us an object to manage parameter manipulation. It is through this 
object that a list of authorized values associated with an attribute can be retrieved, 
as the steps below indicate.</p>
<table class="code">
	<tr>
		<td>
		<pre>...
      if(<strong>TRUE == bMaskView</strong>)
      {		
	if (NULL_var!=spCkeParmOnDefaultValue)
	{
	     <strong>CATIParmManipulator_var</strong> spParmManipulatorOnDefaultValue = <strong>spCkeParmOnDefaultValue-&gt;Manipulator()</strong>;
	     if(NULL_var != spParmManipulatorOnDefaultValue)
	     {
		if((attrtypename == &quot;<strong>String</strong>&quot;)||(attrtypename == &quot;<strong>Boolean</strong>&quot;))
		{
		     <strong>CATListOfCATUnicodeString</strong> strListAuthorizedValue;
		     <strong>spParmManipulatorOnDefaultValue-&gt;GetEnumerateValues</strong>((void*)&amp;<strong>strListAuthorizedValue</strong>);
				
		 }else 
		 {
		      <strong>CATListOfDouble</strong> dblListAuthorizedValue;
		      <strong>spParmManipulatorOnDefaultValue-&gt;GetEnumerateValues</strong>((void*)&amp;<strong>dblListAuthorizedValue</strong>);
				
		 }
	      }
	 }
      }  
...</pre>
		</td>
	</tr>
</table>
<p><code><strong>spCkeParmOnDefaultValue</strong></code>, a <code><strong>CATICkeParn</strong></code> 
on the parameter management object storing the default value in it, retrieve in 
an earlier use case[<a href="#References">6</a>]. A call to <code><strong>CATICkeParm::</strong></code><code><strong>Manitpulation</strong></code> 
returns a <code><strong>CATIParmManipulation</strong></code>* on parameters manipulator 
management component.</p>
<p><code><strong>CATIParmManipulator::GetEnumerateValues</strong></code> returns 
authorized value. It is overridden to return this list as either a <code>
<strong>CATListOfDouble</strong></code> (for int, dimension data types) or <code>
<strong>CATListOfCATUnicodeString</strong></code> (for the rest). Please note that 
attributes of the type List, enum and those which have help values associated with 
them, will not have authorized values associated with them.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><strong>CAAAdpDisplayMaskedPLMAttributes</strong></code> use case ends 
by simply closing the PLM session. Since all use cases necessarily conclude by closing 
the PLM session, we have a dedicated article on this topic viz. &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case retrieves knowledge type from knowledge dictionary. For loading 
metadata we are retrieving PLM environment. Then we are retrieving masked PLM Attributes 
using <strong>ListFilteredAttributesFromMaskAndCustoType</strong> method of
<strong>CATCkePLMNavCustoAccessPublicServices.</strong></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAdpUcPLMAttributes.htm">Working with PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating 
		a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPLMTaAllKnowPLMAttributes.htm">Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllMask.htm">
		Security Mask Overview</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAAdpUcPLMAttributes.htm">Retrieving PLM Class Attribute Information</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
