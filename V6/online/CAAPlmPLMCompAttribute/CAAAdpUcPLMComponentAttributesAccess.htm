<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Accessing PLM Attributes of PLM Component</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
<style type="text/css">
.style1 {
	font-family: monospace;
	font-size: x-small;
	color: #976970;
	font-weight: bold;
}
</style>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Accessing PLM Attributes of PLM Component</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>The objective of this use case is to display the values of each public 
      PLM attributes of an input PLM Component. 
      <p>This use case demonstrates retrieving information about PLM Attributes 
      associated with Knowledge Type from PLM Component using two means 
      <em>CATIAttributesDescription</em> interface and <em>CATCkePLMNavPublicServices</em> class<ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#Where">The CAAAdpPLMComponentAttributesAccess Use Case</a>
          <ul>
            <li><a href="#What">What does the CAAAdpPLMComponentAttributesAccess do</a></li>
            <li><a href="#How">How to launch CAAAdpPLMComponentAttributesAccess </a></li>
            <li><a href="#Where">Where to find the CAAAdpPLMComponentAttributesAccess
              code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>

<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>This use case illustrates how to retrieve PLM Attributes activating specific 
filters by using <i>
CATIAttributesDescription</i> interface and <em>CATCkePLMNavPublicServices</em> class.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="UseCase"></a>The CAAAdpPLMComponentAttributesAccess Use Case</h2>
<p> <code><b>CAAAdpPLMComponentAttributesAccess</b></code> is a use case of the <code><b> CAAPLMClientAdapter.edu</b></code>
framework that
illustrates the <code><b>CATPLMIntegrationAccess</b></code>  framework capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpPLMComponentAttributesAccess Do</h3>

<p>In this use case, we are displaying PLM attributes and their values of PLM 
Component using different attribute type filters and in addition to that we are 
showing PLM Attribute's attribute values.</p>

<p>this use case demonstrates how to retrieve PLM Attributes of PLM Component by 
using using CATIAttributesDescription interface and <em>CATCkePLMNavPublicServices</em> class. </p>

<p>Firstly we are retrieving PLM Attributes from PLM Component by using <em>CATCkePLMNavPublicServices</em> . Internally 
<em>CATCkePLMNavPublicServices</em>
retrieve attribute list by using<i> CATIAttributesDescription</i> and provide 
filter for different type of PLM Attributes like Mandatory, Optional and 
Identification. Here in this use case we are using these filters for displaying 
PLM Attributes. We are using&nbsp; <code>CATCkeObjectAttrReadServices</code> for retrieving 
PLM Attribute values of PLM Component.</p>

<p>Here we display PLM Attributes and their values of PLM Component. For this we 
can give filter option as AttibuteType ( 'All', 'Mandatory', 'Optional' or 
'Identification'). This will sort Attributes according to their types. 
<a href="#Fig. 1">Fig 1</a> 
shows sample example for Mandatory type PLM Attributes.</p>

<table border="0" >
      <caption>
        <p align="left"><a name="Fig. 1"></a><b>Fig.1  Sample Result for 
        Mandatory PLM Attribute set of PLM Component and their Values</b></p>
      </caption>
      <tr>
        <td class="code">Attribute Name : V_isLastVersion<br>
        Attribute Value : true<br>
        <br>
        Attribute Name : V_user<br>
        Attribute Value : odtitp<br>
        <br>
        Attribute Name : V_organization<br>
        Attribute Value : MyCompany</td>
      </tr>
    </table>

<p>In addition, we are retrieving PLM Attributes of knowledge types [<a href="#References">1</a>] 
( projected PLM Class type on client side) by using <i>
CATIAttributesDescription</i> . These attribute list is one and same list as of 
retrieved from <em>CATCkePLMNavPublicServices</em><i>. </i>For retrieving all attributes, 
we are using<i> List </i>method of<i> CATIAttributesDescription</i>. This method 
has an optional argument &quot;recursively&quot;. This is a Boolean (TRUE or FALSE) 
option. This input decides to retrieve all attributes defined by knowledge type 
and its derived PLM classes or only defined by knowledge type.</p>

<p>Knowledge type implements two interfaces <i>CATIAttributesDescription</i>&nbsp; 
and <i>CATIType</i>. In this use case we are retrieving PLM Attribute list using <i>
CATIAttributesDescription</i>&nbsp; in the form of <em>CATAttributeInfos</em>. Moreover, we 
are displaying PLM Attribute's attribute value like AttributeName, IsMandatory 
and other values by using CATAttributeInfos. and then we are displaying 
attribute type (string, Boolean, etc..) </p>

<p>Input FALSE will retrieve PLM attributes those exclusively defined by 
Knowledge type. and TRUE will retrieve all PLM attributes those defined by the 
knowledge type and its derived PLM Classes.<a href="#Fig. 1">Fig.2 </a>shows sample result for FALSE as an 
input.</p>

<table border="0" >
      <caption>
        <p align="left"><a name="Fig. 2"></a><b>Fig.2  Sample&nbsp; for PLM Attribute 
        set of exclusively defined by Knowledge type </b></p>
      </caption>
      <tr>
        <td class="code">Attribute Name : V_IndustryCode<br>
        Attribute NLS Name : Industry code<br>
        IsMandatory : NO<br>
        Attribute Type Name : String<br>
        Attribute Type User Name : String<br>
        <br>
        Attribute Name : V_StdNumber<br>
        Attribute NLS Name : Standard Number<br>
        IsMandatory : NO<br>
        Attribute Type Name : String<br>
        Attribute Type User Name : String<br>
        <br>
        Attribute Name : V_BOM<br>
        Attribute NLS Name : BOM<br>
        IsMandatory : NO<br>
        Attribute Type Name : String<br>
        Attribute Type User Name : String<br>
        <br>
        Attribute Name : V_Supplier<br>
        Attribute NLS Name : Sub-contracted<br>
        IsMandatory : NO<br>
        Attribute Type Name : Boolean<br>
        Attribute Type User Name : Boolean<br>
        <br>
        Attribute Name : V_SupplierName<br>
        Attribute NLS Name : Supplier Name<br>
        IsMandatory : NO<br>
        Attribute Type Name : String<br>
        Attribute Type User Name : String<br>
&nbsp;</td>
      </tr>
    </table>

<h3><a name="How">How to Launch CAAAdpPLMComponentAttributesAccess</a> </h3>

<p>To launch <code><b>CAAAdpPLMComponentAttributesAccess</b></code> , you will need to set up the build time
environment, then compile <code><b>CAAAdpPLMComponentAttributesAccess</b></code> along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a><i>CAAAdpPLMComponentAttributesAccess</i></code><i>
</i><a><code><i>Repository Server User Password SecurityCtx PLMType 
PLMAttributeType  Recursively AttributeName1 Value1 [AttributeName2 Value2...]</i>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" height="309" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td >The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td  >The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th ><b>SecurityCtx</b></th>
    <td >a string representing the security context (Role.Organization.Project).
      Choose role as reviewer (since we only browse the PLM Data, no
      modifications)</td>
  </tr>
   
   	<tr>
	<th  > <b>PLMType</b></th>
	<td  >Represents the name of the PLM type </td>
    </tr>
  	<tr>
	<th> PLMAttributeType</th>
	<td>PLM Attribute type  'All' or 'Optional' or 'Mandatory' or 'Identification'</td>
    </tr>
    <tr>
    <th> Recursively</th>
	<td>TRUE | FALSE<p>Value = FALSE : You will retrieve PLM Attributes 
    exclusively defined by knowledge type.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRUE : 
    You Will retrieve PLM Attributes : Those defined by the knowledge type and 
    its derived PLM Classes.</td>
    </tr>
    <tr> 
    <th> AttributeName1</th>
	<td>PLM Attribute Name for querying PLM Component</td>
    </tr>
    <tr> 
    <th> Value1</th>
	<td>Value of PLM Attribute for querying PLM Component </td>
    </tr>
	
</table>


<!---------------------------------comment------------------------------------->

<p>The input&nbsp;data is retrieved by importing <code><b><a>CAAAdpQueryPLMComponent_CAR_MODEL_1</a></b></code><a><code><b>.</b></code></a><code><b>3dxml</b></code>
file for  Root product from the <a><code><b> CAAPLMClientAdapter.edu</b></code></a> 
fwk.</p>
<table id="table15">
    <tr>
      <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\InputData\</code></td>
    </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">2</a>] is the directory where the CAA CD-ROM
is installed.</p>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.&nbsp;Please
note that the output depicted for this Use Case (<a href="#What">What does the
Use Case do</a> section) is the result of the query run exclusively on the data imported
from this 3D XML file.&nbsp;So just in case your database already consists of components,
the results of the query are likely to differ based on the exact contents of
your database, after 3D XML file import.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Where"></a>Where to Find the CAAAdpPLMComponentAttributesAccess Code</h3>
<p>The <code><b>CAAAdpPLMComponentAttributesAccess</b></code> use case is located in the <code><b>CAAAdpPLMAttributes</b></code><a><code><b>.m</b></code></a> module of the
<a><code><b>CAAPLMClientAdapter</b><b>.edu</b></code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\</code><code>CAAPLMClientAdapter</code>.<code>edu</code><code>\CAAAdpPLMComponentAttributesAccess.m\</code></td>
  </tr>
</table>
<p>where <code><a><b>InstallRootDirectory</b></a></code>  [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><b>CAAAdpPLMComponentAttributesAccess</b></code> :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li>
  <a href="#Query for PLM components with input attribute set ">Query for PLM components with input attribute set</a></li>
  <li>
  <a href="#Open the first PLM Reference or PLM Rep Ref resulting of the query ">Open the first PLM Reference or PLM Rep Ref resulting of the query
  </a> </li>
  <li><a href="#Display Attributes and value of PLM component">Display Attributes and value of PLM component</a></li>
	<li><a href="#Display PLM Attribute values of Knowledge Type">Display PLM Attribute's attribute 
  values of knowledge type</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><b>CAAAdpPLMComponentAttributesAccess</b></code> use case begins by creating a session
and connecting to the input Repository.&nbsp; This,
being the most fundamental prerequisite for all batch use cases, it is the first
step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer Role
(since we ain't modifying PLM data but only retrieving it from the database). There are other parameters as well,
details of which can be found in the&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
use case article [<a href="#References">3</a>].
This article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3>
<a name="Query for PLM components with input attribute set ">
</a>  Query for PLM components with input attribute set</h3>

<p>
We launch a search in the database to retrieve PLM Components
conforming the input criteria: a type of PLM Componenent, and a list of couple (attribute name, attribute value).</p>


<pre class="code"  >
...
  CATListPtrCATAdpQueryResult oQueryResults;
  CATIType* opiCATIType = NULL;
  hr = CAAAdpGetPLMObjectsFromAttrAndFromType(ilistOfAttribute,ilistOfValues,
                                              iStrPLMType,opiCATIType,
                                              oAttributeSet,oQueryResults);
</pre>
    
<p>We use an internal service, <span class="style1">
CAAAdpGetPLMObjectsFromAttrAndFromType</span> , from CAAAdpPLMClientAdapter.edu framework.</p>
<p>The return of this query is a list of <i>CATAdpQueryResult</i>
objects. These objects contain information of the PLM Components. Thus its only
the information of the PLM Components which is sought and not the actual
components.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3>
<a name="Open the first PLM Reference or PLM Rep Ref resulting of the query ">
</a>  Open the first PLM Reference or PLM Rep Ref resulting of the query</h3>

<p>
Here we will open first PLM Component from query result. For that we will seek 
their identificator from <code><b>CATAdpQueryResult</b></code> object and explicitly we will load 
first PLM Component in current session.</p>

<p>
User will decide which kind of PLM Component to be opened by choosing PLM core 
type as an input. Details of opening PLM Component we can be found in the 
&quot;<b>Querying,</b> <b>Expanding and Opening PLM Components</b>&quot;[<a href="#5">5</a>] use case 
article.</p>

<pre class="code" >
...
   CATAdpQueryResult* pFirstResult = NULL;
   pFirstResult =<b> oQueryResults[1]</b>;
		
   CATICkeObject *piCkeObjectOnComp = NULL;
   CATOmbLifeCycleRootsBag Bag;
   CATAdpOpenParameters params(CATAdpExpandParameters::OneLevelNavigation);
   <strong>CATAdpOpener</strong> opener(Bag,params);
	
   CATIAdpPLMIdentificator * oIdentifier = NULL;	
   hr = pFirstResult-&gt;GetIdentifier(oIdentifier);
   if ( SUCCEEDED(hr) &amp;&amp; (NULL != oIdentifier ) )
   {
      hr = opener.<strong>CompleteAndOpen</strong>(oIdentifier,IID_CATICkeObject,(void**) &amp;piCkeObjectOnComp);		
...</pre>
   <script type="text/javascript">insertLinkToTop();</script>
<h3>
<a name="  Retrieve the knowledge Type">
</a><a name="Display Attributes and value of PLM component">
</a>Display Attributes and value of PLM component</h3>
<p>
Here we are displaying PLM Attributes of PLM Component and their values. Firstly 
we retrieve attributes according to Attribute type filter criteria 'All', 
'Optional', 'Mandatory' and 'Identification' thanks to <i>
CATCkePLMNavPublicServices</i>.&nbsp; This class 
retrieves PLM Attributes info from PLM Component in the form of
<code><b>CATAttributesInfo</b></code>. </p>
<ul>
  <li>All : all the PLM Attributes</li>
  <li>Optional : only the optional PLM Attributes</li>
  <li>Mandatory : only the mandatory PLM Attributes</li>
  <li>Identification : only the identifier Set PLM Attributes</li>
</ul>
<pre class="code" >
...
    CATListValCATAttributeInfos ListOfAttributeInfos;
...
   hr = <b>CATCkePLMNavPublicServices::ListAttributesFromObject</b>(CATCkePLMTypeAttrServices<b>::All</b>,
		                                      <b>piCkeObjectOnComp</b>,
	      				           <b>ListOfAttributeInfos</b>,
						 FALSE); 
...
   hr = <b>CATCkePLMNavPublicServices::ListAttributesFromObject</b>(CATCkePLMTypeAttrServices::<b>Optional</b>,
   		                                    <b>piCkeObjectOnComp</b>,
						<b>ListOfAttributeInfos</b>,
						FALSE); 
...   
   hr = <b>CATCkePLMNavPublicServices::ListAttributesFromObject</b>(CATCkePLMTypeAttrServices::<b>Mandatory</b>,
    		                                    <b>piCkeObjectOnComp</b>,
						<b>ListOfAttributeInfos</b>,
						FALSE); 
...
    
   hr = <b>CATCkePLMNavPublicServices::ListAttributesFromObject</b>(CATCkePLMTypeAttrServices::<b>Identification</b>,
   		                                    <b>piCkeObjectOnComp</b>,
						<b>ListOfAttributeInfos</b>,
						FALSE); 
...
   hr = <strong>DisplayPLMCompAttributes</strong>(piCkeObjectOnComp,ListOfAttributeInfos);
...</pre>
    <p>
In this use case for displaying PLM Attributes and their values we have written 
function <code>DisplayPLMCompAttributes</code>. This function will show each attribute name 
and their values.</p>
<pre class="code" >
...
  int  iSizeList  =  iListOfAttributes.Size(); 
  for (int i=1; i &lt;=iSizeList; i++)
  {
	<b>CATAttributeInfos</b> <b>AttrInfo</b> =  <b>iListOfAttributes</b>[i];
 
	CATUnicodeString attrName;
	attrName = <b>AttrInfo</b>.<b>Name</b>();
		
	CATUnicodeString stringValue;
	<b>CATCkeObjectAttrReadServices</b>::<b>GetValueAsString</b>(<b>spCkeObject</b>,<b>attrName</b>,<b>stringValue</b>);
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
    <h3>
<a name="Display PLM Attribute values of Knowledge Type"></a>Display PLM Attribute's Attribute values of 
Knowledge Type</h3>
<p>
Here we are displaying PLM Attribute list of knowledge type. Thanks to<i> 
CATIAttributesDescription</i>&nbsp; for providing following filter criteria.</p>
<ul>
  <li>&nbsp;TRUE :&nbsp;&nbsp;&nbsp; All PLM Attributes : those defined by the 
  knowledge type and its derived PLM Classes</li>
  <li>&nbsp;FALSE :&nbsp; PLM Attributes exclusively defined by the knowledge 
  type</li>
</ul>
<p>
We can retrieve PLM Attributes with above filter criteria by setting Boolean 
value 'TRUE' or 'FALSE' to Recursively input .</p>
<table class="code" width="912">
  <tr>
    <td ><pre>...
   CATIAttributesDescription  *  piAttributesDescriptionOnKnowledgeType  =  NULL;  
   hr = opiCATIType-&gt;QueryInterface(IID_CATIAttributesDescription,
					(void  **)  &amp;<b>piAttributesDescriptionOnKnowledgeType</b>);  
	
   CATBoolean bRecursively = FALSE;	
   if(0 == strcmp("TRUE",Recursively))   bRecursively = TRUE;
	 
   CATListValCATAttributeInfos ListValAttributeInfoKnowledgeType;
   hr = <b>piAttributesDescriptionOnKnowledgeType</b>-&gt;<b>List</b>(&amp;<b>ListValAttributeInfoKnowledgeType</b>,<b>bRecursively</b>);
				
   int iSizeListKnowledgeType = ListValAttributeInfoKnowledgeType.Size();
   if (iSizeListKnowledgeType &gt; 0)
	    hr = DisplayKnowledgeTypeAttributes(ListValAttributeInfoKnowledgeType);
...</pre>
    </td>
  </tr>
</table>

<p>Here also we have written method for displaying PLM Attributes of&nbsp; 
Knowledge Type <i>DisplayKnowledgeTypeAttributes</i>. This method displays 
Attribute Name, if mandatory or not, Attribute type's Name and User name.</p>

<table class="code" width="912">
  <tr>
    <td ><pre>...
  int  iSizeList  =  ListValAttributeInfoKnowledgeType.Size(); 
  for (int i=1; i&lt;=iSizeList; i++)
  {
    <b>CATAttributeInfos AttrInfo =  ListValAttributeInfoKnowledgeType</b>[i];
 
    CATUnicodeString attrName;
    attrName = <b>AttrInfo.Name</b>();
				 
    CATBoolean bIsMandatory= <b>AttrInfo.IsMandatory</b>();
			
    CATIType_var spAttrType = <b>AttrInfo.Type</b>();
		
    CATUnicodeString attrtypename, attrtypeusername;
    attrtypename = <b>spAttrType-&gt;Name</b>();
					
    attrtypeusername = <b>spAttrType-&gt;UserName</b>();
				
}...</pre>
    </td>
  </tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><b>CAAAdpPLMComponentAttributesAccess</b></code> use case ends by simply closing the PLM
session. Since all PS use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">3</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>

<p>The use case fundamentally queries the database seeking information of PLM
Components which conform to an input criteria.&nbsp;</p>

<p>The criteria for this search is a combination of the attribute-value sets and
the &quot;<strong>PLM T</strong><code><b>ype</b></code>&quot; input.&nbsp; </p>

<p>The query result is a <code><b>CATAdpQueryResult</b></code> object, which
contains the information associated with&nbsp; the PLM Components satisfying our search criteria.</p>

<p>The we open First PLM component from query result. And then we display PLM 
Attributes of PLM Component. </p>

<p>There after we display list of PLM Attributes of Knowledge type. </p>
<p>The main used API are:</p>

<ul>
  <li>List the PLM Attributes with the help of&nbsp; <i>ListAttributesFromObject</i> 
  method of <i>CATCkePLMNavPublicServices</i> to retrieve attribute value</li>
  <li>List PLM Attributes by using <i>List</i> method of&nbsp; <i> 
CATIAttributesDescription</i>&nbsp; to retrieve attribute information</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="References"></a>References</h2>
<table>
    <tr>
    <td valign="top">[1]</td>
    <td>
       <a href="CAAPLMTaAllKnowPLMAttributes.htm">Accessing PLM Attributes</a></td>
    </tr>
    <tr>
    <td valign="top">[2]</td>
    <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a> </td>
    </tr>
    <tr>
    <td valign="top">[3]</td>
    <td>
    <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating a Basic PLM Batch</a></td>
    </tr>
    <tr>
    <td valign="top">[4]</td>
    <td>
       <a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">Understanding PLM Environment</a></td>
    </tr>
    <tr>
    <td valign="top">[<a name="5">5</a>]</td>
    <td>
       <a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
    </tr>
</table>
  
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong>     [Feb 2008]</td>
    <td valign="top">Document created</td>
  </tr>
    <tr>
    <td valign="top">Version: <strong>2</strong>     [Nov 2010]</td>
    <td valign="top">Document updated to introduce CATCkePLMNavPublicServices</td>
  </tr>

<script type="text/javascript">insertLinkToTop();</script>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


