<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Integrating a Customized Catalog Browser in your Command</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Integrating a Customized Catalog Browser in your Command</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case illustrates the customization of a Catalog Browser. A Catalog 
		Browser is a command which enables us browse a catalog to seek classified 
		items in it, which conform to an input criteria, and to instantiate a selected 
		item in our design context. The Catalog Browser also facilitates to build 
		the query criteria.</p>
		<p>The fundamentals of a Catalog, Catalog Browser, the need for Customization 
		are detailed in the Technical Article [<a href="#References">1</a>] which 
		delves deeper into these related subjects.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAACLGLaunchCtlgBrowser Use Case</a>
				<ul>
					<li><a href="#What">What Does CAACLGLaunchCtlgBrowser Do</a></li>
					<li><a href="#How">How to Launch CAACLGLaunchCtlgBrowser</a></li>
					<li><a href="#Where">Where to Find the CAACLGLaunchCtlgBrowser 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case teaches us</p>
<ul>
	<li>Customizing a Catalog Browser with a Catalog and Query Criteria.</li>
	<li>Integrating a customized Catalog Browser and managing it from within our 
		CATCommand.</li>
	<li>Building a Catalog Browse Query.</li>
	<li>Query and Open a Catalog in session.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACLGLaunchCtlgBrowser Use Case</h2>
<p>CAACLGLaunchCtlgBrowser is a use case of the CAALibraryInterfaces.edu framework 
that illustrates PLMLibraryInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACLGLaunchCtlgBrowser Do</h3>
<p>The Use Case fundamentally customizes the &quot;<strong>Catalog Browser</strong>&quot; 
dialog panel. It involves a scenario where users frequently access a catalog &quot;<strong>MyScrewCatalog</strong>&quot;, 
for eg. to seek a screw of specific diameter. Since, in this case it is always the 
same catalog being browsed and the query is built essentially with &quot;<strong>diameter</strong>&quot; 
as the keyword input, customizing the Catalog Browser panel involves initializing 
it with the &quot;Catalog&quot; and &quot;diameter&quot; as a keyword in its query. 
The customization thus renders simplicity and effectiveness to the user interactions. 
We effectively seek from the user only those inputs which are bare minimum, in this 
case, only the diameter of the screw.</p>
<p>Lets run through this Use Case execution.</p>
<p>A command &quot;<strong>Customizing a Catalog Browser</strong>&quot; is integrated 
within the <strong>Product Workshop</strong> in <strong>CATIA</strong>, as indicated 
in [<a href="#Fig1a">Fig. 1a</a>].</p>
<table>
	<caption><a name="Fig1a"></a>Fig. 1a: Toolbar and Command</caption>
	<tr>
		<td>
		<img alt="Toolbar and Command" height="96" src="images/CAACLGUCCustomizingCtlgBrowser_Fig1a.jpg"/></td>
	</tr>
</table>
<p>Activate the Command. A Dialog panel pops up which lets the user to enter the 
diameter value of the screw being sought. [<a href="#Fig1b">Fig. 1b</a>]</p>
<table>
	<caption><a name="Fig1b"></a>Fig. 1b: &quot;Diameter Input&quot; Dialog Box</caption>
	<tr>
		<td><img alt="" src="images/CAACLGUcCustomizingCatalogBrowserNew.jpg"/></td>
	</tr>
</table>
<p>At the same time, a Catalog Browser panel also appears. It is initialized with &quot;<strong>MyScrewCatalog</strong>&quot; 
and the query criteria as &quot;<strong>Diameter &lt;= 10</strong>&quot;, as the 
default values. [<a href="#Fig1c">Fig. 1c</a>]</p>
<table>
	<caption><a name="Fig1c"></a>Fig. 1c: Catalog Browser Panel with Catalog and 
	Query Initialized to Default</caption>
	<tr>
		<td>
		<img alt="Catalog Browser Panel" height="229" src="images/CAACLGUcCustomizingCtlgBrowser_Fig1c.jpg" width="606"/></td>
	</tr>
</table>
<p><strong>MyScrewsCatalog</strong> consists of a <strong>Chapter_Screws</strong> 
beneath it. This chapter has an item <strong>Representation2---</strong> in it. 
A keyword Diameter is associated with this chapter, valuated to 20. This attribute 
is inherited by the items beneath the chapter.</p>
<p>Since, none of the items in <strong>MyScrewsCatalog</strong>, conform to the 
default search criteria &quot;<strong>Diameter&lt;=10</strong>&quot;, none are listed 
in the catalog browser panel above. </p>
<p>User inputs a new diameter value &quot;<b>3</b><strong>0</strong>&quot; and clicks 
on &quot;<strong>UpdateDiameter</strong>&quot;[<a href="#Fig2">Fig. 2</a>]</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2 New Diameter Value Input</caption>
	<tr>
		<td>
		<img alt="" height="119" src="images/CAACLGUcCustomizingCatalogBrowserUpdatDia.jpg" width="282"/></td>
	</tr>
</table>
<p>This updates the query criteria to <strong>Diameter&lt;=</strong><b>3</b><strong>0</strong>. 
The user then runs this query on <strong>MyScrewCatalog\Chapter_Screws </strong>
by selecting the <strong>Chapter_Screws</strong> in the Catalog Browser panel, and 
its output is listed in the Browser panel [<a href="#Fig3">Fig. 3</a>]. You'll notice
<strong>Representation2---</strong>, an output of the new query run, listed in the 
panel. The MyScrewsCatalog is delivered as a 3DXML file, details of which could 
be found in the &quot;<a href="#How">How to Launch</a>&quot; section.</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3 Query Updated and Rerun on the Catalog</caption>
	<tr>
		<td>
		<img alt="" src="images/CAACLGUcCustomizingCatalogBrowserCatalog.jpg"/></td>
	</tr>
</table>
<p>The Use Case thus illustrates the user interactions involved, to browse a catalog 
with a Customized Catalog Browser. Since the Catalog and the query criteria is partly 
initialized by default, the user interactions involved in a typical industrial scenario 
are greatly simplified, thus leading to an increase in productivity.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACLGLaunchCtlgBrowser</h3>
<p>To launch <code>CAACLGLaunchCtlgBrowser</code>, you will need to set up the build 
time environment, then compile <code>CAACLGLaunchCtlgBrowser</code> along with its 
prerequisites, set up the run time environment, and then launch CATIA [<a href="#References">3</a>].</p>
<ul>
	<li>Edit the <code>CNext/code/dictionary/CAALibraryInterfaces.edu.dico</code> 
		dictionary. Be sure that the #CAA# uncommented from the following lines 
		:
		<pre class="code">#CAA# CAACLGBrowsrProductWksAddin CATIPRDWorkshopAddin libCAACLGProductWksAddin
#CAA# CAACLGBrowsrProductWksAddin CATIWorkbenchAddin	libCAACLGProductWksAddin</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code></li>
	<li>
		<p>The input model is retrieved by importing the </p>
		<p><code>InstallRootFolder\CAADoc\CAALibraryInterfaces.edu\InputData\CAACLGLaunchCtlgBrowser_MyScrewCatalog.3dxml</code></p>
		<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is 
		the folder where the API CD-ROM is installed.</p>
		<p>This 3D XML file contains the Catalog Reference with the following attributes:</p>
		<ul>
			<li><code>PLM_ExternalID</code>: MyScrewCatalog</li>
			<li><code>Version</code>: NA</li>
		</ul>
		<p>Please use the 3DXML provided with this UC, since it has all the data 
		essential for the UC to illustrate the object selection concepts. Import 
		this 3D XML file, <strong>modify the code</strong> at the step [<a href="#Step21">Opening in Session a Catalog Component</a>] 
		to take into the account the PLM_ExternalID of the newly imported component 
		or interactively edit the Catalog PLM_ID so that it conforms with the value 
		hardcoded in the customization. Next proceed with the UC execution. </p>
		<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
		for how to import and reimport such a 3D XML file in your PLM repository.</p>
	</li>
	<li>Open VPM Physical Editor.</li>
	<li>Click the<strong> &quot;Customize Catalog Browser&quot;</strong> command. 
		The steps to proceed further are detailed in the &quot;<strong>What does 
		the UC do</strong>&quot; section above [<a href="#What">#</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACLGLaunchCtlgBrowser Code</h3>
<p>The <code>CAACLGLaunchCtlgBrowser</code> use case is made of two class, <code>
CAACLGScrwDiaInputDlg</code> and <code>CAACLGLaunchCtlgBrowser</code>, located in 
the <code>CAACLGCommands</code>.m module of the <code>CAALibraryInterfaces.edu</code> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALibraryInterfaces.edu\CAACLGCommands.m</code></p>
<p>For the Add-In, it includes the <em>CAACLGProductWksAddin</em> class, located 
in the CAACLGProductWksAddin.m module of the CAALibraryInterface.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALibraryInterfaces.edu\CAACLGProductWksAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The UC implementation includes the steps listed below</p>
<ol>
	<li><a href="#Step1">Launching the Dialog Box to Input the Diameter Value for 
		Query</a></li>
	<li><a href="#Step2">Creating, Initializing, and Displaying the Catalog Browser 
		(Once)</a>
		<ol>
			<li><a href="#Step21">Opening in Session a Catalog Component</a></li>
			<li><a href="#Step22">Creating the Initial Filter</a></li>
			<li><a href="#Step23">Displaying the Browser Panel</a></li>
		</ol>
	</li>
	<li><a href="#Step3">Getting the Selected Items (When the Browser Panel Is Closed)</a></li>
	<li><a href="#Step4">Modifying the Filter (Each Time End User Changes the Diameter)</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Launching the Dialog Box to Input the Diameter Value for 
Query</h3>
<p>On clicking the command integrated in <code>CATIA</code>, it triggers our
<code>CATCommand</code> <code>CAAClgLaunchCtlgBrowser</code>::<code>Activate</code> 
action. Since our command is in exclusive mode, the Command Header invokes its Activate 
method.</p>
<p>This action instantiates a dialog panel for user to input the diameter value. 
It is this diameter value with which the search criteria is built later.</p>
<pre class="code">CATStatusChangeRC <strong>CAACLGLaunchCtlgBrowser::Activate</strong>(CATCommand *iPublisher,
				       CATNotification *iNotification)
{
	<strong>_pDiaInputDlg = new CAACLGScrwDiaInputDlg();</strong>
	
	if(NULL!= _pDiaInputDlg)
	{
&lt;endl;

		// Build the Diameter Dialog
		_pDiaInputDlg-&gt;		_pDiaInputDlg-&gt;SetVisibility(CATDlgShow);

		<strong>_pDiaInputDlg-&gt;SetFather(this);</strong>

		// Handling the Dlg Close Notification
		<strong>AddAnalyseNotificationCB</strong>(_pDiaInputDlg,
					<strong>_pDiaInputDlg-&gt;GetDiaCLOSENotification(),
					(CATCommandMethod)&amp;CAACLGLaunchCtlgBrowser::OnDiaInputDlgClose</strong>,
					NULL);

		// Handling the Dlg UpdateDiameter Notification which redefines the query
		<strong>AddAnalyseNotificationCB</strong> (_pDiaInputDlg, 
					  <strong>_pDiaInputDlg-&gt;GetDiaUpdateNotification(),
					 (CATCommandMethod)&amp;CAACLGLaunchCtlgBrowser::
					 OnDiameterUpdatePushBActivateNotification,NULL)</strong>;
...</pre>
<p>To begin with, a dialog panel is instantiated. Our CATCommand is set as a Father 
of this panel, implying that our <code>CATCommand</code> subscribes for the dialog 
window notifications to further link them with associated actions.</p>
<p>Our CATCommand subscribes for the dialog close and the dialog update notifications. 
On dialog close, we simply close this panel. The Catalog Browser panel remains active.</p>
<p>On dialog update notification, the Catalog Browser panel is updated with the 
new criteria, the query is run to output a new list of items in the panel.</p>
<p>Next we launch a customized Catalog Browser.</p>
<pre class="code">&lt;endl;

		// Build the Diameter Dialog
		_pDiaInputDlg-&gt;...
&lt;endl;

		// Build the Diameter Dialog
		_pDiaInputDlg-&gt;     HRESULT rc = <strong>LaunchCatalogBrowser</strong>();
...</pre>
<p>The LaunchCatalogBrowser() implementation details are provided in the next step. 
The Catalog for browse is set to &quot;<strong>MyScrewsCatalog</strong>&quot; and 
the query criteria is initialized to &quot;<strong>Diameter&lt;=10</strong>&quot;</p>
<p>It is significant to note that our CATCommand::Activate is invoked not only on 
our command click, but each time our command gains focus. For the 1st invocation 
of Activate the Catalog Browser is instantiated while for each 2nd and subsequent 
invocations it simply ensures that the &quot;Diameter Input&quot; and the Catalog 
Browser dialog panels are in <code>CATDLGShow</code> mode.</p>
<p>When our command loses focus, the <code>CATCommand::Desactivate() </code> call 
is triggered, which simply hides the two dialog panels. Typically, when another 
command in shared mode gains focus, it causes our command to lose focus and vice 
versa.</p>
<p>One such example is when the user selects an item in the output list, and chooses 
to instantiate it in his own design context. The Instantiation command is in shared 
mode, and hence on activation, it results in our command losing its focus. On completion 
of the Instantiation, the focus is transferred back to our command, thus calling 
Activate again.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating, Initializing, and Displaying the Catalog Browser 
(Once)</h3>
<p>The <code>LaunchCatalogBrowser</code> implementation creates and displays a customized 
Catalog Browser <strong>Once</strong>. We emphasize &quot;<strong>Once</strong>&quot;, 
since when another command in &quot;Shared&quot; mode gains focus, it causes our 
command to loose its focus. Subsequently when our command regains focus (on the 
other command's termination), the Browser dialog panel will not be recreated but 
simply set to visible mode.</p>
<pre class="code">...
HRESULT <strong>CAACLGLaunchCtlgBrowser::LaunchCatalogBrowser</strong>()
{
<strong>	if (NULL == _pCurntEditor)
		return E_INVALIDARG;</strong>

	CATIPLMComponent* piPLMCompOnCLG = NULL;
	HRESULT rc = <strong>OpenCatalogInSession</strong>(piPLMCompOnCLG);
         ...</pre>
<p>An Editor serves as a Factory to create a Catalog Browser. So, to begin with, 
we confirm if an Editor exists.</p>
<p>If you are in a <code>CATCommand</code>, the Editor is retrieved (<code>_pCurntEditor</code>, 
a <code>CATFrmEditor* </code> type) with a call to <code>CATFrmEditor::GetCurrentEditor()</code> 
necessarily in the <code>CATCommand</code> constructor.</p>
<p>If you are in a StateCommand, a call to <code>CATStateCommand::Editor()</code> 
inherited from <code>CATDialogAgent</code>, returns a reference to the Editor. Since 
an Editor is fundamental for creating the Browser CAA Component, the associated 
command, if integrated in a General Workshop is activated (accessible) only if an 
Editor exists. Though, for our UC, we have integrated the command in the Product 
Workshop AddIn.</p>
<p><code>OpenCatalogInSession</code>() call loads a &quot;Catalog for browse&quot; 
in session (<code>piPLMCompOnCLG</code>, a <code><em>CATIPLMComponent</em></code>* 
type). The steps to load a catalog in session are detailed in the step further below 
<a href="#Step21">Opening in Session a Catalog Component</a>.</p>
<pre class="code">...
	if(SUCCEEDED(rc) &amp;&amp; (NULL!=piPLMCompOnCLG))
	{
		PLMICLGCatalogBrowserFactory  * piCLGBrowsrFactory= NULL;
	<strong>	rc = _pCurntEditor-&gt;QueryInterface(IID_PLMICLGCatalogBrowserFactory, 
						(void**)&amp;piCLGBrowsrFactory);</strong>
		...
		rc = <strong>piCLGBrowsrFactory-&gt;OpenCatalogBrowser</strong>(_piCLGBrowser,piPLMCompOnCLG);
...</pre>
<p>As we mentioned earlier, an Editor, a <code>PLMICLGCatalogBrowserFactory</code> 
implementation, serves as a Factory to create a Catalog Browser. The Catalog we 
loaded in session, is set as default for browse, in the Catalog Browser.</p>
<p>Next we set a filter (search criteria) to the Catalog Browser.</p>
<pre class="code">...
	rc = <strong>CreateAndSetFilterInCLGBrowser</strong>();
...
</pre>
<p>The call to <code>CreateAndSetFilterInCLGBrowser</code>() creates a filter (query 
criteria) and sets it to our Catalog Browser. The list of items in the Catalog which 
conform to this search criteria are immediately listed in the Catalog Browser panel. 
The method is detailed further below.</p>
<pre class="code">...
	<strong>DisplayCLGBrowsrDlg</strong>();
...</pre>
<p>The call to <code>DisplayCLGBrowsrDlg</code>() finally launches the Browser dialog 
panel, the UI associated with the Catalog Browser. Its implementation is detailed 
in the section further below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Opening in Session a Catalog Component</h4>
<p>A Catalog is fundamentally a PLM Entity. The Use Case [<a href="#References">3</a>] 
details the steps involved in loading a PLM Component in session.</p>
<pre class="code">HRESULT <strong>CAACLGLaunchCtlgBrowser::OpenCatalogInSession</strong>(CATIPLMComponent * &amp;piPLMCompOnCLG)
{
    ...
    const char * iStrPLMType=_pDiaInputDlg-&gt;GetComboSelectedValue();
    CATListOfCATString iListAttributeName ;
    CATListOfCATUnicodeString iListAttributeValue ;

    iListAttributeName.Append("PLM_ExternalID");
    iListAttributeValue.Append("MyScrewCatalog");
	
    iListAttributeName.Append(CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());		
    iListAttributeValue.Append("---");

    CATIAdpPLMIdentificator* piPLMIdOnCatalog = NULL;
	 
    rc = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				      iStrPLMType,piPLMIdOnCatalog);
    
    ...																 
      <strong>CATAdpOpener</strong> opener(_BagForCLG);
      rc= opener.<strong>CompleteAndOpen</strong>(piPLMIdOnCatalog,IID_CATIPLMComponent, (void**) &amp;piPLMCompOnCLG);
      ...</pre>
<p>Finally, with the type and the Attribute-value sets, we can easily retrieve and 
load the &quot;Catalog to browse&quot; in session. Please note the PLM_ExternalID 
of the &quot;catalog for browse&quot; which is hardcoded to &quot;MyScrewCatalog&quot; 
will be modified to the PLM_ExternalID value of the new Catalog created in the database 
by a 3DXML import.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Creating the Initial Filter</h4>
<p>We create a Filter (Query). This filter is then subsequently set and run, to 
have a list of classified items, conforming to the query criteria, listed within 
the Catalog Browser panel.</p>
<pre class="code">HRESULT <strong>CAACLGLaunchCtlgBrowser::CreateAndSetFilterInCLGBrowser</strong>()
{
	PLMICLGCatalogFilter *piCLGFilter =NULL;
	<strong>PLMCLGPublicCatalogFactoryServices *pCLGFactoryServices= new PLMCLGPublicCatalogFactoryServices;</strong>
	if(NULL!=pCLGFactoryServices)
<strong>		rc = pCLGFactoryServices-&gt;CreateFilterObject(piCLGFilter) ;</strong>
	...</pre>
<p>We retrieve a factory to create a Catalog Filter object. </p>
<pre class="code">...
	CATListOfCATUnicodeString ListOfValues;
	CATUnicodeString strUserInputDiameter =  &quot;10&quot;;
	<strong>_ListOfKeywords.Append(&quot;Diameter&quot;);
	_ListOfOperators.Append(&quot;&lt;=&quot;);
	ListOfValues.Append(strUserInputDiameter);</strong>
	if(NULL!=piCLGFilter)
	{
<strong>		rc = piCLGFilter-&gt;SetConditions(_ListOfKeywords,
					_ListOfOperators,
					ListOfValues,
					_AndOr_condtn);</strong>
...</pre>
<p>The filter object is set with a search criteria. A search criteria is a set of 
conditional expressions coupled with an And/Or condition.</p>
<p>The expressions are built with an attribute (keyword), its value and an operator 
to relate them. Some examples: Size &gt;= 15, Length &lt;= 30, Color Like &quot;\&quot;blue\&quot;&quot;</p>
<p>The Keywords (&quot;Size&quot;,&quot;Length&quot;,&quot;Color&quot;), Operators 
(&quot;&lt;=&quot;, &quot;&gt;=&quot;, &quot;Like&quot;) and Values (&quot;15&quot;,&quot;12mm&quot;,&quot;\&quot;value\&quot;&quot;) 
are of type CATUnicodeString. </p>
<p>The query criteria is finally set to the Catalog Filter.</p>
<p>Please note that our query criteria here is &quot;<strong>Diameter&lt;=10</strong>&quot;. 
Our Catalog Browser is invoked initialized with this query criteria.</p>
<pre class="code">...				
	PLMICLGCatalogFilter_var  spiCLGFilter(piCLGFilter);
<strong>	rc =  _piCLGBrowser-&gt;SetFilter(spiCLGFilter) ;</strong>
...</pre>
<p>The Filter is finally set to the Catalog Browser. At this stage, ofcourse the 
Browser panel is not yet launched. But later when the panel appears, it displays 
the last set search criteria. If the Browser panel already exists, its UI is updated 
to display the new search criteria.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Displaying the Browser Panel</h4>
<pre class="code">void <strong>CAACLGLaunchCtlgBrowser::DisplayCLGBrowsrDlg</strong>()
{
	<strong>HRESULT	 rc = _piCLGBrowser-&gt;GetBrowserDialog(_pBrowserDialog);</strong>
...</pre>
<p>The Catalog Browser, we dealt with so far, is infact a CAA Component, handled 
with the PLMICLGCatalogBrowser Interface. It internally manages a dialog box, which 
represents the UI for the Catalog Browser. Please note that the lifecycle of the 
dialog box is internally handled by the catalog browser and the calling code (users)</p>
<pre class="code">...
<strong>	_pBrowserDialog-&gt;SetFather(this);</strong>
	AddAnalyseNotificationCB(_pBrowserDialog,
         			_pBrowserDialog-&gt;GetDiaCLOSENotification(),
			(CATCommandMethod)&amp;CAACLGLaunchCtlgBrowser::OnBrowserDlgClose,
			NULL);</pre>
<p>Our <code>CATCommand</code> is set as the father of this dialog window, implying 
that the <code>CATCommand</code> subscribes for the dialog window notifications 
to further link them with associated actions. Please note that on the Browser panel 
CLOSE event, our CATCommand is terminated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Getting the Selected Items (When the Browser Panel Is Closed)</h3>
<p>User has selected an item from those listed (query output) in the browser panel. 
On Browser panel close, we retrieve the items selected and retrieve information 
of each of those. The items classified in a Catalog either point to a PLM Entity 
or a non-PLM Entity.</p>
<pre class="code">void <strong>CAACLGLaunchCtlgBrowser::OnBrowserDlgClose</strong>(CATCommand  *iPublisher,
					CATNotification *iNotification ,
					CATCommandClientData iUsefulData)
{
	CATLISTV(CATBaseUnknown_var) listResults;
	...
	rc = <strong>_piCLGBrowser-&gt;GetSelectedObjects(listResults)</strong>;
	...
</pre>
<p>The selected items are retrieved in a list. </p>
<pre class="code">...	
	int size = listResults.Size();
...
	for(int i = 1; i&lt;= size; i++)
	{
		CATBaseUnknown_var spSelected_elem = listResults[i];
		PLMICLGBrowserItem *piBrowseritem = NULL;
                  ...		
<strong>		HRESULT rc = spSelected_elem-&gt;QueryInterface(IID_PLMICLGBrowserItem,
							(void**)&amp;piBrowseritem);</strong>
		...
		CATUnicodeString Elem_name;
		<strong>piBrowseritem-&gt;GetName(Elem_name);</strong>
	         ...
</pre>
<p>An item in a Catalog is essentially a <code><em>PLMICLGBrowserItem</em></code> 
implementation. A call to <code><em>PLMICLGBrowserItem</em>::GetName() </code>retrieves 
the identity (name) of the item.</p>
<pre class="code">...
<strong>	CATBaseUnknown_var spSelected_elem = listResults[i];
</strong>	PLMICLGBrowserPLMItem *piBrowserPLMitem = NULL;
          ...		
<strong>	HRESULT rc = spSelected_elem-&gt;QueryInterface(IID_PLMICLGBrowserPLMItem,
						(void**)&amp;piBrowserPLMitem);</strong>
       ...
	CATIAdpPLMIdentificator *piIdentificatorOfPLMComp=NULL;
<strong>	rc = piBrowserPLMitem-&gt;GetObject(piIdentificatorOfPLMComp);
</strong>...
</pre>
<p>An item in a Catalog is also essentially a <code><em>PLMICLGBrowserPLMItem
</em></code>implementation. This is irrespective of the fact if the item links to 
a PLM type or non-PLM type (<strong>User Defined Features</strong>, <strong>PowerCopy</strong>) 
object.</p>
<p>If an item links to a PLM type, then the associated PLM Identificator can be 
retrieved, thanks to its <code><em>PLMICLGBrowserPLMItem::GetObject</em></code> 
implementation. For an item which links to a non PLM type the call to <em><code>
PLMICLGBrowserPLMItem</code></em>::<code>GetObject</code> fails.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Modifying the Filter (Each Time End User Changes the Diameter)</h3>
<p>User has the liberty to update the Catalog browse query with a new diameter value. 
On this update, the browser panel is updated with the new query, the query is run 
and a list of items are output in the browser panel. </p>
<pre class="code">void <strong>CAACLGLaunchCtlgBrowser::OnDiameterUpdatePushBActivateNotification</strong>(CATCommand  *iPublisher,
					                       CATNotification *iNotification ,
					                       CATCommandClientData iUsefulData)
{
<strong>        ...</strong>
        PLMICLGCatalogFilter_var  spiCLGFilterForDiaUpdate;
        <strong>HRESULT rc = _piCLGBrowser-&gt;GetFilter(spiCLGFilterForDiaUpdate);
        ...</strong></pre>
<p>To begin with, we seek the Filter Object from the Browser.</p>
<pre class="code">...
	CATUnicodeString strUserInputDiaNew = _pDiaInputDlg-&gt;_Editor003-&gt;GetText();
	CATListOfCATUnicodeString ListofValues_New;
<strong>	ListofValues_New.Append(strUserInputDiaNew);
        ...</strong>
<strong>        rc = spiCLGFilterForDiaUpdate-&gt;SetConditions(_ListOfKeywords,
					     _ListOfOperators,
					     ListofValues_New,
					     _AndOr_condtn)</strong>;
...</pre>
<p>The query criteria is rebuilt and the filter object is then set with the new 
criteria. </p>
<pre class="code">...				
       <strong>rc =</strong>  <strong>_piCLGBrowser-&gt;SetFilter(spiCLGFilterForDiaUpdate)</strong> ;
...</pre>
<p>Finally the Browser is set with the new Filter. Almost simultaneously the new 
query runs, and a list of items which conform to the updated search criteria are 
listed in the browser panel.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case customizes the Catalog Browser panel, by accessing the services 
exposed by the <code>PLMLibraryInterfaces</code> framework.</p>
<p>A Catalog Browser facilitates to navigate through a Catalog and list items in 
it, which conform to an input search criteria. In a typical industrial scenario, 
users have to frequently query a catalog for specific items. For eg. a catalog could 
be frequently accessed to retrieve screws of specific diameters. When several users 
are involved, this impacts the productivity, quite seriously.</p>
<p>To address this, a Catalog Browser panel is customized. It is initialized with 
the Catalog most frequently browsed and the search criteria also to a large extent, 
seeking from an end user only bare minimum inputs. For eg. &quot;Diameter == Value&quot; 
could be a query, with the keyword &quot;Diameter&quot;, Operator &quot;==&quot;, 
hardcoded in my customization code, while I seek only the Value from the end user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACLGTaCustomizingCatalogBrowser.htm">Understanding a Catalog 
		Browser Customization</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">
		Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcQueryOpen.htm')">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
