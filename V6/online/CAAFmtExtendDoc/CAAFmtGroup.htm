<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Implementing a Group</title>
<style type="text/css">
.style1 {
	font-family: monospace;
	color: #976970;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><h1><a name="Top"></a>Implementing 
		your own Group</h1></td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains which paradigms CAA uses to show objects and let 
		end users play with them. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmtGroup  Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmtGroup Do?</a></li>
				<li><a href="#How">How to Launch CAAFmtGroup?</a></li>
				<li><a href="#Where">Where to Find the CAAFmtGroup Code?</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show an end user how to create a new Feature inheriting from Groups, and how to implement standard 
behaviors on this Feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmtGroup Use Case</h2>
<p><code>CAAFmtGroup</code> is a use case of the <code>CAAFmtExtendInterfaces.edu</code> framework
that illustrates the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks capabilities regarding Groups.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmtGroup Do</h3>
<p>In this Use Case, we create a new Feature that inherits from 
DS Groups.
Its inputs are 2 groups of the same type, its output is a group that contains the entities that are in both input groups.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmtGroup</h3>
<p>First, you need to import the CAAModelTST01.3dxml into your 
data base. You can find it under: <code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtInterfacesEduRsc.m\src\resources</code></p>
<p>You also need to value the environment variable : <code>set CAAFmtWorkbenchAddin=1</code></p>
<p>To use CAAFmtGroup:</p>
<ol>
	<li>Set the current directory to <code>InstallRootFolder\CAAFmtExtendInterfaces.edu</code></li>
	<li>Set up the build time environment and build the CAAFmtGroupCmd.m and CAAFmtGroupWB.m modules</li>
	<li>Start the V6 application by executing <code>mkrun</code></li>
	<li>Create or open a model that contains at least 2 groups 
	that have the same type (and preferably that intersect)</li>
	<li>Click on the CAA Group command (in the Finite Element Modeling workbench)</li>
	<li>Select a first group<p>
	<img alt="" src="images/CAAFmtGroup01.png" width="774" height="528"></p>
	</li>
	<li>Select a second group of the same type as the first one</li>
	<li>Update the CAA Group, then click the Show Content command: the result is the intersection of the 2 input groups<p>
	<img alt="" src="images/CAAFmtGroup02.png" width="774" height="528"></p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmtGroup Code</h3>
<p>The CAAFmtGroup use case is made of several files located in the CAAFmtGroupCmd.m and CAAFmtGroupWB.m modules of the <code>CAAFmtExtendInterfaces.edu</code> framework:<br>
<code>InstallRootFolder\CAADoc\CAAFmtExtendInterfaces.edu\CAAFmtGroupCmd.m\<br>
InstallRootFolder\CAADoc\CAAFmtExtendInterfaces.edu\CAAFmtGroupWB.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The following table shows which code resources are used in this Use Case. 
These resources are physically located within the appropriate directories (with 
same names) of your CAA installation.</p>
<table class="fill">
	<tr>
		<th>Framework</th>
		<th>Module/Interface</th>
		<th>Source</th>
		<th>Content</th>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtGroupWB.m\src</td>
		<td>CAAFmtGroupWBAddIn.cpp</td>
		<td>Declaration of the command in a WorkBench.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtGroupCmd.m\src</td>
		<td>CAAFmtGroupCmd.cpp</td>
		<td>Implementation of the Command.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtGroupCmd.m\src</td>
		<td>CAAEFmtGroupUpdate.cpp</td>
		<td>Implementation of the GroupUpdate Interface.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtExtendInterfacesEduRsc.m\src\resources\graphic</td>
		<td>CAAFmtFeaturesCatalog.CATfct</td>
		<td>The feature catalog.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtExtendInterfacesEduRsc.m\src\resources\graphic</td>
		<td>CAAFmtFeaturesCatalog.osm</td>
		<td>Declaration of startup.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in <strong>CAAFmtGroup</strong> use case:</p>
<ol>
	<li><a href="#DefineGroup">Defining a Group</a>.</li>
	<li><a href="#ImplementUpdate">Implementing the GroupUpdate</a>.</li>
	<li><a href="#ImplementCommand">Implementing the Group Command</a>.</li>
	<li><a href="#CreateCommand">Creating the command in the Finite Element Modeling Workbench</a>.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DefineGroup"></a>Defining a Group</h3>
<p>The very first thing we have to do is to define our CAA Group Feature.</p>
<p><br>
We create our StartUp (CAAFmtGroup) that derives from the <strong>CATSimulationFEGroup</strong>
and define attributes (here the 2 input Groups) through the usual process thanks to osm tools [<a href="#References">2</a>][<a href="#References">3</a>].</p>
<pre class="code">document `CAAFmtFeaturesCatalog.CATfct` {
	container `RootCont` #root {
		feature `CAAFmtGroup`#2 `CATSimulationFEGroup`#63@`CATSimRepModeler.feat` #startup {
			specobject `CAAGroupInput1` #in
			specobject `CAAGroupInput2` #in
		}
	}
}</pre>
<p>The attributes of our Feature can be retrieved through the Credentials and Facade mechanism [<a href="#References">4</a>].</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAFmtGroupCmd : GetFeatFacadeOnGroup</span>
<span class="comment">// gets a FeatureFacade on the group in order to access its attributes</span>
<span class="comment">//-------------------------------------------------------------------</span>
CATFmFeatureFacade * CAAEFmtGroupUpdate::GetFeatFacadeOnGroup(CATIFmtGroup * piGroup)
{
	HRESULT hr = E_FAIL;

	CATFmCredentials myCredentials;
	<span class="keyword">CATUnicodeString</span> iCatalogName = <span class="string">&quot;CAAFmtFeaturesCatalog&quot;</span>; <span class="comment">// Name of the CATFct file that describes the CAA Group</span>
	<span class="keyword">CATUnicodeString</span> iClientId = <span class="string">&quot;CAAFmtFeaturesClientId&quot;</span>; <span class="comment">// ID used to generate the CATfct file</span>
	hr = myCredentials.RegisterAsApplicationBasedOn(CATFmFeatureModelerID,iClientId);
	hr = myCredentials.RegisterAsCatalogOwner(iCatalogName ,iClientId);

	CATFmFeatureFacade * FeatFacadeOnGroup = <span class="keyword">new</span> CATFmFeatureFacade(myCredentials,piGroup);
	<span class="keyword">return</span> FeatFacadeOnGroup;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ImplementUpdate"></a>Implementing the GroupUpdate</h3>
<p>In order to generate the content of the CAA Group, we have to implement <strong>CATFmtGroupUpdate</strong>
on the Group, through its <strong>CATFmtExtIGroupUpdate</strong> adapter.</p>
<ul>
<li>CAAEFmtGroupUpdate.h
<pre class="code">...
<span class="keyword">#include</span> <span class="string">&quot;CATFmtExtIGroupUpdate.h&quot;</span>

<span class="comment">class</span> CAAEFmtGroupUpdate : <span class="comment">public</span> CATFmtExtIGroupUpdate
{
CATDeclareClass;

<span class="comment">public</span>:
	CAAEFmtGroupUpdate();
...</pre>
</li>
<li>CAAEFmtGroupUpdate.cpp
<pre class="code">...
<span class="comment">//=============================================================================</span>
<span class="comment">// Implementation</span>
<span class="comment">//=============================================================================</span>
CATImplementClass ( CAAEFmtGroupUpdate, DataExtension, CATIFmtGroupUpdate, CAAFmtGroup );
CATImplementBOA   ( CATIFmtGroupUpdate, CAAEFmtGroupUpdate );

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtGroupUpdate : constructor</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
CAAEFmtGroupUpdate::CAAEFmtGroupUpdate()
{
}
...</pre>
</li>
</ul>
<p>We have to implement the <strong>ComputeContent</strong> function to generate the content of the Group.
This function is called whenever the Group is updated.</p>
<pre class="code">...
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtGroupUpdate : ComputeContent (CATIFmtGroupUpdate)</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
HRESULT CAAEFmtGroupUpdate::ComputeContent(CATFmtListOfFEEntities *&amp; oGroupContentList)
{
	HRESULT hr = E_FAIL;

	CATIFmtGroup * pGroup1 = NULL;
	CATIFmtGroup * pGroup2 = NULL;
	CATFmtListOfFEEntities * pGroup1Entities = NULL;
	CATFmtListOfFEEntities * pGroup2Entities = NULL;
	CATFmtGroupType group1Type = CATFmtGroupTypeUnknown;
	CATFmtGroupType group2Type = CATFmtGroupTypeUnknown;

	oGroupContentList = <span class="keyword">new</span> CATFmtListOfFEEntities();

	CATIFmtGroup_var spMeAsGroup(<span class="keyword">this</span>);
	CATFmFeatureFacade * FeatFacadeOnGroup = CAAEFmtGroupUpdate::GetFeatFacadeOnGroup(spMeAsGroup);

	CATFmAttributeName Group1AttrName(<span class="string">&quot;CAAGroupInput1&quot;</span>);
	CATFmAttributeValue Group1AttrValue;
	hr = FeatFacadeOnGroup-&gt;GetValue(Group1AttrName, Group1AttrValue);
	CATBaseUnknown_var group1 = Group1AttrValue.GetFeature();   
	group1-&gt;QueryInterface (IID_CATIFmtGroup, (<span class="keyword">void</span> **) &amp;pGroup1);
	hr = pGroup1-&gt;GetGroupType(group1Type);
	pGroup1Entities = pGroup1-&gt;GetContent();

	CATFmAttributeName Group2AttrName(<span class="string">&quot;CAAGroupInput2&quot;</span>);
	CATFmAttributeValue Group2AttrValue;
	hr = FeatFacadeOnGroup-&gt;GetValue(Group2AttrName, Group2AttrValue);
	CATBaseUnknown_var group2 = Group2AttrValue.GetFeature();   
	group2-&gt;QueryInterface (IID_CATIFmtGroup, (<span class="keyword">void</span> **) &amp;pGroup2);
	hr = pGroup2-&gt;GetGroupType(group2Type);
	pGroup2Entities = pGroup2-&gt;GetContent();

	if (group1Type == group2Type)
	{
	<span class="comment">// scan the 1st group</span>
		<span class="keyword">for</span> (<span class="keyword">int</span> ii=1;ii&lt;=pGroup1Entities-&gt;Size();ii++)
		{
			CATFmtFEEntities * pGroup1Entity = (*pGroup1Entities)[ii];
			CATFmtPath * pGroup1MeshManager = pGroup1Entity-&gt;GetMeshManager();
			<span class="comment">// scan the 2nd group</span>
			<span class="keyword">for</span> (<span class="keyword">int</span> jj=1;jj&lt;=pGroup2Entities-&gt;Size();jj++)
			{
				CATFmtFEEntities * pGroup2Entity = (*pGroup2Entities)[jj];
				<span class="comment">// the type of the entities can be different from the type of the group:</span>
				<span class="comment">// entities will be elements in a faces group of 2D elements</span>
				CATFmtFEEntityType entity1Type = pGroup1Entity-&gt;GetType();
				CATFmtFEEntityType entity2Type = pGroup2Entity-&gt;GetType();
				<span class="keyword">if</span> (entity1Type != entity2Type) <span class="keyword">continue</span>;
				CATFmtFEEntities * pGroupEntity = new CATFmtFEEntities(pGroup1MeshManager,entity1Type);
				<span class="keyword">switch</span> (entity1Type)
				{
					<span class="keyword">case</span> CATFmtFEEntityNode:
						hr = ComputeNodes(pGroup1Entity,pGroup2Entity,pGroupEntity);
						<span class="keyword">break</span>;
					<span class="keyword">case</span> CATFmtFEEntityEdge:
						hr = ComputeEdges(pGroup1Entity,pGroup2Entity,pGroupEntity);
						<span class="keyword">break</span>;
					<span class="keyword">case</span> CATFmtFEEntityFace:
						hr = ComputeFaces(pGroup1Entity,pGroup2Entity,pGroupEntity);
						<span class="keyword">break</span>;
					<span class="keyword">case</span> CATFmtFEEntityElement:
						hr = ComputeElements(pGroup1Entity,pGroup2Entity,pGroupEntity);
						<span class="keyword">break</span>;
				}
				oGroupContentList-&gt;Append(pGroupEntity);
			}
		}
	}
	<span class="keyword">return</span> S_OK;
}
...</pre>
<p>Depending on the type of entities, sub-functions computes the common entities for the two input groups.
Below is the code for Node entities.</p>
<pre class="code">...
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtGroupUpdate : ComputeNodes</span>
<span class="comment">// returns the nodes that are in both initial groups</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
HRESULT CAAEFmtGroupUpdate::ComputeNodes(CATFmtFEEntities * iGroup1Entity, CATFmtFEEntities * iGroup2Entity, CATFmtFEEntities * oGroupEntity)
{
	HRESULT hr1 = E_FAIL;
	HRESULT hr2 = E_FAIL;

	<span class="keyword">int</span> nbComNodes = 0;
	<span class="keyword">int</span> size = ( iGroup1Entity-&gt;GetSize() &gt; iGroup2Entity-&gt;GetSize() ? iGroup2Entity-&gt;GetSize() : iGroup1Entity-&gt;GetSize() );
	CATFmtNode ** pCommonNodes = NULL;
	pCommonNodes = <span class="keyword">new</span> CATFmtNode*[size];

	CATFmtNode ** pGroup1Bases = NULL;
	hr1 = iGroup1Entity-&gt;GetNodes(pGroup1Bases);
	CATFmtNode ** pGroup2Bases = NULL;
	hr2 = iGroup2Entity-&gt;GetNodes(pGroup2Bases);

	<span class="comment">// compare each CATFmtNode of the CATFmtFEEntities</span>
	<span class="keyword">for</span> (<span class="keyword">int</span> ii=0;ii&lt;iGroup1Entity-&gt;GetSize();ii++)
	{
		CATFmtNode * pGroup1Base = pGroup1Bases[ii];
		<span class="keyword">for</span> (<span class="keyword">int</span> jj=0;jj&lt;iGroup2Entity-&gt;GetSize();jj++)
		{
			CATFmtNode * pGroup2Base = pGroup2Bases[jj];
			<span class="keyword">if</span> (pGroup1Base == pGroup2Base)
			{
				pCommonNodes[nbComNodes++] = pGroup1Base;
			}
		}
	}
	oGroupEntity-&gt;AddNodes(nbComNodes, pCommonNodes, FALSE);
	<span class="keyword">if</span> (pCommonNodes) { delete [] pCommonNodes; pCommonNodes = NULL; }

	<span class="keyword">return</span> S_OK;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ImplementCommand"></a>Implementing the Group Command</h3>
<p>The command's behaviour is defined in the <strong>BuildGraph</strong> function.</p>
<ul>
<li><p>Waits for the user to select a first group, then calls the <strong>SetGroup1</strong> function.<br>
The CAA Group is created by the CATIFmtGroupManager-&gt;CreateGroup function, with input parameters being
the feature name of our CAA Group (CAAFmtGroup) and the type of the selected group.</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAFmtGroupCmd : SetGroup1</span>
<span class="comment">//-------------------------------------------------------------------</span>
CATBoolean CAAFmtGroupCmd::SetGroup1(<span class="keyword">void</span> *data)
{
	HRESULT hr = E_FAIL;

	<span class="comment">// gets the selected group from the selection agent</span>
	CATBaseUnknown_var spGroupFromAgent = _pSelAgent-&gt;GetElementValue();
	_pSelAgent-&gt;InitializeAcquisition();
	CATIFmtGroup_var spGroup(spGroupFromAgent);

	<span class="comment">// gets the type of selected group: the CAA group will be given the same type</span>
	CATFmtGroupType groupType = CATFmtGroupTypeUnknown;
	hr = spGroup-&gt;GetGroupType(groupType);

	<span class="comment">// creates the CAA group</span>
	CATIFmtGroupManager * piGroupManager = GetActiveGroupManager();
	<span class="keyword">CATUnicodeString groupName</span> = <span class="string">&quot;CAAFmtGroup&quot;</span>;
	_piCAAGroup = (CATIFmtGroup*) piGroupManager-&gt;CreateGroup(groupName, groupType);

	CATFmFeatureFacade * FeatFacadeOnGroup = CAAEFmtGroupUpdate::GetFeatFacadeOnGroup(_piCAAGroup);
	CATFmAttributeName GroupAttrName(<span class="string">&quot;CAAGroupInput1&quot;</span>);
	CATFmAttributeValue GroupAttrValue;
	GroupAttrValue.SetFeature(spGroup);
	hr = FeatFacadeOnGroup-&gt;SetValue(GroupAttrName, GroupAttrValue);
	<span class="keyword">if</span> (FeatFacadeOnGroup) { <span class="keyword">delete</span> FeatFacadeOnGroup; FeatFacadeOnGroup = NULL; }

	<span class="keyword">return</span> TRUE;
}
...</pre></li>
<li><p>Waits for the user to select a second group and calls the <strong>SetGroup2</strong> function.<br>
This group must have the same type as the first one, otherwise the update of the CAA Group will fail.</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAFmtGroupCmd : SetGroup2</span>
<span class="comment">//-------------------------------------------------------------------</span>
CATBoolean CAAFmtGroupCmd::SetGroup2(<span class="keyword">void</span> *data)
{
	HRESULT hr = E_FAIL;

	<span class="comment">// gets the selected group from the selection agent</span>
	CATBaseUnknown_var spGroupFromAgent = _pSelAgent-&gt;GetElementValue();
	_pSelAgent-&gt;InitializeAcquisition();
	CATIFmtGroup_var spGroup(spGroupFromAgent);

	CATFmFeatureFacade * FeatFacadeOnGroup = CAAEFmtGroupUpdate::GetFeatFacadeOnGroup(_piCAAGroup);
	CATFmAttributeName GroupAttrName(<span class="string">&quot;CAAGroupInput2&quot;</span>);
	CATFmAttributeValue GroupAttrValue;
	GroupAttrValue.SetFeature(spGroup);
	hr = FeatFacadeOnGroup-&gt;SetValue(GroupAttrName, GroupAttrValue);
	<span class="keyword">if</span> (FeatFacadeOnGroup) { <span class="keyword">delete</span> FeatFacadeOnGroup; FeatFacadeOnGroup = NULL; }

	return TRUE;
}
...</pre>
</li>
</ul>
<p>The mechanism used to have access to the CAA Group attributes has been explained previously (<a href="#DefineGroup">Defining a Group</a>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CreateCommand"></a>Creating a command in the Finite Element Modeling Workbench</h3>
<p>To add the CAA Group command in the Finite Element Modeling Workbench, we have to implement the 
<strong>CATIWorkbenchAddin</strong> interface. This is done in the <code>CAAFmtGroupWB.m</code> module.</p>
<pre class="code">...
<span class="keyword">#include</span> <span class="string">&quot;CATCreateWorkshop.h&quot;</span>

<span class="comment">// AfrFoundation Framework</span>
<span class="keyword">#include</span> <span class="string">&quot;CATAfrCommandHeader.h&quot;</span>
 
<span class="comment">// Tie the implementation to its interface</span>
<span class="comment">// ---------------------------------------</span>
<span class="keyword">#include</span> <span class="string">&quot;TIE_CATIFmtWorkbenchAddin.h&quot;</span>
TIE_CATIFmtWorkbenchAddin(CAAFmtGroupWBAddIn);

CATImplementClass(CAAFmtGroupWBAddIn,DataExtension,<span class="keyword">CATBaseUnknown</span>,CAAFmtGroupWB);
...</pre>
<p>Our Addin must implement both <strong>CreateCommands</strong> and <strong>CreateToolbars</strong> functions.</p>
<pre class="code">...
void CAAFmtGroupWBAddIn::CreateCommands()
{
	CATAfrCommandHeader::CATCreateCommandHeader(<span class="string">&quot;CAAFmtGroupCmdHdr&quot;</span>, <span class="string">&quot;CAAFmtGroupCmd&quot;</span>, <span class="string">&quot;CAAFmtGroupCmd&quot;</span>,
	                                            (<span class="keyword">void</span> *) NULL, <span class="string">&quot;CAAFmtGroupHeader&quot;</span>, CATFrmAvailable);
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// CAAEWBAddIn : CreateToolbars</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
CATCmdContainer * CAAFmtGroupWBAddIn::CreateToolbars()
{
	NewAccess(CATCmdContainer,pContGroup,CAAFmtGroup);

	NewAccess(CATCmdStarter,pCmdStarter,CreateGroup);
	SetAccessCommand(pCmdStarter,<span class="string">&quot;CAAFmtGroupCmdHdr&quot;</span>);
	SetAccessChild(pContGroup,pCmdStarter);

	AddToolbarView(pContGroup,1,Right);

	<span class="keyword">return</span> (pContGroup);
}
...</pre>
<p>The command itself is implemented in the <strong>BuildGraph</strong> function of
CAAFmtGroupCmd.cpp file from <code>CAAFmtGroupCmd.m</code> (respectively the 3rd 
and 2nd arguments in the CATCreateCommandHeader function above).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAFmtGroup</code> use case explains how create a new Feature 
inheriting from Groups, using the osm tools, and how to implement standard behaviours on this Feature,
using the Generic CAA APIs exposed in the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="#" onclick="CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcINFBuildCatalog.htm'); return false;">
		Defining StartUp Catalog</a></td>
	</tr>
	<!--<tr>
		<td>[3]</td>
		<td><a href="../../../CAASIMULIADoc.edu/CAAFmtMeshing.doc/src/CAAFEMCreateFeatureInCatalogUseCase.htm">
		Creating your own Simulation StartUp</a></td>
	</tr>-->
	<!--<tr>
		<td>[4]</td>
		<td><a href="../../../CAAFeatureModelerExtDoc.edu/CAAFmFeatModExt.doc/src/CAAFmExtTaUnderstandingCredentials.htm">
		Understanding Credentials</a></td>
	</tr>-->
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
