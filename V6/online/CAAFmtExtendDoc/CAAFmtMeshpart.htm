<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Implementing a Mesh Part</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><h1><a name="Top"></a>Implementing 
		your own Mesh Part</h1></td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains which paradigms CAA uses to show objects and let 
		end users play with them.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmtMeshpart Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmtMeshpart Do?</a></li>
				<li><a href="#How">How to Launch CAAFmtMeshpart?</a></li>
				<li><a href="#Where">Where to Find the CAAFmtMeshpart 
				Code?</a> </li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show an end user how to create a new Feature inheriting from Mesh Parts, and how to implement standard behaviours on this Feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmtMeshpart Use Case</h2>
<p><code>CAAFmtMeshpart</code> is a use case of the <code>CAAFmtExtendInterfaces.edu</code> framework
that illustrates <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks capabilities regarding Mesh Parts.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmtMeshpart Do</h3>
<p>In this Use Case, we create a new Feature that inherits from 
DS Mesh Parts.
We implement a basic Mesher to generate a mesh based on our own requirements, and some edition capabilities to allow interactive use of this feature.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmtMeshpart</h3>
<p>First, you need to import the CAAModelTST01.3dxml into your 
data base. You can find it under : <code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtInterfacesEduRsc.m\src\resources</code></p>
<p>You also need to value the environment variable : <code>set CAAFmtWorkbenchAddin=1</code></p>
<p>To use CAAFmtMeshpart:</p>
<ol>
	<li>Set the current directory to <code>InstallRootFolder\CAAFmtExtendInterfaces.edu</code></li>
	<li>Set up the build time environment and build the 
	CAAFmtMeshpartCmd.m and CAAFmtMeshpartWB.m modules</li>
	<li>Start the V6 application by executing <code>mkrun</code></li>
	<li>Create or open a model that includes a body</li>
	<li>Select the CAA Mesh Part command 
	(in the Finite Element Modeling workbench), then click on a body<p>
	<img alt="" src="images/CAAFmtMeshpart01.png" width="774" height="528"></p>
	</li>
	<li>Update the CAA Mesh Part: a triangle element positioned 
	in 0,0,0 is generated<br>
	Double-click to edit it; you can change its name and the surface of the 
	element<p>
	<img alt="" src="images/CAAFmtMeshpart02.png" width="774" height="528"></p>
	</li>
	<li>You can check the quality of the element using the 
	Quality Analysis tools<p>
	<img alt="" src="images/CAAFmtMeshpart03.png" width="774" height="528"></p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmtMeshpart Code</h3>
<p>The CAAFmtMeshpart use case is made of several files located in the 
CAAFmtMeshpartCmd.m and CAAFmtMeshpartWB.m modules of the
<code>CAAFmtExtendInterfaces.edu</code> framework:<br>
<code>InstallRootFolder\CAADoc\CAAFmtExtendInterfaces.edu\CAAFmtMeshpartCmd.m\<br>
InstallRootFolder\CAADoc\CAAFmtExtendInterfaces.edu\CAAFmtMeshpartWB.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The following table shows which code resources are used in this Use Case. 
These resources are physically located within the appropriate directories (with 
same names) of your CAA installation.</p>
<table class="fill">
	<tr>
		<th>Framework</th>
		<th>Module/Interface</th>
		<th>Source</th>
		<th>Content</th>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtMeshpartWB.m\src</td>
		<td>CAAFmtMeshpartWBAddIn.cpp</td>
		<td>Declaration of the command in a WorkBench.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtMeshpartCmd.m\src</td>
		<td>CAAFmtMeshpartDlg.cpp</td>
		<td>User Interface.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtMeshpartCmd.m\src</td>
		<td>CAAFmtMeshpartCmd.cpp</td>
		<td>Implementation of the Command.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtMeshpartCmd.m\src</td>
		<td>CAAEFmtMeshpartEdit.cpp</td>
		<td>Implementation of the Edition Interface.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtMeshpartCmd.m\src</td>
		<td>CAAEFmtMesher.cpp</td>
		<td>Implementation of the Mesher Interface.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtExtendInterfacesEduRsc.m\src\resources\graphic</td>
		<td>CAAFmtFeaturesCatalog.CATfct</td>
		<td>The feature catalog.</td>
	</tr>
	<tr>
		<td>CAAFmtExtendInterfaces.edu</td>
		<td>CAAFmtExtendInterfacesEduRsc.m\src\resources\graphic</td>
		<td>CAAFmtFeaturesCatalog.osm</td>
		<td>Declaration of startup.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAAFmtMeshpart use case:</p>
<ol>
	<li><a href="#DefineMeshPart">Defining a Mesh Part</a>.</li>
	<li><a href="#ImplementMesher">Implementing the Mesher</a>.</li>
	<li><a href="#ImplementCommand">Implementing the Mesh Part Command</a>.</li>
	<li><a href="#CreateCommand">Creating the command in the Finite Element Modeling Workbench</a>.</li>
	<li><a href="#AddEdition">Adding Edition Capability to the Mesh Part</a>.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DefineMeshPart"></a>Defining a Mesh Part</h3>
<p>The very first thing we have to do is to define our CAA Mesh Part Feature.</p>
<p><br>
We create our StartUp (CAAFmtMeshpartMesher) that derives from the <strong>CATFmtBasicMesher</strong>
and define attributes (here the area of the mesh element) through the usual process thanks to osm tools [<a href="#References">2</a>][<a href="#References">3</a>].</p>
<pre class="code">document `CAAFmtFeaturesCatalog.CATfct` {
	container `RootCont` #root {
		feature `CAAFmtMeshpartMesher`#3 `CATFmtBasicMesher`#7@`CATFmtModel.feat` #startup {
			double `CAAMeshArea` #in
			`CAAMeshArea`=2.
		}
	}
}</pre>
<p>The attributes of our Feature can be retrieved through <strong>GetGlobalSpecification</strong> and <strong>SetGlobalSpecification</strong>
functions of the <strong>CATIFmtMeshPart</strong> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ImplementMesher"></a>Implementing the Mesher</h3>
<p>In order to build the finite element mesh of the CAA Mesh Part, we have to implement <strong>CATIFmtMesher</strong>
on the Mesh Part, through its <strong>CATFmtExtIMesher</strong> adapter.</p>
<ul>
<li>CAAEFmtMesher.h
<pre class="code">...
<span class="comment">#include</span> <span class="string">&quot;CATFmtExtIMesher.h&quot;</span>

<span class="comment">class</span> CAAEFmtMesher : <span class="comment">public</span> CATFmtExtIMesher
{
CATDeclareClass;

<span class="comment">public</span>:
	CAAEFmtMesher();
...</pre>
</li>
<li>CAAEFmtMesher.cpp
<pre class="code">...
<span class="comment">// Tie the implementation to its interface CATIFmtMesher</span>
<span class="comment">// -----------------------------------------------------</span>
<span class="keyword">#include</span> <span class="string">&quot;TIE_CATIFmtMesher.h&quot;</span>
TIEchain_CATIFmtMesher(CAAEFmtMesher);

<span class="comment">// this is an implementation...</span>
<span class="comment">// ----------------------------</span>
CATImplementClass(CAAEFmtMesher, DataExtension, <span class="keyword">CATBaseUnknown</span>, CAAFmtMeshpartMesher);

<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtMesher : constructor</span>
<span class="comment">//-------------------------------------------------------------------</span>
CAAEFmtMesher::CAAEFmtMesher() 
{
}
...</pre>
</li>
</ul>
<p>We have to implement the <strong>mesh</strong> function of the mesher to build the finite element mesh.
In this Use Case, we generate a single triangle element with a given area, located in 0,0,0.<br>
This function is called whenever the Mesh Part is updated.</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// Mesh : generates meshing (CATIFmtMesher)</span>
<span class="comment">//-------------------------------------------------------------------</span>
HRESULT CAAEFmtMesher::Mesh(CATIFmtMeshPart * MeshPart)
{
	HRESULT oHR = E_FAIL;
	HRESULT hr = E_FAIL;
	<span class="keyword">double</span> meshArea = 0.0;
	
	<span class="comment">// get the attributes of the meshpart</span>
	MeshPart-&gt;GetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;CAAMeshArea&quot;</span>,meshArea);

	<span class="comment">// no AddRef done by GetMesh, piMyMesh must not be released</span>
	CATIFmtMesh * piMyMesh = MeshPart-&gt;GetMesh();

	<span class="comment">// definition of 3 nodes</span>
	<span class="keyword">double</span> pCoords1[3] = {0.0,0.0,0.0};
	<span class="keyword">double</span> pCoords2[3] = {sqrt(meshArea)/cos(15*PI/180),sqrt(meshArea)/(cos(15*PI/180)*tan(15*PI/180)),0.0};
	<span class="keyword">double</span> pCoords3[3] = {sqrt(meshArea)/(cos(15*PI/180)*tan(15*PI/180)),sqrt(meshArea)/cos(15*PI/180),0.0};
	<span class="comment">// creation of the 3 nodes</span>
	CATFmtNode ** pNodes = <span class="keyword">new</span> CATFmtNode*[3];
	hr = piMyMesh-&gt;CreateNodes(MeshPart,pCoords1,1,&amp;pNodes[0]);
	hr = piMyMesh-&gt;CreateNodes(MeshPart,pCoords2,1,&amp;pNodes[1]);
	hr = piMyMesh-&gt;CreateNodes(MeshPart,pCoords3,1,&amp;pNodes[2]);

	<span class="comment">// creation of 1 element</span>
	CATFmtMeshDomain * pMyMeshDomain = piMyMesh-&gt;CreateMeshDomain(MeshPart);
	CATFmtElement ** pElement = NULL;
	CATIFmtConnectivity * piMyConnectivity = CATFmtConnectivityServices::GetConnectivity("TR3");
	hr = piMyMesh-&gt;CreateElements(pMyMeshDomain,piMyConnectivity,3,pNodes,1,pElement);

	<span class="keyword">return</span> S_OK;
}
...</pre>
<p>It is mandatory to also implement both <strong>IsATypeOf</strong> and <strong>Check</strong> functions.</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// IsATypeOf : verifies type of mesh (CATIFmtMesher)</span>
<span class="comment">//-------------------------------------------------------------------</span>
<span class="keyword">int</span> CAAEFmtMesher::IsATypeOf(CATIFmtMeshPart * MeshPart, <span class="keyword">const</span> <span class="keyword">CATUnicodeString</span> &amp;Type)
{
	<span class="keyword">CATUnicodeString</span> Str(<span class="string">&quot;2D&quot;</span>);
	<span class="keyword">if</span> (Str==Type) <span class="keyword">return</span> 1;
	<span class="keyword">return</span> 0;
}

<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// Check : verifies validity of support (CATIFmtMesher)</span>
<span class="comment">//-------------------------------------------------------------------</span>
HRESULT CAAEFmtMesher::Check(CATIFmtMeshPart * MeshPart)
{
	<span class="keyword">return</span> S_OK;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ImplementCommand"></a>Implementing the Mesh Part Command</h3>
<p>The command's behaviour is defined in the BuildGraph function.</p>
<p><br>
It waits for the user to select a body as support of the Mesh Part, then calls the 
<strong>CreateMeshpart</strong> function.</p>
<p>It is important to notice here that the input parameter of the CATIFmtMeshManager-&gt;CreateMeshPart function
is the feature name of our CAA Mesh Part (CAAFmtMeshpartMesher).</p>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAFmtMeshpartCmd : CreateMeshpart </span>
<span class="comment">//-------------------------------------------------------------------</span>
CATBoolean CAAFmtMeshpartCmd::CreateMeshpart(<span class="keyword">void</span> *data)
{
	<span class="comment">// gets the selected body from the selection agent</span>
	CATBaseUnknown_var spBodyFromAgent = _pSelAgent-&gt;GetElementValue();
	_pSelAgent-&gt;InitializeAcquisition();

	<span class="comment">// gets the active mesh manager</span>
	CATIFmtMeshManager * piMeshManager = GetActiveMeshManager();

	<span class="comment">// creation of the CAA Mesh Part</span>
	<span class="keyword">CATUnicodeString</span> MPName = <span class="string">&quot;CAAFmtMeshpartMesher&quot;</span>;
	CATIFmtMeshPart * piMyMeshPart = piMeshManager-&gt;CreateMeshPart(MPName);

	<span class="comment">// sets the selected body as the mesh support</span>
	CATFmtPath * pMeshSup = CATFmtPathFactory::BuildFromObject(spBodyFromAgent);
	HRESULT hr = piMyMeshPart-&gt;SetSupport(pMeshSup);

	<span class="keyword">return</span> TRUE;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CreateCommand"></a>Creating the command in the Finite Element Modeling Workbench</h3>
<p>To add the CAA Mesh Part command in the Finite Element Modeling Workbench, we have to implement the 
<strong>CATIWorkbenchAddin</strong> interface. This is done in the <code>CAAFmtMeshpartWB.m</code> module.</p>
<pre class="code">...
<span class="keyword">#include</span> <span class="string">&quot;CATCreateWorkshop.h&quot;</span>

<span class="comment">// AfrFoundation Framework</span>
<span class="keyword">#include</span> <span class="string">&quot;CATAfrCommandHeader.h&quot;</span>

<span class="comment">// Tie the implementation to its interface</span>
<span class="comment">// ---------------------------------------</span>
<span class="keyword">#include</span> <span class="string">&quot;TIE_CATIFmtWorkbenchAddin.h&quot;</span>
TIE_CATIFmtWorkbenchAddin(CAAFmtMeshpartWBAddIn);
 
CATImplementClass(CAAFmtMeshpartWBAddIn,DataExtension,<span class="keyword">CATBaseUnknown</span>,CAAFmtMeshpartWB);

<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAFmtMeshpartWBAddIn : constructor</span>
<span class="comment">//-------------------------------------------------------------------</span>
CAAFmtMeshpartWBAddIn::CAAFmtMeshpartWBAddIn():<span class="keyword">CATBaseUnknown</span>()
{
}
...</pre>
<p>Our Addin must implement both <strong>CreateCommands</strong> and <strong>CreateToolbars</strong> functions.</p>
<pre class="code">...
<span class="keyword">void</span> CAAFmtMeshpartWBAddIn::CreateCommands()
{
	CATAfrCommandHeader::CATCreateCommandHeader(<span class="string">&quot;CAAFmtMeshpartCmdHdr&quot;</span>, <span class="string">&quot;CAAFmtMeshpartCmd&quot;</span>, <span class="string">&quot;CAAFmtMeshpartCmd&quot;</span>,
	                                            (<span class="keyword">void</span> *) NULL, <span class="string">&quot;CAAFmtMeshpartHeader&quot;</span>, CATFrmAvailable);
}

CATCmdContainer * CAAFmtMeshpartWBAddIn::CreateToolbars()
{
	NewAccess(CATCmdContainer,pContMeshpart,CAAFmtMeshpart);

	NewAccess(CATCmdStarter,pCmdStarter,CreateMeshpart);
	SetAccessCommand(pCmdStarter,<span class="string">&quot;CAAFmtMeshpartCmdHdr&quot;</span>);
	SetAccessChild(pContMeshpart,pCmdStarter);

	AddToolbarView(pContMeshpart,1,Right);

	<span class="keyword">return</span> (pContMeshpart);
}
...</pre>
<p>The command itself is implemented in the <strong>BuildGraph</strong> function of
CAAFmtMeshpartCmd.cpp file from <code>CAAFmtMeshpartCmd.m</code> module (respectively the 3rd 
and 2nd arguments in the CATCreateCommandHeader function above).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="AddEdition"></a>Adding Edition Capability to the Mesh Part</h3>
<p>To enable edition of our Mesh Part, we have to:</p>
<ul>
<li>Implement <strong>CATIEdit</strong> on the Mesh Part, 
through its <strong>CATExtIEdit</strong> adapter.
<pre class="code">...
<span class="comment">// ApplicationFrame Framework</span>
<span class="keyword">#include</span> <span class="string">&quot;CATIEdit.h&quot;</span>

<span class="comment">// Ties the implementation to its interface</span>
<span class="comment">// ---------------------------------------</span>
<span class="keyword">#include</span> <span class="string">&quot;TIE_CATIEdit.h&quot;</span>
TIE_CATIEdit(CAAEFmtMeshpartEdit);

<span class="comment">// To declare that the class is a data extension of CAAFmtMeshpart</span>
CATImplementClass(CAAEFmtMeshpartEdit,DataExtension,<span class="keyword">CATBaseUnknown</span>,CAAFmtMeshpartMesher);

<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtMeshpartEdit : constructor</span>
<span class="comment">//-------------------------------------------------------------------</span>
CAAEFmtMeshpartEdit::CAAEFmtMeshpartEdit():CATExtIEdit()
{
}
...</pre>
</li>
<li>Implement the <strong>Activate</strong> function.
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------</span>
<span class="comment">// CAAEFmtMeshpartEdit : Activate</span>
<span class="comment">// defines the command that is to be executed to handle the edition of the meshpart</span>
<span class="comment">//-------------------------------------------------------------------</span>
CATCommand * CAAEFmtMeshpartEdit::Activate(CATPathElement * pPath)
{
	<span class="keyword">CATBaseUnknown</span> * pObject = pPath-&gt;FindElement(IID_CATIFmtMeshPart);
	CATIFmtMeshPart * pMeshpart = NULL;
	pObject-&gt;QueryInterface(IID_CATIFmtMeshPart, (<span class="keyword">void</span>**) &amp;pMeshpart);

	CAAFmtMeshpartCmd * pCommand = NULL;
	<span class="comment">// Creates the command</span>
	pCommand = <span class="keyword">new</span> CAAFmtMeshpartCmd(pMeshpart);

	<span class="comment">// Returns the CATCommand to edit the selected meshpart</span>
	<span class="keyword">return</span> (CATCommand*) pCommand;
}
...</pre>
</li>
	<li>Create a User Interface through which data will be edited: 
	we implement <strong>CATDlgDialog</strong> in CAAFmtMeshpartCmd.cpp file.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAFmtMeshpart</code> use case explains how create a new Feature 
inheriting from Mesh Parts, using the osm tools, and how to implement standard behaviours on this Feature,
using the Generic CAA APIs exposed in the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="#" onclick="CAAlinkOutOfPreqs('CAAPstProductModelerExt/CAAPstUcINFBuildCatalog.htm'); return false;">
		Defining StartUp Catalog</a></td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
