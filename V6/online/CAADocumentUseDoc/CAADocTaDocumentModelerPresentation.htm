<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>About the Web Document Modeler</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>About the Web Document Modeler</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The Document Modeler exposing API is not the VPM Document modeler, but 
		the Web Document modeler. The first chapter presents it, and exposes the 
		consequences to be not a VPLM Modeler. The second chapter gives you the 
		CAA capabilities for this Modeler.</p>
		<p><strong>Note: Document Modeler is not RACE Compliant.</strong></p>
		<ul>
			<li><a href="#Web">Web Document</a></li>
			<li><a href="#Openness">Openness</a></li>
			<li><a href="#Limitations">Current Limitations</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Web"></a><a name="Web"></a>Web Document</h2>
<p>The Document modeler is not the VPM Document Modeler that you can see below the 
node &quot;Former Typing Reference Dictionary&quot; in the References section of 
the CAA Encyclopedia [<a href="#References">1</a>]. The Document modeler exposing 
API is the <strong>Web Document</strong> modeler. Indeed, in the V6 Client session 
you can get such Web objects.</p>
<p>The Web Documents are those created:</p>
<ul>
	<li>From the web server side, or</li>
	<li>From a client session but using the &quot;Generic Document&quot; or &quot;Document&quot; 
		as Document type .</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Openness"></a>Openness</h2>
<p>The current capabilities enables you to:</p>
<ul>
	<li>Create, Delete, List, Attach, Detach, Retrieve Documents associated with 
		a PLM Reference</li>
	<li>Create, Download, Delete, List, CheckIn, CheckOut Files associated with 
		a Document</li>
	<li>Retrieve the parent of a Document</li>
</ul>
<p>for a given Web Document. This is realized with the services of the class <em>
PLMDocumentServices</em> and the <em>PLMIDocument</em> Interface implemented by 
a CDM Document.</p>
<h2><a name="Limitations"></a>Current Limitations</h2>
<p>The methods to handle a Web Document are based on a <em>CATIAdpPLMIdenticator</em> 
interface pointer. The only one way to get such an interface pointer is to use the
<em>CATPLMNavPropertiesAcquisition</em> class an agent of acquisition. Indeed, the 
Web Document modeler being not a VPLM modeler, most APIs based on the VPLM concepts 
are not applicable for this modeler. For example, you cannot use the Query API to 
get a <em>CATIAdpPLMIdenticator</em> interface pointer.</p>
<p>When you use the agent of acquisition named just before, do not use the filtering 
methods (<code>SetPLMIdentificationFilter</code>), because they are based on VPLM 
modeler object identification. The selection must be done by another way described 
in the referenced use case [<a href="#References">2</a>].</p>
<p>A <em>CATIType</em> exists for the Web Document object, and the internal name 
is deduced from the Document type.</p>
<ul>
	<li>&#8220;Generic Document&#8221;</li>
	<li>&#8220;Document&#8221;.</li>
</ul>
<p>Once the Document object is selected, you can get its <em>CATIAdpPLMIdentificator</em> 
thanks the GetPLMIdentification method of the agent. But if all methods of the
<em>CATIAdpPLMIdentificator</em> interface are valid, it is not the case 
for the <em>CATIAdpType</em> interface. Most methods of this interface for a Document 
modeler are not valid.</p>
<ul>
	<li>GetAlias: OK.</li>
	<li>GetPLMCoreType: E_FAIL.</li>
	<li>GetPLMModeler: empty string.</li>
	<li>GetTypeIdentification: only the second argument will be not empty, but 
		don&#8217;t rely on this information.</li>
</ul>
<p>If you want to know the kind of selected Document modeler object, use the method 
translating a <em>CATIAdpType</em> in <em>CATIType</em> (<code>GetKweTypeFromAdpType</code> 
of <em>CATPLMTypeServices</em> class).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>VPM Document Modeler</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
