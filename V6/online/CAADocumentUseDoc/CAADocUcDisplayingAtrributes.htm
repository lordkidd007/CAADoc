<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Display Document Attributes</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Displaying Document Attributes</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article demonstrates to an end user how to retrieve the attributes 
		of the Document selected interactively in CATIA using the CAA Exposition.</p>
		<p><strong>Note : Document Modeler is not RACE Compliant.</strong></p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADocDisplayAttributesCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADocDisplayAttributesCmd Do</a></li>
					<li><a href="#How">How to Launch CAADocDisplayAttributesCmd</a></li>
					<li><a href="#Where">Where to Find the CAADocDisplayAttributesCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the concepts listed below:</p>
<ul>
	<li>An aquisition agent, a <em>CATPLMNavPropertiesAcquisition</em> type, to 
		manage selection of a PLM entity in the immersive window (Search result 
		and Explorer window).</li>
	<li>The CAA Exposition which enables to display the attributes of the Document.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADocDisplayAttributesCmd Use Case</h2>
<p>CAADocDisplayAttributesCmd is a use case of the CAADocumentUseItf.edu framework 
that illustrates the CATImmVPMInterfacesExt framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADocDisplayAttributesCmd Do</h3>
<p>The goal of CAADocDisplayAttributesCmd Use Case is to deploy the Openness provided 
by CAA, to display attributes of a Document selected interactively in the VPM Navigator. 
We work on an input model as depicted in the Fig. that follows, which the user will 
have to explicitly create.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Model</caption>
	<tr>
		<td>
		<img alt="Input Model" height="386" src="images/CAADocUc_InputModel.jpg" width="542"/></td>
	</tr>
</table>
<p>The input model consists of a root product <strong>CAADocProdRoot---</strong>. 
The product is attached to:</p>
<ul>
	<li>Document <strong>Generic Document</strong>, of type &quot;<strong>Generic 
		Document</strong>&quot; (internal type <strong>Generic Document</strong>) 
		which contains <strong>Generic_Document.txt</strong>.</li>
	<li>Document <strong>CDM_Document</strong>, of type &quot;<strong>Document</strong>&quot; 
		(internal type <strong>Document</strong>) which contains <strong>CDM_Document.txt</strong>.</li>
</ul>
<p>The UC then displays the PLM attributes of the Document attached to a model whose 
type is either a <strong>Generic Document</strong> or a <strong>Document</strong>. 
This is accomplished with the command &quot;<strong>Display Attributes of the selected 
Document</strong>&quot; inside the &quot;<strong>Working with Files attach to Document</strong>&quot; 
toolbar, in <strong>a PLM Navigator AddIn</strong> in <strong>CATIA</strong>. This
<strong>AddIn</strong> (<strong>Toolbar</strong>) exists in the VPM Navigator workbench 
as depicted in the Fig. that follows. The &quot;<strong>How to Launch</strong>&quot; 
section that follows details the steps involved to launch the VPM Navigator workbench 
and access this toolbar.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Working with Files attached to a Document 
	Toolbar</caption>
	<tr>
		<td>
		<img alt="Working with Files Attached to a Document Toolbar" height="159" src="images/CAADocUc_DisplayAttrOfSelectedDocCommand.jpg" width="277"/></td>
	</tr>
</table>
<p>The UC execution proceeds as follows:</p>
<ul>
	<li>User activates the &quot;<strong>Display Attributes of the selected document</strong>&quot; 
		command.</li>
	<li>The command prompts user to select a document, from the Product spec tree 
		in the Explorer (VPM Navigator) session. A document of type &quot;<strong>Generic 
		Document</strong>&quot; and &quot;<strong>Document</strong>&quot; are the 
		only two types recognized by the exposed API.</li>
	<li>User selects the document, in the current case &quot;Generic Document&quot;, 
		of type &quot;<strong>Generic Document</strong>&quot;. Next a dialog box 
		that follows appears.
		<table>
			<caption><a name="Fig3"></a>Fig.3: Document PLM Attributes Dialog Box</caption>
			<tr>
				<td>
				<img alt="Document PLM Attributes Dialog Box" height="149" src="images/CAADocUc_DisplayAttrOfSelectedDocDlgBox.jpg" width="233"/>
				</td>
			</tr>
		</table>
		<p>*The dialog box depicted above is only representative.</p>
		<p>The attributes of the Document selected are displayed in the dialog box. 
		It is significant to note that only those attributes filtered by the mask
		<strong>EZQuery</strong> are taken into account since the Acquisition Agent 
		deployed for the selection of the document retrieves the PLM properties 
		governed by this mask.</p>
		<p>The Exposed CAA API recognizes only documents of internal type &quot;<strong>Generic 
		Document</strong>&quot; and &quot;<strong>Document</strong>&quot;. If user 
		selects a VPM Document type, the dialog box as displayed below appears (The 
		use case selection doesn't allow to select the VPM Document, if user modifies 
		code and allows to select the VPM Document by modifying Acquisition agent).</p>
		<table>
			<caption><a name="Fig4"></a>Fig. 4: Error Dialog Box on Selecting a 
			Non-Web Document</caption>
			<tr>
				<td>
				<img alt="Error Dialog Box on Selecting a Non-Web Document" height="130" src="images/CAADocUc_ErrorDlgBox.jpg" width="498"/></td>
			</tr>
		</table>
		<p>The message states that a document of type &quot;<strong>VPM Document 
		DS</strong>&quot;, the NLS name for the <strong>PLMDMT_DocCustom</strong> 
		internal document type, is not supported by the CAA Exposition. Please note 
		that the UC execution does not take into account this error scenario. As 
		a result this dialog box cannot be launched through this UC execution.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADocDisplayAttributesCmd</h3>
<p>To launch CAADocDisplayAttributesCmd:</p>
<ol>
	<li>Set the current folder to <code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu</code></li>
	<li>Set up the build time environment and build the CAADocNavPropAcqAgentAddin.m 
		and CAADocNavCommmands.m module.</li>
	<li>Edit the <code>CNext/code/dictionary/CAADocumentUseItf.edu.dico</code> dictionary 
		by uncommenting the #CAA# from the following lines:
		<pre class="code">...
#CAA# CAADocNavPropAcqAgentAddin CATIImmNavAddin    libCAADocNavPropAcqAgentAddin
#CAA# CAADocNavPropAcqAgentAddin CATIWorkbenchAddin libCAADocNavPropAcqAgentAddin
...</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code>.</li>
	<li>Start CATIA by executing <code>mkrun</code>.</li>
	<li>Create the model as depicted in [<a href="#Fig1">Fig. 1</a>], save it and 
		load it in the VPM Navigator session.</li>
	<li>Display the toolbar named &quot;<strong>Working with Files attached to Document
		</strong>&quot; toolbar if necessary. It is depicted in 
		the <a href="#Fig2">Fig 2</a>. above.</li>
	<li>The execution follows the steps listed in the &quot;<strong>What does the 
		UC do</strong>&quot; section above.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADocDisplayAttributesCmd Code</h3>
<p>The CAADocDisplayAttributesCmd use case is located in the CAADocNavCommmands.m 
module of the CAADocumentUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu\CAADocNavCommmands.m</code></p>
<p>For the Add-In , it includes the <em>CAADocNavPropAcqAgentAdn</em> class located 
in the <code>CAADocNavPropAcqAgentAddin.m</code> module of the <code>CAADocumentUseItf.edu
</code>framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu\CAADocNavPropAcqAgentAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two steps in CAADocDisplayAttributesCmd:</p>
<ol>
	<li><a href="#Step1">Selecting a Document in the Explorer (Navigator) Window</a></li>
	<li><a href="#Step2">Retrieving and Displaying Attribute Values of the Selected 
		Document</a></li>
</ol>
<p>We will now detail each of those sections:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Selecting a Document in the Explorer (Navigator) Window</h3>
<p>This being an interactive UC, it is driven by a StateCommand implementation. 
Let us begin with its <code>BuildGraph</code>() implementation. This method primarily 
defines the various states of the State Command, the transitions between those states 
and the Conditions associated with those.</p>
<pre class="code">void <strong>CAADocDisplayAttributesCmd::BuildGraph</strong>()
{

	HRESULT rc = E_FAIL;
	_paNavAcqAgentGenDoc = new CATPLMNavPropertiesAcquisition(&quot;PLMNavAcqAgentCDMDoc&quot;);
	if (NULL!=_paNavAcqAgentGenDoc)
	{
		CATIType_var spCATITypeOnType ;
		CATString typeName = &quot;<strong>Generic Document</strong>&quot;;
   	         rc = CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(typeName.CastToCharPtr(), spCATITypeOnType); 
		rc = _paNavAcqAgentGenDoc -&gt;<strong>SetPLMIdentificationFilterFromType</strong>(spCATITypeOnType);
		AddCSOClient(_paNavAcqAgentGenDoc);
	}

	_paNavAcqAgentCDMDoc = new CATPLMNavPropertiesAcquisition(&quot;PLMNavAcqAgentGenDoc&quot;);
	if (NULL!=_paNavAcqAgentCDMDoc)
	{
		CATIType_var spCATITypeOnType2 ;
		CATString typeName2 = &quot;<strong>Document</strong>&quot;;
		rc = CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(typeName2.CastToCharPtr(), spCATITypeOnType2);
		rc = _paNavAcqAgentCDMDoc-&gt;<strong>SetPLMIdentificationFilterFromType</strong>(spCATITypeOnType2);
		AddCSOClient(_paNavAcqAgentCDMDoc);
	}


	_pCAADisplayingDocAttrDlg = new CAADocDisplayAttributesDlg();
	_pCAADisplayingDocAttrDlg-&gt;Build();

	_pDialogAgentClose = new CATPLMNavPropertiesAcquisition(&quot;CAADocDisplayAttributesCmdCLOSE&quot;);
	_pDialogAgentClose-&gt;<strong>AcceptOnNotify</strong>(_pCAADisplayingDocAttrDlg,_pCAADisplayingDocAttrDlg-&gt;GetDiaCLOSENotification());
	_pDialogAgentClose-&gt;<strong>AcceptOnNotify</strong>(_pCAADisplayingDocAttrDlg,_pCAADisplayingDocAttrDlg-&gt;GetWindCloseNotification());
	// States

	CATDialogState *pSelectState = <strong>GetInitialState</strong>(&quot;PLMNavAcqInitialState&quot;);
	...
	pSelectState -&gt; <strong>AddDialogAgent</strong>(_paNavAcqAgentGenDoc);
	pSelectState -&gt; <strong>AddDialogAgent</strong>(_paNavAcqAgentCDMDoc);

	CATDialogState *<strong>pSecondState</strong> = AddDialogState(&quot;PLMNavAcqSecondState&quot;);
	pSecondState-&gt;AddDialogAgent(_pDialogAgentClose);

	<strong>AddTransition (pSelectState,pSecondState, 
	               OrCondition(IsOutputSetCondition(_paNavAcqAgentCDMDoc),IsOutputSetCondition(_paNavAcqAgentGenDoc)),
		      Action((ActionMethod)&amp;CAADocDisplayAttributesCmd::Run));</strong>

	AddTransition(pSecondState, NULL,
	IsOutputSetCondition(_pDialogAgentClose));
}</pre>
<p>It begins with instantiating a dialog box for displaying the properties of the 
selected Document.</p>
<p>Next we have the states defined for the State Command. The first state is the &quot;<strong>Select</strong>&quot; 
state, which involves the actual selection of the Document (<strong>Generic Document</strong> 
or <strong>Document</strong>) the Navigator window. We associate the Acquisition 
agent with this state. This agent is valuated each time a Document is selected in 
the spec tree by the end user. Acquisition agents (<code>_paNavAcqAgentCDMDoc</code> 
or <code>_aNavAcqAgentGenDoc</code>) manages selection of a PLM entity in the Navigator 
(Explorer) window. It offers a PLM compliant filtering of the selected entity and 
also enables to retrieve the properties of the PLM entity selected.</p>
<p>The second state is that at which the properties of the selected Document are 
displayed in a dialog box. A dialog agent corresponding to this dialog box is associated 
with this state. This agent is valuated on closing this dialog box, either by closing 
the window or clicking the &quot;Close&quot; button on the dialog.</p>
<p>Next, it defines the Transitions involved. The first transition is from the &quot;Select&quot; 
state to the Second state. This transition is triggered if the Document selected 
by the user is necessarily of type &quot;Web Document&quot;. The action associated 
with this transition is implemented in the <code>Run</code>() method, which primarily 
outputs the properties of the selected Document.</p>
<p>The next transition is that from Second state to a NULL state, triggered on closing 
this dialog box.</p>
<p>We now detail the implementation of the remaining routines of the StateCommand. 
The routine Run that follows retrieves the Knowledge Type of the selected Document.</p>
<pre class="code">CATBoolean <strong>CAADocDisplayAttributesCmd::Run</strong>(void *data)
{ 
      CATBoolean IsAttrOfSelDocRetrievedandDisplayed = FALSE ;
       CATIType_var spKweType ;
       CATString typeName = &quot;&quot;;
       if ( NULL!=_paNavAcqAgentCDMDoc)
       {
	  if ( _paNavAcqAgentCDMDoc-&gt;<strong>GetValuationState</strong>( ) == CATAcquisitionAgent::Valuated ) 
	  {
	       _paNavAcqAgent  = _paNavAcqAgentCDMDoc;
	       typeName = &quot;<strong>Document</strong>&quot;;
	  }
       }
       Else if ( (NULL!=_paNavAcqAgentGenDoc) &amp;&amp; (NULL==_paNavAcqAgent) )
       {
	  if ( _paNavAcqAgentGenDoc-&gt;<strong>GetValuationState</strong>( ) == CATAcquisitionAgent::Valuated ) 
	  {
	      _paNavAcqAgent = _paNavAcqAgentGenDoc;
	      typeName = &quot;<strong>Generic Document</strong>&quot;;
	  }
       }

       hr = <strong>CATCkePLMNavPublicServices::RetrieveKnowledgeType(</strong>typeName.CastToCharPtr(), spKweType); 
       if(NULL_var!=spKweType)
       {
	   hr= <strong>RetrieveAndDisplayPropertiesForSelectdDoc</strong>(spKweType);
	   if(SUCCEEDED(hr))
	      IsAttrOfSelDocRetrievedandDisplayed=TRUE;
...</pre>
<p>The first call is to the <code>RetrieveKnowledgeType</code>() routine of <em>
CATCkePLMNavPublicServices</em> retrieve the Knowledge type of the selected Document. 
The type is deicide according to object selected by the acquisition agent (<code>_paNavAcqAgentCDMDoc
</code>or <code>_aNavAcqAgentGenDoc</code>).</p>
<p>The next call to <code>RetrieveAndDisplayPropertiesForSelectedDoc</code>() retrieves 
the properties of the selected Document, with the Knowledge type as its input. The 
implementation details of this routine follows.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving and Displaying Attribute Values of the Selected 
Document</h3>
<p>This step primarily involves retrieving the attributes associated with a Document 
type followed by the attribute values, which are then displayed inside a dialog 
box.</p>
<pre class="code">...
CATBoolean <strong>CAADocDisplayAttributesCmd::RetrieveAndDisplayPropertiesForSelectdDoc
                                                         (CATIType_var</strong> spKweType)
{
    HRESULT hr =E_FAIL;
    int Index = 1;
    CATICkeObject * piCkeObjOnSelectedDoc=NULL;
    hr = <strong>_paNavAcqAgent-&gt;GetPLMProperties(Index, piCkeObjOnSelectedDoc)</strong>;
    if ((hr==S_OK) &amp;&amp; (NULL!=piCkeObjOnSelectedDoc))
    {
       CATListValCATAttributeInfos ListOfAttributes;
       hr= <strong>CATCkePLMNavPublicServices::ListFilteredAttributesFromMaskAndType</strong>
                                                             (<strong>spKweType</strong>,NULL,
     		 <strong>CATCkePLMTypeAttrServices::MaskEZQuery</strong>, ListOfAttributes);
       if (SUCCEEDED(hr))
	 hr = <strong>DisplayProperties(piCkeObjOnSelectedDoc,ListOfAttributes);</strong>
		 ListOfAttributes.RemoveAll();
...</pre>
<p>As mentioned before, the acquisition agent can retrieve the properties of the 
PLM entity selected. The <code>GetPLMProperties</code>() call of the <em>CATPLMNavPropertiesAcquisition</em> 
class, retrieves a <em>CATICkeObject</em> Interface to the Knowledge World, on the 
selected Document. An important point to note here is that the properties retrieved 
are only those exposed by the mask <strong>EZQuery</strong>.</p>
<p>The static routine <code>ListFilteredAttributesFromMaskAndType</code>() of the
<em>CATCkePLMNavPublicServices</em> class returns the list of attributes, filtered 
by a specific mask associated with a specific Knowledge Type. In the current case, 
we retrieve the list of attributes for a simplified query of a PLM entity from the 
database. The list of attributes is retrieved as a <em>CATListValCATAttributeInfos</em> 
type.</p>
<p>Finally we have the call to the <code>DisplayProperties</code>() routine detailed 
below, which retrieves the attribute values of the selected Document.</p>
<pre class="code">HRESULT <strong>CAADocDisplayAttributesCmd::DisplayProperties</strong>(<strong>CATICkeObject</strong>* &amp;piCkeObject,
                             const <strong>CATListValCATAttributeInfos</strong> &amp;iListOfAttributes )
{
  ...
  CATUnicodeString Msg, Msg1;
<strong>  SizeList  =  iListOfAttributes.Size();</strong>
  for (Index=1; Index&lt;=SizeList; Index++)
  {
    CATAttributeInfos AttrInfo = iListOfAttributes[Index];

    CATUnicodeString attrName;
    attrName = AttrInfo.Name();

    CATUnicodeString attrNameValue;
    hr = <strong>CATCkeObjectAttrReadServices::GetValueAsString</strong>(<strong>piCkeObject</strong>,
                                           <strong>attrName</strong>,<strong>attrNameValue</strong>);
    ...       
    Msg = Msg.Append(attrName);
    Msg = Msg.Append(attrNameValue);
...</pre>
<p>Each attribute information of the selected Document is retrieved as a <em>CATAttributeInfos</em> 
type. The <code>Name</code>() method of this class returns the Attribute name.</p>
<p>The <code>GetValueAsString</code>() call of the <em>CATCkeObjectAttrReadServices</em> 
class retrieves the attribute value. Its inputs are the <em>CATCkeObject</em> Interface 
on our selected Document and the attribute name. It returns the attribute value.</p>
<p>The attribute name and value are then appended to a string, for displaying in 
a dialog box.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates to an end user how to retrieve the attributes of the 
Document selected interactively in CATIA, using the CAA Exposition.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History">History</a></h2>
<table class="history">
	<tr>
		<td>Version: 1 [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
