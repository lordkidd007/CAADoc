<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating New Documents</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating New Documents</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The use case illustrates the steps involved in the CAA Customization 
		to create Document Object. This Use case demonstrates consists two type 
		of Document creation &quot;Generic Document&quot; and &quot;Document&quot; 
		[<a href="#References">3</a>]. </p>
		<p><strong>Note : Document Modeler is not RACE Compliant.</strong></p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADocCreateNewDocument Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADocCreateNewDocument Do</a></li>
					<li><a href="#How">How to Launch CAADocCreateNewDocument</a></li>
					<li><a href="#Where">Where to Find the CAADocCreateNewDocument 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case teaches an end-user the CAA Exposition to create Document object 
of type &quot;Generic Document&quot; and &quot;Document&quot;.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADocCreateNewDocument Use Case</h2>
<p>CAADocCreateNewDocument is a use case of the CAADocumentUseItf.edu framework 
that mainly illustrates PLMDocumentInterfaces frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADocCreateNewDocument Do</h3>
<p>The CAADocCreateNewDocument use case creates Document Object. </p>
<p>To begin with we retrieve knowledge type of the type which we want to create 
document . This use case demonstrates creation of two types of Documents &quot;Generic 
Document&quot; and &quot;Document&quot; [<a href="#References">3</a>].</p>
<p>Once we retrieve Knowledge type use case creates Document object with the input 
of list of mandatory attribute list.</p>
<p>Please note that there is need to save this object since operations on document 
are managed in short transaction meaning there is no need to explicitly save.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADocCreateNewDocument </h3>
<p>To launch CAADocCreateNewDocument, you will need to set up the build time environment, 
then compile CAADocCreateNewDocument along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAADocCreateNewDocument Repository Server User Password 
SecurityCtx DocType FilePath FileComment&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <i>Host:port_number/RootURI</i></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<th>DocType</th>
		<td><strong>&quot;Document&quot;</strong> with exact input string or
		<strong>&quot;Generic_Document&quot;</strong> by default for any string
		</td>
	</tr>
	<tr>
		<th>FilePath</th>
		<td>The full paths from which the files will be uploaded</td>
	</tr>
	<tr>
		<th>FileComment</th>
		<td>TComments associated with the files</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADocCreateNewDocument Code</h3>
<p>The CAADocCreateNewDocument use case is made of a single file located in the 
CAADocCreateNewDocument.m module of the CAADocumentUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu\CAADocCreateNewDocument.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAADocCreateNewDocument use case.</p>
<ol>
	<li><a href="#Prolog">Prolog</a> </li>
	<li><a href="#Step1">Retrieving CATIType for Document Type Creation</a></li>
	<li><a href="#Step2">Creating Document Object</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>It begins with a check to ensure bare minimum number of arguments are input for 
use case execution. This includes in the order listed below:</p>
<ul>
	<li>five arguments(Repository, Server-Port, user , password, Security Context) 
		essential for creating a V6 session.</li>
</ul>
<p>Finally , we connect to the input repository and a PLM session is created. A 
PLM session is an environment essential for running a CAA use case. The article 
[<a href="#References">1</a>]delves further into the process of building and launching 
a CAA use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving CATIType for Document Type Creation</h3>
<p>In this step we retrieve the Knowledge type for creation of document object. 
According to input document type string we decide the knowledge type to be retrieved.</p>
<pre class="code">...
   <strong>CATIType_var</strong> spCATITypeOnType ;
   CATString typeName = &quot;<strong>Generic Document</strong>&quot;;
   if (0 == strcmp(&quot;Document&quot;,DocType))
	  CATString typeName = &quot;<strong>Document</strong>&quot;;

   HR = <strong>CATCkePLMNavPublicServices</strong>::<strong>RetrieveKnowledgeType</strong>(typeName.CastToCharPtr(), spCATITypeOnType); 
   
   
  CATListValCATICkeParm_var lstCATListValCATICkeParmEmptyList;
  CATICkeParm_var hTmpParm;
  CATICkeParmFactory_var hCkeParamFact = CATCkeGlobalFunctions::GetVolatileFactory();
  ...
  hTmpParm = hCkeParamFact-&gt;CreateString(&quot;name&quot;, &quot;ODT_Test_Doc&quot;);
  lstCATListValCATICkeParmEmptyList.Append(hTmpParm);
  hTmpParm = hCkeParamFact-&gt;CreateString(&quot;Title&quot;, &quot;&quot;);
  lstCATListValCATICkeParmEmptyList.Append(hTmpParm);
  hTmpParm = hCkeParamFact-&gt;CreateString(&quot;description&quot;, &quot;&quot;);
  lstCATListValCATICkeParmEmptyList.Append(hTmpParm);
  hTmpParm = hCkeParamFact-&gt;CreateString(&quot;Access Type&quot;, &quot;Inherited&quot;);
  lstCATListValCATICkeParmEmptyList.Append(hTmpParm);
  hTmpParm = hCkeParamFact-&gt;CreateString(&quot;Language&quot;, &quot;English&quot;);
  lstCATListValCATICkeParmEmptyList.Append(hTmpParm);
...</pre>
<p>A call to <code>CATCkePLMNavPublicServices::RetrieveKnowledgeType</code> returns 
us the knowledge type <code>spCATITypeOnType</code>, as a <em>CATIType_var</em> 
type.</p>
<p>Next we create List of attributes (<code>lstCATListValCATICkeParmEmptyList
</code>of <em>CATListValCATICkeParm_var</em> type) for input of creation of document. 
Usually we provide mandatory attributes as an input.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Document Object</h3>
<pre class="code">...
    <strong>PLMIDocument</strong> * piDocument = NULL;
    HR = PLMDocumentServices::CreateDocument(spCATITypeOnType, 
				  lstCATListValCATICkeParmEmptyList,
				  lListFilePaths,
				  lListFileComments,
				  piDocument);
...</pre>
<p>The static method <code>PLMDocumentServices::CreateDocument </code>creates a 
new Document Object (<code>piDocument</code>). The type of the New Document Object 
is depends upon input first argument API <em>CATIType,</em> so here we pass <em>
CATIType</em> that is we retrieved in last step (<code>spCATITypeOnType</code>) 
[#]. The list of attribute-value is empty since values get valuated as per business 
Logic so we pass <em>NULL_var</em> value for list as second argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAADocCreateNewDocument</code> use case ends by simply closing the 
PLM session. Since all use cases necessarily conclude by closing the PLM session, 
we have a dedicated article on this topic viz. &quot;<b>Creating a Basic PLM Batch</b>&quot; 
[<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case creates new Document objet. In this use case we can create two 
type of Document Objects &quot;Generic Document&quot; and &quot;Document&quot;.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm')">
		Connecting to V6 Server</a> </td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADocTaDocumentModelerPresentation.htm">About Document Modeler</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
