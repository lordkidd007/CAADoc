<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Checking in Files on a Selected Document</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Checking in Files on a Selected Document</h1>
		</td>
	</tr>
	<tr>
		<td class="use" style="height: 16px">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article demonstrates to an end user how to check in a file on a 
		selected Document interactively in CATIA, using the CAA Exposition.</p>
		<p><strong>Note: Document Modeler is not RACE Compliant.</strong></p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADocCheckInFilesCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADocCheckInFilesCmd Do</a></li>
					<li><a href="#How">How to Launch CAADocCheckInFilesCmd</a></li>
					<li><a href="#Where">Where to Find the CAADocCheckInFilesCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the concepts listed below:</p>
<ul>
	<li>An aquisition agent, a <em>CATPLMNavPropertiesAcquisition</em> type, to 
		manage selection of a PLM entity in the immersive window (Search result 
		and Explorer window)</li>
	<li>The CAA Exposition which enables to check in a file on a selected Document</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADocCheckInFilesCmd Use Case</h2>
<p>CAADocCheckInFilesCmd is a use case of the CAADocumentUseItf.edu framework that 
illustrates the PLMDocumentInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADocCheckInFilesCmd Do</h3>
<p>The goal of CAADocCheckInFilesCmd Use Case is to deploy the Openness provided 
by CAA, to check in a file on a selected Document interactively in the VPM Navigator. 
We work on an input model as depicted in the Fig. that follows. The model will have 
to be explicitly created by the end-user.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Model</caption>
	<tr>
		<td>
		<img alt="nput Model" height="212" src="images/CAADocCheckInFiles_1.jpg" width="304"/>
		</td>
	</tr>
</table>
<p>The input model consists of a root product <strong>CAADocProdRoot---</strong>. 
The product is attached to</p>
<ul>
	<li>Product Instance <strong>CAADocProdInst</strong>.</li>
	<li>Document <strong>CDM_Document</strong>, of type &quot;<strong>Document</strong>&quot; 
		(internal type <strong>CDM_Document</strong>) which contains <strong>CDM_Document.txt</strong>.</li>
</ul>
<p>The contents of <strong>CDM_Document.txt</strong> are as displayed in the image 
below:</p>
<p>
<img alt="" height="68" longdesc="images/CAADocCheckInFiles_2.jpg" src="images/CAADocCheckInFiles_2.jpg" width="254"/>
</p>
<p>In order to check in a file, user needs to check out the file locally. The checked 
out file is then modified as per the requirement. This modified file can then be 
checked in; on the selected document. The contents of the modified file in V6 are 
as displayed in the image below:</p>
<p>
<img alt="" height="92" longdesc="images/CAADocCheckInFiles_3.jpg" src="images/CAADocCheckInFiles_3.jpg" width="266"/></p>
<p>The UC checks in the file on a selected Document attached to this model. This 
is accomplished with the command &quot;<strong>CheckIn</strong><strong> Files on selected 
Document</strong>&quot; inside the &quot;<strong>Working with Files attach to Document</strong>&quot; 
toolbar, in <strong>a PLM Navigator AddIn</strong> in <strong>CATIA.</strong> This
<strong>AddIn</strong> (<strong>Toolbar</strong>) exists in the VPM Navigator workbench 
as depicted in the Fig. that follows. The &quot;<strong>How to Launch</strong>&quot; 
section that follows details the steps involved to launch the VPM Navigator workbench 
and access this toolbar.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Working with Files Attached to a Document 
	Toolbar</caption>
	<tr>
		<td>
		<img alt="Working with Files Attached to a Document Toolbar" height="214" src="images/CAADocCheckInFiles_4.jpg" width="224"/></td>
	</tr>
</table>
<p>The UC execution proceeds as follows:</p>
<ul>
	<li>User activates the &quot;<strong>CheckIn Files on selected Document</strong>&quot; 
		command</li>
	<li>The command prompts user to select a document, from the Product spec tree 
		in the Explorer (VPM Navigator) session.</li>
	<li>User selects the document &quot;<strong>CDM_Document</strong>&quot;, of 
		type &quot;<strong>Document</strong>&quot;. Next a dialog box the follows 
		appears.
		<table>
			<caption><a name="Fig3"></a>Fig.3: CheckIn File Dialog Box</caption>
			<tr>
				<td>
				<img alt="CheckIn File Dialog Box" src="images/CAADocCheckInFiles_5.jpg"/>
				</td>
			</tr>
		</table>
		<p>*The dialog box depicted above is only representative.</p>
		<p>The title of this dialog box is the name of the selected Document into 
		which our file will be checked in. User will enter the exact path of the 
		file(including file name) for check in.</p>
		<p>Next give old file name (Checked out file name against which we want 
		to check in file).</p>
		<p>Finally user clicks on the &quot;<strong>CheckIn File</strong>&quot; 
		button. This results in the invocation of the CAA Exposed API, responsible 
		for actually checking in the file to a selected document.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADocCheckInFilesCmd</h3>
<p>To launch CAADocCheckInFilesCmd:</p>
<ol>
	<li>Set the current folder to <code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu</code>.</li>
	<li>Set up the build time environment and build the CAADocNavPropAcqAgentAddin.m 
		and CAADocNavCommmands.m module.</li>
	<li>Edit the <code>CNext\code\dictionary\CAADocumentUseItf.edu.dico</code> dictionary 
		by uncommenting the #CAA# from the following lines:
		<pre class="code">#CAA# CAADocNavPropAcqAgentAddin  CATIImmNavAddin     libCAADocNavPropAcqAgentAddin
#CAA# CAADocNavPropAcqAgentAddin  CATIWorkbenchAddin  libCAADocNavPropAcqAgentAddin</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code>.</li>
	<li>Start CATIA by executing <code>mkrun</code>.</li>
	<li>Create the model as depicted in [<a href="#Fig1">Fig. 1</a>], save it and 
		load it in the VPM Navigator session.</li>
	<li>Display the toolbar named &quot;<strong>Working with Files attached to Document
		</strong>&quot;<strong></strong> toolbar if necessary. It is depicted in 
		the <a href="#Fig2">Fig 2</a>. above.</li>
	<li>The execution follows the steps listed in the &quot;What Does the UC do&quot; 
		section above.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADocCheckInFilesCmd Code</h3>
<p>The CAADocCheckInFilesCmd use case is located in the CAADocNavCommmands.m module 
of the CAADocumentUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu\CAADocNavCommmands.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>For the Add-In, it includes the <em>CAADocNavPropAcqAgentAdn</em> class located 
in the CAADocNavPropAcqAgentAddin.m module of the CAADocumentUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADocumentUseItf.edu\CAADocNavPropAcqAgentAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two parts in CAADocCheckInFilesCmd:</p>
<ol>
	<li><a href="#Step1">Selecting a Document in the VPM Navigator Spec Tree</a></li>
	<li><a href="#Step2">Checking in Files on a Selected Document</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Selecting a Document in the VPM Navigator Spec Tree</h3>
<p>The UC being an interactive UC is primarily implemented as a StateCommand detailed 
in the UC [<a href="#References">2</a>]. The current step involves selecting a Document 
in the VPM Navigator spec tree. This is accomplished with acquisition agent (<code>_paNavAcqAgentCDMDoc</code>),
<em>CATPLMNavPropertiesAcquisition</em> type, which enables selection of a PLM entity 
in an immersive window (Search Result window and Explore window). In this case, 
Acquisition agent allows to select objects of type Document (CDM_Document).</p>
<p>The acquisition agent also enables us to retrieve the Identificator of the selected 
PLM entity, as a <em>CATIAdpPLMIdentificator</em> type (<code>_piAdpIdOnSelectedDoc</code>). 
The Identificator inturn helps us retrieve the Knowledge Type of the selected PLM 
entity, and confirm if the Document type is Document (CDM_Document). (In real life 
scenarios, a file can be checked in either on <strong>&quot;</strong>Generic Document&quot; 
or &quot;Document&quot;.)</p>
<p>The agent also enables us to retrieve a <em>CATICkeObject</em> Interface to the 
Knowledge World, on our selected Document. The PLM Identificator and the Knowledge 
Interface on our selected Document is an input to the next step, which sets the 
dialog parameters for check in command.</p>
<p>This step is further explained in the UC [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Checking in Files on a Selected Document</h3>
<p>The <code>CheckInFile</code> method of the dialog class is detailed below.</p>
<pre class="code">void <strong>CAADocCheckInFilesDlg::CheckInFile</strong>(CATCommand* iSendingCommand,
                                           CATNotification* iSentNotification, 
				      CATCommandClientData iUsefulData)
{
    HRESULT hr=E_FAIL;
    PLMIDocument* poDocument = NULL;
    hr = <strong>PLMDocumentServices::GetDocument(_piAdpIdOnSelectedDoc,poDocument);</strong>
...
    CATUnicodeString iCheckInComment(&quot;My Comments&quot;);
<strong>    hr = poDocument-&gt;CheckInFile(strCheckInFileName,strCheckInFilePath,iCheckInComment);</strong>
...		
</pre>
<p>The <code>GetDocument</code> static API of the <em>PLMDocumentServices</em> class 
which gets Document either from database, or from session. Its input argument are:</p>
<ul>
	<li><code>_piAdpIdOnSelectedDoc</code>, a <em>CATIAdpPLMIdentificator</em>* 
		type representing the Identificator of the Document</li>
	<li><code>poDocument</code>, a <em>PLMIDocument</em> type, which will contain 
		the document from database or from session.</li>
</ul>
<p>The <code>CheckInFile</code> static API of the <em>PLMIDocument</em> class which 
which checks in a file. Its input argument are:</p>
<ul>
	<li><code>strCheckInFileName</code>, a <em>CATUnicodeString</em> type representing 
		the name of old the file (File which is already checked out.).</li>
	<li><code>iCheckInPath</code>, a <em>CATUnicodeString</em> type representing 
		the full path from which the file will be uploaded.</li>
	<li><code>iCheckInComment</code>, a <em>CATUnicodeString</em> type representing 
		the comment associated with the file.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates to an end user how to check in a file on a selected 
Document. It is an interactive UC, where the end-user selects a Document in the 
spec tree inside the VPM Navigator window. The user needs to specify the entire 
path of the file (including file name) to be checked in. The file will then be checked 
in on a selected document.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a><br />
		</td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocumentUseDoc/CAADocUcCheckOutFiles.htm">
		CheckOut Files on selected Document</a><br />
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History">History</a></h2>
<table class="history">
	<tr>
		<td>Version: 1 [Jun 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
