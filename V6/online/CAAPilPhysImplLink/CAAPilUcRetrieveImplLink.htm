<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieving Source and Targets of  Implement Relation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Source and Targets of Implement Relation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use case mainly illustrates the retrieval of Source object from 
		Target object and Target object from source object. In addition this use 
		case illustrates of the loading of an Implement relation in the Session.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPilRetrieveImplLink Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPilRetrieveImplLink Do</a></li>
					<li><a href="#How">How to Launch CAAPilRetrieveImplLink</a></li>
					<li><a href="#Where">Where to Find the CAAPilRetrieveImplLink 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, user learns to load an Implement relation between Product Root 
and Logical Root. Then we learn about retrieving Targets from source and Source 
from Target.</p>
<p>In addition, in this process we will learn the must conditions for loading the 
Implement relation link in the session, which will tech us that an Implement relation 
is PLM Connection type PLM Component:</p>
<ul>
	<li>Implement relation gets loaded in Authoring Loading mode along with aggregating 
		Product Reference.</li>
	<li>The source and target must be in current sessions.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPilRetrieveImplLink Use Case</h2>
<p><code>CAAPilRetrieveImplLink<a></a></code> is a use case of the <code>CAAPhysImplLinkUseItf.edu<a></a></code> 
framework that illustrates <code>CATPhysicalImplementLinkUseItf</code> framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPilRetrieveImplLink Do</h3>
<p>The Use case basically talks about loading an Implement relation link between 
Product Reference and Logical Reference.</p>
<p>This use case is demonstrating only Reference to Reference Implement link. The 
input data to this use case contains Implement link between Product Reference and 
Logical Reference. This use case is data specific.</p>
<p>To demonstrate the loading condition of the Implement relation in session we 
do some trial cases:</p>
<ul>
	<li>Initially we load Product Reference and Logical Reference in session in 
		ShortNavigation mode. This will load the both References Component in session 
		(Source as well as target elements of Implement relation link).</li>
	<li>
		<p>Next we create Object in context for Source (Prod Root) and Target (Logical 
		Root). Then we try to retrieve the list of Target elements associated with 
		the Source element and vice versa but the list result shows empty list since 
		an Implement relation is not loaded in the session.</p>
	</li>
</ul>
<p>Actually for loading the Implement relation link object in current session (which 
is aggregated under the Product Root), we switch the loading mode of <strong>Product 
Reference</strong> to <strong>Authoring</strong> mode.</p>
<p>Now we again try to retrieve the list of Target elements associated with the 
Source element and vice versa. This time result shows count is atleast One (1) it 
means Implement relation object loaded in session successfully. The count could 
be more than one (1) since one source could have multiple targets and vice versa.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPilRetrieveImplLink</h3>
<p>To launch CAAPilRetrieveImplLink, you will need to set up the build time environment, 
then compile CAAPilRetrieveImplLink along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<pre class="code">
mkrun -c &quot;CAAPilRetrieveImplLink Repository Server User Password SecurityCtx ProductPLMType LogicalPLMType
      -ProdRef Attribute_name1 Attribute_value1 [Attribute_name1 Attribute_value1 ...]
      -LogRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]&quot;</pre>
<p>where:</p>
<table class="all">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as Host:Port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project) 
		Choose Role as Reviewer (as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>ProductPLMType</th>
		<td>A String For Product PLM Type</td>
	</tr>
	<tr>
		<th>LogicalPLMType</th>
		<td>A String For Logical PLM Type</td>
	</tr>
	<tr>
		<th>Attribute_name1</th>
		<td>The identification attribute name for Product reference</td>
	</tr>
	<tr>
		<th>Attribute_value1</th>
		<td>The identification attribute value for Product reference</td>
	</tr>
	<tr>
		<th>Attribute_name2</th>
		<td>The identification attribute name for Logical reference</td>
	</tr>
	<tr>
		<th>Attribute_value2</th>
		<td>The identification attribute value for Logical Reference</td>
	</tr>
</table>
<p>The input model for this use case is retrieved by importing the CAAPilRetrieveImplLink_Root.3dxml 
file which located at:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\InputData</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAAPilRetrieveImplLink.3dxml this 3D XML file contains the root Product Reference 
and Logical Root Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code><a></a>: CAAPilRetrieveImplLink_Prod_Root</li>
	<li><code>Version</code><a></a>: ---</li>
</ul>
<ul>
	<li><code>PLM_ExternalID</code><a></a>: CAAPilRetrieveImplLink_Log_Root</li>
	<li><code>Version</code><a></a>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPilRetrieveImplLink Code</h3>
<p>The CAAPilRetrieveImplLink use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\CAAPilRetrieveImplLink.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Loading the Product Reference in Session in Short Navigation 
		Mode</a></li>
	<li><a href="#Step2">Loading the Logical Reference in Session in Short Navigation 
		Mode</a></li>
	<li><a href="#Step3">Creating the Two Objects in Context (One for the Source, 
		and One for the Target)</a></li>
	<li><a href="#Step4">Retrieving the Implement Link Manager</a></li>
	<li><a href="#Step5">Checking the Count of Number of Source from Target and 
		Target from Source</a></li>
	<li><a href="#Step6">Loading the Product Reference in Authoring Mode</a></li>
	<li><a href="#Step7">Checking the Count of Number of Source from Target and 
		Target from Source</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPilRetrieveImplLink use case begins by creating a session and connecting 
to the Input Repository with an appropriate role (Reviewer, in this case). The Use 
Case &quot;<b>Creating a Basic PLM Batch</b>&quot; [<a href="#References">2</a>] 
deals with Opening and Closing a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Loading the Product Reference in Session in Short Navigation 
Mode</h3>
<p>We begin with by retrieving the <code>Identificator</code> [<a href="#References">3</a>] 
of input product Reference, prerequisite for this is retrieving usable type of the 
input Product Reference.</p>
<p>Further we load the Product Reference in the session in shot navigation mode.
</p>
<pre class="code">...
    CATAdpIdentificationSet oIdentificationlAttributeSetOfProdRef;
    CATIAdpPLMIdentificator* opiIDComp = NULL;
    CATIAdpPLMIdentificator* opiIDComp = NULL;
    CATIType* opiCATIType = NULL;

    hr = CAARetrieveIDofUniquePLMObject(iListAttributeNameProdRef,iListAttributeValueProdRef,
				    istrProudctPLMType,opiIDComp);

   ...
   <strong>CATIPLMComponent</strong>* piPLMCompOnProdRoot = NULL;
   <strong>CATOmbLifeCycleRootsBag</strong> Bag;
   <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::OneLevelNavigation);
   <strong>CATAdpOpener</strong> opener(Bag,params);
   
   hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMComponent, (void**) &amp;piPLMCompOnProdRoot);
...</pre>
<p>The call to CAARetrieveIDofUniquePLMObject retrieves an Identificator pointer. 
The details we can see in the [<a href="#References">3</a>] UC.</p>
<p>Further we open the Product Root Reference in session using call to <code>CompleteAndOpen</code> 
of <em>CATAdpOpener</em> in ShortNavigation mode (OneLevelNavigation) [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Loading the Logical Reference in Session in Short Navigation 
Mode</h3>
<p>Now we load the Logical Reference in the session in Short-Navigation. We open 
the Logical reference for which we have retrieved identificator.</p>
<pre class="code">...
    CATIAdpPLMIdentificator* opiIDCompOnLogicalType = NULL;
	
    hr = CAARetrieveIDofUniquePLMObject(iListAttributeNameLogRef,iListAttributeValueLogRef,
				   istrLogicalPLMType,opiIDCompOnLogicalType);
    ...  
<strong>   CATIPLMComponent</strong> *piPLMCompOnLogicalRoot = NULL;
   hr= opener.<strong>CompleteAndOpen</strong>(opiIDCompOnLogicalUsableType,IID_CATIPLMComponent, (void**) &amp;piPLMCompOnLogicalRoot);
  ...</pre>
<p>A call to <code>CompleteAndOpen</code> of <em>CATAdpOpener</em> loads the Logical 
reference in the session of given identificator.</p>
<p>This call insert Logical Reference Components within the <code>BAG</code> while 
opening object, thus letting the execution have selectively, a complete control 
over their lifecycle. Please refer to the tech article [<a href="#References">5</a>] 
to understand the details of the BAG concept.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Two Objects in Context (One for the Source, 
and One for the Target)</h3>
<p>The input Product Reference and Logical Reference are all loaded in the current 
session. Now we will create Object in Context (OIC) for loaded Product Reference 
as well Logical Reference.</p>
<pre class="code">...
    CATListPtrCATIPLMComponent ComponentList;

    CATOmbObjectInContext * piOmbObjCtxOnProdRoot = NULL;
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnProdRoot, piOmbObjCtxOnProdRoot);
    ...	
    CATOmbObjectInContext * piOmbObjCtxOnLogicalRoot = NULL;
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnLogicalRoot, piOmbObjCtxOnLogicalRoot);
...</pre>
<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em> call 
in this case takes a empty list namely. <code>ComponentList</code> and opened PLM 
Component pointer, as an input. In this case we call this method twice one for Product 
Reference (<code>piPLMCompOnProdRoot</code>) and for Logical Reference (<code>piPLMCompOnLogicalRoot</code>) 
this API returns the Object in context (<code>piOmbObjCtxOnProdRoot</code>, and
<code>piOmbObjCtxOnLogicalRoot</code>).</p>
<p>Please note that in this case we are giving empty list as first argument and 
second argument as NULL since we are creating object in context for Root object.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Implement Link Manager</h3>
<p>Now here we proceed to retrieve Implement link manager. This Implement manager 
will provide services to manage the Implement link.</p>
<pre class="code">...
    CATIPhysicalImplementLinkManager* piImplementLinkManager = NULL;
    hr = CATPhysicalImplementLinkProvider::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
<p>A call to <code>GetImplementLinkManager</code> of <em>CATPhysicalImplementLinkProvider</em> 
returns the Implement manager <code>piImplementLinkManager</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Checking the Count of Number of Source from Target and Target 
from Source</h3>
<p>Now we retrieve the count of number of targets associated with source Object 
in contact (Product reference). Then further we retrieve count of Source from Target 
Object in context (Logical reference).</p>
<p>Please note that here expected count is zero. Implement link object is aggregated 
under the Product Reference(Source) and it is a Connection type PLM Component. Since 
source is loaded in short-Navigation mode so Implement link will not load in the 
session since Implement link is of Connection type PLM object which is get loaded 
in Authoring mode only.</p>
<pre class="code">...
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,iTargetCount);
    ...
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,iSourceCount);
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> global method of this use case 
returns a count of Targets associated with input Source (<code>piOmbObjCtxOnProdRoot</code>) 
Component [<a href="#RetrieveCountOfTargets">#</a>].</p>
<p>A call to <code>RetrieveCountOfSource</code> global method of this use case returns 
a count of Source associated with input Target (<code>piOmbObjCtxOnLogicalRoot</code>) 
Component [<a href="#RetrieveCountOfSource">#</a>].</p>
<p>These two methods are explained below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Loading the Product Reference in Authoring Mode</h3>
<p>Now we will switch the mode of the opened Product Reference to Authoring mode 
which was we opened in Short-Navigation mode in previous step. Due to switching 
of the mode of Product reference to Authoring mode the PLM Connection elements aggregated 
under the Product Reference.</p>
<pre class="code">...
    <strong>CATAdpOpener</strong> opener2(Bag);
    hr= opener2.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMComponent, (void**) &amp;piPLMCompOnProdRoot);
...</pre>
<p>A call to <code>CompleteAndOpen</code> of <em>CATAdpOpener</em> reopens the same 
object in Authoring mode [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Checking the Count of Number of Source from Target and Target 
from Source</h3>
<p>Now we will again retrieve the count of source as well target as we have retrieved 
in earlier steps, but here we expect count 1 (*). Since we have loaded one target 
and one source in the session and Product Reference (source) is opened in Authoring 
session .</p>
<pre class="code">...
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,iTargetCount);
	
    if ((FAILED(hr))||(1&lt;iTargetCount))
       return hr;

    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,iSourceCount);

   if ((FAILED(hr))||(1&lt;iSourceCount))
       return hr;
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> returns a Count of Target [<a href="#RetrieveCountOfTargets">#</a>].
</p>
<p>A call to <code>RetrieveCountOfSource</code> returns a count of Source [<a href="#RetrieveCountOfSource">#</a>].</p>
<p>Please note that here we are using same object in context (OIC) object since 
we are using same pointer to switch (reopening ) the mode of the Product reference.</p>
<p>(*) The result can be zero, but in this case, check interactively that the input 
data model contains an implement link.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPilRetrieveImplLink use case ends by simply closing the PLM session. Since 
all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic namely &quot;Creating a Basic PLM Batch&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a><a name="RetrieveCountOfTargets"></a>RetrieveCountOfTargets</h3>
<p>The <code>RetrieveCountOfTargets</code> method initially retrieves the list of 
Target objects in context loaded in session associated with input Source Component. 
Further from that list method retrieves count of element in the list.</p>
<pre class="code">HRESULT RetrieveCountOfTargets(CATIPhysicalImplementLinkManager* piImplementLinkManager, CATOmbObjectInContext * piOmbObjCtxOnProdRoot, int &amp;NbTargets )
{
   ...
   CATLISTP(CATOmbObjectInContext) ListOfTargetsBeforeNewImpliLinkCreation;
   CATLISTP(CATIPhysicalImplementLink) ListOfImplementLinks ;
   rc = piImplementLinkManager-&gt;<strong>GetImplementRelationTargets</strong>(piOmbObjCtxOnProdRoot,
                                                            ListOfTargetsBeforeNewImpliLinkCreation,
                                                            ListOfImplementLinks );
   ...
   NbTargets = ListOfTargetsBeforeNewImpliLinkCreation.Size();
   ...
}</pre>
<p>A call to <code>GetImplementRelationTargets</code> of <em>CATIPhysicalImplementLinkManager</em> 
retrieves the List of Object in context of Targets (<code>ListOfTargetsBeforeNewImpliLinkCreation</code>) 
associated with the input Source Object in context (<code>piOmbObjCtxOnProdRoot</code>), 
and the list of implement link objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a><a name="RetrieveCountOfSource"></a>RetrieveCountOfSource</h3>
<p>The <code>RetrieveCountOfSource</code> method initially retrieves the list of 
Source objects in context loaded in session associated with input Target Component. 
Further from that list method retrieves count of element in the list.</p>
<pre class="code">HRESULT RetrieveCountOfSource(CATIPhysicalImplementLinkManager* piImplementLinkManager, CATOmbObjectInContext * piOmbObjCtxOnLogicalRoot, int &amp;NbSources )
{
   ...
   CATLISTP(CATOmbObjectInContext) ListOfSourcesBeforeNewImpliLinkCreation;
   CATLISTP(CATIPhysicalImplementLink) ListOfImplementLinks ;
   rc = piImplementLinkManager-&gt;<strong>GetImplementRelationSources</strong>(piOmbObjCtxOnLogicalRoot,
                                                            ListOfSourcesBeforeNewImpliLinkCreation,
                                                            ListOfImplementLinks );
   ...	
   NbSources = ListOfSourcesBeforeNewImpliLinkCreation.Size();
   ...
}</pre>
<p>A call to <code>GetImplementRelationSources</code> of <em>CATIPhysicalImplementLinkManager</em> 
retrieves the List of Object in context of Sources (<code>ListOfSourcesBeforeNewImpliLinkCreation</code>) 
associated with the input Source Object in context (<code>piOmbObjCtxOnProdRoot</code>), 
and the list of implement link objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case illustrates the loading of Implement link and demonstrates its prerequisite 
conditions. Basic conditions are</p>
<ul>
	<li>Source and targets must be in session.</li>
	<li>The Product Reference (aggregating implement link Component) must be loaded 
		in Authoring mode to load the Implement relation in session.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAPlmTaCATIAdpPLMIdentificator.htm">
		PLM Component Identifier</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm">
		Understanding PLM Component Life Cycle</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jan 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
