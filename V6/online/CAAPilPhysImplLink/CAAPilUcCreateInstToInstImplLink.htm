<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Instance to Instance Implement Relation Link</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Instance to Instance Implement Relation Link</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case mainly illustrates about the creation of an Implement Relation 
		between Product Instance and Logical Instance.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPilCreateInstToInstImplLink Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPilCreateInstToInstImplLink 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPilCreateInstToInstImplLink
						</a></li>
					<li><a href="#Where">Where to Find the CAAPilCreateInstToInstImplLink 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to create new Implement link between Product 
Instance and Logical Instance. In addition we will learn to create object in context 
(OIC) for Product Instance and Logical Instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPilCreateInstToInstImplLink Use Case</h2>
<p>CAAPilCreateInstToInstImplLink is a use case of the CAAPhysImplLinkUseItf.edu 
framework that illustrates CATPhysicalImplementLinkUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPilCreateInstToInstImplLink Do</h3>
<p>The Use Case basically talks about creation of an Implement link between Product 
Instance and Logical Instance.</p>
<ul>
	<li>Initially we load the Product Reference. The loading mode is &quot;Authoring&quot; 
		mode to enable to load in session all the Product structure. The possible 
		aggregated Implement relations will be loaded too.</li>
	<li>Next we load the Logical Reference under the same condition.</li>
	<li>Then important step is to retrieve path of first instances up to Source 
		and Target.</li>
	<li>Further we create an object in context (OIC) for Product Instance (to represent 
		the Source) as well as for Logical Instance (to represent the Target).
	</li>
	<li>Before implement link creation, we retrieve the count of the Source objects 
		from Target object and count Target objects from Source object.</li>
	<li>Next we create Implement link between Source and target OIC.</li>
	<li>Lastly, we confirm the success of the creation of an implement link by confirming 
		if the count of implement relation Target from a Source finally is +1 compared 
		to the count prior to the implement link creation. On similar lines, we 
		also confirm if the count of implement relation sources from our Target 
		under consideration, is +1 compared to the count prior to the implement 
		link creation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPilCreateInstToInstImplLink</h3>
<p>To launch CAAPilCreateInstToInstImplLink, you will need to set up the build time 
environment, then compile CAAPilCreateInstToInstImplLink along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<pre class="code">mkrun -c &quot;CAAPilCreateInstToInstImplLink Repository Server User Password SecurityCtx ProductPLMType LogicalPLMType
      -ProdRef Attribute_name1 Attribute_value1  [Attribute_name1 Attribute_value1 ...]
      -LogRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]
      -PLMIDProdInst PLM_ExternalID_value1 [PLM_ExternalID_value1 ... ]
      -PLMIDLogInst PLM_ExternalID_value2 [PLM_ExternalID_value2 ... ]&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as Host:Port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project) 
		Choose Role as Designer( as the use case we are creating new Implement link 
		(the PLM object))</td>
	</tr>
	<tr>
		<th>ProductPLMType</th>
		<td>A String For Product PLM Type</td>
	</tr>
	<tr>
		<th>LogicalPLMType</th>
		<td>A String For Logical PLM Type</td>
	</tr>
	<tr>
		<th>Attribute_name1</th>
		<td>The identification attribute name for Product ref (IDSet Attribute)
		</td>
	</tr>
	<tr>
		<th>Attribute_value1</th>
		<td>The identification attribute value for Product ref (IDSet Attribute)</td>
	</tr>
	<tr>
		<th>Attribute_name2</th>
		<td>The identification attribute name for Logical ref (IDSet Attribute)
		</td>
	</tr>
	<tr>
		<th>Attribute_value2</th>
		<td>The identification attribute value for Logical Ref (IDSet Attribute)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID_value1</th>
		<td>The PLMExtenalID value list for Path of first inst for Product Instance</td>
	</tr>
	<tr>
		<th>PLM_ExternalID_value2</th>
		<td>The PLMExtenalID value list for Path of first inst for Logical Instance</td>
	</tr>
</table>
<p>The input model for this use case is retrieved by importing the CAAPilCreateInstToInstImplLink.3dxml 
file which located at:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\InputData</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAALilCreateInstToInstImplLink.3dxml this 3D XML file contains the root Product 
Reference and Logical Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAPilCreateInstToInstImplLink_Prod_Root</li>
	<li>Version: ---</li>
</ul>
<ul>
	<li><code>PLM_ExternalID</code>: CAAPilCreateInstToInstImplLink_Log_Root</li>
	<li><code>Version</code>: ---</li>
</ul>
<p>And the Instance names are as below:</p>
<ul>
	<li>PLM_PLM_ExternalID_value1: CAAPilCreateInstToInstImplLink_Prod_Child1.1</li>
	<li>PLM_PLM_ExternalID_value2: CAAPilCreateInstToInstImplLink_Log_Child1.1</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPilCreateInstToInstImplLink Code</h3>
<p>The CAAPilCreateInstToInstImplLink use case is defined at the location:</p>
<p></p>
<p>The input model for this use case is retrieved by importing the CAAPilCreateInstToInstImplLink.3dxml 
file which located at:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\CAAPilCreateInstToInstImplLink.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Loading the Product Reference And Logical Reference in 
		the Session</a></li>
	<li><a href="#Step2">Creating - if Necessary - the Ref/Ref Implement Link</a></li>
	<li><a href="#Step3">Creating the Two Objects in Context (One for the Source, 
		and One for the Target)</a></li>
	<li><a href="#Step4">Retrieving the Implement Link Manager</a></li>
	<li><a href="#Step5">Checking Count of Source from Target and Target from Source</a></li>
	<li><a href="#Step6">Creating Instance to Instance Implement Link</a></li>
	<li><a href="#Step7">Checking Count of Source from Target and Target from Source</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPilCreateInstToInstImplLink use case begins by creating a session and 
connecting to the Input Repository with an appropriate role (designer, in this case). 
The Use Case &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>] deals 
with opening and closing a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Loading the Product Reference And Logical Reference in the 
Session</h3>
<p>We begin with by retrieving the <code>Identificator</code> of input product Reference 
and Logical Reference. Further we load the Product Reference and Logical Reference 
in the session. For details of loading Reference in session refer [<a href="#References">3</a>] 
use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating - if Necessary - the Ref/Ref Implement Link</h3>
<p>Before creating a inst/inst link, an implement link between the two references 
must exist.</p>
<pre class="code">...
hr = <strong>CheckRefRefImplementLink</strong>(piPLMCompOnProdRoot, piPLMCompOnLogicalRoot);
if (FAILED(hr)) return 1;
...</pre>
<p>The local method <code>CheckRefRefImplementLink</code> creates an implement link 
between the two input references as described in the referenced use case [<a href="#References">5</a>]. 
But the creation can fail if an implement link already exists. In this case we use 
the <em>CATError</em> returned by <code>CreateImplementRelation</code> to analyze 
the error.</p>
<pre class="code">
...
if ( SUCCEEDED (rc) ) 
{
   pImplementLinkConnection-&gt;Release(); pImplementLinkConnection = NULL ;
}else
{
   CATError* error = CATError::CATGetLastError(rc);
   if ( NULL != error)
   {
      if (! strcmp(error-&gt;GetMsgId(),"<strong>ImplementLinkERR_03</strong>") ) 
     {
				 
	rc = S_OK ;
	error-&gt;Release(); error = NULL;
...</pre>
<p>If the creation is a success, the Ref/Ref implement link relation does not exist, 
otherwise if the error is &quot;<code>ImplementLinkERR_03</code>&quot;, the link 
already exists. Have a look to the class documentation for the other error numbers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Two Objects in Context (One for the Source, 
and One for the Target)</h3>
<p>Now we will create Object in Context for Product instance. To create OIC we need 
to retrieve Path of first Instances.</p>
<pre class="code">...
    CATListPtrCATIPLMComponent ListComponentProdPathOfInst; 
    int level =1;
    hr = <strong>RetrievePathOfInstances</strong>(piPLMCompOnProdRoot,
	                        ListProdPLMIDAttrValueOfFirstInst,
   			      ListComponentProdPathOfInst,
 			      level);
    ...
    <strong>CATOmbObjectInContext</strong> * piOmbObjCtxOnProdRoot = NULL;
    hr = <strong>CATOmbObjectInContext</strong>::<strong>CreateObjectInContext</strong>(ListComponentProdPathOfInst, NULL, NULL, piOmbObjCtxOnProdRoot);
...</pre>
<p>A call to <code>RetrievePathOfInstances</code> create path of first instances 
of Source product instance object [<a href="#RetrievePathOfInst">#</a>]. </p>
<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em> call 
in this case takes a Path of first Instance list namely <code>ListComponentProdPathOfInst</code> 
and other two arguments NULL, then API returns the object in context (<code>piOmbObjCtxOnProdRoot</code>) 
as last argument.</p>
<p>Next we will create Object in Context for logical instance. In very similar manner 
as we have created OIC of Product Instance.</p>
<pre class="code">...
    CATListPtrCATIPLMComponent ListComponentLogPathOfInst;
    level =1;
    hr = <strong>RetrievePathOfInstances</strong>(piPLMCompOnLogicalRoot,
  	                     ListPLMIDAttrValueOfLogicalPathOfInst,
			     ListComponentLogPathOfInst,
			     level);
    ...
    <strong>CATOmbObjectInContext</strong> * piOmbObjCtxOnLogicalRoot = NULL;
    hr = <strong>CATOmbObjectInContext</strong>::<strong>CreateObjectInContext</strong>(ListComponentLogPathOfInst, NULL, NULL, piOmbObjCtxOnLogicalRoot);
...</pre>
<p>A call to <code>RetrievePathOfInstances</code> create path of first instances 
of Target Logical instance object [<a href="#RetrievePathOfInst">#</a>]. </p>
<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em> call 
in this case takes a Path of first Instance list namely <code>ListComponentLogPathOfInst</code> 
and other two arguments NULL, then API returns the Object in context (<code>piOmbObjCtxOnLogicalRoot</code>) 
as last argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Implement Link Manager</h3>
<p>Now here we proceed to retrieve Implement link manager. This Implement manager 
will provide services to manage the Implement link.</p>
<pre class="code">...
    <strong>CATIPhysicalImplementLinkManager</strong>* piImplementLinkManager = NULL;
    hr = <strong>CATPhysicalImplementLinkProvider</strong>::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
<p><code>GetImplementLinkManager</code> call of <em>CATPhysicalImplementLinkProvider</em> 
returns the Implement manager <code>piImplementLinkManager</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Checking Count of Source from Target and Target from Source</h3>
<p>Now we retrieve count of Targets associated with Source object in context (Product 
Instance). Then further we retrieve count of Source from Target object in context 
(Logical Instance).</p>
<pre class="code">...
    int countOfTargetsBeforeNewLinkCreation = 0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,countOfTargetsBeforeNewLinkCreation);
    ...
    int countOfSourceBeforeNewLinkCreation = 0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfSourceBeforeNewLinkCreation);
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> returns a count of Target <code>
countOfTargetsBeforeNewLinkCreation.</code> The details of this local method is 
explained in another use case [<a href="#References">4</a>].</p>
<p>A call to <code>RetrieveCountOfSource</code> returns a count of Source <code>
countOfSourceBeforeNewLinkCreation</code> [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating Instance to Instance Implement Link</h3>
<p>Now we will create the Instance to Instance Implement link between the created 
Product Instance OIC as Source and Logical Instance OIC as Target.</p>
<pre class="code">...
   hr =  piImplementLinkManager-&gt;<strong>CreateImplementRelation</strong>(piOmbObjCtxOnProdRoot,piOmbObjCtxOnLogicalRoot);
...</pre>
<p>A call to <code>CreateImplementRelation</code> of <em>CATIPhysicalImplementLinkManager</em> 
on <code>piImplementLinkManager</code> creates a Implement link between two input 
objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Checking Count of Source from Target and Target from Source</h3>
<p>Now we will again retrieve count of Source as well Target as we have retrieved 
in earlier steps, but here we expect the count is increment one (+1). Since we have 
created Implement link between Target and Source, so count must be increment one 
(+1) to previous count.</p>
<pre class="code">...
    int countOfTargetsAfterNewLinkCreation =0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,countOfTargetsAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfTargetsBeforeNewLinkCreation+1) != countOfTargetsAfterNewLinkCreation)) return 1;
    
    int countOfSourceAfterNewLinkCreation =0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfSourceAfterNewLinkCreation);
    if ((FAILED(hr))||(countOfSourceBeforeNewLinkCreation == countOfSourceAfterNewLinkCreation )) return 1;
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> returns a count of Target <code>
countOfTargetsAfterNewLinkCreation</code> [<a href="#References">4</a>]. </p>
<p>A call to <code>RetrieveCountOfSource</code> returns a count of Source <code>
countOfSourceAfterNewLinkCreation</code> [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPilCreateInstToInstImplLink use case ends by simply saving and closing 
the PLM session. Since all use cases necessarily conclude by saving and closing 
the PLM session, we have a dedicated article on this topic namely &quot;Creating 
a Basic PLM Batch&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="RetrievePathOfInst"></a>RetrievePathOfInstances</h3>
<p>The <code>RetrievePathOfInstances</code> method browse through the input model 
structure recursively, and creates list of path of first instances as per the input 
PLM_ExternalID list.</p>
<pre class="code">HRESULT <strong>RetrievePathOfInstances</strong>(CATIPLMNavReference *piPLMNavRefOnRef,
			    CATListOfCATUnicodeString ListPLMIDAttrValueOfPathOfInst,
			    CATListPtrCATIPLMComponent &amp;ComponentList,
			    int Level)
{
    <strong>CATListPtrCATIPLMNavEntity</strong> childrenList;
    CATPLMCoreType coreType = PLMCoreInstance;
    rc = piPLMNavRefOnRef-&gt;<strong>ListChildren</strong>(childrenList,1,&amp;coreType);</pre>
<p>A call to <code>ListChildren</code> of <em>CATListPtrCATIPLMNavEntity</em> retrieves 
the List of children Objects.</p>
<p>If the children object count is more than one we proceed to browse further.</p>
<pre class="code">        int j=1 ;
        <strong>while ( (j&lt;=childrenList.Size()) &amp;&amp; (SUCCEEDED(rc)) )
</strong>        {

	   CATIPLMNavEntity * pNavEntityOnchild = childrenList[j];
		
   	   CATListOfCATUnicodeString listattr , listvalattr;
	   listattr.Append("PLM_ExternalID");
	   pNavEntityOnchild-&gt;GetPublicAttributes(listattr, listvalattr);
		
  	  <strong> if (listvalattr[1] == ListPLMIDAttrValueOfPathOfInst[Level] )</strong>
	   {
		CATIPLMComponent * piPLMCompOnCurrentInst = NULL ;
		rc = pNavEntityOnchild-&gt;QueryInterface(IID_CATIPLMComponent, (void**) &amp;piPLMCompOnCurrentInst);
		
   		<strong>ComponentList.Append(piPLMCompOnCurrentInst);</strong>
		
		CATIPLMNavInstance * pNavInstanceOnCurrentChild = NULL ;
		rc = pNavEntityOnchild-&gt;QueryInterface(IID_CATIPLMNavInstance, (void**) &amp;pNavInstanceOnCurrentChild);
			
 		CATIPLMNavReference* pReferenceOnChild = NULL ;
		rc = pNavInstanceOnCurrentChild-&gt;GetReferenceInstanceOf(pReferenceOnChild);
				
		Level++;
		rc = <strong>RetrievePathOfInstances</strong>(pReferenceOnChild,ListPLMIDAttrValueOfPathOfInst,ComponentList,Level) ;
	}
}	
...</pre>
<p>Here we browse through the input mode structure with generic APIs, so that this 
method will be used for the both models Product as well Logical. </p>
<p>we browse through recursively for matching each PLM_ExternalID from each level. 
Further after matching PLM_ExternalID with instance name we append the instance 
in the Path of first element list.</p>
<p>And finally this method will fill the list of path of first instance element 
list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case illustrates the creation of the instance to instance implement relation 
link.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPilUcRetrieveImplLink.htm">Retrieving Source and Targets 
		of Implement Relation</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPilUcCreateRefToRefImplLink.htm">Creating Reference to Reference 
		Implement Relation Link</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jan 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
