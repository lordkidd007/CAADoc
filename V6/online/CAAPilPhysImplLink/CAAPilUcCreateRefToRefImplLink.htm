<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Reference to Reference Implement Relation Link</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Reference to Reference Implement Relation 
		Link</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case mainly illustrates about the creation of an Implement link 
		between Product Reference and Logical Reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPilCreateRefToRefImplLink Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPilCreateRefToRefImplLink Do</a>
					</li>
					<li><a href="#How">How to Launch CAAPilCreateRefToRefImplLink
						</a></li>
					<li><a href="#Where">Where to Find the CAAPilCreateRefToRefImplLink 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to create Implement link between Product Root 
Reference and Logical Root Reference. In addition, user learns to create object 
in context (OIC) for Root Reference object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPilCreateRefToRefImplLink Use Case</h2>
<p>CAAPilCreateRefToRefImplLink is a use case of the CAAPhysImplLinkUseItf.edu framework 
that illustrates CATPhysicalImplementLinkUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPilCreateRefToRefImplLink Do</h3>
<p>The Use case basically talks about creation of an Implement link between Product 
reference and Logical Reference.</p>
<ul>
	<li>Initially we load the Product Reference. The loading mode is &quot;Authoring&quot; 
		mode to enable to load in session all the Product structure. The possible 
		aggregated Implement relations will be loaded too.</li>
	<li>Next we load the Logical Reference under the same condition.</li>
	<li>Further we create an object in context (OIC) for Product Reference (to represent 
		the Source) as well as for Logical Reference&nbsp; (to represent the Target).</li>
	<li>Before creation of an implement relation we retrieve count of Target from 
		Source and vice versa.</li>
	<li>Further we create an Implement relation between two created OIC from source 
		and vice versa.</li>
	<li>Lastly, we confirm the success of the creation of an implement link by confirming 
		if the count of implement relation Target from a Source finally is +1 compared 
		to the count prior to the implement link creation. On similar lines, we 
		also confirm if the count of implement relation sources from our Target 
		under consideration, is +1 compared to the count prior to the implement 
		link creation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPilCreateRefToRefImplLink</h3>
<p>To launch CAAPilCreateRefToRefImplLink, you will need to set up the build time 
environment, then compile CAAPilCreateRefToRefImplLink along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<pre class="code">mkrun -c &quot;CAAPilCreateRefToRefImplLink Repository Server User Password SecurityCtx ProductPLMType LogicalPLMType
      -ProdRef Attribute_name1 Attribute_value1  [Attribute_name1 Attribute_value1 ...]
      -LogRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as Host:Port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project) 
		Choose Role as Designer( as the use case we are creating new Implement link 
		(the PLM object))</td>
	</tr>
	<tr>
		<th>ProductPLMType</th>
		<td>A String For Product PLM Type</td>
	</tr>
	<tr>
		<th>LogicalPLMType</th>
		<td>A String For Logical PLM Type</td>
	</tr>
	<tr>
		<th>Attribute_name1</th>
		<td>The identification attribute name for Product reference (ID Set)
		</td>
	</tr>
	<tr>
		<th>Attribute_value1</th>
		<td>The identification attribute value for Product reference (ID Set)</td>
	</tr>
	<tr>
		<th>Attribute_name2</th>
		<td>The identification attribute name for Logical reference (ID Set)</td>
	</tr>
	<tr>
		<th>Attribute_value2</th>
		<td>The identification attribute value for Logical reference (ID Set)</td>
	</tr>
</table>
<p>The input model for this use case is retrieved by importing the CAAPilCreateRefToRefImplLink.3dxml 
file which located at:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\InputData</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAAPilCreateRefToRefImplLink.3dxml this 3D XML file contains the root Product 
Reference and Logical Root Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAPilCreateRefToRefImplLink_Prod_Root</li>
	<li><code>Version</code>: ---</li>
</ul>
<ul>
	<li><code>PLM_ExternalID</code>: CAAPilCreateRefToRefImplLink_Log_Root</li>
	<li><code>Version</code>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPilCreateRefToRefImplLink Code</h3>
<p>The CAAPilCreateRefToRefImplLink use case is defined at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAPhysImplLinkUseItf.edu\CAAPilCreateRefToRefImplLink.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Loading the Product Reference and Logical Reference in 
		the Session in Authoring Mode</a></li>
	<li><a href="#Step2">Creating Two Objects in Context (One for the Source, and 
		One for the Target)</a></li>
	<li><a href="#Step3">Retrieving the Implement Link Manager</a></li>
	<li><a href="#Step4">Retrieving Count of Source from Target and Target from 
		Source</a></li>
	<li><a href="#Step5">Creating Reference to Reference Implement Link</a></li>
	<li><a href="#Step6">Checking Count of Source from Target and Target from Source</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPilCreateRefToRefImplLink use case begins by creating a session and connecting 
to the Input Repository with an appropriate role (designer, in this case). The Use 
Case &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>] 
deals with Opening and Closing a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Loading the Product Reference and Logical Reference in the 
Session in Authoring Mode</h3>
<p>We begin with by retrieving the <code>Identificator</code> of input product Reference 
and Logical Reference. Further we load the Product Reference and Logical Reference 
in the session in &quot;Authoring&quot; mode. For details of loading Reference in 
session refer [<a href="#References">3</a>] use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Two Objects in Context (One for the Source, and 
One for the Target)</h3>
<p>The input Product Reference and Logical Reference are all loaded in the current 
session. Now we will create object in context for loaded Product Reference as well 
Logical Reference.</p>
<pre class="code">...
    CATListPtrCATIPLMComponent ComponentList;

    CATOmbObjectInContext * piOmbObjCtxOnProdRoot = NULL;
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnProdRoot, piOmbObjCtxOnProdRoot);
    ...	
    CATOmbObjectInContext * piOmbObjCtxOnLogicalRoot = NULL;
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnLogicalRoot, piOmbObjCtxOnLogicalRoot);
...</pre>
<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em> call 
in this case takes a empty list namely. <code>ComponentList</code> and opened PLM 
Component pointer, as an input. in this case we call this method twice one for Product 
Reference (<code>piPLMCompOnProdRoot</code>) and for Logical Reference (<code>piPLMCompOnLogicalRoot</code>). 
this API returns the Object in context (<code>piOmbObjCtxOnProdRoot</code>, and
<code>piOmbObjCtxOnLogicalRoot</code>).</p>
<p>Please note that in this case we are giving empty list as first argument and 
second argument as NULL, since we are creating object in context for Root object.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Implement Link Manager</h3>
<p>Now here we proceed to retrieve Implement link manager. This Implement manager 
will provide services to manage the Implement link.</p>
<pre class="code">...
    <strong>CATIPhysicalImplementLinkManager</strong>* piImplementLinkManager = NULL;
    hr = CATPhysicalImplementLinkProvider::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
<p>A call to <code>GetImplementLinkManager</code> of <em>CATPhysicalImplementLinkProvider</em> 
returns the Implement manager <code>piImplementLinkManager</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving Count of Source from Target and Target from Source</h3>
<p>Now we retrieve count of Targets associated with the Source (Product Reference). 
We use the object in context (<code>piOmbObjCtxOnProdRoot)</code>. Then we retrieve 
the count of sources associated with the Target (Logical Reference). We use the 
object in context (<code>piOmbObjCtxOnLogicalRoot</code>).</p>
<pre class="code">...
   int countOfTargetsBeforeNewLinkCreation = 0; 
   hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,countOfTargetsBeforeNewLinkCreation);
   ...
   int countOfSourceBeforeNewLinkCreation = 0;
   hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfSourceBeforeNewLinkCreation);
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> returns a count of Target <code>
countOfTargetsBeforeNewLinkCreation</code>. The details of this local method is 
explained in another use case [<a href="#References">4</a>].</p>
<p>A call to <code>RetrieveCountOfSource</code> returns a count of Source
<code>countOfSourceBeforeNewLinkCreation</code> [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating Reference to Reference Implement Link</h3>
<p>Now we will create the Reference to Reference Implement link between the loaded 
Product Reference as Source and Logical reference as Target.</p>
<pre class="code">...
   CATListValCATICkeParm_var EmptyList ; 
   <strong>CATIPhysicalImplementLink</strong> * pImplementLinkConnection = NULL ; 
   hr =  piImplementLinkManager-&gt;<strong>CreateImplementRelation</strong>(NULL_var, NULL, EmptyList,
                                                        piOmbObjCtxOnProdRoot,piOmbObjCtxOnLogicalRoot,pImplementLinkConnection);
...</pre>
<p>A call to <code>CreateImplementRelation</code> of <em>CATIPhysicalImplementLinkManager</em> 
on <code>piImplementLinkManager</code> creates a Implement link between two input 
Objects (<code>piOmbObjCtxOnProdRoot</code>, <code>piOmbObjCtxOnLogicalRoot</code>).</p>
<p>First argument is NULL_var due to that default type will be taken into consideration. 
Next argument environment is NULL in this case current set environment will be taken 
into consideration. Third argument Attribute list is empty since BL will valuate 
attribute values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking Count of Source from Target and Target from Source</h3>
<p>Now we will again retrieve count of Source as well Target as we have retrieved 
in earlier steps, but here we expect the count is increment one (+1). Since we have 
created Implement link between Target and Source, so count must be increment one 
(+1) to previous count.</p>
<pre class="code">...
    int countOfTargetsAfterNewLinkCreation =0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnProdRoot,countOfTargetsAfterNewLinkCreation);
    if ((FAILED(hr))||(countOfTargetsBeforeNewLinkCreation == countOfTargetsAfterNewLinkCreation)) return 1;

    int countOfSourceAfterNewLinkCreation =0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfSourceAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfSourceBeforeNewLinkCreation+1) != countOfSourceAfterNewLinkCreation )) return 1;
...</pre>
<p>A call to <code>RetrieveCountOfTargets</code> returns a count of Target <code>
countOfTargetsAfterNewLinkCreation</code> [<a href="#References">4</a>].</p>
<p>A call to <code>RetrieveCountOfSource</code> returns a count of Source <code>
countOfSourceAfterNewLinkCreation</code> [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAPilCreateRefToRefImplLink</code> use case ends by simply saving 
and closing the PLM session. Since all use cases necessarily conclude by saving 
and closing the PLM session, we have a dedicated article on this topic namely &quot;Connecting 
to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case illustrates the creation of an Implement Relation Link between Product 
reference and Logical Reference.</p>
<p>In the process of creation of an Implement link we learn creation of OIC of Product 
Reference and Logical reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPilUcRetrieveImplLink.htm">Retrieving Source and Targets 
		of Implement Relation</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
