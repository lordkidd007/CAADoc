<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Designer Central Schema for Client Integrations</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>

<style type="text/css">
.style2 {
	margin-left: 0px;
}
</style>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>X-CAD Schema for Client 
		Integrations</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Technical Article&nbsp;</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
      <p>3DEXPERIENCE Platform&nbsp; X-CAD, or more specifically the Integration Exchange 
		Framework (IEF) adds and modifies existing schema installed with 
		3DEXPERIENCE Platform&nbsp; 
		products. In addition, on top of this schema, specific integrations then 
		install their schemas. 
		<p>An overview of the integrations of client applications with 
		3DEXPERIENCE Platform&nbsp; using 
		the X-CAD is detailed in the technical article [<a href="#References">1</a>].<ul>
		<li><a href="#Intro">Introduction</a></li>
		<li><a href="#BusType">The BUS Type Mapping</a></li>
		<li><a href="#Data Model">Data Model</a>
		<ul>
				<li><a href="#Type Hierarchy">Type Hierarchy</a></li>
			<li><a href="#Version Data Model">Versioned Data 
			Model</a></li>
			<li><a href="#Template Data Model">Template Data 
			Model</a></li>
			<li><a href="#Specific Relationship">Integration specific relationship</a></li>
		</ul>
		</li>
		<li><a href="#Attrbutes of Dec Types">Key Attributes of X-CAD Type</a></li>
		<li><a href="#Class Mapping">Type Class Mapping</a></li>
		<li><a href="#3D position">How 3D Position is stored in X-CAD 
		</a></li>
		<li><a href="#In short">In Short</a></li>
		<li><a href="#References">References</a></li>
		</ul>
	</td>
  </tr>
  
  </table>

<!---------------------------------comment------------------------------------->

<h3><a name="Intro"></a>Introduction</h3>
<p>For X-CAD integration schema generation as per user cad application or xApp 
on server side is important step. Here we are discussing various data X-CAD 
models. With the help of these data models user could build its own Schema - Client Side Extension 
(CSE). But this schema need mapping with 3DEXPERIENCE Platform&nbsp; side objects to checkin any 
CAD/xApp objects in the 3DEXPERIENCE Platform server. In next section we will talk about 
mapping that will link CSE types with 3DEXPERIENCE Platform&nbsp; Types.&nbsp;&nbsp;&nbsp;   </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="BusType"></a>The BUS Type Mapping</h3>
<p>The CSE which deals with a CAD session, classifies the CAD Data as listed 
below:</p>
<ul>
	<li>Component</li>
	<li>Assembly </li>
	<li>Drawing</li>
	<li>ComponentInstance</li>
	<li>AssemblyInstance</li>
</ul>
<p>But CSE does not directly talk to the 3DEXPERIENCE Platform&nbsp; database. CSE communicates with 
X-CAD, which in turn talks to the 3DEXPERIENCE Platform&nbsp; database. The GCO has an attribute
<strong>MCADInteg-BusTypeMapping</strong> that maps the CAD types (recognized by 
CSE) to the corresponding 3DEXPERIENCE Platform&nbsp; type (recognized by X-CAD and detailed in the 
section that follows). It is this attribute that X-CAD refers to, during the checkin operation to create objects in 
3DEXPERIENCE Platform , of types mapped to those at the 
CAD end, being sent by CSE.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Data Model"></a>X-CAD Data Model</h3>
<p>This section describes the data models specific to X-CAD.</p>
<ul>
	<li><a href="#Type Hierarchy">Type Hierarchy</a></li>
	<li><a href="#Version Data Model">Versioned Data Model</a></li>
	<li><a href="#Template Data Model">Template Data Model</a></li>
	<li><a href="#Attrbutes of Dec Types">Integration-Specific Relationship</a></li>
</ul>

<h4><a name="Type Hierarchy"></a>Type Hierarchy</h4>
<p>The [<a href="#Fig.1">Fig.1</a>] shows the basic type hierarchy of objects in 
X-CAD. </p>
<table>
	<caption><a name="Fig.1"></a>Fig.1 Hierarchy of Objects in X-CAD</caption>
	<tr> <td>	<img alt="" src="images/CAADECTaDEC_Schema_image1.jpg"> </td></tr>
	<tr> <td>	<img alt="" src="images/CAADECTaDEC_Schema_image00.jpg"></td></tr>
	
</table>
<p>The root base type for all X-CAD types is DOCUMENTS. This enables all X-CAD 
objects to be shown when searched for DOCUMENTS type.</p>
<p>Below DOCUMENTS have the CAD (Computer-Aided Design) Model and CAD 
Drawing types. These types differentiate between 3D models and 2D drawings. All 
of the above types are installed by AEF. They are also part of the EC data 
model, where objects of type CAD Model and CAD Drawing would be created and 
connected to Bill-of-Material Part objects.</p>
<p>The next level of types differentiate the kind of CAD data that is authored 
in the industry viz. Mechanical CAD (which all of us are familiar with) and 
Electronic CAD (which is Computer-Aided Design of PCBs etc). So user have MCAD 
Model for mechanical CAD data and ECAD Model for electronic CAD data.</p>
<p>A type MCAD Drawing represents mechanical CAD drawings, derived from CAD 
Drawing.</p>
<p>MCAD Model, ECAD Model and MCAD Drawing are all installed by IEF.</p>
<p>The types covered so far have been generic types, which also fit into the EC 
data model, which deals with CAD data at a generic level. The next level of 
types are installed by X-CAD, and provide an abstraction to capture 
the information stored within CAD data authoring tools at a finer level of 
detail.</p>

<p>Types derived from MCAD Model. These types represent 3D mechanical CAD data. These are:</p>
<ul>
	<li> MCAD Assembly: This represents a mechanical CAD design 
	that is an aggregation of a number of other designs, typically having a 
	hierarchical tree structure</li>
	
	<li>MCAD Component: This represents a mechanical CAD design 
	that is standalone, i.e. it is not an aggregation of designs. It can have 
	dependencies to other designs, but would typically contain at least some&nbsp;&nbsp;&nbsp;&nbsp; 
	geometrical data that is unique to it</li>
	
</ul> 
    
<p>Each CAD tool installs its own types that derive from these types eg. In case 
of Solidworks integration, SW Component derives from MCAD Component, SW Assembly 
derives from MCAD Assembly etc. This is done so that objects that belong to a 
particular integration can be clearly identified.</p>

<p>The integration-specific instance types derive from their corresponding 
assembly or component types rather than MCAD Assembly Instance etc as a search 
for say all objects of SW Component also needs to show all the component 
instances.&nbsp;</p>

<p>To support the Revision/Versioning function, separate base types are 
installed for versions.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h4><a name="Version Data Model"></a>Version Data Model</h4>
<p>A designer working on a design would typically want to capture the state of 
the design at important points, to enable him to revert to the previous state if 
required, and to allow the design to be shared with other users even while it is 
still in &#8220;Work-In-Progress&#8221; condition.</p>
<p>To enable this, X-CAD has corresponding &#8220;Versioned&#8221; types for each 
of the types MCAD Assembly, MCAD Component. They represent the same kind of data as their corresponding 
non-versioned types, but are used to create objects that are in 
&#8220;Work-In-Progress&#8221; condition. Each type has a property &#8220;Corresponding Type&#8221; that 
identifies its &#8220;Major&#8221; type.</p>
<p>The [<a href="#Fig.2">Fig.2</a>] shows an example data model for versioning, where the revision 
stream has been finalized.</p>

<table>
	<caption><a name="Fig.2"></a>Fig.2 Version Data Model </caption>
	<tr>
		<td><img alt="" src="images/CAADECTaDEC_Schema_image2.jpg"></td>
	</tr>
</table>
<p>In this example, the A Revision is the major object, and the A.0, A.1 and A.2 
are versioned minor objects. All of the version are connected to the major 
object using the relationship. Because A.2 is the current version, it 
is also connected using the Latest Version and Active Version relationship. In 
addition, A.2 was selected as the finalized version and is connected using the 
Finalized relationship.</p>
<p>The major types are governed in the <strong>3D</strong>EXPERIENCE Platform&nbsp; X-CAD installation by the &#8220;<strong>Design 
Policy</strong>&#8221; that defines an <strong>3D</strong>EXPERIENCE Platform lifecycle for these types. When an object 
of any type is created, it is mandatory to specify the name of the policy that 
will define the objects lifecycle.<br>
The GCO has a &#8220;Type Policy Mapping&#8221; attribute that defines a comma-separated 
list of policies that can be specified during object creation (in case of X-CAD, 
as part of the checkin process). The <strong>3D</strong>EXPERIENCE Platform installation has &#8220;Design Policy&#8221; 
mapped as a default. It is possible for the user to choose a policy only during 
first-time checkin for an object of a particular major type.</p>
<p>The Versioned types are governed by the &#8220;<strong>Versioned Design Policy</strong>&#8221;. 
This is a dummy policy that has a single state. The actual lifecycle of all the 
versioned objects is controlled by the lifecycle of the corresponding major type 
objects. This happens with the help of a trigger &#8220;<strong>LockVersionedTypesToMajor</strong>&#8221; 
that is installed on all the versioned types.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Template Data Model"></a>Template Data Model</h4>
<p>The [<a href="#Fig.3">Fig.3</a>] shows the data model for templates.&nbsp;</p>
<table>
	<caption><a name="Fig.3"></a>Fig.3 Data Model For Templates</caption>
	<tr>
		<td><img alt="" src="images/CAADECTaDEC_Schema_image3.jpg"></td>
	</tr>
</table>
<p>Each integration installs its own template types. In the example above, the 
SolidWorks integration installed the SW Assembly Template and SW Component 
Template objects. All integrations use a similar hierarchy; the template 
object's name reflects the integration that installed it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Specific Relationship"></a>Integration specific relationship</h4>
<p>Each integration can define relationship between designs and other objects. 
The IEF supports the following relationship classes.</p>
<ul>
	<li><strong>AssemblyLike
	</strong><table>
		<tr>
			<td><img alt="" src="images/CAADECTaDEC_Schema_image4.jpg"></td>
		</tr>
	</table>
	<strong>CAD SubComponent</strong>: This relationship captures the hierarchical structure between CAD designs. Its cardinality is many-to-many which means it is possible to have one parent connected to many children, and it is also possible (though less likely) to have one child referred to by many different parents. The CAD SubComponent relationship can be between assembly 
	and component or assembly and assembly. It cannot be between component and component 
	or with drawings.	</li>
	<li><strong>ExternalReferenceLike</strong>: Link between designs, but do not participate in the structure. 
	This relationship captures the dependencies between designs, where these 
	dependencies are not of a hierarchical nature. For e.g. in ProE, it is 
	possible to create a design by copying geometry from another design, in such 
	a way that when the referenced design&#8217;s geometry is modified, the copied 
	geometry is also updated. Thus, the referenced design is also required to be 
	present to completely load the design that refers to it in the CAD tool. 
	External references can be component to component or component to assembly</li>
	<li><strong>DerivedOutputLike</strong>:: Derived Output (for example, JT or 
	jpeg) versions of a design are stored in a separate object and connected to 
	the CAD object using the DerivedOutputLike relationship. Derived output 
	objects do not get carried forward to subsequent versions</li>
	<li><strong>Associated Drawing</strong>: This relationship captures the 
	information that a particular design is the 2D drawing representation of the 
	corresponding 3D design. It can between a component and its drawing or an 
	assembly and its drawing. Its cardinality is defined as many-to-many, but 
	typically, it is one-to-one (i.e. one 3D model will have one unique 2D 
	drawing). Some CAD tools such as SW can have multiple &#8220;sheets&#8221; within one 
	drawing file, so in this case it is possible to have one-to-many 
	relationship</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Attrbutes of Dec Types"></a>Key Attributes of X-CAD Types</h3>
<p><strong>CAD Type</strong>: This attribute stores the CAD type that is sent by 
the CSE during check in. It is referred to by X-CAD to determine the nature of the 
design data being processed during various X-CAD operations.</p>
<p><strong>Source</strong>: This stores the integration name of the CSE that 
authored the data. It is used for loading the GCO assigned to the user for the 
particular integration.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Class Mapping"></a>Type Class Mapping</h3>
<p>A mapping &#8220;<strong>Type Class mapping</strong>&#8221; is present on the GCO. This 
mapping defines the nature of the CAD types:</p>
<table>
	<tr>
		<td><strong>Class</strong></td>
		<td><strong>Description</strong></td>
	</tr>
	<tr>
		<td>TYPE_CADMODEL_LIKE</td>
		<td>&nbsp;&nbsp; A generic mapping capturing all 2D and 3D design data</td>
	</tr>
	<tr>
		<td>TYPE_COMPONENT_LIKE</td>
		<td>&nbsp;&nbsp; To capture 3D designs which are standalone</td>
	</tr>
	<tr>
		<td>TYPE_ASSEMBLY_LIKE</td>
		<td>&nbsp;&nbsp; To capture 3D designs which are aggregations of multiple designs 
		with hierarchy</td>
	</tr>
	<tr>
		<td>TYPE_DERIVEDOUTPUT_LIKE</td>
		<td>&nbsp;&nbsp; This represent data that is not the main design data, but is used 
		to capture additional information about the design data</td>
	</tr>
</table>
<p>The above mapping is populated by the CSE server during installation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h4>Relationship Type Mapping</h4>
<p>The relationships recognized by CAD are listed below:</p>
<ul>
	<li><strong>CADSubcomponent</strong></li>
	<li><strong>CADDrawing</strong></li>
	<li><strong>CADInstanceOf</strong></li>
</ul>
<p>The CSE relationships are mapped to corresponding types on the 3DEXPERIENCE 
Platform&nbsp; side. A 
sample mapping for CADSubComponent is shown below</p>
<p><strong>CADSubcomponent|to, CAD SubComponent</strong></p>
<p>The left side is the name of the relationship sent by the CSE during checkin. 
The first item on the right side identifies the direction of the 3DEXPERIENCE 
Platform&nbsp; 
relationship on which the &#8220;Dependee&#8221; design of the relationship is 
present. The next item identifies the 3DEXPERIENCE Platform&nbsp; relationship. This mapping is used during checkin 
by X-CAD to create the appropriate relationships as sent by the CSE.This mapping categorizes various CA</p>

<script type="text/javascript">insertLinkToTop();</script>
<h4>Relationship Type Class Mapping</h4>
<p>The relationships in the classes listed below:</p>
<ul>
		<li><a><strong>AssemblyLike </strong> </a></li>
		<li><a><strong>ExternalReferenceLike</strong></a></li>
		<li><a><strong>DerivedOutputLike</strong></a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3> <a name="3D position"></a>How 3D Position is stored in X-CAD </h3>
 <p> 3D Position is stored on "CAD SubComponent" relationship, and it is 
	represented in matrix format as shown in <a href="#Fig.4">Fig. 4</a></p>
<ul> 
 <li> "Spatial Location" String attribute</li>
 <li> Separator between coefficients: "," </li>
 <li> Decimal separator: "." </li>
 <li> XYZ coordinates in millimeters </li>
</ul>
<table>
<caption><a name="Fig.4"></a>Fig.4 3D Position in X-CAD</caption>
	 
<tr> 
<td><img alt="" src="images/CAADECTaDEC_Schema_image6.jpg"> </td>
</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="In short"></a>In Short</h2><p>The article has detailed the schema 
installed by IEF in an 3DEXPERIENCE Platform&nbsp; stack. Integrations inherit from this schema to 
define their own integration specific schema created during the CSE Server 
installation on the 3DEXPERIENCE Platform&nbsp; stack.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="References"></a>References    </h2>
 <table>
     <tr>
    
       <td >[1]</td>
       <td ><a href="CAADECTaDesignerCentralIntegrationOverview.htm">Integrating Client Applications with 
		3DEXPERIENCE Platform  with X-CAD Enablers - An Overview</a></td>
     </tr>  
   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [Nov 2001]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


