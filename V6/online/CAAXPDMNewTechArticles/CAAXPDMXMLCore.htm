<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Core and Domain</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Core and Domain</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Technical Article</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
      <p> This article gives the details about the core of XPDMXML and Domain 
		Objects in XPDMXML.</p>
		<ul>
				<li><a href="#Core">Core</a></li>
				<li><a href="#Object"> ObjectBase</a></li>
				<li> <a href="#Structure"> StructureBase</a></li>
				<li><a href="#Domain">Domain Objects</a></li>
				<li><a href="#Attr">Attributes Mapping</a></li>			
				<li><a href="#Inshort"> In Short</a></li>
				<li><a href="#References">References</a></li>
		</ul>

	</td>
  </tr>
  
  </table>

<!---------------------------------comment------------------------------------->
<h2><a name="Core"> </a>Core</h2>
<p> XPDMXML is formed of multiple XML elements of complex or simple types. 
Following are four important elements of XPDMXML :</p>
<p> <code>ObjectBase</code> is abstract base class of complex type. It contains 
different elements related to lifecycle management or customization.This 
abstract class is used as base class for all other classes to represent domain 
types.</p>
<p> <code>File</code> is of type <code> FileType</code>. <code> FileType</code> is an element of complex type. 
This type describes the physical file that is associated to this XPDMXML instance file. 
This element contains associated file information about location, name and 
format.</p>
<p> <code>Property</code> is of type <code> DynamicAttributeType</code>. <code> DynamicAttributeType</code> is of complex type. 
This describes dynamic attributes in name/type/value form. This is used in case 
of customized attributes. This element can contain min or max or magnitude 
values. </p>
<p> <code>StructureBase </code>is abstract base class of complex type. This class defines a collection of 
objects that represents a structure.  This abstract class is used as base class 
for all classes representing structure in V6 domain.&nbsp;&nbsp;  </p>
<table>
		<caption> Fig.1 XPDMXML Core</caption>
			<tr>
			<td><a name="Fig.1"> </a> 
			<img src="images/XPDMXMLCore.jpg"></td>
						
	</table>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Object"></a>ObjectBase</h2>

<p><code>ObjectBase</code> is used as an core of XPDMXML. It is introduced to provide a pre-defined binding of attributes to all XPDMXML Objects that support 
lifecycle management or customization.
      </p>
<p>This pre-defined attribute groups are respectively identification,versioning, lifecycle,ownership, 
	security.       For details about attributes mapping refer to Attribute
<a href="#Attr">Mapping</a>.</p>
<p>Property brings the capability to complement static xsd XPDMXML Object attributes with additional dynamic attributes defined by a name/type/value triplet.
 </p>
<p>This has been shown in <a href="#Fig.2">Fig.2</a>.</p>
	<table>
		<caption> Fig.2 XPDMXML Core : ObjectBase</caption>
			<tr>
			<td><a name="Fig.2"> </a> 
			<img src="images/XPDMXMLObjectBase.jpg"></td>
						
	</table>
	<p>  In XPDMXML,All base classes are derived from <code>ObjectBase</code>. This derived classes are shown in <a href="#Fig.3">Fig.3</a>.</p>
	<table>
		<caption> Fig.3 ObjectBase Derived classes</caption>
			<tr>
			<td><a name="Fig.3"> </a> 
			<img src="images/XPDMXMLCoreObjectBase.jpg"></td>
						
	</table>
<p>Here this inheritance will be used for showing different relationships. These 
are shown in following <a href="#Fig.4">Fig.4</a>.</p>
<p> XPDMXML Core has following abstract bast classes :</p>
<ul> 
<li> <strong>InstanceBase</strong> :  This abstract Instance class is used to model (via specialization) the manifestation of the reuse of child 
reference in the context of another and parent reference.</li>
<li> <strong>ReferenceBase</strong> : This abstract Reference class is used to model (via specialization) reusable objects,that are standalone in terms of LifeCycle, i.e. clonable, versionable, carrying a maturity.</li>
<li> <strong>PortBase</strong> : This abstract Port class is used to model (via specialization) a modeling object which aim is to be a connector or publication.</li>
<li> <strong>ConnectionBase</strong> : This abstract Connection class is used to model (via specialization) a modeling object which aim is to connect objects together.</li>
<li> <strong>RepresentationBase</strong> :  This abstract Representation class serves a purpose consistent with Reference, but specifically for Objects carrying one or more streams/documents.</li>
<li> <strong>RepresentationInstanceBase</strong> :  This abstract RepresentationInstance class serves a purpose consistent with Instance, but specifically for the reuse of Representation.</li>
<li> <strong>RepresentationAggregatedBase</strong> :  This abstract Representation class serves a purpose consistent with Reference, but specifically for Objects carrying one or more streams/documents.
    </li>

</ul>

<p>List of base classes derived from <code>ObjectBase</code> are used for providing mechanism of&nbsp; 
:</p>
<ul> 
<li> Parts</li>
<li> Parent - Child Relation : e.g. Relationship between Instance and Reference, RepInstance and Reference</li>
<li> Documents with associated File : e.g. Relationship between ReppresentationBase and File</li>
<li> Part - Document Association : e.g. Relationship between RepAggregatedBase and File</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<table>
		<caption> Fig.4 Role of Derived Classes </caption>
			<tr>
			<td><a name="Fig.4"> </a> 
			<img src="images/XPDMXMLCoreObject.jpg"></td>
						
	</table>
<p> Here, Significance of names used is listed below :</p>
<ul> 
<li> IBase : InstanceBase</li>
<li> RBase : ReferenceBase</li>
<li> RepIBase : RepresentationInstanceBase</li>
<li> RepBase : RepresentationBase</li>
<li> RepABase : RepresentationAggregatedBase</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>

<h2> <a name="Structure"> </a> StructureBase</h2>
<p> <code>StructureBase </code> is an abstract base class. This is used for 
representing structure in XPDMXML. All domain objects are combined structure in 
the form of elements.In addition to elements this 
has additional attributes which are listed below : </P>
<ul> 
<li> <strong>rootRefs</strong> : This is used to identify one or more objects which are top nodes. </li>
<li> <strong>idGroup</strong> : This is used to identify the XML element 
uniquely in the context of this XPDMXML document</li>
<li> <strong>UpdateStructureMode</strong> : This is used to inform about action 
need to be taken for updating existing data. This is useful if user is 
exchanging same data repetatively.</li>
</ul>
<p> In every V6 domain, all domain objects are combined in single 
class representing structure. This structure class is derived from <code>StructureBase  </code>
abstract class. e.g. Product Domain -&gt; ProductStructure, EBOM Domain -&gt; 
EBOMStructure, Requirement Domain -&gt; RequirementStructure etc. <br> For example, writting XPDMXML by 
instanciation with Product domain refer to
<a href="#References">XPDMXML for Product Domain [2]</a>.&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h2> <a name="Domain"> </a> Domain Objects</h2>
<p> Every domain define it's own types by extending abstract base classes. 
These domain types has properties of base class. It may contain some 
additional properties also.These domain types are used in generating XPDMXML. To 
know about structure of XPDMXML refer to <a href="#References">XPDMXML[1]</a>..</p>
<p> &nbsp;We are instantiating any V6 domain types to generate domain objects. 
XPDMXML is consit of these domain objects.</p>
<table>
		<caption> Fig.5 Domain Types /caption>
			<tr>
			<td><a name="Fig.5"> </a> 
			<img src="images/XPDMXMLDomainObjects.jpg"></td>
						
	</table>
<p>Refer to <a href="#References">XPDMXML for Product 
Domain[2]</a> to know about this instanciation.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Attr"></a>Attributes Mapping</h2>
<p>These attribute can be classified in different groups:</p>
<ul><li>Entity Identification</li>
<li>Object Modification</li>
<li>Version Identification</li>
<li>Life Cycle, Security, People and Organization</li>
<li>Maturity</li></ul>
<p>Except for Version Identification and Maturity groups of attributes, all these attribute groups are common to all entities.</p>
<h4><strong>Entity Identification:</strong></h4>
  <table id="table13" class="style3">
  	<thead>
	<tr>
		<th><p><strong> ENOVIA Data Model Entity Name </strong></p></th>
		<th><p><strong> XPDMXML Entity Name </strong></p></th>
		<th><p><strong> Comment </strong></p></th>
	</tr>
		</thead>
	<tr>
		<td> < Internal > </td>
		<td>UniqueID | XID</td>
		<td> For ENOVIA originated objects: XID = identifier unique to this object, and stable for every transfer</td>
	</tr>
	<tr>
		<td> < Internal ></td>
		<td>UniqueID | External </td>
		<td> For all objects: stable identifier for object exchange </td>
	</tr>
<tr>
		<td >PLM_ExternalID or Name</td>
		<td > ID</td>
		<td >Identification name<p>Note: In One-Click Environment, the ID from X-PDM should not conflict with automatically generated ID.</p></td>
		<td > </td>
	</tr>
<tr>
		<td>V_Name or Title</td>
		<td>Name</td>
		<td>String used to give a more identifiable name to the entity.</td>
	</tr>
<tr>
		<td>V_description or Description</td>
		<td>Description</td>
		<td>Description. Free field.</td>
	</tr>
	<tr>
		<td>E_shortDesc</td>
		<td>PropertyName="Short Description" </td>
		<td>Short Description. Free field. (Only applicable for One-Click 
		Environment)</td>
	</tr>
	</table>
		

		<h4><strong>Object Modification:</strong></h4>
<table id="table13" class="style3">
	<thead>
		<tr>
			<th>
			<p><strong>ENOVIA Data Model Attribute Name</strong></p></th>
			<th><p><strong>XPDMXML Entity Name</strong></p></th>
			<th><p><strong>Comment</strong></p></th>
		</tr>
	</thead>
	<tr>
		<td><p>originated</p></td>
		<td>TimeCreated</td>
		<td>Creation Time and Date</td>
	</tr>
	<tr>
		<td><p>modified</p></td>
		<td>TimeModified</td>
		<td>Last Update Time and Date</td>
	</tr>
</table>


<h4><strong>Version Identification:</strong> </h4>
<table id="table13" class="style3">
	<thead>
		<tr>
			<th><p><strong>ENOVIA Data Model Attribute Name</strong></p></th>
			<th><p><strong>XPDMXML Entity Name</strong></p></th>
			<th><p><strong>Comment</strong></p></th>
		</tr>
	</thead>
	<tr>
		<td><p>majorrevision</p></td>
		<td><p>RevisionName</p></td>
		<td><p>Label displayed to identify the version</p></td>
	</tr>
	<tr>
		<td >
		<p>&lt; internal &gt;</p>
		</td>
		<td >
		<p>RevisionIndex</p>
		</td>
		<td>
		<p>Integer used to manage the sequence of the version inside the family. 
		Belongs to [1... 00]</p>
		</td>
	</tr>

	<tr>
		<td>&lt; Internal &gt;</td>
		<td >
		<p>RevisionFamily</p>
		</td>
		<td> Identification common to all revisions of the same family.</td>  
	</tr>
</table>

<h4><strong>Life Cycle, Security, People and Organization :</strong></h4>
<table>
	<thead>
		<tr>
			<th><p><strong>ENOVIA Data Model Attribute Name</strong></p></th>
			<th><p><strong>XPDMXML Entity Name</strong></p></th>
			<th><p><strong>Comment</strong></p></th>
		</tr>
	</thead>
	<tr>
		<td>&lt; Internal &gt;</td>
		<td>Lifecycle</td>
		<td>Name of lifecycle graph</td>
	</tr>
	<tr>
		<td>&lt; Internal &gt;</td>
        <td>SecurityLevel</td>
		<td>Controls confidentiality; 0 means not confidential</td>
	</tr>
	<tr><td><p>owner</p></td>
		<td>Owner</td><td>User who have created the entity</td>
	</tr>
	<tr>
		<td><p>organization</p></td>
		<td>Organization</td>
		<td>Name of organization in which object is created</td>
	</tr>
	<tr>
		<td><p>project</p></td>
		<td>Project</td>
		<td>Name of Project in which object is created</td>
	</tr>
</table>
<h4><strong>Maturity (for VPMReference and VPMRepReference only) :</strong></h4>
<table>
	<thead>
		<tr>
			<th><p><strong>ENOVIA Data Model Attribute Name</strong></p></th>
			<th><p><strong>XPDMXML Attribute</strong></p></th>
			<th><p><strong>Comment</strong></p></th>
		</tr>
	</thead>
	<tr>
		<td>current</td>
		<td>Maturity</td>
		<td>Name of maturity status in graph</td>
	</tr>
</table>

<h2><a name="Inshort"></a>In Short</h2>
<p> This article gives complete information about core of XPDMXML and domain 
objects. This article gives detailed information about abstract class <code> ObjectBase </code>and <code> StructureBase </code>, which has been used as a base 
class for domain specific types.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="References"></a>References    </h2>
 <table>
     <tr>
    
       <td >[1]</td>
       <td ><a href="CAAXPDMXML.htm">XPDMXML</a></td>
     </tr>  
     <tr>
    
       <td >[1]</td>
       <td ><a href="CAAXPDMXMLProduct.htm">XPDMXML for Product Domain</a></td>
     </tr>  

   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [Aug 2014]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


