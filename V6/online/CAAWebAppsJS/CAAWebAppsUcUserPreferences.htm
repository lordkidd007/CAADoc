<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Using User Preferences</title>
    
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using User Preferences</h1>
		
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article is about the User Preferences, a feature of the <b>3D</b>EXPERIENCE platform widget, introduced in the Widget Developement Principles article [<a href="#References">1</a>]</b> </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWebAppsUserPreference Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAWebAppsUserPreference Do</a></li>
				<li><a href="#How">How to Launch CAAWebAppsUserPreference</a></li>
				<li><a href="#Where">Where to Find the CAAWebAppsUserPreference Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this article you will learn how to declare user preferences in a widget web page, and how to handle them through APIs. 
The events, triggered when the end user interacts with the Preferences dialog box, are also covered.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWebAppsUserPreference Use Case</h2>
<p>CAAWebAppsUserPreference is a use case of the CAAWebAppsJS.edu framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWebAppsUserPreference Do</h3>
<p>CAAWebAppsUserPreference is a widget application using the different kinds of user preferences for demonstration purposes. The exhaustive list is exposed in the referenced article [<a href="#References">2</a>]</p>
<p>The picture just below represents the Preferences dialog box, the panel where the end user is invited to change/consult the values for these preferences.</p>
    <table>
	<caption><a name="Fig.1">Fig.1</a> The Preferences Dialog Box</caption>
	<tr>
		<td>
		<img alt="Dialog Box" src="images/CAAUserPreferencesUC_edit.png"/></td>
	</tr>      
</table>
<p>Top down, you find a preference as a Text (User Name editor), a list (Possible Categories combo), a boolean (Open File check button), 
and finally as a range (Max items to display editor). </p>
<p>When the end user closes the dialog box (pushing Cancel or Save button), the body of the widget appears as below: </p>
<table>
	<caption><a name="Fig.2">Fig.2</a> The Widget Body after the Dialog Box Closure</caption>
	<tr>
		<td>
		<img alt="Body" src="images/CAAUserPreferencesUC_body.png"/></td>
	</tr>      
</table>
<p>Notice, still for demonstration purposes, the use case only enables you to change the 'User Name' value, and the 'Open File' check option. For the two others, the list (Category) and the range 
(Max Item to display), the displayed values  can only be respectively 2nd and 6, since the use case forces those  values by calling APIs. It means that whatever the values entered for these 
two preferences, the stored values are always 2nd and 6.</p>  
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWebAppsUserPreference</h3>
<p>To launch CAAWebAppsUserPreference, you will need to set up the build time environment, then compile CAAWebAppsUserPreference along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">3</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWebAppsUserPreference Code</h3>
<p>The CAAWebAppsUserPreference use case is made of several files located in the CAAWebAppsJS.edu framework:</p>
    <ul>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsUserPreference.mweb\src\CAAWebAppsUserPreference.html</code>, the widget html web page</li>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsUserPreference.mweb\src\CAAWebAppsUPMngt.js</code>, the external js file </li>
    </ul>
  <p>where InstallRootFolder [<a href="#References">3</a>] is the folder where the API CD-ROM is installed.</p> 
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are 3 mains steps:</p>
 <ul>
 <li><a href="#declare">Declaring the User Preferences (UP)</a></li>
 <li><a href="#Events">Managing Events</a></li>
 <li><a href="#APIs">Using API to handle UP</a></li>
 </ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="declare"></a>Declaring the User Preferences (UP)</h3>
<p>The user preferences are declared in the <code>head</code> zone of the hmtl page using the <code>widget:preferences</code> XML tag: </p>
<pre class="code">
&lt;widget:preferences&gt;
...
&lt;/widget:preferences&gt;
</pre>
<p>Let's see now,  one by one, the user preference definitions.</p>
<h4>The text type:</h4>
<pre class="code">
&lt;widget:preference type="<b>text</b>" <b>name</b>="username"  <b>label</b>="User Name"  <b>defaultValue</b>="" &gt;&lt;/widget:preference&gt;
</pre>
<p>The label text is the one you can observe on <a href="#Fig.1">Fig.1</a>
<h4>The list type:</h4>
<pre class="code">
&lt;widget:preference type="<b>list</b>" <b>name</b>="category"  <b>label</b>="Possible Categories"  <b>defaultValue</b>="2nd"  &gt;
    &lt;widget:option <b>value</b>="all" <b>label</b>="all"&gt;             &lt;/widget:option&gt;
    &lt;widget:option value="1st" label="First category"&gt;  &lt;/widget:option&gt;
    &lt;widget:option value="2nd" label="Second category"&gt; &lt;/widget:option&gt;
    &lt;widget:option value="3rd" label="Third category"&gt;  &lt;/widget:option&gt;	
&lt;/widget:preference&gt;
</pre>
<p>The label texts are those you can  observe on <a href="#Fig.1">Fig.1</a>. You can see the label above the combo (Possible Categories), and the current value (Second category). </p>
<p>Each element of the list is defined with the <code>widget:option</code> XML tag. The definition consists of an internal value (value attribute), and a displayed one (the label). </p>
<p>The default value (2nd) is an "internal" value, one among the option values. Pay attention, there is no check from the widget platform 
about this default value. </p>  
<h4>The boolean type:</h4>
<pre class="code">
&lt;widget:preference type="<b>boolean</b>" <b>name</b>="openfile"   <b>label</b>="Open File"  <b>defaultValue</b>="true"  &gt;&lt;/widget:preference&gt;
</pre>
<p>The default value is either true or false.</p>
<h4>The range type:</h4>
<pre class="code">
&lt;widget:preference type="<b>range</b>"   <b>name</b>="nb_max_item" <b>label</b>="Max items to display"  <b>step</b>="1" <b>min</b>="1" <b>max</b>="10" <b>defaultValue</b>="8"  &gt;
 &lt;/widget:preference&gt;
</pre>
<p>Once again, be careful with the default value, it must be a valid value: one among the <code>min</code> and <code>max</code> values, with an increment  of <code>step</code> between each values. 
If the step was  2 instead 1, the default values could be 1, 3, 5,...,9 but not 10.</p>
 <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Events"></a>Managing Events</h3>
<p>The web app has a different body's contents when loaded, when refreshed, and when the Preferences dialog box is closed. So we have add three listeners, respectively, <code>onLoad</code>, 
<code>onRefresh</code>, and <code>endEdit</code> between the script tag.  </p>
 <pre class="code">
 &lt;script&gt;
...
 widget.<b>addEvent</b>('onLoad',    <b>myWidget.onLoad</b>);
 widget.addEvent('onRefresh', myWidget.onRefresh);
 widget.addEvent('endEdit',   myWidget.endEdit);
 ...
 &lt;/script&gt;
 </pre>
 <p>Where <code>myWidget.xxxx</code> is the callback method invoked when the respective event is triggered. Notice that when the  Preferences dialog box  is closed, the <i>myWidget.onRefresh</i> and  <i>myWidget.endEdit</i> will be both  executed. </p>
 
 <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
 <h3><a name="APIs"></a>Using API to handle UP</h3>
 <p>The API to change a user preference is <i>setValue</i>, and <i>getValue</i> to retrieve it, both applied on the <code>widget</code> object. let's see
 the contents of the <code>myWidget.endEdit</code> callback function.</p>
 <pre class="code">
endEdit: function() { 
   widget.<b>setValue</b>('nb_max_item','6');
   var line = <b>CAAWebAppsUPMngt.displayUP</b>(widget.getValue('username'),
                                widget.getValue('category'),
                                widget.getValue('openfile'),
                                widget.<b>getValue</b>('nb_max_item'));
   widget.body.innerHTML= 'After User Preference edition, and setValue calls: ' + '&lt;br&gt;&lt;br&gt;'  + line  ;	
}
</pre>	
<p>The user preference value is modified and retrieved using the name's attribute of the preference ( <code>nb_max_item</code> for example) </p>
 <p>The code shows other  interesting things to emphase:</p>
<ul>
<li>There is no argument for the <code>endEdit</code> event</li>
<li>We have created an AMD module [<a href="#References">4</a>]  to define a function (<i>displayUP</i>) to return the string concatenating 
the user preference values as you can see on <a href="#Fig.2">Fig.2</a>. 
The same function being used by the onLoad  callback also.</li>
<li>The <i>displayUP</i> function takes the user preference values as arguments, not the widget itself. The widget object MUST be handled in the web html file only.</li>
</ul>
<p>Here,the <code>nb_max_item</code> user preference can be modified by the end-user only for educational purposes. You can observe that once the Preference dialog box is closed, whatever
the choice of the end-user, the displayed value for the range preference is always 6, and "2nd" for the list. The second "hard-coded" value is done inside the onRefresh callback </p>
<pre class="code">
onRefresh: function() { 
   widget.<b>setValue('category','2nd');</b>
   var line = CAAWebAppsUPMngt.displayUP(widget.getValue('username'),
                                widget.getValue('category'),
                                widget.getValue('openfile'),
                                widget.<b>getValue</b>('nb_max_item'));
   widget.body.innerHTML= 'On the Widget refresh' + '&lt;br&gt;&lt;br&gt;'  +  line ;	
}
</pre>	
<p>When the  Preference dialog box is closed, the <code>onRefresh</code> method is executed but the  "On the Widget refresh" text is not visible, since the <code>endEdit</code> 
callback (overwriting the body contents) is executed after the <code>onRefresh</code>.</p>

 <script type="text/javascript">insertLinkToTop();</script>
 <h3><a name="undefined"></a>Undefined value</h3>
 <p>Let's finish by the piece of code showing how to recognize the value is not valuated. </p>
 <pre class="code">
if ( <b>typeof</b> widget.getValue('username') === 'undefined' ) {
</pre>
<p>If you set a defaut value in the XML tag associated with the preference, its value will be never undefined. Once a preference is valuated ( by code or by UI), it 
cannot be  'undefined' anymore. </p>
  <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how  to declare the different kinds of User Preferences.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
    <tr>
		<td>[1]</td>
		<td><a href="CAAWebAppsTaWidgetWriting.htm">Widget Development Principles</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="../CAAWebAppsJSRef/CAAWebAppsQrPreferences.htm">User Preferences Reference</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>Building and Launching a Web App Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="../CAAWebAppsJSGuides/CAAWebAppsTaAMDConcepts.htm">AMD Concepts</a></td>
	</tr>
  
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [June 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
