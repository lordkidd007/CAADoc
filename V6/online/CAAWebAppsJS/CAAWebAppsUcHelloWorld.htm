<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Getting Started</title>
    
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Getting Started</h1>
		
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to write and test a basic <b>3D</b>EXPERIENCE platform  widget. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWebAppsHelloWorld Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAWebAppsHelloWorld Do</a></li>
				<li><a href="#How">How to Launch CAAWebAppsHelloWorld</a></li>
				<li><a href="#Where">Where to Find the CAAWebAppsHelloWorld Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you the template of a <b>3D</b>EXPERIENCE platform  widget, and the meaning of 
each instruction it must, or should, at least contain.</p>
<p>It is also the place to introduce the mweb module, the new type of module dedicated to build a DS web 
application [<a href="#References">1</a>] as widgets are. Nevertheless, if you do not use mkmk,  it will work too. </p>
<p> Finally you will learn how to launch it for test purposes.</p>

  
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWebAppsHelloWorld Use Case</h2>
<p>CAAWebAppsHelloWorld is a use case of the CAAWebAppsJS.edu framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWebAppsHelloWorld Do</h3>
<p>CAAWebAppsHelloWorld is a basic widget displaying &quot;Hello World!&quot; as you can see on this picture:</p>
    <table>
	<caption><a name="Fig.1">Fig.1</a> The Hello World Web App</caption>
	<tr>
		<td>
		<img alt="Hello Word" src="images/CAAHelloWorldin3DD.png"/></td>
	</tr>
       
</table>
    
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWebAppsHelloWorld</h3>
<p>There are two possibilities:</p>
<ul>
<li>Either using the mkmk build tool
<p>You will need to set up the build time environment, then 
compile CAAWebAppsHelloWorld along with its prerequisites, set up the run time environment, 
and then execute the use case as described in the  <a href="#Step4">Testing the Web App</a> step 
of the <a href="#Step">Step by Step </a>section.</p>
</li>
<li>or without mkmk
<p>Put your widget code in the runtime view as would have been done using mkmk - see <a href="#Step3">Building the web 
module</a>, and then 
test as described in the <a href="#Step4">Testing the Web App</a> step of the <a href="#Step">Step by Step </a>section.</p>
</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWebAppsHelloWorld Code</h3>
<p>The CAAWebAppsHelloWorld use case is made of several files located in the 
    CAAWebAppsJS.edu framework:</p>
    <ul>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\IdentityCard\IdentityCard.xml</code>, the IdentityCard file of the framework</li>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsHelloWorld.mweb\src\CAAWebAppsHelloWorldFile.html</code>, the widget html web page</li>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsHelloWorld.mweb\Imakefile.mk</code>, the Imakefile file of the module </li>
    </ul>
  <p>where InstallRootFolder [<a href="#References">2</a>] is the folder where the API CD-ROM is installed.</p> 
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in this use case:</p>
<ol>
	<li><a href="#Step1">Creating the web app module</a></li>
    
	<li><a href="#Step2">Creating the widget html file</a></li>
    <ol>
	<li><a href="#Step2a">Title zone</a></li>
    <li><a href="#Step2b">Metadata zone</a></li>
    <li><a href="#Step2d">JavaScript zone</a></li>
	</ol>	
    <li><a href="#Step3">Building the web app</a></li>
    <li><a href="#Step4">Testing the web app</a></li>
</ol>
 
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the web app module</h3>

<p>A web application module (or shorter a web module) is a directory whose extension name is <b>mweb.&nbsp;</b>mweb modules are <b>code</b> modules, so as usual below such directory you find, at the same level, a <b>src</b> directory containing itself the code to build, and an <b>Imakefile.mk</b> file to set up the build parameters. </p>
   
    <pre class="code">CAAWebAppsHelloWorld.<b>mweb</b>
   <b>src</b>
      CAAWebAppsHelloWorldFile.html
   <b>Imakefile.mk</b>
</pre>
    
    <p>You can observe that our module (<i>CAAWebAppsHelloWorld</i>) respects the module naming rule by starting with the brand&nbsp; trigram (<i>CAA</i>) and the framework identifier (<i>WebApps</i>). This is important, 
	since the module name appears in the runtime view as you will see in the <a href="#Step3">Testing the web app</a> section.</p>
     <p>The Imakefile.mk file only contains one line:</p>
    <pre class="code">BUILT_OBJECT_TYPE=WEB
</pre>
    <p>By this instruction you actually declare your module as a web module. Indeed the module extension (mweb) is only a convention like for the other type of modules. For the other build parameters, like javascript code 
	minification and concatenation [<a href="#References">1</a>], we have chosen the default behaviors (minification=yes and concatenation=yes).</p>
   
    <p>Before leaving this section, let's see the IdentityCard, the <b>IdentityCard.xml</b> file, of the CAAWebAppsJS.edu framework. </p>
    <pre class="code"> &lt;?xml version='1.0' ?&gt;
&lt;codeFramework xmlns = "http://www.3ds.ic" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.3ds.ic ICModel.xsd"&gt;
  &lt;toolPrerequisite name= "<b>VENWebBuildTools</b>"/&gt; 
&lt;/codeFramework></pre>
  <p>This is the minimal contents of a framework defining a web module. The <i>toolPrerequisite</i> XML tag requiring the <i>VENWebBuildTools</i> framework enables mkmk to build the web module.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the widget html file</h3>
    <p>The widget is an html file whose skeleton is as follows:</p>
    <pre class="code">&lt;?<b>xml</b> version="1.0" encoding="utf-8"?&gt; 
&lt;!<b>DOCTYPE</b> html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:widget="http://www.<b>netvibes</b>.com/ns/"&gt;
<b>&lt;!--  Copyright XXXX --&gt; </b>
    &lt;head&gt;
    ...
    &lt;/head&gt;
    &lt;body&gt;
    &lt;/body&gt;
 &lt;/html&gt;
</pre>
<p>The first three lines are mandatory:</p>
    <ol>
        <li>Extensible Markup Language (<b>XML</b>) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. It is defined in the XML <b>1.0</b> Specification produced by the W3C, and several other related specifications, all free open standards. The encoding is <b>utf-8 </b>to support unicode characters. </li>
        <li>The <b> <i>DOCTYPE</i></b> is an instruction to the web browser about what version of HTML the page is written in. Here, we state the widget is more compliant with the XHTML1 format as others
		formats (like HTML5 for example). Nevertheless, if you used a XHTML1 validator some errors could still persist. But it is the best to set.</li>
        <li>The last line is about the <b>namespaces</b>. You can see the <b>w3</b> namespace, and the one of Netvibes </li>
    </ol>
<p>
<p>If you want to insert a <b>copyright</b>, add a XML comment at the top of the html file. It can be set at any place while it is always <i>after</i> the <code>DOCTYPE </code> line. In our example, we set it just before the <i>head</i> section. </p>
<p>The <i>body</i> section is usually empty. The <i>head</i> section  contains the core of your widget. Let's see the details. </p>
    <h4><a name="Step2a"></a>Title zone</h4>
<pre class="code">...
&lt;<b>title</b>&gt;Hello World Widget App&lt;<b>/title</b>&gt;
...</pre>
<p>The widget title shows up in the header of the web application as you can see on <a href="#Fig.1">[Fig.1]</a>. </p>
<p>Be careful, the widget's title, as specified in the <code>title</code>  tag, is overwritten by the name of the Third App  when this mode is chosen to integrate the widget in  the
3D Dashboard [<a href="#References">4</a>]. While, it is not the case with Run you App. </p>  
     <h4><a name="Step2b"></a>Metadata zone</h4>
	<p>A metadata is a static data linked to your widget. </p> 	 
    <pre class="code" >...
&lt;meta name="description" content="CAA Web Apps basic use case" /&gt;
&lt;meta name="keywords" content="CAA Use Case" /&gt;
...</pre>
	<p>The meta data follow the W3C specifications. They are typically used to specify page description, keywords, author of the document, last modified, and other metadata.</p>
     <h4><a name="Step2d"><a></a>JavaScript zone</h4>
    <p>Surrounded by script tags you finally find the widget core code:</p>
<pre class="code">...
&lt;script &gt;
   /* global widget */
   ( function () {
       <b>'use strict'; </b>
        var myWidget = {
           <b>onLoad</b>: function() {
              <b>widget.body</b>.innerHTML= "Hello World!";					
            }
        };
	<b>widget</b>.<b>addEvent</b>('onLoad', myWidget.onLoad);
   }() ) ;
&lt;/script&gt;
...</pre>

<p>On the last line you find <code>widget</code>, a <i>Widget</i> class object [<a href="#References">6</a>]. This instance is created when the web app is run.&nbsp; Once <code>widget</code>  is created, the <i>addEvent</i> method is executed 
in order to add a callback for the <i>onLoad</i> event. When this event is triggered, the <i>onLoad</i> callback function is executed. The callback function changes the contents
 of the widget's body by  using
the <code>innerHTML</code> method on the <code>widget.body</code> element. </p>
<p>Since with JavaScript defining a global element  is not a good practice, usually code quality checkers (like JSHint) raise an error in front of such a code. So it's why to prevent an error for <code>widget</code>, we declare it 
as "global" by a JavaScript comment at the begining of the <i>script</i> tag.</p>
<p>By opposite, using the strict mode (<code>use script;</code>) is a good practice. It is an ECMAScript 5 capability whose purpose is to optimize the checking of errors present in the code. For example, 
with strict mode, you cannot use an implicitly declared variable what could lead to tricky situations. Since the declaration must 
be included in a function, in this basic use case, without a global function, we have created a "fake" one. Usually
there is the <code>require</code> fonction like you can see in this other example [<a href="#References">7</a>].  </p>

<h3><a name="Step3"></a>Building the web app</h3>
    <p>The mweb module is as usual built with the mkmk [<a href="#References">1</a>] tool</p>
    <pre class="code"><b>mkmk</b> [...]</pre>
      <p>Before launching the build, do not forget to set up the pre-req (<b>mkGetPreq</b>) in order to locate the dependant 
	  frameworks. To know more about the build options, please refer to the referenced article [<a href="#References">1</a>]. </p>
    <p>The result of the build is put into the <b>webapps</b> sub-directory of the runtime view (here windows 64 bits)</p>
     <pre class="code">Workspace_dir
    CAAWebAppsJS.edu
    win_b64
         <b>webapps</b>
            CAAWebAppsHelloWorld
                  CAAWebAppsHelloWorldFile.html
                  CAAWebAppsHelloWorld.index.mk
</pre>
<p>You can observe that the name of the web application (<i>CAAWebAppsHelloWorld</i>) is the name of the mweb module. Note that this default behavior can be overloaded as it is specified in the 
referenced article [<a href="#References">1</a>].</p>
    <p>Inside the web app directory, you can see the html code file, <i>CAAWebAppsHelloWorldFile.html, </i>while<i> CAAWebAppsHelloWorld.index.mk</i> is created by mkmk for build module management purpose. </p>

	<h3><a name="Step4"></a>Testing the web app</h3>   
<p>The test can be done by integrating the widget into the 3D Dashboard thanks to the "Run your App" widget as it is described 
by the referenced article [<a href="#References">4</a>].  </p>
   
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This very basic use case has shown the minimal contents of a <b>3D</b>EXPERIENCE platform widget. You can continue with the article presenting 
an overview of the <b>3D</b>EXPERIENCE platform widget development [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
    <tr>
		<td>[1]</td>
		<td> <a href="../CAAWebAppsJSGuides/CAAWebAppsTamkmkbuild.htm">Concatenation and Minification, Web Module Build Options</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>Building and Launching a Web App Use Case</a></td>
	</tr>
	
	 <tr>
		<td>[4]</td>
		<td> <a href="CAAWebAppsTaWidgetIntegration.htm">Widget 3D Dashboard Integration</a></td>
	</tr>
    <tr>
		<td>[5]</td>
		<td><a href="CAAWebAppsTaWidgetWriting.htm">Widget Development Principles</a></td>
	</tr>
	 <tr>
		<td>[6]</td>
		<td><a href="../CAAWebAppsJSRef/CAAWebAppsQrWidgetClass.htm">Widget Class Reference</a></td>
	</tr>
	 <tr>
		<td>[7]</td>
		<td><a href="../CAAWebAppsJSGuides/CAAWebAppsUcOperationApp.htm">Defining and Using AMD Modules</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [June 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
