<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">
 
<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Managing Plots</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tbody><tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Managing Plots</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</tbody></table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tbody><tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to open a simulation object and to retrieve 
		and manage a section property.</p>
		<ul>
			<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#UseCase">The CAASMAMpaResultsCreateFieldPlot Use Case</a>
			<ul>
				<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#What">What Does CAASMAMpaResultsCreateFieldPlot Do</a></li>
				<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#How">How to Launch CAASMAMpaResultsCreateFieldPlot</a></li>
				<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Where">Where to Find the CAASMAMpaResultsCreateFieldPlot Code</a></li>
			</ul>
			</li>
			<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step">Step-by-Step</a></li>
			<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#InShort">In Short</a></li>
			<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#References">References</a></li>
		</ul>
		</td>
	</tr>
</tbody></table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create and modify plots and legends using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASMAMpaResultsCreateFieldPlot Use Case</h2>
<p>CAASMAMpaResultsCreateFieldPlot is a use case of the CAASMAMpaInterfaces.edu framework that illustrates 
SMAMpaInterfaces framework 
capabilities regarding visualization.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASMAMpaResultsCreateFieldPlot Do?</h3>
<p>CAASMAMpaResultsCreateFieldPlot opens a Simulation and accesses a Sequence to obtain a ResultsManager which contains  
API to create a plot.</p>
<p>The input model for this Use Case is shown in [<a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Fig1">Fig.1</a>]. It 
contains a product has eight 3D parts and some publications.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASMAMpaResultsCreateFieldPlot 
	Product Model</caption>
	<tbody><tr>
		<td><img src="images/CAASMAFeaSections001.jpg"/></td>
	</tr>
</tbody></table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASMAMpaResultsCreateFieldPlot</h3>
<p>To launch CAASMAMpaResultsCreateFieldPlot, you will need to set up the build time 
environment, then compile CAASMAMpaResultsCreateFieldPlot.m along with its prerequisites, set 
up the run time environment, and then execute the use case [<a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c "<i>CAASMAMpaResultsCreateFieldPlot Repository Server User Password SecurityCtx 
PLM_Type PLM_External_Root V_version_Root</i>"</code></p>
<p>where :</p>
<code>
<table id="table1">
	<tbody><tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th><b><i>Server</i></b></th>
		<td>The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</tbody></table>
</code>
<p><b>Import PLM Data:</b><br>
The use case requires PLM data, which consists of the PLM reference and PLM Representation Reference. These data are stored in 3D XML files, whose extension is "3dxml". You must import these PLM data files into the database by clicking on [+] tab in the upper right corner ->Import ->3D XML prior to launching the use case.
The "3dxml" file is supplied in the CAASMAMpaInterfaces.edu\CNext\resources\CAASim.3dxml
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASMAMpaResultsCreateFieldPlot Code</h3>
<p>The CAASMAMpaResultsCreateFieldPlot use case is made of a single source file named CAASMAMpaResultsCreateFieldPlot.cpp 
located in the CAASMAMpaResultsCreateFieldPlot.m module of the CAASMAMpaInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASMAMpaInterfaces.edu\CAASMAMpaResultsCreateFieldPlot.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven logical steps in CAASMAMpaResultsCreateFieldPlot:</p>
<ol>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step1">Opening the simulation</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step2">Retrieving the Result Rep and retrieving the Results Analysis Case</a></li>
    <li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step3">Retrieving the Results Factory</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step4">Adding Plot Definitions, Query Step and Frame Information</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step5">Creating a Plot</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step6">Setting Plot Properties</a></li>	
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step7">Retrieving and Manipulating Plot Legend</a></li>
        <li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step8">Accessing Existing Plots</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step9">Removing Plot Definitions</a></li>
	<li><a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#Step10">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the simulation</h3>
<p>To open the simulation, you should use services from the <code>
CAAPLMIntegrationUse.edu</code> framework.</p>
<p>With the help of the <code>CATISimulationPLMManager</code> interface you can navigate through the product structure.</p>
<pre class="code">...
<span class="comment">//Get the simulation PLMID from inputs</span>
CATUnicodeString plmid_n = iArgv[7];
HRESULT hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

<span class="comment">//=====================================================================</span>
<span class="comment">// 1- Opens the simulation</span>
<span class="comment">//=====================================================================</span>
CATString Modeler ="PLMCoreReference" ;
CATIType_var spType;
CATIAdpPLMIdentificator * piPLMIdent = NULL;
hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(Modeler, spType);
if (SUCCEEDED(hr) &amp;&amp; spType!=NULL_var)
{ 
<span class="comment">  //Fixing the attribute name to its required value</span>
  CATAdpAttributeSet AttributeSet;
  AttributeSet.AddAttribute("PLM_ExternalID", plmid_n);
  AttributeSet.AddAttribute(CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr(), version_n.CastToCharPtr());

<span class="comment">  // Query by attribute</span>
  CATLISTP(CATAdpQueryResult) ListOfQueryResults;
  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(spType, AttributeSet, ListOfQueryResults);
  if (SUCCEEDED(hr) &amp;&amp; ListOfQueryResults.Size())
  {
    CATAdpQueryResult * piRes = ListOfQueryResults[1];      
    if (piRes)
    {
      piRes-&gt;GetIdentifier(piPLMIdent);
      delete piRes;
      piRes=NULL;        
    }
  }
}

CATAdpOpenParameters params(CATAdpExpandParameters::Authoring);
CATAdpOpener opener(newBag, params);

CATISimulationPLMManager * piSimObj = NULL ;
rc = opener.CompleteAndOpen(piPLMIdent, IID_CATISimulationPLMManager, (void**) &amp;piSimObj);  

newBag.InsertRoot(piSimObj);
  
<span class="comment">// Add the Root withing a bag</span>
CATOmbLifeCycleRootsBag newBag;
newBag.InsertRoot(piSimObj);
...</pre>
<p>For further information about setting up a PLM session refer to the article "Connecting to 3DExperience Server"[<a href="http://dsdoc/devdoc417/online/CAASMAMpaResultsDoc/CAASMAMpaResultsCreateFieldPlot.htm#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Result Rep and retrieving the Sequence Results</h3>
<p>The next step of this use case involves navigation to the Root Result Rep and retrieval of the Results Manager.</p>
<pre class="code">...
<span class="comment">// Obtain the Result representation root Feature</span>
CATISimResultRepManager_var spResultManager;
CATISimulationPLMManager::SimulationCategoryIdentifier iCategoryId = CATISimulationPLMManager::Result ;
CATBaseUnknown * piRoot = NULL;

if(FAILED(piSimObj-&gt;GetRootManagerFromSO(iCategoryId, piRoot))) {cout &lt;&lt; "Failure to retrieve the result Rep Root" &lt;&lt; endl; return 1;};
spResultManager = piRoot;
if (piRoot) {piRoot-&gt;Release();    piRoot = NULL;}
...
<span class="comment">// Obtain the Analysis Case</span>
CATListValCATBaseUnknown_var spAnalysisCases;
spResultsManager-&gt;GetResultsAnalysisCases(spAnalysisCases);
if(spAnalysisCases.Size() &lt; 1)  { cout&lt;&lt; "Failure to retrieve analysis cases " &lt;&lt; spAnalysisCases.Size() &lt;&lt; endl;  return 1; }
SMAIMpaResultsAnalysisCase_var spResultsAnalysisCase(spAnalysisCases[1]);

if (spResultsAnalysisCase == NULL_var) { cout &lt;&lt; "Failure to retrieve first results analysis case" &lt;&lt; endl; return 1; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Results Factory</h3>
<p>Once you have the Results Analysis Case, you can retrieve the Results Factory using the SMAIMpaResultsFactory interface.</p>
<pre class="code">...
SMAIMpaResultsFactory_var spResultsFactory = spResultsAnalysisCase;
if (spResultsFactory == NULL_var) { cout &lt;&lt; "Failure to obtain results factory" &lt;&lt; endl; return 1; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Adding Plot Definitions, Obtaining Step and Frame information</h3>
<p>If you wish to load your own plot templates, this can be done using the SMAIMpaResultsFactory interface.</p>
<pre class="code">...
CATUnicodeString plotFileName("$CATReffilesPath/FEM/CAASMAMpaModelDescription.xml");
CATListOfCATUnicodeString plotDefinitions;
plotDefinitions.Append(plotFileName);
hr = spResultsFactory-&gt;AddPlotDefinitions(plotDefinitions);
...</pre>
<p>You can also query the ResultsAnalysisCase for step and frame information.</p>
<pre class="code">...
CATListValCATBaseUnknown_var steps;
hr = spResultsAnalysisCase-&gt;GetResultsSteps(steps);

if (FAILED(hr) || steps.Size() == 0) { cout &lt;&lt; "Failure to get steps from results analysis case " &lt;&lt; endl; return 1; }
CATListOfFloat frameValues;
SMAIMpaResultsStep::ResultsStepDomain domain;
SMAIMpaResultsStep_var resultsStep(steps[1]);
if (resultsStep == NULL_var) { cout &lt;&lt; "Failure to get step from results analysis case " &lt;&lt; endl; return 1; }
hr = resultsStep-&gt;GetFramesData(frameValues, domain);
if (FAILED(hr)) { cout &lt;&lt; "Failure to get frames data " &lt;&lt; steps[1] &lt;&lt; endl; return 1; }

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Plot</h3>
<p>Once you have the results factory, you can create a plot. </p>
<pre class="code">...
CATListOfCATString fields;
CATListOfCATString plotIdshr = spResultsFactory-&gt;GetListOfFieldPlotIDs(fields, plotIds);
if (FAILED(hr) || plotIds.Size() == 0) { cout &lt;&lt; "Failure to retrieve field plot ids from results factory " &lt;&lt; plotIds.Size() &lt;&lt; endl; return 1; }

SMAIMpaFieldPlot_var spPlot;
hr = spResultsFactory-&gt;CreateFieldPlotByID(plotIds[1], spPlot, true);
if (FAILED(hr) || spPlot == NULL_var) { cout &lt;&lt; "Failure to create field plot for id " &lt;&lt; plotIds[1] &lt;&lt; endl; return 1; }
  
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting Plot Properties</h3>
<p>You can set/get plot properties in the following way:</p>
<pre class="code">...
  <span class="comment">// SMAIMpaFieldPlot::GetStepAndFrame</span>
  CATString csStep;
  int nFrame;
  hr = spPlot-&gt;GetStepAndFrame (csStep, nFrame);
 
  <span class="comment">// SMAIMpaFieldPlot::SetCurrentFrame</span>
  int nFrameAlt;
  nFrame--;
  hr = spPlot-&gt;SetCurrentFrame (nFrame);
  <span class="comment">// SMAIMpaFieldPlot::GetCurrentFrame</span>
  hr = spPlot-&gt;GetCurrentFrame (nFrameAlt);
  if (FAILED(hr) || nFrameAlt != nFrame) { cout &lt;&lt; "Set/Get current frame failed " &lt;&lt; nFrame &lt;&lt; endl; return 1; }
 
  <span class="comment">// SMAIMpaFieldPlot::SetStepAndFrame</span>
  nFrame++;
  hr = spPlot-&gt;SetStepAndFrame(csStep, nFrame);
  hr =  spPlot-&gt;GetStepAndFrame(csStep, nFrameAlt);
  if (FAILED(hr) || nFrameAlt != nFrame)  { cout &lt;&lt; "Set/Get StepAndFrame failed " &lt;&lt; nFrame &lt;&lt; endl; return 1; }

  <span class="comment">// SMAIMpaFieldPlot::GetActivationStatus</span>
  CATBoolean isActivated = FALSE;
  hr = spPlot-&gt;GetActivationStatus(isActivated);
  if (FAILED(hr) || TRUE != isActivated) { cout &lt;&lt; "GetActivationStatus failed " &lt;&lt; endl; return 1; }
 
  <span class="comment">// SMAIMpaFieldPlot::SetActivationStatus</span>
  isActivated = FALSE;
  hr = spPlot-&gt;SetActivationStatus(isActivated);
 
  <span class="comment">// SMAIMpaFieldPlot::GetActivationStatus</span>
  isActivated = TRUE;
  hr = spPlot-&gt;GetActivationStatus(isActivated);
  if (FAILED(hr) || FALSE != isActivated) { cout &lt;&lt; "SetActivationStatus failed " &lt;&lt; endl; return 1; }
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving and Manipulating Plot Legend</h3>
<p>As seen in the following code snippet, you can use the <code>SMAIMpaFieldPlot</code> 
interface to retrieve the plot legend:</p>
<pre class="code">...
<span class="comment">// SMAIMpaFieldPlot::GetLegend</span>
  SMAIMpaLegend_var spLegend;
  hr = spPlot-&gt;GetLegend(spLegend);
...
</pre>
<p>From there you can access various methods from the <code>SMAIMpaLegend</code> interface.</p>
<pre class="code">...
<span class="comment">// SMAIMpaLegend::GetNbColors</span>
  int defaultNbColors;
  hr = spLegend-&gt;GetNbColors(defaultNbColors);

  <span class="comment">// SMAIMpaLegend::SetNbColors</span>
  int imposedNbColors = defaultNbColors + 1;
  hr = spLegend-&gt;SetNbColors(imposedNbColors);

  <span class="comment">// SMAIMpaLegend::GetNbColors</span>
  int nbColors;
  hr = spLegend-&gt;GetNbColors(nbColors);
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving individual plots</h3>
<p>In this step, you can use the <code>GetReferencedObjects</code> method 
of <code>CATISimSet</code> interface to retrieve previously created plots. 
The output of this method is a list of CATBaseUnknown_var smart pointer. You 
should query interface each item of the list to get a smart pointer for 
individual plots.</p>
<pre class="code">...
CATISimSet_var spSimSet = NULL_var;
  if (spResultsAnalysisCase != NULL_var) 
  {
      spResultsAnalysisCase-&gt;GetSet(SMAIMpaResultsAnalysisCase::FieldPlot, spSimSet);
  }
  if (NULL_var == spSimSet)
  {
      cout &lt;&lt; "    Failed to retreive Plot set" &lt;&lt; endl;
      hr = ::CAAAdpCloseSession();
      return 1;
  }
  cout &lt;&lt; "    Plot set is successfully retreived" &lt;&lt; endl;

  // Retrieve the individual plots
  CATLISTV(CATBaseUnknown_var) lReferenceObjects;
  hr = spSimSet-&gt;GetContents(lReferenceObjects);
  if (FAILED(hr))
  {
      cout &lt;&lt; "    Failed to retrieve individual properties" &lt;&lt; endl;
      hr = ::CAAAdpCloseSession();
      return 1;
  }
  if (lReferenceObjects.Size() == 0)
  {
      cout &lt;&lt; "    There are no plots in the model" &lt;&lt; endl;
      hr = ::CAAAdpCloseSession();
      return 1;
  }

  // Scan the list
  spPlot = NULL_var;
  for(int idx=1; idx&lt;=lReferenceObjects.Size(); ++idx)
  {
      CATBaseUnknown_var spBU = lReferenceObjects[idx];
      if (NULL_var == spBU)
      {
          cout &lt;&lt; "    Failed to retrieve plot from list" &lt;&lt; endl;
          hr = ::CAAAdpCloseSession();
          return 1;
      }

      if (spPlot == NULL_var)
          spPlot = spBU;  //retain first one
  }

  if ((NULL_var==spPlot))
  {
      cout &lt;&lt; "    Failed to retrieve existing plot" &lt;&lt; endl;
      hr = ::CAAAdpCloseSession();
      return 1;
  }
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Removing Plot Definitions</h3>
<p>You can use the <code>SMAIMpaResultsFactory</code> interface to 
remove plot definitions that were previously added. 
</p><pre class="code">...
<span class="comment">//Remove Plot Definitions</span>
hr = spResultsFactory-&gt;RemovePlotDefinitions(plotDefinitions);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed 
objects.</p>
<pre class="code">...
newBag.RemoveRoot(piSimObj);
if (piSimObj) {piSimObj-&gt;Release();    piSimObj = NULL;}

<span class="comment">// Close the PLM session</span>
hr = ::CAAAdpCloseSession();
if (FAILED(hr)) return 1;

...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASMAMpaResultsCreateFieldPlot</code> use case demonstrates the use of various 
CAA APIs in the <code>SMAMpaResultsItf</code> framework to create and manage plots.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tbody><tr>
		<td>[1]</td>
		<td>
		<a href="http://dsdoc/devdoc417/online/CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="http://dsdoc/devdoc417/online/CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="http://dsdoc/devdoc417/online/CAAOmbModelingProtocol/CAAOmbTaVirtualObject.htm">
		Understanding Link Concepts</a></td>
	</tr>



</tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tbody><tr>
		<td>Version: <strong>1</strong> [June 2013]</td>
		<td>Document created</td>
	</tr>
</tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>
</body>
</html>
