<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating 2D Layout Views from FTA Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating 2D Layout Views from FTA Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAA2DLCreate2DLViewFromFTA use case. This 
		use case explains how to create a 2DL View from a 3D Functional Tolerancing &amp; 
		Annotation View or FTA Capture.</p>
		<p><strong>2DL</strong> means: 2D Layout for 3D Design, this is the name 
		of the CATIA application.</p>
		<p><strong>FTA</strong> means: Functional Tolerancing &amp; Annotation, 
		this is the name of the CATIA application.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAA2DLCreate2DLViewFromFTA Use Case</a>
				<ul>
					<li><a href="#What">What Does CAA2DLCreate2DLViewFromFTA Do</a></li>
					<li><a href="#How">How to Launch CAA2DLCreate2DLViewFromFTA
						</a></li>
					<li><a href="#Where">Where to Find the CAA2DLCreate2DLViewFromFTA 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to access callouts in generative views.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAA2DLCreate2DLViewFromFTA Use Case</h2>
<p>CAA2DLCreate2DLViewFromFTA is a use case of the CAADrafting2DLInterfaces.edu 
framework that illustrates Drafting2DLUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAA2DLCreate2DLViewFromFTA Do?</h3>
<table>
	<caption>Fig. 1: Initial 3D shape representation reference </caption>
	<tr>
		<td>
		<img alt="2D Layout View from FT&amp;A input of the use case" height="393" src="images/CAA2DLViewFromFTA1.jpg" width="463"/></td>
	</tr>
</table>
<p>Fig. 1 represents a 3D shape representation reference containing an Annotation 
Set with FTA views and FTA captures.</p>
<table>
	<caption>Fig. 2 The 3D shape representation reference modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="2D Layout View from FT&amp;A modified by the use case" height="493" src="images/CAA2DLViewFromFTA2.jpg" width="458"/></td>
	</tr>
</table>
<p>Fig. 2 represents the 3D shape representation reference modified by the use case 
program. </p>
<p>A Layout Root has been created with the same standard than FTA Annotation standard, 
then, two 2DL Views have been created from the FTA FrontView.1 and FTA Capture.1. 
A 2DL filter has been created from the FTA capture filter during the 2DL View creation 
from the capture.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAA2DLCreate2DLViewFromFTA </h3>
<p>To launch CAA2DLCreate2DLViewFromFTA, you will need to set up the build time 
environment, then compile CAA2DLCreate2DLViewFromFTA along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAA2DLCreate2DLViewFromFTA <em>Repository</em> <em>Server Username</em> <em>Password</em> <em>SecurityCtx PLMType </em>CAA2DLViewFromFTAPRD ---&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLMType</td>
		<td>A PLM Type</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1</td>
		<td>CAA2DLViewFromFTAPRD </td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>]</li>
	<li>The PLMType of the component to be opened.</li>
	<li>The last two arguments respectively define the <strong>attribute name</strong> 
		and its <strong>value</strong> for the first attribute. If the authoring 
		customization requires more that one attribute, add as many couple ( attribute 
		name, attribute value) than required attribute.</li>
</ul>
<p><strong>Import PLM Data:</strong><br />
The use case may require input PLM Data: PLM Reference or PLM Representation Reference. 
This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must 
import these PLM Data in the database using the PLM Access / Import As 3D XML command 
prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADrafting2DLInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADrafting2DLInterfaces.edu\InputData\CAA2DLViewFromFTA.3dxml</code></p>
<p>where <code>InstallRootFolder</code>[<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAA2DLCreate2DLViewFromFTA Code</h3>
<p>The CAA2DLCreate2DLViewFromFTA use case is made of a single source file named 
CAA2DLCreate2DLViewFromFTA.cpp located in the CAA2DLCreate2DLViewFromFTA .m module 
of the CAADrafting2DLInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADrafting2DLInterfaces.edu\CAA2DLCreate2DLViewFromFTA 
.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven steps in CAA2DLCreate2DLViewFromFTA :</p>
<ol>
	<li><a href="#Step1">Opening the 3D Data</a></li>
	<li><a href="#Step2">Retrieving the TPS Set</a></li>
	<li><a href="#Step3">Retrieving the Part Root from the Container</a></li>
	<li><a href="#Step4">Creating the 2DL Layout Root</a></li>
	<li><a href="#Step5">Retrieving the FTA Active View and the Capture</a></li>
	<li><a href="#Step6">Creating the 2DL View from FTA Components</a></li>
	<li><a href="#Step7">Saving the Representation Reference and Exiting</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the 3D Data</h3>
<pre class="code">
... 
   const char* comp_PLMType= iArgv [6];
...
// 2. Creates a PLM session and connect to the input repository
// ====================================================
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
 
if (SUCCEEDED(hr))
{
 cout &lt;&lt; &quot;The Session has been opened&quot; &lt;&lt; endl;
}
else
{
  cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository&quot; &lt;&lt; endl;
  return rc;
}

// 3. Opens the Root Reference
// ========================
// Open Product in Authoring mode
CATIPLMRepInstances* piRepInstOnRoot= NULL;

// Entire product model is loaded
CATBoolean ExpandAllMode = TRUE;
CATOmbLifeCycleRootsBag Bag;

 hr = ::CAAOpenPLMComponent(comp_PLMType,comp_externalId,comp_version,
                            IID_CATIPLMRepInstances,(void **)&amp; piRepInstOnRoot,Bag,ExpandAllMode);


if(FAILED(hr) || (NULL==piRepInstOnRoot))
{
  cout &lt;&lt; &quot;Failure to open the product structure &quot; &lt;&lt; endl;
}

// 5. Retrieves the Representation Reference from the Product Root
// =========================================================

// The product structure contains one instance of a 3D shape representation reference

CATIPLMNavReference *piPLMNavRef = NULL;
CATIPLMNavRepInstance *piNavRepInst = NULL;
CATIPLMNavRepReference *piPLMNavRepRef = NULL;

if (piRepInstOnRoot &amp;&amp; SUCCEEDED(piRepInstOnRoot-&gt;QueryInterface(IID_CATIPLMNavReference,(void **)&amp;piPLMNavRef)))
{
  CATListPtrCATIPLMNavEntity childrenlist;
  CATPLMCoreType coreType = PLMCoreRepInstance;
  piPLMNavRef-&gt;ListChildren(childrenlist,1,&amp;coreType);
  int nbChildren = childrenlist.Size();
  if( 1 == nbChildren )
  {
    CATIPLMNavEntity *pChil = childrenlist[1];
    if ( NULL != pChil )
    {
      if( SUCCEEDED(pChil-&gt;QueryInterface(IID_CATIPLMNavRepInstance,(void**)&amp;piNavRepInst)))
      {
        // Gets the Rep Instance's rep reference
        piNavRepInst-&gt;GetRepReferenceInstanceOf(piPLMNavRepRef);
      }
      pChil-&gt;Release();pChil=NULL;
     }
   }
   piPLMNavRef-&gt;Release();piPLMNavRef=NULL;
}
...</pre>
<p>This section represents the usual sequence to open a root product and retrieve 
one instance of a 3D Shape Rep reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the TPS Set</h3>
<pre class="code">...
// 6. Retrieves the Annotation Set and the Active TPS View
// ========================================================
CATITPSView *piTPSView = NULL;

// 6.1 Loads the representation in &quot;Edit Mode&quot;
// ===========================================
CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
if (piPLMNavRepRef &amp;&amp; SUCCEEDED( piPLMNavRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
{
  hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
  piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
}

// 6.2 Retrieves the FTA components: The active FTA View and the FTA Capture
// =========================================================================
CATIPsiRepresentationReference *piPSIRepRef = NULL;
CATBaseUnknown *piTPSViewBU = NULL;
CATBaseUnknown *piTPSCaptureBU = NULL;
if (piPLMNavRepRef &amp;&amp; SUCCEEDED(piPLMNavRepRef-&gt;QueryInterface(IID_CATIPsiRepresentationReference,(void **)&amp;piPSIRepRef)))
{ 
  CATITPSServicesContainers *piTPSServ = NULL;
  if (SUCCEEDED(CATTPSInstantiateUseComponent(DfTPS_ItfTPSServicesContainer, (void**) &amp; piTPSServ)))
  {
    // 6.2.1 Retrieves the Annotation Set from the Representation Reference
    // ====================================================================
    CATITPSSet *piTPSSet = NULL;
    piTPSServ-&gt;GetSet(piPSIRepRef,&amp;piTPSSet);
    if (piTPSSet)
    {
      // 6.2.2 Retrieves the Active View from the Annotation Set 
      // =======================================================
      CATITPSView *piTPSView = NULL; 
      piTPSSet-&gt;GetActiveView(&amp;piTPSView);
      if (piTPSView)
      {
        piTPSView-&gt;QueryInterface(IID_CATBaseUnknown,(void **)&amp;piTPSViewBU);
        piTPSView-&gt;Release();piTPSView=NULL;
        cout &lt;&lt; &quot; The active TPS View is correctly retrieved&quot; &lt;&lt; endl;
      }

      // 6.2.3 Retrieves the List of the Captures from the Annotation Set 
      // ================================================================
      CATITPSCaptureList *piTPSCaptList = NULL;
      piTPSSet-&gt;GetCaptures (&amp;piTPSCaptList);
      piTPSSet-&gt;Release();piTPSSet=NULL;
      if (piTPSCaptList)
      {
        unsigned int nbCapt;
        piTPSCaptList-&gt;Count(&amp;nbCapt);
        // there is at least one capture in the representation reference
        if (nbCapt &gt; 0)
        {
          CATITPSCapture *piTPSCapture = NULL;
          if (SUCCEEDED(piTPSCaptList-&gt;Item(0,&amp;piTPSCapture)) &amp;&amp; piTPSCapture)
          {
            piTPSCapture-&gt;QueryInterface(IID_CATBaseUnknown,(void **)&amp;piTPSCaptureBU);
            cout &lt;&lt; &quot; The first capture is correctly retrieved&quot; &lt;&lt; endl;
            piTPSCapture-&gt;Release();piTPSCapture=NULL;
          }
        }
        piTPSCaptList-&gt;Release();piTPSCaptList=NULL;
     }
   }
   piTPSServ-&gt;Release();piTPSServ=NULL;
}
...</pre>
<p>The Annotation Set is aggregated by the Mechanical Part. CATITPSServicesContainers 
allows to retrieve the Annotation Set. The representation must be loaded in &quot;Edit 
mode&quot; to retrieve the Annotation Set[<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Part Root from the Container</h3>
<pre class="code">...

  // 6.3 Retrieves the Mechanical Part
  // =================================
  CATIMmiMechanicalFeature_var spMmiMechFeat;

  CATIMmiPrtContainer * piMmiPrtCont = NULL; 
  piPLMNavRepRef-&gt;RetrieveApplicativeContainer("CATPrtCont",IID_CATIMmiPrtContainer,(void **)&amp;piMmiPrtCont);
  if (piMmiPrtCont)
  {
  piMmiPrtCont-&gt;GetMechanicalPart(spMmiMechFeat);
  piMmiPrtCont-&gt;Release();piMmiPrtCont=NULL;
}
     ...</pre>
<p>RetrieveApplicativeContainer method allows to retrieve the Part container from 
the representation reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the 2DL Layout Root</h3>
<pre class="code">...
// Creates the 2DLayout Root
// =========================
if (NULL_var != spPart)
{
  CATI2DLayoutLayout *pi2DLayout = NULL;
  cout &lt;&lt; &quot;call CAT2DLayoutServices::GetLayout2DL&quot; &lt;&lt; endl;
  CAT2DLayoutServices::GetLayout2DL(spMmiMechFeat,&amp;pi2DLayout);

  if (!pi2DLayout)
  {
    cout &lt;&lt; &quot;No 2DL. A 2DL must be created &quot;&lt;&lt; endl;
    CATListOfCATUnicodeString lstStd;
    if (SUCCEEDED(CAT2DLayoutServices::GetAvailable2DLayoutStandards(lstStd)))
    {
      cout &lt;&lt; &quot;nb std in the environment = &quot; &lt;&lt; lstStd.Size() &lt;&lt; endl;
      for ( int indice = 1 ; indice &lt;= lstStd.Size() ; indice ++ )
      cout &lt;&lt; &quot;lstStd (&quot;&lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; lstStd[indice].ConvertToChar() &lt;&lt; endl;
      // The fifth standard defined in the list is choosen (ISO_3D)
      // The 2DL standard and FTA standard must be identical
      CATUnicodeString myStd = lstStd[5];
      cout &lt;&lt; &quot; myStd = &quot; &lt;&lt; myStd.ConvertToChar() &lt;&lt; endl;

      CATListOfCATUnicodeString lstSheetStyle;
      if (SUCCEEDED(CAT2DLayoutServices::GetListOfSheetStyles(myStd,lstSheetStyle)))
      {
        for (int indice = 1 ; indice &lt;= lstSheetStyle.Size() ; indice ++ )
        cout &lt;&lt; &quot;lstSheetStyle (&quot;&lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; lstSheetStyle[indice].ConvertToChar() &lt;&lt; endl;
      }
      CATUnicodeString mySheetStyle = lstSheetStyle[2];
      cout &lt;&lt; &quot; mySheetStyle = &quot; &lt;&lt; mySheetStyle.ConvertToChar() &lt;&lt; endl;

      // Creates the 2DLayuout Root
      if (SUCCEEDED(CAT2DLayoutServices::CreateLayout2DL(spPart,myStd, mySheetStyle,&amp;pi2DLayout)) &amp;&amp; pi2DLayout)
        cout &lt;&lt; &quot; The 2DL is correctly created&quot; &lt;&lt; endl;
    }
  }
...</pre>
<p>Only one 2D Layout Root may be created in the 3D shape representation reference. 
GetLayout method defined in CAT2DLayoutServices allows to check is a 2D Layout Root 
already exists in the 3D shape representation reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the FTA Active View and the Capture</h3>
<pre class="code">...
// Retrieves the FTA Active View and the Capture
// =============================================
CATBaseUnknown *piTPSViewBU = NULL;
CATBaseUnknown *piTPSCaptureBU1 = NULL;
CATBaseUnknown *piTPSCaptureBU2 = NULL;

if (piTPSSet)
{
  CATITPSView *piTPSView = NULL; 
  piTPSSet-&gt;GetActiveView(&amp;piTPSView);
  if (piTPSView)
  {
    piTPSView-&gt;QueryInterface(IID_CATBaseUnknown,(void **)&amp;piTPSViewBU);
    piTPSView-&gt;Release();piTPSView=NULL;
    cout &lt;&lt; &quot; The active TPS View is correctly retrieved&quot; &lt;&lt; endl;
  }
  CATITPSCaptureList *piTPSCaptList = NULL;
  piTPSSet-&gt;GetCaptures (&amp;piTPSCaptList);
  piTPSSet-&gt;Release();piTPSSet=NULL;
  if (piTPSCaptList)
  {
    unsigned int nbCapt;
    piTPSCaptList-&gt;Count(&amp;nbCapt);
    // there is at least one capture in the Part Document
    if (nbCapt &gt; 0)
    {
      CATITPSCapture *piTPSCapture = NULL;
      if (SUCCEEDED(piTPSCaptList-&gt;Item(0,&amp;piTPSCapture)) &amp;&amp; piTPSCapture)
      {
        piTPSCapture-&gt;QueryInterface(IID_CATBaseUnknown,(void **)&amp;piTPSCaptureBU1);
        cout &lt;&lt; &quot; The first capture is correctly retrieved&quot; &lt;&lt; endl;
        piTPSCapture-&gt;Release();piTPSCapture=NULL;
      }
      if (SUCCEEDED(piTPSCaptList-&gt;Item(1,&amp;piTPSCapture)) &amp;&amp; piTPSCapture)
      {
        piTPSCapture-&gt;QueryInterface(IID_CATBaseUnknown,(void **)&amp;piTPSCaptureBU2);
        cout &lt;&lt; &quot; The 2nd capture is correctly retrieved&quot; &lt;&lt; endl;
        piTPSCapture-&gt;Release();piTPSCapture=NULL;
      }
    }
    piTPSCaptList-&gt;Release();piTPSCaptList=NULL;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the 2DL View from FTA Components</h3>
<pre class="code">...
// Retrieves the 2DL Sheet
// =======================
if (pi2DLayout)
{
  CATI2DLayoutSheet *pi2DLSheet = NULL;
  pi2DLayout-&gt;GetActiveSheet(&amp;pi2DLSheet);
  if (pi2DLSheet)
  {
     cout &lt;&lt; &quot; The active 2DL Sheet is correctly retrieved&quot; &lt;&lt; endl;
     double pt1Coord[2] = {20.0,40.0};
     CATI2DLayoutView *pi2DLayoutView = NULL;
     cout &lt;&lt; &quot;Start the 2DL view creation from 3D FTA View&quot; &lt;&lt; endl;
     if (SUCCEEDED(pi2DLSheet-&gt;CreateView2DLFromFTA (piTPSViewBU, pt1Coord, &amp;pi2DLayoutView)))
     {
       cout &lt;&lt; &quot;View has been correctly created&quot; &lt;&lt; endl;
       pi2DLayoutView-&gt;Release();pi2DLayoutView=NULL;
      }
      double pt2Coord[2] = {600.0,40.0};
      CATI2DLayoutView *pi2DLayoutView1 = NULL;
      cout &lt;&lt; &quot;Start the 2DL view creation from the 1st 3D FTA Capture&quot; &lt;&lt; endl;
      if (SUCCEEDED(pi2DLSheet-&gt;CreateView2DLFromFTA (piTPSCaptureBU1, pt2Coord, &amp;pi2DLayoutView1)))
      {
        cout &lt;&lt; &quot;View has been correctly created&quot; &lt;&lt; endl;
        pi2DLayoutView1-&gt;Release();pi2DLayoutView1=NULL;
      }
      double pt3Coord[2] = {800.0,40.0};
      CATI2DLayoutView *pi2DLayoutView2 = NULL;
      cout &lt;&lt; &quot;Start the 2DL view creation from the 2nd 3D FTA Capture&quot; &lt;&lt; endl;

      // This view can not be created because the capture is not associated to a view annotation plane
      if (SUCCEEDED(pi2DLSheet-&gt;CreateView2DLFromFTA (piTPSCaptureBU2, pt3Coord, &amp;pi2DLayoutView2)))
      {
        cout &lt;&lt; &quot;View has been correctly created&quot; &lt;&lt; endl;
        pi2DLayoutView2-&gt;Release();pi2DLayoutView2=NULL;
      }
      else
        cout &lt;&lt; &quot;The View can not be created&quot; &lt;&lt; endl;
     }
     pi2DLSheet-&gt;Release();pi2DLSheet=NULL;
   }
...</pre>
<p>The 2D Layout Root aggregates one or several 2DL sheets. A 2DL Sheet aggregates 
one 2DL Main View one 2DL Background View. CATI2DLayout sheets contains methods 
to create 2DL View. The created 2DL View will be automatically aggregated by the 
2DL Sheet.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Saving the Representation Reference and Exiting</h3>
<pre class="code">...
   // 7. Save the Data
  //===============

  if (piPSIRepRef)
  {
    CATListPtrCATBaseUnknown pListToSave ;
    pListToSave.Append(piPSIRepRef);
    CATAdpSaver saver;
    if (FAILED(saver.Save(&amp;pListToSave)))
    {
      cout &lt;&lt; &quot;ERROR saving PLM Data&quot; &lt;&lt; endl;
      rc = 1;
    }
    else
      cout &lt;&lt; &quot;PLM Data saved&quot; &lt;&lt; endl;

    piPSIRepRef-&gt;Release();piPSIRepRef=NULL;
  }

  // 11. Close the PLM session
  //======================
  Bag.RemoveAll();
  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) {
    cout &lt;&lt; &quot;ERROR closing PLM session&quot; &lt;&lt; endl;
  rc =1; 
  }
  else
    cout &lt;&lt; &quot; PLM session closed&quot; &lt;&lt; endl;

  cout &lt;&lt; &quot;CAA2DLCreate2DLViewFromFTA ended&quot; &lt;&lt; endl;
  return 0;
}</pre>
<p>This section represents the usual sequence for saving a newly created CATIA representation 
reference [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the way to:</p>
<ol>
	<li>Open a product reference and retrieve one instance of representation reference.</li>
	<li>Retrieving the TPS Set.</li>
	<li>Retrieving the Part Root from the container.</li>
	<li>Retrieving the FTA components from the Annotation Set.</li>
	<li>Creating 2DLayout View from FTA components.</li>
	<li>Save the drawing representation reference.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAATpiTolerancing/CAATpiTcToc.htm');return false;">
		FT &amp; A</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
