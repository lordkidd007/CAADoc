<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Creating the Fastener Product</title>
<meta content="en-us" http-equiv="Content-Language">
<meta content="text/html; charset=unicode" http-equiv="Content-Type">
<meta name="GENERATOR" content="MSHTML 8.00.6001.18928">
<meta name="ProgId" content="FrontPage.Editor.Document"><link rel="Stylesheet" type=text/css href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>

<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
</head>
<body onload="highlightSearchTerms();">
<table class="DocHeader">
  <tbody>
  <tr>
    <td class="DocHeader1">
      <h1><a name="Top"></a>Creating the Primary-Secondary Fastener 
  Product</h1></td></tr>
  <tr>
    <td class="use">Use Case</td></tr></tbody></table><!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
  <tbody>
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This article discusses the 
      <code><strong>CAAFstPrimarySecondaryFastenerCreation</strong></code> use 
      case. It creates a fastener product (reference and instance) on the user 
      selected products, which are the parts to fasten. </p>
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a> 
        <li><a href="#UseCase">The CAAFstPrimarySecondaryFastenerCreation Use 
        Case</a> 
        <ul>
          <li><a href="#What">What Does CAAFstPrimarySecondaryFastenerCreation 
          Do</a> 
          <li><a href="#How">How to Launch 
          CAAFstPrimarySecondaryFastenerCreation</a> 
          <li><a href="#Where">Where to Find the 
          CAAFstPrimarySecondaryFastenerCreation Code</a> </li></ul>
        <li><a href="#Step">Step-by-Step</a> 
        <li><a href="#InShort">In Short</a> 
        <li><a href="#References">References</a> </li></ul></td></tr></tbody></table><!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to demonstrate the fastener modeler capabilities. 
The primary learnings from the use case are:</p>
<ul>
  <li>Creating a Primary-Secondary fastener product (both reference and 
  instance) which fastens the given parts. 
  <li>Valuating the necessary attributes on the fastener instance. 
  <li>Creation of fastener components and setting its links to fastener 
  instance. 
  <li>Creation of engineering connection associated to fastener instance and 
  setting the fastener realization &amp; zone fasten links. 
  <li>Creation of Secondary fastener instance inside Primary reference and 
  creating its engineering connection and links. </li></ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFstPrimarySecondaryFastenerCreation Use Case</h2>
<p>CAAFstPrimarySecondaryFastenerCreation is a use case of the 
CAAPLMFmaModelerItf.edu framework that illustrates CATPLMFmaModelerInterfaces 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFstPrimarySecondaryFastenerCreation Do</h3>
<p>The use case is an interactive command that prompts the user to select 2 
products and then it creates a Primary-Secondary fastener product fastening the 
selected products.In the figure below, the Primary fastener product is marked by 
blue box, the Secondary fastener instance is marked by purple box and the selected 
products are marked by red box. Successful creation of fastener product message 
is displayed to the user on the top right side.</p>
<table>
  <caption><a name="Fig1"></a>Fig. 1 Primary-Secondary Fastener Product Created</caption>
  <tbody>
  <tr>
    <td><img alt="Fastener Product created" src="images/CAAFstPrimarySecondaryFastenerCreation_Output.jpg"></td></tr></tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFstPrimarySecondaryFastenerCreation</h3>
<p>To launch CAAFstPrimarySecondaryFastenerCreation, you will need to set up the build time 
environment, then compile CAAPLMFmaModelerItf.edu FW along with its 
prerequisites, set up the run time environment, and then execute the use case 
[<a href="#References">2</a>].</p>
<p>Before launching the use case, import the product structure data in your 
database: 
<strong>CAAPLMFmaModelerItf.edu\InputData\CAAFstFastenerModeler.3dxml</strong></p>
<p>The steps for launching the use case is as follows:</p>
<ul>
  <li>Launch the CATIA session 
  <li>Load the Mechanical -&gt; Assembly Design workbench 
  <li>Right click on the assembly workshop to locate the CAA Fastener Samples 
  toolbar(See <a href="#Fig2">Fig: 2</a>) 
  <li>Launch the "Create Primary-Secondary Fastener" use case interactive command 
  <li>Select "CAAFstProduct1.1' as the first product to fasten(See <a 
  href="#Fig3">Fig: 3</a>) 
  <li>Select "CAAFstProduct2.1' as the second product to fasten. Primary-Secondary fastener 
  product is successfully created. A corresponding message is displayed to the 
  user (See <a href="#Fig4">Fig: 4</a>) </li></ul>
<table>
  <caption><a name="Fig2"></a>Fig 2: CAA Fastener Samples Toolbar</caption>
  <tbody>
  <tr>
    <td><img alt="CAA Fastener Samples Toolbar" src="images/CAAFstUseCaseCommands_Toolbar.jpg"></td></tr></tbody></table>
<table>
  <caption><a name="Fig3"></a>Fig 3: Selection of CAAFstProduct1.1</caption>
  <tbody>
  <tr>
    <td><img alt="Selection of CAAFstProduct1.1" src="images/CAAFstProduct1_Selection_PrimarySecondary.jpg"></td></tr></tbody></table>
<table>
  <caption><a name="Fig4"></a>Fig 4: Selection of CAAFstProduct2.1 &amp; Primary-Secondary Fastener 
  Product Creation</caption>
  <tbody>
  <tr>
    <td><img alt="Selection of CAAFstProduct2.1 &amp; Fastener Product Creation" src="images/CAAFstProduct2_Selection.jpg"></td></tr></tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFstPrimarySecondaryFastenerCreation Code</h3>
<p>The CAAFstPrimarySecondaryFastenerCreation use case is made of:</p>
<ul>
  <li>A main program located in the CAAFstPrimarySecondaryFastenerCreation.m module of the 
  CAAPLMFmaModelerItf.edu framework: 
  <p><code>InstallRootFolder\CAADoc\CAAPLMFmaModelerItf.edu\CAAFstPrimarySecondaryFastenerCreation.m\</code></p>
  <li>A service class located in the CAAFstFastenerServices.m module of the 
  CAAPLMFmaModelerItf.edu framework: 
  <p><code>InstallRootFolder\CAADoc\CAAPLMFmaModelerItf.edu\CAAFstFastenerServices.m\</code></p>
  <li>An input 3D XML data file <strong>CAAFstFastenerModeler.3dxml</strong> 
  located in a subdirectory of the CAAPLMFmaModelerItf.edu framework: 
  <p><code>InstallRootFolder\CAADoc\CAAPLMFmaModelerItf.edu\InputData\</code></p></li></ul>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Model"></a>Primary-Secondary Fastener Model Overview</h3>
<p>The diagram below, shows Primary-Secondary Fastener Model. To understad this model, one must know
the standard Fastener Model </code> [<a href="#References">1</a>]</p>
<table>
  <caption>Primary-Secondary Fastener Model</caption>
  <tbody>
  <tr>
    <td><img alt="Fastener Product created" src="images/CAAFstPrimarySecondaryModel.jpg"></td></tr></tbody></table>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are fifteen logical steps in CAAFstPrimarySecondaryFastenerCreation:</p>
<ol>
  <li><a href="#Step1">Building the State Chart Diagram</a> 
  <li><a href="#Step2">Selecting the Products to Fasten</a> 
  <li><a href="#Step3">Getting the Fastener Context</a> 
  <li><a href="#Step4">Creating the Fastener Product</a> 
  <li><a href="#Step5">Setting the Fastener Diameter</a> 
  <li><a href="#Step6">Creating the Fastener Engineering Connection</a> 
  <li><a href="#Step7">Creating the Fastener Components</a> 
  <li><a href="#Step8">Setting the Fastener Component Links</a> 
  <li><a href="#Step9">Establishing the Fastener Realization &amp; Fasten 
  Links</a> 
  <li><a href="#Step10">Setting the Fastener Realization Link</a> 
  <li><a href="#Step11">Setting the Fasten Links</a> 
  <li><a href="#Step12">Creating the Secondary Fastener Product</a> 
  <li><a href="#Step13">Creating engineering connection (MCX2) under Primary Fastener reference</a> 
  <li><a href="#Step14">Creating of engineering connection (MCXX) under Root product and set its link with MCX2</a> 
  <li><a href="#Step15">Displaying the Execution Status Message of the 
  Command</a> </li></ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Building the State Chart Diagram</h3>
<table>
  <caption><a name="Fig5"></a>Fig 5: CAAFstFastenerCreation: State Chart 
  Diagram</caption>
  <tbody>
  <tr>
    <td><img alt="CAAFstFastenerCreation: State Chart Diagram" src="images/CAAFstFastenerCreation_StateChartDiagram.jpg"></td></tr></tbody></table><pre class="code">...
void CAAFstPrimarySecondaryFastenerCreationCmd::BuildGraph ()
{ 
  // Create States
  CATDialogState * pInitialState = GetInitialState("InitialState");
  CATAssert(pInitialState != NULL);
  CATDialogState * pPartState = AddDialogState("PartState");
  CATAssert(pPartState != NULL);
  
  // Create selection agents
  _pPartAgent = new CATPathElementAgent ("PartAgent");
  _pPartAgent-&gt;AddElementType(CATIPrdObject::ClassName());
  _pPartAgent-&gt;SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithPSOHSO);  

  //Add agents to states
  pInitialState-&gt;AddDialogAgent(_pPartAgent);
  pPartState-&gt;AddDialogAgent(_pPartAgent);
  
  //Define transitions
  AddTransition (pInitialState,
                 pPartState,
                 AndCondition(IsOutputSetCondition(_pPartAgent),
                              NotCondition((ConditionMethod)&amp;CAAFstPrimarySecondaryFastenerCreationCmd::IsFastenerProduct)),
                 Action((ActionMethod)&amp;CAAFstPrimarySecondaryFastenerCreationCmd::Act_FirstPartSelection));

  AddTransition (pPartState,
                 NULL,
                 AndCondition(IsOutputSetCondition(_pPartAgent),
                              NotCondition((ConditionMethod)&amp;CAAFstPrimarySecondaryFastenerCreationCmd::IsFastenerProduct)),
                 Action((ActionMethod)&amp;CAAFstPrimarySecondaryFastenerCreationCmd::Act_SecondPartSelection));    
}
...
</pre>
<p>In this section:</p>
<ol>
  <li>A <code>CATPathElementAgent</code> is created to get the selected products 
  and <em>CATIPrdObject</em> is the corresponding element type added. 
  <li>During each selection, the code checks whether the selected product is a 
  non-fastener product. In case of fastener product selection, an error is 
  displayed and the user has to re-select a non-fastener product to fasten. 
</li></ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Selecting the Products to Fasten</h3><pre class="code">...
CATBoolean CAAFstPrimarySecondaryFastenerCreationCmd::Act_FirstPartSelection (void * ipData)
{
  CATAssert(_pPartAgent);
  _pFirstPartPath = _pPartAgent-&gt;GetValue();
  if(NULL != _pFirstPartPath)
  {
    _pFirstPartPath-&gt;InitToLeafElement();    
    _pFirstPartPath-&gt;AddRef();
  }
  _pPartAgent-&gt;InitializeAcquisition();
  return (TRUE);
}
CATBoolean CAAFstPrimarySecondaryFastenerCreationCmd::Act_SecondPartSelection (void * ipData)
{
  CATAssert(_pPartAgent);
  _pSecondPartPath = _pPartAgent-&gt;GetValue();
  if(NULL != _pSecondPartPath)
  {
    _pSecondPartPath-&gt;InitToLeafElement();    
    _pSecondPartPath-&gt;AddRef();
  }
  _pPartAgent-&gt;InitializeAcquisition();
  ...
}
...
</pre>
<p>The code in both the action methods basically stores the corresponding 
<code>CATPathElement</code> of the selected products.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Getting the Fastener Context</h3><pre class="code">...
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::GetRootProduct (CATBaseUnknown ** opRootProduct)
{
  ...
  CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
  if (NULL != pEditor)
  {
    CATPathElement UIActivePath = pEditor -&gt; GetUIActiveObject();
    CATBaseUnknown * pActiveProduct = (CATBaseUnknown*) (UIActivePath.FindElement(IID_CATIPLMProducts));
    if(NULL != pActiveProduct)
    {
      CATIPrdObject * piRootPrdObject = NULL;
      rc = pActiveProduct -&gt; QueryInterface(IID_CATIPrdObject, (void **)&amp;piRootPrdObject);     
      if (SUCCEEDED(rc))
      {
        rc = piRootPrdObject -&gt; GetReferenceObject ((CATBaseUnknown*&amp;)*opRootProduct, IID_CATBaseUnknown);
        ...
      }
      ...
    }
    ...
  }  
  return rc;
} 
...</pre>
<p>The fastener product is always created in a common context with respect to 
the selected products. In our use case example, the selected products are under 
the root product. So, before creating the fastener product, this root product is 
retrieved from the active object of the editor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Primary Fastener Product</h3><pre class="code">...
//----------------------------------------------------------------------------------
// CreatePrimaryFastenerInstance
//---------------------------------------------------------------------------------
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::CreatePrimaryFastenerInstance(CATBaseUnknown ** opFastenerInstance, 
                                                                                 CATBaseUnknown * ipRefProduct)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == opFastenerInstance) || (NULL == ipRefProduct)) return rc;
    
  *opFastenerInstance = NULL;
  //1. Create product reference
  CATIPrdFactory * piPrdFactory = NULL;    
  rc = CATPsiPLMFactory::CreateFactoryObject(IID_CATIPrdFactory, (void**)&amp;piPrdFactory);  
  CATIPLMProducts * piNewPLMProducts = NULL; 
  if (SUCCEEDED(rc) &amp;&amp; NULL != piPrdFactory)
  {                                             
    rc = piPrdFactory-&gt;CreateProductReference (piNewPLMProducts);
    ...
  }  

  //2. Add to root reference product
  if (SUCCEEDED(rc) &amp;&amp; (NULL != piNewPLMProducts))
  {
    CATIPLMProducts * piPLMProductsRoot = NULL;
    rc = ipRefProduct-&gt;QueryInterface(IID_CATIPLMProducts, (void**)&amp;piPLMProductsRoot);
    if (SUCCEEDED(rc) &amp;&amp; (NULL != piPLMProductsRoot))
    {
      rc = piPLMProductsRoot-&gt;AddProduct(piNewPLMProducts, *opFastenerInstance);
      ...
    }
    ...
  }  
 
  //3. Extend the product to support the fastener extension
  if(SUCCEEDED(rc) &amp;&amp; (NULL != *opFastenerInstance))
  {
    CATIFmaPLMFactoryServices * piFmaPLMFactoryServices = NULL;
    rc = CATFmaServicesAccess::CreateFmaFactoryServices(&amp;piFmaPLMFactoryServices);
    if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaPLMFactoryServices))
    {
      CATUnicodeString strFeatureType2 = "Fst_SpotAssy";
      CATUnicodeString strProcessType1 = "Bolt";
      CATUnicodeString strProcessType2 = "CL1"; 
      CATUnicodeString strCatalogName = "CAAFstSpotAssyCatalog.CATfct";
      CATUnicodeString strClientID = "FstCAAClientID";      
      rc = piFmaPLMFactoryServices-&gt;ExtendPrdAsFastener(*opFastenerInstance, 
                                                        CATFmaSpotAssy, 
                                                        strFeatureType2, 
                                                        strProcessType1, 
                                                        strProcessType2, 
                                                        strCatalogName, 
                                                        strClientID);
      ...
    }    
  }
  else
  {
    rc = E_FAIL;
  }
  return rc;
}
...</pre>
<p>The fastener product is created in 3 steps:</p>
<ol>
  <li>Create a reference product using the product factory. 
  <li>Add the created product under the root product retrieved in <a 
  href="#Step3">Step 3</a> to get the product instance. 
  <li>Using the fastener factory <em>CATIFmaPLMFactoryServices</em>, the product 
  instance is extended as the fastener product instance. The 
  <code>ExtendPrdAsFastener(...)</code> method creates a CATIA Fastener in the 
  <em>CATFastenerCont</em> container of the new PLM Fastener Representation 
  associated to the input product. The newly created Fastener is exposed by the 
  input product thanks to the creation of a PLM Fastener Extension whose Type 
  and Fastener Type descriptor are set depending on the input PLM Fastener Type 
  (input <code>CATFmaSpotAssy</code>, <code>strFeatureType2</code>, 
  <code>strProcessType1</code> and <code>strProcessType2</code> parameters). The 
  fastener feature to instantiate is accessed from the 
  <code>strCatalogName</code> catalog using the <code>strClientID.</code> 
</li></ol>
<p><strong>Note</strong></p>
<ul>
  <li>In this use case, the <em>Fst_SpotAssy</em> CAA Fastener feature start-up 
  is located in the <em>CAAFstSpotAssyCatalog.CATfct</em> catalog file which can 
  be found at <code>InstallRootFolder\intel_a\code\resources\graphic</code>. 
  <li>For the successful creation of fastener product, please make sure that the 
  <code>Fastener Standard</code> directory is set to 
  <code>InstallRootFolder\intel_a\reffiles\FstStandards\Custom</code>. It can be 
  set in <code>Tools\Options\Infrastructure\Fastener 
  Infrastructure\General</code> tab page 
  <table>
    <tbody>
    <tr>
      <td><img alt="Fastener Product created" src="images/CAAFstToolsOptions.jpg"></td></tr></tbody></table>This directory 
  contains customized <em>Fastener standard</em> file 
  (<em>Fst_Standard.txt</em>) and the reference fastener type file 
  (<em>Fst_SpotAssy!CAAFst_SpotAssy_Bolt!CL1.txt</em>) 
  <li>The fastener Standard is a customizable set-up table that enables the 
  specification of list of Company Standard Reference Types, Company Standard 
  Fastener Types Display &amp; FTA Formatting and the Company Standard fastener 
  design naming and check rules. 
  <li>The Reference Fastener Type is a customizable Design set-up table used to 
  assist the user to valuate Fastener Set specification values. It is customized 
  to capture Fastener Classifications attributes names &amp; values and Fastener 
  components shape characteristics &amp; positioning rules. </li></ul>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting the Fastener Diameter</h3><pre class="code">...
HRESULT CAAFstFastenerServices::SetFastenerDiameter (CATBaseUnknown *&amp; ipFastener, double &amp; iDiameter)
{
  HRESULT rc = E_INVALIDARG;
  if(NULL == ipFastener) return rc;

  CATIFmaPLMSpotFastener * piFmaPLMSpotFastener = NULL;
  rc = ipFastener -&gt; QueryInterface(IID_CATIFmaPLMSpotFastener,(void**)&amp;piFmaPLMSpotFastener);  
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaPLMSpotFastener))
  {    
    rc = piFmaPLMSpotFastener -&gt; SetDiameter (iDiameter);
    ...
  }  

  return rc;
}
...</pre>
<p>The <em>CATIFmaPLMSpotFastener</em> interface, implemented on the fastener 
product, is used to set the PLM exposed Fastener attribute diameter.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the Fastener Engineering Connection</h3><pre class="code">...
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::CreateEngineeringConnection (CATBaseUnknown ** opEngineeringConnection, 
                                                                                CATBaseUnknown * ipRootReference)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == opEngineeringConnection) || (NULL == ipRootReference)) return rc;
  
  *opEngineeringConnection = NULL;
  CATIFmaPLMFactoryServices * piFmaPLMFactoryServices = NULL;  
  rc = CATFmaServicesAccess::CreateFmaFactoryServices(&amp;piFmaPLMFactoryServices);
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaPLMFactoryServices))
  {    
    rc = piFmaPLMFactoryServices-&gt;CreateMCXAsFastener(opEngineeringConnection, ipRootReference);
    ...
  }
  return rc;
}
...</pre>
<p>The <code>CATIFmaPLMFactoryServices::CreateMCXAsFastener(...)</code> method 
creates the engineering connection associated to a unique fastener instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating the Fastener Components</h3><pre class="code">...
HRESULT CAAFstFastenerServices::CreateComponents(CATListValCATBaseUnknown_var &amp; olFastenerComponentInstances,
                                                 CATBaseUnknown * ipFastenerProductInstance)
{
  HRESULT rc = E_INVALIDARG;
  if(NULL == ipFastenerProductInstance) return rc;
    
  CATUnicodeString strVersion = "---";

  //Get Screw &amp; nut component instance
  CATUnicodeString strScrew_ExternalID = "CAAFstScrew_Component";
  CATUnicodeString strNut_ExternalID = "CAAFstNut_Component";
  CATIPLMProducts * piScrewCompRef = NULL;  
  CATIPLMProducts * piNutCompRef = NULL;
  rc = CAAAdpOpenProduct("", "", strScrew_ExternalID, strVersion, IID_CATIPLMProducts, (void**)&amp;piScrewCompRef, TRUE);
  if(SUCCEEDED(rc))
  {
    //Get Nut component instance
    rc = CAAAdpOpenProduct("", "", strNut_ExternalID, strVersion, IID_CATIPLMProducts, (void**)&amp;piNutCompRef, TRUE);   
  }

  CATBaseUnknown * pFastenerReference = NULL;  
  CATBaseUnknown * piScrewComponentInstance = NULL;
  CATBaseUnknown * piNutComponentInstance = NULL;  
  if(SUCCEEDED(rc))
  {
    //Get Fastener Reference Product
    CATIPrdObject_var spFastenerInstance = ipFastenerProductInstance;
    if(NULL_var != spFastenerInstance)
    {
      rc = spFastenerInstance&gt;GetReferenceObject(pFastenerReference);    
    }

    //Add components in fastener reference product
    CATIPLMProducts_var spPLMFastenerProduct = pFastenerReference;
    if(SUCCEEDED(rc) &amp;&amp; (NULL_var != spPLMFastenerProduct))
    {
      rc = spPLMFastenerProduct&gt;AddProduct(piScrewCompRef, piScrewComponentInstance);
      if(SUCCEEDED(rc) &amp;&amp; (NULL != piScrewComponentInstance))
      {
        olFastenerComponentInstances.Append(piScrewComponentInstance);
        rc = spPLMFastenerProduct&gt;AddProduct(piNutCompRef, piNutComponentInstance);
        if(SUCCEEDED(rc) &amp;&amp; (NULL != piNutComponentInstance))
        {
          olFastenerComponentInstances.Append(piNutComponentInstance);
        }
      }
    }
  }
  //Report error message if component loading fails
  else
  {
    CATUnicodeString strStatus = "One or more fastener component products cannot be loaded in the session! \nPlease ensure the fastener component products exist in the database.";
    CAAFstFastenerServices::DisplayPopup(strStatus, "Fastener Service");
  }
  ...
  return rc;
}
...</pre>
<p>The fastener component information is basically set in the PLM Reference 
Fastener Type template used during the creation of fastener product (refer <a 
href="#Step4">Step 4</a>). In this use case, the fastener product is made up of 
two components (Screw and Nut).These fastener components are created under the 
fastener product instance in the following manner:</p>
<ol>
  <li>Instantiating the Screw and Nut reference fastener components stored in 
  database and returning their instances using 
  <code>CAAAdpOpenProduct(...)</code> method [<a href="#3">3</a>]. 
  <li>Getting the fastener reference product from its instance. 
  <li>Adding the Screw and Nut component instances under the reference fastener 
  product. </li></ol>
<p>Note that the if the component reference products are not found in the 
database, a corresponding error message is displayed to the user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Setting the Fastener Component Links</h3><pre class="code">...
HRESULT CAAFstFastenerServices::SetComponentLinks(CATListValCATBaseUnknown_var &amp; ilFastenerComponentInstances,
                                                  CATBaseUnknown * ipFastenerProductInstance)
{
  HRESULT rc = E_INVALIDARG;
  if(NULL == ipFastenerProductInstance) return rc;
  int size = ilFastenerComponentInstances.Size();
  if(0 == size) return E_FAIL;
      
  CATIFmaPLMFastenerBrowse * piFmaPLMFastenerBrowse = NULL;
  CATIFmaComponentsBrowse * piFmaFastenerComponentsBrowse = NULL;
  CATBaseUnknown * pFstFeature = NULL;
  int nbComponents = 0;
  rc = ipFastenerProductInstance-&gt;QueryInterface(IID_CATIFmaPLMFastenerBrowse, (void**)&amp;piFmaPLMFastenerBrowse);
  if(SUCCEEDED(rc))
  {    
    rc = piFmaPLMFastenerBrowse-&gt;GetFastenerRefRepresentationFeature(&amp;pFstFeature, IID_CATBaseUnknown);
    if(SUCCEEDED(rc) &amp;&amp; (NULL != pFstFeature))
    {      
      //Get CATIFmaComponentsBrowse interface
      rc = pFstFeature-&gt;QueryInterface(IID_CATIFmaComponentsBrowse, (void**)&amp;piFmaFastenerComponentsBrowse); 
      if(SUCCEEDED(rc))
      {
        rc = piFmaFastenerComponentsBrowse-&gt;GetComponentAccessCount(&amp;nbComponents);
        if(nbComponents != size)  rc = E_FAIL;
      }
      ...
    }
    ...
  }  

  if(SUCCEEDED(rc))
  {
    //Get Fastener Reference Product
    CATIPrdObject_var spFastenerInstance = ipFastenerProductInstance;  
    CATIPLMComponent * piFastenerReferenceComponent = NULL;
    CATBaseUnknown * pFastenerReference = NULL;
    if(NULL_var != spFastenerInstance)
    {
      rc = spFastenerInstance-&gt;GetReferenceObject(pFastenerReference);
      if(SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerReference))
      {
        rc = pFastenerReference-&gt;QueryInterface(IID_CATIPLMComponent, (void**) &amp;piFastenerReferenceComponent);
        ...
      }
    }    
    //Set the component links
    for(int index=1; index &lt;= nbComponents; index++)
    { 
      CATIFmaComponentBrowse * piFmaComponentBrowse = NULL;      
      //Create Omb Object
      CATBaseUnknown* pComponentInstance = (CATBaseUnknown*)(ilFastenerComponentInstances[index]);
      CATOmbObjectInContext * pComponentOmbObject = NULL;
      rc = GetOmbObjectInContext(pComponentOmbObject, pComponentInstance, piFastenerReferenceComponent);
      //Create Link
      if(SUCCEEDED(rc) &amp;&amp; (NULL_var != pComponentOmbObject) &amp;&amp; (NULL != piFmaFastenerComponentsBrowse))
      { 
        rc = piFmaFastenerComponentsBrowse-&gt;GetComponentAccess((CATBaseUnknown**)&amp;piFmaComponentBrowse, index);
        if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaComponentBrowse))
        {          
          CATIFmaComponent * piFmaComponent = NULL;
          rc = piFmaComponentBrowse-&gt;QueryInterface(IID_CATIFmaComponent, (void**)&amp;piFmaComponent);
          if(SUCCEEDED(rc))
          {            
            rc = piFmaComponent-&gt;SetLinked3DComponentShape(pComponentOmbObject);
            ...
          }          
          ...
        }
      }      
    }
  }
  ...
  return rc;
}

HRESULT CAAFstFastenerServices::GetOmbObjectInContext (CATOmbObjectInContext *&amp; opOmbObjectInContext, 
                                                       CATBaseUnknown         * ipProductInstance,
                                                       CATIPLMComponent       * ipiPLMComponent)
{
  HRESULT rc = E_INVALIDARG;

  if(NULL != ipProductInstance)
  {
    CATPathElement * pProductInstancePath = NULL;
    rc = CreatePathElement(&amp;pProductInstancePath, ipProductInstance);
    if(SUCCEEDED(rc) &amp;&amp; (NULL != pProductInstancePath))
    {
      CATIPrdObjectInContextUI * piPrdObjInContextUI = NULL; 
      rc = ::CATInstantiateComponent("CATPrdUIFactory", IID_CATIPrdObjectInContextUI, (void**) &amp;piPrdObjInContextUI);
      if(SUCCEEDED(rc) &amp;&amp; (NULL != piPrdObjInContextUI))
      {
        rc = piPrdObjInContextUI-&gt;ComputeObjectInContextFromPathElement(*pProductInstancePath, TRUE, ipiPLMComponent, opOmbObjectInContext); 
        ..
      }
      ...
    }
  }
  return rc;
}
...</pre>
<p>In this section, the code creates the fastener component links with its 
fastener instance in the following way:</p>
<ol>
  <li>Getting the fastener feature <em>Fst_SpotAssy_Base</em> located inside the 
  fastener representation using the 
  <code>CATIFmaPLMFastenerBrowse::GetFastenerRefRepresentationFeature(...)</code> 
  method. 
  <li>Getting the number of components information using the 
  <em>CATIFmaComponentsBrowse</em> interface. This count should match the count 
  of fastener component instances list. 
  <li>Creating the CATOmbObjectInContext information for each component instance 
  in the list. The 
  <code>CAAFstFastenerServices::GetOmbObjectInContext(...)</code> method creates 
  a path element to the fastener component instance and then computes the 
  CATOmbObjectInContext from it. 
  <li>Getting the fastener component feature <em>Fst_Component</em> stored on 
  the fastener feature <em>Fst_SpotAssy_Base</em> using the 
  <code>CATIFmaComponentsBrowse::GetComponentAccess(...)</code> method. Using 
  <code>QueryInterface</code> method on the returned object, get the 
  <em>CATIFmaComponent</em> interface which is also implemented on the fastener 
  component feature <em>Fst_Component</em>. 
  <li>Setting the component link using the 
  <code>CATIFmaComponent::SetLinked3DComponentShape(...)</code> method and 
  pasting the component CATOmbObjectInContext information created earlier to it. 
  </li></ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Establishing the Fastener Realization &amp; Fasten 
Links</h3><pre class="code">...
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::ConnectEngineeringConnection (CATBaseUnknown * ipEngineeringConnection, 
                                                                                 CATBaseUnknown * ipRootReference, 
                                                                                 CATBaseUnknown * ipFastenerInstance)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == ipEngineeringConnection) || (NULL == ipRootReference) || (NULL == ipFastenerInstance)) return rc;
  
  //1. Access Coupling
  CATIFmaCoupling * piFmaCoupling = NULL;  
  CATIFmaConnectionServices * piFmaConnectServices = NULL;
  rc = CATFmaServicesAccess::CreateFmaConnectionServices(&amp;piFmaConnectServices);
  if( SUCCEEDED(rc) &amp;&amp; (NULL != piFmaConnectServices))
  {
    rc = piFmaConnectServices-&gt;GetFstCoupling((CATBaseUnknown **) &amp;piFmaCoupling, ipEngineeringConnection, IID_CATIFmaCoupling);
    ...
  }

  //2. Set realization &amp; fasten links 
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaCoupling))
  {        
    rc = SetRealizationLink(piFmaCoupling, ipRootReference, ipFastenerInstance);  //Realization Links         
    if(SUCCEEDED(rc))
    {
      rc = SetFastenLinks(piFmaCoupling, ipRootReference); //Fasten Links
    }
  }
  ...
  return rc;
}  
...</pre>
<p>The <em>Fst_Coupling</em> feature is accessed from the engineering connection 
using the <em>CATIFmaConnectionServices</em> interface It returns the 
<em>CATIFmaCoupling</em> pointer which is necessary for creating and storing 
realization and fasten links on the <em>Fst_Coupling</em> feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Setting the Fastener Realization Link</h3><pre class="code">...
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::SetRealizationLink (CATIFmaCoupling * ipFmaCoupling,                                                       
                                                                       CATBaseUnknown * ipRootReference, 
                                                                       CATBaseUnknown * ipFastenerInstance)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == ipFmaCoupling) || (NULL == ipRootReference) || (NULL == ipFastenerInstance)) return rc;
  
  //1. Get the Realization Omb Object
  CATOmbObjectInContext * pRealizationOmbObject = NULL;
  rc = CAAFstFastenerServices::GetOmbObjectInContext(pRealizationOmbObject, ipFastenerInstance, ipiRootPLMComponent);
  
  //2. Set the realization link
  if (SUCCEEDED(rc) &amp;&amp; (NULL_var != pRealizationOmbObject ))
  {
    rc = ipFmaCoupling-&gt;SetFastenerRealization(pRealizationOmbObject );    
  }
  ...
  
  return rc;
}
...</pre>
<p>The fastener realization link is created in the following manner:</p>
<ul>
  <li>Creating the CATOmbObjectInContext information for fastener instance. The 
  <code>CAAFstFastenerServices::GetOmbObjectInContext(...)</code> method creates 
  a path element to the fastener instance and then computes the 
  CATOmbObjectInContext from it. 
  <li>Setting this fastener instance CATOmbObjectInContext information on the 
  <em>Fst_Coupling</em> feature using the 
  <code>CATIFmaCoupling::SetFastenerRealization(...)</code> method. </li></ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Setting the Fasten Links</h3><pre class="code">...
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::SetFastenLinks(CATIFmaCoupling * ipFmaCoupling,                                                  
                                                                  CATBaseUnknown * ipRootReference)                                                     
{
  HRESULT rc = E_INVALIDARG;  
  if((NULL == ipFmaCoupling) || (NULL == ipRootReference)) 
  {
    return rc;
  }
 
  for(int zoneIndex=1; zoneIndex&lt;=2; zoneIndex++)
  {
    CATPathElement * pCurrentZonePath  = NULL;
    if(1 == zoneIndex)
    {
      pCurrentZonePath = _pFirstPartPath;
    }
    else
    {
      pCurrentZonePath = _pSecondPartPath;
    }
        
    //1. Create Zone OmbObject
    CATOmbObjectInContext * pZoneOmbObject = NULL;
    if(NULL != pCurrentZonePath)
    {      
      CATIPrdObjectInContextUI * piPrdObjInContextUI = NULL; 
      rc = ::CATInstantiateComponent("CATPrdUIFactory", IID_CATIPrdObjectInContextUI, (void**) &amp;piPrdObjInContextUI);
      if(SUCCEEDED(rc) &amp;&amp; (NULL != piPrdObjInContextUI))
      {
        rc = piPrdObjInContextUI-&gt;ComputeObjectInContextFromPathElement(*pCurrentZonePath, TRUE, ipiRootPLMComponent, pZoneOmbObject); 
        ...
      }
    }    
    //2. Add Zone
    if(SUCCEEDED(rc) &amp;&amp; (NULL != pZoneOmbObject))
    {
      CATIFmaJoinedZoneAccess * piFmaJoinedZoneAccess = NULL;
      rc = ipFmaCoupling-&gt;AddZoneAccess(zoneIndex, &amp;piFmaJoinedZoneAccess);
      if(SUCCEEDED(rc) &amp;&amp; (NULL!=piFmaJoinedZoneAccess))
      {
        rc = piFmaJoinedZoneAccess-&gt;SetJoinedZone(pZoneOmbObject);
        if(SUCCEEDED(rc))
        {
          CATIFmaJoinedZoneAccessBrowse * piFmaZoneBrowse = NULL;
          rc = piFmaJoinedZoneAccess-&gt;QueryInterface(IID_CATIFmaJoinedZoneAccessBrowse, (void **) &amp;piFmaZoneBrowse);
          if(SUCCEEDED(rc))
          {
            //3. Set the integer parameter (Zone Index)
            CATICkeParm * piNumParm = NULL;
            rc = piFmaZoneBrowse-&gt;GetNumberingAttribute(&amp;piNumParm);
            if(SUCCEEDED(rc))
            {
              if(NULL != piNumParm)
              {
                piNumParm-&gt;Valuate(zoneIndex);
                ...
              }
            }
            ...
          }
        }
        ...
      }
    }    
  }

  return rc;
}
...</pre>
<p>The fasten links are created for each of the product to fasten. In this use 
case, 2 fastener links are created in the following manner:</p>
<ul>
  <li>Computing the zone CATOmbObjectInContext information in the context of the 
  root product using the <code>CATPathElement</code> retrieved in <a 
  href="#Step2">Step 2</a> for each selected product. 
  <li>Creating the zone feature <em>Fst_Zone</em> on the fastener coupling 
  feature <em>Fst_Coupling</em> using the 
  <code>CATIFmaCoupling::AddZoneAccess(...)</code> method which returns the 
  <em>CATIFmaJoinedZoneAccess</em> interface pointer. 
  <li>Creating the fasten link using the 
  <code>CATIFmaJoinedZoneAccess::SetJoinedZone(...)</code> method. 
  <li>Getting the numbering attribute on the zone using the 
  <code>CATIFmaJoinedZoneAccessBrowse::GetNumberingAttribute(...)</code> and 
  then setting the right integer value on the returned <em>CATICkeParm</em> 
  pointer. </li></ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Creating the Secondary Fastener Product</h3><pre class="code">...
//----------------------------------------------------------------------------------
// CreateSecondaryFastenerInstance
//---------------------------------------------------------------------------------
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::CreateSecondaryFastenerInstance(CATBaseUnknown ** opSecFastenerInstance,
                                                                                   CATBaseUnknown *  ipPrimaryFastenerInst)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == opSecFastenerInstance) || (NULL == ipPrimaryFastenerInst)) return rc;

  *opSecFastenerInstance = NULL;

  //1. Get reference product of Primary fastener
  CATIPrdObject * pFastenerPrdObject = NULL;
  rc = ipPrimaryFastenerInst -&gt; QueryInterface(IID_CATIPrdObject, (void **)&amp;pFastenerPrdObject);
  if (SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerPrdObject))
  {
    CATBaseUnknown * pFastenerRef = NULL;
    rc = pFastenerPrdObject -&gt; GetReferenceObject ((CATBaseUnknown*&amp;)pFastenerRef, IID_CATBaseUnknown);
    ...
	
    if(SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerRef))
    {
      //2. Create product reference
      CATIPrdFactory * piPrdFactory = NULL;    
      rc = CATPsiPLMFactory::CreateFactoryObject(IID_CATIPrdFactory, (void**)&amp;piPrdFactory);  
      CATIPLMProducts * piNewPLMProducts = NULL; 
      if (SUCCEEDED(rc) &amp;&amp; NULL != piPrdFactory)
      {                                             
        rc = piPrdFactory-&gt;CreateProductReference (piNewPLMProducts);
        ...
      }  

      //3. Instantiate this reference inside Primary fastener reference
      if (SUCCEEDED(rc) &amp;&amp; (NULL != piNewPLMProducts))
      {
        CATIPLMProducts * piPLMProductsRoot = NULL;
        rc = pFastenerRef-&gt;QueryInterface(IID_CATIPLMProducts, (void**)&amp;piPLMProductsRoot);
        if (SUCCEEDED(rc) &amp;&amp; (NULL != piPLMProductsRoot))
        {
          rc = piPLMProductsRoot-&gt;AddProduct(piNewPLMProducts, *opSecFastenerInstance);
          ...
        }
        ...
      }  

      //4. Extend the product to support the fastener extension
      if(SUCCEEDED(rc) &amp;&amp; (NULL != *opSecFastenerInstance))
      {
        CATIFmaPLMFactoryServices * piFmaPLMFactoryServices = NULL;
        rc = CATFmaServicesAccess::CreateFmaFactoryServices(&amp;piFmaPLMFactoryServices);
        if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaPLMFactoryServices))
        {
          CATUnicodeString strProcessType1 = "Rivet";
          CATUnicodeString strProcessType2 = "CL0";
          CATUnicodeString strFeatureType2 = "CAAFst_SpotAssy";
          CATUnicodeString strCatalogName = "CAAFstSpotAssyCatalog.CATfct";
          CATUnicodeString strClientID = "FstCAAClientID";
          rc = piFmaPLMFactoryServices-&gt;ExtendPrdAsFastener(*opSecFastenerInstance,
                                                            CATFmaSpotAssy, 
                                                            strFeatureType2, 
                                                            strProcessType1, 
                                                            strProcessType2, 
                                                            strCatalogName, 
                                                            strClientID);
          ...
        }    
      }
      else
      {
        rc = E_FAIL;
      }
      ...
    }
  }
  return rc;
}
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Creating engineering connection (MCX2) under Primary Fastener reference</h3><pre class="code">...
//----------------------------------------------------------------------------------
// CreateEngineeringConnectionMCX2
//---------------------------------------------------------------------------------
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::CreateEngineeringConnectionMCX2(CATBaseUnknown ** opMCX2,
                                                                                   CATBaseUnknown *  ipSecFastenerInstance,
                                                                                   CATBaseUnknown *  ipPrimaryFastenerInst,
                                                                                   CATBaseUnknown *  ipComponentInstance)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == opMCX2) || (NULL == ipSecFastenerInstance) || (NULL == ipPrimaryFastenerInst) || (NULL == ipComponentInstance)) return rc;

  CATIPrdObject * pFastenerPrdObject = NULL;
  rc = ipPrimaryFastenerInst -&gt; QueryInterface(IID_CATIPrdObject, (void **)&amp;pFastenerPrdObject);
  if (SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerPrdObject))
  {
    CATBaseUnknown * pFastenerRef = NULL;
    rc = pFastenerPrdObject -&gt; GetReferenceObject ((CATBaseUnknown*&amp;)pFastenerRef, IID_CATBaseUnknown);
    ...

    if(SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerRef))
    {
      // 1. Create MCX-2
      //    This Engineering Connection is present inside Primary Fastener
      //    It fastens one of the components of Primary Fastener
      rc = CreateEngineeringConnection(opMCX2, pFastenerRef);

      if(SUCCEEDED(rc) &amp;&amp; (NULL != (*opMCX2)))
      {
        //2. Create link between Secondary Instance and MCX-2

        // 2.1Access Coupling
        CATIFmaCoupling * piFmaCoupling = NULL;  
        CATIFmaConnectionServices * piFmaConnectServices = NULL;
        rc = CATFmaBrowseServicesAccess::CreateFmaConnectionServices(&amp;piFmaConnectServices);
        if( SUCCEEDED(rc) &amp;&amp; (NULL != piFmaConnectServices))
        {
          rc = piFmaConnectServices-&gt;GetFstCoupling((CATBaseUnknown **) &amp;piFmaCoupling, (*opMCX2), IID_CATIFmaCoupling);
          ...
        }

        // 2.2Get the PLM component of root product
        CATIPLMComponent * piRootPLMComponent = NULL;
        if(SUCCEEDED(rc))
        {    
          rc = pFastenerRef-&gt;QueryInterface(IID_CATIPLMComponent, (void**) &amp;piRootPLMComponent);
        }

        // 2.3Set realization &amp; fasten links 
        if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaCoupling) &amp;&amp; (NULL != piRootPLMComponent))
        {        
          rc = SetRealizationLink(piFmaCoupling, piRootPLMComponent, ipSecFastenerInstance);  //Realization Links   
        }

        //3. Set one of the components as Zone
        if(SUCCEEDED(rc))
        {
          CATIPLMComponent * pFastenerReferencePLMComp = NULL;
          rc = pFastenerRef-&gt;QueryInterface(IID_CATIPLMComponent, (void**) &amp;pFastenerReferencePLMComp);
          if(SUCCEEDED(rc) &amp;&amp; (NULL != pFastenerReferencePLMComp))
          {
            CATOmbObjectInContext * pComponentOmbObject = NULL;
            rc = CAAFstFastenerServices::GetOmbObjectInContext(pComponentOmbObject, ipComponentInstance, pFastenerReferencePLMComp);
            if(SUCCEEDED(rc) &amp;&amp; (NULL != pComponentOmbObject))
            {
              if(SUCCEEDED(rc) &amp;&amp; (NULL != pComponentOmbObject) &amp;&amp; (NULL != piFmaCoupling))
              {
                CATIFmaJoinedZoneAccess * piFmaJoinedZoneAccess = NULL;
                rc = piFmaCoupling-&gt;AddZoneAccess(1, &amp;piFmaJoinedZoneAccess);
                if(SUCCEEDED(rc) &amp;&amp; (NULL!=piFmaJoinedZoneAccess))
                {
                  rc = piFmaJoinedZoneAccess-&gt;SetJoinedZone(pComponentOmbObject);
                  if(SUCCEEDED(rc))
                  {
                    CATIFmaJoinedZoneAccessBrowse * piFmaZoneBrowse = NULL;
                    rc = piFmaJoinedZoneAccess-&gt;QueryInterface(IID_CATIFmaJoinedZoneAccessBrowse, (void **) &amp;piFmaZoneBrowse);
                    if(SUCCEEDED(rc))
                    {
                      //4. Set the integer parameter (Zone Index)
                      CATICkeParm * piNumParm = NULL;
                      rc = piFmaZoneBrowse-&gt;GetNumberingAttribute(&amp;piNumParm);
                      if(SUCCEEDED(rc))
                      {
                        if(NULL != piNumParm)
                        {
                          piNumParm-&gt;Valuate(1);
                          ...
                        }
                      }
                      ...
                    }
                  }
                  ...
                }
                ...
              }
            }
            ...
          }
        }
        ...
      }

      ...
    }
  }
  return rc;
}
...</pre>
<h3><a name="Step14"></a>Creating of engineering connection (MCXX) under Root product and set its link with MCX2</h3><pre class="code">...
//----------------------------------------------------------------------------------
// CreateEngineeringConnectionMCXX
//---------------------------------------------------------------------------------
HRESULT CAAFstPrimarySecondaryFastenerCreationCmd::CreateEngineeringConnectionMCXX(CATBaseUnknown        ** opMCXX,
                                                                                   CATBaseUnknown        *  ipRootReference,
                                                                                   CATOmbObjectInContext * pMCX2OmbObject)
{
  HRESULT rc = E_INVALIDARG;
  if((NULL == opMCXX) || (NULL == ipRootReference) || (NULL == pMCX2OmbObject)) return rc;

  *opMCXX = NULL;
  //1. Create new fastener engineering connection (MCX-X)
  CATIFmaPLMFactoryServices * piFmaPLMFactoryServices = NULL;  
  rc = CATFmaServicesAccess::CreateFmaFactoryServices(&amp;piFmaPLMFactoryServices);
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piFmaPLMFactoryServices))
  {    
    rc = piFmaPLMFactoryServices-&gt;CreateMCXAsFastener(opMCXX, ipRootReference);
    ...

    if(SUCCEEDED(rc) &amp;&amp; (NULL != *opMCXX))
    {
      //2. Access Coupling of MCX-X
      CATIFmaCoupling * piFmaCoupling = NULL;  
      CATIFmaConnectionServices * piFmaConnectServices = NULL;
      rc = CATFmaBrowseServicesAccess::CreateFmaConnectionServices(&amp;piFmaConnectServices);
      if( SUCCEEDED(rc) &amp;&amp; (NULL != piFmaConnectServices))
      {
        rc = piFmaConnectServices-&gt;GetFstCoupling((CATBaseUnknown **) &amp;piFmaCoupling, (*opMCXX), IID_CATIFmaCoupling);
        if( SUCCEEDED(rc) &amp;&amp; (NULL != piFmaCoupling))
        {
		  //3. Link MCX-X with MCX-2
          rc = piFmaCoupling -&gt; SetMCXFastener(pMCX2OmbObject);
          ...
        }
        ...
      }
    }
  }
  return rc;
}
...</pre>
<h3><a name="Step15"></a>Displaying the Execution Status Message of the 
Command</h3><pre class="code">...
HRESULT CAAFstFastenerServices::DisplayPopup(CATUnicodeString iStrMessage, 
                                             CATUnicodeString iStrTitle,
                                             CATDlgStyle iStyle)
{
  if( 0 &lt; iStrMessage.GetLengthInChar() )
  {    
    CATApplicationFrame* pAppFrame = CATApplicationFrame::GetFrame();
    if (NULL != pAppFrame)
    {
      CATDlgNotify* pDlgNotify = new CATDlgNotify(pAppFrame-&gt;GetApplicationDocument(), "Notif", iStyle);
      if (NULL != pDlgNotify)
      {        
        pDlgNotify-&gt;DisplayBlocked(iStrMessage, iStrTitle);
        pDlgNotify-&gt;RequestDelayedDestruction();
      }
      ...
    }
  }
  return S_OK;
}...</pre>
<p>When the command execution ends, the user is informed whether the fastener 
product creation is a success or failure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case demonstrates the creation of a Primary-Secondary fastener product along with its 
components and engineering connections. Additionally, it also shows how to set up 
the component, realization and fasten links on the fastener and engineering 
connections.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
  <tbody>
  <tr>
    <td><a name="1"></a>[1]</td>
    <td><a href="CAAFMATaMdlOverView.htm">Fastener Model Overview</a></td></tr>
  <tr>
    <td><a name="2"></a>[2]</td>
    <td><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
      and Launching a Use Case</a></td></tr>
  <tr>
    <td><a name="3"></a>[3]</td>
    <td><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, 
      Expanding and Opening PLM Object</a></td></tr></tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
  <tbody>
  <tr>
    <td>Version: <strong>1</strong> [Jun 2009]</td>
    <td>Document created</td></tr></tbody></table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>
</body></html>
