<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>CAAScdSddUcCreateOpeningSketch.CATScript</title>
</head>

<body onload="highlightSearchTerms();">

<pre>
<span class="comment">'-------------- Sample MACRO written in Basic Script ------------------------------------------ </span>
<span class="comment">'This sample retrieves the Mechanism Representation from a current product Structure </span>
<span class="comment">'and scan the commands and joints under this mechanism.</span>
<span class="comment">'</span>
<span class="comment">'Before starting this macro, opens a product structure containing a mechanism rep under the root.</span>
<span class="comment">'Steps:</span>
<span class="comment">'   1 - Retrieves the current Editor</span>
<span class="comment">'   2 - Retrieves the Product Service from the Editor</span>
<span class="comment">'   3- Gets the discipline of all representation of the tree</span>
<span class="comment">'   4- Gets the Mechanism Representation if the V_discipline is </span>
<span class="comment">'   5- Scans Joints under the Mechanism Representation</span>
<span class="comment">'   6- Scans Commands and retrieves some information</span>
</pre>
<pre>
<span class="comment">'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''</span>

<span class="keyword">Sub </span>CATMain()
<span class="comment">'   1- Gets the current Editor </span>
<span class="keyword">        Dim </span>myEditor <span class="keyword">As  </span>Editor
<span class="keyword">        Set </span>myEditor = CATIA.ActiveEditor

<span class="comment">'   2- Gets the Product Service from the Editor </span>
<span class="keyword">        Dim </span>MyPrdService   <span class="keyword">As  </span>PLMProductService
<span class="keyword">        Set </span>MyPrdService = myEditor.GetService(&quot;PLMProductService&quot;)
<span class="keyword">        Dim </span>myRootOccurrence <span class="keyword">As  </span>VPMRootOccurrence
<span class="keyword">        Set </span>myRootOccurrence = MyPrdService.RootOccurrence
<span class="keyword">        Set </span>myMCXParent = myRootOccurrence.ReferenceRootOccurrenceOf

<span class="comment">'   3- Gets the discipline of all representqtion of the tree</span>
<span class="keyword">        Dim </span>myEngConnections <span class="keyword">As  </span>EngConnections
<span class="keyword">        Set </span>myEngConnections = myMCXParent.GetItem(&quot;CATEngConnections&quot;)
<span class="keyword">        For </span>Each MyEntity In MyPrdService.EditedContent
<span class="keyword">          Dim </span>MyRef <span class="keyword">As </span>VPMReference
<span class="keyword">          Set </span>MyRef = MyEntity
<span class="keyword">          Dim </span>MyReps <span class="keyword">As </span>VPMRepInstances
<span class="keyword">          Set </span>MyReps = MyRef.RepInstances
<span class="keyword">          For </span>Each MyRep In MyReps
<span class="keyword">            Dim </span>MyRepRef <span class="keyword">As </span>VPMRepReference
<span class="keyword">            Set </span>MyRepRef = MyRep.ReferenceInstanceOf
<span class="keyword">            Dim </span>attr <span class="keyword">As </span>String
            attr = MyRepRef.GetAttributeValue(&quot;V_discipline&quot;)


<span class="comment">'   4- Gets the Mechanism Representation if the V_discipline is </span>
<span class="comment">'        -Simulation for old products </span>
<span class="comment">'        -Mechanism for new ones </span>

<span class="keyword">            If </span>( attr = &quot;Mechanism&quot; ) Then
<span class="keyword">              Dim </span>MyMechRep <span class="keyword"> As  </span>KinMechanism
<span class="keyword">              Set </span>MyMechRep = MyRep.GetItem(&quot;MECHRep&quot;)

<span class="comment">'   5- Scans Joints under the Mechanism Representation</span>
<span class="comment">'         a- Gets the Joints collection </span>
<span class="keyword">              Dim </span>MyJoints <span class="keyword"> As  </span>KinJoints
<span class="keyword">              Set </span>MyJoints = MyMechRep.Joints

<span class="comment">'         b- Scans all Joints of the collection </span>
<span class="keyword">              For </span>i = 1 To MyJoints.Count Step 1
<span class="keyword">                Dim </span>MyJoint <span class="keyword">As </span>EngConnection
<span class="keyword">                Set </span>MyJoint = MyJoints.Item(i)
<span class="keyword">                MsgBox</span> &quot; my Engineering Connection name = &quot; &amp; MyJoint.Name
<span class="keyword">                MsgBox</span> &quot; my Engineering Connection Type = &quot; &amp; MyJoint.Type
<span class="keyword">              Next</span>

<span class="comment">'   6- Scans Commands and retrieves some information</span>
<span class="comment">'         a- Gets the Commands collection </span>
<span class="keyword">              Dim </span>MyCommands <span class="keyword"> As  </span>KinCommands
<span class="keyword">              Set </span>MyCommands = MyMechRep.Commands 

<span class="comment">'         b- Scans all commands of the collection </span>
<span class="keyword">              For </span>i = 1 To MyCommands.Count Step 1
<span class="keyword">                Dim </span>MyCommand <span class="keyword">As </span>KinCommand
<span class="keyword">                Set </span>MyCommand = MyCommands.Item(i)
<span class="keyword">                MsgBox</span> &quot; Command name = &quot; &amp; MyCommand.Name
<span class="keyword">                MsgBox</span> &quot; Current Value = &quot; &amp; MyCommand.CurrentValue
<span class="keyword">              Next</span>
<span class="keyword">            End If</span>
<span class="keyword">          Next</span>
<span class="keyword">        Next</span>
<span class="keyword">End Sub</span>

</pre>
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
