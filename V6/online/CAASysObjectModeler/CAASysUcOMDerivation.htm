<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using OM-derivation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using OM-derivation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a component that OM-derives from another 
		one, and how to use them in a client application.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysDerivationOM Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysDerivationOM Do</a></li>
					<li><a href="#How">How to Launch CAASysDerivationOM</a></li>
					<li><a href="#Where">Where to Find the CAASysDerivationOM Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create a component [<a href="#References">1</a>] 
[<a href="#References">2</a>] that OM-derives [<a href="#References">3</a>] from 
another one, and how to use them in a client application [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysDerivationOM Case</h2>
<p>CAASysDerivationOM is a set of use cases of the CAASystem.edu framework that 
illustrates CATIA System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysDerivationOM Do</h3>
<p>This use case creates two components:</p>
<ol>
	<li><em>CAASysSurface</em>, that models a surface, and that implements the
		<em>CAAISysSurfaceProperties</em> and <em>CAAISysSurfaceArea</em> interfaces 
		in two separate extension classes</li>
	<li><em>CAASysRevolSurface</em>, that models a surface of revolution, that OM-derives 
		from <em>CAASysSurface</em>, and that implements <em>CAAISysSurfaceArea</em> 
		and <em>CAAISysRevolAxis</em> interfaces in two separate extension classes.</li>
</ol>
<p>The class diagram is as follows:</p>
<p>
<img alt="Object Modeler Inheritance" height="263" src="images/CAASysOMDerivation.gif" width="660"/></p>
<p><em>CAASysSurface</em> OM-derives and C++-derives from <em>CATBaseUnknown</em>.
<em>CAASysRevolSurface</em> OM-derives and C++-derives from <em>CAASysSurface</em>. 
All the extension classes derive from <em>CATBaseUnknown</em>. OM-inheritance makes 
no sense for them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysDerivationOM</h3>
<p>To launch CAASysDerivationOM, you will need to set up the build time environment, 
then compile CAASysDerivationOM along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysDerivationOM Code</h3>
<p>The CAASysDerivationOM use case is made of several classes located in the CAASysDerivationOM.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysDerivationOM.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a component that OM-derives from another one, there are three main 
steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the <em>CAASysSurface</em> Base Component</a></td>
		<td><em>CAASysSurface</em> class</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the <em>CAASysRevolSurface</em> component that 
		OM-derives from <em>CAASysSurface</em></a></td>
		<td><em>CAASysRevolSurface</em> class</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Take advantage of the OM-derivation in a client application</a></td>
		<td>Client application</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CAASysSurface Base Component</h3>
<p>A component is made of a main class, and possibly of extension classes. The component 
name is the main class name. A class is designated as a component main class thanks 
to the <code>CATDeclareClass</code> macro in the class header file, and to the
<code>CATImplementClass</code> macro in the class source file with the <code>Implementation</code> 
keyword as second parameter. The <em>CAASysSurface</em> class header file is as 
follows:</p>
<pre class="code">...
#include &quot;CATBaseUnknown.h&quot;

class CAASysSurface : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAASysSurface();
    virtual ~CAASysSurface();
  private:
    CAASysSurface(const CAASysSurface &amp;iObjectToCopy);
};</pre>
<p>The <code>CATDeclareClass</code> macro declares that the class <em>CAASysSurface</em> 
belongs to a component. Note that the copy constructor is set as private. Let's 
have a look at the class source file:</p>
<pre class="code">#include &quot;CAASysSurface.h&quot;

<strong>CATImplementClass</strong>(CAASysSurface, <strong>Implementation</strong>, CATBaseUnknown, CATNull);

CAASysSurface::CAASysSurface() {}
CAASysSurface::~CAASysSurface() {}</pre>
<p>The <code>CATImplementClass</code> macro declares that the <em>CAASysSurface</em> 
class is a component main class thanks to the <code>Implementation</code> keyword, 
that OM-derives from <em>CATBaseUnknown</em>. Note that the copy constructor is 
not implemented. A copy constructor declared as private and not implemented prevents 
the compiler to create a public one that client application could use without your 
agreement.</p>
<p>This class has two extension classes that implement interfaces. The header files 
of these classes also include the <code>CATDeclareClass</code> macro. Their source 
files include the <code>CATImplementClass</code> macro with the following parameters, 
for example for the <em>CAAESysSurfaceArea</em> class:</p>
<pre class="code">...
<strong>CATImplementClass</strong>(CAAESysSurfaceArea, <strong>DataExtension</strong>, CATBaseUnknown, <strong>CAASysSurface</strong>);
...</pre>
<p>The <code>CATImplementClass</code> macro declares that the <em>CAAESysSurfaceArea</em> 
class is a data extension of the component whose main class is <em>CAASysSurface</em>. 
Like for any extension class, its third parameter must always be <em>CATBaseUnknown</em>, 
since OM-inheritance doesn't make sense for extensions. The two extension classes 
implement interfaces as usual.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the CAASysRevolSurface Component that OM-derives 
from CAASysSurface</h3>
<p>Like for any component, the <em>CAASysRevolSurface</em> component main class 
header file includes the <code>CATDeclareClass</code> macro. Its source file includes 
the <code>CATImplementClass</code> macro with the following parameters:</p>
<pre class="code">...
<strong>CATImplementClass</strong>(CAASysRevolSurface, <strong>Implementation</strong>, <strong>CAASysSurface</strong>, CATNull);
...</pre>
<p>The <code>CATImplementClass</code> macro declares that the <em>CAASysRevolSurface</em> 
class is a component main class thanks to the <code>Implementation</code> keyword, 
that OM-derives from <em>CAASysSurface</em> component. Two extension classes of 
this component implement interfaces as usual.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Taking Advantage of the OM-derivation in a Client Application</h3>
<p>The OM-derivation, or OM-inheritance, depending from where you look, enables 
client applications to ask for a pointer to an interface that the OM-derived component 
doesn't implement itself, but that one of its base components implements. For example, 
from a pointer to <em>CAAISysRevolSurfaceAxis</em> that the <em>CAASysRevolSurface</em> 
component itself implements, the client application can ask for a pointer to <em>
CAAISysSurfaceProperties</em> implemented by its base component <em>CAASysSurface</em>, 
although there is no C++ inheritance links between the extension classes that make 
up the components, since all extension classes C++-derive from <em>CATBaseUnknown</em>. 
This can be shown using the following code:</p>
<pre class="code">...
CAAISysSurfaceProperties * pCAAISysSurfaceProperties = NULL;
HRESULT rc;
rc = pCAAISysRevolAxis-&gt;QueryInterface(IID_CAAISysSurfaceProperties,
                                       (void**)&amp;pCAAISysSurfaceProperties);
if (SUCCEEDED(rc)
...</pre>
<p>Assume <code>pCAAISysRevolAxis</code> is a valid pointer to <em>CAAISysRevolSurfaceAxis</em> 
on the <em>CAASysRevolSurface</em> component. <code>QueryInterface</code> returns 
a valid pointer to <em>CAAISysSurfaceProperties</em>, although the <em>CAASysRevolSurface</em> 
component doesn't implement it iself, but by means of its base component <em>CAASysSurface</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a component that OM-derives from another component, 
and how to use it in a client application.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysTaOMInheritance.htm">Object Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAASysTaOMUsingComponents.htm">Using Components</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
