<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create interfaces.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysUsingComp Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysUsingComp Do</a></li>
					<li><a href="#How">How to Launch CAASysUsingComp</a></li>
					<li><a href="#Where">Where to Find the CAASysUsingComp Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create interfaces that declare either 
a type or a behavior that a component [<a href="#References">1</a>] can implement 
[<a href="#References">2</a>] and that can be used in client application [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysUsingComp Use Case</h2>
<p>CAASysUsingComp is a use case of the CAASystem.edu framework that illustrates 
CATIA System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysUsingComp Do</h3>
<p>This use case illustrates the usage of components. They are created using a factory, 
and accessed and modified using pointers to the interfaces they implement. The use 
case shows also how to manage their life cycle. This use case uses a circle component 
that implements a circle type interface named <em>CAAISysCircle</em>, and another 
interface: <em>CAAISysColorProperties</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysUsingComp</h3>
<p>To launch CAASysUsingComp, you will need to set up the build time environment, 
then compile CAASysUsingComp along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysUsingComp Code</h3>
<p>The CAASysUsingComp use case is made of several classes located in the CAASysUsingComp.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysUsingComp.m\</code></p>
<p>where <code>InstallRootFolder</code>[<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create an interface such as <em>CAAISysCircle</em>, there are three main steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Instantiating the component</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Modifying the Component Instance Using the <em>CAAISysCircle</em> 
		Interface</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Retrieve and use a pointer to the <em>CAAISysColorProperties</em> 
		interface</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Attempting to retrieve a pointer to an interface that 
		the circle component doesn't implement</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Manage the component life cycle</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Instantiting the Component</h3>
<pre class="code">...
  int ReturnCode = 0;
  CAAISysCircle * piSysCircleOnCircle = NULL; 
  HRESULT rc = ::<strong>CATInstantiateComponent</strong>(&quot;CAASysCircle&quot;,  
                                         IID_CAAISysCircle,
                                         (void**)&amp;piSysCircleOnCircle);
  if (FAILED(rc))
    return 1; 
...</pre>
<p>The <code>CATInstantiateComponent</code> global function creates an instance 
of the <em>CAASysCircle</em> component and retrieves a pointer to <em>CAAISysCircle</em>. 
The parameters are:</p>
<table>
	<tr>
		<td><code>CAASysCircle</code></td>
		<td>Name of the component to instantiate. It's the name of its main class</td>
	</tr>
	<tr>
		<td><code>IID_CAAISysCircle</code></td>
		<td>IID of the interface to which a pointer is requested</td>
	</tr>
	<tr>
		<td><code>piSysCircleOnCircle</code></td>
		<td>The pointer retrieved to <em>CAAISysCircle</em></td>
	</tr>
</table>
<p>The <code>CATInstantiateComponent</code> global function calls <code>AddRef</code> 
for the <code>piSysCircleOnCircle</code> pointer returned. To prevent from memory 
leak, this pointer will be released when it will be no longer needed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Modifying the Component Instance Using the <em>CAAISysCircle</em> 
Interface</h3>
<pre class="code">...
  CATMathPoint Center(-4.f,0.f,0.f);
  rc = piSysCircleOnCircle-&gt;<strong>SetCenter</strong>(Center);
  ... // Process failing rc 

  float Radius = 10.f ;
  rc = piSysCircleOnCircle-&gt;<strong>SetRadius</strong>(Radius);
  ... // Process failing rc

  CATMathVector Normal(1.f,0.f,0.f) ;
  CATMathVector Axis (0.f,1.f,0.f)  ;
  rc = piSysCircleOnCircle-&gt;<strong>SetPlanar</strong>(Normal,Axis);
  ... // Process failing rc
...</pre>
<p>The center, radius, and support plane are successively set thanks to the
<code>SetCenter</code>, <code>SetRadius</code>, and <code>SetPlanar</code> methods 
of <em>CAAISysCircle</em> [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving and Using a Pointer to <em>CAAISysColorProperties</em> 
Interface</h3>
<pre class="code">...
  CAAISysColorProperties *<strong>piSysColorPropOnCircle</strong> = NULL; 
  rc = piSysCircleOnCircle-&gt;<strong>QueryInterface</strong>(<strong>IID_CAAISysColorProperties</strong>, 
                                           <strong>(void**)&amp;piSysColorPropOnCircle</strong>);
  if (<strong>SUCCEEDED</strong>(rc))
  {
    int red   = 100;
    int green = 100;
    int blue  = 100;
    rc = piSysColorPropOnCircle-&gt;<strong>SetColor</strong>(red, green, blue); 
    ... // Check that the color is correctly set
    piSysColorPropOnCircle-&gt;<strong>Release</strong>();
    piSysColorPropOnCircle = NULL;
  }
  else
    ReturnCode = 1;
...</pre>
<p>The pointer to the <em>CAAISysCircle</em> interface on the circle component can 
be used to retrieve pointers to other interfaces implemented by the component, such 
as a pointer to <em>CAAISysColorProperties</em>, using the <code>QueryInterface</code> 
method. The variable used to return the pointer must be created with the <em>CAAISysColorProperties</em> 
type and initialized to <code>NULL</code>. Always test the returned <code>HRESULT</code> 
value using the macros <code>SUCCEEDED</code> and <code>FAILED</code>. The <code>
SetColor</code> method of <em>CAAISysColorProperties</em> can then be used to set 
the circle color to green. As soon as the pointer to xx is no longer needed, it 
is released, and set tu <code>NULL</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Attempting to Retrieve a Pointer to an Interface that the 
Circle Component Doesn't Implement</h3>
<pre class="code">...
  CAAISysPointProperties * <strong>piSysPointPropOnCircle</strong> = NULL; 
  rc = piSysCircleOnCircle-&gt;<strong>QueryInterface</strong>(<strong>IID_CAAISysPointProperties</strong>, 
                                           <strong>(void**)&amp;piSysPointPropOnCircle</strong>);
  if (<strong>SUCCEEDED</strong>(rc))
  {
    cout &lt;&lt; &quot;The circle component doesn't implement CAAISysPointProperties&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;This trace should never be displayed&quot; &lt;&lt; endl;
    piSysCircleOnCircle-&gt;Release();
    piSysCircleOnCircle = NULL;
  }
  else
  {
     cout &lt;&lt; &quot;QueryInterface fails: this trace should always be displayed&quot; &lt;&lt; endl; 
  }
...</pre>
<p>The pointer to the <em>CAAISysCircle</em> interface on the circle component is 
used to retrieve a pointer to <em>CAAISysPointProperties</em>. The variable used 
to return the pointer must be created with the <em>CAAISysPointProperties</em> type 
and initialized to <code>NULL</code>. But since the circle component doesn't implement 
this interface, <code>QueryInterface</code> will always fail. Even if this seems 
improbable, you may find components that you expect to implement a given interface 
and that do not. For example, you may get a list of pointers to an interface implemented 
by a set of components, and ask these pointers for another interface. Some of the 
components may not implement it, and the calling code falls in the case described 
above. This is the reason why the returned <code>HRESULT</code> value must be tested 
using the macros <code>SUCCEEDED</code> and <code>FAILED</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Managing the Component Life Cycle</h3>
<pre class="code">...
  piSysCircleOnCircle-&gt;Release();
  piSysCircleOnCircle = NULL;
...</pre>
<p>The only pointer that remains at thi spoint is <code>piSysCircleOnCircle</code>. 
The other pointers created or retrieved were released as soon as they were no longer 
needed, and set to <code>NULL</code> to prevent from a fortuitious but illegal usage. 
To prevent from memory leak, <code>piSysCircleOnCircle</code> is released and set 
to <code>NULL</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to use a component, that is how to create a component 
using the <code>CATInstantiateComponent</code> global function and retrieve a pointer 
to an interface the component implements. Using this interface pointer, the component 
is initialized, and a pointer to another interface is asked for, and used. Then 
a pointer to an interface that the component doesn't implement is asked for, to 
show what to do if this happens. The component life cycle is managed by releasing 
and setting to NULL the interface pointers as soon as they are no longer needed.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysTaOMInheritance.htm">Object Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
