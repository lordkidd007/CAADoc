<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Components</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to provide client applications with tools to 
		create your implementation objects. It is a programmer's guide (how to) 
		to show on simple examples the way an the code to write to create a global 
		creation function, implement the <em>CATICreateInstance</em> interface, 
		or a factory.</p>
		<ul>
			<li><a href="#000000">What Is a Component?</a></li>
			<li><a href="#010000">What Is a CAA Component?</a>
				<ul>
					<li><a href="#LogicalView">The Client Application Programmer 
						Logical View</a></li>
					<li><a href="#PhysicalView">The Component Supplier Physical 
						View</a></li>
				</ul>
			</li>
			<li><a href="#100000">What Is an Extension?</a>
				<ul>
					<li><a href="#200000">Data Extensions</a></li>
					<li><a href="#300000">Code Extensions</a></li>
				</ul>
			</li>
			<li><a href="#500000">Sharing Extensions</a></li>
			<li><a href="#600000">What Are the TIE and the BOA?</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="000000"></a>What Is a Component?</h2>
<p>Components are the atoms that build an application. A component is a piece of 
executable code that you can't modify, but that you can use by means of the interfaces 
it exposes, that hides its implementation details, that can be replaced, even at 
run time, by another component exposing the same interfaces and performing the same 
job, and that ensures upward compatibility to client applications using it.</p>
<p>Compared to many past and often present monolithic applications, CATIA offers, 
since 1988 and its Version 3, an application programming interface that enables 
you to create applications, such as IUA commands, GII interactive functions, and 
batch applications. Since 1992 and CATIA Version 4, the same openness happens with 
data, and you can add your own application data to the CATIA data. Even if CATIA 
itself was a monolithic application, the applications and the data you added match 
partially the component definition, since you can reuse your applications on newer 
CATIA releases without the need of rebuilding them, and your application data without 
migrating it.</p>
<p>With the help of the object-oriented technology, data and software make a whole 
named object, and components are now made of objects. Objects provide the features 
required by components:</p>
<ul>
	<li>Objects can expose their interfaces and hide their implementations</li>
	<li>Objects can be exchanged at run time with other objects that match the same 
		interface, even if they are provided by object servers located elsewhere 
		on the network, providing component modularity</li>
	<li>New versions of objects with new capabilities can be provided while keeping 
		client applications running without the need of rebuilding them, providing 
		component scalability.</li>
</ul>
<p>We'll see in this article what is a CAA component made up of, how you can create 
them as CAA component providers, and how you can use and extend them as client application 
programmers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="010000"></a>What Is a CAA Component?</h2>
<p>Client application programmers have usually a logical view of CAA components 
and see a CAA component as an object exposing interfaces. On the opposite, the component 
supplier has a detailed physical view of the CAA component, that is, he/she knows 
which C++ classes make up the component, how these C++ classes are assembled to 
build the component, and which interface is implemented by which class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="LogicalView"></a>The Client Application Programmer Logical View</h3>
<p>As a client application programmer, you often need to create components and manipulate 
them using the interfaces they expose, whatever the way and the complexity of their 
internal structure. For example, when you need to create a circle, you call the 
circle component factory which creates a circle instance and returns a pointer to 
the CATICircle interface. Then you need to move the circle, and you call QueryInterface 
to get a pointer to the CATIMove interface for this circle component instance. Then 
you may need to draw it, or modify its display attributes. Whenever you need to 
do something to this circle, you ask for a pointer to the appropriate interface 
if you haven't one already, and you use this pointer to call the methods exposed 
by this interface for this component.</p>
<table>
	<caption><a name="Fig1"></a>Fig 1: The Client Application Programmer Sees a 
	Simple and Single Component</caption>
	<tr>
		<td>
		<img alt="The component seen by the Client Application Programmer" height="308" src="images/CAASysOMComponent1.gif" width="401"/></td>
	</tr>
</table>
<p>Your view of the component you manipulate is a logical view that makes you see 
the component as if it were simple and self-contained.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="PhysicalView"></a>The Component Supplier Physical View</h3>
<p>As a component supplier, your view of the component may be quite different. You 
may want to take advantage of the code factorization capabilities offered by CAA, 
and make full use of extensions. This makes it possible for you to design and code 
a single application component like a circle as several C++ classes, one being the 
circle main implementation class, and the others extension classes of this main 
implementation class, each of these classes implementing one or several interfaces 
through which the client application programmer will manipulate the circle, seeing 
it as a simple and single component.</p>
<p>For example, the classes making up the circle could be designed as shown on
<a href="#Fig2">Fig 2</a>.</p>
<table>
	<caption><a name="Fig2"></a>Fig 2: The Component Supplier Sees several Linked 
	Classes</caption>
	<tr>
		<td>
		<img alt="The component created by the Component Supplier" height="499" src="images/CAASysOMComponent2.gif" width="582"/></td>
	</tr>
</table>
<p>According to this design, up to four classes can be instantiated when the client 
application programmer manipulates a circle, but everything happens as if only one 
component were manipulated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>What Is an Extension</h2>
<p>The CAA object model modularity and scalability is offered through extensions. 
This is a very powerful means to build CAA components from C++ objects and to supply 
software updates without implying to rebuild the client applications.</p>
<p>An extension to a main implementation class is a separate class that is attached 
to the main implementation class and which extends it to implement additional interfaces 
that this main implementation class does not implement itself. Extension common 
usage is to share the implementation of interfaces between several components, or 
to implement a new interface which did not exist at the time the framework was released 
and which was added after. This helps a lot for modularity and scalability.</p>
<p>Extensions are C++ classes which must have the <code>CATBaseUnknown</code> class 
among its base class, and that must directly OM-derive from <code>CATBaseUnknown</code>. 
They can be of the following types:</p>
<ul>
	<li>Data extensions, if they contain data members and methods</li>
	<li>Code extensions, if they contain only methods and no data member.</li>
</ul>
<p>The extension class and the class it is an extension of are declared in the extension 
source file using the macro <code>CATImplementClass</code>. The link between the 
extension and the interface it implements is managed through the dictionary. The 
shared library which contains the code for the extension is also included.</p>
<p>The class that implement interfaces as an extension of a component is created 
automatically when a pointer to an interface the extension implements is requested 
by <code>QueryInterface</code>. So you don't need to worry about a factory of global 
function to create extensions.</p>
<p>Note that the extension is not a recursive concept. There are no extensions of 
extensions.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="200000"></a>Data Extensions</h3>
<p>A data extension is a C++ class that contains data members and methods. Suppose 
that our object MyObject is already used by numerous clients and that we want to 
add data that it doesn't hold already. If we supply a new version of our object 
which implements an additional interface for this data, the clients will be very 
happy to get a new functionality, but may become unhappy when we'll tell them to 
rebuild their applications, even if they don't use this interface. To overcome this 
problem, we can use a data extension as follows:</p>
<table>
	<caption><a name="Fig3"></a>Fig 3: A Component Made up of an Implementation 
	and a Data Extension Classes</caption>
	<tr>
		<td>
		<img alt="A component with data extensions" height="333" src="images/CAASysOMDataExtension.gif" width="497"/></td>
	</tr>
</table>
<p>The new interface CATIData is implemented by the separate C++ class MyDataExtension 
with methods to access the data and data members to store it. There is no need to 
rebuild the client applications when you deliver the data extension, since the MyObject 
class has not changed from these applications standpoint. Only client applications 
that want to take advantage of the update need of course to be modified and rebuilt.</p>
<p><strong>Lifecycle</strong>: A call to <code>QueryInterface</code> against the 
object for an interface implemented by a data extension of this object creates the 
data extension instance, or uses the existing one. The data extension is deleted 
only when the object of which it is an extension is also deleted, that is when all 
the reference counts of the object and of all its extensions reach 0.</p>
<p>The idl file for CATIData is as follows:</p>
<pre class="code">// IDL encoded interface

#pragma ID CATIData &quot;DEC:7db286f1-218d-0000-0280020a86000000&quot;
interface CATIData : CATBaseUnknown {
#pragma PROPERTY Length
  HRESULT get_Length(out int oLength);
  HRESULT put_Length(in int iLength);
};</pre>
<p>The resulting header file <code>CATIData.h</code> is as follows:</p>
<pre class="code">// C++ generated interface class header file
#include &quot;CATBaseUnknown.h&quot;
extern IID IID_CATIData;
class CATIData : CATBaseUnknown {
  CATDeclareInterface;
  public :
    virtual HRESULT __stdcall get_Length(int * oLength) = 0;
    virtual HRESULT __stdcall set_Length(int iLength) = 0;
};</pre>
<p>The resulting source file <code>CATIData.cpp</code> is as follows:</p>
<pre class="code">// C++ generated interface class source file
#include &quot;CATIData.h&quot;
IID IID_CATIData = { 0x7db286f1, 0x218d, 0x0000,
    {0x02, 0x80, 0x02, 0x0a, 0x86, 0x00, 0x00, 0x00} };
CATImplementInterface(CATIData, CATBaseUnknown);</pre>
<p>The MyDataExtension class implements this interface:</p>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;

class MyDataExtension : public CATBaseUnknown {
  CATDeclareClass;
  public :
    MyDataExtension();
    virtual ~MyDataExtension();
    virtual HRESULT __stdcall get_Length(int * oLength);
    virtual HRESULT __stdcall set_Length(int iLength);
  private :
    int _Length;
};</pre>
<p>The CAAEDataExtension class source file is as follows:</p>
<pre class="code">#include &quot;CAAEDataExtension.h&quot;

CATImplementClass(CAAEDataExtension, // Extension class name
                  DataExtension,     // Data extension
                  CATBaseUnknown,    // Always OM-derive extensions from CATBaseUnknown
                  MyObject);         // Main class of the extended component

#include &quot;TIE_CATIData.h&quot;
TIE_CATIData(CAAEDataExtension);

CAAEDataExtension::CAAEDataExtension() {}
CAAEDataExtension::~CAAEDataExtension() {} 

HRESULT CAAEDataExtension::get_Length(int * oLength)
{ oLength = _Length; return S_OK; }

HRESULT CAAEDataExtension::set_Length(int iLength)
{ _Length = iLength; return S_OK; }</pre>
<p>The <code>CATImplementClass</code> macro states that the class CAAEDataExtensionis 
a data extension and that extends the MyObject class. The third argument that declares 
the component from which the current one OM-derives makes sense only for component 
main classes and must always be set to <em>CATBaseUnknown</em> with an extension.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="300000"></a>Code Extensions</h3>
<p>A code extension is an extension that contains only methods, and no data. At 
run-time, for a given code extension, only one instance of this code extension exists, 
whatever the number of existing objects this code extension extends.</p>
<p>
<img alt="A component with a code extension" height="315" src="images/CAASysOMCodeExtension.gif" width="449"/></p>
<p>As for data extensions, there is no need to rebuild client applications when 
the code extension is supplied.</p>
<p>You code a code extension as a data extension, and just use <code>CodeExtension</code> 
instead of <code>DataExtension</code> as the second parameter of the <code>CATImplementClass</code> 
macro in the code extension class source file, as follows:</p>
<pre class="code">...
CATImplementClass(CAAECodeExtension,
                  CodeExtension,
                  CATBaseUnknown,
                  MyObject);
...</pre>
<p><strong>Lifecycle</strong>: Once created for a given object instance, the code 
extension is never deleted and is used for all the instances of the same object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>Sharing Extensions</h2>
<p>Sharing an extension makes several classes implement the interfaces the extension 
itself implements, and not only one class as shown in the above sections about extensions. 
This is another step in code factorization and reusability, and in code scalability.</p>
<p>There are two ways for sharing extensions. The first way is to let the extension 
itself declare of which classes it is an extension. This is very handy if you have 
existing classes for which you want to add an additional behavior by means of the 
interfaces implemented in the extension. You don't need to rebuild the existing 
classes, just supply the extension. The second way is to declare the extension support 
in the classes that are extended by the extension. This is very handy if you have 
an existing extension and if you want to declare it as an extension of new classes. 
You don't need to rebuild the extension, just supply the new classes.</p>
<p>Declare that an extension class is an extension for several classes in the extension 
class source file (.cpp) as follows:</p>
<pre class="code">CATBeginImplementClass(MyExtensionClassName,    // Begin declaration
                       DataExtension,
                       CATBaseUnknown,
                       TheFirstClassIExtend);
CATAddClassExtension(TheSecondClassIExtend);
CATAddClassExtension(TheThirdClassIExtend);
...
CATAddClassExtension(TheLastClassIExtend);
CATEndImplementClass(MyExtensionClassName);     // End declaration</pre>
<p>The <code>CATBeginImplementClass</code> macro replaces the <code>CATImplementClass</code> 
macro. The <code>CATAddClassExtension</code> macro is used to add a class to the 
extended classes, and the <code>CATEndImplementClass</code> macro ends the declaration 
sequence for the concerned extension.</p>
<p>You declare an existing extension in a new class in this class source file (.cpp) 
as follows:</p>
<pre class="code">CATSupportImplementation(ExtensionClassName,
                         MyClassName,
                         ImplementedInterface);</pre>
<p>The <code>CATSupportImplementation</code> macro allows addition of existing extensions 
incrementally to new classes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="600000"></a>What Are the TIE and the BOA?</h2>
<p>In the code example above, when implementing <em>CATIData</em>, the following 
lines were used:</p>
<pre class="code">...
CATImplementClass(CAAEDataExtension, // Extension class name
                  DataExtension,     // Data extension
                  CATBaseUnknown,    // Base component - Always OM-derive TIE extensions from CATBaseUnknown
                  MyObject);         // Implementation class of the extended component

#include &quot;TIE_CATIData.h&quot;
TIE_CATIData(CAAEDataExtension);
...</pre>
<p>Let's detail them:</p>
<ul>
	<li>The <code>CATImplementClass</code> macro is used in conjunction with the
		<code>CATDeclareClass</code> macro in the class header file to express that 
		the class is part of a CAA Object Modeler component. Its arguments read 
		as follows:
		<ol>
			<li>The class name</li>
			<li>The CAA Object Modeler class type. Valid values are <code>Implementation</code>,
				<code>DataExtension</code>, and <code>CodeExtension</code></li>
			<li>The name of the main class from which the component OM-derives. 
				This is valid for:
				<ul>
					<li><code>Implementation</code> type classes</li>
					<li><code>DataExtension</code> type classes that implement one 
						interface using the BOA</li>
				</ul>
				This is NOT valid for:
				<ul>
					<li><code>DataExtension</code> type classes that implement all 
						their interfaces using TIEs</li>
					<li><code>CodeExtension</code> type classes</li>
				</ul>
				In these two last cases, this argument should be set to either CATBaseUnknown 
				or CATNull. </li>
			<li>The name of the extended component if the class is an extension, 
				or CATNull if the class is an implementation</li>
		</ol>
	</li>
	<li>The include of the TIE_CATIData.h header file generated from the TIE_CATIData.tsrc 
		file created when the <em>CATIData</em> interface was created. This file 
		contains the <code>TIE_CATIData</code> macro code</li>
	<li>The call to this <code>TIE_CATIData</code> macro that actually creates the 
		code for the TIE class. The macro parameter is the name of the class that 
		implements the interface. The TIE class is instantiated and a pointer to 
		it is returned by <code>QueryInterface</code> when the component is asked 
		for <em>CATIData</em>. The TIE is an intermediate class that ties the client 
		application and the component at run time without any link at build time.</li>
</ul>
<p>The TIE is the technology promoted by CAA to handle interfaces at run time. Nevertheless, 
in some scenarios where performance is critical, instantiating an intermediate object 
may be costly. For example, if a component is instantiated thousands of times and 
if a pointer to a given interface is requested against each component instance, 
thousands of TIE objects are created and may lead to memory allocation problems. 
To avoid this, CAA proposes an alternate solution: the BOA.</p>
<p>BOA stands for Basic Object Adapter. The BOA technology makes <code>QueryInterface</code> 
return a pointer to the class that implements the interface rather than a pointer 
to an intermediate class. The BOA saves a class instance per component in scenarios 
such as the one described above. Even if a pointer to the implementing class is 
returned, it is returned as an interface pointer, and there is not more coupling 
between interface and implementation than with the TIE. The client application does 
not know which class implements the interface, has no build time link with its header 
file or module, and can thus only call the methods exposed by this interface.</p>
<p>To implement <em>CATIData</em> using the BOA instead of the TIE:</p>
<ul>
	<li>Derive the extension class from the interface. The header file is thus changed:
		<pre class="code">#include &quot;<strong>CATIData.h</strong>&quot;

class MyDataExtension : public <strong>CATIData</strong> {
  CATDeclareClass;
  public :
    MyDataExtension();
    virtual ~MyDataExtension();
    virtual HRESULT __stdcall get_Length(int * oLength);
    virtual HRESULT __stdcall set_Length(int iLength);
  private :
    int _Length;
};</pre>
	</li>
	<li>Use the <code>CATImplementClass</code> and the <code>CATImplementBOA</code> 
		macros.
		<pre class="code">...
CATImplementClass(CAAEDataExtension, // Extension class name
                  DataExtension,     // Data extension
                  <strong>CATIData</strong>,          // Always OM-derive BOA extensions from the BOA implemented interface
                  MyObject);         // Implementation class of the extended component

<strong>CATImplementBOA(CATIData, CAAEDataExtension);</strong>
...</pre>
		<p>With respect to a TIE implementation, the following is changed:</p>
		<ul>
			<li>The third argument of <code>CATImplementClass</code> must be set 
				to the implemented interface from which the extension class derives</li>
			<li>The <code>CATImplementBOA</code> macro replaces the <code>TIE_CATIData</code> 
				macro. Its arguments are the BOA-implemented interface and the extension 
				class name respectively.</li>
		</ul>
	</li>
</ul>
<p>Note that since the class implementing the interface using the BOA must derive 
from the interface, and that CAA does not support multi-inheritance, a given class 
can BOA-implement only one interface, the others being TIE-implemented. So carefully 
choose the appropriate interface to BOA-implement if your class implements several 
interfaces. In addition, BOA is not available with <code>CodeExtension</code> type 
classes.</p>
<p>CAA BOA candidate interfaces are the <strong>U4</strong> and <strong>U5</strong> 
labelled interfaces [<a href="#References">3</a>], that is, the interfaces you implement 
and that calls onto your components. U4 means that you implement the interface by 
deriving a supplied adapter class and override a part of the methods. U5 means that 
you write the code for all the methods of the interface. While there is no BOA restriction 
with U5 interfaces, pay attention with U4 interfaces. A U4 interface must be BOA-enabled, 
that is, its adapter must derive from it, otherwise BOA cannot be used for that 
interface. Among the U4 interfaces, some are BOA-enabled, and some are not. To know 
whether a U4 interface is BOA-enabled, check <strong>BOA information</strong> section 
in the interface documentation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A component is an object that implements interfaces. It is seen as a single object 
from the component user standpoint, but can be implemented as several C++ objects.</p>
<p>An extension is an object that is part of a component to provide it a given behavior 
by implementing one or several interfaces. The extension is not seen from the client 
application, but is handled using a pointer to an interface it implements. An extension 
is also the means to add behavior to a component without modifying already existing 
client applications.</p>
<p>The TIE and the BOA are the CAA technologies to implement interfaces. A class 
can implement many interfaces using the TIE, but only one of them can be implemented 
using the BOA.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMUsingComponents.htm">Using Components</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocLxUsageRules.htm">
		Authorized API Identification, Usage, Deprecation, and Stability</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Oct 2003]</td>
		<td>BOA added</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
