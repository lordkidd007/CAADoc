<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Component Factory</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Component Factory</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a factory for a CAA component.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysGeoModelImpl Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysGeoModelImpl Do</a></li>
					<li><a href="#How">How to Launch CAASysGeoModelImpl</a></li>
					<li><a href="#Where">Where to Find the CAASysGeoModelImpl Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create a factory for a CAA components 
[<a href="#References">1</a>], that is, how to bundle several C++ classes that each 
implements one or several interfaces [<a href="#References">2</a>] and make that 
this set of classes acts and behaves as a single application object. This article 
focusses on how to create a factory for such components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysGeoModelImpl Use Case</h2>
<p>CAASysGeoModelImpl is a use case of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysGeoModelImpl Do</h3>
<p>This use case includes the code for a set of components that stand for geometric 
objects. The circle is taken as an example.</p>
<p>
<img alt="A Set of Components" height="424" src="images/CAASysOMCreatingCmp.jpg" width="644"/></p>
<p>The circle component is made of the <em>CAASysCircle</em> main class, and of 
the <em>CAAESysCreateInstanceForCircle</em>, <em>CAAESysCircle</em>, <em>CAAESysCircleCenterProperties,</em> 
and <em>CAAESysColorProperties</em> extension classes. <em>CAAESysCreateInstanceForCircle</em> 
implements the<em> CATICreateInstance</em> interface to enable the component creation.
<em>CAAESysCircle </em>implements the <em>CAAISysCircle</em> interface that is the 
circle type interface<em>.</em> <em>CAAESysCircleCenterProperties </em>implements 
the <em>CAAISysCircleCenterProperties</em> interface to manage the marker used to 
represent the circle center. <em>CAAESysColorProperties</em> implements the <em>
CAAISysColorProperties</em> interface to manage the circle color. <em>CAAESysCircle</em> 
and <em>CAAISysCircleCenterProperties</em> are extension classes of the <em>CAASysCircle</em> 
class only, while <em>CAAESysColorProperties</em> is shared with other geometric 
components, such as the line, the polyline, and the ellipse. Refer to sharing extensions 
in [<a href="#References">1</a>].</p>
<p>In addition, the factory for the circle component is also described. The <em>
CAASysGeomCont</em> main class that represents a container for geometric objects 
implements the <em>CAAISysGeomFactory</em> interface through a code extension class 
named <em>CAAESysGeomFactoryForGeomCont</em>.</p>
<p><strong>Note</strong>: Extension links are shown as dashed arrows, and implementation 
to interface links are shown using the realization link symbol, made of a dash line 
ended using a triangle on the interface side.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysGeoModelImpl</h3>
<p>You first need to build CAASysGeoModelImpl. To do this, you will need to set 
up the build time environment, then compile CAASysGeoModelImpl along with its prerequisites 
as described in [<a href="#References">4</a>]. You cannot launch CAASysGeoModelImpl 
itself. CAASysGeoModelImpl is simply used by the CAASysUsingComp [<a href="#References">3</a>] 
use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysGeoModelImpl Code</h3>
<p>The CAASysGeoModelImpl use case is made of several classes located in the CAASysGeoModelComp.m 
for the component main classes, and CAASysGeoModelImpl.m module for the extension 
classes. These modules belong to the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the 
folder where the API CD-ROM is installed. The header files of shared classes 
are located in the PrivateInterfaces folder of CAASystem.edu.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a component factory, such as the factory for <em>CAASysCircle</em>, 
there are three main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the <em>CAASysCircle</em> component factory 
		main class header file</a></td>
		<td>CAAESysGeomFactoryForGeomCont.h file</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the <em>CAASysCircle</em> component factory 
		main class source file</a></td>
		<td>CAAESysGeomFactoryForGeomCont.cpp file</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Update the interface dictionary</a></td>
		<td>CAASystem.edu.dico file</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CAASysCircle Component Factory Class Header 
File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;
#include &quot;CAAISysGeomFactory.h&quot; // Implemented interface

class CAAESysGeomFactoryForGeomCont : public CATBaseUnknown
{
  // Used in conjunction with CATImplementClass in the .cpp file
  CATDeclareClass;

  public:
    CAAESysGeomFactoryForGeomCont();
    virtual ~CAAESysGeomFactoryForGeomCont();

    virtual HRESULT Create (const CAAISysGeomFactory::GeomObject iObjectType, 
                            const IID                           &amp;iRequestedInterfaceIID,          
                            CATBaseUnknown                     **oCreatedObj) const;
  private:
    CAAESysGeomFactoryForGeomCont(const CAAESysGeomFactoryForGeomCont&amp;iObjectToCopy);
};</pre>
<p>The <em>CAAESysGeomFactoryForGeomCont</em> class derives from <em>CATBaseUnknown</em>. 
The <code>CATDeclareClass</code> macro declares that the class <em>CAAESysGeomFactoryForGeomCont</em> 
belongs to a component. Note that the copy constructor is set as private. The class 
has a constructor and a destructor, and declares the single <code>Create</code> 
methods of the <em>CAAISysGeomFactory</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the CAASysCircle Component Factory Class Source 
File</h3>
<pre class="code">#include &quot;CAAESysGeomFactoryForGeomCont.h&quot;
#include &quot;CATInstantiateComponent.h&quot;

#include &quot;TIE_CAAISysGeomFactory.h&quot;
<strong>TIE_CAAISysGeomFactory(CAAESysGeomFactoryForGeomCont);</strong>

<strong>CATImplementClass(CAAESysGeomFactoryForGeomCont,DataExtension,CATBaseUnknown,CAASysGeomCont);</strong>

CAAESysGeomFactoryForGeomCont::CAAESysGeomFactoryForGeomCont() {}

CAAESysGeomFactoryForGeomCont::CAAESysGeomFactoryForGeomCont() {}

HRESULT CAAESysGeomFactoryForGeomCont::<strong>Create</strong>(const CAAISysGeomFactory::GeomObject iObjectType, 
                                              const IID                           &amp;iIID,          
                                              CATBaseUnknown                     **oCreatedObj) const
{
  if ( NULL == oCreatedObj ) return E_FAIL;

  HRESULT rc = E_FAIL;
  
  switch (iObjectType)
  {
    ...
    case CAAISysGeomFactory::Circle : 
      rc = ::<strong>CATInstantiateComponent</strong>(&quot;CAASysCircle&quot;,
                                     iIID,
                                     (void**)oCreatedObj);
      break;
    ...
  }
  return rc;
}</pre>
<p>The <em>CAAESysGeomFactoryForGeomCont</em> class states that it implements the
<em>CAAISysGeomFactory</em> interface thanks to the <code>TIE_CAAISysGeomFactory</code> 
macro. The <code>CATImplementClass</code> macro declares that the <em>CAAESysGeomFactoryForGeomCont
</em>class is a data extension, thanks to the <code>DataExtension</code> keyword, 
that extends <em>CAASysGeomCont</em>. The third argument must always be set as
<em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension. The <code>
Create</code> method of <em>CAAISysGeomFactory</em> can create several geometric 
objects using a <code>switch</code> that takes the object type passed as input parameter.
<code>Create</code> simply instantiate the <em>CAASysCircle</em> component main 
class using the <code>CAAInstantiateComponent</code> global function [<a href="#References">1</a>] 
that returns a pointer to the requested interface thanks to the IID [<a href="#References">5</a>] 
passed as its second parameter.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Updating the Interface Dictionary</h3>
<pre class="code">...
CAASysGeomCont CAAISysGeomFactory libCAASysGeoModelImpl
...</pre>
<p>The interface dictionary declares that the <em>CAASysGeomCont</em> component 
implements the <em>CAAISysGeomFactory</em> interface, and that the code to load 
into memory to use this interface is located in the libCAASysGeoModelImpl shared 
library or DLL. Note that the component main class name is used to refer to the 
component in the interface dictionary, and never the extension class names. Note 
also that the shared library or DLL to associate with the component/interface pair 
is the one that contains the code created by the call to the TIE macro (This is 
generally the same library than the one that contains the interface implementation 
code, since the TIE macro is usually included in the extension class source file.) 
This is because when a client asks a component for an interface pointer, the TIE 
class is instantiated first, and it either retrieves the existing instance of the 
appropriate extension class, or otherwise instantiates it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a factory for components using the extension 
class <em>CAAESysGeomFactoryForGeomCont</em> of the component main class <em>CAASysGeomCont</em>. 
The main class declares the component inheritance and must C++-derive and OM-derive 
from <em>CATBaseUnknown</em> or from another component main class. Extension classes 
must directly or indirectly C++-derive from <em>CATBaseUnknown</em>, while OM-inheritance 
makes no sense for them. A component factory is a component that implements an interface 
providing a single method to create the component it deals with, and that instantiates 
the component main class using the <code>CATInstantiateComponent</code> global function. 
An extension class can be dedicated to a component or shared by several components. 
The interface dictionary declares the correspondence between the component, the 
interfaces it implements, and the shared library or DLL to load for each interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysUcOMUsingCmp.htm">Using Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAASysQrOMHRESULT.htm">What Is HRESULT?</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
