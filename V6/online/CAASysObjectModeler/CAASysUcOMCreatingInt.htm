<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Interfaces</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Interfaces</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create interfaces.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysGeoModelInf Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysGeoModelInf Do</a></li>
					<li><a href="#How">How to Launch CAASysGeoModelInf</a></li>
					<li><a href="#Where">Where to Find the CAASysGeoModelInf Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create interfaces that declare either 
a type or a behavior that a component [<a href="#References">1</a>] can implement 
[<a href="#References">2</a>] and that can be used in client application [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysGeoModelInf Use Case</h2>
<p>CAASysGeoModelInf is a use case of the CAASystem.edu framework that illustrates 
CATIA System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysGeoModelInf Do</h3>
<p>This use case gives a set of interfaces whose header files are located in the 
PublicInterfaces folder. The <em>CAAISysCircle</em> interface is taken as an 
example in this article to describe the steps of an interface creation. This interface 
is a type interface for a circle component.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysGeoModelInf</h3>
<p>To launch CAASysGeoModelInf, you will need to set up the build time environment, 
then compile CAASysGeoModelInf along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
CATIA is ready, do the following:</p>
<ul>
    <li>Launch <kbd>CAA: Create Geom</kbd> app from the <kbd>3D</kbd> quadrant of the Compass.</li>
    <li>Activate <kbd>CAA Geometry Creation</kbd> section of the action bar.</li>
	<li>Create several geometric objects such as points, lines, planes, and so on.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysGeoModelInf Code</h3>
<p>The CAASysGeoModelInf use case is made of several classes located in the CAASysGeoModelInf.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysGeoModelInf.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create an interface such as <em>CAAISysCircle</em>, there are three main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the <em>CAAISysCircle</em> interface header 
		file</a></td>
		<td>CAAISysCircle.h file in PublicInterfaces</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the <em>CAAISysCircle</em> interface source 
		file</a></td>
		<td>CAAISysCircle.cpp file</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the <em>CAAISysCircle</em> interface TIE</a></td>
		<td>TIE_CAAISysCircle.tsrc file</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CAAISysCircle Header File</h3>
<pre class="code">#ifndef CAAISysCircle_H
#define CAAISysCircle_H

#include &quot;CATBaseUnknown.h&quot;   // Needed to derive from CATBaseUnknown

<strong>#include &quot;CATMathPoint.h&quot;     // Needed by GetCenter &amp; SetCenter -&gt; class CATMathPoint; ??
#include &quot;CATMathVector.h&quot;    // Needed by SetPlane &amp; GetPlanar -&gt; class CATMathVector; ??</strong>

#include &quot;CAASysGeoModelInf.h&quot;  // Needed to export the IID and the class

// Global Unique IDentifier defined in .cpp 
<strong>extern ExportedByCAASysGeoModelInf IID IID_CAAISysCircle</strong>;

<strong>class ExportedByCAASysGeoModelInf CAAISysCircle</strong> : public CATBaseUnknown
{
  // Used in conjunction with CATImplementInterface in the .cpp file 
  <strong>CATDeclareInterface</strong>;

  public :

    <strong>virtual</strong> <strong>HRESULT</strong> SetPlane (const CATMathVector &amp; iNormal, 
                              const CATMathVector &amp; iAxis)   =0 ;
    virtual HRESULT SetCenter(const CATMathPoint &amp; iCenter)  =0 ;
    virtual HRESULT SetRadius(const float iRadius)           =0 ;

    virtual HRESULT GetPlane (CATMathVector &amp; oNormal,
                              CATMathVector &amp; oAxis)  const  =0 ;   
    virtual HRESULT GetCenter(CATMathPoint &amp; oCenter) const  =0 ;
    virtual HRESULT GetRadius(float &amp; oRadius)        const  =0 ;
};
#endif</pre>
<p>The <em>CAAISysCircle</em> interface IID (Interface IDentifier) [<a href="#References">4</a>] 
is declared using the <code>extern</code> keyword to enable client application to 
ask for <em>CAAISysCircle</em> interface pointers. The <em>CAAISysCircle</em> interface 
is an abstract class. All its methods are consequently declared as pure virtual, 
using the <code>virtual</code> keyword and by placing <code>=0</code> at the end 
of their declarations. <em>CAAISysCircle</em> derives from <em>CATBaseUnknown</em>, 
as any interface. The <code>CATDeclareInterface</code> macro declares that the abstract 
class <em>CAAISysCircle</em> is an interface. There is neither constructor nor destructor, 
since this class cannot ne instantiated.</p>
<p>To define a circle in the 3D space, three data should be set:</p>
<ul>
	<li>The plane on which the circle lies</li>
	<li>The point used as the circle center</li>
	<li>The circle radius.</li>
</ul>
<p>The three methods <code>SetPlane</code>, <code>SetCenter</code>, and <code>SetRadius</code> 
set this data, and the associated <code>GetPlane</code>, <code>G</code><code>etCenter</code> 
and <code>GetRadius</code> methods retrieve it. They all return an <code>HRESULT</code> 
[<a href="#References">5</a>]. Note that the parameters of the setter methods are 
declared as <code>const</code>, and thus cannot be modified by these methods. In 
the same way, the getter methods are declared as read-only using the <code>const</code> 
keywords placed after the closing parenthesis. Both setter and getter methods use 
references to components as parameters. This is to simplify the implementation code 
that have to deal with the Mathematics framework that uses references extensively. 
Otherwise, pointers could also be used.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the CAAISysCircle Source File</h3>
<pre class="code">#include &quot;CAAISysCircle.h&quot;

IID <strong>IID_CAAISysCircle</strong>={ /* f281aba4-d4b4-11d3-b7f5-0008c74fe8dd */
    0xf281aba4,
    0xd4b4,
    0x11d3,
    {0xb7, 0xf5, 0x00, 0x08, 0xc7, 0x4f, 0xe8, 0xdd}
  };

<strong>CATImplementInterface</strong>(CAAISysCircle, CATBaseUnknown);</pre>
<p>The <em>CAAISysCircle</em> interface source file gives the value of <em>CAAISysCircle</em> 
IID [<a href="#References">4</a>]. The <code>CATImplemenInterface</code> macro declares 
that the <em>CAAISysCircle</em> interface OM-derives [<a href="#References">5</a>] 
from <em>CATBaseUnknown</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the CAAISysCircle Interface TIE</h3>
<pre class="code">#include &quot;CAAISysCircle.h&quot;</pre>
<p>The <em>CAAISysCircle</em> interface TIE is created by the code builder mkmk 
using a simple include of the CAAISysCircle.h file in the TIE_CAAISysCircle.tsrc. 
This file should be located in the same src folder than CAAISysCircle.cpp.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create an interface as an abstract class, and how 
to create the interface TIE.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAASysQrOMGUID.htm">About Globally Unique IDentifiers</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAASysTaOMInheritance.htm">Object Modeler Inheritances</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
