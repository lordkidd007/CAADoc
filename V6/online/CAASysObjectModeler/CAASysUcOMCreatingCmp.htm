<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create CAA components.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysGeoModelImpl Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysGeoModelImpl Do</a></li>
					<li><a href="#How">How to Launch CAASysGeoModelImpl</a></li>
					<li><a href="#Where">Where to Find the CAASysGeoModelImpl Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create CAA components [<a href="#References">1</a>], 
that is, how to bundle several C++ classes that each implements one or several interfaces 
[<a href="#References">2</a>] and make that this set of classes acts and behaves 
as a single application object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysGeoModelImpl Use Case</h2>
<p>CAASysGeoModelImpl is a use case of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysGeoModelImpl Do</h3>
<p>This use case includes the code for a set of components that stand for geometric 
objects. The circle is taken as example.</p>
<p>
<img alt="A Set of Components" height="424" src="images/CAASysOMCreatingCmp.jpg" width="644"/></p>
<p>The circle component is made of the <em>CAASysCircle</em> main class, and of 
the <em>CAAESysCreateInstanceForCircle</em>, <em>CAAESysCircle</em>, <em>CAAESysCircleCenterProperties,</em> 
and <em>CAAESysColorProperties</em> extension classes. <em>CAAESysCreateInstanceForCircle</em> 
implements the <em>CATICreateInstance</em> interface to enable the component creation.
<em>CAAESysCircle </em>implements the <em>CAAISysCircle</em> interface that is the 
circle type interface<em>.</em> <em>CAAESysCircleCenterProperties </em>implements 
the <em>CAAISysCircleCenterProperties</em> interface to manage the marker used to 
represent the circle center. <em>CAAESysColorProperties</em> implements the <em>
CAAISysColorProperties</em> interface to manage the circle color. <em>CAAESysCircle</em> 
and <em>CAAISysCircleCenterProperties</em> are extension classes of the <em>CAASysCircle</em> 
class only, while <em>CAAESysColorProperties</em> is shared with other geometric 
components, such as the line, the polyline, and the ellipse. Refer to sharing extensions 
in [<a href="#References">1</a>].</p>
<p>In addition, the factory for the circle component is also described. The <em>
CAASysGeomCont</em> main class that represents a container for geometric objects 
implements the <em>CAAISysGeomFactory</em> interface through a code extension class 
named <em>CAAESysGeomFactoryForGeomCont</em> [<a href="#References">3</a>].</p>
<p><strong>Note</strong>: Extension links are shown as dashed arrows, and implementation 
to interface links are shown using the realization link symbol, made of a dash line 
ended using a triangle on the interface side.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysGeoModelImpl</h3>
<p>You first need to build CAASysGeoModelImpl. To do this, you will need to set 
up the build time environment, then compile CAASysGeoModelImpl along with its prerequisites 
as described in [<a href="#References">5</a>]. You cannot launch CAASysGeoModelImpl 
itself. CAASysGeoModelImpl is simply used by the CAASysUsingComp [<a href="#References">4</a>] 
use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysGeoModelImpl Code</h3>
<p>The CAASysGeoModelImpl use case is made of several classes located in the CAASysGeoModelComp.m 
for the component main classes and extension classes that implement <em>CATICreateInstance</em>, 
and CAASysGeoModelImpl.m module for the other extension classes. These modules belong 
to the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the 
folder where the API CD-ROM is installed. The header files of shared classes 
are located in the PrivateInterfaces folder of CAASystem.edu.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a component such as <em>CAASysCircle</em>, there are nine main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the <em>CAASysCircle</em> component main class 
		header file</a></td>
		<td>ProtectedInterfaces\CAASysCircle.h</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the <em>CAASysCircle</em> component main class 
		source file</a></td>
		<td>CAASysGeoModelComp.m\src\CAASysCircle.cpp</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the <em>CAAESysCreateInstanceForCircle</em> 
		extension class header file</a></td>
		<td>CAASysGeoModelComp.m\LocaInterfaces\CAAESysCreateInstanceForCircle.h</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Create the <em>CAAESysCreateInstanceForCircle</em> 
		extension class source file</a></td>
		<td>CAASysGeoModelComp.m\src\CAAESysCreateInstanceForCircle.cpp</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create the <em>CAAESysCircle</em> extension class header 
		file</a></td>
		<td>CAAESysCircle.h file</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Create the <em>CAAESysCircle</em> extension class source 
		file</a></td>
		<td>CAAESysCircle.cpp file</td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Create the <em>CAAESysCenterProperties</em> extension 
		class header file</a></td>
		<td>CAAESysCircleCenterProperties.h file</td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Create the <em>CAAESysCenterProperties</em> extension 
		class source file</a></td>
		<td>CAAESysCircleCenterProperties.cpp file</td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Create the <em>CAAESysColorProperties</em> shared extension 
		class header file</a></td>
		<td>CAAESysColorProperties.h file</td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Create the <em>CAAESysColorProperties</em> shared 
		extension class source file</a></td>
		<td>CAAESysColorProperties.cpp file</td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Update the interface dictionary</a></td>
		<td>CAASystem.edu.dico file</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CAASysCircle Header File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;     //Needed to derive from CATBaseUnknown
#include &quot;CAASysGeoModelComp.h&quot; //To export the class 

class ExportedByCAASysGeoModelComp CAASysCircle : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAASysCircle();
    virtual ~CAASysCircle();
  private:
    CAASysCircle(const CAASysCircle &amp;iObjectToCopy);</pre>
<p>The <em>CAASysCircle</em> class C++-derives from <em>CATBaseUnknown</em>. The
<code>CATDeclareClass</code> macro declares that the class <em>CAASysCircle</em> 
belongs to a component. Note that the copy constructor is set as private. The class 
has a constructor and a destructor only.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the CAASysCircle Source File</h3>
<pre class="code">#include &quot;CAASysCircle.h&quot;

<strong>CATImplementClass(CAASysCircle, Implementation, CATBaseUnknown, CATNull);</strong>

CAASysCircle::CAASysCircle()  {}

CAASysCircle::~CAASysCircle() {}</pre>
<p>The <code>CATImplementClass</code> macro declares that the <em>CAASysCircle</em> 
class is a component main class thanks the <code>Implementation</code> keyword, 
and OM-derives [<a href="#References">6</a>] from <em>CATBaseUnknown</em>. Any component 
main class declared as an <code>Implementation</code> must C++-derive and OM-derive 
from the same class, that must either be <em>CATBaseUnknown</em> or another component 
main class. The component main class doesn't implement any interface, but it could.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the CAAESysCreateInstanceForCircle Extension Class 
Header File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   //Needed to derive from CATBaseUnknown

class CAAESysCreateInstanceForCircle : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAAESysCreateInstanceForCircle();
    virtual ~CAAESysCreateInstanceForCircle();
    virtual HRESULT __stdcall <strong>CreateInstance</strong>(void **oppv);

  private:
    CAAESysCreateInstanceForCircle(const CAAESysCreateInstanceForCircle &amp;iObjectToCopy);
};</pre>
<p>The <em>CAAESysCreateInstanceForCircle</em> extension class derives from <em>
CATBaseUnknown</em>. The <code>CATDeclareClass</code> macro declares that the class
<em>CAAESysCreateInstanceForCircle</em> belongs to a component. The class has a 
constructor and a destructor, and declares the <code>CreateInstance</code> method 
which is the only method of the <em>CATICreateInstance</em> interface. Note that 
the copy constructor is set as private. This is very important for extensions. Since 
extensions must never be directly instantiated by client applications, this prevents 
the compiler from creating the copy constructor as public without you know. This 
copy constructor is not implemented in the source file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the CAAESysCircle Extension Class Source File</h3>
<pre class="code">#include &quot;CAAESysCreateInstanceForCircle.h&quot;
#include &quot;CAASysCircle.h&quot;
#include &lt;CATErrorDef.h&gt;

#include &quot;TIE_CATICreateInstance.h&quot;
TIE_CATICreateInstance(CAAESysCreateInstanceForCircle);

<strong>CATImplementClass(CAAESysCreateInstanceForCircle, CodeExtension, CATBaseUnknown, CAASysCircle);
</strong>
CAAESysCreateInstanceForCircle::CAAESysCreateInstanceForCircle()  {}

CAAESysCreateInstanceForCircle::~CAAESysCreateInstanceForCircle() {}

HRESULT __stdcall CAAESysCreateInstanceForCircle::CreateInstance(void ** oppv)
{
   CAASysCircle * pt = new CAASysCircle();
   if (NULL == pt) return(E_OUTOFMEMORY);
   *oppv = (void *)pt;
   return(S_OK);
}</pre>
<p>The <em>CAAESysCreateInstanceForCircle</em> class states that it implements the
<em>CATICreatInstance</em> interface thanks to the <code>TIE_CATICreateInsatnce</code> 
macro. This extension class is dedicated to the circle component, and the <code>
CATImplementClass</code> macro declares that the <em>CAAESysCreateInstanceForCircle</em> 
class is code extension class, thanks to the <code>CodeExtension</code> keyword, 
and that it extends the component whose main class is <em>CAASysCircle</em>. The 
third parameter must always be set to <em>CATBaseUnknown</em>, makes no sense, and 
is unused for extensions. The <code>CreateInstance</code> method instantiates the
<em>CAASysCircle</em> component main class. This method is called by the <code>CATInstantiateComponent</code> 
global function that is used by client applications to instantiate the component 
[<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the CAAESysCircle Extension Class Header File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   //Needed to derive from CATBaseUnknown

// Mathematics Framework
#include &quot;CATMathPoint.h&quot;     //Needed by SetCenter &amp; GetCenter
#include &quot;CATMathVector.h&quot;    //Needed by SetPlanar &amp; GetPlanar

class CAAESysCircle : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAAESysCircle();
    virtual ~CAAESysCircle();
    // <em>CAAISysCircle</em> interface methods
    virtual  HRESULT  SetCenter(const CATMathPoint  &amp; iCenter) ;
    virtual  HRESULT  GetCenter(CATMathPoint        &amp; oCenter) const ;
    virtual  HRESULT  SetRadius(const float           iRadius) ;
    virtual  HRESULT  GetRadius(float               &amp; oRadius) const ;
    virtual  HRESULT  SetPlane (const CATMathVector &amp; iNormal ,
                                const CATMathVector &amp; iAxis );
    virtual  HRESULT  GetPlane (CATMathVector       &amp; oNormal ,
                                CATMathVector       &amp; oAxis  ) const;    
  private:
    CAAESysCircle(const CAAESysCircle &amp;iObjectToCopy);
  private:
    float           _Radius ;
    CATMathPoint    _Center ;
    CATMathVector   _Normal ;
    CATMathVector   _Axis ;
};</pre>
<p>The <em>CAAESysCircle</em> extension class derives from <em>CATBaseUnknown</em>. 
The <code>CATDeclareClass</code> macro declares that the class <em>CAAESysCircle</em> 
belongs to a component. The class has a constructor and a destructor, and declares 
the methods of the <em>CAAISysCircle</em> interface, that set and get the circle 
center, radius, and plane. Note that the copy constructor is set as private. This 
is very important for extensions. Since extensions must never be directly instantiated 
by client applications, this prevents the compiler from creating the copy constructor 
as public without you know. This copy constructor is not implemented in the source 
file. The circle data are its center, its radius, the normal to its plane, and an 
axis of this plane.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the CAAESysCircle Extension Class Source File</h3>
<pre class="code">#include &quot;CAAESysCircle.h&quot;

<strong>#include &quot;TIE_CAAISysCircle.h&quot;
TIE_CAAISysCircle(CAAESysCircle);</strong>

<strong>CATImplementClass(CAAESysCircle, DataExtension, CATBaseUnknown, CAASysCircle);</strong>

CAAESysCircle::CAAESysCircle() : _Radius(0) {}

CAAESysCircle::~CAAESysCircle() {}

HRESULT  CAAESysCircle::SetCenter(const CATMathPoint &amp; iCenter) 
{
  _Center = iCenter ;
  return S_OK;
}

HRESULT  CAAESysCircle::SetRadius(const float iRadius) 
{
  _Radius = iRadius ;
  return S_OK;
}
	
HRESULT  CAAESysCircle::SetPlanar(const CATMathVector &amp; iNormal, 
                                  const CATMathVector &amp; iAxis) 
{
  _Normal= iNormal ;
  _Axis = iAxis ;
  return S_OK;
}
 
HRESULT CAAESysCircle::GetCenter(CATMathPoint &amp; oCenter) const 
{
  oCenter = _Center ;
  return S_OK;
}
	
HRESULT CAAESysCircle::GetRadius(float &amp; oRadius) const
{
  oRadius = _Radius ;
  return S_OK;
}
	
HRESULT  CAAESysCircle::GetPlanar(CATMathVector &amp; oNormal ,
                                  CATMathVector &amp; oAxis) const
{
  oNormal = _Normal ;
  oAxis   = _Axis ;  
  return S_OK;
}</pre>
<p>The <em>CAAESysCircle</em> class states that it implements the <em>CAAISysCircle</em> 
interface thanks to the <code>TIE_CAAISysCircle</code> macro. This extension class 
is dedicated to the circle component, and the <code>CATImplementClass</code> macro 
declares that the <em>CAAESysCircle</em> class is data extension class, thanks to 
the <code>DataExtension</code> keyword, and that it extends the component whose 
main class is <em>CAASysCircle</em>. The third parameter must always be set to
<em>CATBaseUnknown</em>, makes no sense, and is unused for extensions. The <em>CAAISysCircle</em> 
interface methods are implemented as usual.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating the CAAESysCircleCenterProperties Extension Class 
Header File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;                // Needed to derive from  CATBaseUnknown
#include &quot;CAAISysCircleCenterProperties.h&quot; // Needed to have the marker type

class CAAESysCircleCenterProperties: public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAAESysCircleCenterProperties();
    virtual ~CAAESysCircleCenterProperties();

    virtual HRESULT GetMarkerType(CAAISysCircleCenterProperties::MarkerType &amp; oMarkerType);
    virtual HRESULT SetMarkerType(const CAAISysCircleCenterProperties::MarkerType iMarkerType);
  private:
    CAAESysCircleCenterProperties(const CAAESysCircleCenterProperties &amp;iObjectToCopy);
  private:
    CAAISysCircleCenterProperties::MarkerType _MarkerType ;
};</pre>
<p>The <em>CAAESysCircleCenterProperties</em> extension class derives from <em>CATBaseUnknown</em>. 
The <code>CATDeclareClass</code> macro declares that the class <em>CAACAAESysCircleCenterProperties</em> 
belongs to a component. The class has a constructor and a destructor, and declares 
the <code>GetMarkerType</code> and <code>SetMarkerType</code> methods of the <em>
CAAISysCircleCenterProperties</em> interface. The marker type is set as a private 
data member. Note that the copy constructor is set as private. This is very important 
for extensions. Since extensions must never be directly instantiated by client applications, 
this prevents the compiler from creating the copy constructor as public without 
you know. This copy constructor is not implemented in the source file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Creating the CAAESysCircleCenterProperties Extension Class 
Source File</h3>
<pre class="code">#include &quot;CAAESysCircleCenterProperties.h&quot;

<strong>#include &quot;TIE_CAAISysCircleCenterProperties.h&quot;
TIE_CAAISysCircleCenterProperties(CAAESysCircleCenterProperties);
</strong>
<strong>CATImplementClass(CAAESysCircleCenterProperties, DataExtension, CATBaseUnknown, CAASysCircle);</strong>

CAAESysCircleCenterProperties::CAAESysCircleCenterProperties(): 
               _MarkerType(CAAISysCircleCenterProperties::Dot)
{}

CAAESysCircleCenterProperties::~CAAESysCircleCenterProperties()
{}

HRESULT CAAESysCircleCenterProperties::GetMarkerType(CAAISysCircleCenterProperties::MarkerType &amp; oMarkerType )
{
  oMarkerType = _MarkerType ;
  return (S_OK);
}

HRESULT CAAESysCircleCenterProperties::SetMarkerType(const CAAISysCircleCenterProperties::MarkerType iMarkerType)
{
  _MarkerType = iMarkerType ;
  return (S_OK);
}</pre>
<p>The <em>CAAESysColorProperties</em> class states that it implements the <em>CAAISysPointProperties</em> 
interface thanks to the <code>TIE_CAAISysPointProperties</code> macro. This extension 
class is dedicated to the circle components, and the <code>CATImplementClass</code> 
macro declares that the <em>CAAESysPointProperties</em> class is data extension 
class, thanks to the <code>DataExtension</code> keyword, and that it extends the 
component whose main class is <em>CAASysCircle</em>. The third parameter must always 
be set to <em>CATBaseUnknown</em>, makes no sense, and is unused for extensions. 
The <em>CAAISysPointProperties</em> interface methods are implemented as usual.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Creating the CAAEColorProperties Shared Extension Class 
Header File</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   // to derive from  CATBaseUnknown

class CAAESysColorProperties: public CATBaseUnknown
{
  // Used in conjunction with CATImplementClass in the .cpp file
  <strong>CATDeclareClass</strong>;

  public:
    CAAESysColorProperties();
    virtual ~CAAESysColorProperties();

    virtual HRESULT GetColor(      int &amp;oRed,       int &amp;oGreen,       int &amp;oBlue) const;
    virtual HRESULT SetColor(const int  iRed, const int  iGreen, const int  iBlue); 

  private:
    CAAESysColorProperties(const CAAESysColorProperties &amp;iObjectToCopy);
  private:
    int _Red, _Green, _Blue,;
};</pre>
<p>The <em>CAAESysColorProperties</em> extension class derives from <em>CATBaseUnknown</em>. 
The <code>CATDeclareClass</code> macro declares that the class <em>CAAESysColorProperties</em> 
belongs to a component. The class has a constructor and a destructor, and declares 
the <code>GetColor</code> and <code>SetColor</code> methods of the <em>CAAISysColorProperties</em> 
interface. The RGB color components are set as private data members. Note that the 
copy constructor is set as private. This is very important for extensions. Since 
extensions must never be directly instantiated by client applications, this prevents 
the compiler from creating the copy constructor as public. This copy constructor 
is not implemented in the source file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Creating the CAAEColorProperties Shared Extension Class 
Source File</h3>
<pre class="code">#include &quot;CAAESysColorProperties.h&quot;

#include &quot;TIE_CAAISysColorProperties.h&quot;
<strong>TIE_CAAISysColorProperties(CAAESysColorProperties);</strong>

<strong>CATBeginImplementClass(CAAESysColorProperties, DataExtension, CATBaseUnknown, CAASysCircle);
CATAddClassExtension(CAASysEllipse) ;
CATAddClassExtension(CAASysLine) ;
CATAddClassExtension(CAASysPolyline) ;
CATEndImplementClass(CAAESysColorProperties);
</strong>
CAAESysColorProperties::CAAESysColorProperties()
                      : _Red(255),_Blue(255),_Green(255)
{}

CAAESysColorProperties::~CAAESysColorProperties() {}

HRESULT CAAESysColorProperties::SetColor(const int iRed, const int iGreen, const int iBlue) 
{
    if ( (iRed   &lt; 0) || (iRed   &gt; 255) ) return E_FAIL;
    if ( (iGreen &lt; 0) || (iGreen &gt; 255) ) return E_FAIL;
    if ( (iBlue  &lt; 0) || (iBlue  &gt; 255) ) return E_FAIL;

    _Red   = iRed ;
    _Green = iGreen ;
    _Blue  = iBlue ;

    return (S_OK);
}

HRESULT CAAESysColorProperties::GetColor(int &amp; oRed, int &amp; oGreen, int &amp; oBlue) const
{
    oRed   = _Red;
    oGreen = _Green;
    oBlue  = _Blue;

    return (S_OK);
}</pre>
<p>The <em>CAAESysColorProperties</em> class states that it implements the <em>CAAISysColorProperties</em> 
interface thanks to the <code>TIE_CAAISysColorProperties</code> macro. This extension 
class is shared by several components, and declares these components thanks to the
<code>CATBeginImplementClass</code>, <code>CATAddClassExtension</code>, and
<code>CATEndImplementClass</code> macros:</p>
<ul>
	<li><code>CATBeginImplementClass</code> declares that the <em>CAAESysColorProperties</em> 
		class is a component extension class thanks the <code>DataExtension</code> 
		keyword, and that it extends the component whose main class is <em>CAASysCircle</em>. 
		The third parameter must always be set to <em>CATBaseUnknown</em>, makes 
		no sense, and is unused for extensions.</li>
	<li><code>CATAddClassExtension</code> goes on declaring that <em>CAAESysColorProperties</em> 
		extends as a data extension the components whose main classes are <em>CAASysEllipse</em>,
		<em>CAASysEllispe</em>, and <em>CAASysPolyline</em>.</li>
	<li><code>CATEndImplementClass</code> ends the extended component list.</li>
</ul>
<p>The <em>CAAISysColorProperties</em> interface methods are implemented as usual.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Updating the Interface Dictionary</h3>
<pre class="code">...
CAASysCircle CATICreateInstance            libCAASysGeoModelComp
CAASysCircle CAAISysCircle                 libCAASysGeoModelImpl
CAASysCircle CAAISysColorProperties        libCAASysGeoModelImpl
CAASysCircle CAAISysCircleCenterProperties libCAASysGeoModelImpl
...</pre>
<p>The interface dictionary declares that the <em>CAASysCircle</em> component implements 
the <em>CAAISysCircle</em>, <em>CAAISysColorProperties</em>, and <em>CAAISysCircleCenterProperties</em>, 
and that the code to load into memory to use these interfaces is located in the 
libCAASysGeoModelImpl shared library or DLL. Note that the component main class 
name is used to refer to the component in the interface dictionary, and never the 
extension class names. Note also that the shared library or DLL to associate with 
the component/interface pair is the one that contains the code created by the call 
to the TIE macro (This is generally the same library than the one that contains 
the interface implementation code, since the TIE macro is usually included in the 
extension class source file.) This is because when a client asks a component for 
an interface pointer, the TIE class is instantiated first, and it either retrieves 
the existing instance of the appropriate extension class, or otherwise instantiates 
it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a component using a main class and extension 
classes. The main class declares the component inheritance and must C++-derive and 
OM-derive from <em>CATBaseUnknown</em> or from another component main class. Extension 
classes must directly or indirectly C++-derive from <em>CATBaseUnknown</em>, while 
OM-inheritance makes no sense for them. An extension class can be dedicated to a 
component or shared by several components. The interface dictionary declares the 
correspondence between the component, the interfaces it implements, and the shared 
library or DLL to load for each interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysUcOMCreatingCmpFact.htm">Creating a Component Factory</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAASysUcOMUsingCmp.htm">Using Components</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAASysTaOMInheritance.htm">Object Modeler Inheritances</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
