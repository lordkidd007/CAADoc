<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Components in Batch</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Components in Batch</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article shows how to use components.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCompRuntimeView Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCompRuntimeView Do</a></li>
					<li><a href="#How">How to Launch CAASysCompRuntimeView</a></li>
					<li><a href="#Where">Where to Find the CAASysCompRuntimeView 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
<p>This use case is intended to show you how to instantiate components, ask for 
interface pointers, use their methods, and manage component life cycle.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UseCase"></a>The CAASysCompRuntimeView Use Case</h3>
<p>CAASysCompRuntimeView is a use case of the CAASystem.edu framework that illustrates 
CATIA System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="What"></a>What Does CAASysCompRuntimeView Do</h4>
<p>This use case illustrates the usage of components. They are created using the 
global function <code>CATInstantiateComponent</code>, and accessed and modified 
using pointers to the interfaces they implement. The use case shows also how to 
manage their life cycle. This use case uses a point, a line, and a circle component. 
They each implement type interface named <em>CAAISysPoint</em>, <em>CAAISysLine</em>, 
and <em>CAAISysCircle</em>, respectively, and some other interfaces: <em>CAAISysPointProperties</em>,
<em>CAAISysTextureProperties</em>, <em>CAAISysColorProperties</em>, and <em>CAAISysCircleCenterProperties</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="How"></a>How to Launch CAASysCompRuntimeView</h4>
<p>To launch CAASysCompRuntimeView, you will need to set up the build time environment, 
then compile CAASysCompRuntimeView along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Where"></a>Where to Find the CAASysCompRuntimeView Code</h4>
<p>The CAASysCompRuntimeView use case is made of single file located in the CAASysCompRuntimeView.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCompRuntimeView.m</code></p>
<p>where <code>InstallRootFolder</code>[<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>To use the components, there are five main steps:</p>
<ol>
	<li><a href="#Step1">Instantiating the Components</a></li>
	<li><a href="#Step2">Using the CAASysPoint Interfaces</a></li>
	<li><a href="#Step3">Using the CAASysLine Interfaces</a></li>
	<li><a href="#Step4">Using the CAASysCircle Interfaces</a></li>
	<li><a href="#Step5">Managing Component Life Cycle</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step1"></a>Instantiating the Components</h4>
<pre class="code">...
  CAAISysPoint * piSysPointOnPoint = NULL; 
  HRESULT rc = ::CATInstantiateComponent(&quot;CAASysPoint&quot;,
                                         IID_CAAISysPoint,
                                         (void**)&amp;piSysPointOnPoint);
 CAAISysPoint * piSysPoint2OnPoint = NULL ;
 if (SUCCEEDED(rc))
 {
    // Keep piSysPointOnPoint in another pointer 
    piSysPoint2OnPoint = piSysPointOnPoint;

    // An interface pointer created by assignment must be Addref'd 
    piSysPoint2OnPoint-&gt;AddRef();

    // piSysPointOnPoint is no longer needed
    piSysPointOnPoint-&gt;Release(); 
    piSysPointOnPoint = NULL ;
  }
  else {
...</pre>
<p>The <code>CATInstantiateComponent</code> global function creates an instance 
of the <em>CAASysPoint</em> component and retrieves a pointer to <em>CAAISysPoint</em>. 
The parameters are:</p>
<table class="fill">
	<tr>
		<td><code>CAASysPoint</code></td>
		<td>Name of the component to instantiate. It's the name of its main class</td>
	</tr>
	<tr>
		<td><code>IID_CAAISysPoint</code></td>
		<td>IID of the interface to which a pointer is requested</td>
	</tr>
	<tr>
		<td><code>piSysPointOnPoint</code></td>
		<td>The pointer retrieved to <em>CAAISysPoint</em></td>
	</tr>
</table>
<p>The <code>CATInstantiateComponent</code> global function calls <code>AddRef</code> 
for the <code>piSysPointOnPoint</code> pointer returned. To prevent from memory 
leak, this pointer will be released when it will be no longer needed.</p>
<p>Then another pointer to <em>CAAISysPoint</em> is initialized from the <code>piSysPointOnPoint</code>. 
Note that this one must be AddRef'ed to increment the component reference counter. 
This ensures correct component life cycle management. <code>piSysPoint2OnPoint</code> 
is used later to access the point and <code>piSysPointOnPoint</code> becomes of 
no use. It is released and set to NULL.</p>
<pre class="code">...
  CATBaseUnknown * piBUknOnLine= NULL;
  rc = ::CATInstantiateComponent(&quot;CAASysLine&quot;, 
                                 IID_CATBaseUnknown,
                                 (void**)&amp;piBUknOnLine);
  if (FAILED(rc)){
...

  CAAISysColorProperties * piSysColorPropOnCircle = NULL; 
  rc = ::CATInstantiateComponent(&quot;CAASysCircle&quot;, 
                                 IID_CAAISysColorProperties,
                                 (void**)&amp;piSysColorPropOnCircle);
  if (FAILED(rc)) {
...
  CAAISysPointProperties * piSysPointPropOnCircle = NULL; 
  rc = ::CATInstantiateComponent(&quot;CAASysCircle&quot;, 
                                 IID_CAAISysPointProperties,
                                 (void**)&amp;piSysPointPropOnCircle);
  if (SUCCEEDED(rc)) {
...</pre>
<p>In the same way, the <code>CATInstantiateComponent</code> global function creates 
an instance of the <em>CAASysLine</em> component and retrieves this time a pointer 
to <em>CATBaseUnknown</em>, an instance of the <em>CAASysCircle</em> component and 
retrieves a pointer to <em>CAASysColorProperties</em>, and another instance of the
<em>CAASysCircle</em> component and attempts to retrieve a pointer to <em>CAAISysPointProperties</em>. 
Note that the return code is checked whenever the function is closed. With the last 
call, the creation fails since <em>CAASysCircle</em> does not implement <em>CAAISysPointProperties</em>, 
and the trace is issued in the improbable case of a success.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step2"></a>Using the CAASysPoint Interfaces</h4>
<pre class="code">...
  if ( NULL != piSysPoint2OnPoint )
  {
    float x(1.f) ,y(2.3f) ,z(3.4f);
    rc = piSysPoint2OnPoint-&gt;SetCoord(x,y,z);
    if ( SUCCEEDED(rc) )
    {
       // make sure that the coordinates are correctly set.
       x = 0 ; y = 0; z = 0 ;
       rc = piSysPoint2OnPoint-&gt;GetCoord(x,y,z);
      if ( FAILED(rc) ) {
...

  CAAISysPointProperties * piSysPointPropertiesOnPoint = NULL; 
  rc = piSysPoint2OnPoint-&gt;QueryInterface(IID_CAAISysPointProperties, 
                                          (void**)&amp;piSysPointPropertiesOnPoint);
  if ( SUCCEEDED(rc) )
  {
    CAAISysPointProperties::MarkerType type ;
    piSysPointPropertiesOnPoint-&gt;GetMarkerType(type);
    switch (type)
    {
      case 0 : cout &lt;&lt; &quot;the point type is a dot&quot;&lt;&lt; endl; break;
      case 1 : cout &lt;&lt; &quot;the point type is a cross&quot;&lt;&lt; endl;break;
      case 2 : cout &lt;&lt; &quot;the point type is a plus&quot;&lt;&lt; endl;break;
      case 3 : cout &lt;&lt; &quot;the point type is a star&quot;&lt;&lt; endl;break;
    }
    piSysPointPropertiesOnPoint-&gt;Release();
    piSysPointPropertiesOnPoint = NULL ;
  }
...</pre>
<p>Before using any pointer, a check against <code>NULL</code> is always secure. 
The point coordinates are set and retrieved thanks to the <code>SetCoord</code> 
and <code>GetCoord</code> methods of <em>CAAISysPoint</em> [<a href="#References">1</a>]. 
Note the the return code is always checked to take appropriate decisions.</p>
<p>Then a pointer to the <em>CAAISysPointProperties</em> interface implemented by 
the <em>CAASysPoint</em> component is retrieved from <code>piSysPoint2OnPoint</code> 
thanks to <code>QueryInterface</code>. This interface represents the way the point 
is shown, as a dot, a cross, a plus sign, or a star, thanks to the <code>MarkerType</code> 
enumeration which is a member of <em>CAAISysPointProperties</em>. Once this property 
is displayed, the <code>piSysPointPropertiesOnPoint</code>, being not intended to 
be used later, is released and set to <code>NULL</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step3"></a>Using the CAASysLine Interfaces</h4>
<pre class="code">...
  if ( NULL != piBUknOnLine)
  {
    CAAISysPointProperties * piSysPointPropOnLine = NULL; 
    rc = piBUknOnLine-&gt;QueryInterface(IID_CAAISysPointProperties, 
                                      (void**)&amp;piSysPointPropOnLine);
    if ( SUCCEEDED(rc) )
    {
...
  CAAISysColorProperties * piSysColorPropOnLine = NULL; 
  rc = piBUknOnLine-&gt;QueryInterface(IID_CAAISysColorProperties, 
                                    (void**)&amp;piSysColorPropOnLine);
  if ( SUCCEEDED(rc) )
  {
    rc = piSysColorPropOnLine-&gt;SetColor(0,260,0);
    if ( SUCCEEDED(rc) )
    {
      cout &lt;&lt; &quot;Invalid RGB color values, not checked by the component&quot;&lt;&lt; endl; 
      return 1 ;
    }
    rc = piSysColorPropOnLine-&gt;SetColor(0,120,0);
    if ( FAILED(rc) )
    {

    // Pointer not any longer needed 
    piSysColorPropOnLine-&gt;Release();
    piSysColorPropOnLine = NULL ;
  }
  else {
  ...</pre>
<p>The <em>CAASysLine</em> pointer to <em>CATBaseUnknown</em> interface is checked, 
and a an attempt to retrieve a pointer to <em>CAAISysPointProperties</em> fails 
since <em>CAASysLine</em> does not implement this interface, thus the return code 
test against <kbd>SUCCEEDED</kbd>.</p>
<p>A pointer to <em>CAAISysColorProperties</em> is successfully retrieved, and an 
invalid color with the green component set to 260, which is out of range, fails 
because the implementation of the <code>SetColor</code> method naturally checks 
that only valid values are input. A second call to set a valid value succeeds.</p>
<p>When the pointer becomes of no use, it is released and set to <code>NULL</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step4"></a>Using the CAASysCircle Interfaces</h4>
<pre class="code">...
  if ( NULL != piSysColorPropOnCircle )
  {
    CAAISysTextureProperties * piSysTexturePropOnCircle = NULL; 
    rc = piSysColorPropOnCircle-&gt;QueryInterface(IID_CAAISysTextureProperties, 
                                                 (void**)&amp;piSysTexturePropOnCircle);
    if ( SUCCEEDED(rc) )
    {
      rc = piSysTexturePropOnCircle-&gt;SetMetal(0);
      if ( SUCCEEDED(rc) )
      {
        int metal;
        rc = piSysTexturePropOnCircle-&gt;GetMetal(metal);
        if ( SUCCEEDED(rc) )
        {
          if ( 0 == metal )
          {
            cout &lt;&lt; &quot;OK, The Circle is not in metal&quot;&lt;&lt; endl;
          }
        }
      }
      piSysTexturePropOnCircle-&gt;Release();
      piSysTexturePropOnCircle = NULL ;
    } else {
      ...

  CAAISysCircleCenterProperties * piSysCircleCenterPropOnCircle = NULL; 
  rc = piSysColorPropOnCircle-&gt;QueryInterface(IID_CAAISysCircleCenterProperties, 
                                              (void**)&amp;piSysCircleCenterPropOnCircle);
  if ( SUCCEEDED(rc) )
  {
    rc = piSysCircleCenterPropOnCircle-&gt;SetMarkerType(CAAISysCircleCenterProperties::Cross);
    if ( SUCCEEDED(rc) )
    {
      CAAISysCircleCenterProperties::MarkerType type ;
      piSysCircleCenterPropOnCircle-&gt;GetMarkerType(type);
      switch (type)
      {
        case 0 : cout &lt;&lt; &quot;the Circle center is a dot&quot; &lt;&lt; endl; break;
        case 1 : cout &lt;&lt; &quot;the Circle center is a cross&quot;&lt;&lt; endl;break;
        case 2 : cout &lt;&lt; &quot;the Circle center is a plus&quot; &lt;&lt; endl;break;
        case 3 : cout &lt;&lt; &quot;the Circle center is a star&quot; &lt;&lt; endl;break;
      }
    }
    piSysCircleCenterPropOnCircle-&gt;Release();
    piSysCircleCenterPropOnCircle = NULL ;
  } else {
...</pre>
<p>The pointer to the <em>CAAISysPropColorOnCircle</em> interface on the circle 
component is checked, and is used to retrieve a pointer to <em>CAAISysTextureProperties</em>. 
This interface is implemented by the circle component and is used to set the circle 
material, using the <kbd>SetMetal</kbd> method, to the 0 value, that is not in metal. 
The <kbd>GetMetal</kbd> method is used to retrieve this value. When the pointer 
becomes of no use, it is released and set to <code>NULL</code>.</p>
<p>A pointer to another interface, <em>CAAISysCircleCenterProperties</em> also implemented 
by the circle component, is retrieved, and used to set the circle center point symbol 
as a cross thanks to the <code>SetMarkerType</code> method and the value <code>Cross</code> 
of the interface member enumeration <kbd>MarkerType</kbd>. Then this value is retrieved 
and displayed. When the pointer becomes of no use, it is released and set to
<code>NULL</code>.</p>
<p>Note that each return code from either <code>QueryInterface</code> or an interface 
method is systematically checked before proceeding. If the returned value is not 
the one expected, an appropriate process takes place.</p>
<p>Note also that each pointer that becomes of no use is immediately released and 
set to <kbd>NULL</kbd> to avoid having unused pointers still valid.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step5"></a>Managing the Component Life Cycle</h4>
<pre class="code">...
  piSysPoint2OnPoint-&gt;Release();
  piSysPoint2OnPoint = NULL;

  piBUknOnLine-&gt;Release();
  piBUknOnLine = NULL ;

  piSysColorPropOnCircle-&gt;Release();
  piSysColorPropOnCircle = NULL;
...</pre>
<p>At this moment only the initial pointers to the components remain valid. The 
other pointers created or retrieved were released as soon as they were no longer 
needed, and set to <code>NULL</code> to prevent from a fortuitous but illegal usage. 
To prevent from memory leaks, these initial pointers are is released and set to
<code>NULL</code>. The reference counters of the components have reached 0, and 
the components are deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="InShort"></a>In Short</h3>
<p>This use case shows how to use components, that is how to create a component 
using the <code>CATInstantiateComponent</code> global function and retrieve a pointer 
to an interface the component implements. Using this interface pointer, the component 
is initialized, and a pointer to another interface is asked for, and used. A pointer 
to an interface that the component doesn't implement is asked for, to show what 
to do if this happens. The component life cycle is managed by releasing and setting 
to <kbd>NULL</kbd> the interface pointers as soon as they are no longer needed. 
When all the pointers against a component are released and set to <kbd>NULL</kbd>, 
the component reference counter reaches 0, and the component is automatically deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="References"></a>References</h3>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="CAASysTaOMCreatingComponent.htm">Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="CAASysTaOMCreatingInterfaces.htm">Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysTaOMInheritance.htm">Object Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="History"></a>History</h3>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
