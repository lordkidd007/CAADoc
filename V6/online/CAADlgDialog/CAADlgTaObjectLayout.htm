<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Arrange Dialog Objects</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Arrange Dialog Objects</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Arranging dialog objects in a dialog window, a dialog box, a frame or 
		a tab page, that is a container, consists in positionning each object at 
		a given place with respect to the others. The container layout will then 
		not changed when the dialog window is resized.</p>
		<ul>
			<li><a href="#100000">Dialog Object Layout</a></li>
			<li><a href="#200000">Object and Container Sizes</a></li>
			<li><a href="#300000">Dynamic Resizing and Modification</a></li>
			<li><a href="#400000">Grid Layout</a></li>
			<li><a href="#500000">Tabulation Layout</a></li>
			<li><a href="#References">References</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>Dialog Object Layout</h2>
<p>The main parameters for object layout are the dimensions and the assigned position 
of each object. Objects are automatically sized using their contents when they are 
instantiated. For example, a label size is computed using the number of characters 
that the label title includes, and a multi-list size is computed using the number 
of rows and columns. You can arrange the dialog objects inside their container. 
In addition, you can allow some objects to be resizable when the whole window is 
resized. </p>
<p>Arranging dialog objects within a container applies to the following containers, 
which are instances of the <em>CATDlgDocument</em>, <em>CATDlgDialog</em>, <em>CATDlgFrame</em>, 
and <em>CATDlgTabPage</em> classes. For other container classes, the layout is predetermined 
and cannot be customized, because:</p>
<ul>
	<li>They can't have any child: <em>CATDlgNotify</em> and <em>CATDlgFile</em>.</li>
	<li>They can have a single child: <em>CATDlgContainer</em>.</li>
	<li>The layout is imposed: <em>CATDlgSplitter</em>, <em>CATDlgBar</em>.</li>
	<li style="height: 13px">The layout is specific to the object's representation:
		<em>CATDlgMenu</em>, <em>CATDlgTabContainer</em>, and <em>CATDlgIconBox</em>.</li>
</ul>
<p>If you have complex windows with containers which include many objects, you need 
to arrange your containers and their contents. It is advisable to arrange your window 
container by container, beginning with the main container. You can refer to the &quot;The 
Burger Order Dialog Box&quot; use case [<a href="#References">1</a>] to see how 
the frames as well as their labels, separators and the bottom push buttons were 
first arranged, and then how the contents of each of the three frames were arranged 
afterwards.</p>
<p>There are two ways of arranging dialog objects within a container: the grid layout 
and the tabulation layout. The grid layout is based on a grid that defines cells 
in which dialog object can take place. The tabulation layout is based on tabulations 
to which dialog objects are attached by one ore several sides. The grid layout is 
a bit easier to understand and implement than the tabulation layout, but provides 
less capabilities. It match most of the situations and is the recommended way of 
arranging dialog objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Object and Container Sizes</h2>
<p>The size of each object is determined by its contents. For example, a label, 
that is a <em>CATDlgLabel</em> instance, size is determined at instantiation time 
using the text it contains and the character font used to display the text. If your 
change the text or the character font or both, when re-instantiating the label, 
its size changes accordingly. But if you dynamically change the text by means of 
the method <code>SetTitle</code> without re-instantiating the label, the size does 
not change and maybe a part of the text is not displayed. </p>
<p>The size of a container is also determined by its contents. The size of a <em>
CATDlgTabContainer</em> instance is the size of the biggest <em>CATDlgTab</em> instance 
it contains.</p>
<p>The <em>CATDlgContainer</em> is an exception. Since it is dedicated to contain 
many controls, but usually to display only a part of them, you need to assign it 
a size using absolute values expressed in pixels by means of the <code>SetRectDimensions</code> 
method. For example, the following statement:</p>
<pre class="code">pContainer-&gt;SetRectDimensions(1, 1, 200, 300);</pre>
<p>sets the size of <code>pWindow1</code> to 200 pixels width and 300 pixels height. 
The first two coordinates are unused, but must be positive (&gt;0).</p>
<p>You can also set its size in order to show all its content, as follows:</p>
<pre class="code">pContainer-&gt;SetRectDimensions(1, 1, -1, -1);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Dynamic Resizing or Modification</h2>
<p>When resizing a dialog window, the containers it contains are resized accordingly, 
and part of their contents can be modified or hidden. For example, containers or 
sub-containers whose sizes decrease can hide controls and scrollbars can appear 
to help display hidden controls. On the opposite, when increasing the dialog window 
size, the scrollbars can disappear as soon as all the existing controls are displayed.</p>
<p>But when the dialog window is displayed, it is expected to keep the same contents, 
whether this contents being fully displayed or partly hidden, in order to display 
consistently to the end user. Nevertheless, two exceptions exist:</p>
<ol>
	<li>Two or several objects can be designed to be displayed at the same location, 
		depending on the context. In this case, all these objects must be created 
		when building the dialog window. The appropriate one is then displayed and 
		attached to the tabulation line when necessary, the one previously displayed 
		is concurrently detached and hidden. This is possible using tabulations 
		only with the <code>ReplaceKeepAttachments</code> method</li>
	<li>A dialog box can have a hidden part that can be displayed using a More push 
		button. This is possible with <em>CATDlgDialog</em> derived classes that 
		feature the <code>CATDlgWndAutoResize</code> style, and that contains only
		<em>CATDlgFrame</em> instances.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>Grid Layout</h2>
<p><strong>This is the recommended way of arranging dialog objects</strong>. It uses a grid 
made of cells. Each cell is located at the intersection of a row and a column. A 
given container or dialog object is contained in one or more cells, and can be attached 
to cell sides for resizing management. Each container has its own grid used for 
the layout of the objects it contains. This is described in &quot;Ho to Arrange 
Dialog Objects Using a Grid&quot; [<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>Tabulation Layout</h2>
<p>This is not the recommended way of arranging dialog objects but it is sometimes 
necessary to create dynamic layout. It uses a set of horizontal and vertical tabulation 
lines along which you can attach the sides of the containers and objects. You can 
have a set of horizontal and vertical tabulation line set for each container to 
manage the layout of the objects it contains. This is described in &quot;How to 
Arrange Dialog Objects Using Tabulations&quot; [<a href="#References">3</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Dialog object container sizes are determined using their contents. Containers 
can be resized without modifying their contents, that can be partially hidden if 
necessary. Containers and controls can be arranged either using a grid (recommended), 
or using tabulations (Not recommended).</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgUcBurger.htm">The Burger Order Dialog Box</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADlgTaGridLayout.htm">How to Arrange Dialog Objects Using 
		a Grid</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADlgTaTabLayout.htm">How to Arrange Dialog Objects Using 
		Tabulations</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2003]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
