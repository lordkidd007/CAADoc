<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Arrange Dialog Objects Using Tabulations</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Arrange Dialog Objects Using Tabulations</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Arranging dialog objects in a dialog window, a dialog box, a frame or 
		a tab page, that is a container, consists in positioning each object at 
		a given place with respect to the others [<a href="#References">1</a>]. 
		The container layout will then not changed when the dialog window is resized. 
		The dialog objects can be precisely arranged in their respective containers 
		using tabulations attached to the container.</p>
		<ul>
			<li><a href="#300000">Object Default Layout</a></li>
			<li><a href="#500000">Tabulation Layout</a>
				<ul>
					<li><a href="#510000">Tabulation Lines</a></li>
					<li><a href="#520000">Attaching Containers and Controls along 
						Tabulation Lines</a></li>
					<li><a href="#530000">Allowing for Container Resize</a></li>
					<li><a href="#540000">Creating Tabulation Lines and Attaching 
						Objects Along Them</a>
						<ul>
							<li><a href="#541000">Using Implicit Tabulation Lines</a></li>
							<li><a href="#542000">Using Explicit Tabulation Lines</a></li>
							<li><a href="#543000">A Window Layout Example</a></li>
						</ul>
					</li>
					<li><a href="#550000">Changing Attached Objects and Attachments</a></li>
				</ul>
			</li>
			<li><a href="#600000">The Object Container Tabulation Layout Specific 
				Programming Tasks</a>
				<ul>
					<li><a href="#Managing1">Managing the Frame Content Default 
						Orientation</a></li>
					<li><a href="#Managing2">Managing Tabulation Lines and Attaching 
						Objects along Them</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Object Default Layout</h2>
<p>By default, each object you create has its own size which depends on its contents. 
Let's take the example of a dialog window that derives from the CATDlgDialog class, 
and that contains a combo, a push button, a spinner, and a check button.</p>
<table>
	<tr>
		<td>
		<img alt="Default Horizontal Layout" height="159" src="images/CAADlgHorizontalLayout.jpg" width="284"/></td>
		<td>These controls are arranged horizontally side by side in their instantiation 
		order and attached by their top side to an implicit horizontal tabulation 
		line if nothing particular is specified since the <code>SetDefaultOrientation(Horizontal)</code> 
		method is the default for any container.</td>
	</tr>
	<tr>
		<td>
		<img alt="Default Vertical Layout" height="219" src="images/CAADlgVerticalLayout.jpg" width="183"/></td>
		<td>If you insert the method <code>SetDefaultOrientation(Vertical)</code>for 
		the container, your objects are then arranged vertically and attached by 
		their left side to an implicit vertical tabulation line.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>Tabulation Layout</h2>
<p>It is based on tabulation lines along which you can attach the sides of the containers 
and objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="510000"></a>Tabulation Lines</h3>
<p>To arrange complex windows, and also to help for resizing such windows, we will 
use tabulation lines. These are horizontal or vertical lines located in a container.</p>
<p>
<img alt="Tabulation Lines" height="333" src="images/CAADlgDialoaa6.gif" width="539"/></p>
<p>They are used to attach objects using their sides. Attachments are ordered as 
follows:</p>
<ul>
	<li>Horizontal tabulation lines are ordered from top to bottom</li>
	<li>Vertical tabulation lines are ordered from left to right</li>
</ul>
<p>Tabulation lines are identified using an integer number which grows, not necessarily 
continuously, from left to right for vertical tabulation lines and from top to bottom 
for horizontal tabulation lines.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="520000"></a>Attaching Containers and Controls along Tabulation Lines</h3>
<p>You can attach containers and controls along tabulation lines as shown in this 
diagram:</p>
<p>
<img alt="Attachment along Tabulation Lines" height="324" src="images/CAADlgDialoaa7.gif" width="556"/></p>
<p>The way the object is attached, referred to below as the attachment mode, along 
the tabulation line can be:</p>
<ul>
	<li>for a horizontal tabulation line: Top, Center or Bottom</li>
	<li>for a vertical tabulation line: Left, Center or Right.</li>
</ul>
<p>When you create tabulations lines, you assign them an integer number. Vertical 
tabulation lines are positioned from left to right in the increasing order of their 
numbers. Horizontal tabulation lines are positioned from top to bottom, also in 
the increasing order of their numbers.</p>
<p>A given tabulation line can accommodate any number of containers and controls, 
but all with the same attachment mode. In the same way you can not attach the same 
container or control with the same attachment mode to two different vertical tabulation 
lines (or to two different horizontal tabulation lines).</p>
<p>For each tabulation line, objects are laid out from top to bottom for vertical 
tabulation lines, and from left to right for horizontal tabulation lines, in the 
order they are listed in the method creating the tabulation line, with the methods
<code>SetVerticalAttachment</code> and <code>SetHorizontalAttachment</code>.</p>
<p>The space between two tabulation lines is determined by the largest object located 
between them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="530000"></a>Allowing for Container Resize</h3>
<p>You can request that, when the user resizes a window, the different objects remain 
at their location, and that containers, if any, remain at the same size, or you 
can request that some or all the object locations and container sizes change according 
to the window resize.</p>
<p>This is made possible thanks to the tabulation lines which can be set fixed or 
movable. Everything happens as if a given tabulation line is attached to the preceding 
one. A fixed tabulation line is attached with a rigid link to the preceding tabulation 
line, while a movable is attached with a spring link.</p>
<p>
<img alt="Fixed and Movable Tabulation Lines - Before Resize" height="293" src="images/CAADlgDialoaa8.gif" width="474"/></p>
<p>Suppose now that the user resizes the window defined above by dragging the lower 
right corner according to the arrow direction. The size of the window increases 
of W horizontally and H vertically. The result is shown below:</p>
<p>
<img alt="Fixed and Movable Tabulation Lines - After Resize" height="299" src="images/CAADlgDialoaa9.gif" width="545"/></p>
<p>The space between the horizontal tabulations 1 and 2 remains constant, since 
they are both fixed, but the movable horizontal tabulation 3 shifts of H towards 
the bottom. In the same way, the vertical tabulation 2 shifts of W/2 to the right 
with respect to tabulation 1, and the space between tabulation 1 and 2 increases 
of W/2. The vertical tabulation 3 shifts of W/2 to the right with respect to tabulation 
2. The space between tabulation 2 and 3 also increases of W/2. Even if tabulation 
4 shifts of W, the space between tabulations 3 and 4 remains constant since tabulation 
4 is fixed.</p>
<p>In the same way, if the user drags in such a way that the window size decreases, 
the fixed tabulations stay at the same distance from their preceding tabulation 
while the movable tabulations bring closer to their preceding one.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="540000"></a>Creating Tabulation Lines and Attaching Objects Along Them</h3>
<p>To create tabulation lines and attachment modes, you can use the methods
<code>Attach4Sides</code>, <code>SetVerticalAttachment</code>, and <code>SetHorizontalAttachment</code>.
</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="541000"></a>Using Implicit Tabulation Lines</h4>
<p>The <code>Attach4Sides</code> method is used to insert one object in a container. 
If you intend to use this method for a given container, you must use it for all 
the objects of this container. Objects are laid out horizontally and attached left 
and top to fixed tabulation lines and right and bottom to movable tabulation lines. 
You do not explicitly declare these tabulation lines.This makes the container and 
the objects it contains resizable. Use this method as follows:</p>
<pre class="code">Container-&gt;Attach4Sides(PushButton);
Container-&gt;Attach4Sides(Spinner);</pre>
<p>where <code>Container</code> is a pointer to a container instance, which contains 
two controls: <code>PushButton</code> and <code>Spinner</code> which are pointers 
to a push button instance and a spinner instance respectively.</p>
<p>For example, the following container, instance of the class <em>CATDlgWindow</em></p>
<p>
<img alt="Resizeable Window - Before Resize" height="305" src="images/CAADlgDialaa10.gif" width="483"/></p>
<p>contains a spinner, a vertical slider, an editor, and a tabcontainer. It is coded 
as follows:</p>
<pre class="code">...                       // instantiate the objects
Slider  = new CATDlgSlider(this, &quot;Sl&quot;, CATDlgCtrVertical);
TabContainer = new CATDlgTabContainer(this, &quot;TC&quot;);
Editor  = new CATDlgEditor(this, &quot;E&quot;);
Spinner = new CATDlgSpinner(this, &quot;Sp&quot;);
...
Attach4Sides(Spinner);          // lay them out
Attach4Sides(Slider);           // horizontally in that
Attach4Sides(Editor);           // order
Attach4Sides(TabContainer);
...</pre>
<p>This container is fully resizable and each container or object contained herein 
is resized in width and height proportionally to its initial size with respect to 
the container resize. For example, below is a snapshot of the same container after 
a resize which increases its width and reduces its height.</p>
<p>
<img alt="Resizeable Window - After Resize" height="93" src="images/CAADlgDialaa11.gif" width="625"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="542000"></a>Using Explicit Tabulation Lines</h4>
<p>The methods <code>SetVerticalAttachment</code> and <code>SetHorizontalAttachment</code> 
are the two methods available to create vertical and horizontal tabulation lines 
respectively. Use them to define:</p>
<ul>
	<li>the tabulation line using the integer which identifies it</li>
	<li>the attachment mode</li>
	<li>the objects attached and their order.</li>
</ul>
<p>They are to be applied to containers. For example:</p>
<pre class="code">Container-&gt;SetVerticalAttachment(5, CATDlgTopOrLeft,
              Frame, PushButton, Editor, NULL);</pre>
<p>creates a vertical tabulation line in <code>Container</code>, a pointer to a 
container instance, with <code>5</code> as vertical tabulation line number,
<code>CATDlgTopOrLeft</code> as attachment mode, and lays out from top to bottom 
along this vertical tabulation line <code>Frame</code>, <code>PushButton</code> 
and <code>Editor</code>, which are pointers to a frame instance, a push button instance 
and an editor instance respectively. Note that three keywords only accommodate the 
five possible attachment modes: <code>CATDlgTopOrLeft</code> for top and left,
<code>CATDlgCenter</code> for center and <code>CATDlgRightOrBottom</code> for right 
and bottom. Movable tabulation lines are declared using the same keywords suffixed 
by <code>Relative</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="543000"></a>A Window Layout Example</h4>
<p>The following example fully illustrates how to layout many objects in a window 
or a container. The main container is a CATDlgWindow instance which contains containers 
and controls.</p>
<p>Below is an example of such a window, showing the tabulation lines. The text 
printed in each container or control is the identifier of its pointer in the code 
sample below, otherwise this pointer identifier is labelled in the figure:</p>
<p>
<img alt="Resizeable Window - Tabulation Lines and Attachments" height="560" src="images/CAADlgDialaa12.gif" width="691"/></p>
<p>Tabulation lines are always declared, for a given container, from left to right 
for horizontal tabulation lines (0 and 1 in the figure) and from top to bottom for 
vertical ones (0, 1, and 2 in the figure). Note that each container contained in 
the window, that is Frame1, Frame2, and TabContainer, has implicit tabulation lines, 
one vertical and one horizontal. The controls located in these containers are laid 
out horizontally from left to right by default along the horizontal tabulation lines.
</p>
<p>The size of each container or control is determined using its actual contents. 
The largest sizes are used to place tabulation lines. For example, TabContainer 
has the largest width among the objects attached along the vertical tabulation line 
\xb0 0 and thus this width determines the space allocated between the vertical tabulation 
lines 0 and 1. Space remain available beside Frame1, Slider and Spinner.</p>
<p>The code to achieve that is as follows:</p>
<pre class="code">int n = 0;
SetVerticalAttachment(n, CATDlgTopOrLeft,       // 2 vertical
  Frame1, Slider, Spinner, TabContainer, NULL); // tabulation lines
n += 1;
SetVerticalAttachment(n, CATDlgTopOrLeft,
   Combo, Frame2, PB, NULL);
n = 0;                                          // reset not required
SetHorizontalAttachment(n, CATDlgTopOrLeft,     // 3 horizontal
   Frame1, Combo, NULL);                        // tabulation lines
n += 1;
SetHorizontalAttachment(n, CATDlgTopOrLeft,
   Slider, Frame2, NULL);
n += 1;
SetHorizontalAttachment(n, CATDlgTopOrLeft,
   TabContainer, PB, NULL);</pre>
<p>Note that neither the radio buttons nor the check buttons appear as parameters 
in these methods which apply to the main container. As we said previously, they 
are arranged horizontally by default in their respective containers Frame1 and Frame2. 
Note also that the TabContainer layout can not be customized, even if it uses tabulation 
lines.</p>
<p>As a variant, we could have chosen to set some attachment modes to CATDlgCenter. 
For example, choosing CATDlgCenter to the horizontal tabulation line 2 and to the 
vertical tabulation line 1 gives the following result:</p>
<p>
<img alt="Resizeable Window - Tabulation Lines" height="561" src="images/CAADlgDialaa13.gif" width="573"/></p>
<p>Combo, Frame2 and PB are horizontally centered with respect to the vertical tabulation 
line 1. In fact, Frame2 has not moved compared with the previous layout, since this 
container is the largest object and determines the space allocated horizontally 
for this part of the window. Remind that the size of Frame2 is depends on the texts 
for each check button. Note that PB, the push button labelled Apply, is centered 
in an area which seems too big for it, this area being sized by its neighbors.
</p>
<p>The attachment mode CATDlgRightOrBottom can also be chosen to attach containers 
and controls. In the following figure, the vertical tabulation line 0 has a CATDlgTopOrLeft 
attachment mode, while the vertical tabulation line 1 has a CATDlgRightOrBottom 
attachment mode.</p>
<p>
<img alt="Resizeable Window - Tabulation Lines" height="532" src="images/CAADlgDialaa14.gif" width="459"/></p>
<p>This window is a bit narrower, since space is better used. A Window Resize Example</p>
<p>What happens if the user resizes the window, for example extends it by dragging 
its lower right corner. The figure below shows the result when applying such a resize 
to our window.</p>
<p>
<img alt="Resizeable Window" height="574" src="images/CAADlgDialaa15.gif" width="542"/></p>
<p>Empty space fills in areas between the objects and the right and bottom side 
of the window. No object is resized with the window. In the same way, if the window 
area was reduced, some objects might be partly or totally hidden. This is because 
we didn't use movable tabulation lines.</p>
<p>Another way for more simple containers in which all the objects are laid out 
along an horizontal tabulation line is to use the method <code>Attach4Sides</code> 
for all the objects. We have seen that in <a href="#541000">Using Implicit Tabulation 
Lines</a>.</p>
<p>Movable tabulation lines are set by means of the suffix <code>Relative</code> 
to the tabulation line keywords. Use <code>CATDlgTopOrLeftRelative</code>, <code>
CATDlgCenterRelative</code>, and <code>CATDlgRightOrBottomRelative</code> in place 
of the previous <code>CATDlgTopOrLeft</code>, <code>CATDlgCenter</code>, and
<code>CATDlgRightOrBottom</code>. This allows for moving the tabulation lines proportionally 
with the window resize.</p>
<p>For example, to make Spinner and Frame2 resize vertically with the window, you 
simply need to attach them to an additional horizontal tabulation line with the 
keyword <code>CATDlgRightOrBottomRelative</code> as follows:</p>
<pre class="code">n += 1;                                             // added 
SetHorizontalAttachment(n, CATDlgRightOrBottomRelative,  // statements
                        Slider, Frame2, NULL);</pre>
<p>
<img alt="Resizeable Window" height="573" src="images/CAADlgDialaa16.gif" width="532"/></p>
<p>Spinner and Frame2 are resized vertically according to the new window size. Even 
if the window increases horizontally, nothing moves since there is no vertical movable 
tabulation line.</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: Note that you cannot 
		use the same tabulation line in two successive statements <code>SetHorizontalAttachment</code> 
		to attach an object, for example Spinner, using the keyword <code>CATDlgRightOrBottom</code>, 
		and another object, for example TabContainer, using the keyword <code>CATDlgTopOrLeft</code>.</td>
	</tr>
</table>
<p>If you want that all your objects fully resize with the window, you need to attach 
each of them to four tabulation lines:</p>
<p>
<img alt="Resizeable Window - Before Resize" height="509" src="images/CAADlgDialaa18.gif" width="495"/></p>
<p>Note that the different objects occupy all the space between their respective 
horizontal and vertical tabulation lines. For example, the area dedicated to press 
the push button is very large.</p>
<p>This is coded as follows:</p>
<pre class="code">int n = 0;
SetVerticalAttachment(n, CATDlgTopOrLeft,
   Frame1, Slider, Spinner, TabContainer, NULL); n += 1; // Vertical
SetVerticalAttachment(n, CATDlgRightOrBottomRelative,    // attachments
   Frame1, Slider, Spinner, TabContainer, NULL); n += 1; // fixed and
SetVerticalAttachment(n, CATDlgTopOrLeft,                // movable
   Combo, Frame2, PB, NULL);                     n += 1; // alternatively
SetVerticalAttachment(n, CATDlgRightOrBottomRelative,
   Combo, Frame2, PB, NULL);  n = 0;
SetHorizontalAttachment(n, CATDlgTopOrLeft,              // Horizontal
   Frame1, Combo, NULL);                         n += 1; // attachments
SetHorizontalAttachment(n, CATDlgRightOrBottomRelative,  // fixed and
   Frame1, Combo, NULL);                         n += 1; // movable
SetHorizontalAttachment(n, CATDlgTopOrLeft,              // alternatively
   Slider, Frame2, NULL);                        n += 1;
SetHorizontalAttachment(n, CATDlgRightOrBottomRelative,
   Slider, NULL);                                n += 1;
SetHorizontalAttachment(n, CATDlgRightOrBottomRelative,
   Spinner, Frame2, NULL);                       n += 1;
SetHorizontalAttachment(n, CATDlgTopOrLeft,
   TabContainer, PB, NULL);                      n += 1;
SetHorizontalAttachment(n, CATDlgRightOrBottomRelative,
   TabContainer, PB, NULL);</pre>
<p>The resized windows is as follows:</p>
<p>
<img alt="Resizeable Window - After Resize" height="563" src="images/CAADlgDialaa19.gif" width="639"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="550000"></a>Changing Attached Objects and Attachments</h3>
<p>You can insert and remove objects into/from a tabulation line. Use the methods
<code>InsertAlongHorizontalTab</code> or <code>InsertAlongVerticalTab</code> to 
insert an object, and <code>RemoveAlongHorizontalTab</code> or <code>RemoveAlongVerticalTab</code> 
to remove one. For example:</p>
<pre class="code">Window1-&gt;InsertAlongHorizontalTab(3, Editor, Combo, After);  // Insert</pre>
<p>This means that you insert the control <code>Combo</code> <strong>after</strong> 
the control <code>Editor</code> along the horizontal tabulation number <code>3</code> 
in the container <code>Window1</code>.</p>
<pre class="code">Container5-&gt;RemoveAlongVerticalTab(5, PushButton); // Remove </pre>
<p>This means that you remove the control <code>PushButton</code> from the vertical 
tabulation line <code>5</code>.</p>
<p>You can also detach an object from all its attachments within a container by 
means of the method <code>ResetAttachment</code>.</p>
<pre class="code">Window1-&gt;ResetAttachment(Combo); // Reset attachment</pre>
<p>You thus reset all attachments of the control <code>Combo</code> in the container
<code>Window1</code>.</p>
<p>You can also replace an object by another one by means of the method <code>ReplaceKeepAttachment</code>. 
For example:</p>
<pre class="code">Window1-&gt;ReplaceKeepAttachment(Spinner, Slider); // Replace</pre>
<p>replaces the control <code>Spinner</code> by the control <code>Slider</code> 
while keeping the <code>Spinner</code> attachments for <code>Slider</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="600000"></a>The Object Container Tabulation Layout Specific Programming 
Tasks</h2>
<p>To manage the layout of a container using tabulations, you can use the following 
methods. They apply to:</p>
<ul>
	<li>Frames, instances of the <a href="CAADlgQrCATDlgFrame.htm">CATDlgFrame</a> 
		class.</li>
	<li>Tab pages or property pages, instances of the
		<a href="CAADlgQrCATDlgTabPage.htm">CATDlgTabPage</a> class.</li>
	<li>Your classes that derive from <a href="CAADlgQrCATDlgDocument.htm">CATDlgDocument</a> 
		or <a href="CAADlgQrCATDlgDialog.htm">CATDlgDialog</a></li>
</ul>
<p>Layout using tabulations is available by default, that is, if the <em>CATDlgGridLayout</em> 
style is NOT used in the object constructor. With tabulations, you can:</p>
<ul>
	<li>Manage the frame content default orientation</li>
	<li>Manage tabulation lines and attaching objects along them</li>
	<li>Attach a object using its four sides</li>
</ul>
<p>The examples use a <em>CATDlgFrame</em> instance:</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Managing1"></a>Managing the Frame Content Default Orientation</h3>
<p>The default orientation is taken into account when no other layout information 
is provided. This orientation is horizontal. The controls or containers contained 
in the frame are placed horizontally one after the other in their instantiation 
order. This corresponds to the following call to the SetDefaultOrientation method:</p>
<pre class="code">pFrame-&gt;<strong>SetDefaultOrientation</strong>(Horizontal);</pre>
<p>You can ask for this orientation to be vertical.</p>
<pre class="code">pFrame-&gt;<strong>SetDefaultOrientation</strong>(<strong>Vertical</strong>);</pre>
<h3><a name="Managing2"></a>Managing Tabulation Lines and Attaching Objects along 
Them</h3>
<p>To manage the tabulation lines, you can:</p>
<ul>
	<li>Create horizontal and vertical tabulations lines, and attach objects along 
		them, using the SetHorizontalAttachment and SetVerticalAttachment methods:
		<pre class="code">CATDlgTabIndex HorTabIndex = 2;
CATDlgAttachment AttachmentMode = CATDlgTopOrLeft;
pFrame-&gt;<strong>SetHorizontalAttachment</strong>(HorTabIndex
                                AttachmentMode,
                                pFirstControl,
                                ...,
                                NULL);
...
CATDlgTabIndex VerTabIndex = 2;
AttachmentMode = CATDlgRightOrBottom;
pFrame-&gt;<strong>SetVerticalAttachment </strong> (VerTabIndex 
                                AttachmentMode,
                                pFirstControl,
                                ...,
                                NULL);</pre>
		<p>The parameters of these methods are:</p>
		<ul>
			<li>The tabulation index. It must grow from left to right for horizontal 
				tabulations, and from top to bottom for vertical tabulations.</li>
			<li>The attachment mode. It can be set to:
				<table>
					<tr>
						<th>Keyword</th>
						<th>Meaning</th>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgTopOrLeft</code></td>
						<td class="borderBottom">The objects are attached using 
						their top sides along an horizontal tabulation line, or 
						using their left sides along a vertical tabulation line</td>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgTopOrLeftRelative</code></td>
						<td class="borderBottom">A <code>CATDlgTopOrLeft</code> 
						tabulation line that enables resizing</td>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgRightOrBottom</code></td>
						<td class="borderBottom">The object are attached using their 
						bottom sides along an horizontal tabulation line, or using 
						their right sides along a vertical tabulation line</td>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgRightOrBottomRelative</code></td>
						<td class="borderBottom">A <code>CATDlgRightOrBottom</code> 
						tabulation line that enables resizing</td>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgCenter</code></td>
						<td class="borderBottom">The object are attached using their 
						center along both an horizontal or a vertical tabulation 
						line</td>
					</tr>
					<tr>
						<td class="borderBottom"><code>CATDlgCenterRelative</code></td>
						<td class="borderBottom">A <code>CATDlgCenter</code> tabulation 
						line that enables resizing</td>
					</tr>
				</table>
			</li>
			<li>The objects to attach. The list must end up with <code>NULL</code>
			</li>
		</ul>
	</li>
	<li>Retrieve the horizontal and vertical tabulation line indices to which a 
		given object is attached:
		<pre class="code">int HorTabIndex;
HorTabIndex = pFrame-&gt;<strong>GetHorizontalTabIndex</strong>(pControl, AttachmentMode);
...
int VerTabIndex;
VerTabIndex = pFrame-&gt;<strong>GetVerticalTabIndex</strong>(pControl, AttachmentMode);</pre>
	</li>
	<li>Insert an object along an horizontal or vertical tabulation line with respect 
		to an already inserted object.:
		<pre class="code">InsertionMode WhereToInsert = After;
pFrame-&gt;<strong>InsertAlongHorizontalTab</strong>(HorTabIndex,
                                 pControlToInsert,
                                 pReferenceControl,
                                 WhereToInsert);
...
WhereToInsert = Before;
pFrame-&gt;<strong>InsertAlongVerticalTab</strong>  (VerTabIndex,
                                 pControlToInsert,
                                 pReferenceControl,
                                 WhereToInsert);</pre>
		<p>The parameters of these methods are:</p>
		<ul>
			<li>The index of the tabulation aong which the object is to be inserted</li>
			<li>The object to insert</li>
			<li>The object used as reference for the insertion mode</li>
			<li>The insertion mode. It can be set to After or Before</li>
		</ul>
	</li>
	<li>Detach an object from an horizontal or a vertical tabulation line, or from 
		both:
		<pre class="code">pFrame-&gt;<strong>RemoveAlongHorizontalTab</strong>(HorTabIndex, pControl);
...
pFrame-&gt;<strong>RemoveAlongVerticalTab</strong>(VerTabIndex, pControl);
...
pFrame-&gt;<strong>ResetAttachment</strong>(pControl);</pre>
		<p>ResetAttachment has the same effect than the two calls to RemoveAlongHorizontalTab 
		and to RemoveAlongVerticalTab.</p>
	</li>
	<li>Replace an object by another using the same attachement parameters
		<pre class="code">pFrame-&gt;<strong>ReplaceKeepAttachment</strong>(pControlToInsert,
                              pControlToRemove);</pre>
	</li>
	<li>Attach an object using its four sides
		<pre class="code">CATDlgCombo * pCombo = new CATDlgCombo(pFrame, &quot;pComboId&quot;);
...
pFrame-&gt;<strong>Attach4Sides</strong>(pCombo);</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The dialog object sizes are determined using their contents, and arranging the 
layout of your objects in a container means either leaving the framework do it for 
you for containers with few objects which are placed horizontally one after the 
other in the order they are instantiated, or add code to attach objects to vertical 
tabulation lines using their left or right side and/or horizontal tabulation lines 
using their top or bottom side. The center of an object can be used in both cases.</p>
<p>Movable tabulation lines allow to make objects resize when the container is resized.</p>
<p>The keys to object layout are:</p>
<ul>
	<li>Tabulation lines are instantiated with a number and are placed from left 
		to right and from top to bottom with increasing number order.</li>
	<li>Objects are placed along the tabulation lines from left to right or from 
		top to bottom in the order they are referred to in the method <code>SetHorizontalAttachment</code> 
		and <code>SetVerticalAttachment</code> respectively.</li>
	<li>A single attachment mode can be used along a tabulation line, chosen among
		<code>CATDlgTopOrLeft</code>, <code>CATDlgCenter</code> or <code>CATDlgRightOrBottom</code>.</li>
	<li>The suffix <code>Relative</code> to an attachment mode means that the corresponding 
		tabulation line is movable with respect to the tabulation line located left 
		or above and that objects attached to it are resized when the container 
		is resized.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgTaObjectLayout.htm">How to Arrange Dialog Objects</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
