<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Dialog Boxes Automatically Resizable</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Dialog Boxes Automatically Resizable</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create extendable dialog boxes.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADlgTabulation Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADlgTabulation Do</a></li>
					<li><a href="#How">How to Launch CAADlgTabulation</a></li>
					<li><a href="#Where">Where to Find the CAADlgTabulation Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create Dialog boxes with dynamic 
frames. The frames appear and disappear and the dimensions of the dialog box are 
automatically redefined. For such behavior the frame positioning must be done by 
a tabulation layout [<a href="#References">1</a>] and not by a grid layout [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADlgTabulation Use Case</h2>
<p>CAADlgTabulation is a use case of the CAADialog.edu framework that illustrates 
Dialog framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADlgTabulation Do</h3>
<p>CAADlgTabulation use case creates three Dialog boxes:</p>
<ol>
	<li>The &quot;<strong>More/Less Push Button Demonstrato</strong>r&quot; Dialog 
		box
		<table>
			<tr>
				<th><a name="Fig1a"></a>Fig. 1a: Original Size</th>
				<th><a name="Fig1b"></a>Fig. 1b: Extended Size</th>
			</tr>
			<tr>
				<td>
				<img alt="More or Less Dialog Box - More" src="images/CAADlgTabMoreLess1.jpg"/></td>
				<td>
				<img alt="More or Less Dialog Box - Less" src="images/CAADlgTabMoreLess2.jpg"/></td>
			</tr>
		</table>
		<p>When the end user clicks the &quot;More&quot; button, the Dialog box 
		is expanded and when it clicks on the &quot;Less&quot; button, the dialog 
		box retrieves its original size.</p>
	</li>
	<li>The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; Dialog 
		box
		<table>
			<tr>
				<th><a name="Fig2a"></a>Fig. 2a: Without frame</th>
			</tr>
			<tr>
				<td>
				<img alt="More &amp; Radio Button Demonstrator" src="images/CAADlgTabRadio1.jpg"/></td>
			</tr>
		</table>
		<p>When the end user select the &quot;without frame&quot; radio button, 
		no frame is displayed.</p>
		<table>
			<tr>
				<th><a name="Fig2b"></a>Fig. 2b: With more frame A</th>
			</tr>
			<tr>
				<td>
				<img alt="More &amp; Radio Button Demonstrator with More Frame A" src="images/CAADlgTabRadio2.jpg"/></td>
			</tr>
		</table>
		<p>When the end user selects the &quot;With more frame A&quot; radio button, 
		the frame entitled &quot;Frame A&quot; is displayed on the right side.</p>
		<table>
			<tr>
				<th><a name="Fig2c"></a>Fig. 2c:With more frame B</th>
			</tr>
			<tr>
				<td>
				<img alt="More &amp; Radio Button Demonstrator with More Frame B" src="images/CAADlgTabRadio3.jpg"/></td>
			</tr>
		</table>
		<p>When the end user selects the &quot;With more frame B&quot; radio button, 
		the frame entitled &quot;Frame B&quot; is displayed on the right side.</p>
	</li>
	<li>The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; Dialog box
		<p>According to the selected value in the combo, the frame under the &quot;Combo 
		Frame&quot; frame is not the same: &quot;Coordinates Frame&quot;, &quot;Circle 
		Frame&quot; or &quot; Between Frame&quot;.</p>
		<table>
			<tr>
				<th><a name="Fig3a"></a>Fig. 3a: Coordinates</th>
				<th><a name="Fig3b"></a>Fig. 3b: Circle Center</th>
				<th><a name="Fig3c"></a>Fig. 3c: Between</th>
			</tr>
			<tr>
				<td>
				<img alt="Frame Replacement Demonstrator - Coordinates Frame" height="178" src="images/CAADlgTabFrameReplace2.jpg" width="197"/></td>
				<td>
				<img alt="Frame Replacement Demonstrator - Circle Frame" height="143" src="images/CAADlgTabFrameReplace1.jpg" width="197"/></td>
				<td>
				<img alt="Frame Replacement Demonstrator - Between Frame" height="194" src="images/CAADlgTabFrameReplace3.jpg" width="198"/></td>
			</tr>
		</table>
	</li>
</ol>
<p>To obtain such behavior, the frames must be attached in their container by a 
tabulation layout. On the pictures below, the tabulations are represented by thick 
lines and the frame's attachments are represented by a green rectangular box.</p>
<ol>
	<li>The &quot;<strong>More/Less Push Button Demonstrator</strong>&quot; Dialog 
		box
		<table>
			<tr>
				<th><a name="Fig4a"></a>Fig. 4a:</th>
				<th><a name="Fig4b"></a>Fig. 4b:</th>
			</tr>
			<tr>
				<td>
				<img alt="More/Less Push Button Demonstrator - Left More Frame" height="261" src="images/CAADlgTabMoreLessTech1.jpg" width="190"/></td>
				<td>
				<img alt="More/Less Push Button Demonstrator - Left and Right More Frames" height="262" src="images/CAADlgTabMoreLessTech2.jpg" width="337"/></td>
			</tr>
		</table>
		<p>The &quot;Left More Frame&quot; frame is always visible and attached 
		to the first (0) vertical line. The &quot;Right More Frame&quot; frame is
		</p>
		<ul>
			<li>Invisible and detached when the dialog box has its original size.
				<a href="#Fig1a">Fig.1a</a> and <a href="#Fig4a">Fig.4a</a></li>
			<li>
				<p>Visible and attached to the second (10) vertical line when the 
				dialog box is extended. <a href="#Fig1b">Fig.1b</a> and
				<a href="#Fig4b">Fig.4b</a></p>
			</li>
		</ul>
	</li>
	<li>The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; Dialog 
		box
		<p>It is similar to the previous dialog box:</p>
		<table>
			<tr>
				<th><a name="Fig5a"></a>Fig. 5a</th>
				<th><a name="Fig5b"></a>Fig. 5b</th>
			</tr>
			<tr>
				<td>
				<img alt="More &amp; Radio Button Demonstrator - Radio Button Frame" height="266" src="images/CAADlgTabRadioTech1.jpg" width="182"/></td>
				<td>
				<img alt="More &amp; Radio Button Demonstrator - Radio Button Frame and Frame A or B" height="266" src="images/CAADlgTabRadioTech2.jpg" width="314"/></td>
			</tr>
		</table>
		<p>The &quot;Radio Button Frame&quot; frame is always visible and attached 
		to the first (0) vertical line.</p>
		<ul>
			<li>If the &quot;Without frame&quot; radio button is checked -
				<a href="#Fig2a">Fig. 2a</a>
				<p>The &quot;Frame A&quot; and the &quot;Frame B&quot; are invisible 
				and detached. <a href="#Fig5a">Fig. 5a</a></p>
			</li>
			<li>If the &quot;With more frame A&quot; radio button is checked -
				<a href="#Fig2b">Fig. 2b</a>
				<p>The &quot;Frame A&quot; is visible and attached to the second 
				(10) vertical line, and the &quot;Frame B&quot; is still invisible 
				and detached. <a href="#Fig5b">Fig. 5b</a></p>
			</li>
			<li>If the &quot;With more frame B&quot; radio button is checked -
				<a href="#Fig2c">Fig. 2c</a>
				<p>The &quot;Frame B&quot; is visible and attached to the second 
				(10) vertical line, and the &quot;Frame A&quot; is yet invisible 
				and detached. <a href="#Fig5b">Fig. 5b</a></p>
			</li>
		</ul>
	</li>
	<li>The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; Dialog box
		<p>In this case the attachments are horizontal.</p>
		<table>
			<tr>
				<th><a name="Fig6"></a>Fig. 6</th>
			</tr>
			<tr>
				<td>
				<img alt="Frame Replacement Demonstrator" height="226" src="images/CAADlgTabFrameReplaceTech1.jpg" width="425"/></td>
			</tr>
		</table>
		<p>The &quot;Combo Frame&quot; frame is always visible and attached to the 
		first (0) horizontal line. The frame attached to the second (5) horizontal 
		line is the frame entitled either &quot;Coordinates Frame&quot; (<a href="#Fig3a">Fig. 
		3a</a>) or &quot;Circle Frame&quot; (<a href="#Fig3b">Fig. 3b</a>) or ''Between 
		Frame&quot; (<a href="#Fig3c">Fig. 3c</a>) . When one of these three frames 
		is attached and visible, the two others are invisible and detached.</p>
	</li>
</ol>
<p>Inside the frames entitled &quot;Left More Frame&quot;, &quot;Right More Frame&quot;, &quot;Frame 
A&quot; and so on, you can use the grid layout [<a href="#References">2</a>] to 
locate the different components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADlgTabulation</h3>
<p>To launch the use case, you will need to set up the build time environment, then 
compile CAADlgDialogDemonstrator along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">3</a>].</p>
<p><code>mkrun -c CAADlgDialogDemonstrator</code></p>
<p>When the <code>CAADlgDialogDemonstrator</code> application is launched:</p>
<ul>
	<li>On the <strong>Tabulation</strong> menu click <strong>More &amp; Radio Button</strong></li>
	<li>Click <strong>With more frame A</strong></li>
	<li>Click<strong> With more frame B</strong></li>
	<li>Click <strong>Without frame</strong></li>
	<li>Click <strong>OK</strong> or <strong>Cancel</strong></li>
	<li>On the <strong>Tabulation</strong> menu click <strong>More/Less Push Button</strong></li>
	<li>Click <strong>More</strong></li>
	<li>Click <strong>Less</strong></li>
	<li>Click <strong>OK</strong> or <strong>Cancel</strong></li>
	<li>On the <strong>Tabulation</strong> menu click <strong>Frame Replacement</strong></li>
	<li>Click <strong>Circle Center</strong> in the combo</li>
	<li>Click <strong>Between</strong> in the combo</li>
	<li>Click <strong>Coordinates</strong> in the combo</li>
	<li>Click <strong>OK</strong> or <strong>Cancel</strong></li>
	<li>On the <strong>File</strong> menu click <strong>Exit</strong></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADlgTabulation Code</h3>
<p>The CAADlgTabulation use case is made of several classes located in the CAADlgDialogDemonstrator.m 
module of the CAADialog.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialog.edu\CAADlgDialogDemonstrator.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In the LocalInterfaces and src folders, you will find the following files:</p>
<ul>
	<li>CAADlgDemoApplication.h/CAADlgDemoApplication.cpp: The <em>&quot;DialogDemonstrator&quot;</em> 
		application definition. ( a <em>CATInteractiveApplication</em> )</li>
	<li>CAADlgDemoWindow.h/CAADlgDemoWindow.cpp : The <em>CATDlgDocument</em> definition.</li>
	<li>CAADlgMoreButtonDlg.h/CAADlgMoreButtonDlg.cpp: The &quot;More Button Demonstrator&quot; 
		dialog box definition.</li>
	<li>CAADlgFrameReplaceDlg.h/CAADlgFrameReplaceDlg.cpp : The &quot;Frame Replacement 
		Demonstrator&quot; dialog box definition</li>
	<li>CAADlgMoreRadioDlg.h/CAADlgMoreRadioDlg.cpp : The &quot;More Radio Demonstrator&quot; 
		dialog box definition.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three main steps to define the three Dialog boxes of the CAADlgTabulation 
use case:</p>
<ol>
	<li><a href="#Step1">Defining the Class Constructor</a></li>
	<li><a href="#Step2">Defining the Build Method</a></li>
	<li><a href="#Step3">Defining the Callback Method</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Defining the Class Constructor
</h3>
<pre class="code">CAADlgMoreButtonDlg::CAADlgMoreButtonDlg(CATDialog * pParentDlg) :
  <strong>CATDlgDialog</strong> (pParentDlg,&quot;CAADlgMoreButtonDlg&quot;, <strong>CATDlgWndBtnOKCancel</strong> |
                                                  <strong>CATDlgWndAutoResize</strong> |
                                                  <strong>CATDlgWndNoResize</strong> ),
  ...
{
   ...
}</pre>
<p>Each Dialog box is a class deriving from the <em>CATDlgDialog</em> class. The 
arguments of the constructor are as follows:</p>
<ul>
	<li><code>pParentDlg</code>, the Dialog object which is the parent of the Dialog 
		box.</li>
	<li><code>CAADlgMoreButtonDlg</code>, the identifier of the Dialog box. This 
		identifier is not used for the resources.</li>
	<li>The style is the concatenation of three values:
		<ol>
			<li><code>CATDlgWndBtnOKCancel</code>: The recommended option to have 
				the OK and Cancel buttons</li>
			<li><code>CATDlgWndAutoResize:</code> The Dialog box is automatically 
				resized with respect of its content's modifications.</li>
			<li><code>CATDlgWndNoResize</code><code>:</code> The Dialog Box can 
				not be resized by the end user. It is recommended option with the
				<code>CATDlgWndAutoResize</code> style</li>
		</ol>
		<p>The <code>CATDlgGridLayout</code> style has not been used, and
		<strong>must not be used</strong>, to benefit of the attachment.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Defining the Build Method</h3>
<p>The contents of this section depends on the Dialog box.</p>
<ol>
	<li><a href="#Build1">The &quot;<strong>More/Less Push Button Demonstrato</strong>r&quot; 
		Dialog box</a></li>
	<li><a href="#Build2">The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; 
		Dialog box</a></li>
	<li><a href="#Build3">The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; 
		Dialog box</a></li>
</ol>
<ol>
	<li><a name="Build1"></a>The &quot;<strong>More/Less Push Button Demonstrator</strong>&quot; 
		Dialog box
		<pre class="code">void CAADlgMoreButtonDlg::Build()
{
   <a href="#Build11">a/ Creating Dialog Objects</a>
   
   <a href="#Build12">b/ Arranging Dialog Objects</a>
   
   <a href="#Build13">c/ Defining Callbacks</a>
}
...</pre>
		<p><strong><a name="Build11"></a>Creating Dialog Objects</strong></p>
		<pre class="code">...
   CATDlgFrame * pFrameLeftMore = new CATDlgFrame(this, &quot;<strong>FrameLeftMore</strong>&quot;, 
                                                        CATDlgGridLayout );
                                           
      CATDlgFrame * pFrameBase = new CATDlgFrame(pFrameLeftMore, &quot;<strong>FrameBase</strong>&quot;, 
                                                                 CATDlgGridLayout );
                                                     
         ... The FrameBase contents is not detailed

      CATDlgPushButton * pPushButtonMore = new CATDlgPushButton(pFrameLeftMore, 
                                                &quot;<strong>PushButtonMore</strong>&quot;);
      
      _MoreMsg = CATMsgCatalog::BuildMessage(&quot;CAADlgMoreButtonDlg&quot;,&quot;ButtonMore&quot;,
                                                    NULL,0,&quot;More&gt;&gt;&quot;);
      _LessMsg = CATMsgCatalog::BuildMessage(&quot;CAADlgMoreButtonDlg&quot;,&quot;ButtonLess&quot;,
                                                    NULL,0,&quot;Less&gt;&gt;&quot;);                                       
      pPushButtonMore-&gt;SetTitle(_MoreMsg);

   _pFrameRightMore = new CATDlgFrame(this, &quot;<strong>FrameRightMore</strong>&quot;, CATDlgGridLayout );
   
      ... The FrameRightMore contents is not detailed
...</pre>
		<ul>
			<li>The &quot;Left More Frame&quot; frame is <code>pFrameLeftMore</code> 
				a <em>CATDlgFrame</em> pointer; the argument of the constructor 
				are the following:
				<ul>
					<li><code>this</code>: The frame is positioned in the Dialog 
						box</li>
					<li><code>FrameLeftMore</code> is the identifier of frame. It 
						will be useful to set resources [<a href="#References">4</a>]</li>
					<li>The <code>CATDlgGridLayout</code> style enables to position 
						its contents by a grid layout</li>
				</ul>
			</li>
			<li>The &quot;Base Options Frame&quot; frame is <code>pFrameBase</code> 
				a <em>CATDlgFrame</em> pointer; the argument of the constructor 
				are the following:
				<ul>
					<li><code>pFrameLeftMore</code>: The frame is positioned in 
						the &quot;Left More Frame&quot; frame</li>
					<li><code>FrameBase</code> is the identifier of frame. It will 
						be useful to set resources [<a href="#References">4</a>]</li>
					<li>The <code>CATDlgGridLayout</code> style enables to position 
						its contents by a grid layout</li>
				</ul>
			</li>
			<li>The push button is <code>pPushButtonMore</code> a <em>CATDlgPushButton</em> 
				pointer
				<p><code>PushButtonMore</code> is the identifier of the push button. 
				Its title is assigned by retrieving the &quot;More&quot; and &quot;Less&quot; 
				NLS strings in the CAADlgMoreButtonDlg.CATNLs file [<a href="#References">4</a>].</p>
			</li>
			<li>The &quot;Right More Frame&quot; frame is <code>_pFrameRightMore</code> 
				a <em>CATDlgFrame</em> pointer; the argument of the constructor 
				are the following:
				<ul>
					<li><code>this</code>: The frame is positioned in the Dialog 
						box</li>
					<li><code>FrameRightMore</code> is the identifier of frame. 
						It will be useful to set resources [<a href="#References">4</a>]</li>
					<li>The <code>CATDlgGridLayout</code> style enables to position 
						its contents by a grid layout</li>
				</ul>
			</li>
		</ul>
		<p><a name="Build12"></a><strong>Arranging Dialog Objects</strong></p>
		<p>For the &quot;More/Less&quot; Dialog box, the layout is the following:</p>
		<p>
		<img alt="Arranging Dialog Objects" height="342" src="images/CAADlgTabMoreLessTech3.jpg" width="376"/></p>
		<p>Inside the &quot;Left More Frame&quot; there are always a frame entitled &quot;Base 
		Options Frame&quot; located in (0,0) and a push button located in (1,0). 
		In the &quot;Base Options Frame&quot; frame you set all the options always 
		available whereas in the &quot;Right More Frame&quot; you set only the &quot;more&quot; 
		options.</p>
		<pre class="code">...
   <strong>SetVerticalAttachment</strong>(<strong>0</strong>, CATDlgTopOrLeft, pFrameLeftMore,NULL);
   pFrameBase -&gt; <strong>SetGridConstraints</strong>(<strong>0</strong>,<strong> 0</strong>, 1, 1, CATGRID_4SIDES);
   pPushButtonMore -&gt; <strong>SetGridConstraints</strong>(<strong>1</strong>, <strong>0</strong>, 1, 1, CATGRID_RIGHT);
   _pFrameRightMore-&gt;<strong>SetVisibility</strong>(CATDlgHide);
...</pre>
		<ul>
			<li>The <code>pFrameLeftMore</code> frame is always attached to the 
				first (0) tabulation of the Dialog box. It is done with the
				<code>SetVerticalAttachment</code> method:
				<ul>
					<li><code>0</code>: The index value. Note that the value of 
						the index is not important. You must just respect an increasing 
						order from left to right.</li>
					<li><code>CATDlgTopOrLeft:</code> the frame is attached to the 
						left side.See <a href="#Fig4a">Fig. 4a</a></li>
					<li><code>pFrameLeftMore</code>: The frame's pointer attached 
						to the tabulation</li>
					<li><code>NULL</code>: To end the list of attachments. ( It 
						is a method with no constant argument)</li>
				</ul>
			</li>
			<li><code>pFrameBase</code> is located in (0,0) in the &quot;Left More 
				Frame&quot; frame.</li>
			<li><code>pPushButtonMore</code> is located in (1,0) in the &quot;Left 
				More Frame&quot; frame and is right justified.</li>
			<li><code>_pFrameRightMore</code> is not attached and is not visible.</li>
		</ul>
		<p><a name="Build13"></a><strong>The Callback Definition</strong></p>
		<pre class="code">...
   <strong>AddAnalyseNotificationCB</strong>  (pPushButtonMore, 
                              pPushButtonMore-&gt;<strong>GetPushBActivateNotification</strong>(),
     (CATCommandMethod)&amp;CAADlgMoreButtonDlg::<a href="#CB1">OnPushButtonMorePushBActivateNotification</a>,
                   NULL);
...</pre>
		<p>To be advised that the end user has clicked on the More button you set 
		a callback thanks to the <code>AddAnalyseNotificationCB</code> method:</p>
		<ul>
			<li><code>pPushButtonMore</code> is the <em>CATDlgPushButton</em> class 
				pointer on the More Button.</li>
			<li><code>GetPushBActivateNotification</code> is method returning the 
				notification class when a push button is pushed.</li>
			<li><code>OnPushButtonMorePushBActivateNotification</code> is the method 
				explained in the &quot;<a href="#Step3">Defining 
				the Callback Methods</a>&quot; section.</li>
		</ul>
	</li>
	<li><a name="Build2"></a>The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; 
		Dialog box
		<pre class="code">...
void CAADlgMoreRadioDlg::Build()
{
  <a href="#Build21">a/ Creating Dialog Objects</a>

  <a href="#Build22">b/ Arranging Dialog Objects</a>
  
  <a href="#Build23">c/ Defining Callbacks</a> 
}
...</pre>
		<p><a name="Build21"></a><strong>Creating Dialog Objects</strong></p>
		<pre class="code">... 
  CATDlgFrame * pFrameMain = new CATDlgFrame(this, &quot;<strong>FrameMain</strong>&quot;, CATDlgGridLayout );
  
     ... FrameMain contents not explained

  _pFrameDetailA = new CATDlgFrame(this, &quot;<strong>FrameDetailA</strong>&quot;, CATDlgGridLayout);
  
     ... FrameDetailA contents not explained
     
  _pFrameDetailB = new CATDlgFrame(this, &quot;<strong>FrameDetailB</strong>&quot;, CATDlgGridLayout);
 
     ... FrameDetailB contents not explained
...</pre>
		<p>The three frames, <code>pFrameMain</code>, <code>_pFrameDetailA</code> and <code>_pFrameDetailB</code> 
		are created in the same way:</p>
		<ul>
			<li><code>this</code>: the frame is positioned in the Dialog box</li>
			<li><code>&quot;FrameMain&quot;, &quot;FrameDetailA&quot;</code> or
				<code>&quot;FrameDetailB&quot;</code> are the frame's identifiers. 
				It will be useful to set resources [<a href="#References">4</a>]
			</li>
			<li>The <code>CATDlgGridLayout</code> style enables to position their 
				contents by a grid layout</li>
		</ul>
		<p><a name="Build22"></a><strong>Arranging Dialog Objects</strong> 
		- <a href="#Fig5a">Fig. 5a</a></p>
		<pre class="code">...
  <strong>SetVerticalAttachment</strong>(<strong>0</strong>, CATDlgTopOrLeft,pFrameMain,NULL);
  _pFrameDetailB-&gt;SetVisibility(CATDlgHide); 
  _pFrameDetailA-&gt;SetVisibility(CATDlgHide);
...</pre>
		<ul>
			<li>The <code>&quot;FrameMain&quot;</code> frame, pointed by <code>pFrameMain</code>, 
				is visible and attached to the first (0) vertical tabulation. It 
				is done thanks to the <code>SetVerticalAttachment</code> method:
				<ul>
					<li><code>0</code>: The index value. Note that the value of 
						the index is not important. You must just respect an increasing 
						order from left to right.</li>
					<li><code>CATDlgTopOrLeft:</code> the frame is attached to the 
						left side.</li>
					<li><code>pFrameMain</code>: The frame's pointer attached to 
						the tabulation</li>
					<li><code>NULL</code>: To end the list of attachments. ( It 
						is a method with no constant argument)</li>
				</ul>
			</li>
			<li>The <code>&quot;FrameDetailA&quot;</code> and <code>&quot;FrameDetailB&quot;</code> 
				frames, pointed by <code>_pFrameDetailA</code> and <code>_pFrameDetailB</code> 
				respectively, are hidden and not attached.</li>
		</ul>
		<p><a name="Build23"></a><strong>The Callbacks Definition</strong></p>
		<pre class="code">...
   AddAnalyseNotificationCB (<strong>pRadioButtonND</strong>, 
                               pRadioButtonND-&gt;<strong>GetRadBModifyNotification</strong>(),
     (CATCommandMethod)&amp;CAADlgMoreRadioDlg::OnRadioButtonNDRadBModifyNotification,
                               NULL);
   AddAnalyseNotificationCB (<strong>pRadioButtonDB</strong>, 
                               pRadioButtonDB-&gt;<strong>GetRadBModifyNotification</strong>(),
     (CATCommandMethod)&amp;CAADlgMoreRadioDlg::<a href="#CB2">OnRadioButtonDBRadBModifyNotification</a>,
                               NULL);

   AddAnalyseNotificationCB (<strong>pRadioButtonDA</strong>, 
                               pRadioButtonDA-&gt;<strong>GetRadBModifyNotification</strong>(),
     (CATCommandMethod)&amp;CAADlgMoreRadioDlg::<a href="#CB2">OnRadioButtonDARadBModifyNotification</a>,
                               NULL);
...</pre>
		<p>To be advised that the end user has clicked on a radio button you set 
		callbacks thanks to the <code>AddAnalyseNotificationCB</code> method:</p>
		<ul>
			<li><code>pRadioButtonND</code> is the <em>CATDlgRadioButton</em> class 
				pointer on the first radio button.</li>
			<li><code>GetRadBModifyNotification</code> is the method 
				returning the notification class when the radio button state changes: 
				when the end user clicks on the button and when it chooses another 
				radio button.</li>
			<li><strong><code>OnRadioButtonNDRadBModifyNotification</code>
				</strong>is the method explained in the &quot;<a href="#Step3">Defining 
				the Callback Methods</a>&quot; section.</li>
		</ul>
		<p>Same thing for the two other radio buttons.</p>
	</li>
	<li><a name="Build3"></a>The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; 
		Dialog box
		<pre class="code">...
void CAADlgFrameReplaceDlg::Build()
{
   <a href="#Build31">a/ Creating Dialog objects</a> 

   <a href="#Build32">b/ Arranging the Dialog Objects</a>
   
   <a href="#Build33">c/ Defining Callback</a> 
}</pre>
		<p><a name="Build31"></a><strong>Creating Dialog Objects</strong></p>
		<pre class="code">...
   CATDlgFrame * pFrameCombo = new CATDlgFrame(this, &quot;<strong>FrameCombo</strong>&quot;,
                                                     CATDlgGridLayout );                                        
      ... FrameCombo contents not explained
      
   CATDlgFrame * pFrameCoord = new CATDlgFrame(this, &quot;<strong>FrameCoord</strong>&quot;, 
                                                     CATDlgGridLayout );                                          
      ... FrameCoord contents not explained

   CATDlgFrame * pFrameCircleCenter = new CATDlgFrame(this, &quot;<strong>FrameCircleCenter</strong>&quot;, 
                                                            CATDlgGridLayout );                                            
   _pListFrame[CircleCenter] = pFrameCircleCenter ;
   
      ... FrameCircleCenter contents not explained

   CATDlgFrame * pFrameBetween = new CATDlgFrame(this, &quot;<strong>FrameBetween</strong>&quot;, 
                                                       CATDlgGridLayout );                                     
   _pListFrame[Between] = pFrameBetween ;
   
      ... FrameBetween contents not explained
...</pre>
		<p>The four <code>pFrameCombo, pFrameCoord, pFrameCircleCenter</code> and
		<code>pFrameBetween</code> frames are created on the same way:</p>
		<ul>
			<li><code>this</code>: The frame is positioned in the Dialog box</li>
			<li><code>&quot;FrameCombo&quot;, &quot;FrameCoord&quot;, &quot;FrameCircleCenter&quot; 
				or &quot;FrameBetween&quot;</code> are the frame's identifiers. 
				It will be useful to set resources [<a href="#References">4</a>]
			</li>
			<li>The <code>CATDlgGridLayout</code> style enables to position their 
				contents by a grid layout</li>
		</ul>
		<p><code>_pListFrame</code> is an array of <em>CATDlgFrame</em> instances 
		declared as data member of the <em>CAADlgFrameReplaceDlg</em> class. It 
		keeps the list of frames to switch. See its usage in the &quot;<a href="#CB3">Defining 
		the Callback Method</a>&quot; section.</p>
		<p><a name="Build32"></a><strong>Arranging Dialog Objects</strong> 
		- <a href="#Fig6">Fig. 6</a></p>
		<pre class="code">...   
   <strong>SetHorizontalAttachment</strong>(0,CATDlgTopOrLeft,pFrameCombo,NULL);
   _CurrentSelection = 0 ;
   ... 
   pFrameCoord-&gt;SetVisibility(CATDlgHide);
   pFrameCircleCenter-&gt;SetVisibility(CATDlgHide);
   pFrameBetween-&gt;SetVisibility(CATDlgHide);
   
   <strong>SetHorizontalAttachment</strong>(<strong>5</strong>,CATDlgTopOrLeft,_pListFrame[_CurrentSelection],NULL);
   _pListFrame[_CurrentSelection]-&gt;SetVisibility(<strong>CATDlgShow</strong>);
...</pre>
		<ul>
			<li>The <code>&quot;FrameCombo&quot;</code> frame, pointed by <code>
				pFrameCombo</code>, is visible and attached to the first (0) horizontal 
				tabulation thanks to the <code>SetHorizontalAttachment</code> method:
				<ul>
					<li><code>0</code>: The index value</li>
					<li><code>CATDlgTopOrLeft:</code> the frame is attached to the 
						top side</li>
					<li>pFrameCombo: The frame's pointer attached to the tabulation</li>
					<li><code>NULL</code>: To end the list of attachments.</li>
				</ul>
			</li>
			<li><code>_pListFrame</code> is a data member of the <em>CAADlgFrameReplaceDlg</em> 
				class which keeps the list of frames to switch. See the
				<a href="#Build11">previous</a> section</li>
			<li><code>_CurrentSelection</code> is also a data member to keep the 
				current attached frame on the second horizontal tabulation</li>
			<li>The three frames are set invisible</li>
			<li>The current frame (one among the three possible) is set visible 
				and attached to the second (5) horizontal tabulation thanks to the
				<code>SetHorizontalAttachment</code> method:
				<ul>
					<li><code>5</code>: The index value</li>
					<li><code>CATDlgTopOrLeft:</code> the frame is attached to the 
						top side</li>
					<li><code>pFrameCombo</code>: The frame's pointer attached to 
						the tabulation</li>
					<li><code>NULL</code>: To end the list of attachments.</li>
				</ul>
			</li>
		</ul>
		<p><a name="Build33"></a><strong>Defining Callback</strong></p>
		<pre class="code">...
   AddAnalyseNotificationCB (<strong>_pComboPointType</strong>, 
                 _pComboPointType-&gt;<strong>GetComboSelectNotification</strong>(),
          (CATCommandMethod)&amp;CAADlgFrameReplaceDlg::<strong><a href="#CB3">OnComboSelectNotification</a></strong>,
                               NULL);
...</pre>
		<p>To be advised that the end user has select a new item in the combo list, 
		you set a callback thanks to the <code>AddAnalyseNotificationCB</code> method:</p>
		<ul>
			<li><code>_pComboPointType</code> is the <em>CATDlgCombo</em> 
				class pointer. It is a pointer to an object located in the &quot;FrameCombo&quot; 
				frame but not explained here.</li>
			<li><code>GetComboSelectNotification</code> is the 
				method returning the notification class when a selection in the 
				combo occurs.</li>
			<li><code>OnComboSelectNotification</code> is the method 
				explained in the &quot;<a href="#Step3">Defining 
				the Callback Methods</a>&quot; section.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Defining the Callback Method</h3>
<p>In this section, we describe the methods which are called when the frame layout 
must be changed.</p>
<ol>
	<li><a href="#CB1">The &quot;<strong>More/Less Push Button Demonstrato</strong>r&quot; 
		Dialog box</a></li>
	<li><a href="#CB2">The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; 
		Dialog box</a></li>
	<li><a href="#CB3">The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; 
		Dialog box</a></li>
</ol>
<ol>
	<li><a name="CB1"></a>The &quot;<strong>More/Less Push Button Demonstrator</strong>&quot; 
		Dialog box
		<p>The <code>OnPushButtonMorePushBActivateNotification</code> method is 
		called when the end user clicks on the More/Less push button.</p>
		<pre class="code">...
void CAADlgMoreButtonDlg::OnPushButtonMorePushBActivateNotification(CATCommand* cmd, 
                                   CATNotification* evt, CATCommandClientData data)
{
   CATDlgPushButton * pButton = (CATDlgPushButton *) cmd ;
   if ( (NULL != pButton ) &amp;&amp; (NULL !=_pFrameRightMore) )
   {
      if( TRUE == _IsMoreWindowOpen)
      {
         <strong>ResetAttachment</strong>(_pFrameRightMore);         
         _pFrameRightMore-&gt;SetVisibility(<strong>CATDlgHide</strong>);         

         pButton-&gt;<strong>SetTitle</strong> (_MoreMsg);

         _IsMoreWindowOpen= FALSE;
      }else
      {
         <strong>SetVerticalAttachment(10,</strong> CATDlgTopOrLeft, _pFrameRightMore, NULL);
         _pFrameRightMore-&gt;SetVisibility(<strong>CATDlgShow</strong>);         

         pButton-&gt;<strong>SetTitle</strong> (_LessMsg);

         _IsMoreWindowOpen = TRUE;
      }
   }
}
...</pre>
		<p><code>_IsMoreWindowOpen</code> is a data member of the <em>CAADlgMoreButtonDlg</em> 
		class. It is a <em>CATBoolean</em> value set TRUE when the right frame is 
		opened and FALSE otherwise. The value is initialized to FALSE in the class 
		constructor.</p>
		<ul>
			<li>To hide the right frame ( <code>_IsMoreWindowOpen</code> = TRUE)
				<p><code>_pFrameRightMore</code> the right frame is detached from 
				its tabulation and hidden. The title of the push button becomes &quot;More&quot;.</p>
			</li>
			<li>To show the right frame ( <code>_IsMoreWindowOpen</code> = FALSE)
				<p><code>_pFrameRightMore</code> the right frame is attached to 
				the second vertical tabulation and shown. See <a href="#Fig4b">
				Fig. 4b</a>. The title of the push button becomes &quot;Less&quot;.</p>
			</li>
		</ul>
	</li>
	<li><a name="CB2"></a>The &quot;<strong>More &amp; Radio Button Demonstrator</strong>&quot; 
		Dialog box
		<p>The <code>OnRadioButtonDARadBModifyNotification</code> method is called 
		when the end user selects or deselects the &quot;With more frame A&quot; 
		radio button.</p>
		<pre class="code">...
void CAADlgMoreRadioDlg::OnRadioButtonDARadBModifyNotification(CATCommand* cmd, 
                                CATNotification* evt, CATCommandClientData data)
{
  CATDlgRadioButton * pRadioButton = (CATDlgRadioButton *) cmd ;
  if ( (NULL != _pFrameDetailA) &amp;&amp; ( NULL != pRadioButton) )
  {
     if (pRadioButton-&gt;GetState() == <strong>CATDlgCheck</strong>) 
     {
        S<strong>etVerticalAttachment(10,</strong> CATDlgTopOrLeft, _pFrameDetailA, NULL);
        _pFrameDetailA-&gt;SetVisibility(<strong>CATDlgShow</strong>);         
     } 
     else 
     {
        <strong>ResetAttachment</strong>(_pFrameDetailA);         
       _pFrameDetailA-&gt;SetVisibility(CATDlgHide);         
     }
  }
}
...</pre>
		<p>When the state of the button is:</p>
		<ul>
			<li><code>CATDlgCheck</code>: The frame is attached to the second (10) 
				vertical tabulation and the frame is shown- <a href="#Fig5b">See 
				Fig 5b</a></li>
			<li>Otherwise <code>(CATDlgUncheck)</code>: The current frame is detached 
				and hidden.</li>
		</ul>
		<p>The <code>OnRadioButtonDBRadBModifyNotification</code> method is called 
		when the end user selects or deselects the &quot;With more frame B&quot; 
		radio button. The contents of this method is similar to the previous one.</p>
		<p>The <code>OnRadioButtonNA</code><code>RadBModifyNotification</code> method 
		is called when the end user selects or deselects the &quot;Without frame&quot; 
		radio button. The contents of this method is empty once there is no frame 
		to attach.</p>
	</li>
	<li><a name="CB3"></a>The &quot;<strong>Frame Replacement Demonstrator</strong>&quot; 
		Dialog box
		<p>The <code>OnComboSelectNotification</code> method is called when the 
		end user selects a new element in the combo list.</p>
		<pre class="code">...
void CAADlgFrameReplaceDlg::OnComboSelectNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
   if ( NULL != _pComboPointType )
   {
      <strong>ResetAttachment</strong>(_pListFrame[_CurrentSelection]);
      _pListFrame[_CurrentSelection]-&gt;SetVisibility(<strong>CATDlgHide</strong>);
      
      int NewCurrentSelection = _pComboPointType-&gt;GetSelect() ;
      <strong>SetHorizontalAttachment</strong>(<strong>5</strong>, CATDlgTopOrLeft
                                     , _pListFrame[NewCurrentSelection], NULL);
      _pListFrame[NewCurrentSelection]-&gt;SetVisibility(<strong>CATDlgShow</strong>);
      
      _CurrentSelection = NewCurrentSelection ;
   }
}
...</pre>
		<p>The code is the following: See <a href="#Fig6">Fig. 6</a></p>
		<ol>
			<li>Retrieving the frame to detach : The <code>_CurrentSelection</code> 
				frame in the <code>_pListFrame</code> table. See the
				<a href="#Build31">Build</a> method.</li>
			<li>Detaching the old frame (<code>_CurrentSelection</code>) from its 
				tabulation and hidding it.</li>
			<li>Retrieving the frame to attach: The current value in the combo list,
				<code>NewCurrentSelection</code>.</li>
			<li>Attaching the <code>NewCurrentSelection</code> frame to the fit 
				tabulation and showing it.</li>
		</ol>
		<p><code>NewCurrentSelection</code> becomes the new current index value 
		kept in the <code>_CurrentSelection</code> data member.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to use the tabulation layout to create dynamic dialog 
boxes, such as a more and less dialog box.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgTaTabLayout.htm">How to Arrange Dialog Objects Using 
		Tabulations</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADlgTaGridLayout.htm">How to Arrange Dialog Objects Using 
		a Grid</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADlgTaResources.htm">How to Assign Resources to a Dialog 
		Box</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2003]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
