<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Arrange Dialog Objects Using a Grid</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Arrange Dialog Objects Using a Grid</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Arranging dialog objects in a dialog window, a dialog box, a frame or 
		a tab page, that is a container, consists in positioning each object at 
		a given place with respect to the others [<a href="#References">1</a>]. 
		The container layout will then not changed when the dialog window is resized. 
		The dialog objects can be precisely arranged in their respective containers 
		using a grid attached to the container. </p>
		<ul>
			<li><a href="#400000">What Is Dialog Object Grid Layout?</a></li>
			<li><a href="#500000">A Grid Layout Example</a></li>
			<li><a href="#600000">The Grid Layout Toolbox</a></li>
			<li><a href="#700000">The Object Container Grid Layout Specific Programming 
				Tasks</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>What Is Dialog Object Grid Layout?</h2>
<p>The grid layout consists in designing a grid made of cells located at the intersection 
of rows and columns. A cell is defined using the intersecting row and column numbers. 
Each dialog object occupies a rectangular space spread in one or several cells. 
It's location is defined using the cell at its top left corner, and using the number 
of cells in which it horizontally and vertically spreads.</p>
<p>This enables the container sizes to be defined by their contents. A given row 
has the width of the wider object it contains, and a column has the height of its 
higher object. A given object that spreads in several cells can have more room that 
it really needs. To overcome this, the object can define the way it is attached 
to the cell sides.</p>
<p>The grid layout applies to <em>CATDlgDocument</em>, <em>CATDlgDialog</em>,
<em>CATDlgFrame</em>, and <em>CATDlgTabPage</em> objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>A Grid Layout Example</h2>
<p>Assume you need to create the following window, as a class that derives from
<em>CATDlgDialog</em>.</p>
<p>
<img alt="Grid Layout Window" height="199" src="images/CAADlgGridLayoutWindow.jpg" width="286"/></p>
<p>It contains a spinner and two check buttons aligned on the first row, then a 
combo alone on the second row, and three push buttons aligned on the third row. 
The OK, Cancel, and Help push buttons are supplied with the <em>CATDlgDialog</em> 
derived class and are not to be arranged in the window. The window constructor must 
be as follows:</p>
<pre class="code">GridLayoutWindow ::GridLayoutWindow (CATDialog * Parent,
                                     const CATString&amp; Name,
		           	     CATDlgStyle Style)
                 : CATDlgDialog(Parent, Name, Style)
{}</pre>
<p>And the object that instantiate it must use the <code>CATDlgGridLayout</code> 
style as follows:</p>
<pre class="code">GridLayoutWindow * pWindow = new GridLayoutWindow (this,
                                                   &quot;GridWind&quot;,
                                                   <strong>CATDlgGridLayout</strong>);</pre>
<p>The grid to build is as follows:</p>
<p>
<img alt="Grid Layout Constraints" height="510" src="images/CAADlgGridLayout.gif" width="494"/></p>
<p>The grid could be built using the <code>SetGridConstraints</code> method. It 
is used on each control to associate with it the positioning parameters, as the 
five arguments of <code>SetGridConstraints</code>:</p>
<ol>
	<li>The row number where the control top left corner is located in</li>
	<li>The column number where the control top left corner is located in</li>
	<li>The number of rows on which the control is spread</li>
	<li>The number of columns on which the control is spread</li>
	<li>The attachment mode. It can be set to <code>CATGRID_LEFT</code>, <code>CATGRID_RIGHT</code>,
		<code>CATGRID_TOP</code>, <code>CATGRID_BOTTOM</code>, and <code>CATGRID_4SIDES</code></li>
</ol>
<p>Rows and column numbers begin with 0. You can see that the combo top left corner 
is located in the cell at the intersection of the row 1 and column 0, and spreads 
on three rows and one column. Since it is attached by the four sides, it occupies 
the full space, even if the size is increased. The set of calls to <code>SetGridConstraints</code> 
that build the first window displayed is as follows:</p>
<pre class="code">Spinner-&gt;SetGridConstraints(0,0,1,1,CATGRID_LEFT);
CB1    -&gt;SetGridConstraints(0,1,1,1,CATGRID_LEFT);
CB2    -&gt;SetGridConstraints(0,2,1,1,CATGRID_LEFT);
Combo  -&gt;SetGridConstraints(1,0,3,1,CATGRID_4SIDES);
PB1    -&gt;SetGridConstraints(2,0,1,1,CATGRID_LEFT);
PB2    -&gt;SetGridConstraints(2,1,1,1,CATGRID_LEFT);
PB3    -&gt;SetGridConstraints(2,3,1,1,CATGRID_RIGHT);</pre>
<p>The same window is shown with three other attachment modes applied to the combo:</p>
<table>
	<tr>
		<td>
		<img alt="Grid Layout Left Attachment" height="199" src="images/CAADlgGridLayoutWindowLeft.jpg" width="286"/></td>
		<td><code>CATGRID_LEFT</code>: The combo is attached by its left side. Even 
		if it doesn't seem to be spread on three cells, no other control can occupy 
		this area.</td>
	</tr>
	<tr>
		<td>
		<img alt="Grid Layout Center Attachment" height="199" src="images/CAADlgGridLayoutWindowCenter.jpg" width="286"/></td>
		<td><code>CATGRID_CENTER</code>: The combo is attached at the center of 
		its area.</td>
	</tr>
	<tr>
		<td>
		<img alt="Grid Layout Right Attachment" height="199" src="images/CAADlgGridLayoutWindowRight.jpg" width="286"/></td>
		<td><code>CATGRID_RIGHT</code>: The combo is attached by its right side. 
		The space in front of it is empty, but if longer character strings were 
		used for its lines, its size could grow to the left.</td>
	</tr>
</table>
<p>Since the combo is alone on its row, its size determines the row height, and 
the two other attachment modes, that is <code>CATGRID_TOP</code> and <code>CATGRID_BOTTOM</code>, 
would have the same effect than <code>CATGRID_LEFT</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="600000"></a>The Grid Layout Toolbox</h2>
<p>To use the grid layout, you need to do the following:</p>
<ul>
	<li>Creating a <em>CATDlgGridConstraints</em> instance and assigning it to a 
		dialog object.</li>
	<li>Understanding how to attach a dialog object with respect to the cell sides.</li>
	<li>Enabling rows and columns for resize.</li>
</ul>
<h3>Creating a CATDlgGridConstraints Instance and Assigning it to Dialog Objects</h3>
<p>The grid is not an object itself. You only need to define how each object is 
located in the grid using one or several <em>CATDlgGridConstraints</em> instances, 
and the grid is interpreted from these instances. As we see in the example, you 
can use the <code>SetGridConstraints</code> method on each object you want to arrange, 
either when this object is a control, or when it is a container contained in another 
container, such as a frame contained in another frame. The grid you refer to is 
set to the containment parent [<a href="#References">2</a>] of the dialog object, 
and must be consistently referred to for any object having this containment parent.
<code>SetGridConstraints</code> assigns to the object it applies an instance of 
the <em>CATDlgGridConstraints</em> class that holds the positioning parameters. You 
could do this in two ways:</p>
<ol>
	<li>Use the <code>SetGridConstraints</code> methods with five arguments as shown 
		in the example. This method creates the <em>CATDlgGridConstraints</em> class 
		instance and assigns it to the container or control</li>
	<li>Create a <em>CATDlgGridConstraints</em> class instance, set and modify its 
		parameters before assigning it using <code>SetGridConstraints</code> to 
		each control, as follows:
		<pre class="code">CATDlgGridConstraints GridCst(0,0,1,1,CATGRID_LEFT);
Spinner-&gt;SetGridConstraints(GridCst);
GridCst.Column=1;
CB1    -&gt;SetGridConstraints(GridCst);
GridCst.Column=2;
CB2    -&gt;SetGridConstraints(GridCst);
GridCst.Row=1;
GridCst.Column=0;
GridCst.H_SPAN=3;
GridCst.V_SPAN=1;
GridCst.Justification=CATGRID_4SIDES;
Combo  -&gt;SetGridConstraints(GridCst);
GridCst.Row=2;
GridCst.Column=0;
GridCst.H_SPAN=1;
GridCst.V_SPAN=1;
GridCst.Justification=CATGRID_LEFT;
PB1    -&gt;SetGridConstraints(GridCst);
GridCst.Column=1;
GridCst.Justification=CATGRID_BOTTOM;
PB2    -&gt;SetGridConstraints(GridCst);
GridCst.Column=3;
GridCst.Justification=CATGRID_LEFT;
PB3    -&gt;SetGridConstraints(GridCst);</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Understanding How to Attach a Dialog Object with Respect to the Cell Sides</h3>
<p>Attaching a dialog object to its cell(s) sides determines the dialog window or 
container layout when the dialog window is first displayed with its original size, 
and has also an effect when the end user resizes it. The following attachment modes 
are available:</p>
<table>
	<thead>
		<tr>
			<th>Attachment Mode</th>
			<th>Description</th>
		</tr>
	</thead>
	<tr>
		<td class="borderBottom"><code>CATGRID_LEFT</code></td>
		<td class="borderBottom">Attaches the object to the left side of the cell, 
		or if the object spreads on several cells, to the left side of the left 
		cell</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_RIGHT</code></td>
		<td class="borderBottom">Attaches the object to the right side of the cell, 
		or if the object spreads on several cells, to the right side of the right 
		cell</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_TOP</code></td>
		<td class="borderBottom">Attaches the object to the top side of the cell, 
		or if the object spreads on several cells, to the top side of the top cell</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_BOTTOM</code></td>
		<td class="borderBottom">Attaches the object to the bottom side of the cell, 
		or if the object spreads on several cells, to the bottom side of the bottom 
		cell</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_4SIDES</code></td>
		<td class="borderBottom">Attaches the object to each of the four sides of 
		the cell, or if the object spreads on several cells, to the left side of 
		the left cell, to the right side of the right cell, to the top side of the 
		top cell, and to the bottom side of the bottom cell. It is the concatenation 
		of <code>CATGRID_LEFT</code>, <code>CATGRID_RIGHT</code>, <code>CATGRID_TOP</code>, 
		and <code>CATGRID_BOTTOM</code></td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_CST_WIDTH</code></td>
		<td class="borderBottom">Keeps the object initial width when resizing</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_CST_HEIGHT</code></td>
		<td class="borderBottom">Keeps the object initial height when resizing</td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_CST_SIZE</code></td>
		<td class="borderBottom">Keeps the object initial size, that is initial 
		width and initial height, when resizing. It is the concatenation of
		<code>CATGRID_CST_WIDTH</code> and <code>CATGRID_CST_HEIGHT</code></td>
	</tr>
	<tr>
		<td class="borderBottom"><code>CATGRID_CST_CENTER</code></td>
		<td class="borderBottom">Attaches the object to each of the four sides of 
		the cell, and keeps the object initial size, that is initial width and initial 
		height, when resizing. It is the concatenation of <code>CATGRID_4SIDES</code> 
		and <code>CATGRID_CST_SIZE</code></td>
	</tr>
</table>
<p>They can be concatenated using the &quot;|&quot; character, as follows:</p>
<pre class="code">Combo-&gt;SetGridConstraints(1,0,3,1,CATGRID_LEFT<strong>|</strong>CATGRID_RIGHT);</pre>
<p>The default value is <code>CATGRID_LEFT</code>|<code>CATGRID_TOP</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Enabling Rows and Columns for Resize</h3>
<p>You can also manage the ability of a given row or column to be resized when its 
container is itself resized. The grid rows and columns are by default non sensitive 
to resizing. Resizing occurs in two cases:</p>
<ol>
	<li>The end user resizes the whole dialog box or window. This is possible if 
		the dialog box or window isn't set to <code>CATDlgWndNoResize</code>.</li>
	<li>The dialog box or window is being constructed, and the different containers 
		and controls must match their container size according to their attachment 
		mode.</li>
</ol>
<p>The height of a resizable row is increased or decreased when its container is 
resized, while it is the width of a resizable column that changes. To set a row 
or a column resizable, use the methods <code>SetGridRowResizable</code> and
<code>SetGridColumnResizable</code>.</p>
<pre class="code">SetGridRowResizable(2,1);
SetGridColumnResizable(0,1);</pre>
<p>The first argument is the row or column number in the grid. The second can be 
set to 0 for a non resizable row or column, and to 1 for a resizable one. In the 
example above, the third row and the first column are set as resizable.</p>
<p>When the containing window is resized, the controls or containers that are spread 
in cells belonging to resizable rows or columns are moved or resized according to 
their attachment mode. For example, the window of the example used in this article 
is stretched as follows:</p>
<p>
<img alt="Grid Layout Window Resized" height="231" src="images/CAADlgGridLayoutWindowResize.jpg" width="365"/></p>
<p>The third row is resizable, as well as the first three columns. This is coded 
as follows:</p>
<pre class="code">SetGridRowResizable(2,1);
SetGridColumnResizable(0,1);
SetGridColumnResizable(1,1);
SetGridColumnResizable(2,1);</pre>
<p>Note that the spinners and the check buttons were explicitly attached to their 
cell left side. Their cells are stretched, and empty space appears to their rights. 
The combo were attached to the four sides of the cells, and is stretched to occupy 
the full width of the three cells. These first two lines have kept their initial 
height, since they are not resizable. The third row is stretched. Its height increases. 
Apply and Restore have not moved vertically, because they are attached to their 
cell top side, but Undo, which is attached to its cell bottom side, has moved vertically. 
This shows the new row height. As for the first row, the first three columns are 
stretched, but the fourth, which contains Restore, is not resizable and its width 
has not changed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="700000"></a>The Object Container Grid Layout Specific ProgrammingTasks</h2>
<p>To manage the layout of a container using a grid, you can use the following methods. 
They apply to:</p>
<ul>
	<li>Frames, instances of the <em>CATDlgFrame</em> instances [<a href="#References">3</a>].</li>
	<li>Tab pages or property pages, instances of the <em>CATDlgTabPage</em> instances 
		[<a href="#References">4</a>].</li>
	<li>Your classes that derive from <em>CATDlgDocument</em> [<a href="#References">5</a>] 
		or <em>CATDlgDialog</em> [<a href="#References">6</a>].</li>
</ul>
<p>Layout using a grid is available only if the <em>CATDlgGridLayout</em> style 
is used in the object constructor. The available methods enable to set a row or 
a column of the grid as resizable, and to ask if a row or a column is resizable. 
The examples use a <em>CATDlgFrame</em> instance:</p>
<table>
	<tr>
		<td>Set 1st row as resizable</td>
		<td>
		<pre class="code">int RowIndex = 0;        // First row
int Resizability = 1;    // 0 means non resizable
pFrame-&gt;<strong>SetGridRowResizable</strong>(RowIndex, Resizability);</pre>
		</td>
	</tr>
	<tr>
		<td>Set 3rd column as resizable</td>
		<td>
		<pre class="code">int ColumnIndex = 2;     // Third column
Resizability = 1;        // 0 means non resizable
pFrame-&gt;<strong>SetGridColumnResizable</strong>(ColumnIndex, Resizability);</pre>
		</td>
	</tr>
	<tr>
		<td>Ask if 4th row is resizable</td>
		<td>
		<pre class="code">RowIndex = 3;            // Fourth row
Resizability = pFrame-&gt;<strong>IsGridRowResizable</strong>(RowIndex);
if (Resizability == 1)
  ... // Row is resizable
else  // Resizability == 0
  ... // Row is NOT resizable</pre>
		</td>
	</tr>
	<tr>
		<td>Ask if 6th column is resizable</td>
		<td>
		<pre class="code">ColumnIndex = 5;         // Sixth column
Resizability = pFrame-&gt;<strong>IsGridColumnResizable</strong>(ColumnIndex);
if (Resizability == 1)
  ... // Column is resizable
else  // Resizability == 0
  ... // Column is NOT resizable</pre>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Dialog object container sizes are determined using their contents. Containers 
can be resized without modifying their contents, that can be partially hidden if 
necessary. They are arranged according to a grid made of cells that are determined 
by the intersection of rows and columns. Containers and controls can occupy one 
cell, or can be spread in several ones. They can be attached to some or all of their 
cell sides, and can be requested to keep the same width or height when the dialog 
window is resized. Rows and columns are by default non-resizable, but can be explicitly 
set as resizable. Container and control location and size after resizing depend 
on their attachment mode.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgTaObjectLayout.htm">How to Arrange Dialog Objects</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADlgTaCreatingDialogs.htm">How to Create Dialog Objects</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADlgQrCATDlgFrame.htm">CATDlgFrame</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADlgQrCATDlgTabPage.htm">CATDlgTabPage</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAADlgQrCATDlgDocument.htm">CATDlgDocument</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAADlgQrCATDlgDialog.htm">CATDlgDialog</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
