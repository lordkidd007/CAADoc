<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Create Dialog Objects</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Create Dialog Objects</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>All the Dialog framework classes share the way to get their behavior, 
		and attributes. The behavior is set in the object constructor using by assigning 
		a parent object and a style. Attributes are the visibility, and the sensitivity 
		to the end user interactions. Dialog windows and objects can be dynamically 
		created and modified with respect to their changing environment, and dialog 
		objects can thus be deleted or created in an existing dialog window. </p>
		<ul>
			<li><a href="#100000">Constructing Dialog Objects</a></li>
			<li><a href="#200000">Managing Visibility and Sensitivity</a>
				<ul>
					<li><a href="#210000">Managing Visibility</a></li>
					<li><a href="#220000">Managing Sensitivity</a></li>
				</ul>
			</li>
			<li><a href="#300000">Deleting Dialog Objects</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>Constructing Dialog Objects</h2>
<p>Most of the dialog classes can be used as is, that is instantiated, such as the 
controls, or the containers. Some others must be derived to create specialized objects, 
such as the dialog windows. Each class has a constructor which requires at least 
two parameters, and sometimes three:</p>
<ol>
	<li><strong>The parent</strong> [<a href="#References">1</a>]. It is altogether:
		<ul>
			<li>The parent in the dialog object containment structure. It is the 
				container object. Some rules exist on the parent object. For example, 
				a control cannot be a parent object, since it cannot contain other 
				dialog objects. A <a href="CAADlgQrCATDlgTabContainer.htm">CATDlgTabContainer</a> 
				instance can contain only <a href="CAADlgQrCATDlgTabPage.htm">CATDlgTabPage</a> 
				instances, and conversely, a <a href="CAADlgQrCATDlgTabPage.htm">
				CATDlgTabPage</a> instance can only be contained by
				<a href="CAADlgQrCATDlgTabContainer.htm">CATDlgTabContainer</a>, 
				but can contain in turn other containers, such as
				<a href="CAADlgQrCATDlgFrame.htm">CATDlgFrame</a> instances, and 
				controls.</li>
			<li>The parent in the command tree structure. Since
				<a href="CAADlgQrCATDialog.htm">CATDialog</a> derives from <em>CATCommand</em>, 
				each dialog object instance is seen as a command for the event management 
				mechanisms, such as the send/receive [<a href="#References">2</a>] 
				and the callback [<a href="#References">3</a>] mechanisms.</li>
		</ul>
		<p>This parent must of course be an instance of a class that derives from
		<em>CATCommand</em>, but in addition, it must be either another dialog object 
		instance: its container, or a <em>CATInteractiveApplication</em> instance 
		[<a href="#References">4</a>]. Then you can set the parent object for the 
		command tree structure and event transmission to another object that derives 
		from <em>CATCommand</em> using the <code>CATCommand::SetFather</code> method. 
		This modifies only the command tree structure, but the parent in containment 
		tree structure doesn't change. The method <code>GetFatherWindow</code> allows 
		you to retrieve a pointer to the parent window, usually the dialog object 
		that sits at the top of the containment tree structure.</p>
	</li>
	<li><strong>The instance identifier</strong>: this is an internal character 
		string, instance of the <em>CATString</em> class, which can be used for 
		your internal management, but which is never shown to the end user and thus 
		does not require to be translated. It is generally used to retrieve resources 
		set to the dialog object, such as the title displayed on a push button, 
		a menu item, or a label, or the icon displayed for a push item in a toolbar 
		[<a href="#References">5</a>]. Blank characters are not allowed. The
		<code>GetName</code> method allows you to retrieve this identifier.</li>
	<li><strong>The style</strong>: always defaulted to NULL, the style available 
		values depend on the dialog object type, and cannot be modified afterwards. 
		For example, it can set the option style for a combo or request that the 
		text keyed in in an editor should be an integer. The method <code>GetStyle</code> 
		allows to retrieve the style of a dialog object.</li>
</ol>
<p>As an example, the construction of a <em><a href="CAADlgQrCATDlgCombo.htm">CATDlgCombo</a></em> 
instance could be as follows:</p>
<pre class="code">CATDlgCombo * pMyCombo;
pMyCombo = new CATDlgCombo(this,                  // parent
                           &quot;MyNiceCombo&quot;,         // identifier
                           CATDlgCmbOptionStyle); // style</pre>
<p>When the style can be composite, use the pipe | to concatenate the style attributes. 
For example, if you want to create a combo with the drop down style and with an 
editable field, construct it as follows:</p>
<pre class="code">CATDlgCombo * pMyCombo;
pMyCombo = new CATDlgCombo(this,
                           &quot;MyNiceCombo&quot;,
                           CATDlgCmbDropDown | CATDlgCmbEntry);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Managing Visibility and Sensitivity</h2>
<p>The other generic attributes of a dialog object are the ability to be seen or 
hidden, and to be sensitive to user interaction or not, that is the user can select 
or click it or not.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="210000"></a>Managing Visibility</h3>
<p>A given dialog object can be set visible or invisible by means of its visibility 
attribute which takes the values <code>CATDlgShow</code> and <code>CATDlgHide</code>. 
When creating a main container, such as a <em>
<a href="CAADlgQrCATDlgDocument.htm">CATDlgDocument</a></em> or a <em>
<a href="CAADlgQrCATDlgDialog.htm">CATDlgDialog</a></em> instance, you need to set 
it visible using the following method:</p>
<pre class="code">SetVisibility(CATDlgShow);</pre>
<p>By default, all the dialog objects contained in this main container are also 
shown.</p>
<p>The <code>GetVisibility</code> method allows you to know whether a given object 
is visible:</p>
<pre class="code">if (pObject-&gt;GetVisibility() == CATDlgShow)
  ... //Do what is required if the object is visible
else
  ... //Do what is required if the object is not visible</pre>
<p>To hide a part of a window, set the visibility attribute of the container(s) 
making up this part to <code>CATDlgHide </code>rather than deleting the involved 
dialog objects. This avoids to recreate them if you need them again. Just set their 
visibility attribute to <code>CATDlgShow</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="220000"></a>Managing Sensitivity</h3>
<p>Another key attribute is the sensitivity of the dialog object to the user interactions. 
This is usually dedicated usually to controls. You can request a control to be sensitive 
to user interactions by assigning it the state <code>CATDlgEnable</code>, or the 
reverse using the state <code>CATDlgDisable</code>, by means of the <code>SetSensitivity</code> 
method, as follows:</p>
<pre class="code">Control-&gt;SetSensitivity(CATDlgEnable);</pre>
<p>A disabled control is displayed dimmed and cannot be selected. Below are some 
examples of controls shown as disabled and enabled.</p>
<table>
	<colgroup align="center" span="2">
	</colgroup>
	<colgroup align="center" span="3">
	</colgroup>
	<thead>
		<tr>
			<td></td>
			<th>CATDlgDisable</th>
			<th>CATDlgEnable</th>
		</tr>
	</thead>
	<tr>
		<td>Radio buttons</td>
		<td>
		<img alt="Radio Buttons Disabled" height="22" src="images/CAADlgDisable1.jpg" width="119"/></td>
		<td>
		<img alt="Radio Buttons Enabled" height="26" src="images/CAADlgEnable1.jpg" width="132"/></td>
	</tr>
	<tr>
		<td>Combo</td>
		<td>
		<img alt="Combo Disabled" height="24" src="images/CAADlgDisable2.jpg" width="153"/></td>
		<td>
		<img alt="Combo Enabled" height="23" src="images/CAADlgEnable2.jpg" width="152"/></td>
	</tr>
	<tr>
		<td>Menu items</td>
		<td>
		<img alt="Menu Items Disabled" height="98" src="images/CAADlgDisable3.jpg" width="121"/></td>
		<td>
		<img alt="Menu Items Enabled" height="97" src="images/CAADlgEnable3.jpg" width="110"/></td>
	</tr>
	<tr>
		<td>Push items</td>
		<td>
		<img alt="Push Items Disabled" height="70" src="images/CAADlgDisable4.jpg" width="35"/></td>
		<td>
		<img alt="Push Items Disabled" height="70" src="images/CAADlgEnable4.jpg" width="36"/></td>
	</tr>
</table>
<p>The ThickSurface and CloseSurface menu items are enabled in both cases.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Deleting Dialog Objects</h2>
<p>To delete a dialog object in a dialog window while the dialog window remains 
active, you can use the RequestDelayedDestruction method, especially in a callback 
method. Using RequestDelayedDestruction, you can delete the dialog object from a 
callback method set onto this dialog object. The delete operation is delayed, and 
executed after the callback end.</p>
<p>When you delete a dialog window, you just need to delete the upper container. 
The contained dialog objects are then recursively and automatically deleted. If 
you want to delete a contained container, use RequestDelayedDestruction on this 
container. Its contained dialog objects are then also recursively and automatically 
deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The behavior of a dialog object is set using its parent to anchor it in the command 
tree structure, and using its style, possibly composite. Its visibility and its 
sensitivity to end user interactions can be managed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgQrDialogSummary.htm">Dialog Class Usage and Link Reference</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidSendReceive.htm">
		The Send/Receive Communication Protocol</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidCallbacks.htm">
		The Callback Mechanism</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADlgTaInteractiveApplication.htm">How to Design Your Interactive 
		Application</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAADlgTaResources.htm">How to Assign Resources to a Dialog 
		Box</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
