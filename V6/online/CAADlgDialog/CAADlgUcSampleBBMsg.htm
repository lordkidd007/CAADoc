<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Sending a Data Message to an Interactive Application</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Sending a Data Message to an Interactive Application</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to make two interactive applications communicate, 
		and how one of them can send a data message that conveys a text, and how 
		the other can receive the message.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADlgBBSender and CAADlgBBReceiver Use Cases</a>
				<ul>
					<li><a href="#What">What Do CAADlgBBSender and CAADlgBBReceiver 
						Do</a></li>
					<li><a href="#How">How to Launch CAADlgBBSender and CAADlgBBReceiver</a></li>
					<li><a href="#Where">Where to Find the CAADlgBBSender and CAADlgBBReceiver 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how an interactive application can declare 
that it will send or receive messages, how to filter the messages to receive, and 
how to send and receive messages using the backbone objects of the System framework. 
The message taken as an example conveys a text.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADlgBBSender and CAADlgBBReceiver Use Cases</h2>
<p>CAADlgBBSender and CAADlgBBReceiver are use cases of the CAADialog.edu framework 
that illustrates the Dialog and System frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Do CAADlgBBSender and CAADlgBBReceiver Do</h3>
<p>This use case illustrates two interactive applications. One behaves as a message 
sender, and the other as a message receiver. The message is a data message that 
conveys a text. The message sender displays an entry field in which the end user 
types the message text and clicks the Send button to send the message. The message 
receiver displays a field in which the text of the received message is printed.</p>
<table>
	<tr>
		<td>
		<img alt="Backbone Sender" height="53" src="images/CAADlgBackboneSender.jpg" width="220"/></td>
		<td>
		<img alt="Backbone Receiver" height="52" src="images/CAADlgBackboneReceiver.jpg" width="195"/></td>
	</tr>
</table>
<p>Both the message sender and the message receiver are interactive applications 
launched by instantiating a class that derives from <em>CATInteractiveApplication</em>. 
To send the message, the message sender connects to the backbone bus, declares itself, 
instantiates the message component using the text entered in the text field of its 
window, and sends it.</p>
<p>The message receiver needs to instantiate a message handler to receive the message. 
Such a message handler is a component that implements the <em>CATIMessageReceiver</em> 
interface. In addition, the message receiver subscribes to a notification that the 
message handler will request a message manager to dispatch along with the message 
text. To receive the message, the message receiver connects to the backbone bus, 
declares itself, declares the message to receive, instantiates the message handler, 
associates itself with the message to receive and with the message handler. As soon 
as the message is sent, it is retrieved by the message handler that requests the 
message manager to dispatch a notification that carries the message text, and to 
which the message receiver has subscribed. The message receiver called back method 
extract the message text from the notification and prints it in the window text 
field.</p>
<p>Compared to batch applications that intend to receive messages [<a href="#References">1</a>] 
[<a href="#References">2</a>], there is no need to create and enter a waiting loop, 
since the interactive application includes one already. The message conveys data 
[<a href="#References">5</a>] made of a text. It is not described.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADlgBBSender and CAADlgBBReceiver</h3>
<p>To launch CAADlgBBSender and CAADlgBBReceiver, you will need to set up the build 
time environment, then compile CAADlgBBSender and CAADlgBBReceiver along with its 
prerequisites, set up the run time environment [<a href="#References">3</a>] in 
two different windows, and then execute the use case.</p>
<p>To execute the use case, successively type in the DOS window command line the 
two module names:</p>
<pre>CAADlgBBSender
CAADlgBBReceiver</pre>
<p>Type a text in the Backbone Sender window text field, and click Send. The text 
is printed in the Backbone Receiver window text field.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADlgBBSender and CAADlgBBReceiver Code</h3>
<p>The CAADlgBBSender and CAADlgBBReceiver use case are made of several classes 
located in the CAADlgBBSender.m and CAADlgBBReceiver.m module of the CAADialog.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialog.edu\CAADlgBBSender.m\<br />
InstallRootFolder\CAADoc\CAADialog.edu\CAADlgBBReceiver.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The message component is made of several classes located in the CAADlgBBMessage.m 
module of the CAADialog.edu framework, and in addition implements the CAAIDlgDataRequest 
interface located in the PrivateInterfaces directory and in the CAADlgBBMessageInt.m 
module of the CAADialog.edu framework. They are not described in this article. Refer 
to the messages described in the CAASystem.edu framework [<a href="#References">4</a>] 
[<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create interactive applications that send and receive a data message, there 
are seven main steps:</p>
<ol>
	<li><a href="#Step1">Creating the Message Sender</a></li>
	<li><a href="#Step2">Sending the Message</a></li>
	<li><a href="#Step3">Creating the Message Handler</a></li>
	<li><a href="#Step4">Creating the Message Manager</a></li>
	<li><a href="#Step5">Creating the Message Receiver</a></li>
	<li><a href="#Step6">Receiving the Message</a></li>
	<li><a href="#Step7">Removing the Message Handler</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Message Sender</h3>
<p>The message sender is an interactive application whose class is <em>CAADlgBBSender</em>. 
Its main method is <code>BeginApplication</code> where the application window is 
instantiated. The window class is <em>CAADlgBBSenderWindow</em> whose <code>Build</code> 
method connects to the backbone bus by calling its <code>BackboneInit</code> method 
before creating the controls and setting a callback to react when the Send button 
is clicked. Below is the <code>BackboneInit </code>method</p>
<pre class="code">...
HRESULT CAADlgBBSenderWindow::BackboneInit()
{
  HRESULT  rc = E_FAIL;
  // Retrieves an instance of a backbone bus (default bus)
  _pICommunicator = ::<strong>CATGetBackboneConnection</strong>();
  if ( NULL != _pICommunicator )
  {
     CATApplicationClass ApplicationSenderId = &quot;CAADlgBBSender&quot;;
     rc =_pICommunicator-&gt;<strong>Declare</strong>(ApplicationSenderId);
     ... //Process failing declaration
  }
  return rc;
}
...</pre>
<p>First, a connection to the backbone bus must be established. This is possible 
thanks to the global function <code>CATGetBackboneConnection</code> that returns 
a pointer to the <em>CATICommunicator</em> interface stored in the <code>_pICommunicator</code> 
data member. Then, the message sender creates its application class identifier and 
declares it to the backbone bus using the method <code>Declare</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Sending the Message</h3>
<p>The message is sent by the callback set to the push button activation.</p>
<pre class="code">...
void CAADlgBBSenderWindow::PushSend(CATCommand         * iSendingCommand, 
                                    CATNotification    * iSentNotification, 
                                    CATCommandClientData iUsefulData)
{
  CATUnicodeString Line;
  _pEditor-&gt;<strong>GetLine</strong>(Line);
  CAAIDlgDataRequest * pIDataRequest = NULL;
  HRESULT rc = ::<strong>CATInstantiateComponent</strong>(&quot;CAADlgBBEditorMessage&quot;,
                                         IID_CAAIDlgDataRequest,
                                         (void **)&amp;pIDataRequest);
  if ( SUCCEEDED(rc) )
  {
    pIDataRequest-&gt;<strong>SetData</strong>(Line.CastToCharPtr());

    CATICommMsg * pICommMsg =NULL;
    rc = pIDataRequest-&gt;QueryInterface(<strong>IID_CATICommMsg</strong>,(void**)&amp;pICommMsg);
                                                 
    if ( SUCCEEDED(rcb) )
    {
      CATApplicationClass ReceiverApplicationId = &quot;CAADlgBBReceiver&quot;;
      rc = _pICommunicator-&gt;<strong>SendRequest</strong>(ReceiverApplicationId, pICommMsg);
      pICommMsg-&gt;Release();
      pICommMsg = NULL;
    }
    pIDataRequest-&gt;Release();
    pIDataRequest = NULL;
  }
}
...</pre>
<p>When you click Send, this method is called, and the message sender can send the 
message. It first retrieves the text entered in the text field, a <em>CATDlgEditor</em> 
instance, thanks to the <code>GetLine</code> method. Then it instantiates the message 
component <em>CAADlgBBEditorMessage</em> using the <code>CATInstantiateComponent</code> 
global function, which returns a pointer to <em>CAAIDlgDataRequest</em> interface. 
This interface is created for this message to enable it to set and get its data, 
that is, the message text. The message text is passed to the message component thanks 
to the <code>SetData</code> method of <em>CAAIDlgDataRequest</em>, and then the 
message is sent using the <code>SendRequest</code> method of <em>CATICommunicator</em>, 
specifying the target message receiver identifier and the message to send as a pointer 
to <em>CATICommMsg</em>. This message receiver identifier must be the same than 
the one declared by the message receiver itself in its own <code>
<a href="#Step5">BackboneInit</a></code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Message Handler</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   //Needed to derive from CATBaseUnknown

class CATICommMsg;

class  CAADlgBBEditorMessageHandler : public CATBaseUnknown
{
   CATDeclareClass;
   public:
      CAADlgBBEditorMessageHandler();
      virtual ~CAADlgBBEditorMessageHandler();

      // CATIMessageReceiver Interface
      void HandleMessage(CATICommMsg * iMessage);

  private:
      CAADlgBBEditorMessageHandler(const CAADlgBBEditorMessageHandler &amp;iObjectToCopy);
};</pre>
<p>The <em>CAADlgBBEditorMessageHandler</em> class belongs to a component, thanks 
to the <code>CATDeclareClass</code> macro, C++ derives from <em>CATBaseUnknown</em>, 
and implements <em>CATIMessageReceiver</em>, whose single method is <code>HandleMessage</code>. 
Note that the copy constructor is set as private, and is not implemented in the 
source file. This prevents the compiler from creating the copy constructor as public 
without you know.</p>
<pre class="code">#include &quot;CAADlgBBEditorMessageHandler.h&quot;
#include &lt;CATErrorDef.h&gt; // for the SUCCEEDED macro 
#include &quot;CAAIDlgDataRequest.h&quot;
#include &quot;CAADlgBBMessageManager.h&quot;

#include &quot;TIE_CATIMessageReceiver.h&quot;
<strong>TIE_CATIMessageReceiver(CAADlgBBEditorMessageHandler);</strong>

<strong>CATImplementClass(CAADlgBBEditorMessageHandler,
                  Implementation,
                  CATBaseUnknown,
                  CATNull);
</strong>
CAADlgBBEditorMessageHandler::CAADlgBBEditorMessageHandler(){}

CAADlgBBEditorMessageHandler::~CAADlgBBEditorMessageHandler(){}

void CAADlgBBEditorMessageHandler::<strong>HandleMessage</strong>(CATICommMsg* iMessage)
{
  if ( NULL != iMessage )
  {
    CAAIDlgDataRequest * pIRequest = NULL;
    HRESULT rcb = iMessage-&gt;QueryInterface(IID_CAAIDlgDataRequest,(void**) &amp;pIRequest);
    if ( SUCCEEDED(rcb) )
    {
       char * Text = NULL;
       pIRequest-&gt;GetData(&amp;Text);
       pIRequest-&gt;Release();
       pIRequest= NULL;

       CAADlgBBMessageManager * pManager = CAADlgBBMessageManager::<strong>GetManager</strong>();
       pManager-&gt;<strong>EventToDispatch</strong>(Text);
        
       delete [] Text;
       Text = NULL;

       pManager-&gt;Release();
       pManager= NULL;
    }
  } 
}</pre>
<p>The <em>CAADlgBBEditorMessageHandler</em> class states that it implements the
<em>CATIMessageReceiver</em> interface thanks to the <code>TIE_CATIMessageReceiver</code> 
macro. The <code>CATImplementClass</code> macro declares that the <em>CAADlgBBEditorMessageHandler
</em>class is a component main class thanks the <code>Implementation</code> keyword, 
and that the component OM-derives [<a href="#References">6</a>] from <em>CATBaseUnknown</em>. 
Any component main class declared as an <code>Implementation</code> must C++-derive 
and OM-derive from the same class. The <em>CATIMessageReceiver</em> interface
<code>HandleMessage</code> method is called by the backbone bus and a pointer to 
the message is passed. A pointer to <em>CAAIDlgDataRequest</em> is retrieved from 
the message to get the message text. Then, the message manager of the message receiver 
application is retrieved. The message text is passed to the message manager thanks 
to the <code>EventToDispatch</code> method.</p>
<p>The framework interface dictionary is updated to declare that <em>CAADlgBBEditorMessageHandler</em> 
implements the <em>CATIMessageReceiver</em> interface in the libCAADlgBBReceiver 
shared library or DLL. This interface dictionary is a file located in the CNext\code\dictionary 
directory, and is named CAADialog.edu.dico. There is one and only one interface 
dictionary per framework, named using the framework name suffixed by dico.</p>
<pre class="code">...
CAADlgBBEditorMessageHandler CATIMessageReceiver  libCAADlgBBReceiver
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Message Manager</h3>
<p>The message manager is a component that dispatches a notification that carries 
the message text.</p>
<pre class="code">#include &lt;CAADlgBBMessageManager.h&gt;
#include &lt;CAADlgBBMessageNotification.h&gt;
#include &quot;CATCallbackManager.h&quot;

CATImplementClass(CAADlgBBMessageManager,Implementation,CATBaseUnknown,CATNull);

CAADlgBBMessageManager * CAADlgBBMessageManager::_Manager = NULL;

CAADlgBBMessageManager::CAADlgBBMessageManager()
{}

CAADlgBBMessageManager::~CAADlgBBMessageManager()
{}

void CAADlgBBMessageManager::<strong>EventToDispatch</strong>(char * iText)
{
  CATCallbackManager * pCBManager = ::<strong>GetDefaultCallbackManager</strong>(this);
  if ( NULL != pCBManager )
  {
     CAADlgBBMessageNotification * pNotification = new CAADlgBBMessageNotification(iText);

     pCBManager-&gt;<strong>DispatchCallbacks</strong>(pNotification, this);

     pNotification-&gt;Release();
     pNotification = NULL;
  }	
}

CAADlgBBMessageManager * CAADlgBBMessageManager::<strong>GetManager</strong>()
{
  if ( NULL == _Manager )
  {
    _Manager = new CAADlgBBMessageManager();
  }
  _Manager-&gt;AddRef();
  return _Manager;
}
...</pre>
<p>The message manager is created as a component and is unique. It is instantiated 
by the <code>GetManager</code> static method. The <code>EventToDispatch</code> method 
retrieves the default callback manager associated with any component, instantiates 
a <em>CAADlgBBMessageNotification</em> class that takes the message text as a data 
member, and request the default callback manager to dispatch this notification, 
to which the message receiver application will subscribe.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Message Receiver</h3>
<p>The message receiver is an interactive application. It has a window, instance 
of the class <em>CAADlgBBReceiverWindow</em>, that carries out the main tasks of 
connecting to the backbone bus and receiving the message. Below is the <code>Build</code> 
method of <em>CAADlgBBReceiverWindow.</em></p>
<pre class="code">void CAADlgBBReceiverWindow::<strong>Build</strong>()
{
  HRESULT Init = <strong>BackboneInit</strong>();

  if ( SUCCEEDED(Init) )
  {
     CATDlgFrame  * pFrame  = new CATDlgFrame(this, &quot;FrameId&quot;, CATDlgFraNoFrame | CATDlgGridLayout );
  
     CATDlgLabel  * pLabel  = new CATDlgLabel (pFrame,&quot;LabelEditorId&quot;);
     pLabel-&gt;SetGridConstraints(0,0,1,1,CATGRID_LEFT);

     _pEditor = new CATDlgEditor(pFrame,&quot;EditorId&quot;,CATDlgEdtReadOnly);
     _pEditor-&gt;SetGridConstraints(0,1,1,1,CATGRID_LEFT); 
  
     _pMessageManager = CAADlgBBMessageManager::<strong>GetManager</strong>();
     ::<strong>AddCallback</strong>(this,
                   _pMessageManager,
                   &quot;CAADlgBBMessageNotification&quot;,
                   (CATSubscriberMethod)&amp;CAADlgBBReceiverWindow::ModifyEditor,
                   NULL);
  }
  AddAnalyseNotificationCB(this,
                           GetWindCloseNotification(),
                           (CATCommandMethod)&amp;CAADlgBBReceiverWindow::Exit, NULL);
}
...</pre>
<p>The <code>Build</code> method first call the <code>BackboneInit</code> method, 
and if this method succeeds, creates the controls. Then it retrieves the message 
manager thanks to the static method <code>GetManager</code> of <em>CAADlgBBMessageManager</em>, 
and sets a callback, that is, subscribes to an event, using the <code>AddCallback</code> 
global function whose arguments are:</p>
<table>
	<tr>
		<td><code>this</code></td>
		<td>The event subscriber, that is, the message receiver application window</td>
	</tr>
	<tr>
		<td><code>_pMessageManager</code></td>
		<td>The event publisher, which is here the message manager</td>
	</tr>
	<tr>
		<td><code>CAADlgBBMessageNotification</code></td>
		<td>The event to subscribe. It is the class name of the notification that 
		is sent by the message manager</td>
	</tr>
	<tr>
		<td><code>(CATSubscriberMethod)&amp;CAADlgBBReceiverWindow::ModifyEditor</code></td>
		<td>The method to call back when such a notification is received</td>
	</tr>
	<tr>
		<td><code>NULL</code></td>
		<td>Possible useful data that could be sent with the notification</td>
	</tr>
</table>
<p>The <code>BackboneInit</code> method is as follows.</p>
<pre class="code">HRESULT CAADlgBBReceiverWindow::<strong>BackboneInit</strong>()
{
  HRESULT rc = E_FAIL;
  _pICommunicator = ::<strong>CATGetBackboneConnection</strong>();
  if ( NULL == _pICommunicator )
      ... // Process failure
  else
  {
    CATApplicationClass ReceiverApplicationId = &quot;CAADlgBBReceiver&quot;;
    rc= _pICommunicator-&gt;<strong>Declare</strong>( ReceiverApplicationId );
    if ( FAILED(rc) )
      ... // Process failure
    else
    {
      CATMessageClass MessageClassName = &quot;CAADlgBBEditorMessage&quot;; 
      CAADlgBBEditorMessageHandler * pHandlerForMessage = NULL;
      pHandlerForMessage = new <strong>CAADlgBBEditorMessageHandler</strong>();

      if ( NULL != pHandlerForMessage )
      {
        rc = pHandlerForMessage-&gt;QueryInterface(<strong>IID_CATIMessageReceiver</strong>,
                                                (void**)&amp; _pIMessageReceiver);
        if ( SUCCEEDED(rc) )
        {
          rc = _pICommunicator-&gt;<strong>AssociateHandler</strong>(ReceiverApplicationId, 
                                                 MessageClassName,
                                                 _pIMessageReceiver);
          ... // Process failure
        }
        pHandlerForMessage-&gt;Release();
        pHandlerForMessage = NULL;
      }
    }
  }
  return rc;
}
...</pre>
<p>First, a connection to the backbone bus must be established. This is possible 
thanks to the global function <code>CATGetBackboneConnection</code> that returns 
a pointer to the <em>CATICommunicator</em> interface. Once the connection is established, 
the message receiver sets its application identifier and declares it to the backbone 
bus using the method <code>Declare</code>. Note that this identifier is used by 
the message sender when sending the message using the <code><a href="#Step2">SendRequest</a></code> 
method. Then the message receiver instantiates the message handler, asks the message 
handler for a pointer to <em>CATIMessageReceiver</em>, and declares to the backbone 
bus that it will receive the declared messages using the designated handler, thanks 
to the <code>AssociateHandler</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Receiving the Message</h3>
<p>The message is received thanks to the message handler that retrieves the message 
manager, and requests it to dispatch a notification that carries the message text. 
The message receiver has subscribed to this notification, and the callback method 
designated is then called. This method is the <code>ModifyEditor</code> method below.</p>
<pre class="code">...
void CAADlgBBReceiverWindow::ModifyEditor(CATCallbackEvent  ievent,
                                          void             *ipublisher,
                                          CATNotification  *iNotification,
                                          CATSubscriberData iData,
                                          CATCallback       iCallback)
{
   char * Text = NULL;
   CAADlgBBMessageNotification * iNotif = (CAADlgBBMessageNotification*) iNotification;

   iNotif-&gt;GetText(&amp;Text);
   _pEditor-&gt;SetLine(Text);

   delete [] Text;
}
...</pre>
<p><code>ModifyEditor</code> retrieves the message text from the notification, and 
assigns it to the editor thanks to the <code>SetLine</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Removing the Message Handler</h3>
<p>The message handler should be removed when no messages are to be received any 
longer. This is done here in the message receiver application window destructor.</p>
<pre class="code">...
CAADlgBBReceiverWindow::~CAADlgBBReceiverWindow()
{ 
  _pApplication = NULL;
  _pEditor = NULL;

  if ( NULL !=  _pICommunicator )
  {
    if ( NULL != _pIMessageReceiver )
    {
      CATMessageClass MessageClassName = &quot;CAADlgBBEditorMessage&quot;; 
      _pICommunicator-&gt;<strong>RemoveHandler</strong>(&quot;CAADlgBBReceiver&quot;,
                                     MessageClassName,
                                     _pIMessageReceiver);
      _pIMessageReceiver-&gt;Release();
      _pIMessageReceiver = NULL;
    }
    _pICommunicator-&gt;Release();
    _pICommunicator = NULL;
  }
  if ( NULL != _pMessageManager )
  {
    _pMessageManager-&gt;Destroy();      
    _pMessageManager = NULL;
  }
}
...</pre>
<p>The data members are released and nullified. The message handler is removed thanks 
to the <code>RemoveHandler</code> method of <em>CATICommunicator</em>. Its arguments 
are:</p>
<table>
	<tr>
		<td><code>CAADlgBBReceiver</code></td>
		<td>The message receiver identifier</td>
	</tr>
	<tr>
		<td><code>MessageClassName</code></td>
		<td>The message class name to which the message handler is dedicated</td>
	</tr>
	<tr>
		<td><code>_pIMessageReceiver</code></td>
		<td>The message handler</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create interactive applications that send and receive 
backbone messages. The receiving application identifier must be known by the message 
sender.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysUcMidBBSendRecSimpleMsg.htm">
		Sending a Backbone Simple Message to an Application</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysUcMidBBSendRecDataMsg.htm">
		Sending a Backbone Data Message to an Application</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysUcMidBBSimpleMsg.htm">
		Creating a Backbone Simple Message</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysUcMidBBDataMsg.htm">
		Creating a Backbone Data Message</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMInheritance.htm">
		Object Modeler Inheritances</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
