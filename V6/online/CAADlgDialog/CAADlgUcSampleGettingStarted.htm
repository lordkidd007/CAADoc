<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Getting Started with Dialog Boxes</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Getting Started with Dialog Boxes</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows a simple example of dialog box created using the Dialog 
		framework.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADlgHelloApplication Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADlgHelloApplication Do</a></li>
					<li><a href="#How">How to Launch CAADlgHelloApplication</a></li>
					<li><a href="#Where">Where to Find the CAADlgHelloApplication 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Dialog framework is intended to help application developers to simply design 
an implement their dialog windows and boxes. Its main characteristics are:</p>
<ul>
	<li>Programmer productivity: it provides high-level objects that allow for component 
		reusability</li>
	<li>Portability: the objects created can be implemented on Motif and Windows 
		platforms without any change or customization</li>
	<li>Standard compliance: it is built on top of the OSF/Motif and MFC layers</li>
	<li>Versatility: it can be used as a standalone framework, along with its prerequisites, 
		or in a CATIA Version 4 or Version 5 environment.</li>
</ul>
<p>Let's have a look at this framework through two examples. The first sample program 
shows how to build a very simple window and how to close it. The second sample introduces 
a larger number of dialog window components or objects and how to manage window 
layouts as well as triggering actions when clicking on Dialog framework objects 
[<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADlgHelloApplication Use Case</h2>
<p>CAADlgHelloApplication is a use case of the CAADialog.edu framework that illustrates 
Dialog framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADlgHelloApplication Do</h3>
<p>For this example, you will simply display a prompt box that prints &quot;Hello, 
CAA&quot;. To do this, derive your own application class, called <em>CAADlgHelloApplication</em>, 
from the class <em>CATInteractiveApplication</em> [<a href="#References">2</a>]. 
This application will:</p>
<ol>
	<li>Create a window to display &quot;Hello, CAA&quot; by deriving the class
		<em>CATDlgDocument</em>.</li>
	<li>Makes the window visible.</li>
</ol>
<p>In addition, the mechanism to close the application from the window is included. 
The window is as follows:</p>
<p><img alt="Hello Box" height="47" src="images/CAADlgHello.jpg" width="150"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADlgHelloApplication</h3>
<p>To launch CAADlgHelloApplication, you will need to set up the build time environment, 
then compile CAADlgHelloApplication along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADlgHelloApplication Code</h3>
<p>The CAADlgHelloApplication use case is made of a several classes located in the 
CAADlgHelloApplication.m module of the CAADialog.edu framework:</p>
<p><code>InstallRootFolder\CAADialog.edu\CAADlgHelloApplication</code><code>.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CAADlgHelloApplication.m module includes four files:</p>
<table>
	<tr>
		<td>CAADlgHelloApplication.h</td>
		<td>The interactive application header file</td>
	</tr>
	<tr>
		<td>CAADlgHelloApplication.cpp</td>
		<td>The interactive application source file</td>
	</tr>
	<tr>
		<td>CAADlgHelloWindow.h</td>
		<td>The application window header file</td>
	</tr>
	<tr>
		<td>CAADlgHelloWindow.cpp</td>
		<td>The application window source file</td>
	</tr>
</table>
<p>The resource file CAADlgHelloWindow.CATNls is located in the CNext\resources\msgcatalog 
directory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in CAADlgHelloApplication:</p>
<ol>
	<li><a href="#Step1">Creating the Interactive Application</a></li>
	<li><a href="#Step2">Creating the Application Window</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Interactive Application</h3>
<p>Let's look at CAADlgHelloApplication.h, the application header file:</p>
<pre class="code">#include &quot;CATInteractiveApplication.h&quot;

class CAADlgHelloApplication: public CATInteractiveApplication {

  public:

    CAADlgHelloApplication(const CATString &amp;iIdentifier);

    virtual ~CAADlgHelloApplication();
    void <strong>BeginApplication</strong>();
    int <strong>EndApplication</strong>();

};</pre>
<p>We find here:</p>
<ul>
	<li>The <em>CAADlgHelloApplication</em> class declaration which derives from 
		the <em>CATInteractiveApplication</em> class.</li>
	<li>its constructor and destructor</li>
	<li>The <code>BeginApplication</code> and <code>EndApplication</code> methods 
		overridden from the <em>CATInteractiveApplication</em> class.</li>
</ul>
<p>The CAADlgHelloApplication.cpp looks like that:</p>
<pre class="code">#include &quot;CAADlgHelloApplication.h&quot;
#include &quot;CAADlgHelloWindow.h&quot;

CAADlgHelloApplication::CAADlgHelloApplication(const CATString&amp; iIdentifier):
                        <strong>CATInteractiveApplication</strong>(NULL, iIdentifier) {}
                        
CAADlgHelloApplication::~CAADlgHelloApplication() {}

void CAADlgHelloApplication::<strong>BeginApplication</strong>() 
{
 
  CAADlgHelloWindow * pMainWindow = new <strong>CAADlgHelloWindow</strong>(this);

  pMainWindow-&gt;<strong>Build</strong>();

  pMainWindow-&gt;<strong>SetVisibility</strong>(CATDlgShow);
}

int CAADlgHelloApplication::<strong>EndApplication</strong>() 
{
  return(<strong>0</strong>);
}

CAADlgHelloApplication <strong>ApplicationInstance</strong>(&quot;Hello&quot;);</pre>
<p>The constructor is empty. It leaves the constructors of the inherited classes 
run, and it automatically runs the method <code>BeginApplication</code> which constructs 
the application window and makes it visible. The method <code>EndApplication</code> 
only returns 0 to state that all is Ok. The application run is just triggerred by 
the its instantiation in the last statement.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Application Window</h3>
<p>Let's look at CAADlgHelloWindow.h, the application window header file:</p>
<pre class="code">#include &quot;CATDlgDocument.h&quot;   

class CATInteractiveApplication;   

class CAADlgHelloWindow : public <strong>CATDlgDocument</strong>
{
 
  <strong>DeclareResource</strong>(CAADlgHelloWindow, CATDlgDocument)

  public:
 
    CAADlgHelloWindow(CATInteractiveApplication * iParentCommand);

    virtual ~CAADlgHelloWindow();

    void     <strong>Build</strong>();

  private:

    void <strong>Exit</strong> (CATCommand           * iSendingCommand, 
                CATNotification      * iSentNotification, 
                CATCommandClientData   iUsefulData);

  private:
    <strong>CATInteractiveApplication</strong> * _pHelloApplication;

    
};</pre>
<p>We find here:</p>
<ul>
	<li>The <em>CAADlgHelloWindow</em> class declaration which derives from the
		<em>CATDlgDocument</em> class.</li>
	<li>The <code>DeclareResource</code> macro which allows to retrieve the class 
		resources, such as character strings displayed in the window, from an external 
		resource file.</li>
	<li>The class constructor.</li>
	<li>the <code>Build</code> method used to create and value the window components.</li>
	<li>The <code>Exit</code> method used to close the application when the end 
		user closes the window.</li>
	<li>A reference to the application.</li>
</ul>
<p>The file CAADlgHelloWindow.cpp looks like that:</p>
<pre class="code">#include &quot;CAADlgHelloWindow.h&quot;

#include &quot;CATInteractiveApplication.h&quot; 
#include &quot;CATDlgInclude.h&quot;

CAADlgHelloWindow::CAADlgHelloWindow(CATInteractiveApplication * iParentCommand)                              
: <strong>CATDlgDocument</strong>(iParentCommand, &quot;CAADlgHelloWindowId&quot;),_pHelloApplication(iParentCommand)

{
}

CAADlgHelloWindow::~CAADlgHelloWindow()
{ 
  _pHelloApplication = NULL ;
}

void CAADlgHelloWindow::Build()
{
 
  CATDlgLabel * pLabel = new <strong>CATDlgLabel</strong>(this,&quot;MessageId&quot;);

  
  AddAnalyseNotificationCB(this,
                            GetWindCloseNotification(),
                           (CATCommandMethod)&amp;CAADlgHelloWindow::<strong>Exit</strong>, NULL);

}

void CAADlgHelloWindow::<strong>Exit</strong>(CATCommand         * iSendingCommand, 
                           CATNotification    * iSentNotification, 
                           CATCommandClientData iUsefulData)
{
   _pHelloApplication-&gt;<strong>Destroy</strong>();
   _pHelloApplication = NULL ;
}</pre>
<p>The constructor for <em>CAADlgHelloWindow</em> only values the <code>_pHelloApplication</code> 
data member. The <code>Build</code> method creates the message to display as a
<em>CATDlgLabel</em> instance, sets character string to display in the message, 
and registers the method <code>Exit</code> to be called when the window is closed. 
This method destroys the application. This also deletes the window. Always use a
<code>Build</code> method, and never instantiate dialog objects in the window constructor.
</p>
<p>The message file that contains the displayed messages is as follows.</p>
<pre class="code">Title           = &quot;Hello Application&quot;;
MessageId.Title = &quot;Hello, CAA&quot;;</pre>
<p>The first message is the window title and has the simple key <code>Title</code>. 
The second one is the displayed message and its key is built using the identifier 
passed as second argument of the label constructor, concatenated with a dot to the
<code>Title</code> keyword.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case enables you to have a first approach with the Dialog framework 
concepts. In the <code>Build</code> method of the application window you can test 
the Dialog objects [<a href="#References">4</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADlgUcBurger.htm">The Burger Order Dialog Box</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADlgTaInteractiveApplication.htm">How to Design Your Interactive 
		Application</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADlgTaOverview.htm">Dialog Overview</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2003]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
