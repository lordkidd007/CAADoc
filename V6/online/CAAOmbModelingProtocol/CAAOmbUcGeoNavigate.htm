<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>The Object Navigator</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>The Object Navigator</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article accompanies the CAAOmbGeoNavigate use case. This use case 
		explains how to create an object tree and navigate through it by expanding 
		its nodes. It also explains how to customize the tree nodes by changing 
		colors, by adding icons and by modifying short help. The way to refresh 
		the object tree is also started on.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Concepts">Some Important Concepts about the Object Navigator</a></li>
			<li><a href="#UseCase">The CAAOmbGeoNavigate Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAOmbGeoNavigate Do</a></li>
					<li><a href="#How">How to Launch CAAOmbGeoNavigate</a></li>
					<li><a href="#Where">Where to Find the CAAOmbGeoNavigate Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to illustrate the Object Navigator. Its main intent 
is to show how to create and navigate through an object tree. Basically, it shows 
how to:</p>
<ul>
	<li>Implement the <em>CATINavigateObject</em> interface for the <code>GetIdentificators</code> 
		and <code>GetChildren</code> methods in order to provide node texts, and 
		navigate through the object tree.</li>
	<li>Implement the <em>CATINavigModify</em> interface for the <code>UpdateElem</code> 
		and <code>ModifyShortHelp</code> methods in order to allow the customization 
		of tree nodes.</li>
	<li>Use the <em>CATIRedrawEvent</em> interface to update the object tree.</li>
</ul>
<p>Before getting to the use case itself, it is important to get an understanding 
of what the Object Navigator is. This is the goal of the next section. You can go 
directly to <a href="#UseCase">The CAAOmbGeoNavigate Use Case</a> itself if you are already familiar 
with all of these concepts.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Concepts"></a>Some Important Concepts about the Object Navigator</h2>
<p>A tree is a planar graph that contains no closed path. Because the component 
of a PLM Component are organized as a tree, a tree is usually used to show the relationships 
between the components in a window. This is called the &quot;object tree&quot;. 
Each component is a node of the tree, and each node can be expanded to display its 
sub-nodes, or collapsed to hide them. By clicking on a node, you display the children 
of the component represented by the node, and so on, thus discovering all of the 
components that make it up as well as the relationships between them. The set of 
services dedicated to the management of a tree is called the Object Navigator. By 
using the Object Navigator, you can display the relationships between any kind of 
objects provided that a parent-child link can be defined between these objects, 
such as the components in a DS Application Product or PLM representation Reference</p>
<p>From a programmer standpoint, any object intended to be displayed within an object 
tree and managed by the object navigator must support the <em>CATINavigateObject</em> 
interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOmbGeoNavigate Use Case</h2>
<p>CAAOmbGeoNavigate is a use case of the CAAObjectModelerBaseFrame.edu 
framework that illustrates ObjectModelerNavigator framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAOmbGeoNavigate Do</h3>
<p>This use case uses an existing pre-defined model type called &quot;CAAGeometry&quot; 
[<a href="#References">1</a>]. This model contains elements such as:</p>
<ul>
	<li>One root element.</li>
	<li>Points.</li>
	<li>Lines.</li>
	<li>Ellipses.</li>
</ul>
<p>All these elements implements <em>CATINavigateObject</em> to be displayed in 
the object tree associated with the CAAGeometry model window. This window is a
<em>CATFrmGraphAnd3DWindow</em> class which natively contains an object tree.</p>
<p>The default representation for a node is:</p>
<ul>
	<li>A white text with a blue background, and a frame.</li>
	<li>No icon.</li>
	<li>The short help text is the text of the node.</li>
</ul>
<p>By implementing <em>CATINavigModify</em>:</p>
<ul>
	<li>On the root element: the background text is green, the text color automatically 
		becomes black to have enough contrast, and an icon in the form of a ladybug 
		is added.</li>
	<li>On the point element: the short help displays the point coordinates.</li>
</ul>
<p>Here is a picture to show node representations.</p>
<p>
<img alt="" src="images/CAAOmbGeoNavig1.jpg" width="281" height="222"/></p>
<p>The two next pictures show the short help for a point (left) and a line (right).</p>
<table>
	<tr>
		<td>
		&nbsp;</td>
		<td>
		<img alt="" src="images/CAAOmbGeoNavig2.jpg" width="291" height="249"/><img alt="" src="images/CAAOmbGeoNavig3.jpg" width="295" height="249"/>&nbsp;</td>
	</tr>
</table>
<p>You can see on the right picture that the default text of the short help is the 
same as the text of the node.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAOmbGeoNavigate</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the &quot;The CAAGeometry Sample&quot; [<a href="#References">1</a>] use case for 
a detailed description of how this use case should be launched. Next, you must launch 
a CATIA interactive session and go through the following scenario:</p>
<ul>
	<li>Launch <kbd>CAA: Create Geom</kbd> app from the <kbd>3D</kbd> quadrant of the compass. 
		</li>
	<li>Create point elements.</li>
	<li>Create line elements.</li>
	<li>Double-click on the <code>CAASysGeomRootObject</code> node or on its 
		icon to collapse the tree.</li>
	<li>Double-click again on the <code>CAASysGeomRootObject</code> node or on its 
		icon to re-expand the tree.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAOmbGeoNavigate Code</h3>
<p>CAAOmbGeoNavigate code is located in the CAAOmbGeoNavigate.m use case module 
of the CAAObjectModelerBaseFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBaseFrame.edu\CAAOmbGeoNavigate.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed. This module contains the implementations of the
<em>CATINavigateObject</em> and <em>CATINavigModify</em> interfaces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAAOmbGeoNavigate:</p>
<ol>
	<li><a href="#Step1">Implementing CATINavigateObject on Root Object</a></li>
	<li><a href="#Step2">Implementing CATINavigateObject on Child Objects</a></li>
	<li><a href="#Step3">Implementing CATINavigModify to Modify Node Graphic Representation</a></li>
	<li><a href="#Step4">Implementing CATINavigModify to Modify the Default Short 
		Help Text</a></li>
	<li><a href="#Step5">Using CATIRedrawEvent to Update the Object Tree</a></li>
</ol>
<p>We will now comment these sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implementing CATINavigateObject on Root Object</h3>
<ol>
	<li>Class definition
		<p>The <em>CAAOmbNavigateObjectRoot</em> is the class which implements the
		<em>CATINavigateObject</em> interface. This interface being without adaptor, 
		the <em>CAAOmbNavigateObjectRoot</em> classderives from <em>CATBaseUnknown</em>.</p>
		<pre class="code">#include &quot;CATBaseUnknown.h&quot;             // Needed to derive from
class CATListValCATUnicodeString;       // Needed by GetIdentificators
class CATListValCATBaseUnknown_var;     // Needed by GetChildren

class CAAOmbNavigateObjectRoot : public CATBaseUnknown
{
    CATDeclareClass;

  public :
    CAAOmbNavigateObjectRoot();
    virtual ~CAAOmbNavigateObjectRoot();
	
    virtual CATListValCATUnicodeString       * <strong>GetIdentificators</strong>();
    virtual CATListValCATBaseUnknown_var     * <strong>GetChildren</strong>();
 
 ...
};</pre>
		<p><em>CATINavigateObject</em> contains two basic methods that have to be 
		coded:</p>
		<ul>
			<li><a href="#Root1"><code>GetIdentificators</code></a> defines the 
				text associated with the node.</li>
			<li><a href="#Root2"><code>GetChildren</code></a> defines the children 
				of the node</li>
		</ul>
	</li>
	<li>Defines <em>CAAOmbNavigateObjectRoot</em> as an implementation of <em>CATINavigateObject</em>:
		<p>The <em>CAAOmbNavigateObjectRoot</em> is the class which implements the
		<em>CATINavigateObject</em> for the <code>CAASysGeomRootObj</code> object.</p>
		<pre class="code">#include &quot;TIE_CATINavigateObject.h&quot;
<strong>TIE_CATINavigateObject</strong>(CAAOmbNavigateObjectRoot);


<strong>CATImplementClass</strong>(CAAOmbNavigateObjectRoot,
		DataExtension,
		CATBaseUnknown,
		<strong>CAASysGeomRootObj</strong>);</pre>
	</li>
	<li><a name="Root1"><code>CATINavigateObject::GetIdentificators</code></a>.
		<p>The <code>GetIdentificators</code> method defines the text associated 
		with the node. This text can be composed of several lines, each line being 
		appended to the returned list.</p>
		<pre class="code">CATListValCATUnicodeString * CAAOmbNavigateObjectRoot::GetIdentificators()
{
  CATListOfCATUnicodeString *pIdent = <strong>new</strong> CATListOfCATUnicodeString;

  CATUnicodeString Name = &quot;Root&quot; ;

  <strong>CAAISysName</strong> * pISysName = NULL ;
  HRESULT rc = QueryInterface(IID_CAAISysName, (void**) &amp; pISysName);
  if ( SUCCEEDED(rc) )
  {
     pISysName-&gt;<strong>GetName</strong>(Name);
     pISysName-&gt;Release();
     pISysName = NULL ;
  }
  pIdent -&gt; <strong>Append</strong>(Name);
  <strong>return</strong> pIdent;
}</pre>
		<p>Each component of the CAAGeometry component implements the <em>CAAISysName</em> 
		interface. This interface keeps the name of the instance. The name, retrieved 
		thanks to the <code>GetName</code> method, is added to <code>pIdent</code>, 
		the returned list. The text is only one line.</p>
	</li>
	<li><a name="Root2"><code>CATINavigateObject::GetChildren.</code></a>.
		<p>This method returns a list of the children of the current node using 
		several methods from specific CAA interfaces:</p>
		<ul>
			<li><code>GetContainer</code> from <em>CAAISysAccess</em>.</li>
			<li><code>GetNumberOfObjects</code> and <code>GetObject</code> from
				<em>CAAISysCollection</em>.</li>
		</ul>
		<pre class="code">CATListValCATBaseUnknown_var * <strong>CAAOmbNavigateObjectRoot::GetChildren</strong>()
{
   CATListValCATBaseUnknown_var *pList = NULL ;

   CAAISysAccess *piSysAccess = NULL ;
   HRESULT rc = <strong>QueryInterface</strong>(IID_CAAISysAccess,
                               (void**)&amp;piSysAccess);

   if ( SUCCEEDED(rc) )
   {
      CATBaseUnknown *pContainer = NULL ;
      piSysAccess -&gt; <strong>GetContainer</strong>(&amp;pContainer);
      if ( NULL != pContainer) 
      {
         CAAISysCollection *piSysCollection = NULL ;
         rc = pContainer -&gt; <strong>QueryInterface</strong>(IID_CAAISysCollection,
                                           (void**)&amp;piSysCollection);
         if ( SUCCEEDED(rc) )
         {
            int count(0);
            piSysCollection -&gt; <strong>GetNumberOfObjects</strong>(&amp;count);
            if ( count &gt; 1 )
            {
               pList = <strong>new</strong> CATListValCATBaseUnknown_var();

               for (int i=2; i&lt;=count; i++)
               {
                  CATBaseUnknown * pObject = NULL ;
                  piSysCollection -&gt; <strong>GetObject</strong>(i, &amp;pObject);
         ...
   }
   <strong>return</strong> pList;
}</pre>
		<p><code>GetChildren</code> returns a list of pointers to the children of 
		the root node, which are all of the objects of the model except the root. 
		To do this, it gets a handle to the <code>CAAISysAccess</code> interface 
		using the <code>this</code> pointer and uses this handle to get the container 
		object which implements the <code>CAAISysCollection</code> interface from 
		which we actually get all of the objects of the model which are appended 
		to the list returned.</p>
	</li>
	<li>Dictionary declaration as for any interface implementation, a dictionary 
		entry is necessary in order to map the implementation name and shared library 
		reference to the name of the interface:
		<pre class="code">CAASysGeomRootObj   CATINavigateObject    libCAAOmbGeoNavigate</pre>
		<p>You can find this entry in the CAAObjectModelerBaseFrame.edu.dico file.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing CATINavigateObject on Child Objects</h3>
<ol>
	<li>Class header
		<p><em>CAAOmbNavigateObjectChildren</em> is the class which implements the
		<em>CATINavigateObject</em> interface. This interface being without adaptor, 
		the <em>CAAOmbNavigateObjectChildren</em> class derives from <em>CATBaseUnknown</em>.</p>
	</li>
	<li>Define <em>CAAOmbNavigateObjectChildren</em> as an implementation of <em>
		CATINavigateObject</em> for several components.
		<p><em>CAAOmbNavigateObjectRoot</em> is the class which implements the
		<em>CATINavigateObject</em> for the <em>CAASysPoint</em>, <em>CAASysLine</em>,
		<em>CAASysEllipse</em>, etc. objects.</p>
		<pre class="code"><strong>CATBeginImplementClass</strong>(CAAOmbNavigateObjectChildren, DataExtension, CATBaseUnknown, 
                                          <strong>CAASysPoint</strong>);
CATAddClassExtension(CAASysLine);
CATAddClassExtension(CAASysEllipse);
CATAddClassExtension(CAASysPlane);
CATAddClassExtension(CAASysCircle);
CATAddClassExtension(CAASysPolyline);
CATAddClassExtension(CAASysCuboid);
CATAddClassExtension(CAASysCylinder);
<strong>CATEndImplementClass</strong>(CAAOmbNavigateObjectChildren);</pre>
	</li>
	<li><code>CATINavigateObject::GetIdentificators.</code>
		<p>The <code>GetIdentificators</code> method defines the text associated 
		with the node. This text can be composed of several lines, each line being 
		appended to the returned list.</p>
		<pre class="code">CATListValCATUnicodeString * CAAOmbNavigateObjectChildren::GetIdentificators()
{
  CATListOfCATUnicodeString *pIdent = <strong>new</strong> CATListOfCATUnicodeString;

  CATUnicodeString Name = &quot;Children&quot; ;

  <strong>CAAISysName</strong> * pISysName = NULL ;
  HRESULT rc = QueryInterface(IID_CAAISysName, (void**) &amp; pISysName);
  if ( SUCCEEDED(rc) )
  {
     pISysName-&gt;<strong>GetName</strong>(Name);
     pISysName-&gt;Release();
     pISysName = NULL ;
  }
  pIdent -&gt; <strong>Append</strong>(Name);
  <strong>return</strong> pIdent;
}</pre>
		<p>Each component of the CAAGeometry component implements the <em>CAAISysName</em> 
		interface. This interface keeps the name of the instance. The name, retrieved 
		thanks to the <code>GetName</code> method, is added to <code>pIdent</code>, 
		the returned list. The text is only one line.</p>
	</li>
	<li><code>CATINavigateObject::GetChildren</code>.
		<p>This method returns an empty list since the root's children have no children.</p>
		<pre class="code">CATListValCATBaseUnknown_var * CAAOmbNavigateObjectChildren::GetChildren()
{
   <strong>return</strong> NULL;
}</pre>
	</li>
	<li>Dictionary declaration as for any interface implementation, a dictionary 
		entry is necessary in order to map the implementation name and shared library 
		reference to the name of the interface. There is a line for each component:
		<pre class="code">CAASysLine   CATINavigateObject    libCAAOmbGeoNavigate
CAASysPoint   CATINavigateObject    libCAAOmbGeoNavigate
CAASysPlane   CATINavigateObject    libCAAOmbGeoNavigate
CAASysCircle  CATINavigateObject    libCAAOmbGeoNavigate
CAASysEllipse   CATINavigateObject    libCAAOmbGeoNavigate
CAASysCuboid   CATINavigateObject    libCAAOmbGeoNavigate
CAASysCylinder  CATINavigateObject    libCAAOmbGeoNavigate
CAASysPolyline  CATINavigateObject    libCAAOmbGeoNavigate</pre>
		<p>You can find this entry in the CAAObjectModelerBaseFrame.edu.dico file.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing CATINavigModify to Modify Node Graphic Representation</h3>
<ol>
	<li>Class header
		<p><em>CAAOmbNavigModifyRoot</em> is the class which implements the <em>
		CATINavigModify</em> interface. This class derives from the <em>CATNodeExtension</em> 
		class.</p>
		<pre class="code">#include &quot;CATNodeExtension.h&quot;             // Needed to derive from
class CATNavigInstance;

class CAAOmbNavigModifyRoot : public <strong>CATNodeExtension</strong>
{
  CATDeclareClass;

  public :

    CAAOmbNavigModifyRoot();
    virtual ~CAAOmbNavigModifyRoot();
	
    void <strong>UpdateElem</strong>(CATNavigInstance * iInstance);
 
 ...
};</pre>
		<p>The <em>CAAOmbNavigModifyRoot</em> class re-implements only the <code>
		UpdateElem</code> method.</p>
	</li>
	<li>Define <em>CAAOmbNavigModifyRoot</em> as an implementation of <em>CATINavigModify</em>.
		<p>The <em>CATINavigModify</em> interface is not implemented on the object 
		it-self, but on a late type based on the object's name. The last argument 
		of the <code>CATImplementClass</code> macro must have the &quot;<strong>_node</strong>&quot; 
		extension as part of its name. The first part being the object's name.</p>
		<pre class="code">// Creates the TIE Object
#include &quot;TIE_CATINavigModify.h&quot;
<strong>TIE_CATINavigModify</strong>(CAAOmbNavigModifyRoot);

// Declares that the class is a data extension of CAASysGeomRootObj_node. 
//
<strong>CATImplementClass</strong>(CAAOmbNavigModifyRoot,
	         DataExtension,
		CATBaseUnknown,
		<strong>CAASysGeomRootObj_node</strong>);</pre>
		<p><code>CAASysGeomRootObj</code> is the name of the root component.</p>
	</li>
	<li><code>CATINavigModify::UpdateElem</code>
		<p>The <code>UpdateElem</code> method enables you to modify the default 
		visual aspect of a node. This implementation changes the background color 
		of the node and attaches an icon to it.</p>
		<pre class="code">void CAAOmbNavigModifyRoot::UpdateElem(CATNavigInstance * iInstance)
{
   cout &lt;&lt; &quot;CAAOmbNavigModifyRoot::UpdateElem&quot; &lt;&lt; endl;

   CATIGraphNode *piGraphNode = NULL ;
   HRESULT rc = <strong>QueryInterface</strong>(IID_CATIGraphNode,
                               (void**)&amp;piGraphNode);

   if ( SUCCEEDED(rc) ) 
   {
      // Set the node to green instead of blue (default)
      piGraphNode -&gt; <strong>SetColor</strong>(50);

      // Attach an icon to the node
      CATUnicodeString iconName(&quot;CAAOmbIcon2&quot;);
      piGraphNode -&gt; <strong>SetPixelImage</strong>(iconName);

      piGraphNode -&gt; <strong>Release</strong>();
      piGraphNode= NULL ;
   }
}</pre>
		<p>The <em>CATIGraphNode</em> interface being automatically implemented 
		by a node, a simple <code>QueryInterface</code> on itself enables you to 
		modify node characteristics. The <code>SetColor</code> takes as input an 
		integer value representing the color of the node. <code>SetPixelImage</code> 
		takes as input a character string representing the name of the icon. This 
		name is searched for in the CNext/resources/graphic directory. It should 
		be a bitmap file having a .bmp suffix.</p>
		<p>Note: <code>iInstance</code>, the input data is not used in this implementation 
		but can be useful for your implementation. Refer to the section
		<a href="#Step4">Implementing CATINavigModify to Modify the Default Short 
		Help Text</a> section for more details about its usage.</p>
	</li>
	<li>Dictionary definition
		<p>Here is the dictionary entry necessary for the implementation of the
		<em>CATINavigModify</em> interface:</p>
		<pre class="code">CAASysGeomRootObj_node    CATINavigModify    libCAAOmbGeoNavigate</pre>
		<p>You can find this entry in the CAAObjectModelerBaseFrame.edu.dico file.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Implementing CATINavigModify to Modify the Default Short 
Help Text</h3>
<ol>
	<li>Class header
		<p><em>CAAOmbNavigModifyPoint</em> is the class which implements the <em>
		CATINavigModify</em> interface. This class derives from the <em>CATNodeExtension</em> 
		class.</p>
		<pre class="code">#include &quot;CATNodeExtension.h&quot;             // Needed to derive from
class CATNavigInstance;

class CAAOmbNavigModifyPoint : public CATNodeExtension
{
  CATDeclareClass;

  public :

    CAAOmbNavigModifyPoint();
    virtual ~CAAOmbNavigModifyPoint();

    virtual HRESULT <strong>ModifyShortHelp</strong>(CATUnicodeString &amp; ioText) ;
...
};</pre>
		<p><em>CAAOmbNavigModifyPoint</em> re-implements only the <code>ModifyShortHelp</code> 
		method.</p>
	</li>
	<li>Define <em>CAAOmbNavigModifyPoint</em> as an implementation of the <em>CATINavigModify</em> 
		interface<p>Define <em>CAAOmbNavigModifyPoint</em> as an implementation 
		of the <em>CATINavigModify</em> interface. Note that the last argument of 
		the <code>CATImplementClass</code> macro must have the &quot;<strong>_node</strong>&quot; 
		extension as part of its name.</p>
		<pre class="code">// Creates the TIE Object
#include &quot;TIE_CATINavigModify.h&quot;
<strong>TIE_CATINavigModify</strong>(CAAOmbNavigModifyPoint);


<strong>CATImplementClass</strong>(CAAOmbNavigModifyRoot,
	         DataExtension,
		CATBaseUnknown,
		<strong>CAASysPoint_node</strong>);</pre>
		<p><code>CAASysPoint</code> is the name of the point component.</p>
	</li>
	<li><code>CATINavigModify::ModifyShortHelp</code>
		<p>The <code>ModifyShortHelp</code> method enables you to modify the default 
		behavior for the short help of a node. In this example, the text contains 
		the point coordinates.</p>
		<pre class="code">HRESULT  CAAOmbNavigModifyPoint::ModifyShortHelp(CATUnicodeString&amp; ioText)
{
    CATBaseUnknown_var Ref ;

    <strong>CATINavigElement</strong> *pINavigElement = NULL ;
    HRESULT rc = QueryInterface(IID_CATINavigElement, (void **) &amp; pINavigElement);
    if ( SUCCEEDED(rc) )
    {
       // Do not release this pointer
       CATNavigInstance * pInst = pINavigElement-&gt;<strong>GetAssociatedInstance</strong>();
       if ( NULL != pInst)
       {
          Ref = pInst-&gt;<strong>GetReference</strong>();
       }else 
          rc = E_FAIL ;

       pINavigElement-&gt;Release();
       pINavigElement = NULL ;
    }
 ...
</pre>
		<p>The first part of the method consists in to retrieve a pointer on the 
		point associated with the node. The <em>CATINavigModify</em> interface is 
		implemented on the <code>CAASysPoint_node</code> late type. The <code>GetAssociatedInstance</code> 
		method retrieves the <em>CATNavigInstance</em> class instance pointer which 
		has kept a pointer to the <code>CAASysPoint</code> element. The <code>GetReference</code> 
		method retrieves this <code>CAASysPoint</code> pointer.</p>
		<p>Then once, you have a pointer on the <code>CAASysPoint</code>, you can 
		retrieve specific information.</p>
		<pre class="code">    ...
    if (NULL_var != Ref)
    {
       <strong>CAAISysPoint</strong> *pISysPoint = NULL ;
       rc = Ref-&gt;QueryInterface(IID_CAAISysPoint, (void **) &amp; pISysPoint);
       if ( SUCCEEDED(rc) )
       {
          float x,y,z ;
          pISysPoint-&gt;<strong>GetCoord</strong>(x,y,z);
       
          char PointPosistionBuffer[200];
          sprintf(PointPosistionBuffer,&quot;X=%f Y=%f Z=%f&quot;,x,y,z);

          CATUnicodeString TextBuff (PointPosistionBuffer);
          <strong>ioText</strong> = TextBuff ;

          pISysPoint-&gt;Release();
          pISysPoint = NULL ;
       }
    }
    return<strong> S_OK</strong> ;
}</pre>
		<p><code>ioText</code> is the inout parameter of the method. As input its 
		value is the text of the node. The current implementation modifies the input 
		text to create a new string from the three point coordinates.</p>
		<p>The returned value is <code>S_OK</code> because even there is a problem 
		to retrieve the point coordinates, a short help will be displayed with the 
		default text. If the returned value is <code>E_FAIL</code>, no short help 
		is displayed.</p>
	</li>
	<li>Dictionary definition
		<p>Here is the dictionary entry necessary for the implementation of the
		<em>CATINavigModify</em> interface:</p>
		<pre class="code">CAASysPoint_node    CATINavigModify    libCAAOmbGeoNavigate</pre>
		<p>You can find this entry in the CAAObjectModelerBaseFrame.edu.dico file.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Using CATIRedrawEvent to Update the Object Tree</h3>
<p>The <em>CATIRedrawEvent</em> interface enables you to update the object tree. 
Here is an extract of the Point command [<a href="#References">2</a>].</p>
<pre class="code">      CATIRedrawEvent * piRedrawEvent = NULL;                
      rc =_pUIActiveObject-&gt;QueryInterface(IID_CATIRedrawEvent, (void**)&amp;piRedrawEvent);
      if (SUCCEEDED(rc))
      {
        piRedrawEvent-&gt;<strong>Redraw</strong>();
        
        piRedrawEvent-&gt;Release();
        piRedrawEvent= NULL ;
      }
</pre>
<p><code>_pUIActiveObject</code> is a pointer on the UI-active object of the CAAGeometry 
component [<a href="#References">1</a>]. This object is also the root object, in 
other words the <code>CAASysGeomRootObj</code> component. The <code>QueryInterface</code> 
is called on this component because it is the father node of the point element node.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to create and customize an object tree and 
navigate through it by expanding its nodes. It has also explained a number of concepts 
related to the Object Navigator.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm'); return false;">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="../CAADegDialogEngine/CAADegUcSampleDialogWithPanelState.htm">
		Associating a Dialog Box with a State</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Aug 2003]</td>
		<td>Short Help introduction</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jun 2014]</td>
		<td>3DEXPERIENCE migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
