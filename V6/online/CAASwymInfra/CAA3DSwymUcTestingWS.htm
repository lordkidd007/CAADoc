<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Testing 3DSwym Web Services</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Testing 3DSwym Web Services</h1>
		<!-- <p><em>[Use a verb at the progressive form as the first word: Using, Creating, 
		Accessing, etc. Also copy the title in the &lt;title&gt; tag, or using the Properties 
		command of the File menu.]</em></p> -->
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes an example of how to use an input scenario file to consume any 3DSwym web services from a <em>Java Client Application</em>. 
		It shows how to call 3DSwym APIs and display the JSON result.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASwYmCallAPIs Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASwYmCallAPIs Do</a></li>
				<li><a href="#How">How to Launch CAASwYmCallAPIs</a></li>
				<li><a href="#Where">Where to Find the CAASwYmCallAPIs Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		<!-- <p><em>[Keep this table of contents as is, without adding or removing anything. 
		Just replace CAASwYmBasicCo with you use case name.]</em> </p> -->
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to call 3DSwym API services through a scenario file.
</p>
<p>CAASwYmBasicCo use case is a <em>Java Client Application</em>.
It means it uses a set of classes to handle HTTPS requests and responses.
Those classes are explained in this article [<a href="#References">1</a>].
</p>
<!-- <p><em>[Describe here what the reader can learn from the use case, not what it does.]</em></p> -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASwYmCallAPIs Use Case</h2>
<p>CAASwYmCallAPIs is a use case of the CAASwymInfraWeb.edu framework that illustrates 3DSwym services<!-- CATZZZ framework --> capabilities.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASwYmCallAPIs Do</h3>
<p><!-- CAASwYmCallAPIs begins by setting up an environment to load URLs. -->
This use case connects to 3DSwym web services provider.
It reads a scenario file to perform API calls.
And finally it logs out from 3DSwym [<a href="#References">2</a>].
</p>
<p>A scenario file looks like:
</p>
<pre class="code">
#scenario.txt
01=GET.api/community/listmycommunities/limit/3
02=GET.api/user/getpicture/login/&lt;username&gt;/format/umini/
</pre>
<p>Scenario building is explained in <a href="#Step0">Step 0</a>
</p>
<p>Traces of API calls are stored into separated trace files.
</p>
<p>The first call (<code>01=GET.api/community/listmycommunities/limit/3</code>) produces the following trace file:
</p>
<pre class="code">
##<b>CLIENT REQUEST</b>
##------------------------------------------------------------
<b>[GET] https://&lt;3DSwym Server&gt;/api/community/listmycommunities/limit/3</b>
  [HEADRER] X-SWYM (CSRF token): &lt;token&gt;

##<b>SERVER RESPONSE</b> [200] OK
##--------------------

#<b>RESPONSE HEADER</b> : 
#--------------------
HTTP/1.1 200 OK
Date: Fri, 04 Jul 2014 07:30:01 GMT
Server: Apache/2.2.11 (Unix) mod_ssl/2.2.11 OpenSSL/0.9.8i PHP/5.3.10
X-Powered-By: PHP/5.3.10
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Pragma: no-cache
Cache-Control: no-cache
X-H: 1
Vary: User-Agent,Accept-Encoding
Content-Length: 3019
Keep-Alive: timeout=5, max=253
Connection: Keep-Alive
Content-Type: text/html;charset=UTF-8

#<b>RESPONSE BODY</b>
#--------------------
{
  "monitoring": {"last_exec_time": 0.0016679763793945},
  "nb_result": "153",
  "request_id": null,
  "result": [
    {
	  ...
      "id": "1537",
      "title": "EGD-Test-A-iIojo7rmMDhE3+++Hv+20",
	  ...
    },
    {
      ...
      "id": "1563",
      "title": "dbn3_from_far_awayoIrCk05mMDhE3+++Ai+BB",
      ...
    },
    {
      ...
      "id": "522",
      "title": "test-9490 community.go green Save Earth",
      ...
    }
  ]
}
</pre>
<p>The second call (<code>02=GET.api/user/getpicture/login/&lt;username&gt;/format/umini/</code>) produces the following trace file:
</p>
<pre class="code">
##<b>CLIENT REQUEST</b>
##------------------------------------------------------------
<b>[GET] https://&lt;3DSwym Server&gt;/api/user/getpicture/login/&lt;username&gt;/format/umini/</b>
  [HEADRER] X-SWYM (CSRF token): &lt;token&gt;

##<b>SERVER RESPONSE</b> [200] OK
##--------------------

#<b>RESPONSE HEADER</b> : 
#--------------------
HTTP/1.1 200 OK
Date: Tue, 21 Oct 2014 10:44:15 GMT
Server: Apache
X-Powered-By: PHP/5.3.15
Content-Disposition: inline; filename="uminiPicture-new.png"
Content-Length: 499
Content-Transfer-Encoding: binary
Cache-Control: must-revalidate
ETag: "a39a6f97ecb5c64b5c500f42be0bb4eb"
Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT
Vary: User-Agent
Age: 106
Keep-Alive: timeout=5, max=97
Connection: Keep-Alive
Content-Type: image/png

#<b>RESPONSE BODY</b>
#--------------------
An image saved to &lt;tracefile&gt;
</pre>
<p>A trace file is composed of:</p>
<ul>
	<li>the request part with:
		<ul>
			<li>the request URL and method</li>
			<li>the request set header</li>
			<li>the post body if any</li>
		</ul>
	</li>
	<li>the response part with:
		<ul>
			<li>the response header</li>
			<li>the response body</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASwYmCallAPIs</h3>
<p>To launch CAASwYmCallAPIs, you will need to set up the build time environment, then 
compile CAASwYmCallAPIs along with its prerequisites, set up the run time environment, 
and then execute the use case.
</p>
<p>Launching the use case is done via <code>java</code> standard command. 
In order for java to find the <em>.class</em> files generated on compilation, you may need to arrange the <code>$CLASSPATH</code> variable. 
Module <em>.class</em> file paths to append are :
</p>
<pre class="code">
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmJSON.mj\Objects\win_b64\tmp
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmCommon.mj\Objects\win_b64\tmp
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\<b>CAASwYmAPIs.mj</b>\Objects\win_b64\tmp
</pre>
<p>Once <code>$CLASSPATH</code> has been set, the use case can be launched by executing the command:
</p>
<p><code>java com.dassault_systemes.caasamples.swym3ds.<b>CAASwYmCallAPIs</b> Server Username Password Output Scenario
</code></p>
<p>Where:
</p>
<table class="fill">
	<tr> 
		<th>&nbsp;Server&nbsp;</th>
		<td>&nbsp;The 3DSwym server authority [<a href="#References">5</a>]. ( &lt;protocol&gt;://&lt;server authority&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; )</td>
	</tr> 
	<tr> 
		<th>&nbsp;Username&nbsp;</th> 
		<td>&nbsp;The 3DSwym user identifier [<a href="#References">5</a>] of the connecting user.&nbsp;</td>
	</tr>
	<tr> 
		<th>&nbsp;Password&nbsp;</th> 
		<td>&nbsp;The password according the username given.&nbsp;</td>
	</tr> 
	<tr> 
		<th>&nbsp;Output&nbsp;</th> 
		<td>&nbsp;Directory for traces of HTTPS requests and responses (e.g. "C:\document" do not append "\" at the end).&nbsp;</td>
	</tr>
	<tr> 
		<th>&nbsp;Scenario&nbsp;</th> 
		<td>&nbsp;Input scenario text file that contains the web services to call. (*)  </td>
	</tr> 
</table>
<p>(*)You can use the scenario file included in the CAA fw (after a modification of its contents according the data on your server):</p>
<pre class="code">
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\InputData\scenario.txt
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASwYmCallAPIs Code</h3>
<p>The CAASwYmCallAPIs use case is made of several classes located in three modules of the CAASwymInfraWeb.edu framework:</p>
<ul>
	<li>CAASwYmCallAPIs.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmCallAPIs.mj\</code><br/> Use case specific code:
		<ul>
			<li><code>CAASwYmCallAPIs</code> class contains the main method of the use case</li>
		</ul>
	</li>
	
	<li>CAASwYmCommon.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmCommon.mj\</code><br/> Common tools to all use cases (see <em>Java Client Application</em> [<a href="#References">1</a>] for explanation):
		<ul>
			<li><code>CAAURLLoader</code> class to load URL</li>
			<li><code>CAASwYmClient</code> class to manage the unique CAAURLLoader instance</li>
			<li><code>CAASwYmLoginClient</code> class with login and logout methods</li>
		</ul>
	</li>
	<li>CAASwYmJSON.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmJSON.mj\</code><br/> Set of class to manage JSON format:
		<ul>
			<li><code>JSONObject</code> class is the most commonly used</li>
			<li>...</li>
		</ul>
	</li>
</ul>

<p>Where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>

<p>All code show below is extract from the main method of CAASwYmCallAPIs class in CAASwYmCallAPIs.mj module.</p>
<!-- <p><em>[Give additional information, if necessary, to locate all the header and 
source files you supply.]</em></p> -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li style="counter-reset: item -1;" ><a href="#Step0"><em>Step 0: Building a scenario file</em></a></li>
	<li><a href="#Step1">Step 1: Load scenario file</a></li>
	<li><a href="#Step2">Step 2: Log in to 3DSwym</a></li>
	<li><a href="#Step3">Step 3: Consume web services</a>
		<ol>
			<li><a href="#Step31">Catch the web service URL</a></li>
			<li><a href="#Step32">Load the URL</a></li>
			<li><a href="#Step33">Save the result to a file</a></li>
		</ol>
	</li>
	<li><a href="#Step4">Step 4: Log out from 3DswYm</a></li>
</ul>

<!--<p><em>[Cut out the use case into steps to show understandable pieces of code that 
refer to logical programming tasks. Use the same steps as comments in the use case 
code. Since each step represents an action, use a verb at the progressive form to 
start step names.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step0"></a>Building a scenario file</h3>
<p>This use case uses a scenario to consume web services.
A scenario is a text file (file extension is <em>.txt</em>) that is specified as argument of the program.
It is based on a <code>&lt;key&gt;=&lt;value&gt;</code> syntax.
</p>
<p>A 3DSwym request requires a more complex pattern than <code>&lt;key&gt;=&lt;value&gt;</code> as multiple information must be given to program.
</p>
<p>The pattern to use is <code>&lt;key&gt;=&lt;method&gt;.&lt;path&gt;</code> where:
</p>
<ul>
	<li><b>&lt;key&gt;</b>: is the identifier of the request. Must be a two digit number between 00 and 99.</li>
	<li><b>&lt;method&gt;</b>: is either GET or POST [<a href="#References">3</a>].</li>
	<li><b>&lt;path&gt;</b>: is the path of the API to call [<a href="#References">3</a>].</li>
</ul>
<p>With a POST method data needs to be sent to the request. 
Almost all POST requests expect a JSON (except for media uploading) as input.
Only JSON format input has been implemented for this use case.
</p>
<p>To specify POST data a new entry must be added to the Scenario. 
</p>
<p>The pattern is <code>&lt;key&gt;_POST_BODY=&lt;JSON&gt;</code> where:
</p>
<ul>
	<li><b>&lt;key&gt;</b> must be the same as the &lt;key&gt; of POST scenario corresponding entry.</li>
	<li><b>&lt;JSON&gt;</b> contains the POST body of the request.</li>
</ul>
<p>Comments can be added be starting a line with <code>"#"</code> character.
</p>
<p>An example of a complete scenario file:
</p>
<pre class="code">
# community_scenario.txt
# COPYRIGHT DASSAULT SYSTEMES 2014
# 3DSwym Community Scenario

<b>10</b>=GET.api/community/listmycommunities/with_pagination/false/limit/2

<b>20</b>=POST.api/community/get
<b>20_POST_BODY</b>={"request_id":0,"params":{"id":"2"}}

<b>40</b>=POST.api/community/listmembers
<b>40_POST_BODY</b>={"request_id":0,"params":{"community_id":"2","page":1,"limit":"2"}}

<b>30</b>=GET.api/community/getlogo/community_id/2/type/thumb/key/l_thumb
</pre>
<p>In this example the scenario is composed of four web services.
They will be consumed following the key order: 10 then 20 then 30 then 40.
</p>
<p>A <code>&lt;key&gt;=&lt;value&gt;</code> line cannot be broken meaning the full pattern must fit in one line of the text file.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Load scenario file</h3>
<p>The first thing to do is to catch the input arguments of program to get the file path of the scenario to execute.
</p>
<p>Due to <code>&lt;key&gt;=&lt;value&gt;</code> syntax of a scenario, it can be parsed into a <code>Properties</code> Java object from <code>java.util</code> library:
</p>
<pre class="code">
...
String input_file = args[4];
...
Properties <b>scenario</b> = new Properties();
FileInputStream fis = new FileInputStream(input_file);
<b>scenario.load(fis)</b>;
fis.close();
...
</pre>
<p>Once loaded into a <code>Properties</code> scenario object, web services can easily be retrieved thanks to <em>getProperty(&lt;key&gt;)</em> method.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Log in to 3DSwym</h3>
<p>Login is mandatory to be able to consume 3DSwym web services [<a href="#References">2</a>].
</p>
<pre class="code">
CAASwYmClient client = new CAASwYmClient(swym3ds_server, output_dir);
CAASwYmLoginClient client_login = new CAASwYmLoginClient(client);
client_login.<b>login</b>(swym3ds_username, swym3ds_password);
</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Consume web services</h3>
<p>The Properties <code>scenario</code> object contains all the web services to consume. 
Each web service is retrieved by iterating over the keys of the scenario.
</p>
<pre class="code">
for (int k=0; k&lt;100; k++) {
	String <b>key</b>= String.format("%02d", k);
	String <b>value</b> = <b>scenario.getProperty(key)</b>;
	if(value != null) {
	...
</pre>
<p>Each key is tested (from 00 to 99) for matching a web service.
</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step31"></a>Catch the web service path</h4>
<p>The variable <code>value</code> created above is a String containing the brute line output of the scenario file (e.g.<code>POST.api/community/get</code>).
It needs to be split to retrieve each information it contains.
</p>
<pre class="code">
...
if(value != null) {
	String <b>path</b> = value.substring(value.indexOf('.') + 1);
	String <b>method</b> = value.substring(0, value.indexOf('.'));
	String <b>web_service_url</b> = client.get3DSwymServer() + path;
	...
</pre>
<p>Catching path and method of the current web service is made by using <em>substring</em> and <em>indexOf</em> methods from Java String class.
The web service complete URL is built from the path and <em>get3DSwymServer</em> method [<a href="#References">1</a>].
</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step32"></a>Load the URL</h4>
<p>Loading the URL (equivalent to consuming the web service) uses either <em>loadGETUrl</em> or <em>loadPOSTUrl</em> methods depending on the method of the web service [<a href="#References">1</a>].
</p>
<pre class="code">
...
byte[] <b>response</b> = null;
if (method.equals("<b>GET</b>"))
	<b>response</b> = client.getURLLoader().<b>loadGETUrl</b>( 
		<b>web_service_url</b> );
else if (method.equals("<b>POST</b>")) {
	String post_json_str = scenario.getProperty(key + "_POST_BODY");
	byte[] <b>post_json</b> = post_json_str.getBytes(CAASwYmClient.ENCODING);
	<b>response</b> = client.getURLLoader().<b>loadPOSTUrl</b>( 
		<b>web_service_url</b>,
		"application/json; charset=UTF-8",
		<b>post_json</b> );
} 
...
</pre>
<p>On POST method the POST data entry of the scenario file must be retrieved and then parsed to a byte array before being sent.
The POST content type must be "application/json; charset=UTF-8" [<a href="#References">3</a>].
</p>
<p>
The response body of the request is put in a byte array.
</p>
<h4><a name="Step33"></a>Save the result to a file</h4>
<h5>Redirect Output</h5>
<p>Loading an URL produces multiple output. 
To avoid overloading in console the standard output have been redirected to an external file:
</p>
<pre class="code">
...
PrintStream std_output = System.out;
PrintStream trace = null;
...
if (output_dir != null) {
	String trace_file_str = output_dir + key + "_" + path.replaceAll("/","_") + ".traces";
	<b>trace</b> = new PrintStream(trace_file_str, CAASwYmClient.ENCODING);
	<b>System.setOut(trace)</b>;
}
...
</pre>
<p>The file is named using the key and the path of the web service.
It is saved into the output directory specified as input parameter of the use case.
All following <code>System.out.print...</code> will be redirected to this file until it is reassigned to the console.
</p>
<h5>Get the response type</h5>
<p>The URL loader sends back a byte array. 
Most of responses are JSONs but there are exceptions. 
An often found response is an image. 
To know the type of the response, the URL loader has a <em>getContentTypeFromHeader</em> method that sends back the <em>Content-Type</em> header of the last called request.
</p>
<pre class="code">
...
String <b>response_type</b>= client.getURLLoader().<b>getContentTypeFromHeader()</b>;
...
</pre>
<h5>JSON responses</h5>
<p>If the response is a JSON: 
the <code>CAASwYmClient</code> class offers a <em>getJSONResponse(byte [])</em> method for parsing the response to a JSONObject.
And <code>JSONObject</code> class offers a <em>toString(Integer)</em> method to display a JSON with indentation.
</p>
<pre class="code">
...
if(response_type.indexOf("json") != -1)
	System.out.println(<b>client.getJSON(response).toString(2)</b>);
...
</pre>
<p>The JSON is printed to the output trace file with a 2 spaces indentation.</p>
<!-- response_type.indexOf("text") != -1 || -->
<h5>Image responses</h5>
<p>If the response is an image:
</p>
<pre class="code">
...
else if(response_type.indexOf("image") != -1){
	FileOutputStream image = new FileOutputStream( output_dir + key + ".jpeg" );
	<b>image.write(response)</b>;
	image.close();
}
...
</pre>
<p>In case of an image it is saved with a default jpeg format in the output directory.
</p>
<h5>Reset Output</h5>
<p>Finally the Standard output is reset to default (reassigned to the console):
</p>
<pre class="code">
...
if (output_dir != null) {
	trace.flush();
	trace.close();
	<b>System.setOut(std_output)</b>;
}
...
</pre>
<p><strong>Note :</strong> This use case only saves the response of a web service to a file. 
Calling requests and catching responses is the starting point for developing new code and really make a use of the response.
</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Log out from 3DswYm</h3>
<p>Once all requests of the scenario have been performed, the last step is to disconnect from 3DSwym [<a href="#References">2</a>] and exit the program.</p>
<pre class="code">
client_login.<b>logout</b>();
System.exit(0);
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In this use case you have seen how to generically call APIs thanks to a scenario file and a Java Client Application. 
The responses of consumed web services have been saved to dedicated trace files.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAA3DSwymUcJavaClientApp.htm">Creating Java Client Based Applications</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAA3DSwymUcGettingStarted.htm">Getting Started Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAA3DSwymTaAboutWS.htm">About 3DSwym web services</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [June 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>
</body>
</html>
