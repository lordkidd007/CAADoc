<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Getting Started</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Getting Started</h1>
		<!-- <p><em>[Use a verb at the progressive form as the first word: Using, Creating, 
		Accessing, etc. Also copy the title in the &lt;title&gt; tag, or using the Properties 
		command of the File menu.]</em></p> -->
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<table class="abstract">
	<tr>
		<td>
			<h2>Abstract</h2>
			<p>This article describes an example of how to use a Java Client Application to consume 3DSwym web services.
			It shows how to connect and disconnect from 3DSwym.</p>
			<ul>
				<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
				<li><a href="#UseCase">The CAASwYmBasicCo Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASwYmBasicCo Do</a></li>
					<li><a href="#How">How to Launch CAASwYmBasicCo</a></li>
					<li><a href="#Where">Where to Find the CAASwYmBasicCo Code</a></li>
				</ul>
				</li>
				<li><a href="#Step">Step-by-Step</a></li>
				<li><a href="#InShort">In Short</a></li>
				<li><a href="#References">References</a></li>
			</ul>
		</td>
	</tr>
</table>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to connect and disconnect from 3DSwym web services provider. 
It explains how to handle CAS (Central Authentication Service) to connect to 3DSwym. 
It also gives a quick view of how to consume a 3DSwym web service.
</p>
<p>CAASwYmBasicCo use case is a <em>Java Client Application</em>.
It means it uses a set of classes to handle HTTPS requests and responses.
Those classes are explained in this article [<a href="#References">1</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="UseCase"></a>The CAASwYmBasicCo Use Case</h2>
<p>CAASwYmBasicCo is a use case of the CAASwymInfraWeb.edu framework. 
It illustrates 3DSwym web application capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h3><a name="What"></a>What Does CAASwYmBasicCo Do</h3>
<p>CAASwYmBasicCo begins by setting up an environment to consume web services [<a href="#References">1</a>]. 
Then it connects to 3DSwym web services provider, performs basic request to get logged user information, and finally logs out from 3DSwym.
</p>
<p>CAASwYmBasicCo use case displays logged user nickname retrieved from get current user web service:
</p>
<pre class="code">
<b>&gt; java com.dassault_systemes.caasamples.swym3ds.CAASwYmMain %server% %login% %password% %output% </b>
## Getting input arguments :
 catch 3DSwymServer=&lt;3DSwym Server&gt;
 catch 3DSwymUsername=&lt;Username&gt;
 catch 3DSwymPassword=&lt;Password&gt;
 catch Output Directory=&lt;Output&gt;
## End Of arguments catching

## <b>Login</b>

## <b>Get current user</b>
 --> Result : <b>User nickname=&lt;nickname&gt;</b>
## End Of get current user

## <b>Logout</b>
</pre>

<p>Each step consumes web services and therefore produces trace files of HTTPS requests and responses.
Those traces are stored into the output directory specified as argument of the program.
</p>
<p>CAASwYmBasicCo use case generates the following trace files:
</p>
<ul>
	<li>On login <a href="samples/CAALogin.traces.txt">CAALogin.traces</a></li>
	<li>When getting logged user information <a href="samples/CAAGetcurrentuser.traces.txt">CAAGetcurrentuser.traces</a></li>
	<li>On logout <a href="samples/CAALogout.traces.txt">CAALogout.traces</a></li>
</ul>
<p>A trace file is composed of a series of:
</p>
<ul>
	<li>request with:
		<ul>
			<li>the request URL and method</li>
			<li>a part of the request header (only the explicitly set ones)</li>
			<li>the post body if any</li>
		</ul>
	</li>
	<li>response with:
		<ul>
			<li>the response header</li>
			<li>the response body</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="How"></a>How to Launch CAASwYmBasicCo</h3>
<p>To launch CAASwYmBasicCo, you will need to set up the build time environment, then 
compile CAASwYmBasicCo along with its prerequisites, set up the run time environment, 
and then execute the use case.
</p>
<p>Launching the use case is done via <code>java</code> standard command. 
In order for java to find the <em>.class</em> files generated on compilation, you may need to arrange the <code>$CLASSPATH</code> variable. 
Module <em>.class</em> file paths to append are :
</p>
<pre class="code">
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmJSON.mj\Objects\win_b64\tmp
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmCommon.mj\Objects\win_b64\tmp
InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmBasicCo.mj\Objects\win_b64\tmp
</pre>
<p>Once <code>$CLASSPATH</code> has been set, the use case can be launched by executing the command:
</p>
<p><code>java com.dassault_systemes.caasamples.swym3ds.CAASwYmMain Server Username Password Output
</code></p>
<p>Where:
</p>
<table class="fill">
	<tr> 
		<th>&nbsp;Server&nbsp;</th>
		<td>&nbsp;The 3DSwym server authority [<a href="#References">5</a>]. ( &lt;protocol&gt;://&lt;server authority&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; )</td>
	</tr> 
	<tr> 
		<th>&nbsp;Username&nbsp;</th> 
		<td>&nbsp;The 3DSwym user identifier [<a href="#References">5</a>] of the connecting user.&nbsp;</td>
	</tr> 
	<tr> 
		<th>&nbsp;Password&nbsp;</th> 
		<td>&nbsp;The password according to the username given.&nbsp;</td>
	</tr> 
	<tr> 
		<th>&nbsp;Output&nbsp;</th> 
		<td>&nbsp;Directory for traces of HTTPS requests and responses (e.g. "C:\document" do not append "\" at the end).&nbsp;</td>
	</tr> 
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h3><a name="Where"></a>Where to Find the CAASwYmBasicCo Code</h3>
<p>The CAASwYmBasicCo use case is made of several classes located in three modules of the CAASwymInfraWeb.edu framework:</p>
<ul>
	<li>CAASwYmBasicCo.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmBasicCo.mj\</code><br/> Use case specific code:
		<ul>
			<li><code>CAASwYmMain</code> class contains the main method of the use case</li>
			<li><code>CAASwYmUserClient</code> class has a get current user method</li>
		</ul>
	</li>
	
	<li>CAASwYmCommon.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmCommon.mj\</code><br/> Common tools to all use cases (see <em>Java Client Application</em> [<a href="#References">1</a>] for explanation):
		<ul>
			<li><code>CAAURLLoader</code> class to load URL</li>
			<li><code>CAASwYmClient</code> class to manage the unique CAAURLLoader instance</li>
			<li><code>CAASwYmLoginClient</code> class with login and logout methods</li>
		</ul>
	</li>
	<li>CAASwYmJSON.mj: <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmJSON.mj\</code><br/> Set of class to manage JSON format:
		<ul>
			<li><code>JSONObject</code> class is the most commonly used</li>
			<li>...</li>
		</ul>
	</li>
</ul>

<p>Where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are 3 logical steps in CAASwYmBasicCo use case:</p>
<ol>
	<li><a href="#Step1">Log in to 3DSwym</a><ol>
			<li><a href="#Step1Sub1">Find a 3DPassport Server</a></li>
			<li><a href="#Step1Sub2">Ask for a login ticket</a></li>
			<li><a href="#Step1Sub3">Perform <!--CAS (Central Authentication Service)--> Login with 3DPassport</a></li>
			<li><a href="#Step1Sub4">Get a CSRF Token</a></li>
		</ol>
	</li>
	<li><a href="#Step2">Get current user</a>
		<ol>
			<li><a href="#Step2Sub1">Consume web service</a></li>
			<li><a href="#Step2Sub2">Operate on result</a></li>
		</ol>
	</li>
	<li><a href="#Step3">Log out from 3DSwym</a></li>
</ol>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step1"></a>Log in to 3DSwym</h3>
<p>In the main method we only have:
</p> 
<pre class="code">...
client_login.<b>login(</b>swym3ds_username, swym3ds_password<b>)</b>;
...
</pre>
<p><code>client_login</code> is an instance of the specific client class <code>CAASwYmLoginClient</code> [<a href="#References">1</a>].
The <em>login</em> method parameters are the username and password given as arguments to the program.
The login method handles the 3DSwym login process.
It is composed of four logical steps [<a href="#References">3</a>]:
</p>
<ol>
	<li><a href="#Step1Sub1">Find a 3DPassport Server</a></li>
	<li><a href="#Step1Sub2">Ask for a login ticket</a></li>
	<li><a href="#Step1Sub3">Perform <!--CAS (Central Authentication Service)--> Login with 3DPassport</a></li>
	<li><a href="#Step1Sub4">Get a CSRF Token</a></li>
</ol>
<p>Each step of the login method generates detailed traces stored in login.traces file (example <a href="samples/CAALogin.traces.txt">CAALogin.traces</a>).
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h4><a name="Step1Sub1"></a>Find a 3DPassport Server</h4>
<p>3DSwym login uses a CAS (Central Authentication Service) hosted by 3DPassport server. 
Yet, so far we only know 3DSwym server address.
3DPassport server address is needed to go further into login.
</p>
<p>To retrieve 3DPassport server address the login method consumes the 3DSwym login web service [<a href="#References">4</a>]. 
Consume a 3DSwym web service is equivalent to load an URL. Each web service has his own path [<a href="#References">1</a>]. 
3DSwym login web service path is <code>api/passport/login</code> to be used as a GET web service.
</p>
<p>Complete URL to load is <code>https://&lt;3DSwym server address&gt;/api/passport/login</code>. 
Where &lt;3DSwym server address&gt; has been given as argument of the program.
</p>
<p>In code context it gives:
</p>
<pre class="code">
...
byte [] response;
...
String <b>swym3ds_login_url_str</b> = _client.get3DSwymServer() + "api/passport/login";
response = _client.getURLLoader().loadGETUrl(<b>swym3ds_login_url_str</b>);
...
</pre>
<p><code>_client</code> is a <code>CAASwYmClient</code> object.
<code>CAASwYmClient</code> class and <em>loadGETUrl</em> method consume the web service [<a href="#References">1</a>].
</p>
<p>The web service returns an HTML page.
However what is more interesting than the response body is that the application performed automatic redirection to 3DPassport server.
</p>
<pre class="code">
...
String <b>passport3ds_url_str</b> = _client.getURLLoader().<b>getLastRedirectUrl</b>();
...
</pre>
<p>3DPassport server address is revealed thanks to <em>getLastRedirectUrl</em> method from <code>CAAURLLoader</code> [<a href="#References">1</a>].
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h4><a name="Step1Sub2"></a>Ask for a login ticket</h4>
<p>Next step is to ask 3DPassport server for a login ticket that is mandatory for performing CAS login.
It does so by consuming the following web service:
</p>
<pre class="code">
...
String <b>passport3ds_lt_url_str</b> = 
	<b>passport3ds_url_str</b> +
	"/<b>login</b>?<b>action</b>=get_auth_params&amp;<b>service</b>=" +
	URLEncoder.encode(swym3ds_login_url_str, CAASwYmClient.ENCODING);

response = _client.getURLLoader().loadGETUrl(<b>passport3ds_lt_url_str</b>);

<b>response_str</b> = new String(response);
...
</pre>

<p>The path is <b>/login</b>. It is followed by the query parameters:</p>
<ul>
	<li><b>action</b>: equals to <em>get_auth_params</em>. It asks for the login ticket</li>
	<li><b>service</b>: equals to 3DSwym login web service URL that is encoded to avoid malformed URL. It tells that the login ticket will be available for 3DSwym service.</li>
</ul>

<p>A <code>response_str String</code> is created from the byte array response.
It contains the login ticket.
It looks like:
</p>
<pre class="code">
...
{"response":"login","<b>lt</b>":"&lt;login ticket&gt;"}
...
</pre>
<p>It needs to be extracted as follows:
</p>
<pre class="code">
...
String lt = response_str.substring(response_str.indexOf("lt")+5);
lt = lt.substring(0, lt.indexOf("\""));
...
</pre>
<p>The extraction is made by composing with the <em>indexOf</em> and <em>substring</em> methods of the standard <code>String</code> Java class.
</p>
<p><b>Note</b>: the application performs several redirections before sending back the HTML page. 
Remember that redirection are automatically followed by the application for 3DSwym [<a href="#References">5</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h4><a name="Step1Sub3"></a>Perform CAS Login with 3DPassport</h4>
<!-- <p>The 3DPassport login web service URL and a login ticket have been retrieve from previous step.</p> -->
<p>The 3DPassport login web service is used with both POST and GET method at the same time. It:
</p>
<ul>
	<li>does the CAS login on 3DPassport CAS server.<br/>
	Post data are needed.
	</li>
	<li>tells 3DPassport that login will be effective for 3DSwym.<br/>
	<code>?service=&lt;3DSwym login web service URL&gt;</code> query does it.</li>
</ul>
<!-- <p>Login with CAS on 3DPassport does not perform login to 3DSwym.
To do so we must specify to 3DPassport which service (here 3DSwym) login will be effective for.
This is done by adding the following query to 3DPassport login web service URL : <code>?service=&lt;3DSwym login web service URL&gt;</code>. 
The 3DSwym login web service URL should be encode to avoid malformed URL.</p> -->
<p>3DPassport login web service post body is expecting byte data. 
Content-Type must be specified in header of the request and should be "application/x-www-form-urlencoded".
</p>	
<p><strong>What data needs to be sent?</strong></p>
<ul>
	<li>a username</li>
	<li>a password</li>
	<li>a login ticket</li>
</ul>
	
<p><strong>What data format is expected?</strong></p>
<p>Format is : <code>username=&lt;swym user login&gt;&amp;password=&lt;swym user password&gt;&amp;<br/>lt=&lt;login ticket&gt;</code>.
Order between parameters is free.
</p>

<p>The lifetime of 3DPassport authentication in HTTP Client can be longer (1 week instead of 2 hours) with an extended validity CASTGC cookie.
This is done by adding the string <code>&amp;rememberMe=true</code> to the POST data.
</p>
<pre class="code">
...
String post_data_str = "lt=" + lt + "&amp;username=" +
	swym3ds_username +
	"&amp;password=" +
	swym3ds_password;
byte [] <b>post_data</b> = post_data_str.getBytes();

String <b>passport3ds_login_url_str</b>= <b>passport3ds_url_str</b> + 
	"/login?service=" +
	URLEncoder.encode(swym3ds_login_url_str, CAASwYmClient.ENCODING);
response= _client.getURLLoader().loadPOSTUrl(
	<b>passport3ds_login_url_str</b>,
	"application/x-www-form-urlencoded",
	<b>post_data</b>);
...
</pre>

<p>The 3DSwym login web service URL of the service query is encoded to avoid malformed URL.</p>

<p><strong>How to know everything worked fine?</strong></p>
<p>If CAS login succeed the 3DPassport server produces a <em>CASTGC</em> (Central Authentication Service Ticket Granting Cookie) Cookie.</p>

<p>If 3DSwym login succeeded the response should be a standard HTML page with success message and the username of the connected user.</p>

<p>Success response extracted from <a href="samples/CAALogin.traces.txt">login.traces</a> file looks like:</p>
<pre class="code">
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;!-- Minimal Web pages, starting point for Web Designers --&gt;
&lt;html&gt;
        &lt;head&gt;
                &lt;title&gt;3DSwym Success&lt;/title&gt;
        &lt;/head&gt;
  &lt;body&gt;
        &lt;p&gt;
        <b>User &lt;3DSwym username&gt; successfully logged into 3DSwym platform.</b>
        &lt;/p&gt;
        &lt;p&gt;
        For security reasons, please Log Out and Exit your web browser
    when you are finished accessing services that require authentication!
        &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Both the <em>CASTGC</em> Cookie and the success message should be tested to ensure login is effective.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h4><a name="Step1Sub4"></a>Get CSRF Token</h4>
<p>CSRF Token has a security purpose.
Once retrieved, it must be passed to each 3DswYm web service that requires it (all APIs except login, logout, and the one to get the CSRF token). 
It must be set in the request header.
</p>
<p>The web service path is <code>/api/index/tk</code>.
</p>
<pre class="code">
...
String <b>swym_tk</b> = _client.getSwymServer() + "api/index/tk";
response = _client.getURLLoader().<b>loadGETUrl</b>(<b>swym_tk</b>);
...
</pre>
<p>On success, response is a JSON that looks like (extracted from <a href="samples/CAALogin.traces.txt">login.traces</a> file):
</p>
<pre class="code">
{
	"result":
	{
		"tk":"ok",
		"ServerVersion":"N\/A",
		"ProductName":"3DSwym",
		"<b>ServerToken</b>":"<b>48963011</b>"
	},
	"request_id":null,
	"nb_result":1,
	"monitoring":
	{
		"last_exec_time":0.00058984756469727
	}
}
</pre>
<p>Among server information is to be found the <code>ServerToken</code> key which contains the CSRF Token.
</p>
<p><b>Note</b>: The CAAURLLoader class automatically stores the CSRF Token and will add it to header of future requests [<a href="#References">1</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step2"></a>Get current user</h3>
<p>We are now logged to 3DSwym and able to consume web services.
</p>
<p>As an example the use case consumes the get current user GET web service that gives information on logged user and does not need any input parameters [<a href="#References">2</a>].
</p>
<h4><a name="Step2Sub1"></a>Consume web service</h4>
<p>In the main class there is:</p>
<pre class="code">
...
JSONObject response= client_user.<b>getCurrentUser()</b>;
...
</pre>
<p>All <em>loadUrl</em> methods should be put in a specific client class [<a href="#References">1</a>].
Here a <code>CAASwYmUserClient</code> class has been created to consume web services relative to the user resource.
</p>
<p><em>getCurrentUser</em> method code to consume web service is:</p>
<pre class="code">
...
String <b>ws_url</b> = _client.getSwymServer() + "api/user/getcurrent";

byte [] response= _client.getURLLoader().<b>loadGETUrl</b>(<b>ws_url</b>);

<b>JSONObject response_json</b>= _client.<b>getJSON</b>(response);
...
return <b>response_json</b>;
...
</pre>
<p>The code is very similar to what has been done for login (login web services are just web services among others in 3DSwym).
</p>
<p>To easily manipulate a JSON response 3DSwym use cases rely on JSON Java classes<!-- (see <a href="CAA3DSwymWSAPI.htm#JSON">About 3DSwym Web Services</a>)-->. 
The <em>getJSON</em> method from <code>CAASwYmClient</code> class cast a byte array to a <code>JSONObject</code> object [<a href="#References">1</a>].
</p>
<h4><a name="Step2Sub2"></a>Operate on result</h4>
<p><code>JSONObject</code> class offers simple methods to navigate inside a JSON:
</p>
<pre class="code">
...
JSONObject response= client_user.getCurrentUser();
JSONObject result= response.<b>getJSONObject</b>("result");
String <b>nickname</b>= result.<b>getString</b>("nickname");
...
</pre>
<p>This code (extracted from main method), first extracts the JSON at key <em>result</em>.
Then it extracts the value at key <em>nickname</em> of the <em>result</em> JSON Object.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step3"></a>Logout</h3>
<p>In the main method we only have:
</p> 
<pre class="code">
...
client_login.<b>logout()</b>;
...
</pre>

<p>The logout method consumes the 3DSwym logout web service [<a href="#References">4</a>].</p>

<p>The web service path is <code>/api/passport/logout</code>.</p>

<pre class="code">
...
String <b>swym_logout</b> = _client.getSwymServer() + "api/passport/logout";
byte[] response = _client.getURLLoader().<b>loadGETUrl</b>(<b>swym_logout</b>);
...
</pre>

<p>On success the web service redirects the client to 3DSwym login web service. 
Developer should check that CASTGC Cookie has been set to null to ensure logout is effective.
!! a modifier
</p>
<p>Logout traces can be seen in the <a href="samples/CAALogout.traces.txt">CAALogout.traces</a> file.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="InShort"></a>In Short</h2>
<p>In this use case you have seen how to login/logout from 3DSwym. It called an API to appreciate login success.
Login has 4 steps : get a 3DPassport server URL, get a login ticket, login to CAS (Central Authentication Service), and get a CSRF token.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAA3DSwymUcJavaClientApp.htm">Creating Java Client Based Applications</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAA3DSwymQrGetCurrentUser.htm">Get Current User Web Service Reference</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAA3DSwymTaLogin.htm">Login Key Concepts</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAA3DSwymTcSSO.htm">SSO Web Services Reference</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAA3DSwymTaAboutWS.htm">About 3DSwym web services</a></td>
	</tr>
</table>
<!-- <p><em>[Remove one row out of the two above, depending on whether you are creating 
a C++ or a Web Services use case. Add references to articles you have cited in the 
text, giving each reference.]</em></p> -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2014]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>1.1</strong> [June 2014]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>
</body>
</html>
