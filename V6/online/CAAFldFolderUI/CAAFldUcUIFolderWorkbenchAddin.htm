<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating an Add-in in the Folder Workbench</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Add-in in the Folder Workbench</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create an add-in in Folder workbench based 
		on CAAFldUIFolderWorkbenchAddin use case.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFldUIFolderWorkbenchAddin Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFldUIFolderWorkbenchAddin Do</a>
				</li>
				<li><a href="#How">How to Launch CAAFldUIFolderWorkbenchAddin</a></li>
				<li><a href="#Where">Where to Find the CAAFldUIFolderWorkbenchAddin 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		<p></p>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>By implementing the <em>PLMIFolderWorkbenchAddin</em> interface, a toolbar with 
its commands can be made active in the Folder workbench. For a toolbar to be active 
in Folder workshop (all Folder workbenches), please refer to article [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFldUIFolderWorkbenchAddinUse Case</h2>
<p>CAAFldUIFolderWorkbenchAddin is a use case of the CAAFolderInterfacesUI.edu framework 
that illustrates PLMFolderViewerInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFldUIFolderWorkbenchAddin Do</h3>
<p>The goal of CAAFldUIFolderWorkbenchAddin is to demonstrate how to implement the
<em>PLMIFolderWorkbenchAddin</em> interface. It consists of the following parts:</p>
<ul>
	<li>Code to create the toolbar and the layout of the commands.</li>
	<li>Code to be executed when the command is selected.</li>
	<li>Resource definition for the visual aspects of the user interface.</li>
</ul>
<p>
<img src="images/CAAFldUIFolderWorkbenchAddin_Global.png" alt="Folder Workbench Add-in"/></p>
<p>A new toolbar appears on top of the CATIA frame and contains a single command 
represented by the
<img src="images/CAAFldUIFolderWorkbenchAddin_I.png" alt="Folder Workbench Add-in Icon" height="24" width="24"/> 
icon.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFldUIFolderWorkbenchAddin</h3>
<p>To launch CAAFldUIFolderWorkbenchAddin:</p>
<ol>
	<li>Edit <code>InstallRootFolder\CAADoc\CAAFolderInterfacesUI.edu\CNext\code\dictionary\CAAFolderInterfacesUI.edu.dico</code> 
	dictionary file by uncommenting the #CAA# from following line containing
	<code>PLMIFolderWorkbenchAddin</code>
	<pre class="code"># CAAFolderWorkbenchAddin use case
# -------------------------------
#CAA# CAAFldUIFolderWorkbenchAddin PLMIFolderWorkbenchAddin libCAAFldUIFolderWorkbenchAddin</pre>
	</li>
	<li>See reference [<a href="#References">1</a>] for other steps.</li>
	<li>Once launched, display the toolbar named &quot;CAA Folder Workbench Add-in Toolbar&quot; 
	if necessary:
	<p>
	<img src="images/CAAFldUIFolderWorkbenchAddin_Toolbar.png" alt="Folder Workbench Add-in Toolbar"/></p>
	</li>
	<li>Select Root1 and click on the command and a dialog box will appear with 
	the name of the selected folder.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFldUIFolderWorkbenchAddin Code</h3>
<p>The CAAFldUIFolderWorkbenchAddin use case is made of a single file located in 
the CAAFldUIFolderWorkbenchAddin.m module of the CAAFolderInterfacesUI.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFolderInterfacesUI.edu\CAAFldUIFolderWorkbenchAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two steps in CAAFldUIFolderWorkbenchAddin:</p>
<ol>
	<li><a href="#Step1">Toolbar Creation and Layout</a></li>
	<li><a href="#Step3">User Interface</a></li>
</ol>
<p>We will now detail each of those sections:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Toolbar Creation and Layout</h3>
<p>The implementation of <em>PLMIFolderWorkbenchAddin</em> is provided by CAAFldUIFolderWorkbenchAddin 
class. Its purpose is to create the toolbar and to layout the commands on it. Only 
two methods need be defined: <code><a href="#CreateToolbars">CreateToolbars</a></code> 
and <a href="#CreateCommands"><code>CreateCommands</code></a>.</p>
<pre class="code">class CAAFldUIFolderWorkbenchAddin: public CATBaseUnknown
{
  CATDeclareClass;

  public:
    // Standard constructors and destructors for an implementation class
    // -----------------------------------------------------------------
    CAAFldUIFolderWorkbenchAddin();
    virtual ~CAAFldUIFolderWorkbenchAddin();
    /**
     * @see ApplicationFrame.CATIWorkbenchAddin#CreateCommands
     */
    void CreateCommands();
    /**
     * @see ApplicationFrame.CATIWorkbenchAddin#CreateToolbars
     */
    CATCmdContainer *CreateToolbars();
 
  private:
    // The copy constructor and the equal operator must not be implemented
    // -------------------------------------------------------------------
    CAAFldUIFolderWorkbenchAddin (CAAFldUIFolderWorkbenchAddin &amp;);
    CAAFldUIFolderWorkbenchAddin&amp; operator=(CAAFldUIFolderWorkbenchAddin&amp;);
};</pre>
<p><a name="CreateToolbars"></a>The purpose of the <code>CreateToolbars</code> method 
is to create all the command headers of our toolbar. In this case a toolbar named 
CAAFldUIFolderWorkbenchAddinToolbar with a command named CAAFldUIFolderWorkbenchAddinCmd1 
is created.</p>
<pre class="code">...
CATCmdContainer *CAAFldUIFolderWorkbenchAddin::CreateToolbars()
{
  CAAFldUIFolderWorkbenchAddinTRACE(&quot;&gt;&gt; CAAFldUIFolderWorkbenchAddin::CreateToolbars()&quot;);

  // Declaration of toolbar for Addin
  NewAccess(CATCmdContainer, pToolbarContainer, CAAFldUIFolderWorkbenchAddinToolbar);
  NewAccess(CATCmdStarter, pCommandStarter, CAAFldUIFolderWorkbenchAddinStarter);

  // Arranging the command within the toolbar
  SetAccessCommand(pCommandStarter, &quot;CAAFldUIFolderWorkbenchAddinCmd1&quot;);
  SetAccessChild(pToolbarContainer, pCommandStarter);
  int visibleFlag = 1;
  AddToolbarView(pToolbarContainer, visibleFlag, Top);
  CAAFldUIFolderWorkbenchAddinTRACE(&quot;&lt;&lt; CAAFldUIFolderWorkbenchAddin::CreateToolbars()&quot;);

  return pToolbarContainer;
}
...</pre>
<p><a name="CreateCommands"></a>The purpose of the <code>CreateCommands</code> method 
is to create all command headers of our toolbar. Instead of using the <code>MacDeclareHeader</code> 
macro to define the CAAFldUIFolderWorkbenchAddinHeader command header class (like 
in Adding a Toolbar to all Folder Workbenches use cases [<a href="#References">1</a>]), 
it is defined &quot;manually&quot; with extra code.</p>
<p>Here a command named CAAFldUIFolderWorkbenchAddinCmd1 is created. It is located 
in the CAAFldUIFolderWorkbenchAddin shared library and its associated class is CAAFldUIFolderWorkbenchAddinCmd.</p>
<pre class="code">...
void CAAFldUIFolderWorkbenchAddin::CreateCommands()
{
  CAAFldUIFolderWorkbenchAddinTRACE(&quot;&gt;&gt; CAAFldUIFolderWorkbenchAddin::CreateCommands()&quot;);

  // Instantiates the command header for the command
  new CAAFldUIFolderWorkbenchAddinHeader(&quot;CAAFldUIFolderWorkbenchAddinCmd1&quot;, // command name
    &quot;CAAFldUIFolderWorkbenchAddin&quot;, // lib name
    &quot;CAAFldUIFolderWorkbenchAddinCmd&quot;, // class name
    (void *)NULL);

  CAAFldUIFolderWorkbenchAddinTRACE(&quot;&lt;&lt; CAAFldUIFolderWorkbenchAddin::CreateCommands()&quot;);
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>User Interface</h3>
<p>There are two visible objects: the toolbar and its command.</p>
<p>The title of the toolbar named CAAFldUIFolderWorkbenchAddinToolbar is defined 
by the CAAFldUIFolderWorkbenchAddin<code>.CATNls</code> which can be found in
<code><em>install_root</em>/CAAFolderInterfacesUI.edu/CNext/resources/msgcatalog</code> 
directory.</p>
<pre class="code">CAAFldUIFolderWorkbenchAddinToolbar.Title = &quot;CAA Folder Workbench Addin Toolbar&quot;;</pre>
<p>CAAFldUIFolderWorkbenchAddinCmd1 resources are defined by three files:</p>
<ol>
	<li><code>CAAFldUIFolderWorkbenchAddinHeader</code>.<code>CATNls</code> (located 
	in the <code><em>install_root</em>/CAAFolderInterfacesUI.edu/CNext/resources/msgcatalog</code> 
	directory):
	<pre class="code">CAAFldUIFolderWorkbenchAddinHeader.CAAFldUIFolderWorkbenchAddinCmd1.Title = &quot;CAA Folder Workbench cmd1&quot;;
CAAFldUIFolderWorkbenchAddinHeader.CAAFldUIFolderWorkbenchAddinCmd1.Help = &quot;CAA Folder Workbench cmd1 long help text&quot;;
CAAFldUIFolderWorkbenchAddinHeader.CAAFldUIFolderWorkbenchAddinCmd1.ShortHelp = &quot;CAA Folder Workbench cmd1 info&quot;;</pre>
	<p>These texts correspond to the screen tip, the documentation line and the 
	command prompt input:</p>
	<p>
	<img src="images/CAAFldUIFolderWorkshopAddin_CmdInfo.png" alt="Folder Workbench cmd1 info"/></p>
	</li>
	<li>
	<p><code>CAAFldUIFolderWorkbenchAddinHeader.CATRsc</code> (located in the
	<code>InstallRootFolder\CAADoc\CAAFolderInterfacesUI.edu\CNext\resources\msgcatalog</code> 
	directory) defines the bitmap name for the command icon:</p>
	<pre class="code">CAAFldUIFolderWorkbenchAddinHeader.CAAFldUIFolderWorkbenchAddinCmd1.Icon.Normal=&quot;CAAFldUIFolderWorkbenchAddin_I&quot;;</pre>
	</li>
	<li><code>CAAFldUIFolderWorkbenchAddin_I.png</code> (located in the <code>InstallRootFolder\CAADoc\CAAFolderInterfacesUI.edu\CNext\resources\graphic\icons\normal</code> 
	directory) contains the bitmap the command icon:
	<img src="images/CAAFldUIFolderWorkbenchAddin_I.png" alt="Folder Workbench Add-in Icon" height="24" width="24"/>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has shown how to create a toolbar with a command within folder 
workshop:</p>
<ul>
	<li>Implement the <em>PLMIFolderWorkbenchAddin</em> interface to create a toolbar 
	and layout the commands.</li>
	<li>Derive from CATCommand to implement the command action.</li>
	<li>Define resource files for the user interface.</li>
</ul>
<p>In addition, it shown that when a <code>PLMIFolder</code> object is retrieved 
from selected object using <code>PLMFolderServices</code>::<code>GetFolder</code> 
service, <code>PLMIFolder</code> object has to be put in bag and that bag must be 
emptied when needed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFldUcUIFolderWorkshopAddin.htm">Creating an Add-in in the 
		Folder Workshop</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
