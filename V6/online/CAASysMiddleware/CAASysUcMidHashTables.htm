<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Hash Tables</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Hash Tables</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manage a hash table, illustrated 
		by a hash table of pointers to the <em>CAASysPoint</em> class.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCollections Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCollections Do</a></li>
					<li><a href="#How">How to Launch CAASysCollections</a></li>
					<li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and manage a hash table.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCollections Case</h2>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that illustrates 
the collection management capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCollections Do</h3>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
	<li>Lists of simple types</li>
	<li>Lists of pointers</li>
	<li>Lists of values</li>
	<li>Sets of <em>CATString</em> class instances</li>
	<li>Hash tables</li>
</ul>
<p>This article describes the hash table capabilities, taking a hash table of pointers 
to instances of the <em>CAASysPoint</em> class as example.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCollections</h3>
<p>To launch CAASysCollections, you will need to set up the build time environment, 
then compile CAASysCollections along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCollections Code</h3>
<p>The CAASysCollections use case is made of a several classes located in the CAASysCollections.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCollections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following capabilities offered by lists of integers are described in the 
following steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create a hash table</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Fill in a hash table</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Count the items</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Insert items</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Remove items</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Retrieve the bucket and position of an item</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Access an item using its bucket and location</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Retrieve the first item with a given hash value</a></td>
	</tr>
</table>
<p>The <em>CATSysPoint</em> class used represents 2D points. To enable its pointers 
to be used by a hash table, the <em>CATSysPoint</em> class must feature a hash method 
and a comparison method. These methods are named <code>Hash</code> and <code>Compare</code> 
respectively in <em>CATSysPoint</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a Hash Table</h3>
<p>A hash table of pointers to instances of the <em>CATSysPoint</em> class is created 
as a class using macros. The class header file named CAASysHashTableToSysPointPtr.h 
is as follows:</p>
<pre class="code">#ifndef CAASysHashTableToSysPointPtr_h
#define CAASysHashTableToSysPointPtr_h

#include &quot;CAASysPoint.h&quot;

#include &quot;CATHTAB_Clean.h&quot;
#include &quot;CATHTAB_AllFunct.h&quot;

#include &quot;CATHTAB_Declare.h&quot;
<strong>CATHTAB_DECLARE</strong>(<strong>CAASysPoint</strong>)

#endif</pre>
<p>The CATHTAB_Clean.h file undefines all possible previously defined methods, while 
the CATHTAB_AllFunct.h defines for the hash table class to create all the available 
methods for hash table classes. The <code>CATHTAB_DECLARE</code> macro creates the 
class header file.</p>
<p>The source file named CAASysHashTableToSysPointPtr.cpp is as follows:</p>
<pre class="code">#include &quot;CAASysHashTableToSysPointPtr.h&quot;

#include  &quot;CATHTAB_Define.h&quot;
<strong>CATHTAB_DEFINE</strong>(<strong>CAASysPoint</strong>)</pre>
<p>The <code>CATHTAB_DEFINE</code> macro creates the class source file. The class 
for a hash table of pointers to the <em>CAASysPoint</em> class is now created. Its 
name is <em>CATHTAB(CAASysPoint)</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Filling in a Hash Table</h3>
<pre class="code">void CAAHashtablesSample()
{
  ...
  <strong>CATHTAB(CAASysPoint)</strong> hashtable(&amp;CAASysPoint::Hash, &amp;CAASysPoint::Compare);

  CAASysPoint pt1(1.0f, 2.0f);
  CAASysPoint pt2(-4.0f, 3.0f);
  CAASysPoint pt3(6.0, 7.0f);

  hashtable.<strong>Insert</strong>( &amp;pt1 );
  hashtable.Insert( &amp;pt2 );
  hashtable.Insert( &amp;pt3 );
  ...</pre>
<p>The <em>CATHTAB(CAASysPoint) </em>class is first instantiated, and its constructor 
takes the pointers to the hash and comparison methods of the class whose instance 
pointers are to be used. Since no size is passed as the third parameter, the table 
can accommodate ten items by default. Then, some <em>CAASysPoint</em> class instances 
are created. The <code>Insert</code> method inserts these instances in the hash 
table.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Counting the Items</h3>
<pre class="code">  ...
  cout &lt;&lt; &quot;hashtable.Size() = &quot; &lt;&lt; hashtable.<strong>Size</strong>() &lt;&lt; endl;
  ...</pre>
<p>The <code>Size</code> method returns the number of items in the hash table. Note 
that this size represents the actual number of items in the hash table, and not 
the possible number the hash table can accommodate. This code provides the following 
output:</p>
<pre class="code">hashtable.Size() = 3</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Inserting Items</h3>
<pre class="code">  ...
  hashtable.<strong>Insert</strong>( &amp;pt1 );

  CAASysPoint pt4(7.0, 8.0f);
  hashtable.Insert( &amp;pt4 );
  ...</pre>
<p>The <code>Insert</code> method inserts items into the hash table. Note that no 
duplicate items can exist in a hash table. As a consequence, the first call to
<code>Insert</code> has no effect, since an item containing <code>&amp;pt1</code> 
already exists in the set. The second call to <code>Insert</code> appends <code>&amp;pt4</code> 
to the hash table. The items are not ordered.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Removing Items</h3>
<pre class="code">  ...
  hashtable.Remove( &amp;pt1 );
  ...</pre>
<p>The <code>Remove</code> method removes the pointer passed as parameter from the 
hash table. The hash table now includes three pointers to points p1, p3, and p4.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Bucket and Position of an Item</h3>
<pre class="code">  ...
  int	oBucket = 0;
  int	oPosition = 0;
  hashtable.<strong>LocatePosition</strong>( &amp;pt3, oBucket, oPosition );
  cout &lt;&lt; &quot;Bucket:&quot;   &lt;&lt; oBucket   &lt;&lt; endl;
  cout &lt;&lt; &quot;Position:&quot; &lt;&lt; oPosition &lt;&lt; endl;
  ...</pre>
<p>The <code>LocatePosition</code> method retrieves the bucket and the position 
of a given pointer in the hash table. This code provides the following output:</p>
<pre class="code">Bucket:2
Position:1</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Accessing an Item Using its Bucket and Location</h3>
<pre class="code">  ...
  CAASysPoint *pt5 = NULL;
  pt5 = hashtable.<strong>Retrieve</strong>(oBucket, oPosition);
  ...</pre>
<p>The <code>Retrieve</code> method retrieves the item that has <code>oBucket</code> 
as bucket and <code>oPosition</code> as position. Since these parameters are initialized 
to the bucket and position of <code>&amp;pt3</code>, this pointer is copied in
<code>pt5</code>. If <code>Retrieve</code> fails, a <code>NULL</code> pointer is 
returned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving the First Item with a Given Hash Value</h3>
<pre class="code">  ...
  CAASysPoint *pt6 = NULL;
  pt6 = hashtable.<strong>KeyLocate</strong>(CAASysPoint::Hash(&amp;pt3));
  ...</pre>
<p>The <code>KeyLocate</code> retrieves the first item that has the same hash value 
than <code>&amp;pt3</code>. Of course, in this simple example, <code>&amp;pt3</code> 
is returned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a class for a hash table to pointers to a given 
class, and how to use it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
