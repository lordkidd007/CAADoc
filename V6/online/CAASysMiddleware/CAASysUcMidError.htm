<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Using Errors</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Using Errors</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create, instantiate, retrieve, and decode an 
		error.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysError Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysError Do</a></li>
					<li><a href="#How">How to Launch CAASysError</a></li>
					<li><a href="#Where">Where to Find the CAASysError Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, instantiate, retrieve, and 
decode an error.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysError Case</h2>
<p>CAASysError is a set of use cases of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysError Do</h3>
<p>This use case creates an error class [<a href="#References">1</a>] intended to 
go with a failure returned by methods of the sample class <em>CAASysError</em>. 
The <code>SquareRoot</code> method computes a square root, and the <code>Subtract</code> 
method computes a subtraction. The square root makes sense if the number used to 
compute the square root is greater than or equal to zero, otherwise the method fails. 
Assume that the subtraction makes sense only if the first operand is greater than 
or equal to the second, and otherwise the method fails.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysError</h3>
<p>To launch CAASysError, you will need to set up the build time environment, then 
compile CAASysError along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysError Code</h3>
<p>The CAASysError use case is made of a a class and a main porgram located in the 
CAASysError.m module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysError.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create and use an error, there are five main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create an error class</a></td>
		<td><em>CAASysError</em> class</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Return a failure without using an error class</a></td>
		<td><em>CAASysOperator</em> class</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Return a failure using an error class and a simple 
		error message</a></td>
		<td><em>CAASysOperator</em> class</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Return a failure using an error class and a composite 
		error message</a></td>
		<td><em>CAASysOperator</em> class</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Retrieve and decode an error in a client application</a></td>
		<td>CAASysMain.cpp</td>
	</tr>
</table>
<p>The <em>CAASysOperator</em> class is used to implement the methods used as examples.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating an Error Class</h3>
<p>A error class derives from <em>CATError</em>, or from one of its derived class, 
such as <em>CATInputError</em>. The <em>CAASysError</em> class header file is as 
follows:</p>
<pre class="code">...
#include &quot;CATInputError.h&quot;

class CATSysError: public <strong>CATInputError</strong>
{
  public:
    <strong>CATDeclareError</strong>(CATSysError, <strong>CATIntputError</strong>)
};</pre>
<p>The <code>CATDeclareError</code> macro declares that the class <em>CAASysError</em> 
declares an error class that derives from <em>CATInputError</em>. The macro creates 
the class constructor and method signatures. Let's have a look at the class source 
file:</p>
<pre class="code">#include &quot;CAASysError.h&quot;

<strong>CATImplementError</strong>(CATSysError, CATInputError);
<strong>CATImplementNLSErrorClass</strong>(CATSysError);</pre>
<p>The <code>CATImplementError</code> macro creates the body of the methods declared 
by <code>CATDeclareError</code>. The <code>CATImplementNLSErrorClass</code> macro 
enables the error class for error messages.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Returning a Failure Without Using an Error Class</h3>
<p>The <code>Divide</code> method divides two real numbers passed as its first two 
parameters and return the result uinsg the third one.</p>
<pre class="code">HRESULT CAASysOperator::Divide(float iDividend, float iDivisor, float * oResult)
{
  if ( 0.0 == iDivisor )
  {
    return(<strong>CATReturnFailure</strong>);
  } else 
  {
    *oResult = iDividend/iDivisor;
    return(<strong>CATReturnSuccess</strong>);
  };
}</pre>
<p>When the divisor is equal to zero, the result is undetermined. The method simply 
returns the failure using the <code>CATReturnFailure</code> return code. Otherwise, 
as long as the method can return a valid result, it returns <code>CATReturnSuccess</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Returning a Failure Using an Error Class and a Simple Message</h3>
<p>The <code>SquareRoot</code> method computes the square root of the real number 
passed as its first parameter, and returns the result in its second one. Nevertheless, 
the first parameter must be greater than or equal to zero, otherwise the square 
root doesn't exist and an error is returned.</p>
<pre class="code">HRESULT CAASysOperator::SquareRoot(float iValue, float * oResult) 
{
  if ( iValue &lt; 0.0 ) 
  {
    CAASysError * pError = new <strong>CAASysError</strong>(&quot;SquareRootERR_1001&quot;, &quot;CAASysError&quot;);
    CATUnicodeString param;
    param.BuildFromNum(iValue);
  
    int nbparameter = 1;
    pError-&gt;<strong>SetNLSParameters</strong>(nbparameter, &amp;param);
  
    return(<strong>CATReturnError(pError)</strong>);
  }
  else 
  {
    *oResult= CATSqrt(iValue);
    return(<strong>CATReturnSuccess</strong>);
  }
}</pre>
<p>When <code>iValue</code> is less than zero, an instance of the <em>CAASysError</em> 
class is created, and the message with the <code>SquareRootERR_1001</code> key in 
the <code>CAASysError</code> message catalog is associated with it. This message 
is stored in the error message file as follows:</p>
<pre class="code">SquareRootERR_1001 = &quot;Cannot compute the square root of the negative number /p1&quot;;</pre>
<p>This message includes a parameter <code>/p1</code> that must be valued at run 
time to display the invalid negative value for which the square root computation 
is requested. This float value is first converted to a <em>CATUnicodeString</em> 
instance thanks to the <code>BuildFromNum</code> method, and then the <code>SetNLSRequestParams</code> 
method associates it with the error message. Then the method returns using the macro
<code>CATReturnError</code>, taking the error class instance as parameter. The calling 
client application can use the returned error along with the message to decide what 
to do. If the square root can be computed, <code>CATReturnSuccess</code> is returned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Returning a Failure Using an Error Class and a Composite 
Message</h3>
<p>The <code>Subtract</code> method and subtracts <code>iSecond</code> from
<code>iFirst</code> and must return a positive or null result, otherwise an error 
is returned.</p>
<pre class="code">HRESULT CAASysOperator::Subtract(float iFirst, float iSecond, float * oResult) 
{
  if ( iSecond &lt;= iFirst ) 
  {
     *oResult = iFirst - iSecond;
     return(<strong>CATReturnSuccess</strong>);   
  }
  else
  {
    CAASysError * pError = new <strong>CAASysError</strong>(&quot;SubtractERR_1002&quot;, &quot;CAASysError&quot;);

//  The is no parameter for the Request part of the message
//  pError-&gt;<strong>SetNLSRequestParams</strong>(nbparameter, &amp;param);
  
    int nbparameter = 2;
    CATUnicodeString param1, param2;
    param1.BuildFromNum(iFirst);
    param2.BuildFromNum(iSecond);
    pError-&gt;<strong>SetNLSDiagnosticParams</strong>(nbparameter, &amp;param1, &amp;param2);

    nbparameter = 1;
    CATUnicodeString param3;
    param3.BuildFromNum(iFirst - iSecond);
    pError-&gt;<strong>SetNLSAdviceParams</strong>(nbparameter, &amp;param3);

    return(<strong>CATReturnError(pError)</strong>);
  }
}</pre>
<p>If the subtraction can be computed, <code>CATReturnSuccess</code> is returned. 
When <code>iSecond</code> is greater than <code>iFirst</code>, an instance of the
<em>CAASysError</em> class is created, and the message with the <code>SubtractERR_1002</code> 
key in the <code>CAASysError</code> message catalog is associated with it. This 
message is stored in the error message file as follows:</p>
<pre class="code">SubtractERR_1002.Request = &quot;Attempt to subtract two numbers using a subtraction operation
where the first number must be greater than or equal to the second one.&quot;;
      
SubtractERR_1002.Diagnostic = &quot;The first number /p1 is smaller than the second one /p2.
The subtraction can't be computed&quot;;
     
SubtractERR_1002.Advice = &quot;Check the two numbers, or invert them and multiply
the subtraction result by -1. This gives /p1&quot;;</pre>
<p>This is a composite message made of three parts: a Request part, a Diagnostic 
part, and an Advice part. It includes three parameters that must be valued at run 
time to display the two integers to subtract in the diagnostic part, and a result 
obtained thanks to a by-pass in the Advice part. The three parameters are first 
converted to <em>CATUnicodeString</em> instances thanks to the <code>BuildFromNum</code> 
method. Then the <code>SetNLSDiagnosticParams</code> method associates the first 
two parameters with the Diagnostic part of the error message, and the <code>SetNLSAdviceParams</code> 
method associates the possible result with the Advice part. Then the method returns 
using the macro <code>CATReturnError</code>, taking the error class instance as 
parameter. The calling client application can use the returned error along with 
the message to decide what to do.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving and Decoding and Error in a Client Application</h3>
<p>The <em>CAAOperator</em> class implements the <code>Subtract</code> method. A 
call to <code>Subtract</code> should be made as follows, and the program should 
go on if <code>Subtract</code> returns <code>CATReturnSuccess</code>.</p>
<pre class="code">  ...
  CAASysoperator MyOperator;
  float x, y;
  ... // Value x and y
  float PositiveResult = 0;
  HRESULT status = MyOperator.Subtract(x, y, &amp;PositiveResult);
  if (SUCCEEDED(status)) 
    ... OK, go on working
  ...</pre>
<p>Otherwise, if a failure is returned, two cases can arise, whether an error class 
instance is associated with the failure or not.</p>
<pre class="code">  ...
  else 
  {
    CATError * pError = <strong>CATError::CATGetLastError</strong>(status);
    if ( NULL != pError )
    {
      HRESULT hres = pError-&gt;<strong>GetReturnCode</strong>();
        cout &lt;&lt;&quot;  HRESULT   : &quot; &lt;&lt;  hres &lt;&lt; endl;
      
      if ( NULL != pError-&gt;<strong>GetMsgCatalog</strong>() )         // Message catalog name: CAASysError
        cout &lt;&lt;&quot;  Catalog   : &quot; &lt;&lt;  pError-&gt;GetMsgCatalog() &lt;&lt; endl;

      if ( NULL != pError-&gt;<strong>GetMsgId</strong>() )              // Message key: SubstractERR_1002
        cout &lt;&lt;&quot;  Key       : &quot; &lt;&lt;  pError-&gt;GetMsgId() &lt;&lt; endl;

      if ( NULL != pError-&gt;<strong>GetId</strong>() )                 // Error identifier: 1002      
        cout &lt;&lt;&quot;  GetId     : &quot; &lt;&lt;  pError-&gt;GetId() &lt;&lt; endl;

      // Retrieves the full message
      CATUnicodeString ErrorMessage      = pError-&gt;<strong>GetNLSMessage</strong>();
      cout &lt;&lt;&quot;  Complete Message   : &quot; &lt;&lt; endl &lt;&lt; ErrorMessage.ConvertToChar()&lt;&lt;endl&lt;&lt;endl;
        
      // Retrieves the Request message
      CATUnicodeString RequestMessage    = pError-&gt;<strong>GetNLSRequest</strong>();
      cout &lt;&lt;&quot;  Request Message    : &quot; &lt;&lt;  RequestMessage.ConvertToChar() &lt;&lt; endl;
        
      // Retrieves the Diagnostic message
      CATUnicodeString DiagnosticMessage = pError-&gt;<strong>GetNLSDiagnostic</strong>();
      cout &lt;&lt;&quot;  Diagnostic Message : &quot; &lt;&lt;  DiagnosticMessage.ConvertToChar() &lt;&lt; endl;

        // Retrieves the Advice message
      CATUnicodeString AdviceMessage     = pError-&gt;<strong>GetNLSAdvice</strong>();
      cout &lt;&lt;&quot;  Advice Message     : &quot; &lt;&lt;  AdviceMessage.ConvertToChar() &lt;&lt; endl;

      pError-&gt;<strong>Release</strong>();
    }
    else
      cout &lt;&lt; &quot;No error class to retrieve&quot;&lt;&lt; endl;
  else
    ... // Subtract OK, go on working
...</pre>
<p>First, the possible error class instance is asked to the error manager using 
the static method <code>GetLastError</code> of the <em>CATError</em> class. If an 
error class is returned, the returned code can be retrieved thanks to the <code>
GetReturnCode</code> method. Then the error is asked for a possible message, for 
example using the <code>GetMsgCatalog</code> method. If a message catalog is found, 
then the error message key and identifier can be retrieved, and the full error message 
itself, parameterized using the parameter values, can be retrieved and used for 
display, on the console, or better in a dialog box. Since this is a composite message, 
each part can be individually retrieved, thanks to the methods <code>GetNLSRequest</code>,
<code>GetNLSDiagnostic</code>, and <code>GetNLSAdvice</code>. Note that to display 
a <em>CATUnicodeString</em> instance on the console, the <code>ConvertToChar</code> 
method must be used. When the error is not any longer needed, it can be released.</p>
<p>For example, assume that the two parameters passed to <code>Subtract</code> are 
7 and 10 respectively.</p>
<pre class="code">Try to subtract 7 to 10
  HRESULT   : -2147467259
  Catalog   : CAASysError
  Key       : SubtractERR_1002
  GetId     : 1001
  Complete Message   :
Substract 2 parameters,
but the first parameter must be greater than the second parameter,
so the result is positive
The first parameter, 7, is smaller than the second, 10
Inverse the 2 parameters and multiply the result by -1: that gives -3

  Request Message    : Substract 2 parameters,
but the first parameter must be greater than the second parameter,
so the result is positive
  Diagnostic Message : The first parameter, 7, is smaller than the second, 10
  Advice Message     : Inverse the 2 parameters and multiply the result by -1: that gives -3</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create how to create, instantiate, retrieve, and decode 
an error.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaMidErrors.htm">Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
