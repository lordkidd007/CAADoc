<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Understanding Setting Repositories and Attributes</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Understanding Setting Repositories and Attributes</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Setting attributes are used to store application setting values set by 
		the end user or an administrator in property pages, managed in setting repositories, 
		and stored between working sessions in one or several setting files. This 
		article explains how to create and use settings.</p>
		<ul>
			<li><a href="#What">What Are Setting Attributes and Repositories?</a></li>
			<li><a href="#What2">What Are Setting Attributes and Repositories Made 
				Up Of?</a></li>
			<li><a href="#Using">Using Setting Repositories and Attributes</a></li>
			<li><a href="#Creating">Creating Setting Repositories and Attributes</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="What"></a>What Are Setting Attributes and Repositories?</h2>
<p>Setting attributes provide an easy way for applications to store and retrieve 
default values, or values to save and restore upon request for the parameters they 
need. For example, the application window background color is a parameter that the 
end user can modify. It needs to be saved when the end user ends the session, and 
retrieved when a new session is started. This parameter is represented as a set 
of three setting attributes, each of them being one of the RGB value of the background 
color. When the application is launched, the setting attributes are read and their 
values is assigned to the background color.</p>
<p>Setting attributes are stored in setting repositories. Each setting repository 
has a unique name used by the application to access it. The application sees the 
setting repository as an aggregate of named attributes which gathers copies of all 
the setting attributes the application has decided to save.</p>
<p>A setting repository instance can be saved in memory for temporary run time storage, 
and restored from that storage using a commit/rollback mechanism, and in a setting 
repository file for persistent storage. Each setting repository attribute has a 
current value and a default value. These two values are identical when installing 
the application, and remain identical as long as you do not modify them.</p>
<p>All setting attributes are available to the end user thanks to the <strong>Options</strong> 
command of the <strong>Tools</strong> menu. For example, the image below is a snapshot 
of the property page dealing with the background color.</p>
<p>
<img alt="Tools Options Dialog Box" height="544" src="images/CAASysMidToolsOptions.gif" width="723"/></p>
<p>Setting attribute values can be modified from this dialog. Clicking <strong>OK</strong> 
saves the modified values in the setting repository and in the associated setting 
repository file. Clicking <strong>Cancel</strong> cancels the modifications done 
in all the property pages.</p>
<p>To enable several users to share customized setting attributes values, settings 
can be administered. The administrator can change a setting attribute value so that 
all the targeted end users share that value that becomes the current and default 
value for all of them. The administrator can also lock this value to prevent the 
end users from modifying it. On the snapshot above, the locks in front of all the 
setting attributes are grayed. This indicates that none of them are locked.</p>
<p>Several administration levels can be concatenated before reaching the end user 
level. An administered setting attribute value can be re-administered at a lower 
administration level, but a locked setting attribute value cannot be unlocked or 
modified.</p>
<p>Two commands are available:</p>
<table>
	<tr>
		<td>
		<img alt="Reset Icon" height="28" src="images/CAASysMidToolsOptionsReset.gif" width="28"/></td>
		<td><strong>Reset</strong> </td>
		<td>Clicking <strong>Reset</strong> displays the <strong>Reset</strong> 
		dialog box. You can choose to reset the setting attribute values for a given 
		scope, that is, for:<ul>
			<li>The currently displayed property page</li>
			<li>All the property pages belonging to the current workbench. Workbenches 
				are the third-level items in the left part of the <strong>Options</strong> 
				window. <strong>Display</strong> is the current workbench on the 
				picture above </li>
			<li>All the property pages belonging to the current solution. Solutions 
				are the second-level items in the left part of the <strong>Options</strong> 
				window. <strong>General</strong> is the current solution on the 
				picture above. Since it has no dedicated property pages, the option 
				is grayed</li>
			<li>All the property pages belonging to the current solution and to 
				its workbenches</li>
			<li>All the property pages belonging to all solutions and to all their 
				workbenches.</li>
		</ul>
		<p>Resetting the setting attributes values means that the default values 
		or the administered values, if any, replace the end user changed values.</p>
		</td>
		<td>
		<img alt="Reset Dialog Box" height="240" src="images/CAASysMidToolsOptionsReset1.gif" width="338"/></td>
	</tr>
	<tr>
		<td>
		<img alt="Dump Icon" height="28" src="images/CAASysMidToolsOptionsDump.gif" width="28"/></td>
		<td><strong>Dump</strong> </td>
		<td>Clicking <strong>Dump</strong> displays the <strong>Dump of Parameters</strong> 
		dialog box. This command creates an Automation macro for the specified scope 
		(scopes are identical to those described for <strong>Reset</strong> above) 
		that can help you have in a file the current values of the setting attributes, 
		their default values, and whether they are administered, along with the 
		Automation objects and properties to handle them.
		<p>The created macro can then be used as a template to create your own macros 
		to change or administer the setting attributes.</p>
		</td>
		<td>
		<img alt="Dump Dialog Box" height="283" src="images/CAASysMidToolsOptionsDump1.gif" width="382"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="What2"></a>What Are Setting Repositories and Attributes Made Up Of?</h2>
<p>Setting repositories are made up of three different parts:</p>
<ol>
	<li>A setting metadata XML file</li>
	<li>A setting file</li>
	<li>Two setting memory areas at run time</li>
</ol>
<h3>A Setting Metadata XML File</h3>
<p>Setting repositories are first defined in XML files [<a href="#References">1</a>]. 
There is an XML file for each setting repository which contains the setting repository 
and attributes metadata. This XML file is used, for example, whenever a setting 
attribute is read or written, to check whether a definition for this setting attribute 
exists, and the consistency of the read or write operation against this definition. 
For example, if the setting attribute is defined as a float in the XML file, it 
cannot be read or written using a method that takes an integer as argument.</p>
<p>A setting attribute has two values in the XML file: a current value and a default 
value.</p>
<p>The XML files are located in the run time view:</p>
<pre>InstallFolder\intel_a\resources\SettingsMetadata</pre>
<p>where <code>InstallFolder</code> is the folder where you run time brand 
CD-ROM is installed.</p>
<h3>A Setting File</h3>
<p>Setting repositories are end-user and environment dependent. A set of setting 
files exists for each environment an end user accesses from his/her machine. A setting 
file has a CATSettings extension.</p>
<p>The folders used for setting files are declared using two environment variables:</p>
<ol>
	<li><code>CATReferenceSettingPath</code> to declare the administrator folder 
		pathnames</li>
	<li><code>CATUserSettingPath</code> to declare the user folder pathnames.</li>
</ol>
<p>The folder pathnames declared using <code>CATReferenceSettingPath</code> can 
only be read by the user and are aimed to be shared by several users. Through the 
applications they use, the users can not add or delete setting attributes in files 
located in these folders.</p>
<p>The administrator can choose two ways for the users to manipulate the files located 
in these folders through the applications they use:</p>
<ol>
	<li>Allowing for overloading of a file in a user folder the pathname of which is 
		declared using the <code>CATUserSettingPath</code> variable. This is made 
		possible by setting the file mode to <code>rwxr--r--</code></li>
	<li>Preventing from overloading a file is made possible by setting the file 
		mode to <code>rw-r--r--</code></li>
</ol>
<p>The variable <code>CATReferenceSettingPath</code> must be valued and has no default 
value. The variable <code>CATUserSettingPath</code> has the user's $HOME/CATSettings 
folder as default value with UNIX and
C:\Documents&nbsp;and&nbsp;Settings\username\Application&nbsp;Data\DassaultSystemes\CATSettings
with Windows.</p>
<p>The pathnames declared by these variables are concatenated: first those of
<code>CATReferenceSettingPath</code>, then those of <code>CATUserSettingPath</code> 
and files are searched for in this order. The first file found is taken.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Two Setting Memory Areas</h3>
<p>Once the application is launched and a setting repository accessed, the setting 
attributes are read from the setting file and stored in a memory area. If the setting 
file does not exist, it is created from the XML file. If the end user changes the 
value of a setting attribute during the session using the <strong>Options</strong> 
command of the <strong>Tools</strong> menu and clicks OK, this new value becomes 
the setting attribute current value in the memory area and in the setting file. 
The XML file is not changed. If the end user clicks <strong>Reset</strong> within 
the scope of this setting attribute, its default value is used as the new current 
value in the memory area and in the setting file. Again, the XML file is not changed.</p>
<p>If the setting attribute default value is changed by an administrator, this administered 
value is is used. If in addition the administrator has locked the setting attribute 
value, the end user cannot modify this administered value.</p>
<p>They are accessed using their names. If the setting repository searched for with 
a given name does not exist, it is created as an empty setting repository with this 
name. A setting repository must exist prior to the session as an XML file located 
in the run time view</p>
<p>In addition, a commit/rollback mechanism using the generic or specific setting 
controller methods <code>Commit</code> and <code>Rollback</code> allows you to save 
the current state of a setting repository in memory, and to restore the state upon 
request. This save is dedicated to be used within the application and is lost when 
exiting.</p>
<p>To save a setting repository as a disk file, use the method <code>SaveRepository</code>, 
which also executes the <code>Commit</code> method. This is the method to use for 
a persistent save.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Using"></a>Using Setting Repositories and Attributes</h2>
<p>A setting repository is handled using a setting repository controller, either 
the generic controller <em>CATSysSettingRepository</em>, or a dedicated controller 
when the generic one cannot apply. The generic controller and the specific ones 
have all an Automation counterpart that enables administrators and possibly end 
users to retrieve, change, and administrate sets of setting attributes. If Automation 
is more convenient for administrators, a C++ application could nevertheless be created 
for this purpose.</p>
<p>The generic setting controller offers a method to retrieve a setting repository. 
A setting controller, either generic of specific, offer methods to read or write 
its setting attribute values. It also provides methods to save the setting repository, 
either in memory or on disk, to lock setting attributes and to restore the default 
or administered values.</p>
<p>Using setting attributes from an application standpoint should be limited to 
retrieve a setting repository and read attribute values, except if the application 
is dedicated to setting administrators. You must never change a setting attribute 
value without the end user knows. If the setting attribute value is administered, 
you will overwrite the administrated values. In addition, if it is locked, you will 
not be able to change the value while you believe having done it. Modifying a setting 
attribute value can only be done from the property page dialog created by the setting 
repository owner, from Automation macros or a C++ application created and run by 
administrators.</p>
<p>Setting attributes can have the following types:</p>
<ul>
	<li>character (char)</li>
	<li>integer</li>
	<li>short integer</li>
	<li>unsigned integer</li>
	<li><strong>long nodoc</strong></li>
	<li>double</li>
	<li>float</li>
	<li>CATString</li>
	<li>CATUnicodeString</li>
	<li>pointer to CATSysTSURI (Thread Safe Uniform Resource Identifier)</li>
</ul>
<p>Arrays of all these types can also be managed.</p>
<p>In addition to its current and default values, a setting attribute can hold two 
other data:</p>
<ol>
	<li>The lock status</li>
	<li>The origin of the setting attribute value</li>
</ol>
<p>With team working, applications must behave the same way for each team member. 
This implies that some setting attributes keep the same values for all the team 
members. To allow for this setting attributes can be administered. The administrator 
can change some values to match the team needs, and can lock these changed values, 
or some unchanged ones if they match the team needs as they are.</p>
<p>In addition, in large companies, several levels of administrators can in turn 
change and lock setting attribute values. A company administrator deals with setting 
attributes all end user teams must share. A departmental administrator refines the 
values and locks to latch the department needs. A team-level administrator can then 
go on refining to match the team needs. If an administrator, or an end user, can 
modify a non locked setting attribute value set by a higher level administrator, 
he/she cannot unlock and consequently cannot change the value of a locked setting 
attribute.</p>
<p>Again, and even if setting attributes can be locked in a C++ application, you 
should never do this. This is an administrator job that can be only performed by 
administrators, interactively, using Automation macros, or possibly a dedicated 
setting administration application.</p>
<p>So what can you then do with locks? You can retrieve the lock status from the 
setting attribute, and from where comes the current setting attribute value.</p>
<p>The lock status can take three states:</p>
<p>In CATSettingInfo</p>
<ol>
	<li>Green: the setting attribute is not locked</li>
	<li>Orange: the setting attribute is locked by the administrator running the 
		session, and thus can be unlocked by this administrator</li>
	<li>Red: the setting attribute is locked</li>
</ol>
<p>In CATSysSettingRepository</p>
<ol>
	<li>Unlocked: the setting attribute is not locked</li>
	<li>Locked: the setting attribute is locked by the administrator running the 
		session, and thus can be unlocked by this administrator</li>
	<li>Upper Locked: the setting attribute is locked</li>
</ol>
<p>In CATSettingInfo</p>
<p>The setting attribute value origin is the folder path name where the administrator 
has changed and/or locked the setting attribute value. This folder is concatenated 
in the <code>CATReferenceSettingPath</code> environment variable. If no administration 
takes place, the end user setting path name is returned. It is set in the <code>
CATUserSettingPath</code> environment variable.</p>
<p>In CATSysSettingRepository</p>
<ul>
	<li>Not administrated: The attribute is not administrated</li>
	<li>Admin Level i: The Parameter is set at the level i of the CATReferenceSettingPath</li>
</ul>
<p>Refer to [<a href="#References">2</a>] to know about how to use setting repositories 
and attributes with the generic controller.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Creating"></a>Creating Setting Repositories and Attributes</h2>
<p>The steps to create setting repositories and attributes are:</p>
<ul>
	<li>Create the setting XML file [<a href="#References">1</a>] [<a href="#References">x</a>]</li>
	<li>Create a property page showing the setting attributes for the Options command 
		[<a href="#References">4</a>]</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Setting repositories and attributes are </p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocSettingXML.htm">
		Settings Creation Guidelines</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaMidSettingHowTo.htm">How to Use Settings</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Feb 2007]</td>
		<td>Document updated for XML settings</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
