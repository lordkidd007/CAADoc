<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Character Strings</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Character Strings</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and use character strings and how to 
		retrieve messages in message catalog.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCharStrings Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCharStrings Do</a></li>
					<li><a href="#How">How to Launch CAASysCharStrings</a></li>
					<li><a href="#Where">Where to Find the CAASysCharStrings Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and use character strings, 
and messages stored in message catalogs and in resources catalog.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCharStrings Case</h2>
<p>CAASysCharStrings is a use case of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCharStrings Do</h3>
<p>This use case creates and uses character strings.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCharStrings</h3>
<p>To launch CAASysCharStrings, you will need to set up the build time environment, 
then compile CAASysCharStrings along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCharStrings Code</h3>
<p>The CAASysCharStrings use case is made of a several classes located in the CAASysCharStrings.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCharStrings.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The character string capabilities are shown using five steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Retrieve a Simple Message in a Message Catalog</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Retrieve a Parameterized Message in a Message Catalog</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Retrieve a Simple Value in a Resource Catalog</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Message Catalog Files Format</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create a CATUnicodeString from a wchar_t</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Convert a CATUnicodeString to UTF8 and to STEP</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Convert CATUnicodeString to numerals and the reverse</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving a Simple Message in a Message Catalog</h3>
<pre class="code">...
  CATString ExampleMsgCatalogName(&quot;CAASysCharStrings&quot;);
  CATString ExampleMsgCatalogKey(&quot;CAASystemCharacterStrings.MessageWithoutParameter&quot;);
  CATUnicodeString ExampleBuiltMessage;
  ExampleBuiltMessage = <strong>CATMsgCatalog::BuildMessage</strong>(ExampleMsgCatalogName,
                                                    ExampleMsgCatalogKey);
...</pre>
<p>A message catalog contains strings to display which must be translated into languages. 
A message catalog should only contain strings which must be translated into other 
languages, to store US-ASCII encoded strings, resource catalogs should be used. </p>
<p>The two <em>CATString</em> instances created are the message catalog name and 
the key of the message to search for in the catalog respectively. The static
<code>BuildMessage</code> method retrieves the message as a <em>CATUnicodeString</em> 
instance that can be used, for example, for display in a dialog box.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving a Parameterized Message in a Message Catalog</h3>
<pre class="code">...
  CATString MsgCatalogName(&quot;CAASysCharStrings&quot;);
  CATString MsgCatalogKey(&quot;CAASystemCharacterStrings.MessageWithTwoParameters&quot;);

  CATUnicodeString DefaultMessage = 
     &quot;A problem occurred while loading the CAASysCharStrings.CATNls file&quot;;

  int ParametersCount = 2;
  CATUnicodeString Parameters[2];
  Parameters[0] = &quot;First Param&quot;;
  Parameters[1] = &quot;Second Param&quot;;

  CATUnicodeString BuiltMessage;
  BuiltMessage = <strong>CATMsgCatalog::BuildMessage</strong>(MsgCatalogName,
                                             MsgCatalogKey,
                                             Parameters,
                                             ParametersCount,
                                             DefaultMessage);
...</pre>
<p>The two <em>CATString</em> instances created are the message catalog name and 
the key of the message to search for in the catalog respectively. A default message 
is created to be issued if the message catalog loading fails. Two parameters are 
created in the <code>Parameters</code> array. To be merged with the message extracted 
from the catalog, they must be <em>CATUnicodeString</em> instances. The static
<code>BuildMessage</code> method retrieves the message as a <em>CATUnicodeString</em> 
instance and puts the parameters at the place reserved for them in the message, 
the first parameter in the array being placed at the first parameter location in 
the message, and so on. Then the message can be used, for example, for display in 
a dialog box.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving a Simple Value in a Resource Catalog</h3>
<pre class="code">...
  CATString ExampleRscCatalogName(&quot;CAAAfrGeneralWksAddinHeader&quot;);
  CATString ExampleRscCatalogKey(&quot;CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Icon.Normal&quot;);
  CATString ExampleBuiltResourceValue(&quot;CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Icon.Normal&quot;);

  CATRscCatalog::BuildResource(ExampleRscCatalogName,ExampleRscCatalogKey,ExampleBuiltResourceValue);
...</pre>
<p>Resource Catalogs must be used for all non hard-coded strings which must not 
be translated into other languages.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Message Catalog Files Format</h3>
<p>The message catalog files (.CATNls) contain a list of messages. They are text 
files,  encoded in the UTF-8 code page. Legacy encodings (as described in former versions of this documentation) will be supported during two releases, starting from 3DEXPERIENCE R2015x.</p>
<p>On Windows, they are located in the folder <OS>\resources\msgcatalog of the runtime view. A 
message catalog file contains several messages. When a message may take several 
lines, it is possible to enter it in several parts (compound message). Thus, the 
message will be more readable. Each message has the following syntax:</p>
<pre>CATNls ::= Header <CARRIAGE RETURN>+ <LINE FEED> Message*
Header ::= "<meta charset="UTF-8"/>"
Message ::= SpacesOrComment* Key SpacesOrComment* &lt;EQUALS SIGN&gt;
            SpacesOrComment* MessagePart
            ( &lt;COMMA&gt; SpacesOrComment* MessagePart )* SpacesOrComment* &lt;SEMICOLON&gt;
 
Key ::= [a-z A-Z 0-9 . _]+
 
MessagePart ::= &lt;QUOTATION MARK&gt;
                ( EffectiveCharacter | ControlCharacter |
                  FormalParameter | SlashExpression )*
                 &lt;QUOTATION MARK&gt;

EffectiveCharacter ::= &lt;character encoded in the supported code page (see  above),
                        except control characters,
                        the SOLIDUS character (slash) and the REVERSE SOLIDUS character&gt;

ControlCharacter ::= &lt;REVERSE SOLIDUS&gt;
                      ( &lt;QUOTATION MARK&gt; | &lt;LATIN SMALL LETTER N&gt; | &lt;LATIN SMALL LETTER T&gt; |
                        &lt;LATIN SMALL LETTER A&gt; | &lt;LATIN SMALL LETTER B&gt; |
                        &lt;LATIN SMALL LETTER F&gt; | &lt;LATIN SMALL LETTER R&gt; |       
                        &lt;LATIN SMALL LETTER V&gt; )

FormalParameter ::= ( &lt;LATIN CAPITAL LETTER P&gt; | &lt;LATIN SMALL LETTER P&gt; ) [0-9]*

SlashExpression ::= ( &lt;SOLIDUS (slash)&gt; &lt;any character except LATIN CAPITAL LETTER P and
                       LATIN SMALL LETTER P&gt; ) |
                    ( &lt;SOLIDUS&gt; &lt;SOLIDUS&gt;
                    ( &lt;LATIN CAPITAL LETTER P&gt; | &lt;LATIN SMALL LETTER P&gt; ) )

SpacesOrComment ::= SpaceCharacter* |
                    ( &lt;SOLIDUS (slash)&gt; &lt;SOLIDUS (slash)&gt; &lt;any character except '\n' and '\0'&gt;*  &lt;'\n'&gt; )

SpaceCharacter ::= &lt;SPACE&gt; | &lt;CARRIAGE RETURN&gt; | &lt;LINE FEED&gt; | &lt;CHARACTER TABULATION &gt; |
                   &lt;LINE TABULATION&gt;
</pre>
<p><strong>Notes</strong>:</p>
<ul>
	<li>Regarding the ControlCharacter entity, if it is valued to &lt;REVERSE SOLIDUS&gt;&lt;QUOTATION 
		MARK&gt;, then, in the effective displayed message, it will have been converted 
		to &lt;QUOTATION MARK&gt;. &lt;REVERSE SOLIDUS&gt;&lt;LATIN SMALL LETTER 
		N&gt;, &lt;REVERSE SOLIDUS&gt;&lt;LATIN SMALL LETTER T&gt;, etc., are converted 
		the same way.</li>
	<li>Regarding the SlashExpression entity, if it is valued to &lt;SOLIDUS&gt;&lt;SOLIDUS&gt;&lt;LATIN 
		CAPITAL LETTER P&gt; , then, in the effective displayed message, it will 
		have been converted to &lt;SOLIDUS&gt;&lt;LATIN CAPITAL LETTER P&gt; . &lt;SOLIDUS&gt;&lt;SOLIDUS&gt;&lt;LATIN 
		SMALL LETTER P&gt; is converted the same way.</li>
</ul>
<p><strong>Caution</strong>: EffectiveCharacter entities must be valid UTF-8 characters, otherwise parsing of the message catalog file will fail.</p>
<p><strong>Caution</strong>: Each key must be present only once in a given file.</p>
<p><strong>Examples</strong>:</p>
<pre class="code">Message1 = &quot;This is a simple english message.&quot;;
Message2 = &quot;This message includes the parameter /P1 that is valued by your application at run-time.&quot;;
Message3 = &quot;This is a&quot;, &quot;compound &quot;, &quot;message.&quot;;
Message4 = &quot;You can use control characters such as \t or \n in your messages.&quot;;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a CATUnicodeString from a wchar_t</h3>
<pre class="code">...
  wchar_t* CLanguageUnicodeString = L&quot;Unicode string&quot;;
  int CharacterCount = wcslen(CLanguageUnicodeString);

  CATUC2Bytes *UnicodeCharacters = new <strong>CATUC2Bytes</strong>[CharacterCount];
  for (int i=0; i&lt;=CharacterCount; i++) 
     UnicodeCharacters[i] <strong>=</strong> CLanguageUnicodeString[i];

  CATUnicodeString UnicodeString;
  UnicodeString.<strong>BuildFromUCChar</strong>(UnicodeCharacters, CharacterCount);
  delete UnicodeCharacters;
...</pre>
<p>A <code>wchar_t</code> string is created and its length is retrieved thanks to 
the <code>wcslen</code> function. Then a <em>CATUC2Bytes</em> table is instantiated 
with the string length as size, and filled in with the <code>wchar_t</code> string. 
The <em>CATUC2Bytes</em> class represents the Unicode character encode using two 
bytes, and its assignment operator converts <code>wchar_t</code> to <em>CATUC2Bytes</em> 
instances. Then a <em>CATUnicodeString</em> instance is created using the <em>CATUC2Bytes</em> 
table, thanks to the <code>BuildFromUCChar</code> method..</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Converting a CATUnicodeString to UTF8 and to STEP</h3>
<pre class="code">...
  CATUnicodeString StringToConvert = &quot;String&quot;;
  char *UTF8String = new char[4+6*(StringToConvert.GetLengthInChar())];
  size_t UTF8StringByteCount;
  StringToConvert.<strong>ConvertToUTF8</strong>(UTF8String, &amp;UTF8StringByteCount);
  ... // Display UTF8String

  char *STEPString = new char[50];
  StringToConvert.<strong>ConvertToSTEP</strong>(STEPString);
  cout &lt;&lt; &quot;STEP String = &quot; &lt;&lt; STEPString &lt;&lt; endl;
  delete STEPString;
...</pre>
<p>A <em>CATUnicodeString</em> instance is converted as an array of characters expressed 
using the UTF8 Unicode format thanks to the <code>ConvertToUTF8</code> method. The 
array size takes the maximum possible size of the character string, whose actual 
length is returned in <code>UTF8StringByteCount</code>. Then the <code>ConvertToSTEP</code> 
method converts the same string to the character string format used by the STEP 
standard.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Converting CATUnicodeString to Numerals and the Reverse</h3>
<pre class="code">...
  StringToConvert = &quot;1250&quot;;
  int OutputInteger;
  int IsConversionOK = StringToConvert.<strong>ConvertToNum</strong>(&amp;OutputInteger);
  StringToConvert = &quot;1250.12&quot;;
  double OutputReal;
  IsConversionOK = StringToConvert.<strong>ConvertToNum</strong>(&amp;OutputReal);

  int InputInteger = 253;
  CATUnicodeString StringToFill;
  int FillingWasOK = StringToFill.<strong>ConvertNumToString</strong>(InputInteger);
  double InputReal = 253.57;
  FillingWasOK = StringToFill.<strong>ConvertNumToString</strong>(InputReal);
...</pre>
<p>The <code>ConvertToNum</code> method converts a <em>CATUnicodeString</em> instance 
into an integer or a double. conversely, the <code>ConvertNumToString</code> method 
converts an integer or a double into a <em>CATUnicodeString</em> instance. The conversion 
succeeds if the returned integer is different from 0.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create and use character strings and how to retrieve 
messages from message catalogs.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2014]</td>
		<td>Change Format for UTF8 code page</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
