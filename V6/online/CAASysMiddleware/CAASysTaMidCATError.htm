<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using an Error Class with HRESULTs or Exceptions</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using an Error Class with HRESULTs or Exceptions</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to use error classes and messages, and how 
		to create new ones.</p>
		<ul>
			<li><a href="#100000">What Are Error Classes?</a></li>
			<li><a href="#200000">Instantiating Existing Error Classes</a></li>
			<li><a href="#300000">Filling In the Error Message with Run Time Parameter 
				Values</a></li>
			<li><a href="#400000">Setting the Error Type and Identifier</a></li>
			<li><a href="#430000">Informing the End User with a Prompt Box</a></li>
			<li><a href="#440000">Tracing the Error</a></li>
			<li><a href="#450000">Analyzing the Error</a> </li>
			<li><a href="#500000">Creating New Error Messages</a></li>
			<li><a href="#600000">Creating New Error Classes</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>What Are Error Classes?</h2>
<p>When you design and code your methods, and when the process goes out of the scope 
you have determined without being able to recover, you either return to the caller 
a HRESULT value stating that an error occurs or throw an exception. You associate 
with this HRESULT or make up the exception with an error class instance to convey 
the error severity, the error message, possibly filled with parameters you get from 
your method's variable values to show why the method goes out of its scope, and 
if the error class has data members, you can pass these variable values using these 
data members to the caller or exception catcher.</p>
<p>Dealing with error classes includes mainly:</p>
<ul>
	<li><a href="#200000">Instantiating Existing Error Classes</a></li>
	<li><a href="#300000">Filling In the Error Message with Run Time Parameter Values</a></li>
	<li><a href="#400000">Setting the Error Type and Identifier</a></li>
	<li>Possibly <a href="#500000">Creating New Error Messages</a></li>
	<li>Possibly <a href="#600000">Creating New Error Classes</a>.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Instantiating Existing Error Classes</h2>
<p>When you want to convey information with a returned HRESULT or throw an exception, 
you need to instantiate an existing error class</p>
<p>Choose an existing error class that matches the error. Avoid to create new error 
classes. In the same way, choose an existing error message that matches the error. 
Avoid to create new ones.</p>
<p>When you want to convey information with a returned HRESULT or throw an exception, 
you need to instantiate an existing error class, as follows:</p>
<pre class="code">...
  CATResourceError * pError = new CATResourceError(&quot;FileERR_2000&quot;,
                                                   &quot;CATFileErrorCatalog&quot;); 
...</pre>
<p>The first parameter is the error message key, without the possible suffix used 
as a descriptor, and the second parameter is the error message catalog file name, 
without extension. The file is named in this case CATFileErrorCatalog.CATNls and 
should be found in the folder concatenation set by the CATMsgCatalogPath environment 
variable at run time.</p>
<p>An error class that is not created using the macros may have additional constructor 
arguments, and may have initialization methods to call. If the error class you use 
has data members, they are intended to pass parameter values to the caller or exception 
catcher. Use run time values of appropriate variables of your method to value these 
parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Filling In the Error Message with Run Time Parameter Values</h2>
<p>If the error message includes parameters to value at run time, you should supply 
these values. To do this, convert the appropriate variables of your methods as CATUnicodeString 
instances, and assign them to the error class instance just created to build the 
message with these values.</p>
<ul>
	<li>For a character string or a CATString instance, do the following:
		<pre class="code">...
  char * pFileName = &quot;CATError.CATNls&quot;;
  CATUnicodeString Param1(pFileName);

  CATString FolderName(&quot;msgcatalog&quot;);
  char * pFolderName = FolderName.CastToCharPtr(); // First cast the CATString instance into a char *
  CATUnicodeString Param2(pFolderName);

  pError-&gt;<code>SetNLSParameters</code>(2, &amp;Param1, &amp;Param2);
...</pre>
		<p>The parameter names, such as <code>Param1</code> has no importance. They 
		should just be converted to <em>CATUnicodeString</em> instances and passed 
		to the error class using the appropriate method, here the <code>SetNLSParams</code> 
		method. The first parameter is the count of parameters to pass, and these 
		parameters should then be passed in the same order than in the message file. 
		In this case, the variable <code>pFileName</code> is supposed to be a pointer 
		to char, thus allowing the use of a <em>CATUnicodeString</em> constructor. 
		The second one is a <em>CATString</em> instance, and must first be converted 
		into a pointer to char using the <code>CastToCharPtr</code> method before 
		being passed to the <em>CATUnicodeString</em> constructor.</p>
	</li>
	<li>For a numeric parameter, use the <code>BuildFromNum</code> method, as follows:
		<pre class="code">...
  int i = 10;
  double x = 2.45;

  CATUnicodeString Param1, Param2;
  Param1.BuildFromNum(i);
  Param2.BuildFromNum(x);

  pError-&gt;<code>SetNLSParameters</code>(2, &amp;Param1, &amp;Param2);
...</pre>
		<p>The parameter to convert into a <em>CATUnicodeString</em> class instance 
		with <code>BuildFromNum</code> can be an int, a long, an unsigned long, 
		a double, or a long double.</p>
	</li>
</ul>
<p>If the message to use is a single one, use the <code>SetNLSParameters</code> 
method. If you have a composite message, set the parameters, if any, for each message 
of your composite message separately using the <code>SetNLSRequestParams</code>,
<code>SetNLSDiagnosticParams</code>, and <code>SetNLSAdviceParams</code> methods 
respectively. Refer to <a href="#500000">Creating New Error Messages</a> to know 
more about error messages.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>Setting the Error Type and Identifier</h2>
<p>The error type and identifier are associated with the error to help the caller 
understand what happens and how to handle the error.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="410000"></a>Setting the Error Type</h3>
<p>The type of the error describes its severity. An error can have the following 
types, whose values are taken from the <code>CATErrorType</code> enumeration, and 
the associated prompts are as follows:</p>
<table>
	<tr>
		<td>
		<img alt="Critical Error Pop Up" height="178" src="images/CAASysMidError1.jpg" width="360"/></td>
		<td><code>CATErrorTypeCritical</code>: a real problem occurs, and the method 
		cannot complete. It returns when the problem occurs. This is the default 
		if you don't set the error type. The associated prompt box must be an instance 
		of the <code>CATDlgNotify</code> class with the <code>CATDlgNfyError</code> 
		style.</td>
	</tr>
	<tr>
		<td>
		<img alt="Fatal Error Pop Up" height="178" src="images/CAASysMidError4.jpg" width="360"/></td>
		<td><code>CATErrorTypeFatal</code>: the method stops with no possible recovery. 
		The associated prompt box must be an instance of the <code>CATDlgNotify</code> 
		class with the <code>CATDlgNfyAbortRetryIgnore</code> style.</td>
	</tr>
	<tr>
		<td>
		<img alt="Warning Pop Up" height="178" src="images/CAASysMidError2.jpg" width="360"/></td>
		<td><code>CATErrorTypeWarning</code>: something happens that doesn't stop 
		the method which completes, but returns a warning. The associated prompt 
		box must be an instance of the <code>CATDlgNotify</code> class with the
		<code>CATDlgNfyWarning</code> style.</td>
	</tr>
	<tr>
		<td>
		<img alt="Information Pop Up" height="178" src="images/CAASysMidError3.jpg" width="360"/></td>
		<td><code>CATErrorTypeInformation</code>: there is no error and the method 
		successfully completes, but this information can be handy. The associated 
		prompt box must be an instance of the <code>CATDlgNotify</code> class with 
		the <code>CATDlgNfyInformation</code> style.</td>
	</tr>
</table>
<p>The type is set using the <code>SetType</code> method. It takes the error type 
as parameter:</p>
<pre class="code">...
  pError-&gt;SetType(CATErrorTypeFatal);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="420000"></a>Setting the Error Identifier</h3>
<p>The error identifier is part of the message key and deduced from it when passed 
to the constructor. Refer to <a href="#500000">Creating New Error Messages</a> to 
know which part of the message key is used as error identifier.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="430000"></a>Informing the End User with a Prompt Box</h2>
<p>You can send the error message to the end user in a prompt box using a <em>CATDlgNotify</em> 
class instance, as follows.</p>
<pre class="code">...
  CATDlgNotify * pPromptBox = new CATDlgNotify(pParent, &quot;Error&quot;, CATDlgNfyAbortRetryIgnore);
  pPromptBox-&gt;SetTitle(pOccurringError-&gt;GetNLSSource());
  pPromptBox-&gt;SetText(pOccurringError-&gt;GetNLSMessage());
  pPromptBox-&gt;SetVisibility(CATDlgShow);
...</pre>
<p>User the following styles according to the error type [<a href="#References">2</a>]:</p>
<table>
	<tr>
		<th>Error Type</th>
		<th>Style</th>
	</tr>
	<tr>
		<td><code>CATErrorTypeCritical</code></td>
		<td><code>CATDlgNfyError</code></td>
	</tr>
	<tr>
		<td><code>CATErrorTypeFatal</code></td>
		<td><code>CATDlgNfyAbortRetryIgnore</code></td>
	</tr>
	<tr>
		<td><code>CATErrorTypeWarning</code></td>
		<td><code>CATDlgNfyWarning</code></td>
	</tr>
	<tr>
		<td><code>CATErrorTypeInformation</code></td>
		<td><code>CATDlgNfyInformation</code></td>
	</tr>
</table>
<p>You should simply set the title using the <code>GetNSLSource</code> method, and 
the text using the <code>GetNSLMessage</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="440000"></a>Tracing the Error</h2>
<p>If the error is a major one, you must trace it. Error traceability is possible 
using two macros:</p>
<ul>
	<li><code>CATSysLogAbend</code> that logs a message passed as parameter, the 
		source where it is called, and the line in the source in the abend log, 
		and:<br />
		<ul>
			<li>In a customer environment, it then resumes running</li>
			<li>In a development environment, it abends.</li>
		</ul>
		<p>The code where the trace is located must not contain any test or branch 
		instruction:</p>
		<pre class="code">if (NULL == pPointer)
{
  ... // Cleaning
  <strong>CATSysLogAbend</strong>(&quot;This pointer should never be NULL&quot;);
  return <strong>CATReturnFailure</strong>;
}</pre>
	</li>
	<li><code>CATSysLogError</code> that logs a message like <code>CATSysLogAbend</code> 
		in the potential abend log, but doesn't abend, either in a customer or development 
		environment. Its typical use is to test an argument:
		<pre class="code">if (NULL == pInputPointer)
{
  ... // Cleaning
  <strong>CATSysLogError</strong>(&quot;Invalid NULL input pointer&quot;);
  return <strong>CATReturnFailure</strong>;
}</pre>
	</li>
</ul>
<p>The messages are passed as character strings to be logged in the abend log. They 
must be written in correct english since they can be read by the customer.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="450000"></a>Analyzing the Error</h2>
<p>You can can analyze the error class instance using the following methods:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>Data to Analyze</th>
		<th>Method</th>
		<th>Comment</th>
	</tr>
	<tr>
		<td>Error class base class name</td>
		<td><code>IsAKindOf</code></td>
		<td>The error class base class name helps you determine which kind of error 
		happens</td>
	</tr>
	<tr>
		<td>Error class name</td>
		<td><code>ClassName</code></td>
		<td>The error class name helps you call the class methods or retrieve data 
		members, if any</td>
	</tr>
	<tr>
		<td>Return code</td>
		<td><code>GetReturnCode</code></td>
		<td>The return code helps you determine the code returned</td>
	</tr>
	<tr>
		<td>Error severity</td>
		<td><code>GetInformationOnErrorType</code></td>
		<td>The error severity helps you decide if the error is critical, fatal, 
		a warning, or an information</td>
	</tr>
	<tr>
		<td>Error context</td>
		<td><code>GetSourceContext</code></td>
		<td>The source context is the name of the application that issues the error 
		(CATIA by default)</td>
	</tr>
	<tr>
		<td>Error source</td>
		<td><code>GetNLSSource</code></td>
		<td>The error source is made up of a concatenation of the source context, 
		the error message catalog file name, and the error message key</td>
	</tr>
	<tr>
		<td>Error identifier</td>
		<td><code>GetId</code></td>
		<td>The error identifier helps you precisely identify the error</td>
	</tr>
	<tr>
		<td>Error message key</td>
		<td><code>GetMsgId</code></td>
		<td>The error message key helps you determine the message associated with 
		the error</td>
	</tr>
	<tr>
		<td>Error message catalog</td>
		<td><code>GetMsgCatalog</code></td>
		<td>The error message catalog helps you determine where the error message 
		is stored</td>
	</tr>
	<tr>
		<td>Error message</td>
		<td><code>GetNLSMessage</code></td>
		<td>The error message is retrieved as built by the caller with parameters 
		valued</td>
	</tr>
	<tr>
		<td>Request part of the message</td>
		<td><code>GetNLSRequest</code></td>
		<td>As above, for the Request part of the error message</td>
	</tr>
	<tr>
		<td>Diagnostic part of the message</td>
		<td><code>GetNLSDiagnostic</code></td>
		<td>As above, for the Diagnostic part of the error message</td>
	</tr>
	<tr>
		<td>Advice part of the message</td>
		<td><code>GetNLSAdvice</code></td>
		<td>As above, for the Advice part of the error message</td>
	</tr>
	<tr>
		<td>Source file name</td>
		<td><code>GetSourceFileName</code></td>
		<td>The source file name is the path name of the source file in which the 
		error occurs</td>
	</tr>
	<tr>
		<td>Source line number</td>
		<td><code>GetSourceLineNumber</code></td>
		<td>The source line number is the number of the line in the source filewhere 
		the error occurs</td>
	</tr>
</table>
<p>If the error is a major one, you must trace the error, as described in
<a href="#440000">Tracing the Error</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>Creating New Error Messages</h2>
<p>The message associated with the error is stored in a message catalog file. This 
allows for message translation or customization. The message catalog file should 
be created as a text file in the CNext\resources\msgcatalog folder for the english 
version, and in:</p>
<ul>
	<li>CNext\resources\msgcatalog\German for the german version</li>
	<li>CNext\resources\msgcatalog\French for the french version</li>
	<li>CNext\resources\msgcatalog\Japanese for the japanese version</li>
</ul>
<p>and should be suffixed using CATNls. This file is put in the run time view thanks 
to the mkCreateRuntimeView command, and found using the CATMsgCatalogPath environment 
variable set by the mkrun command.</p>
<p>Assume that the following message is extracted from the CAAFileErrorCatalog.CATNls 
file.</p>
<p>An error message is associated with a key that must be unique in the message 
file and used in the code to fetch the message. It is generally a composite message, 
made of three elementary messages, as follows:</p>
<pre class="code">...
FileERR_1999.Request    = &quot;Attempt to open the file /p&quot;;
FileERR_1999.Diagnostic = &quot;This file is not found&quot;; 
FileERR_1999.Advice     = &quot;Locate this file or try another one&quot;;
...</pre>
<p>Messages have the following structure.</p>
<p>
<img alt="Error Message Structure" height="134" src="images/CAASysMidError1.gif" width="505"/></p>
<p>The key must be unique in a message catalog file, and is built using a prefix 
of your own, here <code>File</code>, followed by the error identifier, here
<code>ERR_1999</code>. The descriptor is separated from the key by a dot, like a 
suffix, such as <code>Diagnostic</code>. The prefix and the descriptor are not required, 
but the error identifier must always be <code>ERR_nnnn</code>, where <code>ERR</code> 
is required and <code>nnnn</code> must be an integer. The error identifier must 
also be unique for a given message catalog file.</p>
<p>Even if you think to write three different messages with the three descriptors 
given above, they are handled as a single message using the message key. Nevertheless, 
you need to set their parameters using the <code>SetNLSRequestParams</code>,
<code>SetNLSDiagnosticParams</code>, and <code>SetNLSAdviceParams</code> methods 
respectively.You can also create a message without descriptors, such as the following:</p>
<pre class="code">...
FileERR_2000 = &quot;File /p not found.\nTry another one.&quot;;
...</pre>
<p>When you write your error messages, classify the information to pass to the end 
user using the descriptor:</p>
<ul>
	<li>Request: describes the attempted action that fails</li>
	<li>Diagnostic: describes the cause of the failure</li>
	<li>Advice: describes what to do for the attempted action to succeed, or gives 
		a by-pass.</li>
</ul>
<p>As any message, an error message can contain parameters. The value of these parameters 
are set at run time. To include parameters in your message, use the <code>/p</code> 
keyword. You can also use <code>/P</code>, or <code>/p1</code>, <code>/p2</code>, 
or also <code>/P1</code>, <code>/P2</code>, and so on. Each time such a keyword 
is found in the message, it is candidate to be filled in by a run time value. If 
no value is passed for a given parameter, it is replaced by ?? in the displayed 
message. The following is an example of an error message with parameters.</p>
<pre class="code">SketchLimitERR_0010.Request    = &quot;The selected elements /p1 and /p2 cannot be relimited&quot;;
SketchLimitERR_0010.Diagnostic = &quot;Lengthed elements cannot be relimited.\nTheir lengthes are:
\t/P1 for first element /p2
\t/P3 for second element /p4
They are converted into distances.&quot;;
SketchLimitERR_0010.Advice     = &quot;To relimit, do not select lengthed elements&quot;; </pre>
<p>Note that you can use special characters, such as \n or \t. This message is displayed 
at run time in a prompt as follows:</p>
<p>
<img alt="Critical Error Pop Up" height="178" src="images/CAASysMidError1.jpg" width="360"/></p>
<p>The title of the prompt box is made of the error source, that is, the concatenation 
of the running context, the error message catalog file, and the error message key. 
The running context, here CNext, is the name of the application from which the error 
is issued. The messages are displayed in the Request-Diagnostic-Advice order. The 
icon shown in the prompt box depends on the <a href="#400000">error type</a> set 
at run time.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="600000"></a>Creating New Error Classes</h2>
<p>An error class can be used for several errors dealing with a common topic. The 
error class you can create and instantiate should derive from one of the five following 
classes, since you should never derive from <em>CATError</em> directly:</p>
<p>
<img alt="Error Class Inheritance" height="143" src="images/CAASysMidCATError.jpg" width="564"/></p>
<p>These classes provide a first error classification:</p>
<ul>
	<li><em>CATInputError</em> is dedicated to end user input when the input is 
		out of the scope of the method</li>
	<li><em>CATInternalError</em> is for your internal algorithm or process errors</li>
	<li><em>CATResourceError</em> reports errors such as disk failure, memory overflow, 
		and so on</li>
	<li><em>CATSystemError</em> reports system errors. <strong>Don't use it</strong></li>
	<li><em>CATCOMErrors</em> is reserved to COM interfaces. <strong>Don't use it</strong></li>
</ul>
<p>You can refine this classification. For example, the <em>CATFileError</em> class 
could be dedicated to file errors and derive from <em>CATResourceError</em>. It 
is created using macros and have the following header file.</p>
<pre class="code">#include &quot;CATResourceError.h&quot;

class CATFileError : public CATResourceError
{
  public:
  CATDeclareError(CATFileError, CATResourceError)
};</pre>
<p>and the following source file:</p>
<pre class="code">#include &quot;CATFileError.h&quot;

CATImplementError(CATFileError, CATResourceError);

CATImplementNLSErrorClass(CATFileError);</pre>
<p>The macros create the class at build time.</p>
<p>You can also want to pass useful parameters to your callers, for example those 
that you use to fill in the message associated with the error such as the name of 
the file in error. Using these parameters values, the callers may decide what to 
do. Create such as class as follows:</p>
<pre class="code">#include &quot;CATResourceError.h&quot;

class CATFileError : public CATResourceError
{
  public:
    CATDeclareError(CATFileError, CATResourceError)
    CATFileError(const char * iMsgId, const char * iMsgCatalog, char * iFileName);
    HRESULT SetFileName(char *  iFileName);
    HRESULT GetFileName(char ** oFileName);
  private:
    char * _FileName;
};</pre>
<p>The source file of this class could be as follows:</p>
<pre class="code">#include &quot;CATFileError.h&quot;

CATImplementError(CATFileError, CATResourceError);

CATImplementNLSErrorClass(CATFileError);

CATFileError::CATFileError(const char * iMsgId, const char * iMsgCatalog, char * iFileName)
            : CATResourceError(iMsgId, iMsgCatalog)
{
  _FileName = iFileName;
}

HRESULT CATFileError::SetFileName(char *  iFileName)
{
  _FileName = iFileName;
  CATReturnSuccess;
}

HRESULT CATFileError::GetFileName(char ** oFileName)
{
  if (NULL != oFileName)
  {
    *oFileName = _FileName;
    CATReturnSuccess;
  }
  else
    CATReturnFailure;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Error class instances can be associated with returned HRESULTs or exceptions, 
along with an error identifier and a message that can include parameters values 
from the method current state. If the method is located at the appropriate level, 
a prompt can be issued to the end user. Errors can be traced using the <code>CATSysLogAbend</code> 
and <code>CATSysLogError</code> macros. If necessary, new error messages and new 
error classes can be created.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocErrorsRules.htm">
		C++ Error Processing Rules</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaMidErrors.htm">Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysTaMidExceptions.htm">Managing Errors Using Exceptions</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2001]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
