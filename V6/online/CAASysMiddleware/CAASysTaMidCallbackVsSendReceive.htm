<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Callback versus Send/Receive</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Callback versus Send/Receive</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The goal of this article is to explain how to create and use a notification 
		in the Callback and Send/Receive mechanisms. You will learn how to create 
		a class deriving from the <em>CATNotification</em> class, and how to manage 
		the life cycle of an instance.</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#CallbackMechanism">Callback Mechanism</a>
				<ul>
					<li><a href="#CATNotificationCreation1">CATNotification 
						Class Creation</a></li>
					<li><a href="#CATNotificationUsage1">CATNotification 
						Class Usage</a></li>
				</ul>
			</li>
			<li><a href="#SendReceiveMechanism">Send/Receive Mechanism</a>
				<ul>
					<li><a href="#CATNotificationCreation2">CATNotification 
						Class Creation</a></li>
					<li><a href="#CATNotificationUsage2">CATNotification 
						Class Usage</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>To send a notification using the Callback or the Send/Receive mechanism, you 
can create a class that Object Modeler and C++ derives from the <em>CATNotification</em> 
component. The only one difference between the two mechanisms is the argument of 
the class constructor:</p>
<pre class="code">...
CATNotification(int iAutomaticDelete=CATNotificationDeleteOff);
...</pre>
<p>For <code>iAutomaticDelete</code> there are two possible values:</p>
<ul>
	<li><code>CATNotificationDeleteOff</code>:<code> </code>The notification is 
		not automatically deleted by the system. After instantiating and sending 
		the notification, you must yourself delete the instance. It is for the
		<strong>Callback</strong> mechanism which is <strong>synchronous</strong>.</li>
	<li><code>CATNotificationDeleteOn</code>: The notification is automatically 
		deleted. After instantiating and sending the notification, you must not 
		delete the instance. It is for the <strong>Send/Receive</strong> mechanism 
		which is <strong>asynchronous</strong>.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CallbackMechanism"></a>Callback Mechanism</h2>
<p>The <em>CAASysRingNotification</em> class is a class created in the &quot;The 
Callback Mechanism&quot; use case [<a href="#References">1</a>].</p>
<h3><a name="CATNotificationCreation1"></a>CATNotification Class Creation</h3>
<p>Here the header class:</p>
<pre class="code">#include &quot;CATNotification.h&quot;

class CAASysRingNotification : public CATNotification
{
  CATDeclareClass;
  public:
    CAASysRingNotification();
    virtual ~CAASysRingNotification();
  private:
    CAASysRingNotification(const CAASysRingNotification &amp;iObjectToCopy);
    CAASysRingNotification&amp; operator = (const CAASysRingNotification &amp;iObjectToCopy);
};</pre>
<p>Here the source file:</p>
<pre class="code">#include &quot;CAASysRingNotification.h&quot;

CATImplementClass(CAASysRingNotification,
                  <strong>Implementation</strong>,
                  CATBaseUnknown,
                  CATNull);
                  
CAASysRingNotification::CAASysRingNotification()
{}

CAASysRingNotification::~CAASysRingNotification()
{}</pre>
<ul>
	<li>
		<p>The <code>CATImplementClass</code> macro declares that <em>CAASysRingNotification</em> 
		is an <code>Implementation</code>, that is, a component main class, that 
		OM-derives from <em>CATBaseUnknown</em>. The last argument must always be 
		set to <code>CATNull</code> if the second one is set to <code>Implementation</code>.</p>
	</li>
	<li>
		<p>The <em>CAASysRingNotification</em> class constructor uses the default 
		constructor of the <em>CATNotification </em>class. (<code>iAutomaticDelete=CATNotificationDeleteOff</code>). 
		It means that the notification will be not deleted by the system. </p>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATNotificationUsage1"></a>CATNotification Class Usage</h3>
<p>There are two ways:</p>
<pre class="code">...
  CAASysRingNotification * pMyNotif = new CATMyNotification (); 
  <strong>DispatchCallback</strong>(,pMyNotif);  
  pMyNotif -&gt;Release(); pMyNotif = NULL ;      
...</pre>
<p>or simpler:</p>
<pre class="code">...
   CAASysRingNotification MyNotif;
   DispatchCallback(,MyNotif);
...     </pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="SendReceiveMechanism"></a>Send/Receive Mechanism</h2>
<p>The <em>CAADlgAddNotification </em>class is a class created in the &quot;The 
Send/Receive Mechanism&quot; use case [<a href="#References">2</a>].</p>
<h3><a name="CATNotificationCreation2"></a>CATNotification Class Creation</h3>
<p>Here the header class:</p>
<pre class="code">#include &quot;CATNotification.h&quot;
class CAADlgAddNotification<em> </em>: public <strong>CATNotification</strong>
{
  <strong>CATDeclareClass</strong>;
  public:
    CAADlgAddNotification();
    virtual CAADlgAddNotification();
  private:
    CAADlgAddNotification(const CAADlgAddNotification&amp;iObjectToCopy);
    CAADlgAddNotification&amp; operator = (const CAADlgAddNotification&amp;iObjectToCopy);
};</pre>
<p>Here the source file:</p>
<pre class="code">#include &quot;CAADlgAddNotification.h&quot;

CATImplementClass(CAADlgAddNotification,
                  <strong>Implementation</strong>,
                  CATBaseUnknown,
                  CATNull);
                  
CAADlgAddNotification::CAADlgAddNotification():CATNotification(<strong>CATNotificationDeleteOn</strong>)
{}

CAADlgAddNotification::CAADlgAddNotification()
{}</pre>
<ul>
	<li>The <code>CATImplementClass</code> macro declares that <em>CAADlgAddNotification
		</em>is an <code>Implementation</code>, that is, a component main class, 
		that OM-derives from <em>CATBaseUnknown</em>. The last argument must always 
		be set to <code>CATNull</code> if the second one is set to <code>Implementation</code>.
	</li>
	<li>The <em>CAADlgAddNotification </em>class constructor uses <code>CATNotificationDeleteOn
		</code>as argument for the <em>CATNotification</em> class constructor.<code>
		</code>It means that the notification will be automatically deleted by the 
		system.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATNotificationUsage2"></a>CATNotification Class Usage</h3>
<pre class="code">...
  CAADlgAddNotification* pMyNotif = new CAADlgAddNotification(); 
      
  <strong>SendNotification</strong>(...,pMyNotif);
  pMyNotif = NULL ;       
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<ul>
	<li>For the Callback mechanism, which is synchronous, use <code>CATNotificationDeleteOff,</code> 
		and delete each instance of notification classes.</li>
	<li>For the Send/Receive mechanism, which is asynchronous, use <code>CATNotificationDeleteOn,</code> 
		and do not delete the instances of notification classes.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaMidCallbacks.htm">The Callback Mechanism</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysTaMidSendReceive.htm">The Send/Receive Communication 
		Protocol</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
