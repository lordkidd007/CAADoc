<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Backbone Simple Message</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Backbone Simple Message</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a backbone simple message component, 
		that is, a message component that doesn't convey any data. This message 
		component can then be used to make two processes or applications communicate.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysBBMessage Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysBBMessage Do</a></li>
					<li><a href="#How">How to Launch CAASysBBMessage</a></li>
					<li><a href="#Where">Where to Find the CAASysBBMessage Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows you how to create a backbone simple message, that is, that 
doesn't convey any data. This use case shows how to create a component that derives 
from the base message component <em>CATBBMessage</em>, and that implements, in the 
component main class, the <em>CATIStreamMsg</em> interface with no data to stream 
or unstream. In addition, it shows you how to implement <em>CATICreateInstance</em> 
using a code extension class to enable clients to instantiate the message component.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysBBMessage Use Case</h2>
<p>CAASysBBMessage is a use case of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysBBMessage Do</h3>
<p>The message component is named <em>CAASysSimpleMessage</em> and derives from 
the <em>CATBBMessage</em> component. <em>CAASysSimpleMessage</em> implements the
<em>CATIStreamMsg</em> and <em>CATICreateInstance</em> interfaces. It also inherits 
the implementation of the <em>CATICommMsg</em> and <em>CATIBBStreamer</em> interfaces 
from <em>CATBBMessage</em>. <em>CATICreateInstance</em> is implemented using a code 
extension class.</p>
<p>
<img alt="Use Case Object Model" height="284" src="images/CAASysMidBBSimpleMsg.jpg" width="469"/></p>
<p>The CAASysBBMessage use case also includes another backbone message component 
that conveys data [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysBBMessage</h3>
<p>CAASysBBMessage is launched by other backbone use cases [<a href="#References">2</a>][<a href="#References">3</a>], 
but you need to create the CAASysBBMessage shared library or DLL. To do this, you 
will need to set up the build time environment, and compile CAASysBBMessage along 
with its prerequisites [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysBBMessage Code</h3>
<p>The CAASysBBMessage use case is made of several classes located in the CAASysBBMessage.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysBBMessage.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a backbone simple message, there are three main steps:</p>
<table>
	<colgroup>
		<col valign="top" /><col valign="top" />
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Creating the Message Component Main Class</a></td>
		<td>LocalInterfaces\CAASysSimpleMessage.h<br />
		src\CAASysSimpleMessage.cpp</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating the Message Component Factory</a></td>
		<td>LocalInterfaces\CAAESysCreateInstanceForSimpleMessage.h<br />
		src\CAAESysCreateInstanceForSimpleMessage.cpp</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Updating the Interface Dictionary</a></td>
		<td>CNext\code\dictionary\CAASystem.edu.dico</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Message Component Main Class</h3>
<p>A backbone message is a component that is made up of a main class. Its header 
file is as follows:</p>
<pre class="code">#include &quot;CATBBMessage.h&quot; 

class  CAASysSimpleMessage : public <strong>CATBBMessage</strong>
{
   <strong>CATDeclareClass</strong>;
   public:
      CAASysSimpleMessage();
      virtual ~CAASysSimpleMessage();

      // CATIStreamMsg Interface methods
      virtual HRESULT UnstreamData  (void  *iBuffer, uint32  iLen);
      virtual HRESULT StreamData    (void **oBuffer, uint32 *oLen);
      virtual HRESULT FreeStreamData(void  *iBuffer, uint32  iLen);
      virtual HRESULT SetMessageSpecifications();
  
  private:
      CAASysSimpleMessage(const CAASysSimpleMessage &amp;iObjectToCopy);
};</pre>
<p>The <em>CAASysSimpleMessage</em> class belongs to a component, thanks to the
<code>CATDeclareClass</code> macro. It C++ derives from <em>CATBBMessage</em>, and 
implements <em>CATIStreamMsg</em>, whose four methods are declared. Note that the 
copy constructor is set as private, and is not implemented in the source file. This 
prevents the compiler from creating the copy constructor as public without you know.</p>
<p>The source file of the backbone simple message component main class is as follows:</p>
<pre class="code">#include  &quot;CAASysSimpleMessage.h&quot;
#include &quot;CATICommMsg.h&quot; // To set message specifications
#include &lt;CATErrorDef.h&gt; // for SUCCEEDED macro

#include &quot;TIE_CATIStreamMsg.h&quot;
<strong>TIE_CATIStreamMsg(CAASysSimpleMessage);</strong>

<strong>CATImplementClass(CAASysSimpleMessage, Implementation, CATBBMessage, CATNull);</strong>

CAASysSimpleMessage::CAASysSimpleMessage() {}

CAASysSimpleMessage::~CAASysSimpleMessage() {}

HRESULT CAASysSimpleMessage::<strong>StreamData</strong>(void **oBuffer, uint32 *oLen)
{
  *oBuffer = NULL;
  *oLen = 0;
  return S_OK;
}

HRESULT CAASysSimpleMessage::<strong>UnstreamData</strong>(void *iBuffer, uint32 iLen)
{ return S_OK; }

HRESULT CAASysSimpleMessage::<strong>FreeStreamData</strong>(void *iBuffer, uint32 iLen)
{ return S_OK; }

HRESULT CAASysSimpleMessage::<strong>SetMessageSpecifications</strong>()
{
  HRESULT ret = E_FAIL;
  CATICommMsg * pICommMsg = NULL;
  ret = QueryInterface(IID_CATICommMsg, (void**)&amp;pICommMsg);
  if ( SUCCEEDED(ret) )
  {
    CATMessageClass MessageClassName = &quot;CAASysSimpleMessage&quot;;
    ret = pICommMsg-&gt;SetMessageClass(MessageClassName);
 
    pICommMsg-&gt;Release();
    pICommMsg = NULL;

    ret = S_OK;
  }
  return ret ;
}</pre>
<p>The <em>CAASysSimpleMessage</em> class states that it implements the <em>CATIStreamMsg</em> 
interface thanks to the <code>TIE_CATIStreamMsg</code> macro The <code>CATImplementClass</code> 
macro declares that the <em>CAASysSimpleMessage</em> class is a component main class 
thanks the <code>Implementation</code> keyword, and that the component OM-derives 
[<a href="#References">5</a>] from <em>CATBBMessage</em>. Any component main class 
declared as an <code>Implementation</code> must C++-derive and OM-derive from the 
same class. The <em>CATIStreamMsg</em> interface methods need only a simple implementation, 
since there is no data to convey with the message. <code>StreamData</code> returns 
a <code>NULL</code> buffer with a length of 0, <code>UnstreamData</code> and
<code>FreestreamData</code> are empty, and <code>SetMessageSpecifications</code> 
declares the message component name as the message specifications.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Message Component Factory</h3>
<p>As any component, a backbone message should provide a means for any client application 
to instantiate it [<a href="#References">6</a>]. This is made possible by making 
the component implement <em>CATICreateInstance</em> using a code extension class. 
Below is the header file of this class.</p>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   //Needed to derive from CATBaseUnknown

class CAAESysCreateInstanceForSimpleMessage : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAAESysCreateInstanceForSimpleMessage();
    virtual ~CAAESysCreateInstanceForSimpleMessage();

    // CATICreateInstance method 
    virtual HRESULT __stdcall CreateInstance(void **oppv);

  private:
    CAAESysCreateInstanceForSimpleMessage(const CAAESysCreateInstanceForSimpleMessage &amp;iObjectToCopy);
};</pre>
<p>The <em>CAAESysCreateInstanceForSimpleMessage</em> class belongs to a component, 
thanks to the <code>CATDeclareClass</code> macro. It C++ derives from <em>CATBaseUnknown</em>, 
and implements <em>CATICreateInstance</em>, whose unique method <code>CreateInstance</code> 
is declared. Note that the copy constructor is set as private, and is not implemented 
in the source file. This prevents the compiler from creating the copy constructor 
as public without you know.</p>
<p>The source file of this code extension class is as follows:</p>
<pre class="code">#include &quot;CAAESysCreateInstanceForSimpleMessage.h&quot;

#include &quot;CAASysSimpleMessage.h&quot;

#include &quot;TIE_CATICreateInstance.h&quot;
<strong>TIE_CATICreateInstance(CAAESysCreateInstanceForSimpleMessage);</strong>

<strong>CATImplementClass(CAAESysCreateInstanceForSimpleMessage,
                  CodeExtension,
                  CATBaseUnknown,
                  CAASysSimpleMessage);</strong>

CAAESysCreateInstanceForSimpleMessage::CAAESysCreateInstanceForSimpleMessage() {}

CAAESysCreateInstanceForSimpleMessage::~CAAESysCreateInstanceForSimpleMessage() {}

HRESULT __stdcall CAAESysCreateInstanceForSimpleMessage::<strong>CreateInstance</strong>(void ** oppv)
{
  CAASysSimpleMessage * pt = new CAASysSimpleMessage();
  if (!pt) return(E_OUTOFMEMORY);
  *oppv = (void *)pt;
  return(S_OK);
}</pre>
<p>The <em>CAAESysCreateInstanceForSimpleMessage</em> class states that it implements 
the <em>CATICreateInstance</em> interface thanks to the <code>TIE_CATICreateInstance</code> 
macro. The <code>CATImplementClass</code> macro declares that the <em>CAAESysCreateInstanceForSimpleMessage</em> 
class is a code extension class, thanks to the <code>CodeExtension</code> keyword, 
and that it extends the component whose main class is <em>CAASysSimpleMessage</em>. 
The third parameter must always be set to <em>CATBaseUnknown</em>, makes no sense, 
and is unused for extensions. The <code>CreateInstance</code> method instantiates 
and returns the component main class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Updating the Interface Dictionary</h3>
<p>The interface dictionary is updated as follows.</p>
<pre class="code">CAASysSimpleMessage         CATIStreamMsg           libCAASysBBMessage
CAASysSimpleMessage         CATICreateInstance      libCAASysBBMessage</pre>
<p>The interface dictionary is a file whose name is the framework name suffixed 
by dico, such as CAASystem.edu.dico, and that you should create or update in the 
framework CNext\code\dictionary folder. The interface dictionary declares that 
the <em>CAASysSimpleMsg</em> component implements <em>CATIStreamMsg</em> and <em>
CATICreateInstance</em>, and that the shared library or DLL to load to query pointers 
to these interfaces is libCAASysBBMessage.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has shown how to create a backbone simple message that can be used 
to communicate between two applications. As any backbone message, the message is 
made up of a component that derives from the supplied <em>CATBBMessage</em> component, 
that itself implements <em>CATIStreamMsg</em> and <em>CATICreateInstance</em> interfaces, 
and that inherits from <em>CATBBMessage</em> the implementation of the <em>CATICommMsg</em> 
interface. Such a message that does not convey any data has a very simple implementation 
of the <em>CATIStreamMsg</em> interface. It is now ready to be used by applications 
[<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="rererence">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysUcMidBBDataMsg.htm">Creating a Backbone Data Message</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysUcMidBBSendRecSimpleMsg.htm">Sending a Backbone Simple 
		Message to an Application</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAASysUcMidBBSendRecDataMsg.htm">Sending a Backbone Data Message 
		to an Application</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMInheritance.htm">Object 
		Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMCreatingComponent.htm">
		Creating Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
