<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Lists of Values</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Lists of Values</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manage a list of values, illustrated 
		by a list of values to the <em>CAASysPoint</em> class.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCollections Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCollections Do</a></li>
					<li><a href="#How">How to Launch CAASysCollections</a></li>
					<li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and manage a list of values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCollections Case</h2>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that illustrates 
the collection management capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCollections Do</h3>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
	<li>Lists of simple types</li>
	<li>Lists of pointers</li>
	<li>Lists of values</li>
	<li>Sets of <em>CATString</em> class instances</li>
	<li>Hash tables</li>
</ul>
<p>This article describes the list of value capabilities, taking a list of values 
of the <em>CAASysPoint</em> class as example.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCollections</h3>
<p>To launch CAASysCollections, you will need to set up the build time environment, 
then compile CAASysCollections along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCollections Code</h3>
<p>The CAASysCollections use case is made of a several classes located in the CAASysCollections.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCollections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
foder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following capabilities offered by lists of integers are described in the 
following steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create and fill in a list of values</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Fill in a list of values</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Locate a value</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Remove values</a></td>
	</tr>
</table>
<p>The <em>CATSysPoint</em> class used represents 2D points.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a List of Values</h3>
<p>A list of values to instances of the <em>CATSysPoint</em> class is created as 
a class using macros. The class header file named CAAListOfSysPointVal.h is as follows:</p>
<pre class="code">#ifndef CAAListOfSysPointVal_h
#define CAAListOfSysPointVal_h

#include  &quot;CATLISTV_Clean.h&quot;

#define	CATLISTV_Append
#define	CATLISTV_Locate
#define	CATLISTV_RemoveValue

#include  &quot;CATLISTV_Declare.h&quot;
<strong>CATLISTV_DECLARE</strong>(<strong>CAASysPoint</strong>)

#endif</pre>
<p>The CATLISTV_Clean.h file undefines all possible previously defined methods. 
Only the <code>Append</code>, <code>Locate</code>, and <code>RemoveValue</code> 
methods are made available for the class. The <code>CATLISTV_DECLARE</code> macro 
creates the class header file.</p>
<p>The source file named CAAListOfSysPointVal.cpp is as follows:</p>
<pre class="code">#include &quot;CAAListOfSysPointVal.h&quot;

#include  &quot;CATLISTV_Define.h&quot;
<strong>CATLISTV_DEFINE</strong>(<strong>CAASysPoint</strong>)</pre>
<p>The <code>CATLISTV_DEFINE</code> macro creates the class source file. The list 
of value class to the <em>CAASysPoint</em> class is now created. Its name is <em>
CATLISTV(CAASysPoint)</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Filling in a List of Values</h3>
<pre class="code">  CATLISTV(CAASysPoint) lvCAASysPoint;

  CAASysPoint value0(0, 1);
  CAASysPoint value1(1, 2);
  CAASysPoint value2(2, 3);
  CAASysPoint value3(3, 4);
  CAASysPoint value4(4, 5);

  lvCAASysPoint.<strong>Append</strong>(value0);
  lvCAASysPoint.Append(value1);
  lvCAASysPoint.Append(value2);
  lvCAASysPoint.Append(value3);
  lvCAASysPoint.Append(value4);
  ...</pre>
<p>The <em>CATLISTV(CAASysPoint) </em>class is first instantiated, and then instances 
of the <em>CAASysPoint</em> are created. Then the <code>Append</code> method appends 
values of the created points to the list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Locating Items</h3>
<pre class="code">  ...
  int indexValue3 = lvCAASysPoint.<strong>Locate</strong>(value3);
  cout &lt;&lt; &quot;L1.Locate(value3) == &quot; &lt;&lt; indexValue3 &lt;&lt; endl;

  float xValue3 = lvCAASysPoint[indexValue3].getX();
  float yValue3 = lvCAASysPoint[indexValue3].getY();
  ...</pre>
<p>The <code>Locate</code> method returns the rank of a given value in the list. 
Note that this rank begins with 1. The located value can be used by means of its 
rank in the list as if it where in an array, for example to get the point x and 
y coordinates. This code provides the following output:</p>
<pre class="code">L1.Locate(value3) == 4</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Removing Items</h3>
<pre class="code">  ...
  lvCAASysPoint.<strong>RemoveValue</strong>(value1);
  lvCAASysPoint.RemoveValue(value3);
  ...</pre>
<p>The <code>RemoveValue</code> method removes the value passed as parameter from 
the list. The list now includes three values to points <code>value0</code>,
<code>value2</code>, and <code>value4</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a class for a list a values to a given class, 
and how to use it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
