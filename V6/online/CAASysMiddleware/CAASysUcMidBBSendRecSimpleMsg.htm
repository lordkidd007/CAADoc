<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Sending a Backbone Simple Message to an Application</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Sending a Backbone Simple Message to an Application</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to make two applications communicate, and how 
		one of them can send a simple message, that is, a message that doesn't convey 
		any data, to the other.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysBackboneBasic Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysBackboneBasic Do</a></li>
					<li><a href="#How">How to Launch CAASysBackboneBasic</a></li>
					<li><a href="#Where">Where to Find the CAASysBackboneBasic Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how an application can declare that it 
will send or receive messages, how to filter the messages to receive, and how to 
send and receive messages using the backbone objects of the System framework. The 
messages don't convey any data with them. Another use case also shown by CAASysBackboneBasic 
uses messages that convey data [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysBackboneBasic Use Case</h2>
<p>CAASysBackboneBasic is a use case of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysBackboneBasic Do</h3>
<p>This use case illustrates two applications seen as processes. One behaves as 
a message sender, and the other as a message receiver. The message sender creates 
and sends a simple message. The message receiver receives it, and just acknowledge 
receipt of it using a trace. Both the message sender and the message receiver are 
simple processes launched from a main program.</p>
<p>The message sender connects to the backbone bus, declares itself, instantiates 
the message component and sends it. The message receiver needs to instantiate a 
message handler to receive the message. Such a message handler is a component that 
implements the <em>CATIMessageReceiver</em> interface. The message receiver connects 
to the backbone bus, declares itself, instantiates the message handler, associates 
itself with the message to receive and with the message handler, and enters a loop 
thanks to the <em>CATICommunicator</em> interface implemented by the backbone bus 
that the receiver can use to create the loop, and waits for the message. As soon 
as the message is sent, it is retrieved by the message handler that prints a trace 
to acknowledge receipt of the message.</p>
<p>The message is an instance of a component named <em>CAASysSimpleMessage</em> 
that implements the <em>CATICommMsg</em> interface, among others [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysBackboneBasic</h3>
<p>To launch CAASysBackboneBasic, you will need to set up the build time environment, 
then compile CAASysBackboneBasic along with its prerequisites, set up the run time 
environment [<a href="#References">3</a>] in two different windows, and then execute 
the use case.</p>
<p>To execute the use case, type in the first window command line:</p>
<pre>CAASysBackboneBasic receiver</pre>
<p>And type in the second window command line:</p>
<pre>CAASysBackboneBasic sender</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysBackboneBasic Code</h3>
<p>The CAASysBackboneBasic use case is made of several classes located in the CAASysBackboneBasic.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysBackboneBasic.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create applications that send and receive a simple message, there are six 
main steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Creating the Message Sender</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Sending the Message</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating the Message Handler Component</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating the Message Receiver</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Receiving the Message</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Removing the Message Handler</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Message Sender</h3>
<p>The message sender is a process whose main program is contained in the <code>
CodeForSenderCase</code> global function.</p>
<pre class="code">int CodeForSenderCase()
{
  // Retrieves an instance of a backbone bus (default bus)
  <strong>CATICommunicator</strong> * pICommunicator = NULL;
  pICommunicator = ::<strong>CATGetBackboneConnection</strong>();
  ... // return if the backbone bus cannot be retrieved
  ...</pre>
<p>First, a connection to the backbone bus must be established. This is possible 
thanks to the global function <code>CATGetBackboneConnection</code> that returns 
a pointer to the <em>CATICommunicator</em> interface.</p>
<pre class="code">  ...
  // Declares CAASysSenderAppli 
  CATApplicationClass SenderApplicationId = &quot;CAASysSenderAppli&quot;;
  HRESULT rc = pICommunicator-&gt;<strong>Declare</strong>(SenderApplicationId);
  ... // return if the declaration fails
  CATApplicationClass ReceiverApplicationId = &quot;CAASysReceiverAppli&quot;;
  ...</pre>
<p>Once the connection is established, the message sender sets its application class 
identifier and declares it to the backbone bus using the method <code>Declare</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Sending the Message</h3>
<pre class="code">  ...
  if ( SUCCEEDED(rc) )
  {
    CATICommMsg * pICommMsg =NULL;  
    rc = ::<strong>CATInstantiateComponent</strong>(&quot;CAASysSimpleMessage&quot;,
                                   IID_CATICommMsg,
                                   (void**)&amp;pICommMsg);
    if ( SUCCEEDED(rc) )
    {
      rc = pICommunicator-&gt;<strong>SendRequest</strong>(ReceiverApplicationId, pICommMsg);
      pICommMsg-&gt;Release();
      pICommMsg = NULL;
    }
  }
  pICommunicator-&gt;Release();
  pICommunicator = NULL;
  ... // return
}</pre>
<p>Now, the message sender can send a message. It first creates an instance of the 
message component and retrieves a pointer to <em>CATICommMsg</em> on the message 
component thanks to the <code>CATCreateClassInstance</code> global function. Then 
it sends the message using the <code>SendRequest</code> method of <em>CATICommunicator</em>, 
specifying the target message receiver and the message to send.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Message Handler</h3>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;   //Needed to derive from CATBaseUnknown

class CATICommMsg;

class  CAASysSimpleMessageHandler : public CATBaseUnknown
{
  <strong>CATDeclareClass</strong>;
  public:
    CAASysSimpleMessageHandler();
    virtual ~CAASysSimpleMessageHandler();

    // CATIMessageReceiver Interface
    void HandleMessage(CATICommMsg * iMessage);

  private:
    CAASysSimpleMessageHandler(const CAASysSimpleMessageHandler &amp;iObjectToCopy);
};</pre>
<p>The <em>CAASysSimpleMessageHandler</em> class belongs to a component, thanks 
to the <code>CATDeclareClass</code> macro, C++ derives from <em>CATBaseUnknown</em>, 
and implements <em>CATIMessageReceiver</em>, whose single method is <code>HandleMessage</code>. 
Note that the copy constructor is set as private, and is not implemented in the 
source file. This prevents the compiler from creating the copy constructor as public 
without you know.</p>
<pre class="code">#include &quot;CAASysSimpleMessageHandler.h&quot;

extern int EndConditionLoop;

#include &quot;TIE_CATIMessageReceiver.h&quot;
<strong>TIE_CATIMessageReceiver(CAASysSimpleMessageHandler);</strong>
<strong>CATImplementClass(CAASysSimpleMessageHandler, Implementation, CATBaseUnknown, CATNull);</strong>
CAASysSimpleMessageHandler::CAASysSimpleMessageHandler() {}

CAASysSimpleMessageHandler::~CAASysSimpleMessageHandler() {}

void CAASysSimpleMessageHandler::<strong>HandleMessage</strong>(CATICommMsg* iMessage)
{
  // The process can be stopped
  EndConditionLoop ++;
}</pre>
<p>The <em>CAASysSimpleMessageHandler</em> class states that it implements the
<em>CATIMessageReceiver</em> interface thanks to the <code>TIE_CATIMessageReceiver</code> 
macro. The <code>CATImplementClass</code> macro declares that the <em>CAASysSimpleMessageHandler</em> 
class is a component main class thanks the <code>Implementation</code> keyword, 
and that the component OM-derives [<a href="#References">4</a>] from <em>CATBaseUnknown</em>. 
Any component main class declared as an <code>Implementation</code> must C++-derive 
and OM-derive from the same class. <code>HandleMessage</code> needs only a simple 
implementation. It is called by the backbone bus and a pointer to the message is 
passed. The action undertaken is to simply to make the receiver get out of the loop 
by incrementing <code>EndConditionLoop</code>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Message Receiver</h3>
<p>The message receiver is a process whose main program is contained in the
<code>CodeForReceiverCase</code> global function.</p>
<pre class="code">int CodeForReceiverCase()
{
  int ReturnCode = 1;

  CATIMessageReceiver        * pIMessageReceiver  = NULL;
  CATApplicationClass ReceiverApplicationId   = &quot;CAASysReceiverAppli&quot;;
  CATMessageClass     SimpleMessClassName     = &quot;CAASysSimpleMessage&quot;;
  HRESULT rc= E_FAIL;

  // Retrieves an instance of a backbone bus (default bus)
  CATICommunicator * pICommunicator = NULL;
  pICommunicator = ::<strong>CATGetBackboneConnection</strong>();
  ... // return if the backbone bus cannot be retrieved 
  ...
  // Declares CAASysReceiverAppli on the backbone bus
  rc = pICommunicator-&gt;<strong>Declare</strong>(ReceiverApplicationId);
  ... // return if the declaration fails
  ...</pre>
<p>First, a connection to the backbone bus must be established. This is possible 
thanks to the global function <code>CATGetBackboneConnection</code> that returns 
a pointer to the <em>CATICommunicator</em> interface. Once the connection is established, 
the message sender sets its application class identifier and declares it to the 
backbone bus using the method <code>Declare</code>.</p>
<pre class="code">  ...
  if ( SUCCEEDED(rc) )
  {
    CAASysSimpleMessageHandler * pHandler  = NULL;
    pHandler = new  <strong>CAASysSimpleMessageHandler</strong>();

    if ( NULL != pHandler )
    {
      rc = pHandler-&gt;QueryInterface(<strong>IID_CATIMessageReceiver</strong>,
                                    (void**)&amp;pIMessageReceiver);
      if ( SUCCEEDED(rc) )
      {
        rc=pICommunicator-&gt;<strong>AssociateHandler</strong>(ReceiverApplicationId, 
                                            SimpleMessClassName,
                                            pIMessageReceiver);
        ... // error if the association fails
      }
      pHandler-&gt;Release();
      pHandler = NULL;
    }
  }
  ...</pre>
<p>The message receiver instantiates the message handler, asks the message handler 
for an pointer to <em>CATIMessageReceiver</em>, and declares to the backbone bus 
that it will receive the declared messages using the designated handler, thanks 
to the <code>AssociateHandler</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Receiving the Message</h3>
<p>Now the message receiver can create and enter a loop to wait for messages.</p>
<pre class="code">  ...
  if ( SUCCEEDED(rc) )
  {
    CATICommunicatorLoop * pILoop = NULL;
    pICommunicator-&gt;QueryInterface(<strong>IID_CATICommunicatorLoop</strong>, (void**)&amp;pILoop);
                    
    if ( SUCCEEDED(rc) )
    {
      EndConditionLoop = -2; 
      pILoop-&gt;<strong>WaitingLoop</strong>(-1, 6000 , &amp;EndConditionLoop);

      pILoop -&gt;Release();
      pILoop = NULL;

        // OK 
      ReturnCode = 0;
    }
  }
  ...</pre>
<p>A pointer to <em>CATICommunicatorLoop</em> is retrieved from the backbone bus 
using the pointer to <em>CATICommunicator</em> retrieved when establishing the connection. 
Then, a loop is created by calling <code>WaitingLoop</code> of <em>CATICommunicator</em>. 
The first parameter must be set to -1, the second is the maximum waiting time expressed 
in milliseconds, and the third is a flag to get out of the loop before the time 
set is over. This flag must be set to a non null value. Setting it to null makes 
the process get out of the loop.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Removing the Message Handler</h3>
<pre class="code">  ...
  if ( NULL != pIMessageReceiver )
  {
    // No more need of the handler for the first event
    pICommunicator-&gt;<strong>RemoveHandler</strong>(ReceiverApplicationId,
                                  SimpleMessClassName,
                                  pIMessageReceiver);
    pIMessageReceiver-&gt;Release();
    pIMessageReceiver = NULL;
  }
  ...
  if ( NULL !=  pICommunicator )
  {
    pICommunicator-&gt;Release();
    pICommunicator = NULL;
  }
  return ReturnCode;
}</pre>
<p>Once a message is received, or once the time set is over, the process gets out 
of the loop, removes its handler thanks to the <code>RemoveHandler</code> method 
that uses the same arguments than the <code>AssociatedHandler</code> method, and 
stops.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how two processes or applications can communicate using simple 
messages, that is, messages that don't convey any data.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysUcMidBBSendRecDataMsg.htm">Sending a Backbone Data Message 
		to an Application</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAASysUcMidBBSimpleMsg.htm">Creating a Backbone Simple Message</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMInheritance.htm">Object 
		Modeler Inheritances</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
