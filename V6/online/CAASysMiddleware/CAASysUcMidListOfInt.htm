<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Lists of Integers</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Lists of Integers</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manage a list of simple types, illustrated 
		by a list of integers.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCollections Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCollections Do</a></li>
					<li><a href="#How">How to Launch CAASysCollections</a></li>
					<li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and manage a list of simple 
types.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCollections Case</h2>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that illustrates 
the collection management capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCollections Do</h3>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
	<li>Lists of simple types</li>
	<li>Lists of pointers</li>
	<li>Lists of values</li>
	<li>Sets of <em>CATString</em> class instances</li>
	<li>Hash tables</li>
</ul>
<p>This article describes the list of simple type capabilities, taking a list of 
integers as example.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCollections</h3>
<p>To launch CAASysCollections, you will need to set up the build time environment, 
then compile CAASysCollections along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCollections Code</h3>
<p>The CAASysCollections use case is made of a file located in the CAASysCollections.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCollections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following capabilities offered by lists of integers are described in the 
following steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create and fill in a list of integers</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Replace items</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Locate items</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Quick sort the list</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Remove duplicates</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Exchange items</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Copy items from/to an array</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Remove/insert items</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Intersect two lists</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Filling in a List of Integers</h3>
<p>A list of integers is created as an instance of the <em>CATListOfInt</em> class.</p>
<pre class="code">#include  &quot;CATListOfInt.h&quot;
...
void CAAListsSample()
{
  CATListOfInt listOfInt;

  int	i1 = 5;
  listOfInt.<strong>Append</strong> ( 0 );
  listOfInt.Append ( i1 );
  listOfInt.Append ( 6 );
  listOfInt.Append ( 77 );
  listOfInt.Append ( 888 );
  listOfInt.Append ( 9999 );
  listOfInt.Append ( 0 );
  listOfInt.Append ( 0 );
  listOfInt.Append ( 0 );
  ...</pre>
<p>The <code>Append</code> method appends each value to the list. The list contains 
nine integers 0, 5, 6, 77, 888, 9999, 0, 0, 0 stored in this order.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Replacing Item Values</h3>
<pre class="code">  ...
  listOfInt[5] = 92380; // Instead of 888
  listOfInt[7] = listOfInt[2] ;
  ...</pre>
<p>Items can be accessed thanks to their rank in the list, as with tables. Note 
that this rank begins with 1. The list always contains nine integers: 0, 5, 6, 77, 
92380, 9999, 5, 0, 0.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Locating Items</h3>
<pre class="code">  ...
  cout &lt;&lt; &quot;Locate (9999)  == &quot;	&lt;&lt; listOfInt.<strong>Locate</strong> (9999) &lt;&lt; endl;
  cout &lt;&lt; &quot;Locate (0)     == &quot;  &lt;&lt; listOfInt.Locate (0)    &lt;&lt; endl;
  cout &lt;&lt; &quot;Locate (0, 3)  == &quot;  &lt;&lt; listOfInt.Locate (0, 3) &lt;&lt; endl;
  ...</pre>
<p>The <code>Locate</code> method returns the rank of a given value in the list. 
The second parameter indicates the rank from which the search begins, defaulted 
to the first item. The returned value is the rank found, or 0 if no item is found 
with this value. This code provides the following output:</p>
<pre class="code">Locate (9999)  == 6
Locate (0)     == 1
Locate (0, 3)  == 8</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Quick Sorting the List</h3>
<pre class="code">  ...
  listOfInt.<strong>QuickSort</strong>();
  ...</pre>
<p>The <code>QuickSort</code> method sorts the list by increasing order. The list 
is now 0, 0, 0, 5, 5, 6, 77, 9999, 92380.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Removing Duplicates</h3>
<pre class="code">  ...
  listOfInt.<strong>RemoveDuplicates</strong>();
  ...</pre>
<p>The <code>RemoveDuplicates</code> method removes items whose value is found with 
a lower rank item. When an item is removed, all subsequent item ranks are decreased 
by 1. The list now contains six items, since two duplicates of 0, and a duplicate 
of 5 are removed: 0, 5, 6, 77, 9999, 92380.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Exchanging Items</h3>
<pre class="code">  ...
  listOfInt.<strong>Swap</strong>(1, 2);
  ...</pre>
<p>The <code>Swap</code> method exchanges item values using their ranks. The code 
above exchanges the values of the first two items. The list is now: 5, 0, 6, 77, 
9999, 92380.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Copying Items from/to an Array</h3>
<p>A list of integers can be copied in a C array of integers.</p>
<pre class="code">  ...
  int *rgArray = new int[listOfInt.<strong>Size</strong>()];
  listOfInt.<strong>FillArray</strong>(rgArray , listOfInt.Size());
  CATListOfInt *plistOfInt = new <strong>CATListOfInt</strong>(rgArray, listOfInt.Size());
  delete [] rgArray;
  ...</pre>
<p>The array size is set using the <code>Size</code> method that returns the number 
of items in the list. Then, then <code>FillArray</code> method fills the array with 
the list. The second parameter is the number of items to put in the array. It is 
here the full list. A new list of integers can be created an filled in from an array. 
The second constructor parameter is the number of array items to copy in the list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Removing/Inserting Items</h3>
<pre class="code">  ...
                                     // 5, 0, 6, 77, 9999, 92380
  plistOfInt-&gt;<strong>RemovePosition</strong>(1);     // 0, 6, 77, 9999, 92380
  plistOfInt-&gt;RemovePosition(3);     // 0, 6, 9999, 92380
  plistOfInt-&gt;<strong>InsertAt</strong>(2, 1313);     // 0, <strong>1313</strong>, 6, 9999, 92380
  plistOfInt-&gt;InsertAt(5, 12345);    // 0, 1313, 6, 9999, <strong>12345</strong>, 92380
  ...</pre>
<p>The <code>RemovePosition</code> method removes the item whose rank is passed 
as parameter. When an item is removed, all subsequent item ranks are decreased by 
1. The <code>InsertAt</code> method insert at the rank passed as the first parameter 
the value passed as the second parameter. When an item is inserted, all subsequent 
item ranks are increased by 1. The list was:<br />
5, 0, 6, 77, 9999, 92380.<br />
and is now:<br />
0, 1313, 6, 9999, 12345, 92380.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Intersecting Two Lists</h3>
<pre class="code">  ...
  CATListOfInt listOfIntInter;
  CATListOfInt::<strong>Intersection</strong>(*plistOfInt, listOfInt, listOfIntInter);
  ...</pre>
<p>The <code>Intersection</code> method copies the items whose value is found in 
the two lists <code>plistOfInt</code> and <code>listOfInt</code> in the newly created 
list <code>listOfIntInter</code>. The list contents are:</p>
<table>
	<tr>
		<td><code>plistOfInt</code></td>
		<td>5, 0, 6, 77, 9999, 92380</td>
	</tr>
	<tr>
		<td><code>listOfInt</code></td>
		<td>0, 1313, 6, 9999, 12345, 92380</td>
	</tr>
	<tr>
		<td><code>listOfIntInter</code></td>
		<td>0, 6, 9999, 92380</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create and use a list of integers. The same capabilities 
are available with lists of floats or lists of doubles.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
