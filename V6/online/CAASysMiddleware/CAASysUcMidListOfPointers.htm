<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Lists of Pointers</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Lists of Pointers</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manage a list of pointers, illustrated 
		by a list of pointers to the CAASysPoint class.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCollections Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCollections Do</a></li>
					<li><a href="#How">How to Launch CAASysCollections</a></li>
					<li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and manage a list of pointers 
[<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCollections Use Case</h2>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that illustrates 
the collection management capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCollections Do</h3>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
	<li>Lists of simple types</li>
	<li>Lists of pointers</li>
	<li>Lists of values</li>
	<li>Sets of CATString class instances</li>
	<li>Hash tables</li>
</ul>
<p>This article describes the list of pointer capabilities, taking a list of pointers 
to instances of the <em>CAASysPoint</em> class as example.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCollections</h3>
<p>To launch CAASysCollections, you will need to set up the build time environment, 
then compile CAASysCollections along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCollections Code</h3>
<p>The CAASysCollections use case is made of a several classes located in the CAASysCollections.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCollections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following capabilities offered by lists of integers are described in the 
following steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create and fill in a list of pointers</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Fill in a list of pointers</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Locate a pointer</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Remove pointers</a></td>
	</tr>
</table>
<p>The <em>CATSysPoint</em> class used represents 2D points.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a List of Pointers</h3>
<p>A list of pointers to instances of the <em>CATSysPoint</em> class is created 
as a class using macros. The class header file named CAASysListOfSysPointPtr.h is 
as follows:</p>
<pre class="code">#ifndef CAASysListOfSysPointPtr_h
#define CAASysListOfSysPointPtr_h

#include &quot;CAASysPoint.h&quot;

#include &quot;CATLISTP_Clean.h&quot;
#include &quot;CATLISTP_AllFunct.h&quot;

#include  &quot;CATLISTP_Declare.h&quot;
<strong>CATLISTP_DECLARE</strong>(<strong>CAASysPoint</strong>)

#endif</pre>
<p>The CATLISTP_Clean.h file undefines all possible previously defined methods, 
while the CATLISTP_AllFunct.h defines for the list class to create all the available 
methods for list of pointer classes. The <code>CATLISTP_DECLARE</code> macro creates 
the class header file.</p>
<p>The source file named CAASysListOfSysPointPtr.cpp is as follows:</p>
<pre class="code">#include &quot;CAASysListOfSysPointPtr.h&quot;

#include  &quot;CATLISTP_Define.h&quot;
<strong>CATLISTP_DEFINE</strong>(<strong>CAASysPoint</strong>)</pre>
<p>The <code>CATLISTP_DEFINE</code> macro creates the class source file. The list 
of pointer to the <em>CAASysPoint</em> class is now created. Its name is <em>CATLISTP(CAASysPoint)</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Filling in a List of Pointers</h3>
<pre class="code">  CATLISTP(CAASysPoint) lpCAASysPoint;

  CAASysPoint p0(0, 1);
  CAASysPoint p1(1, 2);
  CAASysPoint p2(2, 3);
  CAASysPoint p3(3, 4);
  CAASysPoint p4(4, 5);

  lpCAASysPoint.Append(&amp;p0);
  lpCAASysPoint.Append(&amp;p1);
  lpCAASysPoint.Append(&amp;p2);
  lpCAASysPoint.Append(&amp;p3);
  lpCAASysPoint.Append(&amp;p4);
  ...</pre>
<p>The <em>CATLISTP(CAASysPoint) </em>class is first instantiated, and then instances 
of the <em>CAASysPoint</em> are created. Then the <code>Append</code> method appends 
pointers to the created points to the list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Locating Items</h3>
<pre class="code">  ...
  int indexP2 = lpCAASysPoint.<strong>Locate</strong>(&amp;p2);
  cout &lt;&lt; &quot;L1.Locate(&amp;p2) == &quot; &lt;&lt; indexP2 &lt;&lt; endl;

  float xP2 = lpCAASysPoint[indexP2]-&gt;getX();
  float yP2 = lpCAASysPoint[indexP2]-&gt;getY();
  ...</pre>
<p>The <code>Locate</code> method returns the rank of a given pointer in the list. 
Note that this rank begins with 1. The located pointer can be used by means of its 
rank in the list as if it where in an array, for example to get the point x and 
y coordinates. This code provides the following output:</p>
<pre class="code">L1.Locate(&amp;p2) == 3</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Removing Items</h3>
<pre class="code">  ...
  lpCAASysPoint.<strong>RemoveValue</strong>(&amp;p1);
  lpCAASysPoint.RemoveValue(&amp;p3);
  ...</pre>
<p>The <code>RemoveValue</code> method removes the pointer passed as parameter from 
the list. The list now includes three pointers to points p0, p2, and p4.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a class for a list a pointers to a given class, 
and how to use it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysQrMidCATLISTP.htm">Lists of Pointers</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
