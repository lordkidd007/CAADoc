<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Time</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Time</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and use timestamp and duration objects.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysTime Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysTime Do</a></li>
					<li><a href="#How">How to Launch CAASysTime</a></li>
					<li><a href="#Where">Where to Find the CAASysTime Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and use timestamps and durations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysTime Use Case</h2>
<p>CAASysTime is a set of use cases of the CAASystem.edu framework that illustrates 
the System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysTime Do</h3>
<p>This use case creates timestamp and duration object instances, check that they 
are valid, and perform operations on them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysTime</h3>
<p>To launch CAASysTime, you will need to set up the build time environment, then 
compile CAASysTime along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysTime Code</h3>
<p>The CAASysTime use case is made of a several classes located in the CAASysTime.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysTime.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The time management capabilities are shown using seven steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create a timestamp</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Retrieve the hours from the timestamp</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create a duration</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Add two durations</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Retrieve the total number of hours from a duration</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Subtract a duration from a timestamp</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Compare two durations</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a Timestamp</h3>
<p>The <em>CAATime</em> class is dedicated to timestamps.</p>
<pre class="code">...
  int iYear  = 1997;
  int iMonth = 11;
  int iDay   = 20;
  int iHour  = 16;
  int iMin   = 23;
  int iSec   = 15;
  <strong>CATTime</strong> MyTime1(iYear, iMonth, iDay, iHour, iMin, iSec);
  if ( 1 == MyTime1.GetStatus() )
  {  ... // MyTime1 is a valid instance and can be used
...</pre>
<p><code>MyTime1</code> is initialized at <code>Thursday, 20 November 1997 16:23:15</code>. 
The <code>GetStatus</code> method should return 1 if <code>MyTime1</code> is valid, 
and 0 otherwise.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Hours from the Timestamp</h3>
<pre class="code">...
  int hour = 0;
  hour = MyTime1.<strong>GetHour</strong>();
  if ( -1 != hour )
    cout &lt;&lt; &quot;The hour of MyTime1 is: &quot; &lt;&lt; hour &lt;&lt; endl&lt;&lt;endl;
...</pre>
<p>The hour variable contains the value 16. If the returned value were invalid, 
-1 would be returned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Duration</h3>
<p>The <em>CATTimeSpan</em> class is dedicated to durations.</p>
<pre class="code">...
  long iDays = 9;
  int iHours = 16;
  int iMins  = 45;
  int iSecs  = 54;

  CATTimeSpan MyTimeSpan1(iDays, iHours, iMins, iSecs);
  if ( 1 == MyTimeSpan1.GetStatus() )
  { ... // MyTimeSpan1 is a valid instance and can be used
...</pre>
<p><code>MyTimeSpan1</code> is initialized at <code>9 days 16:45:54</code>. The
<code>GetStatus</code> method should return 1 if <code>MyTimeSpan1</code> is valid, 
and 0 otherwise.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Adding Two Durations</h3>
<pre class="code">...
  CATTimeSpan MyTimeSpan2(3, 5, 11, 47 );	

  if ( 1 == MyTimeSpan2.GetStatus() )
  {
    MyTimeSpan1 <strong>+=</strong> MyTimeSpan2;
...</pre>
<p>A second instance of the <em>CATTimeSpan</em> class is created, whose value is
<code>3 days 5 hours 11 minutes 47 secondes</code>, and the operator <code>+=</code> 
is used to add it to <code>MyTimeSpan1</code>. The new value of <code>MyTimeSpan1</code> 
is now <code>12 days 21 hours 57 minutes 41 secondes</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Total Number of Hours from a Duration</h3>
<pre class="code">...
  int span = MyTimeSpan1.<strong>GetTotalHours</strong>();
...</pre>
<p>The <code>span</code> variable contains 309 hours, that is <code>(12 x 24) + 
21</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Subtracting a Duration from a Timestamp</h3>
<pre class="code">...
  MyTime1 <strong>-=</strong> MyTimeSpan1;
  if ( 1 == MyTime1.GetStatus() )
  { ... // MyTime1 is a valid instance and can be used
...</pre>
<p>The duration <code>MyTimeSpan1</code> is subtracted from the timestamp <code>
MyTime1</code> that new value is <code>Friday, 07 November 1997 18:25:34</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Comparing Two Durations</h3>
<pre class="code">...
  CATTime MyTime2(2000, 7, 14, 15, 41, 32);
  if ( 1 == MyTime2.GetStatus() )
  {
    if ( MyTime2 <strong>&lt;</strong> MyTime1 )
      cout &lt;&lt; &quot;MyTime2 &lt;  MyTime1 is TRUE.&quot; &lt;&lt; endl&lt;&lt; endl;
    else
      cout &lt;&lt; &quot;MyTime2 &lt;  MyTime1 is FALSE.&quot; &lt;&lt; endl&lt;&lt; endl; 
...</pre>
<p>A new <em>CATTime</em> instance is created with the value <code>Friday, 14 July 
2000 15:41:32</code>, and the second trace is displayed on the console</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create and use timestamp and duration objects.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
