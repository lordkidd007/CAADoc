<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Sets</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Sets</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manage a set of <em>CATString</em> 
		instances.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysCollections Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysCollections Do</a></li>
					<li><a href="#How">How to Launch CAASysCollections</a></li>
					<li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and manage a set of <em>CATString</em> 
instances.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysCollections Case</h2>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that illustrates 
the collection management capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysCollections Do</h3>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
	<li>Lists of simple types</li>
	<li>Lists of pointers</li>
	<li>Lists of values</li>
	<li>Sets of <em>CATString</em> class instances</li>
	<li>Hash tables</li>
</ul>
<p>This article describes the set of <em>CATString</em> instance capabilities. Note 
that the set of <em>CATUnicodeString</em> offers the same capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysCollections</h3>
<p>To launch CAASysCollections, you will need to set up the build time environment, 
then compile CAASysCollections along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysCollections Code</h3>
<p>The CAASysCollections use case is made of a several classes located in the CAASysCollections.m 
module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysCollections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following capabilities offered by lists of integers are described in the 
following steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create and fill in a set</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Count the items</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Insert items</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Access items</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Copy items from/to an array</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Apply basic operators</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Filling a Set</h3>
<p>A set of <em>CATString</em> instances is itself an instance of the <em>CATSetOfCATString</em> 
class.</p>
<pre class="code">void CAASetsSample()
{
  <strong>CATSetOfCATString</strong> set1;

  set1.<strong>Add</strong>( CATString(&quot;A&quot;) );
  set1.Add( CATString(&quot;B&quot;) );
  set1.Add( CATString(&quot;D&quot;) );
  ...</pre>
<p>The <code>Add</code> method adds <em>CATString</em> instances to the set.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Counting the Items</h3>
<pre class="code">  ...
  cout &lt;&lt; &quot;set1.Size() = &quot; &lt;&lt; set1.Size() &lt;&lt; endl;
  ...</pre>
<p>The <code>Size</code> method returns the number of items in the set. This code 
provides the following output:</p>
<pre class="code">set1.Size() = 3</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Inserting Items</h3>
<pre class="code">  ...                           // A, B, D
  set1.Add( CATString(&quot;A&quot;));    // A, B, D
  set1.Add( CATString(&quot;C&quot;));    // A, B, C, D
  ...</pre>
<p>The <code>Add</code> method adds items to the set. Note that no duplicate items 
can exist in a set. As a consequence, the first call to <code>Add</code> has no 
effect, since an item containing &quot;A&quot; already exists in the set. The second 
call to <code>Add</code> adds &quot;C&quot; to the set. This character string is 
not appended to the set, but inserted using the alphabetical order.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Accessing Items</h3>
<pre class="code">  ...
  cout &lt;&lt; &quot;set1[2] = &quot; &lt;&lt; set1[2].CastToCharPtr() &lt;&lt; endl;
  ...</pre>
<p>A given item in the set can be used by means of its rank in the set as if it 
where in an array. Note that the rank begins with 1. This code provides the following 
output:</p>
<pre class="code">set1[2] = B</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Copying Items from/to an Array</h3>
<pre class="code">  ...
  CATString *iArray = new CATString[4];
  iArray[0] = &quot;B&quot;;
  iArray[1] = &quot;C&quot;;
  iArray[2] = &quot;D&quot;;
  iArray[3] = &quot;E&quot;;
  <strong>CATSetOfCATString</strong> set2(iArray, 4);

  CATString *ioArray = new CATString[set1.<strong>Size</strong>()];
  set1.<strong>Array</strong>(ioArray);
  ...</pre>
<p>An array of <em>CATString</em> can be used as input for a set of <em>CATString</em> 
instances. The second parameter is the number of items to copy from the array. Conversely, 
a set of <em>CATString</em> instances can be used a input to create an array. The
<code>Size</code> method is used to set the array size. The <code>Array</code> method 
fills the array from the set.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Applying Basic Operators</h3>
<pre class="code">  ...
  CATSetOfCATString set3(set1);
  set3.<strong>Add</strong>(set2);

  CATSetOfCATString set4;
  CATSetOfCATString::<strong>Intersection</strong>(set1, set2, set4);

  CATSetOfCATString set5(set1);
  set5.<strong>Remove</strong>(set2);
  ...</pre>
<p>The <code>Add</code> method can also take a set as parameter to merge two sets. 
The following table shows the input sets and the result. Note that the set does 
include duplicates, and that the items are arranged using the alphabetical order.</p>
<table>
	<tr>
		<td>set2</td>
		<td>B, C, D, E</td>
	</tr>
	<tr>
		<td>set3</td>
		<td>A, B, C, D</td>
	</tr>
	<tr>
		<td>resulting set3</td>
		<td>A, B, C, D, E</td>
	</tr>
</table>
<p>The <code>Intersection</code> static method performs the intersection of set1 
with set2, and puts the result in set 4. The following table shows the input sets 
and the result.</p>
<table>
	<tr>
		<td>set1</td>
		<td>A, B, C, D</td>
	</tr>
	<tr>
		<td>set2</td>
		<td>B, C, D, E</td>
	</tr>
	<tr>
		<td>set4</td>
		<td>B, C, D</td>
	</tr>
</table>
<p>The <code>Remove</code> method takes a set as parameter to subtract it from the 
set to which the method applies. The following table shows the input sets and the 
result.</p>
<table>
	<tr>
		<td>set5</td>
		<td>A, B, C, D</td>
	</tr>
	<tr>
		<td>set2</td>
		<td>B, C, D, E</td>
	</tr>
	<tr>
		<td>resulting set5</td>
		<td>A</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create and use a set of <em>CATString</em> instances. 
The same capabilities apply to a set of <em>CATUnicodeString</em> instances.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
