<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Directories and Files</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Directories and Files</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to manage directories and files.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASysFileOperations Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASysFileOperations Do</a></li>
					<li><a href="#How">How to Launch CAASysFileOperations</a></li>
					<li><a href="#Where">Where to Find the CAASysFileOperations 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to manage directories and files.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASysFileOperations Use Case</h2>
<p>CAASysFileOperations is a use cases of the CAASystem.edu framework that illustrates 
System framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASysFileOperations Do</h3>
<p>This use case creates a directory in a directory passed as input, and creates 
ten files in this created directory. It checks the directory access permissions 
beforehand, and if the directory to create doesn't exist. It then scan the created 
directory and makes a list of the created files. It should be launched as follows 
from the command line:</p>
<pre>CAASysFileOperations WorkingDir NewDir</pre>
<p>where <code>WorkingDir</code> is the directory in which <code>NewDir</code> should 
be created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASysFileOperations</h3>
<p>To launch CAASysFileOperations, you will need to set up the build time environment, 
then compile CAASysFileOperations along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASysFileOperations Code</h3>
<p>The CAASysFileOperations use case is made of a several classes located in the 
CAASysFileOperations.m module of the CAASystem.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASystem.edu\CAASysFileOperations.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a directory, create files in it, scan the created directory, and close 
the directory, there are six main steps:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Access Permissions</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating a Directory Path</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Checking That the Directory Path Does not Already Exist</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating the Directory and the Files</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Scanning the Created Directory</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Closing the Directory</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Access Permissions</h3>
<p>The two command line parameters are retrieved in <code>WrkDir</code> and
<code>DirName</code> respectively.</p>
<pre class="code">...
  <strong>CATLibStatus</strong> status = ::<strong>CATFileAccess</strong>(WrkDir, <strong>W_OK</strong>);
  if (<strong>CATLibError</strong> == status)
  {
    exit(-1);
  }
...</pre>
<p>The access permissions to the <code>WrkDir</code> directory in which a new one 
should be created are checked using the <code>CATFileAccess</code> global function, 
with the parameter <code>W_OK</code>, that makes <code>CATFileAccess</code> checks 
for writing permission. If this permission is not available, the status returned 
is <code>CATLibError</code>, and the program ends.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Directory Path</h3>
<p>The access permissions enables the creation of a directory in <code>WrkDir</code>.</p>
<pre class="code">...
  char Path[1024];
  ::<strong>CATMakePath</strong>(WrkDir, DirName, Path);
...</pre>
<p>The <code>CATMakePath</code> global function creates a path name for the directory
<code>DirName</code> in <code>WrkDir</code>. This pathname is returned in <code>
Path</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Checking That the Directory Path Does not Already Exist</h3>
<pre class="code">...
  status = ::<strong>CATFileAccess</strong>(Path, F_OK);
  if (<strong>CATLibSuccess</strong> == status)
  {
    cout &lt;&lt; &quot; A file or directory named &quot; &lt;&lt; DirName &lt;&lt; &quot; already exists&quot; &lt;&lt;endl;
    CATFileInfo Stat;
    status = ::<strong>CATGetFileInfo</strong>(Path, &amp;Stat);
    if (CATLibError == status)
    {
      cout &lt;&lt; &quot; Can't access to file information&quot; &lt;&lt; endl;
      exit (-1);
    }
    if (S_IFDIR != (Stat.st_mode &amp; S_IFDIR))
    {
      cout &lt;&lt; Path &lt;&lt; &quot; is a file&quot; &lt;&lt; endl;
      exit (-1);
    }
    else
      cout &lt;&lt; &quot;Directory &quot; &lt;&lt; Path &lt;&lt; &quot; already exists &quot; &lt;&lt; endl;
  }
...</pre>
<p>The <code>CATFileAccess</code> global function checks that a file with the pathname
<code>Path</code> doesn't already exist. <code>F_OK</code> requests file (or directory) 
existence checking. If the file exists, the <code>CATGetFileInfo</code> global function 
retrieves the file information in the <code>Stat</code> structure. Then, <code>Stat</code> 
is used to determine whether <code>Path</code> refers to a file or a directory. 
If a file exists, nothing else can be done, and the programs stops, but if this 
is a directory, it will be used.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Directory and the Files</h3>
<p>The access permissions enables the creation of a directory in <code>WrkDir</code>.</p>
<pre class="code">...
  else
  {
    status = ::<strong>CATCreateDirectory</strong>(Path);
    if (CATLibError == status)
    {
      cout &lt;&lt; &quot; Can't create &quot; &lt;&lt; Path &lt;&lt;endl;
      exit (-1);
    }
    for (int i=0; i&lt; 10; i++)
    {
      char name[14];
      sprintf(name, &quot;FILE%x&quot;, i);
      char FilePath[1024];
      ::<strong>CATMakePath</strong>(Path, name, FilePath); 
      FILE *fd = fopen(FilePath, &quot;w+b&quot;);
      fclose(fd);  
    }
...</pre>
<p>The <code>CATCreateDirectory</code> global function creates a directory with 
the path name <code>Path</code>. Then the <code>CATMakePath</code> global function 
creates in the <code>Path</code> directory as many files as requested with the names
<code>FILE0</code>, <code>FILE1</code>, and so on up to <code>FILE9</code>.
<code>w+b</code> means that these files are in write mode, and have the binary format.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Scanning the Created Directory</h3>
<p>The files created are now scanned, and their file names displayed.</p>
<pre class="code">...
    CATDirectory Dir;
    status = ::<strong>CATOpenDirectory</strong>(Path, &amp;Dir);
    if (CATLibError == status)
    {
      cout &lt;&lt; &quot; Can't open directory &quot; &lt;&lt; Path &lt;&lt; endl;
      exit (-1);
    }
    int EndOfDir=0;
    <strong>CATDirectoryEntry</strong> Entry;
    cout &lt;&lt; &quot;Listing of the Directory &quot; &lt;&lt; Path &lt;&lt; endl;
    while ((EndOfDir != 1) &amp;&amp; (CATLibSuccess == status))
    {
      status = ::<strong>CATReadDirectory</strong>(&amp;Dir, &amp;Entry, &amp;EndOfDir);
      if ((CATLibError == status) &amp;&amp; (EndOfDir !=1))
      {
        cout &lt;&lt; &quot; Can't read next entry in &quot; &lt;&lt; Path &lt;&lt; endl;
        exit (-1);
      }
      cout &lt;&lt; Entry.name &lt;&lt; endl;
    }
...</pre>
<p>The <code>CATOpenDirectory</code> global function opens the created directory, 
and if this opening is successful, the directory is scanned using the <code>CATReadDirectory</code> 
global function that returns the file name in <code>Entry</code>, and whether the 
end of the directory is reached by returning 1 or 0 in <code>EndOfDir</code>, 1 
meaning that the end is reached.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Closing the Directory</h3>
<p>The directory can now be closed.</p>
<pre class="code">...
    status = ::<strong>CATCloseDirectory</strong>(&amp;Dir);
    if (CATLibError == status)
    {
      cout &lt;&lt; &quot; Can't close the directory &quot; &lt;&lt; Path &lt;&lt; endl;
      exit (-1);
    }
...</pre>
<p>The <code>CATCloseDirectory</code> global function closes the directory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a directory, create files in it, scan the created 
directory, and close the directory.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
