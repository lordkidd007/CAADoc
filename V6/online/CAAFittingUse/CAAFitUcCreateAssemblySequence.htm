<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating an Assembly Sequence with Track</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Assembly Sequence with Tracks</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes an example of creation of an Assembly Sequence 
		with Tracks in Simulation context. It also explains how to modify the sequence 
		of Tracks inside this Assembly Sequence.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFittingSequencingUseInMSR Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFittingSequencingUseInMSR Do</a></li>
					<li><a href="#How">How to Launch CAAFittingSequencingUseInMSR</a></li>
					<li><a href="#Where">Where to Find the CAAFittingSequencingUseInMSR 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create an Assembly Sequence and 
how to sequence Tracks inside of this Assembly Sequence using time constraints.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFittingSequencingUseInMSR Use Case</h2>
<p>CAAFittingSequencingUseInMSR is a use case of the CAAFittingSequencingItf.edu 
framework that illustrates DELFittingSequencingItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFittingSequencingUseInMSR Do</h3>
<p>CAAFittingSequencingUseInMSR begins with opening of a Manufacturing Simulation 
PLM Component in a V6 session. This Manufacturing Simulation contains a Product 
as Model and several Tracks defined as Excitations.</p>
<p>Then it creates an Assembly Sequence and add the Tracks to it. No default sequencing 
is applied to the Tracks. A first sequence of Tracks is created and it is modified 
changing the time constraints.</p>
<p>Finally the use case saves the modified Manufacturing Simulation PLM Component 
that can be then opened in a V6 interactive session to visualize the result in a 
Gantt editor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFittingSequencingUseInMSR</h3>
<p>To launch CAAFittingSequencingUseInMSR, you will need to set up the build time 
environment, then compile CAAFittingSequencingUseInMSR along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Launch the use case as follows:</p>
<pre class="code">mkrun -c<em> &quot;CAAFittingSequencingUseInMSR repository server user password SecurityCtx environment PLMExternalID version&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The name and port of the server as name:port_number (e.g. e4au2dsy:1571)</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user</td>
		<td>The user name (e.g. odtitp)</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>environment</td>
		<td>A PLM environment</td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalID</td>
		<td>MfgSimulation-WithQuad_Product-CAA (the PLM_ExternalID value of the 
		input Manufacturing Simulation PLM Reference)</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>version</td>
		<td>--- (the majorrevision value of the input Manufacturing Simulation PLM Reference)</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection. </li>
	<li>The <strong>environment</strong> is necessary to locate the necessary Modelers.</li>
	<li>The last two arguments define the <strong>values</strong> of the <strong>
		attribute names</strong>.</li>
</ul>
<p>You can execute this use case based on provided data importing the 3D XML file 
supplied in the CAAFittingSequencingItf.edu framework:<code><br />
InstallRootFolder\CAADoc\CAAFittingSequencingItf.edu\InputData\MfgSimulation-WithQuad_Product.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFittingSequencingUseInMSR Code</h3>
<p>The CAAFittingSequencingUseInMSR use case is made of a single file located in 
the CAAFittingSequencingUseInMSR.m module of the CAAFittingSequencingItf.edu framework:
<code>InstallRootFolder\CAADoc\CAAFittingSequencingItf.edu\CAAFittingSequencingUseInMSR.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six logical steps in CAAFittingSequencingUseInMSR:</p>
<ol>
	<li><a href="#Step1">Creating and initializing the PLM environment</a></li>
	<li><a href="#Step2">Querying and loading the Simulation PLM Reference</a></li>
	<li><a href="#Step3">Creating the Assembly Sequence</a></li>
	<li><a href="#Step4">Retrieving Tracks and adding them to the Assembly Sequence</a></li>
	<li><a href="#Step5">Modifying the Track sequence changing the time constraints</a></li>
	<li><a href="#Step6">Saving the modified Manufacturing Simulation</a> and closing 
		the PLM session</li>
</ol>
<h3>Introduction and vocabulary</h3>
<p>Before describing the use case in details, some technical information are necessary.</p>
<p>Tracks and Assembly Sequence are regular V6 Features. As a Track can be added 
several times in the same Assembly Sequence and Assembly Sequences can be added 
to Assembly Sequences, we have introduced the notion of <strong>Assembly Activity</strong>.</p>
<p>An Assembly Activity is not a Feature, it is a C++ object, &quot;instantiation&quot; 
of a Feature (Tracks or Assembly Sequence) in an Assembly Sequence seen itself as 
an Assembly Activity. Assembly Activities have father/child relation between them. 
Because of possible multi-instantiation, this concept is very similar to the occurrence 
concept for PLM Components.</p>
<p>Sequencing of Track is defined on Assembly Activities. In order to manage the 
order of Assembly Activities inside the sequence, time constraints are created between 
them.</p>
<p>An Assembly Activity can be added before or after another one, it means that 
a time constraint is created between them: end time of the first activity is smaller 
than the begin time of the second one or the opposite (begin time of the first activity 
is greater than the end time of the second one). The existing constraints on the 
first Assembly Activity are removed but the ones on the second Assembly Activity 
are kept.</p>
<p>
<img alt="Example to illustrate AddAfterInSequence" src="images/AddAfterInSequence.png"/></p>
<p>An assembly Activity can be inserted before or after another one. In this case, 
the existing constraints on the first Assembly Activity are still removed but the 
ones on the second Assembly Activity are rerouted.</p>
<p>
<img alt="Example to illustrate InsertBeforeInSequence" src="images/InsertBeforeInSequenceA.png"/></p>
<p>The existing constraint between TrackB and TrackC is removed. The one between 
TrackA and TrackB is rerouted from TrackA to TrackC.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and initializing the PLM environment</h3>
<pre class="code">...
    HRESULT rc = ::CAAAdpCreateSession(repository, server, user, password, securityContext, TRUE); 

    // Set the current environment
    //----------------------------
    PLMPSISessionHelpers* pSessionHelpers = NULL;
    rc = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
    if (NULL != pSessionHelpers)
    {
        rc = pSessionHelpers-&gt;SetCurrentEnvironment(environment);
    }
...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2">Querying and loading the Simulation PLM Reference</a></h3>
<pre class="code">
...
    // Retrieve object type to search
    CATIType_var hSimulationRefType;
    rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType("SIMObjSimulationObjectGeneric",hSimulationRefType);

    // Query
    CATListPtrCATAdpQueryResult oQueryResults;
    CATAdpAttributeSet AttributeSet;
    AttributeSet.AddAttribute("PLM_ExternalID", SimulationId);
    AttributeSet.AddAttribute("V_version", version);

    rc = CATAdpPLMQueryServices::GetElementsFromAttributes(hSimulationRefType,AttributeSet,oQueryResults);  
...</pre>
<p>This section represents the usual sequence to query a Simulation Reference in 
the database and to open it in session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3">Creating the Assembly Sequence</a></h3>
<pre class="code">
...
    // Get the factory
    DELIFitFactory_var hFitFactory;
    rc = DELGetFitFactory(hFitFactory);
    
    DELIFitActivityReference_var hRootAssSequence;
    DELIFitAssemblyActivity_var hRootAssSequenceAssemblyActivity;
    
    // Create Assembly Sequence
    rc = hFitFactory-&gt;CreateRootAssemblySequence (hRootAssSequence, hRootAssSequenceAssemblyActivity);    
...</pre>
<p>A factory exists to create Assembly Sequence Features in DELFittingSequencingItf 
framework: it can be retrieved with <code>DELGetFitFactory</code> API. The interface
<code>DELIFitFactory</code> is available on this factory and the API <code>CreateRootAssemblySequence</code> 
allows to create Assembly Sequence with the following output arguments :</p>
<ul>
	<li><code>hAssSequence</code> is the created Assembly Sequence</li>
	<li><code>hRootAssSequenceAssemblyActivity</code> is the related Assembly Activity<br />
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving Tracks and adding them to the Assembly Sequence</h3>
<pre class="code">...
    DELIFitAssemblyActivityPLMRetrieval_var hSimulationReferenceActivityRetrieval = hSimulationReference;
    
    CATListValCATBaseUnknown_var TrackActivitiesRef;
    rc = hSimulationReferenceActivityRetrieval-&gt;GetChildrenActivityReference (TrackActivitiesRef);    
...</pre>
<p>First step is to retrieve the Tracks thanks to the interface <code>DELIFitAssemblyActivityPLMRetrieval</code> 
that is available on the Simulation PLM component. The output of the <code>GetChildrenActivityReference</code> 
method is a list of Track Features with the Assemby Sequence Feature.</p>
<pre class="code">...
    DELIFitAssemblySequenceActivity_var hRootAssSequenceActivity = hRootAssSequenceAssemblyActivity;
    
    // Get Tracks reference
    DELIFitActivityReference_var hActivityReference1 = TrackActivitiesRef[5];
    DELIFitActivityReference_var hActivityReference2 = TrackActivitiesRef[4];
    DELIFitActivityReference_var hActivityReference3 = TrackActivitiesRef[3];
    DELIFitActivityReference_var hActivityReference4 = TrackActivitiesRef[2];
        
    // Add Track1, Track2, Track3 and Track4 : corresponding Assembly Activities are created
    DELIFitAssemblyActivity_var hAssemblyActivity1, hAssemblyActivity2, hAssemblyActivity3, hAssemblyActivity4;
    rc = hRootAssSequenceActivity-&gt;AddChild (hActivityReference1, hAssemblyActivity1);  
    rc = hRootAssSequenceActivity-&gt;AddChild (hActivityReference2, hAssemblyActivity2);
    rc = hRootAssSequenceActivity-&gt;AddChild (hActivityReference3, hAssemblyActivity3);
    rc = hRootAssSequenceActivity-&gt;AddChild (hActivityReference4, hAssemblyActivity4);      
...</pre>
<p>Then each Track Feature is added to the Assembly Sequence related Assembly Activity 
(<code>hRootAssSequenceActivity</code>) with <code>AddChild</code> method on interface
<code>DELIFitAssemblyActivity</code>. An Assembly activity related to each Track 
Feature is then created and this is this one that is child of <code>hRootAssSequenceActivity</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5">Modifying the Track sequence changing the time constraints</a></h3>
<pre class="code">...
    DELIFitSequencing_var hAssemblyActivitySequencing2 = hAssemblyActivity2;
    DELIFitSequencing_var hAssemblyActivitySequencing3 = hAssemblyActivity3;
    DELIFitSequencing_var hAssemblyActivitySequencing4 = hAssemblyActivity4;
	
    rc = hAssemblyActivitySequencing2-&gt;AddAfterInSequence (hAssemblyActivity1);
    rc = hAssemblyActivitySequencing3-&gt;AddAfterInSequence (hAssemblyActivity2);
    rc = hAssemblyActivitySequencing4-&gt;AddAfterInSequence (hAssemblyActivity3);
...</pre>
<p>The sequencing is working on Assembly Activities objects. The interface to use 
is <code>DELIFitSequencing</code>. Here we create a simple linear sequence (Track1, 
Track2, Track3, Track4), so the method <code>AddAfterInSequence</code> is used for 
each Assembly Activity.</p>
<pre class="code">...
    rc = hAssemblyActivitySequencing4-&gt;InsertBeforeInSequence (hAssemblyActivity2);
    
    rc = hAssemblyActivitySequencing3-&gt;AddBeforeInSequence (hAssemblyActivity2);
...</pre>
<p>It is possible then to modify this sequence inserting Track4 between Track1 and 
Track2 with <code>InsertBeforeInSequence</code> method.</p>
<p>
<img alt="Example to illustrate InsertBeforeInSequence" src="images/InsertBeforeInSequence.png"/></p>
<p>Adding Track3 before Track2 with <code>AddBeforeInSequence</code> will generate 
parallelism between Track1 and Track3.</p>
<p>
<img alt="Example to illustrate AddBeforeInSequence" src="images/AddBeforeInSequence.png"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6">Saving the modified Manufacturing Simulation</a> and closing 
the PLM session</h3>
<pre class="code">...
    CATAdpSaver Saver;
    Saver.Save(NULL);
    
    rc = ::CAAAdpCloseSession();
...</pre>
<p>This section represents the usual sequence for saving a newly created PLM Reference 
and closing the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Sequencing Tracks in Simulation context necessitates to work with Assembly Activities 
which allows reusability of Assembly Sequences through multi-instantiation.
<code>DELIFitFactory</code> is the interface to create Assembly Sequence and
<code>DELIFitSequencing</code> is the one to sequence the Assembly Activities creating 
time constraints between them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [March 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
