<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Customizing PLM Search Types Visibility</title>
<link rel="stylesheet" type="text/css" href="caav5.css"/>
<script type="text/javascript" src="submit.js">/* */</script>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Customizing PLM Search Types Visibility</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes how to filter the list of the objects the end-user 
		can search for (from the Bar and Advanced Search).</p>
		<ul>
			<li><a href="#Intro">Introduction</a></li>
			<li><a href="#WriteRsc">Writing Resource Files</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Intro"></a>Introduction</h2>
<p>The goal of the PLM environments is to organize the custom data models so that 
each discipline can create only its own data while still able to query and access 
others&#39;. For each PLM environment, the administrator decides which data models of 
a Component Modeler will be <em>usable</em>, i.e. can be retrieved by a search. This 
customization is done on a Component Modeler basis. This articles explains how to 
refine the list of the searchable objects at Type level.</p>
<p>Notice that a first filtering is done at environment level: only PLMCoreReference, 
PLMCoreRepReference or PLMConnection core types can be queried from PLM Search.</p>
<p>The administrator or the end-user can declare for a customer customization a 
resource file (CATRsc suffix) in which he declares explicitly which types among 
those proposed in the environments should be finally available for Search.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="WriteRsc"></a>Writing Resource Files</h2>
<h3><a name="FileSyntax"></a>File syntax</h3>
<p>The resource file naming convention is:</p>
<pre>PLMVisibility_[domain name].CATRsc</pre>
<p>where [domain name] identifies a customer customization of the data model.</p>
<p>The statements inserted in the resource file should respect following syntax:</p>
<pre class="code">[Custo].[Modeler].[CoreType] = &quot;queriable&quot;;</pre>
<p>where [CoreType] is either PLMCoreReference, PLMCoreRepReference or PLMConnection</p>
<p>A core type that will not be declared as &quot;queriable&quot; will not be available for 
Search. Consequently delivering an empty file PLMVisibility_XXX.CATRsc will make 
all the types of the customization XXX unavailable.</p>
<p>For UNICORN types, the convention for file naming is </p>
<pre>PLMVisibility_[Knowledge_Type].CATRsc</pre>
<p>and for statement inserted in it, the format should be </p>
<pre class="code">[Knowledge_Type] = &quot;queriable&quot;;</pre>
<p>where [Knowledge_Type] identifies the Knowledge type's internal name, with 
the convention to replace space and hyphen characters by underscore.</p>
<p>&nbsp;</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ModelervsCusto"></a>Customization vs. Modeler Declarations</h3>
<p>Dassault Systèmes also uses PLMVisibility_XXX.CATRsc files to declare searchable 
types at modeler level. These declarations are used when no resource file is associated 
to a customized type.</p>
<p>Consider a modeler M1 and three customizations C1, C2 and C3 of this modeler. 
Consider also following declarations in files:</p>
<p>&nbsp;&nbsp;&nbsp; PLMVisibility_M1.CATRsc: at modeler level References and Representation 
References can be queried.</p>
<pre class="code">M1.PLMCoreReference    = &quot;queriable&quot;;
M1.PLMCoreRepReference = &quot;queriable&quot;;</pre>
<p>PLMVisibility_C1.CATRsc: C1 customized Representation References are NOT accessible.</p>
<pre class="code">C1.M1.PLMCoreReference = &quot;queriable&quot;;</pre>
<p>PLMVisibility_C2.CATRsc: the declarations below is not valid. It tries to make 
C2 Connections accessible for Search whereas they have been disabled at modeler 
level.</p>
<pre class="code">C2.M1.PLMConnection = &quot;queriable&quot;;</pre>
<p>As an example, here is the resource file for PRODUCT modeler: PLMVisibility_PRODUCT.CATRsc</p>
<pre class="code">PRODUCT.PLMCoreReference    = &quot;queriable&quot;;
PRODUCT.PLMCoreRepReference = &quot;queriable&quot;;</pre>
<p>A customer that would want to hide the Representation references for its own 
customization CUSTO1 of Product data model should deliver a new resource file: PLMVisibility_CUSTO1.CATRsc 
and write:</p>
<pre class="code">CUSTO1.PRODUCT.PLMCoreReference = &quot;queriable&quot;;</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="FileLocation"></a>File Location</h3>
<p>You can deliver resource files specific for each connector or common to all connectors. 
For this purpose following file tree structure is proposed for resource files:</p>
<p>
<img alt="Resource Tree Structure" src="custo_searchtypesvisibility_01.gif" width="573" height="187"/></p>
<p>All the *.CATRsc files are found in the directories pointed by the official environment 
variable CATInstallPath concatenation. Typically for a 3DLive installation:</p>
<pre>CATInstallPath=C:\Program Files\Dassault Systemes\3DLive\custo\intel_a;C:\Program Files\Dassault Systemes\3DLive\intel_a</pre>
<p>To simplify, let&#39;s set CATInstallPath=path1;path2<br />
Resource files can be specific to a connector or common to all connectors. Considering 
a connection to a Live 3D XML data source, then the following paths will be parsed 
to look for valid definitions regarding order:</p>
<ul>
	<li>path1\resources\plmsearch\types_visibility\DXP</li>
	<li>path2\resources\plmsearch\types_visibility\DXP</li>
	<li>path1\resources\plmsearch\types_visibility</li>
	<li>path2\resources\plmsearch\types_visibility</li>
</ul>
<p>It is <strong>strongly recommended to the customer to deliver its own customization 
files in custo directory</strong> path1 and not to modify the files delivered by 
Dassault Systèmes in path2.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Writing just a resource file (a CATRsc) with simple syntax and putting them in 
custo-dedicated directory of its installation, customer can filter the list of objects 
he will be proposed to search for.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
