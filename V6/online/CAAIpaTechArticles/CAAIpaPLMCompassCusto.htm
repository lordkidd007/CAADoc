<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="caav5.css" rel="stylesheet" type="text/css"/>
<script src="submit.js" type="text/javascript">/* */</script>
<title>Customizing the B.I. Essentials</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Customizing the B.I. Essentials</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article shows how to customize the labels and the rendering of the 
		B.I. Essentials by using Knowledge scripts.</p>
		<ul>
			<li><a href="#Intro">Introduction</a></li>
			<li><a href="#Custo">Customization</a></li>
			<li><a href="#Limitations">Limitations</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Intro"></a>Introduction</h2>
<p><strong>Conceptual Model</strong></p>
<p>The B.I. Essentials concept is to allow dynamic identification of elements of 
any PLM structure, which will help the user to orient himself and look for information 
in a structured way. </p>
<p>The classifications are listed in the B.I. Essentials menu as shown below:</p>
<p>
<img alt="B.I. Essentials" src="CAAIpaPLMCompassCusto_files\custo_Openness.jpg"/></p>
<p>This documentation concerns the customizing of the B.I. Essentials.</p>
<p><strong>Capability Summary</strong></p>
<p>This article describes the capability to customize the B.I. Essentials.</p>
<p>For each type of editor, it will be possible to register a set of customizations.</p>
<p>Each customization will manage:</p>
<ul>
	<li>The caption display in order to explain what is the nature and meaning of 
	the information that is shown.</li>
	<li>The PLM Shading (color in the 3D view) of the B.I. Essentials and the background 
	color of texts displayed in the spec tree.
	<ul>
		<li>RGB color and transparency coefficient, homogenous for both items: 3D 
		representation and background color of texts.</li>
	</ul>
	</li>
	<li>The labels of the B.I. Essentials.
	<ul>
		<li>Icons and texts of each row of the labels.</li>
	</ul>
	</li>
</ul>
<p>Each customization will rely on properties stored locally on each node of the 
tree. A mechanism of rule scripts is proposed for evaluating properties.</p>
<p>Therefore when a customer extends the PLM Data model, and adds new PLM attributes 
to objects, it will be possible to enhance the B.I. Essentials to have it taking 
into account the &quot;customer specific&quot; information.</p>
<p><strong>External View/Behavior</strong></p>
<p>For information, the B.I. Essentials presented to the end-user will be the one 
delivered by Dassault Systèmes, It is our STANDARD.</p>
<p>This Standard will be activated each time a user launches a new session.</p>
<ul>
	<li>When selecting B.I. Essentials, a drop down list shows the list of available 
	customizations plus the standard B.I. Essentials behavior. The user selects 
	one item to see the associated rendering.</li>
	<li>The B.I. Essentials Checker(explained later) appears in the drop down list 
	as the last entry.</li>
	<li>If the customization files are modified during the Session, these modifications 
	can be reloaded using BI Essentials Checker(explained later).</li>
	<li>When one classification rule of the B.I. Essentials is in use, the shading 
	color is consistent between the tree (text background color) and the 3D representations.</li>
	<li>Whenever a customization is selected, a set of rules are executed to provide 
	information about:
	<ul>
		<li>The color codes and associated legends of the caption area.</li>
		<li>Texts and icons which are shown in the labels.</li>
		<li>The color code to be applied for each node and associated 3D representation.</li>
	</ul>
	</li>
	<li>If the tree is already customized, the B.I. Essentials customization will 
	overload his customization during its use.</li>
</ul>
<p>
<img alt="B.I. Essentials" src="CAAIpaPLMCompassCusto_files\PLMBiShading.jpg"/></p>
<p><strong>User Interface</strong></p>
<p>The standard user interface of the B.I. Essentials(old Name Compass) is modified.</p>
<p>In addition, a new list of choices are available to choose one customization 
from the list. The list also contains the default behaviors supplied by Dassault-Systèmes, 
all ordered alphabetically. </p>
<p>
<img alt="B.I. Essentials Customization with Openness" src="CAAIpaPLMCompassCusto_files\custo_Openness.jpg"/></p>
<p>
<img alt="B.I. Essentials Customization" src="CAAIpaPLMCompassCusto_files\custo_Customization.jpg"/></p>
<p>
<img alt="B.I. Essentials Customization Set" src="CAAIpaPLMCompassCusto_files\custo_set.jpg"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Custo"></a>Customization</h2>
<p><strong>Customization Principle</strong></p>
<p><em>The default behavior - reminder:</em></p>
<p>The selected classifying rule from B.I. Essentials, compute and display information 
about PLM Objects STATE relying on predefined PLM Attributes. These attributes belong 
to the basic PLM types.</p>
<p>For example: the LOCK status rule displays for each object a STATE relying on 
the V_LockOwner and V_Owner attributes.</p>
<p>These attributes are available on any Reference object (Part, Representation 
from any customization).</p>
<p><em>The customized behavior:</em></p>
<p>Let&#39;s suppose a customer deploy a customization of the PLM model this way:</p>
<p>
<img alt="Customized Behavior" src="CAAIpaPLMCompassCusto_files\Type_Custo_Hierarchy.gif"/></p>
<p>Hence there will be a need for displaying two new STATES of PLM objects relying 
on Reviewer and Quality_Resp attributes (added by customization). This will lead 
to two customizations in B.I. Essentials : &quot;Review&quot; and &quot;Quality&quot;.</p>
<p>Parts created in the customer database will be either of type PartRef_Custo1 
or PartRef_Custo2. In one 3DLive window a mix of these objects might be displayed 
at the same time.</p>
<p>So any customization has to declare the way an object STATE is computed on a 
per type basis. This means a customization is made of a set of script rules; each 
rule is associated to one type. When executing a customization, for each PLM object 
of the current window a rule is searched based on the object type. If one is found 
it is executed, otherwise a rule is searched based on the object father type. The 
searching process stops when reaching the PLMCore type level.</p>
<p>As a summary:</p>
<ul>
	<li>A customization is listed in B.I. Essentials.</li>
	<li>A customization is made of one or several rules; each of them is linked 
	to a specific type.</li>
</ul>
<p><strong>Without any Customization</strong></p>
<p>The shading today defined by using the B.I. Essentials will be applied to:</p>
<ul>
	<li>The 3D representations as usual</li>
</ul>
<p><strong>Customization definition</strong></p>
<p><em>Resource file and referenced script files</em>:</p>
<p>To define the customization we need a description for:</p>
<ul>
	<li>The list of PLM attributes that the user wants to use for its customizations.
	<ul>
		<li>All these PLM Attributes must exist in the CATPLMMaskTree
		<ul>
			<li>Customization Name</li>
			<li>Custo</li>
			<li>modeler</li>
			<li>type</li>
			<li>list of PLM Attributes</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>The colors and associated legend of the B.I. Essentials for each customization.
	<ul>
		<li>For the 3D representations and background color of the tree&#39;s texts
		<ul>
			<li>Customization Name</li>
			<li>The Color description i.e. that signifies what is defined by the 
			Color.</li>
			<li>Text of the legend</li>
			<li>Name of the script use to get the color characteristics.</li>
			<li>The RGBA, alpha description of the color.</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>The description of the labels for each customization.
	<ul>
		<li>Customization Name</li>
		<li>For each Row of the label:
		<ul>
			<li>Icon name</li>
			<li>Customized text (in front of the value of the attribute).</li>
			<li>Attribute name to do the query or the name of the script to get 
			the attribute value, depending of what technology will be used to get 
			the PLM information.</li>
		</ul>
		</li>
	</ul>
	</li>
</ul>
<p>All this information will be stored in different .CATRsc files :</p>
<ul>
	<li><strong>BICusto.CATRsc </strong>:- Name of file should not change .The BI-ID 
	and the Scope of the BI is defined here.</li>
	<li>CATRsc which defines the Colors to be used RGBT values.</li>
	<li>Each BI should be defined in separate CATRsc file.</li>
</ul>
<p>The script files contain the rule to get Colors value for a given customization 
(for a unique defined type based on these three characteristics: customization , 
modeler, PLMCoretype) . The rule in the script computes Color, alpha value getting 
the value of the PLM Attributes. This rule has been coded by the user.</p>
<p>The Colors above are defined in a CATRsc file which maps the RGBT values to a 
color name. </p>
<p>The BINames are defined in the BICusto.CATRsc File. </p>
<p><em>Principles:</em></p>
<p>The files defined in the previous paragraph are used to set up the customization.</p>
<p>Here are the main steps of the process (shading and background color of the text 
of the specs tree):</p>
<ul>
	<li>The list of available customizations is built from the resources files.</li>
	<li>The user click down one customization from the B.I. Essentials </li>
	<li>The information for the current customization is obtained from the resources 
	files.
	<ul>
		<li>Definition of the color, text, name of script files</li>
		<li>Definition for the labels.</li>
		<li>All required PLM Attributes used by the customization.</li>
	</ul>
	</li>
	<li>Set the caption area information</li>
	<li>For all objects involved by the customization (which have a 3D representation 
	or a 2D representation or in the specs tree) do a query for all PLM Attributes.
	<ul>
		<li>=&gt; One query for all PLM Objects / all PLM attributes.</li>
	</ul>
	</li>
	<li>Set the value of these attributes in the local buffer of the application(VPM 
	Nav) for each object of the tree.</li>
	<li>For each object call to the script in order to have the RGB, alpha value
	<ul>
		<li>The scripts now get the information from the local buffer of the window.</li>
	</ul>
	</li>
	<li>Set the PLM Shading on the 3D representations and the Tree NOdes by using 
	the RGB, alpha value.</li>
	<li>Set the background color of the text of the 2D representations (specs tree) 
	with the same information.</li>
</ul>
<p>Here are the main steps of the process (labels of the B.I. Essentials):</p>
<ul>
	<li>The user click down one customization of the B.I. Essentials and objects 
	are selected or customization of the B.I. Essentials is in use and the user 
	selects some objects in the 3D view or in the tree of specs.</li>
	<li>The information for the current selected customization of the B.I. Essentials 
	is get from the resources files.
	<ul>
		<li>Definition of the color, text, name of script files.</li>
		<li>Definition for the labels.</li>
		<li>All required PLM Attributes used by the customization.</li>
	</ul>
	</li>
	<li>For all objects involved by the customization (which are selected) do a 
	query for all PLM Attributes.
	<ul>
		<li>=&gt; One query for all PLM Objects / all PLM attributes.</li>
	</ul>
	</li>
	<li>Set the value of theses attributes in the local buffer of the application 
	(VPM Nav) for each selected object of the tree.</li>
	<li>For each object call to the script in order to have the information displayed 
	in the labels.
	<ul>
		<li>The scripts get now the information from the local buffer of the window.</li>
	</ul>
	</li>
	<li>Creates the labels of the B.I. Essentials.</li>
</ul>
<p><strong>Note</strong>: The modification of script files in Session is taken into 
account when you use the Reload Custo Definition button in the BI Essentials Checker. 
But sometimes the Reload button might not work in that case the session should be 
restarted.</p>
<p><strong>Sample of customization</strong></p>
<p>File <strong>BICusto.CATRsc</strong></p>
<pre class="code">
	TST1_Description.Scope=&quot;ALL&quot;; //It should be &lt;BIID&gt;Scope as key  </pre>
<p>Please <strong>Note:</strong> Filename below is the BIID mentioned in the BICusto.CATRSc 
file. So you should have one file for each BI displayed. </p>
<p>File <strong>TST1_Description.CATRsc </strong></p>
<pre class="code">
	LegendNlsFile = &quot;MyBICustoNLSFile&quot;;   //The NLSName of the BI is mentioned here
	ColorRscFile = &quot;MyBICustoColorFile&quot;;   // The Color IDs are defined here.Only One file can be mentioned
	TypeRuleDefinitionFile = &quot;TST1_Attribute_OnRef_RuleTypeAssociation&quot;;  //CATRule and Type Association for both Color and Label
	Version = &quot;3&quot;; // to activate the occurrences mode     
	NumberOfColors = &quot;3&quot;;
	LegendId1 = &quot;REFERENCE_INSTANCE_WITH_DESC&quot;;  //LegendId in the LegendNLS File
	ColorId1  = &quot;Color_Green&quot;;  //ID mentioned in the ColorRscFile
	LegendId2 = &quot;REFERENCE_INSTANCE_WITH_NO_DESC&quot;;
	ColorId2  = &quot;Color_Blue&quot;;
	LegendId3 = &quot;PROBLEM&quot;;
	ColorId3  = &quot;Color_PROBLEM&quot;;
    </pre>
<p>File <strong>MyBICustoNLSFile.CATNls</strong> in &lt;os&gt;<strong>\resources\msgcatalog 
directory</strong></p>
<pre class="code">
	TST1_Description=&quot;Rules_On_Instances&quot;;    //&quot;
	REFERENCE_INSTANCE_WITH_DESC=&quot;Instance Validating Rule&quot;;      //Name as shown in the Screenshot Below
	REFERENCE_INSTANCE_WITH_NO_DESC=&quot;Instance Not Validating Rule&quot;;
	PROBLEM="Not An Instance";
	</pre>
<p>File <strong>MyBICustoColorFile.CATRsc</strong></p>
<pre class="code">
	Color_Green.RGBA="0|255|0|0";
	Color_Blue.RGBA="0|0|255|0";
	Color_PROBLEM.RGBA="255|0|0|0";
	</pre>
<p>File <strong>TST1_Attribute_OnRef_RuleTypeAssociation.CATRsc </strong></p>
<pre class="code">
	Color.Rule.VPMReference = &quot;Test1_Reference&quot;;
	Label.Rule.VPMReference = &quot;Test1_Reference&quot;;
	Color.Rule.VPMRepReference = &quot;Test1_Reference&quot;;
	Label.Rule.VPMRepReference = &quot;Test1_Reference&quot;;</pre>
<p><strong>Note:</strong> The Attributes can also be mentioned in this file instead 
of Attributes_For_Rules.CATRsc file for some Workshops. For now only UNIWorkshop.</p>
<p>File <strong>Test1_Reference.CATRule</strong> in &lt;os&gt;<strong>\resources\knowledge\scripts</strong> 
directory.</p>
<pre class="code">
	Let sObjectDescription(String)
	Let thisReference(PLMCoreReference)
	Let thisOccurrence(ProductOccurrence)
	Let repReference(VPMRepReference)
	Let repInstance(VPMRepInstance)
	Let sColor(String)
	Let sLabel(String)
	Let bVDescExist(Boolean)
	
	sColor="PROBLEM"
	sLabel = ToString(rIndex) + "|TEST1: Attributes on Current Reference|I_NoIcon"
	bVDescExist=false
	Set thisOccurrence=ThisObject

	if (NULL&lt;&gt;thisOccurrence) {
		Set thisReference=thisOccurrence.Reference
		if (NULL&lt;&gt;thisReference) {
			sObjectDescription = thisReference-&gt;V_description
		}
	}
	else {
		Set repInstance=ThisObject
		if (NULL&lt;&gt;repInstance) {
			Set repReference=repInstance.Reference
		}
		else {
			Set repReference=ThisObject
		}
		if (NULL&lt;&gt;repReference) {
			sObjectDescription = repReference-&gt;V_description
		}
	}
	if(NULL &lt;&gt; sObjectDescription) {
		bVDescExist=true
	}
	if (bVDescExist==true) {
		sLabel = sLabel + "|" + ToString(rIndex) + "|STEP 1 - Description=" + sObjectDescription + "|I_NoIcon"
		sColor="REFERENCE_INSTANCE_WITH_DESC"
		sLabel = sLabel + "|" + ToString(rIndex) + "|STEP 2 - Has description in the Object|I_Green"
	}	
	else {
		sColor="REFERENCE_INSTANCE_WITH_NO_DESC"                   //Color can be Legend ID now
		sLabel = sLabel + "|" + ToString(rIndex) + "|STEP 2 - Has No Description Attribute Loaded|I_Blue"
	}

	Parameters-&gt;SetAttributeString("MyColorForPLMCompass",sColor)

	Parameters-&gt;SetAttributeString("MyLabelForPLMCompass",sLabel)
	</pre>
<p><strong>Things to Note In the above Script(Test1_Reference.CATRule):</strong></p>
<ul>
	<li>Here we used the same CATRule to describe the Color and the Label.</li>
	<li>We have used the LegendID but not the ColorID to Assign the Color in the 
	Rule. Its more logical to use the LegendId than the ColorId or the RGBA value.</li>
</ul>
<p>File <strong>Attributes_For_Rules.CATRsc</strong> in <strong>&lt;os&gt;\resources\msgcatalog
</strong>directory.</p>
<pre class="code">
Attributes.VPMReference = &quot;PLM_ExternalID|organization|current|owner|reservedby|V_description&quot;;
Attributes.VPMRepReference = &quot;organization|current|owner|reservedby|V_description&quot;;</pre>
<p><strong>Capability to define rules based on instances</strong> is also provided. 
Here is a sample script for customizing a shading: </p>
<p>The ThisObject is now an OccurrenceObject so you can use the knowledge methods 
to get the instance and Reference. We illustrate the way to do for instances.
</p>
<p>To work with instance: <code>Let InstanceObject(VPMInstance)</code></p>
<p>To check if the is an instance: <code>if(NULL &lt;&gt; ThisOccurrence.Instance)</code></p>
<p>To get the instance: <code>ThisOccurrence.Instance()</code></p>
<p><strong>Note:</strong>If you try to access an Instance which is not defined on 
the object, the whole rule will fail. So, we strongly advice to check its availability 
with: if ( bAllowComputingRuleWithInstanceObject == TRUE )</p>
<pre class="code">
	let InstanceObject(VPMInstance)
	let ThisOccurrence(ProductOccurrence)
	let bAllowComputingRuleWithInstanceObject(boolean)
  
	Set ThisOccurrence = ThisObject
	if(NULL &lt;&gt; ThisOccurrence)
	{
		Set InstanceObject = ThisOccurrence.Instance;
		if( NULL &lt;&gt; InstanceObject )
			bAllowComputingRuleWithInstanceObject = TRUE
	} 
	if ( bAllowComputingRuleWithInstanceObject == TRUE )
	{
		if (InstanceObject.PLM_ExternalID =="Rim.1")
			Parameters-&gt;SetAttributeString("MyColorForPLMCompass","255|0|0|80")
		else
			Parameters-&gt;SetAttributeString("MyColorForPLMCompass","0|0|255|80")
	}
	else
	{
		Parameters-&gt;SetAttributeString("MyColorForPLMCompass","0|255|0|80")
	}
</pre>
<p><img alt="" src="CAAIpaPLMCompassCusto_files\InstanceImage.jpg"/></p>
<p>For defining rules on objects, there is a dedicated Resource file by which we 
can declare <strong>Attributes which can be used in rules</strong></p>
<p>For defining rules on objects, there is a dedicated Resource file named </p>
<p><strong>Attributes_For_Rules.CATRsc</strong></p>
<p>Put in <strong>&lt;os&gt;\resources\msgcatalog</strong> directory.</p>
<p><strong>Note</strong>: this file have been put in the directory msgcatalog, because 
the attributes defined may be used for other customizations (tree / icons etc&#8230;)</p>
<p>Here is its syntax:</p>
<p>Attributes.&lt;Object_type&gt;=&#8221;Attribute_1|Attribute_2|&#8230;&#8230;|Attribute_n&#8221;;</p>
<p>Where attributes separated by a | are retrieved from DataBase.</p>
<p>Example of file <strong>Attributes_For_Rules.CATRsc</strong> : </p>
<p>Attributes.VPMReference = &quot;PLM_ExternalID|V_description|organization&quot;;</p>
<p>Attributes.VPMRepReference = &quot;V_discipline|V_nature&quot;;</p>
<p>So there will be the possibility to define rules based on following attributes 
for the VPMReference real type: </p>
<p>PLM_ExternalID V_description organization </p>
<p>And these ones on VPMRepReference real type : </p>
<p>V_discipline V_nature</p>
<p><strong>Capability to define rules based on extensions</strong> is also provided. 
Here is a sample script for customizing a shading for the extension V_Elec_NumberOfPins:</p>
<pre class="code"> if (ThisObject.GetAttributeInteger(&quot;V_Elec_NumberOfPins&quot;)== 3)
   Parameters-&gt;SetAttributeString(&quot;MyColorForPLMCompass&quot;,&quot;255|0|0|80&quot;)
 else
  Parameters-&gt;SetAttributeString(&quot;MyColorForPLMCompass&quot;,&quot;0|0|255|80&quot;)</pre>
<p>File <strong>Attributes_For_Rules.CATRsc</strong> for extensions support is in
<strong>&lt;os&gt;\resources\msgcatalog directory.</strong></p>
<pre class="code">
	Attributes.VPMReference = &quot;PLM_ExternalID|organization|current|owner|reservedby|V_description&quot;;
	Attributes.VPMRepeReference = &quot;organization|current|owner|reservedby|V_description&quot;;

	Extension.VPMReference=&quot;PLMEleRefEquipment|PLMEleRefSplice&quot;;
	Attributes.VPMReference.PLMEleRefEquipment=&quot;V_Elec_NumberOfPins|V_Elec_SubType&quot;;
	Attributes.VPMReference.PLMEleRefSplice =&quot;V_Elec_Length&quot;;
</pre>
<p><strong>Syntax and integrity management</strong></p>
<p>In a customization, if a color is not correctly defined:</p>
<ul>
	<li>Values not included between 0 and 255 (Because the R value corresponds to 
	Red color which should be between 0 and 255; the G value corresponds to Green 
	color which should be between 0 and 255;the B value corresponds to Blue color 
	which should be between 0 and 255, the alpha value corresponds to transparency 
	which index should be between 0 and 255). Example shown in CATPLMCompassCustomizationOfQuadrants.CATRsc 
	file chapter sample of customization</li>
	<li>A color value is missing.</li>
	<li>etc.</li>
</ul>
<p>In a customization, if no color is correctly defined, the entire customization 
will not be proposed. In such case use the BI Essentials checker to correct the 
problem</p>
<p><em>Integrity Check :</em></p>
<p>If the end user defines many times the same set of custom attributes, only the 
first one will be taken into account.</p>
<p>If a color resulting from rule doesn&#39;t belong to the scope of defined colors, 
the customization will not be applied.</p>
<p><strong>Customization Files localization</strong></p>
<p>For <strong>*.CATRules</strong> files they have to be defined in the directory
<strong>&lt;os&gt;\resources\knowledge\scripts\</strong> </p>
<p>For the unique Resource file named : <strong>BICusto.CATRsc </strong>and the 
supporting CATRsc files like e.g. TST1_Description.CATRsc,MyBICustoColorFile.CATRsc,TST1_Attribute_OnRef_RuleTypeAssociation.CATRsc 
it has to be defined in a directory Provider and role-dependant under <strong>&lt;os&gt;\resources\compass\directory</strong></p>
<p>
<img alt="Customization Files Localization" height="212" src="CAAIpaPLMCompassCusto_files\LocalizeCompass.gif" width="304"/></p>
<p>If the file is defined directly under the plmcompass directory , it will be the 
one used , if no provider is defined (or if there is an invalid definition of the 
current provider). In case of VPM its different the File is taken from VPM Folder 
only if not found then the Loading of CATRsc file fails.</p>
<p>Under the plmcompass directory , there can be defined folders corresponding to 
a different provider. Under each provider directory , there can be defined folders 
corresponding to different roles.</p>
<p>If a <strong>BICusto.CATRsc</strong> is directly defined under a provider directory 
, it will be the one used if the role with which the user has connected is not found 
in the compass hierarchy (see image above).</p>
<p>Here is the list of allowed providers : </p>
<p>ENOVIA VPM : VPM1<br />
3DXML : DXP<br />
ENOVIA SmarTeam : SMT<br />
ENOVIA V6 &#8211; Collaborative Business Process &amp; Design data Management : 
MX1<br />
ENOVIA V6 : PLM1<br />
ENOVIA VPM V5 : EV5</p>
<p>Finally it will be the a <strong>BICusto.CATRsc</strong> file and the &lt;BIID&gt;.CATRsc,&lt;ColorRscFile&gt;.&lt;TypeRuleDefinition&gt;.CATRsc 
file which is under the current connected role which will be used by the B.I. Essentials 
if everything is all right.</p>
<pre class="code">
compass
  |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
  |-Provider1
      |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
      |- Role1.1
            |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
      |- Role1.2
            |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
...
  |-Provider n
      |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
      |- Rolen.1
            |- CATPLMCompassCustomizationOfQuadrants.CATRsc 
      |- Rolen.2
            |- CATPLMCompassCustomizationOfQuadrants.CATRsc</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>With the new Customization the user or administrator cannot change the behavior 
of BI depending on the workshop involved. To do this the user has to do the customziation 
in the Old way of Customization. Please refer the old Customization Documentation 
for this: </p>
<p>These CATRsc files will be located in a directory like : </p>
<p><strong>&lt;os&gt;\resources\plmcompass\PROVIDER\ROLE</strong></p>
<h3><a name="BI essentials Checker"></a>BI Essentials Checker:</h3>
<p>There is a tool in the user interface enabling you to understand syntax errors 
in your customization files, this is the <strong>B.I. Essentials Checker</strong>. 
The new BI Essentials Checker has more new features and improved now.</p>
<p>In the drop down list of B.I. Essentials, select <strong>Check BI Essentials 
Customization</strong> present in separate section as shown below.</p>
<p>
<img alt="BI Checker" src="CAAIpaPLMCompassCusto_files\New_CompassChecker.png"/></p>
<p>Intially the BI Essentials Checker shows the below Report giving the generic 
information of the Customization done on the BI. </p>
<p>
<img alt="BI Checker Default Report" src="CAAIpaPLMCompassCusto_files\BI_Checker_default.gif"/>
</p>
<p>When clicking on <strong>Check an item type</strong> the user have to select 
the geometry or on Tree he wants to customize with the B.I. Essentials. The BI Essentials 
Checker returns the character string of the of the type of the object. The user 
have to insert this string in the &lt;TypeRuleDefinition&gt; .CATRsc file. This displays 
a report related to the Node and the CATRule when applied on it.</p>
<p>
<img alt="BI Checker Check Item" src="CAAIpaPLMCompassCusto_files\CheckItemType.jpg"/></p>
<p>With the new BI Essentials Version the user can Reload the customization if you 
have made some changes to the customization during the Session.</p>
<p>
<img alt="BI Checker Reload Button" src="CAAIpaPLMCompassCusto_files\ReloadBIButton.jpg"/></p>
<p><strong>NOTE: </strong>Sometimes the Reload does not work due to wrong CATRsc 
Files in that case a new session may be required </p>
<p>A drop down comes when you click on the Drop Down Button which is named
<strong>Select BI To Analyse</strong></p>
<p>
<img alt="Checker Bi LIst" src="CAAIpaPLMCompassCusto_files\CheckerBIList.jpg"/></p>
<p>To check the CATRule definition use the <strong>Check CATRule Definition</strong> 
Button in the Checker. It shall generate a report just as below.</p>
<p>The Check CATRule Button</p>
<p>
<img alt="Check CATRule Definition Button" src="CAAIpaPLMCompassCusto_files\CheckCATRuleButton.jpg"/></p>
<p>The Check CATRule Definition Report</p>
<p>
<img alt="Check CATRule Definition" src="CAAIpaPLMCompassCusto_files\CheckCATRule.jpg"/></p>
<h2><a name="Limitations"></a>Limitations</h2>
<pre class="code"><strong>Limitation #1:</strong>
The customization of the B.I. Essentials works only in VPM Navigator, Search and Physical Editor workshop</pre>
<pre class="code"><strong>Limitation #2:</strong>
If no customization of the B.I. Essentials is defined, in its default working behavior, the background color of the tree won&#39;t change.</pre>
<pre class="code"><strong>Limitation #3: </strong>
The customization of the B.I. Essentials is based on attributes of the <strong>tree mask</strong> defined in the rules, or on the attributes defined in the 
<strong>Attributes_For_Rules.CATRsc</strong> file.</pre>
<pre class="code"><strong>Limitation #4:</strong>
Update of information in the case of labels.
The displayed information in the label for selected objects are always refreshed from DataBase.
These information (as in the default behavior of the compass today defined) may be &quot;fresher&quot; 
than the information relative to the 3D shading  and the Tree  Background color.</pre>
<pre class="code"><strong>Limitation #5:</strong>
It is  not possible , in a CATRule to compare a character string with a space inside It or with special characters (as # ! etc...)
    example which doesn&#39;t work: 
        if (ThisObject.reservedby==&quot;MY NAME&quot;) 
        Parameters-&gt;SetAttributeString(&quot;MyColor&quot;,&quot;0|255|0&quot;)</pre>
<pre class="code"><strong>Limitation #6:</strong>
The character comparison is Case Sensitive, so it is required to take into account the case.</pre>
<pre class="code"><strong>Limitation #7:</strong>
The B.I. Essentials Checker Tool won&#39;t check the content of <strong>Attributes_For_Rules.CATRsc</strong>.</pre>
<pre class="code"><strong>Limitation #8:</strong>
There is a limitation due to the transparency algorithm implementation.
As far as the polygons are concerned, the results might not be as expected,
when the triangles are blended with the rest of the scene.
As it is too costly and may adversely affect performance, polygons are not drawn using a Z order(ie: depth order).
Therefore it is not possible to be sure that when transparent polygon is blended, all the scene is drawn behind.
Transparent polygons are drawn at the end of the draw phase by they are not depth-stored,

Suggestion:
Paint objects without transparency or paint objects with a strong transparency.</pre>
<pre class="code"><strong>Limitation #9:</strong>
Only PLM attributes and objects are taken in account (not features).</pre>
<pre class="code"><strong>Limitation #10:</strong>
the BI canot be cusomized to specific Workshops. Please follow old way of customization for the same.</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The following CATRsc file to write: <strong>BICusto .CATRsc ,&lt;BIID&gt;.CATRsc, &lt;ColorID&gt;.CATRsc,&lt;TypeRuleDefinitionFile&gt;.CATRsc, 
and Attributes_For_Rules.CATRsc.</strong> All CATRule file which is described in
<strong>&lt;TypeRuleDefinitionFile&gt;.CATRsc</strong> to write. </p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
