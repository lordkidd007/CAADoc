<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Customizing the Tree Color and Icon Masks</title>
<link rel="stylesheet" type="text/css" href="caav5.css"/>
<script type="text/javascript" src="submit.js">/* */</script>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Customizing the Tree Color and Icon Masks</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes how to customize the background color of texts 
		and the masks of icons of the Navigator and Editor trees (VPM and PPR) depending 
		on end-user defined rules based on attributes.</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#WhatCustomize">What Can Be Customized?</a></li>
			<li><a href="#HowToCustomize">How to Define a Customization</a></li>
			<li><a href="#TCS">Tree Color Sample</a></li>
			<li><a href="#IMS">Icon Mask Sample</a></li>
			<li><a href="#Limitations">Limitations</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>ENOVIA V6, ENOVIA VPM V4 and ENOVIA V5 VPM users have many possibilities for 
customizing their Product Structure Navigator (PSN).</p>
<p>Consequently in the context of offering a new solution the isofunctional aspect 
becomes more important.</p>
<p>The customization is based upon knowledge rules using PLM attributes.</p>
<p>The customization mechanism is based on script files and applied to <strong>PPR 
Navigator</strong> and <strong>VPM Navigator</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="WhatCustomize"></a>What Can Be Customized?</h2>
<p>All the <strong>references</strong> and <strong>representation references
</strong>are customizable (not the instances item).</p>
<p>A different customization can be defined for different customized types, e.g. 
ENOSAM_VPMPart and PLMProductDS.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="HowToCustomize"></a>How To Customize</h2>
<p>First define a family that will allow a rule to be rerouted according to object 
type.</p>
<p>This family is a CATRuleExit file, this file must be located in the following 
runtime view directory : <strong>&lt;os&gt;\resources\knowledge\scripts</strong>.</p>
<p>The Rule is a CATRule file, this file must be located in the following runtime 
view directory : <strong>&lt;os&gt;\resources\knowledge\scripts</strong>.</p>
<p>These script files must be located in the following runtime view directory \intel_a\resources\knowledge\scripts</p>
<p><strong>Syntax</strong>:</p>
<p>Two Keywords are to be used in family files:</p>
<ol>
	<li>ManageColor, if you want your rule to control your colors.</li>
	<li>ManageMask, if you want your rule to control your icon masks.</li>
</ol>
<p>After that, in your CATRule file, you can condition the information you send 
by using following items:</p>
<ul>
	<li>Parameters-&gt;SetAttributeString(&quot;MyColor&quot;,&quot;255|255|255&quot;)
	<p>You have to define three values, corresponding to the desired RGB values.</p>
	</li>
	<li>Parameters-&gt;SetAttributeString(&quot;IconMask&quot;,&quot;I_Mask&quot;)
	<p>You have to define the icon Mask Name.</p>
	</li>
</ul>
<p>In the CATRule files: This object represents the customized object on which attributes 
need to be accessed so as to define rule.</p>
<p>If a rule is validated, it is via the above parameters (MyColor, IconMask) that 
the customization will be retrieved:</p>
<p>(parameters is an internal Keyword allowing to access attributes)</p>
<p><strong>Note</strong>: The Icon mask should be BMP files, located in the runtime 
view ( <strong>&lt;os&gt;</strong><strong>\Resources\Graphic\Icons</strong>). The size 
of icon masks should be 10*10 pixel.</p>
<p><strong>Refresh Management:</strong></p>
<p>The attributes used in a rule so as to manage the Background color or the icon 
mask can change in the session.</p>
<p>In some cases, their modifications are immediately taken into account:</p>
<ul>
	<li>Lock/Unlock</li>
	<li>Maturity Management</li>
	<li>Edit Properties.</li>
</ul>
<p>But in other cases, the only way to guarantee refreshed (up-to-date) information 
is to do an expand.</p>
<p><strong>Attributes which can be used in rules</strong></p>
<p>For defining rules on objects, there is a dedicated Resource file named </p>
<p><strong>Attributes_For_Rules.CATRsc</strong></p>
<p>Put in <strong>&lt;os&gt;\resources\msgcatalog</strong> directory.</p>
<p>Here is its syntax : </p>
<p>Attributes.&lt;Object_type&gt;=&#8221;Attribute_1|Attribute_2|&#8230;&#8230;|Attribute_n&#8221;;</p>
<p>Where attributes separated by a | are retrieved from DataBase.</p>
<p>Example of file <strong>Attributes_For_Rules.CATRsc</strong> : </p>
<p>Attributes.PLMProductDS = &quot;PLM_ExternalID|V_description|V_organization&quot;;</p>
<p>Attributes.PLMRepresentationDS = &quot;V_discipline|V_nature&quot;;</p>
<p>So there will be the possibility to define rules based on following attributes 
for the PLMProductDS real type: </p>
<p>ExternalID V_description V_organization </p>
<p>And these ones on PLMRepresentationDS real type : </p>
<p>V_discipline V_nature</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="TCS"></a>Tree Color Sample</h2>
<p><strong>Principle</strong>: The displayed nodes of a tree will have a background 
color and icons driven by rules based on attributes.</p>
<p><strong>Example: </strong>Here is a customized VPM Navigator Tree according to 
the following configuration script files (*.CATRuleExit and *.CATRule):</p>
<pre>DSCustomization.CATRuleExit</pre>
<pre class="code">&lt;Scripts&gt;
  &lt;Script OpeningID=&quot;ManageColor&quot; Type=&quot;PLMRepresentationDS&quot; ScriptName=&quot;Color_LOCKUSER&quot;/&gt;
  &lt;Script OpeningID=&quot;ManageColor&quot; Type=&quot;PLMProductDS&quot; ScriptName=&quot;Color_LOCKUSER&quot;/&gt;
&lt;/Scripts&gt;</pre>
<pre>Color_LOCKUSER.CATRule</pre>
<pre class="code">
let UserId(String)
UserId = Parameters-&gt;GetAttributeString(&quot;UserID&quot;)
if ( (ThisObject.LOCKUSER==&quot;ILI&quot;) and (UserId == &quot;ILI&quot;) )
	Parameters-&gt;SetAttributeString(&quot;MyColor&quot;,&quot;0|255|0&quot;)
else if (UserId == &quot; ILI&quot;)
	Parameters-&gt;SetAttributeString(&quot;MyColor&quot;,&quot;0|255|255&quot;)</pre>
<p><img alt="Tree Customization" src="TreeCusto1.gif"/></p>
<p>Tree with connected user ILI</p>
<p><img alt="Tree with Connected User ILI" src="TreeCusto2.gif"/></p>
<p>Unlock Operation</p>
<p><img alt="Unlock Operation" src="TreeCusto3.gif"/></p>
<p>After unlock, color changed from green to blue.</p>
<p><img alt="After Unlock Operation" src="TreeCusto4.gif"/></p>
<p>New Session with connection to another user</p>
<p><img alt="New Session" src="TreeCusto5.gif"/></p>
<p>Tree not customized as connected user is different from ILI (On which rule is 
defined in this sample)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="IMS"></a>Icon Mask Sample</h2>
<p><strong>Principle</strong>: The displayed nodes of a tree (in navigation window) 
can have a background color and Icon Masks driven by rules based on attributes.</p>
<p><img alt="Icon Mask" src="TreeCusto6.gif"/></p>
<pre>DSCustomization.CATRuleExit</pre>
<pre class="code">&lt;Scripts&gt;
  &lt;Script OpeningID=&quot;ManageColor&quot; Type=&quot;PLMRepresentationDS&quot; ScriptName=&quot;Color_LOCKUSER&quot;/&gt;
  &lt;Script OpeningID=&quot;ManageColor&quot; Type=&quot;PLMProductDS&quot; ScriptName=&quot;Color_LOCKUSER&quot;/&gt;
  <strong>&lt;Script OpeningID=&quot;ManageMask&quot; Type=&quot;PLMProductDS&quot; ScriptName=&quot;Mask_rules&quot;/&gt;</strong>
  <strong>&lt;Script OpeningID=&quot;ManageMask&quot; Type=&quot;PLMRepresentationDS&quot; ScriptName=&quot;Mask_rules&quot;/&gt;</strong>
&lt;/Scripts&gt;</pre>
<pre>Mask_rules.CATRule</pre>
<pre class="code">Parameters-&gt;SetAttributeString(&quot;IconMask&quot;,&quot;I_TP&quot;)</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Limitations"></a>Limitations</h2>
<p>Only tree mask attributes will be used to define rules.</p>
<p>No customization will be possible on instances.</p>
<p>The icon customization of multi-extended product is not managed.</p>
<p>For example, if a Product has two extensions (Electrical and Resource), we will 
not be able to precisely define the icon to be used in the context (there is no 
management of this ambiguity).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Write rules (*.CATRuleExit and *.CATRule) to customize the background color of 
texts and icon masks of the Navigator tree (VPM and PPR) depending on attributes 
values.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
