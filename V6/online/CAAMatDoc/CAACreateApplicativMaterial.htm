<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Applying a Core/Covering Material</title>
<style type="text/css">
.style1 {
				margin-left: 40px;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Applying a Core/Covering Material</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article explains which paradigms CAA uses to show objects and let 
		the end users to play with them. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case </a>
			</li>
			<li><a href="#UseCase">The CAAMatApplyMaterial Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMatApplyMaterial Do?</a></li>
					<li><a href="#How">How to Launch CAAMatApplyMaterial?</a></li>
					<li><a href="#Where">Where to Find the CAAMatApplyMaterial Code?</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to open Material from database, to apply 
a core or a 
covering material and to retrieve the applied material from a support. <br />
You will learn:</p>
<ul>
	<li>How to retrieve your Material Reference from the database.</li>
	<li>How to apply a core or a covering material on Product or 
		3D shape.</li>
	<li>How to retrieve the applied material from a support.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMatApplyMaterial Use Case</h2>
<p>CAAMatApplyMaterial is a use case of the CAAMaterialModeler.edu framework that 
illustrates CATMatInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMatApplyMaterial Do?</h3>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMatApplyMaterial</h3>
<p>To launch CAAMatApplyMaterial, there is 4 steps you will need to set up. Compile CAAMatApplyMaterial along with its prerequisites, 
set up the run time environment, import the CAAMatApplyMaterial1.3dxml and CAAMatApplyMaterial2.3dxml in your 
database and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAMatApplyMaterial <em>repository server user password security_context environment</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup>
		<col align="center" span="1" />
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as name:port_number</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td><em>password</em></td>
	</tr>
	<tr>
		<td>5</td>
		<td>Security context</td>
		<td>A string representing the security context ( Role. Organization. Project 
		) . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM environment</td>
		<td>A PLM environment containing the imported data</td>
		<td>Environment</td>
	</tr>
	</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>].</li>
	<li>The <strong>environment</strong> is necessary to locate the customized Modeler.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Where"></a>Where to Find the CAAMatApplyMaterial Code</h4>
<p>The CAAMatApplyMaterial use case is made of a single file located in the CAAMatApplyMaterial.m 
module of the <code>CAACATMatInterfaces</code>.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACATMatInterfaces.edu\</code>CAAMatApplyMaterial<code>.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<h4><a name="Where0"></a>Where to Find the CAAMatApplyMaterial1.3dxml and CAAMatApplyMaterial2.3dxml Files.</h4>
<p>The 3dxml files should be imported in the database. There is two files located in the <code>CAACATMatInterfaces.edu </code>framework in the 
following path:</p>
<p><code>InstallRootFolder\CAADoc\CAACATMatInterfaces.edu\CAAMatApplyMaterial.edu/CNext/resources/graphic\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAMatApplyMaterial use case. The prolog and 
epilog parts, which correspond to Creating/Closing a PLM session are already described 
in another document [<a href="#References">2</a>]. We will only focus on the 
four 
main steps :</p>
<ol>
	<li><a href="#Step1">Opening the Material Reference.</a></li>
	<li><a href="#Step2">Identifying a Core or Covering Material</a>.</li>
	<li><a href="#Step3">Applying and Retrieving a Core Material to/from 
		a 3D Shape</a>.</li>
	<li><a href="#Step4">Applying and Retrieving a Covering Material 
		to/from a Product Reference</a>.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Material Reference</h3>
<p>Retrieve the knowledge type of the material reference.</p>
<pre class="style1">CATIType_var spMaterialType;
rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;CATMatReference&quot;, spMaterialType)</pre>
<p>Secondly, retrieve the PLM component by its sets of attributes. In our example 
we search by the PLM External ID attribute with the associated value &quot;Material 
Core&quot;. <br />
The PLM External ID could be different in your database and should be replaced 
accordingly.</p>
<pre class="style1"><span class="comment">CATUnicodeString externalID= &quot;Material Core&quot;;

...

CATAdpIdentificationSet identificatorSet; 
identificatorSet.AddAttribute(&quot;PLM_ExternalID&quot;, externalID); 

CATLISTP(CATAdpQueryResult) listOfQueryResults; 
rc = CATAdpPLMQueryServices::GetElementsFromAttributes(</span>spMaterialType<span class="comment">, identificatorSet, listOfQueryResults); 
int sizeOfQueryResult = listOfQueryResults.Size();
if( FAILED(rc) || (0 == sizeOfQueryResult) ) { cout &lt;&lt; &quot;Retrieve &quot; &lt;&lt; externalID.ConvertToChar() &lt;&lt; &quot; FAILED&quot; &lt;&lt; endl; return 1;}

// We retrieve the query from the list of query result
CATAdpQueryResult * pQueryResult = NULL;
pQueryResult = listOfQueryResults[1];
if(NULL == pQueryResult) { cout &lt;&lt; &quot;Retrieve &quot; &lt;&lt; externalID.ConvertToChar() &lt;&lt; &quot; FAILED&quot; &lt;&lt; endl; return 1;}

CATIAdpPLMIdentificator * piPLMIdentificator = NULL;
pQueryResult-&gt;GetIdentifier( piPLMIdentificator ); // piPLMIdentificator is addRefed here
if(NULL != pQueryResult) // We release the query result pointer
</span>{<span class="comment">
</span>  <span class="comment">delete(pQueryResult); 
  pQueryResult = NULL; 
</span>}<span class="comment">
listOfQueryResults.RemoveAll(); // We don't need the list of query anymore
if(NULL == piPLMIdentificator) { cout &lt;&lt; &quot;Retrieve &quot; &lt;&lt; externalID.ConvertToChar() &lt;&lt; &quot; FAILED&quot; &lt;&lt; endl; return 1;}

opRetrievedComponent = piPLMIdentificator;</span></pre>
<p>Third, open and expand your PLM Component with all its representations.</p>
<pre class="style1">CATIAdpPLMIdentificator * piPLMIdentificator = NULL;
pBUMaterialIdentificator -&gt; QueryInterface(IID_CATIAdpPLMIdentificator, (void**)&amp; piPLMIdentificator);
if (NULL != pBUMaterialIdentificator) 
{
  pBUMaterialIdentificator-&gt;Release(); 
  pBUMaterialIdentificator = NULL;
}
if(NULL == piPLMIdentificator) {cout &lt;&lt; &quot;Open Material Core FAILED&quot; &lt;&lt; endl; return 1;}

CATIMaterialReference * piMaterialCoreReference = NULL;
rc = opener.CompleteAndOpen(piPLMIdentificator, IID_CATIMaterialReference, (void**) &amp;piMaterialCoreReference);
if (NULL != piPLMIdentificator) 
{
  piPLMIdentificator-&gt;Release(); 
  piPLMIdentificator = NULL;
}
if(NULL == piMaterialCoreReference) {cout &lt;&lt; &quot;Open Material Core FAILED&quot; &lt;&lt; endl; return 1;}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Identifying a Core or 
Covering Material</h3>
<p>In order to know on which kind of material we are working with, we need to retrieve 
the PLM attribute on the Material Reference: V_discipline. <br />
Two values are possible:</p>
<ul>
	<li>dsc_matref_ref_Core for Core Material</li>
	<li>dsc_matref_ref_Covering for Covering Material</li>
</ul>
<pre class="style1"><strong>CATICkeObject</strong>* piInstance = NULL;
if (SUCCEEDED(piMatRef-&gt;QueryInterface(IID_CATIInstance, (void**)&amp; piInstance)) &amp;&amp; piInstance)
{
  <span class="comment">// search for V_discipline attribute</span>
  CATUnicodeString uAttributeDisc = &quot;<strong>V_discipline</strong>&quot;;
  <span class="comment">// Retrieve the attribute value</span>
  CATCkeObjectAttrReadServices::GetValueAsString(piInstance, uAttributeDisc, CoreOrCovering);
  ...
  piInstance-&gt;Release(); piInstance = NULL;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Applying and Retrieving a Core Material to/from 
a 3D Shape</h3>
<p>Now you can apply your material on a support like a Product Reference or a 3D 
shape instance as a core material. Note that when creating the support description 
pObjectInContext, you define the support and path from context to support. Example: 
To apply a material on a feature inside a Representation you have to define the 
support as the targeted feature and set the RepInstance attribute in order to create 
a valid support description.</p>
<p>You can precise the mode of setting the material:</p>
<ul>
	<li>ReplaceCode = 0: The material will be set only if no material has already 
		applied on the support</li>
	<li>ReplaceCode = 1: You set the material even if there is already one.</li>
</ul>
<pre class="style1">
// To apply on the Product Reference, the parameters are :

CATLISTP(CATIPLMComponent) pathOfInstances; // Should be empty
CATIPLMComponent * piRepInstance = NULL; // Should be NULL
CATBaseUnknown* pTarget = pSupportToApply; // Should be the Product Reference itself

CATOmbObjectInContext* pObjectInContext = NULL;
rc = CATOmbObjectInContext::CreateObjectInContext( pathOfInstances, piRepInstance, pTarget, pObjectInContext );
if(FAILED(rc)) return E_FAIL;

// The apply-method is filled as follow :
int noReplace = 0; // We do not replace an applied-material on the Product Reference
CATIMatNewMaterialInstance* piAppliedMaterial = NULL; // The returned applied-material

if(iType == &quot;Core&quot;)
{
  rc = <strong>CATMatAppliedAccess::</strong><strong>SetMaterialCore</strong>( pObjectInContext, piMaterialReference, errorCode, noReplace, &amp;piAppliedMaterial );
}
...</pre>
<p>As well as you set the material you can retrieve it. As in set material you have 
to create the support description by defining the support and the path from the 
context to the support.</p>
<pre class="style1">// To get a material from a Product Reference, the parameters are :

CATLISTP(CATIPLMComponent) pathOfInstances; // Should be empty
CATIPLMComponent * piRepInstance = NULL; // Should be NULL
CATBaseUnknown* pTarget = pSupport; // Should be the Product Reference itself

CATOmbObjectInContext* pObjectInContext = NULL;
rc = CATOmbObjectInContext::CreateObjectInContext( pathOfInstances, piRepInstance, pTarget, pObjectInContext );
if(FAILED(rc)) return E_FAIL;

rc = <strong>CATMatAppliedAccess::GetMaterialCore</strong>( pObjectInContext, opiMaterialReference, CATIMaterialReference::ClassName() );
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Applying and Retrieving a Covering Material 
to/from a Product Reference</h3>
<p>Another type of material is available: covering material. You can apply your 
material on a Product as a covering material. As for core materials you have to 
define a support description. This enables you to apply on PLM objects such as Products 
and Product Instances but also on Product Occurrences by defining the path of instance 
from the context Product to the Occurrence.</p>
<p>You can precise the mode of setting the material :</p>
<ul>
	<li>ReplaceCode = 0: The material will be set only if no material has already 
		applied on the support</li>
	<li>ReplaceCode = 1: You set the material even if there is already one.</li>
</ul>
<pre class="style1">// To apply on the Product Reference, the parameters are :

CATLISTP(CATIPLMComponent) pathOfInstances; // Should be empty
CATIPLMComponent * piRepInstance = NULL; // Should be NULL
CATBaseUnknown* pTarget = pSupportToApply; // Should be the Product Reference itself

CATOmbObjectInContext* pObjectInContext = NULL;
rc = CATOmbObjectInContext::CreateObjectInContext( pathOfInstances, piRepInstance, pTarget, pObjectInContext );
if(FAILED(rc)) return E_FAIL;

// The apply-method is filled as follow :
int noReplace = 0; // We do not replace an applied-material on the Product Reference
CATIMatNewMaterialInstance* piAppliedMaterial = NULL; // The returned applied-material

if(iType == &quot;Covering&quot;)
{
  rc = <strong>CATMatAppliedAccess::</strong><strong>SetMaterialCovering</strong>( pObjectInContext, piMaterialReference, errorCode, noReplace, &amp;piAppliedMaterial );
}
...</pre>
<p>As well as you set the material you can retrieve it. There are two ways to retrieve 
the stack of covering material depending of your needs. The list is made from the 
bottom to the top covering materials.</p>
<ol>
	<li><strong>GetMaterialCovering</strong>
		<pre class="code"> // To get a material from a Product Reference, the parameters are :

CATLISTP(CATIPLMComponent) pathOfInstances; // Should be empty
CATIPLMComponent * piRepInstance = NULL; // Should be NULL
CATBaseUnknown* pTarget = pSupport; // Should be the Product Reference itself

CATOmbObjectInContext* pObjectInContext = NULL;
rc = CATOmbObjectInContext::CreateObjectInContext( pathOfInstances, piRepInstance, pTarget, pObjectInContext );
if(FAILED(rc)) return E_FAIL;

rc = <strong>CATMatAppliedAccess::GetMaterialCovering</strong>( pObjectInContext, oMaterialList, CATIMaterialReference::ClassName() );
...</pre>
		<p>This method will retrieve you the stack of the covering material applied 
		on the support and aggregated by the context product. </p>
		<p>
		<img alt="Covering Material" height="269" src="images/CoveringMaterialIllustration.png" width="344"/></p>
		<p>In the example above, you will retrieve the material covering <code>Material Covering</code> by using this method.</p>
	</li>
	<li><strong>GetAllMaterialCovering</strong>
		<pre class="code">// To get a material from a Product Reference, the parameters are :

CATLISTP(CATIPLMComponent) pathOfInstances; // Should be empty
CATIPLMComponent * piRepInstance = NULL; // Should be NULL
CATBaseUnknown* pTarget = pSupport; // Should be the Product Reference itself

CATOmbObjectInContext* pObjectInContext = NULL;
rc = CATOmbObjectInContext::CreateObjectInContext( pathOfInstances, piRepInstance, pTarget, pObjectInContext );
if(FAILED(rc)) return E_FAIL;

rc = <strong>CATMatAppliedAccess::GetAllMaterialCovering</strong>( pObjectInContext, oMaterialList, CATIMaterialReference::ClassName() );
...</pre>
		<p>This method will retrieve you the stack of all the covering material 
		applied on the support and aggregated by the context product or any products 
		instantiated under it.</p>
		<p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [January 2007]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [May 2010]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

<table class="history">
	<tr>
		<td>Version: <strong>3</strong> [September 2013]</td>
		<td>Document updated</td>
	</tr>
</table>

</body>

</html>
