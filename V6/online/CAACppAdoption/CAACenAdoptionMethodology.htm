<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Adoption Methodology</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Adoption Methodology</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Adoption methodology helps you smoothly transform your V5 applications 
		to the <strong>3D</strong>EXPERIENCE platform.</p>
		<p>This article describes or points to articles describing the main new 
		concepts and technologies you need to understand before looking at the code 
		of your applications. Then a change methodology is explained along with 
		where to find the appropriate information.</p>
		<ul>
			<li><a href="#Path">The Adoption Path</a></li>
			<li><a href="#Adopt">How to Adopt V6</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Path"></a>The Adoption Path</h2>
<p>Adopting means that your applications will pass from a V5Rx release level 
to a <strong>3D</strong>EXPERIENCE platform Rx release level. To make this as fluent as possible, you should first rely 
on a well identified V5Rx level. </p>
<p>The well identified V5 release level for adopting the <strong>3D</strong>EXPERIENCE 
platform for R2015x is:</p>
<ul>
	<li>V5R23.</li>
</ul>
<p>If your application runs a previous V5 release level, fist move to this level 
above.</p>
<p>This move to the well identified V5 release level includes:</p>
<ul>
	<li>Changing the deprecated APIs you could still use to their replacing APIs.</li>
	<li>Checking that you do not make use of undocumented APIs (labeled @nodoc in 
	the header files), and if you still use some, try to remove them from your application.</li>
	<li>Checking that you do not make use of undocumented L0 labeled headers, and 
	if you still use some, try to remove them from your application.</li>
	<li>Rebuilding your application and running your test objects.</li>
</ul>
<p>When the application runs with the chosen well identified release level, you 
are ready to adopt V6.</p>
<p>The table below shows the paths to adopt V6 from your current V5 release.</p>
<table>
	<caption>V5-3DEXPERIENCE platform Adoption</caption>
	<tr>
		<th>V5-3DEXPERIENCE platform Adoption Path Diagram</th>
		<th>V5-3DEXPERIENCE platform Adoption Path Steps</th>
	</tr>
	<tr>
		<td><br />
		<img alt="V6 Adoption" src="images/CAACenAdoptionR23R216.png" width="434" height="375"/>
		</td>
		<td>Starting at your currently used V5 release, you go through the API stability 
		and deprecation replacements, and the &quot;@nodoc&quot; and L0 API removal up to 
		V5R23. How to do this is described in the V5R23 Encyclopedia.
		<p>Then, when 
		your application is built and runs well with all your test objects successfully 
		running, and all your interactive test scenarios correctly replayed, you 
		can go through the steps described starting with <a href="#Adopt">How to 
		Adopt 3DEXPERIENCE Platform</a>.</p>
&nbsp;</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Adopt"></a>How to Adopt 3DEXPERIENCE Platform</h2>
<p>To enable your applications to go on running with V6, you should consider to 
review each application to determine if and how it is impacted with adoption, 
then deeply review the application code, make the appropriate changes, rebuild and 
test the application.</p>
<h3>Reviewing Your Application</h3>
<p>You should first determine whether your application is candidate for V6. Some 
V5 solutions and modelers your application may use in V5 are not yet available with 
V6. Using the V5 names, the solutions and modelers availability is described in 
the Modeler Mapping section for:</p>
<ul>
	<li><a href="CAACenAdoptionEA.htm">Enterprise Architecture 
	Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionPPR.htm">PPR Hub Modeler and Framework 
	Mapping</a></li>
	<li><a href="CAACenAdoptionCGM.htm">CGM Modeler and Framework 
	Mapping</a></li>
	<li><a href="CAACenAdoptionCATIA.htm">CATIA Modeler and Framework 
	Mapping</a></li>
	<li><a href="CAACenAdoptionDELMIA.htm">DELMIA Modeler and 
	Framework Mapping</a></li>
	<li><a href="CAACenAdoptionENOVIA.htm">ENOVIA Modeler and 
	Framework Mapping</a></li>
</ul>
<p>Then, if your application falls in the V6 current scope, you should consider 
the main changes [<a href="#References">1</a>]:</p>
<ul>
	<li>The V5 document-centric model relying on files does not exist any longer</li>
	<li>The Product model is changed</li>
	<li>The applicative containers you may have created to contain your data may 
	be supported in a different way</li>
	<li>CGM classes and interfaces are replaced by a new set of interfaces</li>
	<li>Some V5 frameworks are split, renamed, or their contents is rearranged. 
	This is to ensure better code modularity and to minimize memory size by decreasing 
	the number and the sizes of the DLLs.</li>
</ul>
<p>Finally, depending on your application domain, you should read the V6 Adoption 
information related to this domain, as well as those of the infrastructure layers:</p>
<ul>
	<li><a href="CAACenAdoptionEAToc.htm">Enterprise Architecture</a></li>
	<li><a href="CAACenAdoptionPPRToc.htm">PPR Hub</a></li>
	<li><a href="CAACenAdoptionCATIA.htm">CATIA</a></li>
	<li><a href="CAACenAdoptionCGM.htm">CGM</a></li>
	<li><a href="CAACenAdoptionMechDesignToc.htm">Mechanical Design</a></li>
	<li><a href="CAACenAdoptionShapeDesignToc.htm">Shape Design</a></li>
	<li><a href="CAACenAdoptionEquipmentToc.htm">Equipment &amp; Systems</a></li>
	<li><a href="CAACenAdoptionMachiningToc.htm">Machining</a></li>
</ul>
<h3>Reviewing Your Application Code</h3>
<p>The changes you should bring to your application code are described according 
to a V5 framework classification.</p>
<p>First, you should consider reviewing the IdentityCard.h files of your frameworks 
to take into account the V5 framework split, move, or rename, and the new V6 frameworks. 
You can get this information from the Framework Mapping section for:</p>
<ul>
	<li><a href="CAACenAdoptionEA.htm">Enterprise Architecture Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionPPR.htm">PPR Hub Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionCGM.htm">CGM Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionCATIA.htm">CATIA Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionDELMIA.htm">DELMIA Modeler and Framework Mapping</a></li>
	<li><a href="CAACenAdoptionENOVIA.htm">ENOVIA Modeler and Framework Mapping</a></li>
</ul>
<p>Then, you need to update the Imakefile.mk of your modules. From the same links 
as above, you can retrieve the modules to insert or replace:</p>
<ul>
	<li>For the moved classes or interfaces, from the <strong>Mapping</strong> links.<p>
	A page for each concerned framework lists which classes or interfaces are moved 
	from one framework to another one. It gives for each of them the V5 module, 
	and the V6 framework and module it is moved to. Below is an example of the information 
	you can find in such a page, extracted from the KnowledgeInterfaces framework 
	page.</p>
	<table class="border1">
		<tr>
			<th>Class or Interface</th>
			<th>V5 Module</th>
			<th>V6 Framework</th>
			<th>V6 Module</th>
		</tr>
		<tr>
			<td>
			<a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeUIItf', 'interface', 'CATICkeAddParametersDlg'); return false;">
			CATICkeAddParametersDlg</a></td>
			<td>KnowledgeItf</td>
			<td>
			<a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeUIItf'); return false;">
			KnowledgeUIItf</a></td>
			<td>CATKnowledgeUIItf</td>
		</tr>
		<tr>
			<td>
			<a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeUIItf', 'interface', 'CATIKnowledgeAdvisorAddin'); return false;">
			CATIKnowledgeAdvisorAddin</a></td>
			<td>KnowledgeItf</td>
			<td>
			<a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeUIItf'); return false;">
			KnowledgeUIItf</a></td>
			<td>CATKnowledgeUIItf</td>
		</tr>
	</table>
	<p>For example, the two interfaces above you could have used from the KnowledgeInterfaces 
	framework with the KnowledgeItf module in your Imakefile.mk files are now located 
	in the KnowledgeUIItf framework with the CATKnowledgeUIItf module. You should 
	just update your IdentityCard.h file with:</p>
	<pre class="code">AddPrereqComponent(KnowledgeUIItf, &quot;Public&quot;);</pre>
	<p>You should also add CATKnowledgeUIItf in the LINK_WITH section of the appropriate 
	Imakefile.mk files.</p>
	<table class="Remark">
		<tr>
			<td class="Remark"><span class="run-in">Warning</span>: If these interfaces 
			were the only ones you used from KnowedgeInterfaces in a given framework, 
			you should also remove KnowedgeInterfaces from the IdentityCard.h file 
			and KnowledgeItf from the Imakefile.mk files.</td>
		</tr>
	</table>
	</li>
	<li>For the replaced headers, from the <strong>Replacements</strong> links.
	<p>A page for each framework lists which classes, interfaces, methods or global 
	functions are either modified or removed, and describes or points to what to 
	do to deal with these changes. Below is an example of the information you can 
	find in such a page, extracted from the ObjectSpecsModeler and MechanicalModeler 
	framework pages.</p>
	<table>
		<tr>
			<th>Class or Interface</th>
			<th colspan="3">Comment</th>
		</tr>
		<tr>
			<td>CATIOsmExtensionFactory</td>
			<td colspan="3">Not supported any longer.<br />
			Refer to the following article:
			<a href="CAACenOsmTaSpecsModelerAdoption.htm">Feature Modeler Changes 
			- Global View</a> </td>
		</tr>
		<tr>
			<th>Class or Interface</th>
			<th colspan="3">Comment</th>
		</tr>
		<tr>
			<td>CATMfCkeServices</td>
			<td colspan="3">Not supported any longer.<br />
			<strong>1 replacing class</strong><br />
			<table>
				<tr>
					<th>Framework</th>
					<th>Class or Interface</th>
				</tr>
				<tr>
					<td>
					<a href="#" onclick="javascript:CAAlink('CPP', 'CATMecModUseItf'); return false;">
					CATMecModUseItf</a></td>
					<td>
					<a href="#" onclick="javascript:CAAlink('CPP', 'CATMecModUseItf', 'interface', 'CATIMmiKnolServices'); return false;">
					CATIMmiKnolServices</a></td>
				</tr>
			</table>
			</td>
		</tr>
		<tr>
			<th>Class or Interface</th>
			<th colspan="3">Comment</th>
		</tr>
		<tr>
			<td>CATOsmExtensionServices</td>
			<td colspan="3">Still available with the following method changes</td>
		</tr>
		<tr>
			<td></td>
			<th>Method</th>
			<th>Signature</th>
			<th>Comment</th>
		</tr>
		<tr>
			<td></td>
			<td>CATActivateExtensions</td>
			<td>static HRESULT CATActivateExtensions(CATDocument* iDocument,<br />
			const char*iAppId)</td>
			<td>Refer to the following article:
			<a href="CAACenPLMTaAllDocumentRemoval.htm">File Persistency Removal 
			Impacts</a> </td>
		</tr>
	</table>
	<p>Each class or interface that does not exist any longer is listed along with 
	its replacing class or interface if there is a one-to-one mapping. Otherwise, 
	a link to an article that describes how to deal with this class or interface 
	removal is provided. The same applies for methods or global functions. </p>
	<p>In the above example:</p>
	</li>
	<li>CATCmdWorkbench does not exist longer. If you are using this interface 
	in your V5 application, read the article referred to to know what to do.</li>
	<li>CATISysSettingController does not exist any longer, but is replaced with CATSysSettingRepository. 
	The article that refers to CATISysSettingController points to the CATSysSettingRepository 
		class documentation.</li>
	<li>CATIIniSearchEngine still exists, but its method LaunchSearchOnDocument 
	with the given signature does not exist any longer. There is no one-to-one mapping 
	with a new or existing method. If you are using this method in your V5 application, 
	read the article referred to to know what to do. The other 
		CATIIniSearchEngine 
	methods still exist.</li>
</ul>
<h3>Building Your Application</h3>
<p>When all the changes are done, you can build your application. You can also build 
the application when only major changes are done, to find out from the build errors 
in the build log what remains to do, and check with the framework pages how to correct 
these build errors.</p>
<p>To better control framework dependencies, mkmk issues the BAD00x errors. You 
should also correct these errors [<a href="#References">2</a>].</p>
<h3>Testing Your Application</h3>
<p>Once the application builds, test it using your preferred scenarios and/or run 
your test objects, find out and fix the possible run time errors.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This V6 Adoption methodology helps you prepare your applications to adopt V6. 
The proposed methodology consists in first determining whether your application 
falls in the scope of the current V6 level, then which part of the application is 
concerned with V6 Adoption, identifying global and local appropriate code changes, 
applying these changes, and compiling your application to first analyze and correct 
the build time errors or warnings. When the application builds, then look for and 
fix run time errors shown when replaying your scenarios or test objects.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td valign="top">[1]</td>
		<td><a href="CAACenAdoptionOverview.htm">Adoption Overview</a></td>
	</tr>
	<tr>
		<td valign="top">[2]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocBADErrors.htm">
		Framework Architecture Rules</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <strong>1</strong> [Jan 2007]</td>
		<td valign="top">Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
