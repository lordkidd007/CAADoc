<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>External Name</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>External Name</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstINFAlias use case. This use case explains 
		the CATIAlias implementation on our Feature StartUp late types, primarily 
		for setting and retrieving our feature alias. A preliminary study of the 
		TA &quot;Understanding Feature Naming&quot; [<a href="#References">1</a>] 
		is recommended to grasp the basics of feature naming. This implementation 
		is mandatory since by default a feature does not implement this interface.</p>
		<p>This article is one among a set of articles which together discuss the 
		"Integrating Applicative Data in Product Context" use case [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFAlias Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFAlias Do</a></li>
					<li><a href="#Launch">How to Launch CAAPstINFAlias</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFAlias Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This user learns the <em>CATIAlias</em> implementations on StartUp late types, 
namely.</p>
<ul>
	<li><code>SetAlias</code> implementation details</li>
	<li><code>GetAlias</code> implementation details</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFAlias Use Case</h2>
<p>The CAAPstINFAlias is a use case of the CAAProductStructureExtend.edu framework 
that illustrates the integration of FeatureModelerExt framework capabilities in 
the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFAlias Use Case Do</h3>
<p>The UC simply details the <em>CATIAlias</em> implementation on our StartUp late 
types (CAAPstINFPoint, CAAPstINFLine, CAAPstINFWire and CAAPstINFRoot), primarily 
to set and retrieve the feature alias.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch"></a>How to Launch the CAAPstINFAlias Use Case</h3>
<p>See the section entitled &quot;How to Launch the Integrating Applicative Data 
In Product Context Use Case&quot; [<a href="#References">1</a>] in the referenced 
use case for a detailed description of how this use case should be launched.</p>
<p>Specifically, the code described in this article is executed upon loading the 
PLM Product Reference into the V6 session. (You can use CAAPstINFProduct.3DXML file 
in the InputData folder of the CAAProductStructureExtend.edu framework.)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFAlias Code</h3>
<p>This use case describes the <em>CATIAlias</em> implementations on the CAAPstINFPoint, 
CAAPstINFLine, CAAPstINFWire and CAAPstINFRoot StartUps late types. The source is
<code>CAAEPstINFAliasElement.cpp</code> which exists at the location below:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m\src</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We detail the <em>CATIAlias</em> implementation on our StartUp late types. The 
steps are listed below:</p>
<ol>
	<li><a href="#Step1">Interface Dictionary Entry</a></li>
	<li><a href="#Step2">Declaring StartUp as a CATIAlias Implementation</a></li>
	<li><a href="#Step3">Setting Alias</a></li>
	<li><a href="#Step4">Retrieving Feature Alias</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Interface Dictionary Entry</h3>
<p>Our feature late types implement the <em>CATIAlias</em> Interface. Any Interface 
implementation essentially calls for its corresponding entry in the .dico file.</p>
<p>The entries for our feature late types in the <strong>CAAProductStructureExtend.edu.dico</strong> 
file which exists at the location <strong>CAAProductStructureExtend.edu/CNext/code/dictionary</strong> 
follows.</p>
<pre class="code"><strong>CAAPstINFRoot</strong>    <strong>CATIAlias</strong>   <strong>libCAAPstINFModeler</strong>  
<strong>CAAPstINFPoint</strong>   CATIAlias   libCAAPstINFModeler  
<strong>CAAPstINFLine</strong>    CATIAlias   libCAAPstINFModeler  
<strong>CAAPstINFWire</strong>    CATIAlias   libCAAPstINFModeler</pre>
<p>The entries in the dico file are in the format &quot;<strong>Component Interface &quot;lib&quot;+Library</strong>&quot;. 
All the <em>CATIAlias</em> implementations exist in the <strong>CAAPstINFModeler</strong> 
library.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Declaring StartUps as a CATIAlias Implementation</h3>
<p>The basic macros to declare our features as <em>CATIAlias</em> implementations 
follow.</p>
<pre class="code">// Tie the implementation to its interface
// ---------------------------------------
#include "TIE_CATIAlias.h"
<strong>TIE_CATIAlias</strong>( <strong>CAAEPstINFAliasElement</strong>);

<strong>CATBeginImplementClass</strong> (<strong>CAAEPstINFAliasElement</strong>,
   		               DataExtension, 
   		              CATBaseUnknown, 
           	   <strong>           CAAPstINFPoint</strong>);
<strong>CATAddClassExtension</strong>(<strong>CAAPstINFLine</strong>);
CATAddClassExtension(<strong>CAAPstINFWire</strong>);
CATAddClassExtension(<strong>CAAPstINFRoot</strong>);
...
<strong>CATEndImplementClass</strong>(<strong>CAAEPstINFAliasElement</strong>);</pre>
<p>The <code>CATBeginImplementClass</code> in conjunction with the <code>CATAddClassExtension</code> 
macros declares our feature late types (<strong>CAAPstINFPoint</strong>, <strong>
CAAPstINFLine</strong>, <strong>CAAPstINFWire</strong>, <strong>CAAPstINFRoot</strong>) 
as <em>CATIAlias</em> implementations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting Alias</h3>
<p>The external name of a feature could be set with a call to SetAlias() of its
<em>CATIAlias</em> implementation.</p>
<pre class="code">
void   <strong>CAAEPstINFAliasElement::SetAlias</strong> (const CATUnicodeString&amp;  iName ) 
{
  <strong>HRESULT rc = E_NOTIMPL</strong>;
}</pre>
<p>As of today the implementation does nothing.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving Feature Alias</h3>
<p>The <code>GetAlias</code> implementation of the <em>CATIAlias</em> Interface 
on our features returns the feature alias.</p>
<pre class="code">CATUnicodeString  <strong>CAAEPstINFAliasElement::GetAlias</strong> () 
{
    HRESULT rc = E_FAIL;
    CATUnicodeString ReturnedName ="";

    CATFmCredentials * MyCredential = NULL ;
    rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential);
    if ( SUCCEEDED(rc) )
    {
	<strong>CATFmFeatureFacade FmFeatFacadeOnFeat (*MyCredential, this)</strong>;
         <strong>FmFeatFacadeOnFeat.GetDisplayName</strong>(ReturnedName);
    }

    return ReturnedName;
}</pre>
<p>The steps involved in the implementation above are listed below:</p>
<ul>
	<li>Retrieving the Credentials which authorize user to work with the features 
		defined in the <strong>CCAAPstINFCatalog.CATfct</strong> catalog [<a href="#References">4</a>].</li>
	<li>Create a Feature Facade, a <em>CATFmFeatureFacade</em> type (FmFeatFacadeOnFeat) 
		on our feature associated with the Credentials retrieved above.</li>
	<li>Call the <code>GetDisplayName</code> routine of the <em>CATFmFeatureFacade</em> 
		class to retrieve the feature alaias, as a <em>CATUnicodeString</em> type 
		(ReturnedName).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAAPstINFAlias use case details the <em>CATIAlias</em> implementation on 
StartUp Late Types, essentially for retrieving and setting the feature alias.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaNamingFeatures.htm">
		Understanding Feature Naming</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data In Product Context</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Defining StartUp Catalog</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
