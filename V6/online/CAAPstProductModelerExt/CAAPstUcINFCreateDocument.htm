<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Data in PLM Technological Representation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Data in PLM Technological Representation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAAPstINFCreateFeature</code> use case. 
		This Use Case (UC) illustrates the steps involved to instantiate features 
		inside an Applicative Container of a PLM Technological Representation Reference 
		(Techno Rep Ref).</p>
		<p>This article is one among a set of articles which together discuss the &quot;Integrating 
		Applicative Data in Product Context&quot; use case [<a href="#References">1</a>].
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFCreateFeature Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFCreateFeature Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFCreateFeature</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFCreateFeature 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The UC teaches an end user the steps involved to instantiate features inside 
an Applicative Container of a PLM Technological Representation Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFCreateFeature Use Case</h2>
<p>The <code>CAAPstINFCreateFeature</code> is is a use case defined in the CAAProductStructureExtend.edu 
framework that illustrates the integration of FeatureModelerExtend and ProductStructureExtItf 
framework capabilities in the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFCreateFeature Use Case Do</h3>
<p>This use case is made up of a batch program that first creates the following 
Product Structure:</p>
<table>
	<caption>Fig. 1: Product Structure</caption>
	<tr>
		<td>
		<img alt="Product Structure" height="174" src="images/CAAPstINFCreateDocument1.gif" width="453"/></td>
	</tr>
</table>
<ul>
	<li>a Root PLM Product Reference (<code>CAAPstINFProductRef</code> for example).</li>
	<li>a PLM Technological Representation (<code>CAAPstINFProductTechnRep</code> 
		for example) containing an applicative container of type &quot;<code>CAAPstINFCont</code>&quot; 
		and name &quot;<code>CAAPstINFContainer</code>&quot;.</li>
	<li>an instance of the PLM Technological Representation aggregated by the root.</li>
</ul>
<p>At last some features are inserted inside this applicative container. The StartUps 
of these features were defined inside the <strong>CAAPstINFCatalog</strong> Catalog 
detailed in the use case &quot;Creating a New StartUp Catalog&quot; [<a href="#References">2</a>]. 
The final feature model is depicted in the Fig. that follows.</p>
<table>
	<caption><a name="Fig2">Fig. 2</a>: Features Instantiated in the Techno Rep 
	Inst</caption>
	<tr>
		<td>
		<img alt="Features Instantiated in the Techno Rep Inst" src="images/CAAPstUCINFCreateDocument_Fig1.jpg"/></td>
	</tr>
</table>
<p>The resulting feature model consists of two Root features. The first root feature 
aggregates:</p>
<ul>
	<li>five &quot;<strong>CAAPstINFPoint</strong>&quot; features.</li>
	<li>single &quot;<strong>CAAPstINFLine</strong>&quot; feature.</li>
	<li>single &quot;<strong>CAAPstINFWire</strong>&quot; feature.</li>
</ul>
<p>The &quot;<strong>Line.1</strong>&quot; feature references the points namely. &quot;<strong>Point1</strong>&quot; 
and &quot;<strong>Point2</strong>&quot; (not depicted in the spec tree, since we 
have chosen not to integrate this).</p>
<p>The &quot;<strong>Wire.11</strong>&quot; feature references the points namely. &quot;<strong>Point.3</strong>&quot;, &quot;<strong>Point.4</strong>&quot;, 
and &quot;<strong>Point.5</strong>&quot;, as depicted in the spec tree.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAPstINFCreateFeature Use Case</h3>
<p>To launch <code>CAAPstINFCreateFeature</code>, you will need to set up the build 
time environment, then compile <code>CAAPstINFCreateFeature</code> along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>The UC also requires the catalog <strong>CAAPstINFCatalog.CATfct</strong>, which 
exists at the location below:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CNext\resources\graphic</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The command <strong>mkrtv</strong> copies this <strong>CATfct</strong> file to 
the WS RTV.</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstINFCreateProduct Repository Server User Password SecurityCtx 
Environment&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (since we are creating new PLM data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
	</tr>
</table>
<p>The output of this UC execution results in a feature model as depicted in the 
[<a href="#Fig2">Fig. 2</a>] above. It can also be readily referenced by importing 
from the <strong>CAAPstINFProductRef.3dxml</strong>, which is available at the location 
below:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\InputData</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFCreateFeature Code</h3>
<p>The <code>CAAPstINFCreateFeature</code> use case is made of three source files:</p>
<ol>
	<li><strong>CAAPstINFCreateProduct.cpp</strong> which has the <strong>main</strong> 
		in it.</li>
	<li><strong>CAAPstINFCreateApplData.cpp</strong> which contains the global routine
		<code>CAAPstINFCreateApplData</code> to instantiate the features inside 
		the Applicative Container of the PLM Techno Rep Ref.</li>
	<li><strong>CAAPstINFRetrieveCredentialsModeler.cpp</strong> which contains 
		the global routine CAAPstINFRetrieveCredentialsModeler to retrieve the Credentials 
		authorizing access to the <strong>CAAPstINFCatalog</strong> catalog.</li>
</ol>
<p>These sources are at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFCreateProduct.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in <code>CAAPstINFCreateFeature</code>:</p>
<ol>
	<li><a href="#Step1">Retrieving the Environment</a></li>
	<li><a href="#Step2">Creating a New Product Reference</a></li>
	<li><a href="#Step3">Creating a New Technological Representation</a></li>
	<li><a href="#Step4">Instantiating New Features in the Applicative Container</a></li>
	<li><a href="#Step5">Saving the New Product Reference</a></li>
</ol>
<p>We will now comment each of these sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Environment</h3>
<pre class="code">CATString environmentName = iargv[6];
<strong>CATIAdpEnvironment</strong> * pIAdpEnvironment = NULL ;
rc = CATAdpDictionaryServices::<strong>GetEnvironment</strong>(repositoryName.CastToCharPtr(),
				         environmentName,
			                  &amp;pIAdpEnvironment);
</pre>
<p>The PLM Environment is loaded with a call to <code>GetEnvironment()</code> of 
the <em>CATAdpDictonaryServices</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a New Product Reference</h3>
<p>We create a new Product Reference.</p>
<pre class="code">CATIPrdReferenceFactory * pIPrdRefFactory = NULL ;
rc = <strong>CATPrdFactory::CreatePrdFactory</strong>(<strong>IID_CATIPrdReferenceFactory</strong>,
                                    (void**) &amp;pIPrdRefFactory);
...
CATIPLMProducts * piPLMProductsOnRoot = NULL;
CATListValCATICkeParm_var ListAttributeEmpty ;
rc = <strong>pIPrdRefFactory-&gt;CreatePrdReference</strong>(pIAdpEnvironment,
                                         ListAttributeEmpty,
                                         piPLMProductsOnRoot);</pre>
<p>The global routine CreatePrdFactory() of the <em>CATPrdFactory</em> class creates 
a Product Factory. It is retrieved as a <em>CATIPrdReferenceFactory</em>* type (<code>pIPrdRefFactory</code>).</p>
<p>Next the <code>CreatePrdReference</code> call of the <em>CATIPrdReferenceFactory</em> 
Interface to a Product Factory is responsible for creating a new Product Reference. 
It is retrieved as a CATIPLMProducts* type (<code>piPLMProductsOnRoot</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a New Technological Representation</h3>
<p>Next, we create and instantiate a new Techno Rep Ref under the Product Reference 
and retrieve the associated Applicative Container. Please note that the Container 
need not be explicitly created but comes into existence with the new Techno Rep 
Ref.</p>
<pre class="code">CATIPsiRepresentationReference *piRepRefonNewTechnoRep = NULL;
CAAIPstINFFactory *pFactoryOnContainer = NULL;
rc = ::<strong>CAAPstINFTechnoRepAndContainerCreation</strong>( <strong>piPLMProductsOnRoot</strong>,pIAdpEnvironment,
	       IID_CATIPsiRepresentationReference,(void**) &amp;<strong>piRepRefonNewTechnoRep</strong>,
	                       IID_CAAIPstINFFactory,(void**)&amp;<strong>pFactoryOnContainer</strong>);</pre>
<p>The global routine <code>CAAPstINFTechnoRepAndContainerCreation</code>() is responsible 
for creating and instantiated a Techno Rep Ref under an input Product Ref. The details 
of the steps involved in that implementation are detailed in the UC &quot;Creating 
a PLM Technological Representation&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Instantiating New features in the Applicative Container</h3>
<p>In the earlier step we retrieved the Applicative Container. We next proceed to 
instantiate features inside it and to valuate these feature attributes, with a call 
to the <code>CAAPstCreateApplData</code>() global routine. This routine implemenation 
fundementally deals only with the Model aspect of the <strong>MVC</strong> (Model 
View Control) architecture. The 3D Visu, the Spec tree integration and their refresh 
on feature update using event handling is essentially the Visualization code beyond 
the scope of this implementation.</p>
<p>A significant point to note is that typically, an Applicative Container implements 
a Factory Interface, responsible for instantiating features inside it. In the current 
case, the <em>CAAIPstINFFactory</em> Interface is implemented on the Container, 
which is the <strong>CAAPstINFCont</strong> late type. This implementation in the 
current case realizes the instantiation of the Root, Point, Line and Wire features 
inside our Techno Rep Ref.</p>
<p>Further, each feature implements a dedicated interface, responsible for valuating 
its attribute and retrieving an attribute value. These implementations responsible 
for instantiating features and for valuating the feature attributes are detailed 
in the UC &quot;Intrinsic Feature Behavior&quot; [<a href="#References">4</a>].</p>
<p>The <code>CAAPstCreateApplData</code> global routine is invoked as follows.</p>
<pre class="code">rc = ::<strong>CAAPstCreateApplData(pFactoryOnContainer)</strong>;</pre>
<p>The input to the above global routine is the container, a <em>CAAIPstINFFactory</em>* 
type (pFactoryOnContainer).</p>
<p>We detail the implementation of this routine below.</p>
<pre class="code">HRESULT <strong>CAAPstCreateApplData(CAAIPstINFFactory_var spFactoryOnContainer)</strong>
{
      // Instantiate Root1 and Root2   
      CAAIPstINFRoot *pRoot1 = NULL ;
      rc = spFactoryOnContainer-&gt;CreateRoot(pRoot1);

      CAAIPstINFRoot *pRoot2 = NULL;
      if (SUCCEEDED(rc))
	rc = <strong>spFactoryOnContainer-&gt;CreateRoot(pRoot2)</strong>;
      ...
}</pre>
<p>As we saw in an earlier step, the <code>CreateRoot</code>() call of the <em>CAAIPstINFFactory</em> 
implementation on the Container is responsible for creating the root feature.</p>
<p>We create two Root features within our Container. These are retrieved as <em>
CAAIPstINFRoot</em>* types namely. <strong>pRoot1</strong>, <strong>pRoot2</strong>.</p>
<p>We proceed to instantiate five Point features, aggregated under our Root 1 feature 
(<code>pRoot1</code>).</p>
<pre class="code">HRESULT <strong>CAAPstCreateApplData(CAAIPstINFFactory_var spFactoryOnContainer)</strong>
{
      ...	
     // Instantiate 5 Points  + aggregation under Root1 
     CAAIPstINFPoint *pPoint1 = NULL ;
     if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreatePoint</strong>(0.0,0.0,0.0,pRoot1,<strong>pPoint1</strong>);

    CAAIPstINFPoint *pPoint2 = NULL ;
    if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreatePoint</strong>(10.0,20.0,30.0,pRoot1,<strong>pPoint2</strong>);

    CAAIPstINFPoint *pPoint3 = NULL ;
    if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreatePoint</strong>(10.0,10.0,-10.0,pRoot1,<strong>pPoint3</strong>);
    
    CAAIPstINFPoint *pPoint4 = NULL ;
    if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreatePoint</strong>(120.0,20.0,30.0,pRoot1,<strong>pPoint4</strong>);

    CAAIPstINFPoint *pPoint5 = NULL ;
    if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreatePoint</strong>(20.0,-20.0,-50.0,pRoot1,<strong>pPoint5</strong>);
    ...
}</pre>
<p>The <code>CreatePoint</code>() call of the <em>CAAIPstINFFactory</em> implementation 
on the Container is responsible for creating a Point feature and aggregating it 
under the Root feature, inside the applicative container.</p>
<p>We create five such Point features all aggregated under Root 1. The Points are 
retrieved as a <em>CAAIPstINFPoint</em>* types (<strong>pPoint1</strong>,
<strong>pPoint2</strong>, <strong>pPoint3</strong>, <strong>pPoint4</strong>,
<strong>pPoint5</strong>).</p>
<p>We proceed to next instantiate a Line feature, aggregated under our Root 1 feature 
(<code>pRoot1</code>)</p>
<pre class="code">HRESULT <strong>CAAPstCreateApplData(CAAIPstINFFactory_var spFactoryOnContainer)</strong>
{
      ...	

    // Instantiate 1 Line + aggregate it under Root1
    <strong>CAAIPstINFLine *pLine1 = NULL</strong>;
    if (SUCCEEDED(rc))
       rc = <strong>spFactoryOnContainer-&gt;CreateLine(pPoint1, pPoint2,pRoot1,pLine1)</strong>;
    ...
}</pre>
<p>The <code>CreateLine</code>() call of the <em>CAAIPstINFFactory</em> implementation 
on the Container is responsible for creating a Line feature and aggregating it under 
the Root feature, inside the applicative container.</p>
<p>It also takes the Point 1 and Point 2 as input, which represent the start and 
end points of our Line.</p>
<p>We proceed to next instantiate a Wire features, aggregated under our Root 1 feature 
(pRoot1).</p>
<pre class="code">HRESULT <strong>CAAPstCreateApplData</strong>(CAAIPstINFFactory_var spFactoryOnContainer)
{
      ...	

    // Instantiate 1 Wire + aggregate it under Root1
    CATListPtrCATBaseUnknown pListPoint;
    <strong>pListPoint.Append</strong>(pPoint3);
    pListPoint.Append(pPoint4);
    pListPoint.Append(pPoint5);

    CAAIPstINFWire *pWire1 = NULL;
    if (SUCCEEDED(rc))
    rc = <strong>spFactoryOnContainer-&gt;CreateWire</strong>(pListPoint, pRoot1,pWire1);
    ...
}</pre>
<p>The <code>CreateWire</code> call of the <em>CAAIPstINFFactory</em> implementation 
on the Container is responsible for creating a Wire feature and aggregating it under 
the Root feature, inside the applicative container.</p>
<p>It takes a list of Points (<strong>Point3</strong>, <strong>Point4</strong>,
<strong>Point5</strong>) as input, those referenced by our Wire feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Saving the New Product Reference</h3>
<pre class="code">CATAdpSaver Saver;
rc = Saver.Save();</pre>
<p>Use the <code>Save</code> method of <em>CATAdpSaver</em> with no argument to 
save all the created PLM Product components: The PLM Product Reference, the PLM 
Technological Representation, and the PLM Rep instance are saved in database, while 
the contents of the PLM Technological Representation (the applicative container 
and its features) is saved in the vault.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAPstINFCreateFeature</code> use case has shown you how to create 
new features &quot;from scratch&quot; in an applicative container of a PLM Technological 
Representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Integrating Applicative Data In 
		Product Context</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcCreateAndInstantiateTechnoRep.htm">Creating PLM Technological 
		Representation</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFIntrinsicFeatBehavior.htm">Intrinsic Feature Behavior</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Jan 2011]</td>
		<td>Document revised</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [May 2002]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
