<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Applicative Container with Feature Extension</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Applicative Container with Feature Extension</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Feature Extension are instantiated within an applicative container. This 
		article explains what you must do on this new applicative container in order 
		to be well integrated in standard DS behaviors.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFFeatExtContainer Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFFeatExtContainer Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFFeatExtContainer</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFFeatExtContainer 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Feature Extension are instantiated within an applicative container. This container 
can be the same as those containing the base feature, there is no feature modeler 
restriction, but in the fact you should create a specific container for the extension. 
The reason are double:</p>
<ul>
	<li>The application, responsible of the feature extension, is probably not the 
		same as the application responsible of the base feature. It means that it 
		cannot modify the behavior of the applicative container containing the base 
		feature whose he/she is not responsible.</li>
	<li>Applicative container integration is not the same depending on its contents.</li>
</ul>
<p>An applicative container is like a &quot;black box&quot; from the Product engine, 
it means that Product cannot suppose how to browse its contents. So, Product , and 
other modelers, proposes some openness by using providers. The provider mechanism, 
in the Product context, is explained in the referenced technical article [<a href="#References">1</a>]. 
To sum up, the applicative container declares to a manager which kind of behaviors 
it want to support. These behaviors are implemented through provider object. 
In Product context, there are four behaviors to consider:</p>
<ul>
	<li>Navigation.</li>
	<li>knowledgestrong.</li>
	<li>Visualization.</li>
	<li>contextual menu.</li>
</ul>
<p>In this article, you will see</p>
<ul>
	<li>how to implement contextual menu and Visualization providers.</li>
	<li>when providers are invoked.</li>
</ul>
<p>The Knowledge behavior has not been implemented, and the navigation is useless, 
since the feature extensions will be displayed in the spec tree via their 
base feature [<a href="#References">4</a>].</p>
<p>To finish, these declarations are done inside the <em>CATInit</em> implementation 
on the applicative container. This article details when this interface is invoked, 
and its implementation for the <code>CAAPstINFExtensionCont</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFFeatExtContainer Use Case</h2>
<p>CAAPstINFFeatExtContainer is a use case of the CAAProductStructureExtend.edu 
framework that mainly illustrates Feature Modeler framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFFeatExtContainer Do</h3>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFFeatExtContainer</h3>
<p>See the section entitled &quot;How to Launch the CAAPstINFRelimitedLine Use Case&quot; 
in the &quot;<a href="CAAPstUcINFExtensionOverview.htm">Integrating Applicative 
Features</a>&quot; use case for a detailed description of how this use case should 
be launched.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFFeatExtContainer Code</h3>
<p>The CAAPstINFFeatExtContainer use case is made of several classes located in 
several modules of the CAAProductStructureExtend.edu framework:</p>
<p><code>InstallRootFolder\CAAProductStructureExtend.edu\CAAPstINFLineExtension.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>CAAEPstINFInitExtensionCont.cpp, the <em>CATInit</em> implementation 
		on the <code>CAAPstInfExtensionCont</code> container.</li>
	<li>CAAPstVisuProvForCAAPstINFExtCont.cpp, the <em>CATI3DVisuProvider</em> implementation.</li>
	<li>CAAPstCtxMenuProvForCAAPstINFExtCont, the <em>CATICtxMenuProvider</em> implementation.</li>
	<li><em>CAAPstINFRetrieveRelimitedLines</em> to retrieve all feature extensions 
		contained by the<em> <code>CAAPstINFExtensionCont</code> container</em>.</li>
</ul>
<p><code>InstallRootFolder\CAAProductStructureExtend.edu\CAAPstExtendUtilities.m\</code></p>
<ul>
	<li><em>CAAPstRetrieveTechnoRep</em> to retrieve the instance of PLM Technological 
		Representation from the container.</li>
</ul>
<p><code>InstallRootFolder\CAAProductStructureExtend.edu\CAAPstINFAddin.m\</code></p>
<ul>
	<li><em>CAAPstINFWksAdn</em> to define the command header for the contextual 
		menu.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAPstINFFeatExtContainer:</p>
<ol>
	<li><a href="#Step1">Implementing CATInit</a></li>
	<li><a href="#Step2">Implementing CATI3DVisuProvider</a></li>
	<li><a href="#Step3">Implementing CATICtxMenuProvider</a></li>
</ol>
<p>Moreover, the global functions <a href="#CAAPstRetrieveTechnoRep"><em>
CAAPstRetrieveTechnoRep</em></a>, used by the <em>CATInit</em> implementation, and 
by the code which creates the feature extension [<a href="#References">3</a>] is 
explained at the end as <em>CAAPstINFRetrieveRelimitedLines</em></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implementing CATInit</h3>
<p>This interface is implemented on the <code>CAAPstINFExtensionCont</code> container. This 
string is the late type of the container declared in the Catalog file defining 
the feature extension [<a href="#References">5</a>].</p>
<p>So in the interface dictionary you have this line</p>
<pre class="code">...
CAAPstINFExtensionCont CATInit libCAAPstINFLineExtension
...</pre>
<p>The <em>CATInit</em> interface contains two methods: <code>Init</code> and
<code>GetRootContainer</code>.</p>
<pre class="code">...
CATBaseUnknown* CAAEPstINFInitExtensionCont::<strong>GetRootContainer</strong> (const CATIdent interfaceID)
{
    return 0;
}
...</pre>
<p>There is no root element for such container.</p>
<p><strong>The Init implementation</strong></p>
<p>Here you have the general steps:</p>
<pre class="code">...
void CAAEPstINFInitExtensionCont::<strong>Init</strong> (CATBoolean destroyExistingData)   
{
   1 - <a href="#Step11">Declaring the providers</a>
   2 - <a href="#Step12">Retrieving the Instance of Technological Representation</a>
   3 - <a href="#Step13">Connecting each Feature Extension to the PLM Technological Representation Instance</a> 
}
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step11"></a>Declaring the Providers</h4>
<pre class="code">...
<strong>CATIProviderManager</strong> *piProvidersMgr = NULL;
HRESULT rc = ::<strong>CATInstantiateComponent</strong>("<strong>CAARepVisuProvider</strong>",
			           IID_CATIProviderManager,
				  (void **) &amp;piProvidersMgr);
...</pre>
<p><code>CAARepVisuProvider</code> is the provider's manager for the Product Representation 
for visualization behaviors.</p>
<pre class="code">
...
<strong>CAAPstVisuProvForCAAPstINFExtCont</strong> * pCAAPstVisuProvForCAAPstINFExtCont = new CAAPstVisuProvForCAAPstINFExtCont();
rc = piProvidersMgr-&gt;<strong>AddProvider</strong>(IID_<strong>CATI3DVisuProvider</strong>, pCAAPstVisuProvForCAAPstINFExtCont);
...	</pre>
<p>The 3D visualization behavior is declared. It means that when the PLM Representation 
instance will be re-visualized, the <code>CAARepVisuProvider</code> will invoke 
the <code>GetChildren</code> method of <em>CAAPstVisuProvForCAAPstINFExtCont</em>.
</p>
<pre class="code">...
rc = ::CATInstantiateComponent("<strong>CAAPrdVisuProvider</strong>",IID_CATIProviderManager,(void **) &amp;piProvidersMgr);		
...</pre>
<p><code>CAAPrdVisuProvider</code> is the provider's manager for the Product Reference 
and visualization behaviors. But this manager takes into account also the Product 
Representation.</p>
<pre class="code">...
<strong>CAAPstCtxMenuProvForCAAPstINFExtCont</strong> * pCAAPstCtxMenuProvForCAAPstINFExtCont = new CAAPstCtxMenuProvForCAAPstINFExtCont();
rc = piProvidersMgr-&gt;<strong>AddProvider</strong>(IID_<strong>CATICtxMenuProvider</strong>, pCAAPstCtxMenuProvForCAAPstINFExtCont);	
...</pre>
<p>The contextual menu behavior is declared. It means that when the contextual 
menu of the PLM Representation instance will be requested, the <code>CAAPrdVisuProvider</code> 
will invoke the <code>GetContextualMenu</code> method of <em>CAAPstCtxMenuProvForCAAPstINFExtCont
</em>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step12"></a>Retrieving the Instance of Technological Representation</h4>
<p>The container implementing <em>CATInit</em> is inside a PLM Technological Representation 
which is mono-instantiatable. So <em><a href="#CAAPstRetrieveTechnoRep">CAAPstRetrieveTechnoRep</a>
</em>retrieves easily this instance of PLM representation Reference.</p>
<pre class="code">
...
   CATBaseUnknown * pTechnoRepInstance = NULL ;
   ::<strong>CAAPstRetrieveTechnoRep</strong>(this,&amp;pTechnoRepInstance);
...	</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step13"></a>Connecting each Feature Extension to the PLM Technological 
Representation Instance</h4>
<p>This step consists in to declare the feature extension to the visualization events. 
The simplest is to connect each feature extension to the PLM Representation Instance 
which itself connected to its aggregating product. By this way, if the feature extension 
requests to be visually updated (for delete, or modification purpose) it will be 
automatically done by launching a CATDelete, or CATModify event from the feature 
extension.</p>
<pre class="code">...
   CATListPtrCATBaseUnknown oListOfRelimitedLines;
   ::<strong>CAAPstINFRetrieveRelimitedLines</strong>(this,IID_CATBaseUnknown,oListOfRelimitedLines); 
...</pre>
<p><em><a href="#CAAPstINFRetrieveRelimitedLines">CAAPstINFRetrieveRelimitedLines</a>
</em>is a local method to return all the feature extensions of the <code>CAAPstINFExtensionCont</code> 
container.</p>
<pre class="code">...
<strong>CATIModelEvents_var</strong> spModelEventsOnRepInstance ;
spModelEventsOnRepInstance = pTechnoRepInstance ;
int iSize = oListOfRelimitedLines.Size();
for (int i=1; i&lt;=iSize; i++)
{
   CATBaseUnknown* piCBUOnExtnFeat = oListOfRelimitedLines[i];
   if (NULL != piCBUOnExtnFeat)
   {
      spModelEventsOnRepInstance-&gt;<strong>ConnectTo</strong>(piCBUOnExtnFeat);
...</pre>
<p>This piece of code makes the connection between the PLM Representation 
Instance and each <em>CAAIPstINFRelimitedLine</em> feature thanks the <em>CATIModelEvents</em> 
interface implemented by the PLM Representation Instance.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing CATI3DVisuProvider</h3>
<p>This interface is implemented by the <em>CAAPstVisuProvForCAAPstINFExtCont</em> 
class.</p>
<pre class="code">...
HRESULT CAAPstVisuProvForCAAPstINFExtCont::<strong>GetChildren</strong>(CATBaseUnknown *pContext,
						CATLISTP(CATBaseUnknown) **pListChildren) 
{
   CATIClientContainer * pClientCont  = NULL ;
   HRESULT rc = ::<strong>CAAPstCheckAndRetrieveContainerFromContext</strong>(pContext,
                                                             "CAAPstINFExtensionCont",  // container name 
                                                             "CAAPstINFExtensionCont",  // container type
                                                             pClientCont);                                             
...</pre>
<p><code>CAAPstCheckAndRetrieveContainerFromContext</code> is a global function, 
explained in the article [<a href="#References">4</a>]. This method checks if an 
applicative container whose the name and the late type is <code>CAAPstINFExtensionCont</code> 
exists in the PLM Representation reference associated with <code>pContext</code> 
, which is a PLM Representation Instance.</p>
<p>Once you are sure that it is the right call, we can scan the container.</p>
<pre class="code">...
   if (NULL == *pListChildren)
   {
      *pListChildren = <strong>new CATLISTP</strong>(CATBaseUnknown);
   }
   ::<strong>CAAPstINFRetrieveRelimitedLines</strong>(pAppliCont,IID_CATBaseUnknown,(*(*pListChildren)));		       	       
...</pre>
<p><em><a href="#CAAPstINFRetrieveRelimitedLines">CAAPstINFRetrieveRelimitedLines</a>
</em>is a local method to return all the feature extensions of the <code>CAAPstINFExtensionCont</code> 
container.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing CATICtxMenuProvider</h3>
<p>This interface is implemented by the <em>CAAPstCtxMenuProvForCAAPstINFExtCont</em> 
class.</p>
<pre class="code">...
HRESULT CAAPstCtxMenuProvForCAAPstINFExtCont::GetChildren(CATBaseUnknown *pContext,
						CATLISTP(CATBaseUnknown) **pListChildren) 
{
   CATIClientContainer * pClientCont  = NULL ;
   HRESULT rc = ::<strong>CAAPstCheckAndRetrieveContainerFromContext</strong>(pContext,
                                                             "CAAPstINFExtensionCont",  // container name 
                                                             "CAAPstINFExtensionCont",  // container type
                                                             pClientCont);                                               
...
</pre>
<p><code>CAAPstCheckAndRetrieveContainerFromContext</code> is a global function, 
explained in the article [<a href="#References">4</a>]. This method checks if an 
applicative container whose the name and the late type is <code>CAAPstINFExtensionCont</code> 
exists in the PLM Representation reference associated with pContext , which is a 
PLM Representation Instance.</p>
<p>Once you are sure that it is the right call, we can provide command for the contextual 
menu.</p>
<pre class="code">...
    <strong>NewAccess</strong>(CATCmdStarter, pStarter, CAAPstCtxMenuProvForCAAPstINFExtContStr);
    <strong>SetAccessCommand</strong>(pStarter,"CAAPstDisplayInfoCAAPstINFExtContHdr");
    <strong>SetAccessChild</strong> (pContextualMenu, pStarter);                                  
...</pre>
<p>The command header definition (command name, command lib, .etc.) is defined in 
the addin of the VPM Editor.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CAAPstRetrieveTechnoRep"></a>CAAPstRetrieveTechnoRep Method</h3>
<p>The arguments of this function (defined inside CAAPstExtendUtilities.m) are the 
following:</p>
<pre class="code">HRESULT CAAPstRetrieveTechnoRep( CATBaseUnknown *iFeature,CATBaseUnknown **poTechnoRepInstance)</pre>
<p>This method enables us to find the PLM Technological Instance, <code>poTechnoRepInstance</code>, 
whose the PLM Representation Reference contains the input data. The input data can 
be a container, or a feature. To retrieve this pointer we use the static method
<code>GetPLMComponentOf</code> of the <em>CATPLMComponentInterfacesServices</em> class 
( CATPLMComponentInterfaces interface). This method computes, in our context, the 
PLM Product Representation Reference whose the stream contains our feature (<code>iFeature</code>).</p>
<pre class="code">
...
CATIPLMComponent_var spiPLMComponent ;
rc = CATPLMComponentInterfacesServices::<strong>GetPLMComponentOf</strong>(iFeature, spiPLMComponent);

<strong>CATIPsiRepresentationReference</strong> *piPsiRepRef = NULL;
rc = spiPLMComponent-&gt;QueryInterface(IID_CATIPsiRepresentationReference,(void **) &amp;piPsiRepRef);
...</pre>
<p>Then we use the method of <em>CATIPsiRepresentationReference</em>, <code>GetRepInstances</code>, 
retrieving in session all the instances of this PLM Representation Reference.
</p>
<pre class="code">
...
CATListValCATBaseUnknown_var instList;
rc = piPsiRepRef-&gt;<strong>GetRepInstances</strong>(instList);
if ( <strong>1 == instList.Size()</strong> )
{
   rc = instList[1]-&gt;QueryInterface(IID_CATBaseUnknown,(void**)&amp;(*poTechnoRepInstance));
...</pre>
<p>And since this a PLM Technological Representation is mono-instantiable, you can 
safely got its unique instance.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CAAPstINFRetrieveRelimitedLines"></a>CAAPstINFRetrieveRelimitedLines</h3>
<p>The arguments of this function (defined inside CAAPstINFLineExtension.m) are 
the following:</p>
<pre class="code">HRESULT CAAPstINFRetrieveRelimitedLines ( CATBaseUnknown * pContainer, const IID &amp;iIID, CATListPtrCATBaseUnknown &amp; ioListElement ) </pre>
<p>It retrieves inside the container, <code>pContainer</code>, all the feature extension, 
and the result is a list of interface pointer on the provided interface<code>
</code><code>iIID.</code></p>
<pre class="code">
...
   <strong>CATFmCredentials</strong> * MyCredential = NULL ;
   rc = ::<strong>CAAPstINFRetrieveCredentialsExtension</strong>(MyCredential);
...
</pre>
<p>First we retrieve the credential enabling us to work with the <code>CAAPstINFExtensionCont</code> 
container. The local method, <em>CAAPstINFRetrieveCredentialsModeler</em> is described 
in another use case article [<a href="#References">5</a>].</p>
<pre class="code">
...
   CATFmContainerFacade MyContainerFacade(*MyCredential,pContainer);
   CATFmFeatureIterator Iterator;
   rc = MyContainerFacade.<strong>ScanFeatures</strong>(Iterator);  
...
</pre>
<p>Then we create a facade to handle the input container with the retrieved credential.</p>
<pre class="code">
...
   CATFmFeatureFacade FeatFacadeOnCurrentElement;
   HRESULT rc_loop =  <strong>Iterator.Next</strong>(FeatFacadeOnCurrentElement);
   while (SUCCEEDED(rc_loop) ) 
   { 
      <strong>CAAIPstINFRelimitedLine</strong> * piOnRelimitedLine = NULL ; // to get only such kind of element
      FeatFacadeOnCurrentElement.<strong>QueryInterfaceOnFeature</strong>(IID_CAAIPstINFRelimitedLine,(void**) &amp; piOnRelimitedLine);
      if ( NULL != piOnRelimitedLine )
      {
	void * piRelimitedLineToReturn = NULL ;
	piOnRelimitedLine-&gt;<strong>QueryInterface(iIID</strong>,(void**)&amp;piRelimitedLineToReturn);
	if ( NULL != piRelimitedLineToReturn ) 
	{
	   ioListElement.<strong>Append</strong>((CATBaseUnknown*)piRelimitedLineToReturn); 
...	   
</pre>
<p><em>CAAIPstINFRelimitedLine</em> is the interface only implemented by our feature 
extension.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstTaProviders.htm">Understanding Applicative Container 
		Integration</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFExtensionLifeCycle.htm">Managing Feature Extension 
		Life Cycle</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFNavigate.htm">Enabling Specification Tree Navigation</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFExtensionStartUp.htm">Defining Feature Extension</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Oct 2007]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2010]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
