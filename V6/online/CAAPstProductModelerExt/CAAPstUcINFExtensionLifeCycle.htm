<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Feature Extension Life Cycle</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Feature Extension Life Cycle</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article illustrates the steps involved to <strong>Create</strong> 
		and <strong>Delete</strong> a feature extension. This involves calls to 
		the <strong>Feature Modeler APIs</strong> as well as in the case of delete, 
		the call to the <strong>Delete Common Protocol Service</strong>.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFFeatExtLifeCycle Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFFeatExtLifeCycle Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFFeatExtLifeCycle</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFFeatExtLifeCycle 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and delete a feature extension.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFFeatExtLifeCycle Use Case</h2>
<p>CAAPstINFFeatExtLifeCycle is a use case of the CAAProductStructureExtend.edu 
framework that illustrates FeatureModelerExt framework capabilities</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFFeatExtLifeCycle Do</h3>
<p>CAAPstINFFeatExtLifeCycle details the steps involved to create and delete a feature 
extension.</p>
<p>The feature extension <strong>Create</strong> involves:</p>
<ul>
	<li>It creates a <strong>Credentials</strong> object associated with the ownership 
		priviliges of the <strong>CAAPstINFExtensionCatalog</strong> Catalog, which 
		defines our feature extension namely. the <strong>ReLimited</strong> Line.</li>
	<li>It then creates a Feature Facade associated with the Base feature and the 
		Credentials above.</li>
	<li>It finally creates the feature extension to this base feature using its 
		facade.</li>
</ul>
<p>It also illustrates various ways to <strong>Delete</strong> a Feature Extension. 
The cases are listed below:</p>
<ul>
	<li>You delete the base feature and all its aggregated feature extensions are 
		deleted, as well.</li>
	<li>Owner of the base feature: You call <code>RemoveExtension</code>() on the 
		base feature for your specific feature extension, to explicitly remove an 
		extension.</li>
	<li>Owner of the feature extension: You can either call the <code>RemoveExtension</code>() 
		method on the base feature for your specific feature extension or the
		<code>DeleteSelf</code>() method on the feature extension.</li>
	<li>For all, irrespective of their ownership priviliges, <code>Delete</code> 
		API of the Common Protocol, if the owner of the feature extension has exposed 
		it, as detailed in the article [<a href="#References">1<span></span></a>].</li>
	<li>For all, irrespective of their ownership priviliges, <code>Delete</code> 
		Interactive Command, if the owner of the feature extension has exposed it, 
		as detailed in the article [<a href="#References">2<span></span></a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFFeatExtLifeCycle</h3>
<p>See the section entitled &quot;How to Launch the CAAPstINFRelimitedLine Use Case&quot; 
in the [<a href="#References">3<span></span></a>] use case for a detailed description 
of how this use case should be launched.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFFeatExtLifeCycle Code</h3>
<p>The <code>CAAPstINFFeatExtLifeCycle</code> use case is made of a source files 
located in:</p>
<ul>
	<li><strong>CAAPstINFLineExtension.m\src\CAAPstCreateLineExtension.cpp</strong>, 
		the global function responsible for creating the feature extension.</li>
	<li><strong>CAAPstINFLineExtension.m\src\CAAEPstINFRelimitedLineBehavior.cpp</strong>, 
		the <em>CATIFmFeatureBehaviorCustomization</em> Interface implementation 
		on our feature extension (<strong>RelimitedLine</strong>) overriding the
		<code>CanBeRemoved</code>() implementation.</li>
	<li><strong>CAAPstINFModelerCmd.m\src\CAAPstINFEditDlgPoint.cpp</strong>, the 
		call to the <strong>Common Protocol Service Delete</strong>.</li>
</ul>
<p>The modules are found at the location specified below:</p>
<p><code>InstallRootFolder\CAAProductStructureExtend.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>There is another class, a state command using the <code>CAAPstCreateLineExtension</code> 
function, which is located in the <strong>CAAPstINFLineExtensionCmd.m</strong> shared 
library of the <strong>CAAProductStructureExtend.edu</strong> framework. This class 
is not described since all the job is done inside the global routine <code>CAAPstCreateLineExtension</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in <code>CAAPstINFFeatExtLifeCycle</code>:</p>
<ol>
	<li><a href="#Step1">Instantiating a Feature Extension</a></li>
	<li><a href="#Step2">Deleting a Feature Extension</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Instantiating a Feature Extension</h3>
<p>To instantiate a feature extension, there is the <code>AddExtension</code> method 
of the <em>CATFmFeatureFacade</em> class. We have created a method which encapsulates 
the &quot;<strong>model</strong>&quot; operations. This method is the <code>CAAPstCreateLineExtension</code> 
function.</p>
<pre class="code">HRESULT <strong>CAAPstCreateLineExtension</strong>(  CATBaseUnknown *iBaseFeature,CAAIPstINFRelimitedLine **poRelimitedLine)</pre>
<p>The arguments to the global routine above are:</p>
<ul>
	<li><code>iBaseFeature</code> is a <code>CAAPstINFLine</code> feature.</li>
	<li><code>poRelimitedLine</code> will be the newly created feature extension.</li>
</ul>
<p>It begins with creating a Feature Facade associated with the base Feature.</p>
<pre class="code">CATFmCredentials* MyCredential = NULL ;
rc = <strong>::CAAPstINFRetrieveCredentialsExtension(MyCredential)</strong>;
CATFmFeatureFacade FeatFacadeOnBaseFeat(*MyCredential,iBaseFeature);</pre>
<p>The first step is to retrieve the Credential object with a call to <code>CAAPstINFRetrieveCredentialsExtension</code>() 
which authorizes client to work with the extension feature defined in the
<strong>CAAPstINFExtensionCatalog</strong>. The article &quot;<strong>Defining Feature 
Extension</strong>&quot; [<a href="#References">5<span></span></a>] delves further 
into this global routine which returns the Credentials.</p>
<p>A Feature Facade is then created associated with an underlying base feature which 
was input to our <code>CAAPstCreateLineExtension</code> routine. The credentials 
for the feature extension are associated with this feature facade.</p>
<p>We proceed to now create the RelimitedLine, a feature extension to a base feature.</p>
<pre class="code">//Add it the line extension
CATFmFeatureFacade oExtension (*MyCredential);
CATString iExtensionId("<strong>CAAPstINFRelimitedLine</strong>");
rc = <strong>FeatFacadeOnBaseFeat.AddExtension</strong>(iExtensionId,oExtension);	
CATBoolean Creation = FALSE ;
if ( SUCCEEDED(rc)  )
{
	if ( rc == S_OK) Creation = TRUE ;
	rc = <strong>oExtension.QueryInterfaceOnFeature</strong>(<strong>IID_CAAIPstINFRelimitedLine</strong>, (void **)poRelimitedLine);
	if ( SUCCEEDED(rc) &amp;&amp; ( FALSE == Creation ) )  rc = S_FALSE ;
}</pre>
<p>The first step is to declare a Feature Facade for the feature extension, to be 
created. The feature extension to be created is identified as &quot;<strong>CAAPstINTRelimitedLine</strong>&quot;. 
It exists inside a Container defined in the Feature Extension Catalog. The article &quot;<strong>Defining 
Feature Extensions</strong>&quot; [<a href="#References">5<span></span></a>] delves 
into this subject in depth.</p>
<p>The <code>AddExtension</code>() method of the <em>CATFmFeatureFacade</em> class 
creates a feature extension. The call is invoked on the base feature. The
<strong>extensionID</strong> is an input and the feature extension created, as a 
result is the output. There can only be a single extension instance of a specific 
type, to a base feature. If it already exists, the <code>AddExtension</code>() call 
returns <strong>S_FALSE</strong>. On success, it returns <strong>S_OK</strong>.The
<em>CATBoolean</em> type, <strong>Creation</strong> is set to <strong>TRUE</strong> 
if the extension was newly created. Otherwise, its value is set to <strong>FALSE</strong>.</p>
<p>If an extension instance is newly created, its attribute values will have to 
be set. This is realized in the code that follows. Otherwise, these values have 
already been set.</p>
<pre class="code">// valuates the parameter, only in case of creation 
if ( SUCCEEDED(rc) &amp;&amp; (Creation == TRUE) ) 
{
     // Initialize parameter's values
<strong>     (*poRelimitedLine)-&gt;SetParam1(0.3f)</strong>;
<strong>     (*poRelimitedLine)-&gt;SetParam2(0.7f)</strong>;

     // The extended line is set as input of the extension for update purpose
     CATFmAttributeName NameAttr="TheExtendedLine";
     CATFmAttributeValue ValueAttr; 
     ValueAttr.SetFeature(iBaseFeature);
     rc = <strong>oExtension.SetValue(NameAttr,ValueAttr)</strong>;	
     
     // update graphic properties
<strong>     CATIVisProperties_var spVisPropExtendedFeature = (*poRelimitedLine)</strong> ;
     if ( NULL_var != spVisPropExtendedFeature )
     {
          CATVisPropertiesValues Attribut;
	 Attribut.SetColor(0,255,0);     // green
	 Attribut.SetWidth(4);           // medium thickness
	 <strong>spVisPropExtendedFeature-&gt;SetPropertiesAtt</strong>(Attribut, CATVPAllPropertyType, CATVPLine);
     }</pre>
<p>The parameter is set with the <em>CAAIPstINFRelimitedLine</em> Interface of the 
extension feature, retrieved by the call to <code>QueryInterfaceOnFeature</code>().</p>
<p>The <code>SetParam1</code>() call of the <em>CAAIPstINFRelimitedLine</em> valuates 
its component attribute &quot;<strong>Param1</strong>&quot;, as a Knowledge Parameter.</p>
<p>The <code>SetParam2</code>() call of the <em>CAAIPstINFRelimitedLine</em> valuates 
its component attribute &quot;<strong>Param2</strong>&quot;, as a Knowledge Parameter.</p>
<p>The Extension feature also must refer to its base feature. It realizes this by 
valuating its &quot;<strong>TheExtendedLine</strong>&quot; attribute.</p>
<p>The graphic properties of the extended feature are set with the <em>CATIVisProperties</em> 
Interface on the feature.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Deleting a Feature Extension</h3>
<p>A Feature Extension can be deleted in ways listed below:</p>
<ul>
	<li>A feature extension, like any other feature, could be deleted by simply 
		calling <code>DeleteSelf</code>(), an API of the <em>CATFmFeatureFacade</em> 
		class. The invocation is on the feature extension.
		<pre class="code">HRESULT <strong>DeleteSelf</strong>();</pre>
		<p>This call <strong>SUCCEEDS</strong> only if the Feature Facade that invokes 
		it is associated with the Credentials which grant it ownership priviliges 
		and thus an authorization to handle the feature extension.</p>
	</li>
	<li>Alternatively, you could also delete a Feature Extension with a call to
		<code>RemoveExtension</code>() of the <em>CATFmFeatureFacade</em> class, 
		on its associated base feature.<pre class="code">HRESULT <strong>RemoveExtension</strong>(const CATFmFeatureFacade &amp; iExtension) const;</pre>
		<p>The only input to the <code>RemoveExtension</code>() routine is the feature 
		extension to be deleted, as a <em>CATFmFeatureFacade</em> type. The call
		<strong>SUCCEEDS</strong>, if you have either have the Credentials which 
		grant you ownership priviliges of the base feature or only the feature extension.</p>
	</li>
	<li>A feature extension can also be deleted with a call to the <code>Delete</code>() 
		routine of the <em>DataCommonProtocolServices</em> class, subject to its 
		usage being authorized by the owner of the feature extension.<br />
		<pre class="code">static HRESULT <strong>Delete</strong>(CATIUseEntity * iEntity);</pre>
		<p>An essential prerequisite to use the above routine, is that the feature 
		extension must implement the <em>CATIUseEntity</em> Interface. The <code>
		Delete</code>() static routine takes the feature to be deleted (as a <em>
		CATIUseEntity*</em> type) as its only input. It is significant to note that 
		the <em>CATIUseEntity</em> implementation on our feature extension and granting 
		it authorization to invoke the <code>Delete</code>() service is realized 
		simply by making declarations in the feature extension (<strong>RelimitedLine</strong>) 
		OSM file, without a need to explicitly write code for that purpose. The 
		article &quot;<strong>Defining Feature Extensions</strong>&quot; [<a href="#References">5</a>] 
		delves further into this topic.</p>
		<p>The <code>CanDelete</code>() routine of the <em>DataCommonProtocol</em> 
		class that follows is equally significant. It returns the deletable status 
		of the input feature and is invoked by the <code>Delete</code>() routine 
		just prior to going ahead with the actual deletion of the feature.</p>
		<pre class="code">static HRESULT <strong>CanDelete</strong>(const CATIUseEntity * iEntity, CATBoolean &amp; oDeletable);</pre>
		<p>If the above routine returns the Deletable status as <strong>TRUE</strong> 
		(<strong>oDeletable</strong>, a <em>CATBoolean</em> type), only then delete 
		is invoked on our feature extension, which is also an input to the routine 
		(<code>iEntity</code>, a <em>CATIUseEntity</em>* type). It is significant 
		to note that this call is invoked only in the Delete() routine but not in 
		the <code>RemoveExtension</code>() and the <code>DeleteSelf</code>() routines.</p>
		The default implementation of the <code>CanDelete</code>() method is simple 
		and unique: an aggregated feature cannot be deleted. In order to re-inforce 
		or by-pass this rule, you can override the default implementation of the
		<code>CanBeRemoved</code>() method of the <em>CATIFmFeatureBehaviorCustomization
		</em>Interface (as provided by the adapter class <em>CATFmFeatureCustomizationAdaptor</em>). 
		Since a Feature Extension is aggregated under its base feature, delete will 
		fail to work without this reimplementation. A sample overridden implementation 
		for our <strong>RelimitedLine</strong> which makes possible its delete follows:<pre class="code">HRESULT <strong>CAAEPstINFRelimitedLineBehavior::CanBeRemoved</strong>(CATBoolean &amp; oDeletable) const
{
    <strong>oDeletable = TRUE</strong>; 
    return S_OK;
}</pre>
		The implementation above returns the deletable status as <strong>TRUE</strong>, 
		which permits the feature extension delete.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to create a Feature Extension. This primarily 
involves a call to <code>AddExtension</code>() of the <em>CATFmFeatureFacade</em> 
class.</p>
<p>It also details the steps involved to delete a Feature Extension. Most importantly 
it illustrates the following APIs which realize feature extension delete</p>
<ul>
	<li><code>DeleteSelf</code>() call of the <em>CATFmFeatureFacade</em> class 
		invoked on the feature extension.</li>
	<li><code>RemoveExtension</code>() call of the <em>CATFmFeatureFacade</em> class 
		invoked on the base feature.</li>
	<li>Delete Common Protocol Service exposed to all, irrespective of the feature 
		extension ownership priviliges. This is the customized delete which is realized 
		by overriding the default implementation of the <em>CATIFmFeatureBehaviorCustomization</em> 
		on our feature extension.</li>
	<li>Interactively Delete.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCustoDelete.htm">
		Understanding Delete Protocol Customization</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCCPCustomization.htm">
		Cut, Copy, Paste Customization</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFExtensionOverview.htm">Extending Applicative Data</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFExtensionStartUp.htm">Defining Feature Extensions</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
