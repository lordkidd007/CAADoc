<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Enabling Contextual Commands Support</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Enabling Contextual Commands Support</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstINFContextualCommand use case. This 
		use case explains how to integrate a contextual command in V6. It involves 
		registering a Contextual Menu Provider with a Product Provider Manager, 
		at the time of loading the Product Reference in session, more precisely 
		during the initialization of the Applicative Container. The <code>GetContextualMenu</code> 
		method of the <em>CATICtxMenuProvider</em> implementation on the Provider 
		is responsible for integrating the contexual menu command in V6.</p>
		<p>The fundamentals of associating CAA features with the V6 characteristics 
		like 3D Visu, spec tree, Contextual Menu and Knowledge integration is discussed 
		in the article &quot;<strong>Understanding Applicative Container Integration</strong>&quot; 
		[<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFContextualCommand Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFContextualCommand Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFContextualCommand</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFContextualCommand 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This Use Case teaches an end-user the steps involved to integrate a contextual 
command for their feature model. The integration is realized using:</p>
<ul>
	<li>Command integrated in the Product Workshop Add-In.</li>
	<li>Contextual Menu Provider implementation responsible for integrating the 
		command inside the Contextual menu in V6.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFContextualCommand Use Case</h2>
<p>The CAAPstINFContextualCommand is a use case that is part of the CAAPstINFIntegrateNewFeatures 
use case defined in the CAAProductStructureExtend.edu framework that illustrates 
the integration of FeatureModelerExt capabilities in the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFContextualCommand Use Case Do</h3>
<p>This Use Case fundamentally illustrates the steps involved to integrate a Contextual 
Command in V6.</p>
<p>When you select a Point, or any features of the data model (3D Viewer or Specification 
tree node) you get this contextual menu.</p>
<p>
<img alt="Contextual Menu" height="334" src="images/CAAPstINFCntxMenu.png" width="276"/></p>
<p>The new command, here &quot;Displays the contents of CAAPstINFCont&quot;, is 
added to the default contextual menu of the PLM Representation Instance.</p>
<p>It involves:</p>
<ul>
	<li>A Command is integrated as a Product Workshop AddIn, inside V6.</li>
	<li>A Contextual Menu Provider, a <em>CATICtxMenuProvider</em> implementation 
		then integrates this command in the Contextual Menu of V6.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAPstINFContextualCommand Use Case</h3>
<p>See the How to Launch section of the &quot;Integrating Applicative Features in 
a Product Structure&quot; [<a href="#References">2</a>] use case for a detailed 
description of how this use case should be launched.</p>
<p>Specifically, the code described in this article is executed on loading the Product 
Reference in the <strong>CATIA</strong> session. You can use <strong>CAAPstINFProductRef.3dxml</strong> 
file in the <strong>InputData</strong> directory of the <strong>CAAProductStructureExtend.edu</strong> 
framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFContextualCommand Code</h3>
<p>This use case code consists of:</p>
<ul>
	<li><strong>CAAPstCtxMenuProvForCAAPstINFCont.cpp</strong>, which contains the
		<em>CAAPstCtxMenuProvForCAAPstINFCont</em> component, the <em>CATICtxMenuProvider</em> 
		implementation in the module:
		<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code></p>
	</li>
	<li><strong>CAAPstINFInitCont.cpp</strong>, the <em>CATInit</em> implementation 
		on our Applicative Container, in the module:
		<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code></p>
	</li>
	<li><strong>CAAPstDisplayInfoCAAPstINFContCmd.cpp</strong> and <strong>CAAPstDisplayInfoCAAPstINFContDlg.cpp</strong>, 
		the StateCommand and the dialog box associated with it, to list the features 
		inside a container, in the module:
		<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModelerCmd.m</code></p>
	</li>
	<li><strong>CAAPstINFWksAdn.cpp</strong>, which contains the <em>CAAPstINFWksAdn</em> 
		component, the <em>CATIPrdWorkshopAddin</em> implementation in the module:
		<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFAddin.m</code></p>
	</li>
</ul>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are logical steps to CAAPstINFContextualCommandSupport:</p>
<ol>
	<li><a href="#Step1">Declaring a CATICtmMenuProvider Implementation (Contextual 
		Menu Provider)</a></li>
	<li><a href="#Step2">DICO Entry</a></li>
	<li><a href="#Step3">Product Workshop AddIn (Command Header and Toolbar) Integration</a></li>
	<li><a href="#Step4">Contextual Command Integration by Implementing a Provider</a></li>
	<li><a href="#Step5">Instantiating the Provider in the Container Initialization 
		Routine</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Declaring a CATICtxMenuProvider Implementation (Contextual 
Menu Provider)</h3>
<p>We declare a <em>CATICtxMenuProvider</em> implementation below. The resulting 
component is the Contextual Menu Provider.</p>
<pre class="code">// Tie the implementation to its interface
#include "TIE_CATICtxMenuProvider.h"
<strong>TIE_CATICtxMenuProvider(CAAPstCtxMenuProvForCAAPstINFCont)</strong>;

// To declare that the class is an simple implementation
//
<strong>CATImplementClass</strong>( <strong>CAAPstCtxMenuProvForCAAPstINFCont</strong>,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );</pre>
<p>The class <em>CAAPstCtxMenuProvForCAAPstINFCont</em> is declared as the component 
tied to the <em>CATICtxMenuProvider</em> Interface, with the TIE_CATICtxMenuProvider 
and the <code>CATImplementClass</code> macros, in conjunction.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>DICO Entry</h3>
<p>Every implementation is invariably accompanied with an entry in the its framework 
dico file as depicted below.</p>
<pre class="code"><strong>CAAPstCtxMenuProvForCAAPstINFCont CATICtxMenuProvider  libCAAPstINFContainer</strong></pre>
<p>The entries in the dico file are in the format &quot;<strong>Component Interface &quot;lib&quot;+Library</strong>&quot;. 
The <em>CATICtxMenuProvider</em> implementation exists in the <strong>CAAPstINFContainer</strong> 
library.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Product Workshop AddIn (Command Header and Toolbar) Integration</h3>
<p>We declare an AddIn to the Product Workshop. This fundamentally involves declaring 
a Command Header associated with our contextual command and integrating it inside 
a Product Workshop Toolbar.</p>
<p>The code that creates the command header associated with our contextual command 
follows.</p>
<pre class="code">void <strong>CAAPstINFWksAdn::CreateCommands</strong>()
{
  // modeler Commands
  ... 

  // use in contextual menu
  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstDisplayInfoCAAPstINFContHdr</strong>",    
                   "CAAPstINFCommands",  
                   "<strong>CAAPstDisplayInfoCAAPstINFContCmd</strong>",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                    CATFrmAvailable); 
}</pre>
<p>The <code>CATCreateCommandHeader</code> routine of the <em>CATAfrCommandHeader</em> 
class creates a Command Header associated with our Contextual Command.</p>
<p>The command header is identified by the string &quot;<strong>CAAPstDisplayInfoCAAPstINFContHdr</strong>&quot; 
linked to the command &quot;<strong>CAAPstDisplayInfoCAAPstINFContCmd</strong>&quot;. 
This command lists the features instantiated inside the applicative container of 
type &quot;<strong>CAAPstINFCont</strong>&quot;.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Contextual Command Integration by Implementing a Provider</h3>
<p>The Contextual Menu Provider is responsible for integrating the Contextual command 
in V6. This is realized by the <code>GetContextualMenu</code>() implementation on 
the Provider. The implementation follows:</p>
<pre class="code">HRESULT <strong>CAAPstCtxMenuProvForCAAPstINFCont::GetContextualMenu</strong>(CATBaseUnknown* pContext,CATCmdContainer* pContextualMenu)
{
     // 1- Check applicative container
     CATBaseUnknown * pAppliCont  = NULL ;
     HRESULT rc = ::<strong>CAAPstCheckAndRetrieveContainerFromContext</strong>(pContext,
                                                             "CAAPstINFContainer",  // container name 
                                                             "CAAPstINFCont",  // container type
                                                             &amp;pAppliCont);
                                               
     ...
    // 2- Add a command to the contextual menu of the rep instance
    // The hdr is defined in the Product workshop Addin: CAAPstINFAddin
    NewAccess(CATCmdStarter, pStarter, CAAPstCtxMenuProvForCAAPstINFContStr);
    <strong>SetAccessCommand</strong>(pStarter,"<strong>CAAPstDisplayInfoCAAPstINFContHdr</strong>");
    <strong>SetAccessChild</strong> (<strong>pContextualMenu</strong>, pStarter);

    return S_OK;
}</pre>
<p>The <code>GetContextualMenu</code>() method is invoked on V6 launch. The inputs 
to the routine are:</p>
<ul>
	<li><code>pContext</code>, a <em>CATBaseUnknown</em>* type, which represents 
		the Techno Rep Instances in the PLM model hierarchy.</li>
	<li><code>pContextualMenu</code>, a <em>CATCmdContainer</em>* type, which represents 
		the contextual menu.</li>
</ul>
<p>The call to the global routine <code>CAAPstCheckAndRetrieveContainerFromContext</code>() 
primarily confirms if the context (Techno Rep Inst) is associated with an Applicative 
Container of type &quot;<strong>CAAPstINFCont</strong>&quot;.</p>
<p>Once confirmed, it proceeds to integrate the contextual command to display the 
contents (features) of the Applicative Container inside a dialog box.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Instantiating the Provider in the Container Initialization 
Routine</h3>
<p>The Applicative Container is responsible for instantiating the Contextual Menu 
Provider. This is realized by the <code>Init()</code> method of the <em>CATInit</em> 
Interface implemented on the Container. The UC &quot;<strong>Initializing the Applicative 
Container at Runtime</strong>&quot; [<a href="#References">4</a>] details the initialization 
inside an implementation of an Applicative Container at runtime. The implementation 
follows:</p>
<pre class="code">void <strong>CAAEPstINFInitCont::Init</strong> (CATBoolean destroyExistingData)   
{
    // 1 - Providers declaration
    ...   
    // Declare the contextual menu provider to the Product provider manager
    // export this variable (CAAPstINFContMenu), with anykind value to have contextual menu
    char * pCAAPstINFContMenu = NULL ;
    CATLibStatus result = ::<strong>CATGetEnvValue</strong>("<strong>CAAPstINFContMenu</strong>",&amp;pCAAPstINFContMenu);  
    if ( NULL != pCAAPstINFContMenu )
    {
         ...	   
         // Retrieve (and not really instantiate) the product provider manager    
         rc = ::<strong>CATInstantiateComponent</strong>("<strong>CAAPrdVisuProvider</strong>",
	                               IID_CATIProviderManager,
				  (void **) &amp;piProvidersMgr);
         ...
	CAAPstCtxMenuProvForCAAPstINFCont * <strong>pCAAPstCtxMenuProvForCAAPstINFCont</strong> = <strong>new CAAPstCtxMenuProvForCAAPstINFCont()</strong>;
         rc = <strong>piProvidersMgr-&gt;AddProvider</strong>(<strong>IID_CATICtxMenuProvider</strong>, pCAAPstCtxMenuProvForCAAPstINFCont);
	...
} 
</pre>
<p>The first step is to confirm if the environment variable <em>CAAPstINFCont</em> 
is valuated. This is realized with a call to the global routine <code>CATGetEnvValue</code>().</p>
<p>If the environment variable is valuated the contextual menu is integrated. The 
first call is to the global routine <code>CATInstantiateComponent</code>() which 
instantiates the Product Provider Manager &quot;<strong>CAAPrdVisuProvider</strong>&quot;. 
The Provider Manager is retrieved as a <em>CATIProviderManager</em>* type (piProvidersMgr).</p>
<p>Next we simply instantiate the Contextual Menu Provider (<em>CAAPstCtxMenuProvForCAAPstINFCont</em> 
component type). The AddProvider() method of the <em>CATIProviderManager</em> Interface 
implemented on the Provider Manager is responsible for registering this Provider 
with the Provider Manager.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This UC illustrates the steps involved to integrate a Contextual command in V6.</p>
<p>It involves registering a Contextual Menu Provider with a Product Provider Manager, 
at the time of loading the Product Reference in session, more precisely during the 
initialization of the Applicative Container. The <code>GetContextualMenu</code>() 
method of the <em>CATICtxMenuProvider</em> implementation on the Provider is responsible 
for integrating the contexual menu command in V6.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstTaProviders.htm">Understanding Applicative Container 
		Integration</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Features in a Product Structure</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFInitCont.htm">Initializing Applicative Container 
		at Runtime</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
