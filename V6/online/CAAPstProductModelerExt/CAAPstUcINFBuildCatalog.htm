<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Defining StartUp Catalog</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Defining StartUp Catalog</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstUcINFBuildCatalog use case which is 
		part of the CAAPstINFIntegrateNewFeatures use case. It explains how to define 
		StartUps from scratch inside feature catalogs. These features are used in 
		the UC CAAPstINFIntegrateNewFeatures [<a href="#References">1</a>], which 
		demonstrates integrating these features in the basic V6 mechanisms in the 
		Product Context.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstUcINFBuildCatalog Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstUcINFBuildCatalog Do</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFCatalog OSM</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#Credentials">Retrieving the Credentials to handle our 
				Features</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to:</p>
<ul>
	<li>Define StartUps in the <strong>CATOsm</strong> files.</li>
	<li>Generate a Catalog file (<strong>CATFct</strong> extension) from the
		<strong>CATOsm</strong> file, using the <strong>CATfctEditorAssistant</strong> 
		tool.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstUcINFBuildCatalog Use Case</h2>
<p>The CAAPstUcINFBuildCatalog is a use case defined in the CAAProductStructureExtend.edu 
framework that illustrates the integration of FeatureModelerExt framework capabilities 
in the Product context.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstUcINFBuildCatalog Use Case Do</h3>
<p>This UC primarily does the following:</p>
<ul>
	<li>Defines <strong>base</strong> Feature StartUps in an <strong>OSM</strong> 
		file. By base it implies a StartUp defined from scratch, meaning not derived 
		from an existing StartUp, so that it does not inherit any data or behavior.</li>
	<li>Generates a <strong>Catalog</strong> with this <strong>OSM</strong> file 
		as input.</li>
</ul>
<p>The Fig. that follows depicts the resulting feature catalog containing the definitions 
of the Feature StartUps in it. The StartUps are listed below the Fig.1.</p>
<table>
	<caption>Fig.1: StartUp inside CAAPstINFCatalog</caption>
	<tr>
		<td>
		<img alt="StartUp inside CAAPstINFCatalog" src="images/CAAPstINFCatalog.jpg"/></td>
	</tr>
</table>
<ul>
	<li>&quot;<strong>CAAPstINFRoot</strong>&quot; represents the parent node that 
		will aggregate all the other features. Its only attribute of type &quot;<strong>list 
		of components</strong>&quot; aggregates a list of the features.</li>
	<li>&quot;<strong>CAAPstINFPoint</strong>&quot; is a feature representing a 
		3D geometrical point. Its attributes contain the values of the x, y and 
		z coordinates of the point.</li>
	<li>&quot;<strong>CAAPstINFLine</strong>&quot; is a feature representing a 3D 
		geometrical line. Its attributes contain references to the two points of 
		type &quot;<strong>CAAPstINFPoint</strong>&quot; that define the line.</li>
	<li>&quot;<strong>CAAPstINFWire</strong>&quot; is a feature representing one 
		or several inter-connected 3D geometrical lines. Its attribute contains 
		a list of at least two &quot;<strong>CAAPstINFPoint</strong>&quot; features 
		that define the wire.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstUcINFBuildCatalog Code</h3>
<p>This UC primarily consists of files which are located within the CAAProductStructureExtend.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>You have:</p>
<ul>
	<li>In the <strong>InputData</strong> directory
		<ul>
			<li><strong>CAAPstINFCatalog.txt</strong> file which has the feature 
				definitions in it. User copies the contents of this file, while 
				updating the <strong>OSM</strong> file below at the time of &quot;<a href="#Step1">Generating 
				the Catalog File</a>&quot;.</li>
		</ul>
	</li>
	<li>in <strong>CNext/resources/graphic</strong> folder
		<ul>
			<li><strong>CAAPstINFCatalog.CATfct</strong>, the final <strong>Catalog</strong> 
				generated by the UC.</li>
		</ul>
	</li>
	<li>in <strong>CNext/resources/msgcatalog</strong> folder
		<ul>
			<li><strong>CAAPstINFCatalogNLS.CATNls</strong>, the<strong> NLS
				</strong>file for features defined in the catalog namely.
				<strong>CAAPstINFCatalog</strong>.</li>
		</ul>
	</li>
	<li>in the <strong>CAAPstINFModeler.m</strong> module, the file
		<ul>
			<li><strong>CAAPstINFRetrieveCredentialsModeler.cpp</strong>, which 
				has the global routine to retrieve the Credentials to work with 
				our feature catalog.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The steps of the UC execution are listed below:</p>
<ol>
	<li><a href="#Step1">Generatinf the Catalog File</a></li>
	<li><a href="#Step2">Defining the Feature StartUps in the OSM</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Generating the Catalog File</h3>
<ol>
	<li><strong>Create an empty OSM file</strong>
		<pre class="code"><strong>CATfctEditorAssistant</strong> <strong>-create-new-catalog</strong> <strong>-catalog-name</strong> CAAPstINFCatalog.CATfct <strong>-with-client-id</strong> CAAPstINFClientId <strong>-into-directory</strong> outptudirectoryforupdatedcatalog</pre>
		<p>This command creates in your current directory an empty OSM file and 
		an empty corresponding CATfct file. The contents of the OSM file are depicted 
		below:</p>
		<pre class="code">document <strong>`CAAPstINFCatalog.CATfct</strong>` 
{
   container RootCont #root #uuid(0u415283de-0000-0988-46a78b5f00000003)
   {
      ...
   }
}</pre>
		<p>The OSM file, at this stage simply declares the CAAPstINFCatalog catalog. 
		There are no feature StartUps defined inside it, as yet.</p>
	</li>
	<li><strong>Move</strong> the newly <strong>CATfct</strong> file in runtime view.
		<p>The runtime view is the <code>InstallRootFolder\OS_directory\resources\graphic</code> 
		folder.</p>
		<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is 
		the folder where the API CD-ROM is installed.</p>
	</li>
	<li><strong>Edit</strong> the <code>CAAPstINFCatalog</code>.<code>OSM *</code> file as 
		decribed in the next step namely. <a href="#Step2">Defining the Feature 
		Startups in the OSM</a>.</li>
	<li><strong>Update (Upgrade)</strong> the previously generated <strong>CATfct</strong> 
		file
		<pre class="code"><strong>CATfctEditorAssistant</strong> <strong>-update-catalog -catalog-name</strong> CAAPstINFCatalog.CATfct <strong>-with-client-id</strong> CAAPstINFClientId <strong>-with-osm</strong> osmfilepathwithfilename <strong>-into-directory</strong> outptudirectoryforupdatedcatalog</pre>
		<p>The result of this command line is locally a new <code>CAAPstINFCatalog</code>.<code>CATfct</code> 
		file updated from the one existing in the runtime view, and a modified OSM 
		file.</p>
	</li>
	<li><strong>Move</strong> the updated CATfct file in runtime view
		<p>The runtime view is the <code>InstallRootFolder\OS_directory\resources\graphic</code> 
		folder.</p>
		<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is 
		the folder where the API CD-ROM is installed.</p>
		<p>*It is recommended NOT TO SAVE THE OSM FILE. In future, to modify a Startup 
		catalog, it is recommended to re-use the OSM file generated from the
		<strong>CATfctEditorAssistant</strong> tool. (In this case the option 
		is <code>-describe-catalog</code>.)</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Defining the Feature StartUps in the OSM</h3>
<p>Please note the <strong>OSM</strong> file output at <strong>step 1</strong> of 
the earlier section, simply declares the catalog <code>CAAPstINFCatalog</code>. 
It does not define any features in it.</p>
<p>Now we define the features, in the scope of the Root Container inside the
<strong>OSM</strong> file. The entire feature definition can be found in the
<strong>CAAPstINFCatalog.txt</strong> file whose location is specified in the earlier 
section [<a href="#Where">#</a>]. The resulting <strong>Osm</strong> file contents 
can be split as listed below and the description follows:</p>
<ul>
	<li><a href="#Prolog">Catalog Definition</a></li>
	<li><a href="#Step21">CAAPstINFRoot StartUp Definition</a></li>
	<li><a href="#Step22">CAAPstINFPoint StartUp Definition</a></li>
	<li><a href="#Step23">CAAPstINFLine StartUp Definition</a></li>
	<li><a href="#Step24">CAAPstINFWire StartUp Definition</a></li>
	<li><a href="#Step25">Common Protocol Declaration</a></li>
	<li><a href="#Step26">NLS Support for Feature Names</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Prolog"></a>Catalog Definition</h4>
<pre class="code">document <strong>`CAAPstINFCatalog.CATfct</strong>`
{
	container <strong>CATFeatCont</strong> #root {
...</pre>
<p>This section defines the catalog name CAAPstINFCatalog.CATfct and the root container 
CATFeatCont. The catalog name is enclosed in backquotes (`) because of the dot (.) 
in .CATfct.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>CAAPstINFRoot StartUp Definition</h4>
<pre class="code">...
	feature <strong>CAAPstINFRoot</strong> #startup {
		<strong>component</strong> <strong>ListOfComponents</strong> #<strong>list</strong> #in
	}
...</pre>
<p>The CAAPstINFRoot StartUp has only one attribute:</p>
<ul>
	<li><code>ListOfComponents</code> - which is a list of aggregated features. 
		These features are considered as being part of CAAPstINFRoot and are removed 
		if CAAPstINFRoot is. Moreover the <code>#in</code> facet indicates that
		<code>ListOfComponents</code> is a Spec and not a Result [<a href="#References">3</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>CAAPstINFPoint StartUp Definition</h4>
<pre class="code">...
	feature <strong>CAAPstINFPoint</strong> #startup {
<strong>		double X #in
		double Y #in
		double Z #in</strong>
	}
...</pre>
<p>The CAAPstINFPoint StartUp has three attributes:</p>
<ul>
	<li><code>X</code>, <code>Y</code>, and <code>Z</code> - which 
		will contain double values. The <code>#in</code> facet also indicates that 
		the attributes are Specs and not Results [<a href="#References">3</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>CAAPstINFLine StartUp Definition</h4>
<pre class="code">...
	feature <strong>CAAPstINFLine</strong> #startup {
		<strong>specobject</strong> <strong>Point1</strong> #in
		<strong>specobject</strong> <strong>Point2</strong> #in
	}
...</pre>
<p>The CAAPstINFLine StartUp has two attributes:</p>
<ul>
	<li><code>Point1</code>, and <code>Point2</code> - which refer 
		to the Point features. Unlike the features of CAAPstINFRoot, these are independent 
		of CAAPstINFLine and will not be removed with it. The <code>#in</code> facet 
		also indicates that the attributes are Specs and not Results [<a href="#References">3</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step24"></a>CAAPstINFWire StartUp Definition</h4>
<pre class="code">...
	feature <strong>CAAPstINFWire</strong> #startup {
		<strong>specobject</strong> <strong>Points</strong> #list #in
	}
}</pre>
<p>The CAAPstINFWire StartUp has one attribute:</p>
<ul>
	<li><code>Points</code>- which is a list of Point features, referred to by 
		the Wire. The <code>#in</code> facet also indicates that the attributes 
		are Specs and not Results [<a href="#References">3</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step25"></a>Common Protocol Declaration</h4>
<p>Lastly we have a section which defines the protocol for our feature with regard 
to its support for a common set of services namely. <strong>Update</strong>,
<strong>Cut</strong>, <strong>Copy</strong>, <strong>Paste</strong> and <strong>
Delete</strong> operations commonly invoked on features. Please take note of the 
following entry in our feature definition. We have shown the entry for the Line 
feature. A similar entry can be found for all features.</p>
<pre class="code">feature <strong>`CAAPstINFLine`</strong>#startup {
  ...
  <strong>#interface::CATIUseEntity=metadata_CommonProtocol</strong>
  ...
}</pre>
<p><strong>#interface::CATIUseEntity=metadata_CommonProtocol</strong> declares the 
metadata block which defines the protocol for our feature with regard to its support 
for a common set of services namely. <strong>Cut</strong>, <strong>Copy</strong>,
<strong>Paste</strong> and <strong>Delete</strong> operations commonly invoked on 
features.</p>
<p>The metadata block follows:</p>
<pre class="code">metadata <strong>metadata_CommonProtocol</strong> {<strong>
</strong>		`implementInterface` = true<strong>
		</strong>`implementCopyPasteAspect` = true<strong>
		</strong>`implementDeleteAspect` = true
		`implementUpdateAspect` = true
	}</pre>
<p>The relevance of those entries in the metadata block are listed below in the 
order that they occur in the block. It is significant to note that this relevance 
is realized wholly by those declarations, without the necessity of explicitly writing 
code for that purpose:</p>
<ul>
	<li>The interface <em>CATIUseEntity</em> is implemented by our feature, an essential 
		prerequisite for any feature which supports the common protocol services.</li>
	<li>Copy Paste operation is supported.</li>
	<li>Delete operation using the common protocol services is supported by our 
		Feature. This is the first level of authorization for delete. You will 
		realize that there is another level of authorization required for delete, 
		as detailed in the referenced UC article [<a href="#References">4</a>].</li>
	<li>Update operation* To be updated.</li>
</ul>
<p>The relevance of the entries made inside that metadata block and an understanding 
of the concept involved is a subject of the article &quot;Common Protocol Integration&quot; 
[<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step26"></a>NLS Support for Feature Names</h4>
<p>The <strong>NLS</strong> support for our features is realized by providing the
<strong>CAAPstINFCatalogNLS.CATNls</strong> file at the location specified above 
[<a href="#Where">#</a>]. This file gets copied to the <strong>WS RTV</strong> on 
running the command <strong>mkrtv</strong>.</p>
<p>The contents of the file are as depicted below:</p>
<pre class="code">
CAAPstINFRoot="<strong>Root</strong>";
CAAPstINFPoint="<strong>Point</strong>";
CAAPstINFLine="<strong>Line</strong>";
CAAPstINFWire="<strong>Wire</strong>";</pre>
<p>We simply assign a <strong>NLS</strong> name corresponding to each feature identified 
by its late type in the file above.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Credentials"></a>Retrieving the Credentials to Handle our Features</h2>
<p>The <code>CAAPstINFRetrieveCredentialsModeler</code>() routine is responsible 
for retrieving the <strong>Credentials</strong> which authorize working with our 
feature and its associated Container.</p>
<pre class="code">static CATBoolean FirstTime = TRUE;
static CATFmCredentials TheUniqueCredential ;
static HRESULT TheUniqueHResult  = E_FAIL ;

HRESULT  <strong>CAAPstINFRetrieveCredentialsModeler</strong>( <strong>CATFmCredentials</strong> *&amp; TheModelerCredential)
{
	if ( TRUE == FirstTime  )
	{
            <strong>CATUnicodeString clientId("CAAPstINFClientId")</strong>;
<strong>	   CATUnicodeString parnerId("CAAPstExtProductStructure")</strong>;
	   TheUniqueHResult = <strong>TheUniqueCredential.RegisterAsApplicationBasedOn</strong>(CATFmFeatureModelerID,<strong>parnerId</strong>);
	   if ( SUCCEEDED(TheUniqueHResult) ) TheUniqueHResult = <strong>TheUniqueCredential.RegisterAsCatalogOwner</strong>("<strong>CAAPstINFCatalog</strong>",clientId);
	   if ( SUCCEEDED(TheUniqueHResult) ) TheUniqueHResult = <strong>TheUniqueCredential.RegisterAsCatalogOwner</strong>("<strong>CAAPstINFCatalog2</strong>",clientId);
	   
	   FirstTime = FALSE ;
	}

	TheModelerCredential = &amp;TheUniqueCredential ;

	return TheUniqueHResult  ;
}</pre>
<p>The call to <code>RegisterAsApplicationBasedOn</code>() routine of the <em>CATFmCredentials</em> 
class updates our Credentials object with the authorization to access the Applicative 
Container based on Feature Modeler.</p>
<p>The call to <code>RegisterAsCatalogOwner</code>() routine of the <em>CATFmCredentials</em> 
class further updates our Credentials object with an authorization to work with 
the catalog namely. <strong>CAAPstINFCatalog</strong>. This is the primary catalog 
in which all features are defined.</p>
<p>Note: There is another catalog namely. <strong>CAAPstINFCatalog2</strong> which 
defines the external features, for which access authorization is required for an 
end-user. This is realized with another call to the <code>RegisterAsCatalogOwner()</code> 
method, of the <em>CATFmCredentials</em> class with arguments corresponding to this 
catalog.</p>
<p>The <strong>clientID</strong> input to this routine is the same that is input 
in an earlier step &quot;<strong>Generating the Catalog File</strong>&quot;, which 
is illustrative.</p>
<p>Each time we work with a feature, it is necessary to retrieve the associated 
credentials with the call to the above global routine. It is significant to note 
that the Credentials object is created once and any subsequent call to the routine 
above, returns an already existing static Credentials object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAAPstUcINFBuildCatalog use case has shown you how to define a new StartUp 
in a feature catalog. It involves fundamentally two steps:</p>
<ul>
	<li>Creating an OSM file which defines the features.</li>
	<li>Generating a <strong>Catalog</strong> with this <strong>OSM</strong> file 
		as input, using the <strong>CATFctEditorAssistant</strong> tool</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data In Product Context</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaFeatureAttribute.htm">
		Understanding Feature Attribute</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFDataCommonProtocol.htm">Delete with Common Protocol 
		StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCommonProtocol.htm">
		Common Protocol Integration</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>4</strong> [Jan 2011]</td>
		<td>Document revised</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Aug 2007]</td>
		<td>OSM version</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Aug 2004]</td>
		<td>Document revised</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [May 2002]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
