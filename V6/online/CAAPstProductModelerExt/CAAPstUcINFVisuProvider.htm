<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Enabling Visualization</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Enabling Visualization</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to allow features created &quot;from scratch&quot;, 
		and included within a PLM Technological Representation (Techno Rep), to 
		be visualized. This article is an illustration of the concept of Provider 
		mechanism explained in the referenced article [<a href="#References">1</a>].
		</p>
		<p>The native visualization process takes into account the different containers 
		that are native to DS modelers and the features contained within. However, 
		it has no knowledge of features created in user-defined applicative containers. 
		The purpose of this use case is to show how these types of features can 
		nevertheless be visualized in a viewer of a PLM Product Reference.</p>
		<p>This article is one among a set of articles which together discuss the 
		"Integrating Applicative Data in Product Context" use case [<a href="#References">2</a>].
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFVisu Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFVisu Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFVisu</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFVisu Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the steps involved to integrate a new feature created &quot;from 
scratch&quot; in the visualization process of V6. This is realized by providing 
a Provider mechanism, which is an implementation for the GetChildren() API of the
<em>CATI3DVisuProvider</em> Interface. It returns a list of children for display 
in 3D inside V6.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFVisu Use Case</h2>
<p>The CAAPstINFVisu is a use case of the CAAProductStructureExtend.edu framework 
that illustrates the integration of Feature Modeler and Visualization frameworks 
capabilities in the scope of a Product Structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFVisu Use Case Do</h3>
<p>This use case illustrates how you can see in 3D the features of our data model.</p>
<table>
	<tr>
		<td><img alt="" src="images/CAAPstINFCAAPstINFProductRef3DXML.png"/></td>
	</tr>
</table>
<p>The referenced technical article [<a href="#References">1</a>] explains that 
the owner of an applicative container is responsible for the 3D Visualization of 
features contained inside it. This is realized thanks to the <em>CATI3DVisuProvider</em> 
implemention, in other words the Provider mechanism, which outputs a list of elements 
for 3D display under a PLM Rep Instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAPstINFVisu Use Case</h3>
<p>See the section entitled &quot;How to Launch the CAAPstINFIntegrateNewFeatures 
Use Case&quot; in the &quot;Integrating Applicative Data in Product Context&quot; 
[<a href="#References">2</a>] use case for a detailed description of how this use 
case should be launched.</p>
<p>Specifically, the code described in this article is executed upon loading the 
PLM Product Reference into the V6 session. (You can use CAAPstINFProductRef.3dxml 
file in the InputData directory of the CAAProductStructureExtend.edu framework).
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFVisu Code</h3>
<p>This use case describes the implementation class of the <em>CATI3DVisuProvider</em> 
interface, called <em>CAAPstVisuProvForCAAPstINFCont</em>, which is found in the 
CAAPstVisuProvForCAAPstINFCont.cpp source file and CAAPstVisuProvForCAAPstINFCont.h 
header file inside CAAPstINFModeler module</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>There are two logical steps to CAAPstINFVisu:</p>
<ol>
	<li><a href="#Step1">Declaring the 3D Visu Provider</a></li>
	<li><a href="#Step2">The CATI3DVisuProvider Implementation</a></li>
</ol>
<p>The code implementations use interfaces implemented by each feature of the data 
model. You have a description of these interface in the referenced article [<a href="#References">5</a>].</p>
<p>Don't forget to update the dico file to insert a interface implementation declaration.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Declaring the 3D Visu Provider</h3>
<p>When the applicative container which contains the data model features is created 
or loaded in session, the <code>Init </code>method of the <em>CATInit</em> interface 
is called by the process. This I<code>nit </code>method declares the providers as 
described by a previous article &quot;Initializing Applicative Container at Runtime&quot; 
[<a href="#References">6</a>]. The current use case deals the visualization provider 
implementation.</p>
<p>The visualization provider is implemented by the <em>CAAPstVisuProvForCAAPstINFCont</em> 
class, whose declaration follows.</p>
<pre class="code">class <strong>CAAPstVisuProvForCAAPstINFCont : public CATBaseUnknown</strong>
{
  <strong>CATDeclareClass</strong>;

  public:
  CAAPstVisuProvForCAAPstINFCont();
  virtual CAAPstVisuProvForCAAPstINFCont();

 
  HRESULT <strong>GetChildren</strong>(CATBaseUnknown *ipObj,
		    CATLISTP(CATBaseUnknown) **opListChildren); 

  private:

  // Copy constructor and assignment operator, not implemented
  // Set as private to prevent from compiler automatic creation as public.
  // -----------------------------------
  CAAPstVisuProvForCAAPstINFCont (CAAPstVisuProvForCAAPstINFCont &amp;);
  CAAPstVisuProvForCAAPstINFCont &amp; operator=(CAAPstVisuProvForCAAPstINFCont &amp;);
};				                     
...</pre>
<p>The <em>CAAPstVisuProvForCAAPstINFCont</em> C++ class derives from <em>CATBaseUnknown</em>. 
The <code>CATDeclareClass</code> macro declares that the <em>CAAPstVisuProvForCAAPstINFCont</em> 
class represents a component. The copy constructor and the &quot;=&quot; operator 
are set as private to prevent the compiler from automatically exposing these routines 
as public.</p>
<p>The <em>CATI3DVisuProvider</em> interface contains one method to override that 
is detailed in the next <a href="#Step2">The CATI3DVisuProvider Implementation</a> 
section.</p>
<p>Now an extract of the <em>CAAPstVisuProvForCAAPstINFCont</em> source file:</p>
<pre class="code">// Tie the implementation to its interface
#include &quot;TIE_CATI3DVisuProvider.h&quot;
<strong>TIE_CATI3DVisuProvider</strong>(CAAPstVisuProvForCAAPstINFCont);

// To declare that the class 
//
<strong>CATImplementClass</strong>(CAAPstVisuProvForCAAPstINFCont,
                   Implementation, 
                   <strong>CATBaseUnknown</strong>,
                   CATNull);                    
...</pre>
<p>The <code>CATImplementClass</code> macro is used in conjunction with the
<code>CATDeclareClass</code> macro in the class header file to express that the 
class is part of a CAA Object Modeler component. It is a component which OM Derives 
from <em>CATBaseUnknown</em> (third argument). The fourth argument must always be 
set to <code>CATNull</code> for component main classes.</p>
<p>Do not forget to modify the interface dictionary</p>
<pre class="code">...
CAAPstVisuProvForCAAPstINFCont CATI3DVisuProvider libCAAPstINFModeler  
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>The CATI3DVisuProvider Implementation</h3>
<p>The GetChildren() API of the <em>CATI3DVisuProvider</em> Interface is invoked 
for each Rep Ref loaded in session. The Rep Ref is passed as a context to the API 
invoked.</p>
<p>The purpose of this visualization provider implementation is to return the list 
of &quot;<strong>CAAPstINFRoot</strong>&quot; features found in the applicative 
container whose the latetype is &quot;<strong>CAAPstINFCont</strong>&quot; and the 
name is &quot;<strong>CAAPstINFContainer</strong>&quot;. It contains only one method,
<code>GetChildren</code>, which is described in detail below.</p>
<p>The implementation primarily consists of the steps listed below:</p>
<ol>
	<li><a href="#Step21">Verifying that the Context Is the &quot;Valid&quot; PLM 
		Techno Representation</a></li>
	<li><a href="#Step22">Retrieving the &quot;CAAPstINFRoot&quot; Features from 
		the Applicative Container</a></li>
	<li><a href="#Step23">Creating the Output List</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Verifying that the Context Is the &quot;Valid&quot; PLM 
Techno Representation</h4>
<p>This step consists in to check that the context input to the GetChildren() API, 
is a Rep Ref which is associated with a Container identified as <strong>CAAPstINFContainer</strong> 
and which is of type <strong>CAAPstINFCont</strong>.</p>
<pre class="code">HRESULT <strong>CAAPstVisuProvForCAAPstINFCont ::GetChildren</strong>(CATBaseUnknown *<strong>pContext</strong>, CATLISTP(CATBaseUnknown) **pListChildren) 
{
    CATBaseUnknown * pAppliCont  = NULL ;
    HRESULT rc = ::<strong>CAAPstCheckAndRetrieveContainerFromContext</strong>(pContext,
                                                             "CAAPstINFContainer",  // container name 
                                                             "CAAPstINFCont",  // container type
                                                             &amp;pAppliCont);			                   				            	                     
...</pre>
<p><em>CAAPstCheckAndRetrieveContainerFromContext</em> is a global function, explained 
in the article [<a href="#References">7</a>]. This method checks if an applicative 
container identified as <code>CAAPstINFContainer</code> and whose late type is
<code>CAAPstINFCont</code> exists in the PLM Representation reference associated 
with <code>pContext</code>, which is a PLM Representation Instance.</p>
<p><em>CAAPstCheckAndRetrieveContainerFromContext</em> fails only if there is an 
internal error. The error does not include the case if the right container is not 
found. So, after this call, the most important is the returned pointer <code>pAppliCont</code>. 
If the pointer is NULL, the PLM Representation Instance is not the right one,
<code>GetChildren</code> will return S_OK but with an empty list of children.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Retrieving the &quot;CAAPstINFRoot&quot; Features from 
the Applicative Container</h4>
<p>Now we are sure that the input context is the expected Techno Rep Ref and so 
we proceed to retrieve the root features in it. This is realized with the <em>CAAIPstINFFactory</em> 
interface implemented on our container [<a href="#References">5</a>].</p>
<pre class="code">...
   CAAIPstINFFactory<strong></strong>* piFactoryOnAppliCont = NULL ;
   if ( NULL != pAppliCont )
   {
      rc = <strong>pAppliCont-&gt;QueryInterface(IID_CAAIPstINFFactory, (void**) &amp;piFactoryOnAppliCont)</strong>;   
      pAppliCont-&gt;Release();
      pAppliCont = NULL ;
   }
   CATListPtrCATBaseUnknown ListRoot ;
   if (piFactoryOnAppliCont != NULL)
   {
       rc = <strong>piFactoryOnAppliCont-&gt;GetRootElements(IID_CATBaseUnknown,ListRoot)</strong>;
       piFactoryOnAppliCont-&gt;Release();
       piFactoryOnAppliCont = NULL ;
    }
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Creating the Output List</h4>
<p>The output list is created only if there is at least one root features to add, 
and the input list is NULL.</p>
<pre class="code">...
  if ( (ListRoot.Size() != 0) &amp;&amp; (NULL == *pListChildren)  )
  { 
     (*pListChildren) = new CATLISTP(CATBaseUnknown);
  }
    
  // Fill in the output list with the CAAPstINFRoot feature of the container
  for (int i=1; i&lt;=ListRoot.Size(); i++ )
  {
      CATBaseUnknown *pCurrentRoot = ListRoot[i] ;
      if ( NULL != pCurrentRoot )
      {
         <strong>(*pListChildren)-&gt;Append(pCurrentRoot)</strong>;
      }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAAPstINFVisu use case has shown you how to integrate new features created &quot;from 
scratch&quot; in an applicative container of a PLM Technological Representation 
in the visualization process.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstTaProviders.htm">Understanding Applicative Container 
		Integration</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Integrating Applicative Data In 
		Product Context</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFVisu.htm">Visualization StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFIntrinsicFeatBehavior.htm">Inherent StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAPstUcINFInitCont.htm">Initializing Applicative Container 
		at Runtime</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAPstUcINFNavigate.htm">Enabling Specification Tree Navigation</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2002]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2011]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

</body>

</html>
