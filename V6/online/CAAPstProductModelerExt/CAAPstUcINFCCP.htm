<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Cut, Copy, and Paste</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Cut, Copy, and Paste</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstINFCCP use case. This use case explains 
		how we can customize the Cut , Copy and Paste behavior for features. This 
		use case is an illustration of the technical article "Cut Copy Paste Customization" 
		[<a href="#References">1</a>].</p>
		<p>This article is one among a set of articles which together discuss the 
		"Integrating Applicative Data in Product Context" use case [<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFCCP Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFCCP Do</a></li>
					<li><a href="#Launch">How to Launch CAAPstINFCCP</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFCCP Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>User will learn to customize the default behavior of the Cut, Copy, Paste operations 
either realized the interactive way [<a href="#References">3</a>] or using the methods 
of the <em>DataCommonProtocolCCPServices</em>. The default behaviors are explained 
in the referenced article [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFCCP Use Case</h2>
<p><code>CAAPstINFDataCommonProtocol</code> is a use case of the CAAProductStructureExtend.edu 
framework that illustrates FeatureModelerExt framework capabilities</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFCCP Use Case Do</h3>
<p>These table sums up the behaviors that we have implemented on the Root, the Point, 
the Line and the Wire:</p>
<ul>
	<li><strong>CAAPstINFRoot</strong>
		<table class="fill">
			<tr>
				<th>Operations</th>
				<th>Behaviors</th>
			</tr>
			<tr>
				<td>Copy</td>
				<td>Default behavior. When the root is copied, its aggregating elements 
				are copied as well.</td>
			</tr>
			<tr>
				<td>Cut</td>
				<td>Default behavior. When the root is cut, its aggregating elements 
				are cut as well.</td>
			</tr>
			<tr>
				<td>Paste</td>
				<td>Only Point, Line and Wire can be pasted on a Root.</td>
			</tr>
		</table>
	</li>
	<li><strong>CAAPstINFPoint</strong>
		<table class="fill">
			<tr>
				<th>Operations</th>
				<th>Behaviors</th>
			</tr>
			<tr>
				<td>Copy</td>
				<td>Default behavior.</td>
			</tr>
			<tr>
				<td>Cut</td>
				<td>Default behavior.</td>
			</tr>
			<tr>
				<td>Paste</td>
				<td>No element can be pasted on this element.</td>
			</tr>
		</table>
	</li>
	<li><strong>CAAPstINFLine</strong>
		<table class="fill">
			<tr>
				<th>Operations</th>
				<th>Behaviors</th>
			</tr>
			<tr>
				<td>Copy</td>
				<td>when a Line is copied its pointing Points are copied as well.</td>
			</tr>
			<tr>
				<td>Cut</td>
				<td>When the Line is cut, its points are not cut.</td>
			</tr>
			<tr>
				<td>Paste</td>
				<td>No element can be pasted on this element.</td>
			</tr>
		</table>
	</li>
	<li><strong>CAAPstINFWire</strong>
		<table class="fill">
			<tr>
				<th>Operations</th>
				<th>Behaviors</th>
			</tr>
			<tr>
				<td>Copy</td>
				<td>Default behavior, the new Wire points to the same Points as 
				the original Wire.</td>
			</tr>
			<tr>
				<td>Cut</td>
				<td>When the Wire is cut, its Points are cut as well.</td>
			</tr>
			<tr>
				<td>Paste</td>
				<td>No element can be pasted on this element.</td>
			</tr>
		</table>
	</li>
</ul>
<p>These behaviors are customizable through the following methods of the <em>CATIFmFeatureBehaviorCustomization</em> 
interface:</p>
<ul>
	<li><code>CcpRegisterAdditionalObjectsForCopy</code>, to add additional element 
		when the feature is copied.</li>
	<li><code>CcpPaste</code>, to perform operations on the target object.</li>
	<li><code>CcpRegisterAdditionalObjectsForRemove</code>, to add additional element 
		when the feature is cut (or delete).</li>
	<li><code>CcpUpdate</code>, to perform operations on intermediate process or 
		CCP.</li>
</ul>
<p>This use case explains how for each Startups we have used (or not) the first 
three methods (<code>CcpUpdate</code> is useless for our simple data model).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch"></a>How to Launch the CAAPstINFCCP Use Case</h3>
<p>See the section entitled &quot;How to Launch the Integrating Applicative Data 
In Product Context Use Case&quot; [<a href="#References">1</a>] in the referenced 
use case for a detailed description of how this use case should be launched.</p>
<p>Specifically, the code described in this article is executed upon loading the 
PLM Product Reference into the V6 session. (You can use CAAPstINFProduct.3DXML file 
in the InputData directory of the CAAProductStructureExtend.edu framework.)</p>
<p>Interactive scenario once the CAAPstINFProduct is loaded:</p>
<ul>
	<li>Click button left on a <strong>Point ( Line or Wire)</strong>.</li>
	<li>Button right, click the <strong>Copy</strong> command.</li>
	<li>Select a Root.</li>
	<li>Button right, click the <strong>Paste</strong> command.</li>
</ul>
<p>Or:</p>
<ul>
	<li>Click button left on a <strong>Point (Line or Wire)</strong>.</li>
	<li>Button right, click the <strong>Cut</strong> command.</li>
	<li>Select a Root</li>
	<li>Button right, click the <strong>Paste</strong> command.</li>
</ul>
<p>Or:</p>
<ul>
	<li>Click button left on a <strong>Point (Line or Wire)</strong>.</li>
	<li>Button right, click the <strong>Delete</strong> command.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFCCP Code</h3>
<p>This use case describes the implementation of the methods of <em>CATIFmFeatureBehaviorCustomization
</em>dedicated to customize the CCP protocol. These methods are inside the following 
source:</p>
<ul>
	<li>For the &quot;CAAPstINFRoot&quot;, CAAEPstINFRootBehavior.cpp.</li>
	<li>For the &quot;CAAPstINFLine&quot;, CAAEPstINFLineBehavior.cpp.</li>
	<li>For the &quot;CAAPstINFWire&quot;, CAAEPstINFWireBehavior.cpp.</li>
</ul>
<p>These files can be found in the CAAPstINFModeler.m shared library.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstINFCCP use case:</p>
<ul>
	<li><a href="#Root">Implement the Behaviors for the Root</a></li>
	<li><a href="#Point">Implement the Behaviors for the Point</a></li>
	<li><a href="#Line">Implement the Behaviors for the Line</a></li>
	<li><a href="#Wire">Implement the Behaviors for the Wire</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Root"></a>Implement the Behaviors for the Root</h3>
<p>When a Root is Copied, or Cut or Deleted, by CPP protocol, it follows the default 
behavior. So we don't implement <code>CcpRegisterAdditionalObjectsForCopy</code> 
and <code>CcpRegisterAdditionalObjectsForRemove</code>. But we have to implement
<code>CcpPaste</code>. This method must aggregate the features (the one authorized) 
pasted on i</p>
<pre class="code">
HRESULT CAAEPstINFRootBehavior::<strong>CcpPaste</strong>(const CATFmCCPContext &amp; iContext) 
{
  HRESULT rc = E_FAIL ; 

  CATFmCredentials * MyCredential = NULL ;
  rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential);
  if ( FAILED(rc) ) return E_FAIL ;

  CATFmFeatureFacade <strong>InstanceRoot</strong>(*MyCredential,this);
</pre>
<p>First we create a Feature Facade on this, <code>InstanceRoot</code>. <em>CAAPstINFRetrieveCredentialsModeler</em> 
retrieving the credential to handle the Root is explained in the referenced article 
[<a href="#References">1</a>].</p>
<pre class="code">  ...
  CATListValCATBaseUnknown_var TheListObject ;
  rc = iContext.<strong>GetImpactedObjects</strong>(TheListObject)
  ...</pre>
<p>Then we got, thanks the input context,<code> iContext</code>, all the objects 
created by the Copy/Paste Cut/Paste process, and without parent.</p>
<pre class="code">  ...
  int NgAggregated = 0 ;
  int i = 1 ;
  ...
  while ( SUCCEEDED(rc) &amp;&amp; ( i &lt;=TheListObject.Size() ) )
  {
     CATBaseUnknown_var spCurrentObject = TheListObject[i];
     if ( NULL_var !=  spCurrentObject )
     {
         <strong>CAAIPstINFSubElement</strong>_var spSubElementOnCurrent = spCurrentObject ;
         if ( NULL_var !=  spSubElementOnCurrent)  
         {// element can be pasted on this
         }
 ...</pre>
<p>Then for each elements returned by <code>GetImpactedObjects</code> method, we 
do a check to look for only the Point, Line and Wire elements. Only those Startups 
implement <em>CAAIPstINFSubElement</em>.</p>
<pre class="code">...
    CATFmAttributeName <strong>NameAttr</strong> ("ListOfComponents");
    CATFmAttributeValue TheNewElt ;
    TheNewElt.<strong>SetFeature</strong>(TheListObject[i]) ;
    HRESULT rc2 = InstanceRoot.<strong>AppendValue</strong>(NameAttr,TheNewElt); 
...</pre>
<p>When the element is a Point, Line or Wire , we aggregate it below the Root using
<code>AppendValue</code>.</p>
<pre class="code">...
 <strong>CATIModelEvents</strong>_var spModelEventsOnRoot = this ;
 NgAggregated ++ ;			
 spModelEventsOnRoot-&gt;<strong>ConnectTo</strong>(spCurrentObject);</pre>
<p>Just after the <code>AppendValue</code>, we connect the new feature to its root 
using <em>CATIModelEvents</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Point"></a>Implement the Behaviors for the Point</h3>
<p>When a Point is Copied, or Cut or Deleted, by CPP protocol, it follows the default 
behavior. So we don't implement <code>CcpRegisterAdditionalObjectsForCopy</code> 
and <code>CcpRegisterAdditionalObjectsForRemove</code>. And since no feature can 
be pasted on a Point, we don't have implemented <code>CcpPaste</code> neither.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Line"></a>Implement the Behaviors for the Line</h3>
<p>When a Line is copied, its referenced Points are copied too, so we have to add 
them as additional element. So we have to implement <code>CcpRegisterAdditionalObjectsForCopy</code>. 
The others methods are useless.</p>
<pre class="code">...
HRESULT <strong>CAAEPstINFLineBehavior</strong>::<strong>CcpRegisterAdditionalObjectsForCopy</strong>(const CATListValCATBaseUnknown_var &amp; iInitialSetOfObjects, 
							    CATListValCATBaseUnknown_var &amp; oObjectToAddToBoundary) const
{
  <strong>CAAIPstINFLine</strong>_var spLine = const_cast&lt;CAAEPstINFLineBehavior *&gt;(this) ;
  if ( NULL_var == spLine ) return E_FAIL ;

  HRESULT rc = S_OK  ;

  // we add the two points (when they exist) : when the line is copied, its points too.
  CAAIPstINFPoint * pPoint1 = NULL;
  spLine-&gt;<strong>GetPoint</strong>(1, pPoint1) ;
  CAAIPstINFPoint * pPoint2 = NULL;
  spLine-&gt;<strong>GetPoint</strong>(2, pPoint2) ;

  if ( pPoint1 != NULL ) 
  {
     oObjectToAddToBoundary.<strong>Append</strong>(pPoint1);
     pPoint1-&gt;Release();
     pPoint1 = NULL ;
   }
   if ( pPoint2 != NULL ) 
   {
      oObjectToAddToBoundary.<strong>Append</strong>(pPoint2);
      pPoint2-&gt;Release();
      pPoint2 = NULL ;
   }
   return rc ;
}
...</pre>
<p>This method uses the <em>CAAIPstINFLine</em> interface implemented by this ( 
a <em>CAAPstINFLine</em>), to get its 2 pointed Points. These two points are inserted 
in the output list, <code>oObjectToAddToBoundary</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Wire"></a>Implement the Behaviors for the Wire</h3>
<p>When a Wire is Cut ( or deleted by CCP) , its pointed Points are deleted too, 
so we have to add them as additional element. So we have to implement <code>CcpRegisterAdditionalObjectsForRemove</code>. 
The others methods are useless.</p>
<pre class="code">...
HRESULT CAAEPstINFWireBehavior::<strong>CcpRegisterAdditionalObjectsForRemove</strong>(const CATListValCATBaseUnknown_var &amp; iInitialSetOfObjects, 
							    CATListValCATBaseUnknown_var &amp; oObjectToAddToBoundary) const
{
  <strong>CAAIPstINFWire</strong>_var spWire = const_cast&lt;CAAEPstINFWireBehavior *="" /&gt;(this) ;
  if ( NULL_var == spWire ) return E_FAIL ;

  HRESULT rc = S_OK  ;

  // we add all the points making up the wire (when they exist) : when the wire is cut/delete, its points too.
  CATListPtrCATBaseUnknown pListPoint ;
  rc = spWire-&gt;<strong>GetPoints</strong>(pListPoint) ;

  if ( SUCCEEDED(rc) )
  {
     for ( int i=1 ; i &lt;= pListPoint.Size() ; i++)
     {
	CATBaseUnknown * pCurrent =  pListPoint[i] ;
	if ( NULL != pCurrent)
	{
               oObjectToAddToBoundary.<strong>Append</strong>(pCurrent);
               pCurrent-&gt;Release(); pCurrent = NULL ;
	}
      }
   }
  return rc ;
}
...</pre>
<p>This method uses the <em>CAAIPstINFWire</em> interface implemented by this ( 
a <em>CAAPstINFWire</em>), to get its pointed Points. The non null points are inserted 
in the output list, <code>oObjectToAddToBoundary</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAAPstINFCCP use case has shown you how to implement <em>CATIFmFeatureBehaviorCustomization</em> 
to customize CCP protocols.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCCPCustomization.htm">
		Cut Copy Paste Customization</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data In Product Context</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFCSOFilter.htm">Exposing Selectively Cut, Copy, Paste, 
		Delete</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
