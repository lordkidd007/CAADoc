<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Delete StartUp Behavior</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Delete StartUp Behavior</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstINFDelete use case. This use case explains 
		how you can customize the default behavior when a feature is deleted.</p>
		<p>This article is one among a set of articles which together discuss the 
		"Integrating Applicative Data in Product Context" use case [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFDelete Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFDelete Do</a></li>
					<li><a href="#Launch">How to Launch CAAPstINFDelete</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFDelete Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case teaches you that you can customize the default behavior when a 
feature is deleted. It is an illustration of the technical article &quot;Understanding 
Delete Protocol Customization&quot; [<a href="#References">2</a>] that you find 
in Feature modeler extension section of the CAA Encyclopedia.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFDelete Use Case</h2>
<p>The CAAPstINFDelete is a use case of the CAAProductStructureExtend.edu framework 
that illustrates the integration of FeatureModelerExt framework capabilities in 
the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAPstINFDelete Use Case Do</h3>
<p>Let us present the behavior for the Root, the Point, the Line and the Wire:</p>
<ul>
	<li><strong>CAAPstINFRoot:</strong> Feature modeler engine deletes the aggregated 
		features of a feature. So when a root will be deleted Point, Lines and wire 
		will be deleted too. We don't need to customize this default behavior.</li>
	<li><strong>CAAPstINFLine</strong>: A Line is made up of two points (CAAPstINFPoint)<strong>
		</strong>pointed by the line. When the Line is deleted, Feature modeler 
		engine don't delete the pointed features. We keep this default behavior.</li>
	<li><strong>CAAPstINFWire</strong>: When the line points to 2 points, the wire 
		points N. We keep also the default behavior, pointed points are not deleted 
		when the wire is deleted.</li>
	<li><strong>CAAPstINFPoint</strong>: when a point is deleted:
		<ul>
			<li>The line using this point will be &quot;broken&quot;. So we have 
				decided to delete those lines.</li>
			<li>The wire using this point, and having only two points will be also &quot;broken&quot;. 
				So we we have decided to delete those wire.</li>
		</ul>
	</li>
</ul>
<p>So, this use case shows how you can delete wires and lines used by the point 
being deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch"></a>How to Launch the CAAPstINFDelete Use Case</h3>
<p>See the section entitled &quot;How to Launch the Integrating Applicative Data 
In Product Context Use Case&quot; [<a href="#References">1</a>] in the referenced 
use case for a detailed description of how this use case should be launched.</p>
<p>Specifically, the code described in this article is executed upon loading the 
PLM Product Reference into the V6 session. (You can use CAAPstINFProduct.3DXML file 
in the InputData directory of the CAAProductStructureExtend.edu framework.)</p>
<ul>
	<li>Click button left on a <strong>Point (Line or Wire)</strong>.</li>
	<li>Button right, click the <strong>Delete</strong> command.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFDelete Code</h3>
<p>This use case describes the implementation of the <code>BeforeRemove</code> method 
of the <em>CATIFmFeatureBehaviorCustomization</em> interface for the CAAPstINFPoint 
StartUp. The source is CAAEPstINFPointBehavior.cpp inside the CAAPstINFModeler modules:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Let us describe how the <code>BeforeRemove</code> method of <em>CATIFmFeatureBehaviorCustomization</em> 
is implemented by CAAPstINFPoint. We have four steps:</p>
<ol>
	<li><a href="#Credential">Retrieving the Credential to Work with CAAPstINFPoint</a></li>
	<li><a href="#ScanPointed">Retrieving Features Pointing the Point</a></li>
	<li><a href="#Excluding">Exluding the Wire with More than Two Points</a></li>
	<li><a href="#Deletion">Deleting Features Pointing the Point</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Credential"></a>Retrieving the Credential to Work with CAAPstINFPoint</h3>
<p>First we retrieve the credential enabling us to work with the CAAPstINFPoint 
features.</p>
<pre class="code">...
HRESULT <strong>CAAEPstINFPointBehavior::BeforeRemove</strong>()
{
   HRESULT rc = E_FAIL;

   CATFmCredentials * MyCredential = NULL ;
   rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential);
...</pre>
<p>The method <code>CAAPstINFRetrieveCredentialsModeler</code> is described in another 
article [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ScanPointed"></a>Retrieving Features Pointing the Point</h3>
<p>To retrieve the features pointing the current CAAPstINFPoint, we use the
<code>ScanPointingFeatures</code> method of <em>CATFmFeatureFacade</em> class.</p>
<pre class="code">...
CATFmFeatureFacade FeatFacadeOnPoint(*MyCredential,this);
<strong>CATFmPointingFeatureIterator</strong> oIterator;
rc = FeatFacadeOnPoint.<strong>ScanPointingFeatures</strong>(oIterator);
...</pre>
<p>The <code>ScanPointingFeatures</code> returns - via an iterator - all lines and 
wires having by one of their spec attribute a link to the current point.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Excluding"></a>Excluding the Wire with More than Two Points</h3>
<p>This step consists in checking all elements returned by the iterator, and to 
exclude the wire having more than two points.</p>
<pre class="code">...
  CATFmFeatureFacade <strong>oPointingFeat</strong>(*MyCredential);
  while ( SUCCEEDED(rc) &amp;&amp; SUCCEEDED(oIterator.<strong>Next</strong>(oPointingFeat)) )
  {
     CATUnicodeString PointingFeatType;
     oPointingFeat.<strong>GetType</strong>(PointingFeatType);

     CATBoolean ToBeDelete = FALSE ;
     if ( PointingFeatType == "CAAPstINFLine" ) ToBeDelete= TRUE ;
     if ( PointingFeatType == "CAAPstINFWire" )
     {
         check count of points 
     }
     ...</pre>
<p>We get each element of the iterator using the <code>Next</code> method of the
<em>CATFmPointingFeatureIterator</em> class. This method returns the pointing feature-
<code>oPointingFeat</code> - as a <em>CATFmFeatureFacade</em>. You can see that 
this facade is built with the same credential as the point: <code>MyCredential</code>. 
If we use this credential we are sure to work with features defined by the <code>
CAAPstINFCatalog</code> catalog. If <code>ScanPointingFeatures</code> retrieves 
other features than a line or a wire, <code>GetType</code> method on <code>oPointingFeat</code> 
will fail since you are not granted to handle a feature except those of <code>CAAPstINFCatalog</code> 
with <code>MyCredential.</code>.</p>
<p>Once the type of the feature is returned, we decide to delete the line and for 
the wire with have an additional test:</p>
<pre class="code">...
       <strong>CAAIPstINFWire</strong> *PointingWire = NULL ;
       oPointingFeat.QueryInterfaceOnFeature(IID_CAAIPstINFWire,(void**) &amp;PointingWire);
       if ( NULL != PointingWire )
       {
	 int NbPoint = 0 ;
          PointingWire-&gt;<strong>GetNbPoints</strong>(&amp;NbPoint);
	 if ( NbPoint == 2 ) ToBeDelete= TRUE ;

          PointingWire-&gt;Release(); PointingWire = NULL ;
       }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Deletion"></a>Deleting Features Pointing to the Point</h3>
<p>Deleting a line, or a wire, consists in to remove it from the list holding by 
its root.</p>
<pre class="code">...
 if (TRUE == ToBeDelete)
 {
    CATFmAttributeValue oAttrValueOnParentFeat;
    oPointingFeat.<strong>GetParentFeature</strong>(oAttrValueOnParentFeat);

    // transform the parent (as a value) as a facade 
    CATFmFeatureFacade FeatFacadeOnParentFeat(*MyCredential);
    oAttrValueOnParentFeat.GetFeature(FeatFacadeOnParentFeat);
	
   // transform the point (facade) as an attribute value   
   CATFmAttributeValue PointingFeatAsAttrValue;
   PointingFeatAsAttrValue.SetFeature(oPointingFeat);

   CATFmAttributeName RootAttrKey("ListOfComponents");
   int oIndex = 0;
   FeatFacadeOnParentFeat.<strong>LocateValue</strong>(RootAttrKey,PointingFeatAsAttrValue,oIndex);
   if (oIndex != 0)
   {
      rc = FeatFacadeOnParentFeat.<strong>RemovePosition</strong>(RootAttrKey,oIndex);...
   }else rc =E_FAIL</pre>
<p>The bold methods are the main ones:</p>
<ul>
	<li>First we retrieve the parent (Root StartUp) of the feature to delete.</li>
	<li>Then we locate the feature to delete among the <code>ListOfComponents</code> 
		attribute of the root.</li>
	<li>Finally we remove the feature from the list of features - <code>RootAttrKey</code> 
		- being its location value.</li>
</ul>
<p>The <code>RemovePosition</code> method deletes the aggregated feature, and modifies 
the parent feature. This method is explained in a Feature modeler article [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAAPstINFDelete use case has shown you how using the <em>CATIFmFeatureBehaviorCustomization</em> 
interface you can delete more features than the one by default.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data In Product Context</a></td>
	</tr>
	<tr>
		<td>[2]&nbsp;</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCustoDelete.htm">
		Understanding Delete Protocol Customization</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Defining StartUp Catalog</a>
		</td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaLinkingFeatures2.htm">
		Understanding Link Attribute - 2</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jun 2002]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2011]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
