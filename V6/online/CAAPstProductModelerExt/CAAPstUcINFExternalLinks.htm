<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Establishing External Links</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Establishing External Links</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article presents the CAAPstINFExternalLinks use case. It illustrates 
		how a link can be established between two different PLM Technological Representation. 
		This kind of link is <strong>external</strong> because it crosses a PLM Component 
		boundary.</p>
		<p>This use case is based on principles explained in Feature Modeler, you 
		can read the referenced articles [<a href="#References">1</a>][<a href="#References">2</a>] 
		to have an introduction to the link concepts. This UC is infact a part of 
		a larger UC &quot;Integrating Applicative Data in Product Context&quot; 
		[<a href="#References">3</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFExternalLinks Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFExternalLinks Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFExternalLinks</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFExternalLinks 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case will illustrate how a link can be established between a feature 
and either:</p>
<ul>
	<li>A different PLM Tech. Rep.</li>
	<li>Another feature located in a different PLM Tech. Rep.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFExternalLinks Use Case</h2>
<p>CAAPstINFExternalLinks is a use case of the CAAProductStructureExtend.edu 
framework that illustrates the ObjectModelerBase and FeatureModelerExt 
frameworks capabilities in the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFExternalLinks Do</h3>
<p>The goal of the CAAPstINFExternalLinks use case is to create an external link 
within a PLM hierarchy. An input model for this UC is the one depicted in the
<a href="#fig1">Fig.1</a> that follows.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table>
	<caption><a name="fig1"></a>Fig. 1: Input Model</caption>
	<tr>
		<td><img alt="Input Model" src="images/CAAPstINFExternalLinks_Fig1.jpg"/></td>
	</tr>
</table>
<p>The input model consists of a root reference <strong>CAAPstINFProductRef</strong>*. 
It aggregates An instance of the Techno Rep Ref <strong>Representation6329</strong>*, 
		under which exist the features as displayed in the <a href="#fig1">Fig.1</a> 
		above.</p>
<p>It is significant to note that the feature Line.1 and the <strong>Representation6329</strong> 
rep inst (as pointed by the arrow in yellow) serve as targets for the external link, 
we will create in the step that follows.</p>
<p>*This input model is the one created by importing the <strong>CAAPstINFProductRef.3dxml</strong>. 
Hence the PLM entities in the hierarchy have a string suffixed to it, a characteristic 
of the 3DXML import process. In the description of the model though, we ignore this 
suffix</p>
<p>The UC, to begin with loads this input model in session.</p>
<p>It then proceeds to retrieve the aggregated Techno Rep Inst, the target 
of the first external link. Next, it retrieves the Rep Ref associated with this 
Rep Inst.</p>
<p>Next, the Applicative Container associated with this Rep Ref is retrieved. Finally, 
the Line.1 feature inside this applicative container is retrieved, the target of 
the second external link.</p>
<p>The UC now proceeds to create an external link and outputs a model as depicted 
in the <a href="#fig2">Fig.2</a> that follows.</p>
<table>
	<caption><a name="fig2"></a>Fig. 2: Output Model</caption>
	<tr>
		<td><img alt="Output Model" src="images/CAAPstINFExternalLinks_Fig2.jpg"/></td>
	</tr>
</table>
<p>You'll find the feature <strong>External Line.1</strong> inside <strong>Product9543\Representation33924.1</strong> 
links to to <strong>Line.1</strong> under <strong>Product9543\CAAPstINFProductRef-ImportedAsNew9101.1\Representation6329.1</strong></p>
<p>On similar lines the <strong>External Instance.1</strong> feature links to the 
Rep Inst namely. <strong>Product9543\CAAPstINFProductRef-ImportedAsNew9101.1\Representation6329.1</strong>.</p>
<p>The length of the line that the external line feature points to is displayed 
there marked in red. Marked in yellow is the name of the Rep Inst under which the 
pointed Line feature exists.</p>
<p>The external links created thus span across PLM hierarchies. Hence the term &quot;<strong>external</strong>&quot; 
links.</p>
<p>The above links are not shown by CATIA. You can however view them by opening 
up the <strong>Edit Links &amp; Relations</strong> dialog box:</p>
<table>
	<caption><a name="fig3"></a>Fig. 3: Edit Links &amp; Relations Dialog Box</caption>
	<tr>
		<td><img alt="Edit Links &amp; Relations Dialog Box" src="images/CAAPstINFExternalLinks_Fig3.jpg"/></td>
	</tr>
</table>
<p>The upper part of the dialog shows the links at the PLM component level. The 
links originate from the <code>Representation33924</code> PLM Tech. Rep. and ends 
with:</p>
<ul>
	<li>The <code>Line.1</code> feature inside the container of the <code>Representation6329
		</code>PLM Tech. Rep. Reference.</li>
	<li>The <code>Representation6329</code> PLM Tech. Rep. Instance.</li>
</ul>
<p>The lower part of the dialog shows the links at the feature level. Both links 
originate from the <code>Root</code> feature which aggregate our pointing features 
(<code>External Line.1</code> and <code>External Instance.1</code>). Their targets 
are shown with the first PLM instances path and the PLM Tech. Rep. instance:</p>
<table class="fill">
	<tr>
		<th>First PLM Instances</th>
		<th>PLM Tech Rep. Instance</th>
		<th>Feature</th>
	</tr>
	<tr>
		<td><code>CAAPstINFProductRef-ImportedAsNew9101.1</code></td>
		<td><code>Representation6329.1</code></td>
		<td><code>Line.1</code></td>
	</tr>
	<tr>
		<td><code>CAAPstINFProductRef-ImportedAsNew9101.1</code></td>
		<td><code>Representation6329.1</code></td>
		<td>None</td>
	</tr>
</table>
<p>The green thumb up icon indicates that both links are synchronized.</p>
<p><strong>Note</strong>: The &quot;open&quot; icon (grayed on [<a href="#fig3">Fig.3</a>]) can 
be used when the PLM Component containing the target is not loaded. See the technical 
article [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFExternalLinks</h3>
<p>To launch CAAPstINFExternalLinks, you will need to set up the build time environment, 
then compile CAAPstINFExternalLinks along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">4</a>].</p>
<p>The use case that creates the new product structure with the two links is launched 
by executing the following command:</p>
<p><code>mkrun -c &quot;CAAPstINFCreateProduct2 Repository Server User Password SecurityCtx Environment 
InputProductRefID InputProductRefVersion InstTechRepName LineName&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project).
		Choose Role as Designer (since we are creating new PLM data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
	</tr>
	<tr>
		<th>InputProductRefID</th>
		<td>The PLM_ExternalID of the input PLM Product Reference as [<a href="#fig1">Fig. 
		1</a>] (*): use <code>CAAPstINFProductRef</code> + suffix added when imported</td>
	</tr>
	<tr>
		<th>InputProductRefVersion</th>
		<td>The V_version of the input PLM Product Reference (generally ---)</td>
	</tr>
	<tr>
		<th>InstTechRepName</th>
		<td>The name of the PLM Tech. Rep. instance that will be used as the 
		link target: use <code>Representation6329.1*</code></td>
	</tr>
	<tr>
		<th>LineName</th>
		<td>The name of the <code>CAAPstINFLine</code> feature that will be used 
		as the link target: use <code>Line.1</code></td>
	</tr>
</table>
<p>(*) This use case takes as input a PLM Product Reference which can be created 
by running the &quot;Creating Features in a Technological Representation&quot; use 
case [<a href="#References">5</a>] or simply by importing 
the <code>InstallRootDirectory/CAADoc/CAAProductStructureExtend.edu/InputData/CAAPstINFProductRef.3dxml</code> 
3D XML document.</p>
<p>For you information, if you import the 3D XML document <code>InstallRootDirectory/CAADoc/CAAProductStructureExtend.edu/InputData/CAAPstINFProduct2Ref.3dxml</code> 
you immediately have the result as <a href="#fig2">Fig.2</a>.</p>
<p>Be careful, when you are loading in session the model don't forget to load them 
will all their representations.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFExternalLinks Code</h3>
<p>The CAAPstINFExternalLinks use case is made of two modules located in the CAAProductStructureExtend.edu 
framework:</p>
<ul>
	<li>CAAPstINFCreateProduct2.m (<code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFCreateProduct2.m</code>) 
		is in charge of creating the output Product Structure.</li>
	<li>CAAPstINFModeler.m (<code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m</code>) 
		is in charge of implementing the external features.</li>
</ul>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAAPstINFExternalLinks:</p>
<ol>
	<li><a href="#Step1">Defining the Link Attribute</a></li>
	<li><a href="#Step2">Creating the Link Intention</a></li>
	<li><a href="#Step3">Establishing the Link</a></li>
	<li><a href="#Step4">Retrieving the Link</a></li>
	<li><a href="#Step5">Removing the Link</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Defining the link attribute</h3>
<p>The attributes containing the link in the <code>CAAPstINFExternalLine</code>
and <code>CAAPstINFExternalInstance</code> are defined as <code>external</code>. 
This is necessary as both link targets are located in a different PLM Tech. Rep.. 
The txt file used to define the OSM file, and then the Catalog features defining 
the two feature startup can be found in <code>installRootFolder\CAADoc\CAAProductStructureExtend.edu\InputData\CAAPstINFCatalog2.txt</code>:</p>
<pre class="code">document `CAAPstINFCatalog2.CATfct` { 
    container RootCont #root { 
        feature <strong>CAAPstINFExternalLine</strong> #startup { 
            <strong>external</strong> <strong>Line</strong> #in #external_link_meta_data(LineLink) 
            string Length #out 
        } 
        feature <strong>CAAPstINFExternalInstance</strong> #startup {
            <strong>external</strong> <strong>PLMRepInst</strong> #external_link_meta_data(InstLink) 
        } 
    }</pre>
<p>The <code>Line</code> attribute will contain the link to a <code>CAAPstINFLine
</code>feature and the <code>PLMRepInst</code> attribute to a PLM Tech. Rep. instance. 
The <code>#in</code>, <code>#out</code> and <code>#external_link_meta_data</code> 
facets, along with the <code>Length</code> attribute.</p>
<p>As both these links cross the PLM component boundary, they get exposed in the 
PLM world. Because of this exposition, the links must have associated metadata thanks 
to the <code>#external_link_meta_data</code> facet so that the PLM kernel knows 
how to handle it.</p>
<p>More information on the OSM language can be found in the &quot;Modeling Feature 
StartUps&quot; article [<a href="#References">6</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Link Intention</h3>
<p>Before establishing a contextual link, we need to create a link intention 
that will contain all the information regarding our link: the target and its context. 
This is done by calling the <code>CreateObjectInContext</code> method of the
<code>CATOmbObjectInContext</code> class.</p>
<pre class="code">
...
HRESULT <strong>CAAEPstINFExternalLine::SetLine</strong>(CAAIPstINFLine *iLine,
                                        CATIPLMComponent *iRepInst, 
		                      CATLISTP(CATIPLMComponent) *iFirstInstPath)
{
   ...
   <strong>CATOmbObjectInContext</strong>_var hObjectInContext;
   rc = <strong>CATOmbObjectInContext::CreateObjectInContext</strong>
                  (*iFirstInstPath,iRepInst,(CATBaseUnknown*)iLine,hObjectInContext);
...
</pre>
<p>This method takes three inputs:</p>
<ol>
	<li>The path of first instances up to the PLM Tech. Rep.</li>
	<li>The instance of the PLM Tech. Rep. holding the link target (or more precisely, 
		the container of the link target).</li>
	<li>The target itself.</li>
</ol>
<p>and returns the link intention as a smart pointer to the <code>CATOmbObjectInContext
</code>class.</p>
<p>For the <code>SetPLMRepInst</code>method of the <em>CAAIPstINFExternalInstance</em>
interface it is similar except the target which is NULL.</p>
<pre class="code">...
HRESULT <strong>CAAEPstINFExternalInstance::SetPLMRepInst</strong>(CATIPLMComponent *iRepInst,
					    CATLISTP(CATIPLMComponent) *iFirstInstPath)
{
  ...
  <strong>CATOmbObjectInContext_var</strong> hObjectInContext;
  rc = <strong>CATOmbObjectInContext::CreateObjectInContext</strong>(*iFirstInstPath,iRepInst,NULL,hObjectInContext); 
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Establishing the Link</h3>
<p>The link can now be established using the link intention and the <code>SetValue
</code>method the <em>CATFmFeatureFacade</em> interface. The code is 
explained for the <em>CAAEPstINFExternalLine</em>, because this part is similar 
for <em>CAAEPstINFExternalInstance</em>.</p>
<pre class="code">HRESULT CAAEPstINFExternalLine::<strong>SetLine</strong>(CAAIPstINFLine *iLine,
                                        CATLISTP(CATIPLMComponent) *iLineInstPath)
{
    ...
    CATFmCredentials * MyCredential = NULL ;
    rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential); 				
...</pre>
<p>First we retrieve the credential enabling us to work with the CAAPstINFExternalLine 
and CAAPstINFExternalInstance Startups. The local method, <em>CAAPstINFRetrieveCredentialsModeler</em> 
is described in another use case article [<a href="#References">7</a>].</p>
<p>Then with credential and Object in Context, we can valuate the attribute.</p>
<pre class="code">...
    <strong>CATFmAttributeName</strong> LineAttrKey("<strong>Line</strong>");
    <strong>CATFmAttributeValue</strong> oLineAttrValue;
    oLineAttrValue.<strong>SetExternalObject</strong>(hObjectInContext);
...</pre>
<p>We use the method <code>SetExternalObject</code> to valuate a <em>CATFmAttributeValue</em> 
class. It is the same for both the CAAPstINFExternalLine and CAAPstINFExternalInstance 
features. Only the attribute name should be changed for the latter: &quot;PLMRepInst&quot; 
instead of &quot;Line&quot;.</p>
<p>Then we can valuate the feature, handled through a facade:</p>
<pre class="code">...
    <strong>CATFmFeatureFacade</strong> FeatFacadeOnExtLine(*MyCredential,this);
    rc = FeatFacadeOnExtLine.<strong>SetValue</strong>(LineAttrKey,oLineAttrValue);	
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Link</h3>
<p>It is almost the same for the two features. Lets us start with a common part.</p>
<pre class="code">HRESULT <strong>CAAEPstINFExternalLine::GetLine</strong>(CAAIPstINFLine **oLine)
{
 ...
    CATFmCredentials * MyCredential = NULL ;
    rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential);
</pre>
<p>First we retrieve the credential enabling us to work with the <code>CAAPstINFExternalLine</code> 
and <code>CAAPstINFExternalInstance</code>Startups. The local method, <em>CAAPstINFRetrieveCredentialsModeler</em> 
is described in another use case article [<a href="#References">7</a>]. 
This credential will be used to create a facade on the feature <code>CAAPstINFExternalLine</code> 
or <code>CAAPstINFExternalInstance</code> as described just below.</p>
<pre class="code">...
   CATFmFeatureFacade FeatFacadeOnExtLine(*MyCredential,this);
   CATFmAttributeName LineAttrKey("Line");
   <strong>CATFmAttributeValue</strong> oLineAttrValue;
   FeatFacadeOnExtLine.<strong>GetValue</strong>(LineAttrKey,oLineAttrValue);
...</pre>
<p>Then we retrieve the attribute value associated with the current feature. For
<code>CAAPstINFExternalLine</code> , the attribute name is &quot;Line&quot;, for
<code>CAAPstINFExternalInstance</code>, &quot;Line&quot; is replaced by "PLMRepInst". 
The value, <code>oLineAttrValue</code> for the <code>CAAPstINFExternalLine</code>,
is contained in the <em>CATFmAttributeValue</em> class instance retrieved by the
<code>GetValue</code> of the feature facade.</p>
<p>The next part is the same for the two features:</p>
<pre class="code"> ...
 CATOmbObjectInContext_var hExtObj;
 rc = oLineAttrValue.<strong>GetExternalObject</strong>(hExtObj);
...</pre>
<p>Decoding the Object In Context, the <em>CATOmbObjectInContext</em> class instance
<code>hExtObj</code> is depending on the link's type.</p>
<pre class="code"> ...
 CATBaseUnknown * pLineAsCBU = NULL ;
 rc = hExtObj-&gt;<strong>GetObjectOutOfContext</strong>(pLineAsCBU,IID_CAAIPstINFLine); 
 ...</pre>
<p>For <code>CAAPstINFExternalLine</code> , the line is the Object &quot;out of 
context&quot;. So we use <code>GetObjectOutOfContext</code> of 
the <em>CATOmbObjectInContext</em> class.</p>
<pre class="code"> ...
 CATIPLMComponent* poPLMCompOnRepInst = NULL;
 rc = hExtObj-&gt;<strong>GetInstanceOfRepresentation</strong>(poPLMCompOnRepInst);  }
 ...</pre>
<p>For <code>CAAPstINFExternalInstance</code>, the Rep instance is retrieved by
<code>GetInstanceOfRepresentation</code> of the same <em>CATOmbObjectInContext</em> 
class.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Removing the Link</h3>
<p>A link is removed by simply setting NULL to the attribute value.</p>
<pre class="code">HRESULT CAAEPstINFExternalLine::ClearLine()
{	
   ...
   CATFmCredentials * MyCredential = NULL ;
   rc = ::<strong>CAAPstINFRetrieveCredentialsModeler</strong>(MyCredential);
   ...</pre>
<p>Handling the feature requires a credential as seen previously.</p>
<pre class="code">...
   CATFmFeatureFacade FeatFacadeOnExtLine(*MyCredential,this);
	
   CATFmAttributeName LineAttrKey("<strong>Line</strong>");
   CATFmAttributeValue oLineAttrValue;
   oLineAttrValue.<strong>SetExternalObject(NULL);</strong>
   rc = FeatFacadeOnExtLine.<strong>SetValue</strong>(LineAttrKey,oLineAttrValue);	
...</pre>
<p>This last section is similar for <code>CAAPstINFExternalLine</code> and <code>CAAPstINFExternalInstance</code>,
just the name of attribute changes. &quot;Line&quot; 
is replaced by &quot;PLMRepInst&quot;.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In this use case, we have seen how a link that crosses a PLM component can be 
established or removed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaLinkingFeatures.htm">
		Understanding Link Attribute -1</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaLinkingFeatures2.htm">
		Understanding Link Attribute -2</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Integrating Applicative Data In 
		Product Context</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFCreateDocument.htm">Creating Data in PLM Technological 
		Representation</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAOsmTaModelingStartUps.htm">
		Modeling Feature StartUps</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Defining StartUp Catalogs</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2007]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2011]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
