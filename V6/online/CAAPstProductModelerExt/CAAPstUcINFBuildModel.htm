<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Update Startup Behavior</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Update Startup Behavior</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>When a feature is modified it is rendered outdated and if this feature 
		serves as a specification for other features, thanks to their IN attribute 
		valuations, those features are also rendered outdated [<a href="#References">1</a>]. 
		This article describes how you can update the complete data model, and what 
		are the elementary actions to do when each feature is updated.</p>
		<p>This article is one among a set of articles which together discuss the &quot;Integrating 
		Applicative Data in Product Context&quot; use case [<a href="#References">2</a>].
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFBuild Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFBuild Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFBuild</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFBuild Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you the update process.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFBuild Use Case</h2>
<p>CAAPstINFBuild is a use case of the CAAProductStructureExtend.edu framework that 
mainly illustrates FeatureModelerExt frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFBuild Do</h3>
<p>This use case explains the implementation of the Build method of <em>CATIFmFeatureBehaviorCustomization</em>, 
and a method to update all the features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFBuild</h3>
<p>See the section entitled &quot;How to Launch the CAAPstINFIntegrateNewFeatures 
Use Case&quot; in the &quot;Integrating Applicative Data in Product Context&quot; 
[<a href="#References">2</a>] use case for a detailed description of how this use 
case should be launched.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFBuild Code</h3>
<p>The CAAPstINFBuild use case is made of several files</p>
<ul>
	<li>CAAPstUpdateContainerFromContext.cpp for the global update. This function 
		is called by the <em>CAAPstINFBuild</em> dialog box [<a href="#References">3</a>].</li>
	<li>CAAEPstINFWireBehavior.cpp for the <em>CATIFmFeatureBehaviorCustomization
		</em>implementation on the Wire StartUp.</li>
	<li>CAAEPstINFLineBehavior.cpp for the <em>CATIFmFeatureBehaviorCustomization
		</em>implementation on the Line StartUp.</li>
</ul>
<p>All those files are located in the <code>CAAPstINFModeler.m</code> module of 
the CAAProductStructureExtend.edu framework: <code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModeler.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three steps in this use case:</p>
<ul>
	<li><a href="#Step1">Building for Point and Root</a></li>
	<li><a href="#Step2">Building for Line and Wire</a></li>
	<li><a href="#Step3">Global Update</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Building for Point and Root</h3>
<p>There is no model update to do.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Building for Line and Wire</h3>
<p>Here an extract for CAAEPstINFWireBehavior, but the code is exacly the same for 
CAAEPstINFLineBehavior:</p>
<pre class="code">HRESULT <strong>CAAEPstINFWireBehavior::Build</strong>()
{
    CATIModelEvents * pModelEvents = NULL;                
    HRESULT rc = <strong>QueryInterface</strong>(<strong>IID_CATIModelEvents</strong>,  (void**)&amp;<strong>pModelEvents</strong>);
		                 
    if (SUCCEEDED(rc))
    {
       CATModify Notif (pModelEvents); 
       <strong>pModelEvents</strong>-&gt;<strong>Dispatch</strong>(<strong>Notif</strong>);

       pModelEvents-&gt; Release();
       pModelEvents = NULL;
    }
    return rc ;
}</pre>
<p>There is no 'model' update. We just trigger a visualization update.</p>
<p>The <code>Build</code> method is part of the implementation of <em>CATIFmFeatureBehaviorCustomization
</em>for the Line and the Wire. Don't forget to update the interface dictionary.</p>
<pre class="code">...
CAAPstINFLine               CATIFmFeatureBehaviorCustomization             libCAAPstINFModeler                                  
...</pre>
<p>Extract of the CAAProductStructureExtend.edu.dico file, that you find in
<code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CNext\code\dictionary</code> 
where <code>InstallRootFolder</code> [1] is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Global Update</h3>
<p>When a feature is modified ( Model point of view), all the features pointing 
to it, thanks to their IN attribute valuations, are set Outdated, or in other words, &quot;not&quot; 
up to date. To update them, from the Model and View point of view we have the
<strong>CAAPstUpdateContainerFromContext</strong> function. This function is called 
when an existing Point is modified.</p>
<p>This method consists in to update all features in the <code>CAAPstINFContainer</code> 
container.</p>
<pre class="code">...
HRESULT <strong>CAAPstUpdateContainerFromContext</strong>(CATBaseUnknown* ipContext) 
{
   ...
}				                                  
...</pre>
<p><code>ipContext</code> can be any elements (features/container ) of the PLM Technological 
Representation:</p>
<pre class="code">...
CATIPLMComponent_var spiPLMComponent ;
rc = <strong>CATPLMComponentInterfacesServices::GetPLMComponentOf</strong>(ipContext, spiPLMComponent);
...</pre>
<p>Indeed, thanks <code>GetPLMComponentOf</code> of <em>CATPLMComponentInterfacesServices</em> 
(CATPLMComponentInterfaces framework), you can retrieve the PLM Component 
(<code>spiPLMComponent</code>) aggregating the stream containing <code>ipContext</code>.</p>
<p>We know that it is a PLM Representation Reference, so we retrieve a <em>CATIPLMNavRepReference</em> 
interface pointer on <code>spiPLMComponent.</code></p>
<pre class="code">...
CATIPLMNavRepReference *pRepRefOfContext = NULL;
rc = <strong>spiPLMComponent-&gt;QueryInterface</strong>(<strong>IID_CATIPLMNavRepReference</strong>,(void **) &amp;<strong>pRepRefOfContext</strong>);...</pre>
<p>Just after we retrieve the container whose the name is <code>CAAPstINFContainer</code>.</p>
<pre class="code">...
<strong>CAAIPstINFFactory</strong> * pContainer = NULL ;
if (  NULL!=pRepRefOfContext )
{
rc = pRepRefOfContext-&gt;<strong>RetrieveApplicativeContainer</strong>(&quot;<strong>CAAPstINFContainer</strong>&quot;,
					IID_CAAIPstINFFactory,
					(void**)&amp;pContainer);
...</pre>
<p>The container is retrieved through a <em>CAAIPstINFFactory</em> interface pointer.</p>
<pre class="code">...
CATListValCATBaseUnknown_var ListAllElement ; 
...
CATListPtrCATBaseUnknown ListRoot ;
<strong>pContainer-&gt;GetRootElements</strong>(IID_CAAIPstINFRoot,<strong>ListRoot</strong>);

while ( i&lt;=ListRoot.Size())
{
    <strong>CAAIPstINFRoot *pCurrentRoot = (CAAIPstINFRoot*) ListRoot[i]</strong> ;
    if ( NULL != pCurrentRoot )
    {
         <strong>pCurrentRoot-&gt;GetChildren(ListAllElement)</strong>; // method appends without emptied
         ...
    
    i++ ;
}
...</pre>
<p>The call to GetRootElements() of the <em>CAAIPstINFFactory</em> Interface on 
the Container retrieves the Root features inside the container. Each root feature 
is retrieved as a <em>CAAIPstINFRoot</em> Interface.</p>
<p>The call to GetChildren() of the <em>CAAIPstINFFACTORY</em> Interface on the 
Root feature, retrieves the child features aggregated under the Root feature. All 
these child features under each root feature are appended to a list.</p>
<p>We next call an Update on all these child features.</p>
<pre class="code">...
while ( SUCCEEDED(rc) &amp;&amp; ( j&lt;=ListAllElement.Size() ) )
{
   CATIUseEntity *  pCurrentEltEntity = NULL ;
   <strong>ListAllElement[j]-&gt;QueryInterface</strong>(<strong>IID_CATIUseEntity</strong>, (void**)&amp; <strong>pCurrentEltEntity</strong>) ;
   if ( pCurrentEltEntity != NULL ) 
   {
          rc = <strong>DataCommonProtocolServices::Update</strong>(<strong>pCurrentEltEntity</strong>);
          pCurrentEltEntity -&gt;Release(); pCurrentEltEntity = NULL;
   }
   j++ ;
}
...</pre>
<p>Each child feature is updated with a call to the Data common protocol API [<a href="#References">2</a>]. 
The update of the root triggers the update of its &quot;not up to date&quot; aggregating 
features. So the Build method of the <em>CATIFmFeatureBehaviorCustomization</em> 
is invoked for each of them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has presented a case of <em>CATIFmFeatureBehaviorCustomization</em> 
implementation for its <code>Build</code> method.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaUpdateOverview.htm">
		Update Mechanism Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data in Product Context</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFMVCUpdate.htm">Managing View Refresh</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
