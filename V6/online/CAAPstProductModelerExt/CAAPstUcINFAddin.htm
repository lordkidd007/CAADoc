<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>VPM Editor Add-in Creation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>VPM Editor Add-in Creation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAAPstINFAddIn UC. It gives 
		a first glance of the provided commands to handle our application, and to 
		understand how these commands are integrated as add-ins inside the Product 
		Workshop of the VPM Editor. It is part of a bigger UC &quot;Integrating 
		Applicative Data in Product context&quot; [<a href="#References">1</a>]</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFAddIn Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFAddIn Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFAddIn</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFAddIn Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case will teach you how to create an add-in in the Product Structure workshop inside the VPM Editor</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstInfAddIn Use Case</h2>
<p>The CAAPstINFAddIn/ is a use case that is part of the 
CAAPstINFIntegrateNewFeatures use case defined in the CAAProductStructureExtend.edu 
framework that illustrates the integration of FeatureModelerExt 
capabilities in the scope of a Product structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstInfAddIn Do</h3>
<p>This CAAPstInfAddIn UC integrates an AddIn to the VPM Editor. 
The AddIn is a toolbar &quot;CAA Product Structure INF_Use cases&quot; 
which is now listed with the existing toolbars as depicted in the Fig. that follows.</p>
<table>
	<caption>Fig. 1: Add-In Toolbar</caption>
	<tr>
		<td><img alt="Add-In Toolbar" src="images/CAAPstInfAddIn_Fig1.gif"/></td>
	</tr>
</table>
<p>The toolbar is infact integrated in the Product Workshop inside V6, and thus 
is seen as a part of the V6 VPM editor, as depicted in the Fig. that follows. The 
VPM editor is activated either when a Product Reference is loaded in session or 
is newly created. In the Fig. that follows, we load an existing Product Reference 
in session.</p>
<table>
	<caption>Fig.2: Add-In as Seen inside the VPM Editor</caption>
	<tr>
		<td><img alt="Add-In as Seen inside the VPM Editor" src="images/CAAPstInfAddIn_Fig2.jpg"/></td>
	</tr>
</table>
<p>The toolbar consists of the commands listed below:</p>
<ul>
	<li><strong>Create a TechnoRep with CAAPstINFxxx</strong> which creates and 
		instantiates a Techno Rep Ref under the Root Product Reference [<a href="#References">2</a>].</li>
	<li><strong>Display the contents of CAAPstINFCont</strong> which lists the contents 
		inside an Applicative Container of type &quot;CAAPstINFCont&quot;.</li>
	<li><strong>Create Line Extension</strong> which creates a RelimitedLine, an 
		extension of the base Line feature (<strong>Note</strong>: This command 
		to add a feature extension will normally occur as a different AddIn, since 
		base feature and the feature extensions with their AddIns are handled by 
		distinct users [<a href="#References">3</a>].</li>
	<li><strong>Create a Root</strong> which creates a Root feature, that under 
		which other features are aggregated [<a href="#References">4</a>].</li>
	<li><strong>Create a Point</strong> which creates a Point feature [<a href="#References">4</a>].</li>
	<li><strong>Create a Line</strong> which creates a Line feature [<a href="#References">4</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstUCInfAddIn</h3>
<p>We just emphasize the steps relevant to the current UC here.</p>
<p>To begin with a catalog (<strong>CAAPstINFCatalog.CATfct</strong> file) is generated 
as detailed in the &quot;<strong>Defining Feature Catalog</strong>&quot; UC [<a href="#References">5</a>]. 
This Catalog defines the feature StartUps, referenced in the current UC. On executing
<strong>mkrtv</strong> the catalog gets copied to the <strong>RTV</strong> (<strong>OS\code\dictionary</strong> 
folder) of the <strong>WS</strong>, and thus the StartUps defined in the catalog 
can be referenced by the executables launched from our WS.</p>
<p>Next we uncomment the following lines in the <strong>CAAProductStructureExtend.dico</strong> 
file. Integrating an <strong>AddIn</strong> to the <strong>VPM Editor</strong> calls 
for providing an implementation of the <em>CATIWorkbenchAddin</em> and <em>CATIPRDWorkshopAddin</em> 
Interfaces.</p>
<pre class="code">#CAA#CAAPstINFWksAddin     CATIWorkbenchAddin          libCAAPstINFAddin
#CAA#CAAPstINFWksAddin     CATIPRDWorkshopAddin        libCAAPstINFAddin</pre>
<p>Subsequently, we run <strong>mkrtv</strong> which copies the <strong>dico</strong> 
file in the <strong>RTV</strong> (<strong>OS\code\dictionary</strong> folder) of 
the <strong>WS</strong>.</p>
<p>The remaining steps of the launch are detailed in the How to Launch section of 
the &quot;<strong>Integrating Applicative Data in Product Context</strong>&quot; 
[<a href="#References">1</a>] use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstUCInfAddIn Code</h3>
<p>This use case code comprises of a single source, which is the most relevant.</p>
<ul>
	<li>CAAPstINFWksAdn.cpp, which contains the <em>CAAPstINFWksAdn</em> 
		component, the <em>CATIPrdWorkshopAddin</em> implementation in the module
		<p><code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFAddin.m</code></p>
	</li>
	<li>CAAPstINFWksAdn.CATNls, to provide NLS support for the 
		Toolbar name.</li>
	<li>CAAPstINFWksAddinHeader.CATNls, to provide NLS support 
		for the commands (title, help text etc.).</li>
	<li>CAAPstINFWksAddinHeader.CATRsc, to provide the icons to 
		display for each command.</li>
</ul>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The logical steps in CAAPstInfAddIn are:</p>
<ol>
	<li><a href="#Step1">Interface Implementations for Integrating 
		Add-Ins</a></li>
	<li><a href="#Step2">Creating the Command Headers for each 
		Command</a></li>
	<li><a href="#Step3">Creating a Toolbar and Adding Commands</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Interface Implementations for Integrating Add-Ins</h3>
<p>To integrate an AddIn to the Product Workshop in V6, calls for providing the
<em>CATIPRDWorkshopAddin</em> implementation. The implementation is declared the 
standard way, as depicted below.</p>
<pre class="code">// To create the TIE Object
#include &lt;TIE_CATIPRDWorkshopAddin.h&gt;
<strong>TIE_CATIPRDWorkshopAddin(CAAPstINFWksAdn)</strong>;

// To declare that the class is a DataExtension of (late type) CAAPstINFWksAddin
<strong>CATImplementClass</strong>(<strong>CAAPstINFWksAdn</strong>, DataExtension,CATBaseUnknown, <strong>CAAPstINFWksAddin</strong>);</pre>
<p>The <code>TIE_CATIPRDWorkshopAddin</code> and the <code>CATImplementClass</code> 
macros in conjuction declare CAAPstINFWksAddin as a <em>CATIPRDWorkshopAddin</em> 
Interface implementation, more precisely a data extension.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Command Headers for each Command</h3>
<p>Each command has a command header corresponding to it, which contains the information 
to load the command such as the name of the shared library, the command class and 
the data that is passed to the command. The current step involves creation of these 
command headers for individual commands. This is realized in the <code>CreateCommands</code>() 
implementation of the <em>CATIPrdWorkshopAddin</em> Interface, that follows.</p>
<pre class="code">void <strong>CAAPstINFWksAdn::CreateCommands</strong>()
{
  // modeler Commands
  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstCreateINFProductHdr</strong>",    
                   "CAAPstINFModelerCmd",  
                   "<strong>CAAPstCreateINFProductCmd</strong>",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                   CATFrmAvailable); 

  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstDisplayInfoCAAPstINFContHdr</strong>",    
                   "CAAPstINFModelerCmd",  
                   "<strong>CAAPstDisplayInfoCAAPstINFContCmd</strong>",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                   CATFrmAvailable); 
                   
  // Line Extension Commands
  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstCreateLineExtensionHdr</strong>",   // Hdr  
                   "CAAPstINFLineExtensionCmd",        // name of the module exporting the command 
                   "<strong>CAAPstCreateLineExtensionCmd</strong>",    // name of command class 
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",       
                   CATFrmAvailable);

  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstCreateINFRootHdr</strong>",    
                   "CAAPstINFModelerCmd",  
                   "<strong>CAAPstCreateINFRootCmd</strong>",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                   CATFrmAvailable); 

  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstCreateINFPointHdr</strong>",    
                   "CAAPstINFModelerCmd",  
                   "CAAPstCreateINFPointCmd",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                   CATFrmAvailable); 

  <strong>CATAfrCommandHeader::CATCreateCommandHeader</strong>
                   ("<strong>CAAPstCreateINFLineHdr</strong>",    
                   "CAAPstINFModelerCmd",  
                   "<strong>CAAPstCreateINFLineCmd</strong>",  
                   (void  *)NULL,
                   "CAAPstINFWksAddinHeader",
                   CATFrmAvailable); 
   ...
}</pre>
<p>The <code>CATCreateCommandHeader</code> static routine of the <em>CATAftCommandHeader</em> 
class instantiates the Command Header. Its inputs are:</p>
<ul>
	<li><strong>CAAPstCreateINFLineHdr</strong>, a string which identifies the Command 
		header.</li>
	<li><strong>CAAPstINFModelerCmd</strong>, a string which identifies the shared 
		library which contains the command implementation.</li>
	<li><strong>CAAPstCreateINFLineCmd</strong>, a string which identifies the CATCommand 
		class of our command.</li>
	<li><strong>NULL</strong>, a void* type, reprsenting the input for our CATCommand 
		class.</li>
	<li><strong>CAAPstINFWksAddinHeader</strong>, a string which identifies our 
		Command Resource file.</li>
	<li><strong>CATFrmAvailable</strong>, a <em>CATFrmState</em> type, which represents 
		the command availability.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Toolbar and Adding Commands</h3>
<p>Next, we create a toolbar and insert the commands in it. This is realized by 
the <code>CreateToolbars</code> implementation of the <em>CATIPrdWorkshopAddin</em> 
Interface, which follows.</p>
<pre class="code">CATCmdContainer *<strong>CAAPstINFWksAdn::CreateToolbars</strong>()
{
  
  // CAA Product Structure INF Use cases Toolbar
  <strong>NewAccess</strong>(CATCmdContainer, pCAAPstINFWksTlb, CAAPstINFWksTlb);
  
  // commands
  <strong>NewAccess</strong>(CATCmdStarter, <strong>pCAAPstCreateINFProductStr</strong>, CAAPstCreateINFProductStr);
  <strong>SetAccessCommand</strong>(pCAAPstCreateINFProductStr, "<strong>CAAPstCreateINFProductHdr</strong>");
  <strong>SetAccessChild</strong>(pCAAPstINFWksTlb, <strong>pCAAPstCreateINFProductStr</strong>);
  
  NewAccess(CATCmdStarter, <strong>pCAAPstDisplayInfoCAAPstINFContStr</strong>, CAAPstDisplayInfoCAAPstINFContStr);
  SetAccessCommand(pCAAPstDisplayInfoCAAPstINFContStr, "<strong>CAAPstDisplayInfoCAAPstINFContHdr</strong>");
  <strong>SetAccessNext</strong>(pCAAPstCreateINFProductStr, <strong>pCAAPstDisplayInfoCAAPstINFContStr</strong>);

  NewAccess(CATCmdStarter, <strong>pCAAPstCreateLineExtensionStr</strong>, CAAPstCreateLineExtensionStr);
  SetAccessCommand(pCAAPstCreateLineExtensionStr, "<strong>CAAPstCreateLineExtensionHdr</strong>");
  <strong>SetAccessNext</strong>(pCAAPstDisplayInfoCAAPstINFContStr, <strong>pCAAPstCreateLineExtensionStr</strong>);

  NewAccess(CATCmdStarter, <strong>pCAAPstCreateINFRootStr</strong>, CAAPstCreateINFRootStr);
  SetAccessCommand(pCAAPstCreateINFRootStr, "<strong>CAAPstCreateINFRootHdr</strong>");
  <strong>SetAccessNext</strong>(pCAAPstCreateLineExtensionStr, <strong>pCAAPstCreateINFRootStr</strong>);

  NewAccess(CATCmdStarter, <strong>pCAAPstCreateINFPointStr</strong>, CAAPstCreateINFPointStr);
  SetAccessCommand(pCAAPstCreateINFPointStr, "<strong>CAAPstCreateINFPointHdr</strong>");
  <strong>SetAccessNext</strong>(pCAAPstCreateINFRootStr, <strong>pCAAPstCreateINFPointStr</strong>);

  NewAccess(CATCmdStarter, <strong>pCAAPstCreateINFLineStr</strong>, CAAPstCreateINFLineStr);
  SetAccessCommand(pCAAPstCreateINFLineStr, "<strong>CAAPstCreateINFLineHdr</strong>");
  <strong>SetAccessNext</strong>(pCAAPstCreateINFPointStr, <strong>pCAAPstCreateINFLineStr</strong>);

  AddToolbarView(pCAAPstINFWksTlb, -1, Right);

  return pCAAPstINFWksTlb;  // the first toolbar to return 
}</pre>
<p>This implementation relies primarily on predefined macros, namely:</p>
<ul>
	<li><strong>NewAccess</strong>, which instantiates a command starter.</li>
	<li><strong>SetAccessCommand</strong>, which associates the command starter 
		with a command header.</li>
	<li><strong>SetAccessChild</strong>, which integrates the command header, the 
		first of its kind, inside a toolbar.</li>
	<li><strong>SetAccessNext</strong>, which integrates the remaining command headers 
		in succession, inside the same toolbar.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <strong>CAAPstINFAddIn</strong> Use Case fundamentally illustrates the steps 
involved to integrate an AddIn in the VPM Editor, to illustrate the Product Structure 
Extend capabilities, which primarily involves working with CAA features and feature 
extensions.</p>
<p>This involves generating a catalog file which defines the features, in the RTV 
of the WS. It also involves modifying the framework dico and copying it in the WS 
RTV. Finally, on V6 launch the AddIn is seen integrated in the VPM editor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data in Product context</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFCreateInteractively.htm">Creating 
		Interactively a Data Model</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFExtensionLifeCycle.htm">Managing Feature Extension 
		Lifecycle</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcINFCreateDocument.htm">Creating Data in a PLM Technological 
		Rep Ref</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
