<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing View Refresh</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing View Refresh</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>When a feature is interactively created, modified or deleted the code 
		must manage the View refresh. The View includes the Viewer and Specification 
		tree. This article describes through one feature, the Point, how the UC &quot;Integrating 
		Applicative Data in Product Context&quot; [<a href="#References">1</a>] 
		manages the M (model) V (view) C (controller) paradigm.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFEditDlgPoint Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFEditDlgPoint Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFEditDlgPoint</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFEditDlgPoint 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you that:</p>
<ul>
	<li>At the time of creation of features, provisions for a 3D View refresh on 
		feature creation and modification is required.</li>
	<li>At the time of creation of features, an immediate 3D View and specification 
		tree refresh is invoked.</li>
	<li>At the time of creation of features, no specific provisions for a specification 
		tree update is required. That update happens on the run by simply sending 
		specific events.</li>
	<li>On modification or deletion of a feature, it involves both the specification 
		tree and 3D View refresh, not only of the feature but also on other features 
		which depend on it.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFEditDlgPoint Use Case</h2>
<p>CAAPstINFEditDlgPoint is a use case that is part of the CAAPstINFIntegrateNewFeatures 
use case defined in the CAAProductStructureExtend.edu framework that illustrates 
the integration of Visualization frameworks capabilities in the scope of a Product 
structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFEditDlgPoint Do</h3>
<p>This use case explains what must be executed when a Point, (<code>CAAPstINFPoint</code>) 
[<a href="#References">2</a>] ,is created, modified and deleted in order to succeed 
the View refresh. Lets us present what we expect:</p>
<ul>
	<li><strong>Creation</strong>
		<p>When a Point is created it must be drawn in 3D, and the specification 
		tree must be updated to visualize it below its root.</p>
	</li>
	<li><strong>Modification</strong>
		<p>When the point's coordinates change you have to update the Point's 3D 
		representation, as for of all Wires and Lines pointing it. The specification 
		tree does not require change.</p>
	</li>
	<li><strong>Deletion</strong>
		<p>When a Point is deleted the 3D View must be updated, and the specification 
		tree also. We must take into account that the Point deletion can imply a 
		deletion of wire and lines [<a href="#References">3</a>]</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFEditDlgPoint</h3>
<p>See the section entitled &quot;How to Launch the CAAPstINFIntegrateNewFeatures 
Use Case&quot; in the &quot;Integrating Applicative Data in Product Context&quot; 
[<a href="#References">2</a>] use case for a detailed description of how this use 
case should be launched.</p>
<p>Specifically, the code described in this article is executed upon loading the 
PLM Product Reference into the V6 session. (You can use CAAPstINFProductRef.3dxml 
file in the InputData directory of the CAAProductStructureExtend.edu framework).
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFEditDlgPoint Code</h3>
<p>The CAAPstINFEditDlgPoint use case is mainly made of one single file CAAPstINFEditDlgPoint.cpp 
(a dialog box), located in the CAAPstINFModelerCmd.m module of the 
CAAProductStructureExtend.edu framework: <code>InstallRootFolder\CAADoc\CAAProductStructureExtend.edu\CAAPstINFModelerCmd.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This CAAPstINFEditDlgPoint class is used by the command to create a Point (<em>CAAPstCreateINFPointCmd</em> 
class), or to edit it (<em>CAAPstINFEditCmdPoint</em> class). These two classes 
are part of the same module, <code>CAAPstINFModelerCmd</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAPstINFEditDlgPoint:</p>
<ol>
	<li><a href="#Creation">Creation</a></li>
	<li><a href="#Modification">Modification</a></li>
	<li><a href="#Deletion">Deletion</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creation"></a>Creation</h3>
<p>This step is an extract of the <code>SetRootForPointCreation</code> method of
<em>CAAPstINFEditDlgPoint</em> class. This method is called when the Point command 
is triggered.</p>
<pre class="code">...
CAAIPstINFFactory_var spFactoryOnContainer= pContainer;
if ( NULL_var != spFactoryOnContainer) 
{
   <strong>spFactoryOnContainer-&gt;CreatePoint(_X,_Y,_Z,pRoot,_piPstINFPointEdit)</strong>;	
...</pre>
<p>First the point is created in the model. <code>piPstINFPointEdit</code>is a 
data member of the command, it is a <em>CAAIPstINFPoint</em> interface pointer.
<code>pRoot</code> is the selected CAAPstINFRoot.</p>
<pre class="code">...
<strong>CATIModelEvents</strong>_var spModelEventsOnRoot = pRoot ; 
if ( NULL_var != spModelEventsOnRoot )
{
   spModelEventsOnRoot-&gt;<strong>ConnectTo</strong>(_piPstINFPointEdit);
}	
...</pre>
<p>Then we connect the new Point to a &quot;visualization&quot; father thanks
<em>to CATIModelEvents</em>. We have implemented this interface on our root. [<a href="#References">5</a>]. 
This connection is mandatory in order to have a visualization refresh. When the 
Point will send a visualization event, its father (the Root) will be awakened to 
process the event.</p>
<pre class="code">...
<strong>CATIModelEvents</strong>_var spModelEventsOnPoint = _piPstINFPointEdit ;               
if ( NULL_var != spModelEventsOnPoint )
{
    <strong>CATCreate</strong> Notif (_piPstINFPointEdit,<strong>pRoot</strong>);
    spModelEventsOnPoint -&gt; <strong>Dispatch</strong>(Notif);
}...</pre>
<p>To create the 3D Visualization of the new point, you must create an instance 
of <strong>CATCreate</strong> <span>notification, which triggers a Visualisation 
event through Dispatch</span>. This event triggers the <code>BuildRep</code> method 
of <em>CATI3DGeoVisu</em> interface for the Point [<a href="#References">5</a>]. 
The <em>CATRep</em> object created by <code>BuildRep</code> is automatically added 
to the bag of the second argument of the <em>CATCreate</em> event.</p>
<pre class="code">...
<strong>CATIRedrawEvent</strong>_var spRedrawEventOnRoot = pRoot;
if ( NULL_var != spRedrawEventOnRoot )
{
   spRedrawEventOnRoot-&gt;<strong>Redraw</strong>();
}...</pre>
<p>Finally, we update the specification tree by updating the Root aggregating the 
Point. The <em>CATIRedrawEvent</em> is natively implemented by all the features, 
you don't have to provide an implementation. When the Root is updated, its <em>CATINavigateObject</em> 
implementation is triggered, and the new point is among its children.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Modification"></a>Modification</h3>
<p>This step is an extract of the <code>ModifyModelAndVisu</code> method of <em>
CAAPstINFEditDlgPoint</em> class. This method is called when the end user clicks 
the OK or Preview button. When user clicks the &quot;Cancel' button, this method 
is called only if <em>CAAPstINFEditDlgPoint</em> is used in the Edit case.</p>
<p>The coordinates of the Point have been changed:</p>
<pre class="code">...
_piPstINFPointEdit -&gt;<strong>SetX</strong>(iX);
_piPstINFPointEdit -&gt;<strong>SetY</strong>(iY);
_piPstINFPointEdit -&gt;<strong>SetZ</strong>(iZ);
...</pre>
<p>Here is a typical code where the model is modified. <code>SetX</code>, <code>
SetY</code>, and <code>SetZ</code> are three methods of <em>CAAIPstINFPoint</em> 
[<a href="#References">6</a>] updating attributes of the CAAPstINFPoint feature.</p>
<p>Then we have to update the visualization.</p>
<pre class="code">...
CATIModelEvents *piModelEvents = NULL;                
<strong>_piPstINFPointEdit -&gt; QueryInterface(IID_CATIModelEvents,  (void**)&amp;piModelEvents)</strong>;
CATModify Notif (_piPstINFPointEdit);
<strong>piModelEvents -&gt; Dispatch(Notif)</strong>;
...</pre>
<p>The 3D Visualization for the point is triggered by the <em>CATModify</em> event 
triggered on itself. This event triggers the <code>BuildRep</code> method of <em>
CATI3DGeoVisu</em> interface for the Point [<a href="#References">5</a>]. The point 
is redrawn.</p>
<p>The specification tree refresh is useless when the point's coordinates are changed.
</p>
<p>If the Point's modification implies to update other 
elements ( lines and wires pointing it), before closing <em>CAAPstINFEditDlgPoint</em> 
dialog box, we invoke the update of the complete data model in session. So we call 
the <em>CAAPstUpdateContainerFromContext</em> global function, described in the 
referenced article [<a href="#References">7</a>]. This methods invokes the update 
of all features in the edited PLM Technological Representation. It implies the visualisation 
update too like specified by [X].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Deletion"></a>Deletion</h3>
<p>This step is an extract of the <code>DeleteNewlyCreatedPoint</code> method of
<em>CAAPstINFEditDlgPoint</em> class. This method is called when the destructor 
of the CAAPstINFEditDlgPoint class is reached, and in the context where the new 
point creation is cancelled.</p>
<pre class="code">...
<strong>CATIUseEntity_</strong>var spEntityOnPoint = _piPstINFPointEdit;
DataCommonProtocolServices::<strong>Delete</strong>(spEntityOnPoint);
...</pre>
<p>After the model modification we have to update the 3D View and the specification 
tree.</p>
<pre class="code">...
<strong>CATIModelEvents_</strong>var spModelEventsOnPoint = _piPstINFPointEdit ;               
if ( NULL_var != spModelEventsOnPoint )
{
   <strong>CATDelete</strong> Notif (_piPstINFPointEdit);
   spModelEventsOnPoint -&gt; <strong>Dispatch</strong>(Notif);
...</pre>
<p>The <em>Delete</em> events awakes the father ( visualization process), to update 
the visualization.</p>
<pre class="code">...
<strong>CATIRedrawEvent</strong>_var spRedrawEventOnPoint = _piPstINFPointEdit;
if ( NULL_var != spRedrawEventOnPoint )
{
   spRedrawEventOnPoint-&gt;<strong>RedrawParent</strong>();
}</pre>
<p>The specification tree is updated by calling the redraw of the parent ( root). 
When the Root is updated, its <em>CATINavigateObject</em> implementation is triggered, 
and only its current children are appended to the list of children. The deleted 
point is no more an element of the Root list.</p>
<p>For a command deleting an existing Point , so one perhaps already used by a Line 
or a Wire, the global update [<a href="#References">7</a>] could be performed too.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>When a feature is created, modified or deleted its View Refresh must be managed. 
This View Refresh involves the 3D View and the specification tree update. This update 
is based on the MVC paradigm.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcINFIntegrateNewFeatures.htm">Integrating Applicative 
		Data in Product Context</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcINFBuildCatalog.htm">Defining Startup Catalog</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcINFDelete.htm">Delete StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcINFVisu.htm">Visualization StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAPstUcINFIntrinsicFeatBehavior.htm">Inherent StartUp Behavior</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAPstUcINFBuildModel.htm">Update StartUp Behavior</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
