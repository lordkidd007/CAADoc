<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Defining Feature Extension</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Defining Feature Extension</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the steps to create a feature extension. This 
		consists of writing an OSM file which defines the feature extension in it. 
		Next, it involves running the <strong>CATfctEditorAssistant</strong> tool 
		to create a Feature Catalog with the OSM file as input. The basic feature 
		modelers concepts, is explained in the article <em>Modeling Feature</em> 
		articles [<a href="#References">1</a>] while the concepts of a feature extension 
		is a topic of another article <em>Understanding Feature Extensions</em> 
		[<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstINFFeatExtDefinition Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstINFFeatExtDefinition Do</a></li>
					<li><a href="#How">How to Launch CAAPstINFFeatExtDefinition</a></li>
					<li><a href="#Where">Where to Find the CAAPstINFFeatExtDefinition 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#Credentials">Credentials to Handle Feature Extensions</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how:</p>
<ul>
	<li>To define a feature extension inside an <strong>OSM</strong> file. </li>
	<li>To define the Container inside which the feature extension is instantiated 
		inside the same <strong>OSM</strong> file.</li>
	<li>To use the <strong>CATFctEditorAssistant</strong> tool to generate a Catalog 
		from the <strong>OSM</strong> file.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstINFFeatExtDefinition Use Case</h2>
<p>CAAPstINFFeatExtDefinition is a use case of the CAAProductStructureExtend.edu 
framework that illustrates FeatureModelerExt framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstINFFeatExtDefinition Do</h3>
<p>This UC primarily does the following:</p>
<ul>
	<li>Illustrates the method to define a feature extension in an <strong>OSM</strong> 
		file.</li>
	<li>Create a <strong>Catalog</strong> which has this feature extension in it.</li>
</ul>
<p>The feature extension in the current case is a <strong>RelimitedLine</strong>, 
an extension to the base feature, the <strong>Line</strong>.</p>
<p>The figure that follows depicts in red dotted the <strong>RelimitedLine</strong> 
based on the <strong>Line</strong> feature, which is displayed in black, between
<strong>P1</strong> and <strong>P2</strong>.</p>
<p>
<img alt="Relimited Line" height="164" src="images/CAAPstINFExtension_Define.gif" width="216"/></p>
<p>The Relimited Line is characterized by two knowledge parameters namely.
<strong>param1</strong> and <strong>param2</strong>. </p>
<p>The start (<strong>PRelimLineStart</strong>) and the end points (<strong>PRelimLineEnd</strong>) 
of the relimited line is then evaluated as below. <strong>P1</strong> is the start 
point of the base Line feature. <strong>P2</strong> is its end point. <strong>P1P2</strong> 
represents the length of our base Line feature.</p>
<p><strong>PRelimLineStart = P1 + param1* (P2P1)</strong></p>
<p><strong>PRelimLineEnd = P1 + param2* (P2P1)</strong></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstINFFeatExtDefinition</h3>
<p>The first step &quot;<a href="#Step1">Generating the Catalog File</a>&quot; in 
the step by step section details the steps to launch the UC.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstINFFeatExtDefinition Code</h3>
<p>This step is without C++ code. This step only produces declarative files within
<strong>CAAProductStructureExtend.edu</strong> framework: <code>InstallRootFolder\CAAProductStructureExtend.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>You have:</p>
<ul>
	<li>in the <strong>InputData</strong> directory
		<p><strong>CAAPstINFExtensionCatalog.txt</strong> file which has the RelimitedLine 
		feature definition in it. User copies the contents of this file, while updating 
		the <strong>OSM</strong> file in <strong>step 3</strong> below at the time 
		of &quot;<a href="#Step1">Generating the Catalog File</a>&quot;.</p>
	</li>
	<li>in <strong>CNext/resources/msgcatalog</strong> directory
		<p><strong>CAAPstINFExtensionCatalogNLS.CATNls</strong>, the<strong> NLS
		</strong>file for features defined in the catalog namely. <strong>CAAPstINFExtensionCatalog</strong>.</p>
	</li>
	<li>in <strong>CNext/resources/graphic</strong> directory
		<p><strong>CAAPstINFExtensionCatalog.CATfct</strong>, the final <strong>
		Catalog</strong> generated by the UC.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in CAAPstINFFeatExtDefinition:</p>
<ol>
	<li><a href="#Step1">Generating the Catalog File</a></li>
	<li><a href="#Step2">Defining the Feature Extension Startup</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Generating the Catalog File</h3>
<ol>
	<li><strong>Create an empty OSM file </strong>
		<pre class="code"><strong>CATfctEditorAssistant -create-new-catalog -catalog-name</strong> CAAPstINFExtensionCatalog.CATfct <strong>-with-client-id</strong> CAAPstINFUseCase <strong>-into-directory</strong> $PWD/OS_directory/resources/graphic</pre>
		<p>This command creates in your current directory an empty OSM file and 
		an empty corresponding CATfct file. The contents of the OSM file are depicted 
		below:</p>
		<pre class="code">document <strong>`CAAPstINFExtensionCatalog.CATfct</strong>` 
{
   container RootCont #root #uuid(0u415283de-0000-0988-46a78b5f00000003)
   {
      ...
   }
}</pre>
		<p>The OSM file, at this stage simply declares the <code>CAAPstINFExtensionCatalog</code> 
		catalog. There are no feature StartUps defined inside it, as yet.</p>
	</li>
	<li><strong>Move</strong> the newly <strong>CATfct</strong> file in runtime 
		view
		<p>The runtime view is the <code>InstallRootFolder\OS_directory\resources\graphic</code> 
		directory where <code>InstallRootFolder</code> [<a href="#References">3</a>] 
		is the folder where the API CD-ROM is installed.</p>
	</li>
	<li><strong>Edit</strong> the <code>CAAPstINFExtensionCatalog</code>.<code>OSM 
		* </code>file as decribed in the next step namely. <a href="#Step2">Defining 
		the Feature Extension Startup</a>.</li>
	<li><strong>Update (Upgrade)</strong> the previously generated <strong>CATfct</strong> 
		file.
		<pre class="code"><strong>CATfctEditorAssistant -update-catalog -catalog-name</strong> CAAPstINFExtensionCatalog.CATfct <strong>-with-client-id</strong> CAAPstINFUseCase <strong>-with-osm</strong> osmfilepathwithfilename <strong>-into-directory</strong> outputdirectoryforupdatedcatalog</pre>
		<p>The result of this command line is locally a new <code>CAAPstINFExtensionCatalog</code>.<code>CATfct</code> 
		file updated from the one existing in the runtime view, and a modified OSM 
		file.</p>
	</li>
	<li><strong>Move</strong> the updated CATfct file in runtime view
		<p>The runtime view is the <code>InstallRootFolder\OS_directory\resources\graphic</code> 
		directory where <code>InstallRootFolder</code> [<a href="#References">3</a>] 
		is the folder where the API CD-ROM is installed.</p>
		<p>*It is recommended NOT TO SAVE THE OSM FILE. In future, to modify a Startup 
		catalog, it is recommended to re-use the OSM file generated from the
		<strong>CATfctEditorAssistant</strong> tool. (in this case the option is
		<code>-describe-catalog </code>).</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Defining the Feature Extension Startup</h3>
<p>Please note the <strong>OSM</strong> file output at <strong>step 1</strong> of 
the earlier section, simply declares the catalog <code>CAAPstINFExtensionCatalog</code>. 
It does not define any features in it. </p>
<p>Now we define the feature extension (RelimitedLine), in the scope of the Root 
Container inside the <strong>OSM</strong> file. The entire feature extension definition 
can be found in the <strong>CAAPstINFExtensionCatalog.txt</strong> file whose location 
is specified in the earlier section [<a href="#Where">#</a>]. The definition can 
be split for ease of understanding into four parts, as listed below:</p>
<ul>
	<li><a href="#Step21">Feature Attributes declaration</a></li>
	<li><a href="#Step22">Feature Extension specification, a section dedicated specifically 
		to a feature extension</a></li>
	<li><a href="#Step23">Common Protocol declaration, which pertains to the feature 
		support for common services like Update, Delete</a></li>
	<li><a href="#Step24">NLS Support for Feature Extension Name</a></li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Feature Attributes Declaration</h4>
<pre class="code"><strong>feature</strong> <strong>`CAAPstINFRelimitedLine`#startup</strong> <strong>#extension</strong> {
          ...
	<strong>component `Param1` #in</strong>
<strong>	component `Param2` #in</strong>
         string FeatureName
<strong>	specobject `TheExtendedLine` #in #auto_update</strong>
}</pre>
<p>To begin with, we will detail the construct defining the scope which will define 
our feature extension. The keywords and their significance is listed below:</p>
<ul>
	<li><strong>feature</strong> to begin a feature definition statement.</li>
	<li><strong>startup</strong> defines a Feature StartUp from which features can 
		be instantiated.</li>
	<li><strong>extension</strong> to declare it is a feature extension, meaning 
		it is a feature which can &quot;extend&quot; another feature, that we call 
		the base feature.</li>
</ul>
<p>Now we detail the actual definition which occurs inside the scope, which pertains 
to the feature attributes declaration</p>
<ul>
	<li><strong>Param1</strong> and <strong>Param2</strong> are attributes of type 
		component, implying these aggregate features [<a href="#References">4</a>], 
		which in the current case are <strong>Knowledge</strong> <strong>Parameters</strong>. 
		[<a href="#References">5</a>].</li>
	<li>The &quot;<strong>#auto_update</strong>&quot; tag for the <strong>specobject</strong> 
		attribute &quot;<strong>TheExtendedLine</strong>&quot;<strong> </strong>
		is significant. It triggers an automatic update of our RelimitedLine feature, 
		on modification of the referenced base &quot;<strong>Line</strong>&quot; 
		feature, an input feature (serving as a specification, realized by<strong>
		</strong>the<strong> #in</strong> tag) for our RelimitedLine. The
		<strong>#auto_update</strong> facet to a feature attribute is delved in 
		depth in the article &quot;<strong>Auto-Update facet principle</strong>
		<strong>and usage</strong>&quot; [<a href="#References">6</a>]..</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Feature Extension Specification</h4>
<p>Next, we proceed to explain a section dedicated exclusively to the Feature Extension. 
To begin with, please take note of this entry in the feature extension definition.
</p>
<pre class="code">feature <strong>`CAAPstINFRelimitedLine`</strong>#<strong>startup</strong> #<strong>extension</strong> {
         ...
<strong>	#creation::parameter= metadata_RelimLineExtn</strong>
         ...
}</pre>
<p><strong>#creation::parameter=metadata_RelimLineExtn</strong> declares the metadata 
block which further defines our feature extension.</p>
<p>The metadata block follows:</p>
<pre class="code">metadata metadata_RelimLineExtn {
	IsLocal=true
	Extends=["CAAPstINFLine"]
	Container="CAAPstINFExtensionCont"
	ContType="CAAPstINFExtensionCont"
}</pre>
<p>The significance of the entries in the scope of that metadata block follows. 
We list the tags and explain their relevance alongside</p>
<ul>
	<li><code>IsLocal</code> =TRUE, means that if a <code>CAAPstINFLine</code> instance 
		with an extension is further instantiated, the new <code>CAAPstINFLine</code> 
		instance will be without an extension.</li>
	<li><code>Extends </code>defines the feature that can be extended by this extension. 
		More than one base feature can be specified as &quot;<em>BaseFeat1</em>,
		<em>BaseFeat2</em>, ...&quot;.</li>
	<li><code>Container</code> the name of the applicative container where the feature 
		extension is instantiated. Please note the container is CAA container not 
		a DS one.</li>
	<li><code>ContType</code>, the type of the applicative container where the feature 
		extension is instantiated.</li>
</ul>
<p>When you use the <code>AddExtension</code> method of the <em>CATFmFeatureFacade</em> 
class, if the container, which must receive the newly extension, does not exist 
in the current PLM Representation Reference, one is created thanks to these declarative 
information. You will retrieve complete information on the applicative container 
inside the referenced article &quot;<strong>Understanding Applicative Containers</strong>&quot; 
[<a href="#References">7</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Common Protocol Declaration</h4>
<p>Lastly we have a section which defines the protocol for our feature extension 
with regard to its support for a common set of services namely. <strong>Cut</strong>,
<strong>Copy</strong>, <strong>Paste</strong> and <strong>Delete</strong> operations 
commonly invoked on features. Please take note of the following entry in our feature 
extension definition.</p>
<pre class="code">feature `CAAPstINFRelimitedLine`#startup #extension {
         ...
	<strong>#interface::CATIUseEntity=metadata_CommonProtocol</strong>
         ...
}</pre>
<p><strong>#interface::CATIUseEntity=metadata_CommonProtocol</strong> declares the 
metadata block which defines the protocol for our feature extension with regard 
to its support for a common set of services namely. <strong>Cut</strong>,
<strong>Copy</strong>, <strong>Paste</strong> and <strong>Delete</strong> operations 
commonly invoked on features</p>
<p>The metadata block follows:</p>
<pre class="code">metadata metadata_CommonProtocol {<strong>
</strong>		`implementInterface` = true<strong>
		`implementCopyPasteAspect` = false
		</strong>`implementDeleteAspect` = true
		`implementUpdateAspect` = true
	}</pre>
<p>The relevance of those entries in the metadata block are listed below in the 
order that they occur in the block. It is significant to note that this relevance 
is realized wholly by those declarations, without the necessity of explicitly writing 
code for that purpose:</p>
<ul>
	<li>The interface <em>CATIUseEntity</em> is implemented by our feature, an essential 
		prerequisite for any feature which supports the common protocol services.</li>
	<li>Copy Paste operation is not supported in general, by Feature Extensions.</li>
	<li>Delete operation using the common protocol services is supported by our 
		Feature Extension. This is the first level of authorization for delete, 
		as detailed in the UC article &quot;<strong>Understanding Delete Protocol 
		Customization</strong>&quot; [<a href="#References">10</a>]. You will realize 
		that there is another level of authorization required for delete, as detailedin 
		the UC article &quot;<strong>Managing Feature Extension Lifecycle</strong>&quot; 
		[<a href="#References">8</a>].</li>
	<li>Update operation* To be updated.</li>
</ul>
<p>The relevance of the entries made inside that metadata block and an understanding 
of the concept involved is a subject of the article &quot;<strong>Common Protocol 
Integration</strong>&quot; [<a href="#References">9</a>]. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step24"></a>NLS Support for Feature Extension Name</h4>
<p>The <strong>NLS</strong> support for our features is realized by providing the
<strong>CAAPstINFExtensionCatalogNLS.CATNls</strong> file at the location specified 
above [<a href="#Where">#</a>]. This file gets copied to the <strong>WS RTV</strong> 
on running the command <strong>mkrtv</strong>.</p>
<p>The contents of the file are as depicted below:</p>
<pre class="code">//Localisation of the <strong>CAAPstINFExtensionCatalog.CATfct</strong> catalog
CAAPstINFRelimitedLine="<strong>Relimited</strong> <strong>Line</strong>";</pre>
<p>We simply assign a <strong>NLS</strong> name to our feature extension identified 
by its late type in the file above.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Credentials"></a>Credentials to Handle Feature Extension</h2>
<p>The <code>CAAPstINFRetrieveCredentialsExtension</code>() routine is responsible 
for retrieving the <strong>Credentials</strong> which authorize working with our 
feature extension and its associated Container.</p>
<pre class="code">static CATBoolean FirstTime = TRUE;
static CATFmCredentials TheUniqueCredential ;
static HRESULT TheUniqueHResult  = E_FAIL ;
		
HRESULT  <strong>CAAPstINFRetrieveCredentialsExtension( CATFmCredentials *&amp; TheExtensionCredential)</strong>
{
	if ( TRUE == FirstTime  )
	{
       	   CATUnicodeString <strong>clientId("CAAPstINFUseCase")</strong>;
	   CATUnicodeString parnerId("CAAPstExtProductStructure2");
	   TheUniqueHResult = <strong>TheUniqueCredential.RegisterAsApplicationBasedOn(CATFmFeatureModelerID,parnerId)</strong>;
	   if ( SUCCEEDED(TheUniqueHResult) ) TheUniqueHResult = <strong>TheUniqueCredential.RegisterAsCatalogOwner("CAAPstINFExtensionCatalog",clientId)</strong>;

	   FirstTime = FALSE ;
	}

	TheExtensionCredential = &amp;TheUniqueCredential ;
	return TheUniqueHResult  ;
}</pre>
<p>The call to <code>RegisterAsApplicationBasedOn</code>() routine of the <em>CATFmCredentials</em> 
class updates our Credentials object with the authorization to access the Applicative 
Container based on Feature Modeler.</p>
<p>The call to <code>RegisterAsCatalogOwner</code>() routine of the <em>CATFmCredentials</em> 
class further updates our Credentials object with the authorization to work with 
the catalog namely. <strong>CAAPstINFExtensionCatalog</strong>.</p>
<p>The <strong>clientID</strong> input to this routine is that which was input in 
an earlier step &quot;<strong>Generating the Catalog File</strong>&quot;.</p>
<p>Each time we work with a feature extension, the RelimitedLine, it is necessary 
to retrieve the associated credentials with the call to the above global routine. 
It is significant to note that the Credentials object is created once and any subsequent 
call to the routine above, returns an already existing static Credentials object.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>You have:</p>
<ul>
	<li>Defined the Feature Extension Startup and the Container where it is instantiated 
		using the <strong>OSM</strong> language.</li>
	<li>Generated the Feature Extension StartUp Catalog using the <strong>CATfctEditorAssistant</strong> 
		tool.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTcModelingFeaturesToc.htm">
		Modeling Feature</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaFeatureExtension.htm">
		Understanding Feature Extensions</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaLinkingFeatures.htm">
		Understanding Feature Links</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaUnderstandingKnowledge.htm">
		Attribute as Knowledge Parameter</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaAutoUpdateFacetPrincipleAndUsage.htm">
		Auto-Update Facet Principle and Usage</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaApplicativeContainer.htm">
		Understanding Applicative Container</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAPstUcINFExtensionLifeCycle.htm">Managing Feature Extension 
		Lifecycle</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCommonProtocol.htm">
		Common Protocol Integration</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaCustoDelete.htm">
		Understanding Delete Protocol Customization</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2 </strong>[Jan 2011]</td>
		<td>Document revised</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Oct 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
