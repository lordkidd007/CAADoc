<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating V4 Data from a V5 Geometrical Element</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating V4 Data from a Geometrical Element</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		This article shows how to create V4 data from a geometrical element.
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAV4iEduSaveAsV4 Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAV4iEduSaveAsV4 Do</a></li>
					<li><a href="#How">How to Launch CAAV4iEduSaveAsV4</a></li>
					<li><a href="#Where">Where to Find the CAAV4iEduSaveAsV4 Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create V4 data from a geometrical 
element by implementing the <em>CATIV4DataSaver</em> interface.</p>
<p>The use case has been implemented on the <code>CATForeignCurveCGM</code> geometrical 
element (DS element), but in your own application you should first create a geometrical 
element deriving either from <em>CATIForeignCurve</em> or <em>CATIForeignSurface</em>. 
There are the only one cases where the <em>CATIV4DataSaver</em> interface is invoked 
when a geometrical is saved in V4 data.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAV4iEduSaveAsV4 Use Case</h2>
<p>CAAV4iEduSaveAsV4 is a use case of the CAAV4V5Interoperability.edu framework 
that illustrates V5ToV4Geo framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAV4iEduSaveAsV4 Do</h3>
<p>CAAV4iEduSaveAsV4 is an implementation of the <em>CATIV4DataSaver</em> interface 
on a DS geometrical element, the CATForeignCurveCGM.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAV4iEduSaveAsV4</h3>
<p>First of all set up the build time environment, compile CAAV4iEduSaveAsV4 with 
its prerequisites [<a href="#References">1</a>], set up the run time environment 
to take into account the use case dictionary (*). Then:</p>
<ul>
	<li>Remove #CAA# inside the CAAV4V5Interoperability.edu.dico file located in 
		the CNext folder of the CAAV4V5Interoperability.edu framework.
		<pre class="code">#CAA# CATForeignCurveCGM CATIV4DataSaver libCAAV4iEduSaveAsV4</pre>
	</li>
	<li>Launch a CATIA session.</li>
	<li>Import CAAV4iForeignCurve.3dxml (*).</li>
	<li>UI activates the 3D Shape in Navigation mode.</li>
	<li>Open the 3D Shape in Authoring mode.</li>
	<li>Save 3D Shape Representation using Export (Export -&gt; 3DXML or File) 
	option. Select save type as .model</li>
</ul>
<p>(*)The 3D Xml file is located in the InputData directory of the CAAV4V5Interoperability.edu 
framewrok. It contains a Product Reference and a 3D Shape Representation whose the 
attributes are for both:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAAV4iForeignCurve</li>
	<li><code>version</code>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAV4iEduSaveAsV4 Code</h3>
<p>This use case describes the implementation class of the <em>CATIV4DataSaver</em> 
interface, called <em>CAACurveV4DataSaver</em>, which is found in the CAACurveV4DataSaver.cpp 
source file and CAACurveV4DataSaver.h header file inside CAAV4iEduSaveAsV4.m module.</p>
<p><code>InstallRootFolder\CAADoc\CAAV4V5Interoperability.edu\CAAV4iEduSaveAsV4.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAV4iEduSaveAsV4:</p>
<ul>
	<li><a href="#Step1">Creating the Class to Implement the CATIV4DataSaver Interface</a></li>
	<li><a href="#Step2">Reading the PLM Data of the Foreign Geometry</a></li>
	<li><a href="#Step3">Making a V4 Spline Constraint Data (Optional)</a></li>
</ul>
<p>The last three represents the <em>CATIV4DataSaver</em> interface's methods implementation.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Class to Implement the CATIV4DataSaver Interface</h3>
<p><em>CATIV4DataSaver</em> is implemented by the <em>CAACurveV4DataSaver</em><code>
</code>class using Object Modeler mechanism [<a href="#References">2</a>].</p>
<p>Here an extract of the <em>CAACurveV4DataSaver</em> header file.</p>
<pre class="code">class CAACurveV4DataSaver: public CATBaseUnknown
{
  CATDeclareClass;

  public:
  CAACurveV4DataSaver();
  virtual ~CAACurveV4DataSaver();

  HRESULT <strong>GetData</strong>(int &amp; oV4Type, double * &amp; oV4Block); 
  HRESULT <strong>GetSplineConstraintData</strong>(int &amp; oV4SplineType, int &amp; oV4BlockLength, double * &amp; oV4BlockData);
  
  private:

  // Copy constructor and assignment operator, not implemented
  // Set as private to prevent from compiler automatic creation as public.
  // -----------------------------------
  CAACurveV4DataSaver(CAACurveV4DataSaver&amp;);
  CAACurveV4DataSaver&amp; operator=(CAACurveV4DataSaver&amp;);
	
};				                     
...</pre>
<p>The CAACurveV4DataSaver C++ class derives from <em>CATBaseUnknown</em>. The
<code>CATDeclareClass</code> macro declares that the <em>CAACurveV4DataSaver</em> 
class belongs to a component. The copy constructor and the &quot;=&quot; operator 
are set as private to prevent the compiler from automatically creating as public.</p>
<p>The <em>CATIV4DataSaver</em> interface contains two methods to override such as 
detailed in next sections.</p>
<p>Now an extract of the CAACurveV4DataSaver source file:</p>
<pre class="code">// Tie the implementation to its interface
#include &quot;<strong>TIE_CATIV4DataSaver</strong>&quot;
<strong>TIE_CATIV4DataSaver</strong>(CAACurveV4DataSaver);

// To declare that the class 
//
CATImplementClass(CAACurveV4DataSaver,
                  CodeExtension, 
                  CATBaseUnknown,
                  <strong>CATForeignCurveCGM</strong>);				                     
...</pre>
<p>The <em>CAACurveV4DataSaver</em> class states that it implements the <em>CATIV4DataSaver</em> 
interface thanks to the <code>TIE_CATIMf3DBehavior</code> macro. This extension 
class is dedicated to this component, and the <code>CATImplementClass</code> macro 
declares that the <em>CAACurveV4DataSaver</em> class is code extension class, thanks 
to the <code>CodeExtension</code> keyword [<a href="#References">2</a>], and that 
it extends the component whose main class is <em>CATForeignCurveCGM</em>. The third 
parameter must always be set to <em>CATBaseUnknown</em>, makes no sense, and is unused 
for extensions.</p>
<p>Do not forget to update the interface dictionary. Here it is an extract of the 
CAAV4V5Interoperability.edu.dico file located in the CNext directory of the CAAV4V5Interoperability.edu 
framework.</p>
<pre class="code">...
CATForeignCurveCGM CATIV4DataSaver lib<tt>CAAV4iEduSaveAsV4</tt>
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Reading the PLM Data of the Foreign Geometry</h3>
<p>This step consists in to implement the <code>GetData</code> method of the <em>CATIV4DataSaver</em> interface.</p>
<pre class="code">HRESULT CAASurfV4DataSaver::<strong>GetData</strong>(int &amp; oV4Type, double * &amp; oV4Block) 
{ 
  ...</pre>
<p>To access the data of the foreign geometry, we use the <em>CATIForeignSurface</em> 
interface. For your own geometrical element, use its own interface .</p>
<pre class="code">...
  <strong>CATIForeignSurface</strong>_var forSurf = this;
...
</pre>
<p>Then you can build the V4 block data.</p>
<pre class="code">...
    <strong>oV4Type</strong> = V4CATGEOType;
    oV4Block = new double[V4Length];
    for (int i=0; i&lt;V4Length; i++)
    { 
      oV4Block[i] = ...;  
    } 
    ...</pre>
<p>To create the V4 data, refer to the V4 CATGEO documentation.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Making a V4 Spline Constraint Data (Optional)</h3>
<p>This step consists in to implement the <code>GetSplineConstraintData</code> method 
of the <em>CATIV4DataSaver</em> interface. This method is only called for the curve, 
it is not called in case of surface implementation.</p>
<pre class="code">HRESULT CAACurveV4DataSaver::<strong>GetSplineConstraintData</strong>(int &amp; oV4SplineType, int &amp; oV4BlockLength, double * &amp; oV4BlockData)
{
  ...
  oV4Type = V4SplineType;
  oV4BlockLength = V4SplineConstraintLength;
  oV4SplineConstraintBlock = new double[V4SplineConstraintLength];
  for (int i=0; i&lt;V4SplineConstraintLength; i++)
  { 
    oV4SplineConstraintBlock[i] = ...;  
  } 
  ...   
</pre>
<p>To create the V4 data of the geometry, refer to the V4 CATGEO documentation.</p>
<p>To create the V4 spline data of the foreign geometry, refer to the CATV4iV4Element 
documentation. If there is no V4 spline data, set the outputs to 0 for the integers 
and to NULL for the pointer.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case provides a way to adapt the behavior of the export to V4 model.</p>
<script type="text/javascript">insertLinkToTop()</script>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMCreatingComponent.htm">
		Creating Component</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2003]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
