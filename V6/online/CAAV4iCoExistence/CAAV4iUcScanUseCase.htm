<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Scanning a Model to Retrieve V4 Elements</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving V4 Elements</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to scan PLM Representation Reference [<a href="#References">1</a>] 
		whose the Stream Descriptor contains V4 elements coming from a .model (V4 
		file format).</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAV4iEduModelScan Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAV4iModelScan Do</a></li>
					<li><a href="#How">How to Launch CAAV4iEduModelScan</a></li>
					<li><a href="#Where">Where to Find the CAAV4iEduModelScan Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to retrieve V4 elements from a PLM 
representation reference. You will learn to use some global functions of the 
CATV4iFunctions header to retrieve those V4 elements knowing the V4 file format.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAV4iEduModelScan Use Case</h2>
<p>CAAV4iEduModelScan is a use case of the CAAV4V5Interoperability.edu framework 
that illustrates CATIAV4Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAV4iEduModelScan Do</h3>
<p>The use case:</p>
<ul>
	<li>Opens the input PLM representation reference whose the Stream Descriptor 
		must contains V4 elements coming from a .model (V4 file format).</li>
	<li>Scans the stream descriptor to retrieve each workspace, every workspace 
		are scanned to retrieves their sets and finally, the elements of every set 
		are retrieved.</li>
</ul>
<p>The scanning functions retrieve the V4 elements by creating object of the <em>CATV4iV4Element</em>
class. The name of each V4 element is retrieved and put in a 
file. Here is the result with the given PLM representation reference (*):</p>
<pre class="code">--*MASTER
----*SET1
------*CST1
------*CRV1
------*SOL1
------*DIT4
------*DIT5
----*SET2
------*SOL3
------*SOL5
----*SET5
------*DIT6
------*DIT7
--DETAIL-1
----*SET3
------*SOL7
------*SOL9
--DETAIL-2
----*SET4
------*SOL11
------*SOL13</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAV4iEduModelScan</h3>
<p>To launch CAAV4iEduModelScan, you will need to set up the build time environment, 
then compile CAAV4iEduModelScan along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p><code>mkrun -c &quot;CAAV4iEduModelScan Repository Server UserId Password SecurityCtx 
PLMType PLMExternalID V_version outputFile&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as name:port_number</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type String</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation 
		Reference</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code>V_version</code> of a PLM Reference or PLM Representation 
		Reference</td>
	</tr>
	<tr>
		<th>OutputFile</th>
		<td>The name of the output text file</td>
	</tr>
</table>
<p>(*) You can directly execute this use case if you know how to locate your own 
representation reference. If not, you can import a 3D XML file CAAV4iScanUseCase.3dxml 
supplied in the CAAV4V5Interoperability.edu framework, at the path specified below:</p>
<p><code>InstallRootFolder\CAADoc\CAAV4V5Interoperability.edu\InputData\CAAV4iScanUseCase.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Input Model with the following attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: CAAV4iScanUseCases.</li>
	<li><strong>Version</strong>: ---</li>
</ul>
<p>Please refer to the document [<a href="#References">2</a>] for how to import 
and re-import such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAV4iEduModelScan Code</h3>
<p>The CAAV4iEduModelScan use case is made of a single file located in the CAAV4iEduModelScan.m 
module of the CAAV4V5Interoperability.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAV4V5Interoperability.edu\CAAV4iEduModelScan.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAAV4iEduModelScan:</p>
<ol>
	<li><a href="#Step1">Opening the Output File</a></li>
	<li><a href="#Step2">Opening the PLM Representation Reference</a></li>
	<li><a href="#Step3">Retrieving the Workspaces</a></li>
	<li><a href="#Step4">Retrieving the Sets</a></li>
	<li><a href="#Step5">Retrieving the Elements</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Output File</h3>
<pre class="code">...
  ofstream outputFile (argv[9]);
...</pre>
<p>The ninth argument of CAAV4iEduModelScan is the full path of the output file.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the PLM Representation Reference</h3>
<pre class="code">...
    CATIAdpPLMIdentificator* opiIDComp = NULL;
    const char* iStrPLMType = argv[6];
	
    rc = ::CAARetrieveIDofUniquePLMObject (iListAttributeName,iListAttributeValue,														
				      iStrPLMType,opiIDComp);
...   
    <strong>CATOmbLifeCycleRootsBag</strong> Bag;
    <strong>CATAdpOpener</strong> opener(Bag);
    <strong>CATIPsiRepresentationLoadMode</strong> *piLoadModeOnRepRef  =  NULL;
    rc= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPsiRepresentationLoadMode, (void**) &amp;piLoadModeOnRepRef);
...
    rc= piLoadModeOnRepRef-&gt;<strong>ChangeLoadingMode</strong>(CATIPsiRepresentationLoadMode::EditMode);
...	
    rc = piLoadModeOnRepRef-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPsiRepresentationReference</strong> ,(void**)&amp;<strong>piPsiRepRefOnModel</strong> );
...</pre>
<p>The <code>CAARetrieveIDofUniquePLMObject</code> method retrieves the identificator 
of Reference by using the Attribute Set and PLM Type. Details of retrieving identifier 
are given in "<strong>Querying, Expanding and Opening PLM Components</strong>" [<a href="#References">3</a>].</p>
<p>The <code>CompleteAndOpen</code> [<a href="#References">3</a>] method of <em>CATAdpOpener</em>
class opens representation. Note that the PLM representation reference 
is opened in edit mode, in other words , it means that the stream descriptor containing 
the V4 elements is accessible (loaded in memory) [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Workspaces</h3>
<pre class="code">...
  if (! <strong>CATV4iGetMaster</strong>(piPsiRepRefOnModel, wspElem, ier) )
  {
    while(!endWsp &amp;&amp; !ier)
    {
      if (wspElem)
        outputFile &lt;&lt; &quot;--&quot;&lt;&lt;wspElem-&gt;GetId()&lt;&lt;endl;

      // the sets of the workspace wspElem are retrieved here
...

      if ( ! <strong>CATV4iGiswsp</strong>(wspElem, nextWspElem, wspType, endWsp, ier) )
      {
...
        wspElem=nextWspElem;
      }
    }
  }
...</pre>
<p>This part of code consist in retrieving the workspaces of the .model data.
<code>CATV4iGetMaster</code> retrieves the MASTER workspace in <code>wspElem</code>.</p>
<p>Then, while <code>endWsp</code> is false, the identifier of the workspace 
is printed in the output file and the next workspace is searched using <code>CATV4iGiswsp</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Sets</h3>
<pre class="code">...
      if (! <strong>CATV4iGisset</strong>(wspElem, setElem, endSet, ier) )
      {
        while(!endSet &amp;&amp; !ier)
        {
          if (setElem)
            outputFile &lt;&lt; &quot;----&quot;&lt;&lt;setElem-&gt;GetId()&lt;&lt;endl;

          // the elements of the set setElem are retrieved here
...

          if (! <strong>CATV4iGisset</strong>(setElem, nextSetElem, endSet, ier) )
          {
...
            setElem=nextSetElem;
          }
        }
      }
...</pre>
<p>This part of code consist in retrieving the set of a workspace. <code>CATV4iGisset</code> 
retrieves the first set of the workspace <code>wspElem</code>.</p>
<p>Then, while <code>endSet</code> is false, the identifier of the set 
is printed in the output file and the next set is searched using <code>CATV4iGisset</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Elements</h3>
<pre class="code">...
          if (! <strong>CATV4iGisels</strong>(setElem, NULL, element, endEls, ier) )
          {
            while(!endEls &amp;&amp; !ier)
            {
              if (element)
                outputFile &lt;&lt; &quot;------&quot;&lt;&lt;element-&gt;GetId()&lt;&lt;endl;
...

              if (! <strong>CATV4iGisels</strong>(setElem, element, nextElement, endEls, ier) )
              {
...
                element=nextElement;
              }
            }
          }
...</pre>
<p>This part of code consist in retrieving the V4 element of a set. <code>CATV4iGisels</code>
retrieves the first element of the set <code>setElem</code>.</p>
<p>Then, while <code>endEls</code> is false, the identifier of the element 
is printed in the output file and the next set is searched using <code>CATV4iGisels</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This sample shows the way to retrieve V4 elements from a PLM representation reference 
whose the stream descriptor has been created from a V4 file (.model). Once you have 
a V4 element, represented by <em>CATV4iV4Element</em> instance class, you are able 
to retrieve its V4 information : the primary and the secondary types and so one. 
It is explained in the Retrieving V4 Element Data [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllRepresentation.htm">
		PLM Representation Reference</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAV4iUcDataAccessUseCase.htm">Retrieving V4 Element Data</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2003]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
