<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Building and Launching a Use Case</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Building and Launching a Use Case</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article gives you information about the supported operating systems, 
		and shows you how to set up a build time environment for a use case, compile 
		one or several use case modules, then set up a run time environment, and 
		finally launch the use case. </p>
		<ul>
			<li><a href="#OS">The Operating Systems</a></li>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAUseCase Use Case</a>
				<ul>
					<li><a href="#StepWindows">Step-by-Step with Windows from a 
						Command Prompt</a></li>
					<li><a href="#StepMsDev">Step-by-Step with Microsoft Visual 
						Studio 2010</a></li>
					<li><a href="#Server">Specify Server Information</a></li>
					<li><a href="#Licenses">Request Licenses</a></li>
					<li><a href="#PLMData">Import PLM Data</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="OS"></a>The Operating Systems</h2>
<p>The operating system that the applications developed on top of Dassault Syst&#232;mes&#39; 
solutions and products can use is:</p>
<ul>
	<li>Windows 64-bit (Windows 7 and Windows 8 Desktop).</li>
</ul>
<p>The folders that contain operating system specific files are named according 
to the operating system identifier: </p>
<table class="fill">
	<tr>
		<th>Operating System</th>
		<th>Identifier</th>
	</tr>
	<tr>
		<td>Windows 64-bit</td>
		<td>win_b64</td>
	</tr>
</table>
<p>For example, the binary code installed for Windows 64-bit is installed in the 
C:\Program Files\Dassault Systemes\B216\<strong>win_b64</strong> folder.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to set up a build time environment, 
by copying the education frameworks containing the use cases in a workspace root 
folder of your own, get the prerequisite frameworks of these education frameworks, 
and build a use case along with its prerequisites. Then, it shows how to set up 
a run time environment, and finally launch the use case.</p>
<p>The following folder names or acronyms are used in this article.</p>
<table class="fill">
	<colgroup span="1" valign="top">
	</colgroup>
	<tr>
		<th>Folder Name or Acronym</th>
		<th>Meaning</th>
	</tr>
	<tr>
		<td><code>InstallRootFolder</code></td>
		<td>The pathname of the folder into which the Dassault Syst&#232;mes&#39; 
		solutions and products run time and API CD-ROMs were unloaded</td>
	</tr>
	<tr>
		<td><code>ToolsRootFolder</code></td>
		<td>The pathname of the folder into which the Native Apps Development 
		Toolset CD-ROM was 
		unloaded</td>
	</tr>
	<tr>
		<td><code>MyRootFolder</code></td>
		<td>The pathname of the root folder where you can copy and build the use 
		case</td>
	</tr>
	<tr>
		<td><code>TCK</code></td>
		<td>The Tool Configuration Key, such as V5R1x_B211</td>
	</tr>
	<tr>
		<td><code>CAAFramework.edu</code></td>
		<td>The education framework that contains the use case module</td>
	</tr>
	<tr>
		<td><code>CAAUseCase.m</code></td>
		<td>The use case module, or one of the modules that make up the use case</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAUseCase Use Case</h2>
<p>CAAUseCase is a generic name for the use cases. You should just replace CAAUseCase 
by the actual name of the use case module you want to build and launch. To leave 
your CD-ROM installation as a safe reference, create a separate root folder for 
the use cases in which you can freely copy, build, run, and possibly modify the 
use cases. In the following, assume that <strong>InstallRootFolder</strong> is the 
folder where you install the Dassault Syst&#232;mes&#39; solutions and products 
run time and the API CD-ROMs, and that <strong>ToolsRootFolder</strong> is the folder 
where you install the Native Apps Development Toolset CD-ROM.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="StepWindows"></a>Step-by-Step with Windows from a Command Prompt</h3>
<p>To build and launch a use case, first set up the build time environment by copying 
the education frameworks containing the use cases in a workspace root folder of 
your own, and build the use case associated module(s) along with their prerequisites 
using the Multi-Workspace Application Builder mkmk. Then set up the run time environment, 
and launch the use case. Assume the load module is CAAUseCase.m. Open a Command 
Prompt (DOS window) and:</p>
<ol class="task">
	<li>
		<p>Copy the <strong>InstallRootFolder\CAADoc\CAA*.edu</strong> frameworks 
		in your workspace root folder <strong>MyRootFolder</strong>.</p>
	</li>
	<li>
		<p>Set up the build time environment:</p>
		<pre class="code"><strong>ToolsRootFolder</strong>\intel_a\code\command\tck_init
tck_profile <strong>TCK
</strong>cd <strong>MyRootFolder\CAAFramework.edu
</strong>mkCopyPreq -p <strong>InstallRootFolder\CAADoc</strong>
mkGetPreq -p <strong>InstallRootFolder</strong></pre>
		<p>To know which <code><strong>TCK</strong></code> you can use, type
		<code>tck_list</code>, and choose the level that matches your installation 
		among those available.</p>
		<p>If you want to build and run a given use case, or a subset of the supplied 
		use cases, copy only the frameworks that contain these use cases. Since 
		some use cases request other use cases from other frameworks, run <code>
		mkCopyPreq</code> before running <code>mkGetPreq</code>. This will retrieve 
		all the prerequisite frameworks of the use case frameworks that you have 
		copied.</p>
	</li>
	<li>
		<p>Build the modules:</p>
		<ul>
			<li>If there is only one module in the use case framework:<pre class="code">mkmk -u <strong>CAAUseCase.m</strong></pre>
			</li>
			<li>If there are several modules, build them all at a time:<pre class="code">mkmk -au</pre>
			</li>
			<li>If there are several frameworks, build them all at a time:<pre class="code">cd ..
mkmk -au</pre>
			</li>
		</ul>
	</li>
	<li>
		<p>Set up the run time environment:</p>
		<pre class="code">mkCreateRuntimeView
mkrun -c &quot;cmd&quot;</pre>
	</li>
	<li>
		<p>Activate the trace output. Most of the use cases include traces to enable 
		you to follow their different steps:</p>
		<pre class="code">set CNEXTOUTPUT=CONSOLE</pre>
	</li>
	<li>
		<p><a href="#PLMData">Import Input PLM Data</a>.</p>
		<p>This step is required if the use case you want to run needs PLM data, 
		otherwise you can skip it. Import this data from the installation folder 
		to the database. Refer to the use case article, where a section entitled &quot;How 
		to Launch the CAAUseCase&quot; to find out the data location and other useful 
		information.</p>
	</li>
	<li>
		<p>Launch the use case. Refer to the use case article, where a section entitled &quot;How 
		to Launch the CAAUseCase&quot; may give additional information. You may 
		find the three following cases:</p>
		<ul>
			<li>If the use case is made up of a single exe launched without parameters, 
				nothing special is indicated in the use case article. Simply type:
				<pre class="code"><strong>CAAUseCase</strong></pre>
			</li>
			<li>If the use case is made up of a single exe launched with parameters, 
				they are described in the use case article to which you should refer 
				to know what they are and what to type, usually something like:
				<pre class="code"><strong>CAAUseCase arg1 arg2 ...</strong></pre>
			</li>
			<li>If the use case is made up of a DLL, it is usually intended to be 
				launched from the 3DEXPERIENCE Platform. The full command sequence 
				is described in the use case article to which you should refer. 
				To launch the 3DEXPERIENCE Platform, type:
				<pre class="code"><strong>3DEXPERIENCE</strong></pre>
			</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="StepMsDev"></a>Step-by-Step with Native Apps Development Environment 
in Microsoft Visual Studio 2010</h3>
<p>To use Native Apps Development Environment in Microsoft Visual Studio 2010, you 
need to set up the build time environment, and access the prerequisite frameworks.</p>
<ul>
	<li>Start Visual Studio 2010.</li>
	<li>Copy the <strong>InstallRootFolder\CAADoc\CAA*.edu</strong> frameworks in 
		your workspace root folder <strong>MyRootFolder</strong> either from a Command 
		prompt or using Windows Explorer.</li>
	<li>Set up the build time environment:
		<ol class="task">
			<li><p>On the <kbd>File</kbd> menu, point to <kbd>Open</kbd>, and click
				<kbd>3DS Workspace</kbd>.</p>
			<p>The <kbd>3DS - Open Workspace</kbd> dialog box opens.</p>
			</li>

					<li><p>In the <kbd>Location</kbd> box, Type the folder of your workspace,
						or use the <kbd>Browse for Folder</kbd> dialog box to 
						locate this folder.</p></li>
					<li><p>In the <kbd>Tool Level</kbd> list, select the tool level
					that matches your installation, such as V6B2014x_1341_B216.</p></li>
					<li><p>Click <kbd>Open</kbd>.</p></li>
			
		</ol>
	</li>
	<li>Access the use case frameworks prerequisites:
		<ol class="task">
			<li>
				<p>In the <kbd>3DS Workspace Explorer</kbd>, right click the workspace 
				name, and click <kbd>Prerequisites</kbd>.</p>
				<p>The <kbd>3DS - Manage prerequisites</kbd> dialog box opens.</p>
			</li>
			<li>
				<p>Click
				<img alt="Folder Icon" height="18" src="../CAAIcons/images/iconFolder.png" width="57"/>.</p>
				<p>A field appears prompting new to select or type a folder.</p>
			</li>
			<li>
				<p>Click
				<img alt="Browse Icon" height="20" src="../CAAIcons/images/iconBrowse.png" width="28"/>.</p>
				<p>The <kbd>Browse for Folder</kbd> dialog box opens.</p>
			</li>
			<li>
				<p>Locate the workspace prerequisite root folder, that is, the folder 
				where you installed the brand CD ROM (usually C:\Program Files\Dassault 
				Systemes\B216), and click it.</p>
			</li>
			<li>
				<p>If you want to copy the prerequisite framework from this workspace, 
				check <kbd>Copy prerequisite file</kbd>.</p>
				<p>The <kbd>Target directory</kbd> box becomes active.</p>
			</li>
			<li>
				<p>In this case, click <kbd>Browse</kbd> to select a folder when 
				the frameworks will be copied, or type the path name of this folder.</p>
			</li>
			<li>
				<p>Click <kbd>OK</kbd>.</p>
				<p>The declared workspace is added to you workspace prerequisites, 
				possibly copied to the folder you have selected, and the identity 
				cards of your frameworks are rebuilt, taking this workspace into 
				account.</p>
			</li>
			<li>
				<p>Click <kbd>Close</kbd> in the <kbd>Set prerequisite paths (TCK)</kbd> 
				dialog box that opens to show you the command results.</p>
			</li>
		</ol>
<p>You can now build and launch a use case, that is, build the use case associated 
module(s) along with their prerequisites using mkmk. Then you set up the runtime 
environment, and launch the use case. Here we assume that the load module is CAAUseCase.m.</p>
	</li>
	<li>Build the modules and refresh the run time view:
		<ol class="task">
			<li>
				<p>In the <kbd>3DS Workspace Explorer</kbd>, right click a framework 
				or a module, and click <kbd>Build mkmk</kbd>.</p>
				<p>The <kbd>3DS - Build options</kbd> dialog box opens.</p>
			</li>
			<li>
				<p>Check the <kbd>Force mkdata update (-u)</kbd> option.</p>
			</li>
			<li>
				<p>Click <kbd>Build</kbd>.</p>
			</li>
			<li>
				<p>In the <kbd>Build Code (Build)</kbd> dialog box, click <kbd>Close</kbd>.</p>
			</li>
			<li>
				<p>In the <kbd>3DS Workspace Explorer</kbd>, right click the workspace 
				root, and click <kbd>Refresh Runtime View</kbd>.</p>
				<p>The <kbd>Refresh the runtime view (mkmk)</kbd> dialog box opens.</p>
			</li>
			<li>
				<p>Click <kbd>Close</kbd>.</p>
			</li>
		</ol>
	</li>
	<li><a href="#PLMData">Import Input PLM Data</a><br />
		This step is required if the use case you want to run needs PLM data, otherwise 
		you can skip it. This data should be imported from the installation folder 
		to the database. Refer to the use case article, where a section entitled &quot;How 
		to Launch the CAAUseCase&quot; to find out the data location and other useful 
		information.</li>
	<li>Launch the use case
	<ul>
		<li>On the <kbd>Window</kbd> menu, point to <kbd>3DS Windows</kbd>, and click
			<kbd>Run Time Prompt</kbd>.</li>
		<li>Refer to the use case article, where a section entitled &quot;How to 
			Launch the CAAUseCase&quot; may give additional information. You may 
			find the three following cases:
			<ul>
				<li>If the use case is made up of a single exe launched without 
					parameters, nothing special is indicated in the use case article. 
					Simply type the exe name in the command prompt and press 
					Enter.</li>
				<li>If the use case is made up of a single exe launched with parameters, 
					they are described in the use case article to which you should 
					refer to know what they are and what to type. Type the exe name 
					and the arguments in the command prompt, and press Enter.</li>
				<li>If the use case is made up of a DLL, it is usually intended 
					to be launched from the 3DEXPERIENCE Platform. The full command 
					sequence to run is described in the use case article to which 
					you should refer.<ul>
						<li>To launch the 3DEXPERIENCE Platform, enter the full 
							pathname of 3DEXPERIENCE.exe in the <strong>Command 
							and executable</strong> box, and click <strong>OK</strong><ul>
								<li>InstallRootFolder\intel_a\code\bin\3DEXPERIENCE.exe 
									with Window 32-bit</li>
								<li>InstallRootFolder\win_b64\code\bin\3DEXPERIENCE.exe 
									with Window 64-bit</li>
							</ul>
						</li>
						<li>Replay the scenario described in the use case article.</li>
					</ul>
				</li>
			</ul>
		</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Server"></a>Specify Server Information</h3>
<p>All batch use cases that access the V6 PLM server must contain server information:</p>
<ul>
	<li>Its name.</li>
	<li>Its port.</li>
	<li>Its root URI - The value of this parameter is the name valuated by the warutil 
		tool. The administrator chooses a name for its war or ear file. This file 
		is next deployed on the server (WebSphere or Tomcat).</li>
</ul>
<p>Server information is one argument of the batch expressed as follow:</p>
<pre class="code">SeverName:ServerPort/rootURI</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Licenses"></a>Request Licenses</h3>
<p>The list of licenses that will be used at runtime by a sample is provided by 
the V6 PLM server. For low level batch samples that do not access the V6 PLM server, 
this list of licenses has to be specified using the <em>CATOptionsMgt</em> utility 
that should be launched the following way:</p>
<pre class="code">mkrun -c cmd
CATOptionsMgt -nologin
</pre>
<p>The result is stored in the user V6 settings files and will be automatically 
retrieved when launching the sample. More information can be found in the 3DLive 
product documentation, in the <em>3DLive Client License Control Concept</em> article</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="PLMData"></a>Import Input PLM Data</h3>
<p>The use case may require input PLM Data: PLM Reference or PLM Representation 
Reference. This data is stored in 3D XML files, whose extension is &quot;<code>3dxml</code>&quot;. 
You must import these PLM Data in the database using the PLM Access / Import As 
3D XML command prior to launching the use case.</p>
<ol class="task">
	<li>
		<p>Launch the authoring application, that is, the 3DEXPERIENCE Platform.</p>
	</li>
	<li>
		<p>Connect to the database.</p>
	</li>
	<li>
		<p>On the <kbd>Me</kbd> menu, point to <kbd>Import</kbd>, and click
		<kbd>3D XML</kbd>.</p>
		<table>
			<caption>Fig.1 Import 3DXML Command</caption>
			<tr>
				<td>
				<img alt="Import 3D XML Command" height="274" src="images/CAADocResources_ImportCmd.gif" width="744"/></td>
			</tr>
		</table>
	</li>
	<li>
		<p>The <kbd>Import 3D XML</kbd> dialog box appears.</p>
		<table>
			<caption><a name="Fig.2">Fig.2</a> Import 3DXML Dialog box</caption>
			<tr>
				<td>
				<img alt="Import 3D XML Dialog Box" src="images/CAADocResources_ImportDlg3.png"/></td>
			</tr>
		</table>
	</li>
	<li>
		<p>In <kbd>Path</kbd>, enter or select the folder where the 3D XML files 
		are stored. This folder is specified in the use case article. All the files 
		with the 3dxml extension are displayed.</p>
	</li>
	<li>
		<p>Select one or more files.</p>
	</li>
	<li>
		<p>In <kbd>Import Option</kbd>.</p>
		<p>The Import 3DXML command uses a Business Logic (PLM Attributes Initialization) 
		to valuate some PLM attributes of the imported PLM Components. If you have 
		not modified the provided Business logic, to apply you own rules, this option 
		will influence on the PLMExternal_ID valuation of the imported PLM components 
		on the ways described below.</p>
		<ul>
			<li>If <kbd>Import as New</kbd> option is checked
				<p>There are two different cases to consider according to options 
				defined inside the <code>Identification</code> tab page of the
				<code>PLM Access</code> page of Preferences command.</p>
				<table>
					<caption><a name="Fig.3">Fig.3</a> Preferences</caption>
					<tr>
						<td>
						<img alt="Tools Options Dialog Box" src="images/CAADocResources_ImportTO.png"/></td>
					</tr>
				</table>
				<ol>
					<li><strong>User defined identification string</strong> 
						option is checked.
						<p>If this option is checked, Then you can edit the 
						String Duplication String while importing of the 3DXML 
						file as shown in Fig.<a href="#Fig.2">2</a></p>
						<p>The PLMExternal_ID attribute will be valuated such as:</p>
						<pre class="code">PLMExternal_ID inside the 3D XML file &#8220; + &#8220;duplication string&#8221; + increment</pre>
						<p>Where &quot;duplication string&quot; is the string of the 
						Import 3D XML command (e.g. &quot;-ImportedAsNew&quot; on [<a href="#Fig.2">Fig.2</a>] 
						)</p>
										
					</li>
					<li><strong>User defined identification string</strong> 
						option is unchecked.
						<p>If this option is checked, Then you cannot edit the 
						String Duplication String while importing of the 3DXML 
						file as shown in Fig.<a href="#Fig.4">4</a>. It will be </p>
						<pre class="code">&#8220;duplication string&#8221; + PLMExternal_ID inside the 3D XML file &#8220; + increment</pre>
						<p>Where &quot;duplication string&quot; is the string of the 
						Import 3D XML command (e.g. &quot;-titi&quot; on [<a href="#Fig.3">Fig.3</a>] 
						)</p>


						
						<table>
									<caption><a name="Fig.4">Fig.4</a> Automatic 
									Naming Based on Customization</caption>
									<tr>
										<td>
										<img alt="Import 3DXML Dialog Box" src="images/CAADocResources_ImportDlg2.png"/></td>
									</tr>
						</table>
						
						
					</li>
				</ol>
			</li>
			<li>If <kbd>Import as New</kbd> option is unchecked.
				<p>All the PLM Components will be created in database in &quot;read/only&quot; 
				mode, you could not apply modifications on them. The PLMExternal_ID 
				attribute will be valuated such as:</p>
				<pre class="code">PLMExternal_ID inside the 3D XML file</pre>
			</li>
		</ul>
		<p><strong>Where are given the PLM_ExternalID value of the PLM Components 
		inside 3D XML?</strong></p>
		<p>The &quot;How to Launch XXX &quot; section of each use case must specify 
		the PLM_ExternalID values. </p>
		<p><strong>How to choose the option?</strong></p>
		<ul>
			<li>If the use case <strong>modifies</strong> the input PLM components 
				you must use the &quot;Import as New&quot; option.
				<p>It means that the PLM_externalID of the imported PLM components 
				will be different as those of the 3D XML. At least an increment 
				is added. So you must execute the use case by taking account the 
				new naming. </p>
				<p>example : Suppose a PLM Component whose the PLM_ExternalID is
				<code>CAAAdpSaveRoot1</code> when it is saved inside a 3D XML file.
				</p>
				<p>Before executing the use case you must import the data. You use
				<strong>&quot;User defined identification string&quot; </strong>
				option<strong> </strong>, and the string is<strong> &quot;MyOwnComp&quot;.</strong> 
				The first import creates a PLM Component whose the PLM_ExternalID 
				is &quot;<strong>CAAAdpSaveRoot1MyOwnComp1&quot;. </strong>You must 
				use this string as input of the use case.</p>
				<pre class="code">CAAMyUseCase ... CAAAdpSaveRoot1MyOwnComp1</pre>
				<p>Now if you want re-execute the use case in the same condition 
				as the firs time, in other word using the data saved in 3D XML, 
				you must re-import the data. Since at the second import the PLM_ExternalID 
				value will be changed by<strong> &quot;CAAAdpSaveRoot1MyOwnComp2&quot;</strong>, 
				you will execute the use case like that:</p>
				<pre class="code">CAAMyUseCase ... CAAAdpSaveRoot1MyOwnComp2</pre>
			</li>
			<li>If the use case only <strong>browses</strong> the input PLM components 
				you can import in read/only the PLM components
				<p>Since the PLM_externalID of the imported PLM components is equal 
				to those of the 3D XML you can execute the use case like it is described 
				by the &quot;How to Launch the Use Case &quot; section. </p>
			</li>
		</ul>
	</li>
	<li>
		<p>You can ignore the <kbd>Other Option</kbd> check box.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article describes the operating systems and shows you how to set up the 
environments, build, and launch a use cases with Windows. It also shows how to import 
the use case PLM data from the supplied briefcases to your database.</p>
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>3</strong> [Sep 2007]</td>
		<td>Document updated for Version 6</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2005]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Apr 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
