<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Adding a Contextual Sub-Menu</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Adding a Contextual Sub-Menu</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to insert commands in the contextual menu when 
		selecting a combined curve instance.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrContextualSubMenu Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrContextualSubMenu Do</a></li>
					<li><a href="#How">How to Launch CAAMmrContextualSubMenu</a></li>
					<li><a href="#Where">Where to Find the CAAMmrContextualSubMenu 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how insert commands in the contextual menu 
associated with the combined curve [<a href="#References">1</a>]. Once this mechanical 
feature implements the <em>CATIEdit</em> interface [<a href="#References">2</a>], 
the commands will be added in a sub-menu of its contextual menu. So in other words, 
this article explains how to implement the <em>CATIContextualSubMenu</em> (AfrInterfaces 
framework) 
interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrContextualSubMenu Use Case</h2>
<p><code>CAAMmrContextualSubMenu</code> is a use case of the <code>CAAMechanicalModelerExtend.edu</code> 
framework that illustrates AfrInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrContextualSubMenu Do</h3>
<p><code>CAAMmrContextualSubMenu</code> enables you to add commands in the sub-menu 
of the contextual menu associated with the Combined Curve feature. The picture below 
shows the sub-menu of the Combined Curve. There are two pictures because, the last 
command can be either Deactivate or Activate. You will see how the switch can be 
done.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrCombCrvContextualMenuDeac.jpg" width="408" height="113"/></td>
		<td>
		<img alt="" src="images/CAAMmrCombCrvActivated.jpg" width="404" height="114"/></td>
	</tr>
</table>
<p>Once the Combined Curve implements <em>CATIEdit</em>, its contextual menu contains 
at the end the &quot;CombineCrv object&quot; item. This items contains a sub-menu 
which, by default, contains only the <code>Definition</code> item. In implementing 
the <em>CATIContextualSubMenu</em> interface on the Combined Curve you can insert 
other commands after the <code>Definition</code> item.</p>
<p>The new commands are <code>Parent/Children</code>, <code>Reset Properties,</code>
<code>Deactivate</code> or <code>Activate</code>. Four Dassault Syst&#232;mes commands. 
To reuse it, you should retrieve their command header identifiers [<a href="#References">3</a>]. 
The <kbd>Application Frame Structure Exposition</kbd> command enables you to find them.</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
    <li>Create a new 3D Shape from the "Add Services" 	
    <img alt="" src="images/AddServicesIcon.jpg" width="28" height="27"/> menu of top bar.  </li>
	<li>On the top bar, click right button-&gt;<kbd>Display</kbd>-&gt;<kbd>Customize...</kbd></li>
	<li>The <kbd>Customize</kbd> dialog box appears
		<ul>
			<li>Click the <kbd>Section</kbd> page</li>
			<li>Select a section, for example <kbd>Tools</kbd>. </li>
			<li>Click on <kbd>Add commands...</kbd> </li>
			<li>Select the <kbd>Application Frame Structure Exposition</kbd> command</li>
			<li>Click <kbd>Close</kbd></li>
		</ul>
	</li>
	<li>Launch the <kbd>Application Frame Structure Exposition</kbd> command
		<img alt="" height="32" src="images/CAAMmr_I_CAA2.jpg" width="35"/>.
		<p>
		<img alt="" src="images/CAAMmrCombCrvWorkExpo.jpg" width="319" height="312"/></p>
		<ul>
			<li>Select <code>CATMmrPartWks</code> (the Part Design app).</li>
			<li>Enter a Path in the Directory editor.</li>
			<li>Click <kbd>Print</kbd> - The CATMmrPartWks.txt file is generated.</li>
			<li>Click <kbd>OK</kbd>.</li>
		</ul>
	</li>
</ul>
<p>In the <strong>CATMmrPartWks.txt</strong> file, find out the &quot;Parent/Children&quot;, &quot;Reset 
Properties&quot;, &quot;Deactivate&quot; and &quot;Activate&quot; strings:</p>
<table>
	<tr>
		<td>
		<img alt="" height="106" src="images/CAAMmrCombCrvParentChild.jpg" width="241"/></td>
		<td>
		<img alt="" height="107" src="images/CAAMmrCombCrvResetProp.jpg" width="273"/></td>
	</tr>
	<tr>
		<td>
		<img alt="" height="109" src="images/CAAMmrCombCrvDeactivateCmd.jpg" width="261"/></td>
		<td>
		<img alt="" height="109" src="images/CAAMmrCombCrvActivateCmd.jpg" width="263"/></td>
	</tr>
</table>
<p>The identifiers of the command header instances are the <strong>Id</strong> strings, so
<strong>CATParentChildrenHdr</strong>, <strong>CATMmrPrtResetPropHdr</strong>, <strong>CATPrtInactiveHdr</strong> and <strong>CATPrtActiveHdr</strong> 
for the &quot;Parent/Children&quot;, &quot;Reset Properties&quot;, &quot;Deactivate&quot; 
and &quot;Activate&quot; commands respectively. These four identifiers will be associated 
with the starters of the menu.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrContextualSubMenu</h3>
<p>See the section entitled &quot;How to Launch the Combined Curve Use Case&quot; 
in &quot;Creating a New Geometrical Feature: The Combined Curve&quot; [<a href="#References">1</a>] 
for a detailed description of how this use case should be launched.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrContextualSubMenu Code</h3>
<p>The <code>CAAMmrContextualSubMenu</code> use case is made of one single class, 
the <em>CAAEMmrCombinedCurveContSubMenu</em> class, located in the <code>CAAMmrCombinedCurveUI.m</code> 
module of the <code>CAAMechanicalModelerExtend.edu</code> framework:</p>
<table>
	<tr>
		<td><code>stallRootFolder\CAADoc\CAAMechanicalModelerExtend.edu\CAAMmrCombinedCurveUI.m\</code></td>
	</tr>
</table>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To implement the <em>CATIContextualSubMenu</em> interface, there are three steps:</p>
<ol>
	<li><a href="#Step1">Creating the Sub-Menu Description Class</a></li>
	<li><a href="#Step2">Creating the Sub-Menu</a></li>
	<li><a href="#Step3">Checking the Activate/Deactivate Command</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Sub-Menu Description Class</h3>
<ol>
	<li>Create the CAAEMmrCombinedCurveContSubMenu.h file
		<pre class="code">#include &quot;CATBaseUnknown.h&quot;

class CATCmdAccess;

class CAAEMmrCombinedCurveContSubMenu : public CATBaseUnknown
{
  CATDeclareClass;

  public:

    CAAEMmrCombinedCurveContSubMenu();
    virtual ~CAAEMmrCombinedCurveContSubMenu();

    virtual CATCmdAccess * <strong>GetContextualSubMenu</strong>() ;
 
  private :

    CAAEMmrCombinedCurveContSubMenu(const CAAEMmrCombinedCurveContSubMenu &amp;iObjectToCopy);
    CAAEMmrCombinedCurveContSubMenu &amp; operator = (const CAAEMmrCombinedCurveContSubMenu &amp;iObjectToCopy);

  private :

    <strong>CATCmdAccess</strong>  *  _pMenu ;
    <strong>CATCmdStarter</strong> *  _pCAAMmrSwapActiveStr ;
};</pre>
		<p>The <code>GetContextualSubMenu</code> method returns <code>_pMenu</code> 
		created in the constructor class. <code>_pCAAMmrSwapActiveStr</code> is 
		the starter associated with the Activate or the Deactivate command, also 
		created in the constructor class.</p>
	</li>
	<li>Create the CAAEMmrCombinedCurveContSubMenu.cpp file
		<pre class="code">#include &quot;CAAEMmrCombinedCurveContSubMenu.h&quot;
#include &quot;CATCreateWorkshop.h&quot;

<strong>CATImplementClass</strong>(CAAEMmrCombinedCurveContSubMenu,
                  DataExtension,
                  CATBaseUnknown,
                  <strong>CombinedCurve</strong>);

#include &quot;TIE_CATIContextualSubMenu.h&quot;
TIE_<strong>CATIContextualSubMenu</strong>(CAAEMmrCombinedCurveContSubMenu);
...</pre>
		<p>The CAAEMmrCombinedCurveContSubMenu class states that it implements the
		<em>CATIContextualSubMenu</em> interface thanks to the <code>TIE_CATIContextualSubMenu</code> 
		macro. The <code>CATImplementClass</code> macro declares that the CAAEMmrCombinedCurveContSubMenu 
		class is a data extension, thanks to the <code>DataExtension</code> keyword, 
		that extends <em>CombinedCurve</em>. The third argument must always be set 
		as <em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension.</p>
		<pre class="code">...
CAAEMmrCombinedCurveContSubMenu::CAAEMmrCombinedCurveContSubMenu():<strong>_pMenu</strong>(NULL,<strong>_pCAAMmrSwapActiveStr</strong>(NULL)	
                      				   
{
    <a href="#Step2">Creating the Sub-Menu</a>
}

CAAEMmrCombinedCurveContSubMenu::~CAAEMmrCombinedCurveContSubMenu()
{
  
  if ( NULL != _pMenu) _pMenu-&gt;<strong>Release</strong>() ;
  _pMenu = NULL ;
}


CATCmdAccess *  CAAEMmrCombinedCurveContSubMenu::<strong>GetContextualSubMenu</strong>()
{
   <a href="#Step3">Checking the Activate/Deactivate Command</a>
   return (<strong>_pMenu</strong>);
}</pre>
		<p>In this implementation, the structure of menu is constant, <code>_pMenu</code> 
		is created in the constructor and released in the destructor. Otherwise, 
		you can create it in the <code>GetContextualMenu</code> method. But in this 
		case, you should release it in the destructor and at the beginning of the
		<code>GetContextualMenu</code> method.</p>
	</li>
	<li>Updating the Interface Dictionary
		<p>Update the interface dictionary, that is a file named, for example, CAAMechanicalModelerExtend.edu.dico, 
		whose directory's pathname is concatenated at run time in the CATDictionaryPath 
		environment variable, and containing the following declaration to state 
		that the <em>CombinedCurve</em> component implements the <em>CATIContextualSubMenu</em> 
		interface, and whose code is located in the libCAAMmrCombinedCurveUI shared 
		library or DLL.</p>
		<pre class="code">CombinedCurve CATIContextualSubMenu libCAAMmrCombinedCurveUI</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Sub-Menu</h3>
<pre class="code"><strong>  NewAccess</strong>(CATCmdStarter,pCAAMmrResetPropertiesStr,CAAMmrResetPropertiesStr);
  NewAccess(CATCmdStarter,pCAAMmrParentChildrenStr,CAAMmrParentChildrenStr);

  CATIMechanicalProperties * pMechProp = NULL ;
  HRESULT rcMechProp = QueryInterface(IID_CATIMechanicalProperties, (void**) &amp; pMechProp);
  if ( SUCCEEDED(rcMechProp) )
  {
    NewAccess(CATCmdStarter,pCAAMmrSwapActiveStr,CAAMmrSwapActiveStr);
    <strong>_pCAAMmrSwapActiveStr</strong> = pCAAMmrSwapActiveStr ;
  }

  _pMenu = pCAAMmrParentChildrenStr ;
  <strong>SetAccessNext</strong>(pCAAMmrParentChildrenStr,pCAAMmrResetPropertiesStr);

  if ( NULL != _pCAAMmrSwapActiveStr )
  { 
    SetAccessNext(pCAAMmrResetPropertiesStr,_pCAAMmrSwapActiveStr);
  }

  <strong>SetAccessCommand</strong>(pCAAMmrResetPropertiesStr,&quot;<strong>CATMmrPrtResetPropHdr</strong>&quot;);
  SetAccessCommand(pCAAMmrParentChildrenStr,&quot;<strong>CATParentChildrenHdr</strong>&quot;);</pre>
<p>The menu is created thanks macros contained in the <code>CATCreateWorkshop</code> 
file. For each item there are three macros. Here are the explanations for the Reset 
Properties and the Activate/Deactivate commands:</p>
<ul>
	<li>NewAccess
		<p>First, the command starter is created as a <em>CATCmdStarter</em> instance 
		using the <code>NewAccess</code> macro. <code>pCAAMmrResetPropertiesStr</code> 
		is the variable used to handle a pointer to that instance, and <code>CAAMmrResetPropertiesStr</code> 
		is its identifier.</p>
		<p>The command starter for the Activate/Deactivate command is created only 
		if the combined curve implements the <em>CATIMechanicalProperties</em> interface. 
		This starter, <strong><code>_pCAAMmrSwapActiveStr</code></strong>, is kept as data 
		member to be used in the <code>GetContextualMenu</code> method.</p>
	</li>
	<li>SetAccessNext
		<p>The Reset Properties command starter is set as the Next of the Parent/Children 
		item. If the <strong><code>_pCAAMmrSwapActiveStr</code></strong> starter exists, it 
		is located after the &quot;Reset Properties&quot; starter.</p>
	</li>
	<li>SetAccessCommand
		<p>The Reset Properties command header is associated with this command starter 
		using the <code>SetAccessCommand</code> macro. The second parameter is the 
		Reset Properties command header identifier defined as the first parameter 
		of the command header constructor. For the Activate/Deactivate command, 
		the association is done when the contextual menu must be displayed: in the
		<code>GetContextualMenu</code> method.</p>
	</li>
</ul>
<p>In a contextual menu or in a contextual sub menu implementation, it is not recommended 
to create command headers. So you should reuse command header identifiers created 
previously. To be sure that the command header will be created when the menu will 
be invoked, you should use an identifier created in a workshop, or in Add-ins of 
the workshop. The Workshop Exposition command can help you to retrieve the Dassault 
Syst&#232;mes identifiers.</p>
<p>Refer to the technical article entitled &quot;Command Headers&quot; [<a href="#References">3</a>] 
for complete details about the re-usage of the command header identifiers.</p>
<p>The picture below shows the relationship between the starters and shows that
<code>_pMenu</code> is the first starter of the chain.</p>
<p>
<img alt="" height="102" src="images/CAAMmrCombCrvContextualMenuChain.jpg" width="693"/></p>
<p>where <code>pXXX1</code> and <code>pXXX2</code> are starters that you will have 
added so in the code:</p>
<pre class="code"> ...  
   <strong>NewAccess</strong>(CATCmdStarter, <code>pXXX1</code>, <code>XXX1</code>);
   NewAccess(CATCmdStarter, <code>pXXX2</code>, <code>XXX2</code>);

   <strong>SetAccessCommand</strong>(<code>pXXX1</code> ,&quot;<strong>XXX1Hdr</strong>&quot;);
   SetAccessCommand(<code>pXXX2</code>,&quot;<strong>XXX2Hdr</strong>&quot;);

   <strong>SetAccessNext</strong>(pCAAMmrResetPropertiesStr,<code>pXXX1</code> );
   <strong>SetAccessNext</strong>(<code>pXXX1</code> ,<code>pXXX2</code> );
...</pre>
<table class="Remark">
<tr>
<td class="Remark"><span class="run-in">Warning</span>:
The <code>_pMenu</code> destruction deletes also the chained <em>CATCmdAccess</em> 
class instances.
</td>
</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Checking the Activate/Deactivate Command</h3>
<pre class="code">    if ( NULL != _pCAAMmrSwapActiveStr )
  {
    CATIMechanicalProperties * pMechProp = NULL ;
    HRESULT rcMechProp = QueryInterface(IID_CATIMechanicalProperties, (void**) &amp; pMechProp);
    if ( SUCCEEDED(rcMechProp) )
    {
      int IsFeatureDeactivate = pMechProp-&gt;<strong>IsInactive</strong>();
        if ( 0 == IsFeatureDeactivate )
      { 
        <strong>SetAccessCommand</strong>(_pCAAMmrSwapActiveStr,&quot;<strong>CATPrtInactiveHdr</strong>&quot;);        }else
      {
        SetAccessCommand(_pCAAMmrSwapActiveStr,&quot;<strong>CATPrtActiveHdr</strong>&quot;);        }
...</pre>
<p>The <code>GetContextualMenu</code> method is called each time the contextual 
menu must be displayed. So it is at this moment that you must set the right command 
to the <code>_pCAAMmrSwapActiveStr</code> starter.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to implement the <em>CATIContextualSubMenu</em> interface 
and how to retrieve Dassault Syst&#232;mes command header identifiers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrUcCombinedCurveSamplesOverview.htm">Creating a New Geometrical 
		Feature: the Combined Curve</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAMmrUcCombinedCurveCATIEdit.htm">Editing Combined Curves</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaCommandHeaders.htm">
		Understanding the Command Headers</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2005]</td>
		<td>Document updated to take the CATIMechanicalProperties interface into 
		account</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jan 2011]</td>
		<td>Document updated for V6 modifications</td>
	</tr>
	<tr>
	    <td>Version: <strong>4</strong> [Mai 2014]</td>
	    <td>Document updated for 3DEXPERIENCE platform migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
