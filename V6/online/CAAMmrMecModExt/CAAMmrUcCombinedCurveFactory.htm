<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Combined Curve's Factory Interface</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Combined Curve's Factory Interface</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create new Combined Curve Instances by instantiating 
		the Combined Curve StartUp.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrCombinedCurve Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrCombinedCurve Do</a></li>
					<li><a href="#How">How to Launch CAAMmrCombinedCurve</a></li>
					<li><a href="#Where">Where to Find the CAAMmrCombinedCurve Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case illustrates how to create new Combined Curve instances.</p>
<p>To achieve this goal, two steps are necessary:</p>
<ol>
	<li>First, defining a Combined Curve Factory Interface and choosing what object 
		will implement it</li>
	<li>Then, implementing this Interface to instantiate the Combined Curve StartUp 
		into Combined Curve Instances.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrCombinedCurve Use Case</h2>
<p><code>CAAMmrCombinedCurve</code> is a use case of the <code>CAAMechanicalModelerExtend.edu</code> 
framework that illustrates <code>the Mechanical Modeler</code> extend capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAMmrCombinedCurve Do</h3>
<p>This use case makes it possible to <strong>create run time Instances of Combined Curve 
from the Combined Curve StartUp</strong>. Of course, this new skill means a new Interface. 
It will be called <em>CAAIMmrCombinedCurveFactory</em>. Its definition is straightforward, 
it could be translated in &quot;create a Combined Curve from its two input curves 
and its two input directions&quot;.</p>
<p><em>CAAIMmrCombinedCurveFactory</em> Interface's definition is very simple. A single 
method is enough to create any Combined Curve, whatever its input Curves and Directions 
are:</p>
<pre class="code">CAAIMmrCombinedCurveFactory::CreateCombinedCurve( Curve1,
                                                  Direction1,
                                                  Curve2,
                                                  Direction2 , 
                                                  Output CombinedCurve )</pre>
<p>Now that you have defined this new factory Interface, you have to choose a good 
candidate to implement it. As described in the technical article entitled &quot;Creating 
a New StartUp deriving from a Mechanical StartUp&quot; [<a href="#References">1</a>], 
the candidate is <code>CATPrtCont</code> the container of specifications [<a href="#References">2</a>].</p>
<p>To create Combined Curve instances, <code>CATPrtCont</code> has to implement
<em>CAAIMmrCombCrvFactory</em> interface and CombinedCurve has to implement an interface 
of type, <em>CAAIMmrCombinedCurve</em> [<a href="#References">3</a>], to valuate the 
attributes.</p>
<p><img alt="" height="424" src="images/CombinedCurveInstantiation.jpg" width="555"/></p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrCombinedCurve</h3>
<p>See the section entitled &quot;How to Launch the Combined Curve Use Case&quot; 
in &quot;Creating a New Geometrical 
Feature: the Combined Curve&quot; [<a href="#References">8</a>] for a detailed description of how 
this use case should be launched.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrCombinedCurve Code</h3>
<p>The CAAMmrCombinedCurve use case is made of a several classes located in the 
CAAMmrCombinedCurve.m module of the CAAMechanicalModelerExtend.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModelerExtend.edu\CAAMmrCombinedCurve.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">7</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>In the src directory
		<ul>
			<li>CATIMmrCombCrvFactory.cpp.</li>
			<li>TIE_CATIMmrCombCrvFactory.cpp.</li>
			<li>CATEMmrCombCrvFactory.cpp, the implementation of the <em>CATIMmrCombCrvFactory</em>
				interface.</li>
		</ul>
	</li>
	<li>In the LocalInterfaces directory
		<ul>
			<li>CATEMmrCombCrvFactory.h.</li>
		</ul>
	</li>
</ul>
<p>In the PublicInterfaces of the CAAMechanicalModelerExtend.edu framework there 
is the CATIMmrCombCrvFactory.h file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>This use case is divided into the following steps:</p>
<ul>
	<li><a href="#Step1">Defining the Combined Curve Factory Interface</a></li>
	<li><a href="#Step2">Implementing the Combined Curve Factory Interface</a>
		<ul>
			<li><a href="#Step21">Creating a Combined Curve Instance</a></li>
			<li><a href="#Step22">Subscribing to Repository for Configuration Data Storage</a></li>
			<li><a href="#Step23">Getting Feature Type Information for BackUp / StartUp Management 
- For Geometrical Features Only</a></li>
			<li><a href="#Step24">Setting Default Values for the Instance Attributes</a></li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Defining the Combined Curve Factory Interface</h3>
<p>The Combined Curve Factory Interface (<em>CAAIMmrCombCrvFactory</em>) is pretty 
simple: a single method is enough to create a Combined Curve.</p>
<p>Here is its description. This is the main part of CAAIMmrCombCrvFactory.h:</p>
<pre class="code">class ExportedByCAAMmrCombinedCurve CAAIMmrCombCrvFactory: public CATBaseUnknown
{
  CATDeclareInterface;
  public:
   virtual HRESULT CreateCombinedCurve ( CATBaseUnknown *ipCurve1,
                                         CATBaseUnknown *ipDirection1,
                                         CATBaseUnknown *ipCurve2,
                                         CATBaseUnknown *ipDirection2,
                                         CAAIMmrCombinedCurve *&amp;opCombinedCurve ) = 0 ;
}</pre>
<p>Do not hesitate to consult the Object Modeler documentation if you have trouble 
defining a new interface [<a href="#References">4</a>] (what to write in .h, .cpp 
and .tsrc files).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing the Combined Curve Factory Interface</h3>
<p>The object chosen as Combined Curve Factory extends the &quot;<code>CATPrtCont</code> &quot; 
late type. The following code extracted from CATEMmrCombCrvFactory.cpp declares 
that <code>CATPrtCont</code> is extended to implement the Combined Curve factory 
interface.</p>
<pre class="code">CATImplementClass (CAAEMmrCombCrvFactory,
                   DataExtension,
                   CATBaseUnknown,
                   <strong>CATPrtCont</strong>);

// Tie the implementation to its interface
// ---------------------------------------
#include &quot;TIE_CAAIMmrCombCrvFactory.h&quot; // needed to tie the implementation to its interface
TIE_CAAIMmrCombCrvFactory( CAAEMmrCombCrvFactory);</pre>
<p>As usual, update your dictionary to declare that <code>CATPrtCont</code> implements
<em>CAAIMmrCombCrvFactory</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Creating a Combined Curve Instance</h4>
<p>To create a new Combined Curve Instance, all you need to do is to instantiate 
the Combined Curve StartUp. It has been stored in the Combined Curve Catalog file 
named CAAMmrCombinedCurveCatalog.CATfct.</p>
<p>Let's look at CATEMmrCombCrvFactory.cpp again to see how the Combined Curve StartUp 
is instantiated.</p>
<p>First, we must declare the necessary <strong>credentials</strong> for the CombinedCurve 
application. This requires three keys: the ClientId, the PartnerId (for all mechanical 
modeler extend use cases we will use "CAAMmrExtMechanicalModeler") and the catalog 
name.</p>
<pre class="code">...
  CATUnicodeString ClientId("SAMPLES");
  CATUnicodeString PartnerId = "CAAMmrExtMechanicalModeler";
  CATUnicodeString CatalogName("CAAMmrCombinedCurveCatalog");
  CATFmCredentials CredentialForCC;
  rc = CredentialForCC.RegisterAsApplicationBasedOn(CATFmFeatureModelerID, PartnerId); 
  if (SUCCEEDED(rc))
    rc = CredentialForCC.RegisterAsCatalogOwner(CatalogName,ClientId);
...</pre>
<p>Then, we declare a container facade and a start-up facade, using the declared 
credentials.</p>
<pre class="code">...
CATFmContainerFacade CombinedCurveContainerFacade(CredentialForCC, this);

CATUnicodeString StartupType = "CombinedCurve";
CATFmStartUpFacade CombinedCurveStartUpFacade(CredentialForCC, StartupType);
...</pre>
<p>Finally we instantiate the Combined Curve StartUp with the <code>InstanciateIn
</code>method.</p>
<pre class="code">...
CATFmFeatureFacade CombinedCurveFeatFacade;
rc = CombinedCurveStartUpFacade.InstantiateIn(CombinedCurveContainerFacade,CombinedCurveFeatFacade);
...</pre>
<p>You can then retrieve from the CATFmfeatureFacade a pointer on any needed interface 
using <code>QueryInterfaceOnFeature</code> method.</p>
<pre class="code">...
CATIMmiMechanicalFeature *piMechFeat = NULL;
rc = CombinedCurveFeatFacade.QueryInterfaceOnFeature(IID_CATIMmiMechanicalFeature,(void**)&amp;piMechFeat);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Subscribing to Repository for Configuration Data Storage</h4>
<p>To define versioning on your mechanical feature [<a href="#References">5</a>], 
you have to initialize a data needed to store the software configuration on your 
feature.<br />
This initialization is done calling the method <code>CreateConfigurationData</code> 
of <em>CATIMmiAlgoConfigServices</em> interface.</p>
<pre class="code">...
// Create CATIMmiAlgoConfigServicesServices component
CATIMmiAlgoConfigServices *piAlgoConfigServices = NULL;  
rc = CATMmiExtendServicesFactory::CreateAlgoConfigServicesAccess(piAlgoConfigServices);

// Create configuration data
if (SUCCEEDED(rc) &amp;&amp; piAlgoConfigServices)
{
  rc = piAlgoConfigServices-&gt;CreateConfigurationData(piMechFeat);

...</pre>
<p>Your feature can now be versioned! This means that its mechanical behaviors can 
be fixed for next software generation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Getting Feature Type Information for BackUp / StartUp Management 
- For Geometrical Features Only</h4>
<p>BackUp / StartUp is a specific mode which occurs when something goes wrong with 
the CAA feature (when startup catalog and code are not longer available on the runtime 
view) [<a href="#References">6</a>].</p>
<p>As Combined Curve is a geometrical feature deriving from <strong>GeometricalElement3D</strong>, 
you need to define and store its type according to <strong>CATIInputDescription</strong> implementation. 
This information, stored on the instance, will be useful in <strong>BackUpStartUp</strong> 
Mode to determine which behaviors are authorized.</p>
<p>This operation is done after instantiation, calling the method <code>SetFeatureType</code> 
of <em>CATIMmiFeatureAttributes</em> interface.</p>
<pre class="code">...
CATIInputDescription_var spInputDescriptionOnCombinedCurve = spCombinedCurve;
if (spInputDescriptionOnCombinedCurve != NULL_var)
{
  CATIInputDescription::FeatureType Feature_type = CATIInputDescription::FeatureType_Unset;
  rc = spInputDescriptionOnCombinedCurve-&gt;GetFeatureType(Feature_type);
  ...    
      
// Create CATIMmiFeatureAttributes component
CATIMmiFeatureAttributes *piFeatureAttributes = NULL;  
rc = CATMmiExtendServicesFactory::CreateFeatureAttributesAccess(piFeatureAttributes);
if (SUCCEEDED(rc) &amp;&amp; piFeatureAttributes)
{
  // Set the feature type
  rc = piFeatureAttributes-&gt;SetFeatureType(spCombinedCurve, Feature_type);
	         
...</pre>
<p>You have now defined the feature type of your Combined Curve. Let's now valuate 
this instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step24"></a>Setting Default Values for the Instance Attributes</h4>
<p>The attributes of this newly Combined Curve Instance are still empty. The interface 
for Combined Curve, <em>CAAIMmrCombinedCurve</em> has methods to fill in the Combined 
Curve instance's attributes.</p>
<pre class="code">...
rc = CombinedCurveFeatFacade.QueryInterfaceOnFeature(IID_CAAIMmrCombinedCurve,(void**)&amp;opCombinedCurve);
...
    
opCombinedCurve-&gt;SetCurve    ( 1 , ipiSpecOnCurve1     );
opCombinedCurve-&gt;SetDirection( 1 , ipiSpecOnDirection1 );
opCombinedCurve-&gt;SetCurve    ( 2 , ipiSpecOnCurve2     );
opCombinedCurve-&gt;SetDirection( 2 , ipiSpecOnDirection2 );   
...</pre>
<p>A complete documentation of this Interface is available [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to create Combined Curve Instances by instantiating 
the Combined Curve StartUp retrieved in the Combined Curve StartUp Catalog file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrTaCreatingNewFeat.htm">Creating a New StartUp Deriving 
		from a Mechanical StartUp</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaContentsSpecCont1.htm">
		The Geometrical Feature Sets</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAMmrUcCombinedCurveInterface.htm">Creating Combined Curve's 
		Interface of Type</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMCreatingInterfaces.htm">
		Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAMmrTaVersioningMechFeat.htm">Configuration and Versioning</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAMmrTaBackupStartUp.htm">Geometrical Backup StartUp</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAMmrUcCombinedCurveSamplesOverview.htm">Creating a New Geometrical 
		Feature: the Combined Curve</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jan 2007]</td>
		<td>Document updated (Algorithm Services and BackUp/StartUp 
		data)</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jul 2007]</td>
		<td>Integration of CATOsmSUHandler</td>
	</tr>
	<tr>
		<td>Version: <strong>5</strong> [Jan 2011]</td>
		<td>Document updated for V6 modifications</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
