<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Combined Curve's Interface of Type</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Combined Curve's Interface of Type</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create and implement an interface to retrieve 
		and modify the attribute values of the Combined Curve.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrCombinedCurve Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrCombinedCurve Do</a>
					</li>
					<li><a href="#How">How to Launch CAAMmrCombinedCurve</a></li>
					<li><a href="#Where">Where to Find the CAAMmrCombinedCurve Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows how to <strong>define and implement an interface on the Combined 
Curves</strong>. This interface summarizes what is specific to this new feature. Refer 
to the article entitled &quot;Creating a New StartUp from a Mechanical StartUp&quot; 
for details [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrCombinedCurve Use Case</h2>
<p><code>CAAMmrCombinedCurve</code> is a use case of the <code>CAAMechanicalModelerExtend.edu</code> 
framework that illustrates <code>the Mechanical Modeler</code> extend capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAMmrCombinedCurve Do</h3>
<p>This use case defines and implements a new interface modeling Combined Curves 
specific attributes. As a matter of fact, you only have to add methods to get and 
set the input Curves and Direction of Combined Curves. This interface is called
<em>CAAIMmrCombinedCurve</em>.</p>
<p>Consequently, <strong>CAAIMmrCombinedCurve has four methods</strong>:</p>
<ol>
	<li><code>GetCurve</code></li>
	<li><code>SetCurve</code></li>
	<li><code>GetDirection</code></li>
	<li><code>SetDirection</code>.</li>
</ol>
<p>To implement this new interface, you must define a new extension of the Combined 
Curve late type. Logically, its class name is <em>CAAEMmrCombinedCurve</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrCombinedCurve</h3>
<p>See the section entitled &quot;How to Launch the Combined Curve Use Case&quot; 
in &quot;Creating a New Geometrical 
Feature: the Combined Curve&quot; [<a href="#References">4</a>] for a detailed description of how 
this use case should be launched.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrCombinedCurve Code</h3>
<p>The CAAMmrCombinedCurve use case is made of a several classes located in the 
CAAMmrCombinedCurve.m module of the CAAMechanicalModelerExtend.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModelerExtend.edu\CAAMmrCombinedCurve.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The code is located in:</p>
<ul>
	<li>In the src folder:
		<ul>
			<li>CAAIMmrCombinedCurve.cpp</li>
			<li>TIE_CAAIMmrCombinedCurve.cpp</li>
			<li>CAAEMmrCombinedCurve.cpp, the implementation of the <em>CAAIMmrCombinedCurve</em> 
				interface.</li>
		</ul>
	</li>
	<li>In the LocalInterfaces folder:
		<ul>
			<li>CAAEMmrCombinedCurve.h.</li>
		</ul>
	</li>
</ul>
<p>In the PublicInterfaces folder of the <code>CAAMechanicalModelerExtend.edu</code> framework 
there is the CAAIMmrCombinedCurve.h file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Combined Curve have their interface of type called <em>CAAIMmrCombinedCurve</em>. 
This interface deals with specific properties of Combined Curve, that is to get 
and set its two input curves and its two input directions. This interface is implemented 
according to the following steps:</p>
<ul>
	<li><a href="#Step1">Defining the Combined Curve Interface</a></li>
	<li><a href="#Step2">Implementing the Combined Curve Interface</a>
		<ul>
			<li><a href="#Step3">Setting a Combined Curve Attribute Value</a></li>
			<li><a href="#Step4">Getting a Combined Curve Attribute Value</a></li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Defining the Combined Curve Behavior Interface</h3>
<p><em>CAAIMmrCombinedCurve</em>.h declares this new interface (associated with
<em>CAAIMmrCombinedCurve</em>.cpp and TIE_CAAIMmrCombinedCurve.tsrc).</p>
<p>Four methods are declared to get/set input curves and to get/set input directions. 
This is a good compromise between the interface's completeness and shortness.</p>
<pre class="code">class ExportedByCAAMmrCombinedCurve CAAIMmrCombinedCurve : public CATBaseUnknown
{
  CATDeclareInterface;
  public:

   virtual HRESULT SetCurve     ( int iNum ,
                                  CATBaseUnknown *ipCurve )      = 0 ;
   virtual HRESULT GetCurve     ( int iNum ,
                                  CATBaseUnknown *&amp;opCurve )     = 0 ;
   virtual HRESULT SetDirection ( int iNum , 
                                  CATBaseUnknown *ipDirection )  = 0 ;
   virtual HRESULT GetDirection ( int iNum ,
                                  CATBaseUnknown *&amp;opDirection ) = 0 ;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing the Combined Curve Behavior Interface</h3>
<p>The object chosen to implement Combined Curve Interface extends the &quot;CombinedCurve&quot; 
late type. The following code extracted from CAAEMmrCombinedCurve.cpp declares that 
CombinedCurve is extended to implement the Combined Curve Interface.</p>
<pre class="code">...
CATImplementClass ( CAAEMmrCombinedCurve,
                    DataExtension,    
                    CATBaseUnknown,
                    <strong>CombinedCurve</strong> );

// Tie the implementation to its interface
// ---------------------------------------

#include &quot;TIE_CAAIMmrCombinedCurve.h&quot; // needed to tie the implementation to its interface
TIE_CAAIMmrCombinedCurve(CAAEMmrCombinedCurve);
...</pre>
<p>Add to your dictionary the line declaring CombinedCurve implements CAAIMmrCombinedCurve 
interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting a Combined Curve Attribute Value</h3>
<p>As for the implementation of factory interface, it is necessary to 
start by declaring the credentials needed for the application.</p>
<pre class="code">...
  CATUnicodeString ClientId("SAMPLES");
  CATUnicodeString PartnerId = "CAAMmrExtMechanicalModeler";
  CATUnicodeString CatalogName("CAAMmrCombinedCurveCatalog");
  CATFmCredentials CredentialForCC;
  rc = CredentialForCC.RegisterAsApplicationBasedOn(CATFmFeatureModelerID, PartnerId); 
  if (SUCCEEDED(rc))
    rc = CredentialForCC.RegisterAsCatalogOwner(CatalogName,ClientId);
...</pre>
<p>You also need to declare the feature facades for both the CombinedCurve 
using the declared credentials and the geometrical element to set, for which credentials 
are not necessary (this element will not be modified during the process).</p>
<pre class="code">...
CATFmFeatureFacade FeatFacadeOnCombinedCurve(CredentialForCC, this);
...
CATFmFeatureFacade FeatFacadeOnCurve;
FeatFacadeOnCurve = ipCurve;
...</pre>
<p>You then have to get the key of the attribute associated with the asked curve. 
You also need to create an attribute value for the curve to set.</p>
<pre class="code">...
// Valuate attribute key
CATFmAttributeName AttrKey;
if (1 == iNum)
  AttrKey = CATFmAttributeName("Curve1");
else
  AttrKey = CATFmAttributeName("Curve2");

// Create an attribute value for the Curve
CATFmAttributeValue FmAttrValue;
FmAttrValue.SetFeature(FeatFacadeOnCurve); 
 ...</pre>
<p>If the input feature is a BRep feature it must be aggregated by the combined 
curve. A BRep feature must always be aggregated by someone, to be deleted.
If it is already aggregated, it is an error.</p>
<pre class="code">...
CATIMmiUseMfBRep_var spMfBRep = ipCurve; 
if (NULL_var != spMfBRep)
{
  CATFmAttributeValue Father;
  rc = FeatFacadeOnCurve.GetParentFeature(Father);

  if (FAILED(rc)) // No parent
  {
    CATIMmiUseBasicInsertion_var spBasicInsertion = ipCurve; 
    CATIMmiMechanicalFeature_var spTarget = this;
	     
    if (spBasicInsertion != NULL_var &amp;&amp; spTarget != NULL_var)
      rc = spBasicInsertion-&gt;InsertInside(spTarget);
...</pre>
<p>Then, you can set the attribute value on the CombinedCurve object.</p>
<pre class="code">...
if (SUCCEEDED(rc))
  rc = FeatFacadeOnCombinedCurve.SetValue(AttrKey, FmAttrValue);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Getting a Combined Curve Attribute Value</h3>
<p>The <code>GetCurve</code> method works just like the implementation of <code>
CAAIMmrCombinedCurve::SetCurve</code> method. It uses the <code>CATFmAttributeFacade::GetValue</code> 
method instead of <code>CATFmAttributeFacade::SetValue</code>.</p>
<pre class="code">...
CATFmFeatureFacade FeatFacadeOnCombinedCurve(_CredentialForCC, this);

// Valuate attribute key
CATFmAttributeName AttrKey;
if ( 1 == iNum )
  AttrKey = CATFmAttributeName("Curve1");
else
  AttrKey = CATFmAttributeName("Curve2");

// Get the feature attribute
CATFmAttributeValue FmAttrValue;
rc = FeatFacadeOnCombinedCurve.GetValue(AttrKey, FmAttrValue);

if (SUCCEEDED(rc))
{
  // Get the Curve feature facade
  CATFmFeatureFacade FeatFacadeOnCurve; 
  rc = FmAttrValue.GetFeature(FeatFacadeOnCurve);

  // Get the Curve object
  if (SUCCEEDED(rc))
    rc = FeatFacadeOnCurve.QueryInterfaceOnFeature(IID_CATBaseUnknown,(void**)&amp; opCurve);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to define and implement a new interface enabling to 
easily set or retrieve the Combined Curve's attributes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrTaCreatingNewFeat.htm">Creating a New StartUp Deriving 
		from a Mechanical StartUp</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAMmrUcCombCrvCatalog.htm">Creating Combined Curve's Catalog</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrUcCombinedCurveSamplesOverview.htm">Creating a New Geometrical 
		Feature: the Combined Curve</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Dec 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jan 2011]</td>
		<td>Document updated for V6 modifications</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
