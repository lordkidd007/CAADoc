<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Building Combined Curves</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Building Combined Curves</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to build the result of the combined curve.
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrCombinedCurve Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAMmrCombinedCurve Use Case 
						Do</a></li>
					<li><a href="#How">How to Launch CAAMmrCombinedCurve</a></li>
					<li><a href="#Where">Where to Find the CAAMmrCombinedCurve Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case demonstrates how to <strong>build</strong> the result of a geometrical feature 
which is a wireframe feature. The build is done by the update mechanism through 
the <em>CATIFmFeatureBehaviorCustomization</em> interface. The article entitled &quot;Integrating 
a New Geometrical Feature in the Update Mechanism&quot; [<a href="#References">1</a>] 
explains in details this interface and how to implement it.</p>
<p>The use case can also build the result, a choice managed by the <em>CATIMechanicalProperties</em> 
interface [<a href="#References">7</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrCombinedCurve Use Case</h2>
<p>CAAMmrCombinedCurve is a use case of the CAAMechanicalModelerExtend.edu framework that illustrates the 
Mechanical Modeler extended capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAMmrCombinedCurve Use Case Do</h3>
<p>This article explains how the Combined Curve implements the <strong><em>CATIFmFeatureBehaviorCustomization</em></strong> 
interface. This interface is called whenever someone wants to <strong>update</strong> an object. 
The <code>Build</code> method, the unique method of this interface produces:</p>
<ul>
	<li>An <strong>associative geometric result</strong> computed by objects coming from the 
		Geometric Modeler's Frameworks. This result is a <em>CATBody</em>, a topological 
		object, called &quot;Topo&quot; on the picture below [<a href="#Fig1">Fig.1</a>].</li>
	<li><strong>A scope</strong> [<a href="#References">2</a>]: to ensure the Combined Curve's 
		life cycle and make it reusable by other mechanical features, the <code>
		Build</code> method constructs an object which manages the access stability 
		of the <em>CATCell</em> of the <em>CATBody</em>. This object is a scope created 
		by the <strong>procedural report</strong> of the Combined Curve.</li>
	<li><strong>A Configuration</strong> [<a href="#References">8</a>]: To ensure the versioning 
		of the Combined Curve features, the <code>Build</code> method retrieves 
		the software level (SoftwareConfiguration) which will be used to compute 
		Built result. On the first <code>Build</code> call, the AlgorithmConfiguration 
		is set on the feature instance to keep this information.</li>
</ul>
<p>The following picture explains the process of the <code>Build</code> method in 
the case of a surfacic (wireframe) feature:</p>
<table>
	<caption><a name="Fig1">Fig.1</a>: Surfacic Feature Build</caption>
	<tr>
		<td>
		<img alt="Surfacic Feature Build" height="206" src="images/CAAMmrBuildSurfacic.jpg" width="680"/></td>
	</tr>
</table>
<p>All the input specifications of the feature will be followed by the procedural 
report. The <em>CATIMechanicalProperties</em> interface will be used to check if the 
result must be built of not.</p>
<p>The final part of the Use Case describes how to <strong>manage any potential error</strong> 
that may occur during the Combined Curve building.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrCombinedCurve</h3>
<p>See the section entitled &quot;How to Launch the Combined Curve Use Case&quot; 
in &quot;Creating a New Geometrical Feature: The Combined Curve&quot; [<a href="#References">10</a>] 
for a detailed description of how this use case should be launched.</p>
<p>Launch CATIA, when the application is ready, follow the scenario described below:</p>
<ul>
	<li><strong>Open CAAMmrCombinedCurve</strong> (*).</li>
	<li>Launch <kbd>Generative Shape Design</kbd> app from the <kbd>3D</kbd> quadrant of the compass.</li>
	<li><strong>Right</strong> click the <strong>Combined Curve</strong> and select <kbd>Deactivate</kbd> 
		in the <kbd>object</kbd> sub-menu.</li>
	<li><strong>Right</strong> click the <strong>Combined Curve</strong> and select <kbd>Activate</kbd> 
		in the <kbd>object</kbd> sub-menu.</li>
</ul>
<p>The following pictures show the <strong>CAACombinedCurve feature, on left when the 
result of the Combined Curve is computed, and on right otherwise.</strong></p>
<table>
	<tr>
		<td>
		<img alt="" height="284" src="images/CAAMmrCatalogIntegration-PartCombCrv_P2.jpg" width="358"/></td>
		<td>&nbsp;</td>
		<td>
		<img alt="" height="282" src="images/CAAMmrCombCrvDeactivated.jpg" width="340"/></td>
	</tr>
</table>
<p>On right note that the icon of the combined curve shows that the geometrical 
feature is deactivated:<img alt="" height="47" src="images/CAAMmrCombCrvDeactivatedIcon.jpg" width="220"/></p>
<p>(*) This represents the Input Model, loaded in the PROVIDER. We have provided 
the CAAMmrCombinedCurve.3dxml file, at the path specified below.</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModelerExtend.edu\InputData\CAAMmrCombinedCurve.3dxml\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">9</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Input Model with the following attributes:, which 
needs to be imported to the PROVIDER, you are working with.</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: CAAMmrCombinedCurve</li>
</ul>
<p><strong>Attention</strong>: Its mandatory that you provide a suitable prefix to the PLM_ExternalID 
of the Input Model, while importing the file, to ensure that data stored in the 
PROVIDER, is unique.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrCombinedCurve Code</h3>
<p>The CAAMmrCombinedCurve use case is made of class <em>CAAEMmrCombinedCurveBehavior</em>, 
located in the CAAMmrCombinedCurve.m module of the CAAMechanicalModelerExtend.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModelerExtend.edu\CAAMmrCombinedCurve.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">9</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>By implementing the <em>CATIFmFeatureBahaviorCustomization</em> interface, you 
will define how a Combined Curve is build, i.e. how to compute the two extruded 
surfaces and their intersection, and how to integrate these operations in the procedural 
journal. This interface contains one method, the <code>Build</code> method, whose 
contents is the following:</p>
<pre class="code">...
HRESULT CAAEMmrCombinedCurveBehavior::Build ()
{
   HRESULT rc = E_FAIL ;
   
   <a href="#Step1">Declaring the Useful Pointers</a>
   
   CATTry
   {
      <a href="#Step2">Checking the Build Activation</a>
      if ( DeactivateState == 0 )
      {
         <a href="#Step3">Removing All Possible Update Errors Associated with the Combined Curve</a>
         <a href="#Step4">Retrieving Data for the Procedural Report</a>
         <a href="#Step5">Creating the Procedural Report</a>
         <a href="#Step6">Running the Topological Operators</a> 
         <a href="#Step7">Storing the Procedural Report and the Algorithm Configuration</a>
         <a href="#Step8">Cleaning the Useless Data</a>
      }
   }

   CATCatch(CATError, pError)
   {
      <a href="#Step9">Managing the Errors</a>
   }
   
   CATEndTry
   
   return rc ;
}
...</pre>
<p>This method contains a <code>CATTry</code> and <code>CATCatch</code> sections 
because some methods can throw an error. [<a href="#References">3</a>]</p>
<p>At last, the <a href="#Step10">Implementing the CATIFmFeatureBehaviorCustomization 
Interface</a> section describes how to create the new data extension for the Combined 
Curve feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Declaring the Useful Pointers</h3>
<p>Before the <code>CATTry</code> section you declare all the pointers:</p>
<ul>
	<li>Used in the <code>CATTry</code> and <code>CATCatch</code> sections: such 
		as <code>spUpdateErrorOnThis,</code> the <em>CATIUpdateError</em> interface 
		pointer on the combined curve.</li>
	<li>Initialized in the <code>CATTry</code> section and not released before the 
		call of a method which can throw an error.</li>
</ul>
<pre class="code">...
CATICGMTopPrism *piCurve1Extrude = NULL;
CATICGMTopPrism *piCurve2Extrude = NULL;
CATICGMHybOperator *piIntersect = NULL;
CATBody * pCurve1ExtrudeBody = NULL;
CATBody * pCurve2ExtrudeBody = NULL;
CATIMmiProcReport_var spProcReport = NULL_var;
CATGeoFactory *pGeomFactory = NULL;
CATSoftwareConfiguration *pSoftConfig = NULL;
int IsConfigToStore = NULL;
CATIMmiMechanicalFeature *piCombinedCurveFeat = NULL;
CATIMmiAlgoConfigServices *piAlgoConfigServices = NULL;  
CATIUpdateError_var spUpdateErrorOnThis = NULL_var;    
...</pre>
<p>All these pointers will be explained in the next sections.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Checking the Build Activation</h3>
<p>This part consists in checking the status of the combined curve in terms of build's 
activation. This information is managed by the <em>CATIMechanicalProperties</em> interface 
[<a href="#References">7</a>].</p>
<pre class="code">...
<strong>CATIMmiProcReport_var</strong> spProcReport = NULL_var;
...
int DeactivateState = 0;
<strong>CATIMechanicalProperties_var</strong> spMechProp = this;
if (spMechProp != NULL_var)
{
  DeactivateState = spMechProp<strong>-&gt;IsInactive</strong>();     
     
  if (1 == DeactivateState)
  {
    <strong>spProcReport</strong> = this; 
    if (spProcReport != NULL_var)
      rc = spProcReport-&gt;<strong>InactivateResult</strong>();
  }
}
...</pre>
<p>If the geometrical feature is deactivated, the <code>InactivateResult</code> 
method of the <em>CATIMmiProcReport</em> interface must be used. This interface,
<em>CATIMmiProcReport</em>, is natively implemented by a geometrical feature.</p>
<p>Once the procedural report is deactivated, you can leave the <code>CATTry</code> 
section.</p>
<p>This check about the deactivation must be done in the <code>CATTry</code> section 
because the <code>InactivateResult</code> method of the <em>CATIMmiProcReport</em> 
can throw an error.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving All Possible Update Errors Associated with the 
Combined Curve</h3>
<p>It is safer to remove all possible update error that may be associated with the 
current Combined Curve feature. To do so, use the <code>UnsetUpdateError method</code> 
of the <em>CATIMmiUpdateError</em> interface.</p>
<pre class="code">...
<strong>CATIMmiUpdateError_var</strong> spUpdateErrorOnThis = NULL_var;
...
spUpdateErrorOnThis = this; 
if (spUpdateErrorOnThis != NULL_var)
  spUpdateErrorOnThis-&gt;<strong>UnsetMmiUpdateError</strong>();
...</pre>
<p>The implementation of <em>CATIMmiUpdateError</em> interface for Combined Curve 
is provided by an extension of late type MechanicalFeature. Since CombinedCurve 
late type derives from MechanicalFeature late type [<a href="#References">4</a>], 
you automatically benefit from this implementation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Data for the Procedural Report</h3>
<p>This step consists in three sub-steps which are:</p>
<ul>
	<li><a href="#Step41">Retrieving the Two Input Curves and the Two Input Directions</a></li>
	<li><a href="#Step42">Retrieving the Two CATMathDirections Corresponding to 
		the Two Input Directions</a></li>
	<li><a href="#Step43">Retrieving the Two CATBody Corresponding to the Two Input 
		Curves</a></li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step41"></a>Retrieving the Two Input Curves and the Two Input Directions</h4>
<p>With the <em>CAAIMmrCombinedCurve</em> interface [<a href="#References">5</a>] 
it is easy to retrieve the CombinedCurve input curves and directions.</p>
<pre class="code">...
CATBaseUnknown  *pCurve1 = NULL;
CATBaseUnknown  *pCurve2 = NULL;
CATBaseUnknown  *pDirection1 = NULL; 
CATBaseUnknown  *pDirection2 = NULL; 

<strong>CAAIMmrCombinedCurve_var</strong> spCombinedCurve = this;
if (spCombinedCurve != NULL_var)
{
  // Retrieves curves and directions
  rc = spCombinedCurve-&gt;<strong>GetCurve</strong>(1, pCurve1);
  if (SUCCEEDED(rc))
  {
    rc = spCombinedCurve-&gt;<strong>GetDirection</strong>(1, pDirection1);
    if (SUCCEEDED(rc))
    {
      rc = spCombinedCurve-&gt;<strong>GetCurve</strong>(2, pCurve2);
      if (SUCCEEDED(rc))
        rc = spCombinedCurve-&gt;<strong>GetDirection</strong>(2, pDirection2);
    }
  }
}
...</pre>
<p>Once the inputs are retrieved, you can generate an error if one of them is not 
valid.</p>
<pre class="code">...
if (FAILED(rc))
{
  // Clean up 
  if (NULL != pCurve1)
  {
    pCurve1-&gt;Release();
    pCurve1 = NULL;
  }
  if (NULL != pCurve2)
  {
    pCurve2-&gt;Release();
    pCurve2 = NULL;
  }
  if (NULL != pDirection1)
  {
    pDirection1-&gt;Release();
    pDirection1 = NULL; 
  }
  if (NULL != pDirection2)
  {
    pDirection2-&gt;Release();
    pDirection2 = NULL; 
  }

  // An error is created 
  CATIMmiErrUpdate *piErrorAccess = NULL;
  rc = CATMmiExtendServicesFactory::CreateUpdateErrorAccess(piErrorAccess);

  CATError * pErrorNoValidInput = NULL;
  if (NULL != piErrorAccess)
  {
     // Builds a new update error.
     piErrorAccess-&gt;<strong>CreateNewError</strong>(pErrorNoValidInput);
     CATUnicodeString Diagnostic(&quot;One of the inputs is wrong.&quot;);
     piErrorAccess-&gt;<strong>SetMmiDiagnostic</strong>(pErrorNoValidInput,Diagnostic);
     <strong>CATThrow</strong>(pErrorNoValidInput);
}      
...</pre>
<p><code>pErrorNoValidInput</code> is an update error. Before throwing the error, 
all the none-null pointers declared in the <code>CATTry</code> section, in other 
words the inputs of the Combined Curve, are released.</p>
<p><strong>Note</strong>: In the use case we have chosen to generate an update error if the 
inputs of the combined curve are wrong. You can also consider that it is an internal 
error, so do not generate an error but only use the HRESULT mechanism. In this last 
case, the &quot;Update Diagnosis&quot; dialog box will not appear in case of error. 
Refer to the &quot;A Description of Update Errors&quot; article [<a href="#References">6</a>] 
for details about the update errors.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step42"></a>Retrieving the Two CATMathDirections Corresponding to the 
Two Input Directions</h4>
<p>Retrieving the geometrical directions of the two input directions is even easier. 
You just have to get a pointer on <em>CATLine</em> from the input direction, and then 
ask this <em>CATLine</em> for its mathematical direction.</p>
<pre class="code">...
 <strong>CATMathDirection</strong> MathDirection1,MathDirection2;
 
 <strong>CATLine</strong> *pLine1 = NULL;    
 rc = pDirection1-&gt;QueryInterface(IID_CATLine, (void**) &amp;pLine1);
    
 if (SUCCEEDED(rc))
 {
   // Get first mathematical direction
   pLine1-&gt;<strong>GetDirection</strong>(MathDirection1);
    
   // Release pointer
   pLine1-&gt;Release();
   pLine1 = NULL;
 }
...</pre>
<p>These input curves and directions will be now be asked to give their geometry 
so that you can compute the two extruded surfaces.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step43"></a>Retrieving the Two CATBody Corresponding to the Two Input 
Curves</h4>
<p>A method of <em>CATIMmiUseGeometricalElement</em> retrieves the <em>CATBody</em> 
corresponding to a feature.</p>
<pre class="code">...
<strong>CATBody_var</strong> spBodyOfCurve1, spBodyOfCurve2;

if (SUCCEEDED(rc) &amp;&amp; pCurve1)
{
  <strong>CATIMmiUseGeometricalElement_var</strong> spGeometricalElementOnCurve1 = pCurve1;
      
  if (spGeometricalElementOnCurve1 != NULL_var)
     rc = spGeometricalElementOnCurve1-&gt;<strong>GetBodyResult</strong>(spBodyOfCurve1);
}
...</pre>
<p>Once again, you do not have to worry about the implementation of <em>CATIMmiUseGeometricalElement</em> 
for your Combined Curve or input curves. The parent late type GeometricalElement3D 
[<a href="#References">4</a>] of CombinedCurve has an extension that provides the 
implementation for <em>CATIMmiUseGeometricalElement</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Procedural Report</h3>
<p>The procedural report is the means to generate the scope of the feature by using 
the topological report to generate the name of the following cells. The procedural 
report is managed by the <em>CATIMmiProcReport</em> interface.</p>
<p>The first thing is to declare the cells to be followed-up by the procedural journal 
during the Build operation. In general, in the case of a surfacic feature, all the 
input specifications are followed-up:</p>
<pre class="code">...
 CATLISTV(CATBaseUnknown_var) ListFeat;
 CATListOfCATUnicodeString ListKeys;

 if (SUCCEEDED(rc))
 {
    ListFeat.Append(pCurve1); 
    ListKeys.Append(MfKeyNone);    
    ListFeat.Append(pDirection1); 
    ListKeys.Append(MfKeyNone);
    ListFeat.Append(pCurve2); 
    ListKeys.Append(MfKeyNone);
    ListFeat.Append(pDirection2); 
    ListKeys.Append(MfKeyNone);
 }
...</pre>
<p><code>Listfeat</code> is the list of features to follow-up, and <code>ListKeys</code> 
is the list of associated keys. These two lists have the same size. The default 
value of a key is <code>MfKeyNone</code>. A different key value will indicate that 
the historical relationship of a node should be replaced with a user information. 
The value of the key must be in relationship with the information given by the topological 
report.</p>
<pre class="code">...
<strong>CATIMmiProcReport_var</strong> spProcReport = NULL_var;
...
spProcReport = this;
if (spProcReport != NULL_var)
{
  int BoolOper = 0;
  rc = spProcReport-&gt;<strong>CreateProcReport</strong>(ListFeat,ListKeys,BoolOper); 
}   
...</pre>
<p>Once the <em>CATIMmiProcReport</em> interface smart pointer on the combined curve 
is retrieved, sp<code>ProcReport</code>, you can create the procedural report thanks 
to the <code>CreateProcReport</code> method. The last argument of this method is
<code>0</code>, the default value, because the result ( the scope ) will be affected 
to the feature itself [<a href="#Fig1">Fig.1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Running the Topological Operators</h3>
<p>This step consists in four sub-steps:</p>
<ul>
	<li><a href="#Step61">Retrieving the Geometrical Factory</a> to create the topological 
		operators and the topology.</li>
	<li><a href="#Step62">Retrieving the Topological Journal</a> used by the procedural 
		report.</li>
	<li><a href="#Step63">Retrieving the Algorithm Configuration</a> which is used 
		to take the right level of algorithms in MechanicalModeler, CGM, etc.</li>
	<li><a href="#Step64">Creating the Resulting Geometry</a> to associate with 
		the feature.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step61"></a>Retrieving the Geometrical Factory</h4>
<p>The geometrical factory is handled by the <em>CATGeoFactory</em> interface. This 
interface is implemented by the Procedural Report manager. You retrieve it thanks 
to the <em>CATIMmiProcReport</em> interface implemented for CombinedCurve feature.</p>
<pre class="code">...
  <strong>CATGeoFactory_var</strong> LocalFactory;
  rc = spProcReport-&gt;<strong>GetGeoFactoryFromFeature</strong>(LocalFactory);
  if (SUCCEEDED(rc) &amp;&amp; NULL_var != LocalFactory)
  rc  = LocalFactory-&gt;QueryInterface(IID_CATGeoFactory, (void**) &amp;pGeomFactory);		 
...</pre>
<p>The GetGeoFactoryFromFeature is the method of the <em>CATIMmiProcReport</em> to 
retrieve the geometrical factory.<code> pGeomFactory</code> is the pointer on the 
geometrical factory interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step62"></a>Retrieving the Topological Journal</h4>
<p>The procedural report then provides a pointer on a new topological journal that 
will log all topological operations.</p>
<pre class="code">...
CATTopData TopData;
<strong>CATCGMJournalList</strong> *pCGMJournalList = NULL;
rc = spProcReport-&gt;<strong>GetCGMJournalList</strong>(pCGMJournalList);  
TopData.SetJournal(pCGMJournalList) ;
...</pre>
<p><code>pCGMJournalList</code> is the pointer on the topological journal. This 
pointer must not be released.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step63"></a>Retrieving the Algorithm Configuration</h4>
<p>The &quot;CATSoftwareConfiguration&quot; pointer (pSoftConfig) is needed to get 
the version of the Combined Curve feature[<a href="#References">8</a>]. This information 
is used to determine which type of algorithm will be used to compute the result.</p>
<p>This Software Configuration is stored on the feature instance and has to be retrieved 
using the <code>GetConfiguration</code> method of <em>CATIMmiAlgoConfigServices</em> 
interface.</p>
<p>If your feature has not been built yet, &quot;IsConfigToStore = 1&quot;. Then, 
at the end of build process of the feature, the value set by &quot;<strong>TopData.SetSoftwareConfiguration</strong>&quot; 
has to be stored using <code>StoreConfiguration</code> method of <em>CATIMmiAlgoConfigServices</em> 
interface.</p>
<pre class="code"><strong>CATSoftwareConfiguration</strong> *pSoftConfig = NULL;
<strong>CATIMmiMechanicalFeature</strong> *piCombinedCurveFeat = NULL;
<strong>CATIMmiAlgoConfigServices</strong> *piAlgoConfigServices = NULL;
int IsConfigToStore = NULL; 
...
rc = QueryInterface(IID_CATIMmiMechanicalFeature,(void **) &amp;piCombinedCurveFeat);
...
rc = <strong>CATMmiExtendServicesFactory::CreateAlgoConfigServicesAccess</strong>(piAlgoConfigServices);

if (piCombinedCurveFeat &amp;&amp; piAlgoConfigServices)
{
  rc = piAlgoConfigServices-&gt;<strong>GetConfiguration</strong>(piCombinedCurveFeat ,pSoftConfig ,IsConfigToStore);
               
  if (SUCCEEDED(rc))
    TopData.<strong>SetSoftwareConfiguration</strong>(pSoftConfig);
}
...</pre>
<p>Note the variables declared at the beginning of the <code>Build</code> method 
because they will be useful at its end and because they can be released in a
<code>CATCatch</code> section. See <a href="#Step1">Declaring the Useful Pointers</a>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step64"></a>Creating the Resulting Geometry</h4>
<p>The combined curve geometry is computed thanks to three operations:</p>
<ul>
	<li><a href="#Step641">Extruding the First Curve Along the First Direction</a> 
		to create a first surface.</li>
	<li><a href="#Step642">Extruding the Second Curve Along the Second Direction</a> 
		to create a second surface.</li>
	<li><a href="#Step643">Intersecting the Two Surfaces</a> to create a curve.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h5><a name="Step641"></a>Extruding the First Curve Along the First Direction</h5>
<p>The first surface is created by a <em>CATTopPrism</em> operator. <code>pCurve1Extrude</code> 
is a <em>CATICGMTopPrism</em> interface pointer. declared at the top of the <code>
Build</code> method. See <a href="#Step1">Declaring the Useful Pointers</a>.</p>
<pre class="code">...
if (SUCCEEDED(rc))
{
  <strong>CATLength</strong> StartOffset = 1000;
  <strong>CATLength</strong> EndOffset   = -StartOffset;

  pCurve1Extrude = ::<strong>CATCGMCreateTopPrism</strong> (piGeomFactory,
                                           &amp;TopData,
                                           <strong>spiBodyOfCurve1</strong>,
                                           &amp;<strong>MathDirection1</strong>,
                                           StartOffset,
                                           EndOffset);
   if (NULL != pCurve1Extrude)
  {
    pCurve1Extrude-&gt;<strong>Run</strong>();
    pCurve1ExtrudeBody = pCurve1Extrude-&gt;<strong>GetResult</strong>();
  }        
  ...
}
...</pre>
<p><code>pCurve1ExtrudeBody</code> is an intermediary <em>CATBody</em> corresponding 
to the first surface. It is also declared at the top of the <code>Build</code> method. 
(See <a href="#Step1">Declaring the Useful Pointers</a>.) Once the combined curve 
body will be computed, <code>pCurve1ExtrudeBody</code> should be removed from the 
geometric container.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h5><a name="Step642"></a>Extruding the Second Curve Along the Second Direction</h5>
<p>The second surface is also created by a <em>CATTopPrism</em> operator. <code>pCurve2Extrude</code> 
is a <em>CATICGMTopPrism</em> interface pointer declared at the top of the <code>Build</code> 
method. See <a href="#Step1">Declaring the Useful Pointers</a>.</p>
<pre class="code">...
pCurve2Extrude = ::<strong>CATCGMCreateTopPrism</strong> (piGeomFactory,
                                         &amp;TopData,
                                         <strong>spiBodyOfCurve2</strong>,
                                         &amp;<strong>MathDirection2</strong>,
                                         StartOffset,
                                         EndOffset);
if (NULL != pCurve2Extrude)
{
  pCurve2Extrude-&gt;<strong>Run</strong>();       
  pCurve2ExtrudeBody = pCurve2Extrude-&gt;<strong>GetResult</strong> ();
}
...</pre>
<p><code>pCurve2ExtrudeBody</code> is an intermediary <em>CATBody</em> corresponding 
to the first surface. It is also declared at the top of the <code>Build</code> method. 
(See <a href="#Step1">Declaring the Useful Pointers</a>.) Once the combined curve 
body will be computed, <code>pCurve2ExtrudeBody</code> should be removed from the 
geometric container.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h5><a name="Step643"></a>Intersecting the Two Surfaces</h5>
<p>At last, the final result is created by a <em>CATHybOperator</em> operator.
<code>pIntersect</code> is a <em>CATICGMHybOperator</em> interface pointer declared 
at the top of the <code>Build</code> method. (See <a href="#Step1">Declaring the 
Useful Pointers</a>.) <code>pResultBody</code> is the resulting topology.</p>
<pre class="code">...
CATBody *<strong>pResultBody</strong> = NULL;

if (SUCCEEDED(rc) &amp;&amp;  (NULL!=pCurve2ExtrudeBody) &amp;&amp; (NULL!=pCurve1ExtrudeBody) )
{
  pIntersect = ::<strong>CATCGMCreateTopIntersect</strong> (piGeomFactory,
                                           &amp;TopData,
                                           <strong>pCurve1ExtrudeBody</strong>,
                                           <strong>pCurve2ExtrudeBody</strong>);
   
  if (NULL != pIntersect)
  {
    pIntersect-&gt;<strong>Run</strong>();
    <strong>pResultBody</strong>= pIntersect-&gt;<strong>GetResult</strong> ();
  }
}
...</pre>
<p>Note that <code>pResultBody</code> is not declared at the top of the method. 
It is not necessary once its lifecycle is managed by the <code>DeletedProcReport</code> 
method in the <code>CATCatch</code> sections.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Storing the Procedural Report and the Algorithm Configuration</h3>
<p>It is now high time to store (fill) the procedural report corresponding to the 
creation of the geometric result of the Combined Curve. That's the job of the
<code>CATIMmiProcReport::StoreProcReport</code> method.</p>
<p>In addition, it is also time to store the Algorithm Configuration, if it is needed. 
Indeed, when the software configuration is retrieved, an integer (<code>IsConfigToStore</code>) 
determines if it is needed to store this data on the feature instance. This configuration, 
used to version the feature, has to be stored, at least, on the first Build Time.[<a href="#References">8</a>]</p>
<p>The storage of this data on the feature instance is done thanks to <code>CATIMmiAlgoConfigServices::StoreConfiguration</code> 
method.</p>
<pre class="code">...
if (SUCCEEDED(rc) &amp;&amp; spProcReport != NULL_var)
{
  if (pResultBody)
  {
    int BoolOper = 0; 
    rc = spProcReport-&gt;<strong>StoreProcReport</strong>(pResultBody, NoCopy, BoolOper); 

    if (IsConfigToStore == 1)
    {
      if (piCombinedCurveFeat &amp;&amp; piAlgoConfigServices)
      rc = piAlgoConfigServices-&gt;<strong>StoreConfiguration</strong>(piCombinedCurveFeat ,pSoftConfig);
    }
  }
  else
  {
    // creates an error if the intersection failed
    CATIMmiErrUpdate *piErrorAccess = NULL;
    rc = CATMmiExtendServicesFactory::CreateUpdateErrorAccess(piErrorAccess);

    CATError * pErrorNoIntersection = NULL;
    if (NULL != piErrorAccess)
    {
       // Builds a new update error.
       piErrorAccess-&gt;CreateNewError(pErrorNoIntersection);
       CATUnicodeString Diagnostic(&quot;The two extruded curves do not intersect.&quot;);
       piErrorAccess-&gt;SetMmiDiagnostic(pErrorNoIntersection,Diagnostic);
       CATThrow(pErrorNoIntersection);
    }
  }
}      
...</pre>
<p>The last argument of the <code>StoreProcReport</code> method, <code>BoolOper,</code> 
is the same as the value in the <code>CreateProcReport</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Cleaning the Useless Data</h3>
<p>In this last part of the <code>CATTry</code> section, you clean the data declared 
in the first section entitled &quot;<a href="#Step1">Declaring the Useful Pointers</a>&quot; 
and not released/deleted during the <code>CATTry</code> section.</p>
<ul>
	<li>All the objects to <strong>remove</strong> from the topological container thanks to 
		the Remove method of the <em>CATGeoFactory</em> interface. it is the intermediary
		<em>CATBody</em>: <code>pCurve1ExtrudeBody</code> and <code>pCurve2ExtrudeBody</code>.</li>
	<li>
		<p>All the topological objects not yet <strong>released</strong>, it means <code>pCurve1Extrude</code>,
		<code>pCurve2Extrude</code> and <code>pIntersect</code>.</p>
	</li>
	<li>All the pointers not yet <strong>released</strong>: (You should always have these 
		four pointers.)
		<ul>
			<li><code>piUpdateErrorOnThis</code></li>
			<li><code>piProcReport</code></li>
			<li><code>pSoftConfig</code></li>
			<li><code>piGeomFactory</code>.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Managing the Errors</h3>
<p>Some errors may be thrown during these previous operations, the <code>CATTry</code> 
bloc catches them and the <code>CATCatch</code> block treats the error.</p>
<p>The <code>CATCatch</code> section processes the error and <a href="#Step91">cleans 
the pointers</a> declared at the top of the <code>Build</code> method. (See
<a href="#Step1">Declaring the Useful Pointers</a>.)</p>
<p>The error to process can be an update error or not. Therefore we first need to 
check the type of the CATError, using the <code>IsAnUpdateError</code> method of
<em>CATIMmiErrUpdate</em> interface. If the error is already an update error, it 
is re-thrown without modification, if not an update error is created.</p>
<pre class="code">...
  CATCatch (CATError , pError)
  {
    CATError * pErrorToThrow = NULL;

    // Create access to Update Error
    CATIMmiErrUpdate *piErrorAccess = NULL;
    rc = CATMmiExtendServicesFactory::CreateUpdateErrorAccess(piErrorAccess);

    if (NULL != piErrorAccess)
    {
      // Check if the error is already an update error or not
      if (S_OK == piErrorAccess-&gt;<strong>IsAnUpdateError</strong>(pError))
      {
	// Associate the error with the Combined Curve
        if(NULL_var != spUpdateErrorOnThis)
	  spUpdateErrorOnThis-&gt;SetMmiUpdateError(pError);
      }
      else
      {
        // Build a new update error
        piErrorAccess-&gt;CreateNewError(pErrorToThrow);
	piErrorAccess-&gt;SetMmiDiagnostic(pErrorToThrow,pError-&gt;GetNLSMessage());

	 // Clean-up
	 ::Flush(pError);

         // Associates the error with the Combined Curve
         if (spUpdateErrorOnThis != NULL_var) 
           spUpdateErrorOnThis-&gt;SetMmiUpdateError(pErrorToThrow);
       }
    }
      
    // <a href="#Step91">Here the pointers declared at the top of the <code>Build</code> method are cleaned</a>
    if (pErrorToThrow)
      CATThrow(pErrorToThrow);
    else
      CATRethrow;   
  }
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step91"></a>Cleaning the Pointers</h4>
<p>In the <code>CATCatch</code> section it is important to:</p>
<ul>
	<li><strong>Remove</strong> the result: the newly <em>CATBody</em> associated with the feature 
		and its scope. It is done thanks to the <code>DeleteProcReport</code> method.</li>
</ul>
<p>and for the data declared in the first section entitled &quot;<a href="#Step1">Declaring 
the Useful Pointers</a>&quot;:</p>
<ul>
	<li><strong>Remove</strong>, from the topological container thanks to the <code>Remove</code> 
		method of the <em>CATGeoFactory</em> interface. it is the intermediary
		<em>CATBody</em>: <code>pCurve1ExtrudeBody</code> and <code>pCurve2ExtrudeBody</code>.</li>
	<li>
		<p><strong>Release</strong> the topological operators: <code>pCurve1Extrude</code>,
		<code>pCurve2Extrude</code> and <code>pIntersect</code>.</p>
	</li>
	<li><strong>Release</strong> all the pointers not released in the <code>CATTry</code> 
		section: (You should always have, at least, these four pointers.)
		<ul>
			<li><code>piUpdateErrorOnThis</code></li>
			<li><code>piProcReport</code></li>
			<li><code>pSoftConfig</code></li>
			<li><code>piGeomFactory</code>.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Implementing the CATIFmFeatureBehaviorCustomization Interface</h3>
<p>To implement the <em>CATIFmFeatureBehaviorCustomization</em> interface, you just 
have to create a new extension of Combined Curve. Its class name is CAAEMmrCombinedCurveBehavior.</p>
<p>This part of <em>CAAEMmrCombinedCurveBehavior.cpp</em> aims at declaring this new 
extension.</p>
<pre class="code">...
CATImplementClass(CAAEMmrCombinedCurveBehavior, 
                  DataExtension, 
                  CATIFmFeatureBehaviorCustomization, 
                  CombinedCurve);

CATImplementBOA(CATIFmFeatureBehaviorCustomization,CAAEMmrCombinedCurveBehavior);
...</pre>
<p>Do not forget to update your dictionary to declare that CombinedCurve is extended 
to implement <em>CATIFmFeatureBehaviorCustomization</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article shows a complete implementation of the <em>CATIFmFeatureBehaviorCustomization</em> 
interface for the Combined Curve mechanical feature, that can now take part in the 
update of a Representation Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrTaBuildIntegrating.htm">Integrating a New Geometrical 
		Feature in the Update Mechanism</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaGenericNaming.htm">
		Generic Naming Overview</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidExceptions.htm">
		Managing Errors Using Exceptions</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrUcCombCrvCatalog.htm">Creating Combined Curve's Catalog</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAMmrUcCombinedCurveInterface.htm">Creating Combined Curve's 
		Interface of Type</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaErreurUpdateUse.htm">
		A Description of Update Errors</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAMmrUcCombinedCurveCATIMechPop.htm">Enabling the Build Deactivation</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAMmrTaVersioningMechFeat.htm">Configuration and Versioning</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td><a href="CAAMmrUcCombinedCurveSamplesOverview.htm">Creating a New Geometrical 
		Feature: the Combined Curve</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jan 2005]</td>
		<td>Document updated for build deactivation integration</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jan 2007]</td>
		<td>Document updated for Algorithm Configuration Services</td>
	</tr>
	<tr>
		<td>Version: <strong>5</strong> [Jan 2011]</td>
		<td>Document updated for V6 modifications</td>
	</tr>
	 <tr>
		<td>Version: <strong>6</strong> [Mai 2014]</td>
		<td>Document updated for 3DEXPERIENCE platform migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
