<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing PLM Component Life Cycle In Session</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing PLM Component Life Cycle In Session</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The use case is an interactive command which manages the life cycle of 
		the PLM Components (PLM Ref and PLM Rep Ref) currently loaded in the session.</p>
		<p>It demonstrates an actual deployment of a BAG object in the Application 
		code. A <strong>BAG</strong> object is a session object which enables the user to 
		have a better control over the life cycle of the PLM Components. A BAG, thus 
		ensures that PLM Components continue to remain loaded in the current session 
		as long as they are being accessed by the client applications.</p>
		<p>We have a dedicated technical article namely &quot;<strong>BAG Mechanism</strong>&quot; 
		[<a href="#References">1</a>] on this subject.</p>
		<p>The access to the services associated with the PLM Components in the 
		current session occurs through a Dialog-box based command integrated as 
		the PLM Client Adapter Add-In within the General Workshop in CATIA. We have 
		dedicated articles on Add-ins [<a href="#References">2</a>] and Dialog-box 
		based commands [<a href="#References">3</a>] while this use case focuses 
		exclusively on the API to hold/unhold the PLM Components loaded in the current 
		session.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAOmbManagePLMComponentLC Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAOmbManagePLMComponentLC Do</a></li>
					<li><a href="#How">How to Launch CAAOmbManagePLMComponentLC</a></li>
					<li><a href="#Where">Where to Find the CAAOmbManagePLMComponentLC 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case educates an end-user on the significance of having effective control 
over the life cycle of the PLM Components in session. For this purpose it deploys 
a CATOmbLifeCycleRootsBag object, a member of the ObjectModelerBase framework family.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOmbManagePLMComponentLC Use Case</h2>
<p>CAAOmbManagePLMComponentLC is a use case of the CAAObjectModelerBase.edu framework 
that mainly illustrates ObjectModelerBase frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAOmbManagePLMComponentLC Do</h3>
<p>The CAAOmbManagePLMComponentLC use case is fundamentally an interactive command 
for managing the life cycle of PLM Components (PLM Ref and PLM Rep Ref) loaded in 
the current session.</p>
<p>This command is added to the &quot;<strong>CAA PLM Persistency</strong>&quot; toolbar a 
part of the <strong>PLM Client Adapter</strong> Add-In to the <strong>General Workshop</strong> within
<strong>CATIA</strong>. </p>
	<p>The &quot;<strong>CAA PLM Persistency</strong>&quot; toolbar is as seen in the
		<a href="#Fig2">Fig. 2</a> below and the icon
		<img alt="Icon" height="22" src="images/CAAAdpManagePLMComponentLC_Icon.gif" width="22"/> 
		represents the newly added &quot;<strong>Manage PLM Component's LifeCycle in 
		Session</strong>&quot; command, an output of this use case.
	</p>
		<table>
			<caption><a name="Fig2"></a>Fig. 2: &quot;CAA PLM Persistency&quot; 
			Toolbar</caption>
			<tr>
				<td>
				<img alt="CAA PLM Persistency Toolbar" height="60" src="images/CAAAdpManagePLMComponentLC_Cmd.gif" width="80"/></td>
			</tr>
		</table>

	<p>On activating
		<img alt="Icon" height="22" src="images/CAAAdpManagePLMComponentLC_Icon.gif" width="22"/>, 
		a new dialog box titled &quot;<strong>Manage PLM Component's LifeCycle in Session</strong>&quot; 
		will appear, as shown in <a href="#Fig3">Fig.3</a>. It lists the two types 
		of PLM Components namely <strong>VPM Reference</strong> and <strong>VPMRepReference</strong> whose 
		life cycles can be effectively controlled during the use case execution.</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3: &quot;Manage PLM Component's Life Cycle 
	in Session&quot; Dialog Box</caption>
	<tr>
		<td>
		<img alt="Dialog Box" src="images/CAAOmbUcManagePLMComponentLCDlgMain.jpg"/></td>
	</tr>
</table>
<p>For the use case, create the Product Model, as the one shown in the fig below [<a href="#Fig4">Fig. 
4</a>]. Create the Root Physical Product with name RootProduct_L95 and aggregate 
another Physical Product under the Root and name it as Product_1. Save the model 
and execute the CAA command</p>
<table>
	<caption><a name="Fig4"></a>Fig. 4: Input Product Model</caption>
	<tr>
		<td>
		<img alt="Input Product Model" src="images/CAAAdpManagePLMComponentLC_InputModel.jpg"/></td>
	</tr>
</table>
<p>Fundamentally we have two scenarios each illustrating the life cycle propagation 
through PLM Components linked by the following relations:</p>
<ul>
	<li><a href="#IsInstanceOf">IsInstanceOf</a>.</li>
	<li>IsReferencing.</li>
</ul>
<p><a name="IsInstanceOf"></a><strong>IsInstanceOf link scenario</strong></p>
<p>We begin by locking &quot;<strong>Root_v14</strong>&quot;. Its PLM_ExternalID and V_version 
are input in the dialog box [<a href="#Fig4a">Fig. 4a</a>]. On &quot;<strong>Lock PLM 
Component</strong>&quot; button click event, the callback locks &quot;Root_v14&quot;. 
Its Identifying attribute is updated in the &quot;<strong>Identification Set Value</strong>&quot; 
multi-list.</p>
<p>Just in case, Root_v14 is not loaded in the current session, the lock process 
loads it and then proceeds to lock it in the current session.</p>
<p>By locking a PLM Component we actually insert it within a BAG exclusively dedicated 
for this command.</p>
<table>
	<caption><a name="Fig4a"></a>Fig. 4a: Locking &quot;Root_v14&quot; in the Current 
	Session</caption>
	<tr>
		<td>
		<img alt="Locking Root_v14" src="images/CAAOmbUcManagePLMComponentLCDlg.jpg"/></td>
	</tr>
</table>
<p>We list the PLM Components loaded in the current session by invoking the &quot;<strong>List 
PLM Components in session</strong>&quot; command.</p>
<p>A point to note here is that both &quot;Root_v14&quot; and &quot;Child1&quot; 
are displayed in the list, though only &quot;Root_v14&quot; is locked. [<a href="#Fig4b">Fig. 
4b</a>] The reason is because Root_v14 aggregates under it, an instance of &quot;Child1&quot;. 
Thus when Root_v14 is loaded in session, it will invariably load in session all 
the Product References whose instances are aggregated under it. This is termed as 
an &quot;<strong>IsInstanceOf Life cycle propagation</strong>&quot; among PLM Components.</p>
<p>&quot;Root_v14&quot; which was explicitly locked is a direct inclusion in the 
BAG, while &quot;Child1&quot; which got implicitly locked owing to an aggregating 
link of its instance under &quot;Root_v14&quot;, is an indirect inclusion in the 
BAG.</p>
<table>
	<caption><a name="Fig4b"></a>Fig.4b Listing the PLM Components Loaded in the 
	Current Session (After only Root_v14 Locked)</caption>
	<tr>
		<td>
		<img alt="Listing the PLM Components in Session" src="images/CAAOmbUcManagePLMComponentLC4.jpg"/></td>
	</tr>
</table>
<p>The next step is to explicitly lock the &quot;Child1&quot; Reference, thus including 
it in the BAG as a direct inclusion.</p>
<p>[<a href="#Fig5">Fig. 5</a>] below displays the list of PLM Components locked 
in the current session, at this stage.</p>
<table>
	<caption><a name="Fig5"></a>Fig. 5: List of Components Locked in the Current 
	Session (Child Holded)</caption>
	<tr>
		<td>
		<img alt="List of Components Locked in Session" src="images/CAAOmbUcManagePLMComponentLC2.jpg"/></td>
	</tr>
</table>
<p>If we now proceed to Unlock the &quot;Child1&quot; from the current session, 
it will result in its direct inclusion, being removed from the BAG as seen [<a href="#Fig6a">Fig. 
6a</a>] below. As a result &quot;Child1&quot; will not occur in the list of locked 
components below.</p>
<table>
	<caption><a name="Fig6a"></a>Fig. 6a: List of Locked Components in the Current 
	Session (Child Unlocked)</caption>
	<tr>
		<td>
		<img alt="List of Components Locked in Session" src="images/CAAOmbUcManagePLMComponentLC3.jpg"/></td>
	</tr>
</table>
<p>But &quot;Child1&quot; would still occur in the list of components in the current 
session [<a href="#Fig6b">Fig. 6b</a>] since &quot;Root_v14&quot; with the References 
of its aggregating instances, continue to remain in the current session.</p>
<p>The &quot;Child1&quot; listed below is owing to its indirect inclusion in the 
BAG for the current command.</p>
<table>
	<caption><a name="Fig6b"></a>Fig. 6b: Listing the PLM Components Loaded in the 
	Current Session (after Child Unlocked)</caption>
	<tr>
		<td>
		<img alt="Listing the PLM Components in Session" src="images/CAAOmbUcManagePLMComponentLC4.jpg"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAOmbManagePLMComponentLC</h3>
<p>To launch CAAOmbManagePLMComponentLC , you will need to set up the build time 
environment, then compile CAAOmbManagePLMComponentLC along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">4</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Connect</strong> to the database.</li>
	<li>Select your <strong>environment</strong>.</li>
	<li><strong>Open</strong> a Product Model.</li>
	<li>On the Action Bar area Right click <strong>-&gt; Customize</strong> and check that the <strong>CAA 
		PLM Persistency</strong> toolbar is loaded in Action Bar</li>
</ul>
<p>The <a href="#What">What Does CAAOmbManagePLMComponentLC Do</a> section provides 
further details on the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The <strong>PLM Client Adapter</strong> Add-In to the General workshop within CATIA, is 
available thanks to a data extension of the CAAOmbGeneralWksAddin component. This 
necessitates the following entries in the .dico file.</p>
<pre class="code">...
#CAAOmbGeneralWksAddin CATIWorkbenchAddin libCAAOmbGeneralWksAddin
#CAAOmbGeneralWksAddin CATIAfrGeneralWksAddin libCAAOmbGeneralWksAddin
...</pre>
<p>Before launching CATIA, uncomment the above lines in the CAAObjectModelerBase.edu.dico. 
These primarily indicate that the add-in is fundamentally a <em>CATIWorkbenchAddin</em> 
and a <em>CATIAfrGeneralWksAddin</em> implementation residing in the CAAOmbGeneralWksAddin 
shared lib.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAOmbManagePLMComponentLC Code</h3>
<p>The CAAOmbManagePLMComponentLC use case is made of several classes/a single file 
located in the CAAOmbCommands.m module of the CAAObjectModelerBase.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\CAAOmbCommands.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>CAAOmbManagePLMComponentLCCmd.cpp is the Dialog-box based command implementation, 
		the heart of this use case.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\CAAOmbGeneralWksAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The only most important step in the CAAOmbManagePLMComponentLC use case is:</p>
<ol>
	<li><a href="#Step1">Locking the PLM Components to Keep Them Loaded in the Current 
		Session Memory</a></li>
	<li><a href="#Step2">Unlocking PLM Components to Unload Them from Current Session 
		Memory</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step1"></a>Locking the PLM Components to Keep Them Loaded in the Current 
Session Memory</h2>
<p>The core implementation of this use case which manages the life cycle of the PLM 
Components loaded in the current session of CATIA is fundamentally a callback invoked 
in response to the &quot;<strong>Lock PLM Component</strong>&quot; button click event of the 
dialog-box based command.</p>
<pre class="code">...
    CATUnicodeString PLM_ExternalID;
    <strong>PLM_ExternalID = _pEditExternalID-&gt;GetText();</strong>

    CATUnicodeString Version;
    <strong>Version = _pEditVersion-&gt;GetText();</strong> 
    <strong>int iSelectedIndex = _pComboBox-&gt;GetSelect();</strong>
    CATUnicodeString PLMType;
    <strong>_pComboBox -&gt;GetLine(PLMType,iSelectedIndex);</strong>
    <strong>const char * iStrPLMType = PLMType.ConvertToChar();</strong>
    ...
    <strong>CATListOfCATString iListAttributeName ;
    iListAttributeName.Append("PLM_ExternalID");
    iListAttributeName.Append(CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());

    CATListOfCATUnicodeString iListAttributeValue ;
    iListAttributeValue.Append(PLM_ExternalID);
    iListAttributeValue.Append(Version);
    CATIAdpPLMIdentificator* opiIDComp = NULL;
	
    hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,													
				     iStrPLMType,opiIDComp);</strong>
       
    <strong>CATAdpOpener</strong> opener(_iBag);
    hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMIdentifierSet, (void**) &amp;piIdentifier);       
...</pre>
<p>This code occurs in the CAAOmbManagePLMComponentLCCmd::LockPLMComponentsInSession 
implementation.</p>
<p>The use case calls <code>CompleteAndOpen</code> API for opening 
a PLM Product Ref as well a PLM Product Representation Ref. The article &quot;<strong>Querying, 
Expanding &amp; Opening PLM Component</strong>&quot; [<a href="#References">5</a>] provides 
the details of the CAA recommended routines for PLM Product Ref and Rep Ref retrieval.</p>
<p>The Identifying attribute of the PLM Component opened and successfully held in 
the current session is sought and displayed through themulti-list 
element within the dialog box.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step2"></a>Unlocking PLM Components to Unload Them from Current Session 
Memory</h2>
<p>Once the PLM Component is loaded, the user can unload it from session memory. 
This is managed through a callback invoked in response to a &quot;<strong>Unlock PLM 
Component</strong>&quot; contextual menu push item click of an element within the multi-list 
in the dialog box.</p>
<pre class="code">...
      <strong>int iRow = _pMultiList-&gt;GetContextualLine();</strong>
     CATUnicodeString iSelectedItem;
      <strong>_pMultiList-&gt;GetColumnItem(0,iSelectedItem,iRow);</strong>
     
      CATListPtrCATBaseUnknown oListOfRoots;      
      <strong>HRESULT hr = _iBag.GetRoots(oListOfRoots);</strong>
      ...
      CATBoolean ExistsInBag = FALSE;
      int i=1;   
      <strong>while(i&lt;=oListOfRoots.Size()&amp;&amp; ( FALSE == ExistsInBag))</strong>
      {
         <strong>CATBaseUnknown *pPLMComponent = oListOfRoots[i];</strong>
     	if(NULL != pPLMComponent)
      	{
      	    CATIPLMIdentifierSet* piIdentifier = NULL;
      	    <strong>hr = pPLMComponent-&gt;QueryInterface(IID_CATIPLMIdentifierSet,
      					       (void**)&amp;piIdentifier);</strong>
              ...
      	    CATUnicodeString strIdentifier;
             <strong>hr = piIdentifier-&gt;GetIdentifierSet(strIdentifier);</strong>
              ...
      	    <strong>if(iSelectedItem == strIdentifier)</strong>
      	    {
      		<strong>hr = _iBag.RemoveRoot(piIdentifier);</strong>
      		<strong>if (SUCCEEDED(hr))</strong>
		      	<strong>ExistsInBag = TRUE;</strong>
      	    }
      	    ...
      i++;
      }
     <strong>if (TRUE == ExistsInBag)</strong>
      	     <strong>_pMultiList-&gt;ClearLine(iRow);</strong>
...</pre>
<p>This code occurs in the <code>CAAOmbManagePLMComponentLCCmd::UnlockPLMComponentsInSession</code> 
implementation.</p>
<p>In this case first we retrieve the Identifier Set of the PLM Component selected 
by the end user for unloading from the current session.</p>
<p>Next the <code>CATOmbLifeCycleRootsBag::GetRoots</code> method retrieves the 
list of all the PLM Components loaded in the current session of CATIA (contents 
of the <strong>BAG</strong>), identifies the component selected by the user and then unloads 
it from the current session by calling the CATOmbLifeCycleRootsBag::RemoveRoot method 
(empties this element from the <strong>BAG</strong>).</p>
<p>The final step is to clear this PLM Component entry from the multilist within 
the dialog box having confirmed that it was earlier removed from the <strong>BAG</strong>, 
as well.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case is an interactive command which manages the life cycle of the 
PLM Components (Product Ref and Rep Ref) within the current session of CATIA.</p>
<p>The reason why a client should have a better control over the life cycle of 
the PLM Components is because resources once loaded are accessible to all commands. 
Thus for example, the list of the PLM Components in the current session can be easily 
retrieved and any element of one's choice can be unloaded from the session, thus 
adversely affecting various client applications which have links to it.</p>
<p>The deployment of a session object called BAG in the client code, enables 
application developers to hold the PLM Components in session as long as they wish 
to access it in their code.</p>
<p>The BAG APIs which lock/unlock the PLM components in the current session of 
CATIA, are primarily invoked through a dialog-box based command, a part of the PLM 
Client Adapter Add-In to the General Workshop within CATIA.</p>
<p>The use case primarily focuses on BAG APIs, while we have dedicated articles 
which deal with Add-Ins [<a href="#References">2</a>] and Dialog-box based commands 
[<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td><a href="CAAAdpTaBAGMechanism.htm">Understanding PLM Component Life 
		Cycle</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">
		Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADlgDialog/CAADlgTaOverview.htm">
		Dialog Overview</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
