<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a Modelica Class</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Modelica Class</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <code>CAASbiBrowsingModelicaClass</code> use 
		case. The Use Case details the steps involved to retrieve the Modelica text 
		and the children classes of a Dynamic Behavior, using the <code>CATSysBehaviorUseItf</code> 
		framework CAA Exposition. The exposition today is limited to only browse 
		Modelica classes which belongs to a Dynamic Behavior beneath a Logical Reference. 
		For more information concerning Dynamic Behavior Modeler see the corresponding 
		article[<a href="#References">1</a>]</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASbiBrowsingModelicaClass Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAASbiBrowsingModelicaClass 
						Do</a></li>
					<li><a href="#How">How to Launch CAASbiBrowsingModelicaClass</a></li>
					<li><a href="#Where">Where to Find the CAASbiBrowsingModelicaClass 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The learnings from this Use Case are:</p>
<ul>
	<li>The <code>CATSysBehaviorUseItf</code> framework CAA Exposition to browse 
		a Modelica class
		<ul>
			<li><code>CATIModelicaClass::GetFullText(CATUnicodeString &amp; oText)</code> 
				implementation on a Modelica class to retrieve its Modelica text.</li>
			<li><code>CATIModelicaClass::GetLocalClasses(CATListValCATBaseUnknown_var*&amp; 
				oLocalClasses)</code> implementation on a Modelica class to retrieve 
				its children classes.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASbiBrowsingModelicaClass Case</h2>
<p>CAASbiBrowsingModelicaClass is a use case of the CAASysBehaviorUseItf.edu framework 
that illustrates the CATSysBehaviorUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASbiBrowsingModelicaClass</h3>
<p>The input for this Use Case is a Logical <code>Model</code> as depicted in [<a href="#Fig.1">Fig.1</a>] 
below.</p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Input Logical Model</caption>
	<tr>
		<td>
		<img alt="Logical Model" height="435" longdesc="Logical Model" src="images/CATIA-Screenshot-CAASysBehaviorUseItfLogRef.png" width="885"/></td>
	</tr>
</table>
<p>It consists of a root Logical Reference CAABehaviorUseItfLogRef---</p>
<p>The root aggregates an instance of a Logical Reference, which aggregates a Logical 
Behavior representation containing a MainModel which is the main Modelica class 
containing the dynamic system description.</p>
<p>The process to retrieve a PLM Component from the database, essentially requires 
two inputs:</p>
<ul>
	<li>A list of IDSet attribute-values, provided as an input for UC execution.</li>
	<li>The Modeler, PLMClassName (defined at Modeler level) and the CustoPackageName 
		determine the usable type of the PLM Component under consideration.</li>
</ul>
<p>The Use Case thus retrieves an Identificator of the Logical Root in the underlying 
database. It next loads it in session and retrieve the first Logical Reference under 
it. Then it retrieve all the behaviors attach to this reference.</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2 Dynamic Behavior Browse Output</caption>
	<tr>
		<td>model MainModel<br />
&nbsp; extends PLMInterface;<br />
&nbsp; parameter Real A=8.5;<br />
&nbsp; parameter Real B=5;<br />
&nbsp; Real S;<br />
&nbsp; equation<br />
&nbsp; S = A + B;<br />
		end MainModel<br />
		<br />
		This behavior contains 1 sub class(es)</td>
	</tr>
</table>
<p>The Use Case browses the behaviors aggregated under the Logical Behavior Representation. 
It only analyzes Dynamic Behaviors which contains Modelica information (other behavior 
types are described by other formal languages). It outputs their Modelica text and 
the number of children classes as depicted in [<a href="#Fig.2">Fig.2</a>] above.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASbiBrowsingModelicaClass</h3>
<p>To launch CAASbiBrowsingModelicaClass, you will need to set up the build time 
environment, then compile CAASbiBrowsingModelicaClass along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAASbiBrowsingModelicaClass Repository Server User Password 
SecurityCtx Environment PLMClassType CustoPackageName iAllAttributes AttrValue1 
[IDAttribute2 Value2 ...] &quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as <em>name</em>:<em>port_number\RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context ( Role. Organization. Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment which defines the type of Logical Reference to browse, 
		as a usable custo</td>
	</tr>
	<tr>
		<th>PLMClassType</th>
		<td>The PLM Class type defined by the RFLVPMLogical Modeler</td>
	</tr>
	<tr>
		<th>CustoPackageName</th>
		<td>The Customization which defines the Usable type</td>
	</tr>
	<tr>
		<th>IDAttribute1*</th>
		<td>IDSet attribute Name</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Attribute Value</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the usable custo type of the PLM Component browsed</p>
<p>The 3D XML file CAASbiBrowsingModelicaClass.3dxml located at CAASysBehaviorUseItf.edu\CNext\resources\3DXMLData 
contains data which can be used for the use case. <br />
This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: CAASysBehaviorUseItfLogRef</li>
	<li><code>Version</code>: ---</li>
</ul>
<p>Attention: Please refer to the document [<a href="#References">2</a>] for how 
to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASbiBrowsingModelicaClass Code</h3>
<p>The CAASbiBrowsingModelicaClass use case is located in the CAASbiBrowsingModelicaClass.m 
module of the <code>CAASysBehaviorUseItf.edu</code> framework:</p>
<p><code>InstallRootFolder\CAASysBehaviorUseItf.edu\CAASbiBrowsingModelicaClass.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code>CAASbiBrowsingModelicaClass</code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving Logical Reference to Browse from Underlying 
		Database</a>
		<ol>
			<li><a href="#Step11">Building an Identification Attribute-Value Set</a></li>
			<li><a href="#Step12">Retrieving the Usable Type of PLM Component to 
				Browse</a>
				<ol>
					<li>Load the relevant Environment input for UC execution</li>
					<li>Retrieve the Usable type of PLM Component to browse</li>
				</ol>
			</li>
			<li><a href="#Step13">Running Query and Retrieving Logical Reference 
				from the Underlying Database</a></li>
		</ol>
	</li>
	<li><a href="#Step2"></a>Retrieving the Behaviors Aggregated under the Logical 
		Reference</li>
	<li><a href="#Step3">Browsing the Dynamic Behavior</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAASbiBrowsingModelicaClass</code> use case, to begin with, creates 
a PLM Session. Its defined by the repository to be connected to, server, user, password 
and a Security Context. The Security context primarily defines a role with which 
the user is logged into the current session. In the current Use Case, since it simply 
browses through a Logical Model hierarchy, it does not involve any modification 
of the PLM data. So a Reviewer role serves our purpose in this case. The article &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [<a href="#References">2</a>] delves further deeper 
into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving Logical Reference to Browse from Underlying Database</h3>
<p>To begin with, we retrieve from the underlying database, the Logical Reference 
for browse. The query to an underlying database for a PLM Component is built with 
primarily two inputs:</p>
<ul>
	<li>An IDSet attribute-value list.</li>
	<li>The usable custo (type) of the PLM Component being queried.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step11"></a>Building an Identification Attribute-Value Set</h4>
<p>A PLM Type essentially defines a set of attributes, to uniquely identify it in 
the underlying database. These are referred to as IDSet attributes. A list of such 
attribute-value set, combined with the PLM Type uniquely identifies a PLM Component 
in the underlying database. This list is one of the inputs for the database query. 
The list is built, as depicted by the code extract below</p>
<pre class="code">CATAdpIdentificationSet oAttributeSet;

for (int AttrIndex=8; AttrIndex &lt;= (8+((NbAttributes-1)*2)); AttrIndex++)
{
	const CATString Attribute(iArgv[AttrIndex]);
	cout &lt;&lt; &quot;The attribute name is &quot; &lt;&lt; Attribute.CastToCharPtr() &lt;&lt; endl;
	const CATUnicodeString Value(iArgv[AttrIndex+1]);
	cout &lt;&lt; &quot;The attribute value is &quot; &lt;&lt; Value.ConvertToChar() &lt;&lt; endl;
	oAttributeSet.AddAttribute(Attribute,Value);

	AttrIndex++;
}</pre>
<p>An Identification attribute-value set are built with user inputs. The count of 
the attribute-value set is defined by the usable custo of the Logical Reference 
to browse. The CATAdpIdentificationSet represents a list of attribute-value pair. 
Its CATAdpIdentificationSet ::AddAttribute() call appends an attribute-value set 
progressively to build this list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step12"></a>Retrieving the Usable Type of PLM Component to Browse</h4>
<p>As mentioned earlier, the PLM Type is another critical input for building our 
database query. The PLM Type is referred to as a Usable type (custo), particularly 
when it is used in the context of building a database query. (While a PLM Type is 
referred to as an authoring custo, when it serves as an input for creating a new 
PLM Component).</p>
<h5>Load the relevant Environment</h5>
<p>A PLM Environment determines the Usable custos for a PLMCore type in the current 
session. In other words, we can only operate on (search, create) a PLM Type, if 
it is one of the usable types defined by the current environment, for a given PLMCore.</p>
<pre class="code">    CATIAdpEnvironment * piAdpEnvironment = NULL ;
    hr = <strong>CATAdpDictionaryServices::GetEnvironment</strong>(repository,EnvToUse,&amp;piAdpEnvironment);</pre>
<p>The call to CATAdpDictionaryServices::GetEnvironment() retrieves an environment 
pointer. An important point to note here is that this call infact, initially loads 
and sets an environment provided as input, thus overriding the environment previously 
set. It then finally returns us a handle to this recently set environment.</p>
<h5>Retrieve the Usable type of PLM Component to Browse</h5>
<p>The Modeler, the PLM Class type defined by the Modeler and the Customization 
together uniquely determine a usable custo. The Technical Article &quot;<strong>Understanding 
PLM Modeler and Customization</strong>&quot; [<a href="#References">4</a>] delves 
deeper into this subject.</p>
<pre class="code">hr = <strong>piAdpEnvironment-&gt;GetUsableTypeFromTypeIdentification</strong> (ModelerName ,iModelerTypeName,CustoPackageName,&amp;piAdpType );	</pre>
<p>The call to CATIAdpEnvironment::GetUsableTypeFromTypeIdentification() returns 
a unique usable custo, with the Modeler, Modeler PLM Type and Custo Package as an 
input. The usable custo could be defined by the Modeler or by one of its several 
customizations.</p>
<p>The inputs for the API called above, are pretty obvious if the usable custo is 
defined by a Customization. While, if a usable custo is defined by a Modeler, we 
have two possibilities:</p>
<ul>
	<li>The usable custo is a concrete type. In that case, the Custo Package Name 
		input is an empty string.</li>
	<li>The usable custo is an abstract type. In that case, the Custo Package Name 
		will be the Modeler Name (to be confirmed).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step13"></a>Running Query and Retrieving Logical Reference from the 
Underlying Database</h4>
<p>At this stage, we have with us the inputs (usable type and the Identificator 
attribute-value sets) which together define our database query. The query enables 
us retrieve components corresponding to the given attributes, in this use case, 
we only deal with the first component in the list.</p>
<pre class="code">...
CATLISTP(CATAdpQueryResult) oQueryResults;
if ((S_OK==hr) &amp;&amp; (NULL != piAdpType))
	hr = <strong>CATAdpQueryServices::GetElementsFromAttributes</strong>( piAdpType,oAttributeSet,oQueryResults );
...
CATAdpQueryResult* opQueryResult = oQueryResults[1];
CATIAdpPLMIdentificator* oIdentifier = NULL;
...

CATBaseUnknown *piLogicalRef = NULL;
if ((S_OK==hr) &amp;&amp; (NULL != oIdentifier)) // Components retrieved from database
{
	hr = <strong>CATAdpOpenSaveServices::ExpandAndOpen</strong>(oIdentifier,IID_CATBaseUnknown,
	(void**) &amp;piLogicalRef,CATAdpOpenSaveServices::Authoring);
...</pre>
<p>For more information about queries see the following article[<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Behaviors Aggregated under the Logical Reference</h3>
<p>Once we get a logical reference, we can retrieve the list of behaviors which 
belong to it. Note that the CATIFLBehaviorsList::GetBehavior method construct a 
list containing every kind of system behavior even ones not using Modelica.</p>
<pre>hr = piLogicalRef-&gt;QueryInterface(<strong>IID_CATIFLBehaviorsList</strong>,(void **) &amp; piBehaviorList);
...
CATListValCATBaseUnknown_var *behaviorList= new CATListValCATBaseUnknown_var();
if(SUCCEEDED(piBehaviorList-&gt;<strong>GetBehaviors</strong>(behaviorList)) &amp;&amp; behaviorList)</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Browsing the Dynamic Behavior</h3>
<p>Once the behaviors has been retrieved from the logical reference, we need to 
isolate the dynamic ones. This is quite simple as only dynamic behaviors adhere 
to the CATIModelicaClass interface. Once we get a CATIModelicaClass pointer, we 
can retrieve the Modelica text and the children classes of the current behavior.</p>
<pre class="code">HRESULT BrowseBehaviors(CATListValCATBaseUnknown_var*&amp; listOfBehaviors)
{
	HRESULT rc = E_FAIL;
	if(listOfBehaviors)
	{
		for(int i=1;i&lt;=listOfBehaviors-&gt;Size();i++)
		{
			CATBaseUnknown_var hBehaviorAsBaseUkn = (*listOfBehaviors)[i];
			if(hBehaviorAsBaseUkn != NULL_var)
			{
				<strong>CATIModelicaClass_var hModelicaClass = hBehaviorAsBaseUkn;</strong>
				if(NULL_var != hModelicaClass)
				{
					CATUnicodeString modelicaText;
					CATListValCATBaseUnknown_var *modelicaChildren=NULL;

					//We get the modelica text of the main model
					HRESULT hr1 = hModelicaClass-&gt;<strong>GetFullText</strong>(modelicaText);
					//We get the local classes of the main model
					//The content of the list can be converted into CATIModelicaClass pointers 
					HRESULT hr2 = hModelicaClass-&gt;<strong>GetLocalClasses</strong>(modelicaChildren);
					
...</pre>
<p><code>The CATIModelicaClass::GetFullText(CATUnicodeString &amp; oText)</code> 
implementation on a Modelica class to retrieve its Modelica text.</p>
<p>The <code>CATIModelicaClass::GetLocalClasses(CATListValCATBaseUnknown_var*&amp; 
oLocalClasses)</code> implementation on a Modelica class to retrieve its children 
classes.</p>
<p>The use case only gets the size of the children list but it is of course possible 
to get a CATIModelicaClass pointer on the children class and then proceed recursivly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAASbiBrowsingModelicaClass</code> use case ends by simply closing 
the PLM session. [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case <code>CAASbiBrowsingModelicaClass</code> details the steps involved 
in the CAA Customization to browse through a Dynamic Behavior, using the <code>CATSysBehaviorUseItf</code> 
framework. The exposition today is limited to only browse Dynamic Behaviors aggregated 
under a Logical reference.</p>
<p>To begin with it loads a Logical Reference and retrieve the Dynamic Behavior 
aggregated under it and described in the Modelica language. The most important CAA 
APIs illustrated in this Use Case are:</p>
<ul>
	<li><code>CATIModelicaClass::GetFullText(CATUnicodeString &amp; oText)</code> 
		implementation on a Modelica class to retrieve its Modelica text.</li>
	<li><code>CATIModelicaClass::GetLocalClasses(CATListValCATBaseUnknown_var*&amp; 
		oLocalClasses)</code> implementation on a Modelica class to retrieve its 
		children classes.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASysTaUnderstandingDynamicBehaviorModeler.htm">Understanding 
		the Dynamic Behavior Modeler</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Creating a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPLMAllConcepts/CAAPLMTaAllCusto.htm'); return false;">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm'); return false;">
		Opening PLM Reference with various Expand Modes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">    insertCopyright();</script>

</body>

</html>
