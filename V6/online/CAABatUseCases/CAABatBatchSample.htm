<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating a Batch</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Batch</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAABatBatchSample use case. This use case 
		explains how to implement and use a simple batch.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAABatBatchSample Use Case</a>
			<ul>
				<li><a href="#What">What Does CAABatBatchSample Do</a></li>
				<li><a href="#How">How to Launch CAABatBatchSample</a></li>
				<li><a href="#Where">Where to Find the CAABatBatchSample Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>A batch is a non interactive program which fits three principles:</p>
<ol>
	<li>The code is implemented in a library, by the &quot;batchmain&quot; function.</li>
	<li>The batch is described in a XML file known as &quot;file descriptor&quot;.</li>
	<li>Its inputs and outputs are described in one to card-index XML file known 
	as &quot;parameter file&quot;.</li>
</ol>
<p>This use case is intended to help you to make your first steps in creating your 
own batch. The main points are:</p>
<ul>
	<li>Write the batchmain library.</li>
	<li>Write your Batch Descriptor file.</li>
	<li>Write your Batch Parameter file.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAABatBatchSample Use Case</h2>
<p>CAABatBatchSample is a use case of the CAABatchInfrastructure.edu framework that 
illustrates the batch infrastructure capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAABatBatchSample Do</h3>
<p>This batch sample takes as input a list of .model files and renames it to .CATPart 
files.</p>
<p><strong>Warning</strong>: this batch sample does not convert model file to CATPart file. 
It is only about renaming the files.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAABatBatchSample</h3>
<p><strong>The Parameter file</strong></p>
<p>The parameter file syntax is decided by the batch author, depending on the Batch 
Infrastructure rules.</p>
<p>The parameter file used in this sample is:</p>
<pre class="code">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE root SYSTEM &quot;Parameters.dtd&quot; &gt;
&lt;root batch_name=&quot;BatchSample&quot; &gt;
  &lt;inputParameters&gt;
    &lt;file id=&quot;file1&quot; filePath=&quot;XXX\CAABatchInfrastructure.edu\Data.d\ATTRIBUTCXR1.model&quot; type=&quot;bin&quot;/&gt;
    &lt;file id=&quot;file2&quot; filePath=&quot;XXX\CAABatchInfrastructure.edu\Data.d\BOBINE.model&quot; type=&quot;bin&quot;/&gt;
    &lt;file id=&quot;file3&quot; filePath=&quot;XXX\CAABatchInfrastructure.edu\Data.d\CUBE.model&quot; type=&quot;bin&quot;/&gt;
    &lt;simple_arg id=&quot;action&quot; value=&quot;1&quot;/&gt; 
  &lt;/inputParameters&gt;
  &lt;outputParameters&gt;
    &lt;folder id=&quot;out_dir&quot; folderPath=&quot;&quot; type=&quot;bin&quot; extension=&quot;CATPart&quot; /&gt;
  &lt;/outputParameters&gt;
&lt;/root&gt;</pre>
<p>where:</p>
<ul>
	<li><code>BatchSample</code> is the name of the descriptor file.</li>
	<li><code>&lt;inputParameters&gt;</code> and <code>&lt;/inputParameters</code>&gt; are the 
	tags used to define the input parameters section.</li>
	<li><code>&lt;outputParameters&gt;</code> and <code>&lt;/outputParameters&gt;</code> are 
	the tags used to define the output parameters section.</li>
	<li><code>&quot;XXX\ATTRIBUTCXR1.model&quot;</code> is the full path of the input file.</li>
	<li><code>folderPath</code> attribute is the full path for the output directory. 
	If this attribute is set to &quot;&quot;, such as in the example, the directory defined 
	with the <code>$BATCH_HOME</code> variable is used.</li>
</ul>
<p>The Parameters.dtd file used to check the xml files syntax is provided by the 
Batch Infrastructure and is used for all batches.</p>
<p><strong>The Descriptor file</strong>:</p>
<p>The Descriptor file allows the system to make a list of all the available batches. 
It must be stored in the Framework/CNext/resources/batchdesc directory. It is created 
once by the batch author and should not be changed by user.</p>
<p>The descriptor file used in this sample is:</p>
<pre class="code">&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39; standalone=&#39;no&#39; ?&gt;
&lt;!DOCTYPE batch SYSTEM &quot;BatchDescriptor.dtd&quot;&gt;

&lt;batch name=&quot;BatchSample&quot; 
       description=&quot;Sample batch&quot; 
       commandline=&quot;CATBatch CAABatBatchSample&quot; /&gt;</pre>
<p>where:</p>
<ul>
	<li><code>BatchSample</code> is the batch name.</li>
	<li><code>CAABatBatchSample</code> is the name of the library to load, i.e.,
	the library where the batchmain is implemented.</li>
</ul>
<p>The BatchDescriptor.dtd file used to check the xml files syntax is provided by 
the Batch Infrastructure and is used for all batches.</p>
<p>To launch the use case you have to follow the following steps:</p>
<ul>
	<li>Edit the parameter file ParamSample.xml in the CAABatchInfrastructure.edu/Data.d 
	directory.</li>
	<li>Change the &quot;file1&quot;, &quot;file2&quot;, and &quot;file3&quot; values, by completing the path 
	with the full path on your machine.</li>
	<li>Set up the run time environment (mkrun on build time installation and catstart 
	on runtime installation).</li>
	<li>Launch the following command:<p><code>CATBatch XXX/ParamSample.xml</code></p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAABatBatchSample</h3>
<p>The CAABatBatchSample use case is made of a single function named <code>batchmain</code> 
located in the CAABatBatchSample.m module of the CAABatchInfrastructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAABatchInfrastructure.edu\CAABatBatchSample.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
directory where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps to implement <em>CATBatBatchSample</em>:</p>
<ol>
	<li><a href="#Step1">Initializing the Completion State</a></li>
	<li><a href="#Step2">Using the Batch Log</a></li>
	<li><a href="#Step3">Retrieving the CATIBatch Interface </a></li>
	<li><a href="#Step4">Retrieving Input Parameters</a></li>
	<li><a href="#Step5">Retrieving field=value Argument by its Id</a></li>
	<li><a href="#Step6">Retrieving the Output Parameters</a></li>
	<li><a href="#Step7">Renaming Input Files</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Initializing the Completion State</h3>
<pre class="code">CATBatStatePubCAA* pub = CATBatStatePubCAA::GetCAAStatePub();

pub-&gt;SetBatchState(10);</pre>
<p>The CATBatStatePubCAA object is used to publish a completion state for the batch.</p>
<p>The method <code>SetBatchState</code> allows the batch author to set the completion state 
of the task during the batch execution.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Using the Batch Log</h3>
<pre class="code">CATBatchLogCAA::PutInLog(&quot;filepath: &quot;);
CATBatchLogCAA::PutInLog(usfile_path.CastToCharPtr() );

CATBatchLogCAA::PutInLog(&quot;\n&quot;);</pre>
<p>The batch author can write in a batch log during the program execution. It allows 
the system to log information about what the batch is doing. It can be useful if 
the batch ends abnormally.</p>
<p>This log is written in the $BATCH_HOME/uuid/uuidLog.txt file. The default value 
for <code>BATCH_HOME</code> is /tmp (on UNIX) or C:\temp (on Windows) and uuid is a generated 
identifier for each batch execution.
The only parameter allowed in the <code>PutInLog</code> method is a string.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the CATIBatch Interface</h3>
<pre class="code">CATIBatchCAA* batch = GetCATIBatchCAA();</pre>
<p>The XML parameter file is read, at batch start, and an XML tree is generated 
in memory. <em>CATIBatch</em> is the main interface to access the XML parameter tree from the 
batch.</p>
<p>The interfaces <em>CATIBatchElementCAA</em> (for a tag) and <em>CATIBatchElementsCAA</em> (for a list 
of tags) can be retrieved from <em>CATIBatchCAA</em> allowing accessing the whole XML tree.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving Input Parameters </h3>
<pre class="code">//Retrieves InputParameters section from the XML parameter file
CATIBatchElementCAA* inputParameters = NULL;
HRESULT hr = batch-&gt;get_InputParametersCAA(inputParameters);

//Retrieves all the &lt;file&gt; tags included in the inputParameters section
CATIBatchElementsCAA* inputFiles = NULL;
hr = inputParameters-&gt;get_FileListCAA(inputFiles);

// We scan the list of &lt;file&gt; 
long childrenCount = 0;
hr = inputFiles-&gt;get_Count(childrenCount);
CATIBatchElementCAA * elem = NULL;
CATListOfCATUnicodeString listOfV4Files;

for ( int i = 0; i&lt;childrenCount; i++ )
{
  hr = inputFiles-&gt;ItemCAA( i, elem );
// for each &lt;file&gt; we retrieve the file path corresponding to the attribute &quot;filePath&quot; of the
// &lt;file&gt; tag.
  CATUnicodeString usfile_path;
  elem-&gt;get_Path(usfile_path); 

// We write this path in the log of the batch available in $BATCH_HOME/uuid/uuidLog.txt 
// at the end of the execution. Default for BATCH_HOME is /tmp or C:\temp and uuid is a
// generated identifier for each batch execution.
  CATBatchLogCAA::PutInLog(&quot;filepath: &quot;);
  CATBatchLogCAA::PutInLog(usfile_path.CastToCharPtr() );
  CATBatchLogCAA::PutInLog(&quot;\n&quot;);
  ...
//We store the file path in a list for later use
  listOfV4Files.Append( usfile_path ); 
}
...</pre>
<p><code>get_FileListCAA</code> is a method which extracts all the &lt;file&gt; tags from 
the input parameters. This method is used because we know that in our particular 
sample, the input parameters contain a file list.</p>
<p>Another call could have been:</p>
<pre class="code">
elem-&gt;ParameterCAA(&quot;file1&quot;, inputFile);
elem-&gt;ParameterCAA(&quot;file2&quot;, inputFile);
elem-&gt;ParameterCAA(&quot;file3&quot;, inputFile);
</pre>
<p>where:</p>
<ul>
	<li><code>file1</code>, <code>file2</code>, and <code>file3</code> are the ids of the tags you want to retrieve 
	in the parameter file.</li>
	<li><code>inputFile</code> is a <em>CATIBatchElementCAA</em> pointer to those tags.</li>
</ul>
<p><code>get_Path</code> is a method which extracts a &quot;file path&quot; type argument only from 
the <code>&lt;file&gt;</code> 
and <code>&lt;folder&gt;</code> tags. All those methods are listed and commented in CATIBatchElementCAA 
and CATIBatchElementsCAA.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving field=value Argument by its Id</h3>
<pre class="code">//We retrieve the &lt;simple_arg&gt; tag 
CATIBatchElementCAA* oAction = NULL;
CATUnicodeString usId = &quot;action&quot;;

// The Parameter method can be used to retrieve any tag (&lt;file&gt;, &lt;folder&gt;, &lt;simple_arg&gt;) giving 
// in the value of its &quot;id&quot; attribute. Here the tag is &lt;simple_arg id=&quot;action&quot; value=&quot;1&quot;/&gt;
hr = inputParameters-&gt;ParameterCAA(usId, oAction);

...
// As we know the type of our value we directly call the right cast method to get it as a long.
long action = 0;

hr = oAction-&gt;LongArg(action); 
...</pre>
<p>The tag <code>&lt;simple_arg&gt;</code> allows the batch author to describe &quot;field=value&quot; like arguments 
using the XML syntax.</p>
<p><code>LongArg</code> is a method used to retrieve the value of a long type argument. Equivalent 
methods exist in <em>CATIBatchElementCAA</em> interface according to the type expected for 
the given tag value (e.g <code>StringArg</code>).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Output Parameters</h3>
<pre class="code">//Retrieves the outputParameters section
CATIBatchElementCAA * outputParameters = NULL;
hr = batch-&gt;get_OutputParametersCAA(outputParameters);

//We retrieve the tag which id=&quot;out_dir&quot;, our output directory
CATIBatchElementCAA* oDir = NULL;
usId = &quot;out_dir&quot;;

hr = outputParameters-&gt;ParameterCAA(usId, oDir);

// We retrieve the path of this directory (value of the attribute &quot;folderPath&quot;)
CATUnicodeString us_path;
oDir-&gt;get_Path(us_path);
...</pre>
<p>The output parameters are read in the parameter file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Renaming Input Files</h3>
<pre class="code">char in_filename[CATMaxPathSize];
char in_dirname[CATMaxPathSize];

char out_fullfilename[CATMaxPathSize];
CATUnicodeString out_fullfilename_us;

CATBatchLogCAA::PutInLog(&quot;Output Creation \n&quot;);

for (int ii=1; ii&lt;=listOfV4Files.Size(); ii++)
{
  memset(in_filename, &#39;\0&#39;, CATMaxPathSize);
  memset(in_dirname, &#39;\0&#39;, CATMaxPathSize);
  memset(out_fullfilename, &#39;\0&#39;, CATMaxPathSize);

  CATSplitPath( listOfV4Files[ii].CastToCharPtr(), in_dirname, in_filename);

  char* ptr = NULL;
  CATSysStrtok(in_filename, &quot;.&quot;, &amp;ptr);
  sprintf(out_fullfilename, &quot;%s%c%s.CATPart&quot;, us_path.ConvertToChar() , dir_delim, in_filename);

  CATBatchLogCAA::PutInLog(&quot;creating output : &quot;);
  CATBatchLogCAA::PutInLog(out_fullfilename);
  CATBatchLogCAA::PutInLog(&quot;\n&quot;);
  out_fullfilename_us = out_fullfilename;

  CATFCopy(&amp;(listOfV4Files[ii]), &amp;out_fullfilename_us, 0);
}</pre>
<p>The input files are renamed with the .CATPart extension. This is the purpose 
of the batch.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To create a batch, create an XML parameter file and an XML descriptor file.
The batch code uses the <em>CATIBatchCAA</em> interface and the <em>CATIBatchElementCAA</em> interface
to retrieve the batch parameters, and the <em>CATBatchLogCAA</em> class to manage the batch log.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
