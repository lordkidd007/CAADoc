<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Contextual Menus in a State Dialog Command</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Contextual Menus in a State Dialog Command</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create, in a state dialog command, a contextual 
		menu displayed when right clicking on objects that implement a given interface.</p>
		<ul>
			<li><a href="#100000">What You Will Learn With This Use Case</a></li>
			<li><a href="#200000">The Logical Command Use Case</a>
				<ul>
					<li><a href="#What">What Does the Logical Command Do</a></li>
					<li><a href="#How">How to Launch the Logical Command</a></li>
					<li><a href="#Where">Where to Find the Logical Command Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#Variant">Displaying the Contextual Menu when Clicking 
				on Any Object and on the Background</a></li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create a contextual menu that is displayed 
on objects that implement a given interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>The Logical Command Case</h2>
<p>The Logical command is a use case of the CAADialogEngine.edu framework that illustrates 
the DialogEngine framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the Logical Command Do</h3>
<p>The Logical command is a state dialog command that creates a contextual menu, 
that is, a menu displayed when the end user right clicks on objects. This menu is 
displayed only if the object implements a given interface, namely <em>CAAISysLine</em>. 
A right click on such objects displays a contextual menu with three items, 
concatenated to the items provided for the tab, since the model is displayed in a <em>CATFrmGraphAnd3DWindow</em> 
instance.</p>
<table>
	<tr>
		<td rowspan="2">
		<img alt="" src="images/CAADegCtxMenu1.jpg" width="190" height="181"/></td>
		<td style="height: 28px">General items provided for the tab</td>
	</tr>
	<tr>
		<td>Items added by the Logical command</td>
	</tr>
</table>
<p>Clicking on one of these items displays the start, medium, or end point of the 
line. These points are temporary points ( CAAISysPoint objects) displayed by the 
ISO.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the Logical Command</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">1</a>] use case for 
a detailed description of how this use case should be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>&quot;CAA: Create Geom&quot;</strong> app. </li>
    <li>Launch the <strong>Line</strong> command in <strong>&quot;CAA Geometry Creation Section&quot;</strong> 
    of the action bar.</li>
	<li>Click twice to create the line end points.</li>
	<li>Click again on <strong>3D</strong>, the west quadrant of Compass.</li>
	<li>In the <strong>3D Modeling apps</strong> section, select <strong>&quot;CAA: Analyse Geom&quot;</strong> app. </li>
    <li>Launch the <strong>Logical</strong> command in <strong>&quot;CAA Geometry Analysis Section&quot;</strong> 
    of the action bar.</li>
	<li>Right click the line, and click one of the proposed items. The corresponding 
		point is displayed.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the Use Case Code</h3>
<p>The Logical command is made of a single class named <em>CAADegAnalysisLogCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the CAADegAnalysisLogCmd <code>BuildGraph</code> method, there are 
seven steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the state dialog command header file</a></td>
		<td>Header file</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Enable the command to be instantiated by a command 
		header</a></td>
		<td>Source file</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Implement the command state chart diagram</a></td>
		<td>BuildGraph method</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Create the Action Method</a></td>
		<td>action method</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create the callback methods</a></td>
		<td>action method</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Manage the command lifecycle</a></td>
		<td>callback method and destructor</td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Release the indication agent</a></td>
		<td>Destructor or <code>Cancel</code> method</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the State Dialog Command Header File</h3>
<p>Below is the header file of the <em>CAADegAnalysisLogCmd</em> class that holds 
the code for this command.</p>
<pre class="code">#include &quot;CATStateCommand.h&quot;  // Needed to derive from CATStateCommand

class CATPathElementAgent; 
class CATISO;
class CAAISysPoint;
class CATMathPoint;

class CAADegAnalysisLogCmd : public CATStateCommand
{

  CmdDeclareResource(CAADegAnalysisLogCmd,CATStateCommand);
  public :
    CAADegAnalysisLogCmd();
    virtual           ~CAADegAnalysisLogCmd(); 

    <em>// Manages the focus</em>
    CATStatusChangeRC Activate   ( CATCommand * iCmd,CATNotification * iNotif);
    CATStatusChangeRC Cancel     ( CATCommand * iCmd,CATNotification * iNotif);
    CATStatusChangeRC Desactivate( CATCommand * iCmd,CATNotification * iNotif);

    virtual void <strong>BuildGraph</strong>(); <em> // Implements the statechart</em>

    CATBoolean <strong>CreateCntxMenu</strong>(void * iUsefulData);

    void StartPoint (CATCommand           * iCmd , 
		     CATNotification      * iNotif, 
	             CATCommandClientData   iData) ;
    void MediumPoint(CATCommand           * iCmd , 
		     CATNotification      * iNotif, 
	             CATCommandClientData   iData) ;
    void EndPoint   (CATCommand           * iCmd , 
		     CATNotification      * iNotif, 
	             CATCommandClientData   iData) ;
  
  private :

    void ShowPoint(CATMathPoint &amp;iPoint);
    CATPathElementAgent  * _daPathElement ;    
    CATISO               * _ISO ;
    CAAISysPoint         * _TemporaryPoint ;
    CATBaseUnknown       * _Container;      
};</pre>
<p>This class includes the following:</p>
<ul>
	<li>The <code>CmdDeclareResource</code> macro states that the resources for 
		this command, that is the prompts associated with the different states, 
		are located in a file named CAADegAnalysisLogCmd.CATNls </li>
	<li>The three methods <code>Activate</code>, <code>Desactivate</code>, and
		<code>Cancel</code>, are called by the command selector to manage the command 
		in the command stack </li>
	<li>The <code>BuildGraph</code> method creates the states, dialog agents, anf 
		transitions of the dialog command </li>
	<li>The <code>CreateCntxMenu</code> method is called when the end user clicks 
		a line </li>
	<li>The <code>StartPoint</code>, <code>MediumPoint</code>, and <code>EndPoint</code> 
		methods are the methods called by the menu items </li>
	<li>The <code>ShowPoint</code> method creates and displays the required point.</li>
</ul>
<p>The data members are pointers to the path element agent used by the <code>BuildGraph</code> 
method, the Interactive Set of Objects used to display the start, medium, or end 
point as a temporary point that doesn't belong to the data model, and the model 
container that implements the point factory interface used to create this point.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Enabling the Command to Be Instantiated by a Command Header</h3>
<p>The CAADegAnalysisLogCmd.cpp begins by:</p>
<pre class="code">...
#include &quot;CATCreateExternalObject.h&quot;
CATCreateClass(CAADegAnalysisLogCmd);
...</pre>
<p>This macro creates a C function that creates an instance of this class. This 
function is called by the command header to instantiate the command when the end 
user selects it if it weren't previously instantiated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing the Command State chart Diagram</h3>
<p>Below is the code to write in the <code>BuildGraph</code> method:</p>
<pre class="code">...
void CAADegAnalysisLogCmd::BuildGraph()
{
   _daPathElement = new CATPathElementAgent(&quot;SelFirstLine&quot;);
   _daPathElement-&gt;AddElementType(&quot;CAAISysLine&quot;);
   _daPathElement-&gt;SetBehavior( CATDlgEngWithContext |
	                        CATDlgEngRepeat      |	                
                                CATDlgEngWithUndo );

  CATDialogState *stGetEltState = GetInitialState(&quot;stGetEltStateId&quot;);
   stGetEltState-&gt;AddDialogAgent(_daPathElement);

  CATDialogTransition *pCntxMenuTransition =    AddTransition
	   (
		   stGetEltState,
		   stGetEltState,
		   IsLastModifiedAgentCondition(_daPathElement)  , 
		   Action((ActionMethod) &amp; CAADegAnalysisLogCmd::CreateCntxMenu)
		) ; 
}
...</pre>
<p>A <em>CATPathElement</em> instance is created as a data member of the dialog command 
class. It is valued for objects implementing the <em>CAAISysLine</em> interface 
using the <code>AddElementType</code> method, and when right clicking on their representations 
thanks to the <code>CATDlgEngWithContext</code> behavior in the <code>SetBehavior</code> 
method. The <code>CATDlgEngRepeat</code> behavior makes this dialog agent repeatable. 
A single state is created, and the dialog agent is added to it. The transition loops 
on this state, and whenever right clicking on a object matches the dialog agent, 
the <code>CreateCntxMenu</code> method is executed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Action Method</h3>
<p>This method is as follows.</p>
<pre class="code">...
CATBooleanCAADegAnalysisLogCmd::CreateCntxMenu(void * iData)
{
  // Selected Line 
  CATPathElement * pLinePath = _daPathElement-&gt;GetValue();
  CATBaseUnknown * pLine = NULL;
  if ( pLinePath &amp;&amp; pLinePath-&gt;GetSize() )
  {
    pLine = (*pLinePath)[pLinePath-&gt;GetSize()-1];
  }

  if ( pLine)
  {
    // Retrieves the contextual menu
    CATNotification *pNotif = GetLastNotification();
    CATDlgContextualMenu *pCntxMenu = ((CATContext*)pNotif)-&gt;GetContextualMenu();

    // Default Item Title 
    CATString StartString (&quot;StartPoint&quot;);
    CATString MediumString(&quot;MediumPoint&quot;);
    CATString EndString (&quot;EndPoint&quot;) ;

    // all these dialog objects are deleted when the contextual menu 
    // is deleted. The command does't delete them.
    CATDlgSeparatorItem *Separator = new CATDlgSeparatorItem(pCntxMenu,&quot;separator&quot;);
    CATDlgPushItem * StartPoint    = new CATDlgPushItem(pCntxMenu,StartString) ;
    CATDlgPushItem * MediumPoint   = new CATDlgPushItem(pCntxMenu,MediumString) ;
    CATDlgPushItem * EndPoint      = new CATDlgPushItem(pCntxMenu,EndString) ;
    
    // NLS data in the NLS file of this command ( see this header file )
    StartPoint-&gt;SetTitle(CATMsgCatalog::BuildMessage(
                                      &quot;CAADegAnalysisLogCmd&quot;,
                                      &quot;StartPointTitle&quot;)); 
    MediumPoint-&gt;SetTitle(CATMsgCatalog::BuildMessage(
                                       &quot;CAADegAnalysisLogCmd&quot;,
                                       &quot;MediumPointTitle&quot;)); 
    EndPoint-&gt;SetTitle(CATMsgCatalog::BuildMessage(
                                       &quot;CAADegAnalysisLogCmd&quot;,
                                       &quot;EndPointTitle&quot;)); 

    // Callbacks
    AddAnalyseNotificationCB(EndPoint,
                             EndPoint-&gt;GetMenuIActivateNotification(),
                             (CATCommandMethod) &amp; CAADegAnalysisLogCmd::EndPoint, 
			     (void*) pLine );

    AddAnalyseNotificationCB(MediumPoint,
                             MediumPoint-&gt;GetMenuIActivateNotification(),
			  (CATCommandMethod) &amp; CAADegAnalysisLogCmd::MediumPoint, 
			  (void*) pLine );

    AddAnalyseNotificationCB(StartPoint,
                             StartPoint-&gt;GetMenuIActivateNotification(),
			  (CATCommandMethod) &amp; CAADegAnalysisLogCmd::StartPoint, 
			  (void*) pLine );
  }
  return TRUE ;
}
...</pre>
<p>This method is called when the transition of the <code>BuildGraph</code> method 
is executed. It:</p>
<ul>
	<li>Retrieves the last notification sent, that is a <em>CATContext</em> instance, 
		and retrieves from this notification a pointer to the contextual menu</li>
	<li>Creates the three push items added as children of the contextual menu</li>
	<li>Sets their displayed titles from the message file</li>
	<li>Retrieves a pointer to the path element of the object right clicked from 
		the dialog agent that holds it</li>
	<li>Retrieves a pointer to the line implementation, as the last item in the 
		path element table (its range is table size minus 1)</li>
	<li>Sets callbacks for the three menu items. The pointer to the line is passed 
		as the fourth parameter of the <code>AddAnalyseNotificationCB</code> method 
		to the called methods.</li>
</ul>
<p>Since the contextual menu is retrieved and updated with push items and a separator 
rather than being created, there is no need to delete the push items and the separator. 
They will be deleted when the contextual menu itself will be deleted by the destructor 
of the class that creates it. In the same way, there is no need to remove the callbacks. 
They will also be automatically removed when the contextual menu will be deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Callback Methods</h3>
<p>The callback methods retrieve each the appropriate point to display, and call 
the <code>ShowPoint</code> method. Only StartPoint is shown here.</p>
<pre class="code">...
void CAADegAnalysisLogCmd::StartPoint(CATCommand           * iSendingCommand, 
                                   CATNotification      * iSentNotification, 
                                   CATCommandClientData   iUsefulData)
{
  CATBaseUnknown * pLine = (CATBaseUnknown *) iUsefulData;
  if ( pLine )
  {
    CAAISysLine * Line = NULL;                
    HRESULT rc = pLine-&gt;QueryInterface(IID_CAAISysLine, (void**)&amp;Line);
    if (SUCCEEDED(rc))
    {
      CATMathPoint point ;
      Line-&gt;GetStartPoint(point) ;
      ShowPoint(point);
      Line -&gt; Release();
    }
  }
}
...</pre>
<p>The <code>ShowPoint</code> method creates a point instance, if it doesn't already 
exist, that implements the <em>CAAISysPoint</em> interface, and the point factory 
returns a pointer to this interface, and adds it to the Interactive Set of Objects. 
This makes it possible to display it. Then <code>ShowPoint </code>assigns to that 
instance the coordinates of the <em>CATMathPoint</em> instance passed from the called 
back method and updates the ISO with this point.</p>
<pre class="code">...
void CAADegAnalysisLogCmd::ShowPoint(CATMathPoint &amp; iPoint)
{   
  if ( NULL == _piTemporaryPoint ) 
  {
    CAAISysGeomFactory * piSysGeomFactory = NULL;                
    HRESULT rc = _pContainer-&gt;QueryInterface(IID_CAAISysGeomFactory, 
                                          (void**)&amp;piSysGeomFactory);
    if (SUCCEEDED(rc))
    {
      piSysGeomFactory -&gt; Create(CAAISysGeomFactory::Point, IID_CAAISysPoint, 
                        (CATBaseUnknown**)&amp;_piTemporaryPoint);
      _pISO-&gt;AddElement(_piTemporaryPoint);

      piSysGeomFactory -&gt; Release();
      piSysGeomFactory=NULL;
    }
  }

  if (  NULL != _piTemporaryPoint )
  {
    _piTemporaryPoint-&gt;SetCoord((float) iPoint.GetX(),
                                (float) iPoint.GetY(), 
                                (float) iPoint.GetZ());
    _pISO-&gt;<strong>UpdateElement</strong>(_piTemporaryPoint) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Managing the Command Lifecycle</h3>
<p>The following methods are called by the command selector to manage the command 
when it becomes the active one, or when another command becomes active instead.</p>
<pre class="code">...
CATStatusChangeRC CAADegAnalysisLogCmd::Cancel(CATCommand *iCmd, CATNotification *iNotif)
{
  if (_TemporaryPoint)
  {
    _ISO-&gt;<strong>RemoveElement</strong>(_TemporaryPoint);
    _TemporaryPoint-&gt;Release();
    _TemporaryPoint= NULL ;
  }
  return (CATStatusChangeRCCompleted);
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Releasing the Indication Agent</h3>
<p>A pointer to the selection agent was created in the command <code>BuildGraph</code> 
method as a data member to be accessed and used in different methods. It should 
be released when it becomes useless. This can be done in the command destructor, 
as shown here. This could also be done in the <code>Cancel</code> method called 
just before the destructor.</p>
<pre class="code">CAADegAnalysisLogCmd::CAADegAnalysisLogCmd()
{
  ...
  if ( NULL != _daPathElement  )
  {
     _daPathElement -&gt;RequestDelayedDestruction() ;
     _daPathElement = NULL ;
  }  ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Variant"></a>Displaying the Contextual Menu when Clicking on Any Object 
and on the Background</h2>
<p>The same command should now react to any object whose representation is right 
clicked. This includes the viewer background. To do this, replace the <code>AddElementType</code> 
method by the <code>AcceptOnNotify</code> method to make the dialog agent match 
any right click, and remove the <code>CATDlgEngWithContext</code> behavior from 
the <code>AddElementType</code> method. The rest of the method is unchanged.</p>
<pre class="code">void CAADegAnalysisLogCmd::BuildGraph()
{
  _daPathElement = new <strong>CATPathElementAgent</strong>(&quot;SelFirstLine&quot;);
  _daPathElement-&gt;<strong>AcceptOnNotify</strong>(NULL, &quot;CATContext&quot;);
  _daPathElement-&gt;<strong>SetBehavior</strong>(CATDlgEngRepeat);

  CATDialogState * stGetEltState = <strong>GetInitialState</strong>(&quot;stGetEltStateId&quot;);
  stGetEltState-&gt;<strong>AddDialogAgent</strong>(_daPathElement);

  CATDialogTransition * pCntxMenuTransition = AddTransition
           (stGetEltState,        // From state
            stGetEltState,        // To state
            <strong>IsLastModifiedAgentCondition</strong>(_daPathElement), 
            <strong>Action</strong>((ActionMethod) &amp; CAADegAnalysisLogCmd::CreateCntxMenu));
}</pre>
<p>The <code>CreateCtxMenu</code> method is the same as above.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Contextual menus can be set onto objects implementing a given interface by any 
dialog command.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
