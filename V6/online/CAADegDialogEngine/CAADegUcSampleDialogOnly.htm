<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Command that Consists in a Dialog Box</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Command that Consists in a Dialog Box</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a command without states using a single 
		dialog box.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrBoundingElementCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrBoundingElementCmd Do</a></li>
					<li><a href="#How">How to Launch CAAAfrBoundingElementCmd</a></li>
					<li><a href="#Where">Where to Find the CAAAfrBoundingElement 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to use a dialog box as a standalone command 
without states. This command is an undefined command which is unknown by the command 
selector [<a href="#References">1</a>]. It means that it can run in parallel with 
the active command known by the command selector.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrBoundingElementCmd Use Case</h2>
<p>CAAAfrBoundingElementCmd is a use case of the CAAApplicationFrame.edu framework 
that illustrates the ApplicationFrame framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrBoundingElementCmd Do</h3>
<p>CAAAfrBoundingElementCmd is a dialog command made up of a dialog box. It creates 
a bounding element, namely a sphere, for all or some of the geometric objects currently 
existing in the active tab. While computing the bounding sphere, it displays 
a progress bar.</p>
<p>The dialog is as follows:</p>
<p>
<img alt="" src="images/CAADegBoundingElt1.jpg" width="543" height="421"/></p>
<p>The model displayed includes points, lines, planes and triangles. Select the CAAAfrBoundingElementCmd 
command.</p>
<p>
<img alt="" src="images/CAADegBoundingElt2.jpg" width="542" height="422"/></p>
<p>The Model Bounding Sphere dialog box is displayed. You can check the options 
that take the points and lines into account in the bounding sphere computing, and 
press Compute. This launches the bounding sphere computation. A progress bar is 
shown in the dialog box to show the progress status.</p>
<p>
<img alt="" src="images/CAADegBoundingElt3.jpg" width="541" height="425"/></p>
<p>The bounding sphere is computed. The dialog box was moved to show the bounding 
sphere displayed using three of its great circles. You can create other elements 
or delete some elements and next click &quot;Compute&quot; : a new bounding sphere 
will be displayed. The command remains active as long as you don't click Close.</p>
<p>The CAAAfrBoundingElementCmd use case explains how to create such command but 
does not explain:</p>
<ul>
	<li>How to create the progress bar. You can refer to the dedicated article [<a href="#References">2</a>].
	</li>
	<li>How to create/manage the temporary circles visualized thanks to the CATISO. 
		You can refer to the dedicated article [<a href="#References">3</a>].</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrBoundingElementCmd</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">10</a>] for a detailed description of how this use case should 
be launched. For the specific scenario:</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select &quot;<strong>CAA: Create Geom</strong>&quot; app. </li>
    <li>Create several geometric objects such as points, lines, planes, etc..., using the commands 
    in &quot;<strong>CAA Geometry Creation Section</strong>&quot;of the action bar.</li>
	<li>Click again on <strong>3D</strong>, the west quadrant of Compass.</li>
	<li>In the <strong>3D Modeling apps</strong> section, select &quot;<strong>CAA: Analyse Geom</strong>&quot; app. </li>
    <li>Launch the <strong>Bounding Elements</strong> command in &quot;<strong>CAA Geometry Analysis Section</strong>&quot; 
    of the action bar.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrBoundingElementCmd Code</h3>
<p>The CAAAfrBoundingElementCmd use case is made of a single class named <em>CAAAfrBoundingElementCmd</em> 
located in the CAAAfrGeoCommands.m module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">11</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAAAfrBoundingElementCmd is part of the &quot;CAA: Geometry Analysis&quot; workbench.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the CAAAfrBoundingElementCmd command, there are four steps:</p>
<ol>
	<li><a href="#Step1">Creating the Dialog Box Header 
		File</a></li>
	<li><a href="#Step2">Enabling 
		the Launching of the Command from a Command Header</a></li>
	<li><a href="#Step3">Creating the Dialog Box Constructor</a>
	</li>
	<li><a href="#Step4">Managing 
		the Lifecycle of the Command and of its Objects</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Dialog Box Header 
File</h3>
<p>The CAAAfrBoundingElementCmd class header file is as follows.</p>
<pre class="code">...
class CAAAfrBoundingElementCmd : public CATDlgDialog
{
  <strong>DeclareResource</strong>(CAAAfrBoundingElementCmd, CATDlgDialog);
  
  public :
  
    CAAAfrBoundingElementCmd();
    virtual ~CAAAfrBoundingElementCmd();
	
  private :
    ...
    void <strong>ClickClose</strong>(CATCommand           * iSendingCommand,
                    CATNotification      * iSentNotification,
                    CATCommandClientData   iUsefulData);
                    
    void <strong>EditorClose</strong>          (CATCallbackEvent  iEvent,
                           void             *iFrom,
                           CATNotification  *iNotification,
                           CATSubscriberData iData,
                           CATCallback       iCallBack );

 private :
    ...
    <strong>CATFrmEditor</strong>      * _pEditor ;
};</pre>
<p>This header file contains the following declaration:</p>
<ul>
	<li>The class derives from <em>CATDlgDialog</em></li>
	<li>The <code>DeclareResource</code> macro states that the resources of the
		<em>CAAAfrBoundingElementCmd</em> command class are located in the CAAAfrBoundingElementCmd.CATNls 
		file. If resources were assigned to the <em>CATDlgDialog</em> class, they 
		would be concatenated with those of <em>CAAAfrBoundingElementCmd</em></li>
	<li>As usual, the class has a constructor and a destructor</li>
	<li>Two callback methods contain the code to execute when the end user 
	presses the Close button or closes the box in the banner.</li>
	<li>A callback, <code>EditorClose</code> , when the current tab is closed
	</li>
	<li>The editor, associated with the current tab, is kept to compare which 
		one which sends a close notification.</li>
</ul>
<p>Now, there is the description of the source file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Enabling 
the Launching of the Command from a Command Header</h3>
<p>The CAAAfrBoundingElementCmd command is launched from a command header instance 
[<a href="#References">5</a>]. In the CAA: Geometry Analysis&quot; workbench, you 
have such line:</p>
<pre class="code">...
CATAfrCommandHeader::CATCreateCommandHeader(&quot;CAAAfrBoundingEltHdr&quot;, 
                                            &quot;CAAAfrGeoCommands&quot;, 
                                            &quot;CAAAfrBoundingElementCmd&quot;,
                                            (void *) NULL,
                                            &quot;CAAAfrBoundingEltHdr&quot;,
                                            CATFrmAvailable);
...</pre>
<p>So, to be able to create an instance of the command by its name you should have 
these two lines in its source file:</p>
<pre class="code">...
#include &quot;<strong>CATCreateExternalObject</strong>.h&quot;
<strong>CATCreateClass</strong>(CAAAfrBoundingElementCmd);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Dialog Box Constructor</h3>
<p>The CAAAfrBoundingElementCmd command is not seen by the command selector. Its 
starting mode is undefined: it is the default mode of a <em>CATDlgDialog</em> class. 
For such commands, and contrary to the common usage with dialog boxes that use a
<code>Build</code> method to instantiate the dialog objects contained in the dialog 
box, the constructor should perform this instantiation because the command header 
calls only this constructor. So the contents of the constructor is as a <code>Build</code> 
method [<a href="#References">6</a>]:</p>
<pre class="code">...
CAAAfrBoundingElementCmd::CAAAfrBoundingElementCmd()
          :CATDlgDialog ((CATApplicationFrame::GetFrame())-&gt;GetMainWindow(), 
                          &quot;CAAAfrBoundingElementId&quot;,
                          CATDlgGridLayout | <strong>CATDlgWndBtnClose</strong> )
{

   // 1- <a href="#Step31">Creating the dialog objects</a>
   // 2- <a href="#Step32">Arranging the dialog objects</a>
   // 3- <a href="#Step33">Declaring the callbacks associated with the dialog objects</a>
   // 4- <a href="#Step34">Declaring the callback for a model's closure</a>
   ...
   _pEditor = <strong>CATFrmEditor::GetCurrentEditor</strong>();
}
...</pre>
<p>The dialog box has the application main frame as parent [<a href="#References">7</a>]. 
The <code>CATDlgGridLayout</code> style enables you to use the grid layout for its 
internal arrangement [<a href="#References">8</a>] and the <code>CATDlgWndBtnClose</code> 
style is one of the fourth style recommended.</p>
<p><code>_pEditor</code> is a data member which keeps the current editor when the 
command is launched. This data will be useful to check if the model that the end 
user want close is the one associated with this command- See the
<a href="#Step4">Managing the Lifecycle of the Command and of its Objects</a> section.</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: The GetCurrentEditor 
		method must not be used outside the <em>CATCommand</em> class constructor.
		</td>
	</tr>
</table>
<ol>
	<li><a name="Step31"></a>Creating the dialog objects
		<pre class="code">...
     CATDlgFrame * pPointLineGlobalFrame  = new CATDlgFrame(this, &quot;PointLineGlobalFrameId&quot;,CATDlgGridLayout|CATDlgFraNoFrame);
     CATDlgFrame * pPointLineCheckFrame  = new CATDlgFrame(pPointLineGlobalFrame, &quot;PointLineCheckFrameId&quot;,CATDlgGridLayout|CATDlgFraNoFrame);
     CATDlgFrame * pPointLineHeaderFrame  = new CATDlgFrame (pPointLineGlobalFrame, &quot;PointLineHeaderFrameId&quot;,CATDlgGridLayout|CATDlgFraNoFrame);
     CATDlgLabel * pPointLineLabel = new CATDlgLabel(pPointLineHeaderFrame, &quot;LabelPointLineId&quot;);
     ... See the code for the details
...</pre>
	</li>
	<li><a name="Step32"></a>Arranging the dialog objects
		<pre class="code">...
     pPointLineLabel-&gt;SetGridConstraints(0,0,1,1,CATGRID_LEFT);
     pPointLineSep  -&gt;SetGridConstraints(0,1,1,1,CATGRID_4SIDES|CATGRID_CST_HEIGHT);

     ... See the code for the details
     
     <em>// Show the box</em>
     SetVisibility(CATDlgShow);
...</pre>
	</li>
	<li><a name="Step33"></a>Declaring the callbacks associated with the dialog object
		<pre class="code">...
  AddAnalyseNotificationCB(this, this-&gt;<strong>GetWindCloseNotification</strong>(),
                (CATCommandMethod)&amp;CAAAfrBoundingElementCmd::ClickClose,
                            NULL);
  AddAnalyseNotificationCB(this, this-&gt;<strong>GetDiaCLOSENotification</strong>(),
                (CATCommandMethod)&amp;CAAAfrBoundingElementCmd::ClickClose,
                            NULL);
  ...</pre>
		<p>The <code>ClickClose</code> method is executed whenever the dialog 
		box 
		is closed: by the Close button (<code>GetDiaCLOSENotification</code>) or 
		the banner (<code>GetWindCloseNotification</code>).</p>
	</li>
	<li><a name="Step34"></a>Declaring the callback for a model's closure
		<p>This step is mandatory. If the end user closes the current model and 
		the command is alive: it will not be automatically deleted once it is not 
		seen by the command selector. So your command must set a callback when the 
		model will send the &quot;close&quot; event.</p>
		<pre class="code">...
 if ( (NULL != _pEditor) &amp;&amp; (NULL != <strong>CATFrmLayout::GetCurrentLayout</strong>()) )
  {
     ::AddCallback(this,
                    CATFrmLayout::GetCurrentLayout(),
		  <strong>CATFrmEditor::EDITOR_CLOSE_ENDED</strong>(),
		  (CATSubscriberMethod)&amp;CAAAfrBoundingElementCmd::EditorClose,
		  NULL);
  }
...</pre>
		<p>Refer to the technical article [<a href="#References">7</a>] to understand 
		the role of the unique <em>CATFrmLayout</em> class instance. It is the object 
		which sends the <code>CATFrmEditor::EDITOR_CLOSE_ENDED</code> notification.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Managing the Lifecycle of the Command and of its Objects</h3>
<p>The command can be deleted for two reasons:</p>
<ul>
	<li>When the end user closes itself the box:
		<pre class="code">void CAAAfrBoundingElementCmd::ClickClose(CATCommand           * iSendingCommand,
                                          CATNotification      * iSentNotification,
                                          CATCommandClientData   iUsefulData)
{
  <strong>SetVisibility</strong>(CATDlgHide);
                         
  ...

  <strong>RequestDelayedDestruction</strong>();

}</pre>
		<p>In this case, the <code>ClickClose</code> method is called. It hides 
		the dialog box and requests the dialog box to be deleted.</p>
	</li>
	<li>When the model is closed:
		<pre class="code">void CAAAfrBoundingElementCmd::<strong>EditorClose</strong>(CATCallbackEvent  iEvent, void  * iFrom,
                                              CATNotification * iNotification,
                                              CATSubscriberData iClientData,
                                              CATCallback       iCallBack ) 
{
   if ( _pEditor == <strong>iFrom</strong> )
   {
      <strong>RequestDelayedDestruction</strong>();
   }
}</pre>
		<p>The unique <em>CATFrmLayout</em> class instance sends a &quot;<code>EDITOR_CLOSE_ENDED&quot;</code> 
		notification when anything model is closed. So the <code>EditorClose</code><strong>
		</strong>method is called. It is necessary to check that it is the 
		&quot;good&quot; editor before closing the box. <code>iFrom</code> is the editor associated 
		with the model which is closing. If <code>iFrom</code> is the good model 
		the dialog box deletion is requested.</p>
	</li>
</ul>
<p>The destructor, as usual, releases the data members and set NULL the data member 
pointers. In addition, the current destructor must delete the callback on the
<em>CATFrmLayout</em>:</p>
<pre class="code">CAAAfrBoundingElementCmd::~CAAAfrBoundingElementCmd() 
{
  // releases the data members and set NULL the data member pointers
  ...
   if ( (NULL != _pEditor) &amp;&amp; ( NULL != CATFrmLayout::GetCurrentLayout()) )
   {
      ::<strong>RemoveSubscriberCallbacks</strong>(this,CATFrmLayout::GetCurrentLayout());
   }

   _pEditor = NULL ;
}</pre>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: If the command uses 
		interactive objects such as the ISO, HSO, PSO objects [<a href="#References">9</a>], 
		in the destructor you must not remove any objects from this interactive 
		objects. The <em>CATFrmEditor</em> which manages them has already made 
		it. But if the box is closed by the end user, you must remove the objects 
		in the <code>ClickClose</code> method.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a command without state that consists only 
in a dialog box and that in addition, is not known by the command selector.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaCommandModel.htm">
		Understanding the Wintop Frame Command Model</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleProgressTask.htm">
		Creating an Interruptible Task</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADegUcSampleCtxMenu.htm">Creating Contextual Menus in a State 
		Dialog Command</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaCommandHeaders.htm">
		Understanding the Command Headers</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="../CAADlgDialog/CAADlgTaProgrammerGuide.htm">Dialog 
		Programmer's Guide</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Wintop Frame Layout</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="../CAADlgDialog/CAADlgTaGridLayout.htm">How to Arrange 
		Dialog Objects Using a Grid</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaOverview.htm">
		Wintop Frame Overview</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[11]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Fev 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Oct 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
