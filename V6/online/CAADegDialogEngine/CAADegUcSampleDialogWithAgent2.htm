<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Associating a Dialog Box with a Dialog Agent - Part 2</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Associating a Dialog Box with a Dialog Agent - Part 
		2</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to use a dialog box to value a dialog agent. The 
		agent is valuated by a notification sent by the Dialog box. For a valuation 
		by an existing notification, those of the <em>CATDlgDialog</em> class, refer 
		to the first part of the article [<a href="#References">1</a>]. In this 
		article on the other hand, the notification has been specially created to 
		distinguish the end-user interactions in the Dialog box.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADegHistogramChartWindowCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADegHistogramChartWindowCmd 
						Do</a></li>
					<li><a href="#How">How to Launch CAADegHistogramChartWindowCmd</a></li>
					<li><a href="#Where">Where to Find the CAADegHistogramChartWindowCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to use a dialog box associated with a dialog 
agent in a state dialog command. The dialog box values the dialog agent when the 
end user clicks a specific editor and any other objects of the dialog box.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADegHistogramChartWindowCmd Use Case</h2>
<p>CAADegHistogramChartWindowCmd is a use case of the CAADialogEngine.edu framework 
that illustrates Dialog and DialogEngine framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADegHistogramChartWindowCmdDo</h3>
<p>The CAADegHistogramChartWindowCmd is a dialog state command enabling you to 
open a new tab[<a href="#References">2</a>] to display an histogram chart view of 
the data model.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegWndHistoChart2.jpg" width="35" height="38"/></td>
		<td>The title of this command is &quot;Histogram Chart Tab&quot;. You 
		find it in the &quot;Tools&quot; section of the action bar for the CAAGeometry data 
		model.</td>
	</tr>
</table>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegWndHistoChart1.jpg" width="250" height="215"/></td>
		<td>When you launch the &quot;Histogram Chart Tab&quot; command, the &quot;Customization 
		of the Histogram Chart Tab&quot; dialog box appears. Before clicking 
		OK, the end user can change some default parameters for the new tab.</td>
	</tr>
</table>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegWndHistoChart3.jpg" width="566" height="378"/></td>
		<td>When the end user clicks on the OK button, a new tab is created. 
		It contains a 2D viewer with the count of point, line, plane, circle and 
		ellipse in the model.</td>
	</tr>
</table>
<p>The CAADegHistogramChartWindowCmd command is a state dialog command according 
to the following UML state chart diagram [<a href="#References">3</a>].</p>
<table>
	<tr>
		<td>
		<img alt="Histogram Chart Window UML diagram" height="370" src="images/CAADegWndHistoChart4.jpg" width="484"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADegHistogramChartWindowCmd</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">4</a>] use case for 
a detailed description of how this use case should be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
	<li>Select <strong>Histogram Chart Tab</strong> command in the <strong>Tools</strong> section of 
	the action bar.
	</li>
	<li>Click in the <strong>Point 1</strong> editor. </li>
	<li>Click in the <strong>Point 2</strong> editor.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADegHistogramChartWindowCmd Code</h3>
<p>The &quot;Histogram Chart Tab&quot; command is made of a three classes:</p>
<ul>
	<li><em>CAADegHistogramChartWindowCmd</em>, the state command </li>
	<li><em>CAADegHstChartWndDlg</em>, the Dialog box </li>
	<li><em>CAADegEditor1SelectedNotification</em>, The notification sent when the 
		Point.1 editor gets the focus </li>
	<li><em>CAADegEditor1DeselectedNotification</em>, The notification sent when 
		the Point.1 editor loses the focus</li>
</ul>
<p>located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAADegHistogramChartWindowCmd use case:</p>
<ol>
	<li><a href="#Step1">Creating the Histogram Chart Tab Command</a></li>
	<li><a href="#Step2">Creating the CAADegEditor1SelectedNotification Notification</a></li>
	<li><a href="#Step3">Creating the &quot;Customization of the Histogram Chart 
	Tab&quot; Dialog 
		Box</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Histogram Chart Tab Command</h3>
<p>This step can be divided in three parts:</p>
<ol>
	<li><a href="#Step11">Creating the Histogram Chart Tab Header File</a> </li>
	<li><a href="#Step12">Implementing the State Chart Diagram</a> </li>
	<li><a href="#Step13">Releasing the Agents and the Dialog Box</a></li>
</ol>
<ol>
	<li><a name="Step11">Creating the Histogram Chart Tab Header File</a>
		<p>The <em>CAADegHistogramChartWindowCmd</em> state command class derives 
		from <em>CATStateCommand</em></p>
		<pre class="code">...
class CAADegHistogramChartWindowCmd : public CATStateCommand
{
    ...
  private :

    CAADegHstChartWndDlg   * _pHstChartWndDlg ;

    CATDialogAgent         * _daEditor1Selected ;
};</pre>
		<p>This header file includes:</p>
		<ul>
			<li><code>_pHstChartWndDlg</code> is the pointer on the &quot;Customization 
				of the Histogram Chart Tab&quot; Dialog Box. </li>
			<li>
				<p><code>_daEditor1Selected</code> is the dialog agent to associate 
				with the dialog box. This is a <em>CATDialogAgent</em> class instance.</p>
			</li>
		</ul>
	</li>
	<li><a name="Step12">Implementing the State Chart Diagram</a>
		<p>It is done in the command <code>BuildGraph</code> method [<a href="#References">6</a>].</p>
		<pre class="code">void CAADegHistogramChartWindowCmd::BuildGraph()
{
   a/ <a href="#Step121">Creating the Dialog Box</a>
   b/ <a href="#Step122">Creating the Dialog Agent</a>
   c/ <a href="#Step123">Creating the State</a>    
   d/ <a href="#Step124">Creating the Transition</a>
}</pre>
		<p>a/ <a name="Step121"></a>Creating the Dialog Box</p>
		<pre class="code">  CATApplicationFrame * pFrame = NULL ;
  CATDialog * pParent = NULL ;
  pFrame = CATApplicationFrame::<strong>GetFrame</strong>() ;
  if ( NULL != pFrame )
  {
       pParent = pFrame-&gt;<strong>GetMainWindow</strong>() ;
  }
  ...
  _pHstChartWndDlg = new <strong>CAADegHstChartWndDlg</strong>(pParent);
  _pHstChartWndDlg-&gt;<strong>Build</strong>();</pre>
		<p>The dialog box is instantiated and built. It is an instance of the
		<em>CAADegHstChartWndDlg</em><strong> </strong>class that derives from the
		<em>CATDlgDialog</em> class and that simply includes some dialog objects 
		such as two <em>CATDlgEditor</em> class instances and two push buttons OK 
		and Cancel. Dialog boxes should always be instantiated without controls 
		(or other dialog objects). Instantiating these controls in a <code>
		<a href="#Step32">Build</a></code> method called after 
		the constructor has returned make sure that the control resources will be 
		correctly allocated.</p>
		<p>The parent of this dialog box is an invisible dialog object which 
		contains all the tabs of the same model. This object is returned by the <code>
		GetMainWindow</code> method on the application frame. Refer to the article 
		entitled &quot;Understanding the Application Frame Layout&quot; [<a href="#References">7</a>] 
		for complete details about this object.</p>
		b/ <a name="Step122"></a>Creating the Dialog Agent<p>
		The dialog agent is created as following:</p>
		<pre class="code">...
     _daEditor1Selected = new <strong>CATDialogAgent</strong>(&quot;Editor1SelectedId&quot;);	
     _daEditor1Selected-&gt;<strong>SetBehavior</strong>(<strong>CATDlgEngRepeat</strong>);
     _daEditor1Selected-&gt;<strong>AcceptOnNotify</strong>(_pHstChartWndDlg,&quot;
                                 <strong>CAADegEditor1SelectedNotification</strong>&quot;);
...</pre>
		<p>The character string <code>Editor1SelectedId</code> defined as the argument 
		of the <em>CATDialogAgent</em> constructor is the dialog agent 
		identifier. This identifier can be used to assign undo/redo prompts 
		replacing the Undo and Redo items.</p>
		<p>The dialog agent behavior is set to <code>CATDlgEngRepeat</code> to enable 
		the dialog agent to be valued more than once without being reiniatilized 
		and nevertheless remain usable to trigger a transition using the <code>IsLastModifiedAgentCondition</code> 
		method.</p>
		<p>The <code>AcceptOnNotify</code> method enables the dialog agent to be 
		valued whenever the dialog box sends a <em>CAADegEditor1SelectedNotification</em><strong>
		</strong>notification.</p>
		c/ <a name="Step123"></a>Creating the State<p>The <code>PanelState</code> 
		and the <code>PanelState1</code> (not described here) states are <em>CATPanelState</em> 
		instances.</p>
		<pre class="code">...   
     CATPanelState * stPanelState = new <strong>CATPanelState</strong> (this, &quot;stPanelStateId&quot;,
                                                               _pHstChartWndDlg);
     <strong>SetInitialState</strong>(stPanelState);
     stPanelState-&gt;<strong>AddDialogAgent</strong>(_daEditor1Selected);
...</pre>
		<p>The state is also a <em>CATCommand</em> instance and must be assigned 
		a parent in the command tree structure. This parent is set as <code>this</code> 
		in the first constructor argument, that is, as the state dialog command 
		itself. A pointer to the dialog box is passed as the third argument to associate 
		the dialog box with the state. Since the state is explicitly constructed, 
		it must be added as a the command initial state using <code>SetInitialState</code>. 
		For the next states ( such as <code>PanelState1</code> ) the method is
		<code>AddDialogState.</code></p>
		<p>Caution: A panel state pointer must be released when it becomes useless 
		(In general at the end of the <code>BuildGraph</code> method) [<a href="#References">8</a>].</p>
		d/ <a name="Step124"></a>Creating the Transition
		<p>Only the transition which used the <code>_daEditor1Selected</code> agent 
		is explained. Refer to the C++ code for details.</p>
		<pre class="code">     CATDialogTransition *pTransition1 = AddTransition
     (
        stPanelState,
        stPanelState1,
        <strong>IsLastModifiedAgentCondition</strong>(_daEditor1Selected),
        Action( (ActionMethod) &amp; CAADegHistogramChartWindowCmd::Editor1Selected)
     ) ;
     ...</pre>
		<p>The <code>AddTransition</code> method creates a transition and adds it 
		to the transitions managed by the dialog command. Pointers to the transition's 
		source and target states are the first and second arguments respectively. 
		This transition goes from the <code>PanelState</code> state to the <code>
		PanelState1</code> state (not explained). The transition trigger is defined 
		in the guard condition as the condition to be checked using the <code>IsLastModifiedAgentCondition</code> 
		method applied to the dialog agent. When the dialog agent prevalue is modified, 
		the transition fire. In this case, the <code>Editor1Selected</code> action 
		method is executed. (method without interest for the use case, so not explained)</p>
	</li>
	<li><a name="Step13">Releasing the Agents and the Dialog Box</a>
		<p>A pointer to the dialog agent was created in the command <code>BuildGraph</code> 
		method as a data member to be accessed and used in different methods. It 
		should be released when it becomes useless. This can be done in the command 
		destructor, as shown here. This could also be done in the <code>Cancel</code> 
		method called just before the destructor. In the same way, the dialog box 
		should be destructed by using the <code>RequestDelayedDestruction</code> 
		method.</p>
		<pre class="code">...
CAADegHistogramChartWindowCmd::~CAADegHistogramChartWindowCmd()
{
  if ( NULL != _pHstChartWndDlg ) 
  {
     _pHstChartWndDlg-&gt;<strong>RequestDelayedDestruction</strong>() ;
     _pHstChartWndDlg = NULL ;
  }
  
  if ( NULL != _daEditor1Selected )
  {
     _daEditor1Selected-&gt;<strong>RequestDelayedDestruction</strong>();
     _daEditor1Selected = NULL ;
  }
  ...
}
...</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the CAADegEditor1SelectedNotification Notification</h3>
<p>This step can be divided in two parts:</p>
<ol>
	<li>Creating the Notification Header file
		<p>The <em>CAADegEditor1SelectedNotification</em> class derives from the
		<em>CATNotification</em> class.</p>
		<pre class="code">#include &quot;CATNotification.h&quot;   
class CAADegEditor1SelectedNotification : public CATNotification
{
  <strong>CATDeclareClass</strong>;
  
  public:
    CAADegEditor1SelectedNotification();
    virtual ~CAADegEditor1SelectedNotification();

  private:
    CAADegEditor1SelectedNotification(const CAADegEditor1SelectedNotification 
                                              &amp;iObjectToCopy);
};</pre>
		<p>The <code>CATDeclareClass</code> macro declares that the <code>CAADegEditor1SelectedNotification</code> 
		class belongs to a component.</p>
	</li>
	<li>Creating the Notification source file
		<pre class="code">#include &quot;CAADegEditor1SelectedNotification.h&quot;

<strong>CATImplementClass</strong>(CAADegEditor1SelectedNotification,Implementation,
                          <strong>CATNotification</strong>,CATNull);

CAADegEditor1SelectedNotification::CAADegEditor1SelectedNotification()
                        : CATNotification(<strong>CATNotificationDeleteOn</strong>)
{
}

CAADegEditor1SelectedNotification::~CAADegEditor1SelectedNotification()
{
}</pre>
		<ul>
			<li>The <code>CATImplementClass</code> macro declares that the <code>
				CAADegEditor1SelectedNotification</code> class is a implementation 
				class, thanks to the <code>Implementation</code> keyword, and that 
				it extends the component whose main class is <code>CATNotification</code>. 
				The forth parameter must always be set to CATNull. </li>
			<li>The <em>CATNotification</em> base class constructor is called with 
				the <code>CATNotificationDeleteOn</code> parameter to state that 
				we want this notification to be automatically deleted at the end 
				of the next transaction, that is, as soon as the dialog between 
				sending and receiving commands is completed.</li>
			<li>The class destructor is empty.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the &quot;Customization of the Histogram Chart 
Tab&quot; Dialog 
Box</h3>
<p>This step can be divided in three parts:</p>
<ol>
	<li><a href="#Step31">Creating the Dialog box Header File</a></li>
	<li><a href="#Step32">Creating the Build method</a></li>
	<li><a href="#Step33">Creating the Callback method</a></li>
</ol>
<ol>
	<li><a name="Step31"></a>Creating the Dialog box 
		Header File
		<pre class="code">...
class CAADegHstChartWndDlg : public CATDlgDialog
{
  ...
  public :
    CAADegHstChartWndDlg(CATDialog *iParent);
    virtual ~CAADegHstChartWndDlg(); 
	
    void <strong>Build</strong>();
  private : 

    ...
    void <strong>Editor1Selected</strong> (CATCommand        * iPublisher, 
		          CATNotification      * iNotification, 
		          CATCommandClientData   iUsefulData);
    ...
};</pre>
		<p>As usual the Dialog box has a <code>Build</code> method to construct 
		all the dialog objects and arrange them. The <code>Editor1Selected</code> 
		method is a callback method called when the end user clicks in the first 
		editor. This editor is not a data member once it is not used in the different 
		methods of the class.</p>
	</li>
	<li><a name="Step32"></a>Creating the Build method
		<p>As usual the <code>Build</code> method constructs the dialog objects 
		inside the dialog box. <code>pEditor1</code> is a <em>CATDlgEditor</em> 
		class instance. The<code> </code><code>Editor1Selected</code> callback method 
		is declared to be executed when the editor will send a <code>GetEditFocusInNotification</code> 
		notification.</p>
		<pre class="code">...
void CAADegHstChartWndDlg::Build()
{
  ...
  CATDlgEditor * pEditor1 = new CATDlgEditor(pFrameMaxHeight,&quot;Editor1Id&quot; );
  ...
  AddAnalyseNotificationCB(pEditor1, pEditor1-&gt;<strong>GetEditFocusInNotification</strong>(),
                (CATCommandMethod)&amp;CAADegHstChartWndDlg::Editor1Selected,
                            NULL);
  ...
}</pre>
	</li>
	<li><a name="Step33"></a>Creating the Callback method
		<p>The Dialog box must send a <code>CAADegEditor1SelectedNotification</code> 
		notification. The Send/Receive mechanism is used [<a href="#References">9</a>].</p>
		<pre class="code">...
void CAADegHstChartWndDlg::Editor1Selected    (CATCommand           * iPublisher ,
                                    CATNotification      * iNotification,
                                    CATCommandClientData   iUsefulData)
{
   CAADegEditor1SelectedNotification * pEdt1Notification = NULL ;
   pEdt1Notification = new <strong>CAADegEditor1SelectedNotification</strong>();     
   <strong>SendNotification</strong>(<strong>GetFather</strong>(),pEdt1Notification);
   pEdt1Notification = NULL ;
}
...</pre>
		<p>The notification, <code>pEdt1Notification</code>, is sent by the
		<code>SendNotification</code> method to the parent's command. Once the current 
		command, those seen by the focus manager, is <code>CAADegHistogramChartWindowCmd</code>, 
		it will be awaken and its agents concerned by this notification will be 
		valuated [<a href="#References">10</a>].</p>
		<p>Once the <em>CAADegEditor1SelectedNotification</em> instance is created 
		with the <code>CATNotificationDeleteOn</code> state, see the
		<a href="#Step2">Creating the CAADegEditor1SelectedNotification 
		Notification</a> section, you do not have to release it.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how:</p>
<ul>
	<li>To create a notification for the Send/Receive protocol, </li>
	<li>To valuate a dialog agent by this notification.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADegUcSampleDialogWithAgent.htm">Associating a Dialog Box 
		with a Dialog Agent - Part 1</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleCustomWindow1.htm">
		Creating a Model's Tab - Part 1</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADegTaUMLDescription.htm">How to Describe State Dialog Commands 
		Using UML</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Wintop Frame Layout</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAADegUcSampleDialogWithPanelState.htm">Associating a Dialog 
		Box with a State</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidSendReceive.htm">
		The Send/Receive Communication Protocol</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaCommandModel.htm">
		Understanding the Wintop Frame Command Model</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2003]</td>
		<td>Document created</td>
	</tr>
    <tr>
		<td>Version: <strong>2</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
