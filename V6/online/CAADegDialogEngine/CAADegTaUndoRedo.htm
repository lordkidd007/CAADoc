<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Manage Undo/Redo</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Manage Undo/Redo</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to enable the end user to undo and redo interactions 
		in the active command, and to undo and redo previous command results.</p>
		<ul>
			<li><a href="#A00000">Managing Undo/Redo</a>
				<ul>
					<li><a href="#A10000">Input Undo/Redo without Object Undo/Redo</a></li>
					<li><a href="#A20000">Input Undo/Redo with Object Undo/Redo</a></li>
					<li><a href="#A30000">Command Undo/Redo without Object Undo/Redo</a></li>
					<li><a href="#A40000">Command Undo/Redo with Object Undo/Redo</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="A00000"></a>Managing Undo/Redo</h2>
<p>Undo/redo is managed at two levels:</p>
<ol>
	<li>Input undo/redo </li>
	<li>Command undo/redo.</li>
</ol>
<p>Input undo/redo is available for the current state dialog command only. It enables 
the end user to successively undo each input, that is to cancel previous input and 
associated action to restore the model content as it was in each state the command 
passes through, up to the beginning of the command, and of course to redo, that 
is to replay canceled input and execute associated actions up to the state where 
the undo began. If successive undos reach the initial state, the command is deleted 
and the default command, usually Select, becomes the current one. Command undo/redo 
takes place to undo previous command global effects, up to the last recorded command. 
Each command can also be redone in one step, except the command that was current 
when the end user began to undo, since it was not completed and its effect was not 
recorded.</p>
<p>An object undo/redo can be added to both input and command undo/redo. It is available 
when the object created or modified by the state dialog command implements the
<em>CATIUndoTransaction</em> interface. In this case, the object manages itself 
its own undo/redo.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="A10000"></a>Input Undo/Redo without Object Undo/Redo</h3>
<p>The state dialog command records an input history that allows the end user to 
undo previous input up to its initial state. Since an input is most of the time 
an agent valuation, an input usually triggers a transition, and if the guard condition 
evaluates True, the transition fires and executes an action. When the end user clicks 
Undo, the state dialog command reverses this transition to restore the transition's 
source state and unvaluates the dialog agent. To reverse the transition, an undo 
action must be associated with the transition. The dialog agent unvaluation is automatic. 
In the same way, to enable for redo, that is, to take again the input into account, 
and restores the transition's final state, a redo action must be associated with 
the transition.</p>
<p>As a result, you must provide an undo action for each action in order to restore 
the model as it was in the previous state, and a redo action to redo what is undone, 
along with the corresponding methods.</p>
<p>The undo and redo action methods are declared using the second and third parameters 
of the <code>Action</code> method. For example, the transition between two states 
of a state dialog command that creates triangles could be.</p>
<pre class="code">...
AddTransition(stStartState,
              stSecondState,
              AndCondition(
                 IsOutputSetCondition(_daPathElement),
                 Condition((ConditionMethod) &amp; CAACreateTriangleCmd::CheckPoint1)),
              Action( 
                 (ActionMethod) &amp; CAACreateTriangleCmd::CreatePoint,
                 (ActionMethod) &amp; CAACreateTriangleCmd::UndoCreatePoint,
                 (ActionMethod) &amp; CAACreateTriangleCmd::RedoCreatePoint)) ;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="A20000"></a>Input Undo/Redo with Object Undo/Redo</h3>
<p>In this case, the object(s) modified by the command implement the <em>CATIUndoTransaction</em> 
interface and manage themselves their undo and redo. As a result, the action methods 
you provide for undo/redo must not modify them. You can provide these methods as 
in <a href="#A10000">Input Undo/Redo without Object Undo/Redo</a>. They are executed 
before the undo and redo methods of the <em>CATIUndoTransaction</em> interface. 
You can also create the action using the <code>Action</code> method, and use the
<code>SetBeforeUndo</code> and <code>SetBeforeRedo</code> methods.</p>
<pre class="code">...
MyAction = Action((ActionMethod) &amp; CAACreateTriangleCmd::CreatePoint);
MyAction-&gt;SetBeforeUndo((ActionMethod) &amp; CAACreateTriangleCmd::BeforeUndoCreatePoint);
MyAction-&gt;SetBeforeRedo((ActionMethod) &amp; CAACreateTriangleCmd::BeforeRedoCreatePoint);
...
AddTransition(stStartState,
              stSecondState,
              AndCondition(
                 IsOutputSetCondition(_daPathElement),
                 Condition((ConditionMethod) &amp; CAACreateTriangleCmd::CheckPoint1)),
              MyAction);
...</pre>
<p>Since the action is created using the <code>Action</code> method, it is automatically 
deleted by the state dialog command.</p>
<p>Additional undo and redo methods can be executed after the undo/redo methods 
of the <em>CATIUndoTransaction</em> interface. They are declared using the <code>
SetAfterUndo</code> and <code>SetAfterRedo</code> methods.</p>
<pre class="code">...
MyAction-&gt;SetAfterUndo((ActionMethod) &amp; CAACreateTriangleCmd::AfterUndoCreatePoint);
MyAction-&gt;SetAfterRedo((ActionMethod) &amp; CAACreateTriangleCmd::AfterRedoCreatePoint);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="A30000"></a>Command Undo/Redo without Object Undo/Redo</h3>
<p>A command history is managed for command undo/redo. This makes it possible to 
cancel the effects of the last state dialog commands recorded in this history, and 
to redo them. For example, the Point command undo deletes the point created, and 
its redo recreates the deleted point. To make this possible, the command should 
provide an undo/redo object, instance of the <em>CATCommandGlobalUndo</em> class, 
using the <code>GetGlobalUndo</code> method overridden from the <em>CATStateCommand</em> 
class. This undo/redo object has, as function members, the methods to be called 
when the command undo or redo is requested by the end user, and a method to manage 
the memory used. The <code>GetGlobalUndo</code> method is called when the command 
completes to put the undo/redo object in the command history ready for use.</p>
<p>Command undo/redo is illustrated using a command that creates a triangle.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A31000"></a>Providing the Global Undo Object</h4>
<p>This is possible by overriding the <code>GetGlobalUndo</code> method to return 
an instance of the <em>CATCommandGlobalUndo</em> class with appropriate methods 
to undo and redo the triangle command effect.</p>
<pre class="code">CATCommandGlobalUndo * CAACreateTriangleCmd::GetGlobalUndo()
{
  CATCommandGlobalUndo * CAACreateTriangleCmdGlobalUndo = NULL;

  if ( _EltTriangle )
  {
    CAACreateTriangleCmdGlobalUndo = new CATCommandGlobalUndo(
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::UndoCreateTriangle,
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::RedoCreateTriangle,
             (void *) _EltTriangle,
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::DeallocateTriangle);
  }
  return CAACreateTriangleCmdGlobalUndo;
}</pre>
<p>The argument of the <em>CATCommandGlobalUndo</em> constructor are:</p>
<ul>
	<li>The method to execute to undo the command effect </li>
	<li>The method to execute to redo the command effect </li>
	<li>The object that resulted from the command and that is deleted using the 
		undo method, and recreated by the redo method </li>
	<li>Since the command doesn't exist any more, the fourth argument sets a method 
		to deallocate the object passed as the third argument.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A32000"></a>Providing the Undo/Redo Methods</h4>
<p>The undo and redo methods are static, since the command is deleted when undo 
and redo occur, with the following signatures.</p>
<pre class="code">static void UndoCreateTriangle(void * iUsefulData);
static void RedoCreateTriangle(void * iUsefulData);</pre>
<p>These methods are called with the <code>_EltTriangle</code> object passed as 
the third argument of the <code>GetGlobalUndo</code> method. They should manage 
the object deletion and creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A33000"></a>Providing the Deallocation Method</h4>
<p>Like the undo and redo method, the deallocation method is also static. It has 
the following signature:</p>
<pre class="code">static void DeallocateTriangle(void * iUsefulData);</pre>
<p>It is called when the command undo/redo object is removed from the command history. 
It should simply delete the object used by the undo and redo method.</p>
<pre class="code">void  CAACreateTriangleCmd::DesallocatTriangle(void * iUsefulData)
{
  if (iUsefulData)
  {
    // iUsefulData is the object to deallocate
    CAAIPolyline * Elt = (CAAIPolyline *) iUsefulData;
    if (Elt) Elt-&gt;Release();
  }
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="A40000"></a>Command Undo/Redo with Object Undo/Redo</h3>
<p>As with input undo/redo, the objects that implement the <em>CATIUndoTransaction</em> 
interface manage themselves their undo and redo, and the action methods you provide 
for undo/redo must not modify them. These object undos are automatically registered 
when a command that modifies them completes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A41000"></a>Providing the Global Undo Object</h4>
<p>The <code>GetGlobalUndo</code> method can be used to return an instance of the
<em>CATCommandGlobalUndo</em> class with appropriate methods. These methods are 
executed before the object undo/redo methods and must not modify the object.</p>
<pre class="code">CATCommandGlobalUndo * CAACreateTriangleCmd::GetGlobalUndo()
{
  CATCommandGlobalUndo * CAACreateTriangleCmdGlobalUndo = NULL;

  if ( _EltTriangle )
  {
    CAACreateTriangleCmdGlobalUndo = new CATCommandGlobalUndo(
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::BeforeUndoCreateTriangle,
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::BeforeRedoCreateTriangle,
             (void *) UsefulObject,
             (CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::Deallocate);
  }
  return CAACreateTriangleCmdGlobalUndo;
}</pre>
<p>The argument of the <em>CATCommandGlobalUndo</em> constructor are:</p>
<ul>
	<li>The method to execute to undo the command effect before the object undo 
		method</li>
	<li>The method to execute to redo the command effect before the object redo 
		method</li>
	<li>An object that can be useful for the command undo and redo method, but NOT 
		the object created or modified by the state dialog command, since this is 
		managed by the object undo/redo</li>
	<li>The method to deallocate the object passed as the third argument.</li>
</ul>
<p>You can also declare methods to execute after the object undo/redo. This is possible 
using the <code>SetAfterUndoMeth</code> and <code>SetAfterRedoMeth</code> methods.</p>
<pre class="code">...
SetAfterUndoMeth((CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::AfterUndoCreateTriangle);
SetAfterRedoMeth((CATGlobalUndoMethod) &amp; CAACreateTriangleCmd::AfterRedoCreateTriangle);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A42000"></a>Providing the Undo/Redo Methods</h4>
<p>The undo and redo methods are static, since the command is deleted when undo 
and redo occur, with the following signatures.</p>
<pre class="code">static void BeforeUndoCreateTriangle(void * iUsefulData);
static void BeforeRedoCreateTriangle(void * iUsefulData);
static void AfterUndoCreateTriangle(void * iUsefulData);
static void AfterRedoCreateTriangle(void * iUsefulData);</pre>
<p>These methods are called with the <code>_EltTriangle</code> object passed as 
the third argument of the <code>GetGlobalUndo</code> method. They should manage 
the object deletion and creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A43000"></a>Providing the Deallocation Method</h4>
<p>Like the undo and redo method, the deallocation method is also static. It has 
the following signature:</p>
<pre class="code">static void Deallocate(void * iUsefulData);</pre>
<p>It is called when the command undo/redo object is removed from the command history. 
It should simply delete the object used by the undo and redo methods.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="A44000"></a>Deriving the CATCommandGlobalUndo Class</h4>
<p>Another way of providing command global undo is to create your own class deriving 
from the <em>CATCommandGlobalUndo</em> class. In this case, you need to override 
its undo/redo methods.</p>
<pre class="code">class MyCommandGlobalUndo : public CATCommandGlobalUndo
{
  CATDeclareClass;
  public :
    MyCommandGlobalUndo();
    virtual ~MyCommandGlobalUndo();
    virtual HRESULT BeforeUndo();
    virtual HRESULT BeforeRedo();
    virtual HRESULT AfterUndo();
    virtual HRESULT AfterRedo();
};</pre>
<p><code>BeforeUndo</code> and <code>BeforeRedo</code> are executed before the object 
undo/redo methods, and <code>AfterUndo</code> and <code>AfterRedo</code> are executed 
after these methods.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The undo/redo can be managed for each end user input and for the whole command. 
If the used object implements the <em>CATIUndoTransaction</em> interface, it manages 
its own undo/redo by itself, and the methods that implement undo/redo don't need 
to deal with object undo/redo. Otherwise, they do.</p>
<p>The input undo/redo takes place as long as the command is active, and undo/redo 
methods are provided for each transition. The command undo redo is implemented in 
a <em>CATGlobalUndoRedo</em> class instance to which pointers to the appropriate 
undo/redo methods are passed.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
