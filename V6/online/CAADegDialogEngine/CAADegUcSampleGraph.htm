<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Implementing the Statechart Diagram</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Implementing the Statechart Diagram</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to retrieve a point in the 3D space from an end 
		user mouse click on the screen in a state dialog command.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The Rectangle Command Use Case</a>
				<ul>
					<li><a href="#What">What Does the Rectangle Command Do</a></li>
					<li><a href="#How">How to Launch the Rectangle Command</a></li>
					<li><a href="#Where">Where to Find the Rectangle Command Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to implement the statechart diagram of 
a state dialog command by coding the command <code>BuildGraph</code> [<a href="#References">1</a>] 
method. <code>BuildGraph</code> is the command core. It declares the objects that 
make up the dialog steps and sequences, and their relationships.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The Rectangle Command Use Case</h2>
<p>The Rectangle command is a use case of the CAADialogEngine.edu framework that 
illustrates the DialogEngine framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the Rectangle Command Do</h3>
<p>CAACreateRectangleCmd is a state dialog command that creates a rectangle in the 
3D space according to the following UML statechart diagram [<a href="#References">2</a>].</p>
<p>
<img alt="Rectangle Command State Chart" height="328" src="images/CAADegCreateRectangleStatechart.jpg" width="632"/></p>
<p>The dialog is as follows:</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle1.jpg" width="476" height="366"/></td>
		<td>Select the CAACreateRectangleCmd command. The active state is GetPlane. 
		Select an existing plane that will be used as the rectangle plane. The selection 
		is possible thanks to a selection agent.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle2.jpg" width="481" height="372"/></td>
		<td>The viewpoint changes to make the selected plane and the screen plane 
		coincide. The active state becomes GetFirstPoint.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle3.jpg" width="479" height="373"/></td>
		<td>Click to indicate a point for the diagonal first end point. 
		The active state becomes GetSecondPoint. This image is captured just after 
		the click. The indicated point is shown beside the plane, a temporary 
		rectangle is drawn. The mouse has 
		not yet moved. The indication is enabled thanks to an indication agent.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle4.jpg" width="478" height="368"/></td>
		<td>Move the mouse from this point. The temporary rectangle increases 
		or decreases to follow the mouse moves. The active state remains GetSecondPoint. 
		The self transition loops onto this state. The indication is enabled thanks 
		to the second indication agent.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle5.jpg" width="478" height="372"/></td>
		<td>Still moving the mouse, the temporary rectangle go on increasing or 
		decreasing to follow the mouse moves. The active state remains GetSecondPoint 
		thank sto the self transition that loops onto this state. The indication 
		remains enabled thanks to the second indication agent.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateRectangle6.jpg" width="483" height="378"/></td>
		<td>When the wished rectangle is obtained, click to create the diagonal 
		second end point. This creates the rectangle. The indicated point is retrieved 
		thanks to the second indication agent. The command is now complete.</td>
	</tr>
</table>
<p>The Rectangle command statechart diagram comprises three states in addition to 
the initial and final states, and four transitions including a self transition that 
loops onto a state to create a temporary rubber rectangle. Dialog agents with appropriate 
types and behaviors, associated with the states, make it possible to convert the 
end user input into stimuli that trigger the transitions and to retrieve the end 
user interaction intent, that is selecting an object for a selection agent [<a href="#References">1</a>] 
[<a href="#References">3</a>] or indicating a point for an indication agent [<a href="#References">1</a>] 
[<a href="#References">4</a>]. To simplify the <code>BuildGraph</code> method, undo/redo 
[<a href="#References">5</a>] is not taken into into account.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the Rectangle Command</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">6</a>] use case for 
a detailed description of how this use case should be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following: </p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
    <li>Create three points using the <strong>Point</strong> command in <strong>CAA Geometry Creation Section</strong> of the action bar.</li>
    <li>Create a plane using the <strong>Plane</strong> command in the same 
	section.</li>
    <li>Create a rectangle using the <strong>Rectangle</strong> command in the 
	same section.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the Rectangle Command Code</h3>
<p>The Rectangle command is made of a single class named <em>CAADegCreateRectangleCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">7</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the CAACreateRectangleCmd BuildGraph method, there are three steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the dialog agents</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the states</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the transitions between the states</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Dialog Agents</h3>
<p>The <code>BuildGraph</code> methods starts by creating the dialog agents. Pointers 
to dialog agents are data members of the state dialog command, because they are 
often used in several condition and/or action methods in addition to BuildGraph. 
The first one is a selection (path element) agent to select the rectangle underlying 
plane.</p>
<pre class="code">void CAADegCreateRectangleCmd::BuildGraph()
{
  <em>//1- Creates the dialog agents</em>

  <em>//1-1 Dialog agent to select the rectangle plane</em>
  _daPathEltPlane = <strong>new CATPathElementAgent</strong>(&quot;SelPlane&quot;);
  _daPathEltPlane-&gt;<strong>AddElementType</strong>(&quot;<strong>CAAISysPlane</strong>&quot;);

  <em>// To enable agent prevaluation, plane prehighlight and highlight</em>
  <em>// No Undo step recorded for this agent</em>
  _daPathEltPlane-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPrevaluation |
                               CATDlgEngWithPSOHSO |
                               CATDlgEngWithUndo);
  <em>// Let _daPathEltPlane be valued from the CSO </em> 
  <strong>AddCSOClient</strong>(_daPathEltPlane); 
...</pre>
<p>This code portion has the following meaning: </p>
<ul>
	<li>The selection agent is a CATPathElementAgent instance. <code>SelPlane</code> 
		is the dialog agent identifier that could be used if an undo step were recorded. 
		Even if this is not the case here, the identifier is requested </li>
	<li>Thanks to the <code>AddElementType</code> method, the selection agent is 
		valued only when an object that implements the CAAISysPlane interface is 
		selected. The selection agent remains impassive when any object that doesn't 
		implement this interface is selected </li>
	<li>Any dialog agent has a behavior assigned using the <code>SetBehavior</code> 
		method. The global behavior is made of a concatenation of unit behaviors 
		set using keywords separated with the &quot;|&quot; pipe character
		<ul>
			<li><code>CATDlgEngWithPrevaluation</code> means that the selection 
				agent is prevalued when an object is preselected, that is, as long 
				as the mouse moves or is located above the object without left clicking. 
				The object must of course match the type set by <code>AddElementType</code>, 
				otherwise the dialog agent is not prevalued </li>
			<li><code>CATDlgEngWithPSOHSO</code> means that any preselected object 
				is prehighlighted, and thus put in the PSO (Prehighlighted Set of 
				Objects), and that any selected object is highlighted, and thus 
				put in the HSO (Highlighted Set of Objects) </li>
			<li><code>CATDlgEngWithUndo</code> means that no undo step is recorded 
				for this dialog agent</li>
		</ul>
	</li>
	<li>The dialog agent can be valued when the end user selects an object that 
		implements CAAISysPlane. In addition, the <code>AssCSOClient</code> method 
		enables the dialog agent to be valued if the CSO (Current Set of Objects) 
		contains such an object when the command is selected, this object being 
		put in the CSO before the command selection either by an end user selection 
		or as a result of the preceding command. This is a powerful means to increase 
		end user productivity.</li>
</ul>
<p>The second dialog agent is an indication agent used to get the rectangle diagonal 
first end point.</p>
<pre class="code">...
  <em>//1-2 Dialog agent to indicate the rectangle diagonal first end point</em>
  _daIndicationP1 = new <strong>CATIndicationAgent</strong>(&quot;IndicationP1&quot;);
  <em>// No Undo step recorded for this agent</em> 
  _daIndicationP1-&gt;<strong>SetBehavior</strong>(CATDlgEngWithUndo);
...</pre>
<p>Its identifier is set as the argument of its constructor, even if it will be 
useless since no undo step is recoreded.</p>
<p>The third dialog agent is an indication agent used to get the rectangle diagonal 
second end point.</p>
<pre class="code">...

  <em>//1-3 Agent to indicate the rectangle diagonal second end point</em>
  _daIndicationP2 = new <strong>CATIndicationAgent</strong>(&quot;IndicationP2&quot;);
  <em>// To enable agent prevaluation, and transition to trigger on prevaluation</em>
  <em>// No Undo step recorded for this agent</em> 
  _daIndicationP2-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPrevaluation | 
                               CATDlgEngAcceptOnPrevaluate |
                               CATDlgEngWithUndo);
...</pre>
<p>Its behavior enables prevaluation, like with the selection agent. In addition
<code>CATDlgEngAcceptOnPrevaluate</code> means that prevaluation is enough to trigger 
a transition, while usually it is not.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the States</h3>
<p>The states are created in the order where they appear in the statechart diagram, 
and the dialog agents are immediately associated to them. They can be created on 
the stack.</p>
<pre class="code">...
  <em>//2- Creates states. See Nls file </em>
  CATDialogState *stPlaneState = <strong>GetInitialState</strong>(&quot;stPlaneStateId&quot;);
  stPlaneState-&gt;<strong>AddDialogAgent</strong>(_daPathEltPlane);

  CATDialogState *stGetFirstPointState = <strong>AddDialogState</strong>(&quot;stGetFirstPointStateId&quot;);
  stGetFirstPointState-&gt;<strong>AddDialogAgent</strong>(_daIndicationP1);

  CATDialogState *stGetLastPointState = <strong>AddDialogState</strong>(&quot;stGetLastPointStateId&quot;);
  stGetLastPointState-&gt;<strong>AddDialogAgent</strong>(_daIndicationP2);
...</pre>
<p>The first state is created using the <code>GetInitialState</code> method that 
also create an automatic transition fromthe initial state to this state, while the 
others are created using the <code>AddDialogState</code> method. Each state is assigned 
an identifier used to set a prompt displayed in the status bar when the state is 
active. The <code>AddDialogAgent</code> method associates dialog agents with states.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Transitions between the States</h3>
<p>Still in the <code>BuildGraph</code> method, the last thing to do is to create 
the transitions. They can also be created on the stack. The first transition links 
the states that requests the rectangle plane and the rectangle diagonal first end 
point.</p>
<pre class="code">...
  <em>//3- Creates transitions</em> 
  CATDialogTransition *pFirstTransition = AddTransition(
    stPlaneState,
    stGetFirstPointState,
    IsOutputSetCondition(_daPathEltPlane),
    Action((ActionMethod) &amp; CAADegCreateRectangleCmd::CreateCamera)
  );  
...</pre>
<p>Transitions are created using the <code>AddTransition</code> method using the 
following arguments:</p>
<ul>
	<li><code>stPlaneState</code> is the transition source state </li>
	<li><code>stGetFirstPointState</code> is the transition target state </li>
	<li>The third argument is the transition guard condition. It is a condition 
		method returned by <code>IsOutPutSetCondition</code> that acts as the transition 
		trigger, since it returns True if the selection agent is valued, and False 
		otherwise. No other condition is set, for example on the selected object
	</li>
	<li>The fourth argument is the action executed when the transition fires. This 
		action is an action method that is a member of the state dialog command.</li>
</ul>
<p>The second transition links the two rectangle diagonal end point indication states.</p>
<pre class="code">...
  CATDialogTransition *pSecondTransition = AddTransition(
    stGetFirstPointState,
    stGetLastPointState,
    AndCondition(IsOutputSetCondition(_daIndicationP1),
                 Condition((ConditionMethod)&amp; CAADegCreateRectangleCmd::TestPoint1)),
    Action((ActionMethod) &amp; CAADegCreateRectangleCmd::CreatePoint)
  );  
...</pre>
<p>The two states are the first two arguments. A composite condition is used as 
the transition guard condition, and a member function is used as the transition 
action. The composite condition is a CATBoolean AND between two condition return 
values:</p>
<ol>
	<li>The <code>IsOutputSetCondition</code> method that returns True if the indication 
		agent is valued </li>
	<li>The state dialog class member function <code>TestPoint1</code> that returns 
		True if a point can be created in the data model.</li>
</ol>
<p>The third transition is a self-transition that loops on the state that asks for 
the diagonal second end point. This transition creates a temporary rectangle that 
has for diagonal the line segment joining the first indicated point and the point 
that would be created if the end user clicked at the current mouse location. The 
mouse move seems to drag a rubber rectangle.</p>
<pre class="code">...
  CATDialogTransition *pRubberTransition = AddTransition(
    stGetLastPointState,
    stGetLastPointState,
    AndCondition(IsLastModifiedAgentCondition(_daIndicationP2),
                 Condition((ConditionMethod)&amp; CAADegCreateRectangleCmd::TestPoint2)),
    Action((ActionMethod) &amp; CAADegCreateRectangleCmd::UpdateRectangle)
  );  
...</pre>
<p>The same state is used for both the transition source and target states. Note 
that the transition condition is a composite condition that is also a CATBoolean 
AND condition between: </p>
<ol>
	<li>The <code>IsLastModifiedAgentCondition</code> method that returns True if 
		the indication agent is prevalued. </li>
	<li>The state dialog class member function <code>TestPoint2</code> that returns 
		True if the current mouse location doesn't coincide with the first indicated 
		point.</li>
</ol>
<p>The transition action is the state dialog class member function <code>UpdateRectangle</code> 
that creates the temporary rectangle.</p>
<p>The last transition links the state that asks for the diagonal second end point 
to the final state.</p>
<pre class="code">...
  CATDialogTransition *pFinalTransition = AddTransition(
    stGetLastPointState,
    NULL,
    AndCondition(IsOutputSetCondition(_daIndicationP2),
                 Condition((ConditionMethod)&amp; CAADegCreateRectangleCmd::TestPoint2)),
    Action( (ActionMethod) &amp; CAADegCreateRectangleCmd::NewRectangle)
  ); 
}</pre>
<p>The final state is designated as the <code>NULL</code> state. The transition 
condition is almost identical than the condition of the above transition. It uses 
the same indication agent. The only difference is that the <code>IsOutputSetCondition</code> 
method is used in place of <code>IsLastModifiedAgentCondition</code> to return True 
when the dialog agent is valued instead of prevalued, that is when the end user 
has left clicked instead of simply moving the mouse. The transition action is the 
state dialog class member function <code>NewRectangle</code> that creates the rectangle.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved when implementing the statechart of 
a state dialog command in the <code>BuildGraph</code> method. These ojbects are 
the dialog agents that retrieve end user input, the states of the statechart diagram 
with which they are associated, and the transitions that link these states. A trigger 
encapsulated in the guard condition, and an action are associated with each transition.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADegTaUMLDescription.htm">How to Describe State Dialog Commands 
		Using UML</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADegUcSampleSelection.htm">Managing Selection</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADegUcSampleIndication.htm">Managing Indication</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAADegTaUndoRedo.htm">How to Manage Undo/Redo</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
		<tr>
		<td>Version: <strong>2</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
