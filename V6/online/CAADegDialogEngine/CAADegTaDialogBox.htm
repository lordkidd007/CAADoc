<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Use a Dialog Box as Input</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Use a Dialog Box as Input</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows the different ways of using a dialog box to input 
		values used by a dialog command. </p>
		<ul>
			<li><a href="#900000"><strong>Using a Dialog Box as Input</strong></a>
			</li>
			<li><a href="#InShort"><strong>In Short</strong></a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="900000"></a>Using a Dialog Box as Input</h2>
<p>Using a dialog box as input for a state dialog command is a very common way to 
get many parameters at the same time. This is possible thanks to a dialog agent 
created and plugged to the state that displays the dialog box. The dialog agent 
behavior should be modified using the <code>AcceptOnNotify</code> method in order 
to value the dialog agent, that is accept the end user input and trigger the transition, 
when, for example, the end user clicks the OK button in the dialog box.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegPointEditor.jpg" width="244" height="159"/></td>
		<td>For example, a command that creates 3D points can use a dialog box to 
		input the point X,Y, and Z coordinates.</td>
	</tr>
</table>
<p>To do this, you should create the dialog box and the dialog agent, set the dialog 
agent behavior, plug the dialog agent to the state, and create the transition in 
the <code>BuildGraph</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Creating the Point Editor Dialog Box</h3>
<p>The Point Editor dialog box is created using a class that derives from the
<em>CATDlgDialog</em> class that groups three labels and three spinners, and that 
features the OK, Apply, and Cancel buttons. This class is instantiated in the
<code>BuildGraph</code> method and is made visible for the appropriate state.</p>
<pre class="code">...
_pPointEditor = new CAAPointEditor();
_pPointEditor-&gt;Build();
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Creating the Dialog Agent</h3>
<p>The dialog agent is created as an instance of the <em>CATDialogAgent</em> class.</p>
<pre class="code">...
_pdaEditorAgent = new CATDialogAgent(&quot;PointEditorId&quot;);
...      </pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Setting the Dialog Agent Behavior</h3>
<p>The dialog agent behavior must be set in order to value the dialog agent when 
the end user clicks the OK button of the Point Editor. This is done by using the
<code>AcceptOnNotify</code> method to which the point editor instance, that is, 
the notifier, is passed as first parameter, and the notification to react to as 
second parameter.</p>
<pre class="code">...
_pdaEditorAgent-&gt;AcceptOnNotify(_pPointEditor,
                                _pPointEditor-&gt;GetDiaOKNotification());
...</pre>
<p>The object that sends the notification must always be used. Here, however, this 
is not the OK push button, but the point editor dialog box, because the dialog box 
class derives from <em>CATDlgDialog</em> that sends itself the notifications for 
its OK, Apply, or Cancel push buttons.</p>
<p>Once properly configured the <code>_daEditorAgent</code> dialog agent is used 
like any other dialog agent: it must be plugged to a dialog state using the
<code>AddDialogAgent</code> method before being used in the guard condition as a 
parameter of the <code>IsOutputSetCondition</code> method.</p>
<pre class="code">...
pSourceState-&gt;AddDialogAgent(_pdaEditorAgent);
...
AddTransition(pSourceState, pTargetState,
              AndCondition(
                 IsOutputSetCondition(_pdaEditorAgent),
              ...
              Action( 
                 (ActionMethod) &amp; CAACommandCmd::CreatePointByBox));
...</pre>
<p>The <code>CreatePointByBox</code> action method uses <code>_pPointEditor</code>, 
the pointer to the dialog box, to retrieve input values. This method should either 
know the dialog box content to ask the controls to return their value. The dialog 
box can also explore a method to enable any object to retrieve these values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Enabling Your Dialog Box for the Power Input Mode</h3>
<p>The Power Input mode lets the end user enter several values requested by editors 
or spinners of a dialog box in a single entry field of the main application window 
when the P2 style is selected. For example, the figure below shows the Hole creation 
dialog box and how it uses the Power Input field.</p>
<p>
<img alt="" src="images/CAADegPowerInput1.gif" width="570" height="508"/></p>
<p>The three spinner entry fields are repeated and concatenated in the status bar:</p>
<ul>
	<li>The three titles appear in the message area as the Power Input prompt. If 
		the message to display is too long, it overrides the Power Input prompt. 
		This prompt is made up of the three spinner titles separated by commas in 
		English, but the separator associated with the current language is used. 
		This implies to associate a title with the spinners, or more generally also 
		with the editors, while this title is not displayed in the dialog box. The 
		fields displayed in front of the spinners are labels that have their own 
		titles </li>
	<li>The values are displayed in the entry field. Values are separated using 
		the separator associated with the current language used. The end user can 
		enter the values one after the other, and press Enter. This updates the 
		dialog window spinner values. The entry field has a constant length of 300 
		pixels </li>
	<li>The push button at the right is a switch that shows or hides the dialog 
		box.</li>
</ul>
<p>To enable your dialog box to use the Power Input for its editors and spinners, 
create this box using the <code>CATDlgPowerInputLink</code> style. This will automatically 
enable all the descending editors and spinners to take advantage of the Power Input. 
This capability can be limited to a part of a dialog box, such as the editors and 
spinners contained in a frame. To do this, use the <code>CATDlgPowerInputLink</code> 
style in the frame constructor instead of using it in the dialog box constructor.</p>
<p>You can dynamically set or reset the Power Input capability using the <code>SetPowerInputLink</code> 
method. You need to call the <code>UpdatePowerInput</code> method just after to 
update the Power Input prompt and entry field.</p>
<pre class="code">...
_PointEditor-&gt;SetPowerInputLink(0);  // disable
_PointEditor-&gt;UpdatePowerInput();
...
_PointEditor-&gt;SetPowerInputLink(1);  //enable
_PointEditor-&gt;UpdatePowerInput();
...</pre>
<p>A single dialog box can use the Power Input at a time. If several dialog boxes 
that enable the Power Input mode are simultaneously displayed, you must select the 
one that will use the Power Input using the <code>TakePowerInputFocus</code> method 
and disable the others using the <code>ReleasePowerInputFocus</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Dialog agent created and plugged to the state that displays a dialog box allows 
using it as input. Modified by the <em>AcceptOnNotify</em> method, the dialog agent 
behavior accepts the end user inputs and triggers the transition. </p>
<p>Several values requested in a dialog box can be entered by the end user, using 
the Power Input mode, in a single entry field of the main application window when 
the P2 style is selected.The <em>CATDlgPowerInputLink</em> style enables a dialog 
box or a part of a dialog box (such as frames) to use this capability for its editors 
and spinners. Dynamical management is possible using the <em>SetPowerInputLink</em> 
and the <em>UpdatePowerInput </em>methods. </p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td style="height: 22px">Version: <strong>2</strong> [Oct 2006]</td>
		<td style="height: 22px">Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
