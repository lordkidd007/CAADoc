<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Indication</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Indication</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to retrieve a point in the 3D space from an end 
		user mouse click on the screen in a state dialog command. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The Circle Command Use Case</a>
				<ul>
					<li><a href="#What">What Does the Circle Command Do</a></li>
					<li><a href="#How">How to Launch the Circle Command</a></li>
					<li><a href="#Where">Where to Find the Circle Command Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to retrieve, in a state dialog command, 
a 3D point using its coordinates in the 3D space from a mouse click on the screen. 
This 3D point can be used afterwards as input for any object creation, modification, 
or analysis in the model, such as creating the center of a circle in this example.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The Circle Command Use Case</h2>
<p>CAADegCreateCircleCmd creates a circle in the 3D space. We will focus on the 
circle center creation.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the Circle Command Do</h3>
<p>The Circle command is a state dialog command that creates a circle in the 3D 
space according to the following UML statechart diagram [<a href="#References">1</a>].</p>
<p>
<img alt="Circle Command State Chart" height="324" src="images/CAADegCreateCircleStatechart.jpg" width="561"/></p>
<p>The dialog is as follows:</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle1.jpg" width="458" height="374"/></td>
		<td>Select an existing plane that will be used as the circle plane. The 
		active state becomes GetPlane.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle2.jpg" width="456" height="378"/></td>
		<td>The viewpoint changes to make the selected plane and the screen plane 
		coincide. The active state is GetCircleCenter.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle3.jpg" width="464" height="378"/></td>
		<td>Click to indicate a point for the circle center. The active state 
		becomes GetRadius. This image is captured just after the click. The 
		indicated point is shown inside the plane. The mouse has not yet moved.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle4.jpg" width="469" height="383"/></td>
		<td>Move the mouse from this center. A temporary circle is drawn and increases 
		or decreases to follow the mouse moves. The active state remains GetRadius. 
		The self transition loops onto this state.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle5.jpg" width="477" height="388"/></td>
		<td>When the wished circle is obtained, click a point on this circle to 
		actually create the circle. The command is now complete.</td>
	</tr>
</table>
<p>Indicating a point means clicking on the screen at the desired location with 
the left mouse key. The command retrieves from this click a geometric point with 
coordinates expressed in the absolute axis system. This is made possible by assigning 
an indication agent [<a href="#References">2</a>] to the state that asks for indication. 
This indication agent is valued by the mouse click with a point computed from the 
pixel coordinates of the point clicked on the screen. This point is the projection 
of the clicked point in the screen plane onto a specific plane associated with the 
indication point and therefore named the projection plane [<a href="#References">2</a>].</p>
<p>The Circle command uses this means to create the circle center and to determine 
the circle radius. The step by step describes the circle center creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the Circle Command</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">3</a>] use case for 
a detailed description of how this use case should be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
    <li>Launch the <strong>Point</strong> command in <strong>&quot;CAA Geometry Creation Section&quot;</strong> 
    of the action bar and create three points.</li>
    <li>Create a plane using the <strong>Plane</strong> command in the same section.
    Successively click the three points to create a plane</li>
    <li>Create a circle using the <strong>Circle</strong> command in the same section.
    Click the circle center and click to create the circle.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the Circle Command Code</h3>
<p>The Circle command is made of a single class named <em>CAADegCreateCircleCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the circle center, there are seven steps:</p>
<table width="100%">
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Declare the indication agent</a></td>
		<td>Header file</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Instantiate the indication agent</a></td>
		<td><code>BuildGraph</code> method [<a href="#References">2</a>]</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Set the indication agent projection plane</a></td>
		<td>Transition action method <code>SetPlane</code></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Assign the indication agent to the GetCenter state</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create a transition from the GetCenter state triggered 
		by the indication agent valuation</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Retrieve the indication agent value and convert this 
		value into a 3D point</a></td>
		<td>Transition action method <code>CreateCircleCenter</code></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Release the indication agent</a></td>
		<td>Destructor or <code>Cancel</code> method</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Declaring the Indication Agent and its Projection Plane</h3>
<p>The state command class derives from CATStateCommand.</p>
<pre class="code">class CAADegCreateCircleCmd : public CATStateCommand
{
  ...
  private :
    CATIndicationAgent * _daIndicCircleCenter;
    CATMathPlane         _ProjPlane;
    CATMathPoint         _CircleCenter;
    ...</pre>
<p>A pointer to the indication agent, its projection plane, and the temporary point 
to keep the circle center are declared as private data members.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Instantiating the Indication Agent</h3>
<p>The indication agent is instantiated in the command <code>BuildGraph</code> method.</p>
<pre class="code">void CAADegCreateCircleCmd::BuildGraph()
{
  ...
  _daIndicCircleCenter = <strong>new</strong> <strong>CATIndicationAgent</strong>(&quot;GetCircleCenter&quot;);
  ...</pre>
<p>The character string GetCircleCenter defined as the argument of the CATIndicationAgent 
constructor is the indication agent identifier. This identifier can be used to assign 
undo/redo prompts replacing the Undo and Redo items in the Edit menu.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting the Selected Plane as the Indication Agent Projection 
Plane</h3>
<p>The CreateCamera method is the action method associated with the transition that 
retrieves the selected plane and use it to change the viewpoint. It is the appropriate 
place to assign this plane as the indication agent projection plane, since the plane 
selected is not kept as a data member.</p>
<pre class="code">CATBoolean CAADegCreateCircleCmd::CreateCamera(void *iDummy)
{
  ... <em>// Retrieve the origin and axes of the selected plane</em>
  CATMathPoint     OriginPlane;        
  CATMathVector UPlaneV, VPlaneV,dirV;
  piSysPlane-&gt;GetOrigin(OriginPlane);
  piSysPlane-&gt;GetPlane(UPlaneV,VPlaneV);
          
  <em>// Sets the plane for the 2d indication agents </em>
  _ProjPlane.<strong>SetOrigin</strong>(OriginPlane);
  _ProjPlane.<strong>SetVectors</strong>(UPlaneV,VPlaneV);

  <em>// Set _ProjPlane as the indiation agent projection plane </em>
  _daIndicCircleCenter-&gt;<strong>SetMathPlane</strong>(_ProjPlane);
  ...</pre>
<p>The plane selected in the model window is retrieved in <code>modelplane</code>. 
Its origin and directions are retrieved using the methods of this object, and are 
set to <code>_ProjPlane</code> using the <code>SetOrigin</code> and <code>SetDirections</code> 
methods of the CATMathPlane class. Then <code>_ProjPlane</code> is set as the indication 
agent projection plane.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Assigning the Indication Agent to the GetCenter State</h3>
<p>Still in the <code>BuildGraph</code> method, the GetCenter state is created, 
and the indication agent is added to this state. This makes it possible to value 
the indication agent when this state becomes the active one.</p>
<pre class="code">  ...
  CATDialogState *stGetCircleCenter = <strong>AddDialogState</strong>(&quot;stGetCircleCenterId&quot;);
  stGetCircleCenter-&gt;<strong>AddDialogAgent</strong>(_daIndicCircleCenter);
  ...</pre>
<p>The <code>AddDialogState</code> method creates a new dialog state and adds it 
to the states managed by the dialog command. The <code>AddDialogAgent</code> method 
adds the indication agent to the state.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Transition between the GetCenter and GetRadius 
States</h3>
<p>The transition between these two states is created in the <code>BuildGraph</code> 
method. This transition is triggered when the indication agent is valued, that is 
when the end user clicks a point. The guard condition is checked, and if it returns 
True, the action is performed.</p>
<pre class="code">  ...
  CATDialogTransition *pSecondTransition = <strong>AddTransition</strong>
  (
    stGetCircleCenter,
    stGetRadius,
    AndCondition(
      IsOutputSetCondition(_daIndicCircleCenter),
      Condition((ConditionMethod) &amp; CAACreateCircleCmd::CheckCircleCenter)),			  
    Action((ActionMethod) &amp; CAACreateCircleCmd::CreateCircleCenter)
  );
...</pre>
<p>The <code>AddTransition</code> method creates a transition and adds it to the 
transitions managed by the dialog command. Pointers to the transition's source and 
target states are the first and second arguments respectively. The transition trigger 
is defined in the guard condition as the first condition to be checked using the
<code>IsOutputSetCondition</code> method applied to the indication agent. A second 
condition that is useless for this use case purpose uses the <code>CheckCircleCenter</code> 
method. Because we use <code>AndCondition</code> to create the guard condition, 
both condition methods must return True to fire the transition. In this case, the
<code>CreateCircleCenter</code> action method is executed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Indicated Point and Converting it to a 3D 
Point</h3>
<p>When the end user has clicked to indicate a point, the transition between the 
GetCenter and GetRadius states is triggered, and if the guard condition returns 
True, the following action method executes.</p>
<pre class="code">CATBoolean CAACreateCircleCmd::CreateCircleCenter(void * iData)
{
  <em>// Get the indicated point from the indication agent</em>
  CATMathPoint2D point2D = _daIndicCircleCenter-&gt;<strong>GetValue</strong>();
  <em>// Convert this point to a 3D point for the circle center</em>
  _ProjPlane.<strong>EvalPoint</strong>(point2D.GetX(), point2D.GetY(), _CircleCenter);
  <em>// Retrieve the circle center coordinates</em>
  float x = (float) _CircleCenter.GetX(); 
  float y = (float) _CircleCenter.GetY();
  float z = (float) _CircleCenter.GetZ();
  ...</pre>
<p>The indication agent is valued by the end user click. Its value is a 2D point 
located on the indication agent projection plane, obtained by the projection of 
the point corresponding to the mouse location on the screen when the click happens 
along a line passing through the viewpoint eye and the point clicked onto the projection 
plane. The indication agent <code>GetValue</code> method retrieves this 2D point 
whose coordinates are expressed according to the projection plane axis system. Then 
the CATMathPlane <code>EvalPoint</code> method creates a 3D point from these coordinates. 
Then you can use the 3D point as you wish, for example retrieve its coordinates 
expressed with respect of the 3D global axis system.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Releasing the Indication Agent</h3>
<p>A pointer to the indication agent was created in the command <code>BuildGraph</code> 
method as a data member to be accessed and used in different methods. It should 
be released when it becomes useless. This can be done in the command destructor, 
as shown here. This could also be done in the <code>Cancel</code> method called 
just before the destructor.</p>
<pre class="code">CAACreateCircleCmd::~CAACreateCircleCmd()
{
  ...
  if (NULL != _daIndicCircleCenter) _daIndicCircleCenter-&gt;<strong>RequestDelayedDestruction</strong>();
  daIndicCircleCenter = NULL ;
  ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved in an end user indication: the state 
dialog command, the statechart and its implementation in the <code>BuildGraph</code> 
method, the states, the indication dialog agent and its projection plane, the transition 
along with its composite condition and action, and the way to retrieve a usable 
3D point from the pixel clicked on the screen by the end user.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADegTaUMLDescription.htm">How to Describe State Dialog Commands 
		Using UML</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
