<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Associating a Dialog Box with a State</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Associating a Dialog Box with a State</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to use a Dialog box associated with a state in 
		a state dialog command.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The Point Command Use Case</a>
				<ul>
					<li><a href="#What">What Does the Point Command Do</a></li>
					<li><a href="#How">How to Launch the Point Command</a></li>
					<li><a href="#Where">Where to Find the Point Command Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to use a dialog box associated with a state 
in a dialog command. This dialog box is used to input precise values rather than 
indicating a point on the screen. In addition, you will learn how to use the Cancel 
state.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The Point Command Use Case</h2>
<p>The Point command is a use case of the CAADialogEngine.edu framework that illustrates 
the DialogEngine framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the Point Command Do</h3>
<p>The Point command is a state dialog command that creates a point in the 3D space 
according to the following UML statechart diagram [<a href="#References">1</a>].</p>
<p>
<img alt="Point Command State Chart" height="259" src="images/CAADegCreatePointStatechart.jpg" width="524"/></p>
<p>The dialog is as follows:</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreatePoint1.jpg" width="465" height="373"/></td>
		<td>Select the Point command. The active state becomes GetPoint, and the 
		dialog box is displayed. You can either indicate a point or use the dialog 
		box.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreatePoint2.jpg" width="469" height="374"/></td>
		<td>Click to indicate a point. The transition loops to GetPoint and creates 
		the point. You can click another point or use the dialog box.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreatePoint3.jpg" width="459" height="368"/></td>
		<td>Enter values in the dialog box spinners. Clicking Apply create the point 
		whose coordinates were entered and you can again either click to indicate 
		a point or use the dialog box. This is what's shown beside. Clicking OK 
		creates the point and ends the command. Clicking Cancel doesn't create the 
		point and ends the command.</td>
	</tr>
</table>
<p>Indicating a point [<a href="#References">2</a>] [<a href="#References">5</a>] 
means clicking on the screen at the desired location with the left mouse key. This 
is a very handy way, but sometimes it is not accurate enough, and a dialog box in 
which numerical values can be entered is often needed. The Point command enables 
both indication and dialog box input. Only the latter is described here.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the Point Command</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">3</a>] use case for 
a detailed description of how this use case should be launched .</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following: </p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
	<li>Select <strong>Point</strong> command in the <strong>CAA Geometry Creation Section</strong> 
    of the action bar.</li>
	<li>Click in the tab's background to create points, or enter the point coordinates 
		in the dialog box and click OK or Apply.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the Point Command Code</h3>
<p>The Point command is made of a single class named <em>CAADegCreatePointCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the Point command, there are three steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the Point Command Class Header File</a></td>
		<td>Header file</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step3">Implement the Statechart Diagram</a></td>
		<td><code>BuildGraph</code> method [<a href="#References">5</a>]</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step4">Releasing the Indication Agent and the Dialog Box</a></td>
		<td>Destructor</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CreatePoint Command Class Header File</h3>
<p>The CAADegCreatePointCmd state command class derives from CATStateCommand.</p>
<pre class="code">...
class CAADegCreatePointCmd : public CATStateCommand
{
  CmdDeclareResourceFile(CAADegFileCmd,CAADegCreatePointCmd,CATStateCommand);

  public :

    CAADegCreatePointCmd();
    virtual ~CAADegCreatePointCmd();  
    ...
    virtual void BuildGraph() ; <em>// Implements the statechart</em>

    CATBoolean  CheckPoint(void * iData); <em>// Checks if the point can be created</em>

    CATBoolean  CreatePointByIndication(void * iData); 
    CATBoolean  CreatePointByBox       (void * iData);

  private :
    CATIndicationAgent * _daIndication; <em>// Indication agent</em>
    CAADegPointEditor  * _PointEditor;  <em>// Dialog box</em>

    void NewPoint(const CATMathPoint &amp;iPoint); <em>// Action method to create a point</em>
    ...</pre>
<p>This header file includes:</p>
<ul>
	<li>The <code>CmdDeclareResource</code> macro states that the resources of the
		<em>CAADegCreatePointCmd</em> command are located in the CAADegFileCmd.CATNls 
		file. If resources were assigned to the CATStateCommand class, they would 
		be concatenated with the resources for CAADegCreatePointCmd </li>
	<li>The <code>BuildGraph</code> method implements the statechart diagram
	</li>
	<li>CheckPoint is a condition method of the transitions that create points from 
		a point indication or a dialog box entry using the action methods <code>
		CreatePointByIndication</code> or <code>CreatePointByBox</code> respectively
	</li>
	<li>Private data members include the indication agent, the dialog box, and a 
		method called by the action method that actually creates a 3D point in the 
		model.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing the Statechart Diagram</h3>
<p>This is done in the command <code>BuildGraph</code> method.</p>
<pre class="code">void CAADegCreatePointCmd::BuildGraph()
{
  //1- Creates the indication agent  
  _daIndication = new <strong>CATIndicationAgent</strong>(&quot;Indication&quot;);
  ...</pre>
<p>The indication agent is instantiated. The default projection plane is used; it 
is a plane parallel to the screen plane </p>
<p>Then, the dialog box is instantiated and built. It is an instance of the <em>
CAADegPointEditor</em> class that derives from the <em>CATDlgDialog</em> class and 
that simply includes a spinner for each coordinate, and three push buttons OK, Apply, 
and Cancel.</p>
<pre class="code">  ...
  //2- Creates the dialog box to input xyz 
  
  CATApplicationFrame * pFrame = NULL ;
  CATDialog * pParent = NULL ;
  pFrame = CATApplicationFrame::<strong>GetFrame</strong>() ;
  if ( NULL != pFrame )
  {
       pParent = pFrame-&gt;<strong>GetMainWindow</strong>() ;
  }
  _PointEditor = new <strong>CAADegPointEditor</strong>(pParent);
  _PointEditor-&gt;<strong>Build</strong>();
  ...</pre>
<p>The parent of this dialog box is an invisible dialog object which contains all 
the windows of the same model. This object is returned by the <code>GetMainWindow</code> 
method on the application frame. Refer to the article entitled &quot;Understanding 
the Application Frame Layout&quot; [<a href="#References">6</a>] for complete details 
about this object.</p>
<p>Dialog boxes should always be instantiated without controls (or other dialog 
objects). Instantiating these controls in a <code>Build</code> method called after 
the constructor has returned make sure that the control resources will be correctly 
allocated.</p>
<p>The GetPoint state is an instance of the <em>CATPanelState</em> class, dedicated 
to states associated with a dialog box.</p>
<pre class="code">  ...
  //3- Creates the state associated with the dialog box and containing the 
  //   Indication Agent
  CATPanelState * stState = new <strong>CATPanelState</strong>(this, &quot;GetPointId&quot;, _PointEditor);
  <strong>SetInitialState</strong>(stState);
  stState-&gt;<strong>AddDialogAgent</strong>(_daIndication);
...</pre>
<p>The state is also a <em>CATCommand</em> instance and must be assigned a parent 
in the command tree structure. This parent is set as <code>this</code> in the first 
constructor argument, that is, as the state dialog command itself. A pointer to 
the dialog box is passed as the third argument to associate the dialog box with 
the state. Since the state is explicitly constructed, it must be added as a the 
command initial state using <code>SetInitialState</code>. Usually, this is <code>
GetInitialState</code> that instantiates and sets the state as the initial state.</p>
<p>Then the transition that loops on this state when the end user indicates a point 
is defined as follows.</p>
<pre class="code">  ...
  //4-Defines the transition triggered by the Indication Agent
  CATDialogTransition *pFirstTransition = <strong>AddTransition</strong>(
    stState,
    stState,
    <strong>AndCondition</strong>(<strong>IsOutputSetCondition</strong>(_daIndication),
                 <strong>Condition</strong>((ConditionMethod)&amp;CAADegCreatePointCmd::CheckPoint)),
    <strong>Action</strong>((ActionMethod) &amp; CAADegCreatePointCmd::CreatePointByIndication)</pre>
<pre>  );</pre>
<p>The <code>AddTransition</code> method creates a transition and adds it to the 
transitions managed by the dialog command. Pointers to the transition's source and 
target states are the first and second arguments respectively. This self transition 
goes from/to the same GetPoint state. The transition trigger is defined in the guard 
condition as the first condition to be checked using the <code>IsOutputSetCondition</code> 
method applied to the indication agent. A second condition uses the <code>CheckPoint</code> 
method. Because we use <code>AndCondition</code> to create the guard condition, 
both condition methods must return True to fire the transition. In this case, the
<code>CreatePointByIndication</code> action method is executed.</p>
<p>The <em>CATPanelState</em> class<strong> </strong>creates automatically transitions 
depending on the style of the associated Dialog box:</p>
<ul>
	<li>An <strong>Ok</strong> transition which fires when the Ok button is selected 
		and whose target state is the NULL state. </li>
	<li>An <strong>Apply</strong> transition which fires when the Apply button is 
		selected and whose target state is the dialog state itself. </li>
	<li>A <strong>Cancel</strong> transition which fires when the Cancel button 
		is selected and whose target state is the cancel state.</li>
</ul>
<p>The Apply and Ok transitions are retrieved from the state and assigned a condition 
and an action.</p>
<pre class="code">  ... 
  //5- Completes the Apply transition
  // Sets a condition to the Apply transition
  (stState-&gt;<strong>GetApplyTransition</strong>())-&gt;<strong>SetCondition</strong>(<strong>Condition</strong>((ConditionMethod)&amp;CAADegCreatePointCmd::CheckPoint));
  // Sets an action to the Apply transition
  (stState-&gt;<strong>GetApplyTransition</strong>())-&gt;<strong>SetAction</strong>(<strong>Action</strong>((ActionMethod)&amp;CAADegCreatePointCmd::CreatePointByBox));

  //6- Completes the Ok transition
  // Sets a condition to the Ok transition
  (stState-&gt;<strong>GetOkTransition</strong>())-&gt;<strong>SetCondition</strong>(<strong>Condition</strong>((ConditionMethod)&amp;CAADegCreatePointCmd::CheckPoint));
  // Sets an action to the Ok transition
  (stState-&gt;<strong>GetOkTransition</strong>())-&gt;<strong>SetAction</strong>(<strong>Action</strong>((ActionMethod)&amp;CAADegCreatePointCmd::CreatePointByBox));
   ...
}</pre>
<p>Do not forget to release the state before getting out of scope.</p>
<pre class="code">  ... 
  // As the state was created explicitly by &quot;new&quot; instead of the 
  // GetInitialState method, it must be released.
  stState-&gt;<strong>Release</strong>();
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Releasing the Indication Agent and the Dialog Box</h3>
<p>A pointer to the indication agent was created in the command <code>BuildGraph</code> 
method as a data member to be accessed and used in different methods. It should 
be released when it becomes useless. This can be done in the command destructor, 
as shown here. This could also be done in the <code>Cancel</code> method called 
just before the destructor. In the same way, the dialog box should be destructed 
as soon as possible. This is possible using the <code>RequestDelayedDestruction</code> 
method.</p>
<pre class="code">CAADegCreatePointCmd::~CAADegCreatePointCmd()
{
  if (NULL != _daIndication) _daIndication-&gt;<strong>RequestDelayedDestruction</strong>();
  daIndication = NULL ;
  if (NULL !=_PointEditor)  _PointEditor-&gt;<strong>RequestDelayedDestruction</strong>();
  _PointEditor = NULL ;
  ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved when a dialog box is used in conjunction 
with a specific state dedicated to it (the &quot;panel&quot; state): the state dialog 
command, the statechart and its implementation in the <code>BuildGraph</code> method, 
the &quot;panel&quot; state, and the specific way to assign condition and action 
methods to transitions triggered when pressing the dialog box push buttons.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADegTaUMLDescription.htm">How to Describe State Dialog Commands 
		Using UML</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADegUcSampleIndication.htm">Managing Indication</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Wintop Frame Layout</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
		<tr>
		<td>Version: <strong>2</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
