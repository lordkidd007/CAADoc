<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Subscribing to Mouse Move Events</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Subscribing to Mouse Move Events</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to subscribe, in a state dialog command to mouse 
		move events and to create a temporary object that helps to figure out which 
		object could be created if the end user clicks at the curent mouse location.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The Circle Command Use Case</a>
				<ul>
					<li><a href="#What">What Does the Circle Command Do</a></li>
					<li><a href="#How">How to Launch the Circle Command</a></li>
					<li><a href="#Where">Where to Find the Circle Command Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to subscribe to mouse move events to retrieve, 
in a state dialog command, a 3D point using its coordinates in the 3D space from 
the mouse current location on the screen, and to create from the retrieved point 
a temporary object to display that is updated at each mouse move event detection 
to follow the mouse move as if it were attached to the mouse. This object is a temporary 
circle in this example that helps the end user to see which circle would be created 
when clicking at the current mouse location. Temporary objects do not usually belong 
to the displayed model tab, and are displayed using the ISO (Interactive Set 
of Objects). Adding an object to the ISO automatically displays it, providing this 
object implements the CATI3DGeoVisu interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The Circle Command Use Case</h2>
<p>The Circle command is a use case of the CAADialogEngine.edu framework that illustrates 
the DialogEngine framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the Circle Command Do</h3>
<p>CAADegCreateCircleCmd is a state dialog command that creates a circle in the 
3D space according to the following UML statechart diagram [<a href="#References">1</a>].</p>
<p>
<img alt="Circle Command State Chart" height="324" src="images/CAADegCreateCircleStatechart.jpg" width="561"/></p>
<p>The dialog is as follows:</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle1.jpg" width="458" height="374"/></td>
		<td>Select an existing plane that will be used as the circle plane. The 
		active state becomes GetPlane.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle2.jpg" width="456" height="378"/></td>
		<td>The viewpoint changes to make the selected plane and the screen plane 
		coincide. The active state is GetCircle.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle3.jpg" width="464" height="378"/></td>
		<td>Click to indicate a point for the circle center. The active state 
		becomes GetRadius. This image is captured just after the click. The 
		indicated point is shown inside the plane. The mouse has not yet moved.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle4.jpg" width="469" height="383"/></td>
		<td>Move the mouse from this center. A temporary circle is drawn and increases 
		or decreases to follow the mouse moves. The active state remains GetRadius. 
		The self transition loops onto this state.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAADegCreateCircle5.jpg" width="477" height="388"/></td>
		<td>When the wished circle is obtained, click a point on this circle to 
		actually create the circle. The command is now complete.</td>
	</tr>
</table>
<p>Indicating a point means clicking on the screen at the desired location with 
the left mouse key. The command retrieves from this click a geometric point with 
coordinates expressed in the absolute axis system. This is made possible by assigning 
an indication agent [<a href="#References">2</a>] to the state that asks for indication. 
This indication agent is valued by the mouse click with a point computed from the 
pixel coordinates of the point clicked on the screen. This point is the projection 
of the clicked point in the screen plane onto a specific plane associated with the 
indication point and therefore named the projection plane [<a href="#References">2</a>]. 
In addition, the dialog agent can be valued without click if it is enabled for prevaluation. 
In this case, the simple mouse move is detected by the system and prevalues the 
dialog agent, that can then trigger a transition. If this is a self transition, 
a temporary object can be create from the point retrieved under the mouse. Moving 
the mouse makes the dialog loops on the state and continuously update the temporary 
object. A click can value the agent and trigger another transition that creates 
the actual circle and consequently ends the looping process.</p>
<p>The Circle command uses this means to create the temporary circle. The step-by-step 
describes the temporary circle creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the Circle Command</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the <cite>The CAAGeometry Sample</cite> [<a href="#References">3</a>] use case for 
a detailed description of how this use case should be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
	<li>Select <strong>Point</strong> command in the <strong>CAA Geometry Creation Section</strong> 
    of the action bar.</li>
	<li>Create three points</li>
	<li>Select <strong>Plane</strong> command in the <strong>CAA Geometry Creation Section</strong> </li>
	<li>Successively click the three points to create a plane</li>
	<li>Select <strong>Circle</strong> command in the <strong>CAA Geometry Creation Section</strong> </li>
	<li>Left-click to create the circle center</li>
	<li>Left-click to create the circle.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the Circle Command Code</h3>
<p>The Circle command is made of a single class named <em>CAADegCreateCircleCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the circle center, there are seven steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Declare the indication agent</a></td>
		<td>Header file</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Instantiate the indication agent</a></td>
		<td><code>BuildGraph</code> method [<a href="#References">2</a>]</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Set the indication agent projection plane</a></td>
		<td>Transition action method <code>SetPlane</code></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Assign the indication agent to the GetRadius state</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create a self transition from/to the GetRadius state 
		triggered by the indication agent valuation</a></td>
		<td><code>BuildGraph</code> method</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Create the Temporary Circle and Add It to the ISO</a></td>
		<td>Transition action method <code>CreateCircleCenter</code></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Update the Temporary Circle According to Mouse Moves</a></td>
		<td>Transition action method <code>UpdateCircle</code></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Release the indication agent</a></td>
		<td>Destructor or <code>Cancel</code> method</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Declaring the Indication Agent and its Projection Plane</h3>
<p>The state command class derives from CATStateCommand.</p>
<pre class="code">class CAADegCreateCircleCmd : public CATStateCommand
{
  ...
  private :
    CATIndicationAgent * _daIndicRadius;
    CATMathPlane         _ProjPlane;

    CAAISysPoint       * _TemporaryPoint ;
    CAAISysCircle      * _TemporaryCircle ;
    CATISO             * _ISO ;
    ...</pre>
<p>A pointer to the indication agent, its projection plane, the temporary point 
to keep the indicated point, the temporary circle corresponding to this point, and 
the ISO, are declared as private data members.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Instantiating the Indication Agent</h3>
<p>The indication agent is instantiated in the command <code>BuildGraph</code> method.</p>
<pre class="code">void CAADegCreateCircleCmd::BuildGraph()
{
  ...
  _daIndicRadius = new <strong>CATIndicationAgent</strong>(&quot;GetRadiusPoint&quot;);
  _daIndicRadius-&gt;<strong>SetBehavior</strong>(CATDlgEngAcceptOnPrevaluate | 
	         CATDlgEngWithPrevaluation | CATDlgEngWithUndo);
  ...</pre>
<p>The character string GetRadiusPoint defined as the argument of the CATIndicationAgent 
constructor is the indication agent identifier. This identifier can be used to assign 
undo/redo prompts replacing the Undo and Redo items in the Edit menu. This is unused 
in self transitions. The indication agent behavior is set to enable it to be prevalued 
using CATDlgEngWithPrevaluation, and to trigger a transition when prevalued using 
CATDlgEngAcceptOnPrevaluate. It can also be valued and therefore can be undone without 
recording an undo step using CATDlgEngWithUndo.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting the Selected Plane as the Indication Agent Projection 
Plane</h3>
<p>The <code>SetPlane</code> method is the action method associated with the transition 
that retrieves the selected plane and use it to change the viewpoint. It is the 
appropriate place to assign this plane as the indication agent projection plane, 
since the plane selected is not kept as a data member.</p>
<pre class="code">CATBoolean CAADegCreateCircleCmd::CreateCamera(void *iDummy)
{
  ... <em>// Retrieve the origin and axes of the selected plane</em>
  CATMathPoint     OriginPlane;        
  CATMathVector UPlaneV, VPlaneV,dirV;
  piSysPlane-&gt;GetOrigin(OriginPlane);
  piSysPlane-&gt;GetPlane(UPlaneV,VPlaneV);
          
  <em>// Sets the plane for the 2d indication agents </em>
  _ProjPlane.<strong>SetOrigin</strong>(OriginPlane);
  _ProjPlane.<strong>SetVectors</strong>(UPlaneV,VPlaneV);

  <em>// Set _ProjPlane as the indiation agent projection plane </em>
  _daIndicCircleCenter-&gt;<strong>SetMathPlane</strong>(_ProjPlane);
  ...</pre>
<p>The selected plane is retrieved in <code>modelplane</code>. Its origin and directions 
are retrieved using the methods of this object, and are set to <code>_ProjPlane</code> 
using the <code>SetOrigin</code> and <code>SetDirections</code> methods of the CATMathPlane 
class. Then <code>_ProjPlane</code> is set as the indication agent projection plane.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Assigning the Indication Agent to the GetRadius State</h3>
<p>Still in the <code>BuildGraph</code> method, the GetRadius state is created, 
and the indication agent is added to this state. This makes it possible to value 
the indication agent when this state becomes the active one.</p>
<pre class="code">  ...
  CATDialogState *stGetRadius = <strong>AddDialogState</strong>(&quot;stGetRadiusId&quot;);
  stGetRadius-&gt;<strong>AddDialogAgent</strong>(_daIndicRadius);
  ...</pre>
<p>The <code>AddDialogState</code> method creates a new dialog state and adds it 
to the states managed by the dialog command. The <code>AddDialogAgent</code> method 
adds the indication agent to the state.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Self Transition from/to the GetRadius State</h3>
<p>The self transition is created in the <code>BuildGraph</code> method. This transition 
is triggered when the indication agent is prevalued, that is when the end user moves 
the mouse. The guard condition is checked, and if it returns True, the action is 
performed.</p>
<pre class="code">  ...
  CATDialogTransition *pRubberTransition = AddTransition
	(
	  stGetRadius,
	  stGetRadius,
	  <strong>IsLastModifiedAgentCondition</strong>(_daIndicRadius),
	  <strong>Action</strong>((ActionMethod) &amp; CAADegCreateCircleCmd::UpdateCircle)
	) ;
  CATDialogTransition *pThirdTransition = AddTransition
        (
	  stGetRadius,
	  NULL,
	  <strong>IsOutputSetCondition</strong>(_daIndicRadius),
	  <strong>Action</strong>((ActionMethod) &amp; CAADegCreateCircleCmd::NewCircle)
        ) ;
...</pre>
<p>The <code>AddTransition</code> method creates a transition and adds it to the 
transitions managed by the dialog command. Pointers to the transition's source and 
target states are the first and second arguments respectively. The same pointer 
is used to create a self transition. The transition trigger is defined in the guard 
condition as the condition to be checked using the <code>IsLastModifiedAgentCondition</code> 
method applied to the indication agent. When the dialog agent prevalue is modified, 
the transition fire. In this case, the <code>UpdateCircleCenter</code> action method 
is executed. To get out of the loop, the end user clicks a point. The second transition 
is then triggered because the indication agent is then valued, and not prevalued. 
The trigger is defined using the IsOutputSetCondition method. This transition has 
the final state as target state, and the action is to create the circle in the data 
model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the Temporary Circle and Adding It to the ISO</h3>
<p>When the end user has clicked to indicate a point, the transition between the 
GetCenter and GetRadius states is triggered, and if the guard condition returns 
True, the following action method executes.</p>
<pre class="code">CATBoolean CAADegCreateCircleCmd::CreateCircleCenter(void * iData)
{
  ... // Create the circle center, and creates the temporary circle
  ... // using this center, the projection plane, and a null radius
  _ISO-&gt;<strong>AddElement</strong>(_TemporaryCircle);
  ... 
  return TRUE ;
}</pre>
<p>The temporary circle is created using the indicated circle center in the projection 
plane shared by the different indication agents. This projection plane is the plane 
where the circle lies. To enable the temporary circle to be displayed, it should 
implement the CATI3DGoVisu interface. In addition, to be displayed as a non data 
model object, it should be simply added to the ISO using the AddElement method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Updating the Temporary Circle According to Mouse Moves</h3>
<p>When the end user has clicked to indicate a point, the transition between the 
GetCenter and GetRadius states is triggered, and if the guard condition returns 
True, the following action method executes.</p>
<pre class="code">CATBoolean CAADegCreateCircleCmd::UpdateCircle(void * iData)
{
  // Gets the current Point  
  CATMathPoint2D point2D = _daIndicRadius-&gt;<strong>GetValue</strong>();
  CATMathPoint Mouse ;
  _ProjPlane.<strong>EvalPoint</strong>(point2D.GetX(),point2D.GetY(),Mouse);

  // Computes the radius 
  _Radius = (float) _CircleCenter.DistanceTo(Mouse);

  // Modification of the temporary circle
  _TemporaryCircle-&gt;SetRadius(_Radius);

  _ISO-&gt;<strong>UpdateElement</strong>(_TemporaryCircle);

  // Required to continue the rubber banding
  _daIndicRadius-&gt;<strong>InitializeAcquisition</strong>();

  return TRUE ;
}
  ...</pre>
<p>The indication agent is prevalued by the mouse move. Its prevalue is a 2D point 
located on the indication agent projection plane, obtained by the projection of 
the point corresponding to the current mouse location on the screen along a line 
passing through the viewpoint eye and the current mouse location onto the projection 
plane. The indication agent <code>GetValue</code> method retrieves this 2D point 
whose coordinates are expressed according to the projection plane axis system. Then 
the <em>CATMathPlane</em> <code>EvalPoint</code> method creates a 3D point from 
these coordinates. The temporary circle and its radius were instantiated in the 
action method of the transition that creates the circle center. The distance between 
the circle center to this point is computed thanks to the <code>DistanceTo</code> 
method and set as the circle radius. Then the ISO is updated.Using the retrieved 
point, the you can use the 3D point as you wish, for example retrieve its coordinates 
expressed with respect of the 3D global axis system.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Releasing the Indication Agent</h3>
<p>A pointer to the indication agent was created in the command <code>BuildGraph</code> 
method as a data member to be accessed and used in different methods. It should 
be released when it becomes useless. This can be done in the command destructor, 
as shown here. This could also be done in the <code>Cancel</code> method called 
just before the destructor.</p>
<pre class="code">CAADegCreateCircleCmd::~CAADegCreateCircleCmd()
{
  ...
  if (_daIndicRadius) _daIndicRadius-&gt;RequestDelayedDestruction();
  _daIndicRadius = NULL ;
  ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved to subscribe to mouse move events, create 
a self transition that updates a temporary object added to the ISO (Interactive 
Set of Objects) to display the object that would be created if the end user decided 
to click at the current mouse location. These objects are the statechart and its 
implementation in the <code>BuildGraph</code> method, the states, the indication 
dialog agent and its projection plane, the transition along with its condition and 
action, the way to retrieve a usable 3D point from the pixel under the mouser, and 
the ways to add a temporary object to the ISO and to update it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADegTaUMLDescription.htm">How to Describe State Dialog Commands 
		Using UML</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
