<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Manage the State Dialog Command Lifecycle</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Manage the State Dialog Command Lifecycle</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows the roles of the command class constructor and destructor, 
		and of the methods <code>Activate</code>, <code>Desactivate</code>, and
		<code>Cancel</code> in the command lifecycle.</p>
		<ul>
			<li><a href="#300000">Managing the State Dialog Command Lifecycle</a>
				<ul>
					<li><a href="#310000">Constructor</a> </li>
					<li><a href="#320000">Destructor</a> </li>
					<li><a href="#330000">Activate</a> </li>
					<li><a href="#340000">Desactivate</a> </li>
					<li><a href="#350000">Cancel</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Managing the State Dialog Command Lifecycle</h2>
<p>The command lifecycle is managed using the constructor and the destructor, and 
using the three methods <code>Activate</code>, <code>Desactivate</code>, and
<code>Cancel</code>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="310000"></a>Constructor</h3>
<p>The command constructor instantiates the command class. It should instantiate 
or retrieve the command class data members, or retrieve the pointers to the appropriate 
interfaces set as data members, that should be created once during the command lifecycle, 
and that are required at the beginning of the command.</p>
<p>Using the constructor, and using the <em>CATStateCommand</em> constructor, you 
can also manage the command running mode and possibly the argument passed to the 
command from the command header:</p>
<ul>
	<li>The command running (or start) mode, that can be set as the second argument 
		of the <em>CATStateCommand</em> constructor, as:
		<ul>
			<li><strong>Exclusive</strong>: an exclusive command is known by the 
				command selector. It requests the command selector to clean the 
				command stack before beginning to run and taking the focus, including 
				the active command. All commands present in the stack are deleted. 
				Use <code>CATCommandModeExclusive</code> to set a command as exclusive
			</li>
			<li><strong>Shared</strong>: a shared command is known by the command 
				selector. It coexists with other commands already present in the 
				stack, and requests the command selector to deactivate the active 
				command before it takes the focus. Use <code>CATCommandModeShared</code> 
				to set a command as shared.</li>
		</ul>
		<table class="Remark">
			<tr>
				<td class="Remark"><span class="run-in">Warning</span>: A state 
				dialog command cannot be set as an undefined command.</td>
			</tr>
		</table>
		<p>A command that creates, modifies, or updates data should always be declared 
		as an <strong>exclusive</strong> command. A shared command, that is, a command 
		that may interrupt another command, should never modify the model, because 
		if it does so, when the previous command resumes after the shared command 
		completion, this command may not found what it has left when interrupted. 
		Any command should properly manage its interruptions using the <code>Desactivate</code> 
		method called when a shared command takes the focus. The interrupted command 
		should make the assumption that the interrupting command doesn't modify 
		the model. Any command should also properly manage its deletion using the
		<code>Cancel</code> method called when an exclusive command takes the focus.</p>
		<p>For example, the <em>CAACommandCmd</em> command is set as exclusive, 
		as shown below.</p>
		<pre class="code">...
CAACommandCmd::CAACommandCmd()
:
             CATStateCommand(&quot;CommandId&quot;, NULL, <strong>CATCommandModeExclusive</strong>), ...
{
...</pre>
		<p>Note that the exclusive mode is the default mode, and that consequently,
		<code>CATCommandModeExclusive</code> could be removed from the <em>CATStateCommand</em> 
		constructor arguments. Whatever its mode, such a command should have a creation 
		function. It can then be proposed to the end user through an item in the 
		action bar or in a contextual menu, that is, using a command header that uses this creation function 
		to create the command instance when the end user clicks on the menu item 
		or on the icon in the action bar. This creation function is itself created 
		using the <code>CATCreateClass</code> macro, as shown below.</p>
		<pre class="code">...
#include &quot;CATCreateExternalObject.h&quot;
CATCreateClass(CAACommandCmd);
...</pre>
	</li>
	<li>The argument passed to the command from the command header as a pointer 
		to an object. This is the case when different menu items or icons seem to 
		run different commands through different command headers, but really activate 
		the same command class by passing an argument to the command class constructor 
		to differentiate from where the input comes, and to execute accordingly.
		<p>For example, the state dialog command <em>CAACmdWithArg</em> is passed 
		an argument as a pointer to a <em>CATUnicodeString</em> from its different 
		command headers, as shown below.</p>
		<pre class="code">...
CAACmdWithArg::CAACmdWithArg(<strong>CATUnicodeString</strong> * iArg)
             : CATStateCommand(&quot;CommandId&quot;, ...
{
...</pre>
		<p>Such a command should have its creation function created using the
		<code>CATCreateClassArg</code> macro, as shown below, with the intended 
		pointer type passed as the second argument.</p>
		<pre class="code">...
#include &quot;CATCreateExternalObject.h&quot;
CATCreateClassArg(CAACmdWithArg, CATUnicodeString);
...</pre>
		<p>Note that any kind of pointer can be passed in place of <em>CATUnicodeString</em>. 
		The same type should be declared in both the command constructor and the
		<code>CATCreateClassArg</code> macro.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="320000"></a>Destructor</h3>
<p>You should explicitly delete or release the data members created or retrieved 
once for the command, usually in the constructor or in the <code>BuildGraph</code> 
method, such as the dialog agents, compared to the data members created in the
<code>Activate</code> method that should generally be deleted in the <code>Cancel</code> 
method.</p>
<p>Any state, transition, condition, or action created in <code>BuildGraph</code> 
using the methods proposed by the <em>CATStateCommand</em> class are automatically 
deleted. These methods are:</p>
<ul>
	<li>States: <code>GetInitiaState</code>, <code>AddDialogState</code>, <code>
		GetCancelState</code> </li>
	<li>Transitions: <code>AddTransition</code> </li>
	<li>Conditions: <code>Condition</code>, <code>IsOutputSetCondition</code>,
		<code>IsLastModifiedAgentCondition</code> <code>AndCondition</code>,
		<code>OrCondition</code>, <code>NotCondition</code> </li>
	<li>Actions: <code>Action</code>, <code>AndAction</code>, <code>OrAction</code></li>
</ul>
<p>On the opposite, any state (<em>CATDialogState</em>), transition (<em>CATDialogTransition</em>), 
condition (<em>CATStateCondition</em>), or action (<em>CATDiaAction</em>) you explicitly 
instantiate using its constructor should be deleted in the command class destructor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="330000"></a>Activate</h3>
<p><code>Activate</code> is called when the state dialog command takes the focus. 
This happen in two cases:</p>
<ol>
	<li>The command is just selected by the end user. The command class is instantiated 
		and the dialog starts from the beginning </li>
	<li>The command restarts at the state that was current when a shared command 
		took the focus from it.</li>
</ol>
<p><code>Activate</code> can be used to create temporary objects that are needed 
from the beginning, either because they help the end user to perform the command, 
such as the outline of the created object, or a rubber band that follows the mouse, 
both known as interactive objects and added to the set of interactive objects (ISO), 
or construction objects that can be helpful.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="340000"></a>Desactivate</h3>
<p><code>Desactivate</code> is called when a shared command takes the focus. The 
active command becomes inactive, is frozen in its current state and put in the command 
stack. When the shared command will complete, the frozen command will be reactivated 
from its current state using the <code>Activate</code> method. <code>Desactivate</code> 
should hide temporary objects created by <code>Activate</code>, or by the action 
methods, such as a dialog box, or temporary interactive objects that should be removed 
from the ISO. Some objects should be deleted, such as the rubber band, that will 
never be restored as it were since it follows the mouse.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="350000"></a>Cancel</h3>
<p><code>Cancel</code> is called when the command completes, or when an exclusive 
command takes the focus and requests the command to be deleted. When the command 
completes, the focus is given to the default command (usually Select). If the command 
was set as a repeatable, the focus is given to it again. <code>Cancel</code> must 
delete or release temporary objects created by the command, possibly after having 
removed them from the sets of objects. It should also delete objects created in 
the action methods, or possibly in the condition methods, even if this code could 
be put in the destructor, except if the command were declared in repeat mode.</p>
<p>When the command is canceled, you can request the command undo when the command 
completes by calling the <code>ExecuteUndoAtEnd</code> method.</p>
<p>The following table summarizes the methods that go in pairs for creation/destruction 
of the command objects.</p>
<table>
	<colgroup align="left" span="1">
	</colgroup>
	<colgroup align="center" span="3">
	</colgroup>
	<tr>
		<td>Creation/Destruction</td>
		<td>Destructor</td>
		<td>Desactivate</td>
		<td>Cancel</td>
		<td>Undo</td>
	</tr>
	<tr>
		<td>Constructor</td>
		<td>X</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>BuildGraph</td>
		<td>X</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Activate</td>
		<td></td>
		<td></td>
		<td>X</td>
		<td></td>
	</tr>
	<tr>
		<td>Action method</td>
		<td></td>
		<td></td>
		<td>X</td>
		<td></td>
	</tr>
	<tr>
		<td>Redo</td>
		<td></td>
		<td></td>
		<td></td>
		<td>X</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A dialog state command is a dialog command designed as a state machine, each 
state enabling end user input, that enables the end user to pass from state to state 
using transitions between these states triggered when requested events happen and 
when requested guard conditions are satisfied, and that execute the declared actions. 
It is modeled using a class deriving from the <em>CATStateCommand</em> class.</p>
<p>The statechart diagram is implemented using the <code>BuildGraph</code> method, 
and the command life cycle is managed by the <code>Activate</code>, <code>Desactivate</code>, 
and <code>Cancel</code> methods in addition to the command class constructor and 
destructor.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
