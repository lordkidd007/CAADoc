<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Assign Resources to a State Dialog Command</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Assign Resources to a State Dialog Command</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The resources that you can assign to a state dialog command are the prompts 
		displayed in the status bar for each proposed interaction as a help for 
		the end user, and the prompts for each Undo and Redo step to inform the 
		end user of what can be undone or redone.</p>
		<ul>
			<li><a href="#100000">Internationalization and Localization</a></li>
			<li><a href="#400000">Internationalizing Prompts of State Dialog Commands</a>
				<ul>
					<li><a href="#Prompt">Prompt Description</a></li>
					<li><a href="#Resource">Resource Filename Declaration</a></li>
					<li><a href="#410000">State Prompts</a></li>
					<li><a href="#420000">Undo/Redo Prompts</a>
						<ul>
							<li><a href="#331000">Command Undo/Redo Prompts</a></li>
							<li><a href="#332000">Agent Undo/Redo Prompts</a></li>
							<li><a href="#333000">Transition Undo/Redo Prompts</a></li>
							<li><a href="#Recommendations">Recommendations</a></li>
						</ul>
					</li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>Internationalization and Localization</h2>
<p>Even if your don't know if your client application will be used abroad and by 
people of a different culture and speaking a language different from yours, it is 
always easier, safer, and cheaper to design and code it as if it should be. Internationalizing 
a client application means that no assumptions are made about the language, and 
more generally the locale, used to run your application when you design and code 
it. When such an application is presented in front of end users from different countries, 
the same look and feel, and the same functions, are expected whatever the language 
and locale used. The localized versions of the application should then behave as 
the version in the original language.</p>
<p>Internationalizing an application is also called National Language enabling. 
This means that the application should be designed and coded in such a way that 
it could be afterwards localized. Localizing means translating the user interface 
into the target languages, and possibly do some additional customization. The key 
point is that localization never requires to recompile any part of the application. 
To enable for that, any character string displayed in front of the end user must 
be located in a external text file.</p>
<p>CAA is natively National Language enabled, that is includes all the necessary 
stuff for internationalization, and provides you with any tools and mechanisms to 
facilitate you internationalizing job.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>Internationalizing Prompts of State Dialog Commands</h2>
<p>You can put the following prompts in a resource file: state prompts and undo/redo 
prompts. This section first describes them and next explains how to assign them 
to the state dialog objects.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prompt"></a>Prompt Description</h3>
<ul>
	<li>The <strong>state</strong> prompt
		<p>The state prompt is displayed:</p>
		<ul>
			<li>When? when the state becomes active</li>
			<li>Where? in the message area</li>
		</ul>
	</li>
	<li>The <strong>undo/redo</strong> prompts
		<p>The undo/redo prompts are related to either a command, an agent or a 
		transition:</p>
		<ul>
			<li>The <strong>command</strong> undo prompt is displayed when the command 
				is completed, and the redo prompt is displayed when it's just undone.</li>
			<li>The <strong>agent</strong> undo prompt is displayed when the agent 
				input is completed, and the redo prompt is displayed when the agent 
				input is just undone. However these two prompts are mandatory only 
				if the agent has the <code>CATDlgEngWithUndoStep</code> behavior. 
				For the two other behaviors (<code>CATDlgEngWithUndo</code> and
				<code>CATDlgEngWithoutUndo)</code> they are useless [<a href="#References">2</a>].</li>
			<li>The <strong>transition</strong> undo prompt is displayed when the 
				transition is completed, and the redo prompt is displayed when it's 
				just undone.</li>
		</ul>
		<p><a name="Example"></a>Here is an example of the undo/redo prompts with the <em>CAADegCreateTriangleCmd</em> 
		command [<a href="#References">1</a>].</p>
		<ul>
			
			<li>In the fixed area of the action bar, when you pass over the <kbd>Undo</kbd>/<kbd>Redo</kbd> icons:
				<p>
				<img alt="" src="images/CAADegRscUndoRedoTlb.jpg" width="174" height="148"/>
				<img alt="" src="images/CAADegRscUndoRedo2Tlb.jpg" width="163" height="141"/></p>
			</li>
			<li>Inside <kbd>Undo/Redo Overview</kbd> command: 
				<p>
				<img alt="" src="images/CAADegRscUndoRedoStackTlb.jpg" width="55" height="54"/></p>
				<p>
				<img alt="" src="images/CAADegRscUndoRedoDlg.jpg" width="326" height="220"/></p>
			</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Resource"></a>Resource Filename Declaration</h3>
<p>The resource filename for a dialog command should be declared using the <code>
CmdDeclareResource</code> or <code>CmdDeclareResourceFile</code> macro in the dialog 
command class header file. The suffix of this file is CATNls. (The CATRsc file is 
usually not necessary for a dialog state command.)</p>
<ul>
	<li><code>CmdDeclareResource</code>
		<p>This macro has two arguments: the dialog command class name is the first 
		parameter, and its base class is the second one.</p>
		<pre class="code">class ClassName : public BaseClassName
{
   <strong>CmdDeclareResource</strong> (ClassName,BaseClassName);
   public :
}</pre>
		<p>This means that the <code>ClassName</code> class can use the resources 
		defined for the <code>BaseClassName</code> class, if any, according to the 
		rules explained in Understanding Resource Inheritance and Concatenation 
		[<a href="#References">3</a>].</p>
		<p>The resource file name is <code>ClassName.CATNls</code>. Each line of 
		this file begins by the command class name :</p>
		<pre class="code"><strong>ClassName.</strong>xxxxxx = &quot;&quot; ;</pre>
	</li>
	<li><code>CmdDeclareResourceFile</code>
		<p>In addition to the <code>CmdDeclareResource</code> capabilities, the
		<code>CmdDeclareResourceFile</code> macro enables you to set a resource 
		file name different from the command class name. The first parameter of 
		this macro is the prefix of the resource file, the dialog command class 
		name is the second one, and the command base class is the last one.</p>
		<pre class="code">class ClassName : public BaseClassName
{
   <strong>CmdDeclareResourceFile</strong> (Filename,ClassName,BaseClassName);
   public :
}</pre>
		<p>This means that the <code>ClassName</code> class can use the resources 
		defined for the <code>BaseClassName</code> class, if any, according to the 
		rules explained in Understanding Resource Inheritance and Concatenation 
		[<a href="#References">3</a>].</p>
		<p>The resource file name is <code>FileName.CATNls.</code> In this resource 
		file, each line begins with the name of the resource file followed by the 
		command class name:</p>
		<pre class="code"><strong>FileName.ClassName.</strong>xxxxxx = &quot;&quot; ;</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="410000"></a>State Prompts</h3>
<p>A state prompt is associated with a given state of the state dialog command. 
The link between the state and the state prompt is done using the state identifier 
declared when creating the state using <code>GetInitialState</code> or <code>AddDialogState</code>.</p>
<p>For example, assume that these two states are defined in the <code>BuildGraph</code> 
method of the <em>CAADegCreateTriangleCmd</em> state dialog command:</p>
<pre class="code">CATDialogState *stStartState = <strong>GetInitialState</strong>(&quot;stFirstPointId&quot;);
 ...
CATDialogState *stSecondState = <strong>AddDialogState</strong>(&quot;stSecondPointId&quot;);
 ...
</pre>
<p>The parameters <code>stFirstPointId</code> and <code>stSecondPointId</code> of 
the methods <code>GetInitialState</code> and <code>AddDialogState</code> are the 
identifiers of the states <code>stFirstState </code>and <code>stSecondState</code> 
respectively.</p>
<p>The state prompt key used to define the state prompt in the message file is built 
using the dialog command class name, the state identifier, and the keyword <code>
Message</code>.</p>
<pre class="code">(Filename.)ClassName.StateId.Message = &quot;The prompted message&quot;;</pre>
<p>For example, the prompts associated with these two states in the message file 
for <em>CAADegCreateTriangleCmd</em>, that is <code>CAADegCreateTriangleCmd.CATNls</code>, 
are as follows:</p>
<pre class="code">CAADegCreateTriangleCmd.stFirstPointId.Message   = &quot;Select the first point&quot;;
CAADegCreateTriangleCmd.stSecondPointId.Message  = &quot;Select the second point&quot;;</pre>
<p>If not any message is assigned to a state, the displayed prompt is the identifier 
of the state.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="420000"></a>Undo/Redo Prompts</h3>
<p>Undo/redo is managed at both the command level and inside the command. At the 
command level, undo or redo applies to what you did with the command until the command 
completed. Inside the command, undo or redo applies to the last acquisition managed 
by a dialog agent, or to the last transition.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="331000"></a>Command Undo/Redo Prompts</h4>
<p>The prompt keys are built in the message file using the dialog command class 
name and the keywords <code>UndoTitle</code> and <code>RedoTitle</code> respectively.</p>
<pre class="code">(Filename.)ClassName.UndoTitle=&quot;The undo message&quot;;
(Filename.)ClassName.RedoTitle=&quot;The redo message&quot;;</pre>
<p>The undo message should not contain the &quot;Undo&quot; word and the redo message 
should not contain the &quot;Redo&quot; word. These two words are automatically 
added. It is the reason why the redo prompt can be useless. If the redo prompt is 
not specified the undo prompt is used.</p>
<p>For example, the undo prompt associated with the <em>CAADegCreateTriangleCmd
</em>command in the <code>CAADegCreateTriangleCmd.CATNls</code> file is as follows:</p>
<pre class="code">CAADegCreateTriangleCmd.UndoTitle=&quot;Triangle Creation&quot;;</pre>
<p>The following pictures shows the undo and the redo prompts for the Triangle command:</p>
<p>
<img alt="" src="images/CAADegRscUndoRedoTlb.jpg" width="174" height="148"/>
<img alt="" src="images/CAADegRscUndoRedo2Tlb.jpg" width="163" height="141"/></p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="332000"></a>Agent Undo/Redo Prompts</h4>
<p>For example, assume that the following dialog agent is created in the <code>BuildGraph</code> 
method of the <em>CAADegCreateTriangleCmd </em>dialog command:</p>
<pre class="code">...
_daPathElement = new CATPathElementAgent(&quot;SelStartPoint&quot;);
...</pre>
<p>The parameter <code>SelStartPoint</code> of the dialog agent constructor is the 
dialog agent identifier.</p>
<p>The prompt keys are built in the message file using the dialog command class 
name, the dialog agent identifier passed as an argument of its constructor, and 
the keywords <code>UndoTitle</code> and <code>RedoTitle</code> respectively.</p>
<pre class="code">(Filename.)ClassName.AgentId.UndoTitle=&quot;The undo message&quot;;
(Filename.)ClassName.AgentId.RedoTitle=&quot;The redo message&quot;;</pre>
<p>The undo message should not contain the &quot;Undo&quot; word and the redo message 
should not contain the &quot;Redo&quot; word. These two words are automatically 
added. It is the reason why the redo prompt can be useless. If the redo prompt is 
not specified the undo prompt is used.</p>
<p>For example, the undo prompt associated with the <code>_daPathElement</code> 
agent in the <code>CAADegCreateTriangleCmd</code>.<code>CATNls</code> file is as 
follows:</p>
<pre class="code">CAADegCreateTriangleCmd.SelStartPoint.UndoTitle  = &quot;First point selection&quot;;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<p>The following pictures show the undo and the redo prompts for the <code>_daPathElement</code> 
agent:</p>
<p><img alt="" src="images/CAADegRscUndoAgent.jpg" width="323" height="216"/>
<img alt="" src="images/CAADegRscRedoAgent.jpg" width="321" height="211"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="333000"></a>Transition Undo/Redo Prompts</h4>
<p>For example, assume that the following transition is created in the <code>BuildGraph</code> 
method of the <em>CAADegCreateTriangleCmd </em>dialog command:</p>
<pre class="code">...
CATDialogTransition *pSecondTransition = <strong>AddTransition</strong>
  (
     stSecondState,
     stEndState,
     AndCondition(IsOutputSetCondition(_daPathElement),
                  Condition((ConditionMethod) &amp; CAADegCreateTriangleCmd::CheckPoint2)),
     Action((ActionMethod) &amp; CAADegCreateTriangleCmd::CreateLine,
            (ActionMethod) &amp; CAADegCreateTriangleCmd::UndoCreateLine,
            (ActionMethod) &amp; CAADegCreateTriangleCmd::RedoCreateLine)
  ) ;

  pSecondTransition-&gt;<strong>SetResourceID</strong>(&quot;SecondTransition&quot;);
...</pre>
<p>In this case, you need to use the <code>SetResourceID</code> method to set the 
transition identifier.</p>
<p>The prompt keys are built in the message file using the dialog command class 
name, the transition identifier, and the keywords <code>UndoTitle</code> and
<code>RedoTitle</code> respectively.</p>
<pre class="code">(Filename.)ClassName.TransitionId.UndoTitle=&quot;The undo transition message&quot;;
(Filename.)ClassName.TransitionId.RedoTitle=&quot;The redo transition message&quot;;</pre>
<p>The undo message should not contain the &quot;Undo&quot; word and the redo message 
should not contain the &quot;Redo&quot; word. These two words are automatically 
added. It is the reason why the redo prompt can be useless. If the redo prompt is 
not specified the undo prompt is used.</p>
<p>For example, the undo prompt associated with the <code>pSecondTransition</code> 
transition in the <code>CAADegCreateTriangleCmd</code>.<code>CATNls</code> file 
is as follows:</p>
<pre class="code">CAADegCreateTriangleCmd.SecondTransition.UndoTitle  = &quot;First line creation&quot;;</pre>
<p>The following picture show the undo prompt for the first transition 
of the <code>Triangle</code> command:</p>
<p><img alt="" src="images/CAADegRscUndoTrans.jpg" width="322" height="215"/> </p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: if a transition is 
		triggered when a dialog agent is valued, and if both the dialog agent and 
		the transition have prompts, only the transition prompt is displayed.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Recommendations"></a>Recommendations</h4>
<ul>
	<li>The contents of each undo/redo message depends on the command, the agent 
		and the transition, but prefer a noun to a verb. Prefer &quot;Triangle Creation&quot; 
		to &quot;Create Triangle&quot;.</li>
	<li>Do not assign a specific prompt for the redo, the same message for the undo/redo 
		will be used</li>
	<li>
		<p>If you have forgot an undo/redo prompt, you can detect them thanks to 
		the syntax used to display a default undo/redo title.</p>
	</li>
</ul>
<p>The left image shows the default title, whereas the right image shows the title 
coming from the NLS resource file:</p>
<p>
<img alt="" src="images/CAADegRscWithoutUndoRedo.jpg" width="318" height="211"/>
<img alt="" src="images/CAADegRscWithoutUndoRedo2.jpg" width="321" height="211"/></p>
<p>The <strong>()</strong> and the <strong>[]</strong> signs are added to the undo/redo 
prompts.</p>
<ul>
	<li><strong>(</strong>xxx<strong>) ...</strong> where xxx is the default undo 
		title of the command which is the short help of the last triggered command 
		header.</li>
	<li><strong>[</strong>xxx<strong>] ...</strong> where xxx is the identifier 
		of the agent.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The following keywords should be used to build the keys associated with the prompts:</p>
<table>
	<tr>
		<td>Message</td>
		<td>Prompt associated with a given state. It should be concatenated with 
		the command and the state identifiers, as follows: <code>(FileName.)ClassName.StateId.Message</code></td>
	</tr>
	<tr>
		<td>UndoTitle</td>
		<td>Prompt to describe what the undo does. Applies to commands, agents, 
		and transitions, and is built using their identifiers.
		<table>
			<tr>
				<td>Command</td>
				<td><code>(FileName.)ClassName.UndoTitle</code></td>
			</tr>
			<tr>
				<td>Agent</td>
				<td><code>(FileName.)ClassName.AgentId.UndoTitle</code></td>
			</tr>
			<tr>
				<td>Transition</td>
				<td><code>(FileName.)ClassName.TransitionId.UndoTitle</code></td>
			</tr>
		</table>
		</td>
	</tr>
	<tr>
		<td>RedoTitle</td>
		<td>Prompt to describe what the redo does. Applies to commands, agents, 
		and transitions, and is built using their identifiers. This prompt is mandatory 
		only if you want a specific text for the redo, otherwise the undo prompt 
		is used.
		<table>
			<tr>
				<td>Command</td>
				<td><code>(FileName.)ClassName.RedoTitle</code></td>
			</tr>
			<tr>
				<td>Agent</td>
				<td><code>(FileName.)ClassName.AgentId.RedoTitle</code></td>
			</tr>
			<tr>
				<td>Transition</td>
				<td><code>(FileName.)ClassName.TransitionId.RedoTitle</code></td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADegTaGraph.htm">How to Implement the Command Statechart 
		Diagram</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="../CAADlgDialog/CAADlgTaResources.htm">How to Assign 
		Resources to a Dialog Box</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Aug 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
