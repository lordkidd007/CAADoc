<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Setting Applicative Attributes and Colors on Part Sub-Elements</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Setting Applicative Attributes and Colors on Part 
		Sub-Elements</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAMmrApplicativeAttributes</strong> 
		use case. This Use Case explains how to navigate through a 3D Shape in order 
		to find its sub-elements (faces), set color and applicative attributes on 
		these sub-elements, and retrieve these colors and applicative attributes 
		using dedicated CAA service class.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrApplicativeAttributes Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrApplicativeAttributes Do</a></li>
					<li><a href="#How">How to Launch CAAMmrApplicativeAttributes</a></li>
					<li><a href="#Where">Where to Find the CAAMmrApplicativeAttributes 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to set colors and applicative attributes 
on a list of faces.</p>
<p>
<img alt="" height="164" src="images/CAAMmrApplicativeAttributes.png" width="321"/>
<img alt="" height="164" src="images/CAAMmrApplicativeAttributes2.png" width="324"/></p>
<p>These pictures represents a Representation Reference before (on the left) and 
after (on the right) its processing by the use case. The program has looked for 
all faces in the model and set applicative attributes and colors on its faces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrApplicativeAttributes Use Case</h2>
<p><code>CAAMmrApplicativeAttributes</code> is a use case of the <code>CAAMechanicalModeler.edu</code> 
framework that illustrates CATMecModUseItf and CATMecModLiveUseItf frameworks.</p>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrApplicativeAttributes Do</h3>
<p>The job steps involved are:</p>
<ul>
	<li>Opening and loading a representation reference whose PLM_ExternalID and 
	majorrevision attributes are passed through as arguments</li>
	<li>Getting access to the Part feature contained in the 3D Shape</li>
	<li>Getting Main Body output geometry
		<ul>
			<li>Accessing the main body</li>
			<li>Getting its associated Result Out feature</li>
			<li>Retrieving the corresponding geometry</li>
		</ul>
	</li>
	<li>Getting BRepAccess from geometry to access its faces</li>
	<li>Retrieving each face current colors </li>
	<li>Setting new colors
		<ul>
			<li>Creating new colors lists</li>
			<li>Setting these new colors</li>
		</ul>
	</li>
	<li>Retrieving each face colors </li>
	<li>Setting applicative attributes
		<ul>
			<li>Creating applicative attributes lists</li>
			<li>Setting these applicative attributes</li>
		</ul>
	</li>
	<li>retrieving each face applicative attributes lists</li>
	<li>Saving the representation reference and exiting.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrApplicativeAttributes</h3>
<p>To launch <code>CAAMmrApplicativeAttributes</code>, you will need to set up the 
build time environment, then compile <code>CAAMmrApplicativeAttributes</code> along 
with its prerequisites, set up the run time environment, and then execute the use 
case. These steps are detailed in the following technical article: "Building and 
Launching a use case" [<a href="#References">2</a>] . </p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<em>CAAMmrApplicativeAttributes Repository Server 
UserId Password SecurityCtx PLMRepType PLMExternalID Version</em>&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<th>PLMRepType</th>
		<td>A string representing PLM Representation Type (e.g. VPMRepReference)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation 
		Reference </td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The <code>majorrevision</code> of a PLM Reference or PLM Representation 
		Reference</td>
	</tr>
</table>
<p>You can directly execute this use case if you know how to locate your own Representation 
Reference. If not, you can import a 3D XML file supplied in the CAAMechanicalModeler.edu 
framework:</p>
<table>
	<tr>
		<td><code>InstallRootDirectory\CAAMechanicalModeler.edu\InputData\CAAMmrApplicativeAttributesPart.3dxml\</code></td>
	</tr>
</table>
<p>where <code>InstallRootDirectory</code> is the directory where the CAA CD-ROM 
is installed.</p>
<p>This 3D XML file contains the Representation Reference with the following attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong> : CAAMmrApplicativeAttributesPart </li>
	<li><strong>Version</strong>: ---</li>
</ul>
<p><strong>Attention</strong>: Its mandatory that you provide a suitable prefix to the PLM_ExternalID 
of the Input Model while importing a 3D XML file, to ensure that data stored in 
the PROVIDER is unique. Refer to [<a href="#References">2</a>] for information on 
how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrApplicativeAttributes Code</h3>
<p>The CAAMmrApplicativeAttributes use case is made of a single source file named 
CAAMmrApplicativeAttributes.cpp located in the CAAMmrApplicativeAttributes.m module 
of the CAAMechanicalModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrApplicativeAttributes.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are ten logical steps in <code>CAAMmrApplicativeAttributes</code>:</p>
<ol>
	<li><a href="#Step1">Checking Arguments, Loading and Initializing the Representation 
		Reference</a></li>
	<li><a href="#Step2">Accessing the Part Feature in the Representation</a></li>
	<li><a href="#Step3">Getting Main Body Output Geometry</a></li>
	<li><a href="#Step4">Getting BRepAccess from Geometry to Access its Faces</a></li>
	<li><a href="#Step5">Retrieving each Face Current Colors</a></li>
	<li><a href="#Step6">Creating and Setting New Colors List</a></li>
	<li><a href="#Step7">Retrieving each Face New Color</a></li>
	<li><a href="#Step8">Creating and Setting Applicative Attributes List</a></li>
	<li><a href="#Step9">Retrieving each Face Applicative Attributes List</a></li>
	<li><a href="#Step10">Saving and Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking Arguments, Loading and Initializing the Representation 
Reference</h3>
<pre class="code">...
HRESULT rc = ::<strong>CAAAdpCreateSession</strong>(iArgv[1], iArgv[2], iArgv[3],iArgv[4], iArgv[5]);				   

...	
      
<strong>CATOmbLifeCycleRootsBag</strong> Bag; 				   
rc = ::<strong>CAAOpenPLMComponent</strong>(PLM_RepType, 
			   PLM_ExternalIDValue,
			   VersionValue,
			   IID_CATIPLMComponent,
			   (void**)&amp;piPLMComponentOnPart, 
			   Bag, 
			   TRUE);
			 
<strong>CATIPsiRepresentationLoadMode</strong>_var spLoadModeOn3DShape = piPLMComponentOnPart;
if (spLoadModeOn3DShape != NULL_var)
  rc = spLoadModeOn3DShape-&gt;<strong>ChangeLoadingMode</strong>(CATIPsiRepresentationLoadMode::EditMode);
...</pre>
<p>Once the count of input arguments is checked, we use the <em>CAAAdpCreateSession</em> 
function exported by the CAAAdpClientAdapter.edu framework. This function creates 
the session with a connection to the input repository. <br />
Refer to the technical article "Creating a PLM basic batch" [<a href="#References">1</a>] 
for more details.</p>
<p>The <em>CAAOpenPLMComponent</em> function, exported by the CAAAdpClientAdapter.edu 
framework, opens the PLM Representation Reference using the input arguments.<br />
Refer to the article "Querying, Expanding and Loading a PLM Component use case" 
[<a href="#References">3</a>] for details on how to open a PLM Representation Reference.<br />
The <em>CAAOpenPLMComponent</em> function loads the Representation Reference in
<code>Visu Mode</code>, it is then necessary to change the loading mode to <code>
Edit Mode</code> using <em>CATIPsiRepresentationLoadMode</em> interface. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Accessing the Part Feature in the Representation</h3>
<p>Refer to the technical articles "From the PLM Representation to the 3D Shape" 
[<a href="#References">4</a>] and "The Part Feature" [<a href="#References">5</a>] 
for details on the structure of the 3D Shape and on the Part Feature.</p>
<pre class="code">...
<strong>CATIPLMNavRepReference</strong>_var spRepRef = piPLMComponentOnPart;
...	
<strong>CATIMmiPrtContainer</strong> *piPartContainer = NULL;
rc  = spRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>(&quot;<strong>CATPrtCont</strong>&quot;  
                                             IID_CATIMmiPrtContainer, 
                                   	     void **)&amp;piPartContainer); </pre>
<pre>...
<strong>CATIMmiMechanicalFeature</strong>_var spMechFeatOnPart ;  
rc = piPartContainer-&gt;<strong>GetMechanicalPart</strong>(spMechFeatOnPart);
...
</pre>
<p>We use the <code>RetrieveApplicativeContainer</code> method of the
<em>CATIPLMNavRepReference</em> interface to retrieve the Specification Container, CATPrtCont, 
that implements the <em>CATIMmiPrtContainer</em> interface.</p>
<p>Next we use the <em>CATIMmiPrtContainer</em> interface to access the Part feature.
The <code>GetMechanicalPart</code> method returns a <em>CATIMmiMechanicalFeature</em> 
interface pointer on this feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Getting Main Body Output Geometry</h3>
<p>Now we have the part, we want to find the main body output geometry.</p>
<ol>
	<li><a href="#Step31">Retrieving the main Body feature</a></li>
	<li><a href="#Step32">Retrieving the feature which holds its result (named result 
		feature)</a></li>
	<li><a href="#Step33">Retrieving the topological result</a></li>
	<li><a href="#Step34">Retrieving the faces</a></li>
</ol>
<p>This article shows that the association of the topological body to the Body type 
Geometrical Feature Set of our example, is managed by a specialized feature, sometimes 
called the <strong>result feature</strong>.</p>
<p>You can refer to the technical articles "Geometrical Feature Sets"[<a href="#References">6</a>] 
and "Specification/Result Mechanism Applied to Mechanical features"[<a href="#References">7</a>] 
for more details on Gometrical Feature Sets and mechanical results. </p>
<ol>
	<li><a name="Step31"></a>Retrieving the main Body feature
		<pre class="code">...
<strong>CATIPartRequest</strong>_var spPartRequest = spMechFeatOnPart ;
...
CATBaseUnknown_var spMainPartBody ;
rc = spPartRequest-&gt;<strong>GetMainBody</strong>(&quot;&quot;,spMainPartBody);
...</pre>
		<p><code>GetMainBody</code> of the <em>CATIPartRequest</em> interface retrieves 
		the main Body feature, the PartBody of a Representation Reference. </p>
	</li>
	<li><a name="Step32"></a>Retrieving the feature which holds its result (named 
		result feature)
		<pre class="code">...
<strong>CATIBodyRequest</strong>_var spMainPartBodyBodyRequest = spMainPartBody ;
...
CATLISTV(CATBaseUnknown_var) ListResult ;
rc = spMainPartBodyBodyRequest-&gt;<strong>GetResults</strong>(&quot;&quot;,ListResult);
...
<strong>CATIMmiUseGeometricalElement</strong>_var spFeatureResultGeomElem = ListResult[<strong>1</strong>] ;
...</pre>
		<p>The <code>GetResults</code> method of <em>CATIBodyRequest</em> interface 
		enables you to retrieve the result feature. This feature is a Solid feature 
		which bears the topological result. The first element of <code>ListResult</code> 
		is the feature result itself.</p>
	</li>
	<li><a name="Step33"></a>Retrieving the topological result
		<pre class="code">...
<strong>CATBody</strong>_var spPartTopoBody = spFeatureResultGeomElem-&gt;<strong>GetBodyResult</strong>();
...</pre>
		<p>The <code>GetBodyResult</code> method of the <em>CATIMmiUseGeometricalElement</em> 
		applied to the result feature returns the topological result.</p>
	</li>
	<li><a name="Step34"></a>Retrieving the faces
		<pre class="code">...
CATLISTP(CATCell) faceList;
spPartTopoBody-&gt;<strong>GetAllCells</strong>(faceList, 2); 
...</pre>
		<p>From <code>spPartTopoBody</code>, the CATBody, a list of all its topological 
		cells can be obtained with the <code>GetAllCells </code>method of the
		<em>CATBody</em> interface. Here the cells are filtered, keeping only the 
		two-dimensional ones, i.e. faces.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Getting BRepAccess from Geometry to Access its Faces</h3>
<pre class="code">...
<strong>CATIMmiUseBRepDecodeServices</strong>_var spBRepDecodeServices;
<strong>CATMmiUseServicesFactory</strong>::<strong>CreateBRepDecodeServices</strong>(spBRepDecodeServices);

CATLISTV(CATBaseUnknown_var) ListBreps;  
for (int nFace = 1; nFace &lt;= faceList.Size(); nFace++)
{
  CATCell_var spCell = faceList[nFace];
  if (NULL_var != spCell) 
  {
    CATIMmiUseBRepAccess_var spBRepAccess = NULL_var;
    spBRepDecodeServices-&gt;<strong>DecodeCellInBody</strong>(spBRepAccess, spCell, spPartTopoBody);
    if ( NULL_var!=spBRepAccess)
      ListBreps.Append( spBRepAccess );
  }
}      
...</pre>
<p>We can access each selecting object associated to each face by using the
<code>DecodeCellInBody</code> method of the <em>CATIMmiUseBRepDecodeServices</em> 
interface.</p>
<p>We then add the selecting objects in a list that we will use later, <code>ListBreps</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving each Face Current Colors</h3>
<pre class="code">...
<strong>CATIMmiSubElemProperties</strong>_var spSubElemProperties;
rc =  <strong>CATMmiUseServicesFactory::CreateSubElemPropertiesAccess</strong>(spSubElemProperties);

CATListOfInt retrieveRed, retrieveGreen, retrieveBlue;
rc = spSubElemProperties-&gt;<strong>GetColorsOnSubElements</strong>
             (ListBreps, retrieveRed, retrieveGreen, retrieveBlue);    
...</pre>
<p>We then call <code>GetColorsOnSubElements</code> method of <em>CATIMmiSubElemProperties</em> 
interface to retrieve each face color. It will return three lists of ints, that 
will have the same size as ListBreps. </p>
<p>A color is made of three components : Red, Green, Blue. These lists corresponds 
to these components. For the first face, the components will be Red = retrieveRed[1], 
Green = retrieveGreen[1], Blue = retrieveBlue[1].</p>
<p>If a color couldn't be retrieved on a face, all its component will be valued 
with -1.</p>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating and Setting New Colors List</h3>
<p>We now want to overload current colors on every face. We will first create new 
color component lists, one Red/Green/Blue component for each face to overload, and 
once this step is done, we will set these new colors on the faces. </p>
<ol>
	<li><a href="#Creating">Creating new colors component</a></li>
	<li><a href="#Setting">Setting new colors on each face</a></li>
</ol>
<p>In this example, we create different color components : this illustrates the 
fact that it's possible to color many faces with a different colors in one pass.</p>
<ol>
	<li><a name="Creating"></a>Creating new colors component
		<pre class="code">...
CATListOfInt newRed,newGreen,newBlue,FailedIndex;
int x=0;
for (compt = 1;compt &lt;= nbfaces;compt++)
{
   x = compt%3;
   int red(0),green(0),blue(0);
   if (1 == x)
     red = 255;
   if (2 == x)
     green = 255;
   if (0 == x)
     blue = 255;
   newRed.Append(red);
   newGreen.Append(green);
   newBlue.Append (blue);
}   
...</pre>
		<p>The first and fourth faces will be colored red, the second and fifth 
		will be colored green, the third and sixth will be colored blue.</p>
	</li>
	<li><a name="Setting"></a>Setting new colors to each face
		<pre class="code">...
rc = spSubElemProperties-&gt;<strong>SetColorsOnSubElements</strong>(ListBreps,newRed,newGreen,newBlue,FailedIndex);
...</pre>
		<p>If a color couldn't be set on a face, the face index is added in the
		<code>FailedIndex</code> so user can easily find it.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving each Face New Color</h3>
<p>It's the same method as seen previously.</p>
<pre class="code">...
rc = spSubElemProperties-&gt;<strong>GetColorsOnSubElements</strong>(ListBreps, retrieveRed,retrieveGreen,retrieveBlue);        
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Creating and Setting Applicative Attributes List</h3>
<p>We will now create applicative attributes on every face. We wil first create 
a list of applicative attributes for each face, and then set these attributes on 
the faces.</p>
<ol>
	<li><a href="#Creating1">Creating applicative attributes</a></li>
	<li><a href="#Setting1">Setting applicative attributes 
		on each face</a></li>
</ol>
<p>In this example, we will create different sized list of different applicative 
attributes : this illustrates the fact that you can set different lists of attributes 
on many faces in one pass.</p>
<ol>
	<li><a name="Creating1"></a>Creating applicative attributes
		<pre class="code">...
CATListOfCATUnicodeString **AttrNameListToSet = new CATListOfCATUnicodeString*[nbfaces];
CATCkeListOfParm *AttrValueListToSet = new CATCkeListOfParm[nbfaces];
CATICkeParmFactory_var factory = CATCkeGlobalFunctions::GetVolatileFactory();
for (compt = 1;compt&lt;= nbfaces;compt++)
{ 
    x = compt%3;
    if (1 == x)
    {
      AttrNameListToSet [compt-1] = new CATListOfCATUnicodeString (3);
      AttrValueListToSet[compt-1]   = new CATLISTV(CATBaseUnknown_var)(3);
      
      AttrNameListToSet [compt-1]-&gt;Append(&quot;FACE_NUMBER&quot;);
      CATICkeParm_var tempcke1 = factory -&gt; CreateInteger (&quot;FACE_NUMBER&quot;,compt);
      AttrValueListToSet[compt-1]-&gt;Append(tempcke1);
      
      AttrNameListToSet [compt-1]-&gt;Append(&quot;COLOR&quot;);
      CATICkeParm_var tempcke2 = factory -&gt; CreateString (&quot;COLOR&quot;,&quot;Red&quot;);
      AttrValueListToSet[compt-1]-&gt;Append(tempcke2);
      
      AttrNameListToSet [compt-1]-&gt;Append(&quot;X&quot;);
      CATICkeParm_var tempcke3 = factory -&gt; CreateReal (&quot;X&quot;,x);
      AttrValueListToSet[compt-1]-&gt;Append(tempcke3);
      
    }
    else 
    {
      AttrNameListToSet [compt-1] = new CATListOfCATUnicodeString (2);
      AttrValueListToSet[compt-1]   = new CATLISTV(CATBaseUnknown_var)(2);

      AttrNameListToSet [compt-1]-&gt;Append(&quot;FACE_NUMBER&quot;);
      CATICkeParm_var tempcke1 = factory -&gt; CreateInteger (&quot;FACE_NUMBER&quot;,compt);
      AttrValueListToSet[compt-1]-&gt;Append(tempcke1);

      
      AttrNameListToSet [compt-1]-&gt;Append(&quot;COLOR&quot;);
      if (2 == x)
      {
        CATICkeParm_var tempcke2 = factory -&gt; CreateString (&quot;COLOR&quot;,&quot;Green&quot;);
        AttrValueListToSet[compt-1]-&gt;Append(tempcke2);        
      }
      if (0 == x)
      {
        CATICkeParm_var tempcke2 = factory -&gt; CreateString (&quot;COLOR&quot;,&quot;Blue&quot;);
        AttrValueListToSet[compt-1]-&gt;Append(tempcke2);
      }
    }
  } 
...</pre>
	</li>
	<li><a name="Setting1"></a>Setting applicative attributes 
		on each face
		<pre class="code">...
rc=spSubElemProperties-&gt;<strong>SetAttributesOnSubElements</strong>(ListBreps, AttrNameListToSet,AttrValueListToSet,FailedIndex);        
...</pre>
	</li>
</ol>
<p>If a list of applicative attributes couldn't be set on a face, the face index 
is added in the <code>FailedIndex</code> so user can easily find it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Retrieving each Face Applicative Attributes List</h3>
<pre class="code">...
CATListOfCATUnicodeString * AttributNameList = new CATListOfCATUnicodeString[nbfaces];
CATCkeListOfParm  AttrValList = new CATListValCATBaseUnknown_var[nbfaces];
rc = spSubElemProperties-&gt;<strong>GetAttributesOnSubElements</strong>(ListBreps, AttributNameList, AttrValList );
...</pre>
<p>We first create the two arrays of lists that will contains the list of attributes 
names and the list of attributes values. These two arrays must have the same size 
as the number of faces, as we will retrieve sub-lists for each face.</p>
<p>The <code>AttributNameList[i]</code> list and the <code>AttrValList[i]</code> 
list will be associated to the <code>ListBreps[i+1]</code> face as array starts 
at position zero. The <code>AttributNameList[i][j]</code> attributes name will correspond 
to the <code>AttrValList[i][j]</code> attributes value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Saving and Closing the Session</h3>
<pre class="code">...
  <strong>CATAdpSaver</strong> saver;
  rc = saver.<strong>Save</strong>();
...</pre>
<p>In the epilog of the use case, we save the Representation Reference: the
<code>Save</code> method without argument saves all the PLM components of the session.
</p>
<pre class="code">...
rc = ::<strong>CAAAdpCloseSession</strong>(); 
...</pre>
<p>This last instruction closes the session. <em>CAAAdpCloseSession</em> just calls 
the <code>ClosePLMSession</code> method of the <em>CATPLMSessionServices</em> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>You saw through this use case how to set colors and applicative attributes on 
sub-elements using <em><strong>CATIMmiSubElemProperties</strong> </em>interface.</p>
<p>The most important point to remember is that you'd rather set colors and applicative 
attributes on many faces in one pass than doing it in many passes. Performances 
improvements have been done to enable user to set and get many colors and applicative 
attributes on huge amount of faces with little time cost. </p>
<p>Don't forget to clean the arrays of attribute names and values as described in 
the use case, as memory leak can quickly become huge with sizeable parts. </p>
<p>You also can refer the use case <a href="CAAMmrUcTopologyMarkup.htm">Marking 
Up Topology</a> to see another way to color faces. However, the one described here 
is the fastest way to do it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening a PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrTa3DShape.htm">From the PLM Representation to the 3D 
		Shape</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAMmrTaContentsSpecCont0.htm">The Part Feature</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAMmrTaSpecResultForMechFeat.htm">Specification/Result Mechanism 
		Applied to Mechanical Features</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrTaContentsSpecCont1.htm">The Geometrical Feature Sets</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Mar 2010]</td>
		<td>Document updated for V6 novelties</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
