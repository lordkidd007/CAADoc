<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Axis Systems</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Axis Systems</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAMmrAxisSystemCreation</strong> 
		use case.This use case shows how to use the <em>CATIMf3DAxisSystemFactory</em> 
		and <em>CATIMf3DAxisSystem</em> interfaces to create axis systems.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrAxisSystemCreation Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrAxisSystemCreation Do</a></li>
					<li><a href="#How">How to Launch CAAMmrAxisSystemCreation</a></li>
					<li><a href="#Where">Where to Find the CAAMmrAxisSystemCreation 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create axis systems by using the
<em>CATIMf3DAxisSystemFactory</em> and the <em>CATIMf3DAxisSystem</em> interfaces. 
You will learn to:</p>
<ul>
	<li>Create the three kinds of axis system:
		<ul>
			<li>Standard</li>
			<li>Axis Rotation</li>
			<li>Euler Angle.</li>
		</ul>
	</li>
	<li>Create an axis system from another one.</li>
	<li>Isolate an axis system, in other words, fix its geometry.</li>
</ul>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrAxisSystemCreation Use Case</h2>
<p><code>CAAMmrAxisSystemCreation</code> is a use case of the CAAMechanicalModeler.edu 
framework that illustrates CATMecModUseItf and CATMecModLiveUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrAxisSystemCreation Do</h3>
<p>CAAMmrAxisSystemCreation creates several axis systems from data retrieved within 
the 3D Shape of the <code>CAAMmrAxisSystemCreation</code> Representation Reference 
.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: The CAAMmrAxisSystemCreation 3D Shape</caption>
	<tr>
		<td>
		<img alt="" height="348" src="images/CAAMmrAxisSystemCreatModl1.jpg" width="511"/></td>
		<td><code><strong>Point.1</strong> (xy plane, H=50, V=50)</code>
		<p><code><strong>Point.3</strong> (xy plane, H=50, V=100)</code></p>
		<p><code><strong>Point.4</strong> (50,50,100)</code></p>
		<p><code><strong>Point.5</strong> (0,50,100)</code></p>
		<p><code><strong>Point.6</strong> (100,100,0)</code></p>
		<p><code><strong>Point.7</strong> (-200,0,0)</code></p>
		<p><code><strong>D1</strong> = (P1,P4)</code></p>
		<p><code><strong>D2</strong> = (P1,P3)</code></p>
		<p><code><strong>D3</strong> = (P1,P6)</code></p>
		</td>
	</tr>
</table>
<p>Five axis systems are created as shown by he <code>CAAMmrAxisSystemCreation_Save</code> 
3D Shape:</p>
<ol>
	<li><a href="#AS_Standard">AS_Standard</a></li>
	<li><a href="#AS_AxisRotation">AS_AxisRotation</a></li>
	<li><a href="#AS_EulerAngles">AS_EulerAngles</a></li>
	<li><a href="#AS_AxisStandardOriAxisDir">AS_AxisStandardOriAxisDir</a></li>
	<li><a href="#AS_Explicit">AS_Explicit</a></li>
</ol>
<table>
	<caption><a name="Fig2"></a>Fig.2: The CAAAxisSystemCreation_Save 3D Shape</caption>
	<tr>
		<td>
		<img alt="" height="378" src="images/CAAMmrAxisSystemCreatModl2.png" width="485"/></td>
	</tr>
</table>
<ol>
	<li>The <strong><a name="AS_Standard">AS_Standard</a></strong> axis system
		<p>The first axis system is a &quot;Standard&quot; axis system, you can 
		verify that in the Axis System Definition dialog box just below:</p>
		<table>
			<caption><a name="Fig3a"></a>Fig.3a: The AS_Standard Axis System</caption>
			<tr>
				<td>
				<img alt="" height="336" src="images/CAAMmrAxisSystemCreatAS.jpg" width="439"/></td>
			</tr>
		</table>
		<p>For a standard axis system you can choose an axis direction for each 
		axis.</p>
		<table>
			<caption><a name="Fig3b"></a>Fig.3b: The Standard Axis System Definition</caption>
			<tr>
				<td>
				<img alt="" height="206" src="images/CAAMmrAxisSystemCreatStd.jpg" width="313"/></td>
				<td>The three axis directions X, Y and Z are explicitly given or 
				can be automatically computed if no vector is specified.</td>
			</tr>
		</table>
		<p>The AS_Standard's axis system characteristics are:</p>
		<ul>
			<li>Its X axis is one edge coming from a Pad.1's corner</li>
			<li>Its Y axis is the second edge coming from this corner</li>
			<li>Its Z is not specified to have a right-handed axis system</li>
			<li>It is located in (150,0,0) in the absolute axis system</li>
		</ul>
		<p>In the More Dialog object, you can see the internal data:</p>
		<table>
			<caption><a name="Fig3c"></a>Fig.3c: The AS_Standard Axis System Internal 
			Data</caption>
			<tr>
				<td>
				<img alt="" height="189" src="images/CAAMmrAxisSystemCreatMoreAS.jpg" width="516"/></td>
			</tr>
		</table>
		<ul>
			<li>The origin is located in x=150, y and z = 0,</li>
			<li>The X axis direction (Edge.1) is the z axis in the absolute axis 
				system,</li>
			<li>The Y axis direction (Edge.2) is the -y axis in the absolute axis 
				system,</li>
			<li>The third axis direction has been automatically computed to have 
				a right-handed axis system.</li>
		</ul>
		<p>In this case, you will learn how to create a standard axis system and 
		how to use BRep features as axis direction inputs.</p>
	</li>
	<li>The <strong><a name="AS_AxisRotation">AS_AxisRotation</a></strong> axis 
		system
		<p>The second axis system is an &quot;Axis rotation&quot; axis system. You 
		can verify that in the Axis System Definition dialog box just below:</p>
		<table>
			<caption><a name="Fig4a"></a>Fig.4a: The AS_AxisRotation Axis System</caption>
			<tr>
				<td>
				<img alt="" height="378" src="images/CAAMmrAxisSystemCreatAR.jpg" width="440"/></td>
			</tr>
		</table>
		<p>An &quot;rotation axis&quot; axis system means that you can choose one 
		axis direction (<strong>AR</strong>) to rotate about, one specification 
		to be the rotation's reference (<strong>Ref</strong>) and an angle of rotation 
		(<strong>h</strong>). The schema below presents the three data in general:</p>
		<table>
			<caption><a name="Fig4b"></a>Fig.4b: The Axis Rotation Axis System Definition</caption>
			<tr>
				<td>
				<img alt="" height="298" src="images/CAAMmrAxisSystemCreatRot1.jpg" width="492"/></td>
			</tr>
		</table>
		<p>This schema shows the AS_AxisRotation's axis system characteristics:</p>
		<table>
			<caption><a name="Fig4c"></a>Fig.4c: The AS_AxisRotation Axis System 
			Characteristics</caption>
			<tr>
				<td>
				<img alt="" height="206" src="images/CAAMmrAxisSystemCreatRot2.jpg" width="355"/></td>
				<td>
				<ul>
					<li><strong>AR</strong> = <code>D1</code>, a line orthogonal 
						to the xy plane. It defines the Y axis.</li>
					<li><strong>Ref</strong> = <code>D2</code>, a line already in 
						the xy plane and // to the y axis. It defines the Z axis.</li>
					<li><strong>h</strong> = o/2. The third axis (X) is automatically 
						computed.</li>
					<li>The axis system is located in <code>Point.5.</code></li>
				</ul>
				</td>
			</tr>
		</table>
		<p>In the More Dialog object, you can see the internal data:</p>
		<table>
			<caption><a name="Fig4d"></a>Fig.4d: The AS_AxisRotation's Axis System 
			Internal Data</caption>
			<tr>
				<td>
				<img alt="" height="194" src="images/CAAMmrAxisSystemCreatMoreAR.jpg" width="520"/></td>
			</tr>
		</table>
		<p>In this case, you will learn how to set the three data (AR, Ref and h) 
		and how to specify the axis direction order.</p>
	</li>
	<li>The <strong><a name="AS_EulerAngles">AS_EulerAngles</a></strong> axis system
		<p>The third axis system is an &quot;Euler angles&quot; axis system. You 
		can verify that in the Axis System Definition dialog box just below:</p>
		<table>
			<caption><a name="Fig5a"></a>Fig.5a: The AS_EulerAngles Axis System 
			Characteristics</caption>
			<tr>
				<td>
				<img alt="" height="338" src="images/CAAMmrAxisSystemCreatEuler.jpg" width="447"/></td>
			</tr>
		</table>
		<p>An &quot;Euler angles&quot; axis system means that you can pick three 
		angles to form an Euler axis system. This schema presents the Euler system:</p>
		<table>
			<caption><a name="Fig5b"></a>Fig.5b: The Euler Axis System</caption>
			<tr>
				<td>
				<img alt="The Euler Axis System" height="322" src="images/CAAMmrAxisSystemCreatEulerGen.jpg" width="417"/></td>
				<td>
				<ul>
					<li><strong>h1</strong> = (x,N) a rotation about z transforming 
						vector X into vector N</li>
					<li><strong>h2</strong> = (z,X) a rotation about N transforming 
						vector z into vector <strong>Z</strong></li>
					<li><strong>h3</strong> = (N,X) a rotation about Z transforming 
						vector N into vector <strong>X</strong></li>
				</ul>
				<p>The vector <strong>Y</strong> is computed to have an right-handed 
				axis system.</p>
				</td>
			</tr>
		</table>
		<p>The AS_EulerAngles's axis system characteristics are:</p>
		<table>
			<tr>
				<td>
				<ul>
					<li><strong>h1</strong> = o/2</li>
					<li><strong>h2</strong> = o/2</li>
					<li><strong>h3</strong> = o/2</li>
					<li>The axis system is located in <code>(200,0,0)</code></li>
				</ul>
				</td>
				<td>
				<ul>
					<li>N = y</li>
					<li>Z = x</li>
					<li>X = z</li>
					<li>Y = -y</li>
				</ul>
				</td>
			</tr>
		</table>
		<p>In the More Dialog object, you can see the internal data:</p>
		<table>
			<caption><a name="Fig5c"></a>Fig.5c: The Euler Axis System Internal 
			Data</caption>
			<tr>
				<td>
				<img alt="" height="187" src="images/CAAMmrAxisSystemCreatMoreEuler.jpg" width="517"/></td>
			</tr>
		</table>
		<p>In this case, you will learn how to set the three angles.</p>
	</li>
	<li>The <strong><a name="AS_AxisStandardOriAxisDir">AS_AxisStandardOriAxisDir</a></strong> 
		axis system
		<p>This axis system is created from the AS_Standard axis system. We have 
		only changed the origin's location. The AS_AxisStandardOriAxisDir axis system 
		is located at the axis direction's origin.</p>
		<table>
			<caption><a name="Fig6"></a>Fig.6: The AS_AxisStandardOriAxisDir Axis 
			System Characteristics</caption>
			<tr>
				<td>
				<img alt="" height="506" src="images/CAAMmrAxisSystemCreatOAxe.jpg" width="531"/></td>
			</tr>
		</table>
		<p>You can see that the axis direction's coordinates are identical to the 
		AS_Standard axis system. See<a href="#Fig3c"> Fig3.c</a></p>
		<p>In this case, you will learn how to create an axis system from another 
		one and how to locate it at the axis direction's origin.</p>
	</li>
	<li>The <strong><a name="AS_Explicit">AS_Explicit</a></strong> Axis System
		<p>The last axis system enables you to understand the creation of an explicit 
		axis system. It means that its geometry (CATBody) will be fixed, no modification 
		of the origin location or the axis directions will be possible</p>
		<table>
			<caption><a name="Fig7a"></a>Fig.7a: The AS_Explicit Axis System</caption>
			<tr>
				<td>
				<img alt="" height="259" src="images/CAAMmrAxisSystemCreatExpli.jpg" width="430"/></td>
			</tr>
		</table>
		<p>Before being fixed, the AS_Explicit axis system is a standard axis system 
		with the characteristics as follows:</p>
		<table>
			<caption><a name="Fig7b"></a>Fig.7b: The AS_Explicit Axis System Characteristics 
			before Update</caption>
			<tr>
				<td>
				<img alt="" height="205" src="images/CAAMmrAxisSystemCreatExpli1.jpg" width="264"/></td>
				<td>The three axis directions are given in this order:
				<ul>
					<li>Y = the line D1 (along z)</li>
					<li>Z = the line D2 (in the xy plane)</li>
					<li>X = the line D3 (in the xy plane)</li>
				</ul>
				</td>
			</tr>
		</table>
		<p>You can note that this axis system is not orthogonal. So its internal 
		data are automatically modified (during the update operation) to be orthonormal. 
		The axis order determines the modifications:</p>
		<table>
			<caption><a name="Fig7c"></a>Fig.7c: The AS_Explicit Axis System after 
			Update</caption>
			<tr>
				<td>
				<img alt="" height="212" src="images/CAAMmrAxisSystemCreatExpli2.jpg" width="310"/></td>
				<td>
				<ul>
					<li>The first axis is never modified, Y = D1</li>
					<li>The second axis, Z, is orthogonal to Y, so it stays at the 
						same position</li>
					<li>The third axis is modified to be Y and Z orthogonal</li>
				</ul>
				</td>
			</tr>
		</table>
		<p>To be complete, the location of the newly axis system is the Point.7. 
		This point is initially in (-200,0,0). It is move to (-100,0,0).</p>
		<table>
			<caption><a name="Fig7d"></a>Fig7d: The AS_Explicit Axis System Internal 
			Data</caption>
			<tr>
				<td>
				<img alt="" height="187" src="images/CAAMmrAxisSystemCreatMoreExplicit.jpg" width="515"/></td>
			</tr>
		</table>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrAxisSystemCreation</h3>
<p>To launch CAAMmrAxisSystemCreation , you will need to set up the build time environment, 
then compile CAAMmrAxisSystemCreation along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].
</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAMmrAxisSystemCreation <em>Repository Server User Password 
SecurityCtx PLMRepType PLMExternalID Version&quot;</em></code></p>
<pre>Where:</pre>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<th>PLMRepType</th>
		<td>A string representing PLM Representation Type (e.g. VPMRepReference)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code><strong>PLM_ExternalID</strong></code> of a PLM Reference 
		or PLM Representation Reference</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The <code><strong>majorrevision</strong></code> of a PLM Reference or PLM 
		Representation Reference</td>
	</tr>
</table>
<p>You can directly execute this use case if you know how to locate your own Representation 
Reference. If not, you can import a 3D XML file supplied in the <code>CAAMechanicalModeler.edu</code> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\InputData\CAAMmrAxisSystemCreation.3dxml\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Representation Reference with the following attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: <code>CAAMmrAxisSystemCreation</code></li>
	<li><strong>majorrevision</strong>: ---</li>
</ul>
<p><strong>Attention</strong>: As this use case modifies and saves the input Representation 
Reference, you must reimport the original component with another prefix, to re-execute 
and see the modifications. Please refer to document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrAxisSystemCreation Code</h3>
<p>The <code>CAAMmrAxisSystemCreation</code> use case is made of several files located 
in the following modules of the <code>CAAMechanicalModeler.edu</code> framework 
(*)</p>
<ul>
	<li><strong>CAAMmrAxisSystemCreation</strong>.m
		<ul>
			<li><code>CAAMmrTestCreation.cpp</code> contains the main of the batch,</li>
			<li><code>CAAMmrRetrieveCornerAndVectorsFromPad.h</code> / CAAMmrRetrieveCornerAndVectorsFromPad.cpp 
				contain the <em>CAAMmrRetrieveCornerAndVectorsFromPad</em> global 
				function which retrieves a corner and its three edges of a Pad and 
				featurizes them. This function is not completely described because 
				in most cases the BRep feature is directly obtained from a selection 
				thanks to the <em>CATFeatureAgent</em> or <em>CATFeatureImportAgent</em> 
				agents.</li>
		</ul>
	</li>
	<li><strong>CAAMmrUtilities</strong>.m
		<ul>
			<li><code>CAAMmrGetGeometry.cpp</code> contains the <em>CAAMmrGetGeometry</em> 
				global function which retrieves a feature within a 3D Shape associated 
				with the Representation Reference. The <code>CAAMmrGetGeometry.h</code> 
				is located in the PublicInterfaces directory of <code>CAAMechanicalModeler.edu</code></li>
		</ul>
	</li>
</ul>
<p>(*)</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight logical steps in <code>CAAMmrAxisSystemCreation</code>:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the CATIMf3DAxisSystemFactory Interface Pointer</a></li>
	<li><a href="#Step3">Creating the AS_Standard Axis System</a></li>
	<li><a href="#Step4">Creating the AS_AxisRotation Axis System</a></li>
	<li><a href="#Step5">Creating the AS_EulerAngles Axis System</a></li>
	<li><a href="#Step6">Creating the AS_AxisStandardOriAxisDir Axis System</a></li>
	<li><a href="#Step7">Creating the AS_Explicit Axis System</a></li>
	<li><a href="#Step8">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p><code>CAAMmrAxisSystemCreation</code> begins by creating a session, and opening 
the input Part features within a 3D Shape. Next it retrieves specification container 
of this Part as a pointer to <em>CATIMmiPrtContainer</em> interface, <code>piPartContainer</code>. This is the usual sequence for Opening PLM Components [<a href="#References">2</a>].</p>
<p>Thanks to the <code>GetMechanicalPart</code> method on the container, we retrieve 
the Mechanical Part. This part is handled by the smart pointer <code>spPartRequestOnPart
</code>(a <em>CATIPartRequest_var</em> type). This pointer will be useful to retrieve 
specifications in the representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the CATIMf3DAxisSystemFactory Interface Pointer</h3>
<p>The <em>CATIMf3DAxisSystemFactory</em> interface is implemented by the specification 
container, <code>piPartContainer</code> [<a href="#References">3</a>].</p>
<pre class="code">...
  <strong>CATIMf3DAxisSystemFactory</strong> * pIMf3DAxisSystemFactoryOnFeatCont = NULL ;
  rc = piPartContainer-&gt;QueryInterface(IID_CATIMf3DAxisSystemFactory,
                                      (void **) &amp; pIMf3DAxisSystemFactoryOnFeatCont);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the AS_Standard Axis System</h3>
<p>The axis system is created by the <em>CATIMf3DAxisSystemFactory</em> interface. 
The method's creation with one point and two vectors has been chosen.</p>
<pre class="code">...
  CATMathPoint <strong>Origin</strong> (150.0,.0,.0);
  CATMathVector X (1.0,.0,.0);
  CATMathVector Y (0.0,1.0,.0);

  <strong>CATIMf3DAxisSystem</strong>_var NewAxisSystemStd ;
  rc = pIMf3DAxisSystemFactoryOnFeatCont-&gt;<strong>CreateAxisSystem</strong>(<strong>Origin</strong>,X,Y,NewAxisSystemStd);
...</pre>
<p><code>pIMf3DAxisSystemFactoryOnFeatCont</code> is the <em>CATIMf3DAxisSystemFactory</em> 
interface pointer on the specification container. <code>NewAxisSystemStd</code> 
is the newly axis system. The origin is located in (150,0,0) in the absolute axis 
system. The <code>X,Y</code> values are not important since the axis directions 
will be redefined further after.</p>
<p>Then, <code>Pad.1</code> is retrieved from the 3D Shape thanks to the <em>CAAMmrGetGeometry</em> 
global function.</p>
<pre class="code">...
  CATBaseUnknown * pPad = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;Pad.1&quot;,&amp;pPad);
...</pre>
<p><code>spPartRequestOnPart</code> is the smart pointer on the Mechanical Part, 
see the <a href="#Step1">Prolog</a> section, and <code>pPad</code> is a <em>CATBaseUnknown</em> 
pointer on <code>Pad.1</code>. Thanks to this pointer, the <em>CAAMmrRetrieveCornerAndVectorsFromPad</em> 
global function retrieves two edges coming from the same corner.</p>
<pre class="code">...
  CATBaseUnknown *pCorner  = NULL;
  CATBaseUnknown *pVectorX = NULL;
  CATBaseUnknown *pVectorY = NULL;
  CATBaseUnknown *pVectorZ = NULL;
  rc=::<strong>CAAMmrRetrieveCornerAndVectorsFromPad</strong>(pPad,&amp;pVectorX,&amp;pVectorY);
...</pre>
<p>The output arguments of this function <code>pVectorX</code> and <code>pVectorY</code> 
are not cells but the featurization (a BRep feature) of these cells. Here just an 
extract of the global function which explains how to go from a cell to a BRep feature.</p>
<pre class="code">...
  <strong>CATIMmiUseBRepDecodeServices</strong>_var spBRepDecodeServices;
  <strong>CATMmiUseServicesFactory::CreateBRepDecodeServices</strong>(spBRepDecodeServices);

  <strong>CATIMmiUseGeometricalElement</strong>_var FeatureResultGeomElt = FeatureResult;
  CATCell_var spEdgeCell = ListEdgeCorner[1];

  <strong>CATIMmiUseBRepAccess</strong>_var BRepEdge1;
  spBRepDecodeServices-&gt;<strong>DecodeCellInGeomElt</strong>(BRepEdge1, spEdgeCell,FeatureResultGeomElt); 
  <strong>CATIMmiUseFeaturize</strong>_var FCell = BRepEdge1;
  if (NULL_var != FCell)
  {
    <strong>CATIMmiUseMfBRep</strong>_var MFEdge1Cell;
    FCell-<strong>&gt;Featurize</strong>(MFEdge1Cell);
    MFEdge1Cell-&gt;QueryInterface(IID_CATBaseUnknown,
                                                 (void**) &amp;(*oVectorX));
...</pre>
<p><code>FeatureResult</code> is the feature for which the associated topological 
result (a <em>CATBody</em>) contains the two edges (<code>ListEdgeCorner</code>).
<code>BRepEdge1</code> is the BRep Access object of the edge obtained with the
<code>DecodeCellInGeomElt</code> method of <code>CATIMmiUseBRepDecodeServices</code> 
interface. This object is featurized thanks to the <em>CATIMmiUseFeaturize</em>
interface. <code>oVectorX</code> is a <em>CATBaseUnknown</em> pointer, the first 
output argument of the global function.</p>
<p>Now that the BRep features are created, the axis directions can be defined.</p>
<pre class="code">...
  NewAxisSystemStd-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemXNumber</strong>, pVectorX);
  NewAxisSystemStd-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemYNumber</strong>, pVectorY);                                             
...</pre>
<p>The <code>SetAxisDirection</code> method is used for the X (<code>CATAxisSystemXNumber</code>) 
and Y (<code>CATAxisSystemYNumber</code>) axis directions. The third is not specified, 
it will be automatically computed to have a right-handed axis system.</p>
<p>After an update, not described here, you can see the result in the picture
<a href="#Fig3c">Fig.3c</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the AS_AxisRotation Axis System</h3>
<p>The axis system is created by the <em>CATIMf3DAxisSystemFactory</em> interface. 
The method's creation with a mathematical axis system has been chosen.</p>
<pre class="code">...
  <strong>CATMathAxis</strong> MathAxis ;
  CATIMf3DAxisSystem_var NewAxisSystemRot;
  rc = pIMf3DAxisSystemFactoryOnFeatCont-&gt;<strong>CreateAxisSystem</strong>(MathAxis,NewAxisSystemRot);
...</pre>
<p><code>pIMf3DAxisSystemFactoryOnFeatCont</code> is the <em>CATIMf3DAxisSystemFactory</em> 
interface pointer on the specification container. <code>NewAxisSystemRot</code> 
is the newly axis system. <code>MathAxis</code> is without importance since the 
axis directions and the origin will be redefined further after.</p>
<p>Then, the specifications ( D1, D2 and Point.5) are retrieved from the Part feature 
within the 3D shape associated with the Representation Reference thanks to the
<em>CAAMmrGetGeometry</em> global function.</p>
<pre class="code">...
  CATBaseUnknown * pPoint5 = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;Point.5&quot;,&amp;pPoint5);

  CATBaseUnknown * pLineD1 = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;D1&quot;,&amp;pLineD1);

  CATBaseUnknown * pLineD2 = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;D2&quot;,&amp;pLineD2);
 
...</pre>
<p><code>spPartRequestOnPart</code> is the smart pointer on the Mechanical Part, 
see the <a href="#Step1">Prolog</a> section, and <code>pPoint5, pLineD1</code>
and<code> pLineD2</code> are <em>CATBaseUnknown</em> pointers on <code>Point.5</code>,
<code>D1</code> and <code>D2</code> respectively.</p>
<p>First, the origin of the axis system is defined:</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetOriginPoint</strong>(pPoint5);
...</pre>
<p>Then, the <code>SetAxisSystemType</code> method applied to <code>NewAxisSystemRot,</code> 
the <em>CATIMf3DAxisSystem</em> interface pointer on the newly axis system, enables 
you to switch this axis system from a standard (default) to an axis rotation axis 
system.</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetAxisSystemType</strong>(CATAxisSystemAxisRotation);                                           
...</pre>
<p>Before affecting the axis directions, it is important to &quot;deselect&quot;
<strong>all</strong> the axis directions. With the <code>SetAxisType</code> method 
and the <code>CATAxisSystemSameDirection</code> value as argument, it is done. The
<code>GetAxisDirection</code> method should also return NULL_var, it is the case 
here.</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemXNumber</strong>,<strong>CATAxisSystemSameDirection</strong>);
  NewAxisSystemRot-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemYNumber</strong>,<strong>CATAxisSystemSameDirection</strong>);
  NewAxisSystemRot-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemZNumber</strong>,<strong>CATAxisSystemSameDirection</strong>); 
                                       
...</pre>
<p>After this &quot;deselection&quot;, the <code>SetAxisDirection</code> call order 
defines the axes order.</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemYNumber</strong>,pLineD1);                                       
...</pre>
<p>The Y axis (<code>CATAxisSystemYNumber</code>) is defined with the line D1 (pLineD1). 
It is the first axis direction, so it defines the axis of rotation.</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetAxisRotationReference</strong>(pLineD2);                                   
...</pre>
<p>The line D2 (pLineD2) is defined as the reference of the rotation. It is the 
second axis direction.</p>
<pre class="code">...
  CATICkeParm_var RotationParm ;
  NewAxisSystemRot-&gt;<strong>GetAxisRotationParm</strong>(RotationParm);
  if ( NULL_var != RotationParm )
  {
     // The valuate method is in MKS 
     RotationParm-&gt;<strong>Valuate</strong>(CATPI/2); //                                  
...</pre>
<p>Then, the rotation from the line D2 about D1 is defined. The value of the
<code>Valuate</code> method must be expressed in MKS.</p>
<p>After an update, not described here, you can see the result in the picture
<a href="#Fig4d">Fig.4d</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the AS_EulerAngles Axis System</h3>
<p>The axis system is created by the <em>CATIMf3DAxisSystemFactory</em> interface. 
The method's creation with the mathematical axis system has been chosen.</p>
<pre class="code">...
  CATMathAxis MathAxisEuler ;
  CATMathPoint OriginEuler (.0,200.0,.0);
  MathAxisEuler.SetOrigin(OriginEuler);

  CATIMf3DAxisSystem_var NewAxisSystemEuler;
  rc = pIMf3DAxisSystemFactoryOnFeatCont-&gt;<strong>CreateAxisSystem</strong>(MathAxisEuler,
                                             NewAxisSystemEuler);
...</pre>
<p><code>pIMf3DAxisSystemFactoryOnFeatCont</code> is the <em>CATIMf3DAxisSystemFactory</em> 
interface pointer on the specification container. <code>NewAxisSystemEuler</code> 
is the newly axis system. Its origin is located on the axis y.</p>
<p>Then, the <code>SetAxisSystemType</code> method applied to <code>NewAxisSystemEuler,</code> 
the <em>CATIMf3DAxisSystem</em> interface pointer on the newly axis system, enables 
you to switch this axis system from a standard (default) to an Euler axis system.</p>
<pre class="code">...
  NewAxisSystemRot-&gt;<strong>SetAxisSystemType</strong>(CATAxisSystemEulerAngles);                                           
...</pre>
<p>The <code>GetEulerAnglesParm</code> method enables you to retrieve the knowledge 
parameters corresponding to the three angles. The angles must be expressed in MKS.</p>
<pre class="code">...
  CATICkeParm_var EulerAngles[3] ;
  NewAxisSystemEuler-&gt;<strong>GetEulerAnglesParm</strong>(EulerAngles);
  if ( (NULL_var != EulerAngles[0]) &amp;&amp; (NULL_var != EulerAngles[1]) &amp;&amp;
       (NULL_var != EulerAngles[2]) )
  {
     <strong>EulerAngles[0]-&gt;Valuate(CATPI/2);  
     EulerAngles[1]-&gt;Valuate(CATPI/2);  
     EulerAngles[2]-&gt;Valuate(CATPI/2);</strong>                                      
...</pre>
<p>After an update, not described here, you can see the result in the picture
<a href="#Fig5c">Fig.5c</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the AS_AxisStandardOriAxisDir Axis System</h3>
<p>This axis system is created from the <a href="#AS_Standard">AS_Standard</a> axis 
system. See <a href="#Step3">Creating the AS_Standard Axis System</a>.</p>
<pre class="code">...
  CATIMf3DAxisSystem_var NewAxisSystemCopyConst;
  rc = pIMf3DAxisSystemFactoryOnFeatCont-&gt;<strong>CreateAxisSystem</strong>(NewAxisSystemStd,
                                                           NewAxisSystemCopyConst);
...</pre>
<p><code>pIMf3DAxisSystemFactoryOnFeatCont</code> is the <em>CATIMf3DAxisSystemFactory</em> 
interface pointer on the specification container. <code>NewAxisSystemStd</code> 
is the axis system to copy and <code>NewAxisSystemCopyConst</code> is the newly 
axis system.</p>
<p>This newly axis system should be located at the axis direction's origin. To do 
that, transform the type of the point to be <code>CATAxisSystemPoint</code> (origin 
defined by geometry) and set no geometry.</p>
<pre class="code">...
  NewAxisSystemCopyConst-&gt;<strong>SetOriginType</strong>(CATAxisSystemPoint);
  NewAxisSystemCopyConst-&gt;<strong>SetOriginPoint</strong>(NULL_var);
...</pre>
<p>After an update, not described here, you can see the result in the picture
<a href="#Fig6">Fig.6</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating the AS_Explicit Axis System</h3>
<p>The last axis system is first a standard axis system defined such as:</p>
<pre class="code">...
  CATIMf3DAxisSystem_var NewAxisSystemExplicit;
  CATMathAxis MathAxisExplicit ;
  rc = pIMf3DAxisSystemFactoryOnFeatCont-&gt;<strong>CreateAxisSystem</strong>(MathAxisExplicit,
                                                           NewAxisSystemExplicit);
...</pre>
<p><code>pIMf3DAxisSystemFactoryOnFeatCont</code> is the <em>CATIMf3DAxisSystemFactory</em> 
interface pointer on the specification container. <code>NewAxisSystemExplicit</code> 
is the newly axis system.</p>
<p>Then, the specifications (Point.7 and D3) are retrieved from the Part feature 
within a representation reference thanks to the <em>CAAMmrGetGeometry</em> global 
function. Its contents being not essential for the use case, the code is not detailed 
here; refer to the source file otherwise.</p>
<pre class="code">...
  CATBaseUnknown * pPoint7 = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;Point.7&quot;,&amp;pPoint7);
  CATBaseUnknown * pLineD3 = NULL ;
  rc = ::<strong>CAAMmrGetGeometry</strong>(spPartRequestOnPart,&quot;D3&quot;,&amp;pLineD3);
...</pre>
<p>The <code>SetOriginPoint</code> method enables you to set a geometry (the point 
Point.7) for the axis system's origin. This method transforms automatically the 
type of the origin to <code>CATAxisSystemPoint.</code></p>
<pre class="code">...
  NewAxisSystemExplicit-&gt;<strong>SetOriginPoint</strong>(pPoint7);
...</pre>
<p>Before affecting the axis directions, it is important to &quot;deselect&quot;
<strong>all</strong> the axis directions. With the <code>SetAxisType</code> method 
and the <code>CATAxisSystemSameDirection</code> value as argument it is done. The
<code>GetAxisDirection</code> method should also return NULL_var, it is the case 
here.</p>
<pre class="code">...
  NewAxisSystemExplicit-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemXNumber</strong>,<strong>CATAxisSystemSameDirection</strong>);
  NewAxisSystemExplicit-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemYNumber</strong>,<strong>CATAxisSystemSameDirection</strong>);
  NewAxisSystemExplicit-&gt;<strong>SetAxisType</strong>(<strong>CATAxisSystemZNumber</strong>,<strong>CATAxisSystemSameDirection</strong>);
...</pre>
<p>Then, each axis direction is valuated with a geometry ( a line ). The <code>SetAxisDirection</code> 
call's order is important: In this case, the Y axis (<code>CATAxisSystemYNumber</code>) 
is the first, the Z axis (<code>CATAxisSystemZNumber</code>) is the second, and 
X is the third. See <a href="#Fig7b">Fig.7b</a> and <a href="#Fig7c">Fig.7c</a> 
for the role of the axe's order.</p>
<pre class="code">...
  NewAxisSystemExplicit-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemYNumber</strong>,pLineD1);
  NewAxisSystemExplicit-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemZNumber</strong>,pLineD2);
  NewAxisSystemExplicit-&gt;<strong>SetAxisDirection</strong>(<strong>CATAxisSystemXNumber</strong>,pLineD3);
...</pre>
<p>Next, the Z axis is reversed.</p>
<pre class="code">...
  NewAxisSystemExplicit-&gt;<strong>SetAxisType</strong>(CATAxisSystemZNumber,<strong>CATAxisSystemOppositeDirection</strong>);
...</pre>
<p>At last, the position of the point Point.7 is changed.</p>
<pre class="code">...
  <strong>CATIGSMPointCoord</strong> *pGSMPointCoordOnP7 = NULL ;
  rc = pPoint7-&gt;QueryInterface(IID_CATIGSMPointCoord,(void **) &amp;pGSMPointCoordOnP7);
  if ( SUCCEEDED(rc) )
  {
     CATICkeParm_var Xnew,Ynew,Znew ;
     pGSMPointCoordOnP7-&gt;<strong>GetCoordinates</strong>(Xnew,Ynew,Znew);
     
     Xnew-&gt;Valuate(-0.1); 
     Ynew-&gt;Valuate(0.0); 
     Znew-&gt;Valuate(0.0);
...</pre>
<p>After an update, not described here, you can see the result in the picture
<a href="#Fig7d">Fig.7d</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Epilog</h3>
<p>The last actions of the use case are the following: save and close the PLM session. 
This is described in the Opening PLM Components use case [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to create different axis systems.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAMmrTa3DShape.htm">From the PLM Representation to the 3D 
		Shape</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Apr 2010]</td>
		<td>Document updated for V6 novelties</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
