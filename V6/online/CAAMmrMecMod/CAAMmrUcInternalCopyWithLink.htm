<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Changing Internal Copy Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Changing Internal Copy Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>The article discusses the <code>CAAMmrInternalCopyWithLink</code> use 
		case. The use case changes the Reference of an internal copy with link using 
		the services exposed by the <em><strong>CATIMmiInternalCopyWithLinkEdition</strong></em> 
		interface. Please note that this is possible only for a solid internal copy.</p>
		<p><a href="#Learn">What You Will Learn With This Use Case</a></p>
		<ul>
			<li><a href="#UseCase">The CAAMmrInternalCopyWithLink Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAMmrInternalCopyWithLink 
						Do</a></li>
					<li><a href="#How">How to Launch CAAMmrInternalCopyWithLink</a></li>
					<li><a href="#Where">Where to Find the CAAMmrInternalCopyWithLink 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to illustrate a scenario to reset the 
Reference of a copied feature to a new Body, with a call to <code>CATIMmiInternalCopyWithLinkEdition::SetSelectedElement</code> 
method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrInternalCopyWithLink Use Case</h2>
<p><code>CAAMmrInternalCopyWithLink</code> is a use case of the <code>CAAMechanicalModeler.edu</code> 
framework that illustrates the <code>CATMecModUseItf</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrInternalCopyWithLink Do</h3>
<p>The input for this use case is a Product Representation Reference <code>CAAMmrInternalCopyWithLink_RepRef</code>.</p>
<p>As the [<a href="#Fig1">Fig.1]</a> indicates, it consists of a PartBody which 
has a rectangular pad geometry (Pad.1) associated with it and a Body.2 which 
has a triangular pad geometry (Pad.2) associated with it.</p>
<table>
  <caption><a name="Fig1"></a>Fig. 1 PartBody and Body.2 of Input Model</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrInternalCopyWithLink_Fig1.jpg" width="564" height="366"/></td>
	</tr>
</table>
<p>Body.3 is an internal copy of PartBody. It has Solid.1 geometry (a copy of the 
Pad.1 geometry) associated with it. We next create an edge fillet (EdgeFillet.1) 
on the Solid.1 geometry, as [<a href="#Fig2">Fig. 2</a>] indicates.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2 Body.3 of Input Model</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrInternalCopyWithLink_Fig2.jpg" width="373" height="354"/></td>
	</tr>
</table>
<p>For now, we have the &quot;<strong>PartBody</strong>&quot; as the current Reference 
of &quot;Solid.1&quot; geometry (a rectangular pad).</p>
<p>We reset the reference of the &quot;Solid.1&quot; geometry, with &quot;Body.2&quot; as the new 
reference, thanks to the <kbd>Internal Copy With Link</kbd> 
command depicted in [<a href="#Fig3">Fig. 3</a>] below. It is located in the <kbd>CAA 
MechMod UC</kbd> section of the action bar. It is an add-in to 3D Shape models, thus it is seen across 
all 3D Shape apps (in this case, Part Design). </p>
<table>
	<caption style="width: 333px"><a name="Fig3"></a>Fig. 3 the CAA MechMod UC section</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrCopyWithLinkCmd.jpg" width="335" height="93"/></td>
	</tr>
</table>
<p>The  <kbd>Internal Copy With Link</kbd> command is essentially a state 
command. The command begins by prompting the end-user to select a copied feature 
(a <code><em>CATIMmiInternalCopyWithLink</em></code> implementation) from the tree, within CATIA. User selects the &quot;Solid.1&quot; geometry (Body.3 reference, 
an internal copy of the PartBody, which aggregates the rectangular pad).</p>
<p>It next prompts the user to select the new Reference (Body, a <code><em>CATIMmiMechanicalFeature</em></code> 
implementation) to be set for the copied feature. User selects Body.2 this time.</p>
<p>With that change in reference to Body.2, Solid.1 is now a copy of the Pad.2 geometry 
(Triangular pad), which replaces the earlier rectangular pad (Geometry copied from 
Pad.1). An automatic update follows, which will trigger the next operation, that 
of filleting an edge of the new Solid.1 geometry (Triangular Pad).</p>
<p>The fillet in the earlier geometry (rectangular pad) is defined by two faces 
of the solid. Thus, at this stage, to create an edge fillet on the triangular pad 
will also require two faces of the solid as an input. The &quot;Replace 
Viewer&quot; dialog box appears to enable an end-user to select the two faces of 
the triangular pad which will now define the new edge fillet.</p>
<p>The &quot;Replace Viewer&quot; dialog box [<a href="#Fig4">Fig.4</a>] displays 
the new geometry (Triangular pad ) face to face with the old geometry (Rectangular 
pad). It highlights the two faces in sequence, which define the edge fillet in the 
rectangular pad, in the left sub-window. In the right sub-window it enables an end-user 
to select the corresponding face of the triangular pad, which will define the edge 
fillet in it.</p>
<p>The &quot;Replace Viewer&quot; dialog box thus provides a graphical representation 
of this operation to redefine the edge fillet in the new geometry (triangular pad) 
with the old geometry (rectangular pad) being held as reference, alongside. The 
identity of the geometry (Faces) being replaced face to face with the replaced geometry 
(Faces) is output by the &quot;Replace&quot; dialog box.</p>
<table>
	<caption><a name="Fig4"></a>Fig. 4 Replace Viewer Dialog Box</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrInternalCopyWithLink_Fig4.jpg" width="818" height="620"/></td>
	</tr>
</table>
<p>The Solid.1 geometry appears as depicted in [<a href="#Fig5">Fig. 5</a>] below, 
after the replacement operation.</p>
<table>
	<caption style="width: 364px"><a name="Fig5"></a>Fig. 5 Updated Solid.1 Geometry (Body.3 Reference)</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAMmrInternalCopyWithLink_Fig5.jpg" width="495" height="271"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a href="#Where" name="How"></a>How to Launch CAAMmrInternalCopyWithLink</h3>
<p>To launch <code>CAAMmrInternalCopyWithLink</code> , you will need to set up the 
build time environment, then compile <code>CAAMmrInternalCopyWithLink</code> along 
with its prerequisites, set up the run time environment, and then execute the use 
case [<a href="#References">1</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Open</strong> a Product Representation Reference <code>CAAMmrInternalCopyWithLink_RepRef</code>, 
		the one depicted as an input model in the above section. It is available 
		within the <code>CAAMechanicalModeler.edu\InputData\CAAMmrInternalCopyWithLinkEdition.3DXML</code>.
		<p>This 3D XML file contains the root Product Representation Reference 
		with the following attributes:</p>
		<ul>
			<li><a><code>PLM_ExternalID</code></a>: <code>CAAMmrInternalCopyWithLink_RepRef</code></li>
			<li><a><code>Version</code></a>: ---</li>
		</ul>
		<p><strong>Attention</strong>: Please refer to the document [<a href="#References">3</a>] 
		for how to import and reimport such a 3D XML file in your PLM repository.</p>
		<p>The<a><code> PLM_ExternalID</code></a> attribute value of the imported 
		model is typically of the format &quot;<a><code>YourPrefix + CAAMmrInternalCopyWithLink_RepRef
		</code></a>&quot;, where <a><code>YourPrefix</code></a> is the string provided 
		as prefix, while importing a 3D XML file to CATIA.</p>
	</li>
	<li>Activate the "CAA MechMod UC" section of the action bar.</li>
</ul>
<p>The <a href="#What">What Does CAAMmrInternalCopyWithLink Do</a> section provides 
further details on the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The Mechanical Modeler add-in to the 3D Shape model within CATIA is available 
thanks the following entries in the <code><strong>.dico</strong></code> file.</p>
<pre class="code">...
#CAA# CAAMmrPartWksAddin CATIPrtWksAddin libCAAMmrPartWksAddin
...</pre>
<p>Before launching CATIA, remove #CAA# characters in the <code>CAAMechanicalModeler.edu.dico</code>
in front of the above line. This indicates that the add-in 
is fundamentally a <code><em>CATIPrtWksAddin</em></code> implementation in the
<code>CAAMmrPartWksAddin</code> shared lib.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrInternalCopyWithLink Code</h3>
<p>The <a><code>CAAMmrInternalCopyWithLink</code></a> use case is located 
in the <a><code>CAAMmrInternalCopyWithLink.m</code></a> module of the <a><code>CAAMechanicalModeler.edu</code></a> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrInternalCopyWithLink.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] 
is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code>CAAMmrInternalCopyWithLink</code>:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the Internal Copy</a></li>
	<li><a href="#Step3">Retrieving the New Reference</a></li>
	<li><a href="#Step4">Managing Errors</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The <code>CAAMmrInternalCopyWithLink</code> use case is fundamentally a State 
Command [<a href="#References">2</a>], which involves a transition through the following 
states:</p>
<ul>
	<li>An Initial State to begin with.</li>
	<li>The next state where it prompts the end user to select an Internal Copy 
		With Link. An Internal Copy With Link is necessarily a <code><em>CATIMmiInternalCopyWithLink</em></code> 
		implementation. A <code>CATPathElementAgent</code> object which has 
		its filter set to select only the <code><em>CATIMmiInternalCopyWithLink</em></code> 
		implementations in the CATIA spec tree, restricts an end user to select only 
		the copied feature. On selection, a transition is triggered to the next 
		state.</li>
	<li>The next state prompts the end user to select the new Reference (Body) for 
		the Internal Copy with Link. The new Reference (Body) is necessarily a
		<code><em>CATIMmiUseMechanicalTool</em></code> implementation. A <code>CATPathElementAgent</code> 
		object which has its filter set to select only the <code>CATIMmiUseMechanicalTool</code> 
		implementations in the CATIA spec tree, restricts an end user to select 
		only the Bodies which contain the part's geometry. On selection, a transition 
		is triggered to the last NULL state, the termination of the state command. 
		It also triggers an action method <code>CAAMmrInternalCopyWithLink</code>::<code>SetSelection</code> 
		detailed in the following section, which involves retrieving the copied 
		feature, the new Reference to set and finally to set the New Reference to 
		the copied feature.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Internal Copy</h3>
<p>At this stage the end user has selected the copied feature and the new Reference 
to be set. Having done that, a transition is triggered to the final NULL state. 
Simultaneously an action method <code>CAAMmrInternalCopyWithLink</code>::<code>SetSelection</code> 
is invoked. The implementation details of this method follows.</p>
<pre class="code">
CATBoolean CAAMmrInternalCopyWithLink::SetSelection(void* iData)
{
  <strong>CATPathElement* pathModelOnCopiedFeature = _daCopiedFeature-&gt;GetValue();</strong>
  CATBaseUnknown* pCopiedFeature = NULL;
  if ((NULL != pathModelOnCopiedFeature)&amp;&amp;(pathModelOnCopiedFeature-&gt;GetSize()&gt;0))
  {
    <strong>pCopiedFeature = (*pathModelOnCopiedFeature)[pathModelOnCopiedFeature-&gt;GetSize()-1];</strong>
    ...
    CATIMmiInternalCopyWithLinkEdition* piInternalCpyWithLnkEdition = NULL;
    HRESULT hr = <strong>pCopiedFeature</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIMmiInternalCopyWithLinkEdition,
                                                (void**)&amp;<strong>piInternalCpyWithLnkEdition</strong>);
...
</pre>
<p><code>_daCopiedFeature</code>, a <code>CATPathElementAgent</code>* type on the 
selection agent, stores the copied feature.</p>
<p>A call to <code>CATPathElementAgent</code>::<code>GetValue</code> on <code>_daCopiedFeature</code> 
returns <code>pathModelOnCopiedFeature</code>, a <code>CATPathElement</code>* type, 
representing the complete path along the spec tree from the Root up to the selected 
copied feature.</p>
<p><code>pCopiedFeature</code> is a <code><em>CATBaseUnknown</em></code>* type on the selected 
copied feature. It is the last element in <code>pathModelOnCopiedFeature</code>, 
a <code>CATPathElement</code>* type, which stores the entire path along the spec 
tree up to the current selection.</p>
<p><code>piInternalCpyWithLnkEdition</code> is a <code><em>CATIMmiInternalCopyWithLinkEdition</em></code>* 
type on the copied feature, returns thanks to <kbd>QueryInterface</kbd> called 
against&nbsp; <code>pCopiedFeature</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the New Reference</h3>
<p>We continue with the implementation of the <code>CAAMmrInternalCopyWithLink</code>::<code>SetSelection</code> 
method. In the earlier step we retrieved the copied feature as a <code><em>CATIMmiInternalCopyWithLinkEdition</em></code>* 
type (<code>piInternalCpyWithLnkEdition</code>). In the current step, we retrieve 
the new Reference to set from the selection agent.</p>
<pre class="code">CATBoolean CAAMmrInternalCopyWithLink::SetSelection(void* iData)
{
  ...
  <strong>CATPathElement* pathModelForNewRefToAssociate = _daNewRefToAssociate-&gt;GetValue();</strong>
  CATBaseUnknown* pNewRefToAssociate = NULL;

  if ((NULL != pathModelForNewRefToAssociate)&amp;&amp;(pathModelForNewRefToAssociate-&gt;GetSize()&gt;0))
    <strong>pNewRefToAssociate = (*pathModelForNewRefToAssociate)[pathModelForNewRefToAssociate-&gt;GetSize()-1];</strong>
    ...
    <strong>CATIMmiMechanicalFeature_var spMechFeatOnNewRefToAssociate = pNewRefToAssociate;</strong>
...</pre>
<p><code>_daNewRefToAssociate</code> is a <code>CATPathElementAgent</code>* type on 
the selection agent which stores the new Reference to set.</p>
<p>A call to <code>CATPathElementAgent</code>::<code>GetValue</code> on <code>_daNewRefToAssociate</code> 
returns <code>pathModelForNewRefToAssociate</code>, a <code>CATPathElement</code>* 
type, representing the complete path along the spec tree from the Root up to the selected 
new Reference.</p>
<p><code>pNewRefToAssociate</code> is a <code>CATBaseUnknown</code>* type on the selected 
new Reference. It is the last element in <code>pathModelForNewRefToAssociate</code>, 
a <code>CATPathElement</code>* type, which stores the entire path along the spec 
tree up to the current selection.</p>
<p><code>spMechFeatOnNewRefToAssociate</code> is a <code><em>CATIMmiMechanicalFeature_var</em></code> 
type on the new Reference. Assigning <code>pNewRefToAssociate</code> to this 
smart pointer triggers a call to <code>QueryInterface</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Managing Errors</h3>
<p>The <code>ThrowLastErrorMessage</code> routine handles the error. It takes the 
HRESULT returned by the calls, as an input. It analyzes this <code>HRESULT</code> 
value, to output the precise error message and ID.</p>
<pre class="code">void <strong>ThrowLastErrorMessage</strong>(HRESULT RC)
{
  CATUnicodeString ErrorMessageKey ("") ;
  <strong>CATError * pError = CATError::CATGetLastError(RC) ;</strong>
  if ( NULL != pError )
  {        
    <strong>ErrorMessageKey = pError-&gt;GetNLSMessage() ;		
    int IdErr = pError-&gt;GetId() ;</strong>
    ...
  }
}</pre>
<p>The call to <code>CATError</code>::<code>CATGetLastError</code> takes <code>HRESULT</code> 
as an input. It returns <code>pError</code>, a <code>CATError</code>* type.</p>
<p>A call to <code>CATError</code>::<code>GetNLSMessage</code> on <code>pError</code>, 
returns <code>ErrorMessageKey</code>, a <code>CATUnicodeString</code> type, representing 
a message which provides an error description.</p>
<p>A call to <code>CATError</code>::<code>GetId</code> on <code>pError</code>, returns
<code>IdErr</code>, an <code>int</code> type, which represents the error ID.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case deals with changing the Reference of an internal copy with link 
using the services exposed by the <code><em>CATIMmiInternalCopyWithLinkEdition</em></code> 
Interface. Please note that this is possible only for a solid internal copy.</p>
<p>It is deployed as a state command (shared library) integrated as a &quot;Internal Copy 
with link&quot; command within the &quot;CAA MechMod UC&quot; section of the action 
bar, 
an add-in for 3D Shapes in CATIA. The state command comprises of most importantly, 
two states.</p>
<p>The first state prompts the user to select a copied feature, essentially a
<code><em>CATIMmiInternalCopyWithLink</em></code> implementation. The next state 
prompts the user to select the new Reference (Body) to set, which is essentially 
a <code><em>CATIMmiMechancialFeature</em></code> implementation.</p>
<p>Once the user selects the copied feature and the new Reference for it, the Use 
case proceeds to set the new Reference to the copied geometry. This is followed 
by an automatic update, wherein a Replace Viewer dialog box appears, if a manual 
reroute is required to complete the replace operation. Meaning, if an edge fillet 
is to be done, then user will be prompted to identify the two faces on the new geometry, 
with a reference to the faces on the old geometry, which will define the edge fillet 
on the new geometry.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">
		Getting Started with State Dialog Commands</a>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Feb 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Apr 2010]</td>
		<td>Document updated for V6 novelties</td>
	</tr>
	<tr>
		<td>Version:  <strong>3</strong> [Mai 2014]</td>
		<td>Document updated for 3DEXPERIENCE platform migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
