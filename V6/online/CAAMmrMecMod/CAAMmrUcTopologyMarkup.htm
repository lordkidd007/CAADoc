<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Marking Up Topology</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Marking Up Topology</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAMmrFeatureTopoBRep</strong> use 
		case. This use case explains how to navigate through a 3D Shape in order 
		to find and modify graphically its mechanical features content.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrFeatureTopoBRep Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrFeatureTopoBRep Do</a></li>
					<li><a href="#How">How to Launch CAAMmrFeatureTopoBRep</a></li>
					<li><a href="#Where">Where to Find the CAAMmrFeatureTopoBRep 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case explains how to find and modify the content of a 3D Shape.&nbsp;
</p>
<p>In this use case, you will learn how to use two different techniques to browse 
through the internal structure of a 3D Shape:</p>
<ol>
	<li>Using the feature decomposition of the shape as it appears in the specification 
		tree, to look for specific features in the shape. This is used for coloring 
		the part fillets in green in the picture bellow.</li>
	<li>Directly operating at the topological level in order to look for specific 
		topology, no matter which feature has generated it. This is used for coloring 
		the planar faces in blue in the picture bellow.</li>
</ol>
<p><img alt="" height="303" src="images/CAAMmrTopologyMarkUp.jpg" width="273"/>
<img alt="" height="302" src="images/CAAMmrTopologyMarkUp2.jpg" width="268"/></p>
<p>These pictures represent the PLM Representation before (on the left) and after 
(on the right) its processing by the use case.</p>
<p>The fillets have been colored in green and the faces in blue.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrFeatureTopoBRep Use Case</h2>
<p>CAAMmrFeatureTopoBRep is a use case of the CAAMechanicalModeler.edu framework 
that illustrates CATMecModUseItf and CATMecModLiveUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrFeatureTopoBRep Do</h3>
<p>CAAMmrFeatureTopoBRep loads in session a PLM Representation, navigates through 
its associated 3D Shape in order to modify the graphical attributes of it's topology.</p>
<p>The steps involved are:</p>
<ul>
	<li>Open a PLM Representation Reference whose PLM_ExternalID and 
	majorrevision attributes 
		are passed through as arguments.</li>
	<li>Access the Part feature within the 3D Shape.</li>
	<li>Color the fillets in green:
		<ul>
			<li>Scan the Part's children features in search for fillet features.</li>
			<li>Access the topology associated with each fillet.</li>
			<li>Change the graphical attributes of the retrieved topology.</li>
		</ul>
	</li>
	<li>Color the planar faces in blue:
		<ul>
			<li>Scan the Part searching for all topology representing it.</li>
			<li>Filter out this topology in order to retain only planar bi-dimensional 
				elements (i.e. faces).</li>
			<li>Color the faces.</li>
		</ul>
	</li>
	<li>Save the Representation Reference and exit.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrFeatureTopoBRep</h3>
<p>To launch CAAMmrFeatureTopoBRep, you will need to set up the build time environment, 
compile CAAMmrFeatureTopoBRep along with its prerequisites, set up the run time 
environment, and then execute the use case. These steps are detailed in the following 
technical article: "Building and Launching a CAA use case" [<a href="#References">2</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<em>CAAMmrFeatureTopoBRep Repository Server User Password 
SecurityCtx PLMRepType ExternalID Version&quot;</em></code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (since the use case modifies the PLM Data )</td>
	</tr>
	<tr>
		<th>PLMRepType</th>
		<td>A string representing PLM Representation Type (e.g. VPMRepReference)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a Representation reference</td>
	</tr>
	<tr>
		<th>version</th>
		<td>The <code>majorrevision</code> of a Representation reference</td>
	</tr>
</table>
<p>You can directly execute this use case if you know how to locate your own Representation 
Reference. If not, you can import a 3D XML file supplied in the CAAMechanicalModeler.edu 
framework:</p>
<table>
	<tr>
		<td><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\InputData\CAAMmrFeatureTopoBRep.3dxml\</code></td>
	</tr>
</table>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM 
is installed.</p>
<p>This 3D XML file contains the Representation Reference with the 
following attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong> : <code>CAAMmrFeatureTopoBRep</code></li>
	<li><strong>majorrevision</strong> : ---</li>
</ul>
<p><strong>Attention</strong>: Because this use case saves the input Representation 
Reference, you must reimport the original component with another prefix, to re-execute 
and see the face color modifications.
Refer to technical article "Building and Launching a Use Case" [<a href="#References">2</a>] 
for information on how to import and reimport such a 3D XML file in your PLM repository.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrFeatureTopoBRep Code</h3>
<p>The CAAMmrFeatureTopoBRep use case is made of a main single source file named 
CAAMmrFeatureTopoBRep.cpp located in the CAAMmrFeatureTopoBRep.m module of the CAAMechanicalModeler.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrFeatureTopoBRep.m\</code></p>
<p>and two others files exported by the CAAPLMClientAdapter.edu framework:</p>
<ul>
	<li>CAAAdpCreateCloseSession.cpp - to create and close a PLM session.</li>
	<li>CAAOpenPLMComponent.cpp - to open the Representation Reference.</li>
</ul>
<p><code>InstallRootFolder\CAADoc\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM 
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are nine logical steps in CAAMmrFeatureTopoBRep:</p>
<ol>
	<li><a href="#Step1">Checking Arguments and Creating the Session</a></li>
	<li><a href="#Step2">Loading the Representation Reference</a></li>
	<li><a href="#Step3">Accessing the Part Feature in the 3D Shape</a></li>
	<li><a href="#Step4">Filtering the Fillet Features</a></li>
	<li><a href="#Step5">Accessing Fillets Topology</a></li>
	<li><a href="#Step6">Coloring Fillet Topology</a></li>
	<li><a href="#Step7">Searching for the Planar Faces</a></li>
	<li><a href="#Step8">Coloring the Planar Faces</a></li>
	<li><a href="#Step9">Closing and Exiting the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking Arguments and Creating the Session</h3>
<pre class="code">...
  HRESULT rc = ::<strong>CAAAdpCreateSession</strong>(iArgv[1], iArgv[2], iArgv[3],iArgv[4], iArgv[5]);
				   
...</pre>
<p>Once the count of input arguments is checked, we use the <em>CAAAdpCreateSession</em> 
function exported by the CAAAdpClientAdapter.edu framework. This function creates 
the session with a connection to the input repository.
Refer to the technical article "Connecting to V6 Server" [<a href="#References">1</a>] 
for more details.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Loading the Representation Reference</h3>
<pre class="code">...
  <strong>CATOmbLifeCycleRootsBag</strong> Bag; 				   
  rc = ::<strong>CAAOpenPLMComponent</strong>(PLM_RepTyp,
                             PLM_ExternalIDValue,
                             VersionValue,
                             IID_CATIPLMComponent,
                             (void**)&amp;piPLMComponentOnPart,
                             Bag,
                             TRUE);
                           
  <strong>CATIPsiRepresentationLoadMode</strong>_var spLoadModeOn3DShape = piPLMComponentOnPart;
  if (spLoadModeOn3DShape != NULL_var)
    rc = spLoadModeOn3DShape-&gt;<strong>ChangeLoadingMode</strong>(CATIPsiRepresentationLoadMode::EditMode);
...</pre>
<p>The <em>CAAOpenPLMComponent</em> function, exported by the CAAAdpClientAdapter.edu 
framework, opens the PLM Representation Reference using the input arguments.</p>
<p>Refer to the use case "Querying, Expanding and Loading a PLM Component" [<a href="#References">3</a>] 
for details on how to open a PLM Representation Reference.
The <em>CAAOpenPLMComponent</em> function loads the Representation Reference in
<code>Visu Mode</code>, it is then necessary to change the loading mode to <code>
Edit Mode</code> using <em>CATIPsiRepresentationLoadMode</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Accessing the Part Feature in the 3D Shape</h3>
<p>Refer to the technical articles "From the PLM Representation to the 3D Shape" [<a href="#References">4</a>] 
and "The Part Feature"[<a href="#References">5</a>] for details on the structure 
of the 3D Shape and on the Part Feature.</p>
<pre class="code">...
    <strong>CATIPLMNavRepReference</strong>_var spRepRef = piPLMComponentOnPart;
 
...
    <strong>CATIMmiPrtContainer</strong> * piPartContainer = NULL ;
    rc = spRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>("CATPrtCont",
	                                        IID_CATIMmiPrtContainer,
	                                        (void **)&amp;piPartContainer);

... 
    <strong>CATIMmiMechanicalFeature</strong>_var spMechFeatOnPart ;  
    rc = piPartContainer-&gt;<strong>GetMechanicalPart</strong>(spMechFeatOnPart);
...</pre>
<p>We first retrieve the Specification Container,CATPrtCont, that implements the
<em>CATIMmiPrtContainer</em> interface, using the <code>RetrieveApplicativeContainer</code> 
method of the <em>CATIPLMNavRepReference</em> interface.</p>
<p>Next, we use the <em>CATIMmiPrtContainer</em> interface to access the Part feature. 
The <code>GetMechanicalPart</code> method returns a <em>CATIMmiMechanicalFeature</em> 
interface smart pointer on the Part feature.</p>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Filtering the Fillet Features</h3>
<pre class="code">...
<strong>CATIPartRequest</strong>_var spPartReq = spMechFeatOnPart;
CATBaseUnknown_var spMainBody = NULL_var; 
rc = spPartReq-&gt;<strong>GetMainBody</strong>("",spMainBody);
...
<strong>CATIMmiUseBodyContent</strong>_var spBodyContent = spMainBody;
...
CATListValCATBaseUnknown_var listFeat;
rc = spBodyContent-&gt;<strong>GetMechanicalFeatures</strong>(listFeat);

... 
CATListValCATBaseUnknown_var filletFeatures;
for (int currentFeat=1; currentFeat&lt;=listFeat.Size();currentFeat++)
{
   CATBaseUnknown* pFillet = NULL;
   CATBaseUnknown_var hFeat = listFeat[currentFeat];
   if (!!hFeat)
   {
     pFillet = hFeat-&gt;QueryInterface("<strong>CATIPdgUseFillet</strong>");
     if (pFillet) 
       filletFeatures.Append(pFillet);
...</pre>
<p>We retrieve the PartBody with the method <code>GetMainBody</code> of <em>CATIPartRequest</em> 
interface (<code>spPartReq</code> is a <em>CATIPartRequest</em> interface smart 
pointer on the Part feature).</p>
<p>Next, we retrieve the list of mechanical features aggregated by the PartBody 
with the method <code>GetMechanicalfeatures</code> of<em> CATIMmiUseBodyContent</em> 
interface (<code>spBodyContent</code> is<em> CATIMmiUseBodyContent</em> interface 
smart pointer on the PartBody).</p>
<p>We then scan the list to search for Fillet type features, using the <em>CATIPdgUseFillet</em> 
interface. (<strong>Note</strong>: this method of QueryInterface enables to check the type of the 
object without having a dependency on CATPartUseItf framework.)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Accessing the Fillets Topology</h3>
<pre class="code">...
for (int currentFillet=1; currentFillet&lt;=filletFeatures.Size(); currentFillet++)
{
   <strong>CATIMmiUseGeometryAccess</strong> *pFilletAsGeomAccess = NULL;
   rc = filletFeatures[currentFillet]-&gt;QueryInterface(IID_CATIMmiUseGeometryAccess,
                                                           (void**)&amp;pFilletAsGeomAccess);
   if( SUCCEEDED(rc))
   {
      CATLISTV(CATBaseUnknown_var) filletBReps;
      pFilletAsGeomAccess-&gt;<strong>GetBReps</strong>(filletBReps);
...</pre>
<p>In order to change the color of each Fillet of the list, we need to access the 
topological elements of each Fillet feature. For this, we use the <code>GetBReps</code> 
method of the<em> CATIMmiUseGeometryAccess</em> interface (<code>pFilletAsGeomAccess</code> 
is a <em>CATIUseGeometryAccess</em> interface pointer on a Fillet feature).</p>
<p>The method <code>GetBReps</code> accesses the topological cells through the BRep 
Access objects. Refer to the technical article "Generic Naming Overview" [<a href="#References">8</a>] 
for details on the link between geometrical features and the underlying topology.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Coloring the Fillets Topology</h3>
<pre class="code">...
for(int currentBRep=1; currentBRep&lt;=filletBReps.Size(); currentBRep++)
{
  <strong>CATIVisProperties</strong> *pFilletBrepAsGraphics = 0;
  rc =  filletBReps[currentBRep]-&gt;QueryInterface(IID_CATIVisProperties,
                                                 (void**)&amp;pFilletBrepAsGraphics);
  if (SUCCEEDED(rc))
  {
     CATVisPropertiesValues color;
     color.SetColor(0, 255, 0); // green
     pFilletBrepAsGraphics-&gt;<strong>SetPropertiesAtt</strong>(color, CATVPColor, CATVPMesh);
     pFilletBrepAsGraphics-&gt;Release();
     pFilletBrepAsGraphics = NULL;
  }
}
...</pre>
<p>For each Fillet feature, we scan the list of BRep Access objects in order to 
set their color to green.</p>
<p>At this point, lets raise an interesting question. In the previous step, we used 
the <code>GetBReps</code> method of <em>CATIMmiUseGeometryAccess</em> interface 
to retrieve the BRep Access objects to color. Using <code>GetTopoCells</code> method 
of the same interface, we could have directly retrieved the topological cells. The 
question is: what is the difference between changing the color of the BRep Access 
objects and directly changing the color of the cells?</p>
<p>The answer is, coloring BRep Access objects allows the color to be persistent 
at the Mechanical Modeler level.</p>
<p>Indeed, colors can be managed both by the Mechanical Modeler and by the Topological 
Modeler. The color specifications managed by the Mechanical Modeler override the 
ones existing at the Topological Modeler level. This enables to color in one go 
all the cells representing a mechanical feature, which is more efficient than coloring 
cell by cell. Nevertheless, the capacity of coloring a single cell is also managed 
by mechanical Modeler, enabling their individual color to be taken into account 
in the general visualization mechanism of the Mechanical Modeler.</p>
<p>In this Use Case, we could have directly assigned the green color to the Fillet 
features. Our example enables to show the capacity of the modeler to color at a 
finer level.</p>
<p>So, back to our code sample. We use the <code>SetColor</code> method of the
<em>CATIVisProperties</em> interface to change the color of each cell of the current 
BRep Access object. <br />
Refer to the technical article "BRep Access Objects" [<a href="#References">9</a>] 
for further information on these selecting objects.</p>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Searching for the Planar Faces</h3>
<p>Now that the fillets have been colored in green, the second part of the job consists 
in coloring the planar faces in blue.</p>
<p>This article shows how to access the topological result associated to the Geometrical 
Feature Set, in our case the PartBody. You can refer to the technical articles "Geometrical 
Feature Sets" [<a href="#References">6</a>] and "Specification/Result Mechanism 
Applied to Mechanical features"[<a href="#References">7</a>] for details on Geometrical 
feature Sets and mechanical results.</p>
<pre class="code">...
<strong>CATIBodyRequest</strong>_var spMainPartBodyBodyRequest = spMainBody ;
...
CATLISTV(CATBaseUnknown_var) ListResult ;
rc = spMainPartBodyBodyRequest-&gt;<strong>GetResults</strong>(&quot;&quot;,ListResult);
...
<strong>CATIMmiUseGeometricalElement</strong>_var spFeatureResultGeomElem = ListResult[<strong>1</strong>] ;
...
<strong>CATBody</strong>_var spPartTopoBody;
rc = spFeatureResultGeomElem-&gt;<strong>GetBodyResult</strong>(spPartTopoBody);
...
CATLISTP(CATCell) cells;
spPartTopoBody-&gt;<strong>GetAllCells</strong>(cells, 2);
...</pre>
<p>The <code>GetResults</code> method of <em>CATIBodyRequest</em> interface, implemented 
on the PartBody, enables you to retrieve the result of the PartBody. In our case, the 
result is a Solid feature which holds the topological result. The first element 
of <code>ListResult</code> is this result Solid feature.</p>
<p>The <code>GetBodyResult</code> method of the <em>CATIMmiUseGeometricalElement</em> 
applied to the result feature returns the topological result, that is to say the 
resulting CATBody.</p>
<p>From <code>spPartTopoBody</code>, the CATBody, a list of all its topological 
cells can be obtained with the <code>GetAllCells</code> method of the <em>CATBody</em> 
interface. Here the cells are filtered, keeping only the two-dimensional ones, i.e. 
faces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Coloring the Planar Faces</h3>
<pre class="code">...
for(int currentCell=1; currentCell&lt;=cells.Size(); currentCell++)
{
  CATCell_var pCell(cells[currentCell]);
  if ( NULL_var != pCell )
  {
    <strong>CATGeometry</strong> *pGeometry = pCell-&gt;GetGeometry();
    if ((NULL != pGeometry) &amp;&amp; (pGeometry-&gt;<strong>IsATypeOf</strong>(<strong>CATPlaneType</strong>)))
    {
      CATIMmiUseBRepDecodeServices_var spBRepDecodeService ;
      CATMmiUseServicesFactory::CreateBRepDecodeServices(spBRepDecodeService);
      
      CATIMmiUseBRepAccess_var spBRepAccess ; 
      spBRepDecodeService-&gt;DecodeCellInGeomElt(spBRepAccess,pCell,spFeatureResultGeomElem);
  
      if (NULL_var!=spBRepAccess)
      {
        // Colorizes BRep
      <strong>  CATIVisProperties</strong> *pBRepAccessAsGraphics = 0;
        rc = spBRepAccess-&gt;QueryInterface(IID_CATIVisProperties,
                                                  (void**)&amp;pBRepAccessAsGraphics);
        if (SUCCEEDED(rc))
        {
          CATVisPropertiesValues color;
          color.SetColor(0, 0, 255); // Blue
          pBRepAccessAsGraphics-&gt;<strong>SetPropertiesAtt</strong>(color, CATVPColor, CATVPMesh);
          pBRepAccessAsGraphics-&gt;Release();
          pBRepAccessAsGraphics = NULL ;
        }
...</pre>
<p>The objective is now to color the planar faces in blue.</p>
<p>We scan the list of cells in search of planar faces. To check if a face is planar, 
we get from the cell a <em>CATGeometry</em> object, which holds its geometrical description. 
The <code>CATGeometry::IsATypeOf</code> method allows to discriminate among several 
geometry types, among which <code>CATPlaneType</code> for planar entities.</p>
<p>Remember that for the fillets, we set the green color at the Mechanical Modeler 
level, avoiding the risk of being overridden.
Here, the search for planar faces has taken place at the Topological Modeler level. 
What we have so far is a list of topological cells that are planar. We now need 
to find their corresponding Mechanical Modeler entity.</p>
<p>For that, we use the <code>DecodeCellInGeomElt</code> method of <em>CATIMmiUseBRepDecodeServices</em> 
interface, that retrieves the BRep Access object associated with the planar cell.</p>
<p>The resulting BRep Access object implements the <em>CATIVisProperties</em> interface, 
which is used to change its color.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Closing and Exiting the Session</h3>
<pre class="code">...
  <strong>CATAdpSaver</strong> saver;
  rc = saver.<strong>Save</strong>();
...</pre>
<p>In the epilog of the use case, we save the representation reference: the
<code>Save</code> method without argument saves all the PLM components of the session.
</p>
<pre class="code">...
rc = ::CAAAdpCloseSession();
...</pre>
<p>This last instruction closes the session. <em>CAAAdpCloseSession</em> 
just calls the <code>ClosePLMSession</code> method of the <em>CATPLMSessionServices</em> 
class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The objectif of this use case is to modify the color of specific details of a 
Part, based on two different criteria: feature nature (fillets) or a geometrical 
property (planarity of faces). This requires two strategies, depending on whether 
or not we need to descend to the Topological Modeler level to find the elements 
we are looking for.</p>
<p>Finding fillets just requires a search at the Mechanical Modeler level.&nbsp; 
The <em>CATIMmiUseBodyContent</em> interface enables to access the mechanical features 
and filter their types by checking which ones implement the <em>CATIPdgUseFillet
</em>interface. Then the <em>CATIMmiUseGeometryAccess</em> interface enables to 
extract the BRep Access objects that manage the links to the Topological cells that 
represent the fillet. The <em>CATIVisProperties</em> interface implemented on BRep 
Access objects is used to set the color in a way that guarantees that the new color 
is persistent at the Mechanical Modeler level.</p>
<p>The search for planar faces is different in that it requires the help of the 
underlying Topological Modeler to sort out planar from non planar cells. So first, 
all cells associated with the main Body feature are requested, and then they are 
tested for planarity by accessing their geometry and querying it for planarity. 
With only planar cells left, the decoding mechanism is invoked, so as to relocate 
in the Mechanical Modeler the objects to modify. The obtained BRep Access objects 
are then colored in the same way as the fillets in the first part of the use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrTa3DShape.htm">From the PLM Representation to the 3D 
		Shape</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAMmrTaContentsSpecCont0.htm">The Part Feature</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAMmrTaContentsSpecCont1.htm">The Geometrical Feature Sets</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAMmrTaSpecResultForMechFeat.htm">Specification/Result Mechanism 
		Applied to Mechanical Features</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAMmrTaGenericNaming.htm">Generic Naming Overview</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAMmrTaBRepAccessGlossary.htm">BRep Access Objects</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2003]</td>
		<td>Finding out the Planar Faces section modified</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2006]</td>
		<td>Document updated for PLM Component</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jan 2010]</td>
		<td>Document updated for V6</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
