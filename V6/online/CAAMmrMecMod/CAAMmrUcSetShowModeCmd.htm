<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Swaping Show Mode</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Swaping Show Mode</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAMmrSetShowModeCmd</strong> use 
		case. This use case is an interactive command that enables to swap Hide/Show 
		mode of a geometrical feature in a 3D Shape. It illustrates the possiblility 
		to force the visu synchronisation within an interactive command.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrSetShowModeCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrSetShowModeCmd Do</a></li>
					<li><a href="#How">How to Launch CAAMmrSetShowModeCmd</a></li>
					<li><a href="#Where">Where to Find the CAAMmrSetShowModeCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The purpose of this Use Case is to show how to force visu synchronisation in 
an interactive command that modifies the visu properties of geometrical features, 
using the <em>CATIMmiPartModelEventManagement</em> interface.</p>
<p>As a reminder, the model world and the visualization world are independent and 
any geometry modification triggers a visualization update using the <em>CATIModelEvents</em> 
interface. The treatment of this update event is postponed till the end of the command 
transaction.</p>
<p>In some cases, it can be usefull to get the result of the visualization update 
immediately within the command.It's the purpose of the <em>CATIMmiPartModelEventManagement</em> 
interface.</p>
<p>This visualization synchronisation can also be usefull when an interactive command 
creates a large number of geometries, for performance reasons. As an example, if 
user creates hundreds of point in the same command, it will introduce performance 
issues as each point creation sends a visualization event, requesting to be drawn. 
In this particular case it is interesting to &#8220;flush&#8221; the stored events 
after each point creation, as each point has to be drawn anyway, and as storing 
events cost more and more, if you have many objects modified.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrSetShowModeCmd Use Case</h2>
<p><code>CAAMmrSetShowModeCmd</code> is a use case of the <code>CAAMechanicalModeler</code>.<code>edu</code> 
framework that mainly illustrates CATMecModUseItf frameworks capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrSetShowModeCmd Do</h3>
<p>This Use Case is an interactive command that enables user to swap the Hide/Show 
mode of a selected geometrical feature.</p>
<p>The command &quot;Swap Hide/Show&quot;
<img alt="" height="18" src="images/CAAMmrShowModeCmd.jpg" width="19"/> belongs 
to the &quot;CAA MechMod UC&quot; section of the action bar, an add-in of&nbsp; 3D Shape 
apps within CATIA, depicted in the picture below:</p>
<p><img alt="" src="images/CAAMmrSpecTreeToolbar.jpg" width="372" height="70"/></p>
<p>When the command is activated, user selects a geometrical element and its show 
mode is swapted. The fact that visualization update is done immediately is checked 
within the command and shown in the output traces.</p>
<p>The console outputs are described below:</p>
<p>CAAMmrSetShowModeCmd Activate<br />
Selected feature is a geometrical feature<br />
As expected, the feature is now hidden in the 3D</p>
<p>&nbsp;CAAMmrSetShowModeCmd Activate<br />
Selected feature is a geometrical feature<br />
As expected, the feature isn't hidden</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrSetShowModeCmd</h3>
<p>To launch <code>CAAMmrSetShowModeCmd</code>, you will need to set up the build 
time environment, then compile <code>CAAMmrSetShowModeCmd</code> along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li>Open or Create a <code>3D</code> <code>Shape</code> with some geometry.</li>
	<li>Activate the <code>CAA MechMod UC</code> section.</li>
	<li>Click on the Show Mode command.<img alt="" height="18" src="images/CAAMmrShowModeCmd.jpg" width="19"/></li>
	<li>Select a geometrical feature and check that the output traces give the expected 
		result.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The &quot;CAA MechMod UC&quot; add-in to <strong>3D Shape apps</strong> is available thanks to a data extension of the <code>CAAMmrPartWksAddin</code> component 
[<a href="#References">2</a>]. This requires the following entries to be uncommented 
in the <code>CAAMechanicalModeler.edu.dico</code> file.</p>
<pre class="code">...
CAAMmrPartWksAddin CATIWorkbenchAddin libCAAMmrPartWksAddin
CAAMmrPartWksAddin CATIPrtWksAddin libCAAMmrPartWksAddin
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrSetShowModeCmd Code</h3>
<p>The <code>CAAMmrSetShowModeCmd</code> use case is made of a class defined in 
the <code>CAAMmrCommands.m</code> module of the <code>CAAMechanicalModeler.edu</code> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrCommands.m\</code></p>
<ul>
	<li><code>CAAMmrSetShowModeCmd.cpp</code> has the State Command implementation.</li>
</ul>
<p>The use case also pre-reqs the following module:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrPartWksAddin.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The steps in the <code>CAAMmrUcSetShowModeCmd</code> use case are:</p>
<ol>
	<li><a href="#Step1">Building the StateCommand</a></li>
	<li><a href="#Step2">Implementing the Callback to an Incoming Transition Associated 
		with this State Command</a><ul>
			<li><a href="#Step21">Retrieving the Chosen Entity from the Selection 
				Agent</a></li>
			<li><a href="#Step22">Getting the Feature's visualization Status and 
				Changing It</a></li>
			<li><a href="#Step23">Sending a Visualization Event</a></li>
			<li><a href="#Step24">Synchronizing Visualization</a></li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Building the StateCommand</h3>
<p>The first step implements a State Command [<a href="#References">1</a>]. This 
implementation occurs in the State Command <code>BuildGraph</code> method.</p>
<p>The State Command has a state prompting the end user to select a geometrical 
feature. The selection is restricted to those entities that implement
<code><em>CATIMmiUseGeometricalElement.</em></code></p>
<pre class="code">  CATPathElementAgent* _daObjectToSelect;
...
  _daObjectToSelect = new CATPathElementAgent(&quot;SelMechanicalFeature&quot;);
  _daObjectToSelect-&gt;AddElementType(IID_CATIMmiUseGeometricalElement);
...</pre>
<p>This state has an incoming transition to itself associated with it, as a result 
of which it remains eternally prompting the end-user to select an entity whose show 
mode will be swapted. An action associated with this incoming transition, <code>
CAAMmrSetShowModeCmd</code>::<code>SwapShowMode</code> switches the show mode of 
the selected feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing the Callback to an Incoming Transition Associated 
with the State Command</h3>
<p>Here we detail the implementation of the Callback associated with the State Command. 
This callback is triggered in response to the user selecting a geometrical feature, 
in the tree or in the 3D area. It retrieves the selected feature, 
seeks its current show mode and switches its state (hide/show).</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>Retrieving the Feature from the Selection Agent</h4>
<p>To begin with, it retrieves the chosen feature from the Selection Agent.</p>
<pre class="code">// Within the State Command Class
<strong>CATPathElementAgent</strong>* _daObjectToSelect;</pre>
<pre>...
<strong>CATPathElement</strong>* pathModel = _daObjectToSelect-&gt;GetValue();
CATBaseUnknown* pSelectedObj = NULL;

if ((NULL != pathModel) &amp;&amp; (pathModel-&gt;GetSize()&gt;0))
{
  // Seek the last element of the path. 
  pSelectedObj = (*pathModel)[pathModel-&gt;GetSize()-1];
  if (NULL == pSelectedObj)
	return TRUE ;

  // Seek the CATIMmiUseGeometricalElement type on the selected feature
  <strong>CATIMmiUseGeometricalElement</strong>_var spMmiMechFeat = pSelectedObj;
...</pre>
<p>On selecting an entity within CATIA, the Selection Agent, a <code>CATPathElementAgent</code> 
object, <code>_daObjectToSelect</code> is valuated. The call to <code>GetValue</code> 
of the Selection Agent returns the chosen entity, as a <code>CATPathElement</code> 
object, *<code>pathModel</code>.</p>
<p>This object consists of the selected entity, with all its ancestors up to the 
product model hierarchy until Root. We retrieve the last element in this list, which 
is the selecteted feature, for further processing.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Getting the Feature's Visualization Status and Changing 
It</h4>
<p>We next seek the show mode of the selected feature. If visible, it is switched 
to hiden mode and vice versa.</p>
<pre class="code">...
// Query the CATIVisProperties Interface
<strong>CATIVisProperties</strong>_var MyFeatureProperties = spMmiMechFeat;

if (NULL_var != MyFeatureProperties)
{
  <strong>CATVisPropertiesValues</strong> visValues;

  // Get the current value of the show attribute
  rc = MyFeatureProperties-&gt;<strong>GetPropertiesAtt</strong>(visValues,CATVPShow,CATVPGlobalType);  
     
  // Swap the value of show attribute
  if (SUCCEEDED(rc))
  {
    CATShowAttribut ShowAttr  =  CATShowAttr;
    visValues.GetShowAttr(ShowAttr); 
 
    if (ShowAttr == <strong>CATShowAttr</strong>)
      ShowAttr = CATNoShowAttr;
    else if (ShowAttr == <strong>CATNoShowAttr</strong>)
      ShowAttr = CATShowAttr;
     
    visValues.SetShow(ShowAttr);

    // Modify the property
    rc = MyFeatureProperties-&gt;<strong>SetPropertiesAtt</strong>(visValues,CATVPShow,CATVPGlobalType);  
...</pre>
<p>The <code>CATIVisProperties</code>::<code>GetPropertiesAtt</code> call returns 
a <code>CATShowAttribut</code>, <code>ShowAttr</code> (<code>CATShowAttr</code>, 
if visible, else <code>CATNoShowAttr</code>).</p>
<p>We inverse the value of <code>ShowAttr</code> and change the mode of the feature 
by calling the <code>SetPropertiesAtt</code> method.</p>
<p>The <code>CATIVisProperties</code>::<code>SetPropertiesAtt</code> call has modified 
the visu properties of the feature. A visualization update is now necessary.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Sending a Visualization Event</h4>
<p>The visualization update is done by sending a visu modification notification,
<code>CATModifyVisProperties</code>, using the <code>CATIModelEvents</code> interface.</p>
<pre>...
// Sending the visualization event to refresh the 3D
<strong>CATIModelEvents</strong>_var MyFeatureModelEvents = spMmiMechFeat;
if (SUCCEEDED(rc) &amp;&amp; NULL_var != MyFeatureModelEvents)
{
  <strong>CATModifyVisProperties</strong> ModifyNotification(spMmiMechFeat, NULL, CATVPGlobalType, CATVPShow, visValues); 
  MyFeatureModelEvents-&gt;Dispatch(ModifyNotification);
 
...</pre>
<p>This visualization event will be processed at the end of the transaction, which 
is sufficient for most commands and imperceptible to the end user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step24"></a>Synchronizing Visualization</h4>
<p>The visualization event can be forced to be processed immediately thanks to
<em>CATIMmiPartModelEventManagement</em> interface.</p>
<pre class="code">...
//ask for the immediate process of visu events
CATIMmiMechanicalFeature_var spMechFeat = spMmiMechFeat;
if (NULL_var != spMechFeat)
{
  CATIMmiMechanicalFeature_var spPart;
  rc = spMechFeat-&gt;GetMechanicalPart(spPart);

  if (NULL_var != spPart)
  {
    <strong>CATIMmiPartModelEventManagement</strong> * PartModelEvtMgnt = NULL;
    rc = spPart-&gt;QueryInterface(IID_CATIMmiPartModelEventManagement,(void**)&amp;PartModelEvtMgnt);
    if (SUCCEEDED(rc)&amp;&amp; NULL != PartModelEvtMgnt)
    {
      PartModelEvtMgnt-&gt;<strong>CommitNow</strong>();
      PartModelEvtMgnt-&gt;Release();
      PartModelEvtMgnt = NULL;
    }
  }
}
...</pre>
<p>This event should be invoked on the Part Feature to which belongs the impacted 
geometrical feature. The Part feature is obtained by calling the <code>GetMechanicalPart</code> 
method of <em>CATIMmiMechanicalFeature</em> interface. <br />
The visualization synchronisation is done by calling the <code>CommitNow</code> 
method of <em>CATIMmiPartModelEventManagement</em> interface on the Part feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a></h2>
<h2>In Short</h2>
<p>This use case shows, through an interactive command, how to modify the 
visualization attributes of a geometrical feature in a 3D Shape. It shows how to 
update the visualization of the modified feature and mostly how to synchronize this 
visualization event immediately thanks to the <em>CATIMmiPartModelEventManagement
</em>interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">
		Getting Started with State Dialog Commands</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">
		Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Sep 2011]</td>
		<td>Document created</td>
	</tr>
		<tr>
		<td>Version: 2 [Mai 2014]</td>
		<td>Document updated for 3DEXPERIENCE platform migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
