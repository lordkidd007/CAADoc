<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a 3D Shape as New Representation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a 3D Shape as New Representation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the <strong>CAAMmrCreateExplicitPart</strong> 
		use case: it shows how to create a PLM Representation Reference with a 3D 
		Shape as main data stream.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrCreateExplicitPart Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrCreateExplicitPart Do</a></li>
					<li><a href="#How">How to Launch CAAMmrCreateExplicitPart</a></li>
					<li><a href="#Where">Where to Find the CAAMmrCreateExplicitPart 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and save in database a PLM 
Representation Reference. You will learn:</p>
<ul>
	<li>How to create a Representation Reference.</li>
	<li>How to retrieve the Part feature from the newly created Representation Reference.</li>
	<li>How to save the created Representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrCreateExplicitPart Use Case</h2>
<p><code>CAAMmrCreateExplicitPart</code> is a use case of the <code>CAAMechanicalModeler.edu</code> 
framework that illustrates several of the PLM Component frameworks, the Product 
Structure Modeler frameworks and the Mechanical Modeler frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrCreateExplicitPart Do</h3>
<p>The CAAMmrCreateExplicitPart Use Case creates a new 3D Shape Representation Reference 
in a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrCreateExplicitPart</h3>
<p>To launch CAAMmrCreateExplicitPart, you will need to set up the build time environment, 
then compile CAAMmrCreateExplicitPart along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;CAAMmrCreateExplicitPart Repository Server User Password 
SecurityCtx&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><strong>SecurityCtx</strong></th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrCreateExplicitPart Code</h3>
<p>The CAAMmrCreateExplicitPart use case is made of a single file located in the 
CAAMmrCreateExplicitPart.m module of the CAAMechanicalModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrCreateExplicitPart.m\</code></p>
<p>It uses another CAA file exported by the CAAPLMClientAdapter.edu framework:</p>
<p>CAAAdpCreateCloseSession.cpp =&gt; to create and close a PLM session.</p>
<p><code>InstallRootFolder\CAADoc\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
	<li><a href="#Step1">Creating a PLM Session</a></li>
	<li><a href="#Step2">Retrieving the Representation Reference Factory</a></li>
	<li><a href="#Step3">Creating the Representation Reference</a></li>
	<li><a href="#Step4">Retrieving the Part Feature</a></li>
	<li><a href="#Step5">Retrieving the Representation Reference from the Feature</a></li>
	<li><a href="#Step6">Saving the Representation Reference</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a PLM session</h3>
<pre class="code">...
  HRESULT rc = ::<strong>CAAAdpCreateSession</strong>(iArgv[1], iArgv[2], iArgv[3],iArgv[4], iArgv[5]);
...</pre>
<p>Once the count of input arguments is checked, we use the CAAAdpCreateSession function 
exported by the CAAAdpClientAdapter.edu framework. This function creates the session 
with a connection to the input repository [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Representation Reference Factory</h3>
<p>This step consists in retrieving a pointer on the factory that enables to create 
a 3D Shape. This interface is <em>CATIPrdRepresentationReferenceFactory</em>.</p>
<pre class="code">...
<strong>CATIPrdRepresentationReferenceFactory</strong> * pIPLMRepRefFactory = NULL;
rc = <strong>CATPrdFactory::CreatePrdFactory</strong>(IID_CATIPrdRepresentationReferenceFactory,
                                     (void**) &amp;pIPLMRepRefFactory);</pre>
<p>The <code>CreatePrdFactory</code> method of the <em>CATPrdFactory</em> 
class can retrieve several kind of factories for Product Modeler. By specifying 
the IID of the <em>CATIPrdPLMRepresentationReferenceFactory</em> interface as first 
argument, you have a <em>CATIPrdPLMRepresentationReferenceFactory</em> interface pointer 
as output.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Representation Reference</h3>
<p>This step creates a Representation Reference with an associated 3D Shape.</p>
<pre class="code">...
CATIPsiRepresentationReference * pPsiCreatedRepRef  = NULL;  
CATListValCATICkeParm_var EmptyList; 
rc = pIPLMRepRefFactory-&gt;Create3DShape(NULL, EmptyList, pPsiCreatedRepRef);
...</pre>
<p>The first argument is the environment. If the value is NULL, the method will 
use the current one.</p>
<p>The second argument is not used. The name of the Representation Reference is 
automatically generated (the factory takes into account the Business logic scripts).</p>
<p><code>pPsiCreatedRepRef</code> is the output argument, a <em>CATIPsiRepresentationReference</em> 
interface pointer on the created Representation Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Part Feature</h3>
<p>This step has been added to understand how to go from the Representation Reference 
to the Part feature. Two calls are necessary for this step:</p>
<ol>
	<li><a href="#Step41">Retrieving the Specification Container
		</a></li>
	<li><a href="#Step42">Retrieving the Part Feature</a></li>
</ol>
<h4><a name="Step41"></a>Retrieve the Specification Container</h4>
<pre class="code">...
<strong>CATIPLMNavRepReference</strong>_var spRepRef = pPsiCreatedRepRef;
... 	

CATIMmiPrtContainer * piContainer = NULL;
rc = spRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>("CATPrtCont",
                                            IID_CATIMmiPrtContainer,
                                            (void **)&amp;piContainer);

...</pre>
<p>We use the RetrieveApplicativeContainer method of the <em>CATIPLMNavRepReference</em> 
interface to retrieve the specification container. The arguments are:</p>
<ul>
	<li><strong><code>CATPrtCont</code></strong> is the name of the specification container 
		for a 3D Shape- <em>CATIMmiPrtContainer</em> is a specific interface for this 
		CATPrtCont container.</li>
	<li><code>IID_CATIMmiPrtContainer</code> is the IID for the output container.</li>
	<li><code>pContainer</code> is the ouput container.</li>
</ul>
<h4><a name="Step42"></a>Retrieving the Part Feature</h4>
<p>The <code>GetMechanicalPart</code> method of the <em>CATIMmiPrtContainer</em> interface 
enables to retrieve the Part feature.</p>
<p>We can get the name of this feature using the GetAlias method of <em>CATIAlias</em> 
interface.</p>
<pre class="code">...
<strong>CATIMmiMechanicalFeature</strong>_var spMechFeatOnPart ;  
rc = piContainer-&gt;<strong>GetMechanicalPart</strong>(spMechFeatOnPart);
...
CATIAlias_var spAliasOnPart = spMechFeatOnPart ;	
...
cout &lt;&lt;"The Part feature is named:" &lt;&lt; spAliasOnPart-&gt;GetAlias().ConvertToChar() &lt;&lt; endl;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Representation Reference from the Feature</h3>
<p>This step has been added to understand how to retrieve the Representation Reference 
from any feature in the 3D Shape.</p>
<pre class="code">...
CATIPLMComponent_var spPLMCompOnFeat ;
rc = <strong>CATPLMComponentInterfacesServices::GetPLMComponentOf</strong>(spMechFeatOnPart,spPLMCompOnFeat);
...</pre>
<p>We have used the static method <code>GetPLMComponentOf</code> 
of the <em>CATPLMComponentInterfacesServices</em> class.</p>
<p>This method computes the PLM Product Representation Reference whose 3D Shape 
contains our feature.</p>
<p>We can then compare the output, spPLMCompOnFeat, with the PLM Product 
Representation Reference created previously.</p>
<pre class="code">...
int val = spPLMCompOnFeat-&gt;IsEqual(pPsiCreatedRepRef);
if ( 1 != val ) return 1 ;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Saving the Representation 
Reference</h3>
<p>The last step consists in saving the created PLM Representation Reference. Use 
the <code>Save</code> method of the <em>CATAdp</em>Saver class.</p>
<pre class="code">...
CATListPtrCATBaseUnknown pListToSave;
pListToSave.Append(pPsiCreatedRepRef);
 
<strong>CATAdpSaver</strong> saver;
rc = saver.<strong>Save</strong>(&amp;pListToSave);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case uses</p>
<ul>
	<li>The <strong>Create3DShape</strong> method of the <em>CATIPrdPLMRepresentationReferenceFactory</em> 
		interface to create a Representation Reference whose main stream is a 3D 
		shape.</li>
	<li>The <strong>RetrieveApplicativeContainer</strong> method of the <em>
		<strong>CATIPLMNavRepReference</strong></em> interface to retrieve the &quot;<strong>CATPrtCont</strong>&quot; 
		container of the 3D shape.</li>
	<li>The <code><strong>GetMechanicalPart</strong></code> method of the
		<em><strong>CATIMmiPrtContainer</strong></em> interface to retrieve the Part 
		feature.</li>
</ul>
<p>Once you have retrieved the CATPrtCont container, you are inside the Mechanical 
Modeler world, and you can use all the APis of this modeler to create, retrieve, 
modify the mechanical features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrTa3DShape.htm">From the PLM Representation to the 3D 
		Shape</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2010]</td>
		<td>Document updated for V6</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
