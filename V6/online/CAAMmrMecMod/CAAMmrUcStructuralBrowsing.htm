<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a 3D Shape</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Browsing a 3D Shape</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAMmrPartBodyRequest</strong> use 
		case. This use case explains how to navigate through a 3D Shape associated 
		with a PLMRepresentation, from a Mechanical Modeler perspective : browse 
		the 3D Shape from the Part feature down to the topological bodies, result 
		of the Geometrical Features.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrPartBodyRequest Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrPartBodyRequest Do</a></li>
					<li><a href="#How">How to Launch CAAMmrPartBodyRequest</a></li>
					<li><a href="#Where">Where to Find the CAAMmrPartBodyRequest 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you take your first steps in programming with 
Mechanical Modeler APIs. Its main objective is to introduce the Mechanical Modeler 
data structure, and ways to navigate through it. More specifically, you will learn 
how to:</p>
<ul>
	<li>Open a PLM Representation that has an associated 3D Shape [<a href="#References">1</a>].</li>
	<li>Access the Part feature within the 3D Shape [<a href="#References">2</a>].</li>
	<li>Access its Geometrical Feature Sets [<a href="#References">3</a>]
		<ul>
			<li>Body Features.</li>
			<li>Surfacic Feature Sets.</li>
		</ul>
	</li>
	<li>Retrieve the Result Features of the Geometrical Feature Sets [<a href="#References">4</a>].</li>
	<li>Retrieve the Topological Bodies from the Result Features.</li>
</ul>
<p>In brackets are referenced the detailed technical articles that describe the 
concepts addressed in this use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrPartBodyRequest Use Case</h2>
<p>CAAMmrPartBodyRequest is a use case of the CAAMechanicalModeler.edu framework 
that illustrates MechanicalModeler APIs in CATMecModUseItf and CATMecModLiveUseItf 
frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrPartBodyRequest Do</h3>
<p>CAAMmrPartBodyRequest loads in session a PLM Representation and navigates through 
its associated 3D Shape.</p>
<p>The steps involved are:</p>
<ul>
	<li>Load a PLM Representation Reference in session.</li>
	<li>Access the Part Feature within the 3D Shape associated with the Representation.</li>
	<li>Using <em><strong>CATIPartRequest</strong></em> interface
		<ul>
			<li>Retrieve the Body Features.</li>
			<li>Retrieve the Surfacic Feature Sets.</li>
		</ul>
	</li>
	<li>Using <em><strong>CATIBodyRequest</strong></em> and <em><strong>CATIMmiUseGeometricalElement</strong></em> 
		interfaces, display the Topological results for each one the Feature Sets 
		returned by the <em>CATIPartRequest</em> interface.</li>
</ul>
<p>Here is a sample of the<code> CAAMmrPartBodyRequest Representation.</code></p>
<p>(see the <a href="#How">How to Launch CAAMmrPartBodyRequest</a> section for its 
location).</p>
<p><img alt="" height="443" src="images/CAAMmrPartBodyRequest.jpg" width="221"/></p>
<p>The output traces for this Part are the following:</p>
<pre class="code">   CAAMmrPartBodyRequest is opened

   The Part container has been retrieved
   The list of Body Features: , has 2 element(s)
      PartBody
         Count of elements in the result list=5
            Solid.1, its topological result is with the following tag : 474
            Sketch.1, its topological result is with the following tag : 263
            Point.5, its topological result is with the following tag : 10351
            Sketch.3, its topological result is with the following tag : 10507
            Solid.1, its topological result is with the following tag : 10543
      Body.2
         Count of elements in the result list=0

   The list of Surfacic Sets: , has 4 element(s)
      Geometrical Set.2
         Count of elements in the result list=0
      Ordered Geometrical Set.6
         Count of elements in the result list=2
            Point.3, its topological result is with the following tag : 627
            Point.4, its topological result is with the following tag : 633
      Geometrical Set.4
         Count of elements in the result list=2
            Point.6, its topological result is with the following tag : 10714
            Plane.1, its topological result is with the following tag : 11178
      Ordered Geometrical Set.5
         Count of elements in the result list=2
            Sketch.2, its topological result is with the following tag : 9026
            Split.1, its topological result is with the following tag : 9915

The CAAMmrPartBodyRequest use case is ended</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrPartBodyRequest</h3>
<p>To launch CAAMmrPartBodyRequest, you will need to set up the build time environment, 
then compile CAAMmrPartBodyRequest along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">5</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<em>CAAMmrPartBodyRequest</em> <em>Repository</em> <em>Server</em>
<em>User</em> <em>Password</em> <em>SecurityCtx PLMRepType</em> <em>PLMExternalID Version</em>&quot;</code></p>
<pre>where:</pre>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (since use case do not modify the PLM data)</td>
	</tr>
	<tr>
		<th>PLMRepType</th>
		<td>A string representing PLM Representation Type (e.g. VPMRepReference)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Representation reference</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The <code>majorrevision</code> of a PLM Representation reference</td>
	</tr>
</table>
<p>You can directly execute this use case if you know how to locate your own representation 
reference. If not, you can import a 3D XML file supplied in the CAAMechanicalModeler.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\InputData\CAAMmrPartBodyRequest.3dxml</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the representation reference with the following attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: <code>CAAMmrPartBodyRequest</code></li>
	<li><strong>majorrevision</strong> : ---</li>
</ul>
<p>Please refer to article [<a href="#References">5</a>] for how to import such 
a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrPartBodyRequest Code</h3>
<p>The CAAMmrPartBodyRequest use case is made of a single source file named CAAMmrPartBodyRequest.cpp 
located in the CAAMmrPartBodyRequest.m module of the CAAMechanicalModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMechanicalModeler.edu\CAAMmrPartBodyRequest.m\</code></p>
<p>It uses two others CAA files exported by the CAAPLMClientAdapter.edu framework:</p>
<ul>
	<li>CAAAdpCreateCloseSession.cpp =&gt; to create and close a PLM session.</li>
	<li>CAAOpenPLMComponent.cpp =&gt; to open the Representation Reference.</li>
</ul>
<p><code>InstallRootFolder\CAADoc\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAMmrPartBodyRequest:</p>
<ol>
	<li><a href="#Step1">Checking Batch Arguments and Creating the PLM Session</a></li>
	<li><a href="#Step2">Loading the PLM Representation Reference</a></li>
	<li><a href="#Step3">Accessing the Part Feature of the Representation's Associated 
		3D Shape</a></li>
	<li><a href="#Step4">Getting the Geometrical Feature Sets</a></li>
	<li><a href="#Step5">Getting the Geometrical Feature Set Results and the Topology</a></li>
	<li><a href="#Step6">Closing the Session and Exiting</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking Batch Arguments and Creating the PLM Session</h3>
<pre class="code"> HRESULT rc = ::<strong>CAAAdpCreateSession</strong>(iArgv[1], iArgv[2], iArgv[3],iArgv[4], iArgv[5]);</pre>
<p>Once the count of input arguments is checked, we use the <em>CAAAdpCreateSession</em> 
function exported by the CAAAdpClientAdapter.edu framework. This function creates 
the session with a connection to the input repository [<a href="#References">6</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Loading the PLM Representation Reference</h3>
<pre class="code"><strong>CATOmbLifeCycleRootsBag</strong> Bag; 
 rc = ::<strong>CAAOpenPLMComponent</strong>(PLM_RepType, 
                           PLM_ExternalIDValue,
			   VersionValue,
			   IID_CATIPLMComponent,
			   (void**)&amp;piPLMComponentOnPart,
			   Bag, 
		           TRUE);


  <strong>CATIPsiRepresentationLoadMode</strong>_var spLoadModeOn3DShape = piPLMComponentOnPart;
  if (spLoadModeOn3DShape != NULL_var)
    rc = spLoadModeOn3DShape-&gt;<strong>ChangeLoadingMode</strong>(CATIPsiRepresentationLoadMode::EditMode);</pre>
<p>The <em>CAAOpenPLMComponent</em> function, exported by the CAAAdpClientAdapter.edu 
framework, loads the PLM Representation Reference using the input arguments: Refer 
to the Querying, Expanding and Loading a PLM Component use case [<a href="#References">7</a>] 
for details about opening a PLM Representation Reference. <br />
The <em>CAAOpenPLMComponent</em> function loads the Representation Reference in
<code>Visu Mode</code>, it is then necessary to change the loading mode to <code>
Edit Mode</code> using <em>CATIPsiRepresentationLoadMode</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Accessing the Part Feature of the Representation's Associated 
3D Shape</h3>
<pre class="code"><strong>CATIPLMNavRepReference</strong>_var spRepRef = piPLMComponentOnPart;
...
    		
<strong>CATIMmiPrtContainer</strong> * piPartContainer = NULL ;
rc = spRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>("CATPrtCont",
                                            IID_CATIMmiPrtContainer,
                                            (void **)&amp;piPartContainer);
...

<strong>CATIMmiMechanicalFeature</strong>_var spMechFeatOnPart;  
rc = piPartContainer-&gt;<strong>GetMechanicalPart</strong>(spMechFeatOnPart);</pre>
<p>We retrieve the specificiation container, CATPrtCont, using the
<strong>RetrieveApplicativeContainer</strong> method of the <em><strong>CATIPLMNavRepReference</strong></em>
interface.</p>
<p>We use the <em><strong>CATIMmiPrtContainer</strong></em> interface 
to access the Part feature. The <code><strong>GetMechanicalPart</strong></code> 
method returns a <em>CATIMmiMechanicalFeature_var</em> interface smart pointer on 
this feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Getting the Geometrical Feature Sets</h3>
<pre class="code"><strong>CATIPartRequest</strong> *pPartAsRequest = 0;
  rc = spMechFeatOnPart-&gt;QueryInterface(IID_CATIPartRequest, (void**)&amp;pPartAsRequest) ;
  ...
   
  const CATUnicodeString <strong>stdContext</strong>(&quot; &quot;);  
  	  
  
  CATLISTV(CATBaseUnknown_var) BodyList;  
  pPartAsRequest-&gt;<strong>GetSolidBodies</strong>(stdContext, BodyList);
 
  <strong>PrintGeometricalFeaturesSetsResult</strong>(BodyList);

 
  CATLISTV(CATBaseUnknown_var) SurfacicSetList;  
  pPartAsRequest-&gt;<strong>GetSurfBodies</strong>(stdContext, SurfacicSetList);
  
  <strong>PrintGeometricalFeaturesSetsResult</strong>(SurfacicSetList);

</pre>
<p>The <em><strong>CATIPartRequest</strong></em> interface enables to retrieve the 
Geometrical Feature Sets aggregated by the Part. In the precedent code sample, we 
have used two methods that enable to access either the Bodies, either the Surfacic 
Feature Sets : <code><strong>GetSolidBodies</strong></code>, <code>
<strong>GetSurfBodies</strong></code>. The output of these methods depends on the 
fact that the Set is ordered or not:</p>
<ul>
	<li>In the case of ordered sets (Hybrid Body or Ordered Geometrical Set), the 
		output list holds only the Sets directly aggregated by the Part.</li>
	<li>If the case of non ordered sets (Solid Body or Geometrical Set), the 
		output list holds all the Sets within the 3D Shape .</li>
</ul>
<p>The context parameter enables to filter the result in the case of Sheet Metal 
applications, for which Mechanical Modeler maintains additional topological 
bodies that represent the parts in their unfolded configuration. Those topological 
bodies can be accessed through the string &quot;Unfolded&quot;. A blank value is 
the same as <span id="M94"><span class="comment">&quot;MfDefault3DView&quot; value, 
it enables to retrieve the result containing</span></span> standard topological 
bodies.</p>
<p><strong>PrintGeometricalFeaturesSetsResult</strong> is a dedicated function that retrieves 
the result features of the Geometrical Feature Sets and for each feature, retrieves 
the associated topological body.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Getting the Geometrical Feature Set Results and the Topology</h3>
<pre class="code">void PrintGeometricalFeaturesSetsResult(const CATLISTV(CATBaseUnknown_var) &amp;iSet) 
{
  const CATUnicodeString stdContext(&quot;&quot;); 

  for(int curSetIdx=1; curSetIdx&lt;=iSet.Size(); curSetIdx++)
  {
      CATBaseUnknown_var CurrentSet = iSet[curSetIdx] ;
      if ( NULL_var == CurrentSet ) break ;

      CATLISTV(CATBaseUnknown_var) pListResult;

      <strong>CATIBodyRequest</strong> *pBodyRequestOnCurrentSet = NULL;
      HRESULT rc = CurrentSet-&gt;QueryInterface(IID_CATIBodyRequest, (void**)&amp;pBodyRequestOnCurrentSet);
      if ( SUCCEEDED(rc) )
      {  
         rc = pBodyRequestOnCurrentSet-&gt;<strong>GetResults</strong>(stdContext, pListResult);</pre>
<p>The input of this function is a list of Geometrical Feature Sets.For each Set, 
the <code><strong>GetResults</strong></code> method of the <em><strong>CATIBodyRequest</strong></em>
interface is called. The output is a list of features holding a topological 
result. The context parameter is the same as for <em>CATIPartRequest</em> interface, 
for the standard context you can use an empty string or &quot;MfDefault3DView&quot;.</p>
<pre class="code">...
         for(int curFeatIdx=1; curFeatIdx&lt;=SizeList; curFeatIdx++)
         { 
            CATBaseUnknown_var CurrentFeat = pListResult[curFeatIdx] ;
            ...
            CATIAlias_var aliasOnCurElt = CurrentFeat ;
            
            cout &lt;&lt; &quot;            &quot; &lt;&lt; aliasOnCurElt-&gt;GetAlias().ConvertToChar() ;
            
            <strong>CATIMmiUseGeometricalElement</strong> *pCurFeatOnGeomElt = NULL ;
            rc = CurrentFeat-&gt;QueryInterface(IID_CATIMmiUseGeometricalElement, 
                                                                 (void**)&amp;pCurFeatOnGeomElt);
            if( SUCCEEDED(rc) )
            {       
                  CATBody_var ResultBody = pCurFeatOnGeomElt-&gt;<strong>GetBodyResult</strong>();
                  
                  if ( NULL_var != ResultBody )
                  {
                     CATICGMObject *pCurTopo = 0;
                     rc=ResultBody-&gt;QueryInterface(IID_CATICGMObject,(void**)&amp;pCurTopo);
                               
                         unsigned long curResultTag = pCurTopo-&gt;GetPersistentTag();
                         cout &lt;&lt;&quot;  ,Its contains a topological result with the following tag : &quot; ;
                         cout &lt;&lt; curResultTag &lt;&lt; endl;</pre>
<p>For each element of the list returned by the <code>GetResults</code> method, 
the associated CATBody is retrieved using the <code><strong>GetBodyResult</strong>
</code>method of the <em><strong>CATIMmiUseGeometricalElement</strong></em> 
interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Closing the Session and Exiting</h3>
<pre class="code">...
   rc = ::CAAAdpCloseSession();
...</pre>
<p>This last instruction closes the session. <em>CAAAdpCloseSession</em> only calls 
the <code>ClosePLMSession</code> method of the <em>CATPLMSessionServices</em> class.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has shown you how to navigate through a 3D Shape, from the Part 
Feature down to the topological results.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAMmrTa3DShape.htm">From the PLM Representation to the 3D 
		Shape</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAMmrTaContentsSpecCont0.htm">The Part Feature</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAMmrTaContentsSpecCont1.htm">The Geometrical Feature Sets</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMmrTaSpecResultForMechFeat.htm">Specification/Result Mechanism 
		Applied to Mechanical Features</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Dec 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Jun 2004]</td>
		<td>Document updated to take R13/R14 novelties into account</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Jan 2010]</td>
		<td>Document updated for V6 novelties</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
