<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Checking on Local Slack Values of a Branch</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Checking on Local Slack Values of a Branch</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAABranchLocalSlack</strong> use case. 
		This use case explains whether the local slack is applied and its values 
		on branch portion.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAABranchLocalSlack Use Case</a>
				<ul>
					<li><a href="#What">What Does CAABranchLocalSlack Do</a></li>
					<li><a href="#How">How to Launch CAABranchLocalSlack</a></li>
					<li><a href="#Where">Where to Find the CAABranchLocalSlack Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first step in programming with 
CATIA EHD Interfaces. Its main intent is to explain whether the local slack is applied 
and how to retrieve the value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAABranchLocalSlack Use Case</h2>
<p><strong>CAABranchLocalSlack.m</strong> is a use case of the <strong>CAAElecHarnessItf.edu</strong> 
framework that illustrates the <strong>CATIA EHD</strong> Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAABranchLocalSlack Do</h3>
<p>CAABranchLocalSlack use case explains whether the local slack is applied on the 
Branch and retrieve the value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAABranchLocalSlack?</h3>
<p>To launch CAABranchLocalSlack, you are required to set up the build time environment, 
then compile CAABranchLocalSlack along with its prerequisites, set up the run time 
environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAABranchLocalSlack Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>PLM1.</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI.</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type of a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>
<p>The input model is retrieved by importing the <strong>CAABranchLocalSlack.3dxml</strong> 
file from the <strong>CAAElecHarnessItf.edu</strong> framework.</p>
<p><code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\InputData\CAABranchLocalSlack.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li><a><code><strong>PLM_ExternalID</strong></code></a>: <code>Product-1857478072</code></li>
	<li><a><code><strong>Version</strong></code></a>: ---</li>
</ul>
<p>
<img alt="Sample Product" height="244" src="images/CAABranchLocalSlack.jpg" width="1010"/></p>
<p>Here we have provided a 3D XML file only for the convenience of 
the user so that one doesn't have to recreate the input model. It can simply be 
imported from this file, and used for the execution further. But the user does have 
the liberty to use any input model of his choice, based on his discretion. The image 
above shows the product structure used for this use-case. Please note the "Name" 
field for a product is now refered as attribute PLM_ExternalID.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and re-import such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAABranchLocalSlack Code?</h3>
<p>The CAABranchLocalSlack sample is made of a single class named CAABranchLocalSlack 
located in the CAABranchLocalSlack.m module of the CAAElecHarnessItf.edu framework:
<code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\CAABranchLocalSlack.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>CAAAdpOpenProduct</em></td>
		<td>Class to open a product reference given its identifying attributes (PLM_ExternalID, 
		V_version) and returns the requested interface on the reference. The modeler 
		is PRODUCT.</td>
	</tr>
	<tr>
		<td><em>CATIEhiGeoHarness</em></td>
		<td>Interface to manage Electrical Geometry.</td>
	</tr>
	<tr>
		<td><em>CATIEhiHarnessBundle</em></td>
		<td>Interface to manage Electrical Branch Geometry.</td>
	</tr>
	<tr>
		<td><em>CATIEhiBranch</em></td>
		<td>Interface to manage Branch.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first create the Electrical environment and determine whether local 
slack is applied on the branch and retrieve its value. There are 8 logical steps 
in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">The necessary input arguments to start CATIA session</a>
		</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Opening and expanding the "Product-1857478072" Model 
		(arg[7]) and Electrical Branch Geometry 3DPart in Design Mode</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Listing the Branches in Electrical Branch Geometry</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Determining whether the local Slack is applied on the 
		Branch and to retrieve its value</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Bag Emptying Operation</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>The necessary input arguments to start CATIA session</h3>
<pre class="code">...
<span class="keyword">if</span> (9 != argc)
{
  cout &lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;CAABranchLocalSlack &lt;Repository&gt; &lt;Server&gt;&lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&quot;</span>&lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;Repository: The repository name (like PLM1)which is mandatory.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Server: The URL string used for connection,expected format is 'protocol://ServerName:PortNumber/RootURI.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;User: The user name for connection.&quot;</span> &lt;&lt;endl ;
  cout &lt;&lt;<span class="string">&quot;Password: The user password for connection.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;SecurityCtx: A string representing the security context(Role.Organization.Project ). Choose Role as Reviewer(as the use case doesn't modify the PLM Data).&quot;</span>&lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Version: The version attribute value of the reference to be opened.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLMType: A PLM Type of a PLM Reference or PLM Representation Reference. &quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLM_ExternalID: The PLM_ExternalID of a PLM  Reference or PLM Representation Reference be browsed.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  <span class="keyword">goto</span> EscapeWay;
}

strVersion = argv[6];
strPLMType = argv[7];
strRootPrdName = argv[8];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection Parameters initialization.</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Repository&quot;</span>, argv[1]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 2;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Server&quot;</span>, argv[2]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 3;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserID&quot;</span>, argv[3]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 4;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserPasswd&quot;</span>, argv[4]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 5;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;SecurityCtx&quot;</span>, argv[5]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 6;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 7;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Opening and expanding the &quot;Product-1857478072&quot; 
Model (arg[7]) and Electrical Branch Geometry 3DPart in Design Mode</h3>
<pre class="code">...
 //-----------------------------------------------------------------------
  // - Query/Open/Expand of the reference product with its associated representation
  //-----------------------------------------------------------------------
  hr = ::CAAOpenPLMComponent(strPLMType, strRootPrdName, strVersion, IID_CATIPLMProducts,(void **)&amp;pPLMPrdRootProduct, Bag, TRUE);
 <span class="keyword">if</span>  ((FAILED(hr)) || (NULL == pPLMPrdRootProduct))
  {
    retCode = 8;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pPLMPrdRootProduct-&gt;Iterator(pPrdIteratorRootPrd);
 <span class="keyword">if</span>  ((FAILED(hr)) || (NULL == pPrdIteratorRootPrd))
  {
    retCode = 9;
    <span class="keyword">goto</span> EscapeWay;
  }
  <span class="comment">// iterate on root product to find out the GeoHarness inside it.</span>
  <span class="keyword">while</span> (SUCCEEDED(pPrdIteratorRootPrd-&gt;Next(pUnkElecGeometryInst)) &amp;&amp; (NULL != pUnkElecGeometryInst) &amp;&amp; (NULL == pIEhiGeoHarness))
  {
    hPrdObjElecGeometry = pUnkElecGeometryInst;
   <span class="keyword">if</span> (NULL_var != hPrdObjElecGeometry)
    {
      hr = hPrdObjElecGeometry-&gt;GetReferenceObject(pUnkElecGeometryRef);
       <span class="comment">// check if the product inside root product is a Geo Harness</span>
       <span class="keyword">if</span> ((SUCCEEDED(hr)) &amp;&amp; (NULL != pUnkElecGeometryRef))
        pUnkElecGeometryRef-&gt;QueryInterface(IID_CATIEhiGeoHarness, (void **) &amp; pIEhiGeoHarness);

      <span class="keyword">if</span> (NULL != pUnkElecGeometryRef)
      {
        pUnkElecGeometryRef-&gt;Release();
        pUnkElecGeometryRef = NULL;
      }
    }

    pUnkElecGeometryInst-&gt;Release();
    pUnkElecGeometryInst = NULL;
  }

  <span class="comment">// check if GeoHarness is retrieved</span>
  <span class="keyword">if</span> (NULL == pIEhiGeoHarness)
  {
    retCode = 10;
    <span class="keyword">goto</span> EscapeWay;
  }

  // after retrieval of GeoHarness, then retrieve the sub products to reach the Harness Bundles and Devices inside Geo Harness
  hPLMPrdElecGeometry = pIEhiGeoHarness;
  <span class="keyword">if</span> (NULL_var == hPLMPrdElecGeometry)
  {
    retCode = 11;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hPLMPrdElecGeometry-&gt;Iterator(pPrdIteratorElecGeometry);
  <span class="keyword">if</span> (FAILED(hr) || (NULL == pPrdIteratorElecGeometry))
  {
    retCode = 12;
    <span class="keyword">goto</span> EscapeWay;
  }

  <span class="keyword">while</span> (SUCCEEDED(pPrdIteratorElecGeometry-&gt;Next(pUnkElecGeometryChildren)) &amp;&amp; (NULL != pUnkElecGeometryChildren))
  {
    hr = SwitchToDesignMode(pUnkElecGeometryChildren);
    <span class="keyword">if</span> (FAILED(hr))
    {
      retCode = 13;
      <span class="keyword">goto</span> EscapeWay;
    }

    <span class="keyword">if</span> (NULL == pIEhiHarnessBundle)
    {
      hPrdObjElecBranchGeometry = pUnkElecGeometryChildren;
      <span class="keyword">if</span> ( NULL_var != hPrdObjElecBranchGeometry)
      {
        hr = hPrdObjElecBranchGeometry-&gt;GetReferenceObject(pUnkElecBranchGeometryProductRef);

        <span class="keyword">if</span> ((SUCCEEDED(hr)) &amp;&amp; (NULL != pUnkElecBranchGeometryProductRef))
          pUnkElecBranchGeometryProductRef-&gt;QueryInterface(IID_CATIEhiHarnessBundle,(<span class="keyword">void</span> **) &amp;pIEhiHarnessBundle);

        <span class="keyword">if</span> (NULL != pUnkElecBranchGeometryProductRef)
        {
          pUnkElecBranchGeometryProductRef-&gt;Release();
          pUnkElecBranchGeometryProductRef = NULL;
        }
      }
    }

    pUnkElecGeometryChildren-&gt;Release();
    pUnkElecGeometryChildren = NULL;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Listing the Branches in Electrical Branch Geometry</h3>
<pre class="code">...
<span class="comment">
//-----------------------------------------------------------------------
  // - Listing the Branches in Electrical Branch Geometry
  //-----------------------------------------------------------------------</span>
  <span class="keyword">if</span> ( NULL == pIEhiHarnessBundle )
  {
    retCode = 14;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pIEhiHarnessBundle-&gt;ListBranches(&amp;pListUnkBranches);
  <span class="keyword">if</span> ( ( FAILED(hr) ) || (NULL == pListUnkBranches) || (3 != (pListUnkBranches-&gt;Size())))
  {
    retCode = 15;
    <span class="keyword">goto</span> EscapeWay;
  }

  hUnkBranch = (*pListUnkBranches)[1];
  <span class="keyword">if</span>(NULL_var == hUnkBranch)
  {
    retCode = 16;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **) &amp;pEhiBranch1);
  <span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiBranch1))
  {
    retCode = 17;
    <span class="keyword">goto</span> EscapeWay;
  }

  hUnkBranch = (*pListUnkBranches)[2];
  <span class="keyword">if</span> (NULL_var == hUnkBranch)
  {
    retCode = 18;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **) &amp;pEhiBranch2);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pEhiBranch2))
  {
    retCode = 19;
    <span class="keyword">goto</span> EscapeWay;
  }

  hUnkBranch = (*pListUnkBranches)[3];
  <span class="keyword">if</span> (NULL_var == hUnkBranch)
  {
    retCode = 20;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **) &amp;pEhiBranch3);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pEhiBranch3))
  {
    retCode = 21;
    <span class="keyword">goto</span> EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Determining whether the local Slack is applied on the Branch 
and to retrieve its value</h3>
<pre class="code">...
<span class="comment">
//-------------------------------------------------------------------------
// - Determining whether the local Slack is applied on the Branch and to retrieve its value
//-------------------------------------------------------------------------</span>
  hr = pEhiBranch1-&gt;IsLocalSlackApplied(bIsLocalSlackApplied);
  <span class="keyword">if</span> ((E_FAIL == hr) || (FALSE == bIsLocalSlackApplied))
  {
    retCode = 22;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pEhiBranch1-&gt;ListLocalSlackValues( hListLocalSlack);
  hLocalSlackatPosition = NULL_var;
  hLocalSlackatPosition = hListLocalSlack[1];
  <span class="keyword">if</span> ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span>  (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr)|| (0.00000000000000000 != oLocalSlackValue))
  {
    retCode = 23;
     <span class="keyword">goto</span> EscapeWay;
  }

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[2];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span> (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr)|| (0.0010000000000000000 != oLocalSlackValue))
  {
    retCode = 24;
     <span class="keyword">goto</span> EscapeWay;
  }
  
  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[3];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span> (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr) || (0 != oLocalSlackValue))
  {
    retCode = 25;
     <span class="keyword">goto</span> EscapeWay;
  }

  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[4];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span> (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr) || (0.010000000000000000 != oLocalSlackValue))
  {
    retCode = 26;
    <span class="keyword">goto</span> EscapeWay;
  }

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[5];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span> (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }
  <span class="keyword">if</span> ((S_OK != hr) || (0.00000000000000000 != oLocalSlackValue))
  {
    retCode = 27;
    <span class="keyword">goto</span> EscapeWay;
  }

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[6];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var != hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition-&gt; Value());
    <span class="keyword">if</span> (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }
  <span class="keyword">if</span> ((S_OK != hr)||(0.00000000000000000 != oLocalSlackValue))
  {
    retCode = 28;
    <span class="keyword">goto</span> EscapeWay;
  }

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[7];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var != hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span>  (NULL_var != hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr)|| (0.0030000000000000001 != oLocalSlackValue))
  {
    retCode = 29;
     <span class="keyword">goto</span> EscapeWay;
  }

  hr = pEhiBranch2-&gt;IsLocalSlackApplied(bIsLocalSlackApplied);
  <span class="keyword">if</span>  ((E_FAIL != hr) || (TRUE == bIsLocalSlackApplied))
  {
    retCode = 30;
     <span class="keyword">goto</span> EscapeWay;
  }

  hr = pEhiBranch2-&gt;ListLocalSlackValues( hListLocalSlack);
  nRouteSize = hListLocalSlack.Size();
  <span class="keyword">if</span> ((E_FAIL != hr)|| (0 != nRouteSize))
  {
    retCode = 31;
     <span class="keyword">goto</span> EscapeWay;
  }

  hr = pEhiBranch3-&gt;IsLocalSlackApplied(bIsLocalSlackApplied);
  <span class="keyword">if</span>  ((E_FAIL != hr) || (TRUE == bIsLocalSlackApplied))
  {
    retCode = 32;
     <span class="keyword">goto</span> EscapeWay;
  }

  hr = pEhiBranch3-&gt;ListLocalSlackValues(hListLocalSlack);
  nRouteSize = hListLocalSlack.Size();

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[1];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var != hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span>  (NULL_var!=hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr)|| (0.00000000000000000 != oLocalSlackValue))
  {
    retCode = 33;
     <span class="keyword">goto</span> EscapeWay;
  }

  hLocalSlackatPosition = NULL_var;
  oLocalSlackValue = 0.;
  hLocalSlackatPosition = hListLocalSlack[2];
  <span class="keyword">if</span>  ((SUCCEEDED(hr)) &amp;&amp; (NULL_var!= hLocalSlackatPosition) &amp;&amp; (hLocalSlackatPosition -&gt; IsSet()))
  {
    CATICkeInst_var hLocalSlackInst(hLocalSlackatPosition -&gt; Value());
    <span class="keyword">if</span> (NULL_var!=hLocalSlackInst)
    {
      oLocalSlackValue = hLocalSlackInst-&gt;AsReal();
    }
  }

  <span class="keyword">if</span> ((S_OK != hr)|| (0.00000000000000000 != oLocalSlackValue))
  {
    retCode = 34;
     <span class="keyword">goto</span> EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Bag Emptying Operation</h3>
<pre class="code">...
hr = Bag.RemoveAll();
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
<span class="keyword">if</span> (FAILED(hr)) 
{
  cout &lt;&lt; <span class="string">&quot;The SESSION is not Closed&quot;</span>&lt;&lt;endl;
  retCode = 50;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This Use Case explain how to check the local slack values of a branch.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="Reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="History">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
