<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Computing FLEX Segment Moduli</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Computing FLEX Segment Moduli</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case explains how to create your proper algorithm to compute 
		the Equivalent Young Modulus, Equivalent RatioToBend and Equivalent RatioToTwist 
		of a segment. We call &quot;segment&quot; a portion of a bundle segment where the 
		physical properties are constant.</p>
		<ul>
			<li><a href="#Learn">Modifying the Interface Dictionary of the Framework 
			CAAElecHarnessItf.edu</a></li>
			<li><a href="#UseCase">Building the CAAEhiFLEXSegmentModuliImpl Component</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>Modifying the Interface Dictionary of the Framework CAAElecHarnessItf.edu</h2>
<p>The dictionary is called CAAElecHarnessItf.edu.dic and is located in the following 
path:</p>
<p><code>InstallRootFolder\CAAElecHarnessItf.edu\CNext\code\dictionary</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>To activate your code, you have to uncomment the following line:</p>
<pre>#ElecBranchable           CATIEhiFLEXSegmentModuli         libCAAEhiFLEXSegmentModuliImpl</pre>
<p>The interface dictionary declares that the <em>ElecBranchable</em> object implements 
the <em>CATIEhiFLEXSegmentModuli </em>interface and that the code to load into memory 
to use this interface is located in the libCAAEhiFLEXSegmentModuliImpl shared library 
or DLL. To have more details, you can refer to the referenced articles [<a href="#References">1</a>] 
and [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>Building the CAAEhiFLEXSegmentModuliImpl Component</h2>
<p>CAAEhiFLEXSegmentModuliImpl is a CATIA component exposing the CATIEhiFLEXSegmentModuli 
interface. For the definition of components and interfaces, you can refer to the 
referenced articles [<a href="#References">1</a>] and [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEhiFLEXSegmentModuliImpl Do</h3>
<p>The goal of CAAEhiFLEXSegmentModuliImpl is to compute the Equivalent Young Modulus, 
the Equivalent RatioToBend and the Equivalent RatioToTwist of a segment function 
of the wires, wiregroups and the protections covering a segment and its geometrical 
characteristics.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Build CAAEhiFLEXSegmentModuliImpl</h3>
<p>To launch CAAEhiFLEXSegmentModuliImpl, you will need to set up the build time 
environment, then compile CAAEhiFLEXSegmentModuliImpl  along with its prerequisites 
as described in [<a href="#References">3</a>]</p>
<p>To do that, you must use the mkmk command (refer to [<a href="#References">4</a>] 
for more explanations).</p>
<pre class="code">$ cd ws_root_dir/CAAElecHarnessItf.edu/CAAEhiFLEXSegmentModuliImpl.m
$ mkmk</pre>
<p>or</p>
<pre class="code">$ cd ws_root_dir/CAAElecHarnessItf.edu
$ mkmk CAAEhiFLEXSegmentModuliImpl.m</pre>
<p>After, to test your component, you will have to run CATIA typing 3DEXPERIENCE on the 
command line (refer to [<a href="#References">5</a>]), and to follow the scenario 
given in the referenced chapter [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEhiFLEXSegmentModuliImpl Code</h3>
<p>CAAEhiFLEXSegmentModuliImpl code is located in the CAAEhiFLEXSegmentModuliImpl.m 
module of the CAAElecHarnessItf.edu framework:</p>
<p><code>InstallRootFolder\CAAElecHarnessItf.edu\CAAEhiFLEXImpl.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed. It is made of a unique source file named
<strong>CAAGetSegmentFLEXEquivalentModulusExt.cpp</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Description of the Extension Class</h3>
<p>The extension class is called CAAGetSegmentFLEXEquivalentModulusExt.h and is 
located in the LocalInterfaces of the CAAEhiFLEXSegmentModuliImpl.m module of the 
CAAElecHarnessItf.edu framework:</p>
<p><code>InstallRootFolder\CAAElecHarnessItf.edu\CAAEhiFLEXSegmentModuliImpl.m\LocalInterfaces</code></p>
<pre class="code">#ifndef CAAGetSegmentFLEXEquivalentModulusExt_H
#define CAAGetSegmentFLEXEquivalentModulusExt_H

#include &quot;CATBaseUnknown.h&quot;
#include &quot;CATIEhiFLEXSegmentModuli.h&quot;

//-----------------------------------------------------------------------

/**
 * Class extending the object &quot;ElecBranchable&quot;.
 * &lt;br&gt;
 * It implements the interfaces :
 * &lt;ol&gt;
 * &lt;li&gt;@see ElecHarnessItf.CATIEhiFLEXSegmentModuli
 * &lt;/ol&gt;
 * Using this prefered syntax will enable mkdoc to document your class.
 */

class CAAGetSegmentFLEXEquivalentModulusExt: public CATBaseUnknown
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
     CAAGetSegmentFLEXEquivalentModulusExt();
     virtual ~CAAGetSegmentFLEXEquivalentModulusExt();

     /**
     * Implements the method GetFLEXEquivalentModulus from the interface CATIEhiFLEXSegmentModuli
     *
     * Returns the value of the Equivalent Young Modulus (in N/m2) and 
     * Equivalent RatioToBend and Equivalent RatioToTwist function of
     * the values of the wires/wiregroups and  protections contained
     * in it. Also function of the profile type and dimensions of the
     * segment, and the flexibility of the bundle segment.
     *
     * @param ipUnkSegment
     *  the segment for which the above mentioned constants value need to be calculated.
     *
     * @param iProfileLength1
     *  The major dimension of the profile (in mm).
     *
     * @param iProfileLength2
     *  The minor dimension of the profile (in mm).
     *
     * @param iSegmentFlexibility
     *   Segment Flexibility depending on the material used for the segment.
     *
     * @param oYoungModulusEquivalent
     *  The value of the equivalent Young Modulus (in N/m2) of the segment.
     *
     * @param oEquivalentRatioToBend
     *  The value of the equivalent Ratio-To-Bend of the segment.
     *
     * @param oEquivalentRatioToTwist
     *  The value of the equivalent Ratio-To-Twist of the segment.
     */

     HRESULT GetFLEXEquivalentModulus (CATBaseUnknown * ipUnkSegment, CATEhiProfileType iSegProfile,
                                       double iProfileLength1, double iProfileLength2,
                                       int iSegmentFlexibility, double &amp;oYoungModulusEquivalent,
                                       double &amp; oEquivalentRatioToBend, double &amp;oEquivalentRatioToTwist);

  private:

  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  CAAGetSegmentFLEXEquivalentModulusExt (CAAGetSegmentFLEXEquivalentModulusExt&amp;);
  CAAGetSegmentFLEXEquivalentModulusExt&amp; operator = (CAAGetSegmentFLEXEquivalentModulusExt&amp;);

};

//-----------------------------------------------------------------------

#endif</pre>
<p>For more details about what is an extension class, you can refer to the referenced 
article [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Description of the Implemented Method</h3>
<p>The code of the implemented method is contained in the source file named
<strong>CAAGetSegmentFLEXEquivalentModulusExt.cpp.</strong></p>
<p>Firstly we include the adhesion of our class CAAGetSegmentFLEXEquivalentModulusExt 
with interface CATIEhiFLEXSegmentModuli as like:</p>
<pre class="code">#include &quot;TIE_CATIEhiFLEXSegmentModuli.h&quot;
TIE_CATIEhiFLEXSegmentModuli(CAAGetSegmentFLEXEquivalentModulusExt);

CATImplementClass(CAAGetSegmentFLEXEquivalentModulusExt, CodeExtension, CATBaseUnknown, ElecBranchable);</pre>
<p>The unique method is called <strong>GetFLEXEquivalentModulus</strong>. </p>
<p>It takes as input the following arguments:</p>
<ul>
	<li>Segment for which the above mentioned constants are required to be calculated.</li>
	<li>Segment Profile Type</li>
	<li>Segment Profile Dimensions</li>
	<li>Value flexibility of the flexibility slider of the corresponding segment.</li>
</ul>
<p>It returns the value of the following constants for the input segment:</p>
<ul>
	<li>Equivalent Young Modulus (in N/m2).</li>
	<li>Equivalent RatioToBend.</li>
	<li>Equivalent RatioToTwist.</li>
</ul>
<p>The calculation is based upon the desired combination of all the input parameters.</p>
<p>First we initialize the HRESULT and the respective size of the list of routable 
objects and the list of protections.</p>
<pre class="code">...
//====================================================================================
// Implementation of the method - CATIEhiFLEXSegmentModuli::GetFLEXEquivalentModulus
//====================================================================================
HRESULT CAAGetSegmentFLEXEquivalentModulusExt::GetFLEXEquivalentModulus (CATBaseUnknown * ipUnkSegment,CATEhiProfileType iSegProfile, 
                                                                         double  iProfileLength1, double  iProfileLength2,
                                                                         int iSegmentFlexibility, double &amp;oYoungModulusEquivalent,
                                                                         double &amp; oEquivalentRatioToBend, double &amp;oEquivalentRatioToTwist)
{
  // 1. Check the validity of input variables.
  if(NULL == ipUnkSegment) return E_INVALIDARG;

  // 2. Initialize output
  oYoungModulusEquivalent = 1.24 * 10e12;
  oEquivalentRatioToBend  = 1 ;
  oEquivalentRatioToTwist = 10;

  // 3. Initialize the variables required further in this method.
  HRESULT RC = E_FAIL;
  CATIEhiSegment * pIEhiSegment = NULL;
  RC = ipUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(void **)&amp; pIEhiSegment);
  ...
}</pre>
<p>Then we structure our code based on the type of profile given as input.</p>
<pre class="code">...
if(iProfile == Circular)
{
  ...
}
else if(iProfile == Elliptical)
{
  ...
}
else if(iProfile == Rectangular)
{
  ...
}
else
{
  ...
}
...</pre>
<p>Concerning the circular type of profile we based the calculation on the number 
of protections covering in the segment and their type.</p>
<pre class="code">if(iProfile == Circular)
{
  CATListValCATBaseUnknown_var * pListProtectionsOnSegment = NULL;
  RC = pIEhiSegment-&gt;ListProtectiveCovering(&amp;pListProtectionsOnSegment);
  int nbOfProtections = pListProtectionsOnSegment? pListProtectionsOnSegment-&gt;Size():0;
  for(int index = 1; index &lt;= nbOfProtections; index++)
  {
    CATBaseUnknown_var hUnkProtectiveCovering = (*pListProtectionsOnSegment )[index];
    if(NULL_var != hUnkProtectiveCovering)
    {
      CATIEhiProtectiveCovering * pIEhiProtectiveCovering = NULL;
      RC = hUnkProtectiveCovering-&gt;QueryInterface(IID_CATIEhiProtectiveCovering,(void **)&amp;pIEhiProtectiveCovering);
      if((SUCCEEDED(RC))&amp;&amp; (NULL != pIEhiProtectiveCovering))
      {
        CATUnicodeString strProtectionType = &quot;&quot;;
        RC = pIEhiProtectiveCovering-&gt;GetType(strProtectionType);
        if(strProtectionType == &quot;ElecTapeProtection&quot;) 
        { 
          if(oEquivalentRatioToBend &lt; 1) 
            oEquivalentRatioToBend = oEquivalentRatioToBend * 3;

          oEquivalentRatioToTwist = oEquivalentRatioToTwist * 2;
        }
        else
        {
          if(oEquivalentRatioToBend &lt;= 1/100 &amp;&amp; oEquivalentRatioToTwist &lt;= 100)
          {
            oEquivalentRatioToBend  = oEquivalentRatioToBend  * 100;
            oEquivalentRatioToTwist = oEquivalentRatioToTwist * 10;
          }
          else
          {
            oEquivalentRatioToBend  = 1; 
            oEquivalentRatioToTwist = 100; 
          }
        }
        pIEhiProtectiveCovering-&gt;Release();
        pIEhiProtectiveCovering = NULL;
      }
    }
  }
  if(NULL != pListProtectionsOnSegment)
  {
    delete pListProtectionsOnSegment;
    pListProtectionsOnSegment = NULL;
  }
  RC = S_OK; 
}
</pre>
<p>Concerning the elliptical type of profile we based the calculation on its dimensions 
and the Flexibility slider.</p>
<pre class="code">else if(iProfile == Elliptical) 
{ 
  if( (iProfileLength1 &lt; 10) &amp;&amp; (iProfileLength2 &gt; 2) )
 {
    oYoungModulusEquivalent = 10e07;
    oEquivalentRatioToBend  = 1/100;
    oEquivalentRatioToTwist = 10;
  }
  else
  {
    if(iSegmentFlexibility &lt; 3)
    {
      oYoungModulusEquivalent = 1.24*10e11;
      oEquivalentRatioToBend  = 1;
      oEquivalentRatioToTwist = 100;
    }
    else
    {
      oYoungModulusEquivalent  = 10e8;
      oEquivalentRatioToBend   = 1/2;
      oEquivalentRatioToTwist  = 10;
    }
  }
  RC = S_OK;
}
</pre>
<p>Concerning the rectangular type of profile we based the calculation on the number 
of routable objects in the segment.</p>
<pre class="code">else if(iProfile == Rectangular) 
{ 
  oEquivalentRatioToBend  = 1/10;
  oEquivalentRatioToTwist = 10;

  int nbOfWiresWireGroups = 0;

  CATIEwrRouteSegment * pIEwrRouteSegment = NULL;
  RC = pIEhiSegment-&gt;QueryInterface(IID_CATIEwrRouteSegment,(void **)&amp;pIEwrRouteSegment);

  if((SUCCEEDED(RC)) &amp;&amp; (NULL != pIEwrRouteSegment))
  {
    CATListValCATBaseUnknown_var * pListWireOrWGsRoutedThroughSeg = NULL;
    RC = pIEwrRouteSegment-&gt;ListConductors(pListWireOrWGsRoutedThroughSeg);
    nbOfWiresWireGroups = pListWireOrWGsRoutedThroughSeg ? pListWireOrWGsRoutedThroughSeg-&gt;Size(): 0;
    if(NULL != pListWireOrWGsRoutedThroughSeg)
    {
      delete pListWireOrWGsRoutedThroughSeg;
      pListWireOrWGsRoutedThroughSeg = NULL;
    }
    pIEwrRouteSegment-&gt;Release();
    pIEwrRouteSegment = NULL;
  }

  if(nbOfWiresWireGroups &lt; 2)
    oYoungModulusEquivalent = 10e07;
  else
    oYoungModulusEquivalent = 1.24*10e11;

  RC = S_OK; 
}
</pre>
<p>Finally we return whether the implementation succeeded or not.</p>
<pre class="code">...
  return RC;
}</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysUcOMCreatingCmp.htm">
		Creating Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysUcOMCreatingInt.htm">
		Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAEhiFLEXComputeBundleSegment.htm">Testing Your Own Algorithm Implementation</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAABtlMkmk/CAABtlMkHandBook.htm">
		mkmk Handbook</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
