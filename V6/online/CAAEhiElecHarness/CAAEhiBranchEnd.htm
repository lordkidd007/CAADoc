<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Distant Links Between Harness Geometries</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Managing Distant Links Between Harness Geometries</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAEhiBranchEnd</strong> use case. 
		This use case explains how to manage distant links between harness geometries.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAEhiBranchEnd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAEhiBranchEnd Do</a></li>
					<li><a href="#How">How to Launch CAAEhiBranchEnd</a></li>
					<li><a href="#Where">Where to Find the CAAEhiBranchEnd Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first step in programming with 
CATIA EHD Interfaces. Its main intent is to explain how to manage distant links 
among branches/devices.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAEhiBranchEnd Use Case</h2>
<p><strong>CAAEhiBranchEnd.m</strong> is a use case of the <strong>CAAElecHarnessItf.edu</strong> 
framework that illustrates the <strong>CATIA EHD</strong> Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEhiBranchEnd Do</h3>
<p>CAAEhiBranchEnd use case explains how to manage distant links among branches/devices.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAEhiBranchEnd</h3>
<p>To launch CAAEhiBranchEnd, you are required to set up the build time environment, 
then compile CAAEhiBranchEnd along with its prerequisites, set up the run time environment, 
and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAEhiBranchEnd Repository Server User Password SecurityCtx Version PLMType  PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>PLM1.</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI.</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type of a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>
<p>The input model is retrieved by importing the <strong>CAAEhiBranchEnd.3dxml</strong> 
file from the <strong>CAAElecHarnessItf.edu</strong> framework. </p>
<p><code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\InputData\CAAEhiBranchEnd.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li><a><code><strong>PLM_ExternalID</strong></code></a>: <code>RootPRD_DistantLink</code></li>
	<li><a><code><strong>Version</strong></code></a>: ---</li>
</ul>
<p>
<img alt="Sample Product" height="150" src="images/CAAEhiBranchEnd.jpg" width="350"/></p>
<p>Here we have provided a 3D XML file only for the convenience of the user so that 
one doesn't have to recreate the input model. It can simply be imported from this 
file, and used for the execution further. But the user does have the liberty to 
use any input model of his choice, based on his discretion. The image above shows 
the product structure used for this use-case.&nbsp;</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and re-import such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEhiBranchEnd Code?</h3>
<p>The CAAEhiBranchEnd sample is made of a single class named CAAEhiBranchEnd located 
in the CAAEhiBranchEnd.m module of the CAAElecHarnessItf.edu framework: <code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\CAAEhiBranchEnd.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CAAAdpOpenProduct</em></td>
		<td>Class to open a product reference given its identifying attributes (PLM_ExternalID, 
		V_version) and returns the requested interface on the reference. The modeler 
		is PRODUCT.</td>
	</tr>
	<tr>
		<td><em>CATIEhiBranch</em></td>
		<td>Interface to manage Branch.</td>
	</tr>
	<tr>
		<td><em>CATIEhiSegment</em></td>
		<td>Interface to manage Segment.</td>
	</tr>
	<tr>
		<td><em>CATIEhiSegmentEnd</em></td>
		<td>Interface to manage Segment Ends.</td>
	</tr>
	<tr>
		<td><em>CATIEhiBranchEnd</em></td>
		<td>Interface to manage distant links among branches/device instances.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first create the Electrical environment and then manage distant links 
among branches/devices by looking at the code of the Main. There are 11 logical 
steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">The Necessary Input Arguments to Start CATIA Session</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Opening and Expanding the "RootPRD" Model (arg[7]) 
		and Electrical Branch Geometry 3DPart in Design Mode</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Listing the Branches in Electrical Branch Geometry</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Listing the Segments in Branches</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Retrieving the Segment Extremities of Obtained Segments</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Querying CATIEhiBranchEnd Interface Pointer on Obtained 
		SegmentEnds</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Creating, Retrieving and Removing the Distant Link 
		Among Branch Ends/Devices and Checking Whether Branch End Is a Target of 
		Another Distant Link</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Bag Emptying Operation</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>The Necessary Input Arguments to Start CATIA Session</h3>
<pre class="code">...
<span class="keyword">if</span> (9 != argc)
{
  cout &lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;CAAEhiBranchEnd &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;</span>&lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;Repository: The repository name (like PLM1) which is mandatory.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;User: The user name for connection.&quot;</span> &lt;&lt;endl ;
  cout &lt;&lt;<span class="string">&quot;Password: The user password for connection.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;SecurityCtx: A string representing the security context(Role.Organization.Project ). Choose Role as Reviewer(as the use case doesn't modify the PLM Data).&quot;</span>&lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Version: The version attribute value of the reference to be opened.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLMType: : A PLM Type of a PLM Reference or PLM Representation Reference.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  <span class="keyword">goto</span> EscapeWay;
}

  repository = argv[1];
  strVersion = argv[6];
  strPLMType = argv[7];
  rootPrdName = argv[8];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection parameters initialization.</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Repository&quot;</span>, argv[1]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 2;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Server&quot;</span>, argv[2]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 3;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserID&quot;</span>, argv[3]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 4;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserPasswd&quot;</span>, argv[4]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 5;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;SecurityCtx&quot;</span>, argv[5]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 6;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 7;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Opening and Expanding the "RootPRD" Model (arg[7]) 
and Electrical Branch Geometry 3DPart in Design Mode</h3>
<pre class="code">...
 //-----------------------------------------------------------------------
  // - Query/Open/Expand of the reference product with its associated representation
  //-----------------------------------------------------------------------
  hr = ::CAAOpenPLMComponent(strPLMType, rootPrdName, strVersion, IID_CATIPLMProducts,(void **)&amp;pIRootProduct, Bag, blnExpandAllMode);
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pIRootProduct))
{
  retCode = 9;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIRootProduct-&gt;Iterator(pIPrdRootIterator);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pIPrdRootIterator))
  {
    retCode = 10;
    <span class="keyword">goto</span> EscapeWay;
  }
  <span class="comment">// iterate on root product to find out the GeoHarness inside it.</span>
  <span class="keyword">while</span>(SUCCEEDED(pIPrdRootIterator-&gt;Next(pIUnkGeoHarnessInst)) &amp;&amp; (NULL != pIUnkGeoHarnessInst))
  {
    hGeoHarnessInst = pIUnkGeoHarnessInst;
    <span class="keyword">if</span>(NULL_var == hGeoHarnessInst)
    {
      retCode = 11;
      <span class="keyword">goto</span> EscapeWay;
    }

    hr = hGeoHarnessInst-&gt;GetReferenceObject(pIUnkGeoHarnessRef);
    <span class="keyword">if</span>((FAILED(hr)) || (NULL == pIUnkGeoHarnessRef))
    {
      retCode = 12;
      <span class="keyword">goto</span> EscapeWay;
    }

    <span class="comment">// check if the product inside root product is a Geo Harness</span>
    hr = pIUnkGeoHarnessRef-&gt;QueryInterface(IID_CATIEhiGeoHarness, (<span class="keyword">void</span> **) &amp; pIEhiGeoHarness);
    <span class="keyword">if</span>(FAILED(hr) || (NULL == pIEhiGeoHarness))
    {
      retCode = 13;
      <span class="keyword">goto</span> EscapeWay;
    }

    <span class="comment">// if it is, then retrieve the sub products to reach the Harness Bundles and Devices inside Geo Harness
    // and append them into a list.</span>
    hr = pIEhiGeoHarness-&gt;QueryInterface(IID_CATIPLMProducts, (<span class="keyword">void</span> **) &amp; pIGeoHarnessPrd);
    <span class="keyword">if</span>(FAILED(hr) || (NULL == pIGeoHarnessPrd))
    {
      retCode = 14;
      <span class="keyword">goto</span> EscapeWay;
    }

    hr = pIGeoHarnessPrd-&gt;Iterator(pIPrdGeoHarnessIterator);
    <span class="keyword">if</span>(FAILED(hr) || (NULL == pIPrdGeoHarnessIterator))
    {
      retCode = 15;
      <span class="keyword">goto</span> EscapeWay;
    }

    <span class="keyword">while</span>(SUCCEEDED(pIPrdGeoHarnessIterator-&gt;Next(pIUnkGBNChildren)) &amp;&amp; (NULL != pIUnkGBNChildren))
    {
      hr = SwitchToDesignMode(pIUnkGBNChildren);
      <span class="keyword">if</span>(FAILED(hr))
      {
        retCode = 16;
        <span class="keyword">goto</span> EscapeWay;
      }

      <span class="keyword">if</span>(NULL == pListUnkGBNChildren)
        pListUnkGBNChildren = <span class="keyword">new</span> CATListValCATBaseUnknown_var();
      <span class="keyword">if</span>(NULL != pListUnkGBNChildren)
        pListUnkGBNChildren-&gt;Append(pIUnkGBNChildren);

      <span class="keyword">if</span>(NULL != pIUnkGBNChildren)
      {
        pIUnkGBNChildren-&gt;Release();
        pIUnkGBNChildren = NULL;
      }
    }
    <span class="keyword">if</span>(NULL != pIUnkGeoHarnessInst)
    {
      pIUnkGeoHarnessInst-&gt;Release();
      pIUnkGeoHarnessInst = NULL;
    }
  }

  <span class="keyword">if</span>((NULL == pListUnkGBNChildren) || (4 != pListUnkGBNChildren-&gt;Size()))
  {
    retCode = 17;
    <span class="keyword">goto</span> EscapeWay;
  }

  <span class="comment">// retrieve the two harness bundles from the list and get their corresponding references</span>
  hUnkGeoHarnessChild = (*pListUnkGBNChildren)[1];
  <span class="keyword">if</span>(NULL_var == hUnkGeoHarnessChild)
  {
    retCode = 18;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hUnkGeoHarnessChild-&gt;QueryInterface(IID_CATBaseUnknown, (<span class="keyword">void</span> **) &amp;pUnkMBNS1ProductInst);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pUnkMBNS1ProductInst))
  {
    retCode = 19;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pUnkMBNS1ProductInst-&gt;QueryInterface(IID_CATIPrdObject, (<span class="keyword">void</span> **) &amp;pMBNS1Product);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pMBNS1Product))
  {
    retCode = 20;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pMBNS1Product-&gt;GetReferenceObject(pUnkMBNS1ProductRef);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pUnkMBNS1ProductRef))
  {
    retCode = 21;
    <span class="keyword">goto</span> EscapeWay;
  }

  hUnkGeoHarnessChild = (*pListUnkGBNChildren)[2];
  <span class="keyword">if</span>(NULL_var == hUnkGeoHarnessChild)
  {
    retCode = 22;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = hUnkGeoHarnessChild-&gt;QueryInterface(IID_CATBaseUnknown, (<span class="keyword">void</span> **) &amp;pUnkMBNS2ProductInst);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pUnkMBNS2ProductInst))
  {
    retCode = 23;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pUnkMBNS2ProductInst -&gt; QueryInterface(IID_CATIPrdObject, (<span class="keyword">void</span> **) &amp;pMBNS2Product);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pMBNS2Product))
  {
    retCode = 24;
    <span class="keyword">goto</span> EscapeWay;
  }

  hr = pMBNS2Product-&gt;GetReferenceObject(pUnkMBNS2ProductRef);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pUnkMBNS2ProductRef))
  {
    retCode = 25;
    <span class="keyword">goto</span> EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Listing the Branches in Electrical Branch Geometry</h3>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------------
// - Get the CATIEhiHarnessBundle Interface from the opened data
//-------------------------------------------------------------------------</span>
  hr = pUnkMBNS1ProductRef-&gt;QueryInterface(IID_CATIEhiHarnessBundle,(<span class="keyword">void</span>**)&amp;pIEhiHarnessBundle1);
  <span class="keyword">if</span> ( FAILED(hr) )
  {
    retCode = 26;
    <span class="keyword">goto</span> EscapeWay;
  }
  hr = pUnkMBNS2ProductRef-&gt;QueryInterface(IID_CATIEhiHarnessBundle,(<span class="keyword">void</span>**)&amp;pIEhiHarnessBundle2);
  <span class="keyword">if</span> ( FAILED(hr) )
  {
    retCode = 27;
    <span class="keyword">goto</span> EscapeWay;
  }
  hr = pIEhiHarnessBundle1-&gt;ListBranches(&amp;pListBranches1);
  <span class="keyword">if</span> ((FAILED(hr)) || ( NULL == pListBranches1))
  {
    retCode = 28;
    <span class="keyword">goto</span> EscapeWay;
  }
  hr = pIEhiHarnessBundle2-&gt;ListBranches(&amp;pListBranches2);
  <span class="keyword">if</span> ((FAILED(hr)) || (NULL == pListBranches2))
  {
    retCode = 29;
    <span class="keyword">goto</span> EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Listing the Segments in Branches</h3>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------------
// - Get CATIEhiBranch Interface on the obtained Branches of MBNS 1
//-------------------------------------------------------------------------</span>
hUnkBranch = (*pListBranches1)[1];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 30;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch1))
{
  retCode = 31;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkBranch = NULL_var;
hUnkBranch = (*pListBranches1)[2];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 32;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch2))
{
  retCode = 33;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkBranch = NULL_var;
hUnkBranch = (*pListBranches1)[3];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 34;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch3);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch3))
{
  retCode = 35;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-------------------------------------------------------------------------
// Get CATIEhiBranch Interface on the obtained Branches of MBNS 2
//-------------------------------------------------------------------------</span>
hUnkBranch= NULL_var;
hUnkBranch = (*pListBranches2)[1];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 36;
  <span class="keyword">goto</span> EscapeWay;
}
hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch1))
{
  retCode = 37;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkBranch = NULL_var;
hUnkBranch = (*pListBranches2)[2];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 38;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch2))
{
  retCode = 39;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-------------------------------------------------------------------------
// - List the Segments in Branches
//-------------------------------------------------------------------------</span>
hr = pIMBNS1_Branch1-&gt;ListSegments(&amp;pListSegments1);
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pListSegments1) || (1 != pListSegments1-&gt;Size()))
{
  retCode = 40;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Branch2-&gt;ListSegments(&amp;pListSegments2);
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pListSegments2) || (1 != pListSegments2-&gt;Size()))
{
  retCode = 41;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Branch3-&gt;ListSegments(&amp;pListSegments3);
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pListSegments3) || (1 != pListSegments3-&gt;Size()))
{
  retCode = 42;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1-&gt;ListSegments(&amp;pListSegments4);
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pListSegments4) || (1 != pListSegments4-&gt;Size()))
{
  retCode = 43;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch2-&gt;ListSegments(&amp;pListSegments5);
<span class="keyword">if</span> ((FAILED(hr) ) || (NULL == pListSegments5) || (1 != pListSegments5-&gt;Size()))
{
  retCode = 44;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving the Segment Extremities of Obtained Segments</h3>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------------
// - Get CATIEhiSegment Interface on the obtained Segments
//-------------------------------------------------------------------------</span>
hUnkSegment = (*pListSegments1)[1];
<span class="keyword">if</span>(NULL_var == hUnkSegment)
{
  retCode = 45;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pIMBNS1_Segment1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Segment1))
{
  retCode = 46;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegment = NULL_var;
hUnkSegment = (*pListSegments2)[1];
<span class="keyword">if</span>(NULL_var == hUnkSegment)
{
  retCode = 47;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pIMBNS1_Segment2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Segment2))
{
  retCode = 48;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegment = NULL_var;
hUnkSegment = (*pListSegments3)[1];
<span class="keyword">if</span>(NULL_var == hUnkSegment)
{
  retCode = 49;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pIMBNS1_Segment3);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Segment3))
{
  retCode = 50;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegment = NULL_var;
hUnkSegment = (*pListSegments4)[1];
<span class="keyword">if</span>(NULL_var == hUnkSegment)
{
  retCode = 51;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pIMBNS2_Segment1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Segment1))
{
  retCode = 52;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegment = NULL_var;
hUnkSegment = (*pListSegments5)[1];
<span class="keyword">if</span>(NULL_var == hUnkSegment)
{
  retCode = 53;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkSegment-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pIMBNS2_Segment2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Segment2))
{
  retCode = 54;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-------------------------------------------------------------------------
// - Get the segment Extremities of the obtained Segments
//-------------------------------------------------------------------------</span>
hr = pIMBNS1_Segment1-&gt;GetEnds(&amp;pIMBNS1_Segment1_Ext1, &amp;pIMBNS1_Segment1_Ext2);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pIMBNS1_Segment1_Ext1) || ( NULL == pIMBNS1_Segment1_Ext2))
{
  retCode = 55;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment2-&gt;GetEnds(&amp;pIMBNS1_Segment2_Ext1, &amp;pIMBNS1_Segment2_Ext2);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pIMBNS1_Segment2_Ext1) || ( NULL == pIMBNS1_Segment2_Ext2))
{
  retCode = 56;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment3-&gt;GetEnds(&amp;pIMBNS1_Segment3_Ext1, &amp;pIMBNS1_Segment3_Ext2);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pIMBNS1_Segment3_Ext1) || ( NULL == pIMBNS1_Segment3_Ext2))
{
  retCode = 57;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment1-&gt;GetEnds(&amp;pIMBNS2_Segment1_Ext1, &amp;pIMBNS2_Segment1_Ext2);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pIMBNS2_Segment1_Ext1) || ( NULL == pIMBNS2_Segment1_Ext2))
{
  retCode = 58;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment2-&gt;GetEnds(&amp;pIMBNS2_Segment2_Ext1, &amp;pIMBNS2_Segment2_Ext2);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pIMBNS2_Segment2_Ext1) || ( NULL == pIMBNS2_Segment2_Ext2))
{
  retCode = 59;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Querying CATIEhiBranchEnd Interface Pointer on Obtained SegmentEnds</h3>
<pre class="code">...
hIMBNS1_Branch1_End1 = pIMBNS1_Segment1_Ext1;
<span class="keyword">if</span>(NULL_var == hIMBNS1_Branch1_End1)
{
  retCode = 60;
  <span class="keyword">goto</span> EscapeWay;
}

hIMBNS1_Branch1_End2 = pIMBNS1_Segment1_Ext2;
<span class="keyword">if</span>(NULL_var == hIMBNS1_Branch1_End2)
{
  retCode = 61;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment2_Ext1-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch2_End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch2_End1))
{
  retCode = 62;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment2_Ext2-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch2_End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch2_End2))
{
  retCode = 63;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment3_Ext1-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch3_End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch3_End1))
{
  retCode = 64;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Segment3_Ext2-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS1_Branch3_End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS1_Branch3_End2))
{
  retCode = 65;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment1_Ext1-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch1_End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch1_End1))
{
  retCode = 66;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment1_Ext2-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch1_End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch1_End2))
{
  retCode = 67;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment2_Ext1-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch2_End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch2_End1))
{
  retCode = 68;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Segment2_Ext2-&gt;QueryInterface(IID_CATIEhiBranchEnd,(<span class="keyword">void</span> **)&amp;pIMBNS2_Branch2_End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pIMBNS2_Branch2_End2))
{
  retCode = 69;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Creating, Retrieving and Removing the Distant Link 
among Branch Ends/Devices and Checking Whether Branch End Is a Target of 
Another Distant Link</h3>
<pre class="code">...
<span class="comment">//-------------------------------------------------------------------------
//  Set, Get and Remove the Distant link among branches
//  and Check whether branch is a distant link of another object
//-------------------------------------------------------------------------</span>
hr = hIMBNS1_Branch1_End2-&gt;SetDistantLinkTarget(pIMBNS2_Segment1_Ext1);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 70;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End1-&gt;SetDistantLinkTarget(pIMBNS1_Segment1_Ext2);
<span class="keyword">if</span> (SUCCEEDED(hr))
{
  retCode = 71;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End1-&gt;GetDistantLinkTarget(&amp;pIUnk_MBNS1_Branch1_End2);
<span class="keyword">if</span> ((SUCCEEDED(hr)) || (NULL != pIUnk_MBNS1_Branch1_End2))
{
  retCode = 72;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hIMBNS1_Branch1_End2-&gt;SetDistantLinkTarget(pIMBNS2_Segment2_Ext1);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 73;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch2_End1-&gt;SetDistantLinkTarget(pIMBNS2_Segment1_Ext1);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 74;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch2_End1-&gt;GetDistantLinkTarget(&amp;pIUnk_MBNS2_Branch1_End1);
<span class="keyword">if</span> (FAILED(hr) || (NULL == pIUnk_MBNS2_Branch1_End1))
{
  retCode = 75;
  <span class="keyword">goto</span> EscapeWay;
}  

hr = pIMBNS2_Branch2_End1-&gt;RemoveDistantLink();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 76;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS1_Branch2_End2-&gt;SetDistantLinkTarget(pIMBNS2_Segment2_Ext1);
<span class="keyword">if</span> (SUCCEEDED(hr))
{
  retCode = 77;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End1-&gt;SetDistantLinkTarget(pIMBNS2_Segment2_Ext1);
<span class="keyword">if</span> (SUCCEEDED(hr))
{
  retCode = 78;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End1-&gt;IsTargetOfAnotherDistantLink();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 79;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End1-&gt;IsTargetOfAnotherDistantLink(&amp;pOutListPointingExtremities);
<span class="keyword">if</span> (FAILED(hr) || (NULL == pOutListPointingExtremities))
{
  retCode = 80;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-------------------------------------------------------------------
// Set, Get and Remove the Distant link among devices 
// and Check whether device is a distant link of another object
//-------------------------------------------------------------------</span>

hr = hIMBNS1_Branch1_End1-&gt;GetDistantLinkTarget(&amp;pOutCnPt2, &amp;pOutElbInstance2);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 81;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pIMBNS2_Branch1_End2-&gt;GetDistantLinkTarget(&amp;pOutCnPt1, &amp;pOutElbInstance1);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 82;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hIMBNS1_Branch1_End1-&gt;RemoveDistantLink();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 83;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hIMBNS1_Branch1_End1-&gt;SetDistantLinkTarget(pOutCnPt2, pOutElbInstance2);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 84;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Bag Emptying Operation</h3>
<pre class="code">...
hr = Bag.RemoveAll();
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
<span class="keyword">if</span> (FAILED(hr)) 
{
  cout &lt;&lt; <span class="string">&quot;The SESSION is not Closed&quot;</span>&lt;&lt;endl;
  retCode = 85;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has explained how to manage distant links between harness geometries.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="Reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="History">
	<tr>
		<td>Version: <strong>1</strong> [May 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
