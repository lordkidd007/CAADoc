<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>CAAEhiUcAttributeAccess</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Accessing Attributes by Navigating through an 
		Electrical Product's Tree</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAEhiAttributeAccess use case. This use 
		case explains how to access to the attributes of an Electrical product. 
		In order to access the desired attributes, the use case shows how to 
		navigate down from the product root to the base elements using element 
		specific access methods.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAEhiAttributeAccess Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAEhiAttributeAccess Do</a></li>
				<li><a href="#How">How to Launch CAAEhiAttributeAccess</a></li>
				<li><a href="#Where">Where to Find the CAAEhiAttributeAccess Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>

<p><img alt="Electrical System" src="images/CAAEhiUcAttributeAccess.png"/></p>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= --><h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you to use Electrical interfaces [<a href="#References">1</a>]. The use case demonstrates 
navigation between the CATIEhiGeoHarness, CATIEhiHarnessBundle, CATIEhiBranch, 
CATIEhiSegment and CATIEhiSegmentEnd interfaces among others in order to reach 
information concerning connectivity between elements of the Electrical Branch 
Geometry [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAEhiAttributeAccess Use Case</h2>
<p>CAAEhiAttributeAccess is a use case of the CAAElecHarnessItf.edu framework that illustrates 
ElectricalInterfaces framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEhiAttributeAccess Do</h3>
<p>The use case is a batch program, to retrieve in the database a Physical 
Product from the PLM External ID value. Once the Physical Product is loaded, the 
batch shows how to retrieve the segments contained in the Electrical System and 
their IsSegmentEndConnectedToDevice method as well as how to filter the SegmentEnds 
that are also Branch extremities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAEhiAttributeAccess</h3>
<p>To launch CAAEhiAttributeAccess, you will need to set up the build time environment, then 
compile CAAEhiAttributeAccess along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAAEhiAttributeAccess Repository Server Username Password SecurityCtx PLMType PLMExternalIDValue Version&quot;</pre>
<p>with arguments as described below:</p>

<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Position</th>
		<th style="height: 24px">Description</th>
		<th style="height: 24px">Example</th>
		<th style="height: 24px">Category</th>
	</tr>
	<tr>
		<td style="height: 32px">1</td>
		<td style="height: 32px">PLM repository</td>
		<td style="height: 32px">PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td style="height: 32px">2</td>
		<td style="height: 32px">PLM server</td>
		<td style="height: 32px">The name and port of the server as <em>name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<td style="height: 32px">3</td>
		<td style="height: 32px">Username</td>
		<td style="height: 32px">The user name</td>
	</tr>
	<tr>
		<td style="height: 32px">4</td>
		<td style="height: 32px">Password</td>
		<td style="height: 32px">The user password to authenticate the user</td>
	</tr>
	<tr>
		<td style="height: 32px">5</td>
		<td style="height: 32px">SecurityCtx</td>
		<td style="height: 32px">A string representing the security context (Role.Organization.Collaborative Space). 
		Choose Role as Designer (as the use case modifies the PLM data)</td>
	</tr>
	<tr>
	    <td style="height: 32px"> 6</td>
		<td style="height: 32px">PLMType</td>
		<td style="height: 32px">A PLMType for a PLM Reference or PLM Representation Reference.</td>
		<td style="height: 32px"> Component Type</td>
	</tr>
	<tr>
		<td style="height: 32px">7</td>
		<td style="height: 32px">Product Root</td>
		<td style="height: 32px">CAAEhiAttributeAccess</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td style="height: 32px">8</td>
		<td style="height: 32px">Version</td>
		<td style="height: 32px">A</td>
	</tr>
</table>

<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database using 
the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAATPSInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\InputData\ElectricalSystem.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This &quot;3dxml&quot; file contains the representation reference with the following attributes:</p>
<ul>
	<li><strong>PLMExternalIDValue</strong>: CAAEhiAttributeAccess</li>
	<li><strong>Version</strong>: A</li>
</ul>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEhiAttributeAccess Code</h3>
<p>The CAAEhiAttributeAccess use case is made of several classes/a single file located in the 
CAAEhiAttributeAccess.m module of the CAAElecHarnessItf.edu framework: <code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\CAAEhiAttributeAccess.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are 10 logical steps in CAAEhiAttributeAccess:</p>
<ol>
	<li><a href="#Step1">Input the necessary arguments to start CATIA session</a></li>
	<li><a href="#Step2">Sets the Connection Parameters</a></li>
	<li><a href="#Step3">Create a Session</a></li>
	<li><a href="#Step4">Query/Open/Expand of the reference product</a></li>
	<li><a href="#Step5">Iterate on root product to find the Electrical Geometry inside it</a></li>
	<li><a href="#Step6">Find Electrical Branch Geometry inside Electrical Geometry</a></li>
	<li><a href="#Step7">Switch Electrical Branch Geometry to Design mode, to allow access to its attributes</a></li>
	<li><a href="#Step8">Check the End Segments attributes</a></li>
	<li><a href="#Step9">Clean Bag</a></li>
	<li><a href="#Step10">Disconnect and Delete session</a></li>
</ol>

<p>To avoid repeating certain parts of the code and to better display how to 
navigate down from the product root, 
the following functions were defined in CAAEhiAttributeAccess::</p>

<ol>
<li><a href="#Func1">ListFilteredChildrenOccurrence</a></li>
<li><a href="#Func2">ShowAlias</a></li>
<li><a href="#Func3">CheckSegmentEnds</a></li>
</ol>
&nbsp;	

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Input the necessary arguments to start CATIA session</h3>
<pre class="code">int main (int argc, char **argv)
{
	<span class="keyword">HRESULT</span>  hr = E_FAIL;
	<span class="keyword">int</span> retCode = 0;

	<span class="comment">//------------------------------------------------------------------
	// 1 - The necessary input arguments to start CATIA session
	//------------------------------------------------------------------</span>
	<span class="keyword">if</span> (9 != argc)
	{
	  <span class="keyword">cerr</span> &lt;&lt; endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">CAAElbDeviceNavigation &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt; &lt;Version&gt;</span>&quot;&lt;&lt; endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">Repository: The repository name (like PLM1) which is mandatory.</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.</span>&quot;&lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">User: The user name for connection.</span>&quot; &lt;&lt;endl ;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">Password: The user password for connection.</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">PLMType: A PLM Type for a PLM Reference or PLM Representation Reference</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">Version: The version of the PLM Reference or PLM Representation Reference to be browsed through.</span>&quot; &lt;&lt;endl;
	  <span class="keyword">cerr</span> &lt;&lt; endl;
	  retCode = 1;
	}
	
	<span class="keyword">const</span> <span class="keyword">char</span>* strPLMType  = argv[6];
	<span class="keyword">const</span> <span class="keyword">char</span>* rootPrdName = argv[7];
	<span class="keyword">const</span> <span class="keyword">char</span>* version     = argv[8];
	</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Sets the Connection Parameters</h3>
<pre class="code">
	<span class="comment">//------------------------------------------------------------------
	// 2 - Sets the Connection Parameters
	//------------------------------------------------------------------</span>
	<span class="keyword">cerr</span> &lt;&lt;&quot;<span class="string">Connection Parameters init: begin</span>&quot; &lt;&lt; endl;
	hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;<span class="string"><strong>Repository</strong></span>&quot;, argv[1]);
	<span class="keyword">if</span> (FAILED(hr)) retCode = 2;

	hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;<span class="string"><strong>Server</strong></span>&quot;, argv[2]);
	<span class="keyword">if</span> (FAILED(hr)) retCode = 3;

	hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;<span class="string"><strong>UserID</strong></span>&quot;, argv[3]);
	<span class="keyword">if</span> (FAILED(hr)) retCode = 4;

	hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;<span class="string"><strong>UserPasswd</strong></span>&quot;, argv[4]);
	<span class="keyword">if</span> (FAILED(hr)) retCode = 5; 

	hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;<span class="string"><strong>SecurityCtx</strong></span>&quot;, argv[5]);
	<span class="keyword">if</span> (FAILED(hr)) retCode = 6;
	</pre>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Create a Session</h3>
<pre class="code">
	<span class="comment">//------------------------------------------------------------------
	// 3 - Create a Session
	// A session must always be created in a batch environment. Deleting the session at the end of the program is
	// also necessary.
	//------------------------------------------------------------------</span>
	hr = CATPLMSessionServices::<strong>InitPLMSession</strong>();
	<span class="keyword">if</span> (FAILED(hr)) retCode = 7;
	
</pre>
<p>This section represents the usual sequence for initializing a PLM 
environment.</p>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Query/Open/Expand of the reference product</h3>
<pre class="code">
	<span class="comment">//----------------------------------------------------------------------- 
	// 4 - Query/Open/Expand of the reference product  : ElectricalSystem_CAA
	//-----------------------------------------------------------------------</span>
	<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">modeler </span>&quot;&lt;&lt;strPLMType&lt;&lt;endl;


	<span class="keyword">CATBoolean</span> 	      blnExpandAllMode = TRUE;
	<span class="keyword">CATIPrdIterator</span> 	     *pIPrdRootIterator = NULL;
	<span class="keyword">CATOmbLifeCycleRootsBag</span> RootBag;
	<span class="keyword">CATIPLMProducts</span>  	     *pElectrical3DAssemblyRoot = NULL; // root product of the electrical assembly
	
	hr = ::<strong>CAAOpenPLMComponent</strong>(strPLMType, rootPrdName, version, IID_CATIPLMProducts,(void **)&amp;<strong>pElectrical3DAssemblyRoot</strong>, RootBag, blnExpandAllMode);
	<span class="keyword">if</span> ((SUCCEEDED(hr)) &amp;&amp; pElectrical3DAssemblyRoot)
	{
		hr = pElectrical3DAssemblyRoot-&gt;<strong>Iterator</strong>(pIPrdRootIterator);
		...
	}
	</pre>
<p>This operation represents the usual sequence to query a PLM product in the 
database and open it.</p>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Iterate on root product to find the Electrical Geometry inside it</h3>
<pre class="code" style="margin-left: 40px">	//------------------------------------------------------------
	<span class="comment">// 5/ Iterate on root product to find the GeoHarness inside it
	// -----------------------------------------------------------</span>
	<span class="keyword">CATIEhiGeoHarness</span> *<strong>pIEhiGeoHarness</strong> = NULL;
	<span class="keyword">if</span> (SUCCEEDED(hr) &amp;&amp; pIPrdRootIterator)
	{
		<span class="keyword">CATBaseUnknown</span> *pIUnkElecSystChildInst = NULL;

		<span class="comment">// 5.1/ Iterate the children instances of the root product (alias: Electrical System)</span>
		<span class="keyword">while</span>(SUCCEEDED(pIPrdRootIterator-&gt;<strong>Next</strong>(pIUnkElecSystChildInst)) )
		{
			<span class="keyword">if</span> (NULL != pIUnkElecSystChildInst)
			{
				<span class="keyword">CATIPrdObject_var</span> hGeoElecSystChildInstPrd;
				<strong>hGeoElecSystChildInstPrd = pIUnkElecSystChildInst</strong>;
				<span class="keyword">CATBaseUnknown</span> *pIUnkGeoElecSystChildRef = NULL;
				<span class="keyword">if</span> (NULL_var != hGeoElecSystChildInstPrd)
				{
					<span class="comment">// 5.2/ Retrieve the reference of the current root child product</span>
					hr = hGeoElecSystChildInstPrd-&gt;<strong>GetReferenceObject</strong>(pIUnkGeoElecSystChildRef);

					<span class="keyword">if</span>(NULL != pIUnkGeoElecSystChildRef)
					{
						hr = pIUnkGeoElecSystChildRef-&gt;QueryInterface(<strong>IID_CATIEhiGeoHarness</strong>, (void **) &amp; pIEhiGeoHarness);
						...
					}

					<strong><span class="keyword">if</span></strong>(SUCCEEDED(hr) &amp;&amp; <strong>NULL != pIEhiGeoHarness</strong>)
					{
						<span class="comment">// 5.3/ Display the Alias of the root child product if it is a GeoHarness</span>
						ShowAlias(&quot;<span class="string">pIEhiGeoHarness</span>&quot;, pIEhiGeoHarness);

						<strong>break</strong>;
				...
	}
</pre>
<p>Here the aim is to retrieve the product corresponding to the Electrical Branch Geometry 
also referred to as BranchGeo1(alias).</p>
<p>Iterations are performed to cycle through 
the products located just beneath the root product, for every iteration the 
reference of the child product is retrieved with GetReferenceObject.</p>
<p>An attempt to retrieve the GeoHarness interface is 
then carried out upon the child product's freshly recovered reference.</p>
<p>Should the attempt to retrieve the interface return a valid result, then the 
Electrical Branch Geometry has been found and the iterations are interrupted.</p>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Find Electrical Branch Geometry inside Electrical Geometry</h3>
<pre class="code">
	<span class="comment">//------------------------------------------------------------------
	// 6/ Find Electrical Branch Geometry (BranchGeo1) inside GeoHarness
	// -----------------------------------------------------------------
	// Retrieve the Electrical Branch Geometry sub products which in this case are Harness Bundles and Devices.</span>

	<span class="keyword">CATIEhiHarnessBundle</span> * <strong>pHarnessBundle</strong> = NULL;
	<span class="keyword">CATIPrdIterator</span> *pIPrdGeoHarnessIterator = NULL;

	<span class="keyword">if</span> (pIEhiGeoHarness != NULL)
	{
		<span class="keyword">CATIPLMProducts</span> *pIGeoHarnessPrd = NULL;

		<span class="comment">// 6.1/ Retrieve the CATIPLMProducts interface to the pointer pIEhiGeoHarness</span>
		<span class="keyword">if</span> (SUCCEEDED(pIEhiGeoHarness-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPLMProducts</strong>, (void **) &amp; pIGeoHarnessPrd)) &amp;&amp; NULL != pIGeoHarnessPrd)
		{
			hr = pIGeoHarnessPrd-&gt;<strong>Iterator</strong>(pIPrdGeoHarnessIterator);

			...
	}
	<span class="keyword">CATBaseUnknown</span> *pIUnkGeoHarnessChildren = NULL;

	<span class="comment">// 6.2/ Search Harness Bundle (Alias: BranchGeo1)</span>
	<span class="keyword">if</span> (SUCCEEDED(hr) &amp;&amp; NULL != pIPrdGeoHarnessIterator)
	{
		<span class="keyword">while</span>(SUCCEEDED(pIPrdGeoHarnessIterator-&gt;<strong>Next</strong>(pIUnkGeoHarnessChildren)) &amp;&amp; (NULL != pIUnkGeoHarnessChildren))
		{
			<span class="keyword">CATIPrdObject_var</span>	        hGeoHarnessChildInstPrd;
			hGeoHarnessChildInstPrd = pIUnkGeoHarnessChildren;
			<span class="keyword">CATBaseUnknown</span>	       *pIUnkGeoElecGeoChildRef = NULL;
			
			<span class="keyword">if</span> (NULL_var != hGeoHarnessChildInstPrd)
			{
				<span class="comment">// 6.3/ Retrieve the reference of the current Electrical Geometry child instance</span>
				hr = hGeoHarnessChildInstPrd-&gt;<strong>GetReferenceObject</strong>(<strong>pIUnkGeoElecGeoChildRef</strong>);
			}
			<span class="keyword">if</span> (SUCCEEDED(hr) &amp;&amp; NULL != pIUnkGeoElecGeoChildRef)
			{
				<span class="comment">// 6.4/ Check if the reference corresponds to a CATIEhiHarnessBundle</span>
				pIUnkGeoElecGeoChildRef-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIEhiHarnessBundle</strong>, (void **) &amp; pHarnessBundle);
			}

			<strong><span class="keyword">if</span></strong> (SUCCEEDED(hr) &amp;&amp; <strong>NULL != pHarnessBundle</strong>)
			{
				ShowAlias(&quot;<span class="string">pHarnessBundle</span>&quot;, pHarnessBundle);
				</pre>
<p>The CATIPLMProducts interface obtained from the Electrical Branch Geometry 
alias: GeoHarness, allows us to search through child instances with an iterator. </p>
<p>Using the iterator all the product instances below GeoHarness are cycled 
through, with every iteration the reference of the child product is retrieved with GetReferenceObject.</p>
<p>&nbsp;An attempt to retrieve the CATIEhiHarnessBundle interface is then carried out upon the child product's freshly recovered reference.</p>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>
Switch Electrical Branch Geometry to Design mode, to allow access to it's attributes</h3>
<pre class="code">
				<span class="comment">//----------------------------------------------------------------------------------------------------
				// 7/ Switch Electrical Branch Geometry (BranchGeo1) to Design mode to allow access to it's attributes
				// ---------------------------------------------------------------------------------------------------
				// Expands a product instance to allow access to it's attributes. It is good practice to only switch 
				// to design mode, the minimum number of products necessary. Because it requires extra ressources and
				// may take time.
				// ====================================================================================================</span>

				<span class="comment">// 7.1/ Collect all the instances of the product reference</span>
				<span class="keyword">CATIPLMRepInstances_var</span> <strong>hPrdRefAsCollecOfRepInstances</strong>;

				<span class="keyword">if</span>(NULL != pIUnkGeoElecGeoChildRef)
				{	
					<strong>hPrdRefAsCollecOfRepInstances = pIUnkGeoElecGeoChildRef</strong>;
					...
				}

				<span class="keyword">CATIPrdObject_var</span> hPrdRepInst;
				<span class="keyword">int</span> nb_rep = 0;

				<span class="comment">// 7.2/ Retrieve the product representation instances respective references</span>
				<span class="keyword">if</span>( SUCCEEDED(hPrdRefAsCollecOfRepInstances-&gt;Count(nb_rep))&amp;&amp;<strong>(1==nb_rep)</strong>)
				{
					<span class="keyword">CATIPrdIterator</span> * pRepIterator = NULL;
					hPrdRefAsCollecOfRepInstances-&gt;<strong>Iterator</strong>(pRepIterator);

					<span class="keyword">CATBaseUnknown</span> * pRepElement = NULL; 
					<span class="keyword">if</span>(NULL != pRepIterator)
					{
						pRepIterator -&gt;<strong>Next</strong>(pRepElement);
						...
					}
					<strong>hPrdRepInst = pRepElement;</strong>
				}

				<span class="keyword">CATBaseUnknown</span> * pRepReference = NULL;

				<span class="keyword">if</span>( NULL_var != hPrdRepInst) hr = hPrdRepInst-&gt;<strong>GetReferenceObject</strong>(pRepReference, <strong>IID_CATIPLMNavRepReference</strong>);

				<span class="comment">// 7.3/ Change the loading mode for all the representation instances, to EditMode</span>
				<span class="keyword">CATIPsiRepresentationLoadMode</span> *<strong>piRepLoadMode</strong> = NULL;

				<span class="keyword">if</span> (pRepReference &amp;&amp;  SUCCEEDED( <strong>pRepReference</strong>-&gt;QueryInterface( <strong>IID_CATIPsiRepresentationLoadMode</strong>, (void **) &amp;piRepLoadMode )))
				{
					...

					hr = piRepLoadMode-&gt;<strong>ChangeLoadingMode</strong>( <strong>CATIPsiRepresentationLoadMode::EditMode</strong> );
					...				
				}

				<strong>break;</strong>
				
				...
	}
</pre>
<p>The previous section provides the HarnessBundle products from the children 
products of the Electrical Geometry (GeoHarness).</p>
<p>The representation instance aggregated by the Harnessbundle product is 
an Electrical Branch Geometry representation instance, for this model it's alias 
is BranchGeoRepository and is stored in hPrdRepInst.</p>
<p>Querying the CATIPsiRepresentationLoadMode interface allows the 
representation instance (BranchGeoRepository) loading mode to be changed to 
EditMode (often referred to as Design mode), thus opening access to the objects 
beneath it.</p>
<p>This can come at a high computationnal cost, to optimise performance switching a minimum number of products to Editmode is recommended.</p>
<p>Here once a retrieved Harnessbundle has had it's RepresentationLoadMode changed to EditMode then the iterative process (commenced in the section 
above) 
of searching through the child instances of Electrical Branch Geometry (BranchGeo1) is interrupted.</p>
<p>&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Check the End Segments attributes</h3>
<pre class="code">
	<span class="comment">//------------------------------------------------------
	// 8/ Check if End Segments are connected to the devices 
	//------------------------------------------------------</span>

	<span class="keyword">if</span> (<strong>pHarnessBundle</strong>)
	{
		<span class="comment">//--------------------------------------------------------------
		// 8.1/ Retrieve a list of the branches contained in GeoHarness1
		//--------------------------------------------------------------</span>

		<span class="keyword">CATListValCATBaseUnknown_var</span> * pBranchList = NULL;

		<span class="comment">// 8.1.1/ Retrieve and place the branches of GeoHarness1 in the pBranchList</span>
		hr = pHarnessBundle-&gt;<strong>ListBranches</strong>(&amp;pBranchList);

		<span class="keyword">CATIEhiBranch</span> * piBranch1 = NULL;
		<span class="keyword">if</span>(SUCCEEDED(hr) &amp;&amp; NULL != pBranchList)
		{
			<span class="comment">// 8.1.2/ Display the number of branches in GeoHarness1</span>
			<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">Number of branches : </span>&quot; &lt;&lt; pBranchList-&gt;Size() &lt;&lt;endl;	

			<span class="comment">// 8.1.3/ Start of Branch display marker</span>
			<span class="keyword">cerr</span> &lt;&lt; endl;
			<span class="keyword">for</span> (int l =1; l&lt;=30; l++) <span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">==</span>&quot;;
			<span class="keyword">cerr</span> &lt;&lt; endl;<span class="keyword">cerr</span> &lt;&lt; endl;

			<span class="comment">//----------------------------------------------
			// 8.2/ Iterate on the Branches, with i as index
			//----------------------------------------------</span>

			<strong><span class="keyword">for</span> (int i =1; i&lt;=pBranchList-&gt;Size();i++)</strong>
			{
				<span class="comment">// 8.2.1/ Show the alias of each individuel branch contained in GeoHarness1</span>
				ShowAlias(&quot;Current branch&quot;, (*pBranchList)[i]);

				<span class="comment">// 8.2.2 Display marker between branches</span>
				<span class="keyword">cerr</span> &lt;&lt; endl;
				<span class="keyword">for</span> (int l =1; l&lt;=30; l++) <span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">==</span>&quot;;
				<span class="keyword">cerr</span> &lt;&lt; endl;

				<span class="comment">// 8.2.3/ Select the appropriate branch of the list</span>			
				<span class="keyword">CATBaseUnknown_var</span> <strong>hEhiBranch1 =</strong> <strong>((*pBranchList)[i])</strong>;

				<span class="comment">//----------------------------------------------------
				// 8.3/ List the segments contained within this branch
				//----------------------------------------------------</span>

				<span class="keyword">CATListValCATBaseUnknown_var</span> * pBranchSegmentList = NULL;
				<span class="keyword">if</span>(NULL_var != hEhiBranch1)
				{				
					<span class="keyword">CATIEhiBranch</span> * pIEhiBranch1 = NULL;

					<span class="comment">// 8.3.1/ Retrieve the CATIEhiBranch interface to the pointer pIEhiBranch1</span>
					hr = hEhiBranch1-&gt;QueryInterface(<strong>IID_CATIEhiBranch</strong>,(void **)&amp;pIEhiBranch1);

					<span class="keyword">if</span>(SUCCEEDED(hr) &amp;&amp; NULL != pIEhiBranch1)
					{
						<span class="comment">// 8.3.2/ List the branch's segments</span>
						hr = pIEhiBranch1-&gt;<strong>ListSegments</strong>(&amp;pBranchSegmentList);
												
					...
				}

				<span class="keyword">if</span> (pBranchSegmentList != NULL)
				{
					<span class="comment">//-------------------------------------------------------------------------------
					// 8.4/ Iterate on the Segments associated to the current Branch, with j as index
					//-------------------------------------------------------------------------------</span>
					<strong><span class="keyword">for</span> (int j = 1; j&lt;=pBranchSegmentList-&gt;Size(); j++)</strong>
					{
						<span class="comment">// 8.4.1/ Display the Alias of current segement</span>
						<span class="keyword">cerr</span> &lt;&lt; endl;
						<span class="keyword">for</span> (int l = 1; l &lt;=10; l++) <span class="keyword">cerr</span> &lt;&lt; &quot; &quot;;
						ShowAlias(&quot;<span class="string">Current Segment</span>&quot;, (*pBranchSegmentList)[j]);
						<span class="keyword">cerr</span> &lt;&lt; endl;

						<span class="comment">// 8.4.2/ Retrieve the CATIEhiSegment interface for the current segment</span>
						<span class="keyword">CATIEhiSegment</span> * Current_Branch_Segment = NULL;
						hr = <strong>(*pBranchSegmentList)[j]</strong>-&gt;QueryInterface(<strong>IID_CATIEhiSegment</strong>, (void**) &amp;Current_Branch_Segment);

						<span class="comment">//------------------------------------------------------------------
						// 8.5/ Check the connectivity of each of the Current Segment's Ends 
						//------------------------------------------------------------------</span>
						<span class="keyword">if</span>(SUCCEEDED(hr) &amp;&amp; NULL != Current_Branch_Segment)
						{
							<span class="comment">// 8.5.1/ Check the ends of the current segment</span>
							<strong>CheckSegmentEnds</strong>(Current_Branch_Segment, i, j);

							...
						
						<span class="comment">// 8.5.2/  Display marker between segments</span>
						<span class="keyword">if</span>(j != pBranchSegmentList-&gt;Size())
						{
							<span class="keyword">for</span>(int l=1; l&lt;=30; l++) <span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">--</span>&quot;;
							<span class="keyword">cerr</span> &lt;&lt; endl;
						}
					}
				}

				<span class="comment">// 8.5.3/  End of Branch marker display</span>
				<span class="keyword">cerr</span> &lt;&lt; endl;
				<span class="keyword">for</span> (int i =1;i&lt;=30; i++) <span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">==</span>&quot;;
				<span class="keyword">cerr</span> &lt;&lt; endl;<span class="keyword">cerr</span> &lt;&lt; endl;
			}
		}
	}</pre>
<p>A list of the branches inside GeoHarness1 is cycled through with a &quot;for&quot; loop 
and every branch a list of segments contained within it is cycled through by a 
second &quot;for&quot; loop. </p>
<p>With this method of iteration every segment has both it's Segment Ends checked by 
the
							CheckSegmentEnds method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Clean Bag</h3>
<pre class="code">	<span class="comment">//----------------
	// 9/ Clean Bag
	//----------------</span>
	hr = <strong>RootBag</strong>.RemoveAll();</pre>
<p>Before closing the CATIA Session, the bag must be emptied.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Disconnect and Delete session</h3>
<pre class="code">	<span class="comment">//---------------------------------
	// 10/ Disconnect and Delete session
	//---------------------------------</span>
	hr = CATPLMSessionServices::<strong>ClosePLMSession</strong>();
	<span class="keyword">if</span> (FAILED(hr)) 
	{
		<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">The SESSION is not Closed</span>&quot;&lt;&lt;endl;
		retCode = 999;
	}

	return retCode;
}</pre>
<p>Closing the CATIA session.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->


<h3><a name="Func1"></a>ListFilteredChildrenOccurrence</h3>
&nbsp;
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Step</th>
		<th style="height: 24px">Description</th>
	</tr>
	<tr>
		<td style="height: 19px">1</td>
		<td style="height: 19px">Check the current occurrence</td>
	</tr>
	<tr>
		<td style="height: 19px">2</td>
		<td style="height: 19px">Process the children occurrences</td>
	</tr>	
</table>
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Input parameter name</th>
		<th style="height: 24px; width: 330px;">Parameter description</th>
	</tr>
	<tr>
		<td style="height: 19px">

  <strong>ispPLMOccurrence</strong> </td>
		<td style="height: 19px; width: 330px;">An occurrence</td>
	</tr>
	<tr>
		<td>
  	  <strong>iReferenceFilterIID</strong> </td>
		<td style="width: 330px">Interface filter to be applied to occurrences</td>
	</tr>
	<tr>
		<td>
  <strong>oListSubOccurrence</strong> </td>
		<td style="width: 330px">List of filtered occurrences</td>
	</tr>
</table>
&nbsp;

<pre class="code">
HRESULT ListFilteredChildrenOccurrence ( CATIPLMNavOccurrence_var <strong>ispPLMOccurrence</strong>, IID &amp;<strong>iFilterIID</strong>, CATListValCATBaseUnknown_var &amp;<strong>oListSubOccurrence</strong> ) 
{
	<span class="keyword">HRESULT</span> Rc=S_OK;
	<span class="keyword">if</span> ( NULL_var == ispPLMOccurrence ) return E_FAIL;

	<span class="comment">// 1/ Check the current occurrence</span>
	<span class="keyword">CATBaseUnknown</span> *pObject = NULL;
	<span class="keyword">if</span>( SUCCEEDED(ispPLMOccurrence-&gt;QueryInterface(iFilterIID, (void **)&amp;pObject)) &amp;&amp; pObject )
	{
		oListSubOccurrence.<strong>Append</strong>(ispPLMOccurrence);
		...
	}

	<span class="comment">// 2/ Process the children occurrences</span>
	<span class="keyword">CATListPtrCATIPLMNavOccurrence</span> OccurrenceChildrenList;
	Rc = ispPLMOccurrence-&gt;<strong>ListChildren</strong>(OccurrenceChildrenList);
	<span class="keyword">if</span> ( SUCCEEDED(Rc) )
	{
		<span class="keyword">int</span> NbOccChildren = OccurrenceChildrenList.Size();
		<span class="keyword">for</span> (int occ=1; occ&lt;=NbOccChildren; occ++)
		{
			<span class="keyword">CATIPLMNavOccurrence</span> * pOccurrence = OccurrenceChildrenList[occ];
			<span class="keyword">CATIPLMNavOccurrence_var</span> spCurrentOcc;
			<span class="keyword">if</span> (NULL != pOccurrence)
			{
				<strong>spCurrentOcc = pOccurrence;</strong>
				
				...
			}
			Rc = <strong>ListFilteredChildrenOccurrence</strong> (spCurrentOcc, iFilterIID, oListSubOccurrence);
			<span class="keyword">if</span> ( FAILED(Rc) ) break;

		}
	}
	return Rc;
}</pre>
<p>Checking the input occurence consists of an attempt to retreive the occurence 
filter interface :iFilterIID.</p>
<p>Should this attempt succeed then the method defintion is indeed recursif, this call to itself is made in 
order to retrieve all occurences of the binary tree, which branches down from 
the input occurence object.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Func2"></a>ShowAlias</h3>
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Step</th>
		<th style="height: 24px">Description</th>
	</tr>
	<tr>
		<td style="height: 19px">1</td>
		<td style="height: 19px">Retrieve the CATIAlias interface of the input Objet</td>
	</tr>
	<tr>
		<td style="height: 19px">2</td>
		<td style="height: 19px">Display the object's alias</td>
	</tr>
</table>
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Input parameter name</th>
		<th style="height: 24px">Parameter description</th>
	</tr>
	<tr>
		<td style="height: 19px">
  <strong>ipiObject</strong> </td>
		<td style="height: 19px">A CATBaseUnknown object</td>
	</tr>
	<tr>
		<td>
  <strong>iAnnotation</strong> </td>
		<td>CATUnicodeString, text to accompany the display</td>
	</tr>
</table>
&nbsp;

<pre class="code">
HRESULT ShowAlias(CATUnicodeString <strong>iAnnotation</strong>, CATBaseUnknown * <strong>ipiObject</strong>)
{
	<span class="keyword">HRESULT</span> hr = E_INVALIDARG;
	<span class="keyword">CATIAlias</span>*  piObjectAlias = NULL;
	<span class="keyword">if</span> (NULL != ipiObject)
	{
		<span class="comment">// 1/ Retrieve the CATIAlias interface of the input Objet</span>
		hr = ipiObject-&gt;QueryInterface(<strong>IID_CATIAlias</strong>, (void**)&amp;piObjectAlias);
	}
	<span class="keyword">if</span>(SUCCEEDED(hr) &amp;&amp; NULL != piObjectAlias)
	{
		<span class="comment">// 2/ Display the object's alias</span>
		<span class="keyword">cerr</span> &lt;&lt; iAnnotation.ConvertToChar() &lt;&lt; &quot;<span class="string"> : </span>&quot; &lt;&lt; (piObjectAlias-&gt;<strong>GetAlias</strong>()).ConvertToChar() &lt;&lt; endl;

		...
	}

	return hr;
}</pre>
<p>To display an object's Alias, the CATIAlias interface is the only 
requirement, retrieving it allows acess to the appropiate GetAlias method.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Func3"></a>CheckSegmentEnds </h3>
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Step</th>
		<th style="height: 24px">Description</th>
	</tr>
	<tr>
		<td style="height: 19px">1</td>
		<td style="height: 19px">Retrieve the extremities for each segments </td>
	</tr>
	<tr>
		<td>2</td>
		<td>Iterate on the Segment Ends with k as index</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Check if the current SegmentEnd is connected a Device</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Check if the current SegmentEnd is also the extremity of a Branch</td>
	</tr>

</table>
&nbsp;
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th style="height: 24px">Input parameter name</th>
		<th style="height: 24px">Parameter description</th>
	</tr>
	<tr>
		<td style="height: 19px"><strong>Current_Branch_Segment</strong> </td>
		<td style="height: 19px">The segment whose ends are to be checked</td>
	</tr>
	<tr>
		<td><strong>Branch_index</strong> </td>
		<td>The index indicating to which branch the segment belongs</td>
	</tr>
	<tr>
		<td><strong>Segment_index</strong> </td>
		<td>The index of the segment, whose ends are to be checked</td>
	</tr>
</table>
&nbsp;
<pre class="code">HRESULT CheckSegmentEnds(CATIEhiSegment *<strong>Current_Branch_Segment</strong>, int <strong>Branch_index</strong>, int <strong>Segment_index</strong>)
{
	<span class="keyword">if</span>(NULL == Current_Branch_Segment)
		return E_INVALIDARG;

	<span class="keyword">HRESULT</span> hr = S_OK;

	<span class="comment">//------------------------------------------------
	// 1/ Retrieve the extremities for each segments 
	//------------------------------------------------</span>
	<span class="keyword">CATIEhiSegmentEnd</span> * Branch_Segment_End1 = NULL;
	<span class="keyword">CATIEhiSegmentEnd</span> * Branch_Segment_End2 = NULL;
	<span class="keyword">CATListValCATBaseUnknown_var</span>* pBranchSegmentEndList = new CATListValCATBaseUnknown_var;

	<span class="keyword">if</span>(NULL != Current_Branch_Segment)
	{
		<span class="comment">// 1.1/ Retrieve the Ends of the input segment</span>
		hr = Current_Branch_Segment-&gt;<strong>GetEnds</strong>(&amp;Branch_Segment_End1, &amp;Branch_Segment_End2);

		<span class="keyword">CATBaseUnknown_var</span> hBranch_Segment_End1(Branch_Segment_End1);
		<span class="keyword">CATBaseUnknown_var</span> hBranch_Segment_End2(Branch_Segment_End2);

		<span class="comment">// 1.2/ Add the Ends of the input Segment to pBranchSegmentEndList</span>
		pBranchSegmentEndList-&gt;<strong>Append</strong>(hBranch_Segment_End1);
		pBranchSegmentEndList-&gt;<strong>Append</strong>(hBranch_Segment_End2);
	}

	<span class="comment">//------------------------------------------------
	// 2/ Iterate on the Segment Ends with k as index
	//------------------------------------------------</span>

	<strong><span class="keyword">for</span> (int k = 1; k &lt;= pBranchSegmentEndList-&gt;Size(); k++)</strong>
	{
		<span class="comment">// 2.1/ Initialise the test results for the current End</span>
		<span class="keyword">CATBoolean Current_Branch_Segment_ConnectedToDevice_End</span> = CATFalse;
		<span class="keyword">CATBoolean Current_Branch_Segment_Is_Branch_End</span> = CATFalse;

		<span class="comment">// 2.2/ Display the index of the input Segment's End</span>
		<span class="keyword">for</span>(int l = 1; l&lt;=20; l++) <span class="keyword">cerr</span> &lt;&lt; &quot; &quot;;
		<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string">End.</span>&quot;&lt;&lt; k;

		<span class="comment">//------------------------------------------------------------
		// 3/ Check if the current SegmentEnd is connected to a Device
		//------------------------------------------------------------</span>

		<span class="keyword">if</span>(NULL != (*pBranchSegmentEndList)[k])
		{
			<span class="comment">// 3.1/ Retrieve CATIEhiSegmentEnd interface to the current SegmentEnd</span>
			<span class="keyword">CATIEhiSegmentEnd</span> * Current_Branch_Segment_End = NULL;
			hr = (*pBranchSegmentEndList)[k]-&gt;QueryInterface(<strong>IID_CATIEhiSegmentEnd</strong>, (void**) &amp;Current_Branch_Segment_End);

			<span class="keyword">if</span>(SUCCEEDED(hr) &amp;&amp; NULL != (Current_Branch_Segment_End))
			{
				<span class="comment">// 3.2/ Check if the current SegmentEnd is connected to a Device</span>
				hr = Current_Branch_Segment_End-&gt;<strong>IsSegmentEndConnectedToDevice</strong>(Current_Branch_Segment_ConnectedToDevice_End);

				<span class="keyword">if</span>(Current_Branch_Segment_ConnectedToDevice_End)
				{
					<span class="comment">// 3.3/ Display that the SegmentEnd is connected to a device</span>
					<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string"> - </span>&quot; &lt;&lt; &quot;<span class="string">Connected to a Device </span>&quot; &lt;&lt; endl;

				}
				<span class="comment">// 3.3 bis/ Display that the SegmentEnd is NOT connected to a device</span>
				<span class="keyword"><span class="keyword">else</span></span> <span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string"> - </span>&quot; &lt;&lt; &quot;<span class="string">NOT Connected to a Device </span>&quot; &lt;&lt; endl;
			}
		}

		<span class="comment">//---------------------------------------------------------------------
		// 4/ Check if the current SegmentEnd is also the extremity of a Branch
		//---------------------------------------------------------------------</span>

		<span class="keyword">CATIEhiBranchEnd</span> * Current_hIBranch_End = NULL;
		<span class="keyword">CATListValCATBaseUnknown_var</span>* pBranchEndList = new CATListValCATBaseUnknown_var;

		<span class="comment">// 4.1/ Attempt to retrieve the CATIEhiBranchEnd interface</span>
		hr = (*pBranchSegmentEndList)[k]-&gt;QueryInterface(<strong>IID_CATIEhiBranchEnd</strong>,(void **)&amp;Current_hIBranch_End);

		<strong><span class="keyword">if</span></strong> (SUCCEEDED(hr) &amp;&amp; <strong>NULL != Current_hIBranch_End</strong>) 
		{

			<span class="comment">// 4.2/ If CATIEhiBranchEnd retrieved, add the current segment to pBranchEndList</span>
			<span class="keyword">CATBaseUnknown_var</span> hCurrent_hIBranch_End(Current_hIBranch_End);
			pBranchEndList-&gt;<strong>Append</strong>(hCurrent_hIBranch_End);

			<span class="keyword">for</span>(int l = 1; l&lt;=25; l++) <span class="keyword">cerr</span> &lt;&lt; &quot; &quot;;
			<span class="comment">// 4.3/ Display that the current SegmentEnd is also a BranchEnd</span>
			<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string"> - </span>&quot; &lt;&lt; &quot;<span class="string">An extremity of Branch </span>&quot; &lt;&lt; Branch_index &lt;&lt; endl &lt; endl;
		}

		<span class="keyword">else</span>
		{
			<span class="keyword">for</span>(int l = 1; l&lt;=25; l++) <span class="keyword">cerr</span> &lt;&lt; &quot; &quot;;
			<span class="comment">// 4.2 bis/ Display that the current SegmentEnd is NOT a BranchEnd</span>
			<span class="keyword">cerr</span> &lt;&lt; &quot;<span class="string"> - </span>&quot; &lt;&lt; &quot;<span class="string">NOT A Branch extremity</span>&quot; &lt;&lt; endl &lt;&lt; endl;
		}

	} <span class="comment">// End iteration on SegmentEnds</span>

	return hr;
}
</pre>
<p>From the input CATIEhiSegment interface the segments Ends are collected into 
a list, which a &quot;for&quot; loop scans through.</p>
<p>Each segment end is checked by calling IsSegmentEndConnectedToDevice and an 
attempt is made to retrieve the CATIEhiBranchEnd interface which if successful 
indicates the segment end is also the extremity of one of the model branches.</p>
<p>This analysis gives an indication of whether the branch ends of a model are 
connected to a device or not, helping to gauge the overall continuity of the 
model. </p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->


<h2><a name="InShort"></a>In Short</h2>
<p>This Use Case demonstrates the appropriate objects and interfaces required to 
navigate down from the root of an Electrical System to it's Segment Ends. As 
well as how to utilise segment ends to verify the continuity of a system.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
	<td>[2]</td>
		<td>
		<a href="../CAAEliElectrical/CAAEliElectricalModelerOverView.htm">
		An Overview of the Electrical Modeler</a> <br />
		</td>
</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
