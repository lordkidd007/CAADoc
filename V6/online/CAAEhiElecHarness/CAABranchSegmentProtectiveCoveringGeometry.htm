<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieving the Geometrical Definition of Components Inside Electrical Branch Geometry</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Retrieving the Geometrical Definition of Components Inside Electrical Branch Geometry</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAABranchSegmentProtectiveCoveringGeometry</strong> 
		use case. This use case explains how to retrieve the geometrical definition 
		of branch route, segment end points and protective covering end points.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAABranchSegmentProtectiveCoveringGeometry 
				Use Case</a>
				<ul>
					<li><a href="#What">What Does CAABranchSegmentProtectiveCoveringGeometry 
						Do</a></li>
					<li><a href="#How">How to Launch CAABranchSegmentProtectiveCoveringGeometry</a></li>
					<li><a href="#Where">Where to Find the CAABranchSegmentProtectiveCoveringGeometry 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first step in programming with 
CATIA EHD Interfaces. Its main intent is allow you to retrieve the geometrical definition 
of branch route, segment end points and protective covering end points.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAABranchSegmentProtectiveCoveringGeometry Use Case</h2>
<p><strong>CAABranchSegmentProtectiveCoveringGeometry.m</strong> is a use case of 
the <strong>CAAElecHarnessItf.edu</strong> framework that illustrates the
<strong>CATIA EHD</strong> Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAABranchSegmentProtectiveCoveringGeometry Do</h3>
<p>The goal of CAABranchSegmentProtectiveCoveringGeometry use case is to explain 
how to retrieve the geometrical definition of branch route, segment end points and 
protective covering end points.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAABranchSegmentProtectiveCoveringGeometry</h3>
<p>To launch CAABranchSegmentProtectiveCoveringGeometry, you are required to set 
up the build time environment, then compile CAABranchSegmentProtectiveCoveringGeometry 
along with its prerequisites, set up the run time environment, and then execute 
the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAABranchSegmentProtectiveCoveringGeometry Repository Server User Password SecurityCtx Version PLMType  PLM_ExternalID MBNS&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type of a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
<tr>
		<th>MBNS</th>
		<td>Multibranchable Product to be opened.</td>
	</tr>
</table>
<p>The input model is retrieved by importing the <strong>CAABranchSegmentProtectiveCoveringGeometry.3dxml</strong> 
file from the <strong>CAAElecHarnessItf.edu</strong> framework. </p>
<p><code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\InputData\<strong>CAABranchSegmentProtectiveCoveringGeometry</strong>.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li><a><code><strong>PLM_ExternalID</strong></code></a>: <code>RootPRD</code></li>
	<li><a><code><strong>Version</strong></code></a>: <code>---</code></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAABranchSegmentProtectiveCoveringGeometry 
Code</h3>
<p>The CAABranchSegmentProtectiveCoveringGeometry sample is made of a single class 
named CAABranchSegmentProtectiveCoveringGeometry located in the CAABranchSegmentProtectiveCoveringGeometry.m 
module of the CAAElecHarnessItf.edu framework: <code>InstallRootFolder\CAADoc\CAAElecHarnessItf.edu\CAABranchSegmentProtectiveCovering 
.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CAAAdpOpenProduct</em></td>
		<td>Class to open a product reference given its identifying attributes (PLM_ExternalID, 
		V_version) and returns the requested interface on the reference. The modeler 
		is PRODUCT.</td>
	</tr>
	<tr>
		<td><em>CATIEhiBranch</em></td>
		<td>Interface to manage Branch.</td>
	</tr>
	<tr>
		<td><em>CATIEhiSegment</em></td>
		<td>Interface to manage Segment.</td>
	</tr>
	<tr>
		<td><em>CATIEhiSegmentEnd</em></td>
		<td>Interface to manage Segment End.</td>
	</tr>
	<tr>
		<td><em>CATIEhiProtectiveCovering</em></td>
		<td>Interface to manage Protective Covering.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first create the Electrical environment and retrieve the geometrical 
definition of branch route, segment end points and protective covering end points 
by looking at the code of the Main. There are 14 logical steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">The Necessary Input Arguments to Start CATIA Session</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Opening and Expanding the "RootPRD" Model (arg[7])</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Opening and Expanding the Electrical Branch Geometry 
		3DPart (Opens in Visu Mode)</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Switching Electrical Branch Geometry Reference in Design 
		Mode</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Listing the Branches in Electrical Branch Geometry 
		and Retrieving All the Protective Coverings on 1st Branch</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Listing All the Segments of the Branch and Retrieving 
		the SegmentEnds of First Two Segments</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Listing the Segments Covered by Each of the Protective 
		Covering</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Getting the Geometries of BranchRoute, SegmentEnds, 
		Protection Ends</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Validating the Distances of Geometries</a></td>
	</tr>
	<tr>
		<td>12</td>
		<td><a href="#Step12">Bag Emptying Operation</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>The Necessary Input Arguments to Start CATIA Session</h3>
<pre class="code">...
<span class="keyword">if</span> (10 != argc)
{
  cout &lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;CAABranchSegmentProtectiveCoveringGeometry &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;</span>&lt;&lt; endl;
  cout &lt;&lt;<span class="string">&quot;Repository: The repository name (like PLM1) which is mandatory.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;User: The user name for connection.&quot;</span> &lt;&lt;endl ;
  cout &lt;&lt;<span class="string">&quot;Password: The user password for connection.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;SecurityCtx: A string representing the security context(Role.Organization.Project). Choose Role as Reviewer(as the use case does not modify the PLM Data).&quot;</span>&lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;Version : The version attribute value of the reference to be opened.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLMType: : A PLM Type of a PLM Reference or PLM Representation Reference.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot;</span> &lt;&lt;endl;
  cout &lt;&lt;<span class="string">&quot;MBNS: Multibranchable Product to be opened.&quot;</span> &lt;&lt;endl;  
  cout &lt;&lt; endl;
  retCode = 1;
  <span class="keyword">goto</span> EscapeWay;
}
  
repository = argv[1];
...
strVersion = argv[6];
strPLMType = argv[7];
rootPrdName = argv[8];
strMBNSName = argv[9];
  
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection parameters initialization.</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Repository&quot;</span>, argv[1]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 2;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;Server&quot;</span>, argv[2]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 3;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserID&quot;</span>, argv[3]);
<span class="keyword">if</span> (FAILED(hr))
{ 
  retCode = 4;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;UserPasswd&quot;</span>, argv[4]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 5;
  <span class="keyword">goto</span> EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(<span class="string">&quot;SecurityCtx&quot;</span>, argv[5]);
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 6;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
<span class="keyword">if</span> (FAILED(hr))
{
  retCode = 7;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Opening and Expanding the "RootPRD" Model (arg[7])</h3>
<pre class="code">...
hr = ::CAAOpenPLMComponent(strPLMType, rootPrdName, strVersion, IID_CATIPLMProducts,(void **)&amp;pIRootProduct, Bag, blnExpandAllMode);
 
<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pIRootProduct))
{
  retCode = 9;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Opening and Expanding the Electrical Branch Geometry 3DPart 
(Opens in Visu Mode)</h3>
<pre class="code">...

 hr = ::CAAOpenPLMComponent(strPLMType, strMBNSName, strVersion, IID_CATBaseUnknown,(void **)&amp;pIUnkProductInst, Bag, blnExpandAllMode);

<span class="keyword">if</span> ((FAILED(hr)) || (NULL == pIUnkProductInst))
{
  retCode = 10;
  <span class="keyword">goto</span> EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Switching Electrical Branch Geometry Reference in Design 
Mode</h3>
<pre class="code">...
hr = SwitchToDesignMode(pIUnkProductInst);
<span class="keyword">if</span>(FAILED(hr))
{
  retCode = 11;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Listing the Branches in Electrical Branch Geometry and Retrieving 
All the Protective Coverings on 1st Branch</h3>
<pre class="code">...
<span class="comment">//-----------------------------------------------------------------------
// - Get the CATIEhiHarnessBundle Interface from the opened data
//-----------------------------------------------------------------------</span>
hr = pIUnkProductInst-&gt;QueryInterface(IID_CATIEhiHarnessBundle,(<span class="keyword">void</span>**)&amp;pIEhiHarnessBundle);
<span class="keyword">if</span> ( FAILED(hr) )
{
  retCode = 12;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-----------------------------------------------------------------------
// - List the Branches in the MBNS
//-----------------------------------------------------------------------</span>
hr = pIEhiHarnessBundle-&gt;ListBranches(&amp;pListBranches);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pListBranches ) || (1 != (pListBranches-&gt;Size())))
{
  retCode = 13;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-----------------------------------------------------------------------
// - Get CATIEhiBranch Interface on the obtained Branches
//-----------------------------------------------------------------------</span>
hUnkBranch = (*pListBranches)[1];
<span class="keyword">if</span>(NULL_var == hUnkBranch)
{
  retCode = 14;
  <span class="keyword">goto</span> EscapeWay;
}

hr = hUnkBranch-&gt;QueryInterface(IID_CATIEhiBranch,(<span class="keyword">void</span> **)&amp;pEhiBranch1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiBranch1))
{
  retCode = 15;
  <span class="keyword">goto</span> EscapeWay;
}

<span class="comment">//-----------------------------------------------------------------------
// - Get all the Protective coverings on this Branch (1st Branch)
//-----------------------------------------------------------------------</span>
hr = pEhiBranch1-&gt;ListProtectiveCovering(&amp;pListProtOnBranch1);
<span class="keyword">if</span> ( ( FAILED(hr) ) || ( NULL == pListProtOnBranch1 ) || (2 != (pListProtOnBranch1-&gt;Size())))
{
  retCode = 16;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Listing All the Segments of the Branch and Retrieving the 
SegmentEnds of First Two Segments</h3>
<pre class="code">...
hr = pEhiBranch1-&gt;ListSegments(&amp;pListSegB1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pListSegB1) || (3 != (pListSegB1-&gt;Size())))
{
  retCode = 17;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegTemp = (*pListSegB1)[1];
<span class="keyword">if</span>(NULL_var != hUnkSegTemp)
{
  hr = hUnkSegTemp-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp; pEhiSegment1Branch1);
}

<span class="keyword">if</span>((NULL_var == hUnkSegTemp) || (FAILED(hr)) || (NULL == pEhiSegment1Branch1))
{
  retCode = 18;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment1Branch1-&gt;GetEnds(&amp;pEhiSegment1End1,&amp;pEhiSegment1End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiSegment1End1) || (NULL == pEhiSegment1End2))
{
  retCode = 19;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegTemp = (*pListSegB1)[2];
<span class="keyword">if</span>(NULL_var != hUnkSegTemp)
{
  hr = hUnkSegTemp-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pEhiSegment2Branch1);
}

<span class="keyword">if</span>((NULL_var == hUnkSegTemp) || (FAILED(hr)) || (NULL == pEhiSegment2Branch1))
{
  retCode = 20;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment2Branch1-&gt;GetEnds(&amp;pEhiSegment2End1,&amp;pEhiSegment2End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiSegment2End1) || (NULL == pEhiSegment2End2))
{
  retCode = 21;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkSegTemp = (*pListSegB1)[3];
<span class="keyword">if</span>(NULL_var != hUnkSegTemp)
{
  hr = hUnkSegTemp-&gt;QueryInterface(IID_CATIEhiSegment,(<span class="keyword">void</span> **)&amp;pEhiSegment3Branch1);
}

<span class="keyword">if</span>((NULL_var == hUnkSegTemp) || (FAILED(hr)) || (NULL == pEhiSegment3Branch1))
{
  retCode = 22;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment3Branch1-&gt;GetEnds(&amp;pEhiSegment3End1,&amp;pEhiSegment3End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiSegment3End1) || (NULL == pEhiSegment3End2))
{
  retCode = 23;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Listing the Segments Covered by Each of the Protective Covering</h3>
<pre class="code">...
hUnkProtTemp = (*pListProtOnBranch1)[1];
hr = hUnkProtTemp-&gt;QueryInterface(IID_CATIEhiProtectiveCovering,(<span class="keyword">void</span> **)&amp;pEhiProt1Branch1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiProt1Branch1))
{
  retCode = 24;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiProt1Branch1-&gt;ListCoveredSegments(&amp;pListCoveredSegProt1B1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pListCoveredSegProt1B1) || ( 1 != (pListCoveredSegProt1B1-&gt;Size())))
{
  retCode = 25;
  <span class="keyword">goto</span> EscapeWay;
}

hUnkProtTemp = (*pListProtOnBranch1)[2];
hr = hUnkProtTemp-&gt;QueryInterface(IID_CATIEhiProtectiveCovering,(<span class="keyword">void</span> **)&amp;pEhiProt2Branch1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pEhiProt1Branch1))
{
  retCode = 26;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiProt2Branch1-&gt;ListCoveredSegments(&amp;pListCoveredSegProt2B1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pListCoveredSegProt2B1) || ( 2 != (pListCoveredSegProt2B1-&gt;Size())))
{
  retCode = 27;
  <span class="keyword">goto</span> EscapeWay;
}  

...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Getting the Geometries of BranchRoute, SegmentEnds, Protection 
Ends</h3>
<pre class="code">...
hr = pEhiBranch1-&gt;GetRouteGeometry(&amp;pBodyBranchRoute);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodyBranchRoute))
{
  retCode = 28;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment1End1-&gt;GetGeometry(&amp;pBodySeg1End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodySeg1End1))
{
  retCode = 29;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment1End2-&gt;GetGeometry(&amp;pBodySeg1End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodySeg1End2))
{
  retCode = 30;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment2End1-&gt;GetGeometry(&amp;pBodySeg2End1);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodySeg2End1))
{
  retCode = 31;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiSegment2End2-&gt;GetGeometry(&amp;pBodySeg2End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodySeg2End2))
{
  retCode = 32;
  <span class="keyword">goto</span> EscapeWay;
}

hr = pEhiProt1Branch1-&gt;GetEndPointsGeometry(&amp;pBodyProt1End1,&amp;pBodyProt1End2);
<span class="keyword">if</span>((FAILED(hr)) || (NULL == pBodyProt1End1) || (NULL == pBodyProt1End2))
{
  retCode = 33;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Validating the Distances of Geometries</h3>
<pre class="code">...
pGeomFactory = ::CATCreateCGMContainer();
<span class="keyword">if</span>(NULL == pGeomFactory)
{
  retCode = 34;
  <span class="keyword">goto</span> EscapeWay;
}

pCGMLengthFromBodyOnWireOP = CATCGMCreateLengthFromBodyOnWire(pGeomFactory,pBodySeg1End1,pBodySeg1End2,pBodyBranchRoute,ADVANCED);
<span class="keyword">if</span>(NULL == pCGMLengthFromBodyOnWireOP)
{
  retCode = 35;
  <span class="keyword">goto</span> EscapeWay;
}

pCGMLengthFromBodyOnWireOP-&gt;Run();
distanceseg1E1E2 = pCGMLengthFromBodyOnWireOP-&gt;GetDistance(&amp;Point1,&amp;Point2);
distanceseg1E1E2 = CATFabs(50 - distanceseg1E1E2);
<span class="keyword">if</span>(0.001 &amp;lt distanceseg1E1E2)
{
  retCode = 36;
  <span class="keyword">goto</span> EscapeWay;
}

pCGMLengthFromBodyOnWireOP-&gt;SetVertices(pBodySeg2End1,pBodySeg2End2);
pCGMLengthFromBodyOnWireOP-&gt;Run();
distanceseg2E1E2 = pCGMLengthFromBodyOnWireOP-&gt;GetDistance(NULL,NULL);
distanceseg2E1E2 = CATFabs(125 - distanceseg2E1E2);
<span class="keyword">if</span>(0.001 &amp;lt distanceseg2E1E2)
{
  retCode = 37;
  <span class="keyword">goto</span> EscapeWay;
}

pCGMLengthFromBodyOnWireOP-&gt;SetVertices(pBodyProt1End1,pBodyProt1End2);
pCGMLengthFromBodyOnWireOP-&gt;Run();
distanceProt1E1E2 = pCGMLengthFromBodyOnWireOP-&gt;GetDistance(NULL,NULL);
distanceProt1E1E2 = CATFabs(50 - distanceProt1E1E2);
<span class="keyword">if</span>(0.001 &amp;lt distanceProt1E1E2)
{
  retCode = 38;
  <span class="keyword">goto</span> EscapeWay;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Bag Emptying Operation</h3>
<pre class="code">...
<span class="keyword">if</span> (SUCCEEDED(Bag.RemoveAll()))
  cout &lt;&lt; <span class="string">&quot;Empties the Bag&quot;</span>&lt;&lt;endl;
<span class="keyword">else</span>
{
  retCode = 39;
  cout &lt;&lt; <span class="string">&quot;Error During Empties the Bag&quot;</span>&lt;&lt;endl;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
<span class="keyword">if</span> (FAILED(hr)) 
{
  cout &lt;&lt; <span class="string">&quot;The SESSION is not Closed&quot;</span>&lt;&lt;endl;
  retCode = 40;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has explained how to retrieve the geometrical definition of branch 
route, segment end points and protective covering end points.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="Reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="History">
	<tr>
		<td>Version: <strong>1</strong> [May 2012] </td>
		<td>Document created </td>
	</tr>
</table>
<script type="text/javascript">      insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
