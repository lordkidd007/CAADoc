<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Component Rules</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Component Rules</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>V6 introduces various components at different levels (interface-based 
		components, framework components, modeler components, product components). 
		Those components have to be designed so that they:</p>
		<ul>
			<li>Increase object reusability</li>
			<li>Ensure build time and run time developments upward compatibility</li>
			<li>Handle a multi-tier architecture</li>
			<li>Insure high performance.</li>
		</ul>
		<p>In order to achieve these goals, here are compulsory architecture rules 
		dealing with the V6 components:</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#Interface">Interface-based Component 
			Rules</a></li>
			<li><a href="#Frameworks">Framework Component Rules</a></li>
			<li><a href="#Products">Product Component Rules</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>Basically, besides ordinary C++ or Java objects, V6 provides four kinds of object-oriented 
components:</p>
<ul>
	<li>The <strong>interface-based component</strong>: thanks to the Object Modeler 
	component, an elementary object can be implemented thru several C++ classes 
	and can be seen as a multi-interfaces behavioral object.<br />
	<img alt="Interface-Based Components" src="images/CAABasicObject.jpg" width="384" height="164"/></li>
	<li>The <strong>framework</strong>: the development file tree provides the community 
	developers with consistent sets of functionalities packaged in super-objects 
	called frameworks.<br />
	<img alt="Framework Structure" src="images/V5Framework.jpg" width="600" height="295"/></li>
	<li>The <strong>modeler</strong>: a modeler is a set of frameworks modeling 
	data and their associated behaviors. A modeler is usually made up of an interface 
	framework and their implementation frameworks.<br />
	<img alt="Modeler" src="images/CAAModelers.jpg" width="602" height="324"/></li>
	<li>The <strong>product</strong>: a product is a set of frameworks insuring 
	an end user functionality (end user application) in a given applicative domain. 
	This is usually a modeler and its UI command frameworks.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Interface"></a>Interface-based Component Rules</h2>
<table class="fill">
	<colgroup valign="top" span="4">
	</colgroup>
	<colgroup align="center" valign="top">
	</colgroup>
	<tr>
		<th>Rule Title</th>
		<th>Rule Description</th>
		<th>Explanation</th>
		<th>Metric</th>
		<th>Objective</th>
	</tr>
	<tr>
		<td><strong>1-True Interface Based Component</strong></td>
		<td>A component should adhere to pure interfaces, i.e., interfaces inherited 
		from IUnknown (C++) or Object (Java).</td>
		<td>
		<ul>
			<li>It will allow a runtime upward compatibility between modelers (C++)</li>
			<li>This reduces code coupling between component providers and components 
			users.</li>
		</ul>
		</td>
		<td>By Framework public part<br />
		(Nb CATBaseUnknown Interfaces) / (Nb Interfaces)</td>
		<td>0%</td>
	</tr>
	<tr>
		<td><strong>2-Interface Stability</strong></td>
		<td>
		<ul>
			<li>Public interfaces (L1) must insure a build time upward compatibility 
			between releases, and a run time upward compatibility between SPs [1].</li>
		</ul>
		</td>
		<td>It will allow BP and customers to re-use their L1-based development 
		on all Service Packs</td>
		<td>By framework, and by public parts<br />
		Number of deviations</td>
		<td>0</td>
	</tr>
	<tr>
		<td><strong>3-Component Licensing</strong></td>
		<td>A component instantiation should required a license from the interactive 
		product it belongs to: the component has to be located in an authorized 
		framework, that is, a framework covered by an interactive license.</td>
		<td>
		<ul>
			<li>All factories or commands have to be secured when used thru API</li>
			<li>The Enterprise Architecture framework provides component default 
			licensing behaviors which have to be &quot;manually&quot; completed when instantiating 
			objects with a non standard manner.</li>
		</ul>
		</td>
		<td>For all entities<br />
		(Nb licensed factories) / (Nb factories)</td>
		<td>100%</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Frameworks"></a>Framework Component Rules</h2>
<table class="fill">
	<colgroup valign="top" span="4">
	</colgroup>
	<colgroup align="center" valign="top">
	</colgroup>
	<tr>
		<th>Rule Title</th>
		<th>Rule Description</th>
		<th>Explanation</th>
		<th>Metric</th>
		<th>Objective</th>
	</tr>
	<tr>
		<td><strong>4-Public/Protected Dependencies</strong></td>
		<td>
		<ul>
			<li>Public interfaces only rely on other public interfaces. </li>
			<li>Protected interfaces only rely on public or other protected interfaces.</li>
		</ul>
		</td>
		<td>Framework encapsulation must not be violated.</td>
		<td>Nb of inconsistent interfaces links
		<p>(mkmk BAD003 errors)</p>
		</td>
		<td>0</td>
	</tr>
	<tr>
		<td><strong>4a- Declare All Prerequisites</strong></td>
		<td>Framework IdentityCard must reference all frameworks that are required 
		to build the framework.</td>
		<td>Prerequisites inherited through another framework may be removed from 
		this framework at any time, breaking your code.</td>
		<td>Nb of missing prerequisites errors (mkmk BAD001, BAD002 and BAD005 errors)</td>
		<td>0</td>
	</tr>
	<tr>
		<td><strong>5-Acyclic Prerequisite Frameworks</strong></td>
		<td>Frameworks are located in a non cyclic oriented graph.</td>
		<td>Compiling a framework is a process that cannot handle cycles nor circular 
		references.</td>
		<td>Nb of cyclicities
		<p>(&quot;Anomalies_cyclicit&#233;&quot;)</p>
		</td>
		<td>0</td>
	</tr>
	<tr>
		<td><strong>6-Framework identifications</strong></td>
		<td>Frameworks must specify their role in the Model/Presentation paradigm 
		: Interfaces / Model / UI.</td>
		<td>Identifying frameworks lead to consistent frameworks dependencies ; 
		a framework is associated to a product/domain with the same tag.</td>
		<td>(Nb of tagged frameworks) / (Nb of frameworks)</td>
		<td>100%</td>
	</tr>
	<tr>
		<td><strong>7-Interface Framework Contents</strong></td>
		<td>An interface framework only contains interfaces or global function declarations 
		acting as factories. Their implementations are not contained within the 
		interface framework</td>
		<td>It must insure a loose coupling between frameworks.</td>
		<td>By framework, public parts<br />
		(Nb of concrete class)/(Nb of entities)</td>
		<td>0%</td>
	</tr>
	<tr>
		<td><strong>8-Model or UI Framework Contents</strong></td>
		<td>Model or UI frameworks public part has to be empty.</td>
		<td>Product interfaces are located within the product interfaces frameworks.</td>
		<td>Public part: (Nb of entities)</td>
		<td>0</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Products"></a>Product Component Rules</h2>
<table class="fill">
	<colgroup valign="top" span="4">
	</colgroup>
	<colgroup align="center" valign="top">
	</colgroup>
	<tr>
		<th>Rule Title</th>
		<th>Rule Description</th>
		<th>Explanation</th>
		<th>Metric</th>
		<th>Objective</th>
	</tr>
	<tr>
		<td><strong>9-UI / Model / Interfaces Segregation</strong></td>
		<td>UI functionalities and model functionalities should be located in two 
		different frameworks, isolated by an interface frameworks.</td>
		<td>
		<ul>
			<li>It will allow batch developments and avoid loading of bundles of 
			useless code</li>
			<li>It is one of the key factors to insure a multi-tier architecture.</li>
		</ul>
		</td>
		<td>Nb of identified frameworks / products (or domains)</td>
		<td>&gt;3 (at least 1 Interfaces Fmk + 1 Model + 1 UI)</td>
	</tr>
	<tr>
		<td colspan="5">
		<img alt="product" src="images/V5SPM.jpg" width="500" height="336"/> 
		Product functional dependencies</td>
	</tr>
	<tr>
		<td rowspan="3"><strong>10-UI, Model and Interfaces frameworks Dependencies</strong></td>
		<td rowspan="3">
		<ul>
			<li>UI frameworks only rely on UI frameworks or Interface frameworks</li>
			<li>Model frameworks only rely on model frameworks or Interface frameworks</li>
			<li>Interface frameworks only rely on interface frameworks</li>
			<li>UI and model frameworks of a given product only communicate thru 
			their interface framework.</li>
		</ul>
		</td>
		<td rowspan="3">
		<ul>
			<li>It will minimize the bundle of code that has to be loaded at run 
			time to insure a given functionality. </li>
			<li>It will minimize the build time impacts. </li>
			<li>It will insure a true batch mode. </li>
			<li>It will provide a weak coupling between UI and model. </li>
			<li>It will generate weak build time dependencies between modelers or 
			products. </li>
			<li>It will allow build time dependencies controls.</li>
		</ul>
		</td>
		<td>By model framework: (Nb of UI dependencies)</td>
		<td>0</td>
	</tr>
	<tr>
		<td>By UI framework: (Nb of model dependencies)</td>
		<td>0</td>
	</tr>
	<tr>
		<td>By Interface frameworks: (Nb of UI + Model dependencies)</td>
		<td>0</td>
	</tr>
	<tr>
		<td><strong>11-Run Time Dependencies</strong></td>
		<td>A product should define at its very beginning its runtime dependencies 
		(Model frameworks IdentityCards) minimizing dependencies between products.</td>
		<td>Coupling several products will require runtime licenses from all pre-requisite 
		products ; that could be a major packaging issue when unwanted resources 
		from another domain are picked-up lately in the implement process.</td>
		<td>By packaged products: Nb of internal products/domains (sets of associated 
		Interfaces/UI/Model frameworks)</td>
		<td>Ranking (complexity criteria)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADocLxUsageRules.htm">Authorized API Identification, Usage, 
		Deprecation, and Stability</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Sep 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>1.1</strong> [Oct 2000]</td>
		<td>Metrics added; simplified UI/Model/Interfaces view</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
