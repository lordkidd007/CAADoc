<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>StartUp Consistency and Data Compatibility</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>StartUp Consistency and Data Compatibility</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how you can modify the StartUps stored in the StartUp 
		catalogs while ensuring that documents relying on these catalogs remain 
		legible. </p>
		<ul>
			<li><a href="#100000">Why Managing Feature Compatibility?</a></li>
			<li><a href="#200000">Modifying StartUp Structure</a></li>
			<li><a href="#300000">Modifying StartUp Hierarchy</a></li>
			<li><a href="#400000">Modifying StartUp Catalogs</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>Why Managing StartUp Compatibility?</h2>
<p>When moving from a V5 release to another one, you legitimately expect that upward 
data compatibility be ensured. When working with features, this upward data compatibility 
is easy to obtain if you understand the feature underlying mechanisms, and if you 
follow basic feature compatibility rules.</p>
<p>The Feature Modeler relies on the prototype/instance paradigm. The first instance, 
called the StartUp, provides its derived instances with their basic type and behaviors. 
To make it possible to share StartUps between documents, and also for memory size 
and performance reasons, StartUps are stored in catalogs. If StartUp catalogs do 
no change from a V5 release to a next one, the upward compatibility is automatically 
ensured. In addition, if they are modified in the next release, some simple consistency 
rules to apply when modifying them ensure that a document relying on, or created 
using, these catalogs in a previous V5 release can be read in a next one. In other 
words, ensuring StartUp catalog consistency ensures upward document/feature compatibility.</p>
<p>To do this, the rules to follow and apply when modifying StartUps and StartUp 
catalogs are classified into:</p>
<ul>
	<li>Rules for StartUp structure</li>
	<li>Rules for StartUp hierarchy</li>
	<li>Rules for StartUp catalogs.</li>
</ul>
<p>These rules are checked when creating or modifying a StartUp catalog thanks to 
the StartUp catalog compiler/checker available before delivery. If a given StartUp 
catalog doesn&#39;t match one of these rules, the corresponding .feat file is not generated.</p>
<p>Some applications do not manage StartUp catalogs, and create their StartUps on 
the fly when they create their containers. These applications manage themselves 
the upward compatibility of their data.</p>
<p>This article uses the following notation: V5Rn and V5Rp designate two V5 releases, 
where p is greater than n.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Modifying StartUp Structure</h2>
<p>The structure of a StartUp can be modified according to the following rules:</p>
<ol>
	<li>Adding an attribute in V5Rp is possible.<br />
	This is possible thanks to the V5 Feature Modeler dynamicity. Applications written 
	for V5Rn will go on running without taking care of the new attribute. In V5Rp, 
	the synchronization mechanism automatically adds the attribute to any instance 
	that has not it. If this attribute is accessed, it is valued using the StartUp 
	attribute value, if this value exists. The application must either provide a 
	default value that is suitable with its process, or values the attribute when 
	accessing it on the instance</li>
	<li>Deleting an attribute in V5Rp is also possible.<br />
	This is possible again thanks to the V5 Feature Modeler dynamicity. If the attribute 
	were overridden on the instance, it then becomes autonomous from the one of 
	the StartUp, and everything happens as if this attribute were added on the instance 
	in V5Rp. If the attribute were not overridden on the instance, it then disappears 
	from the instance when the instance is read. The application must then be consistent: 
	deleting an attribute from a StartUp in a catalog implies removing the code 
	that accesses this attribute from the application</li>
	<li>Moving an attribute from a StartUp to one of its base StartUps is possible.<br />
	Since the StartUp from which the attribute is removed derives from the StartUp 
	to which it is moved, this attribute will remain visible because it becomes 
	inherited. This makes it possible to share this attribute by several StartUps. 
	The application must check that the attribute value remains consistent with 
	the values it could have on the initial StartUps and must generate the appropriate 
	access keys</li>
	<li>If you want to modify the type of an attribute, the new type must be compatible 
	from the inheritance standpoint.
	<ul>
		<li>For a simple type attribute, such as tk_integer, tk_double, or tk_string, 
		the attribute is valued using a class that is specific to the V5 Feature 
		Modeler, and not thanks to a literal. Changing for a literal is thus not 
		possible, because it would imply to change the attribute type to tk_specobject</li>
		<li>For a feature type attribute, the modification of a tk_specobject to 
		tk_component, or the reverse, is not possible, because aggregation implies 
		mechanisms specific to the data structure, such as the life cycle management 
		of an aggregated object that is not left to this object</li>
	</ul>
	</li>
	<li>You can&#39;t modify the sp_XX facet of an attribute of a StartUp.<br />
	This modification cannot be dynamically propagated to the instance for which 
	this attribute is local.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Modifying StartUp Hierarchy</h2>
<ol>
	<li>You can&#39;t delete a StartUp.<br />
	The links wouldn&#39;t be restored, even if the StartUp attributes were assigned 
	to its parent StartUp. In addition, any instance of the StartUp would loose 
	all the behaviors associated with this StartUp</li>
	<li>You can insert a new StartUp in the catalog StartUp hierarchy.<br />
	This is equivalent to locally adding attributes and enriches the behaviors of 
	the instances in V5Rp</li>
	<li>You can change the name of a StartUp.<br />
	The key to retrieve it is its type</li>
	<li>You can&#39;t add a StartUp into a catalog if a StartUp with the same type exists 
	in one of the prerequisite catalogs</li>
	<li>You can&#39;t move a StartUp from one catalog to another one, even if links 
	exist between these catalogs.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>Modifying StartUp Catalogs</h2>
<p>If a catalog existed in V5Rn, you cannot, in V5Rp:</p>
<ol>
	<li>Change its name or its UID</li>
	<li>Cut it up into several catalogs, because the links when retrieving a StartUp 
	would not be solved</li>
	<li>Cut it up into several sub containers, for the same reason. </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To ensure upward data compatibility with features relying on StartUp catalogs 
while modifying these catalogs, rules should be observed that deal with StartUp 
structure, hierarchy, and catalogs.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
