<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Authorized API Identification, Usage, Deprecation, and Stability</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Authorized API Identification, Usage, Deprecation, 
		and Stability</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article gives you rules regarding Authorized API qualifiers and 
		usage.</p>
		<ul>
			<li><a href="#CAAResources">Authorized APIs</a></li>
			<li><a href="#CAAResourceQualifiers">Authorized API Qualifiers</a></li>
			<li><a href="#CAAResourceDeprecation">Authorized API Deprecation</a></li>
			<li><a href="#CAAResourceStability">Authorized API Stability</a></li>
			<li><a href="#CAAResourceTags">Authorized API Additional Tags</a></li>
			<li><a href="#CAAResourceRequired">Authorized APIs Required by Your 
			Application</a> </li>
			<li><a href="#NoUse">Authorized APIs You Should Not Use</a></li>
			<li><a href="#CAAResourceProcessing">Authorized and Deprecated API, 
			and DS Internal Resource Processing</a>
			<ul>
				<li><a href="#CAAL1ResourceProcessing">Authorized API Processing</a></li>
				<li><a href="#CAADeprecatedResourceProcessing">Deprecated API Processing</a></li>
				<li><a href="#NonCAAResourceProcessing">DS Internal Resource Processing</a></li>
			</ul>
			</li>
			<li><a href="#CAAReleases">Correspondence Between Release Code Level 
			and Marketing Names</a></li>
		</ul>
		<a href="#CAAReleases"></a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResources"></a>Authorized APIs</h2>
<p>Dassault Syst&#232;mes solutions and products may include Authorized APIs that can 
be used to create client applications. The APIs authorized by a configuration or 
a product are located in the PublicInterfaces directories of one or several frameworks 
of the configuration or the product. Additional APIs may be found in these directories, 
for example:</p>
<ul>
	<li>To close the set of Authorized APIs with some DS Internal Resources from 
	the <code>#include</code> statement standpoint</li>
	<li>To enable code generated by different tools to build.</li>
</ul>
<p>Client applications can use only Authorized APIs tagged using Authorized API 
qualifiers. These qualifiers help to distinguish them from the others supplied only 
for build purpose. In addition, some Authorized APIs, such as classes or interfaces, 
may be only partially authorized. For example, a class may authorize only a subset 
of its methods. As a developer, to know what you can use, you can either:</p>
<ul>
	<li>Refer to the Reference part of the Encyclopedia for C++ and Automation APIs.</li>
	<li>Refer to the C++ or IDL header files, and interpret the Authorized API qualifiers 
	and tags, as described below.</li>
</ul>
<p>Remember that what is <strong>NOT</strong> documented in the Encyclopedia is 
a DS Internal Resource and <strong>CANNOT</strong> be used in a client application. 
DS Internal Resources in the PublicInterfaces directory are either tagged:</p>
<ul>
	<li>@nodoc for an entity inside a header that is itself exposed, such as a member 
	function in an exposed class</li>
	<li>@CAA2Required for a complete header. In this case it may be indirectly referenced, 
	but <strong>NO</strong> explicit include can be done in any header or source 
	files of an application.</li>
</ul>
<!--
<p>Java APIs do not include Authorized API qualifiers. Only documented Java
APIs are authorized and can be used.</p>
-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceQualifiers"></a>Authorized API Qualifiers</h2>
<p>These qualifiers are located at the top of the file and enclosed in a <code>/** 
*/</code> comment. Below is an example of such tags:</p>
<pre class="code">#ifndef CATTopologicalBlend_H
#define CATTopologicalBlend_H
// COPYRIGHT DASSAULT SYSTEMES 1999
/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */</pre>
<p>The meanings of these qualifiers are:</p>
<table>
	<tr>
		<th>Tag</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code>@CAA2Level L1</code></td>
		<td>Marks the header as an Authorized API. Valid values are L0 and L1</td>
	</tr>
	<tr>
		<td><code>@CAA2Usage U1</code></td>
		<td>Defines the header intended usage. Valid values range from U0 to U6</td>
	</tr>
</table>
<p>The two Authorized APIs qualifier values are:</p>
<table class="fill">
	<colgroup align="center" valign="top" span="1">
	</colgroup>
	<colgroup valign="top" span="3">
	</colgroup>
	<tr>
		<th>Value</th>
		<th>Description</th>
		<th>Aim</th>
		<th>Comment</th>
	</tr>
	<tr>
		<td><strong>L0</strong></td>
		<td>Authorized API</td>
		<td>
		<ul>
			<li>Provides Customers, Business Partners, and Adopters with Authorized 
			APIs for beta testing</li>
			<li>Provides Authorized APIs to be qualified as L1 in next releases 
			to enable a validation/evaluation process.</li>
		</ul>
		</td>
		<td>
		<ul>
			<li>No compatibility is insured - but usage is allowed</li>
			<li>May change or disappear without any warning</li>
			<li>No documentation is provided</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td><strong>L1</strong></td>
		<td>Authorized API</td>
		<td>Provides Customers, Business Partners, and Adopters with reliable APIs 
		to use to develop applications</td>
		<td>
		<ul>
			<li>Build time upward compatibility is insured between releases, except 
			if the Authorized API was deprecated two releases before</li>
			<li>Run time upward compatibility is insured between FPs of the same 
			release</li>
			<li>A documentation is provided.</li>
		</ul>
		</td>
	</tr>
</table>
<p>The usage of a header file depends on its intended use in the client application.</p>
<table class="fill">
	<colgroup align="center" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Value</th>
		<th>Usage Description</th>
	</tr>
	<tr>
		<td><strong>U0</strong></td>
		<td>Usage not yet specified. Reserved for L0 Authorized APIs.<br />
		Nevertheless, L0 Authorized APIs can have a specified usage ranging from 
		U1 to U6.</td>
	</tr>
	<tr>
		<td><strong>U1</strong></td>
		<td><strong>Concrete class</strong>: use as is only. C++ usage<br />
		The common usage is to either instantiate the class or retrieve an existing 
		pointer to an instance of that class, and call its methods.</td>
	</tr>
	<tr>
		<td><strong>U2</strong></td>
		<td><strong>Concrete class</strong>: may be derived. C++ usage<br />
		The common usage is to create a new class that derives from this class, 
		possibly reimplement some of its methods, and add new methods. Then it can 
		be used in the client application.</td>
	</tr>
	<tr>
		<td><strong>U3</strong></td>
		<td><strong>Interface</strong>: cannot be re-implemented, use as is only. 
		C++ and IDL usage<br />
		The common usage is to retrieve a pointer to this interface onto an Object 
		Modeler component that implements it, and to call its methods.</td>
	</tr>
	<tr>
		<td><strong>U4</strong></td>
		<td><strong>Interface</strong>: can be re-implemented with a DS adapter. 
		C++ usage<br />
		The common usage is to implement this interface onto a client component, 
		usually in an C++ extension class, by deriving the DS adapter, that is, 
		the class provided by DS to be derived for this purpose. This class has 
		a U2 usage, and provides the interface method implementations. Only a subset 
		of the interface methods needs to be implemented, the remainder being implemented 
		by the DS adapter. Usually, only the methods to implement are documented.
		<p>U4 usage is followed by the adapter to use. For example, the <em>CATIEdit</em> 
		interface must be implemented by a class that derives from the adapter
		<em>CATExtIEdit</em>:</p>
		<pre class="code">/**
 * @CAA2Level L1
 * @CAA2Usage U4 CATExtIEdit
 */</pre>
		</td>
	</tr>
	<tr>
		<td><strong>U5</strong></td>
		<td><strong>Interface</strong>: must be totally re-implemented. C++ usage<br />
		The common usage is to implement all the interface methods onto a client 
		component.</td>
	</tr>
	<tr>
		<td><strong>U6</strong></td>
		<td><strong>Interface</strong>: must be derived. C++ usage<br />
		The common usage is to create an interface that derives from this interface 
		without adding new methods, and to implement the derived interface. This 
		is for example the case of a workbench or add-in exposed interface.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="NoUse"></a>Authorized APIs You Should Not Use</h2>
<p>Some APIs are still authorized, but you nevertheless should not use them, or 
should use them against your own data only.</p>
<table class="fill">
	<tr>
		<th>Frameworks</th>
		<th>Classes</th>
		<th>Methods</th>
		<th>Why</th>
	</tr>
	<tr>
		<td>ObjectModelerBase</td>
		<td><em>CATIContainer</em></td>
		<td><code>ListMembersHere</code></td>
		<td>Use this method against your own containers only </td>
	</tr>
	<tr>
		<td rowspan="3">ObjectSpecsModeler</td>
		<td rowspan="3"><em>CATISpecObject</em></td>
		<td><code>GetReference</code></td>
		<td rowspan="3">Use these methods against your own features only </td>
	</tr>
	<tr>
		<td><code>GetRootFather</code></td>
	</tr>
	<tr>
		<td><code>ListComponents</code></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceDeprecation"></a>Authorized API Deprecation</h2>
<p>When an Authorized API becomes obsolete, it is deprecated. Although this should 
be exceptional, the number of the Authorized API makes it happen more frequently 
than wished. The deprecation process runs as follows:</p>
<ul>
	<!--
  <li>Deprecation takes place for C++, Automation, and Java APIs</li>
-->
	<li>Deprecation takes place for C++ and Automation</li>
	<li>A deprecated API can be any Authorized API (class, interface, method, global 
	function, enum, structure, #define or macro, and so on)</li>
	<li>An Authorized API is deprecated starting from the General Availability (GA) 
	of a new release, and never starting from a Fix Pack (FP)</li>
	<li>A deprecated API remains available during a two-release life time starting 
	from the one for which it is deprecated.<br />
	In V6 a release can be identified by its marketing name, eg: V6R2010x, or its 
	code level, eg: R208. Correspondence between marketing names and code levels 
	is described <a href="#CAAReleases">here</a>. In the following we&#39;ll use the 
	code level that offers an easier understanding of the sequence order of the 
	releases. For example, an Authorized API deprecated starting from R208 code 
	level will remain available without modification during the whole R208 and R209 
	life times.</li>
	<li>A deprecated API shows its replacing Authorized API that client applications 
	must use instead. This replacing Authorized API is of course available at the 
	deprecation time. The two-release life time is dedicated to developers to modify 
	their client applications using the replacing Authorized API. Deprecated APIs 
	are available from the Encyclopedia Reference section that includes a deprecated 
	index for each API language.</li>
	<li>A deprecated API issues a warning when client application modules that contain 
	it are rebuilt</li>
	<li>A deprecated API is removed from the Authorized APIs two releases after 
	the one it was deprecated.<br />
	For example, an API deprecated starting from R208 will be removed on R210. GA.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceStability"></a>Authorized API Stability</h2>
<p>Client application compatibility depends on Authorized API stability between 
FPs and releases.</p>
<p>Authorized APIs are checked in a such a way that:</p>
<ul>
	<li>They are run time upward compatible between the Fix Packs (FPs) of a given 
	release.<br />
	This means that client applications don&#39;t need to be rebuilt on FPs.</li>
	<li>They are build time upward compatible between two subsequent releases, as 
	far as the deprecation process doesn&#39;t take place.<br />
	This means that client applications must be rebuilt on new releases without 
	code changes, except if Authorized APIs tagged as deprecated are used in the 
	client application and if it was deprecated from more than two releases. Warning 
	are issued when rebuilding the application for each deprecated API found. See
	<a href="#CAAResourceDeprecation">Deprecation</a>.</li>
</ul>
<p>Run time upward compatible possible modifications between two successive FPs:</p>
<ul>
	<li>Add new classes and interfaces</li>
	<li>For U1 &quot;Use as is&quot; classes: add new concrete public methods</li>
	<li>For U2 &quot;may be derived&quot; classes: add new concrete, public or protected methods</li>
	<li>For both U1 and U2 classes: add, modify, or remove concrete private methods</li>
	<li>For interfaces: nothing</li>
</ul>
<p>Build time upward compatible possible modifications between two successive releases:</p>
<ul>
	<li>Same as above PLUS:</li>
	<li>Declare classes / interfaces / methods as deprecated provided that the function 
	is replaced with another one</li>
	<li>Remove or de-expose deprecated APIs after two releases.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceTags"></a>Authorized APIs Additional Tags</h2>
<p>When scanning the header files, you may find two tags in the comments located 
above any entity, such as class, interface, enum, typedef, #define or macro, or 
structure declaration, or global function or method prototype, that locally resets 
for that entity the Authorized API qualifiers set for the header file. These two 
tags are:</p>
<table class="fill">
	<tr>
		<th>Tag</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><strong>@nodoc</strong></td>
		<td><strong>Do not use</strong><br />
		This depicts a DS Internal Resource. Its usage is prohibited.</td>
	</tr>
	<tr>
		<td><strong>@deprecated</strong></td>
		<td><strong>Do not use any longer</strong><br />
		This means that the API was authorized, but will be removed. See
		<a href="#CAAResourceDeprecation">Authorized API Deprecation</a>. The tag 
		syntax is as follows:
		<pre class="code">/**
 * @deprecated R208 CATBaseUnknown
 * ...</pre>
		<p>R208 is the code level for V6R2010 as described here. It means that the 
		Authorized API is deprecated starting from R208, and that the replacing 
		API is CATBaseUnknown. Its usage is prohibited starting with R210.</p>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceRequired"></a>Authorized APIs Required by Your Application</h2>
<p>The Authorized APIs are supplied by configuration and&nbsp; products:</p>
<ul>
	<li>A run time configuration or product is protected by a license (MD2 for instance). 
	This license authorizes parts of the frameworks that make up the configuration 
	or product. The API part of this configuration or product is made up of the 
	sub-set of those frameworks containing at least an Authorized API.</li>
	<li>An application or a product intended to be compatible with a given run time 
	license must be developed on top the previous sub-set.</li>
	<li>This application or product must be executed in an environment that exactly 
	contains this run time license.</li>
</ul>
<p>To determine which Authorized API are required by your application, go to the
<a href="#" onclick="javascript:CAAlinkUrlNewWin('http://www.3ds.com/alliances');return false">
3DS Internet site</a>. Register if you have not done it already, and click C++ &amp; 
JAVA DEVELOPERS. Then click COLLABORATION, and Configuration Contents in the left 
frame, and select a release, a media, and a configuration or a product to know which 
frameworks it supplies.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAResourceProcessing"></a>Authorized and Deprecated API, and DS Internal 
Resource Processing</h2>
<p>The Native Apps Development Toolset process differently the Authorized APIs, Deprecated APIs, 
and DS Internal Resources.</p>
<h3><a name="CAAL1ResourceProcessing"></a>Authorized API Processing</h3>
<table class="fill">
	<colgroup width="20%" span="3">
	</colgroup>
	<tr>
		<th>Build</th>
		<th>Documentation</th>
		<th>Unauthorized Symbols</th>
		<th>Stability Checking</th>
	</tr>
	<tr>
		<td>No warning is generated, except if the API is deprecated.</td>
		<td>Authorized APIs appear in the Encyclopedia.</td>
		<td>Authorized APIs are not stored within the &quot;Unauthorized symbols&quot; database.</td>
		<td>A build time stability is insured between releases, except if the Authorized 
		API was deprecated two releases before.
		<p>A runtime stability is insured between FPs or the same release: no change 
		is allowed within a release.</p>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CAADeprecatedResourceProcessing"></a>Deprecated API Processing</h3>
<table class="fill">
	<colgroup width="20%" span="3">
	</colgroup>
	<tr>
		<th>Build</th>
		<th>Documentation</th>
		<th>Unauthorized Symbols</th>
		<th>Stability Checking</th>
	</tr>
	<tr>
		<td>No warning is generated, except if the API is deprecated.</td>
		<td>Deprecated APIs appear in the Encyclopedia as deprecated, and show up 
		their replacing Authorized API.</td>
		<td>Deprecated APIs are not stored within the &quot;Unauthorized symbols&quot; database.</td>
		<td>A build time stability is insured between releases, except if the Authorized 
		API was deprecated two releases before.
		<p>A runtime stability is insured between FPs or the same release: no change 
		is allowed within a release.</p>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="NonCAAResourceProcessing"></a>DS Internal Resource Processing</h3>
<p>The DS Internal Resources usage is prohibited.</p>
<table class="fill">
	<colgroup width="20%" span="3">
	</colgroup>
	<tr>
		<th>Build</th>
		<th>Documentation</th>
		<th>Unauthorized Symbols</th>
		<th>Stability Checking</th>
	</tr>
	<tr>
		<td>
		<ul>
			<li>Warnings are displayed to the developer, but the library is built.</li>
			<li>An invalid library is refused at run time.</li>
		</ul>
		</td>
		<td>DS Internal Resources do not appear in the Encyclopedia.</td>
		<td>DS Internal Resources are stored within the &quot;Unauthorized symbols&quot; database.</td>
		<td>No stability check is insured.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAReleases"></a>Correspondence Between Release Code Level and Marketing 
Name</h2>
<table class="fill">
	<tr>
		<th>Code Level</th>
		<th>Marketing Name</th>
	</tr>
	<tr>
		<td>R208</td>
		<td>V6R2010x</td>
	</tr>
	<tr>
		<td>R209</td>
		<td>V6R2011</td>
	</tr>
	<tr>
		<td>R210</td>
		<td>V6R2011x</td>
	</tr>
	<tr>
		<td>R211</td>
		<td>V6R2012</td>
	</tr>
	<tr>
		<td>R212</td>
		<td>V6R2012x</td>
	</tr>
	<tr>
		<td>R213</td>
		<td>V6R2013</td>
	</tr>
	<tr>
		<td>R214</td>
		<td>V6R2013x</td>
	</tr>
	<tr>
		<td>R215</td>
		<td>V6R2014</td>
	</tr>
	<tr>
		<td>R216</td>
		<td>R2014x</td>
	</tr>
	<tr>
		<td>R417</td>
		<td>R2015x</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>1.1</strong> [Nov 2000]</td>
		<td>L0, L2, U6, U7 notions added</td>
	</tr>
	<tr>
		<td>Version: <strong>1.2</strong> [Dec 2000]</td>
		<td>U8 notion added</td>
	</tr>
	<tr>
		<td>Version: <strong>1.3</strong> [Aug 2002]</td>
		<td>L2, U7, U8 notions removed</td>
	</tr>
	<tr>
		<td>Version: <strong>1.4</strong> [Feb 2003]</td>
		<td>Deprecation, stability notions, additional tags, and required APIs added</td>
	</tr>
	<tr>
		<td>Version: <strong>1.5</strong> [Feb 2004]</td>
		<td>Authorized APIs and DS Internal Resources added</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
