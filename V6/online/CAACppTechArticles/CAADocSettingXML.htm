<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Settings Creation Guidelines</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Settings Creation Guidelines</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article gives you guidelines and tips to create the XML files representing 
		your setting repositories.</p>
		<p>The naming rules are dedicated to setting attributes and help you assign 
		correct and meaningful names to your setting attributes .</p>
		<ul>
			<li><a href="#XML">XML Guidelines and Validation</a></li>
			<li><a href="#Compatibility">Compatibility Guidelines</a></li>
			<li><a href="#Naming">Setting Attribute Naming Rules</a>
			<ul>
				<li><a href="#checklist">Checklist</a> helps you make sure there 
				is no critical issue with the chosen names</li>
				<li><a href="#english">Use English Correctly</a> is dedicated to 
				help French speaking developers</li>
				<li><a href="#meaning">Use Meaningful Names</a> shows several techniques 
				to build names that truly reflect the nature of the represented 
				entity</li>
				<li><a href="#length">Not Too Short, Not Too Long</a> deals wit 
				the problem of name length. It gives an estimation of optimal name 
				length, and also ways to reach that optimal</li>
			</ul>
			</li>
			<li><a href="#Doc">Documenting Setting Repositories and Attributes</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="XML"></a>XML Guidelines and Validation</h2>
<p>This section helps you create the XML setting files. </p>
<ul>
	<li>Creating the XML Setting File</li>
	<li>Creating the Section Describing the Setting Repository</li>
	<li>Describing Each Setting Attribute</li>
	<li>Describing the Relations Between Setting Attributes</li>
	<li>Describe whether the setting attributes are reused in other property pages</li>
	<li>Validating the XML Setting File Against the XSD.</li>
</ul>
<p><strong>Note</strong>: The XML tags are required if not specified as optional.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Creating the XML Setting File</h3>
<p>Create the XML setting file in the CNext\resources\SettingsMetadata folder of 
the appropriate framework.</p>
<p>Assign the name of the setting repository it describes. For example, the CATIAV5Cache 
setting repository the setting file of which is CATIAV5Cache.CATSettings must be 
described in the CATIAV5Cache.xml setting file. A rule of thumb is to have all the 
setting attributes of a given XML file displayed in the same <strong>Options</strong> 
command property page.</p>
<p>Insert the first statement:</p>
<pre class="code">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</pre>
<p>Then, the whole remaining file content is enclosed within the st:repository tag.</p>
<pre class="code">&lt;st:repository xsi:schemaLocation=&quot;urn:com:dassault_systemes:settings settings.xsd&quot;
               xmlns:st=&quot;urn:com:dassault_systemes:settings&quot; 
               xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
...
&lt;/st:repository&gt;</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Creating the Section Describing the Setting Repository</h3>
<pre class="code">&lt;st:Description name=&quot;CATIAV5Cache&quot; PrimaryTabpage=&quot;/Infrastructure/ProductStructure/Cache Management&quot;&gt;
  &lt;st:role&gt;Setting to handle the V5 cache parameters&lt;/st:role&gt;
  &lt;st:detailedRole&gt;Setting to handle the V5 cache parameters&lt;/st:detailedRole&gt;
  &lt;st:RepositoryFile&gt;CATIAV5Cache&lt;/st:RepositoryFile&gt;
  &lt;st:version&gt;1&lt;/st:version&gt;
  &lt;st:compatibility&gt;
    &lt;st:FullCompatibilityfromLevel&gt;1&lt;/st:FullCompatibilityfromLevel&gt;
    &lt;st:UpwardCompatibilityfromLevel&gt;1&lt;/st:UpwardCompatibilityfromLevel&gt;
  &lt;/st:compatibility&gt;
  &lt;st:DedicatedController&gt;
    &lt;st:Framework_CPP&gt;System&lt;/st:Framework_CPP&gt;
    &lt;st:Interface_CPP&gt;CATISysCacheSettingAtt&lt;/st:Interface_CPP&gt;
    &lt;st:Framework_IDL&gt;System&lt;/st:Framework_IDL&gt;
    &lt;st:Interface_IDL&gt;CATIACacheSttingAtt&lt;/st:Interface_IDL&gt;
    &lt;st:LateType&gt;CATSysCacheSettingCtrl&lt;/st:LateType&gt;
  &lt;/st:DedicatedController&gt;
&lt;/st:Description&gt;</pre>
<p>The first section deals with data about the setting repository itself. It is 
enclosed in the <code>st:Description</code> tag.</p>
<pre class="code">&lt;st:Description name=&quot;CATIAV5Cache&quot; PrimaryTabpage=&quot;/Infrastructure/ProductStructure/Cache Management&quot;&gt;
  ...
&lt;/st:Description&gt;</pre>
<p>Where:</p>
<ul>
	<li><code><strong>name</strong></code> is the setting repository name</li>
	<li><code><strong>PrimaryTabpage</strong></code> is the path of the tab page 
	in which the setting attributes can be seen and managed. This path is expressed 
	as a concatenation of possibly two, but generally three names beginning, and 
	separated with &quot;/&quot;:
	<ul>
		<li>The solution name</li>
		<li>The workbench name</li>
		<li>The tab page name</li>
	</ul>
	<p>as they appear in the left part of the window displayed in the <strong>Options</strong> 
	command of the <strong>Tools</strong> menu.</p>
	</li>
</ul>
<p>This section includes:</p>
<ul>
	<li>The Setting Repository Documentation</li>
	<li>The Setting Repository File Name</li>
	<li>The Setting Repository Version</li>
	<li>The Setting Repository Compatibility</li>
	<li>The Setting Repository Controller.</li>
</ul>
<h4>The Setting Repository Documentation</h4>
<p>Two tags enable you to describe the setting repository.</p>
<pre class="code">&lt;st:role&gt;Setting to handle the V5 cache parameters&lt;/st:role&gt;
&lt;st:detailedRole&gt;The V5 cache is used to xxx&lt;/st:role&gt;</pre>
<ol>
	<li>The <code><strong>st:role</strong></code> tag is intended to give a short 
	description of the setting repository. In addition to be used in the setting 
	repository documentation page, the role is extracted and placed besides the 
	setting repository name in the setting repository index to help the reader determine 
	the setting repository looked for among those in the list.</li>
	<li>The <code><strong>st:detailedRole</strong></code> tag is for a comprehensive 
	description of the setting repository. It is optional, but you are strongly 
	encouraged to use it.</li>
</ol>
<p>No html tag should be included within these tags.</p>
<h4>The Setting Repository File Name</h4>
<pre class="code">&lt;st:RepositoryFile&gt;CATIAV5Cache&lt;/st:RepositoryFile&gt;</pre>
<p>Enclose the setting repository file name, without suffix.</p>
<h4>The Setting Repository Version</h4>
<pre class="code">&lt;st:version&gt;1&lt;/st:version&gt;</pre>
<p>When a new setting repository is delivered, its version number is set to 1. The 
version is increased by 1 whenever the setting repository is modified. Such modifications 
can occur when developing a new release, and never for a Service Pack or a Hot Fix. 
The version must always be a non negative integer, that is, versions like 1.0 or 
2.3 are invalid.</p>
<h4>The Setting Repository Compatibility</h4>
<pre class="code">&lt;st:compatibility&gt;
  &lt;st:FullCompatibilityfromLevel&gt;1&lt;/st:FullCompatibilityfromLevel&gt;
  &lt;st:UpwardCompatibilityfromLevel&gt;1&lt;/st:UpwardCompatibilityfromLevel&gt;
&lt;/st:compatibility&gt;</pre>
<p>The compatibility is expressed using the following tags:</p>
<ul>
	<li><code><strong>st:FullCompatibilityfromLevel</strong></code> expresses the 
	version of the setting repository from which the current version setting repository 
	is fully compatible. </li>
	<li><code><strong>st:UpwardCompatibilityfromLevel</strong></code> expresses 
	the version of the setting repository from which the current setting repository 
	is upward compatible. The versions below this one are not compatible.</li>
</ul>
<p>The full compatibility version must be greater than or equal to the upward compatibility 
version.</p>
<h4>The Setting Repository Controller</h4>
<p>Setting repositories that are managed in V5 using a couple of dedicated C++ and 
Automation setting controller interfaces may keep these interfaces in addition to 
the generic controller. In this case, fully describe the interfaces exposed by this 
specific controller. </p>
<pre class="code">&lt;st:DedicatedController&gt;
    &lt;st:Framework_CPP&gt;System&lt;/st:Framework_CPP&gt;
    &lt;st:Interface_CPP&gt;CATISysCacheSettingAtt&lt;/st:Interface_CPP&gt;
    &lt;st:Framework_IDL&gt;System&lt;/st:Framework_IDL&gt;
    &lt;st:Interface_IDL&gt;CATIACacheSttingAtt&lt;/st:Interface_IDL&gt;
    &lt;st:LateType&gt;CATSysCacheSettingCtrl&lt;/st:LateType&gt;
&lt;/st:DedicatedController&gt;</pre>
<p>Where:</p>
<ul>
	<li><code><strong>st:Framework_CPP</strong></code> is the name of the framework 
	where the C++ interface is located.</li>
	<li><code><strong>st:Interface_CPP</strong></code> is the C++ interface name.</li>
	<li><code><strong>st:Framework_IDL</strong></code> is the name of the framework 
	where the Automation interface is located.</li>
	<li><code><strong>st:Interface_IDL</strong></code> is the Automation interface 
	name.</li>
	<li><code><strong>st:LateType</strong></code> is the name of the setting controller 
	component that implements the C++ interface. This is the name of the C++ class 
	declared as an &quot;Implementation&quot; to the Object Modeler and that implements the 
	C++ interface, either itself or through an extension class.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Describing Each Setting Attribute</h3>
<pre class="code">&lt;st:attributes&gt;
  &lt;st:attribute Name=&quot;CacheActivation&quot;&gt;
    &lt;st:role&gt;Activation state of the cache&lt;/st:role&gt;
    &lt;st:boolean&gt;
      &lt;st:default&gt;
        &lt;st:value&gt;true&lt;/st:value&gt;
      &lt;/st:default&gt;
    &lt;/st:boolean&gt;
  &lt;/st:attribute&gt;
  ...
&lt;/st:attributes&gt;</pre>
<p>The setting attribute descriptions are enclosed using the <code>st:attributes</code> 
tag. Each setting attribute is described using the <code>st:attribute</code> tag.</p>
<pre class="code">&lt;st:attribute Name=&quot;CacheActivation&quot; alias=&quot;XW32&quot;&gt;<br />  ...
&lt;/st:attributes&gt;</pre>
<p>Where:</p>
<ul>
	<li><code><strong>Name</strong></code> is the setting attribute name intended 
	to be used to handle the setting attribute in the client code. Set it to the 
	actual setting attribute name stored in the setting repository if it matches 
	the setting attribute naming rules, is meaningful, and can be used without any 
	restrictions to represent the setting attribute in the documentation, and thus, 
	in the client code, including Automation macros. Otherwise, create a nice name, 
	and use <code>alias</code> for the actual setting attribute name </li>
	<li><code><strong>alias</strong></code> is the actual setting attribute name, 
	as it is stored in the setting repository. Optional.</li>
</ul>
<p>This section includes:</p>
<ul>
	<li>The Setting Attribute Documentation</li>
	<li>The Setting Attribute Type, Default Value, and Possible Values.</li>
</ul>
<h4>The Setting Attribute Documentation</h4>
<p>Two tags enable you to describe the setting repository.</p>
<pre class="code">&lt;st:role&gt;Setting to handle the V5 cache parameters&lt;/st:role&gt;
&lt;st:detailedRole&gt;The V5 cache is used to xxx&lt;/st:role&gt;</pre>
<ol>
	<li>The <code><strong>st:role</strong></code> tag is intended to give a short 
	description of the setting attribute. In addition to be part of the setting 
	repository documentation page, its contents is extracted to feed the setting 
	attribute index besides the setting attribute name to help the reader determine 
	the setting attribute looked for among those in the list.</li>
	<li>The <code><strong>st:detailedRole</strong></code> tag is for a comprehensive 
	description of the setting attribute. It is optional, but you are strongly encouraged 
	to use it.</li>
</ol>
<p>No html tag should be included within these tags. </p>
<h4>The Setting Attribute Type, Default Value, and Possible Values</h4>
<p>The types of the setting attributes are:</p>
<table class="fill">
	<thead>
		<tr>
			<th>Type</th>
			<th>Tag</th>
			<th>Comment</th>
		</tr>
	</thead>
	<tr>
		<td valign="top">boolean</td>
		<td valign="top"><code>st:boolean</code></td>
		<td>Valid values are <code>false</code> and <code>true</code>. This type 
		does not exist in the setting repository. The underlying storage model is 
		an integer with two authorized values: 0 (false) and 1 (true).</td>
	</tr>
	<tr>
		<td>double</td>
		<td><code>st:double</code></td>
		<td></td>
	</tr>
	<tr>
		<td>float</td>
		<td><code>st:float</code></td>
		<td></td>
	</tr>
	<tr>
		<td>integer </td>
		<td><code>st:int</code></td>
		<td></td>
	</tr>
	<tr>
		<td>unsigned integer </td>
		<td><code>st:uint</code></td>
		<td></td>
	</tr>
	<tr>
		<td>short integer</td>
		<td><code>st:short</code></td>
		<td></td>
	</tr>
	<tr>
		<td>character string</td>
		<td valign="top"><code>st:string</code></td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td valign="top">Unicode character string</td>
		<td valign="top"><code>st:URN</code></td>
		<td>Uniform Resource Name. URN is dedicated to persistent and location-independent 
		identifiers for information resources. Use this type for setting attributes 
		storing folder pathnames, URLs, etc. </td>
	</tr>
	<tr>
		<td>DLName </td>
		<td><code>st:DLName</code></td>
		<td>Data Logical Name</td>
	</tr>
</table>
<p>For example, a setting attribute of type boolean is described as follows: </p>
<pre class="code">&lt;st:boolean&gt;
  &lt;st:default&gt;<br />    &lt;st:value&gt;true&lt;/st:value&gt;<br />  &lt;/st:default&gt;<br />&lt;/st:boolean&gt;</pre>
<p>The default value is enclosed using the <code>st:value</code> tag that is itself 
enclosed within the <code>st:default</code> tag.</p>
<p>Depending on the setting attribute, the default value can be unique, or two default 
values can be provided, one for UNIX, and the other one for Windows.</p>
<pre class="code">&lt;st:attribute Name=&quot;LocalPath&quot;&gt;
  &lt;st:role &gt;Local path to the cache&lt;/st:role&gt;
  &lt;st:URN&gt;
    &lt;st:defaultWindows&gt;
      &lt;st:value&gt;CSIDL_LOCAL_APPDATA\DassaultSystemes\CATCache&lt;/st:value&gt;
    &lt;/st:defaultWindows&gt;
    &lt;st:defaultUnix&gt;
      &lt;st:value&gt;$HOME/CATCache&lt;/st:value&gt;
    &lt;/st:defaultUnix&gt;
  &lt;/st:URN&gt;
&lt;/st:attribute&gt;</pre>
<p>Two tags, <code>st:defaultWindows</code> and <code>st:defaultUNIX</code>, enable 
you to declare these default values.</p>
<p>You can also describe more complex setting attributes:</p>
<ul>
	<li>An array</li>
	<li>An enumeration. This does not apply to boolean setting attributes.</li>
	<li>A discrete range of values using a minimum, a maximum, and a step value. 
	This applies to double, float, int, uint, and short setting attributes.</li>
</ul>
<p>To declare an array, use the size XML attribute of the tag used to describe the 
type. For example:</p>
<pre class="code">&lt;st:attribute Name=&quot;WorkOnSupport3DPrimarySpacings&quot;&gt;
  &lt;st:role&gt;3D primary spacing&lt;/st:role&gt;
  &lt;st:double size=&quot;3&quot;&gt;
    &lt;st:default size=&quot;3&quot;&gt;
      &lt;st:value&gt;100&lt;/st:value&gt;
      &lt;st:value&gt;100&lt;/st:value&gt;
      &lt;st:value&gt;100&lt;/st:value&gt;
    &lt;/st:default&gt;
  &lt;/st:double&gt;
&lt;/st:attribute&gt;</pre>
<p>WorkOnSupport3DPrimarySpacings contains an array of three doubles that each has 
a default value of 100.</p>
<p>To describe an enumeration, use the enum XML tag.</p>
<pre class="code">&lt;st:attribute Name=&quot;CrvSurContOptimization&quot; alias=&quot;OptC2Mode&quot;&gt;
  &lt;st:role&gt;Curve and surface optimization mode&lt;/st:role&gt;
  &lt;st:int&gt;
    &lt;st:enum&gt;
      &lt;st:role&gt;No optimization&lt;/st:role&gt;
      &lt;st:value&gt;0&lt;/st:value&gt;
      &lt;st:role&gt;Automatic optimization&lt;/st:role&gt;
      &lt;st:value&gt;1&lt;/st:value&gt;
      &lt;st:role&gt;Advanced optimization&lt;/st:role&gt;
      &lt;st:detailedRole&gt;To define a larger tolerance value which may enhance the optimization impact 
                       (resulting in less C2 cutting on faces).&lt;/st:detailedRole&gt;
      &lt;st:value&gt;2&lt;/st:value&gt;
    &lt;/st:enum&gt;
    &lt;st:default&gt;
      &lt;st:value&gt;1&lt;/st:value&gt;
    &lt;/st:default&gt;
  &lt;/st:int&gt;
&lt;/st:attribute&gt;</pre>
<p>To describe values bounded by a minimum value and a maximum value, use the st:min 
and st:max tags.</p>
<pre class="code">&lt;st:attribute Name=&quot;MarkerDefaultWeight&quot;&gt;
  &lt;st:role&gt;Default weight value of an annotation&lt;/st:role&gt;
  &lt;st:uint&gt;
    &lt;st:min&gt;1&lt;/st:min&gt;
    &lt;st:max&gt;55&lt;/st:max&gt;
    &lt;st:default&gt;
      &lt;st:value&gt;6&lt;/st:value&gt;
    &lt;/st:default&gt;
  &lt;/st:uint&gt;
&lt;/st:attribute&gt;</pre>
<p>To describe a discrete set of regularly spaced values, use the st:step tag in 
addition to the st:min and st:max tags.</p>
<pre class="code">&lt;st:attribute Name=&quot;MaxDeformation&quot; alias=&quot;Tolerance&quot;&gt;
  &lt;st:role&gt;Maximum deformation allowed in the optimization of curves and surfaces expressed in millimeters&lt;/st:role&gt;
  &lt;st:float&gt;
    &lt;st:min&gt;0.0005&lt;/st:min&gt;
    &lt;st:max&gt;0.10&lt;/st:max&gt;
    &lt;st:step&gt;0.0005&lt;/st:step&gt;
    &lt;st:default&gt;
      &lt;st:value&gt;0.001&lt;/st:value&gt;
    &lt;/st:default&gt;
  &lt;/st:float&gt;
&lt;/st:attribute&gt;</pre>
<p>If the tab page that displays the setting attribute is not the one referred to 
using the PrimaryTabpage XML attribute of the st:Description tag that describes 
the setting repository, use the Tabpage XML attribute of the st:attribute tag.</p>
<pre class="code">&lt;st:attribute Name=&quot;LODMode&quot; Tabpage=&quot;/Infrastructure/ProductStructure/Cgr Management&quot;&gt;</pre>
<p>This states that the LODMode setting attribute is displayed in the Cgr Management 
tab page, which is not the one where the other setting attributes are displayed 
and that is expressed at the setting repository level.</p>
<h4>URN Specific</h4>
<p>&lt;st:URN CheckOperation=&quot;none&quot;&gt;</p>
<p>The CheckOperation XML attribute defines whether a check should be performed, 
and which kind of check. Valid values are</p>
<table class="fill">
	<tr>
		<td>none</td>
		<td>No check</td>
	</tr>
	<tr>
		<td>F_OK</td>
		<td>Checks for <strong>xxx</strong></td>
	</tr>
	<tr>
		<td>R_OK</td>
		<td>Checks for Read permissions</td>
	</tr>
	<tr>
		<td>RW_OK</td>
		<td>Checks for Read/Write permissions</td>
	</tr>
</table>
<h4>DLName Specific</h4>
<p>st:DLName can enclose the following tags in addition of the standard one</p>
<table class="fill">
	<tr>
		<td>st:DLName</td>
		<td>The DLName to consider</td>
	</tr>
	<tr>
		<td>st:UnixURN</td>
		<td>The UNIX path to which the DLName refers</td>
	</tr>
	<tr>
		<td>st:WindowsURN</td>
		<td>The Windows path to which the DLName refers</td>
	</tr>
	<tr>
		<td>st:FatherDLName</td>
		<td>The parent DLName (Optional)</td>
	</tr>
</table>
<pre class="code">&lt;st:DLName&gt;
  &lt;st:DLName&gt;M0001&lt;/st:DLName&gt;
  &lt;st:UnixURN&gt;/u/users/psr/db/Models&lt;/st:UnixURN&gt;
  &lt;st:WindowsURN&gt;\\cre1dsy\home\users\psr\db\Models&lt;/st:WindowsURN&gt;
&lt;/st:DLName&gt;
</pre>
<h3>Describing the Relations Between Setting Attributes</h3>
<p>Two setting attributes can be linked with a relation. For example, the number 
of release cache directories is stored using the NbReleaseDir setting attribute, 
while the array of their pathnames is stored using the ReleasePath setting attribute.
</p>
<pre class="code">&lt;st:attribute Name=&quot;NbRealeaseDir&quot;&gt;
  &lt;st:role&gt;Number of release cache directories&lt;/st:role&gt;
  &lt;st:uint&gt;
    ...
  &lt;/st:uint&gt;
&lt;/st:attribute&gt;
&lt;st:attribute Name=&quot;ReleasePath&quot;&gt;
  &lt;st:role&gt;Paths of the release cache directories&lt;/st:role&gt;
  &lt;st:URN size=&quot;*&quot;&gt;
    &lt;st:default size=&quot;0&quot;/&gt;
  &lt;/st:URN&gt;
&lt;/st:attribute&gt;</pre>
<p>The number of release cache directories is the size of this array. To describe 
this relation, use the st:relation tag which is enclosed within a st:relations tag.</p>
<pre class="code">&lt;st:relations&gt;
  &lt;st:role&gt;Description of the relations&lt;/st:role&gt;
  &lt;st:relation src=&quot;NbRealeaseDir&quot; dest=&quot;ReleasePath&quot; kind=&quot;dimensionOfArray&quot;&gt;
    &lt;st:role&gt;Number of release cache directories&lt;/st:role&gt;
  &lt;/st:relation&gt;
&lt;/st:relations&gt;</pre>
<p>The XML attributes of the st:relation tag are:</p>
<table class="fill">
	<tr>
		<td>src</td>
		<td>The source setting attribute</td>
	</tr>
	<tr>
		<td>dest</td>
		<td>The destination setting attribute</td>
	</tr>
	<tr>
		<td valign="top">kind</td>
		<td>The kind of the relation that links the two setting attributes. Valid 
		values are:<table>
			<tr>
				<td>dimensionOfArray</td>
				<td>The src setting attribute is the dimension of the array stored 
				in the dest setting attribute</td>
			</tr>
			<tr>
				<td>activatorToActivated</td>
				<td>The src setting attribute is the <strong>XXXXXXX</strong> of 
				the dest setting attribute</td>
			</tr>
			<tr>
				<td>groupedWith</td>
				<td>The src setting attribute is the <strong>XXXXXXX</strong> of 
				the dest setting attribute</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<h3>Validating the XML Setting File Against the XSD</h3>
<p>Your XML setting file must comply with the setting XML schema definition stored 
in the settings.xsd file. To check this compliance, run CATSysXmlValidator. The 
XML setting file is looked for in the run time view. Note that you must not type 
the &quot;.xml&quot; suffix.</p>
<p>CATSysXmlValidator CATIAV5Cache</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Compatibility"></a>Compatibility Guidelines</h2>
<p>This section helps you understand compatibility kinds, rules and issues.</p>
<p>The setting attributes, their values and default values, and their possible locks 
can of course be customized, and these customizations are intended to be reused 
from one release to another. This implies that setting attributes must be, as far 
as possible, stable from one release to another to avoid customization rework, allow 
for a customization to be simultaneously used with two different releases without 
rework, and ensure new release quick and easy deployment.</p>
<p>Setting repositories define two kinds of compatibility:</p>
<ol>
	<li>Full compatibility between two versions of a setting repository means that 
	setting repositories of either version can be used with any releases with which 
	one of these versions were delivered</li>
	<li>Upward compatibility from one version of a setting repository to another 
	one means that the previous version of the setting repository can be used with 
	any releases with which the following version of the setting repository was 
	delivered, the reverse being not possible.</li>
</ol>
<p>To ensure full compatibility between two versions of a setting repository, say 
version 1 and version 2:</p>
<ul>
	<li>The code corresponding to version 2 is able to read, write, and fully understand 
	a setting repository generated with the code corresponding to version 1. This 
	implies that the code corresponding to version 2, when reading a version 1 setting 
	repository, has a clearly defined default behavior for all the version 2 attributes 
	unknown in a version 1 setting repository.</li>
	<li>The code corresponding to version 1 is able to read and write a setting 
	repository generated with version 2 and all the attributes known by the code 
	corresponding to version 1 are not changed in version 2 and are thus understandable 
	by the code corresponding to version 1. </li>
</ul>
<p>To correctly manage full compatibility:</p>
<ul>
	<li>New attributes can be added in version 2. They will be ignored by version 
	1</li>
	<li>Version 1 attribute name, alias, type, range, step, default value, etc. 
	must no be changed</li>
	<li>If the attribute is an enumeration, new values can be added to existing 
	ones. In this case, the code corresponding to version 1 must have a clear default 
	behavior for the version 2 defined values of version 1 setting attributes, since 
	these values cannot be managed. This default behavior could be to act as if 
	the default value were read.</li>
</ul>
<p>To ensure upward compatibility between two versions of a setting repository, 
say version 1 and version 2:</p>
<ul>
	<li>Keep in version 2 the meaning of a setting attribute defined in version 
	1, but changed for version 2</li>
	<li><strong>To be defined</strong></li>
</ul>
<p>The standard expected compatibility level is thus full compatibility of the setting 
repository from one release to another. If this is not possible, the setting repository 
must be upward compatible.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Naming"></a>Setting Attribute Naming Rules</h2>
<p>This section helps you assign correct, usable, and meaningful names to your setting 
attribute. It applies to the <code>Name</code> XML attribute of the tag <code>st:attribute</code>, 
like in:</p>
<pre class="code">&lt;st:attribute Name=&quot;CacheActivation&quot;&gt;</pre>
<p>This name is used to handle the setting attribute in the generic Automation and 
C++ interfaces. It is thus seen by the end user when recording or editing macros, 
and by the C++ programmer to represent the name of the setting attribute in the 
setting repository file. If this name is not ugly and matches the rules below, it 
can be used as is. Otherwise, create a nice name and refer to your ugly setting 
attribute name using the <code>alias</code> XML attribute. </p>
<pre class="code">&lt;st:attribute Name=&quot;CacheSizeInMo&quot; alias=&quot;MoSize&quot;&gt;</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="checklist"></a>Checklist</h3>
<p>Setting attribute name patterns:</p>
<ul>
	<li>Are names written in [good] English?</li>
	<li>Do names do not include spaces and underscores?</li>
	<li>Is the average name length in the 8-20 range?</li>
	<li>Are names made of collated words, each with first letter in uppercase?
	</li>
</ul>
<p>Setting attribute name meaning:</p>
<ul>
	<li>Are names meaningful?</li>
	<li>Do names reflect the label displayed in front of the setting attribute in 
	the property page</li>
	<li>Do names begin by a noun (or adjective + noun)? Are adjectives put before 
	qualified nouns? </li>
	<li>Do constant names refer to the abstract entities they represent rather than 
	their values?</li>
	<li>Do flag names express a clear statement when associated with their value?
	</li>
</ul>
<p>Last, if you were to check only one thing against your names, choose this one:</p>
<p><strong>If shown to somebody else, do names represent fully and accurately what 
the named entity <em>is</em> or <em>does</em>?</strong></p>
<h3><a name="english"></a>Use English Correctly</h3>
<p>Don&#39;t let your code show that you were born in Brie Comte Robert: remember those 
few rules when building your English names. </p>
<ul>
	<li>Put adjectives before nouns, not after
	<pre class="code"><strong>No                          Yes</strong>
WindowMain                  MainWindow
Point3D                     3DPoint
</pre>
	</li>
	<li>If several adjectives and nouns are put together, the order is important. 
	Usually, global meaning is obtained by aggregating words from the rightmost 
	to leftmost. <br />
	<p><code>ClosestProjectionPoint</code> is a good name to designate, among several 
	possible projection points, the closest one. <br />
	<code>ProjectionClosestPoint</code> would be a weakest alternative name in that 
	case. It is more difficult to interpret: it can be the projection of the closest 
	point, or the closest point to the projection. None interpretation is correct, 
	yet.</p>
	</li>
	<li>English uses fewer conjunction words than French. &quot;bord de la mer&quot; translates 
	to &quot;sea side&quot;, not &quot;side of the sea&quot;.
	<pre class="code"><strong>No                          Yes</strong>
NameOfFile                  FileName
</pre>
	<p>However, remember that some conjunctions (such as &quot;to&quot;, &quot;from&quot;) can be usefully 
	associated with verbs to express meaning: </p>
	<pre class="code">GetAttributeNumberFromName
SendMessageToClients
</pre>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="meaning"></a>Use Meaningful Names</h3>
<ul>
	<li>Prefer standard terms and abbreviations<p>Using many words to designate 
	the same thing is always confusing. To avoid confusion, use consistently the 
	basic standard words to build your names. For example, if your setting attribute 
	deals with windows, avoid naming them <code>window </code>in one function,
	<code>frame </code>in another, and <code>dialog box</code> in the main.</p>
	</li>
	<li>Relate names to the problem, not to the solution
	<p><cite>&quot;A good mnemonic name generally speaks to the problem than to the solution. 
	A good name tends to express the <strong>what</strong> more than the how. In 
	general, if some name refers to some aspect of computing rather than to the 
	problem, it&#39;s a <strong>how</strong> rather than a <strong>what</strong>. Avoid 
	such a name in favor of a name that refers to the problem itself.</cite> [Steve 
	Mc Connell] </p>
	</li>
	<li>Avoid numerals in names
	<p>Except for few limited cases (such as <code>3DPoint</code> for instance), 
	many numerals used in names do not convey any meaning (like in <code>table2</code>). 
	Moreover, depending on fonts used, many can be confused with letters, like
	<code>0</code> and <code>O</code>, <code>1</code> and <code>l</code>, <code>
	2</code> and <code>Z</code>, <code>6</code> and <code>G</code>. </p>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="length"></a>Not Too Short, Not Too Long</h3>
<p>As a rule, limit the attribute name length to the range 8-20 characters. Do not 
use spaces and underscores.</p>
<p><code>LongNamesCanSometimesCauseSomeDifficultiesForTheReader</code>. Fortunately, 
some techniques can help to reduce the name length with no or few meaning loss, 
so that the ideal 8 to 20 character range is reached. Here are some. Apply them 
freely until desired length is reached. Prefer first methods to latter ones. </p>
<ol>
	<li>Suppress needless words such as &quot;the&quot;, &quot;to&quot; as long as the meaning remains 
	clear
	<pre class="code"><strong>Before              After</strong>
AverageOfTheValues  ValuesAverage
</pre>
	</li>
	<li>Use standard abbreviations consistently throughout your code. Most standardized 
	words provide standard short forms.
	<pre class="code"><strong>Before              After</strong>
Index               Idx
</pre>
	</li>
	<li>Suppress non leading vowels
	<pre class="code"><strong>Before         After</strong>
Screen         Scrn
Printer        Prntr
Abort          Abrt</pre>
	<p>Avoid this method if:</p>
	<ul>
		<li>It saves only one character (<code>Ths</code> instead of <code>This</code>).
		</li>
		<li>It yields a non meaningful name (<code>CT</code> 
		instead of <code>CATIA</code>) </li>
	</ul>
	</li>
	<li>Truncate each word after leading letters (2 to 4 usually)
	<pre class="code"><strong>Before              After</strong>
Window              Win
</pre>
	<p>Avoid this method if it leads to ambiguous names (different names can be 
	abbreviated to same prefix)</p>
	</li>
</ol>
<p>Whatever your strategy for shortening long names is, try to use it consistently, 
that is, use always the same technique unless its is impossible, then use always 
the same alternative technique, and so on.</p>
<h2><a name="Doc"></a>Documenting Setting Repositories and Attributes</h2>
<p>Two tags are dedicated to documentation: <code>st:role</code> and <code>st:detailedRole</code>. 
They can be used with the following tags.</p>
<table class="fill">
	<colgroup align="left">
	</colgroup>
	<colgroup align="center" span="2">
	</colgroup>
	<colgroup align="left">
	</colgroup>
	<thead>
		<tr>
			<th>Tag</th>
			<th>st:role</th>
			<th>st:detailedRole</th>
			<th>Comment</th>
		</tr>
	</thead>
	<tr>
		<td>st:Description</td>
		<td>Required</td>
		<td>Optional</td>
		<td>Deeply describing the setting repository using the st:detailedRole tag 
		is strongly advised</td>
	</tr>
	<tr>
		<td>st:attribute</td>
		<td>Required</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:value</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:enum</td>
		<td>Required</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:default</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:defaultWindows</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:defaultUNIX</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:relations</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>st:relation</td>
		<td>Optional</td>
		<td>Optional</td>
		<td>&nbsp;</td>
	</tr>
</table>
<p>No html tag should be used in roles and detailed roles.</p>
<h3>Documenting the Setting Repository</h3>
<p>The role of a setting repository must be short and concise.</p>
<h3>Documenting the Setting Attribute</h3>
<p>The role of a setting attribute must be short and concise. A setting attribute 
is a data. It must be qualified by a name, possibly preceded by an adjective. Do 
not use verbs that are dedicated to actions, that is functions and methods. Forget 
about articles and words of no use, such as &quot;This attribute is the ...&quot;. Do not 
use parentheses.</p>
<p>For example, the role of the Angle setting attribute of the STEP setting repository 
should not be written like this:</p>
<pre class="code">&lt;st:role&gt;Defines the angle (in degree) below which contiguous elements (curves) can be merged.&lt;/st:role&gt;</pre>
<p>But like this:</p>
<pre class="code">&lt;st:role&gt;Angle below which contiguous elements can be merged&lt;/st:role&gt;</pre>
<p>If you need to add information, such as the unit, the type of the elements that 
can be merged, and any other information, use the st:detailedRole tag.</p>
<p>If the setting attribute is a boolean, also do not use verbs. For example, the 
role of the PartUpdateStatus setting attribute of the MeasureSettings setting repository 
should not be written like this</p>
<pre class="code">&lt;st:role&gt;Activate automatic measure update in part&lt;/st:role&gt;</pre>
<p>But like this</p>
<pre class="code">&lt;st:role&gt;Flag to activate or deactivate automatic measure update in parts&lt;/st:role&gt;</pre>
<p>The setting attributes does not activate anything, it just stores information 
the appropriate method will retrieve to do or not to do automatic measure update.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article gives you guidelines and tips to create the XML files representing 
your setting repositories.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Dec 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Jan 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
