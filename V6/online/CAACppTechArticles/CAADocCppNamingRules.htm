<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>C++ Naming Rules</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>C++ Naming Rules</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>As developing application on top of the Dassault Syst&#232;mes brands API 
		introduces a number of different programming entities, naming rules and 
		conventions have been developed in order to avoid name collisions inside 
		and outside the development environment, and to make things clearer for 
		its developers. This article describes these naming rules for the C++ entities.</p>
		<ul>
			<li><a href="#Principles">General Principles</a></li>
			<li><a href="#Rules">Global Rule</a></li>
			<li><a href="#Entities1">Entities Associated 
			with a Directory</a></li>
			<li><a href="#Entities2">C++ Entities Associated 
			with a File</a></li>
			<li><a href="#Entities3">
			Language-independent Entities Associated with a File</a></li>
			<li><a href="#UserInt">User Interface Entities</a></li>
			<li><a href="#Entities4">Other Entities</a></li>
			<li><a href="#CPPCode">Naming Rules Within C++ Code</a>
			<ul>
				<li><a href="#GeneralRules">Naming Variables and Functions</a></li>
				<li><a href="#Hungarian">Hungarian Notation</a></li>
				<li><a href="#InterfacePointers">Naming Interface Pointers</a></li>
			</ul>
			</li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Principles"></a>General Principles</h2>
<p>The following general principles have been established when choosing naming rules:</p>
<ol>
	<li><strong>Brand-based prefixes</strong><br />
	A <a name="prefix"></a><em>prefix</em> [<a href="#Ref1">1</a>] is used for most 
	entities that may collide with other entities of the same nature, but developed 
	outside the Dassault Syst&#232;mes (DS) Group. It denotes the DS origin of 
		the entity. Other entity suppliers, and in particular development 
		partners, are expected not to begin their names with DS reserved 
		prefixes. Prefixes are based on DS brand names, because of their 
		durability: CAT for CATIA, VPM and ENOV for ENOVIA, DNB and DEL for 
		DELMIA, GEO for GEOVIA, SIM for SIMULIA.</li>
	<li><a name="FWaliases"></a><strong>Aliases for frameworks<br />
	</strong>All frameworks (FW) are assigned a short 3-letter alias with the first 
	letter capitalized (e.g. Dlg for CATDialog). This alias is used as a shortcut 
	for the framework name for building other framework related names. It is referred 
	to as &lt;FWAlias&gt; in the remaining of this document. Framework aliases will be 
	defined in the framework&#39;s identity card. Trigrams are typically used to name 
	entities that are associated to frameworks (e.g., modules). Since all modules 
	from all frameworks are merged at runtime into common repositories (e.g., RuntimeView), 
	trigrams provide a means of avoiding conflicts. For a given framework FW, the 
	same trigram applies to the framework and to its associated FW.tst and FW.edu 
	frameworks.</li>
	<li><a name="English"></a><strong>English<br />
	</strong>Names are based on US English words.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Rules"></a>Global Rule</h2>
<table class="fill">
	<colgroup span="4" valign="top">
	</colgroup>
	<tr>
		<th>Entity Names</th>
		<th>Entity Natures</th>
		<th>Naming Rules</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>1-All</strong></td>
		<td>All</td>
		<td><strong>&lt;prefix&gt;&lt;EntityName&gt;</strong>
		<ul>
			<li>Name length should not exceed 27 characters</li>
			<li>Names are composed using [A-Z][a-z][0-9] symbol range. Other symbols 
			(such as \, -, /, ; _ and the like) are forbidden</li>
		</ul>
		</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Entities1"></a>Entities Associated with a 
Directory</h2>
<p>The entity and the directory that contain it must have the same name.</p>
<table class="fill">
	<colgroup width="15%" valign="top" span="2">
	</colgroup>
	<colgroup width="40%" valign="top" span="1">
	</colgroup>
	<colgroup width="20%" valign="top" span="1">
	</colgroup>
	<colgroup width="10%" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Entity Names</th>
		<th>Entity Nature</th>
		<th>Directory Naming Rules</th>
		<th>Notes</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>2-Code Framework</strong></td>
		<td>Physical grouping of classes, interfaces, macros, functions dedicated 
		to some specific task or domain.</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWName&gt;</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>3-Test Framework</strong></td>
		<td>Physical grouping of classes, interfaces, macros, functions dedicated 
		to some specific task or domain.</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWName&gt;.tst</strong></td>
		<td>&lt;prefix&gt;&lt;FWName&gt;.tst contain test material for code contained in the 
		code FW.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="CAAFrameworks"></a>4-Education Frameworks</strong></td>
		<td>Special kinds of frameworks that contain sample code and documentation 
		that is intended for delivery to final customer as education materials</td>
		<td><strong>CAA&lt;FrameworkName&gt;.edu<br />
		CAA&lt;FrameworkName&gt;Doc.edu<br />
		CAA&lt;FrameworkName&gt;.tst</strong></td>
		<td>CAA&lt;FWName&gt;.edu contains only sample Code (*.m modules).<br />
		CAA&lt;FWName&gt;Doc.edu contains only documentation (*.doc modules).<br />
		CAA&lt;FWName&gt;.tst contain test material for code contained in sample code 
		FW.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>5-Code Module</strong></td>
		<td>Physical grouping of interrelated objects within a framework, which 
		defines the unit of code loading into main memory.</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;ModuleName&gt;.m</strong></td>
		<td>Modules should retain their FW name to avoid collisions when they are 
		all mixed together in a single directory of the run time view.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="test"></a>6-Code Module in test FW</strong></td>
		<td>Physical grouping of interrelated objects within a framework, which 
		defines the unit of code loading into main memory. Used for testing the 
		code delivered by a FW</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Tst&gt;&lt;ModuleName&gt;.m</strong></td>
		<td>Additional &lt;Tst&gt; allows same FW alias to be used between FW and associated 
		FW.tst, without risk of duplicate names.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="test"></a>7-Code Module in education FW</strong></td>
		<td>Same as code module, but within an education code framework.</td>
		<td><strong>CAA&lt;FWAlias&gt;&lt;Edu&gt;&lt;ModuleName&gt;.m</strong></td>
		<td>Additional &lt;Edu&gt; allows the same FW alias to be used between FW and 
		the associated FW.edu, without risk of duplicate names.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>8-Code main module</strong></td>
		<td>Utility code module, unique to a FW, that act as the union of all the 
		FW&#39;s modules when link editing other FWs modules.</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWName&gt;.m</strong></td>
		<td>Clients wishing to link edit with any module of the target FW do not 
		have to know about each module name while retaining the benefits of FW modularity.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><a name="DocModuleCAA"></a><strong>9-Doc Module in education FW</strong></td>
		<td>Logical grouping of related documents about an documentation education 
		framework.</td>
		<td><strong>CAA&lt;FWAlias&gt;&lt;ModuleName&gt;.doc</strong></td>
		<td>A module is dedicated to all the articles dealing with a modeler: technical, 
		use cases, reference, or navigation articles.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Entities2"></a>C++ Entities Associated with a File</h2>
<p>A file, or a pair of files, must be dedicated to the following entities, that 
must have the same name than the files:</p>
<ul>
	<li>C++ classes and extension classes </li>
	<li>C++ and Automation interfaces </li>
	<li>Global functions, enumerations, and macros.</li>
</ul>
<table class="fill">
	<colgroup width="15%" valign="top" span="2">
	</colgroup>
	<colgroup width="40%" valign="top" span="1">
	</colgroup>
	<colgroup width="20%" valign="top" span="1">
	</colgroup>
	<colgroup width="10%" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Entity Names</th>
		<th>Entity Natures</th>
		<th>Entity and File Naming Rules</th>
		<th>Notes</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>10-Simple Classes</strong></td>
		<td>Standard C++ objects.</td>
		<td><strong>Class: &lt;prefix&gt;&lt;FWAlias&gt;&lt;ClassName&gt;<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;ClassName&gt;.h<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;ClassName&gt;.cpp</strong></td>
		<td>A class named CATDlgBox must be declared in a file named CATDlgBox.h 
		and implemented in a file named CATDlgBox.cpp. Only one class definition 
		per file pair is allowed.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>10 bis-Adapter Classes</strong></td>
		<td>Standard C++ classes that provide code for some of the methods of interfaces 
		to be implemented that should or could not be implemented by the interface 
		implementer.</td>
		<td><strong>Class: &lt;prefix&gt;&lt;FWAlias&gt;&lt;InterfaceName&gt;Adapter<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;InterfaceName&gt;Adapter.h<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;InterfaceName&gt;Adapter.cpp</strong></td>
		<td>Same as standard C++ classes.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>11-Extension Classes</strong></td>
		<td>Special implementation classes that extent another class or a late type.</td>
		<td><strong>Class: &lt;prefix&gt;E&lt;FWAlias&gt;&lt;ClassName&gt;<br />
		File: &lt;prefix&gt;E&lt;FWAlias&gt;&lt;ClassName&gt;.h<br />
		File: &lt;prefix&gt;E&lt;FWAlias&gt;&lt;ClassName&gt;.cpp</strong></td>
		<td>&lt;ClassName&gt; is free, but it is recommended to use there the name of 
		the <em>extended</em> class, as the extension actually belongs to the same 
		&#39;logical&#39; class. In case of several classes extending the same base class, 
		it is recommended to use an integer number following &lt;ClassName&gt; to distinguish 
		them.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>12-Interfaces</strong></td>
		<td>Object Modeler special classes that model an abstract behavior that 
		many classes may implement.</td>
		<td><strong>Interface: &lt;prefix&gt;I&lt;FWAlias&gt;&lt;InterfaceName&gt;<br />
		File: &lt;prefix&gt;I&lt;FWAlias&gt;&lt;InterfaceName&gt;.h<br />
		File: &lt;prefix&gt;I&lt;FWAlias&gt;&lt;InterfaceName&gt;.cpp</strong></td>
		<td>If the first letter in a framework alias is a I, then both Is should 
		appear, as in CATIIxxIdentifiable.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>13-Automation Interfaces</strong></td>
		<td>Special type of interfaces that allows CATIA/ENOVIA/... programming 
		from scripting environments.</td>
		<td><strong>Interface: &lt;prefix&gt;IA&lt;FWAlias&gt;&lt;InterfaceName&gt;<br />
		File: &lt;prefix&gt;IA&lt;FWAlias&gt;&lt;InterfaceName&gt;.idl<br />
		File: &lt;prefix&gt;IA&lt;FWAlias&gt;&lt;InterfaceName&gt;.h<br />
		File: &lt;prefix&gt;IA&lt;FWAlias&gt;&lt;InterfaceName&gt;.cpp</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>14-Interface Dictionaries</strong></td>
		<td>File containing a correspondence table between implementation classes 
		or late types and the interfaces they implement.</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWName&gt;.dico</strong> for customers, partners, 
		and adopters<br />
		<strong>File: &lt;prefix&gt;&lt;FWName&gt;.dic</strong> for DS</td>
		<td>One given framework must include only one interface dictionary.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>15-Factory Dictionaries</strong></td>
		<td>File containing a correspondence table between a class, and the factory 
		interface that creates it.</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWName&gt;.fact</strong></td>
		<td>One given framework must include only one factory dictionary.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>16-Global Functions and Variables</strong></td>
		<td>C++ functions defined outside any class</td>
		<td><strong>Function/variable: &lt;prefix&gt;&lt;FWAlias&gt;&lt;FunctionName&gt;<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;FunctionName&gt;.h<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;FunctionName&gt;.cpp</strong></td>
		<td>It is strongly advised to embody such function within an object as static 
		functions, thus taking benefit from the scoping (::) operator.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="Enumerated"></a>17-Enumerated Types</strong></td>
		<td>Programmer-defined type with value limited to a predefined list of named 
		items.</td>
		<td><strong>Type: &lt;prefix&gt;&lt;FWAlias&gt;&lt;EnumName&gt;<br />
		Value: &lt;prefix&gt;&lt;FWAlias&gt;&lt;EnumItemName&gt;<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;EnumName&gt;.h</strong></td>
		<td>In case of an enum with class scope, do <strong>not </strong>include 
		the leading &lt;prefix&gt; to enum items, since the risk of name collision do 
		not exist in that case.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>18-Macros</strong></td>
		<td>Piece of C++ code that is referenced by name is some other code and 
		expanded by compiler at buildl time.</td>
		<td><strong>Macro: &lt;prefix&gt;&lt;FWAlias&gt;&lt;MacroName&gt;<br />
		File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;MacroName&gt;.h</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>19-Typedef</strong></td>
		<td>C++ alias that defines a name as a substitute for another name</td>
		<td><strong>Same as substituted name</strong></td>
		<td>A substitute name for something whose name begins by CAT, CATI, CATIA 
		etc. should also begin with CAT, CATI, CATIA etc.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="NLS"></a>20-NLS resources</strong></td>
		<td>File containing texts used as resources by code, and subject to translation 
		in foreign language</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWAlias&gt;Name.CATNls</strong></td>
		<td>Error messages, dialog box names and labels, and prompts are typical 
		NLS resources.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="ResourceCat"></a>21-Resource catalogs</strong></td>
		<td>Files containing non translatable resources</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWAlias&gt;Name.CATRsc</strong></td>
		<td>Icons are typical resources contained in a resource catalog</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>22-Feature catalogs</strong></td>
		<td>File containing predefined feature definitions.</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;CatalogName&gt;.CATFct </strong>for customers, 
		partners, and adopters<br />
		<strong>File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;CatalogName&gt;.feat </strong>for DS</td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Entities3"></a>Language-independent 
Entities Associated with a File</h2>
<table class="fill">
	<colgroup width="15%" valign="top" span="2">
	</colgroup>
	<colgroup width="40%" valign="top" span="1">
	</colgroup>
	<colgroup width="20%" valign="top" span="1">
	</colgroup>
	<colgroup width="10%" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Entity Names</th>
		<th>Entity Natures</th>
		<th>Entity and File Naming Rules</th>
		<th>Notes</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>23-Icon files</strong></td>
		<td>File containing the graphical definition of an icon.</td>
		<td><strong>File: &lt;prefix&gt;&lt;FWAlias&gt;&lt;IconName&gt;.&lt;ext&gt;</strong></td>
		<td>&lt;ext&gt; refers to the standard file extension corresponding to the graphical 
		format used (e.g. .bmp) .</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>24-Setting File</strong></td>
		<td>File containing configuration information to save between two sessions</td>
		<td><strong>File: </strong><strong>&lt;prefix&gt;</strong><strong>&lt;Name&gt;.CATSettings</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UserInt"></a>User Interface Entities</h2>
<p>These rules apply to the identifiers assigned to the user interface entities 
to ensure their uniqueness when you add a workbench or an add-in.</p>
<table class="fill">
	<colgroup width="15%" valign="top" span="2">
	</colgroup>
	<colgroup width="40%" valign="top" span="1">
	</colgroup>
	<colgroup width="20%" valign="top" span="1">
	</colgroup>
	<colgroup width="10%" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Entity Names </th>
		<th>Entity Natures</th>
		<th>Naming Rules</th>
		<th>Notes</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>25-Command Header</strong></td>
		<td>Proxy for a command in the application frame</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Hdr</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>26-Workshop</strong></td>
		<td>Set of workbenches associated with a document</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Wks</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>27-Workbench</strong></td>
		<td>A grouping of process-related commands</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Wkb</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>28-Toolbar</strong></td>
		<td>A (sub) grouping of related commands</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Tlb</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>29-Command Starter</strong></td>
		<td>A command starter</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Str</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>30-Separator</strong></td>
		<td>A separator between two commands in a menu or a toolbar</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Sep</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>31-Icon Box</strong></td>
		<td>A grouping of icons</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Icb</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>32-MenuBar</strong></td>
		<td>A list of menu accessors</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Mbr</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>33-Menu</strong></td>
		<td>A list of command accessible by name</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Mnu</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>34-SubMenu</strong></td>
		<td>A (sub) list of command accessible by name</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;&lt;Name&gt;Snu</strong></td>
		<td></td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Entities4"></a>Other Entities</h2>
<table class="fill">
	<colgroup width="15%" valign="top" span="2">
	</colgroup>
	<colgroup width="40%" valign="top" span="1">
	</colgroup>
	<colgroup width="20%" valign="top" span="1">
	</colgroup>
	<colgroup width="10%" valign="top" span="1">
	</colgroup>
	<tr>
		<th>Entity Names</th>
		<th>Entity Natures</th>
		<th>Naming Rules</th>
		<th>Notes</th>
		<th>Metrics</th>
	</tr>
	<tr>
		<td><strong>35-Features and Late Types</strong></td>
		<td>Name that federates a number of interfaces as characteristic of a type.</td>
		<td><strong>&lt;prefix&gt;&lt;FWAlias&gt;&lt;FeatureName&gt;<br />
		<strong>&lt;prefix&gt;</strong>&lt;FWAlias&gt;&lt;FeatureAttributeName&gt;<br />
		&lt;prefix&gt;&lt;FWAlias&gt;&lt;LateTypeName&gt;</strong></td>
		<td>At run time, all features and late types are fetched from a virtual 
		unique dictionary that concatenates all dictionary files from all frameworks. 
		Therefore, two late types in two frameworks cannot bear the same name.
		<br />
		The attribute name must be unique among the StartUp&#39;s hierarchy.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>35b-Applicative Containers</strong></td>
		<td>Logical areas within a document that contain client features enriching 
		supplied features.</td>
		<td><strong>&lt;prefix&gt;</strong><strong>&lt;FWAlias&gt;AppCont&lt;ContainerName&gt;</strong></td>
		<td>Applicative containers are accessed using their names in a session. 
		Therefore this name must be unique.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong><a name="Data"></a>36-Data Members</strong></td>
		<td>Data associated to a class.</td>
		<td><strong>_&lt;DataName&gt;</strong></td>
		<td>The underscore helps to remember in the source code that a data member 
		is being manipulated.<br />
		Per C++ coding rules, data members should never be assigned public (in the 
		C++ sense) visibility.</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
	<tr>
		<td><strong>37-Method or Function Arguments</strong></td>
		<td>Arguments in function and method signatures.</td>
		<td>Use:
		<ul>
			<li>The<strong> i</strong> prefix for input parameters </li>
			<li>The <strong>o</strong> prefix for output parameters </li>
			<li>The <strong>io</strong> prefix for input/output parameters</li>
		</ul>
		</td>
		<td>Refer to the C++ coding rules [<a href="#Ref2">2</a>]</td>
		<td>Nb of deviations / Nb of entities</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CPPCode"></a>Naming Rules Within C++ Code</h2>
<p>The rules described in this section are &#39;best practices&#39; for V6 code and mandatory 
for education code. They are highly recommended for development partners and customer 
code.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="GeneralRules"></a>Naming Variables and Functions</h3>
<ul>
	<li>Variable names are to begin with a lowercase letter.<br />
	<strong>Example</strong>: <code>int counter;</code></li>
	<li>Function names are to begin with an Uppercase letter.<br />
	<strong>Example</strong>: <code>void CountItems();</code></li>
	<li>* and &amp; are to be collated to the variable name, not the type name, in order 
	to avoid ambiguities in case of multiple definitions on the same line.<br />
	<strong>Example</strong>: <code>CATBaseUnknown *pFirstItem, *pSecondItem;</code></li>
	<li>Data members are to begin with an underscore. Data members should never 
	be assigned public (in the C++ sense) visibility.<br />
	<strong>Example</strong>: <code>int _length;</code></li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Hungarian"></a>Hungarian Notation</h3>
<p>It consist in putting a prefix in front of the name that reminds the reader of 
some aspect of the type of the variable (ex. is it an array?). The advantage is 
that it allows a better understanding of the valid operations that can apply to 
a certain type (ex. delete applies to a pointer, delete [] to an array).</p>
<p>Here is a table of standard Hungarian prefixes:</p>
<table class="fill">
	<tr>
		<th>Prefixes</th>
		<th>Means</th>
		<th>Examples</th>
	</tr>
	<tr>
		<td>p</td>
		<td>pointer</td>
		<td>CATBaseUnknown *pTarget;</td>
	</tr>
	<tr>
		<td>pp</td>
		<td>pointer to pointer</td>
		<td>void **ppTarget;</td>
	</tr>
	<tr>
		<td>pi</td>
		<td>pointer to interface</td>
		<td>CATI3DGeoVisu *piGeoVisu;</td>
	</tr>
	<tr>
		<td>sp</td>
		<td>smart pointer || handler</td>
		<td>CATI3DGeoVisu_var spGeoVisu;</td>
	</tr>
	<tr>
		<td>a</td>
		<td>array</td>
		<td>char *aPath;</td>
	</tr>
</table>
<p><strong>Note</strong>: When writing method signatures, the hungarian notation 
combines with the i, o, io prefixes that denotes the direction of information flow 
within arguments. For example, <code>f(CATI3DGeoVisu **ioppGeoVisu)</code> 
denotes a pointer to a pointer to a feature that is used as input-output arguments, 
that is, after <code>f()</code> is run, the feature accessed through <code>ioppGeoVisu</code> 
might be a different one.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="InterfacePointers"></a>Naming Interface Pointers</h3>
<p>Many interface pointers may be used in the same scope to manipulate one single 
implementation by different &quot;behavioral handles&quot;. If those interface pointers bear 
very different names, figuring out that in fact one single object is being manipulated 
requires a mental effort.</p>
<p>To avoid it, the following scheme is adopted:</p>
<ol>
	<li>Choose a (short) identifier to refer to the implementation (e.g. PrtCont 
		for a Part container) as a root name.</li>
	<li>Forge a derived name around this root name when you manipulate this implementation 
		through an interface pointer, by using the following pattern pi&lt;InterfaceName&gt;On&lt;RootName&gt;. 
		Interface name is obtained by removing the &lt;prefix&gt;I prefix from its class name, 
		and possibly shortening the resulting name. 
		For instance, <strong>piSketchFactOnPrtCont</strong> and <strong>piPartFactOnPrtCont</strong> 
		are two interface pointers (pi) by which a container implementation referred 
		to as PrtCont is manipulated through interfaces <em>CATISktUseSketchFactory</em> 
		(Factory for sketch objects) and <em>CATIPdgUsePrtFactory</em> (Factory for 
		part design objects) respectively.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[<a name="Ref1">1</a>]</td>
		<td><a href="CAADocNamingRules.htm">Naming Rules</a></td>
	</tr>
	<tr>
		<td>[<a name="Ref2">2</a>]</td>
		<td><a href="CAADocCppCodingRules.htm">C++ Coding Rules</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Mar 2000]</td>
		<td>Document created.</td>
	</tr>
	<tr>
		<td>Version: <strong>1.1</strong> [Oct 2000]</td>
		<td>New brands prefix conventions; new global rule item.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
