<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Checklist for C++ Coding Rules</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader" id="pagetop">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Checklist for C++ Coding Rules</h1>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This is a C++ and Object Modeler rule checklist to use when designing 
		and coding your CATIA applications, according to the following classification:
		<a href="#Miscellaneous">C++</a>, <a href="#Lifecycle">Lifecycle</a>, and
		<a href="#ObjectModeler">Object Modeler</a>. Each link refers to the detailed 
		rule explanation.</p>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CheckList"></a>Rule Checklist</h2>
<table class="fill">
	<colgroup span="6" valign="top">
	</colgroup>
	<tr>
		<td colspan="6"><a name="Miscellaneous"></a><strong>C++ Rules</strong></td>
	</tr>
	<tr>
		<th>
		<img alt="Check Box" src="images/Check.jpg" width="14" height="14"/></th>
		<th>Detailed Rules</th>
		<th>Rule Topics</th>
		<th>Do</th>
		<th>Don&#39;t</th>
		<th>Advice/Explanations</th>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C1"></a>[<a href="CAADocCppCodingRules.htm#C1">Rule</a>]</td>
		<td>Header files</td>
		<td>Create a dedicated header file for each C++ or C entity</td>
		<td>Don&#39;t, for example, insert a global enum in a class header file</td>
		<td><em>This makes both client application programmer and CASE tool job 
		easier</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C2"></a>[<a href="CAADocCppCodingRules.htm#C2">Rule</a>]</td>
		<td><code>#ifndef</code>, <code>#define</code>, and <code>#endif</code></td>
		<td>Use <code>#ifndef</code>, <code>#define</code>, and <code>#endif</code> 
		to enclose your header file content</td>
		<td>Don&#39;t create a header file without them</td>
		<td><em>This protects your code from header file multiple inclusion</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C3"></a>[<a href="CAADocCppCodingRules.htm#C3">Rule</a>]</td>
		<td><code>#include</code></td>
		<td>Use <code>#include</code> judiciously</td>
		<td>Don&#39;t, for example, include a class header file if a pointer to this 
		class is used as a method parameter</td>
		<td><em>Improper uses of #include are useless and&nbsp; unnecessarily increase 
		code size.<br />
		</em><strong>Advice</strong>: Use forward reference whenever possible</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C4"></a>[<a href="CAADocCppCodingRules.htm#C4">Rule</a>]</td>
		<td><code>namespace</code></td>
		<td></td>
		<td>Don&#39;t use</td>
		<td><em>This is not yet supported on every platform</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C5"></a>[<a href="CAADocCppCodingRules.htm#C5">Rule</a>]</td>
		<td>Do not use threads</td>
		<td></td>
		<td>Don&#39;t use</td>
		<td></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C24"></a>[<a href="CAADocCppCodingRules.htm#C24">Rule</a>]</td>
		<td>Do not use templates</td>
		<td></td>
		<td>Don&#39;t use</td>
		<td><em>They are not portable.</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C6"></a>[<a href="CAADocCppCodingRules.htm#C6">Rule</a>]</td>
		<td>Multiple inheritance</td>
		<td></td>
		<td>Don&#39;t use</td>
		<td><em>It is much more complex than single inheritance</em>.<br />
		<strong>Advice</strong>: Prefer the Object Modeler</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C7"></a>[<a href="CAADocCppCodingRules.htm#C7">Rule</a>]</td>
		<td>Virtual inheritance</td>
		<td></td>
		<td>Don&#39;t use</td>
		<td><em>Linked to multiple inheritance, which is already forbidden</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C8"></a>[<a href="CAADocCppCodingRules.htm#C8">Rule</a>]</td>
		<td>Public inheritance</td>
		<td>Use it to derive classes</td>
		<td>Don&#39;t use protected or private inheritance</td>
		<td><em>This ensures that the base class members in the derived class remain 
		as they are defined in the base class, that is public, protected, or private</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C9"></a>[<a href="CAADocCppCodingRules.htm#C9">Rule</a>]</td>
		<td><code>friend</code></td>
		<td></td>
		<td>Don&#39;t implement</td>
		<td><em>It breaks encapsulation</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C10"></a>[<a href="CAADocCppCodingRules.htm#C10">Rule</a>]</td>
		<td>Data member</td>
		<td></td>
		<td>Avoid to expose data members as public</td>
		<td><em>It breaks encapsulation and forbids you to make your implementation 
		evolve</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C11"></a>[<a href="CAADocCppCodingRules.htm#C11">Rule</a>]</td>
		<td>Static data member</td>
		<td>Use it only if you need an instance counter</td>
		<td>Generally avoid</td>
		<td><em>They are shared by all instances of your classes</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C12"></a>[<a href="CAADocCppCodingRules.htm#C12">Rule</a>]</td>
		<td>Constructors<br />
		</td>
		<td>For each class, provide by default:<br />
		&#8226; A copy constructor<br />
		&#8226; A default constructor<br />
		&#8226; A destructor<br />
		&#8226; An assignment operator</td>
		<td></td>
		<td><em>This will help your clients assume that these &quot;basic&quot; constructors 
		always exist.</em><br />
		<strong>Warning</strong>: Specific rule applies to extension classes.</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C13"></a>[<a href="CAADocCppCodingRules.htm#C13">Rule</a>]</td>
		<td>Destructor</td>
		<td>Declare the destructor as virtual for classes to derive</td>
		<td></td>
		<td><em>This will enable instances of derived classes to be properly deleted</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C14"></a>[<a href="CAADocCppCodingRules.htm#C14">Rule</a>]</td>
		<td>Virtual methods</td>
		<td></td>
		<td>Don&#39;t declare virtual methods within class private parts</td>
		<td><em>This is useless</em><br />
		</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C15"></a>[<a href="CAADocCppCodingRules.htm#C15">Rule</a>]</td>
		<td>Virtual methods</td>
		<td>Declare the methods intended to be redefined as virtual</td>
		<td></td>
		<td><em>This enables for class derivation</em><br />
		</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C16"></a>[<a href="CAADocCppCodingRules.htm#C16">Rule</a>]</td>
		<td><code>inline</code> methods</td>
		<td></td>
		<td>Avoid</td>
		<td><em>Every change in inlined code will force your client to rebuild.</em><br />
		<strong>Advice</strong>: You may do so only for proved gains (performance, size).</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C17"></a>[<a href="CAADocCppCodingRules.htm#C17">Rule</a>]</td>
		<td>Basic operators</td>
		<td></td>
		<td>Do not redefine</td>
		<td><em>Except if it is obvious for everybody (complexes, points)</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C18"></a>[<a href="CAADocCppCodingRules.htm#C18">Rule</a>]</td>
		<td>Do not include non declarative code in header files</td>
		<td></td>
		<td></td>
		<td><em>It is disastrous from a size perspective, and couples your code 
		with your clients code (they&#39;ll have to rebuild when you modify this code)</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C19"></a>[<a href="CAADocCppCodingRules.htm#C19">Rule</a>]</td>
		<td>Implicit casts</td>
		<td></td>
		<td>Do not use</td>
		<td><em>Your clients should always be fully aware of the type they manipulate</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C20"></a>[<a href="CAADocCppCodingRules.htm#C20">Rule</a>]</td>
		<td>Parameter types</td>
		<td>Use legal types only</td>
		<td></td>
		<td><em>This avoids problems with multi-platform and multi-standard support, 
		and distribution</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C21"></a>[<a href="CAADocCppCodingRules.htm#C21">Rule</a>]</td>
		<td><code>const</code></td>
		<td>Constrain variables, arguments and methods by using <code>const</code></td>
		<td></td>
		<td><code>const</code><em> is a chance for your to express your design intent 
		to your clients. Don&#39;t miss it: they&#39;ll know if using your method can alter 
		an object state or not.</em><br />
		<strong>Advice</strong>: Do it even even if you have to cast away the constness of 
		your pointers in your implementation for efficiency purposes.</td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C22"></a>[<a href="CAADocCppCodingRules.htm#C22">Rule</a>]</td>
		<td>Scope resolution operator (<code>::</code>)</td>
		<td>Appropriately use the scope resolution operator (<code>::</code>)</td>
		<td>Don&#39;t use it to access members inherited from classes above the nearest 
		base class</td>
		<td></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="C23"></a>[<a href="CAADocCppCodingRules.htm#C23">Rule</a>]</td>
		<td>Exceptions</td>
		<td>Use <code>CATTry</code>, <code>CATCatch</code>, and <code>CATCatchOthers</code> 
		to process existing exceptions</td>
		<td>Don&#39;t create new exceptions</td>
		<td></td>
	</tr>
	<tr>
		<td colspan="6"><a name="Lifecycle"></a><strong>Lifecycle Rules</strong></td>
	</tr>
	<tr>
		<th><img alt="" src="images/Check.jpg" width="14" height="14"/></th>
		<th>Detailed Rules</th>
		<th>Rule Topics</th>
		<th>Do</th>
		<th>Don&#39;t</th>
		<th>Advice/Explanations</th>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC1"></a>[<a href="CAADocCppCodingRules.htm#LC1">Rule</a>]</td>
		<td>Interface pointers</td>
		<td>Use AddRef and Release appropriately</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC2"></a>[<a href="CAADocCppCodingRules.htm#LC2">Rule</a>]</td>
		<td>Other objects</td>
		<td>Use new/delete and free/malloc appropriately</td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC3"></a>[<a href="CAADocCppCodingRules.htm#LC3">Rule</a>]</td>
		<td>Available types</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC4"></a>[<a href="CAADocCppCodingRules.htm#LC4">Rule</a>]</td>
		<td>Pointer usage</td>
		<td>Always initialize your pointers to <code>NULL</code></td>
		<td>Don&#39;t let pointers be initialized at random</td>
		<td><em>Otherwise, this could lead to unexplainable memory leaks</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC5"></a>[<a href="CAADocCppCodingRules.htm#LC5">Rule</a>]</td>
		<td>Pointer usage</td>
		<td>Always test pointer values before using them</td>
		<td>Never use a pointer before ensuring that it is not <code>NULL</code></td>
		<td><em>Otherwise, this could lead to core dumps</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC6"></a>[<a href="CAADocCppCodingRules.htm#LC6">Rule</a>]</td>
		<td>Pointers to objects</td>
		<td>Always set pointers to deleted objects to <code>NULL</code></td>
		<td>Never let a valued pointer to a deleted object</td>
		<td><em>Otherwise, this could lead to unexplainable memory leaks and core 
		dumps</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="LC7"></a>[<a href="CAADocCppCodingRules.htm#LC7">Rule</a>]</td>
		<td>Interface pointers</td>
		<td>Always set release interface pointers to <code>NULL</code></td>
		<td>Never let a released but valued interface pointer</td>
		<td><em>Otherwise, this could lead to unexplainable memory leaks and core 
		dumps</em></td>
	</tr>
	<tr>
		<td colspan="6"><a name="ObjectModeler"></a><strong>Object Modeler</strong></td>
	</tr>
	<tr>
		<th><img alt="" src="images/Check.jpg" width="14" height="14"/></th>
		<th>Detailed Rules</th>
		<th>Rule Topics</th>
		<th>Do</th>
		<th>Don&#39;t</th>
		<th>Advice/Explanations</th>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM1"></a>[<a href="CAADocCppCodingRules.htm#OM1">Rule</a>]</td>
		<td>Interface</td>
		<td></td>
		<td>Don&#39;t implement the same interface twice in the same component</td>
		<td><em>Otherwise, this could lead to unpredictable results</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM2"></a>[<a href="CAADocCppCodingRules.htm#OM2">Rule</a>]</td>
		<td>Interface OM-inheritance</td>
		<td></td>
		<td>Don&#39;t implement in a component an interface that OM-derives from another 
		interface already implemented in the same component</td>
		<td><em>Otherwise, this could lead to unpredictable results</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM3"></a>[<a href="CAADocCppCodingRules.htm#OM3">Rule</a>]</td>
		<td>Extensions</td>
		<td>Appropriately use data and code extensions</td>
		<td>Don&#39;t use a data extension if it contains no data</td>
		<td><em>Using code extension spares memory</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM4"></a>[<a href="CAADocCppCodingRules.htm#OM4">Rule</a>]</td>
		<td>Extensions and OM-inheritance</td>
		<td>Always OM-derive your extensions from CATBaseUnknown or CATnull</td>
		<td></td>
		<td><em>This is the only legal way of OM-deriving extensions</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM5"></a>[<a href="CAADocCppCodingRules.htm#OM5">Rule</a>]</td>
		<td>Extensions and C++-inheritance</td>
		<td></td>
		<td>Don&#39;t C++-derive extensions that implement several interfaces</td>
		<td><em>Otherwise, this could lead to unpredictable results</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM6"></a>[<a href="CAADocCppCodingRules.htm#OM6">Rule</a>]</td>
		<td><code>QueryInterface</code></td>
		<td>Correctly use <code>QueryInterface</code></td>
		<td></td>
		<td><em>This ensures to retrieve only valid interface pointers</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM7"></a>[<a href="CAADocCppCodingRules.htm#OM7">Rule</a>]</td>
		<td>Smart pointers</td>
		<td></td>
		<td>Do not use smart pointers</td>
		<td><em>This avoids memory leaks</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM8"></a>[<a href="CAADocCppCodingRules.htm#OM8">Rule</a>]</td>
		<td>Smart pointers</td>
		<td>Enable interface pointers and smart pointers to coexist</td>
		<td></td>
		<td><em>This avoids memory leaks</em></td>
	</tr>
	<tr>
		<td><input name="C1" type="checkbox" value="ON" /></td>
		<td><a name="OM9"></a>[<a href="CAADocCppCodingRules.htm#OM9">Rule</a>]</td>
		<td>Interface dictionary</td>
		<td>Correctly fill in the interface dictionary</td>
		<td></td>
		<td><em>Otherwise, the client application could not retrieve interface pointers 
		from your components, or worse, could retrieve wrong interface pointers.</em></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1.0</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
