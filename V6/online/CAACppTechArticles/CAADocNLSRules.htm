<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>NLS Rules</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>NLS Rules</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Messages in your code should support multiple languages (National Language 
		Support, or NLS), including Double-Byte encoded languages such as Japanese 
		or Korean. For this to happen, strings are externalized in so-called <strong>
		PII files</strong>, named *.CATNls and *_en.properties depending on the underlying 
		infrastructure. Here is the set of rules that the developer should comply 
		with in order for externalization to work properly.</p>
		<ul>
			<li><a href="#NLS1">NLS Dependent Data</a></li>
			<li><a href="#NLS2">Strings in Code</a></li>
			<li><a href="#NLS3">Resource File Contents</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="NLS1"></a>NLS Dependent Data</h2>
<p>NLS-dependent data should never be stored as such in any model, except if it 
was entered manually by the user. In case of NLS-dependent strings made from different 
parts, the string should not be stored as result, and it should be dynamically computed. 
It is safe to store NLS keys, allowing to retrieve dynamically the associated language-dependent 
string.</p>
<p>As a result of this rule, do not use the SetName() method for a feature which 
would store a language-dependent name in the model for the concerned feature factory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="NLS2"></a>Strings in Code</h2>
<ul>
	<li>No message strings in code but their corresponding keys. Message are to 
	be in PII files (see next section). </li>
	<li>Use the table hereunder to perform operations on strings:<br />
	<br />
	<table class="fill">
		<tr>
			<th>Operation</th>
			<th>CATNls-Based Infrastructure in C++</th>
			<th>CATNls-Based Infrastructure in java</th>
			<th>*.properties Based Infrastructure (java)</th>
		</tr>
		<tr>
			<td>Retrieve a message (with or without parameters) from NLS file</td>
			<td>CATMessageCatalog.BuildMessage()</td>
			<td>CATMessageCatalog.BuildMessage() in com.dassault_systemes.catjsystem</td>
			<td>java.text.MessageFormat</td>
		</tr>
		<tr>
			<td>Format numbers and currencies</td>
			<td>CATUnicodeString standard methods (nothing for currencies)</td>
			<td colspan="2">java.text.NumberFormat</td>
		</tr>
		<tr>
			<td>Format dates</td>
			<td>CATTime</td>
			<td colspan="2">java.text.DateFormat<br />
			java.text.SimpleDateFormat</td>
		</tr>
		<tr>
			<td>Tokenize a string (strtok equivalent)</td>
			<td>CATToken In case of char*, use CATSysStrtok</td>
			<td colspan="2">java.util.StringTokenizer</td>
		</tr>
		<tr>
			<td>Compare strings (strcmp equivalent)</td>
			<td>CATUnicodeString::operator==<br />
			CATUnicodeString::Compare()</td>
			<td colspan="2">String.compareTo()<br />
			String.compareToIgnoreCase()</td>
		</tr>
	</table>
	</li>
	<li>Beware of strings and GUI display truncation issues, especially regarding 
	Double-Byte translations.</li>
	<li>In C++, don&#8217;t confuse following methods, that lead to different results 
	in DBCS context:<ul>
		<li>CATUnicodeString::GetLengthInChar() &#8211; retrieve number of characters 
		in a string.</li>
		<li>CATUnicodeString::GetLengthInByte() &#8211; retrieve numbers of bytes in a 
		string, used to allocate an array or example.</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="NLS3"></a>Resource File Contents</h2>
<ul>
	<li>PII files (*.CATNls, *_en.properties) should include only translatable text 
	that should be translated.</li>
	<li>Non-NLS strings, such as icon names, should be in *.CATRsc and *.properties 
	(without _en) files. This includes:
	<ul>
		<li>File path, file name, file extension.</li>
		<li>Numbers: list dimensions, time delay, default value, etc.</li>
		<li>ISO codepages.</li>
		<li>ENOVIA specific syntaxes: names combined with ., +, -</li>
	</ul>
	</li>
	<li>*.CATNls keys should only contain plain ASCII characters.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Dec 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
