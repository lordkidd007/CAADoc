<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Accessing Animation Data</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Accessing Animation Data</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAACreateAnimation use case. It explains how 
		to create an animation and populate it with values.</p>
		<p><em>This use case describes the usage of the different CAA C++ APIs related 
		to creating and populating an animation with data.</em></p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAACreateAnimation Use Case</a>
			<ul>
				<li><a href="#What">What Does CAACreateAnimation Do</a></li>
				<li><a href="#How">How to Launch CAACreateAnimation</a></li>
				<li><a href="#Where">Where to Find the CAACreateAnimation Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to familiarize the user with the APIs 
meant for creating and populating an Animation. Listed below are the topics that 
a user gets an introduction to, through this use case.</p>
<ul>
	<li>Creating an Animation.</li>
	<li>Populating the Animation with position values.</li>
	<li>Populating the Animation with viewpoint values.</li>
	<li>Populating the Animation with color values.</li>
	<li>Populating the Animation with visibility values.</li>
	<li>Populating the Animation with opacity values.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACreateAnimation Use Case</h2>
<p>CAACreateAnimation is a use case of the CAASIMAnimationStandard.edu 
framework that illustrates how to create and populate an Animation, using the capabilities 
provided in the SIMAnimationStandardItf framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACreateAnimation Do</h3>
<p>CAACreateAnimation creates and populates an Animation.</p>
<p>The input data for this use case is an MSR context with PPR data. It contains 
a scenario with a sub-result. In order to understand how to navigate through the 
MSR data and find the necessary input for creating and populating the animation, 
please refer to the article: &quot;Navigating on a Simulation&quot; [<a href="#References">2</a>].</p>
<p>The use case loads the simulation data. It then retrieves a product from the 
PPR to be used in the animation, as well as the sub-result from the a scenario. 
The picture below shows how the scenario and sub-result are related, as well as 
where an animation might be stored.</p>
<p>
<img alt="Specifications and Results" src="images/CAAAnimationSpecification.png" width="300" height="500"/></p>
<p>The factory to create the animation is retrieved and an empty animation is created. 
(Note: In this use case, the animation is created under the first subresult of the 
scenario.)</p>
<p>The animation is then populated with position, viewpoint, color, visibility and 
opacity values. Below please find an overview of the various interface and utility 
classes that will be used to populate the animation.</p>
<p>The following are the utilities available in <strong>CATAnimationValueUtils</strong> 
to create animation values, based on type:</p>
<ul>
	<li>GetDoubleAnimationValue</li>
	<li>GetIntegerAnimationValue</li>
	<li>GetStringAnimationValue</li>
	<li>GetBooleanAnimationValue</li>
	<li>GetOctetAnimationValue</li>
</ul>
<p>The following methods are the available via <strong>CATIAnimationValues</strong>. 
They allow you to add and retrieve values to the animation itself. There is also 
a method to set the interval for playback of the animation.</p>
<ul>
	<li>BeginValueInsertion</li>
	<li>EndValueInsertion</li>
	<li>AddValues</li>
	<li>GetValues</li>
	<li>SetInterval</li>
</ul>
<p>The following methods are the available via <strong>CATIAnimationValue</strong>. 
They allow you to add and retrieve data to each animation value.</p>
<ul>
	<li>GetValuesInteger</li>
	<li>SetValuesInteger</li>
	<li>GetValuesDouble</li>
	<li>SetValuesDouble</li>
	<li>GetValuesString</li>
	<li>SetValuesString</li>
	<li>GetValueBoolean</li>
	<li>SetValueBoolean</li>
	<li>GetVariantLineValue</li>
	<li>SetVariantLineValue</li>
	<li>GetInterpolationMode</li>
	<li>SetInterpolationMode</li>
	<li>GetInterpretType</li>
	<li>SetInterpretType</li>
	<li>GetProperty</li>
	<li>SetProperty</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACreateAnimation</h3>
<p>To launch CAACreateAnimation, you will need to set up the build time environment, 
then compile CAACreateAnimation along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p>mkrun -c &quot;<em>CAACreateAnimation Repository Server User Password SecurityCtx 
PLM_ExternalID</em>&quot;</p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Position</th>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Repository</td>
		<td>PLM1</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Server</td>
		<td>The server name:ServerPort/rootURI</td>
	</tr>
	<tr>
		<td>3</td>
		<td>User</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string resembling the security context (Role.Organization.Project). 
		The role to be established during the session. It does not require any particular 
		privilege since the use case only lists all available environments.</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM_ExternalID</td>
		<td>Name of PPR context PLM reference (use &quot;CAAAnimation&quot;)</td>
	</tr>
</table>
<p>The input data is retrieved by importing the <strong>CAAAnimation.3dxml</strong> 
file from <strong>CAASIMAnimationStandard.edu</strong>.</p>
<p><code>InstallRootFolder\CAADoc\CAASIMAnimationStandard.edu\InputData\CAAAnimation.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACreateAnimation Code</h3>
<p>The CAACreateAnimation use case is made of a single file located in the CAACreateAnimation.m 
module of the CAASIMAnimationStandard.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASIMAnimationStandard.edu\CAACreateAnimation.m\src</code> 
where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The following are the main steps in creating an Animation:</p>
<ol>
	<li><a href="#Step1">Creating an Empty Animation</a></li>
	<li><a href="#Step2">Initializing the Inserting of Values</a></li>
	<li><a href="#Step3">Creating Animation Values and Adding Them to the Animation</a></li>
	<li><a href="#Step4">Finalizing the Inserting of Values</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating an Empty Animation</h3>
<pre class="code">...
    CATIAnimationFactory* pAnimationFactory = NULL;
    CATAnimationFactory::CreateFactory( &amp;pAnimationFactory );
    
    CATBaseUnknown_var spAnimation;
    if ( pAnimationFactory )
    {
        HRESULT rc = pAnimationFactory -&gt; CreateAnimation( spSubResult, &quot;MyNewAnimation&quot;, spAnimation );
    }
...</pre>
<p>First retrieve the animation factory using the CATAnimationFactory::CreateFactory 
method.</p>
<p>Using the factory, create an animation. The input to create the animation is 
a pointer to the subresult where the animation will be created, as well as a name 
for the animation. The output is the animation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Initializing the Inserting of Values</h3>
<pre class="code">
    ...
    CATIAnimationValues_var spAddition = spAnimation;
    if ( spAddition != NULL_var )
        spAddition -&gt; BeginValueInsertion();
    ...</pre>
<p>Use the <strong>CATIAnimationValues</strong> interface method <strong>BeginValueInsertion</strong> 
to begin the process of inserting animation values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating Animation Values and Adding Them to the Animation</h3>
<pre class="code">
        // Create an animation value for position.  (CATIAnimationValue)
        CATIAnimationValue* piValue = NULL;
        CATAnimationValueUtils::GetDoubleAnimationValue( &amp;piValue );
        if ( piValue )
        {
            // Set the variant line value (time).
            double dCurrentTime = 5.;
            piValue -&gt; SetVariantLineValue( dCurrentTime );
            ...
            // Create a list of twelve double values which defines the position.
            ...
            // Set the position values for this time step.
            piValue -&gt; SetValuesDouble( positionValues );
        }
        ...
        // Add the position values to the animation.
        CATIAnimationValues_var spAddition = spAnimation;
        if (spAddition != NULL_var)
            spAddition -&gt; AddValues(Animation_Position, spProduct, ListAnimValues);
    }
    ...
</pre>
<p>This section of code first calls the utility method <strong>CATAnimationValueUtils::GetDoubleAnimationValue</strong> 
in order to create an animation value which defines a position.</p>
<p>Next it stores the time and position values in the animation value.</p>
<p>Finally it sets the position animation value in the animation, via <strong>CATIAnimationValues-&gt;AddValues</strong>. 
The input to AddValues is the type of animation value being added (Animation_Position), 
the product to which the position values apply, and a list containing the new animation 
value.</p>
<pre class="code">
        // Create an animation value for viewpoint.
        CATIAnimationValue* piValue = NULL;
        CATAnimationValueUtils::GetDoubleAnimationValue( &amp;piValue );
        if ( piValue )
        {
            // Set the variant line value (time).
            double dCurrentTime = 0.;
            piValue -&gt; SetVariantLineValue( dCurrentTime );
            ...
            // Create a list of 15 double values which defines the viewpoint.
            ...
            // Set the position values for this time step.
            piValue -&gt; SetValuesDouble( viewpointValues );
        }
        ...
        // Add the viewpoint values to the animation.
        CATIAnimationValues_var spAddition = spAnimation;
        if (spAddition != NULL_var)
            spAddition -&gt; AddValues(Animation_Viewpoint, spAnimation, ListAnimValues);
    }
    ...</pre>
<p>This section of code first calls the utility method <strong>CATAnimationValueUtils::GetDoubleAnimationValue</strong> 
in order to create an animation value which defines a viewpoint.</p>
<p>Next it stores the time and viewpoint values in the animation value.</p>
<p>Finally it sets the viewpoint animation value in the animation, via <strong>CATIAnimationValues-&gt;AddValues</strong>. 
The input to AddValues is the type of animation value being added (Animation_Viewpoint), 
the animation itself, and a list containing the new animation value. (Note: The 
input when creating a viewpoint is not a product, but the animation itself.)</p>
<pre class="code">
        // Create an animation value for color.  (CATIAnimationValue)
        CATIAnimationValue* piValue = NULL;
        CATAnimationValueUtils::GetOctetAnimationValue( &amp;piValue );
        if ( piValue )
        {
            // Set the variant line value (time).
            double dCurrentTime = 5.;
            piValue -&gt; SetVariantLineValue( dCurrentTime );
            ...
            // Create a list of four int values which defines the color.
            ...
            // Set the color values for this time step.
            piValue -&gt; SetValuesInteger( colorValues );
        }
        ...
        // Add the color values to the animation.
        CATIAnimationValues_var spAddition = spAnimation;
        if (spAddition != NULL_var)
            spAddition -&gt; AddValues(Animation_Color, spProduct, ListAnimValues);
    }
    ...</pre>
<p>This section of code first calls the utility method <strong>CATAnimationValueUtils::GetOctetAnimationValue</strong> 
in order to create an animation value which defines a color.</p>
<p>Next it stores the time and color values in the animation value.</p>
<p>Finally it sets the color animation value in the animation, via <strong>CATIAnimationValues-&gt;AddValues</strong>. 
The input to AddValues is the type of animation value being added (Animation_Color), 
the product to which the color values apply, and a list containing the new animation 
value.</p>
<pre class="code">
        // Create an animation value for visibility.  (CATIAnimationValue)
        CATIAnimationValue* piValue = NULL;
        CATAnimationValueUtils::GetOctetAnimationValue( &amp;piValue );
        if ( piValue )
        {
            // Set the variant line value (time).
            double dCurrentTime = 5.;
            piValue -&gt; SetVariantLineValue( dCurrentTime );
            ...
            // Create a list of one int value which defines the visibility status.
            ...
            // Set the visiblity value for this time step.
            piValue -&gt; SetValuesInteger( visibilityValues );
        }
        ...
        // Add the visibility values to the animation.
        CATIAnimationValues_var spAddition = spAnimation;
        if (spAddition != NULL_var)
            spAddition -&gt; AddValues(Animation_Visibility, spProduct, ListAnimValues);
    }
    ...</pre>
<p>This section of code first calls the utility method <strong>CATAnimationValueUtils::GetOctetAnimationValue</strong> 
in order to create an animation value which defines visibility.</p>
<p>Next it stores the time and visibility value in the animation value.</p>
<p>Finally it sets the visibility animation value in the animation, via <strong>
CATIAnimationValues-&gt;AddValues</strong>. The input to AddValues is the type of animation 
value being added (Animation_Visibility), the product to which the visibility value 
applies, and a list containing the new animation value.</p>
<pre class="code">
        // Create an animation value for opacity.  (CATIAnimationValue)
        CATIAnimationValue* piValue = NULL;
        CATAnimationValueUtils::GetOctetAnimationValue( &amp;piValue );
        if ( piValue )
        {
            // Set the variant line value (time).
            double dCurrentTime = 5.;
            piValue -&gt; SetVariantLineValue( dCurrentTime );
            ...
            // Create a list of two int values which defines the opacity.
            ...
            // Set the opacity value for this time step.
            piValue -&gt; SetValuesInteger( opacityValues );
        }
        ...
        // Add the opacity values to the animation.
        CATIAnimationValues_var spAddition = spAnimation;
        if (spAddition != NULL_var)
            spAddition -&gt; AddValues(Animation_Opacity, spProduct, ListAnimValues);
    }
    ...</pre>
<p>This section of code first calls the utility method <strong>CATAnimationValueUtils::GetOctetAnimationValue</strong> 
in order to create an animation value which defines opacity.</p>
<p>Next it stores the time and opacity values in the animation value.</p>
<p>Finally it sets the visibility animation value in the animation, via <strong>
CATIAnimationValues-&gt;AddValues</strong>. The input to AddValues is the type of animation 
value being added (Animation_Opacity), the product to which the opacity values apply, 
and a list containing the new animation value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Finalizing the Inserting of Values</h3>
<pre class="code">...
    if ( spAddition != NULL_var )
        spAddition -&gt; EndValueInsertion();
    ...</pre>
<p>After all the values have been added to the animation, use the <strong>CATIAnimationValues</strong> 
interface method <strong>EndValueInsertion</strong> to finish the process of inserting 
animation values.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article provides an example on how to create an Animation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAASimPLMDoc/CAANavigateSimulation.htm'); return false;">
		Navigating on a Simulation</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [August 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
