<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Scanning and Simulating a Kinematics Mechanism</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Editing a
             Kinematics Mechanism</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article explains which paradigms CAA uses to show objects and let 
		end users play with them.</p>
		<ul>
			<li><a href="#Learn">What Will You Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAKinCreateAndEditMechanism Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAKinCreateAndEditMechanism Do</a></li>
					<li><a href="#How">How to Launch CAAKinCreateAndEditMechanism</a></li>
					<li><a href="#Where">Where to Find the CAAKinCreateAndEditMechanism Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step Procedure</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What Will You Learn With This Use Case ?</h2>
<p>This use case is intended to show you how to create and edit a mechanism. 
You will learn:</p>
<ul>
	<li>How to open a reference product using the appropriate PLM attributes;</li>
	<li>How to create an empty mechanism;</li>
	<li>How to initialize a mechanism;</li>
	<li>How to analyze inside a mechanism;</li>
    <li>How to remove a command from a mechanism;</li>
    <li>How to detach a joint from a mechanism;</li>
    <li>How to attach a joint in a mechanism;</li>
    <li>How to create a command in a mechanism.</li>
</ul>
<h2><a name="UseCase">CAAKinCreateAndEditMechanism</a> Use Case</h2>
<h3><a name="What"></a>What does CAAKinCreateAndEditMechanism do ?</h3>
<script type="text/javascript">insertLinkToTop();</script>
<p>CAAKinCreateAndEditMechanism is a use case of the CAAKinMechanism.edu framework that illustrates CATKinMechanismUseItf framework capabilities regarding the mechanism edition.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to launch CAAKinCreateAndEditMechanism ?</h3>
<p>To launch CAAKinCreateAndEditMechanism, you proceed in two steps; set up the build time 
environment; and compile CAAKinCreateAndEditMechanism along with its prerequisites, then 
set up the run time environment, and execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAKinCreateAndEditMechanism <em>repository server user password securityContext environment PLM_Id</em>&quot;</pre>
<p>The description of the arguments is the following:</p>
<table class="fill">
	<colgroup>
		<col align="center" span="1" />
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user </td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The password</td>
	</tr>
	<tr>
		<td>5</td>
		<td>securityContext</td>
		<td>A string representing the security context ( Role. Organization. Project 
		) . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>environment</td>
		<td>A PLM environment </td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLM_ Id </td>
		<td>The PLM id of the product :ARMProduct *</td>
		<td>Components To Open</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five arguments</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">1</a>].</li>
	<li>The <strong>environment</strong> is necessary to locate the customized Modeler.</li>
	<li>* The input model is retrieved by importing the ARMProduct.3dxml file from 
		the CAAKinMechanism.edu framework.
		<p><code>InstallRootFolder\CAADoc\CAAKinMechanism.edu\InputData\ARMProduct.3dxml</code>
		</p>
		<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM 
		is installed. This 3D XML file contains the root Product Reference with 
		the following attributes:</p>
		<ul>
			<li><code><strong>PLM_ExternalID</strong></code>: ARMProduct</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAKinCreateAndEditMechanism Code ?</h3>
<p>The CAAKinCreateAndEditMechanism use case is made of a single file located in the CAAKinCreateAndEditMechanism.m 
module of the <code>CAAKinMechanism.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAKinMechanism.edu\</code>CAAKinCreateAndEditMechanism<code>.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step Procedure</h2>
<p>There are several logical steps in CAAKinCreateAndEditMechanism use case. The prolog and 
epilog parts, which correspond to Creating/Closing a PLM session will not be described 
    here. We will only focus on the nine 
steps:</p>
<ol>
	<li><a href="#Step1">Opening the reference product</a></li>
	<li><a href="#Step2">Create a new empty mechanism</a></li>
	<li><a href="#Step3">Initialize the mechanism with all the joints and all possible commands</a></li>
	<li><a href="#Step4">Get all the joints of the mechanism</a></li>
	<li><a href="#Step5">Get the first kinematics command of the mechanism</a></li>
	<li><a href="#Step6">Remove all the kinematics commands of the mechanism</a></li>
	<li><a href="#Step7">Detach all the joints of the mechanism</a></li>
	<li><a href="#Step8">Attach all the joints of the mechanism</a></li>
	<li><a href="#Step9">Create one kinematics command</a></li>
	
</ol>
    <p>
        &nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the reference product</h3>
<p>Retrieve the PLM component which identifies the correct reference product.</p>
<pre class="code">// Retrieve the CATIType related with VPMReference
CATIType_var iType;
HRESULT hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;VPMReference&quot;,iType);

if ( SUCCEEDED(hr) &amp;&amp; NULL_var != iType )
{
  cout&lt;&lt; &quot; RetrieveKnowledgeType has succeeded to retreive the CATIType with VPMReference.&quot;&lt;&lt;endl;
}
else
{
  cout&lt;&lt; &quot; RetrieveKnowledgeType failed to retreive the CATIType with VPMReference.&quot;&lt;&lt;endl;
  return 1;
}

// Add an attribute field with the product's name
CATAdpAttributeSet iAttributeSet;
iAttributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, productToOpen);

// Query by attribute
CATIAdpPLMIdentificator * piPLMIdent = NULL;

CATLISTP(CATAdpQueryResult) oQueryResults;
hr = CATAdpPLMQueryServices::GetElementsFromAttributes(iType, iAttributeSet, oQueryResults);
if (SUCCEEDED(hr) &amp;&amp; oQueryResults.Size())
{
  CATAdpQueryResult *res = oQueryResults[1];
  if (res)
  {
    res-&gt;GetIdentifier( piPLMIdent);
    delete res;
    res=NULL;
  }
}

CATIPLMProducts *piContextProduct = NULL ; 
CATAdpOpenParameters params(CATAdpExpandParameters::Authoring);
CATOmbLifeCycleRootsBag Bag;
CATAdpOpener opener(Bag,params);

if (piPLMIdent)
{

  cout &lt;&lt; &quot;The Product has been correctly identified&quot; &lt;&lt; endl;
  rc = opener.CompleteAndOpen(piPLMIdent,IID_CATIPLMProducts, (void**) &amp;piContextProduct);
  piPLMIdent-&gt;Release(); 
  piPLMIdent = NULL;
}
else
{
  cout &lt;&lt; &quot;ERROR The Product has not been correctly identified&quot; &lt;&lt; endl;
  exit (-1);
}
</pre>
<p>Open your PLM Component </p>
<pre class="code">CATIPLMProducts *piContextProduct = NULL ;
CATOmbLifeCycleRootsBag Bag; 
CATAdpOpener opener(Bag);
rc = opener.CompleteAndOpen(piPLMIdent,IID_CATIPLMProducts, (void**) &amp;piContextProduct); 
if (piPLMIdent) {piPLMIdent-&gt;Release(); piPLMIdent = NULL;}

if (FAILED(rc))
{
cout &lt;&lt; &quot;ERROR in retrieving CATIPLMProducts interface on object = &quot; &lt;&lt; endl;
exit (-1);
}
if (piContextProduct)
cout &lt;&lt; &quot;The Product openness is SUCCESSFUL&quot; &lt;&lt; endl;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a> Create a new empty mechanism</h3>
<p>Get a pointer on a CATIKinematicsServices object then use it to create an empty mechanism 
under the open product.</p>
<pre class="code">CATIKinematicsServices * piKinServices = CATKinGetKinematicsServices();
if (NULL==piKinServices)
{
cout&lt;&lt; &quot; Can not retrieve a CATIKinematicsServices pointer.&quot;&lt;&lt;endl;
return 1;
}</pre>
<pre class="code"> CATIKinematicsMechanism_var NewMechanism ;
rc = piKinServices->CreateMechanism (spProd , NewMechanism ) ;
if (SUCCEEDED(rc))   cout &lt;&lt &quot;A new mechanism has been successfully created ! &quot; &lt;&lt endl ;
  
if ( NewMechanism == NULL_var ) 
{
  cout &lt;&lt &quot;Error in creating a new mechanism&quot; &lt;&lt endl;
  return (-1);
}
if (piKinServices != NULL) piKinServices-&gt:Release();  piKinServices = NULL;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Initialize the mechanism </h3>
<p>The mechanism will be filled with with all the joints (enginnering connections) under the product. For each each enginnering connection with a controlled constraint a kinematics command will be created under this mechanism. </p>
    <p>The CATIKinematicsMechEdit interface is used for this purpose.</p>
<pre class="code"> if (MechEdit == NULL_var ) 
{
  cout &lt;&lt &quot;Error to get the CATIKinematicsMechEdit interface&quot; &lt;&lt endl;
  return (-1);
}
</pre>
    <pre class="code">hr = MechEdit->InitializeMechanism() ;
if ( SUCCEEDED(hr))  cout &lt;&lt &quot;InitializeMechanism() has been called with success !&quot; &lt;&lt endl;
else 
{
  cout &lt;&lt &quot;ERROR in InitializeMechanism() call &quot; &lt;&lt endl;
  return (-1);
};</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <h3><a name="Step4"></a>Get all the joints of the mechanism</h3>
    <p>
        The CATIKinematicsMechanism interface is used to get&nbsp; the list of all the enginnering connections (joints) under the mechanism.</p>
<pre class="code"> CATListValCATBaseUnknown_var ConnectionsList;
NewMechanism->GetEngineeringConnectionsList(ConnectionsList);
cout &lt;&lt &quot;The number of joint under the mechanism is : &quot; &lt;&lt ConnectionsList.Size()&lt;&lt endl;
</pre>
    <p>
        <br />
    </p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

   <h3><a name="Step5"> </a>Get the first kinematics command of the mechanism</h3>
<p>Once all the list of commands is retreived, the first kinematics command is choosen. </p>
    <p>On this command we will get the pointed engineering connection and its type.</p>
<pre class="code">   CATListValCATBaseUnknown_var Cmdlist;
  NewMechanism-&gt:GetKinCommandsList(Cmdlist);
  int nbCmd = Cmdlist.Size() ;
  cout &lt;&lt &quot;Number of kinematics commands : &quot; &lt;&lt nbCmd &lt;&lt endl;

  CATIKinematicsCommand_var  spCommand ;
  if ( nbCmd ) spCommand = Cmdlist[1];
  if (NULL_var == spCommand) 
  {
    cout &lt;&lt &quot;ERROR in query interface on the first command&quot; &lt;&lt endl;
     (-1);
  }

  cout &lt;&lt &quot;Get the joint of the first command&quot; &lt;&lt endl;
  // get the MCX
  CATBaseUnknown_var spConnectionCmd1;
  spCommand->GetEngineeringConnection(spConnectionCmd1) ;

  CATKinematicsCommandType  CmdType1;
  spCommand-&gt:GetKinCommandType(CmdType1);
  cout &lt;&lt &quot;The type of the 1st kinematics command is  : &quot; &lt;&lt CmdType1 &lt;&lt endl;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"> </a> Remove all the kinematics commands of the mechanism</h3>
<p>The CATIKinematicsMechEdit interface is used to remove a kinematics command. Note that the removal of a kinenamtic command does not remove the pointed joint.</p>
<pre class="code">    for (  i = 1 ; i &lt;= nbCmd ; i++ )
  {
    CATIKinematicsCommand_var KinCmd = Cmdlist [i] ;

    rc = MechEdit-&gt:RemoveKinCommand ( KinCmd ) ;
    if ( ! SUCCEEDED(rc))
    {
      cout &lt;&lt &quot;ERROR in RemoveKinCommand() call &quot; &lt;&lt endl;
      return (-1);
    }
  }
  cout &lt;&lt &quot;All the kinematics commands have been proprerly detached from the new mechanism ! &quot; &lt;&lt endl;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"> </a>Detach all the joints of the mechanism</h3>
<p>The CATIKinematicsMechEdit interface is used to detach a joint from the mechanism.</p>
<pre class="code">   int nbJoints = ConnectionsList.Size() ;

  for (  i = 1 ; i &lt;= nbJoints ; i++ )
  {
    CATIEngConnection_var KinJoint = ConnectionsList [i] ;

    rc = MechEdit-&gt:DetachEngConnection ( KinJoint ) ;
    if ( ! SUCCEEDED(rc))
    {
      cout &lt;&lt &quot;ERROR in DetachEngConnection() call &quot; &lt;&lt endl;
      return (-1);
    }
  }
  cout &lt;&lt &quot;All the kinematics joint have been proprerly detached from the new mechanism ! &quot; &lt;&lt endl;
  
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"> </a>Attach all the joints of the mechanism</h3>
<p>The CATIKinematicsMechEdit interface is used to attach a joint.</p>
<pre class="code">   if ( !! spConnectionCmd1 )
  {
    CATIEngConnection_var KinCmdJoint1 = spConnectionCmd1;
    CATIKinematicsCommand_var KinCmd1 ;

    rc = MechEdit-&gt: AddKinCommand ( KinCmdJoint1 , KinCmd1 ) ;
    if (  SUCCEEDED(rc) && !! KinCmd1 )
    {
      cout &lt;&lt &quot;One kinematics command has been successufully created ! &quot; &lt;&lt endl;
    }
    else
    {
      cout &lt;&lt &quot;ERROR in AddKinCommand() call &quot; &lt;&lt endl;
      return (-1);
    }
  }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"> </a> Create one kinematics command </h3>
<p>The CATIKinematicsMechEdit interface is used to create a new kinematics command. This command is the same as the first one defined during the initialization of the mechanism.</p>
<pre class="code">   if ( !! spConnectionCmd1 )
  {
    CATIEngConnection_var KinCmdJoint1 = spConnectionCmd1;
    CATIKinematicsCommand_var KinCmd1 ;

    rc = MechEdit-&gt: AddKinCommand ( KinCmdJoint1 , KinCmd1 ) ;
    if (  SUCCEEDED(rc) && !! KinCmd1 )
    {
      cout &lt;&lt &quot;One kinematics command has been successufully created ! &quot; &lt;&lt endl;
    }
    else
    {
      cout &lt;&lt &quot;ERROR in AddKinCommand() call &quot; &lt;&lt endl;
      return (-1);
    }
  }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2>&nbsp;</h2>
<h2>&nbsp;</h2>
    <h2><a name="References">References</a></h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a>create a new kinematics command pointing the joint initially used during the first initialization of the mechanism.</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
