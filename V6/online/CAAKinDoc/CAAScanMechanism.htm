<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Scanning and Simulating a Kinematics Mechanism</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Scanning and Simulating a Kinematics Mechanism</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article explains which paradigms CAA uses to show objects and let 
		end users play with them.</p>
		<ul>
			<li><a href="#Learn">What Will You Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAKinScanMechanism Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAKinScanMechanism Do</a></li>
					<li><a href="#How">How to Launch CAAKinScanMechanism</a></li>
					<li><a href="#Where">Where to Find the CAAKinScanMechanism Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step Procedure</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What Will You Learn With This Use Case ?</h2>
<p>This use case is intended to show you how to find, analyze and simulate a mechanism. 
You will learn:</p>
<ul>
	<li>How to open a reference product using the appropriate PLM attributes;</li>
	<li>How to find the mechanism;</li>
	<li>How to analyze inside a mechanism;</li>
	<li>How to simulate a mechanism.</li>
</ul>
<h2><a name="UseCase">CAAKinScanMechanism</a> Use Case</h2>
<h3><a name="What"></a>What does CAAKinScanMechanism do ?</h3>
<p>CAAKinScanMechanism is a use case of the CAAKinMechanism.edu framework that illustrates 
CATKinMechanismUseItf framework capabilities regarding the analysis and the simulation of a given mechanism.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to launch CAAKinScanMechanism ?</h3>
<p>To launch CAAKinScanMechanism, you proceed in two steps; set up the build time 
environment; and compile CAAKinScanMechanism along with its prerequisites, then 
set up the run time environment, and execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAKinScanMechanism <em>repository server user password securityContext environment PLM_Id</em>&quot;</pre>
<p>The description of the arguments is the following:</p>
<table class="fill">
	<colgroup>
		<col align="center" span="1" />
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user </td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The password</td>
	</tr>
	<tr>
		<td>5</td>
		<td>securityContext</td>
		<td>A string representing the security context ( Role. Organization. Project 
		) . Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>environment</td>
		<td>A PLM environment </td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLM_ Id </td>
		<td>The PLM id of the product :ARMProduct *</td>
		<td>Components To Open</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five arguments</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">1</a>].</li>
	<li>The <strong>environment</strong> is necessary to locate the customized Modeler.</li>
	<li>* The input model is retrieved by importing the ARMProduct.3dxml file from 
		the CAAKinMechanism.edu framework.
		<p><code>InstallRootFolder\CAADoc\CAAKinMechanism.edu\InputData\ARMProduct.3dxml</code>
		</p>
		<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM 
		is installed. This 3D XML file contains the root Product Reference with 
		the following attributes:</p>
		<ul>
			<li><code><strong>PLM_ExternalID</strong></code>: ARMProduct</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAKinScanMechanism Code ?</h3>
<p>The CAAKinScanMechanism use case is made of a single file located in the CAAKinScanMechanism.m 
module of the <code>CAAKinMechanism.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAKinMechanism.edu\</code>CAAKinScanMechanism<code>.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step Procedure</h2>
<p>There are several logical steps in CAAKinScanMechanism use case. The prolog and 
epilog parts, which correspond to Creating/Closing a PLM session will not described 
    here. We will only focus on the four 
steps:</p>
<ol>
	<li><a href="#Step1">Opening the reference product</a>.</li>
	<li><a href="#Step2">Retrieve all the mechanisms under the product</a>.</li>
	<li><a href="#Step3">Analyze the first mechanism</a>.</li>
	<li><a href="#Step4">Run a kinematics simulation</a>.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the reference product</h3>
<p>Retrieve the PLM component which identifies the correct reference product.</p>
<pre class="code">// Retrieve the CATIType related with VPMReference
CATIType_var iType;
HRESULT hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;VPMReference&quot;,iType);

if ( SUCCEEDED(hr) &amp;&amp; NULL_var != iType )
{
  cout&lt;&lt; &quot; RetrieveKnowledgeType has succeeded to retreive the CATIType with PLMCoreReference.&quot;&lt;&lt;endl;
}
else
{
  cout&lt;&lt; &quot; RetrieveKnowledgeType failed to retreive the CATIType with PLMCoreReference.&quot;&lt;&lt;endl;
  return 1;
}

// Add an attribute field with the product's name
CATAdpAttributeSet iAttributeSet;
iAttributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, productToOpen);

// Query by attribute
CATIAdpPLMIdentificator * piPLMIdent = NULL;

CATLISTP(CATAdpQueryResult) oQueryResults;
hr = CATAdpPLMQueryServices::GetElementsFromAttributes(iType, iAttributeSet, oQueryResults);
if (SUCCEEDED(hr) &amp;&amp; oQueryResults.Size())
{
  CATAdpQueryResult *res = oQueryResults[1];
  if (res)
  {
    res-&gt;GetIdentifier( piPLMIdent);
    delete res;
    res=NULL;
  }
}

CATIPLMProducts *piContextProduct = NULL ; 
CATAdpOpenParameters params(CATAdpExpandParameters::Authoring);
CATOmbLifeCycleRootsBag Bag;
CATAdpOpener opener(Bag,params);

if (piPLMIdent)
{

  cout &lt;&lt; &quot;The Product has been correctly identified&quot; &lt;&lt; endl;
  rc = opener.CompleteAndOpen(piPLMIdent,IID_CATIPLMProducts, (void**) &amp;piContextProduct);
  piPLMIdent-&gt;Release(); 
  piPLMIdent = NULL;
}
else
{
  cout &lt;&lt; &quot;ERROR The Product has not been correctly identified&quot; &lt;&lt; endl;
  exit (-1);
}
</pre>
<p>Open your PLM Component </p>
<pre class="code">CATIPLMProducts *piContextProduct = NULL ;
CATOmbLifeCycleRootsBag Bag; 
CATAdpOpener opener(Bag);
rc = opener.CompleteAndOpen(piPLMIdent,IID_CATIPLMProducts, (void**) &amp;piContextProduct); 
if (piPLMIdent) {piPLMIdent-&gt;Release(); piPLMIdent = NULL;}

if (FAILED(rc))
{
cout &lt;&lt; &quot;ERROR in retrieving CATIPLMProducts interface on object = &quot; &lt;&lt; endl;
exit (-1);
}
if (piContextProduct)
cout &lt;&lt; &quot;The Product openness is SUCCESSFUL&quot; &lt;&lt; endl;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieve all the mechanism under the product</h3>
<p>Get a pointer on a CATIKinematicsServices object then use it to get all the mechanism 
under the open product.</p>
<pre class="code">CATIKinematicsServices * piKinServices = CATKinGetKinematicsServices();
if (NULL==piKinServices)
{
cout&lt;&lt; &quot; Can not retrieve a CATIKinematicsServices pointer.&quot;&lt;&lt;endl;
return 1;
}</pre>
<pre class="code">CATListValCATBaseUnknown_var ListOfMechanisms;
rc = piKinServices-&gt;GetListOfMechanisms(spProd, ListOfMechanisms);
if (FAILED(rc))
{
cout &lt;&lt; &quot;ERROR in retrieving Mechanism List on the Product&quot; &lt;&lt; endl;
exit (-1);
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Analyze the first mechanism</h3>
<p>We will analyze the first mechanism retrieving the following information:</p>
<ul>
	<li>The product father of the mechanism which is the product currently opened.</li>
	<li>The list of products involved in the mechanism with the engineering connections.</li>
	<li>The list of engineering connections used by the mechanism.</li>
	<li>The Degrees Of Freedom with and without kinematics commands, the mechanism 
		status ( can be simulated or not)</li>
	<li>The list of kinematics commands which control the mechanism.</li>
</ul>
<pre class="code"> // what is the product father of this mechanism ?
CATIPLMProducts_var spFatherProduct;
spMechanism-&gt;GetFatherProduct(spFatherProduct);
if (!!spFatherProduct &amp;&amp; spFatherProduct == spProd)
cout &lt;&lt; &quot;We have the right father product&quot; &lt;&lt; endl;

// what are the impacted products?
CATListValCATBaseUnknown_var ImpactedProductsList;
spMechanism-&gt;GetImpactedProductsList(ImpactedProductsList);
cout &lt;&lt; &quot;We have ImpactedProductsList : &quot; &lt;&lt; ImpactedProductsList.Size()&lt;&lt;endl;

// what are the impacted connections?
CATListValCATBaseUnknown_var ConnectionsList;
spMechanism-&gt;GetEngineeringConnectionsList(ConnectionsList);
cout &lt;&lt; &quot;We have ConnectionsList : &quot; &lt;&lt; ConnectionsList.Size()&lt;&lt;endl;

// what are the DOF status?
int DOFWithoutCmd=-1;
int DOFWithCmd=-1;
CATBoolean SimulationReady=FALSE;
spMechanism-&gt;GetDOFStatus(DOFWithoutCmd, DOFWithCmd, SimulationReady);
cout &lt;&lt; &quot;GetDOFStatus : &quot; &lt;&lt; DOFWithoutCmd&lt;&lt;&quot; - &quot;&lt;&lt;DOFWithCmd&lt;&lt;&quot; - &quot;&lt;&lt;SimulationReady&lt;&lt;endl;

// what are the defined commands?
CATListValCATBaseUnknown_var Cmdlist;
spMechanism-&gt;GetKinCommandsList(Cmdlist); 
cout &lt;&lt; &quot;We have Cmdlist : &quot; &lt;&lt; Cmdlist.Size()&lt;&lt;endl;</pre>
<p>On the first command of the mechanism we will obtain the following information:</p>
<ul>
	<li>The engineering connection involved in the kinematics command.</li>
	<li>The type of the first kinematics command.</li>
	<li>The connection parameter used by the first kinematics command.</li>
	<li>The boundaries of the first kinematics command.</li>
</ul>
<pre class="code"> CATIKinematicsCommand_var spCommand = Cmdlist[1];
if (NULL_var == spCommand) 
{
cout &lt;&lt; &quot;ERROR in QI on the first command&quot; &lt;&lt; endl;
exit (-1);
}
cout &lt;&lt; &quot;Instropection on the first command&quot; &lt;&lt; endl;

// get the connection
CATBaseUnknown_var spConnection;
spCommand-&gt;GetEngineeringConnection(spConnection) ;

// get the connection
CATKinematicsCommandType CmdType;
spCommand-&gt;GetKinCommandType(CmdType);
cout &lt;&lt; &quot;CmdType : &quot; &lt;&lt; Cmdlist.Size()&lt;&lt;endl;

// get the parameter value
CATICkeParm_var spCmdParameter;
spCommand-&gt;GetValue(spCmdParameter);

// get the limits
double MinValue=0;
double MaxValue =0;
CATBoolean IsMinSet=FALSE;
CATBoolean IsMaxSet=FALSE;
spCommand-&gt;GetLimits(MinValue, MaxValue, IsMinSet, IsMaxSet);
cout &lt;&lt; &quot;GetLimits : &quot; &lt;&lt; MinValue&lt;&lt;&quot; - &quot;&lt;&lt;MaxValue&lt;&lt;&quot; - &quot;&lt;&lt;IsMinSet&lt;&lt;&quot; - &quot;&lt;&lt;IsMaxSet&lt;&lt;endl;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4">Run a kinematics simulation</a></h3>
<p>Once the kinematics solver environment is initialized, several simulations can 
be computed. In the given use case, only one simulation is computed.&nbsp; The target 
value to reach is 30 degrees for the first command. After the last simulation call, 
the solver environment simulation&nbsp; should be complete.</p>
<pre class="code"> // the kinematics solver 
rc = spMechanism-&gt;PrepareSimulation ();
if (FAILED(rc)) 
{
cout &lt;&lt; &quot;The mechanism could not be prepared for the simulation&quot;&lt;&lt;endl;
return 1;
}

// Set to 30 degrees the target value for the first command 
CATListOfDouble ListOfCmdValues;
ListOfCmdValues.Append(30);
CATListValCATBaseUnknown_var ListOfMovingProduct;
CATListPtrCATMathTransformation ListOfNewPositions;
CATKinematicsSimulationStatus RunStatus;

// Run a kinematics simulation
rc = spMechanism-&gt;RunSimulation (ListOfCmdValues, ListOfMovingProduct, ListOfNewPositions, RunStatus);
if (FAILED(rc)) {
cout &lt;&lt; &quot;The mechanism could not be run&quot;&lt;&lt;endl;
return 1;
}

// Finalize the kinematics solver
rc = spMechanism-&gt;CleanSimulation ();
if (FAILED(rc)) 
{
cout &lt;&lt; &quot;The mechanism could not be cleaned&quot;&lt;&lt;endl;
return 1;
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References">References</a></h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [November 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [May 2014]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
