<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<title>Selecting Reference Instance Objects Inside Immersive Window</title>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Selecting Reference Instance Objects Inside Immersive Window</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case illustrates the use of a CAA acquisition agent and its 
		capabilities. The use case demonstrates the selection of Reference object 
		and the Instance object from the navigator window. In the process of selection 
		of Reference and instance the use case describes the behavior of the acquisition 
		agent the effect of the sequence of the addition of the acquisition agent.</p>
		<ul>
			<li><a href="#What You Will Learn With This Use Case">What You Will 
			Learn With This Use Case</a></li>
			<li><a href="#The CAAIpaNavAcqAgentAddin Use Case">The CAAIpaNavAcqAgentAddin 
			Use Case</a>
			<ul>
				<li><a href="#What Does CAAIpaNavAcqAgentAddin Do">What Does CAAIpaNavAcqAgentAddin 
				Do</a></li>
				<li><a href="#How to Launch CAAIpaNavAcqAgentAddin">How to Launch 
				CAAIpaNavAcqAgentAddin</a></li>
				<li><a href="#Where to Find the CAAIpaNavAcqAgentAddin Code">Where 
				to Find the CAAIpaNavAcqAgentAddin Code</a></li>
			</ul>
			</li>
			<li><a href="#Step-by-Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="What You Will Learn With This Use Case"></a>What You Will Learn With 
This Use Case</h2>
<p>In this use case mainly teaches us the behavior of the acquisition agent along 
with following things from the navigator window:</p>
<ul>
	<li>Selection of Reference element from navigation window</li>
	<li>Selection of Instance element from the navigation window</li>
	<li>To retrieve reference of the selected Instance </li>
	<li>The behavior of the acquisition agent due to change in the order of adding 
	agent</li>
	<li>The acquisition agent with <em>PLMCoreReference</em> filter criteria works 
	on the Reference and Instance both objects. and it reruns the reference object 
	of the selected element.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="The CAAIpaNavAcqAgentAddin Use Case"></a>The CAAIpaNavAcqAgentAddin 
Use Case</h2>
<p><strong>CAAIpaNavAcqAgentAddin</strong> is a use case of the <strong>CAAImmVPMInterfacesExt.edu</strong> 
framework that illustrates the <em>CATImmVPMInterfacesExt</em> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAIpaNavAcqAgentAddin Do"></a>What Does CAAIpaNavAcqAgentAddin 
Do</h3>
<p>The goal of <em>CAAIpaNavAcqAgentAddin</em> use case is to demonstrate the capabilities 
of the new CAA acquisition agent.</p>
<p>Here we create two commands to show the difference in behavior of the CAA acquisition 
agent to acquire an element with some criteria. Then, it displays some properties 
of this valid selection.</p>
<p>
<img alt="Product in Explorer" src="images/CAAIpaNavAcqAgentAddin_ProductInExplorer.jpg" width="401" height="118"></p>
<p>Our toolbar appears on top of the CATIA frame and contains two commands represented 
by the
<img alt="Select Reference from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_I.png" width="22" height="22"> 
and
<img alt="Select Reference or Instance from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_SelectrefInstCmd.jpg" width="23" height="24"> 
icon.</p>
<p>The first command &quot;Select reference from navigator&quot;
<img alt="Select Reference from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_I.png" width="22" height="22"> 
contains only one acquisition agent with <em>PLMCoreReference</em> as filter criteria. 
Due to this single acquisition agent <em>(Filter PLMCoreReference</em> type) the 
returned element is of Reference type, when we select the instance element it internally 
retrieves the Identificator of the Reference of the selected instance. And in case 
of Root reference selection it returns Identificator of Reference element as expected.</p>
<p>In second command &quot;Selecting reference or Instance from navigator&quot;
<img alt="Select Reference or Instance from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_SelectrefInstCmd.jpg" width="23" height="24"> 
contains two acquisition agents with filter criteria <em>PLMCoreReference</em> and
<em>PLMCoreInstance</em>. Here the adding sequence of the agent is very important. 
Since the change in sequence changes the behavior.</p>
<p>Here we add Instance agent first then reference agent due to this when we select 
the Instance element from navigator window the acquisition agent returns Instance 
element. and when we select the Reference element the acquisition element of reference 
get executed and returns the reference object.</p>
<p>Please note that if we change the sequence the behavior changes and we always 
get reference object as described in the first command, since the <em>PLMCoreReference</em> 
agent always execute first .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAIpaNavAcqAgentAddin"></a>How to Launch CAAIpaNavAcqAgentAddin</h3>
<p>To launch CAAIpaNavAcqAgentAddin:</p>
<ol>
	<li>Start CNEXT by executing <tt>mkrun -c CNEXT </tt></li>
	<li>Connect to ENOVIA (or any other connector<tt></tt>) </li>
	<li>Search for an existing Product from the PLM Toolbar, for example typing 
	&quot;prd: skate&quot;.<tt></tt></li>
	<li>Select an item in the result list and Explore it</li>
	<li>Display the toolbar named &quot;CAA VPLM Acquisition Agent toolbar&quot; if necessary 
	through the menu View / Toolbar:
	<p>
	<img alt="CAA VPLM Acquisition Agent toolbar" src="images/CAAIpaNavAcqAgentAddin_Toolbar.jpg" width="218" height="25"></p>
	</li>
	<li>Click on the icon to run the command and try to do your selection: Here 
	we have two commands respectively<br>
	<ul>
		<li>Selecting reference from navigator
		<img alt="Select Reference from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_I.png" width="22" height="22"></li>
		<li>Selecting Reference or Instance from navigator
		<img alt="Select Reference or Instance from Navigator Icon" src="images/CAAIpaNavAcqAgentAddin_SelectrefInstCmd.jpg" width="23" height="24"></li>
	</ul>
	<p>
	<img alt="CAA Acquisition Toolbar" src="images/CAAIpaNavAcqAgentAddin_ToolbarCommands.jpg" width="80" height="60"></p>
	</li>
	<li>When the end user moves or locates the mouse above an invalid object, the 
	cursor is set to
	<img alt="NoEntry Cursor" src="images/CAAIpaNavAcqAgentAddin07.png" width="22" height="22">.
	</li>
	<li>In case of valid selection, a panel displaying some properties related to 
	your selection is displayed.</li>
</ol>
<p><strong><a name="Addin"></a>Add-in Access</strong></p>
<p>Before launching CATIA, Remove the #CAA# characters in the CAAImmVPMInterfacesExt.edu.dico 
in front of the following line:</p>
<pre class="code">...
#CAA# CAAIpaNavAcqAgentAddinLT  CATIImmNavAddin     libCAAIpaNavAcqAgentAddin
#CAA# CAAIpaNavAcqAgentAddinLT  CATIWorkbenchAddin  libCAAIpaNavAcqAgentAddin
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAIpaNavAcqAgentAddin Code"></a>Where to Find the 
CAAIpaNavAcqAgentAddin Code</h3>
<p><code>CAAIpaNavAcqAgentAddin</code> code is located in <code>InstallRootFolder\CAADoc\CAAImmVPMInterfacesExt.edu\CAAIpaNavAcquisitionAgentAddin.m\src</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step-by-Step"></a>Step-by-Step</h2>
<p>There are two steps in CAAIpaNavAcqAgentAddin:</p>
<ol>
	<li><a href="#Step1">Acquisition Agent Initialization</a></li>
	<li><a href="#Step2">Retrieving Identificator of Selected Element</a></li>
</ol>
<p>We will now detail each of those sections:</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Acquisition Agent Initialization</h3>
<p>Here we describe the agents for command 1 and command 2. These two commands will 
show the exactly the way to retrieve the Reference/Instance object. </p>
<h4><a name="Step1"></a>Case 1: Select reference from navigator Command</h4>
<p>Here is an extract of the state command, the <em>CAAIpaNavReferenceSelectionCmd</em> 
class. It is a description of the acquisition agent to manage selection of a PLM 
entity in Navigation window enabling to select a PLM Reference and Instance. Mainly 
in this case the returned object is Reference. When we select the instance object 
the returned object is Reference of selected instance.</p>
<pre class="code">...
   _paAcqAgent = new <strong>CATPLMNavPropertiesAcquisition</strong>(&quot;VPLMNavAcqSelectAgent&quot;);
   CATIType_var spCATITypeOnType ;
   CATString typeName = &quot;PLMCoreReference&quot;;
   CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(typeName.CastToCharPtr(), spCATITypeOnType); 
   _paAcqAgent-&gt;<strong>SetPLMIdentificationFilterFromType</strong>(spCATITypeOnType);
   _paAcqAgent-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPrevaluation|CATDlgEngWithCSO);
...</pre>
<p>Here the acquisition agent, <code>_paAcqAgent</code>, is a <em>CATPLMNavPropertiesAcquisition</em> 
class instance enabling to select object in the specification tree. The <code>CATPLMNavPropertiesAcquisition::SetPLMIdentificationFilterFromType</code> 
method enables you to define the type of object to select.</p>
<p>In the case of first command we only create single acquisition agent with <em>
PLMCoreReference</em>.</p>
<p>In this case, the objects of the type specialized by the current Customization 
for a PLMCoreReference and PLMCoreInstance inside the given Modeler can be selected. 
Otherwise the mouse&#39;s cursor indicates that the selection is forbidden.</p>
<p>It is significant to note here that the filter for a <em>PLMCoreReference</em> 
type allows selecting a Instances as well, with the root reference. Hence when selecting 
Instance agent returns the reference of the instance.</p>
<pre class="code">...
   pSelectState -&gt; <strong>AddDialogAgent</strong>(_paAcqAgent);
...</pre>
<p>In the First command case we have only one agent so there is no question of sequence.</p>
<h4><a name="Step1"></a>Case 2: Select reference or Instance from navigator Command</h4>
<p>Here is an extract of the state command, the <em>CAAIpaNavInstanceReferenceSelectionCmd</em> 
class. It is a description of the acquisition agent to manage selection of a PLM 
entity in Navigation window enabling to select a PLM Reference and Instance. Here 
we could retrieve instance and Reference both object as per selection.</p>
<pre class="code">...
  _pObjectAgentRootRef = new <strong>CATPLMNavPropertiesAcquisition</strong>(&quot;ObjectAgentRootRef&quot;);
  CATIType_var spCATITypeOnType ;
  CATString typeName = &quot;<strong>PLMCoreReference&quot;</strong>;
  CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(typeName.CastToCharPtr(), spCATITypeOnType); 
  _pObjectAgentRootRef-&gt;<strong>SetPLMIdentificationFilterFromType</strong>(spCATITypeOnType);
  _pObjectAgentRootRef-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPrevaluation|CATDlgEngWithCSO);

  _pObjectAgentRefInst = new <strong>CATPLMNavPropertiesAcquisition</strong>("ObjectAgentRefInst");
  CATIType_var spCATITypeOnType2 ;
  CATString typeName2 = &quot;<strong>PLMCoreInstance&quot;</strong>;
  CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(typeName2.CastToCharPtr(), spCATITypeOnType2); 
  _pObjectAgentRefInst-&gt;<strong>SetPLMIdentificationFilterFromType</strong>(spCATITypeOnType2);
  _pObjectAgentRefInst-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPrevaluation|CATDlgEngWithCSO);
...</pre>
<p>Here the acquisition agent, <code>_pObjectAgentRootRef</code>, is a <em>CATPLMNavPropertiesAcquisition</em> 
class instance enabling to select object in the specification tree. The <code>CATPLMNavPropertiesAcquisition::SetPLMIdentificationFilterFromType</code> 
method enables you to define the type of object to select. The acquisition agent
<code>_pObjectAgentRefInst </code>is updated with <em>PLMCoreInstance</em> when 
this aget get exicuted it will allow to select instance object and it will return 
Instance identifier object of selected instance Object.</p>
<p>In this case, the objects of the type specialized by the current Customization 
for a PLMCoreReference and PLMCoreInstance inside the given Modeler can be selected. 
Otherwise the mouse&#39;s cursor indicates that the selection is forbidden.</p>
<p>Here seqence of adding agents is very crucial since as we have seen in first 
case the acquisition agent filter for a <em>PLMCoreReference</em> type allows selecting 
a Instances as well, with the root reference. So due to that the first agent will 
always work for instance selection .</p>
<p>The following peace of code describes the how the sequence should maintain to 
retrieve Instance and Root reference objects independently.</p>
<pre class="code">...
   CATDialogState *pSelectState = GetInitialState(&quot;VPLMNavAcqInitialState&quot;);
   ...
   pSelectState -&gt; <strong>AddDialogAgent</strong>(<strong>_pObjectAgentRefInst</strong>);
   pSelectState -&gt; <strong>AddDialogAgent</strong>(<strong>_pObjectAgentRootRef</strong>) 
...</pre>
<p>Here we add the dialog agent and the sequence is very important for selecting 
RefInst since if we reverse the order Root will always execute first.</p>
<p>In second Command sequence is must.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving Identificator of Selected Element</h3>
<p>Once a Root Reference /Instance is selected, you must retrieve it, and retrieve 
its reference/instance.</p>
<pre class="code">...
   CATPLMNavPropertiesAcquisition    *pAgentOfSelection = NULL ;
   if ( _pObjectAgentRef-&gt;GetValuationState( ) == CATAcquisitionAgent::<strong>Valuated</strong> ) 
   {
      pAgentOfSelection = _pObjectAgentRef;
   }
   ...
   int NbSelElem = pAgentOfSelection-&gt;<strong>GetSelectionCount</strong>();
   for ( int i=1 ; i&lt;=NbSelElem ; i++)
   {
      ...	  
      CATPathIdentificators PathIdent;
      HRESULT rc = pAgentOfSelection-&gt;<strong>GetPLMIdentification</strong>(i, PathIdent);
      ...	
      int SizePath = PathIdent.Size();
      ...
      CATIAdpPLMIdentificator * pAdpId = PathIdent[<strong>SizePath</strong>];
...</pre>
<p>Here it is an extract of the callback method when an object is selected. The 
acquisition agent, <code>_pObjectAgentRef</code>, the State Command class member, 
instantiated and initialized in the previous section. The <code>CATPLMNavPropertiesAcquisition::GetPLMIdentification</code> 
method retrieves the selected object, in fact the path from the root to the selected 
object.</p>
<p>The returned identificator object is depends upon the cases as we have discussed 
earlier.</p>
<p>In first command the retrieved Identificator of Reference element. In case of 
instance selection it returns reference of selected instance object.</p>
<p>In second command the retired object is of respective type. In case of instance 
selection it returns identificator of instance and in case of Reference selection 
it returns Reference object.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="InShort"></a>In Short</h2>
<p>This use case demonstrates how to instantiate and use the CAA Acquisition Agent 
inside and its behaviors using two commands.</p>
<ul>
	<li>The single agent with filter criteria returns the reference element.</li>
	<li>To retrieve the Instance element from navigator need to add agent with
	<em>PLMCoreInstance</em> before the acquisition agent with filter criteria
	<em>PLMCoreReference.</em></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td><a name="[1]">[1]</a></td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Apr 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
