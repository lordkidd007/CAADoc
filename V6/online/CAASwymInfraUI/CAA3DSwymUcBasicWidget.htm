<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Displaying Data for Connected User</title>
</head>
<body onload="createToc();highlightSearchTerms();">
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Displaying Data for Connected User</h1>
		</td>
	</tr>
	<tr> 
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<table class="abstract">
	<tr>
		<td>
			<h2>Abstract</h2>
			<p>This article describes a widget displaying data coming from the 3DSwym service. </p>
			
			<ul>
				<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
				<li><a href="#UseCase">The CAASwYmWidgetForUser Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASwYmWidgetForUser Do</a></li>
					<li><a href="#How">How to Launch CAASwYmWidgetForUser</a></li>
					<li><a href="#Where">Where to Find the CAASwYmWidgetForUser Code</a></li>
				</ul>
				</li>
				<li><a href="#Step">Step-by-Step</a></li>
				<li><a href="#InShort">In Short</a></li>
				<li><a href="#References">References</a></li>
			</ul>
		</td>
	</tr>
</table>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to consume a 3DSwym  Web services [<a href="#References">1</a>] from a browser. It particulary focuses on 
the API [<a href="#References">2</a>] enabling you to pass the 3DPassport authentication, and to solve the cross domain access protection. </p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="UseCase"></a>The CAASwYmWidgetForUser Use Case</h2>
<p>CAASwYmWidgetForUser is a use case of the CAASwymInfraWeb.edu framework. 
It illustrates 3DSwym web application capabilities inside widgets.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="What"></a>What Does CAASwYmWidgetForUser Do</h3>
<p>CAASwYmWidgetForUser is a widget displaying the login, the nickname and the email adress of the 
 user currently connected to the <b>3D</b>EXPERIENCE platform. </p>
 <table>
     <caption><a name="Fig.1">Fig.1</a> Widget Body</caption>
	<tr>
		<td>
		<img alt="platform" src="images/CAAWebAppsUcUserData.png"/></td>
	</tr>
</table>
<p>These data are  extracted from the response of the <a href="../CAASwymInfra/CAA3DSwymQrGetCurrentUser.htm">api/user/getcurrent</a> web service.</p>
<p><b>Pay attention:</b> The widget must be executed in a trusted environment otherwise, the 3DPassport authentication will be impossible, even with the exposed
API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="How"></a>How to Launch CAASwYmWidgetForUser</h3>
<p>To launch CAASwYmWidgetForUser,
you will need to set up the build time environment,
then compile CAASwYmWidgetForUser along with its prerequisites,
set up the run time environment,
and then execute the use case as described here [<a href="#References">3</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Where"></a>Where to Find the CAASwYmWidgetForUser Code</h3>
<p>The CAASwYmWidgetForUser use case is made of several files located in the CAASwYmWidgetForUser.mweb module of the CAASwymInfraWeb.edu framework.
</p>
<p>The CAASwYmWidgetForUser.mweb module is composed of:
</p>
<ul>
	<li>CAASwYmWidgetForUser.html located in <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmWidgetForUser.mweb\src\</code>.
	It contains the widget html page definition.
	</li>
	<li>CAASwYmWidgetMngt.js located in <code>InstallRootFolder\CAADoc\CAASwymInfraWeb.edu\CAASwYmWidgetForUser.mweb\src\</code>.
	an independant javascript file to export via AMD module [<a href="#References">4</a>] some functions.
	</li>
</ul>
<p>Where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed [<a href="#References">3</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several logical steps in CAASwYmWidgetForUser use case:</p>
<ul>
    <li><a href="#Step1">Requiring AMD Modules</a></li>
	<li><a href="#Step2">Retrieving the 3DSwym Service Url</a></li>
	<li><a href="#Step3">Building the Web Service Url</a></li>
	<li><a href="#Step4">Consuming the Web Service</a></li>
	<li><a href="#Step5">Extracting the Response</a>
	</li>
</ul>

<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step1"></a>Requiring AMD Modules</h3>
<p>The javascript section of the widget hmtl page is encloded by the <code>script</code> balise.</p>
<pre class="code">
&lt;script &gt;
     /* global widget,require */
     <b>require(['DS/CAASwYmWidgetForUser/CAASwYmWidgetMngt',
              'DS/WAFData/WAFData',
              'DS/i3DXCompassServices/i3DXCompassServices'], </b>
         function (CAASwYmWidgetMngt, WAFData,i3DXCompassServices) {
            'use strict';
             ...
         }
      );
&lt;/script&gt;
</pre>
<p>You recognize the AMD pattern like described in the referenced article [<a href="#References">5</a>].</p>   
<p>For this use case we have three pre-req each one represented by an argument of anonymous function of the require:</p>
<ul>
<li><code>CAASwYmWidgetMngt</code> represents the use case AMD module. It contains functions to lightweight the widget html page code</li> 
<li><code>WAFData</code> represents the AMD module exporting function to access data server.</li> 
<li><code>i3DXCompassServices</code> represents the AMD module exporting function to retrieve the 3DSwym service url.</li> 
</ul>
<p>The piece of code just after <code>use strict</code> is as follows: </p>
<pre class="code">
var MyWidget = {
   onLoad: function() {
      //See <a href="#Step2">Retrieving the 3DSwym Service Url</a>
   },
   UrlReady: function(...) {
     //see <a href="#Step3">Building the Web Service Url</a>, and then <a href="#Step4">Consuming the Web Service</a>
   },
   DataReady: function(...) {
      //See <a href="#Step5">Extracting the Response</a>
   },
};
widget.addEvent('onLoad',  MyWidget.onLoad);	
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step2"></a>Retrieving the 3DSwym Service Url</h3>
<p>We use the <i>getServiceUrl</i> function exposed by the <a href="#" onclick="CAAlink('JS', 'i3DXCompassUI', 'i3DXCompassServices', 'i3DXCompassServices'); return false;">DS/i3DXCompassServices/i3DXCompassServices</a> module. 
The function has one argument whose the format is a JSON structure (key/value).</p>
<pre class="code">
i3DXCompassServices.<b>getServiceUrl</b>( { 
	<b>serviceName: </b>'3DSwym', 
	<b>platformId: </b> widget.getValue('<b>x3dPlatformId</b>'),
	<b>onComplete</b> : MyWidget.UrlReady ,
	<b>onFailure</b>:  function(error) { 
	   console.warn('Failure:', error); 
	}
} ) ;  
</pre>
<ul>
<li>The first key/value is the name of the service -  <code>3DSwym</code> - . </li>
<li>the second is the anonymous function which is called when the answer is successfully returned </li>
<li>the third is the platform instance - see technical article [<a href="#References">6</a>] </li>
<li> the last is the function when the call raises an error. </li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step3"></a>Building the Web Service Url</h3>
<p>This step consists in to build the complete path to get the resource on the 3DSwym server. </p>
<p>In the referenced article [<a href="#References">1</a>], you have learned such a path is:</p>
<pre class="code">https://&lt;server authority&gt;/&lt;path&gt;</pre>
<p>Where <code>path</code> is given in each web service reference page. </p>
<p>So, the use case code is like that: </p>
<pre class="code">
    UrlReady: function(datafromCompass) {
       var swymUrl=datafromCompass;
       <b>var pathWS= swymUrl + '/' + 'api/user/getcurrent'; </b>
      ...			
</pre>
<p><code>datafromCompass</code> is the data coming from the <i>i3DXCompassServices</i> service. Since, we have provided the platform instance 
as argument of <i>i3DXCompassServices.getServiceUrl</i>, the data is the url itself whose the form is:</p> 

<pre class="code">https://&lt;server authority&gt;</pre>
<p>The value for the string <code>path</code> is given by the reference page of the web service. Here 
<a href="../CAASwymInfra/CAA3DSwymQrGetCurrentUser.htm">api/user/getcurrent</a>. So, we have added a / , between <code>path</code> value, and the string returned by <i>i3DXCompassServices.getServiceUrl</i>. 
<p><b>Pay attention</b>, a path with more than one / is wrong. (ex: https://.../...<b>//</b>api/user/getcurrent is wrong)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step4"></a>Consuming the Web Service</h3>
<p>Once, the path of the WS is built, we can invoke it. We use the <i>authenticatedRequest</i> function exposed by the <a href="#" onclick="CAAlink('JS', 'WebAppsFoundation', 'WAFData', 'WAFData'); return false;">DS/WAFData/WAFData</a> module. </p>

<pre class="code">
       ...
       <b>WAFData.authenticatedRequest</b>(pathWS, {
          <b>method</b>:'GET', 
          <b>onComplete</b>: MyWidget.DataReady ,						    
          <b>onFailure </b>: function(error) { 
               console.warn('Failure:', error) 
           }
        });	
        widget.body.innerHTML='Waiting for the 3pathWS response' ; 				
    },
</pre>

<p>The argument of the <i>authenticatedRequest</i> function is an object with a key/value structure. On bold the keys:</p>
<ul>
<li><b>method</b>, the value is the kind of method of the web service : here <code>GET</code>.  see  <a href="../CAASwymInfra/CAA3DSwymQrGetCurrentUser.htm">api/user/getcurrent</a>
<li><b>onComplete</b>: The value is the function to trigger when the web service is complete. </li>
<li><b>onFailure</b>: The value is the function to trigger when the web service fails. </li>
</ul> 

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="Step5"></a>Extracting the Response</h3>
<p>The <code>DataReady</code> function is called when the web service is complete. See the <a href="#Step4">previous</a> step. </p>
<pre class="code">
    DataReady: function(jsonresponseasstring) {
       var login = CAASwYmWidgetMngt.getUserInfo(jsonresponseasstring,'login'); 
       var nickname = CAASwYmWidgetMngt.getUserInfo(jsonresponseasstring,'nickname'); 
       var email = CAASwYmWidgetMngt.getUserInfo(jsonresponseasstring,'email'); 
       widget.body.innerHTML='Your login is:' + login + "&lt;br&gt;" + 
                              'Your nickname is:'  + nickname + "&lt;br&gt;" +	
                              'Your email is:'  + email ; 
    }
</pre>
<p><code>jsonresponseasstring</code> is the data coming the <i>WAFData</i> service. It is the response of the 
3DSwym WS, a JSON structure -  see  <a href="../CAASwymInfra/CAA3DSwymQrGetCurrentUser.htm">api/user/getcurrent</a> page. But <code>jsonresponseasstring</code> is
not directly a JSON, it is a string representing a JSON. </p>
<p>The <i>GetUserInfo</i> function of the <code>CAASwYmWidgetMngt</code> module extracts from the web service response the requested data. </p>
<pre class="code">
GetUserInfo  : function ( jsonresponseasstring, key ) {	
    var toReturn= null;
    var wsresult = <b>JSON.parse</b>(jsonresponseasstring);
    toReturn=wsresult.result[key] ;			
    return toReturn;
}
</pre>
<p>So the method first transforms the data in a JSON structure object. Then you can easily handle the object (<code>wsresult</code>) to retrieve the value of the key passed as second argument of
the <i>GetUserInfo</i> function.</p>
<p>Extract of the JSON structure returned by <a href="../CAASwymInfra/CAA3DSwymQrGetCurrentUser.htm">api/user/getcurrent</a>:</p>
<pre class="code">
{
  "monitoring": {"last_exec_time": 0.12882304191589},
  "nb_result": 1,
  "request_id": null,
  "result": {
    ...
    "email": "admin_platform@3ds.com",
    ...
    "login" : "xyz",
    ...
    "nickname" : "xxxx" ,
    ...
}
</pre>
<p>So, when the key is a variable, so when you cannot write: </p>
<pre class="code">
 wsresult.result.email 
 wsresult.result.login
 wsresult.result.nickname
</pre>
<p>You write:</p>
<pre class="code">
wsresult.result[key] ;	
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to build the complete path of the 3DSwym web service, and how to decode the response.</p>

<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="References"></a>References</h2>
<table class="reference">
    <tr>
		<td>[1]</td>
		<td><a href="../CAASwymInfra/CAA3DSwymTaAboutWS.htm">About 3DSwym Web Services</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAWebAppsJSWS/CAAWebAppsTaDataAccess.htm')">About Service Data Access</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>Building and Launching a Web App Use Case</td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAWebAppsJSGuides/CAAWebAppsTaAMDConcepts.htm')">AMD Concepts</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAWebAppsJSGuides/CAAWebAppsUcOperationApp.htm')">Defining and Using AMD Modules</td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAWebAppsJSWS/CAAWebAppsTaServicePlatform.htm')">About Service Url and Platform Instance</td>
	</tr>
	 	
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [July 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->
<script type="text/javascript">insertCopyright();</script>
</body>
</html>
