<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Managing Thumbnails in the Immersive Applicative Data Browser</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Thumbnails in the Immersive Applicative Data Browser</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAALiveSimUseItf use case.&nbsp; It 
		explains how to manage your own commands and thumbnails in the immersive applicative data browser in Live Simulation environment.</p>
		
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALiveSimUseItf Use Case</a>
			<ul>
				<li><a href="#What">What Does CAALiveSimUseItf Do</a></li>
				<li><a href="#How">How to Launch CAALiveSimUseItf</a></li>
				<li><a href="#Where">Where to Find the CAALiveSimUseItf Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to manage your own commands and thumbnails in the immersive applicative data browser in Live Simulation environment.&nbsp; You will learn:</p>
<ul>
				<li>How to implement your own browser agent that will display thumbnails in your immersive browser tab;</li>
				<li>How to add commands to the contextual menu of the title bar of your immersive browser tab;</li>
				<li>How to customize your own thumbnail;</li>
				<li>How to add commands to the contextual menu of your thumbnail;</li>
				<li>How to code your browser/thumbnail commands.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALiveSimUseItf Use Case</h2>
<p>CAALiveSimUseItf is a use case of the <strong>CAALiveSimUseItf.edu</strong> framework that illustrates 
the capabilities of <strong>DELLiveInfraU5Itf</strong> framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALiveSimUseItf Do</h3>
<p>CAALiveSimUseItf provides sample implementations for the following:</p>
<ul>
				<li>an immersive browser agent - used to declare your own immersive browser tab and display thumbnails in it;</li>
				<li>a command launched from the contextual menu of the title bar of your immersive browser tab;</li>
				<li>a thumbnail displayed in your own immersive browser tab;</li>
				<li>a command launched from the contextual menu of your own thumbnail;</li>
				<li>a notification used by commands to inform your immersive browser agent that it needs to refresh the information displayed.</li>
</ul>
<p>The intent of this use case is to create a new immersive browser tab named
<strong>CAA Sample</strong>, display it in Live Simulation environment, provide 
a new command that creates <strong>Sample</strong> objects, display thumbnails 
for these Sample objects, and provide two commands on the contextual menu of the 
Sample thumbnails: one for changing the status of the Sample object (active/not 
active), second one for removing the Sample object.</p>
<p>To achieve this functionality, an immersive browser agent was provided: <code>DELLiveSimulation_CAAAgent</code> 
implementing the <code>DELILiveInfraBrowserAgent </code>interface.  This 
browser agent creates a new immersive browser tab named <strong>CAA Sample</strong>:</p>
<p><img src="images/CAABrowserTab.png" width="415" height="102"></p>
<p>It also specifies that a command is provided on the contextual menu of title bar in the new immersive browser tab:</p>
<p><img src="images/CAABrowserTabCtxMenu.png" width="405" height="140"></p>
<p>The &quot;Create New Sample&quot; command (<code>CAALiveSimAddSampleCmd</code>) launched 
through the contextual menu will create a new <strong>Sample</strong> object 
displayed as a thumbnail in the immersive browser:</p>
<p><img src="images/CAABrowserSampleObj.png" width="327" height="213"></p>
<p>The thumbnail displayed for the Sample object is managed through a 
implementation for <code>DELILiveInfraStampProxy</code> interface: <code>CAAImplDELILiveInfraStampProxy</code>.  This implementation specifies 
various attributes for the displayed thumbnail (e.g. icon, type, name, behavior, etc.).  It also allows the user to specify the commands that will be available on the contextual menu of the stamp:</p>
<p><img src="images/CAABrowserSampleTb.png" width="296" height="245"></p>
<p>The "Toggle Sample Status" command (<code>CAALiveSimToggleSampleCmd</code>) changes the status of the Sample object (active/not active), while the "Remove Sample" command (<code>CAALiveSimRemoveSampleCmd</code>) removes the selected Sample object and its thumbnail and refreshes the immersive browser.</p>
<p>Whenever the Sample object is &quot;active&quot;, its thumbnail will show 
this 
through a check mark in the top right corner of the stamp (this behavior is 
specified through the <code>DELILiveInfraStampProxy</code> implementation):</p>
<p><img src="images/CAABrowserTbActive.png" width="296" height="199"></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<br>
<h3><a name="How"></a>How to Launch CAALiveSimUseItf</h3>
<p>To see the functionality provided by CAALiveSimUseItf use case, you will need to set the following environment variable: 
<em>DEL_LIVE_SIM_CAA_ENABLED=1</em>, set up the build time environment, compile CAALiveSimUseItf 
along with its prerequisites, set up the run time environment [<a href="#References">1</a>], then run an interactive session, and 
follow the steps below:</p>
<ol>
				<li>Load any Manufacturing Simulation data;</li>
				<li>Enter Live Simulation environment by launching the <em>Activate 
				Live Simulation</em> command if it does not enter Live Simulation 
				automatically;</li>
				<li>Click on the CAA immersive browser tab to activate it;</li>
				<li>Launch <em>Create New Sample</em> command from the contextual menu of 
				the CAA Sample title bar to create a new Sample object;</li>
				<li>Launch <em>Create New Sample</em> command again to create the second Sample object;</li>
				<li>Launch <em>Toggle Sample Status</em> command from the contextual menu of the first Sample thumbnail to activate it;</li>
				<li>Launch <em>Toggle Sample Status</em> command from the contextual menu of the first Sample thumbnail again to deactivate it;</li>
				<li>Launch <em>Remove Sample</em> command from the contextual 
				menu of the second Sample thumbnail to delete it;</li>
				<li>Exit the session.</li>
</ol>
<p>The results of running this scenario should be similar to the snapshots presented above, in the <a href="#What">What Does CAALiveSimUseItf Do</a> section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALiveSimUseItf Code</h3>
<p>The CAALiveSimUseItf use case is made of several classes located in the 
CAALiveSimBrowserCmds.m (commands) and CAALiveSimBrowserSupport.m (immersive 
browser integration) modules of the CAALiveSimUseItf.edu framework: <code>InstallRootFolder\CAADoc\CAALiveSimUseItf.edu</code>, where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>The CAALiveSimMiscImpl.m module of the same framework also contains various implementations for Live Simulation related interfaces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are several steps in CAALiveSimUseItf:</p>
<ol>
	<li><a href="#Step1">Implementing the DELILiveInfraBrowserAgent Interface</a></li>
	<li><a href="#Step2">Implementing the DELILiveInfraStampProxy Interface</a></li>
	<li><a href="#Step3">Implementing the commands used on the Title bar's contextual menu</a></li>
	<li><a href="#Step4">Implementing the commands used on the Thumbnail's contextual menu</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implementing the DELILiveInfraBrowserAgent Interface</h3>
<p>The <code>DELILiveInfraBrowserAgent</code> interface is implemented in CAALiveSimUseItf use case 
in the <code>DELLiveSimulation_CAAAgent</code> class.</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Note: you must implement the <code>CATICreateInstance</code> interface on the 
		same <code>"DELLiveSimulation" + application specific string</code> late-type to allow the immersive browser manager to instantiate your 
		browser agent.</span> 
		</td>
	</tr>
</table>

<p>The constructor of <code>DELLiveSimulation_CAAAgent</code> class creates the necessary command headers for the commands displayed in the contextual menu of the immersive browser tab and/or thumbnails.</p>
<pre  class="code">...
    <span  class="comment">// create command headers that will be used for the contextual menu of the browser and/or thumbnails</span>
    if( NULL == CATAfrCommandHeader::CATGetCommandHeader( "CAALiveSimAddSampleCmdHdr" ) )
    {   <span  class="comment">// command header not found - create it</span>
        CATAfrCommandHeader::CATCreateCommandHeader("CAALiveSimAddSampleCmdHdr",
                                                    "CAALiveSimUseItf",
                                                    "CAALiveSimAddSampleCmd",
                                                    (void *)NULL,
                                                    "CAALiveSimUseItfCmdHdr",
                                                    CATFrmAvailable );
    }
...</pre>
<p>First you should check if the desired command header exists using the <code>CATAfrCommandHeader::CATGetCommandHeader</code> 
and only create it if the command header was not previously created.</p>
<p>&nbsp;</p>
<p>The <code>DELLiveSimulation_CAAAgent::GetBrowsers</code> method initializes the immersive browser tab information using a <code>DELLiveInfraBrowserData</code> object, 
then it specifies the commands to be added on the contextual menu of the title bar 
(e.g. the <em>Create New Sample</em> command), and finally it needs to retrieve the existing objects and their status and pass this information to the caller (immersive browser manager).</p>
<pre  class="code">...
    <span  class="comment">// browser tab information</span>
    DELLiveInfraBrowserData caaBrowserData;
    caaBrowserData._BrowserID = "CAALiveSimSampleBrowserId";
    caaBrowserData._BrowserName = CATMsgCatalog::BuildMessage( "CAALiveSimUseItf",
                                        "CAASample",NULL, 0,
                                        "CAA Sample" );
    caaBrowserData._BrowserIcon ="I_CAALiveSimSampleTab.png";
...</pre>
<p>The method should specify the browser ID (<code>_BrowserID</code>), the browser name (<code>_BrowserName</code>), and the 
icon to be used for the immersive browser tab (<code>_BrowserIcon</code>).</p>
<pre  class="code">...
    <span  class="comment">// define contextual menu commands for the browser tab
    // 'Create New Sample' Command</span>
    CATUnicodeString nlsTitle = CATMsgCatalog::BuildMessage( "CAALiveSimUseItfCmdHdr",
        "CAALiveSimUseItfCmdHdr.CAALiveSimAddSampleCmdHdr.Title",NULL, 0,
        "Create New Sample" );

    caaBrowserData._ObjectCreationCmdHeaders.Append( "CAALiveSimAddSampleCmdHdr" );
    caaBrowserData._ObjectCreationCmdLabels.Append( nlsTitle );
    caaBrowserData._ObjectCreationCmdIcons.Append( "I_CAALiveSimAddSample" );
...</pre>
<p>The information for the contextual menu commands should be added into the <code>DELLiveInfraBrowserData</code> object as follows: command header ID should be added to <code>_ObjectCreationCmdHeaders</code>, 
command header label should be added to <code>_ObjectCreationCmdLabels</code>, and command header icon should be added to <code>_ObjectCreationCmdIcons</code>.</p>
<pre  class="code">...
    <span  class="comment">// retrieve existing thumbnail owners/status</span>
    ...

    <span  class="comment">// add retrieved information to same DELLiveInfraBrowserData object</span>
    caaBrowserData._StampOwnerList.Append( _ownerList );
    caaBrowserData._StampStatusList.Append( _statusList );

    <span  class="comment">// pass to immersive browser manager</span>
    DELListOfDELLiveInfraBrowserData* pListOfBrowserData = (DELListOfDELLiveInfraBrowserData*) oBrowserDatas;
    pListOfBrowserData->Append( caaBrowserData );

...</pre>
<p>To pass the retrieved information to the immersive browser manager, the same <code>DELLiveInfraBrowserData</code> object as above needs to be used: the list of thumbnail owners (objects) should be added to <code>_StampOwnerList</code>
and the list containing the status (e.g. active/not active) for these objects must be added to <code>_StampStatusList</code>.  Finally, the <code>DELLiveInfraBrowserData</code> object needs to be 
added into the <code>pListOfBrowserData</code> which in fact represents the <code>oBrowserDatas</code> argument of the <code>DELLiveSimulation_CAAAgent::GetBrowsers</code> method (output).
</p>
<p>&nbsp;</p>
<p>The <code>DELLiveSimulation_CAAAgent::UpdateBrowsers</code> method is responsible 
for reacting to certain notifications in order to add/remove/refresh the thumbnails 
displayed in the immersive browser tab.  It uses a <code>DELLiveInfraBrowserData</code> object 
in a similar manner as <code>DELLiveSimulation_CAAAgent::GetBrowsers</code> 
method:</p>
<pre  class="code">...
    DELListOfDELLiveInfraBrowserData* pListOfBrowserData = (DELListOfDELLiveInfraBrowserData*) oBrowserDatas;

    <span  class="comment">// browser tab information</span>
    DELLiveInfraBrowserData caaBrowserData;
    caaBrowserData._BrowserID = "CAALiveSimSampleBrowserId";

    <span  class="comment">// manage notifications</span>
    if( iNotification->GetMetaObject()->IsAKindOf(...::MetaObject() ) )
    {
        ... <span  class="comment">// refresh object/status lists</span>
        oChanges = TRUE;
    }
    else if( iNotification->GetMetaObject()->IsAKindOf(DELLiveInfraRefreshNotif::MetaObject() ) )
    {
        <span  class="comment">// ===========  DELLiveInfraRefreshNotif  ===========
        // Since we can't tell what was affected by the Undo/Redo, rebuild the browser.</span>
        ... <span  class="comment">// refresh object/status lists</span>
        oChanges = TRUE;
    }

    <span  class="comment">// add retrieved information to a DELLiveInfraBrowserData object, to be passed to immersive browser manager</span>
    caaBrowserData._StampOwnerList.Append( _ownerList );
    caaBrowserData._StampStatusList.Append( _statusList );
    pListOfBrowserData->Append(caaBrowserData);
...</pre>
<p>It is very important for this method to react to <code>DELLiveInfraRefreshNotif</code> 
notifications and regenerate the lists of thumbnail owners/status in order for 
the immersive browser to be refreshed during an undo/redo or browser refresh 
action.</p>
<p>&nbsp;</p>
<p>The <code>DELLiveSimulation_CAAAgent::GetManagedEventsList</code> method needs to specify the list of model event notifications the browser agent subscribes to (<code>olUCStr</code> argument).  This list should match the model event notifications managed in the <code>UpdateBrowsers</code> 
method:</p>
<pre  class="code">...
    ... <span  class="comment">// user specific notifications</span>
    olUCStr.Append( "DELLiveInfraRefreshNotif" );
...
</pre>
<p>&nbsp;</p>
<p>The <code>DELLiveSimulation_CAAAgent::GetCtxStatus</code> method should indicate the status 
(<code>oStatus</code> argument) of this browser agent (enabled or not) for a given context object:</p>
<pre  class="code">...
    <span  class="comment">// e.g. only display the thumbnails in MSR context</span>
    oStatus = FALSE;
    DELILiveSimContextInfo_var spCtxInfo( _crtEditor );
    if( !!spCtxInfo )
        spCtxInfo->Get_Context( iCtx );

    if( ( iCtx == DEL_LIVE_SIM_MSR_PRD_CTX ) || ( iCtx == DEL_LIVE_SIM_MSR_PPR_CTX ) )
        oStatus = TRUE;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing the DELILiveInfraStampProxy Interface</h3>
<p>The <code>DELILiveInfraStampProxy </code> interface is implemented on the objects you want to represent as thumbnails in the immersive browser tab.  In the 
CAALiveSimUseItf use case, this interface is implemented in the <code>CAAImplDELILiveInfraStampProxy</code> class.</p>
<p>The <code>CAAImplDELILiveInfraStampProxy::GetCreationInfo</code> method provides information needed to create a thumbnail object (e.g. type, name, icon, owner's path element, status, etc.)</p>
<pre class="code">...
    oName = ...; <span  class="comment">// name</span>
    oType = ...; <span  class="comment">// type</span>
    oImageName = ...; <span  class="comment">// image name</span>
    oImage = ...; <span  class="comment">// addref this image</span>
    opPathOfTbObject = ...; <span  class="comment">// owner's path element</span>
    oDoubleClickCmdHdr = "CAALiveSimToggleSampleCmdHdr"; <span  class="comment">// command launched on double-click</span>
    oSupportsDelete = FALSE; <span  class="comment">// set to TRUE if your thumbnail supports "Delete" command</span>
    oSupportsProperties = FALSE; <span  class="comment">// set to TRUE if your thumbnail supports "Properties" command</span>
...</pre>
<p>&nbsp;</p>
<p>The <code>CAAImplDELILiveInfraStampProxy::GetContextualMenu</code> method defines the commands displayed on the contextual menu of the thumbnail:</p>
<pre  class="code">...
    <span  class="comment">// Toggle Sample Status</span>
    oCmdHeaders->Append( CATUnicodeString( "CAALiveSimToggleSampleCmdHdr" ) );

    CATUnicodeString toggleTitle = CATMsgCatalog::BuildMessage( "CAALiveSimUseItfCmdHdr",
        "CAALiveSimUseItfCmdHdr.CAALiveSimToggleSampleCmdHdr.Title", NULL, 0,
        "Toggle Sample Status" );
    oCmdLabels->Append( toggleTitle );
    oCmdIcons->Append( CATUnicodeString("I_CAALiveSimToggleSample") );
...</pre>
<p>For each command you should provide the command header ID (append to <code>oCmdHeaders</code>), its label (append to <code>oCmdLabels</code>), 
and its icon (append to <code>oCmdIcons</code>). </p>
<p>&nbsp;</p>
<p>The <code>CAAImplDELILiveInfraStampProxy::OnCommandEnding</code> method will be called when a command launched from the contextual menu of the stamp ends and may 
need to dispatch notifications to refresh the immersive browser information:</p>
<pre  class="code">...
    if( ipCommandHdrID == "CAALiveSimRemoveSampleCmdHdr" )
    {
        <span  class="comment">// dispatch notification to update the browser tab</span>
        CATFrmEditor* crtEditor = CATFrmEditor::GetCurrentEditor();
        DELILiveSimContextInfo_var spCtxInfo( crtEditor );
        if( !!spCtxInfo )
        {
            ...
            spCtxInfo->Get_ASO_and_Function( spASO, spFct );

            CATIModelEvents_var spModelEvent( spASO );
            if( NULL_var != spModelEvent )
            {
                ... <span  class="comment">// create notification</span>
                spModelEvent->Dispatch( notif );
            }
        }
    }
...</pre>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Note: The notification must be dispatched on the current ASO object in order for the browser agent to be notified.</span> 
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing the commands used on the Title bar's contextual menu</h3>
<p>The commands used on the Title bar's contextual menu are regular commands (<code>CATCommand</code> or <code>CATStateCommand</code>) that follow these requirements:</p>
<ul>
		<li>take a <code>CATPathElement*</code> argument in their constructor;</li>
		<li>dispatch notifications to refresh the immersive browser (when needed).</li>
</ul>
<pre class="code">
CAALiveSimAddSampleCmd::CAALiveSimAddSampleCmd( CATPathElement* path )
    : CATCommand( "CAALiveSimAddSampleCmd", ... )
{
    ...
    <span  class="comment">// retrieve the current context object</span>
    if( path )
    {
        _pPathElem = path->Clone();
        path->InitToLeafElement();
        _spContextObject = path->NextFatherElement();   <span  class="comment">// active simulation object</span>
    }
    ...
}</pre>
<p>The <code>CATPathElement*</code> argument received by the command's 
constructor represents the path element of the current ASO. Usually it needs to 
be cached by the command to be used later on for dispatching notifications that 
will refresh the immersive browser:</p>
<pre class="code">...
    <span  class="comment">// dispatch notification to update the browser tab</span>
    CATIModelEvents_var spModelEvent( _spContextObject );
    if( NULL_var != spModelEvent )
    {
        ... <span  class="comment">// create notification</span>
        spModelEvent->Dispatch( notif );
    }

...</pre>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Note: The notification must be dispatched on the current ASO object in order for the browser agent to be notified.</span> 
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Implementing the commands used on the Thumbnail's contextual menu</h3>
<p>The commands used on a thumbnail's contextual menu are regular commands (<code>CATCommand</code> or <code>CATStateCommand</code>) that follow these requirements:</p>
<ul>
		<li>take a <code>CATBaseUnknown*</code> argument in their constructor;</li>
		<li>dispatch notifications to refresh the immersive browser (when needed).</li>
</ul>
<pre class="code">
CAALiveSimToggleSampleCmd::CAALiveSimToggleSampleCmd( CATBaseUnknown* ipBU )
    : CATCommand( "CAALiveSimToggleSampleCmd", ... )
{
    ...
    <span  class="comment">// retrieve the current thumbnail owner</span>
    _spOwner = ipBU;
    ...
}</pre>
<p>The <code>CATBaseUnknown*</code> argument received by the command's constructor represents the 
owner of the thumbnail from whose contextual menu the command 
was launched. Usually it needs to be cached by the command to be used later on 
while dispatching notifications to update the immersive browser:</p>
<pre class="code">...
    <span  class="comment">// dispatch notification to update the browser tab, use the current ASO</span>
    CATFrmEditor* crtEditor = CATFrmEditor::GetCurrentEditor();
    DELILiveSimContextInfo_var spCtxInfo( crtEditor );
    if( !!spCtxInfo && !!_spOwner )
    {
        ...
        spCtxInfo->Get_ASO_and_Function( spASO, spFct );

        CATIModelEvents_var spModelEvent( spASO );
        if( NULL_var != spModelEvent )
        {
            ...  <span  class="comment">// create notification, use the thumbnail owner <em>_spOwner->GetImpl()</em></span>
            spModelEvent->Dispatch( notif );
        }
    }
...</pre>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Note: The notification must be dispatched on the current ASO object in order for the browser agent to be notified.</span> 
		</td>
	</tr>
</table>
<p>Some commands do not dispatch notifications on their own - in that case the immersive browser can be refreshed through the <code>CAAImplDELILiveInfraStampProxy::OnCommandEnding</code> 
method, as presented in the <a href="#Step2">Implementing the DELILiveInfraStampProxy Interface</a> section above.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The CAALiveSimUseItf use case explains how to manage your own commands and thumbnails in the immersive applicative data browser in Live Simulation environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
