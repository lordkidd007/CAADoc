<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Consuming Yahoo WS</title>
    
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Consuming Yahoo WS</h1>
		
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article uses a Yahoo service to get a currency conversion rate. 
		It is an illustration of the referenced article [<a href="#References">1</a>] </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWebAppsConverter Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAWebAppsConverter Do</a></li>
				<li><a href="#How">How to Launch CAAWebAppsConverter</a></li>
				<li><a href="#Where">Where to Find the CAAWebAppsConverter Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this article you will learn how to consume a web service from a widget launched from the 3D Dashboard. This WS, not one of the <b>3D</b>EXPERIENCE platform, is provided
by Yahoo [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWebAppsConverter Use Case</h2>
<p>CAAWebAppsConverter is a use case of CAAWebAppsJS.edu framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWebAppsConverter Do</h3>
<p>CAAWebAppsConverter is a widget App converting euros to US dollars.</p>
<table>
 <caption><a name="Fig.1">Fig.1</a>Widget UI</caption>
	<tr>
		<td>
		<img alt="Widget UI" src="images/CAAWebAppsUcConverter.png"/></td>
	</tr>
</table>
<ul>
<li>Enter an amount in the editor</li>
<li>Push the "Dollar" button</li>
<li>The conversion shows up at the bottom</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWebAppsConverter</h3>
<p>To launch CAAWebAppsConverter, you will need to set up the build time environment, then compile CAAWebAppsConverter along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">3</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWebAppsConverter Code</h3>
<p>The CAAWebAppsConverter use case is made of several file located in the  framework:</p>
    <ul>
        <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsConverter.mweb\src\CAAWebAppsConverter.html</code>, the widget html web page</li>
		<li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsConverter.mweb\src\CAAWebAppsConverter.css</code>, the style sheet file</li>
		<li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsConverter.mweb\src\assets\Dollar.png</code>, the dollar button</li>
    </ul>
  <p>where InstallRootFolder [<a href="#References">3</a>] is the folder where the API CD-ROM is installed.</p> 
 <p>This article is only focused on the html file contents. For more details about the UI aspects,  please read the referenced article "About DOM Elements" [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four main steps:</p>
 <ul>
 <li><a href="#Step1">Requiring AMD Module</a></li>
 <li><a href="#Step2">Putting in place the UI</a></li>
 <li><a href="#Step3">Getting the Conversion Rate</a></li>
 <li><a href="#Step4">Displaying the Result</a></li>
 </ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Requiring AMD Module</h3>
<p>The widget application uses one of the functions exported by  WAFData AMD module [<a href="#References">4</a>].</p>
<pre class="code">
&lt;script &gt;
   /* global widget,require */	
   <b>require(['DS/WAFData/WAFData']</b>, function (WAFData) {
      'use strict';
   ...	
   });
&lt;/script&gt;   
</pre>
<p><code>WAFData</code>, the argument of the function is used to represent the element exported by the WAFData AMD module.</p>
  <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Putting in place the UI</h3>
<p>The UI is put into place in the onLoad callback.</p>
<pre class="code">
   ...
   onLoad: function() {	
        var html = "&lt;div &gt;" +
                        "&lt;label class='euroLbl' &gt;Euros&lt;/label&gt; &lt;input class='amountIpt' type='number' /&gt;" + 
                        "&lt;button class='convertBtn'&gt;&lt;/button&gt;" +  "&lt;br&gt;" +"&lt;br&gt;" +
                        "&lt;label&gt;USD: &lt;/label&gt;" +
                        "&lt;label class='amountResultLbl'&gt;&lt;/label&gt;" + 
                    "&lt;/div&gt;";
						
        <b>widget.body.innerHTML=html ;</b>
... 
</pre>
<p>Once the UI is created, a callback is set to be informed when the end-user clicks on the "Convert To" button. </p>
<pre class="code">
   ...
    var button = widget.body.querySelector('.convertBtn');
    button.addEventListener(<b>"click"</b>, function () {
       <b>myWidget.onConvertClick();</b>
    } );
... 
</pre>
<p>Thanks to the classname, <code>convertBtn</code>, we can get the button from the DOM. Therefore it is possible to add an event listener. 
When the end-user pushes the button,
 the <code>click</code> event is triggered, and we catch it thanks to the <i>addEventListener</i> function.</p>
<p>The code to execute when the button is pushed has been writen in another function (<code>onConvertClick</code>), for didactic purposes.</p>

  <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Getting the Conversion Rate</h3>
<p>The <code>onConvertClick</code> method  calls the Yahoo WS:</p>
<pre class="code">
   ...
    onConvertClick: function() {
        var pathWS="http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20" ;
        pathWS= pathWS + "where%20url%3D'http%3A%2F%2Fwww.webservicex.net%2F" ;
        pathWS= pathWS + "CurrencyConvertor.asmx%2FConversionRate%3FFromCurrency%3DEUR%26ToCurrency%3DUSD'&format=json&diagnostics=true";
		                 
        <b>WAFData.proxifiedRequest</b>(pathWS, {
          method:'GET',
          onComplete: function(<b>data</b>) {
              //See <a href="#Step4">Displaying the Result</a> step
          },
          onFailure: function(error) { 
             console.warn('Failure:', error) ;
          }
        });
}						
</pre>
<p>The <i>proxifiedRequest</i> function exported by the <a href="#" onclick="CAAlink('JS', 'WebAppsFoundation', 'WAFData', 'WAFData'); return false;">
DS/WAFData/WAFData</a>  module is used because the WS is not hosted by the <b>3D</b>EXPERIENCE platform, and we have to perform a cross domain 
request. Indeed, the widget launched from
the 3D Dashboard belongs to this domain, not the Yahoo one.</p>
<p>The request is asynchronous, and when the response will be available, the code of the "onComplete" function will be executed. This function has the arguments associated with the WS.
 <code>data</code> value is the argument of the "onComplete" callback function  </p> 
 <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
 
<h3><a name="Step4"></a>Displaying the Result</h3>
<p>First we get the amount from the editor. </p>
<pre class="code">
   //Get the amount from the editor  							 
   var inputText=widget.body.querySelector('.amountIpt');
   var amountT=inputText.value ;
   ...
</pre>
<p>Then we have to retrieve the conversion rate. This information is returned with the WS response which is a JSON structure:</p>
<pre class="code">
{<b>"query"</b>:
         {"count":1,
          "created":"2014-09-08T08:07:50Z",
          "lang":"en-US",
          "diagnostics": 
                      {"publiclyCallable":"true",
                        "url":
                              {"execution-start-time":"0",
                                "execution-stop-time":"548",
                                "execution-time":"548",
                                "content":http://www.webservicex.net/CurrencyConvertor.asmx/ConversionRate?FromCurrency=EUR&ToCurrency=USD
                              },
                         "user-time":"549",
                         "service-time":"548",
                        "build-version":"0.2.2666"
                         },
            <b>"results"</b>: 
                   {<b>"double":</b>
                           {"xmlns":"http://www.webserviceX.NET/",
                            <b>"content":"1.2944"</b>}}
               }
}
</pre>
<p>But we have to transform <code>data</code> which is returned as a string instead of a JSON structure. It is possible using the JSON 
library which is by default available to any kind of browser.</p>
<pre class="code">
   ...
   //var rateCurrency = data.query.results.double.content; 
   var dataAsJSON = <b>JSON.parse</b>(data);
   var rateCurrency = dataAsJSON.query.results.double.content; 
   ...
</pre>
<p><code>dataAsJSON</code> being a JSON structure, it can be handled easily to navigate on the  key/value structure.</p>
<p>Finally, we compute the conversion, and display the result in the widget's body:</p>	
<pre class="code">
   ...							 
   //Compute the conversion
   var amountResult = amountT * rateCurrency;						
   //Modify the Label 												   
   var labelResult=widget.body.querySelector('.amountResultLbl');
   labelResult.innerHTML= amountResult ;					   
</pre>
 <script type="text/javascript">insertLinkToTop();</script>
 <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to call the API, to manage the asynchronous result, and how to decode the result. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
    
	<tr>
		<td>[1]</td>
		<td><a href="CAAWebAppsTaDataAccess.htm">About Service Data Access</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="#" onclick="javascript:CAAlinkUrl('https://developer.yahoo.com/yql/');return false;">Yahoo Query Language</a></td>
	</tr>
	
	
	<tr>
		<td>[3]</td>
		<td>Building and Launching a Web App Use Case</a></td>
	</tr>
    <tr>
		<td>[4]</td>
		<td><a href="../CAAWebAppsJSGuides/CAAWebAppsTaAMDConcepts.htm">AMD Concepts</a></td>
	</tr>
    <tr>
		<td>[5]</td>
		<td><a href="../CAAWebAppsJS/CAAWebAppsTaDOMElement.htm">About DOM Elements</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [August 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
