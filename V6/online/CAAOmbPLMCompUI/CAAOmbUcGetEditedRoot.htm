<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieving the Edited Root PLM Components</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving the Edited Root PLM Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how you can retrieve PLM Components which are roots 
		of authoring editor. Some editors, like VPLM edits only one Root PLM Component, 
		but others like RFLP editor can edit more.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAOmbRootEdtPLMCompCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAOmbRootEdtPLMCompCmd Do</a></li>
					<li><a href="#How">How to Launch CAAOmbRootEdtPLMCompCmd</a></li>
					<li><a href="#Where">Where to Find the CAAOmbRootEdtPLMCompCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to retrieve PLM Components which are 
roots of authoring editor. Some editors, like VPLM editor edits only one Root, but 
others like RFLP editor can edit more. The best way is to use the <code>GetEditedRootPLMComponents</code> 
method of <em>CATPLMComponentInterfacesServices</em>. This use case shows examples 
depending on the current editor.</p>
<p>For your information, the result for a none authoring editor is not valid. Indeed, 
the <code>GetEditedRootPLMComponents</code> method returns something for the Navigation 
editor, but the result must not been considered as valid.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOmbRootEdtPLMCompCmd Use Case</h2>
<p>CAAOmbRootEdtPLMCompCmd is a use case of the CAAObjectModelerBase.edu framework 
that illustrates CATPLMComponentInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAOmbRootEdtPLMCompCmd Do</h3>
<p>The <code>CAAOmbRootEdtPLMCompCmd</code> use case is fundamentally an interactive 
command to display the root PLM Component of an editor when one of its window is 
activated. The scenario by pictures is as follows.</p>
<p>This command is added to the &quot;<strong>CAA PLM Persistency</strong>&quot; 
toolbar a part of an Add-In to the <strong>General Workshop</strong> within
<strong>CATIA</strong>. The <strong>Tools --&gt; Customize --&gt; Toolbar</strong> 
tab lists that toolbar, as seen in [<a href="#Fig1">Fig.1</a>] below.</p>
<table>
	<caption><a name="Fig1">Fig.1</a>: Tools --&gt; Customize --&gt;Toolbar UI</caption>
	<tr>
		<td>
		<img alt="Customize Dialog Box" height="416" src="images/CAAPstListPLMComponent_Tools_Cust_Toolbar.jpg" width="467"/>
		</td>
	</tr>
</table>
<p>The &quot;<strong>CAA PLM Persistency</strong>&quot; toolbar is as seen in the 
[<a href="#Fig2">Fig.2</a>] below and the icon
<img alt="Icon" height="28" src="images/CAAOmbGetEditedRoot_icon.jpg" width="23"/> 
represents the newly added &quot;<strong>Retrieving Root Edited PLM Components in 
current window</strong>&quot; command, an output of this use case.</p>
<table>
	<caption><a name="Fig2">Fig.2</a>: Toolbar &amp; Command</caption>
	<tr>
		<td>
		<img alt="Toolbar" height="57" src="images/CAAOmbGetEditedRoot_Toolbar.jpg" width="101"/></td>
	</tr>
</table>
<p>Click the command, a such dialog box appears:</p>
<table>
	<caption>Dialog Box</caption>
	<tr>
		<td>
		<img alt="Dialog Box" height="271" src="images/CAAOmbGetEditedRoot_DialogBox.jpg" width="244"/></td>
	</tr>
</table>
<p>Now we will open different editors.</p>
<p>First open an existing PLM Product Reference, you will have such result (one 
root):</p>
<table>
	<caption>Result with VPLM Editor</caption>
	<tr>
		<td>
		<img alt="Result with VPLM Editor" height="323" src="images/CAAOmbGetEditedRoot_VPLM.jpg" width="279"/></td>
	</tr>
</table>
<p>Then open an RFLP editor, in this insert existing reference. after that insert 
new Function.</p>
<p>Then you switch to VPLM editor already opened and then switch back to RFLP editor 
now you will have such result (two roots):</p>
<table>
	<caption>Result with RFLP Editor</caption>
	<tr>
		<td>
		<img alt="Result with RFLP Editor" height="418" src="images/CAAOmbGetEditedRoot_RFLP.jpg" width="254"/></td>
	</tr>
</table>
<p>Then open a 3D Shape, you will have such result: (one root, the PLM Rep ref)</p>
<table>
	<caption>Result with 3D Shape Editor</caption>
	<tr>
		<td>
		<img alt="Result with 3D Shape Editor" height="394" src="images/CAAOmbGetEditedRoot_Part.jpg" width="257"/></td>
	</tr>
</table>
<p>Then make a query, the Query/Result window appears. Since a query panel is not 
an editor, there are no root components for editing and hence the list within the 
dialog box is empty. The Base Window name displayed within the dialog box is actually 
the search criteria input by the user for launching a query in the underlying database.</p>
<table>
	<caption>Result Query Editor</caption>
	<tr>
		<td>
		<img alt="Result Query Editor" height="342" src="images/CAAOmbGetEditedRoot_Query.jpg" width="272"/></td>
	</tr>
</table>
<p>The Open in Navigation a PLM component. In this case even if there is a result, 
the method is not considered as valid.</p>
<p>For your information, the dialog box is refreshed when a window is activated, 
so you can re-displayed the root(s) of an editor, by selecting one of its window.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAOmbRootEdtPLMCompCmd</h3>
<p>To launch the use case , you will need to set up the build time environment, 
then compile <code>CAAOmbRootEdtPLMCompCmd</code> along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">4</a>]. 
Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Connect</strong> to the database.</li>
	<li>On the <strong>Tools</strong> menu click <strong>Customize</strong> and 
		check that the <strong>CAA PLM Persistency</strong> toolbar is existing 
		(See <a href="#Addin">Addin Access</a> section), as shown in
		<a href="#Fig1">Fig.1</a> above. User can set the visibility of the created 
		toolbar in the <strong>View</strong>-&gt;<strong>Toolbars</strong> option.</li>
</ul>
<p>The<a href="#What"> What Does CAAOmbRootEdtPLMCompCmd Do</a> section provides 
further details on the steps ahead.</p>
<p><a name="Addin"></a>Add-in Access</p>
<p>The Add-In to the General workshop within CATIA, is available thanks to a data 
extension of the <em>CAAOmbGeneralWksAddin</em> component. This necessitates the 
following entries in the .dico file.</p>
<pre class="code">...
#CAAOmbGeneralWksAddin CATIWorkbenchAddin libCAAOmbGeneralWksAddin
#CAAOmbGeneralWksAddin CATIAfrGeneralWksAddin libCAAOmbGeneralWksAddin
...</pre>
<p>Before launching CATIA, uncomment the above lines in the CAAObjectModelerBase.edu.dico 
file. These primarily indicate that the add-in is fundamentally a <em>CATIWorkbenchAddin</em> 
and a <em>CATIAfrGeneralWksAddin</em> implementation residing in the <code>CAAOmbGeneralWksAddin</code> 
shared lib.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAOmbRootEdtPLMCompCmd Code</h3>
<p>The <code>CAAOmbRootEdtPLMCompCmd</code> use case is made of several classes 
located in the CAAOmbCommands.m module of the CAAObjectModelerBase.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\CAAOmbCommands.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li><strong>CAAOmbRootEdtPLMCompCmd.cpp</strong> is the Dialog-box based command 
		implementation, the heart of this use case.</li>
	<li>CAAOmbRootEdtPLMCompHdrCmd.cpp is the command launched from the header command, 
		and launching CAAOmbRootEdtPLMCompCmd dialog command.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<p><code>InstallRootFolder\CAADoc\CAAObjectModelerBase.edu\CAAOmbGeneralWksAddin.m</code></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in this dialog command</p>
<ol>
	<li><a href="#Step1">Adding a Callback</a></li>
	<li><a href="#Step2">Retrieving the Current Editor</a></li>
	<li><a href="#Step3">Retrieving the Roots</a></li>
	<li><a href="#Step4">Displaying the Roots</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Adding a Callback</h3>
<p>This step is not the core of the use case, nevertheless, it can be interesting 
to show how we have processed to be awaked when a window is activated.</p>
<p>Here is an extract of the <code>Build</code> method of the <em>CAAOmbRootEdtPLMCompCmd</em> 
command class.</p>
<pre class="code">...
CATFrmLayout * pCurrentLayout= CATFrmLayout::<strong>GetCurrentLayout</strong>();
_WindowActivatedCB = ::<strong>AddCallback</strong>(this,
                                   pCurrentLayout, 
			        CATFrmWindow::WINDOW_ACTIVATED(),
		                 (CATSubscriberMethod) &amp; CAAOmbRootEdtPLMCompCmd::WindowActivatedCB, NULL);
...</pre>
<p>All windows are managed by an unique object, <code>pCurrentLayout</code>. This 
singleton [<a href="#References">2</a>] is returned by the <code>GetCurrentLayout</code> 
method of the <em>CATFrmLayout</em> class. We set a callback to be awaked when a 
window, a <em>CATFrmWindow</em> class instance, is activated (sent WINDOW_ACTIVATED 
event).</p>
<p>In the <em>CAAOmbRootEdtPLMCompCmd</em> destructor, the callback is removed like 
that</p>
<pre class="code">...
if (0 != _WindowActivatedCB)
{
        ::<strong>RemoveCallback</strong>(this,CATFrmLayout::GetCurrentLayout(),_WindowActivatedCB) ;
        _WindowActivatedCB = 0 ;
}
...</pre>
<p>Now, we describe the contents of the <code>WindowActivatedCB</code> method of 
the <em>CAAOmbRootEdtPLMCompCmd</em> command.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Current Editor</h3>
<p>First we retrieve the current window, always using the unique object managing 
all the windows in session.</p>
<pre class="code">...
CATFrmLayout * pCurrentLayout= CATFrmLayout::GetCurrentLayout();
CATFrmWindow * pCurrentWindow = NULL ;
if ( NULL != pCurrentLayout )
{
   // Retrieve the current window
   pCurrentWindow = pCurrentLayout-&gt;<strong>GetCurrentWindow</strong>();
}
...</pre>
<p>Then we use the method <code>GetEditor</code> method of the <em>CATFrmWindow</em> 
class.</p>
<pre class="code">...
CATFrmEditor* pEditor = NULL ;
if ( NULL != pCurrentWindow)
{
  pEditor = pCurrentWindow-&gt;<strong>GetEditor</strong>();
}
...</pre>
<p>Nevertheless, generally in your code you will not retrieve the editor by this 
mean. Usually when you are inside a command, you use:</p>
<ul>
	<li><code>GetEditor</code> method of the state command ( strongly recommended 
		to use it for a state command)</li>
	<li><code>GetCurrentEditor</code> otherwise. But attention, this method must 
		only be called in command's constructor</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Roots</h3>
<pre class="code">...
CATListPtrCATIPLMComponent ListEditedRoot ;
CATPLMComponentInterfacesServices::<strong>GetEditedRootPLMComponents</strong>(pEditor,ListEditedRoot) ;
...</pre>
<p>You use the <code>GtEditedRootPLMComponents</code> method of <em>CATPLMComponentInterfacesServices</em>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying the Roots</h3>
<pre class="code">...
for (int i= 1 ; i&lt;= ListEditedRoot.Size(); i++ )
{
    CATIPLMComponent* pPLMCompOnRoot = ListEditedRoot[i];
    if (NULL != pPLMCompOnRoot)
    {
      CATIAlias_var Nameroot= pPLMCompOnRoot;
      if(NULL_var != Nameroot)
			   {
      CATUnicodeString strIdentifierRoot = Nameroot-&gt;GetAlias();
      ...
      pPLMCompOnRoot-&gt;<strong>Release</strong>(); pPLMCompOnRoot = NULL ;
    }
}
ListEditedRoot.<strong>RemoveAll</strong>();

...</pre>
<p>Note that ListEditedRoot is a list <em>CATIPLMComponent</em>, each element of 
the list must be, as usual, released.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case is a demonstrator of the <code>GtEditedRootPLMComponents</code> 
method of <em>CATPLMComponentInterfacesServices</em>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Application Frame Layout</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
