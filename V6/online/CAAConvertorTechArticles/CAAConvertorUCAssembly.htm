<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
	<head>
		<title>Conversion of Assembly Data</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Conversion of Assembly Data</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This article describes an example of a converter 
					implementation, using Format Conversion services APIs.</p>
				<ul>
							<li><A href="#Learn">What you will learn 
                                with this Use Case</A>
							<li><a href="#UseCase">The 
                                CAAAssemblyConvertor Use Case</a>
							<ul type="disc">
								<li><a href="#What">What does 
								CAAAssemblyConvertor Do</a>
								<li><a href="#How">How to Launch 
								CAAAssemblyConvertor
								</a>
								<li><a href="#Where">Where to find the 
								CAAAssemblyConvertor Code</a>
								</li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A>
							</li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What you will learn with this Use Case</h2>
<p>This use case is intended to show you how to implement a native APP format Reader. 
The scenario addresses Importing a xCAD file, converting its Component files 
Geometry data. cgr files are generated when Geometry data from component files 
is converted whereas Product References are stored in database when Assembly 
file is converted </p>
<p>It exposes main domains of Mechanical CAD: Product Structure 
Representations. <strong>CATIExchangeProduct, 
CATIExchangeTessellatedRepresentation&nbsp; </strong>
interface being the most important one</p>
<p>The <strong>CATIExchangeTessellatedRepresentation </strong>provides a view on 
the document as a Tessellated representation and retrieves all the Tessellated 
information. </p>
<p>It is intended to support the conversions of scene graphs, essentially to 
retrieve the graphic representation of parts, as an alternate representation of 
the Boundary Representation. The major application will be the Digital Mock-up, 
in graphic mode.</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAAAssemblyConvertor
        Use Case</h2>
		<p>CAAAssemblyConvertor is an use case of the CAAVIConvertors.edu 
		framework that illustrates Format Conversion Services capabilities for 
		importing external CAD data in V6.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAAAssemblyConvertor
        Do</h3>
<p>CAAAssemblyConvertor simulates an implementation of a MyXCAD Reader, 
to be used in V6 file based Import scenarios. This Reader is a set of classes implementing 
the Convertor Services Interfaces. Using these implementation, we can import 
Assembly Structure from a .CAAasm extension file.</p>

<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAAAssemblyConvertor 
		Use-case</h3>
		<p>To launch <code>CAAAssemblyConvertor</code>, you will need to set up the build time environment, 
			then compile <code>CAAAssemblyConvertor<b> </b></code>along 
		with its prerequisites, set up the run time environment, and then launch 
		the V6. </p>
<p>This Use-case is made up of a DLL. You have to launch it using CATIA 
(3DEXPERIENCE.exe)</p>
<p>Then please refer to the article How to launch Convertor Use-case [<a href="#References">1</a>]</p>
<p>The file to be selected while launching the Use-case is a .CAAcmp file which 
contains co-ordinates of points. The name of the file <strong>xApp_Assembly.CAAasm</strong></p>
<p>At last when you click on Open, the Convertors code is called and our DLL 
gets loaded. The flow of the execution code is explained below in this article.</p>
<script type="text/javascript">insertLinkToTop();</script> 

<h3><a name="Where"></a>Where to Find the CAAAssemblyConvertor
        Code</h3>
<p>The <code>CAAAssemblyConvertor<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAVIConvertors.edu\CAAAssemblyConvertor.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
  <li>Implementation Class Diagram </li>
	<li>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName depending upon the LATE TYPE&nbsp; </li>
	<li>Initializing the Input Document and retrieving the Type of 
	Representation</li>
	<li>Implementation of Interfaces</li>
</ol>

	 
<script type="text/javascript">insertLinkToTop();</script>

<h3>Implementation Class Diagram </h3>
<p>The Fig. 1. illustrates the Implementation classes implementing the corresponding Interfaces. So these are the minimum required implementation to get the Product Structure.</p>
<p>Refer to the Basic use-cases [<a href="#References">3</a>]</p>
<table>
	<caption>Fig. 1. Implementation class details</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAV6AssmblyConvImpl.jpg" width="904" height="525"></td>
	</tr>
</table>


<script type="text/javascript">insertLinkToTop();</script> 
<h3>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName macro depending upon the LATE TYPE </h3>
<p>As the user selects the xCAD file to be Imported and clicks on OPEN button, 
V6 Writer (provided by DS) searches for the component with specific Late-Type made from the combination 
of the APPFormat and the ConvertorID. In this case, the file extension that we 
wish to open is .CAAasm. This extension is associated with the APPFormat '<em>MyXCAD</em>' 
and the ConvertorID is '<em>CAAVI'</em>.</p>
<p>The corresponding Late-Type is <code> XCAD_MyXCAD_CAAVIAss_InputDocument</code>. 
This should be the Late-Type for the macro. And the class to be instantiated 
should be the second argument of the macro</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3>Initializing the Input Document and retrieving the Type of Representation</h3>
<p>Once the Input document object is created by the Factory, a series of 
callback starts from the V6 Writer. These callbacks have to be answered by V6 
Reader implemented by CAA developer. Depending upon these answers, V6 Writer 
converts the geometry data.</p>
<p>Basically the callback APIs are for 2 purposes</p>
<ol>
	<li>To get the information on Assembly Structure or Reference and Representation nodes</li>
	<li>To get the absolute geometry data incase the node is Representation node</li>
</ol>
<p>For the first type of callbacks, the following two APIs are very important</p>
<ul>
	<li><strong>Initialize():</strong> To get the path of the first file 
	selected interactively. If the first file is of the type .CAAasm i.e. 
	Assembly file, then this API will also help to store and retrieve the 
	subsequent file paths from this Assembly file.</li>
	<li><strong>GetRepresentation():</strong>&nbsp; Depending upon the file 
	type, it will call the further implementation classes</li>
</ul>

	 
<h3>Implementation of Interfaces</h3>
<p>If the selected file is an Assembly file i.e. of extension .CAAasm then we 
call the implementations of the above mentioned interfaces. The below figure 
gives a complete understanding of the Implementation classes. </p>
<table>
	<caption>Fig.2. Implementation classes for Product Structure conversion</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAV6AssConvClasses.jpg" width="1193" height="313"></td>
	</tr>
</table>

<p>It shows the minimum methods that must be implemented in each of the 
classes and the result of the Implementation.</p>
<p>Here, when the call goes to the CAAAssemblyExchangeProdStructRep (Step 1) we 
should retrieve the Root from the CAAasm file through the method GetRootProducts().</p>
<p>If there is valid root present in the CAAasm file, we create 
CAAAssemblyExchangeProduct class object to retrieve other information like 
Attributes and InstanceList as shown in Step 2.</p>
<p>If Instances are aggregated in under the Root as shown in above figure <em>
xApp_Points</em>, <em>xApp_Lines</em> &amp; <em>xApp_PSAssemblyRoot</em>, we create that many number of CAAAssemblyExchangeProdInstance class objects as shown in Step 3. Then we make these 
Instances as the ReferenceProduct and retrieve its Attributes and InstanceList 
(if any) as shown in Step 4. This cycle of Step 3 and Step 4 continues till we 
navigate to the leaf Product Reference or Representation. If there are no instances aggregated under the Reference aggregated then the DS translators call the appropriate methods 
to generate Product Structure</p>
<p>If there are Representations aggregated under any Reference node as shown in 
above figure <em>xApp_Cmp3</em> &amp; <em>xApp_Cmp</em>, then the call from the 
CAAAssemblyExchangeProduct goes to the CAAAssemblyExchangeInputDoc class and 
then to CAAAssemblyExchangeTessRep.</p>



<p>If the Representation type is Tessellated, then the 
CATIExchangeTessellatedRepresentation implementation class object is created. 
The CATIExchangeTessellatedRepresentation provides a view on the document as a 
tessellated representation and retrieves all the Tessellated information. All these APIs get the information from the 
document which supports the conversion of 'Scene Graphs', essentially to 
retrieve the graphic representation of parts. Refer to article [<a href="#References">2</a>] for info on 
Scene graph</p>
<ul>
	<li><strong>GetRootNodesCount()</strong>, <strong>GetRootNode()</strong>,
	<strong>GetChildCount(), GetChild(), GetNodeType(), GetGPType() -</strong> 
	All these APIs navigate through the Product Structure to get the exact 
	number of geometrical elements present in a .CAAcmp file. They create all 
	these geometrical elements and display in 3D Viewer.</li>
</ul>
<p>First we pass the RootNodes count to the Writer which is 1, then we pass that 
Root node ID through GetRootNode(). Then we count the number of child nodes for 
the root node. This includes the number of&nbsp; element tags from XML file 
.CAAcmp i.e. Point element tags &lt;PointRef&gt; present in the file. Then we pass the 
NodeIDs for all these Child nodes through GetChild() method.</p>
<p>After this, we have to specify/send the NodeType for every child node. The types 
of node present are NOD_ContainerNode, NOD_SurfacicNode, NOD_SolidNode, NOD_CustomNode, NOD_CoordinateSystem. 
We send the NOD_ContainerNode</p>
<p>Then we have to specify the GP Type (Graphical Presentation) if the node is 
of the type 'NOD_GP'. The GP Types are GP_Point, GP_Line, GP_Plane, GP_Cylinder, GP_Cone, GP_Sphere, GP_Face, 
GP_Edge. For this use-case we send the GP Type as GP_Point and GP_Line</p>
<p>Then we have to implement the corresponding API which takes the geometrical 
co-ordinates for the corresponding GP type. e.g. GetPointData() GetPolyLineData() in our use-cases</p>
<p>At last a cgr file is saved into the local directory. The path of it is C:/Users/&lt;user&gt;/AppData/Local/DassaultSystemes/CATTemp/Temp01_TT.cgr</p>

	 
<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case demonstrates the capability of the MultiCAD Convertor Service to 
convert a .CAAasm file to Product Structure &amp; Tessellated Geometry and generate a cgr 
for geometry parts</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td >[1]</td>
				<td ><a href="CAAConvertorUCHowToLaunch.htm">How to Launch the 
				Convertor Use Case</a></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="CAAConvertorTessTechArticle.htm">MultiCAD Import: Tessellated Geometry Conversion&nbsp;</a></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="CAAConvertorTechArticle.htm">MultiCAD Convertors: File based Import in CATIA V6&nbsp;</a></td>
			</tr>


			
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Feb 2013]&nbsp;&nbsp; </td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
	</body>
</html>


