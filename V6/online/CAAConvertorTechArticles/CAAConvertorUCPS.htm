<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
	<head>
		<title>Conversion of Product Structure Data Use-case</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Conversion of Product Structure Data</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This article describes an example of a converter 
					implementation, using Format Conversion services APIs.</p>
				<ul>
							<li><A href="#Learn">What you will learn 
                                with this Use Case</A>
							<li><a href="#UseCase">The 
                                CAAProductStructureConvertor Use Case</a>
							<ul type="disc">
								<li><a href="#What">What does 
								CAAProductStructureConvertor Do</a>
								<li><a href="#How">How to Launch 
								CAAProductStructureConvertor
								</a>
								<li><a href="#Where">Where to find the 
								CAAProductStructureConvertor Code</a>
								</li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A>
							</li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What you will learn with this Use Case</h2>
<p>This use case is intended to show you how to implement a native APP format Reader. 
The scenario addresses Importing a xCAD file, converting its Product Structure data 
and saving the References in database.</p>
<p>It exposes main domains of Mechanical CAD: Product Structure 
Representations. <strong>CATIExchangeProduct </strong>
interface being the most important one</p>
<p>The <strong>CATIExchangeTessellatedRepresentation </strong>provides a view on 
the document as a Tessellated representation and retrieves all the Tessellated 
information. </p>
<p>It is intended to support the conversions of scene graphs, essentially to 
retrieve the graphic representation of parts, as an alternate representation of 
the Boundary Representation. The major application will be the Digital Mock-up, 
in graphic mode.</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAAProductStructureConvertor
        Use Case</h2>
		<p>CAAProductStructureConvertor is an use case of the CAAVIConvertors.edu 
		framework that illustrates Format Conversion Services capabilities for 
		importing external CAD data in V6.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAAProductStructureConvertor
        Do</h3>
<p>CAAProductStructureConvertor simulates an implementation of a MyXCAD Reader, 
to be used in V6 import scenarios. This Reader is a set of classes implementing 
the Convertor Services Interfaces. Using these implementation, we can import 
geometry data from a .CAAcmp extension file.</p>

<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAAProductStructureConvertor 
		Use-case</h3>
		<p>To launch <code>CAAProductStructureConvertor</code>, you will need to set up the build time environment, 
			then compile <code>CAAProductStructureConvertor<b> </b></code>along 
		with its prerequisites, set up the run time environment, and then launch 
		the V6. </p>
<p>This Use-case is made up of a DLL. You have to launch it using CATIA 
(3DEXPERIENCE.exe)</p>
<p>Then please refer to the article How to launch Convertor Use-case [<a href="#References">1</a>]</p>
<p>The file to be selected while launching the Use-case is a .CAAcmp file which 
contains co-ordinates of points. The name of the file <strong>xApp_PSAssemblyRoot.CAAasm 
or xApp_Assembly.CAAasm</strong></p>
<p>At last when you click on Open, the Convertors code is called and our DLL 
gets loaded. The flow of the execution code is explained below in this article.</p>
<script type="text/javascript">insertLinkToTop();</script> 

<h3><a name="Where"></a>Where to Find the CAAProductStructureConvertor
        Code</h3>
<p>The <code>CAAProductStructureConvertor<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAVIConvertors.edu\CAAProductStructureConvertor.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
  <li>Implementation Class Diagram </li>
	<li>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName depending upon the LATE TYPE&nbsp; </li>
	<li>Initializing the Input Document and retrieving the Type of 
	Representation</li>
	<li>Implementation of CATIExchangeProductRepresentation, CATIExchangeProduct, CATIExchangeProductInstance&nbsp; 
	Interfaces</li>
</ol>

	 
<p>&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3> Implementation Class Diagram </h3>
<p> The Fig. 1. illustrates the Implementation classes implementing the corresponding Interfaces.
 So these are the minimum required implementation to get the Product Structure.&nbsp;</p>
<table>
	<caption>Fig. 1. Implementation class details</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAV6PSConvImpl.jpg" width="805" height="436"></td>
	</tr>
</table>
<p>&nbsp;</p>

<table class="fill">
	<tr>
		<th>INTERFACE</th>
		<th>Function/IP Exposed</th>
	</tr>
	<tr>
		<td>CATIExchangeInputDocument</td>
		<td>File Access, Open, Document links</td>
	</tr>
	<tr>
		<td>CATIExchangeProductRepresentation</td>
		<td>Access to Root Product Reference</td>
	</tr>
	<tr>
		<td>CATIExchangeProduct</td>
		<td>Access to Product and its number of Instance</td>
	</tr>
	<tr>
		<td>CATIExchangeProductInstance</td>
		<td>Access to Product Instances and their Instance (if any)</td>
	</tr>

	<tr>
		<td>CATIExchangeRepresentation</td>
		<td>Access to Representation Attributes</td>
	</tr>


</table>



<script type="text/javascript">insertLinkToTop();</script> 
<h3>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName depending upon the LATE TYPE </h3>
<p>As the user selects the xCAD file to be Imported and clicks on OPEN button, 
V6 Writer (provided by DS) searches for the component with specific Late-Type made from the combination 
of the APPFormat and the ConvertorID. In this case, the file extension that we 
wish to open is .CAAcmp. This extension is associated with the APPFormat '<em>MyXCAD</em>' 
and the ConvertorID is '<em>CAAVIPS'</em>.</p>
<p>The corresponding Late-Type is <code> XCAD_MyXCAD_CAAVIPS_InputDocument</code>. 
This should be the Late-Type input for the macro. And the class to be instantiated 
should be the second argument of the macro</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3>Initializing the Input Document and retrieving the Type of Representation</h3>
<p>Once the Input document object is created by the Factory, a series of 
callback starts from the V6 Writer. These callbacks have to be answered by V6 
Reader implemented by CAA developer. Depending upon these answers, V6 Writer 
converts the geometry data.</p>
<p>Basically the callback APIs are for 2 purposes</p>
<ol>
	<li>To get the information on Assembly/Product Structure OR Reference and Representation nodes</li>
	<li>To get the absolute geometry data incase the node is Representation node</li>
</ol>
<p>For the first type of callbacks, the following two APIs are very important</p>
<ul>
	<li><strong>Initialize():</strong> To get the path of the first file 
	selected interactively. If the first file is of the type .CAAasm i.e. 
	Assembly file, then this API will also help to store and retrieve the 
	subsequent file paths from this Assembly file.</li>
	<li><strong>GetRepresentation():</strong>&nbsp; Depending upon the file 
	type, it will call the further implementation classes</li>
</ul>

	 
<h3>Implementation of CATIExchangeProductRepresentation, CATIExchangeProduct, CATIExchangeProductInstance Interfaces</h3>
<p>If the selected file is an Assembly file i.e. of extension .CAAasm then we 
call the implementations of the above mentioned interfaces. The below figure 
gives a complete understanding of the Implementation classes. </p>
<table>
	<caption>Fig.2. Implementation classes for Product Structure conversion</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAV6PSConvClasses.jpg" width="1160" height="308"></td>
	</tr>
</table>

	 
<p>It shows the minimum methods that must be implemented in each of the 
classes and the result of the Implementation.</p>
<p>Here, when the call goes to the CAAPSConvExchangeProdStructRep (Step 1) we 
should retrieve the Root from the CAAasm file through the method GetRootProducts().</p>
<p>If there is valid root present in the CAAasm file, we create 
CAAPSConvExchangeProduct class object to retrieve other information like 
Attributes and InstanceList as shown in Step 2.</p>
<p>If Instances are aggregated in under the Root, we create that many number of 
CAAPSConvExchangeProdInstance class objects as shown in Step 3. Then we make the 
Instance are the ReferenceProduct and retrieve its Attributes and InstanceList 
(if any) as shown in Step 4. This cycle of Step 3 and Step 4 continues till we 
navigate to the leaf Product Reference or Representation </p>
<p>If there are no instances aggregated under the Reference or if there is a 
Representation aggregated then the DS translators call the appropriate methods 
to generate Product Structure</p>
<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case demonstrates the capability of the MultiCAD Convertor Service to 
convert a .CAAasm file to convert the Product Structure</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td >[1]</td>
				<td ><a href="CAAConvertorUCHowToLaunch.htm">How to Launch the 
				Convertor Use Case</a></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="CAAConvertorTessTechArticle.htm">MultiCAD Import: Product Structure Conversion&nbsp;</a></td>
			</tr>
			
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Feb 2013]&nbsp;&nbsp; </td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
	</body>
</html>


