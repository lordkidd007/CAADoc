<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
	<head>
		<title>Exact Geometry Conversion</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Exact Geometry Conversion</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This article describes an example of a converter 
					implementation, using Format Conversion services APIs.</p>
				<ul>
							<li><A href="#Learn">What you will learn 
                                with this Use Case</A>
							<li><a href="#UseCase">The 
                                CAABoundaryRepConvertor Use Case</a>
							<ul type="disc">
								<li><a href="#What">What does 
								CAABoundaryRepConvertor Do</a>
								<li><a href="#How">How to Launch 
								CAABoundaryRepConvertor
								</a>
								<li><a href="#Where">Where to find the 
								CAABoundaryRepConvertor Code</a>
								</li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A>
							</li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What you will learn with this Use Case</h2>
<p>This use case is intended to show you how to implement a native APP format Reader. 
The scenario addresses Importing a xCAD file namely (.CAAcmp extension) and 
converting its Geometry data into Exact geometry using convertor services</p>
<p>It exposes main domains of Mechanical CAD: Boundary 
Representation. <strong>CATIExchangeBoundaryRepresentation&nbsp; </strong>
interface being the most important one</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAABoundaryRepConvertor
        Use Case</h2>
		<p>CAABoundaryRepConvertor is an use case of the CAAVIConvertors.edu 
		framework that illustrates Format Conversion Services capabilities for 
		importing external CAD data and converting in exact geometry</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAABoundaryRepConvertor
        Do</h3>
<p>CAABoundaryRepConvertor simulates an implementation of a MyXCAD Reader, 
to be used in V6 file based Import scenarios. This Reader is a set of classes implementing 
the Convertor Services Interfaces. Using these implementation, we can import 
Geometry Data from a .CAAcmp extension XML file and convert it into Exact 
geometry</p>

<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAABoundaryRepConvertor 
		Use-case</h3>
		<p>To launch <code>CAABoundaryRepConvertor</code>, you will need to set up the build time environment, 
			then compile <code>CAABoundaryRepConvertor<b> </b></code>along 
		with its prerequisites, set up the run time environment, and then launch 
		the V6. </p>
<p>This Use-case is made up of a DLL. You have to launch it using CATIA 
(3DEXPERIENCE.exe)</p>
<p>Then please refer to the article How to launch Convertor Use-case [<a href="#References">1</a>]</p>
<p>The file to be selected while launching the Use-case is a .CAAcmp file which 
contains co-ordinates of points. The name of the file <strong>xApp_Exact.CAAcmp</strong></p>
<p>At last when you click on Open, the Convertors code is called and our DLL 
gets loaded. The flow of the execution code is explained below in this article.</p>
<script type="text/javascript">insertLinkToTop();</script> 

<h3><a name="Where"></a>Where to Find the CAABoundaryRepConvertor
        Code</h3>
<p>The <code>CAABoundaryRepConvertor<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAVIConvertors.edu\CAABoundaryRepConvertor.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
  <li>Implementation Class Diagram </li>
	<li>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName depending upon the LATE TYPE&nbsp; </li>
	<li>Initializing the Input Document and retrieving the Type of 
	Representation</li>
	<li>Implementation of Interfaces</li>
</ol>

	 
<script type="text/javascript">insertLinkToTop();</script>

<h3>Implementation Class Diagram </h3>
<p>The Fig. 1. illustrates the Implementation classes implementing the corresponding Interfaces. So these are the minimum required implementation to get the 
Exact geometry conversion of a simple Triangular or Rectangular Plane.</p>
<p>Refer to the Basic use-cases [<a href="#References">3</a>]</p>
<table>
	<caption>Fig. 1. Implementation class details</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAV6ExactConvImpl.jpg" width="865" height="600"></td>
	</tr>
</table>


<script type="text/javascript">insertLinkToTop();</script> 
<h3>Call to CATCreateAndAddOMFactoryFunctionWithSpecificKeyName macro depending upon the LATE TYPE </h3>
<p>As the user selects the xCAD file to be Imported and clicks on OPEN button, 
V6 Writer (provided by DS) searches for the component with specific Late-Type made from the combination 
of the APPFormat and the ConvertorID. In this case, the file extension that we 
wish to open is .CAAcmp. This extension is associated with the APPFormat '<em>MyXCAD</em>' 
and the ConvertorID is '<em>CAAVI'</em>.</p>
<p>The corresponding Late-Type is <code> XCAD_MyXCAD_CAAVIBRep_InputDocument</code>. 
This should be the Late-Type for the macro. And the class to be instantiated 
should be the second argument of the macro</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3>Initializing the Input Document and retrieving the Type of Representation</h3>
<p>Once the Input document object is created by the Factory, a series of 
callback starts from the V6 Writer. These callbacks have to be answered by V6 
Reader implemented by CAA developer. Depending upon these answers, V6 Writer 
converts the geometry data.</p>
<p>Basically the callback APIs are for 2 purposes</p>
<ol>
	<li>To get the information on Assembly Structure or Reference and 
	Representation nodes incase it is assembly file. If it is a component file, 
	it only checks for the Representation type</li>
	<li>To get the Geometry data incase the Representation type is Tessellated 
	or Exact.</li>
</ol>
<p>In this use-case we have only component file and Exact Representation type.</p>
<p>For the first type of callbacks, the following two APIs are very important</p>
<ul>
	<li><strong>Initialize():</strong> To get the path of the first file 
	selected interactively. If the first file is of the type .CAAasm i.e. 
	Assembly file, then this API will also help to store and retrieve the 
	subsequent file paths from this Assembly file.</li>
	<li><strong>GetRepresentation():</strong>&nbsp; Depending upon the file 
	type, it will call the further implementation classes</li>
</ul>

	 
<h3>Implementation of Interfaces</h3>
<p>The selected file is component file of extension .CAAcmp so it calls the 
implementations of the above mentioned interfaces. This module of use-case code 
only supports/converts geometry data into Exact geometry. Hence the class 
CAABRepConvExBoundaryRep is instantiated which implements the main interface 
CATIBoundaryRepresentation</p>
<p>1. The main aim of the class CAABRepConvExBoundaryRep is to create the list 
of interface pointers pointing to the objects of their corresponding 
implementation classes. For.e.g. see the below code. There are many different 
interfaces which have to be implemented. The most important part here is to 
instantiate the relevant implementation classes which will give the correct 
information regarding the Geometry and topological data of the geometrical shape 
present in the file. </p>
<p>Hence, we have to first read the geometry data by implementing XML parser and 
determine the geometry shape present in it. Then according to the shape, we have 
to instantiate the relevant Implementation classes.</p>

<table class="code" id="table51">
	<tr>
		<td><pre>
	...
	CAABRepConvExBody * pBody = new CAABRepConvExBody (iFileName, PointRefTags);
	...
	
	...
	_ListOfBodies = new CATLISTV(CATIExchangeBody_var);
	_ListOfBodies->Append(pBody);
	...
			</pre>
		</td>
	</tr>
</table>

<p>2. Next the V6 Writer starts a series of callback to the Interfaces to get 
the list pointers. So whichever pointers list (pointing to the Implementation 
class objects) were created in first step are retrieved by V6 writer. Thus V6 
writer understands which geometrical and topological information is present 
inside our XMl files. Below is an example of the interface API which returns the 
pointer list.</p>
<table class="code" id="table51">
	<tr>
		<td><pre>
	...
	CATLISTV(CATIExchangeShell_var)* CAABRepConvExBody::EnumShells(){
	return _ShellList;
	}
	...
	
	...
	CATLISTV(CATIExchangeFace_var)* CAABRepConvExShell::EnumFaces()const{
	return _FaceList;
	}
	...
			</pre>
		</td>
	</tr>
</table>

<p>3. Then it calls the other APIs of the Implementation classes to get the 
actual geometry data to construct the desired shape.</p>
<table class="code" id="table51">
	<tr>
		<td><pre>
...
	HRESULT CAABRepConvExLine::GetEndPoints(double oStartPoint[3], double oEndPoint[3])
	{
	HRESULT hr = E_FAIL;
	CATListOfCATUnicodeString oListOfStartValues, oListOfEndValues;
	CATUnicodeString oStartValue, oEndValue;

	// To Fill the Start and End Points from XML file
	if (_id &lt; LineCount)
	{
		hr = CAAXMLDOMReader::CAAGetXYZofPoint(iFileName, oListOfStartValues, _id);
		if (SUCCEEDED(hr) &amp;&amp; (oListOfStartValues.Size() &lt; 0)) hr = E_UNEXPECTED;
	}	
...
			</pre>
		</td>
	</tr>
</table>

<p>&nbsp;</p>
<p>After conversion, it saves the Physical 3D Part into the database/vault.</p>

	 
<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case demonstrates the capability of the MultiCAD Convertor Service to 
convert a .CAAcmp file data to Exact Geometry, generate a Physical 3D Part and 
save it in the database/vault</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td >[1]</td>
				<td ><a href="CAAConvertorUCHowToLaunch.htm">How to Launch the 
				Convertor Use Case</a></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="CAAConvertorExactTechArticle.htm">MultiCAD Import: Exact Geometry Conversion&nbsp;</a></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="CAAConvertorTechArticle.htm">MultiCAD Convertors: File based Import in CATIA V6&nbsp;</a></td>
			</tr>


			
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [July 2014]&nbsp;&nbsp; </td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
	</body>
</html>


