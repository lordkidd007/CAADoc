<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>IMPORT from File Plug-in</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>MultiCAD Convertors: 'IMPORT from File' Plug-in</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Technical Article&nbsp;</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
		<p>The article describes how to deploy Convertor Services in V6. It 
		explains WHAT and WHERE all the addition/ modifications needs to be done 
		so that we can use the convertor services to convert our own format xCAD 
		file.</p>
	</td>
  </tr>
  
  </table>

<!---------------------------------comment------------------------------------->

<script type="text/javascript">insertLinkToTop();</script>

<h2>Step-by-Step</h2>
<p>There are three logical steps to plug a converter in PLMAccess Import From 
File:</p>
<ol>
	<li>Declaration in a .capa file</li>
	<li>Declaration of the component in its dictionary</li>
	<li>Declaration of the Late Type in the implementation</li>
</ol>

<script type="text/javascript">insertLinkToTop();</script>

<h3>Declaration in the .capa file</h3>
<p>The information regarding the new file format is declared in .capa file.</p>
<p>Semantics of the .capa file is as below</p>
<pre class="code">From[Extension, Usage] On[File] WithParameters[param1,param2, paramName3=paramValue3...]
</pre>
<p> Where,<br>
<strong>Extension</strong>: extension of the external format (ex for CAD format 
: .prt, .prt* etc...) <br>
<strong>Usage</strong>: The usage is the concatenation of 'APPFormat'_'ConverterID'. The usage is unique for a given extension. (eg. for CAD format: NX_CAACustomer1, Creo_CAACustomer2, &#8230;)
<br>
<strong>On[File]</strong>: argument requested for PLM Access Import<br>
<strong>WithParameters</strong>[param1,param2,paramName3=paramValue3,...] : list of parameters used during the conversion.
<br>
<strong>-BatchMode</strong>: the conversion can be used in Batch mode.
Other parameter are not taken account in this context.</p>
<p> The definition of the Extension (of new format) and its Usage through a 
combination of APPFormat and ConvertorID is made in the .capa file. Each line in .capa 
file defines Extension and Usage (as seen in above semantics). Several lines are 
required in case of several Extensions and Usage</p>
<p>A snippet from the .capa file is shown below</p>
<pre class="code">
From[CAAasm,MyXCAD_CAAVI]	On[File] WithParameters[BatchMode]
</pre>
<p> Here, <br>
CAAasm - Is the Extension of the files<br>
MyXCAD - Is the APPFormat<br>
CAAVI -&nbsp; Is the ConvertorID</p>
<p> The CAA .capa file is declared here: <br>
InstallRootFolder\win_b64\code\ImportRegistry\FormatConvertorImporter.capa<br>
This .capa file must be completed with the lines corresponding to your CAA converter(s).<br>
In order to avoid any conflict with other CAA installation, the identifier of your converter (named &#8216;usage&#8217;, and associated to the CAD extension) must be unique, and should correspond to &#8220;APPFormat_ConverterID&#8221;. </p>
<h3> Declaration of the component in its dictionary </h3>
<p> Declare the component in its dictionary for the 'CATInstantiateComponent' 
Factory (This task is required for any V6 Collaboration use case).</p>
<p> The dictionary (.dico) declares the APPFormat Reader in the V6 runtime 
environment.</p>
<p> It enables the Format Conversion Services Factory to load the V6 Reader 
(implemented by CAA developer) dynamically.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAAV6Convertordico.jpg" width="804" height="217"></td>
	</tr>
</table>
<pre class="code">
XCAD_MyXCAD_CAAVI_InputDocument		CATICreateInstance		libCAAGeometryFormatConvertor
CAAXCADConvertorInputDocument		CATIExchangeInputDocument	libCAAGeometryFormatConvertor</pre>
<p> Example of MyXCAD_CAAVI dictionary file</p>
<h3>Declaration of the late type in the implementation </h3>
<pre class="code">#include "CATICreateInstance.h"
CATImplementClass( APPFormatInputDocumentCreationFactory, CodeExtension, CATBaseUnknown, XCAD_APPFormat_ConverterID_Input&nbsp;</pre>
<p>The CAA Implementation of the Input Document declares the above Late Type.&nbsp;</p>
<h2><a name="In short"></a>In Short</h2><p>All the above steps are mandatory in 
order to include our own Convertor Services in V6.</p>
<script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [Jan 2014]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


