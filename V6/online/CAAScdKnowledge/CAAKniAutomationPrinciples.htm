<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Knowledge Basics Overview</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tbody>
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Knowledge Basics Overview</h1>
		</td>
	</tr>
</tbody>
</table>
<p>This article provides the basis for understanding how to create macros using 
knowledgeware features. These knowledgeware features are supplied in the Infrastructure 
product (parameters, formulas and design tables) as well as in the Knowledge 
Basics 
product (rules and checks).</p>
<p>The Knowledge Basics Automation objects are those whereby you can create and 
manipulate the knowledgeware features in a script. These Automation objects can 
be divided into two categories:</p>
<ol>
	<li>The objects which provide you with the creation methods. They are the <strong>
	RelsSet</strong> and <strong>ParmsSet</strong> objects. These objects are only implemented 
	on product representation references (3D shape and technological representation 
	references).</li>
	<li>The knowledgeware objects whereby you can manipulate the Parameter, Formula, 
	Rule, Check and Design Table features once they have been created. The hierarchy 
	of these objects is described in <a href="CAAKniTocParameter.htm">Parameters Object Model Map</a> 
	and <a href="CAAKniTocRelation.htm">Relations Object Model Map</a>.</li>
</ol>
<p>The Use Cases provided as samples are fully commented and should help you understand 
how to proceed to write simple macros as well as fully-fledged macros manipulating 
knowledgeware features.</p>
<table class="Remark">
	<tbody>
	<tr>
		<td class="Remark"><span class="run-in">Warning:</span> Knowledgeware features 
		are inside streams pointed by PLM Representation References. If a stream 
		is not fully loaded in session, or if a PLM Representation Reference is 
		not loaded in session, you could not reach existing Knowledgeware features.
		</td>
	</tr>
</tbody>
</table>
<h2>Creating Knowledgeware Objects</h2>
<p>The entry point is the <strong>RelsSet</strong> or <strong>ParmsSet</strong> objects. To retrieve 
the appropriate object, you must retrieve the root object of the product representation 
reference. This object aggregates all the objects making up the representation reference: 
for instance the bodies, the relations, the parameters to name but a few. Mull over 
this object properties, they all provide you with collections or factories to create 
objects.</p>
<p>For example, you can retrieve a <strong>ParmsSet</strong> object that way:</p>
<pre class="code"><span class="keyword">Dim</span> oActivePart <span class="keyword">As</span> VPMRepReference
<span class="keyword">Set</span> oActivePart = CATIA.ActiveEditor.ActiveObject

<span class="keyword">Dim</span> oKnowledgeObjects <span class="keyword">As</span> KnowledgeObjects
<span class="keyword">Set</span> oKnowledgeObjects = oActivePart.GetItem(&quot;KnowledgeObjects&quot;)

<span class="keyword">Dim</span> oParams <span class="keyword">As</span> ParmsSet
<span class="keyword">Set</span> oParams = oKnowledgeObjects.GetKnowledgeRootSet(True, 0) ' kweParametersType = 0</pre>
<p>The <strong>GetItem</strong> method called against the active <strong>Part</strong> 
object using the <code>KnowledgeObjects</code> arguments returns a
<a href="#" onclick="javascript:CAAlink('IDL', 'KnowledgeIDLItf', 'interface', 'KnowledgeObjects');return false;">
KnowledgeObjects</a> object, the <strong>GetKnowledgeRootSet</strong> method of 
which creates the requested collection object and returns it.</p>
<p>Using <code>False</code> instead of <code>True</code> as the first argument of 
the <strong>GetKnowledgeRootSet</strong> method would have returned the existing
<strong>ParmsSet</strong> object, if any, instead of creating it. Using, for example,
<code>1 (kweRelationsType)</code> instead of <code>0 (kweParametersType)</code> 
would have created a <strong>RelsSet</strong> collection object instead of a
<strong>ParmsSet</strong> collection object.</p>
<p>But prior to writing this, you must check that your object&nbsp; is a 3D shape.</p>
<p>To create an object, you just have to use the appropriate Create<em>xxx</em> method.</p>
<pre class="code"><span class="keyword">Dim</span> oSphereRadius <span class="keyword">As</span> Parameter 
<span class="keyword">Set</span> oSphereRadius = oParams.Factory.CreateInteger(&quot;StringLength&quot;,0) </pre>
<h2>Scanning the Knowledgeware Objects</h2>
<p><strong>ParmsSet</strong> as well as <strong>RelsSet</strong> can be scanned 
through their <strong>Collection</strong> attribute. An item is retrieved from its 
collection using the <strong>Item</strong> method and the index of the item in the collection. 
Usually, the argument representing the index in the <strong>Item</strong> method is a Variant. 
This means that it can either represent the rank of the item in the collection or 
the name you assigned to this item using the <strong>Name</strong> property. The rank in a 
collection begins at 1. For example, assume that the Parameter named &quot;StringLength&quot; 
is the sixth parameter in the <strong>ParmsSet</strong> collection. To retrieve 
this parameter from the <code>oParams</code> object, write:</p>
<pre class="code">
<span class="keyword">Dim</span> oParameter1 <span class="keyword">As</span> Parameter
<span class="keyword">Set</span> oParameter1 = oParams.Collection.Item(6)</pre>
<p>or write:</p>
<pre class="code">
<span class="keyword">Dim</span> oParameter1 <span class="keyword">As</span> Parameter
<span class="keyword">Set</span> oParameter1 = oParams.Collection.Item(&quot;StringLength&quot;)</pre>
<p>Each collection has a <strong>Count</strong> property that holds the number of items in 
the collection. This is a handy property to scan the whole collection. You should 
use the <strong>For each</strong> structure for performance.</p>
<table class="Remark">
	<tbody>
	<tr>
		<td class="Remark"><span class="run-in">Warning:</span> When counting the 
		items in a <strong>Parameters</strong> collection object, mind that you count all 
		the representation parameters and not only the user parameters.</td>
	</tr>
</tbody>
</table>
<h2>Manipulating Knowledgeware Objects</h2>
<p>After they have been created, knowledgeware objects are managed through their 
properties and methods. To find out what they are, see the
<a href="#" onclick="javascript:CAAlink('IDL', 'KnowledgeIDLItf'); return false;">
Knowledge Basics Automation API Reference</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
