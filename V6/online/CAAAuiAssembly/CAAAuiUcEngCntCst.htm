<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating an Engineering Connection and a Distance Constraint Between Two Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Engineering Connection and a Distance 
		Constraint Between Two Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAAssemblyConstraint
		use case. This use case 
		explains how to create an engineering connection and a 
		distance constraint between two components  aggregated by a root product[<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAAssemblyConstraint
			Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAAssemblyConstraint
				Do</a> </li>
				<li><a href="#How">How to Launch CAAAssemblyConstraint</a></li>
				<li><a href="#Where">Where to Find the CAAAssemblyConstraint
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming the 
CATIA Assembly Design. Its main intent is to create 
an engineering connection, then a distance constraint between 
the two components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAuiEngCntCst Use Case</h2>
<p>CAAAssemblyConstraint is a use case of the CAAAssemblyConstraint.edu framework that 
illustrates CATAssemblyConstraintUseItf, CATEngConnectionUseItf, 
and CATPLMUpdateUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAuiEngCntCst Do</h3>
<p>The goal of CAAAssemblyConstraint use case is to 
create an engineering connection 
to connect two components, then a distance plan/plan 
assembly constraint aggregated by the connection between two 
publications:</p>
<ul>
	<li>Opening the PLM Product (Root).</li>
	<li>Loading representation components.</li>
	<li>Searching publications at the product level.</li>
	<li>Creating an engineering connection.</li>
	<li>Creating distance plan/plan constraint between two 
	publications.</li>
	<li>Modifying constraint properties.</li>
	<li>Reading geometry pointed by the constraint.</li>
	<li>Navigation in the collection of engineering connection.</li>
	<li>Updating the assembly.</li>
	<li>Saving the assembly and exiting.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAuiEngCntCst</h3>
<p>To launch CAAAssemblyConstraint, you will need to set up the build time environment, 
then compile CAAAssemblyConstraint.m along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>Launch the use case as follows: </p>
<pre class="code">mkrun -c <em>&quot;CAAAssemblyConstraint repository server user password SecurityCtx PLMType PLMExternalID Version&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td><script type="text/javascript">insertRepository();</script></td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The name and port of the server as name:port_number (e.g. e4au2dsy:1571)</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user</td>
		<td>The user name (e.g. odtitp)</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). Choose Role as Designer (as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td> PLMType </td>
		<td>A PLMType</td>
		<td>Component PLMType </td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalID</td>
		<td>CAA_PRoot</td>
		<td>Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version</td>
		<td>---</td>
		<td>Component Attribute</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described in the 
	<cite>Connecting to V6 Server</cite> use case [<a href="#References">3</a>].
	</li>
	<li>PLMType defines the PLMType of Component to be opened.</li>
	<li>The last arguments define the <strong>value</strong> of the <strong>attribute 
	name and the version</strong>.</li>
</ul>
<p><strong>Import PLM Data:</strong><br />
The use case may require input PLM Data: PLM Reference or PLM Representation Reference. 
This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must import 
these PLM Data in the database using the PLM Access / Import As 3D XML command prior 
to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the CAAAssemblyConstraint.edu/InputData/CAA_PRoot.3dxml.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAssemblyConstraint
Code</h3>
<p>The CAAAssemblyConstraint use case is made of a single class named CAAAssemblyConstraint
located in the CAAAssemblyConstraint.m module of the CAAAssemblyConstraint.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAAssemblyConstraint.edu\CAAAssemblyConstraint.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven main steps in CAACreateModify:</p>
<ol>
	<li><a href="#Step1">Parsing Input Arguments</a></li>
	<li><a href="#Step2">Opening the PLM Root Product</a></li>
	<li><a href="#Step3">Loading Representation Components</a></li>
	<li><a href="#Step4">Searching Publications at the Product Level</a></li>
	<li><a href="#Step5">Creating Engineering Connection</a></li>
	<li><a href="#Step6">Creating Distance Plan/Plan Constraint between Two 
	Publications</a></li>
	<li><a href="#Step7">Modifying Constraint Properties</a></li>
	<li><a href="#Step8">Reading Geometry Pointed by the Constraint</a></li>
	<li><a href="#Step9">Navigating the Collection of Engineering Connections</a></li>
	<li><a href="#Step10">Updating the Assembly</a></li>
	<li><a href="#Step11">Saving the Assembly and Exiting</a></li>
</ol>
<p>
<img alt="Input Product" src="images/CAAPictureEngCntCst1.jpg" width="585" height="460"/></p>
<p>This picture shows the input Product Structure used by the 
use case.</p>
<p>We will now comment each of those sections by looking the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing Input Arguments</h3>
<p><em>CAAAssemblyConstraint</em> begins by checking that the command lines contains seven 
arguments. It then retrieves the environment, creates a session [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the PLM Product (Root)</h3>
<pre class="code">...
const char * charPLMID = iArgv[7];
CATUnicodeString strPLMID = charPLMID;
const char * char_VersionValue = iArgv[8];
CATUnicodeString strVersionValue = char_VersionValue;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATIAlias_var spAlias;
CATOmbLifeCycleRootsBag Bag;

CATUnicodeString strPLMType = "PLMProductDS";

 hr = ::CAAOpenPLMComponent( strPLMType, strPLMID, strVersionValue, IID_CATIPLMNavReference, (void **)&amp; piNavRefOnRoot,Bag,TRUE); // TRUE = Expand All
                           
 ...</pre>
<p><em>CAAAdpOpenProduct</em> is a service extract from CAA Use case containing 
the usual sequence for opening an existing product structure. To prevent, in 
batch mode, the unload of PLM components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Loading Representation Components</h3>
<pre class="code">...
if( SUCCEEDED( RecursiveLoad( piNavRefOnRoot)) )
{
...</pre>
<p> RecursiveLoad internal method loads 
all components from the root product.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Searching Publications at the 
Product Level</h3>
<pre class="code">...
  CATIEngConnectionManager_var spEngConnectionManager = piNavRefOnRoot;
  if( NULL_var != spEngConnectionManager )
  {
    // CAA_PRoot
    //    CAA_PMove.1
    //       Pub: Face    &lt;-----+    
    //    CAA_PFix.1            |
    //       Pub: FixPub  &lt;-----+
    //    MCX ------------------+

    CATBaseUnknown *pPub1, *pPub2;
    pPub1 = pPub2 = NULL;
    CATBaseUnknown *iTargetPrd1, *iTargetPrd2;
    iTargetPrd1 = iTargetPrd2 = NULL;
    // ========================================================================================
    // Search first input : publication face
    // ========================================================================================
    CATIPLMProducts_var spProductsOnRoot=piNavRefOnRoot;

    CATPathOfFirstInstances PFI1;
    usStringToFind = "CAA_PMove.1";
    hr = SearchChildProductByName(spProductsOnRoot ,usStringToFind, PFI1);

    usStringToFind = "Face"; // "MovePub"; 
    hr = SearchPublicationByName(PFI1[PFI1.Size()] ,usStringToFind, &amp;pPub1);

    // ========================================================================================
    // Search second input : publication face
    // ========================================================================================

    CATPathOfFirstInstances PFI2;
    usStringToFind = "CAA_PFix.1";
    hr = SearchChildProductByName(spProductsOnRoot ,usStringToFind, PFI2);

    usStringToFind = "FixPub";
    hr = SearchPublicationByName(PFI2[PFI2.Size()] ,usStringToFind , &amp;pPub2);
...</pre>
<p>The SearchChildProductByName internal 
method retrieves a publication from its name.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating Engineering Connection</h3>
<pre class="code">...
    // 1/ CATOmbObjectInContext objects creation from publications 
    // ===========================================================
    CATLISTP(CATIPLMComponent)  iPathOfInstances1; 
    for ( i=1 ; i &lt;= PFI1.Size() ; i++)
    {
      CATIPLMComponent_var spPLMComponent =PFI1[i];
      iPathOfInstances1.Append (spPLMComponent); spPLMComponent-&gt;AddRef();
    }

    CATLISTP(CATIPLMComponent)  iPathOfInstances2; 
    for ( i=1 ; i &lt;= PFI2.Size() ; i++)
    {
      CATIPLMComponent_var spPLMComponent =PFI2[i];
      iPathOfInstances2.Append (spPLMComponent); spPLMComponent-&gt;AddRef();
    }

    CATIPLMComponent*  piRepInstance1 = NULL;
    CATIPLMComponent*  piRepInstance2 = NULL;

    CATOmbObjectInContext  * objectInContext1 = NULL;
    CATOmbObjectInContext  * objectInContext2 = NULL;
    if( SUCCEEDED(  CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances1 , piRepInstance1 , 
                    pPub1 , objectInContext1)) &amp;&amp; objectInContext1 )
    {
      if( SUCCEEDED(   CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances2 , piRepInstance2 ,  
                       pPub2 , objectInContext2)) &amp;&amp; objectInContext2)
      {
        // 2/ CATOmbObjectInContext objects creation from impacted
        // =======================================================
        CATOmbObjectInContext  * impactedInContext1 = NULL;
        CATOmbObjectInContext  * impactedInContext2 = NULL;
        if( SUCCEEDED(  CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances1 , NULL ,  
                        NULL , impactedInContext1)) &amp;&amp; impactedInContext1 )
        {
          if( SUCCEEDED(   CATOmbObjectInContext::CreateObjectInContext(iPathOfInstances2 , NULL ,  
                           NULL , impactedInContext2)) &amp;&amp; impactedInContext2 )
          {
            CATLISTP(CATIPLMComponent)  testPathOfInstances;
            hr = objectInContext2-&gt;GetPathOfInstances(testPathOfInstances);

            if(  (NULL!=pPub1) &amp;&amp; (NULL!=pPub2) )
            {
              CATListValCATBaseUnknown_var  listOfImpacted;


              Print_OmbObjectInContext("impactedInContext1",impactedInContext1);
              Print_OmbObjectInContext("impactedInContext2",impactedInContext2);
              CATBaseUnknown_var spImp1=impactedInContext1;
              CATBaseUnknown_var spImp2=impactedInContext2;
              listOfImpacted.Append( spImp1 );
              listOfImpacted.Append( spImp2 );

              // ===========================================================================
              // Engineering Connection creation from the "Impacted"
              // ===========================================================================
              CATIEngConnection* piEngCnt=NULL;
              if ( SUCCEEDED( spEngConnectionManager-&gt;CreateEngConnection (CATIEngConnection::Type_UserDefined,
                    &amp;listOfImpacted,piEngCnt)) &amp;&amp; piEngCnt)
              {
...</pre>
<p>To create an assembly constraint between two publications, a engineering connection must be created to link the two instances containing the publications.
   These instances are called "Impacted". 
   the link creation is insured across <em>CATOmbObjectInContext</em> class. this service is used to created
   links on publications and links on impacted.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>
<a name="Step6"></a>Creating Distance Plan/Plan Constraint between Two 
Publications</h3>
<pre class="code">...
                 CATIPLMProducts*  piParent=NULL;
                 rcEngCntCreation = 0;

                 int oNbImpacted=0;
                 hr = piEngCnt--&gt;GetNbImpacted (oNbImpacted) ;
                 if ( 2 == oNbImpacted)
                 {
                   CATOmbObjectInContext * piImpacted1=NULL;
                   CATOmbObjectInContext * piImpactedContext1=NULL;
                   hr = piEngCnt--&gt; GetImpacted (1,piImpacted1,piImpactedContext1) ;
                   Print_OmbObjectInContext("piImpacted1",piImpacted1);
                   Print_OmbObjectInContext("piImpactedContext1",piImpactedContext1);

                   CATOmbObjectInContext * piImpacted2=NULL;
                   CATOmbObjectInContext * piImpactedContext2=NULL;
                   hr = piEngCnt--&gt; GetImpacted (2,piImpacted2,piImpactedContext2) ;
                   Print_OmbObjectInContext("piImpacted2",piImpacted2);
                   Print_OmbObjectInContext("piImpactedContext2",piImpactedContext2);

                   // First can move
                   hr = piEngCnt--&gt;SetDirection( 1, CATIEngConnection::Direction_Out); 
                   hr = piEngCnt--&gt;SetDirection( 2, CATIEngConnection::Direction_In);
                 }

                 CATIAssemblyConstraintManager_var spAssemblyConstraintManager=piEngCnt;
                 if ( NULL_var != spAssemblyConstraintManager)
                 {
                   CATListValCATBaseUnknown_var  listOfGeometry;

                   CATBaseUnknown_var spGeo1=objectInContext1;
                   CATBaseUnknown_var spGeo2=objectInContext2;
                   listOfGeometry.Append( spGeo1 );
                   listOfGeometry.Append( spGeo2 );


                   // ===========================================================================
                   // Creating Constraint from the CATOmbObjectInContext (Publications)
                   // ===========================================================================
                   CATIAssemblyConstraint* piAssemblyConstraint = NULL;
                   if ( SUCCEEDED( spAssemblyConstraintManager--&gt;AddAssemblyConstraint (CATIAssemblyConstraint::Type_DistancePlanePlane,
                                                                                        &amp;listOfGeometry , 
                                                                                        piAssemblyConstraint ))
                                                                                        &amp;&amp;  piAssemblyConstraint)
                   {
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Modifying Constraint Properties</h3>
<pre class="code">...
                      // Constraint properties management
                      // ================================
                      hr = piAssemblyConstraint-&gt;SetActivity(TRUE);
                      hr = piAssemblyConstraint-&gt;SetMode(CATIAssemblyConstraint::Mode_DrivingMode) ;

                      int nbvalues=0;
                      hr = piAssemblyConstraint-&gt;GetNbValues(nbvalues) ;
                      if ( 1 == nbvalues)
                      {
                        double value=10.;
                        hr = piAssemblyConstraint-&gt;SetValue(1,value) ;
                        double minValue=1.;
                        hr = piAssemblyConstraint-&gt;SetMinValue(1,minValue) ;
                        double maxValue=11.;
                        hr = piAssemblyConstraint-&gt;SetMaxValue(1,maxValue) ;
                      }
                      int nboptions=0;
                      hr = piAssemblyConstraint-&gt;GetNbOptions(nboptions) ;
                      if ( 2 == nboptions)
                      {
                        hr = piAssemblyConstraint-&gt;SetOption(1,CATIAssemblyConstraint::Option_PlaneSameOrientation) ;
                        hr = piAssemblyConstraint-&gt;SetOption(2,CATIAssemblyConstraint::Option_PlaneOppositeOrientation) ;
                      }
...</pre>
<p>The <em>CATIAssemblyConstraint</em> interface contains method to 
manage the properties of an assembly constraint.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Reading Geometry Pointed by the Constraint</h3>
<pre class="code">...
                       // How to retrieve the geometry pointed by the constraint
                       // ======================================================
                       int nbGeometries=0;
                       hr = piAssemblyConstraint-&gt;GetNbGeometries(nbGeometries);
                       if (2 == nbGeometries)
                       {
                         for ( i=1 ; i &lt;= 2 ; i++)
                         {
                           CATOmbObjectInContext * piOmbObjectInContext=NULL;
                           if (SUCCEEDED( piAssemblyConstraint-&gt;GetGeometry(i,piOmbObjectInContext)) &amp;&amp; piOmbObjectInContext)
                           {
                             Print_OmbObjectInContext("piOmbObjectInContext",piOmbObjectInContext);
                             piOmbObjectInContext-&gt;Release();
                             piOmbObjectInContext = NULL;                           
                           }
                         }
                         piAssemblyConstraint-&gt;Release();piAssemblyConstraint = NULL;
                       }
                     }
                     piEngCnt-&gt;Release();piEngCnt = NULL;
                   }
                 }
                 impactedInContext2-&gt;Release();impactedInContext2 = NULL;
               }
               impactedInContext1-&gt;Release();impactedInContext1 = NULL;
             }
             objectInContext2=NULL;
           }
           objectInContext1=NULL;
         }
 ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Navigating the Collection of Engineering Connections</h3>
<pre class="code">...
         // ===========================================================================
         // Engineering Connection introspection in the product
         // ===========================================================================
         CATListValCATBaseUnknown_var  listEngConnection;
         hr = spEngConnectionManager-&gt;ListEngConnection(listEngConnection) ;

         for ( i = 1 ; i &lt;= listEngConnection.Size(); i++)
         {
           CATBaseUnknown_var spUnknown = listEngConnection[i];
           CATIEngConnection_var spEngConnection = spUnknown;
           if ( NULL_var != spEngConnection)
           {
             CATIAssemblyConstraintManager_var spAssemblyConstraintManager = spEngConnection;

             // ===========================================================================
             // Retrieving all Constraints aggregated by the Engineering Connection
             // ===========================================================================
             if ( NULL_var != spAssemblyConstraintManager)
             {
               CATListValCATBaseUnknown_var listAssemblyConstraints;
               hr = spAssemblyConstraintManager-&gt;GetListOfAssemblyConstraints (listAssemblyConstraints);
               CATIAssemblyConstraint_var spConstraint;
               for (int j = 1 ; j &lt;= listAssemblyConstraints.Size(); j++)
               {
                 CATBaseUnknown_var spConstraintUnknown = listAssemblyConstraints[j];
                 spConstraint = spConstraintUnknown;
                 if ( NULL_var != spAssemblyConstraintManager)
                 {
                   double myValue=0;
                   hr = spConstraint-&gt;GetValue(1,myValue);
                   CATIAssemblyConstraint::Type myType;
                   hr = spConstraint-&gt;GetType(myType);
                 }
               }
             }
           }
         } 
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Updating the Assembly</h3>
<pre class="code">...
          // ===========================================================================
          // PLM Update
          // ===========================================================================

          // After constraint creation or modification, the product structure must be updated.
          CATBaseUnknown_var spRootActor = piNavRefOnRoot;

          CATIPLMUpdateEngine* engine = NULL;
          HRESULT rcPLMUpdate = CATPLMUpdateFactory::InstantiateUpdateEngine(engine);
          if (S_OK == rcPLMUpdate &amp;&amp; (engine != NULL))
          {
            if (rcConstCreation = 0 &amp;&amp; rcEngCntCreation == 0) rc = 0;

            CATIPLMUpdateEngine::CATPLMUpdateStatus status = CATIPLMUpdateEngine::Status_UndefinedStatus;
            if (S_OK == engine-&gt;Init(spRootActor))
            {
              if (S_OK == engine-&gt;GetGlobalPLMStatus(status))
              {
                switch(status)
                {
                  case CATIPLMUpdateEngine::Status_UpToDate:
                  case CATIPLMUpdateEngine::Status_UpToDateWithWarnings:
                    break; // Already up to date.
                  case CATIPLMUpdateEngine::Status_OutOfDate:
                  case CATIPLMUpdateEngine::Status_OutOfDateDateWithWarnings:
                  {
                    HRESULT updRc = engine-&gt;GlobalPLMUpdate();
                    if (S_OK == updRc)
                    {
                      ; // update successfull.
                    }
                    else if (S_FALSE == updRc)
                    {
                      ; // update successfull with warnings.
                    }
                    else if (E_FAIL == updRc)
                    {
                      ; // update unsuccessfull (errors).
                    }
                    else
                      ; // Unexpected error management.
                  }
                  case CATIPLMUpdateEngine::Status_Error:
                    break; // Error management.
                  case CATIPLMUpdateEngine::Status_UndefinedStatus:
                    break; // Unexpected error management.
                }
              }
              else
                ; // Unexpected error management.
            } else
              ; // Unexpected error management.

            engine-&gt;Release();engine = NULL;
          }
          else
            ; // Unexpected error management.
        }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Saving the Assembly and Exiting</h3>
<pre class="code">...
      // Saving All Products
      // ===================
      CATAdpSaver saver;
      rc = saver.Save();
      Bag.RemoveAll();
    }
    
    // ===========================================================================================================
    // Close the PLM session
    // ===========================================================================================================
    hr = ::CAAAdpCloseSession();
</pre>
<p>Before closing the session and after saving PLM component, the PLM Root component must be removed of the Bag, by using
<code>RemoveRoot</code> method defined in <em>CATOmbLifeCycleRootsBag</em>.</p>

<p>
<img alt="Modified Product" src="images/CAAPictureEngCntCst2.jpg"/></p>
<p>A constraint between the two publications is created. The constraint is aggregated by the Engineering connection. 
The engineering connection is made of a set of constraints between components such as Product, 3D Part or 3D Shape, 
where a typed-relation is defined which takes into account kinematics relation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create and Engineering Connection and an Assembly Constraint.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTa3DShape.htm">
		From the PLM Representation to the 3D Shape</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2009]</td>
		<td>Document created</td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
