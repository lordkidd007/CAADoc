<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating a Harness Network</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Harness Network</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the ElecLogicalItf use case. This use case 
		explains how to create a harness network</p>
		<ul>
			<li><a href="#Learn">What You Will Learn with this Use Case</a></li>
			<li><a href="#UseCase">The CAAElecLogicalHarnessNetwork Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAElecLogicalHarnessNetwork Do</a></li>
				<li><a href="#How">How to Launch CAAElecLogicalHarnessNetwork </a></li>
				<li><a href="#Where">Where to Find the CAAElecLogicalHarnessNetwork Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn with this Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA ELE Interfaces. Its main intent is to allow you to create harness networks, 
electrical references &amp; instances, electrical ports, and how to connect them.</p>
<p>You will learn how to create functions to avoid duplicated code content.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAElecLogicalHarnessNetwork Use Case</h2>
<p>CAAHarnessNetwork.m is a use case of the CAAElecLogicalItf.edu 
framework that illustrates the CATIA ELE Interfaces framework capabilities.</p>
<p>All created objects in this sample are PLM objects without representations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAElecLogicalHarnessNetwork Do</h3>
<p>The goal of CAAElecLogicalHarnessNetwork use case is to show:</p>
<ul>
<li>How to implement functions to create logical entities.</li>
<li>How to implement functions to create electrical entities.</li>
<li>How to create a PLM session with the input parameters &amp; to set the PLM environment.</li>
<li>How to create an equipment reference &amp; its electrical ports.</li>
<li>How to create a single connector reference &amp; its electrical ports.</li>
<li>How to create a splice connector reference &amp; its electrical ports.</li>
<li>How to create a harness reference.</li>
<li>How to create wire reference &amp; theirs ports.</li>
<li>How to create cable reference &amp; theirs ports.</li>
<li>How to create a harness network reference &amp; its composition.</li>
<li>How to connect components in a harness network.</li>
<li>How to group connectors components in a harness.</li>
<li>How to group wires in the cable.</li>
<li>How to list harness components content.</li>
<li>How to list cable grouped components.</li>
<li>How to retrieve a connected end.</li>
<li>How to disconnect a connected end.</li>
<li>How to close a PLM session.</li>
</ul>
<script type="text/javascript">     insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAElecLogicalHarnessNetwork</h3>
<p>To launch CAAElecLogicalHarnessNetwork, you will need to set up the build 
time environment, then compile CAAElecLogicalHarnessNetwork along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAElecLogicalHarnessNetwork Repository Server User Password SecutityCtx Environment&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <i>Host::port_number/RootURI</i></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAElecLogicalHarnessNetwork Code</h3>
<p>The CAAElecLogicalHarnessNetwork sample is made of a single class named CAAElecLogicalHarnessNetwork 
located in the CAAHarnessNetwork.m module of the CAAElecLogicalItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAElecLogicalItf.edu\CAAHarnessNetwork.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATOmbLifeCycleRootsBag</em></td>
		<td>Class allowing to hold PLM components in PLM session.</td>
	</tr>
	<tr>
		<td><em>CAAAdpCreateCloseSession</em></td>
		<td>Class to create &amp; close a PLM session.</td>
	</tr>
	<tr>
		<td><em>CATIAdpEnvironment</em></td>
		<td>Interface dedicated to PLM environment.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>		
	<tr>	
		<td><em>CATCkeGlobalFunctions</em></td>
		<td>Class to retrieve the knowldge functions.</td>
	</tr>
	<tr>
		<td><em>CATCkeObjectAttrWriteServices</em></td>
		<td>Services to easily write attribute values on a Knowledge object.</td>
	</tr>	
	<tr>
		<td><em>CATICkeObject</em></td>
		<td>Interface representing an object that can be manipulated in the Knowledge language.</td>
	</tr>	
	<tr>	
		<td><em>CATICkeParm</em></td>
		<td>Interface dedicated to parameters management.</td>
	</tr>
	<tr>
		<td><em>CATICkeParmFactory</em></td>
		<td>Interface dedicated to manage the knowledge parameters factory.</td>
	</tr>		
	<tr>
		<td><em>CATListValCATICkeParm</em></td>
		<td>Collection class for Knowledge parameters.</td>
	</tr>
	<tr>
		<td><em>CATILogConnection</em></td>
		<td>Interface dedicated to Logical Connection.</td>
	</tr>	
	<tr>
		<td><em>CATILogConnections</em></td>
		<td>Interface dedicated to manage Logical Connections.</td>
	</tr>		
	<tr>
		<td><em>CATILogInstance</em></td>
		<td>Interface dedicated to Logical Instance.</td>
	</tr>
	<tr>
		<td><em>CATILogInstances</em></td>
		<td>Interface dedicated to manage Logical Instances.</td>
	</tr>
	<tr>
		<td><em>CATILogPort</em></td>
		<td>Interface dedicated to Logical port.</td>
	</tr>
	<tr>
		<td><em>CATILogPorts</em></td>
		<td>Interface dedicated to manage Logical ports.</td>
	</tr>	
	<tr>
		<td><em>CATILogReference</em></td>
		<td>Interface dedicated to Logical Reference.</td>
	</tr>	
	<tr>
		<td><em>CATILogReferenceFactory</em></td>
		<td>Interface dedicated to create Logical References objects.</td>
	</tr>	
	<tr>
		<td><em>CATILogTypeReference</em></td>
		<td>Interface dedicated to Logical Type Reference.</td>
	</tr>
	<tr>	
		<td><em>CATListValCATILogConnection</em></td>
		<td>Collection class for smart pointers to logical connections</td>
	</tr>			
	<tr>	
		<td><em>CATListValCATILogInstance</em></td>
		<td>Collection class for smart pointers to logical instances</td>
	</tr>	
	<tr>	
		<td><em>CATListValCATILogPort</em></td>
		<td>Collection class for smart pointers to logical ports</td>
	</tr>				
	<tr>	
		<td><em>CATLogFactoriesProvider</em></td>
		<td>Provider class to retrieve the Logical factories.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalCableInst</b></em></td>
		<td>Interface dedicated to manage Electrical Cable Instance.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalCableRef</b></em></td>
		<td>Interface dedicated to manage Electrical Cable Reference.</td>
	</tr>		
	<tr>	
		<td><em><b>CATIEleLogicalConnectorInst</b></em></td>
		<td>Interface dedicated to manage Electrical Connector Instance.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalConnectorRef</b></em></td>
		<td>Interface dedicated to manage Electrical Connector Reference.</td>
	</tr>		
	<tr>
		<td><em><b>CATIEleLogicalConnectorPort</b></em></td>
		<td>Interface dedicated to manage Electrical Connector Ports.</td>
	</tr>		
	<tr>	
		<td><em><b>CATIEleLogicalEquipmentInst</b></em></td>
		<td>Interface dedicated to manage Electrical Equipment Instance.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalEquipmentRef</b></em></td>
		<td>Interface dedicated to manage Electrical Equipment Reference.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalExtensions</b></em></td>
		<td>Interface dedicated to extend Logical References &amp; Ports to Electrical objects.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalGroupLink</b></em></td>
		<td>Interface dedicated to manage Electrical Group Links.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalHarnessInst</b></em></td>
		<td>Interface dedicated to manage Electrical Harness Instance.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalHarnessRef</b></em></td>
		<td>Interface dedicated to manage Electrical Harness Reference.</td>
	</tr>
	<tr>
		<td><em><b>CATIEleLogicalPin</b></em></td>
		<td>Interface dedicated to Electrical Pins.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalWireInst</b></em></td>
		<td>Interface dedicated to manage Electrical Wire Instance.</td>
	</tr>
	<tr>
		<td><em><b>CATIEleLogicalWireRef</b></em></td>
		<td>Interface dedicated to manage Electrical Wire Reference.</td>
	</tr>	
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Electrical environment and it&#8217;s components creation 
by looking at the code of the Main . There are 10 steps to create the harness network, 2 steps to create functions &amp; 8 steps in Main :</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Implementing Functions to Create Logical Entities</a></td>
	</tr>	
	<tr>
		<td>2</td>
		<td><a href="#Step2">Implementing Functions to Create Electrical Entities</a></td>
	</tr>	
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a PLM Session with the Input Parameters and Setting the PLM Environment</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating an Equipment Reference and its Electrical Ports</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Creating a Single Connector Reference and its Electrical Ports</a></td>
	</tr>	
	<tr>
		<td>6</td>
		<td><a href="#Step6">Creating a Splice Connector Reference and its Electrical Ports</a></td>
	</tr>	
	<tr>
		<td>7</td>
		<td><a href="#Step7">Creating a Harness Reference</a></td>
	</tr>	
	<tr>
		<td>8</td>
		<td><a href="#Step8">Creating a Wire Reference and its Electrical Ports</a></td>
	</tr>	
	<tr>
		<td>9</td>
		<td><a href="#Step9">Creating a Cable Reference</a></td>
	</tr>			
	<tr>
		<td>10</td>
		<td><a href="#Step10">Creating a Harness Network Reference and its Composition</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Connecting Components in a Harness Network</a></td>
	</tr>	
	<tr>
		<td>12</td>
		<td><a href="#Step12">Grouping Connectors Components in a Harness</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Grouping Wires in the Cable</a></td>
	</tr>
	<tr>
		<td>14</td>
		<td><a href="#Step14">Listing Harness Components Content</a></td>
	</tr>		
	<tr>
		<td>15</td>
		<td><a href="#Step15">Listing Cable Grouped Components</a></td>
	</tr>		
	<tr>
		<td>16</td>
		<td><a href="#Step16">Retrieving a Connected End</a></td>
	</tr>
	<tr>
		<td>17</td>
		<td><a href="#Step17">Disconnecting a Connected End</a></td>
	</tr>		
	<tr>
		<td>18</td>
		<td><a href="#Step18">Closing the PLM Session</a></td>
	</tr>															
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implementing Functions to Create Logical Entities</h3>
<p>We create &amp; implement functions to create logical entities in order to avoid duplicated code content.</p>
<pre class="code">
//---------------------------------------------------------------------------------
// Create a logical reference
//---------------------------------------------------------------------------------
HRESULT CreateLogReference ( CATUnicodeString isLogReferenceName , 
                             CATILogReference *&amp; opLogReference )
{
  /*
   * Service to create a logical reference.
   * Release opLogReference after last use.
   */

  if ( opLogReference ) {
    return E_INVALIDARG ;
  }

  // Retrieve logical reference factory
  CATILogReferenceFactory * pLogReferenceFactory = NULL ;
  HRESULT HR = CATLogFactoriesProvider::GetReferenceFactory ( pLogReferenceFactory ) ;
  if ( FAILED ( HR ) || !pLogReferenceFactory )
  {
    // Clean
    if ( pLogReferenceFactory ) {
      pLogReferenceFactory -&gt; Release () ;
      pLogReferenceFactory = NULL ;
    }
    return E_FAIL ;
  }
  
  // Retrieve project environment
  PLMPSISessionHelpers * pSessionHelpers = NULL ;
  HR = PLMPSISessionHelpers::GetSessionHelpers ( pSessionHelpers ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pSessionHelpers )
  {
    CATIAdpEnvironment * pIAdpEnvironment = NULL ;
    HR = pSessionHelpers -&gt; GetCurrentEnvironment ( pIAdpEnvironment ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pIAdpEnvironment )
    {
      // Initialize parameter
      HR = E_FAIL ;
      CATIType_var spType ;
      CATListValCATICkeParm_var LFctAttributesValues ;
      CATILogTypeReference * pLogicalTypeReference = NULL ;

      // Create a logical reference
      HR =  pLogReferenceFactory -&gt; CreateReference ( spType , pIAdpEnvironment , LFctAttributesValues , opLogReference ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference &amp;&amp; isLogReferenceName . GetLengthInChar () ) 
      {
        // Set identifier of the logical reference
        HR = E_FAIL ;
        const CATUnicodeString sIdentifierAttr ( "PLM_ExternalID" ) ;
        const CATICkeObject_var spCkeObject ( opLogReference ) ;
        if ( spCkeObject != NULL_var ) 
        {
          HR = CATCkeObjectAttrWriteServices::SetValueWithString ( spCkeObject , sIdentifierAttr , isLogReferenceName ) ;  
        }
      }
    }
    // Clean
    if ( pIAdpEnvironment ) {
      pIAdpEnvironment -&gt; Release () ;
      pIAdpEnvironment = NULL ;
    }
  }
  // Clean
  if ( pLogReferenceFactory ) {
    pLogReferenceFactory -&gt; Release () ;
    pLogReferenceFactory = NULL ;
  }
  return HR ;
}

//---------------------------------------------------------------------------------
// Create a logical instance
//---------------------------------------------------------------------------------
HRESULT CreateLogInstance ( CATUnicodeString isLogInstanceName , 
                            CATILogReference * ipLogReferenceToInstantiate ,
                            CATILogReference * ipFatherLogReference ,
                            CATILogInstance *&amp; opLogInstance ) 
{
  /*
   * Service to create a logical instance.
   * Release opLogInstance after last use.
   */						 
  ...
}
						 
//---------------------------------------------------------------------------------
// Create a logical port
//---------------------------------------------------------------------------------
HRESULT CreateLogPort ( CATUnicodeString isLogPortName , 
                        CATILogReference * ipLogReference ,
                        CATILogPort *&amp; opLogPort ,
                        CATILogPort::PortDirection iPortDirection = CATILogPort::InOut )
{
  /*
   * Service to create a logical port.
   * Release opLogPort after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a logical connection
//---------------------------------------------------------------------------------
HRESULT CreateLogConnection ( CATUnicodeString isLogConnectionName , 
                              CATILogInstance * ipStartLogInstance ,
                              CATILogPort * ipStartLogPort ,
                              CATILogInstance * ipTargetLogInstance ,
                              CATILogPort * ipTargetLogPort ,
                              CATILogConnection *&amp; opLogConnection )
{
  /*
   * Service to create a logical connection.
   * Release opLogConnection after last use.
   */
  ...
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing Functions to Create Electrical Entities</h3>
<p>We create &amp; implement functions to create electrical entities in order to avoid duplicated code content.</p>
<pre class="code">
//---------------------------------------------------------------------------------
// Create a equipment reference
//---------------------------------------------------------------------------------
HRESULT CreateEquipmentReference ( CATUnicodeString isEquipmentRefName , 
	                          CATIEleLogicalEquipmentRef *&amp; opEquipmentRef )
{
  /*
   * Service to create an equipment reference.
   * Release opEquipmentRef after last use.
   */

  if ( opEquipmentRef ) {
    return E_INVALIDARG ;
  }

  // Create logical reference
  CATILogReference * opLogReference = NULL ;
  HRESULT HR = ::CreateLogReference ( isEquipmentRefName , opLogReference ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference ) 
  {
    HR = E_FAIL ;
    CATIEleLogicalExtensions_var spExtensions ( opLogReference ) ;
    if ( spExtensions != NULL_var ) 
    {
      // Extend the logical reference into an equipment
      HR = spExtensions -&gt; ExtendIntoEquipment () ;
    }
  }

  // Set output equipment parameter
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference ) 
  {
    HR = opLogReference -&gt; QueryInterface ( IID_CATIEleLogicalEquipmentRef , ( void ** ) &amp; opEquipmentRef ) ;
  }
  // Clean
  if ( opLogReference ) {
    opLogReference -&gt; Release () ;
    opLogReference = NULL ;
  }
  return HR ;
}

//---------------------------------------------------------------------------------
// Create a connector reference
//---------------------------------------------------------------------------------
HRESULT CreateConnectorReference ( CATUnicodeString isConnectorRefName , 
                                   CATIEleLogicalConnectorRef *&amp; opConnectorRef ,
                                   CATIEleLogicalConnectorRef::ConnectorType iConnectorType )
{
  /*
   * Service to create an connector reference.
   * Release opConnectorRef after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a harness reference
//---------------------------------------------------------------------------------
HRESULT CreateHarnessReference ( CATUnicodeString isHarnessRefName , 
                                 CATIEleLogicalHarnessRef *&amp; opHarnessRef )
{
  /*
   * Service to create an harness reference.
   * Release opHarnessRef after last use.
   */ 
  ...  
}

//---------------------------------------------------------------------------------
// Create a wire reference
//---------------------------------------------------------------------------------
HRESULT CreateWireReference ( CATUnicodeString isWireRefName , 
                              CATIEleLogicalWireRef *&amp; opWireRef ,
                              CATILogPort *&amp; opWireEndPort1 ,
                              CATILogPort *&amp; opWireEndPort2)
{
  /*
   * Service to create an wire reference.
   * Release opWireRef, opWireEndPort1 &amp; opWireEndPort2 after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a cable reference
//---------------------------------------------------------------------------------
HRESULT CreateCableReference ( CATUnicodeString isCableRefName , 
                               CATIEleLogicalCableRef *&amp; opCableRef )
{
  /*
   * Service to create an cable reference.
   * Release opCableRef after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a connector port
//---------------------------------------------------------------------------------
HRESULT CreateConnectorPort ( CATUnicodeString isConnectorPortName , 
                              CATILogReference * ipReference ,
                              CATIEleLogicalConnectorPort *&amp; opConnectorPort ,
                              CATIEleLogicalConnectorPort::ConnectorPortType iConnectorPortType ,
                              CATILogPort::PortDirection iPortDirection ,
                              CATIEleLogicalConnectorPort * ipConnectorPortGroup )
{
  /*
   * Service to create an electrical connector port.
   * If "ipConnectorPortGroup" is a valid object , it will group the created pin.
   * Release opConnectorPort after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a pin
//---------------------------------------------------------------------------------
HRESULT CreatePin ( CATUnicodeString isPinName , 
                    CATILogReference * ipReference ,
                    CATIEleLogicalPin *&amp; opPin ,
                    CATILogPort::PortDirection iPortDirection ,
                    CATIEleLogicalConnectorPort * ipConnectorPortGroup )
{
  /*
   * Service to create an electrical pin.
   * If "ipConnectorPortGroup" is a valid object , it will group the created pin.
   * Release opPin after last use.
   */
  ...
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a PLM Session with the Input Parameters and Setting the PLM Environment</h3>
<p>We create a PLM session with input parameters to connect to the database &amp; set environment.</p>
<pre class="code">...
if ( 7 != argc )
{
  cout &lt;&lt; endl;
  cout &lt;&lt;&quot;CAAElecLogicalHarnessNetwork &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
  cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
  cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  goto EscapeWay;
}

...

const char * sRepository  = argv [ 1 ] ;
const char * sServerName  = argv [ 2 ] ;
const char * sUserName    = argv [ 3 ] ;
const char * sPassword    = argv [ 4 ] ;
const char * sSecurityCtx = argv [ 5 ] ;
const char * sEnvToUse    = argv [ 6 ] ;

HR = ::CAAAdpCreateSession ( sRepository , sServerName , sUserName , sPassword , sSecurityCtx ) ;
if ( SUCCEEDED ( HR ) )
{
  HR = PLMPSISessionHelpers::GetSessionHelpers ( pSessionHelpers ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pSessionHelpers )
  {
    HR = pSessionHelpers -&gt; SetCurrentEnvironment ( sEnvToUse ) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating an Equipment Reference and its Electrical Ports</h3>
<p>We create an equipment reference, create a connector port &amp; create three pins to group under the connector port.</p>
<pre class="code">...
// Create equipment reference
HR = ::CreateEquipmentReference ( "Equipment Reference" , opEquipmentRef ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opEquipmentRef )
{
  // Is It an equipment reference ?
  CATIEleLogicalEquipmentRef_var spEquipmentRef ( opEquipmentRef ) ;
  if ( spEquipmentRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opEquipmentRef ) ;
    if ( SUCCEEDED ( HR ) ) 
    {
      CATILogReference * pLogReference = NULL;
      HR = opEquipmentRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReference ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; pLogReference ) 
      {
        // Create connector port
        HR = ::CreateConnectorPort ( "C1" , pLogReference , opConnectorPort ) ;
        if ( SUCCEEDED ( HR ) &amp;&amp; opConnectorPort )
        {
          // Create 3 pins under "C1" connector port
          HR = ::CreatePin ( "Pin1" , pLogReference , opPin1 , CATILogPort::InOut , opConnectorPort ) ;
          if ( SUCCEEDED ( HR ) &amp;&amp; opPin1 ) {
            HR = ::CreatePin ( "Pin2" , pLogReference , opPin2 , CATILogPort::InOut , opConnectorPort ) ;
            if ( SUCCEEDED ( HR ) &amp;&amp; opPin2 ) {
              HR = ::CreatePin ( "Pin3" , pLogReference , opPin3 , CATILogPort::InOut , opConnectorPort ) ;
            }
          }
        }
      }
      if ( pLogReference ) {
        pLogReference -&gt; Release () ;
        pLogReference = NULL ; 
      }
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Single Connector Reference and its Electrical Ports</h3>
<p>We create a single connector reference, create a connector port &amp; create three pins to group under the connector port.</p>
<pre class="code">...
// Create connector reference
HR = ::CreateConnectorReference ( "Single Connector Reference" , opConnectorRef ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opConnectorRef )
{
  // Is It an connector reference ?
  CATIEleLogicalConnectorRef_var spConnectorRef ( opConnectorRef ) ;
  if ( spConnectorRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opConnectorRef ) ;
    if ( SUCCEEDED ( HR ) ) 
    {
      CATILogReference * pLogReference = NULL ;
      HR = opConnectorRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReference ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; pLogReference ) 
      {
        // Create connector port
        HR = ::CreateConnectorPort ( "C1" , pLogReference , opCConnectorPort ) ;
        if ( SUCCEEDED ( HR ) &amp;&amp; opCConnectorPort )
        {
          // Create pins under "C1" connector port
          HR = ::CreatePin ( "Pin1" , pLogReference , opCPin1 , CATILogPort::InOut , opCConnectorPort ) ;
          if ( SUCCEEDED ( HR ) &amp;&amp; opCPin1 ) {
            HR = ::CreatePin ( "Pin2" , pLogReference , opCPin2 , CATILogPort::InOut , opCConnectorPort ) ;
            if ( SUCCEEDED ( HR ) &amp;&amp; opCPin2 ) {
              HR = ::CreatePin ( "Pin3" , pLogReference , opCPin3 , CATILogPort::InOut , opCConnectorPort ) ;
            }
          }
        }
      }
      if ( pLogReference ) {
        pLogReference -&gt; Release () ;
        pLogReference = NULL ; 
      }
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a Splice Connector Reference and its Electrical Ports</h3>
<p>We create a splice connector reference &amp; create a connector port  create one pin.</p>
<pre class="code">...
// Create connector reference
HR = ::CreateConnectorReference ( "Splice Connector Reference" , opSpliceRef , CATIEleLogicalConnectorRef::Splice ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opSpliceRef )
{
  // Is It an connector reference ?
  CATIEleLogicalConnectorRef_var spConnectorRef ( opSpliceRef ) ;
  if ( spConnectorRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opSpliceRef ) ;
    if ( SUCCEEDED ( HR ) ) 
    {
      CATILogReference * pLogReference = NULL;
      HR = opSpliceRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReference ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; pLogReference ) 
      {
        // Create pins
        HR = ::CreatePin ( "Pin" , pLogReference , opSPin , CATILogPort::InOut ) ;
      }
      if ( pLogReference ) {
        pLogReference -&gt; Release () ;
        pLogReference = NULL ; 
      }
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating a Harness Reference</h3>
<p>We create a harness reference.</p>
<pre class="code">...
// Create harness reference
HR = ::CreateHarnessReference ( "Harness Reference" , opHarnessRef ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opHarnessRef )
{
  // Is It an harness reference ?
  CATIEleLogicalHarnessRef_var spHarnessRef ( opHarnessRef ) ;
  if ( spHarnessRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opHarnessRef ) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Creating a Wire Reference and its Electrical Ports</h3>
<p>We create a wire reference &amp; create electrical end ports.</p>
<pre class="code">...
// Create wire reference
HR = ::CreateWireReference ( "Wire Reference" , opWireRef , opWireEndPort1 , opWireEndPort2 ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opWireRef )
{
  // Is It an wire reference ?
  CATIEleLogicalWireRef_var spWireRef ( opWireRef ) ;
  if ( spWireRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opWireRef ) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Creating a Cable Reference</h3>
<p>We create a cable reference.</p>
<pre class="code">...
// Create cable reference
HR = ::CreateCableReference ( "Cable Reference" , opCableRef ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opCableRef )
{
  // Is It an cable reference ?
  CATIEleLogicalCableRef_var spCableRef ( opCableRef ) ;
  if ( spCableRef != NULL_var ) 
  {
    // Insert component in bag
    HR = Bag . InsertRoot ( opCableRef ) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Creating a Harness Network Reference and its Composition</h3>
<p>We create an harness network reference &amp; create electrical components under this reference.</p>
<pre class="code">...
// Create harness network reference
HR = ::CreateLogReference ( "Harness Network" , opHarnessNetworkReference ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opHarnessNetworkReference )
{
  // Insert component in bag
  HR = Bag . InsertRoot ( opHarnessNetworkReference ) ;
}
...

// Create equipment instances
if ( opEquipmentRef ) 
{
  CATILogReference * pLogReferenceToInstantiate = NULL ;
  HR = opEquipmentRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReferenceToInstantiate ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pLogReferenceToInstantiate ) 
  {
    // Create logical instances 
    HR = ::CreateLogInstance ( "Equipment 1" , pLogReferenceToInstantiate , opHarnessNetworkReference , opEquipment1 ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; opEquipment1 ) {
      HR = ::CreateLogInstance ( "Equipment 2" , pLogReferenceToInstantiate , opHarnessNetworkReference , opEquipment2 ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; opEquipment2 ) {
        HR = ::CreateLogInstance ( "Equipment 3" , pLogReferenceToInstantiate , opHarnessNetworkReference , opEquipment3 ) ;
      }
    }
  }
  if ( pLogReferenceToInstantiate ) {
    pLogReferenceToInstantiate -&gt; Release () ;
    pLogReferenceToInstantiate = NULL ; 
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Connecting Components in a Harness Network</h3>
<p>We connect wires ports to pins of connectors &amp; splice components, &amp; connect connector port of connectors &amp; equipment in a harness network.</p>
<pre class="code">...
// Connect "Wire 1" component through "End Port 1" port to "Pin1" port of "Connector 1" component
// Connect "Wire 1" component through "End Port 2" port to "Pin1" port of "Connector 2" component
if ( opCPin1 ) {
  CATILogPort * opLogPort = NULL ;
  HR = opCPin1 -&gt; QueryInterface ( IID_CATILogPort , ( void ** ) &amp; opLogPort ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogPort ) 
  {
    HR = ::CreateLogConnection ( "Wire 1 - End Port 1 --- Pin1 - Connector 1" , 
                                  opWire1 , opWireEndPort1 ,
                                  opConnector1 , opLogPort ,
                                  opLogConnection1 ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; opLogConnection1 ) {
      HR = ::CreateLogConnection ( "Wire 1 - End Port 2 --- Pin1 - Connector 2" , 
                                    opWire1 , opWireEndPort2 ,
                                    opConnector2 , opLogPort ,
                                    opLogConnection2 ) ;
    }
  }
  if ( opLogPort ) 
  {
    opLogPort -&gt; Release () ;
    opLogPort = NULL ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Grouping Connectors Components in a Harness</h3>
<p>We link connectors to harness group.</p>
<pre class="code">...
// Use GroupLink interface
spGroupLink = CATIEleLogicalGroupLink_var ( opHarness ) ;
if ( spGroupLink != NULL_var &amp;&amp; opConnector1 &amp;&amp; opConnector2 &amp;&amp; opConnector3 &amp;&amp; opSplice ) 
{
  CATBaseUnknown * pObject = NULL;
  // group first connector in harness
  HR = opConnector1 -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
  {
    HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
  // group second connector in harness
  if ( SUCCEEDED ( HR ) ) {
    HR = opConnector2 -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
    {
      HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
    }
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
  // group third connector in harness
  if ( SUCCEEDED ( HR ) ) {
    HR = opConnector3 -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
    {
      HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
    }
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
  // group splice in harness
  if ( SUCCEEDED ( HR ) ) {
    HR = opSplice -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
    {
      HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
    }
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Grouping Wires in the Cable</h3>
<p>We link wires to cable group.</p>
<pre class="code">...
// Initialize &amp; use GroupLink interface to group
spGroupLink = NULL_var ;
spGroupLink = CATIEleLogicalGroupLink_var ( opCable ) ;
if ( spGroupLink != NULL_var &amp;&amp; opWire1 &amp;&amp; opWire2 ) 
{
  CATBaseUnknown * pObject = NULL;
  // group first wire in cable
  HR = opWire1 -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
  {
    HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
  // group second wire in cable
  if ( SUCCEEDED ( HR ) ) {
    HR = opWire2 -&gt; QueryInterface ( IID_CATBaseUnknown , ( void ** ) &amp; pObject ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pObject )
    {
      HR = spGroupLink -&gt; AddToGroup ( pObject ) ;
    }
  }
  if ( pObject )
  {
    pObject -&gt; Release () ;
    pObject = NULL ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Listing Harness Components Content</h3>
<p>We list grouped components under a harness.</p>
<pre class="code">...
// Initialize &amp; list through GroupLink interface
spGroupLink = NULL_var ;
spGroupLink = CATIEleLogicalGroupLink_var ( opHarness ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; spGroupLink != NULL_var )
{
  HR = spGroupLink -&gt; ListGroupedObjects ( sFilterType , opLHarnessContent ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLHarnessContent &amp;&amp; opLHarnessContent-&gt; Size () == 8) {
    for ( int i = 1; i &lt;= opLHarnessContent -&gt; Size () ; i++ ) 
    {
      CATIEleLogicalConnectorInst_var spConnector ( ( *opLHarnessContent ) [ i ] ) ;
      CATIEleLogicalWireInst_var spWire ( ( *opLHarnessContent ) [ i ] ) ;
      CATIEleLogicalCableInst_var spCable ( ( *opLHarnessContent ) [ i ] ) ;
      if ( spConnector == NULL_var &amp;&amp; spWire == NULL_var &amp;&amp; spCable == NULL_var ) {
        HR = E_FAIL;
        break;
      }
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Listing Cable Grouped Components</h3>
<p>We list grouped components under a cable.</p>
<pre class="code">...
// Initialize &amp; list through GroupLink interface
spGroupLink = NULL_var ;
spGroupLink = CATIEleLogicalGroupLink_var ( opCable ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; spGroupLink != NULL_var )
{
  HR = spGroupLink -&gt; ListGroupedObjects ( sFilterType , opLCableContent ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLCableContent &amp;&amp; opLCableContent-&gt; Size () == 2) {
    for ( int i = 1; i &lt;= opLCableContent -&gt; Size () ; i++ ) 
    {
      CATIEleLogicalWireInst_var spWire ( ( *opLCableContent ) [ i ] ) ;
      if (  spWire == NULL_var ) {
        HR = E_FAIL;
        break;
      }
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Retrieving a Connected End</h3>
<p>We retrieve a connector port of a equipment connected to the connector port of a connector.</p>
<pre class="code">...
// Retrieve a connected ends
if ( opConnector1 &amp;&amp; opCConnectorPort ) 
{
  CATILogPort * opLogPort = NULL ;
  HR = opCConnectorPort -&gt; QueryInterface ( IID_CATILogPort, ( void ** ) &amp; opLogPort ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogPort )
  {
    // Get connected sibling systems
    CATListValCATILogInstance_var oLConnectedLogicalInstances ;
    CATListValCATILogPort_var oLConnectedLogicalPorts ;
    CATListValCATILogConnection_var oLLogicalConnections ;
    HR = opConnector1 -&gt; GetConnectedSiblingSystems ( opLogPort , oLConnectedLogicalInstances , 
                                                      oLConnectedLogicalPorts , oLLogicalConnections ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; oLConnectedLogicalInstances . Size () == 1 
      &amp;&amp; oLConnectedLogicalPorts . Size () == 1 &amp;&amp; oLLogicalConnections . Size () == 1 )
    {
      HR = E_FAIL ;
      // Target ends must be "C1" of "Equipment 1" through "Connector 1 - C1 --- C1 - Equipment 1"
      CATBaseUnknown_var spEquipment ( oLConnectedLogicalInstances [ 1 ] ) ;
      CATBaseUnknown_var spConnectorPort ( oLConnectedLogicalPorts [ 1 ] ) ;
      CATBaseUnknown_var spConnection ( oLLogicalConnections [ 1 ] ) ;
      if ( spEquipment != NULL_var &amp;&amp; spConnectorPort != NULL_var &amp;&amp; spConnection != NULL_var )
      {
        if ( spEquipment -&gt; IsEqual ( opEquipment1 )
          &amp;&amp; spConnectorPort -&gt; IsEqual ( opEConnectorPort ) 
          &amp;&amp; spConnection -&gt; IsEqual ( opLogConnection11 ) )
        {
          // Objects are found
          HR = S_OK;
        }
      }
    }
    else {
      HR = E_FAIL ;
    }
  }
  if ( opLogPort )
  {
    opLogPort -&gt; Release () ;
    opLogPort = NULL ;
  }
}
...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Disconnecting a Connected End</h3>
<p>We disconnect a connector port of a equipment connected to the connector port of a connector.</p>
<pre class="code">...
// Disconnect a connected end
if ( opHarnessNetworkReference &amp;&amp; opLogConnection11 ) 
{
  // Remove the connection from the harness network
  HR = E_FAIL ;
  CATILogConnections_var spLogConnections ( opHarnessNetworkReference ) ;
  if ( spLogConnections != NULL_var ) {
    HR = spLogConnections -&gt; Remove ( opLogConnection11 ) ;
  }

  if ( SUCCEEDED ( HR ) &amp;&amp; opConnector1 &amp;&amp; opCConnectorPort )
  {
    // Retreive connected ends
    HR = E_FAIL ;
    CATILogPort * opLogPort = NULL ;
    HR = opCConnectorPort -&gt; QueryInterface ( IID_CATILogPort, ( void ** ) &amp; opLogPort ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; opLogPort )
    {
      // Retreive connected ends
      HR = E_FAIL ;
      CATListValCATILogInstance_var oLConnectedLogicalInstances ;
      CATListValCATILogPort_var oLConnectedLogicalPorts ;
      CATListValCATILogConnection_var oLLogicalConnections ;
      HR = opConnector1 -&gt; GetConnectedSiblingSystems ( opLogPort , oLConnectedLogicalInstances , 
                                                        oLConnectedLogicalPorts , oLLogicalConnections ) ;
      if ( FAILED ( HR ) || oLConnectedLogicalInstances . Size () != 0
        || oLConnectedLogicalPorts . Size () != 0 || oLLogicalConnections . Size () != 0 )
      {
        HR = E_FAIL ;
      }
    }
    if ( opLogPort )
    {
      opLogPort -&gt; Release () ;
      opLogPort = NULL ;
    }
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Closing the PLM Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...

HR = ::CAAAdpCloseSession() ;

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In short</h2>
<p>This use case has demonstrated the way to create a harness network.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Aug 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2.0</strong> [Dec 2010]</td>
		<td>Document updated to support new electrical &amp; logical APIs</td>
	</tr>		
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
