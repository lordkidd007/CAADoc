<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating an Electrical System</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Electrical System</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the ElecLogicalItf use case. This use case 
		explains how to create an electrical system</p>
		<ul>
			<li><a href="#Learn">What You Will Learn with this Use Case</a></li>
			<li><a href="#UseCase">The CAAElecLogicalElectricalSystem Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAElecLogicalElectricalSystem Do</a></li>
				<li><a href="#How">How to Launch CAAElecLogicalElectricalSystem</a></li>
				<li><a href="#Where">Where to Find the CAAElecLogicalElectricalSystem Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn with this Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA ELE Interfaces. Its main intent is to allow you to create electrical systems, 
electrical references &amp; instances, electrical ports, and how to connect them.</p>
<p>You will learn how to create functions to avoid duplicated code content.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAElecLogicalElectricalSystem Use Case</h2>
<p>CAAElectricalSystem.m is a use case of the CAAElecLogicalItf.edu 
framework that illustrates the CATIA ELE Interfaces framework capabilities.</p>
<p>All created objects in this sample are PLM objects without representations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAElecLogicalElectricalSystem Do</h3>
<p>The goal of CAAElecLogicalElectricalSystem use case is to show:</p>
<ul>
<li>How to implement functions to create logical entities.</li>
<li>How to implement functions to create electrical entities.</li>
<li>How to create a PLM session with the input parameters &amp; to set the PLM environment.</li>
<li>How to create an equipment reference &amp; its electrical ports.</li>
<li>How to create nets references &amp; theirs ports.</li>
<li>How to create an electrical system reference &amp; its composition.</li>
<li>How to connect components in an electrical system.</li>
<li>How to list electrical system components.</li>
<li>How to list electrical ports of equipment.</li>
<li>How to list electrical ports of connector port.</li>
<li>How to close a PLM session.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAElecLogicalElectricalSystem</h3>
<p>To launch CAAElecLogicalElectricalSystem, you will need to set up the build 
time environment, then compile CAAElecLogicalElectricalSystem along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAElecLogicalElectricalSystem Repository Server User Password SecutityCtx Environment&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <i>Host::port_number/RootURI</i></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAElecLogicalElectricalSystem Code</h3>
<p>The CAAElecLogicalElectricalSystem sample is made of a single class named CAAElecLogicalElectricalSystem 
located in the CAAElectricalSystem.m module of the CAAElecLogicalItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAElecLogicalItf.edu\CAAElectricalSystem.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATOmbLifeCycleRootsBag</em></td>
		<td>Class allowing to hold PLM components in PLM session.</td>
	</tr>
	<tr>
		<td><em>CAAAdpCreateCloseSession</em></td>
		<td>Class to create &amp; close a PLM session.</td>
	</tr>
	<tr>
		<td><em>CATIAdpEnvironment</em></td>
		<td>Interface dedicated to PLM environment.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>		
	<tr>	
		<td><em>CATCkeGlobalFunctions</em></td>
		<td>Class to retrieve the knowldge functions.</td>
	</tr>
	<tr>
		<td><em>CATCkeObjectAttrWriteServices</em></td>
		<td>Services to easily write attribute values on a Knowledge object.</td>
	</tr>	
	<tr>
		<td><em>CATICkeObject</em></td>
		<td>Interface representing an object that can be manipulated in the Knowledge language.</td>
	</tr>	
	<tr>	
		<td><em>CATICkeParm</em></td>
		<td>Interface dedicated to parameters management.</td>
	</tr>
	<tr>
		<td><em>CATICkeParmFactory</em></td>
		<td>Interface dedicated to manage the knowledge parameters factory.</td>
	</tr>		
	<tr>
		<td><em>CATListValCATICkeParm</em></td>
		<td>Collection class for Knowledge parameters.</td>
	</tr>
	<tr>
		<td><em>CATILogConnection</em></td>
		<td>Interface dedicated to Logical Connection.</td>
	</tr>	
	<tr>
		<td><em>CATILogInstance</em></td>
		<td>Interface dedicated to Logical Instance.</td>
	</tr>
	<tr>
		<td><em>CATILogInstances</em></td>
		<td>Interface dedicated to manage Logical Instances.</td>
	</tr>
	<tr>
		<td><em>CATILogPort</em></td>
		<td>Interface dedicated to Logical port.</td>
	</tr>
	<tr>
		<td><em>CATILogPorts</em></td>
		<td>Interface dedicated to manage Logical ports.</td>
	</tr>	
	<tr>
		<td><em>CATILogReference</em></td>
		<td>Interface dedicated to Logical Reference.</td>
	</tr>	
	<tr>
		<td><em>CATILogReferenceFactory</em></td>
		<td>Interface dedicated to create Logical References objects.</td>
	</tr>	
	<tr>
		<td><em>CATILogTypeReference</em></td>
		<td>Interface dedicated to Logical Type Reference.</td>
	</tr>			
	<tr>	
		<td><em>CATListValCATILogInstance</em></td>
		<td>Collection class for smart pointers to logical instances</td>
	</tr>	
	<tr>	
		<td><em>CATLogFactoriesProvider</em></td>
		<td>Provider class to retrieve the Logical factories.</td>
	</tr>		
	<tr>
		<td><em><b>CATIEleLogicalConnectorPort</b></em></td>
		<td>Interface dedicated to manage Electrical Connector Ports.</td>
	</tr>		
	<tr>	
		<td><em><b>CATIEleLogicalEquipmentInst</b></em></td>
		<td>Interface dedicated to manage Electrical Equipment Instance.</td>
	</tr>	
	<tr>	
		<td><em><b>CATIEleLogicalEquipmentRef</b></em></td>
		<td>Interface dedicated to manage Electrical Equipment Reference.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalExtensions</b></em></td>
		<td>Interface dedicated to extend Logical References &amp; Ports to Electrical objects.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalGroupLink</b></em></td>
		<td>Interface dedicated to manage Electrical Group Links.</td>
	</tr>		
	<tr>
		<td><em><b>CATIEleLogicalNetInst</b></em></td>
		<td>Interface dedicated to manage Electrical Net Instance.</td>
	</tr>
	<tr>
		<td><em><b>CATIEleLogicalNetRef</b></em></td>
		<td>Interface dedicated to manage Electrical Net Reference.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalPin</b></em></td>
		<td>Interface dedicated to Electrical Pins.</td>
	</tr>	
	<tr>
		<td><em><b>CATIEleLogicalReference</b></em></td>
		<td>Interface dedicated to manage Electrical Equipment, Connector &amp; Busbar.</td>
	</tr>											
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment a electrical system creation and it&#8217;s components by looking at the code of the Main.
There are 10 steps to create the electrical system, 2 steps to create functions and 8 steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Implementing Functions to Create Logical Entities</a></td>
	</tr>	
	<tr>
		<td>2</td>
		<td><a href="#Step2">Implementing Functions to Create Electrical Entities</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a PLM Session with the Input Parameters and Setting the PLM Environment</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating an Equipment Reference and its Electrical Ports</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Creating Nets References and theirs Ports</a></td>
	</tr>	
	<tr>
		<td>6</td>
		<td><a href="#Step6">Creating an Electrical System Reference and its Composition</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Connecting Components in an Electrical System</a></td>
	</tr>	
	<tr>
		<td>8</td>
		<td><a href="#Step8">Listing Electrical System Components</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Listing Electrical Ports of Equipment</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Listing Electrical Ports of Connector Port</a></td>
	</tr>		
	<tr>
		<td>11</td>
		<td><a href="#Step11">Closing the PLM Session</a></td>
	</tr>															
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implementing Functions to Create Logical Entities</h3>
<p>We create &amp; implement functions to create logical entities in order to avoid duplicated code content.</p>
<pre class="code">
//---------------------------------------------------------------------------------
// Create a logical reference
//---------------------------------------------------------------------------------
HRESULT CreateLogReference ( CATUnicodeString isLogReferenceName , 
                             CATILogReference *&amp; opLogReference )
{
  /*
   * Service to create a logical reference.
   * Release opLogReference after last use.
   */

   if ( opLogReference ) {
    return E_INVALIDARG ;
  }

  // Retrieve logical reference factory
  CATILogReferenceFactory * pLogReferenceFactory = NULL ;
  HRESULT HR = CATLogFactoriesProvider::GetReferenceFactory ( pLogReferenceFactory ) ;
  if ( FAILED ( HR ) || !pLogReferenceFactory )
  {
    // Clean
    if ( pLogReferenceFactory ) {
      pLogReferenceFactory -&gt; Release () ;
      pLogReferenceFactory = NULL ;
    }
    return E_FAIL ;
  }
  
  // Retrieve project environment
  PLMPSISessionHelpers * pSessionHelpers = NULL ;
  HR = PLMPSISessionHelpers::GetSessionHelpers ( pSessionHelpers ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pSessionHelpers )
  {
    CATIAdpEnvironment * pIAdpEnvironment = NULL ;
    HR = pSessionHelpers -&gt; GetCurrentEnvironment ( pIAdpEnvironment ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; pIAdpEnvironment )
    {
      // Initialize parameter
      HR = E_FAIL ;
      CATIType_var spType ;
      CATListValCATICkeParm_var LFctAttributesValues ;
      CATILogTypeReference * pLogicalTypeReference = NULL ;

      // Create a logical reference
      HR =  pLogReferenceFactory -&gt; CreateReference ( spType , pIAdpEnvironment , LFctAttributesValues , opLogReference ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference &amp;&amp; isLogReferenceName . GetLengthInChar () ) 
      {
        // Set identifier of the logical reference
        HR = E_FAIL ;
        const CATUnicodeString sIdentifierAttr ( "PLM_ExternalID" ) ;
        const CATICkeObject_var spCkeObject ( opLogReference ) ;
        if ( spCkeObject != NULL_var ) 
        {
          HR = CATCkeObjectAttrWriteServices::SetValueWithString ( spCkeObject , sIdentifierAttr , isLogReferenceName ) ;  
        }
      }
    }
    // Clean
    if ( pIAdpEnvironment ) {
      pIAdpEnvironment -&gt; Release () ;
      pIAdpEnvironment = NULL ;
    }
  }
  // Clean
  if ( pLogReferenceFactory ) {
    pLogReferenceFactory -&gt; Release () ;
    pLogReferenceFactory = NULL ;
  }
  return HR ;
}

//---------------------------------------------------------------------------------
// Create a logical instance
//---------------------------------------------------------------------------------
HRESULT CreateLogInstance ( CATUnicodeString isLogInstanceName , 
                            CATILogReference * ipLogReferenceToInstantiate ,
                            CATILogReference * ipFatherLogReference ,
                            CATILogInstance *&amp; opLogInstance ) 
{
  /*
   * Service to create a logical instance.
   * Release opLogInstance after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a logical port
//---------------------------------------------------------------------------------
HRESULT CreateLogPort ( CATUnicodeString isLogPortName , 
                        CATILogReference * ipLogReference ,
                        CATILogPort *&amp; opLogPort ,
                        CATILogPort::PortDirection iPortDirection = CATILogPort::InOut )
{
  /*
   * Service to create a logical port.
   * Release opLogPort after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a logical connection
//---------------------------------------------------------------------------------
HRESULT CreateLogConnection ( CATUnicodeString isLogConnectionName , 
                              CATILogInstance * ipStartLogInstance ,
                              CATILogPort * ipStartLogPort ,
                              CATILogInstance * ipTargetLogInstance ,
                              CATILogPort * ipTargetLogPort ,
                              CATILogConnection *&amp; opLogConnection )
{

  /*
   * Service to create a logical connection.
   * Release opLogConnection after last use.
   */
  ...
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing Functions to Create Electrical Entities</h3>
<p>We create &amp; implement functions to create electrical entities in order to avoid duplicated code content.</p>
<pre class="code">
//---------------------------------------------------------------------------------
// Create a equipment reference
//---------------------------------------------------------------------------------
HRESULT CreateEquipmentReference ( CATUnicodeString isEquipmentRefName , 
                                   CATIEleLogicalEquipmentRef *&amp; opEquipmentRef )
{
  /*
  * Service to create an equipment reference.
  * Release opEquipmentRef after last use.
  */

  if ( opEquipmentRef ) {
    return E_INVALIDARG ;
  }

  // Create logical reference
   CATILogReference * opLogReference = NULL ;
  HRESULT HR = ::CreateLogReference ( isEquipmentRefName , opLogReference ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference ) 
  {
    HR = E_FAIL ;
    CATIEleLogicalExtensions_var spExtensions ( opLogReference ) ;
    if ( spExtensions != NULL_var ) 
    {
      // Extend the logical reference into an equipment
      HR = spExtensions -&gt; ExtendIntoEquipment () ;
    }
  }

  // Set output equipment parameter
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogReference ) 
  {
    HR = opLogReference -&gt; QueryInterface ( IID_CATIEleLogicalEquipmentRef , ( void ** ) &amp; opEquipmentRef ) ;
  }
  // Clean
  if ( opLogReference ) {
    opLogReference -&gt; Release () ;
    opLogReference = NULL ;
  }
  return HR ;
}

//---------------------------------------------------------------------------------
// Create a net reference
//---------------------------------------------------------------------------------
HRESULT CreateNetReference ( CATUnicodeString isNetRefName , 
                             CATIEleLogicalNetRef *&amp; opNetRef )
{
  /*
   * Service to create an net reference.
   * Release opNetRef after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a connector port
//---------------------------------------------------------------------------------
HRESULT CreateConnectorPort ( CATUnicodeString isConnectorPortName , 
                              CATILogReference * ipReference ,
                              CATIEleLogicalConnectorPort *&amp; opConnectorPort ,
                              CATIEleLogicalConnectorPort::ConnectorPortType iConnectorPortType ,
                              CATILogPort::PortDirection iPortDirection ,
                              CATIEleLogicalConnectorPort * ipConnectorPortGroup )
{
  /*
   * Service to create an electrical connector port.
   * If "ipConnectorPortGroup" is a valid object , it will group the created pin.
   * Release opConnectorPort after last use.
   */
  ...
}

//---------------------------------------------------------------------------------
// Create a pin
//---------------------------------------------------------------------------------
HRESULT CreatePin ( CATUnicodeString isPinName , 
                    CATILogReference * ipReference ,
                    CATIEleLogicalPin *&amp; opPin ,
                    CATILogPort::PortDirection iPortDirection ,
                    CATIEleLogicalConnectorPort * ipConnectorPortGroup )
{
  /*
   * Service to create an electrical pin.
   * If "ipConnectorPortGroup" is a valid object , it will group the created pin.
   * Release opPin after last use.
   */
  ...
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a PLM Session with the Input Parameters and Setting the PLM Environment</h3>
<p>We create a PLM session with input parameters to connect to the database &amp; set environment.</p>
<pre class="code">...
if ( 7 != argc )
{
   cout &lt;&lt; endl;
   cout &lt;&lt;&quot;CAAElecLogicalElectricalSystem &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
   cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
   cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
   cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
   cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
   cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
   cout &lt;&lt; endl;
   retCode = 1;
   goto EscapeWay;
}
...
const char * sRepository  = argv [ 1 ] ;
const char * sServerName  = argv [ 2 ] ;
const char * sUserName    = argv [ 3 ] ;
const char * sPassword    = argv [ 4 ] ;
const char * sSecurityCtx = argv [ 5 ] ;
const char * sEnvToUse    = argv [ 6 ] ;

HR = ::CAAAdpCreateSession ( sRepository , sServerName , sUserName , sPassword , sSecurityCtx ) ;
if ( SUCCEEDED ( HR ) )
{
  HR = PLMPSISessionHelpers::GetSessionHelpers ( pSessionHelpers ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pSessionHelpers )
  {
    HR = pSessionHelpers -&gt; SetCurrentEnvironment ( sEnvToUse ) ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating an Equipment Reference and its Electrical Ports</h3>
<p>We create an equipment reference, create a connector port, create three pins to group under the connector port.</p>
<pre class="code">...
// Create equipment reference
HR = ::CreateEquipmentReference ( "Equipment Reference" , opEquipmentRef ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opEquipmentRef )
{
    // Is It an equipment reference ?
    CATIEleLogicalEquipmentRef_var spEquipmentRef ( opEquipmentRef ) ;
    if ( spEquipmentRef != NULL_var ) 
    {
      // Insert component in bag
      HR = Bag . InsertRoot ( opEquipmentRef ) ;
      if ( SUCCEEDED ( HR ) ) 
      {
        CATILogReference * pLogReference = NULL;
        HR = opEquipmentRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReference ) ;
        if ( SUCCEEDED ( HR ) &amp;&amp; pLogReference ) 
        {
          // Create connector port
          HR = ::CreateConnectorPort ( "C1" , pLogReference , opConnectorPort ) ;
          if ( SUCCEEDED ( HR ) &amp;&amp; opConnectorPort )
          {
            // Create 3 pins under "C1" connector port
            HR = ::CreatePin ( "Pin1" , pLogReference , opPin1 , CATILogPort::InOut , opConnectorPort ) ;
            if ( SUCCEEDED ( HR ) &amp;&amp; opPin1 ) {
              HR = ::CreatePin ( "Pin2" , pLogReference , opPin2 , CATILogPort::InOut , opConnectorPort ) ;
              if ( SUCCEEDED ( HR ) &amp;&amp; opPin2 ) {
                HR = ::CreatePin ( "Pin3" , pLogReference , opPin3 , CATILogPort::InOut , opConnectorPort ) ;
              }
            }
          }
        }
        if ( pLogReference ) {
          pLogReference -&gt; Release () ;
          pLogReference = NULL ; 
        }
      }
   }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating Nets References and theirs Ports</h3>
<p>We create three nets references with theirs logical ports.</p>
<pre class="code">...
// Create net reference
HR = ::CreateNetReference ( "Net Reference 1" , opNetRef1 ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opNetRef1 )
{
    // Is It an net reference ?
    CATIEleLogicalNetRef_var spNetRef ( opNetRef1 ) ;
    if ( spNetRef != NULL_var ) 
    {
      // Insert component in bag
      HR = Bag . InsertRoot ( opNetRef1 ) ;
      if ( SUCCEEDED ( HR ) ) 
      {
        CATILogReference * pLogReference = NULL;
        HR = opNetRef1 -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReference ) ;
        if ( SUCCEEDED ( HR ) &amp;&amp; pLogReference ) 
        {
          // Create logical ports
          HR = ::CreateLogPort ( "Port 1" , pLogReference , opNet1Port1 ) ;
          if ( SUCCEEDED ( HR ) &amp;&amp; opNet1Port1 ) {
            HR = ::CreateLogPort ( "Port 2" , pLogReference , opNet1Port2 ) ;
          }
        }
        if ( pLogReference ) {
          pLogReference -&gt; Release () ;
          pLogReference = NULL ; 
        }
      }
   }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating an Electrical System Reference and its Composition</h3>
<p>We create an electrical system reference &amp; create electrical components under this reference.</p>
<pre class="code">...
// Create electrical system reference
HR = ::CreateLogReference ( "Electrical System" , opElectricalSystemReference ) ;
if ( SUCCEEDED ( HR ) &amp;&amp; opElectricalSystemReference )
{
  // Insert component in bag
  HR = Bag . InsertRoot ( opElectricalSystemReference ) ;
}

...

// Create equipment instances
if ( opEquipmentRef ) 
{
  CATILogReference * pLogReferenceToInstantiate = NULL ;
  HR = opEquipmentRef -&gt; QueryInterface ( IID_CATILogReference , ( void ** ) &amp; pLogReferenceToInstantiate ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; pLogReferenceToInstantiate ) 
  {
    // Create logical instances 
    HR = ::CreateLogInstance ( "Equipment 1" , pLogReferenceToInstantiate , opElectricalSystemReference , opEquipment1 ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; opEquipment1 ) {
      HR = ::CreateLogInstance ( "Equipment 2" , pLogReferenceToInstantiate , opElectricalSystemReference , opEquipment2 ) ;
      if ( SUCCEEDED ( HR ) &amp;&amp; opEquipment2 ) {
        HR = ::CreateLogInstance ( "Equipment 3" , pLogReferenceToInstantiate , opElectricalSystemReference , opEquipment3 ) ;
      }
    }
  }
  if ( pLogReferenceToInstantiate ) {
    pLogReferenceToInstantiate -&gt; Release () ;
    pLogReferenceToInstantiate = NULL ; 
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Connecting Components in an Electrical </h3>
<p>We connect nets ports to pins of equipments components in an electrical system</p>
<pre class="code">...
// Connect "Net 1" component through "Port 1" port to "Pin1" port of "Equipment 1" component
// Connect "Net 1" component through "Port 2" port to "Pin1" port of "Equipment 2" component
if ( opPin1 ) {
  CATILogPort * opLogPort = NULL ;
  HR = opPin1 -&gt; QueryInterface ( IID_CATILogPort , ( void ** ) &amp; opLogPort ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; opLogPort ) 
  {
    HR = ::CreateLogConnection ( "Net 1 - Port 1 --- Pin1 - Equipment 1" , 
                                  opNet1 , opNet1Port1 ,
                                  opEquipment1 , opLogPort ,
                                  opLogConnection1 ) ;
    if ( SUCCEEDED ( HR ) &amp;&amp; opLogConnection1 ) {
      HR = ::CreateLogConnection ( "Net 1 - Port 2 --- Pin1 - Equipment 2" , 
                                    opNet1 , opNet1Port2 ,
                                    opEquipment2 , opLogPort ,
                                    opLogConnection2 ) ;
    }
  }
  if ( opLogPort ) 
  {
    opLogPort -&gt; Release () ;
    opLogPort = NULL ;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Listing Electrical System Components</h3>
<p>Listing &amp; navigating in electrical system components.</p>
<pre class="code">...
// Use LogInstances interface to list instances
spLogInstances = CATILogInstances_var ( opElectricalSystemReference ) ;
if ( spLogInstances != NULL_var ) 
{
  // List of 6 instances
  HR = spLogInstances -&gt; List ( oListInstances ) ;
  if ( SUCCEEDED ( HR ) &amp;&amp; oListInstances . Size () == 6 )
  {
    // Loop list in order to get every object
    for ( int i = 1; i &lt;= oListInstances . Size () ; i++ ) 
    {
      // Component may be an equipment or a net ?
      CATIEleLogicalEquipmentInst_var spEquipmentInst ( oListInstances [ i ] ) ;
      CATIEleLogicalNetInst_var spNetInst ( oListInstances [ i ] ) ;
      if ( spEquipmentInst == NULL_var &amp;&amp; spNetInst == NULL_var ) 
      {
        HR = E_FAIL ;
        break;
      }
    }
  }
}
...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Listing Electrical Ports of Equipment</h3>
<p>Listing &amp; electrical ports of an equipment components.</p>
<pre class="code">...
// List electrical ports through reference interface
spReference = CATIEleLogicalReference_var ( opEquipmentRef );
if ( spReference != NULL_var ) 
{
  CATListValCATBaseUnknown_var * opListConnectorPorts = NULL ;
  CATString sFilterType = "ConnectorPort" ;
  HR = spReference -&gt; ListElectricalPorts ( sFilterType, opListConnectorPorts );
  if ( SUCCEEDED ( HR ) &amp;&amp; opListConnectorPorts &amp;&amp; opListConnectorPorts -&gt; Size () == 1 )
  {
    // Loop list
    for ( int i = 1; i &lt;= opListConnectorPorts -&gt; Size (); i++ ) {
      CATIEleLogicalConnectorPort_var spConnectorPort ( ( *opListConnectorPorts ) [ i ] );
      if ( spConnectorPort == NULL_var ) 
      {
        // It's not a connector port
        HR = E_FAIL;
        break;
      }
    }
  }
  // Unexpected result
  else HR = E_FAIL ;
  if ( opListConnectorPorts )
  {
    delete opListConnectorPorts ;
    opListConnectorPorts = NULL;
  }
}
...</pre>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Listing Electrical Ports of Connector Port</h3>
<p>Listing &amp; electrical ports of an connector port.</p>
<pre class="code">...
// Retrieve group link interface
spGroupLink = CATIEleLogicalGroupLink_var ( opConnectorPort ) ;
if ( spGroupLink != NULL_var )
{
  // List grouped pin under this connector port
  CATString sFilterType = "Pin" ;
  CATListValCATBaseUnknown_var * opListPins = NULL ;
  HR = spGroupLink -&gt; ListGroupedObjects ( sFilterType , opListPins );
  if ( SUCCEEDED ( HR ) &amp;&amp; opListPins &amp;&amp; opListPins -&gt; Size () == 3 ) {
    // Loop list
    for ( int i = 1; i &lt;= opListPins -&gt; Size (); i++ ) {
      CATIEleLogicalPin_var spPin ( ( *opListPins ) [ i ] );
      if ( spPin == NULL_var ) 
      {
        // It's not a pin
        HR = E_FAIL;
        break;
      }
    }
  }
  // Unexpected result
  else HR = E_FAIL ;
  if ( opListPins )
  {
    delete opListPins ;
    opListPins = NULL;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Closing the PLM Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...
HR = ::CAAAdpCloseSession() ;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In short</h2>
<p>This use case has demonstrated the way to create an Electrical System.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1.0</strong> [Aug 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2.0</strong> [Dec 2010]</td>
		<td>Document updated to support new electrical &amp; logical APIs</td>
	</tr>	
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
