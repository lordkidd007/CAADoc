<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving the Active Plane</title>
<style type="text/css">
.auto-style1 {
	color: #FF7900;
	text-decoration: underline;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving the Active Plane</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the ElecFlatteningItf use case. This use case 
		explains how to retrieve the flattening parameters and read the associated 
		active plane.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAEhfFlatteningParameters Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAEhfFlatteningParameters D<span class="auto-style1">o</span></a></li>
				<li><a href="#How">How to Launch CAAEhfFlatteningParameters</a></li>
				<li><a href="#Where">Where to Find the CAAEhfFlatteningParameters 
					Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA EHF Interfaces. Its main intent is to allow you to retrieve the flattening 
parameters and read the associated active plane.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAEhfFlatteningParameters Use Case</h2>
<p>CAAEhfFlatteningParameters.m is a use case of the CAAElecFlatteningItf.edu framework 
that illustrates the CATIA EHF Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEhfFlatteningParameters Do</h3>
<p>The goal of CAAEhfFlatteningParameters use case is to show how to to retrieve 
the flattening parameters and read the associated active plane</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAEhfFlatteningParameters</h3>
<p>To launch CAAEhfFlatteningParameters , you will need to set up the build time 
environment, then compile CAAEhfFlatteningParameters along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mktun -c &quot; CAAEhfFlatteningParameters Repository Server User Password SecutityCtx Environment PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <b>CAAEhfRetrieveParameters.3dxml</b>
    file from the  <b>CAAElecFlatteningItf.edu</b> fwk.
   (Import the 3dxml as 'reference' and not 'import as New')
</p>
<p><code>InstallRootFolder\CAADoc\CAAElecFlatteningItf.edu\InputData\CAAEhfRetrieveParameters.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><b>PLM_ExternalID</b></code></a>:
    <code>3DHarness</code></li>
  <li><a><code><b>Version</b></code></a>:
    ---</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEhfFlatteningParameters Code</h3>
<p>The CAAEhfFlatteningParameters sample is made of a single class named CAAEhfFlatteningParameters 
located in the CAAEhfFlatteningParameters .m module of the CAAElecFlatteningItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAElecFlatteningItf.edu\CAAEhfFlatteningParameters.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>CATAdpDictionaryServices</em></td>
		<td>Class to provide all basic functions to browse and navigate on PLM dictionaries.</td>
	</tr>
	<tr>
		<td><em>CATAdpQueryServices</em></td>
		<td>Class to manage queries on PLM component in database.</td>
	</tr>
	<tr>
		<td><em>CATAdpOpenSaveServices</em></td>
		<td>Class to manage Open and Save in session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CATPsiPLMFactory</em></td>
		<td>Class to retrieve the Product Reference or Representation Reference 
		factory.</td>
	</tr>
	<tr>
		<td><em>CATIEhfEnvironment</em></td>
		<td>Interfaces dedicated to retrieve the flattening parameters.</td>
	</tr>
	<tr>
		<td><em>CATIEhfFlatteningParameters</em></td>
		<td>Interfaces dedicated to read attribute on flattening parameters.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Electrical environment and it&#8217;s components creation 
by looking at the code of the Main. There are nine logical steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Setting the Current Environment to &quot;envToUse&quot; from 
		Input</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Retrieving the Environment</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Querying/Opening/Expanding the Reference Product with 
		its Associated Representation</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Querying/Opening/Expanding the Flat Para 
		Representation</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Getting/Setting Flattening Parameters</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
if (8 != argc)
{
  cout &lt;&lt; endl;
  cout &lt;&lt;&quot;CAAEhfFlattenManagerExtract &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
  cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
  cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Environment: A PLM environment containing PLMProductDS (a PRODUCT's custo).&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  goto EscapeWay;
}
envToUse = argv[6];
repository = argv[1];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection Parameters initialization</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;Repository&quot;, argv[1]);
if (FAILED(hr)) 
{
  retCode = 2;
  goto EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;Server&quot;, argv[2]);
if (FAILED(hr)) 
{
  retCode = 3;
  goto EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;UserID&quot;, argv[3]);
if (FAILED(hr))
{
  retCode = 4;
  goto EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;UserPasswd&quot;, argv[4]);
if (FAILED(hr)) 
{
  retCode = 5;
  goto EscapeWay;
}

hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;SecurityCtx&quot;, argv[5]);
if (FAILED(hr))
{
  retCode = 6;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
if (FAILED(hr))
{
  retCode = 7;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting the Current Environment to &quot;envToUse&quot; from 
Input</h3>
<pre class="code">...
hr = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
if (SUCCEEDED(hr) &amp;&amp; (NULL != pSessionHelpers))
{
  hr = pSessionHelpers-&gt; SetCurrentEnvironment(envToUse);
  if ( FAILED(hr) )
  {
    retCode = 8;
    goto EscapeWay;
  }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Environment</h3>
<pre class="code">...
hr = CATAdpDictionaryServices::GetEnvironment(repository, envToUse, &amp;pIAdpEnvironment);
if ( FAILED(hr) || ( NULL == pIAdpEnvironment) )
{
  retCode = 9;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Querying/Opening/Expanding the Reference Product with its 
Associated Representation</h3>
<p>Retrieve the customized Reference of the Product modeler</p>
<pre class="code">...
hr = pIAdpEnvironment-&gt; GetAuthoringType(modeler, coreTypeRef, IID_CATIAdpType, (void**) &amp;pIAdpPLMCoreRef);
if (FAILED(hr) || ( NULL == pIAdpPLMCoreRef) )
{
  retCode = 10;
  goto EscapeWay;
}

// Open the xxxCAAMatProductReference
rootPrdName = argv[7] ;
identificationSetRootPrd.AddAttribute(attrId, rootPrdName);

hr = CATAdpQueryServices::GetElementByIdentificationSet(pIAdpPLMCoreRef, identificationSetRootPrd, pIPLMIdent);
if ( (FAILED(hr)) || (NULL == pIPLMIdent) )
{
  retCode = 11;
  goto EscapeWay;
}

hr = CATAdpOpenSaveServices::ExpandAndOpen(pIPLMIdent, IID_CATIPLMProducts, (void**) &amp;pIRootProduct,CATAdpOpenSaveServices::Authoring);
if ( (FAILED(hr)) || (NULL == pIRootProduct) )
{
  retCode = 12;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Querying/Opening/Expanding the Flat Para Representation</h3>
<pre class="code">...
hr = pIAdpEnvironment-&gt; GetAuthoringType(modelerRep, coreTypeRepRef, IID_CATIAdpType, (void**) &amp;pIAdpPLMCoreRepRef);
if (FAILED(hr) || ( NULL == pIAdpPLMCoreRepRef) )
{
  retCode = 13;
  goto EscapeWay;
}

ehfRepInstName = rootPrdName + &quot;_FlatteningRepresentation&quot; ;
identificationSetEhfRepInstName.AddAttribute(attrId, ehfRepInstName);

hr = CATAdpQueryServices::GetElementByIdentificationSet(pIAdpPLMCoreRepRef,
identificationSetEhfRepInstName,
pIPLMIdentRep);
if ( (FAILED(hr)) || (NULL == pIPLMIdentRep) )
{
  retCode = 14;
  goto EscapeWay;
}

hr = CATAdpOpenSaveServices::OpenRepresentation(pIPLMIdentRep,
IID_CATBaseUnknown,
(void **)&amp;pIUnkProductRep) ;

if ( (FAILED(hr)) || (NULL == pIUnkProductRep) )
{
  retCode = 15;
  goto EscapeWay;
}

hr = pIRootProduct-&gt;QueryInterface(IID_CATIEhfEnvironment,(void**)&amp;pIEhfEnvironment);
if ( FAILED(hr) )
{
  retCode = 16;
 goto EscapeWay;
} 

hr = pIEhfEnvironment-&gt;GetFlatteningParameters(&amp;phListFlatteningPara);
if ( ( FAILED(hr) ) || ( NULL == phListFlatteningPara ) )
{
  retCode = 17;
  goto EscapeWay;
}

nbFlatteningPara = phListFlatteningPara-&gt;Size();
if (0 &gt;= nbFlatteningPara)
{
  retCode = 18;
  goto EscapeWay;
}

hUnkFlatteningPara = (*phListFlatteningPara)[1];
if (NULL_var == hUnkFlatteningPara)
{
  retCode = 19;
  goto EscapeWay;
}

hr = hUnkFlatteningPara-&gt;QueryInterface(IID_CATIEhfFlatteningParameters, (void **)&amp;pIFlatteningPara);
if ( FAILED(hr) )
{
  retCode = 20;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Getting/Setting Flattening Parameters</h3>
<pre class="code">...
 // -------------------------------------------------------------------------
// - Get an Active Plane
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetPlane(ActivePlane);
if ( FAILED(hr) )
{
  retCode = 21;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set Name of the flattening parameters
// -------------------------------------------------------------------------
setpName = new CATUnicodeString();
(*setpName) = (&quot;My_FlatPara&quot;);

hr = pIFlatteningPara-&gt;SetName(setpName);
if ( ( FAILED(hr) ) || ( NULL == setpName ) )
{
  retCode = 22;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get Name of the flattening parameters
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetName(getName);
compareName = getName.Compare(&quot;My_FlatPara&quot;);

if( ( FAILED(hr) ) || ( 2 != compareName ) )
{
  retCode = 23;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set Algorithm Mode
// -------------------------------------------------------------------------
setpAlgoMode = new CATString();
(*setpAlgoMode) = (&quot;Coarse&quot;);

hr = pIFlatteningPara-&gt;SetAlgorithmMode(setpAlgoMode);
if ( ( FAILED(hr) ) || ( NULL == setpAlgoMode ) )
{
  retCode = 24;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get Algorithm Mode
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetAlgorithmMode(getAlgoMode);
compareAlgo = getAlgoMode.Compare(&quot;Coarse&quot;);

if ( ( FAILED(hr) ) || ( 0 != compareAlgo ) )
{
  retCode = 25;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set Angle Mode
// -------------------------------------------------------------------------
setpAngleMode = new CATString();
(*setpAngleMode) = (&quot;Regular&quot;);

hr = pIFlatteningPara-&gt;SetAngleMode(setpAngleMode);
if ( ( FAILED(hr) ) || ( NULL == setpAngleMode ) )
{
  retCode = 26;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get Angle Mode
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetAngleMode(getAngleMode);
compareAngle = getAngleMode.Compare(&quot;Regular&quot;);

if ( ( FAILED(hr) ) || ( 0 != compareAngle ))
{
  retCode = 27;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get Minimum Angle Between Branches
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetMinAngleBetweenBranches(getpICkeInstMinAngle);
if ( ( FAILED(hr) ) || ( NULL == getpICkeInstMinAngle ) )
{
  retCode = 28;
  goto EscapeWay;
}
else
{
  minAngleDefault = getpICkeInstMinAngle-&gt;AsReal() ;
  if( !(FlattenEQ(minAngleDefault, 10.0)) )
  {
    retCode = 29;
    goto EscapeWay;
  }
}

// -------------------------------------------------------------------------
// - Set Minimum Angle Between Branches
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetMinAngleBetweenBranches(getforsetpICkeInstMinAngle);
hr = pIFlatteningPara-&gt;SetMinAngleBetweenBranches(getforsetpICkeInstMinAngle);
if( FAILED(hr) )
{
  retCode = 30;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set whether to extract supports inside the geometrical harness
// -------------------------------------------------------------------------
setOnlySupportsInsideGBNExtracted = TRUE;

hr = pIFlatteningPara-&gt;SetExtractOnlySupportsInsideGBN(&amp;setOnlySupportsInsideGBNExtracted);
if ( FAILED(hr) )
{
  retCode = 30;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get whether to extract supports inside the geometrical harness
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetExtractOnlySupportsInsideGBN(getOnlySupportsInsideGBNExtracted);
if ( FAILED(hr) || ( setOnlySupportsInsideGBNExtracted != getOnlySupportsInsideGBNExtracted ))
{
  retCode = 32;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set device orientation
// -------------------------------------------------------------------------
setpDeviceOrientation = new CATString();
(*setpDeviceOrientation) = (&quot;Without_Orientation&quot;);

hr = pIFlatteningPara-&gt;SetDeviceOrientation(setpDeviceOrientation);
if ( ( FAILED(hr) ) || ( NULL == setpDeviceOrientation ) )
{
  retCode = 33;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get device orientation
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetDeviceOrientation(getDeviceOrientation);
compareDevice = getDeviceOrientation.Compare(&quot;Without_Orientation&quot;);

if ( ( FAILED(hr) ) || ( 0 != compareDevice ))
{
  retCode = 34;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set support orientation
// -------------------------------------------------------------------------
setpSupportOrientation = new CATString();
(*setpSupportOrientation) = (&quot;Regular_angle&quot;);

hr = pIFlatteningPara-&gt;SetSupportOrientation(setpSupportOrientation);
if ( ( FAILED(hr) ) || ( NULL == setpSupportOrientation ) )
{
  retCode = 35;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get support orientation
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetSupportOrientation(getSupportOrientation);
compareOrientation = (getSupportOrientation).Compare(&quot;Regular_angle&quot;);

if ( ( FAILED(hr) ) || ( 0 != compareOrientation ))
{
  retCode = 36;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set is scaling applied
// -------------------------------------------------------------------------
setScalingApplied = TRUE;

hr = pIFlatteningPara-&gt;SetApplyScaling(&amp;setScalingApplied);
if ( FAILED(hr) )
{
  retCode = 37;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get is scaling applied
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetApplyScaling(getScalingApplied);

if ( FAILED(hr) || ( setScalingApplied != getScalingApplied ))
{
  retCode = 38;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set minumum number of segments required to apply scaling
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;SetMinNumberOfBNSToApplyScaling(setMinNumberOfBNS);
if ( FAILED(hr) )
{
  retCode = 39;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get minumum number of segments required to apply scaling
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetMinNumberOfBNSToApplyScaling(getMinNumberOfBNS);
if ( FAILED(hr) || ( setMinNumberOfBNS != getMinNumberOfBNS ) ) 
{
  retCode = 40;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set if segment is scaled proportionally
// -------------------------------------------------------------------------
setBNSScaledProportionally = TRUE;

hr = pIFlatteningPara-&gt;SetScaleBNSProportionally(&amp;setBNSScaledProportionally);
if ( FAILED(hr))
{
  retCode = 41;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get if segment is scaled proportionally
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetScaleBNSProportionally(getBNSScaledProportionally);
if ( FAILED(hr) || ( setBNSScaledProportionally != getBNSScaledProportionally ))
{
  retCode = 42;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set the limited length
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetLimitedLength(getforsetpICkeInstLimitedLength);
hr = pIFlatteningPara-&gt;SetLimitedLength(getforsetpICkeInstLimitedLength);
if ( FAILED(hr) )
{
  retCode = 43;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get the limited length
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetLimitedLength(getpICkeInstLimitedLength);
if ( ( FAILED(hr) ) || ( NULL == getpICkeInstLimitedLength ) )
{
  retCode = 44;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Default value of limited length
// -------------------------------------------------------------------------
limitedLengthDefault = getpICkeInstLimitedLength -&gt;Show();
if( 0 == limitedLengthDefault.Compare(&quot;100mm&quot;) )
{
  retCode = 45;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set reduction factor
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;SetReductionFactor(setReductionFactor);
if ( FAILED(hr) )
{
  retCode = 46;
  goto EscapeWay;
} 

// -------------------------------------------------------------------------
// - Get reduction factor
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetReductionFactor(getReductionFactor);
if ( FAILED(hr) || ( setReductionFactor != getReductionFactor ) )
{
  retCode = 47;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set if reduction factor is applied to the whole segment
// -------------------------------------------------------------------------
setReductionFactorAppliedToWholeBNS = FALSE;

hr = pIFlatteningPara-&gt;SetApplyReductionFactorToWholeBNS(&amp;setReductionFactorAppliedToWholeBNS);
if( FAILED(hr) )
{
  retCode = 48;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get if reduction factor is applied to the whole segment
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetApplyReductionFactorToWholeBNS(getReductionFactorAppliedToWholeBNS);
if( FAILED(hr) || ( setReductionFactorAppliedToWholeBNS != getReductionFactorAppliedToWholeBNS ))
{
  retCode = 49;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set the fixed length
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetFixedLength(getforsetpICkeInstFixedLength);
hr = pIFlatteningPara-&gt;SetFixedLength(getforsetpICkeInstFixedLength);
if ( FAILED(hr) )
{
  retCode = 50;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get the fixed length
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetFixedLength(getpICkeInstFixedLength);
if ( ( FAILED(hr) ) || ( NULL == getpICkeInstFixedLength ) )
{
  retCode = 51;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Default value of fixed length
// -------------------------------------------------------------------------
fixedLengthDefault = getpICkeInstFixedLength -&gt;Show();
if( 0 == fixedLengthDefault.Compare(&quot;100mm&quot;) )
{
  retCode = 52;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set segment scaled during sync
// -------------------------------------------------------------------------
setpBNSType = new CATString();
(*setpBNSType) = (&quot;AllSegments&quot;);

hr = pIFlatteningPara-&gt;SetBNSTypeScaledDuringSync(setpBNSType);
if ( ( FAILED(hr) ) || ( NULL == setpBNSType ) )
{
  retCode = 53;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get segment scaled during sync
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetBNSTypeScaledDuringSync(getBNSType);
compareBNSType = getBNSType.Compare(&quot;AllSegments&quot;);

if ( ( FAILED(hr) ) || ( 0 != compareBNSType ))
{
  retCode = 54;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Set if intermediate points are moved during sync
// -------------------------------------------------------------------------
setMoveIntermediatePt = TRUE;

hr = pIFlatteningPara-&gt;SetMoveIntermediatePtDuringSync(&amp;setMoveIntermediatePt);
if ( FAILED(hr) )
{
  retCode = 55;
  goto EscapeWay;
}

// -------------------------------------------------------------------------
// - Get if intermediate points are moved during sync
// -------------------------------------------------------------------------
hr = pIFlatteningPara-&gt;GetMoveIntermediatePtDuringSync(getMoveIntermediatePt);
if ( FAILED(hr) || ( setMoveIntermediatePt != getMoveIntermediatePt ) )
{
  retCode = 56;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
if (FAILED(hr)) 
{
  cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
  retCode = 57;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to retrieve the active plane use by the 
harness flattening command.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
