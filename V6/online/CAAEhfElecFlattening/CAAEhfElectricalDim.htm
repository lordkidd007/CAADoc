<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Dimensioned Electrical Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Dimensioned Electrical Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the ElecFlatteningItf use case. This use case 
		explains how to retrieve dimensioned electrical components and validate 
		all the electrical components are dimensioned.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAEhfElectricalDim Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAEhfElectricalDim Do</a></li>
				<li><a href="#How">How to Launch CAAEhfElectricalDim</a></li>
				<li><a href="#Where">Where to Find the CAAEhfElectricalDim Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA EHF Interfaces. Its main intent is to allow you to retrieving dimensioned electrical 
components and validate all the electrical components are dimensioned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAEhfElectricalDim Use Case</h2>
<p>CAAEhfElectricalDim.m is a use case of the CAAElecFlatteningItf.edu framework 
that illustrates the CATIA EHF Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAEhfElectricalDim Do?</h3>
<p>The goal of CAAEhfElectricalDim use case is to show how to retrieve dimensioned electrical components 
and validate all the electrical components are dimensioned</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAEhfElectricalDim ?</h3>
<p>To launch CAAEhfElectricalDim , you will need to set up the build time 
environment, then compile CAAEhfElectricalDim along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mktun -c &quot;CAAEhfElectricalDim Repository Server User Password SecutityCtx Environment PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <strong>CAAEhfElectricalDim_3DHarnessDimensionedData.3dxml</strong>
    file from the  <strong>CAAElecFlatteningItf.edu</strong> framework.</p>
<p><code> InstallRootFolder\CAADoc\CAAElecFlatteningItf.edu\InputData\CAAEhfElectricalDim_3DHarnessDimensionedData.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>Root_Harness_Data 1572271413</code></li>
  <li><a><code><strong>Version</strong></code></a>:
    ---</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAEhfElectricalDim Code</h3>
<p>The CAAEhfElectricalDim sample is made of a single class named CAAEhfElectricalDim 
located in the CAAEhfElectricalDim.m module of the CAAElecFlatteningItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAAElecFlatteningItf.edu\CAAEhfElectricalDim.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>CATAdpDictionaryServices</em></td>
		<td>Class to provide all basic functions to browse and navigate on PLM dictionaries.</td>
	</tr>
	<tr>
		<td><em>CATAdpPLMQueryServices</em></td>
		<td>Class to manage queries on PLM component in database.</td>
	</tr>
	<tr>
		<td><em>CATAdpOpener</em></td>
		<td>Class managing the open of components in session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CATIEhfElectricalDim</em></td>
		<td>Interface to retrieve Dimensioned Electrical Components and to read attribute on Electrical Dimension.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Electrical environment and it&#8217;s components creation 
by looking at the code of the Main. There are nine logical steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Setting the Current Environment to &quot;envToUse&quot; from 
		input</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Retrieving the Environment</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Querying/Opening/Expanding the Reference Product</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Retrieving All Electrical Components and Electrical Dimensions</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Validating All Electrical Components Are Dimensioned</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
if (8 != argc)
{
cout &lt;&lt; endl;
cout &lt;&lt;&quot;CAAEhfFlattenManagerExtract &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Environment: A PLM environment containing PLMProductDS (a PRODUCT's custo).&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
cout &lt;&lt; endl;
retCode = 1;
goto EscapeWay;
}
envToUse = argv[6];
repository = argv[1];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection Parameters initialization.</p>
<pre class="code">...
hr = CATPLMSessionServices::SetPLMSessionParameter("Repository", argv[1]);
if (FAILED(hr)){ retCode = 2; goto EscapeWay; }

hr = CATPLMSessionServices::SetPLMSessionParameter("Server", argv[2]);
if (FAILED(hr)){ retCode = 3; goto EscapeWay; }

hr = CATPLMSessionServices::SetPLMSessionParameter("UserID", argv[3]);
if (FAILED(hr)){ retCode = 4; goto EscapeWay; }

hr = CATPLMSessionServices::SetPLMSessionParameter("UserPasswd", argv[4]);
if (FAILED(hr)){ retCode = 5; goto EscapeWay; }

hr = CATPLMSessionServices::SetPLMSessionParameter("SecurityCtx", argv[5]);
if (FAILED(hr)){ retCode = 6; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
hr = CATPLMSessionServices::InitPLMSession();
if (FAILED(hr)){ retCode = 7; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting the Current Environment to &quot;envToUse&quot; from 
Input</h3>
<pre class="code">...
hr = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
if (SUCCEEDED(hr) &amp;&amp; (NULL != pSessionHelpers))
{
  hr = pSessionHelpers-&gt;SetCurrentEnvironment(envToUse);
  if (FAILED(hr)){ retCode = 8; goto EscapeWay; }
}
...</pre>
<h3><a name="Step5"></a>Retrieving the Environment</h3>
<pre class="code">...
hr = CATAdpDictionaryServices::GetEnvironment(repository, envToUse, &amp;pIAdpEnvironment);
if ( FAILED(hr) || ( NULL == pIAdpEnvironment) ){ retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Querying/Opening/Expanding the Reference Product</h3>
<p>Retrieve the customized Reference of the Product modeler</p>
<pre class="code">...
hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", hTypeModeler);
if( ( FAILED(hr) || (NULL_var == hTypeModeler) ) ){ retCode = 10; goto EscapeWay; }

attributeSet.AddAttribute("PLM_ExternalID",argv[7]) ;
hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler,
                                                       attributeSet,
                                                       ListP_QueryResults) ;

if(1 &lt;= ListP_QueryResults.Size())
{
  pQueryResult = ListP_QueryResults[1] ;
  if(NULL != pQueryResult)
  {
    hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
    pQueryResult = NULL;
  }
}
if ( (FAILED(hr)) || (NULL == pIPLMIdent) ){ retCode = 11; goto EscapeWay; }

hr= adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMProducts, (void**) &amp;pIPLMProductRoot);
if ( (FAILED(hr)) || (NULL == pIPLMProductRoot) ){ retCode = 12; goto EscapeWay; }
...</pre>
<h3><a name="Step7"></a>Retrieving All Electrical Components and Electrical Dimensions</h3>
<pre class="code">...
//---------------------------------------------------------------
// - For retrieving the list of all products under root product
//---------------------------------------------------------------
hr = GetFilteredProducts( hProduct, ListProducts );
if ( (FAILED(hr)) || (  1 &gt; ListProducts.Size() ) ){ retVal = E_FAIL; goto EscapeWay; }

//-------------------------------------------------------------------------------
// - For retrieving the list of Electrical Components which are to be dimensioned
//-------------------------------------------------------------------------------
size = ListProducts.Size();
for ( index = 1; index &lt;= size; index++ )
{
  hProduct = ListProducts[index];
  if ( NULL_var == hProduct ){ continue; }
  
  //-------------------------------------------------------
  // - For retrieving the list of Parts from each product
  //-------------------------------------------------------
  hr = ListPartsFromProduct( hProduct, ListParts );
  if (FAILED(hr)){ continue; }

  //===================================================================
  //
  // Write the code, that scans all the electrical objects
  // within the root product
  //
  //===================================================================
}

//--------------------------------------------------------------------
// - For retrieving the list of Electrical Dimensions from each part
//--------------------------------------------------------------------
size = ListParts.Size();
for ( index = 1; index &lt;= size; index++ )
{
  hNavingObject = NULL_var;

  hNavingObject = ListParts[index];
  if ( NULL_var == hNavingObject ){ continue; }

  hr = GetElecDimFromPart(hNavingObject,oListElecDimension);
  if ( FAILED(hr) ){ retVal = E_FAIL; goto EscapeWay; }
}
...</pre>
<h3><a name="Step8"></a>Validating All Electrical Components Are Dimensioned</h3>
<pre class="code">...
size = iListElecDimension.Size();

for ( index = 1; index &lt;= size; index++)
{
  if (pIElectricalDim) { (pIElectricalDim)-&gt;Release(); pIElectricalDim =NULL; }
  if (pFirstEndPathElement) { (pFirstEndPathElement)-&gt;Release(); pFirstEndPathElement =NULL; }
  if (pSecndEndPathElement) { (pSecndEndPathElement)-&gt;Release(); pSecndEndPathElement =NULL; }
  if (pListSegments) { delete pListSegments; pListSegments =NULL; }

  hUnkElement = iListElecDimension[index];
  if ( NULL_var == hUnkElement ){ retVal = E_FAIL; goto EscapeWay; }
  
  hr = hUnkElement-&gt;QueryInterface(IID_CATIEhfElectricalDim, (void **) &amp;pIElectricalDim );
  if ( FAILED(hr) ){ retVal = E_FAIL; goto EscapeWay; }

  //------------------------------------------------------------------
  // - CATIEhfElectricalDim::GetFirstComponent
  //------------------------------------------------------------------
  <strong>hr = pIElectricalDim-&gt;GetFirstComponent(ipIPrdObjRoot,pFirstEndPathElement);</strong>
  if ( FAILED(hr) ){ retVal = E_FAIL; goto EscapeWay; }

  if ( NULL != pFirstEndPathElement )
  {
    pUnkElement = NULL ;

    pFirstEndPathElement-&gt;InitToLeafElement();

    pUnkElement = pFirstEndPathElement-&gt;NextFatherElement(); //Does not do addref
    if ( NULL == pUnkElement ){ retVal = E_FAIL; goto EscapeWay; }

    hUnkElement = pUnkElement;
    if ( NULL_var != hUnkElement )
    {
      locate = -1;
      locate = ListDimensionedComponents.Locate(hUnkElement);
      if (1 &gt; locate)
      {
        ListDimensionedComponents.Append(hUnkElement);
      }
    }
  }

  //------------------------------------------------------------------
  // - CATIEhfElectricalDim::GetSecondComponent
  //------------------------------------------------------------------
  <strong>hr = pIElectricalDim-&gt;GetSecondComponent(ipIPrdObjRoot,pSecndEndPathElement);</strong>
  if ( FAILED(hr) ){ retVal = E_FAIL; goto EscapeWay; }

  if ( NULL != pSecndEndPathElement )
  {
    pUnkElement = NULL ;

    pSecndEndPathElement-&gt;InitToLeafElement();

    pUnkElement = pSecndEndPathElement-&gt;NextFatherElement(); //Does not do addref
    if ( NULL == pUnkElement ){ retVal = E_FAIL; goto EscapeWay; }

    hUnkElement = pUnkElement;
    if ( NULL_var != hUnkElement )
    {
      locate = -1;
      locate = ListDimensionedComponents.Locate(hUnkElement);
      if (1&gt; locate)
      {
        ListDimensionedComponents.Append(hUnkElement);
      }
    }
  }

  //------------------------------------------------------------------
  // - CATIEhfElectricalDim::GetSegmentList
  //------------------------------------------------------------------
  <strong>hr = pIElectricalDim-&gt;GetSegmentList(ipIPrdObjRoot,pListSegments);</strong>
  if( FAILED(hr) || ( NULL == pListSegments ) || ( 1 &gt; pListSegments-&gt;Size() ) ){ retVal = E_FAIL; goto EscapeWay; }

  sizeListSeg = pListSegments-&gt;Size();

  for ( indexInner = 1; indexInner &lt;= sizeListSeg; indexInner++ )
  {
    hUnkElement = (*pListSegments)[indexInner];
    if ( NULL_var != hUnkElement )
    {
      locate = -1;
      locate = ListDimensionedComponents.Locate(hUnkElement);
      if (1&gt; locate)
      {
        ListDimensionedComponents.Append(hUnkElement);
      }
    }
  }
}
if ( 1 &gt; ListDimensionedComponents.Size() ){ retVal = E_FAIL; goto EscapeWay; }

//===================================================================
//
// Write the code to compare list of all the electrical objects (populated earlier) within Root Product
// with Dimensioned electrical objects (stored in the list - ListDimensionedComponents)
//
//===================================================================
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
hr = CATPLMSessionServices::ClosePLMSession();
if (FAILED(hr)) 
{
  cout &lt;&lt;"The SESSION is not Closed"&lt;&lt;endl;
  retCode = 20;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to retrieve dimensioned electrical 
components and validate all the electrical components are dimensioned.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
