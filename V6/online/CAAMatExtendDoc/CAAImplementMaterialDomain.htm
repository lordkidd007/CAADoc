<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Implementing a Material Domain</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Implementing a Material Domain</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h3>Abstract</h3>
		<p>This article explains which paradigms CAA uses to show objects and let 
		end users play with them. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAImplementMaterialDomain Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAImplementMaterialDomain Do?</a></li>
					<li><a href="#How">How to Launch CAAImplementMaterialDomain?</a></li>
					<li><a href="#Where">Where to Find the CAAImplementMaterialDomain 
						Code?</a> </li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create a new Material Reference. 
You will learn:</p>
<ul>
	<li>How to define your material domain.</li>
	<li>How to integrate it into the add domain command.</li>
	<li>How to add edition capability to your material domain.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAImplementMaterialDomain Use Case</h2>
<p>CAAImplementMaterialDomain is a use case of the CAAMatExtendInterfaces.edu framework 
that illustrates CATMatUtilities framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAImplementMaterialDomain Do</h3>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAImplementMaterialDomain</h3>
<p>To launch CAAImplementMaterialDomain:</p>
<ol>
	<li>Set the current directory to <code>InstallRootFolder\CAAMatExtendInterfaces.edu</code></li>
	<li>Set up the build time environment and build the CAAImplementMaterialDomain.m 
		module</li>
	<li>Start the V6 application by executing <code>mkrun</code></li>
	<li>PLMAccess&gt;&gt;Create a new core material with a domain,</li>
	<li>Select the Add domain command.
		<p><img alt="" height="162" src="images/MaterialWB.jpg" width="317"/></p>
	</li>
	<li>Select the &quot;CAA Material Sample&quot; domain,</li>
	<li>Edit the &quot;CAA Material Sample&quot; domain by clicking in the spec 
		tree.</li>
</ol>
<p><img alt="Edit Domain" src="images/CAAEditDomain.jpg"/><br />
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMatCreateMaterial Code</h3>
<p>The CAAImplementMaterialDomain use case is made of a single file located in the 
CAAMatDomainImplement.m module of the <code>CAACATMatInterfaces.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAMatExtendInterfaces.edu\CAAMatDomainImplement.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAImplementMaterialDomain use case:</p>
<ol>
	<li><a href="#DefineDomain">Defining a Material Domain</a>.</li>
	<li><a href="#IntegrateAddDomain">Integrating the Add Domain Command</a>.</li>
	<li><a href="#IntegrateEdit">Adding Edition Capability to Your Domain</a>.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DefineDomain"></a>Defining a Material Domain</h3>
<p>A material domain is defined by:</p>
<ol>
	<li>A discipline value defined in the material metadata. That value is stored 
		in the V_discipline attribute of the domain. In the testcase dsc_matref_rep_sample 
		is used. The list of authorized values is managed by Dassault Syst&#232;mes.</li>
	<li>Applicative features. Features describing the data that are stored in the 
		domain. Each applicative feature that is to be retrieved through the method
		<strong>GetApplicativeSpec</strong> of interface <strong>CATIMaterialDomain,</strong> 
		must implement the interface <strong>CATIMaterialDomainContent</strong>. 
		An adapter is provided:<strong> CATMaterialDomainContentAdaptor</strong>.</li>
</ol>
<p>Applicative features are created through the usual process thanks to osm tool.</p>
<pre class="code">document `CAAMatSample.CATfct`{
  container CATFeatCont #root {
    feature MatSampleAppFeature #startup {
      double density
      double radius
      double area
    }
  }
}</pre>
<p><strong>MatSampleAppFeature</strong> is the Applicative feature of CAA Material 
Sample domain:</p>
<pre class="code">CATImplementClass(CAAMatSampleDomainContent,
                  DataExtension,
                  CATIMaterialDomainContent,
                  MatSampleAppFeature );

// Link the implementation to its interface
// ---------------------------------------

//BOA definition
CATImplementBOA(CATIMaterialDomainContent,CAAMatSampleDomainContent);

//TIE or TIEchain definitions

//-----------------------------------------------------------------------------
// CAAMatSampleDomainContent : constructor
//-----------------------------------------------------------------------------
CAAMatSampleDomainContent::CAAMatSampleDomainContent():
    CATMaterialDomainContentAdaptor()
{
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="IntegrateAddDomain"></a>Integrating the Add Domain Command</h3>
<p>We will focus on the <strong>CATIMaterialDomainInfo</strong>::GetIntegrationInformation 
as it is the method that allows integration in the add domain command</p>
<pre class="code">HRESULT CAAMatDomainInfo::GetIntegrationInformation( CATUnicodeString* oDomainSubTyping, CATUnicodeString* oDefaultFeatureType,
                                                     CATUnicodeString* oNlsFile, CATUnicodeString* oNlsEntry, 
                                                     CATUnicodeString* ioIconFile )
{
  (*oDomainSubTyping) = &quot;MAT Sample&quot;;
  (*oDefaultFeatureType) = &quot;MatSampleAppFeature&quot;;
  (*oNlsFile) = &quot;CAAMatSample&quot;;
  (*oNlsEntry) = &quot;MatSample&quot;;
  (*ioIconFile) = &quot;I_MatDomain_Nav_Default&quot;;
  return S_OK;
}</pre>
<ul>
	<li>oDomainSubTyping is used to fill the V_MatDomain attribute of the created 
		material domain</li>
	<li>oDfaultFeatureType is the feature that is automatically added to the created 
		material domain</li>
	<li>oNlsFile and oNlsEntry are used to retrieve the Nls name of your domain</li>
	<li>ioIconFile is the name of the icon that is used when displaying your material 
		domain. (This information will be used in future releases, in the mean time 
		use CATIIcon)</li>
</ul>
<p>Implementing this interface enable you to create a material reference and add 
domain through the UI.</p>
<p><img alt="Add Domain" src="images/CAAAddDomain.png"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="IntegrateEdit"></a>Adding Edition Capability to Your Domain</h3>
<p>To enable edition of your applicative domain you need to:</p>
<ol>
	<li>Implement <strong>CATIEdit</strong> on the applicative feature.</li>
	<li>Create a frame through which data will be edited.</li>
	<li>Implement <strong>CATIMatFeaturePropEditFrame</strong> on the frame.</li>
</ol>
<p>Implement the GetPanelItem method of CATIEdit. In this method instanciate the 
defined frame and return it.</p>
<pre class="code">CAAMatSampleEditionFrame* pMyEditionFrame = new CAAMatSampleEditionFrame( iParent );
   if ( NULL != pMyEditionFrame )
   {
     CATBaseUnknown* piMyFeature = NULL;
     QueryInterface( IID_CATBaseUnknown, (void**) &amp;piMyFeature );

     pMyEditionFrame -&gt; SetObject( piMyFeature );
     if ( NULL != piMyFeature ) piMyFeature -&gt; Release(); piMyFeature = NULL;
   }
  
   return pMyEditionFrame;</pre>
<p>The feature that is edited is also passed to the frame.</p>
<p>Creation of the frame is done as usual except that is needed that it inherits 
from CATMatFeaturePropEditFrameAdaptor instead of CATDlgFrame. CATMatFeaturePropEditFrameAdaptor 
inherits from CATDlgFrame and adds default implementation for the CATIMatFeaturePropEditFrame 
interface.</p>
<pre class="code">class CAAMatSampleEditionFrame : public <strong>CATMatFeaturePropEditFrameAdaptor</strong></pre>
<p>Then implement CATIMatFeaturePropEditFrame on this component. </p>
<pre class="code">#include &quot;TIE_CATIMatFeaturePropEditFrame.h&quot;
TIEchain_<strong>CATIMatFeaturePropEditFrame</strong>(CAAMatSampleEditionFrame);

void  CAAMatSampleEditionFrame::GetTabTitle( CATUnicodeString&amp; oTabTitle )
{
  oTabTitle = &quot;MatSample Properties&quot;;
}

void* CAAMatSampleEditionFrame::OkAction()
{
  CATFmFeatureFacade*   MyNewFeatFacade = CAAMatFeatureAccess::GetFeatFacadeOnMaterialDomain(_material);
  if (MyNewFeatFacade == NULL) return NULL;
  CATUnicodeString groupName = &quot;MatSampleAppFeature&quot;;

  CATFmAttributeName GroupAttrName;
  CATFmAttributeValue GroupAttrValue;
  
  CATListValCATUnicodeString* pListOfAttrNames = new CATListValCATUnicodeString();
  if (pListOfAttrNames != NULL) {
    pListOfAttrNames-&gt;Append(&quot;density&quot;);
    pListOfAttrNames-&gt;Append(&quot;radius&quot;);
    pListOfAttrNames-&gt;Append(&quot;area&quot;);

    int attrListSize = pListOfAttrNames-&gt;Size();
    
    // Cycle through names to add widgets
    for ( int i = 1; i &lt;= attrListSize; i++ )
    {
      GroupAttrName = (*pListOfAttrNames)[i];
      MyNewFeatFacade-&gt;GetValue(GroupAttrName, GroupAttrValue);
      WriteDoubleAttribute(GroupAttrValue, i);
      MyNewFeatFacade-&gt;SetValue(GroupAttrName, GroupAttrValue);
    }
    delete pListOfAttrNames; pListOfAttrNames = NULL;
  }  
  return NULL;
}


void* CAAMatSampleEditionFrame::CloseAction()
{
  return NULL;
}

CATBoolean CAAMatSampleEditionFrame::UseUndoAtEnd()
{
  return FALSE;
}</pre>
<p>After this step it will be possible to edit the material domain feature through 
the edit definition command.</p>
<p><img alt="Edit Domain" src="images/CAAEditDomain.jpg"/></p>
<p>In the other tabpage, PLMProperties will provide you the information about the 
PLM Domain Representation. The attributes and the content could differ regarding 
to your customization on the material domain.</p>
<p>
<img alt="Properties" height="582" src="images/PLMPropertiesMatSample.png" width="463"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAOsmUcCatalogSU.htm">
		Creating StartUps in Catalogs</a> </td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaUnderstandingCredentials.htm">
		Understanding Credentials</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
