<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Sketching Elements in a 3D Shape Representation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Sketching Elements in a 3D Shape Representation</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAASkiBasicGeometries use case. This use case 
		explains how to create a '3D Shape' (Part) representation, create geometry 
		and constraints in a sketch and make some operations: solving geometry and 
		dimension systems, and making a corner.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With this Use Case</a></li>
			<li><a href="#UseCase">The CAASkiBasicGeometries Use Case</a>
				<ul>
					<li><a href="#What">What Does CAASkiBasicGeometries Do</a></li>
					<li><a href="#How">How to Launch CAASkiBasicGeometries</a></li>
					<li><a href="#Where">Where to Find the CAASkiBasicGeometries 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to:</p>
<ul>
	<li>Create sketched elements.</li>
	<li>Create constraints.</li>
	<li>Solve dimension systems in different ways.</li>
	<li>Create a corner (re-limitation) on two lines.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASkiBasicGeometries Use Case</h2>
<p>CAASkiBasicGeometries is a use case of the CAASketcherUseItf.edu framework that 
illustrates the SketcherInterfaces framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASkiBasicGeometries Do</h3>
<table>
	<caption>Fig.1: The Data Created by the Use Case</caption>
	<tr>
		<td>
		<img alt="Sketcher Title Block" height="336" src="images/CAASkiTitleBlock.jpg" width="351"/></td>
	</tr>
</table>
<p>This picture represents the Part representation created by the use case. The 
program creates a basic PartBody composed of one sketch. The sketch contains:</p>
<ul>
	<li>The elements directly created in edition in the sketch.</li>
	<li>The constraints directly created on the elements.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASkiBasicGeometries</h3>
<p>To launch CAASkiBasicGeometries , you will need to set up the build time environment, 
then compile CAASkiBasicGeometries along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Launch the use case as follows:</p>
<pre class="code">mkrun -c<em> &quot;CAASkiBasicGeometries repository server user password SecurityCtx environment PLMExternalID</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (SecurityCtx.Organization.Project). 
		Choose SecurityCtx as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM environment</td>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalID</td>
		<td>CAASkiBasicGeometries</td>
		<td>Component Attribute </td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>]. </li>
	<li>The <strong>environment</strong> is necessary to locate the PRODUCT Modeler.
	</li>
	<li>The last argument define the <strong>value</strong> of the <strong>attribute 
		name.</strong></li>
</ul>
<h3><a name="Where"></a>Where to Find the CAASkiBasicGeometries Code</h3>
<p>The CAASkiBasicGeometries use case is made of a main program located in the CAASkiBasicGeometries.m 
module of the CAASketcherInterfaces.edu framework: <code>InstallRootFolder\CAADoc\CAASketcherInterfaces.edu\CAASkiBasicGeometries.m\</code>, 
where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are ten steps in CAASkiBasicGeometries:</p>
<ol>
	<li><a href="#Initializing">Parsing Input Arguments</a></li>
	<li><a href="#Creating">Creating and Opening the Sketch Edition</a></li>
	<li><a href="#Fact2D">Getting the Geometry Factory and Creating 2D Lines</a></li>
	<li><a href="#Constraints">Creating 2D Constraints on Geometries</a></li>
	<li><a href="#Modifying">Modifying the Position of the First Point Created</a></li>
	<li><a href="#Solving">Solving (Evaluating) Dimension System and Geometry</a></li>
	<li><a href="#Positioning">Positioning the Rectangle Compared to the Sketch</a></li>
	<li><a href="#Corner">Creating a Corner</a></li>
	<li><a href="#Closing">Closing the Sketch Edition</a></li>
	<li><a href="#Saving">Saving the Part and Exiting</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Initializing"></a>Parsing Input Arguments</h3>
<p>CAASkiBasicGeometries begins by checking that the command lines contains seven 
arguments. It then retrieves the environment, creates a session, and creates 3D 
Shape representation. This is the usual sequence for creating a new 3D Shape (Part) 
representation.</p>
<pre class="code">
CATIPsiRepresentationReference *pPsiCreatedRepRef = NULL;  
if ( FAILED(::CAAAdpCreatePartRepresentation(PLMExternalID,Environment,Repository, &amp;pPsiCreatedRepRef)) || NULL == pPsiCreatedRepRef )
{
  cout &lt;&lt; &quot;\nERROR by creating a 3D Shape representation (Part)&quot; &lt;&lt; endl; 
  return  3;  
}  
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creating"></a>Creating and Opening the Sketch Edition</h3>
<pre class="code">
// Retrieve the CATPrtCont Container
CATIPLMComponent *piPLMCompOnCreatedRepRef = NULL;  
if ( SUCCEEDED(pPsiCreatedRepRef-&gt;QueryInterface(IID_CATIPLMComponent,(void**)&amp;piPLMCompOnCreatedRepRef)) )
{
  CATIMmiPrtContainer *piPrtCont = NULL;
  CATIPLMNavRepReference* piNavRep= NULL;
  if ( SUCCEEDED(piPLMCompOnCreatedRepRef-&gt;QueryInterface(IID_CATIPLMNavRepReference,(void**)&amp;piNavRep)) )
  {
    if ( SUCCEEDED(piNavRep-&gt;RetrieveApplicativeContainer("CATPrtCont", IID_CATIMmiPrtContainer, (void**)&amp;piPrtCont)) )
    {
      CATIMmiUsePrtPart_var spPart;
      CATIMmiMechanicalFeature_var spMmiPart;
      if ( SUCCEEDED (piPrtCont-&gt;GetMechanicalPart(spMmiPart)) &amp;&amp; (NULL_var != (spPart = spMmiPart)) )  
      {
        //--------------------------------------------------------------------
        // -5- Read Mechanical Part reference planes
        //--------------------------------------------------------------------
        CATListValCATIMmiMechanicalFeature_var spListOfPlanes; 
        spPart-&gt;RetrieveReferencePlanes(spListOfPlanes);  
        if ( !spListOfPlanes.Size() || NULL_var == spListOfPlanes[1] )
        {
          cout &lt;&lt; &quot;\nERROR in reading XY reference plane" &quot; &lt;&lt; endl;  
          return  5;  
        }

        // Create a Sketch laying on the XY plane (spRefPlanes[1])
        CATISktUseSketchFactory *pSketchFactory = NULL;
        if ( SUCCEEDED(piPrtCont-&gt;QueryInterface(IID_CATISktUseSketchFactory,(void**)&amp;pSketchFactory)) )
        {
          CATIMmiMechanicalFeature_var spSpecSketch = pSketchFactory-&gt;CreateSketch(spRefPlanes[1]);
          if ( NULL_var != spSpecSketch )
          {
              CATISktUseSketch *pSketch = NULL;
              if ( SUCCEEDED(spSpecSketch-&gt;QueryInterface(IID_CATISktUseSketch,(void**)&amp;pSketch)) )
              {
                // Open the sketch 
                if ( SUCCEEDED(pSketch-&gt;OpenEdition()) )
                {
                  ...
</pre>
<p>From the root container pointed by <em>piPrtCont</em> pointer, you can retrieve 
the sketch object factory interface needed to create sketch objects and you can 
retrieve the reference planes of the current representation from <em>CATIPrtPart</em> 
interface.</p>
<table>
	<tr>
		<td><em>CATISktUseSketchFactory:</em></td>
		<td>The sketch object factory interface.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Fact2D"></a>Getting the Geometry Factory and Creating 2D Lines</h3>
<pre class="code">...
CATISktUse2DWFFactory *p2DGeomFactory = NULL;
if ( SUCCEEDED(pSketch-&gt;QueryInterface(IID_CATISktUse2DWFFactory,(void**)&amp;p2DGeomFactory)) )
{
  CATISktUse2DConstraintFactory *p2DConstraintFactory = NULL;
  if ( SUCCEEDED(pSketch-&gt;QueryInterface(IID_CATISktUse2DConstraintFactory,(void**)&amp;p2DConstraintFactory)) )
  {
    // create points (rectangle vertices)
    double pt_bottom_left[2]  = {10., 10.};
    double pt_bottom_right[2] = {50., 10.};
    double pt_top_right[2]    = {50., 50.};
    double pt_top_left[2]     = {10., 50.};
    CATISktUse2DPoint_var spPt_bottom_left  = p2DGeomFactory-&gt;CreatePoint(pt_bottom_left);
    CATISktUse2DPoint_var spPt_bottom_right = p2DGeomFactory-&gt;CreatePoint(pt_bottom_right);
    CATISktUse2DPoint_var spPt_top_right    = p2DGeomFactory-&gt;CreatePoint(pt_top_right);
    CATISktUse2DPoint_var spPt_top_left     = p2DGeomFactory-&gt;CreatePoint(pt_top_left);

    // create curves (rectangle edges)
    CATISktUse2DLine_var spLine1 = p2DGeomFactory-&gt;CreateLine(pt_bottom_left,pt_bottom_right);
    CATISktUse2DLine_var spLine2 = p2DGeomFactory-&gt;CreateLine(pt_bottom_right,pt_top_right);
    CATISktUse2DLine_var spLine3 = p2DGeomFactory-&gt;CreateLine(pt_top_right,pt_top_left);
    CATISktUse2DLine_var spLine4 = p2DGeomFactory-&gt;CreateLine(pt_top_left,pt_bottom_left);

    // create curve connectivities (rectangular profile)
    CATISktUse2DCurve_var spCurve1 (spLine1);
    CATISktUse2DCurve_var spCurve2 (spLine2);
    CATISktUse2DCurve_var spCurve3 (spLine3);
    CATISktUse2DCurve_var spCurve4 (spLine4);
    spCurve1-&gt;SetStartPoint(spPt_bottom_left); 
    spCurve1-&gt;SetEndPoint(spPt_bottom_right);
    spCurve2-&gt;SetStartPoint(spPt_bottom_right); 
    spCurve2-&gt;SetEndPoint(spPt_top_right);
    spCurve3-&gt;SetStartPoint(spPt_top_right); 
    spCurve3-&gt;SetEndPoint(spPt_top_left);
    spCurve4-&gt;SetStartPoint(spPt_top_left); 
    spCurve4-&gt;SetEndPoint(spPt_bottom_left);
...</pre>
<p>The geometry factory is directly implemented on the sketch. After having retrieved 
the 2D factory, we create four points, then four lines passing by these points (these 
four lines make a rectangle with common points). We establish connectivity on these 
points. Each curve shares a starting point and end point.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Constraints"></a>Creating 2D Constraints on Geometries</h3>
<pre class="code">...
CATI2DConstraintFactory *p2DConstraintFactory = NULL;
if ( SUCCEEDED(pSketch-&gt;QueryInterface(IID_CATI2DConstraintFactory,(void**)&amp;p2DConstraintFactory)) )
{
  ...
  p2DConstraintFactory-&gt;CreateConstraint( spLine1, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Horizontal, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spLine2, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Vertical, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spLine3, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Horizontal, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spLine4, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Vertical, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spLine2, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Length, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spLine2, NULL, spLine4, NULL, NULL, NULL, NULL, Cst2DType_Distance, 0, 0 );
...</pre>
<p>The constraint factory is directly implemented on the sketch. After having retrieved 
the 2D constraint factory, we create four constraints (horizontal and vertical on 
lines), then we create two dimensional constraints (length on a line and distance 
between two other lines).</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Modifying"></a>Modifying the Position of the First Point Created</h3>
<pre class="code">...
  pt_bottom_left[0]  = 20.;
  pt_bottom_left[1]  = 20.;
  spPt_bottom_left-&gt;SetPointData(pt_bottom_left);
...</pre>
<p>We change the coordinates of the first point created.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Solving"></a>Solving (Evaluating) Dimension System and Geometry</h3>
<pre class="code">...
 CATLISTV(CATISktUse2DWFGeometry_var) spSoftReferences(1);
 spSoftReferences.Append(spPt_bottom_left);
 pSketch-&gt;Evaluate(spSoftReferences);
...</pre>
<p>We solve the dimensional system. The last point modified has the top priority. 
Geometry evaluation with soft reference element (<code>spPt_bottom_left</code>), 
solver tries to keep fixed these elements (<code>spPt_bottom_left</code> is the 
more prioritary). If we do not give the first point with high priority, the last 
modification (changing the first point position) would be useless. In this case 
the rectangle translates totally.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Positioning"></a>Positioning the Rectangle Compared to the Sketch</h3>
<pre class="code">...
  CATISktUse2DAxis_var spSupport;
  pSketch-&gt;GetAbsolute2DAxis(spSupport);
  p2DConstraintFactory-&gt;CreateConstraint( spPt_bottom_left, NULL, spSupport-&gt;GetHDirection(), NULL, NULL, NULL, NULL,
                                          Cst2DType_Distance, 0, 0 );
  p2DConstraintFactory-&gt;CreateConstraint( spPt_bottom_left, NULL, spSupport-&gt;GetVDirection(), NULL, NULL, NULL, NULL,
                                         Cst2DType_Distance, 0, 0 );
...</pre>
<p>In this example the sketch is isoconstrained because the rectangle is rigid. 
We position it on the sketch support (and create two constraints between the first 
point and H-direction and V-direction). The rectangle is fixed now and it is sufficiently 
constrained.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Corner"></a>Creating a Corner</h3>
<pre class="code">...
  double radius = 10.;
  double pt_center[2]  = {70., 40.};
  CATISktUse2DCurve_var spCurve5 = p2DGeomFactory-&gt;CreateCorner(spCurve3, spCurve4, pt_center, &amp;radius);
  CATISktUse2DTopologicalOperators_var spOperateur = pSketch;
  int lim1 = 0;
  int lim2 = 0;
  spOperateur-&gt;InsertCorner(spCurve5,spLine3,1,lim1,spLine4,1,lim2);
  p2DConstraintFactory-&gt;CreateConstraint( spLine3, NULL, spCurve5, NULL, NULL, NULL, NULL, Cst2DType_Tangent, 0, 0);
  p2DConstraintFactory-&gt;CreateConstraint( spCurve5, NULL, spLine4, NULL, NULL, NULL, NULL, Cst2DType_Tangent, 0, 0);
  p2DConstraintFactory-&gt;CreateConstraint( spCurve5, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Radius, 0, 1);
...</pre>
<p>We create an operation on the geometry factory. This operation corresponds to 
a corner between two lines of the rectangle and we specify the re-limitation (with 
all element trimmed). We create two tangency, for creating a corner in tangency 
on the lines and we create the radius of the corner. Note that the last arguments 
of the <code>CreateConstraint</code> method is &quot;1&quot;, because we want to 
solve the dimensional system a last once.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Closing"></a>Closing the Sketch Edition</h3>
<pre class="code">...
  if ( SUCCEEDED(pSketch-&gt;CloseEdition()) )
  ...</pre>
<p>We close the sketch edition.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Saving"></a>Saving the Part and Exiting</h3>
<pre class="code">...
// Save the Part
  CATAdpSaver saver;
  if ( FAILED(saver.Save() )
    return 10;
...
// Close PLM session
...
  if ( FAILED(::CAAAdpCloseSession() )
    return 11;
...</pre>
<p>The sketch is saved in the 3D Shape representation. The session is then closed. 
This is the usual sequence for saving a representation and closing the session [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating a 3D Shape 
(Part) representation, and when creating a Sketch containing 2D elements. A handler 
to the <em>CATISketch</em> interface is the key to enter and navigate the sketcher 
structure, and Retrieves the 2D factory to create elements. The 2D factory also 
implements the <em>CATI2DConstraintFactory</em> interface to create constraint on 
the elements and also solve dimension system.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm');return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2009]</td>
		<td>Document modified</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright()</script>

</body>

</html>
