<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a New Drawing Representation Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a New Drawing Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwStructure use case. This use case explains 
		how to create a new drawing representation reference on which a new sheet 
		and a new view will be inserted. In the new view a geometry will be created.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwStructure Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwStructure Do</a></li>
					<li><a href="#How">How to Launch CAADrwStructure</a></li>
					<li><a href="#Where">Where to Find the CAADrwStructure Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, and save in database, a 
PLM drawing representation reference. You will learn:</p>
<ul>
	<li>How to initialize the PLM environment</li>
	<li>How to create a new drawing representation reference by using a new toolbox 
		defined in drafting modeler</li>
	<li>How to retrieve the drawing root from the drawing representation reference</li>
	<li>How to create a new Sheet and view in the drawing representation reference</li>
	<li>How to create geometry in the view</li>
	<li>How to save the created representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwStructure Use Case</h2>
<p>CAADrwStructure is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwStructure Do</h3>
<p>The CAADrwStructure use case is equivalent to use the <strong>New</strong> command 
in the <strong>PLM Access</strong> menu.</p>
<p>In the first dialog box, select <strong>Representation</strong> as PLM Object, 
and <strong>Drawing </strong>as representation.</p>
<table>
	<caption>Fig.1: Step1 - PLM Object Type</caption>
	<tr>
		<td><img alt="PLM Object Type" src="images/CAADrwStructure1.jpg"/></td>
	</tr>
</table>
<p>Then, in the second dialog box, enter an environment. For the current one,
<strong>Default, </strong>the only one necessary attribute to create a representation, 
is the <strong>name</strong> parameter. This name is the <strong>PLM_externalID</strong> 
parameter.</p>
<table>
	<caption>Fig.2: Step2 - Drawing Definition</caption>
	<tr>
		<td>
		<img alt="Drawing Definition" height="394" src="images/CAADrwStructure2.jpg" width="466"/></td>
	</tr>
</table>
<table>
	<caption>Fig. 3: See hunder, the Drawing Representation Created by the Use Case</caption>
	<tr>
		<td>
		<img alt="Drawing Representation" height="678" src="images/CAADrwStructure3.jpg" width="564"/></td>
	</tr>
</table>
<p>This picture represents a drawing representation created by the use case program. 
The program first creates a basic drafting structure composed of a drawing, a sheet 
and two views (these views are not displayed in the graph). Then the second sheet 
is created with an additional view.</p>
<p><strong>Remark</strong>: A sheet always contains:</p>
<ul>
	<li>A main view which contains the elements directly created in the sheet</li>
	<li>A background view, which is dedicated to the frames and title blocks.</li>
</ul>
<p>These two views are created during the sheet creation step. They are part of 
the sheet and so they cannot be deleted and they are not showed in the graph.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwStructure</h3>
<p>To launch CAADrwStructure, you will need to set up the build time environment, 
then compile CAADrwStructure along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c<em> &quot;</em>CAADrwStructure <em>Repository</em> <em>Server Username</em> <em>Password</em> <em>SecurityCtx Environment</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number/ematrix</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM environment</td>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo).</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case.</li>
</ul>
<h3><a name="Where"></a>Where to Find the CAADrwStructure Code</h3>
<p>The CAADrwStructure use case is made of a single source file named CAADrwStructure.cpp 
located in the CAADrwStructure.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwStructure.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight steps in CAADrwStructure:</p>
<ol>
	<li><a href="#Step1">Parsing the Input Arguments</a></li>
	<li><a href="#Step2">Initializes the PLM Session</a></li>
	<li><a href="#Step3">Creating an Explicit Drawing Representation Reference</a></li>
	<li><a href="#Step4">Retrieving the Drawing Root from the Drawing Representation 
		Reference</a></li>
	<li><a href="#Step5">Creating an Additional Sheet</a></li>
	<li><a href="#Step6">Creating a New View Aggregated by the new Sheet</a></li>
	<li><a href="#Step7">Creating a Geometric Element in this View</a></li>
	<li><a href="#Step8">Saving the Drawing Representation Reference in the Database 
		and Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing the Input Arguments</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
   int rc =1; 

   // 1. Checks the input arguments
   // ==========================
   // Number of arguments necessary for PLM connection.
   if ( iargc != 6)
   {
      cout &lt;&lt; endl;
      cout &lt;&lt;&quot;Usage: CAADrwStructure &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &quot;&lt;&lt; endl;
      return 1;
   }
...</pre>
<ul>
	<li><code>Repository</code> is the repository name (also named provider) to 
		use</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Initializing the PLM Session</h3>
<pre class="code">...
// 2. Sets the Connection Parameters and Create the session
// ========================================================

   const char* repository	= iargv[1];
   const char* server_name	= iargv[2];
   const char* user_name   = iargv[3];
   const char* password    = iargv[4];
   const char* SecurityCtx	= iargv[5];
   CATString EnvToUse = iargv[6];

   HRESULT hr = ::CAAAdpCreateSession(repository,server_name,user_name,password,SecurityCtx);
   if ( FAILED(hr)) return 1;
   
// 3. Sets the environment
// =======================
   PLMPSISessionHelpers* pSessionHelpers = NULL;
   hr = PLMPSISessionHelpers::GetSessionHelpers( pSessionHelpers );
   if(FAILED(hr)|| (NULL == pSessionHelpers)) return 1; 
   hr = pSessionHelpers-&gt;SetCurrentEnvironment( EnvToUse );

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating an Explicit Drawing Representation Reference</h3>
<pre class="code">...   
// 4. Drawing representation reference creation
// ============================================
CATIPsiRepresentationReference *piDrawingRepRef = NULL;
CATListOfCATUnicodeString lstStd;

// 4.1 Searchs a standard in the standards list
// ============================================
CATDftDrawingPLMServices::GetAvailableDrawingStandards(lstStd))
// The second standard defined in the list is choosen
CATUnicodeString myStd = lstStd[2];

// 4.2 Searchs a sheet style from the choosen standard
// ===================================================
CATListOfCATUnicodeString lstSheetStyle;
CATDftDrawingPLMServices::GetListOfSheetStyles(myStd,lstSheetStyle))

// The second sheet style is choosen 
// =================================
CATIPsiRepresentationReference *piDrawingRepRef = NULL;
CATUnicodeString mySheetStyle = lstSheetStyle[2];

// 4.3 Creates the Drawing representation reference
// ===========================================
 if (SUCCEEDED(CATDftDrawingPLMServices::CreateDrawingRepReference(&amp;piDrawingRepRef,
                                                                   myStd,
                                                                   mySheetStyle)))

...</pre>
<p>The creation of the drawing representation reference is fully encapsulated in 
a toolbox of the drawing modeler: CATDftDrawingPLMServices. The standard name and 
the sheet style are mandatory arguments to create a drawing representation reference. 
The list of available standards and sheet styles may be retrieval from services 
defined in the this toolbox.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Drawing Root from the Drawing Representation 
Reference</h3>
<pre class="code">...   
CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing)
...</pre>
<p>This service is defined in the CATDftDrawingPLMServices.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating an Additional Sheet</h3>
<pre class="code">...   
CATIDftSheet *piDftNewSheet = NULL;
wchar_t *pSheetName= L&quot;MyNewSheet&quot;;
if (SUCCEEDED(piDftDrawing-&gt;<strong>AddSheet</strong>(&amp;piDftNewSheet,pSheetName)))
...</pre>
<p>AddSheet method on CATIDftDrawing interface creates the sheet and add it to the 
drawing root. If this method is called in interactive context, sheet tab page will 
be updated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a New View Aggregated by the New Sheet</h3>
<pre class="code">...   
double ptOrigin[2] = {100.0,50.0};
CATMathPlane viewPlane;
CATUnicodeString viewName;
CATIDftView *piNewDftView=NULL;
piDftNewSheet-&gt;CreateView(ptOrigin,viewPlane,DftFrontView,viewName,&amp;piNewDftView))
...</pre>
<p>The CreateView method, defined in CATIDftSheet interface, creates the view and 
aggregates it to the sheet.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating a Geometric Element in this View</h3>
<pre class="code">...   
// Activate this new view in the new sheet
CATIDftView *piDftNewView=NULL;
if (SUCCEEDED(piNewView-&gt;QueryInterface(IID_CATIDftView,(void **)&amp;piDftNewView)))
{
  piDftNewSheet-&gt;<strong>SetDefaultActiveView</strong>(piDftNewView);
  piDftNewView-&gt;Release();
  piDftNewView=NULL;
}

// Get the Wire frame factory to create geometry.
CATI2DWFFactory_var spGeomFactory(piNewView);

// Creation of a circle:
double center[2];
center[0]=50.0;
center[1]=60.0;
double radius = 50.0;
CATBaseUnknown_var spCercle;
if (NULL_var != spGeomFactory) 
{
  spCercle = spGeomFactory-&gt;<strong>CreateCircle</strong>(center,radius);
  if (NULL_var != spCercle)
  {
    // Modify the color of the circle
    CATVisPropertiesValues
    CATVisPropertiesType iPropertyType = CATVPColor;
    iovalues.SetColor(0,0,0);
    
    CATVisProperties_var spCircleProp = spCircle;
    if (NULL_var != spCircleProp)
      spCircleProp-&gt;<strong>SetPropertiesAtt</strong>(iovalues,iPropertyType,CATVPLine);
  }
...</pre>
<p>To create geometric elements in a view, the view has to be current. Wire frame 
factory is obtained from the current view. Geometry created in Drawing is based 
on sketcher modeler. By default, created sketcher elements are white. The background 
of the Drawing representation is white, to see correctly the geometry created by 
batch, it is adviced to change the color of the created sketch element. In an interactive 
session, this step is useless because when an drawing element is created, default 
properties defined by the toolbar are automatically applied</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Saving the Drawing Representation Reference in the Database 
and Closing the Session</h3>
<pre class="code">...   
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = CATPLMSessionServices::ClosePLMSession();</pre>
<p>This section represents the usual sequence for saving a newly created representation 
reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating sheets and 
views in a drawing representation reference. Sheets are created by using AddSheet 
method defined in CATIDftDrawing interface, thus sheet tab page may be updated in 
interactive context. View are created by using CreateView method in CATIDftSheet 
interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
