<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Generative View from 3D FTA View</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Generative View from 3D FTA View</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCreateGenViewFrom3D use case. This use 
		case explains how to create a generative view from FTA View in an existing 
		drawing representation reference.</p>
		<p><strong>As of today this API is not yet implemented, but the way to create 
		a Generative View from 3D FTA remains available.</strong></p>
		<p>FTA means: Functional Tolerancing &amp; Annotation [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwCreateGenViewFrom3D Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCreateGenViewFrom3D Do</a></li>
					<li><a href="#How">How to Launch CAADrwCreateGenViewFrom3D</a></li>
					<li><a href="#Where">Where to Find the CAADrwCreateGenViewFrom3D 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, and save in database, a 
PLM drawing representation reference. You will learn:</p>
<ul>
	<li>How to initialize the PLM environment</li>
	<li>How to retrieve the Product Reference from the PLM ID</li>
	<li>How to retrieve the Representation Reference from the Root Product and load 
		it</li>
	<li>How to retrieve the FTA Annotation Set</li>
	<li>How to retrieve the Drawing Representation Reference from the PLM ID</li>
	<li>How to create a <span lang="fr">CATOmbObjectInContext</span> info from the 
		FTA View.</li>
	<li>How to create an associative Generative Front View thanks to the
		<span lang="fr">CATOmbObjectInContext class</span></li>
	<li>How to save the created representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCreateGenViewFrom3D Use Case</h2>
<p>CAADrwCreateGenViewFrom3D is a use case of the CAADraftingInterfaces.edu framework 
that illustrates DraftingUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCreateGenViewFrom3D Do</h3>
<p>The CAADrwCreateGenViewFrom3D use case creates 2 Generative View from 3D Data 
in a Drawing Representation Reference already created.</p>
<table>
	<caption>Fig. 1: 3D Data Used by the Use Case to Create the Generative View</caption>
	<tr>
		<td>
		<img alt="3D Data Used by the Use Case to Create the Generative View" height="481" src="images/CAADrwCreateGenViewFrom3D1.jpg" width="615"/></td>
	</tr>
</table>
<table>
	<caption>Fig. 2: Drawing Representation Modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="Drawing Representation Modified by the Use Case" height="407" src="images/CAADrwCreateGenViewFrom3D2.jpg" width="673"/></td>
	</tr>
</table>
<p>This picture represents a drawing representation modified by the use case program. 
The program creates one Generative View Front View.1 associative to 3D FTA View 
Front View.1. Drawing Annotations are created from FTA annotations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCreateGenViewFrom3D</h3>
<p>To launch CAADrwCreateGenViewFrom3D, you will need to set up the build time environment, 
then compile CAADrwCreateGenViewFrom3D along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAADrwCreateGenViewFrom3D <em>Repository</em> <em>Server Username</em> <em>Password</em> <em>SecurityCtx PLMType AttributeVal1 PLMType_Drawing AttributeVal2 Version</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for component to be opened</td>
		<td>component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1<em> </em></td>
		<td>CAADrwCreateGenViewFrom3DPRD</td>
		<td>Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>PLM Type</td>
		<td>A PLM Type for Drawing component to be opened</td>
		<td>Drawing component Type</td>
	</tr>
	<tr>
		<td>9</td>
		<td>AttributeVal2</td>
		<td>CAADrwCreateGenViewFrom3DDRW</td>
	</tr>
	<tr>
		<td>10</td>
		<td>Version<em> </em></td>
		<td>---</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong><br />
The use case may require input PLM Data: PLM Reference or PLM Representation Reference. 
This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must 
import these PLM Data in the database using the PLM Access / Import As 3D XML command 
prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwCreateGenViewFrom3D.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCreateGenViewFrom3D Code</h3>
<p>The CAADrwCreateGenViewFrom3D use case is made of a single source file named 
CAADrwCreateGenViewFrom3D.cpp located in the CAADrwCreateGenViewFrom3D.m module 
of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCreateGenViewFrom3D.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are 11 steps in CAADrwCreateGenViewFrom3D:</p>
<ol>
	<li><a href="#Step1">Parsing the Input Arguments</a></li>
	<li><a href="#Step2">Creating a PLM session and connect to the input repository</a></li>
	<li><a href="#Step3">Opening the Root Reference</a></li>
	<li><a href="#Step4">Retrieving the Drawing Representation Reference</a></li>
	<li><a href="#Step5">Retrieving the 3D Shape Representation from the Root Product</a></li>
	<li><a href="#Step6">Retrieving FTA Annotation Set from the Mechanical Part</a></li>
	<li><a href="#Step7">Retrieving the Drawing Root from the Representation Reference</a></li>
	<li><a href="#Step8">Retrieving the Active Sheet from the Drawing Root</a></li>
	<li><a href="#Step9">Creating a <span lang="fr">CATOmbObjectInContext class 
		from</span> the FTA View</a></li>
	<li><a href="#Step10">Creating a Generative View from 3D by using the
		<span lang="fr">CATOmbObjectInContext class</span></a></li>
	<li><a href="#Step11">Saving the Drawing Representation Reference in the Database 
		and Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing the Input Arguments</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 1;
  cout &lt;&lt; &quot;CAADrwCreateGenViewFrom3D started&quot; &lt;&lt; endl;

  // 1. Checks the input arguments
  // =========================
  if (11 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id Product&gt; &lt;PLMType_Drawing&gt; &lt;PLM External Id Drawing&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_externalId = iargv[7];
  const char* comp_PLMTypeDrawing = iargv[8];
  const char* comp_drw_externalId = iargv[9];
  const char* comp_version     = iargv[10];...</pre>
<ul>
	<li><code>Repository</code> is the repository name (also named provider) to 
		use</li>
</ul>
<p>All these data will be used in the next sections to initialize the PLM session 
then to search representation in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a PLM session and connect to the input repository</h3>
<pre class="code"> ...
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Opening the Root Reference</h3>
<pre class="code">...   
 // 3. Opens the Root Reference
   // ===========================
   // Open Product in Authoring mode
   CATIPLMRepInstances* piRepInstOnRoot= NULL;

   // Entire product model is loaded for the generative view creation
   CATBoolean ExpandAllMode = TRUE;
   CATOmbLifeCycleRootsBag Bag;
 
   hr = ::CAAOpenPLMComponent(comp_PLMType,comp_externalId,comp_version,
                              IID_CATIPLMRepInstances,(void **)&amp;piRepInstOnRoot,Bag,ExpandAllMode);

...</pre>
<p>In batch mode a opened product or a representation reference may be unloaded 
because of the memory optimization management. </p>
<p>To prevent the unload operation put the open data in a bag.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Drawing Representation Reference</h3>
<pre class="code">...   
 CATIPsiRepresentationReference *piDrawingRepRef = NULL;
   hr = ::CAAOpenPLMComponent ( comp_PLMTypeDrawing, comp_drw_externalId,comp_version,
                                IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
   ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the 3D Shape Representation from the Root Product</h3>
<pre class="code">...
CATIPLMNavReference *piPLMNavRef = NULL;
CATIPLMNavRepInstance *piNavRepInst = NULL;
CATIPLMNavRepReference *piPLMNavRepRef = NULL;

if (piRepInstOnRoot &amp;&amp; SUCCEEDED(piRepInstOnRoot-&gt;QueryInterface(IID_CATIPLMNavReference,(void **)&amp;piPLMNavRef)))
{
  CATListPtrCATIPLMNavEntity childrenlist;
  CATPLMCoreType coreType = PLMCoreRepInstance;
  piPLMNavRef-&gt;ListChildren(childrenlist,1,&amp;coreType);
  int nbChildren = childrenlist.Size();
  if( 1 == nbChildren )
  {
    CATIPLMNavEntity *pChil = childrenlist[1];
    if ( NULL != pChil )
    {
      if( SUCCEEDED(pChil-&gt;QueryInterface(IID_CATIPLMNavRepInstance,(void**)&amp;piNavRepInst)))
      {
        // Gets the Rep Instance's rep reference
        piNavRepInst-&gt;GetRepReferenceInstanceOf(piPLMNavRepRef);
      }
      pChil-&gt;Release();pChil=NULL;
    }
  }
  piPLMNavRef-&gt;Release();piPLMNavRef=NULL;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving FTA Annotation Set from the Mechanical Part</h3>
<pre class="code">...
// 6. Retrieves the Annotation Set and the Active TPS View
// =======================================================
CATITPSView *piTPSView = NULL;

// 6.1 Loads the representation in &quot;Edit Mode&quot;
// ===========================================
CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
if (piPLMNavRepRef &amp;&amp; SUCCEEDED( piPLMNavRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
{
  hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
  piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
}

// 6.2 Retrieves the Annotation Set
// ================================
CATIPsiRepresentationReference *piPSIRepRef = NULL;
if (piPLMNavRepRef &amp;&amp; SUCCEEDED(piPLMNavRepRef-&gt;QueryInterface(IID_CATIPsiRepresentationReference,(void **)&amp;piPSIRepRef)))
{ 
  CATITPSServicesContainers *piTPSServ = NULL;
  if (SUCCEEDED(CATTPSInstantiateUseComponent(DfTPS_ItfTPSServicesContainer, (void**) &amp; piTPSServ)))
  {
    CATITPSSet *piTPSSet = NULL;

    if (SUCCEEDED(piTPSServ-&gt;GetSet(piPSIRepRef,&amp;piTPSSet)) &amp;&amp; piTPSSet)
    {
      // Retrieves the active TPS view from which the Drawing view is created
      if (SUCCEEDED(piTPSSet-&gt;GetActiveView (&amp;piTPSView)) &amp;&amp; piTPSView)
      {
        cout &lt;&lt; &quot;the active view is retrieved from the 3D Annotation Set &quot; &lt;&lt; endl;
      }
      piTPSSet-&gt;Release();piTPSSet=NULL;
    }
    piTPSServ-&gt;Release();piTPSServ=NULL;
  }
  piPSIRepRef-&gt;Release();piPSIRepRef=NULL;
}
if (piPLMNavRepRef) piPLMNavRepRef-&gt;Release(),piPLMNavRepRef=NULL;
...</pre>
<p>The representation must be loaded to retrieve the Annotation Set.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving the Drawing Root from the Drawing Representation 
Reference</h3>
<pre class="code">...
CATIDftDrawing *piDftDrawing = NULL;
if (SUCCEEDED(CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing)))
{
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving the Active Sheet from the Drawing Root</h3>
<pre class="code">...
CATIDftGenViewFactory *piDftGenViewFact = NULL;
if (piDftDrawing)
{
  CATIDftSheet *piDftSheet = NULL;
  piDftDrawing-&gt;GetActiveSheet(&amp;piDftSheet);
  if (piDftSheet)
  {
    // Retrieves the factory
    hr = piDftSheet-&gt;QueryInterface(IID_CATIDftGenViewFactory,(void **)&amp;piDftGenViewFact);
    piDftSheet-&gt;Release(); piDftSheet=NULL;
  }
  piDftDrawing-&gt;Release();piDftDrawing=NULL;
}
...</pre>
<p>The CATIDftGenviewFactory interface, implemented by the Drawing Sheet, contains 
methods to create Generative Views. The created view is automatically aggregated 
by the Drawing Sheet.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Creating a <span lang="fr">CATOmbObjectInContext</span> 
f<span lang="fr">rom </span>the FTA View Reference</h3>
<pre class="code">...
CATOmbObjectInContext * OmbObjCtx = NULL;
if (piRepInstOnRoot &amp;&amp; piNavRepInst &amp;&amp; piTPSView)
{
  CATIPLMComponent * RepInstance = NULL;
  if (SUCCEEDED(piNavRepInst-&gt;QueryInterface(IID_CATIPLMComponent,(void**)&amp;RepInstance)))
  {
    CATListPtrCATIPLMComponent ComponentList; //empty list, Product is a 3D Part, not several levels
    CATBaseUnknown * TPSObject = NULL;
    if (SUCCEEDED(piTPSView-&gt;QueryInterface(IID_CATBaseUnknown,(void**)&amp;TPSObject)))
    {
      CATOmbObjectInContext::CreateObjectInContext(ComponentList, RepInstance, TPSObject, OmbObjCtx);
      TPSObject-&gt;Release();  TPSObject=NULL;
    }
    RepInstance-&gt;Release();  RepInstance=NULL;
  }
}
...</pre>
<p>In this case, a CATOmbObjectInContext has been built from the root product to 
the TPSView, the instance of the representation containing the TPS View must be 
mentioned in the Path Element.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Creating a Generative View from 3D by using a CATOmbObjectInContext 
class</h3>
<pre class="code">...
if (piDftGenViewFact)
{
  CATIDftView *piDftViewFrom3D = NULL;
  // Defines the view anchor point
  double ptOrigin[2] = {350.0,250.0};

  // Defines the view style
  CATUnicodeString  viewStyle=" ";
  hr =  piDftGenViewFact-&gt;CreateViewFrom3D (ptOrigin, OmbObjCtx, &amp;piDftViewFrom3D,viewStyle);

  if (SUCCEEDED(hr) &amp;&amp; piDftViewFrom3D) 
  {
    piDftViewFrom3D-&gt;Release();piDftViewFrom3D=NULL;
    cout &lt;&lt; &quot;The  view from 3D is correctly created&quot; &lt;&lt; endl;
    rc = 0;
  }
  piDftGenViewFact-&gt;Release();piDftGenViewFact=NULL;
}
...</pre>
<p>The CreateViewFrom3D method, defined in CATIDftGenViewFactory allows to create 
an associative Generative View to 3D Data thanks to the CATOmbObjectInContext class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Saving the Drawing Representation Reference in the Database 
and Closing the Session</h3>
<pre class="code">...   
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);

// Unload the component from the current session
hr = hr = Bag.RemoveAll();
if (FAILED(rc))
return 1;

hr = CATPLMSessionServices::ClosePLMSession();</pre>
<p>This section represents the usual sequence for saving a representation reference. 
If the data has been put in a bag remove the data from the bag before closing the 
session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create Generative Views associative to a FTA View 
by using methods defined in CATIDftGenViewFactory interface implemented by the Drawing 
Sheet. The use case shows how to create a CATOmbObjectInContext class on the FTA 
View to create a link between the Generative View and the FTA View.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
