<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Distance Dimension on Interactive Geometry</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Distance Dimension on Interactive Geometry</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCreateDim.cpp use case. This use case 
		explains how to create a distance dimension in an implicit drawing representation 
		reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAADrwCreateDim Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCreateDim Do</a> </li>
					<li><a href="#How">How to Launch CAADrwCreateDimCmd</a></li>
					<li><a href="#Where">Where to Find the CAADrwCreateDim Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case you will learn how to create an associative dimension on two 
2D lines.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCreateDim Use Case</h2>
<p>CAADrwCreateDim is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf and CATAnnotationUseItf frameworks capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCreateDim Do</h3>
<p>This sample creates a dimension on two 2D lines in batch mode:</p>
<table>
	<caption>Fig. 2: The Model Created by CAADrwCreateDim</caption>
	<tr>
		<td>
		<p>
		<img alt="" height="423" src="images/CAADrwCreateDim1.jpg" width="525"/></p>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCreateDim</h3>
<p>To launch CAADrwCreateDim, you will need to set up the build time environment, 
then compile CAADrwCreateDim along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADrwCreateDim Repository Server Username Password SecurityCtx Environment&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th><strong>Description</strong></th>
		<th><strong>Example</strong></th>
		<th><strong>Category</strong></th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name:port_number/ematrix</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM environment</td>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
		<td>Environment</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCreateDim Code</h3>
<p>The CAADrwCreateDim use case is made of one source file named CAADrwCreateDim.cpp 
located in the CAADrwCreateDim.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCreateDim.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five steps in CAADRWCreateDim:</p>
<ol>
	<li><a href="#Step1">Creating the PLM Session </a></li>
	<li><a href="#Step2">Initializes the Environment</a></li>
	<li><a href="#Step3">Creating an Implicit Drawing Representation Reference</a></li>
	<li><a href="#Step4">Creating the Geometric Elements in the Main View</a></li>
	<li><a href="#Step5">Creating the Distance Dimension</a> </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the PLM Session</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  int rc = 1;
  HRESULT hr,hr1,hr2,hr3,hr4,hr5;
  cout &lt;&lt; &quot;CAADrwCreateDim started&quot; &lt;&lt; endl;

  // 1. Checks the input arguments
  // ==========================
  if (7 != iargc)
    return rc;

  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_environment = iargv[6];

  HRESULT hr = ::CAAAdpCreateSession(repository,server_name,user_name,password,SecurityCtx);
  if ( FAILED(hr)) return 1;
...</pre>
<p>This section represents the usual sequence for creating and initializing the 
PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Getting the Current Environment</h3>
<pre class="code">...
  // 4. Init Current PLM environment
  // ===============================
  PLMPSISessionHelpers * pHelpers = NULL ;
  PLMPSISessionHelpers::GetSessionHelpers(pHelpers);
  if ( NULL == pHelpers ) return 1 ; 
   
  // 5. Set the current environment
  // ==============================
  CATIAdpEnvironment * piPLMEnv = NULL;
  hr = pHelpers-&gt;GetCurrentEnvironment(piPLMEnv);
  if (FAILED(hr))
  {
    CATString EnvToUse = comp_environment; 
    hr = pHelpers-&gt;SetCurrentEnvironment(EnvToUse);
  }
...</pre>
<p>If the current environment does not exist, it has to be created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Drawing Representation Reference</h3>
<pre class="code">...   
  // 6. Creates a Drawing representation reference
  // ================================================
  CATIPsiRepresentationReference *piDrawingRepRef = NULL;
  CATListOfCATUnicodeString lstStd;

  // 6.1 Search a standard in the standard list
  // ====================================
  CATDftDrawingPLMServices::GetAvailableDrawingStandards(lstStd)
  CATUnicodeString myStd = lstStd[2];

  // 6.2 Search a sheet style from the choosen standard
  // =============================================
  CATListOfCATUnicodeString lstSheetStyle;
  CATDftDrawingPLMServices::GetListOfSheetStyles(myStd,lstSheetStyle)
  CATUnicodeString mySheetStyle = lstSheetStyle[2];

  // 6.3 Create a Drawing representation reference
  // =================================================
  CATDftDrawingPLMServices::CreateDrawingRepReference(&amp;piDrawingRepRef,myStd,mySheetStyle)
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Geometric Elements in the Main View</h3>
<pre class="code">...
  CATIDftDrawing *piDftDrawing =NULL;
  if (SUCCEEDED(CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing)))
  {
    // 7. Retrieves the active view
    // ========================
    CATIDftView *piDftView = NULL;
    // At this step the Drawing representation contains one sheet. In this sheet there are two views:
    // - The main view (active view)
    // - The background view
    if (SUCCEEDED(piDftDrawing-&gt;GetActiveView(&amp;piDftView)))
    {
      // 8. Creates geometry in the active view
      // =================================
      // We now can create geometries in the main view after :
      // - Getting the view geometry factory interface
      // - A view inherits from sketch
      CATI2DWFFactory *piGeomFactory = NULL;
      if (SUCCEEDED(piDftView-&gt;QueryInterface(IID_CATI2DWFFactory,(void **)&amp;piGeomFactory)))
      {
        double X[2] = { 100.0, 200.0};
        double Z[2] ={ 50.0, 130.0};
        double startPoint[2], endPoint[2];

        // Creation of lines
        startPoint[0] = X[0];
        startPoint[1] = Z[0];
        endPoint[0] = X[1];
        endPoint[1] = Z[0];
        CATBaseUnknown_var spLine1;
        spLine1 = piGeomFactory-&gt;CreateLine(startPoint, endPoint);

        startPoint[0] = X[0];
        startPoint[1] = Z[1];
        endPoint[0] = X[1];
        endPoint[1] = Z[1];
        CATBaseUnknown_var spLine2;
        spLine2 = piGeomFactory-&gt;CreateLine(startPoint, endPoint);
...</pre>
<p>The drawing root is retrieved from the drawing representation reference by using 
the GetDrawingRoot service defined in CATDftDrawingPLMServices toolbox. </p>
<p>To create geometric elements in a view, the view has to be current.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Distance Dimension</h3>
<pre class="code">...
        // 9. Creates dimension on the created geometry
        // =======================================
        // Gets the view annotation factory
        CATIDftDimensionFactory *piDimFactory =  NULL;
        if (SUCCEEDED(piDftView-&gt;QueryInterface(IID_CATIDftDimensionFactory,(void **)-&gt;piDimFactory)))
        {
          cout &lt;&lt;&quot;   The annotation factory is retrieved from the active view&quot; &lt;&lt; endl;
          // Vertical distance dimension creation between Line1 and Line2
          CATDimDefinition dimDef;
          dimDef.DimensionType = DrwDimDistance;
          dimDef.Orientation = DrwDimAuto;

          CATListPtrCATIDftDimensionReference SelectionsList;

          CATIDftDimensionReference_var hDimReference1;
          CATMathPoint2D pt1(X[1], Z[0]);
          if (SUCCEEDED(piDimFactory-&gt;CreateDimensionReference(spLine1,pt1,hDimReference1)))
                                                               SelectionsList.Append(hDimReference1);

          CATIDftDimensionReference_var hDimReference2;
          CATMathPoint2D pt2(X[1], Z[1]);
          if (SUCCEEDED(piDimFactory-&gt;CreateDimensionReference(spLine2,pt2,hDimReference2)))
                                                               SelectionsList.Append(hDimReference2);

          CATIDrwDimDimension_var spDimHoriz;
          hr = piDimFactory-&gt;CreateDimension(SelectionsList,&amp;dimDef,spDimHoriz);
          if (SUCCEEDED(hr) &amp;&amp; NULL_var!=spDimHoriz)
          {
            rc = 0;
            cout &lt;&lt;&quot;The distance dimension between 2 lines is correctly created&quot; &lt;&lt;endl;
          }

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating a dimension 
in a main view of an implicit drawing representation reference. The Dimension is 
created using the <em>CATIDftDimensionFactory</em> interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
		<td>Version: <strong>1</strong> [Dec 2009]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
