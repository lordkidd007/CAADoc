<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Editing Callouts in Generative Views</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Callouts in Generative Views</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCallout use case. This use case explains 
		how to retrieve these elements in a generative view.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwCallout Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCallout Do</a></li>
					<li><a href="#How">How to Launch CAADrwCallout</a></li>
					<li><a href="#Where">Where to Find the CAADrwCallout Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to access callouts in generative views.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCallout Use Case</h2>
<p>CAADrwCallout is a use case of the CAADraftingInterfaces.edu framework that illustrates 
DraftingUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCallout Do?</h3>
<table>
	<caption>Fig. 1: Initial Representation</caption>
	<tr>
		<td>
		<img alt="Initial Representation" height="659" src="images/CAADrwCallout1.jpg" width="919"/></td>
	</tr>
</table>
<p>Fig. 1 represents a Drawing document containing generative views created from 
a Part representation.</p>
<table>
	<caption>Fig. 2: Representation Modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="Representation Modified by the Use Case" height="679" src="images/CAADrwCallout2.jpg" width="950"/></td>
	</tr>
</table>
<p>Fig. 2 represents the Drawing representation modified by the use case program.</p>
<p>All Callouts have been modified by <code>ApplyStyle</code> internal method defined 
in this Use Case, thus, arrows of callout have been changed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCallout</h3>
<p>To launch CAADrwCallout, you will need to set up the build time environment, 
then compile CAADrwCallout along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADrwCallout Repository Server UserId Password SecurityCtx PLMType PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6&nbsp;</td>
		<td>PLM Type</td>
		<td>A PLMType for Component to be opened</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalIDValue</td>
		<td>CAADrwCallout</td>
		<td rowspan="2">Component Attribute </td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwGenViewCallout.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This &quot;3dxml&quot; contains the representation reference with the following 
attributes:</p>
<ul>
	<li><strong>PLMExternalIDValue</strong> : CAADrwCallout</li>
	<li><strong>Version</strong> : --- </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCallout Code</h3>
<p>The CAADrwCallout use case is made of a single source file named CAADrwCallout.cpp 
located in the CAADrwCallout.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCallout.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight steps in CAADrwCallout:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying the Drawing Reference in Database and Loading 
		It</a></li>
	<li><a href="#Step3">Retrieving the Drawing Root from the Drawing Representation 
		Reference and Getting the Active View</a></li>
	<li><a href="#Step4">Accessing All Callouts in All Views</a></li>
	<li><a href="#Step5">Getting the View Associated with the Callout</a></li>
	<li><a href="#Step6">Getting Geometric Information of Profile Associated with 
		a Generative View</a></li>
	<li><a href="#Step7">Modifying the Callout Representation</a></li>
	<li><a href="#Step8">Saving the Representation and Closing the PLM Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int hr = 1;

  // 1. Checks the input arguments
  // =============================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id&gt; &lt;version&gt;&quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_externalId = iargv[7];
  const char* comp_version = iargv[8];
 
  // 2. Creates a PLM session and connect to the input repository
  // ============================================================
  CATBoolean traceok = TRUE;
  hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);

  if (SUCCEEDED(hr))
  {
    cout &lt;&lt; &quot;The Session has been opened &quot; &lt;&lt; endl;
  } else
  {
    cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository &quot; &lt;&lt; endl;
    return rc;
  }  </pre>
<p>This section represents the usual sequence to query a representation reference 
in the database and open it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Drawing Reference in Database and Loading It</h3>
<pre class="code">
...
// 3. Opens the Drawing representation reference 
  // =============================================
  CATIPsiRepresentationReference *piDrawingRepRef = NULL;
  CATOmbLifeCycleRootsBag Bag;
  
  hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp; piDrawingRepRef,Bag);

  if(FAILED(hr) || (NULL==piDrawingRepRef))
  {
    cout &lt;&lt; &quot;Failure to open the Drawing Representation Reference  &quot; &lt;&lt; endl;
  }

  // 4 Loads the Drawing Representation in "Edit Mode"
  // =================================================
  CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
  if (piDrawingRepRef &amp;&amp; SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp;piRepLoadMode ) ) )
  {
    hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
    piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
  } 
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Root from the Drawing Representation 
Reference and Getting the Active View</h3>
<pre class="code">...
// 7. Retrieves the drawing root from the Drawing representation reference
// ==============================================================
CATIDftDrawing *piDftDrawing=NULL;
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);

// 8. Retrieves the active View in the current sheet
// =================================================
CATIDftView *piDftView = NULL;
if (piDftDrawing)
{
if (SUCCEEDED(piDftDrawing-&gt;GetActiveView(&amp;piDftView)))
{

...</pre>
<p>This section represents the usual sequence to query a representation reference 
in the database and open it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Accessing All Callouts in All Views</h3>
<pre class="code">...
// LOOP ON ALL VIEWS IN DRAWING
// ================================
CATIUnknownList * piListOfView = NULL;
if (SUCCEEDED(piDftDrawing-&gt;GetViews(&amp;piListOfView)))
{
  unsigned int piViewListSize = 0;
  piListOfView-&gt;Count(&amp;piViewListSize);

  IUnknown * itemView = NULL;
  CATIDftView *piCurrentView = NULL;

  // Loop on all callouts of the processed view 
  // -----------------------------------------------
  for(unsigned int numview=0 ; numview&lt;piViewListSize ; numview++)
  {
    if( SUCCEEDED( piListOfView-&gt;Item(numview, &amp;itemView) ) )
    {
      if (itemView)
      {
        if (SUCCEEDED(itemView-&gt;QueryInterface(IID_CATIDftView,(void **)&amp;piCurrentView)))
        {
          CATIUnknownList * piListOfCallout = NULL;

          // Get list of callouts of the view processed
          // ----------------------------------------------
          if( SUCCEEDED( piCurrentView-&gt;GetComponents(IID_CATIDrwCalloutAccess, &amp;piListOfCallout) ) )
          {
            if (piListOfCallout)
            {
              unsigned int piListSize = 0;
              piListOfCallout-&gt;Count(&amp;piListSize);

              CATIDrwCalloutAccess* piCallout = NULL;
              IUnknown * item = NULL;

              // Loop on all callouts of the view processed
              // ----------------------------------------------
              for(unsigned int i=0 ; i&lt;piListSize ; i++)
              {
                if( SUCCEEDED( piListOfCallout-&gt;Item(i, &amp;item) ) )
                {
                  if(SUCCEEDED( item-&gt;QueryInterface(IID_CATIDrwCalloutAccess, (void**) &amp; piCallout) ) )
                  {
...</pre>
<p>The GetViews method returns the list of all views in Drawing document. The GetComponents 
method of CATIDftView interface is a generic method to return elements identified 
by his IID.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Getting the View Associated with the Callout</h3>
<pre class="code">...
// Get the view associated with the callout
// -------------------------------------------
CATIDftView *piDefView=NULL;

if (SUCCEEDED(piCallout-&gt;GetAssociatedView(&amp;piDefView)))
{
  piDefView-&gt;GetViewName(&amp;pViewName);
  ViewName.BuildFromWChar(pViewName);
  cerr &lt;&lt; &quot; View name associated to the processed callout: &quot; &lt;&lt; ViewName.CastToCharPtr() &lt;&lt; endl;
...</pre>
<p>GetAssociatedView method defined in CATIDrwCalloutAccess interface returns the 
View from which Callout is defined. In case of Broken View, Callout are created 
in the same View, So GetAssociatedView is useless.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Getting Geometric Information of a Profile Associated with 
a Generative View</h3>
<pre class="code">...
CATIDftGenerSpec *piGenerSpec=NULL;
if (SUCCEEDED(piDefView-&gt;GetGenerSpec(&amp;piGenerSpec)))
{
  // Get callout type
  // -------------------
  CATIDrwCalloutAccess::CATDrwCalloutType calloutType;
  piCallout-&gt;GetCalloutType(calloutType);

  if (calloutType == CATIDrwCalloutAccess::SectionCallout)
  {
    CATListPtrCATMathPoint2D ListOfPoints;    
    int depli=0;
    CATMathDirection vecpro;

    // Get geometric informations about section profile
    // ---------------------------------------------------------
    if (SUCCEEDED(piGenerSpec-&gt;GetSectionProfile(ListOfPoints,depli,vecpro)))
    {
      int NbPt = ListOfPoints.Size();
      for (int numpt=1 ; numpt&lt;=NbPt ; numpt++)
      {
        CATMathPoint2D *tmpt = ListOfPoints[numpt];
        cerr &lt;&lt; &quot; Number point = &quot; &lt;&lt; numpt &lt;&lt; &quot;, X= &quot;&lt;&lt; tmpt-&gt;GetX() &lt;&lt; &quot;Y = &quot; &lt;&lt; tmpt-&gt;GetY() &lt;&lt; endl;

        // Memory clean
        if (tmpt) delete tmpt , tmpt=NULL;
      }
    } 
  }
...</pre>
<p>From the Associated view to the Callout, It is possible to retrieve the definition 
of the View. For example for a Section View, the Cutting Profile may be obtained 
by GetSectionProfile method defined in CATIGenerSpec Interface.</p>
<p><strong>Note</strong>: depli and vecpro arguments are dedicated to give information 
about the type of the profile (Aligned Section View or Offset Section View)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Modifying the Callout Representation</h3>
<pre class="code">...
int NbTexts;
hr = piCallout-&gt;GetNumberOfTexts(NbTexts);
if (SUCCEEDED(hr))
{
  for (int iNumText = 1; iNumText &lt;= NbTexts ; iNumText++)
  {
    CATIDrwDftText *piDftText=NULL;
    hr = piCallout-&gt;GetCalloutText(iNumText,&amp;piDftText);
    if (SUCCEEDED(hr) &amp;&amp; piDftText)
    {
      wchar_t *ptextName=NULL;
      if (SUCCEEDED(piDftText-&gt;GetString(&amp;ptextName)))
      {
        CATUnicodeString strTextName;
        strTextName.BuildFromWChar(ptextName);
        cerr &lt;&lt; &quot; texte name = &quot; &lt;&lt;strTextName.CastToCharPtr() &lt;&lt; endl;
        if (ptextName) delete[] ptextName; ptextName = NULL;
      }
      piDftText-&gt;Release();piDftText=NULL;
    }
  }
  // Modification of the callout Representation
  int thickness = 2;
  hr = piCallout-&gt;SetProfileThickness(thickness);

  int linetype = 3;
  hr = piCallout-&gt;SetProfileLineType(linetype);

  int NbArrows;
  hr =piCallout-&gt;GetNumberOfArrow(NbArrows);
  if (SUCCEEDED(hr))
  {
    for (int iNumArrow = 1; iNumArrow &lt;= NbArrows ; iNumArrow++)
    {
      double ArrowLength,ArrowLengthSymb,ArrowAngleSymb,ArrowOrientation;
      CATSymbolType ArrowTypeSymb;
      ArrowLength=35.0;
      ArrowTypeSymb=FILLED_ARROW;
      ArrowLengthSymb=6.0;
      ArrowAngleSymb=45.0;

      hr = piCallout-&gt;SetInfoOfArrow(iNumArrow,ArrowLength,ArrowTypeSymb,ArrowLengthSymb,ArrowAngleSymb);
    }

    if (NbArrows != 0)
    {
      CATDftArrowExtremity calloutAttachment;
      hr = piCallout-&gt;GetArrowsAttachment(calloutAttachment);
      calloutAttachment= CATDftArrowTail;
      hr = piCallout-&gt;SetArrowsAttachment(calloutAttachment);
    }
  }
}
...</pre>
<p><strong>Note</strong>: Up to V5R13, associated texts to the Callout may be based 
on simple text instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Saving the Representation and Closing the PLM Session</h3>
<pre class="code">...
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = Bag.RemoveAll();
hr = CATPLMSessionServices::ClosePLMSession();
}</pre>
<p>This section represents the usual sequence for saving a newly created CATIA document 
[<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the way to:</p>
<ol>
	<li>Query a Drawing representation reference</li>
	<li>Scan all callouts in the representation reference</li>
	<li>Retrieve the view associated with the Callout</li>
	<li>Retrieve Geometric Definition of a Generative View linked to a Callout</li>
	<li>Read and modify representation of a callout</li>
	<li>Save the representation reference.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
