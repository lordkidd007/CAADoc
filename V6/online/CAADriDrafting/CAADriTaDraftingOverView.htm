<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Drafting Modeler Overview</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Drafting Modeler Overview</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the Drafting modeler foundations.</p>
		<ul>
			<li><a href="#Overview">Drafting Modeler Overview</a></li>
			<li><a href="#Prerequisites">Drafting Product Prerequisites</a></li>
			<li><a href="#Structure">Drafting Structuring Objects</a></li>
			<li><a href="#2DComponent">Drafting 2D Component Objects</a></li>
			<li><a href="#2DGeometry">Drafting 2D Geometry Objects</a></li>
			<li><a href="#2DConstraint">Drafting 2D Constraint Objects</a></li>
			<li><a href="#Annotation">Drafting Annotation Objects</a></li>
			<li><a href="#DressUp">Drafting Dress-up Objects</a></li>
			<li><a href="#GenerativeViews">Drafting Generative Views</a></li>
			<li><a href="#GeneratedObjects">Drafting Generated Objects</a></li>
			<li><a href="#Additional">Additional Notions</a></li>
			<li><a href="#CopyPaste">Copy Paste, Life Cycle and Update</a></li>
			<li><a href="#Licensing">Licensing</a></li>
			<li><a href="#References">References</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Overview"></a>Drafting Modeler Overview</h2>
<p>The Drafting application is in relation with several domains. The Drafting modeler 
enables you to automate tasks linked to these domains. See below the added values 
of the Drafting modeler.</p>
<table>
	<caption>Main Domains Linked to the Drafting Application</caption>
	<tr>
		<td>
		<img alt="Main Domains Linked to Drafting" height="286" src="images/CAADriDraftingEcosystem.gif" width="410"/></td>
	</tr>
</table>
<table>
	<caption>Added Values of the Drafting Modeler</caption>
	<tr>
		<td>
		<img alt="Drafting Modeler Added Values" height="434" src="images/CAADriDraftingAddedValue.gif" width="526"/></td>
	</tr>
</table>
<p>The Drafting modeler manages geometry, constraint, annotation, dress-up and structuring 
objects (Sheet, View, Detail Sheet, Ditto). All elements created by the Drafting 
modeler are fully integrated in the Drawing Representation Reference. That means, 
they will recognized by internal mechanism such as sketcher picking assistant, dimensioning, 
associative orientation and positioning and constraints.</p>
<table>
	<tr>
		<td>
		<img alt="" height="537" src="images/CAADriDraftingWorkBench.gif" width="827"/></td>
	</tr>
</table>
<p>The Drafting workbench is loaded and the current drawing sheet (Sheet.1) opens. 
The drawing specification tree is displayed to the left of the sheet. This tree 
shows aggregations between structuring objects. &quot;Front View&quot; view of &quot;Sheet.1&quot; 
sheet is the active view of the active sheet: That means all elements created by 
indication will be aggregated on this view. The titleblock is created by an VB automation 
launched by an interactive command defined in the background Drafting workbench.</p>
<p>A Drawing Representation Reference is a collection of Sheets, along with information 
on the Drafting standard (ISO, ANSI, ASME and JIS or company standard).</p>
<p>The Sheet corresponds to the paper space, where the following elements are positioned:</p>
<ol>
	<li>One main View: this View supports the geometries directly created in the 
		sheet</li>
	<li>One background View: this View is dedicated to frame, title block, revision 
		blocks and bill of materials</li>
	<li>Any number of interactive and Generative Views.</li>
</ol>
<p>The view may contain:</p>
<ul>
	<li><strong>2D geometry</strong>: Geometry created by using the drafting interactive 
		commands. The CAA Sketcher modeler is used to create 2D geometry.</li>
	<li><strong>Generative results</strong>: Non modifiable geometry created from 
		3D representations and linked to them.</li>
	<li><strong>Constraints</strong>: Sketcher modeler is used to create constraints.</li>
	<li><strong>Annotations</strong>: All elements containing text information: 
		dimensions, texts, roughness symbols, welding symbols.</li>
	<li><strong>Dress up</strong>: Area fill, Axis Lines, Center Lines, Arrows, 
		Threads.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Prerequisites"></a>Drafting Product Prerequisites</h2>
<p>The drafting application is managed by two products:</p>
<ul>
	<li>Interactive Drafting product that addresses 2D design and drawing production 
		requirements.</li>
	<li>Generative Drafting product that provides functionalities to generate drawings 
		from 3D parts and assembly definitions.</li>
</ul>
<p>These two products are prerequisite to develop an application based on Drafting 
modeler.</p>
<p>Four frameworks contain the Drafting modeler API:</p>
<ol>
	<li>DraftingUseItf: This framework contains all Drafting APIs except Detail, 
		2D geometry, Annotation and Constraint objects.</li>
	<li>CATSketcherUseItf: This framework is dedicated to managing sketcher component: 
		detail, 2D geometry, and constraint objects.</li>
	<li>CATAnnotationUseItf: This framework is dedicated to managing Annotations.</li>
	<li>CATDibModelerUseItf: This framework is dedicated to centralizing all the 
		basic cross applications 2D services.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Structure"></a>Drafting Structuring Objects </h2>
<p>The Drawing application data is included in an applicative container: All Drafting 
features are accessible from the Drawing Root feature.</p>
<p>When a drawing representation reference is created, the following objects are 
created at the same time:</p>
<ul>
	<li>The drawing container.</li>
	<li>The drawing root.</li>
	<li>The first Sheet.</li>
	<li>A main View aggregated by the first Sheet.</li>
	<li>A background View aggregated by the first Sheet.</li>
	<li>The Drawing standard.</li>
</ul>
<p>The CATDftDrawingPLMServices toolbox contains all the APIs to create a drawing 
representation reference and navigate between the representation and the drawing 
root. The services defined in this toolbox allow you to [<a href="#References">1</a>]:</p>
<ul>
	<li>Get all the available standards in the environment.</li>
	<li>Get all the sheet styles from a given standard.</li>
	<li>Create an explicit Drawing Representation Reference.</li>
	<li>Create an implicit Drawing Representation Reference.</li>
	<li>Get the Drawing Root from the Drawing Representation Reference.</li>
	<li>Retrieve the Drawing Representation Reference from the Drawing Root.</li>
	<li>Get the available format from the standard and apply it to the first sheet.</li>
	<li>Load the 3D data attached to the Drawing Representation.</li>
</ul>
<p>The main APIs to create and navigate into the drafting structuring objects are:</p>
<ul class="wide">
	<li><em>CATIDftDrawing</em>
		<table class="fill">
			<tr>
				<td><code>AddSheet</code></td>
				<td>Creates a new sheet and updates the sheet page manager</td>
			</tr>
			<tr>
				<td><code>GetSheets</code></td>
				<td>Retrieves the list of the sheets defined in the drawing representation</td>
			</tr>
			<tr>
				<td><code>GetViews</code></td>
				<td>Retrieves all the views defined in the drawing representation</td>
			</tr>
			<tr>
				<td><code>GetActiveSheet</code></td>
				<td>Retrieves the active sheet of the drawing representation</td>
			</tr>
			<tr>
				<td><code>GetActiveView</code></td>
				<td>Retrieves the active view of the active sheet of the drawing 
				representation</td>
			</tr>
		</table>
	</li>
	<li><em>CATIDftSheet</em>
		<table class="fill">
			<tr>
				<td><code>CreateView</code></td>
				<td>Creates a new interactive view. The view is aggregated in the 
				sheet.</td>
			</tr>
			<tr>
				<td><code>GetDefaultActiveView</code></td>
				<td>Retrieves the active view of the sheet</td>
			</tr>
			<tr>
				<td><code>GetMainView</code></td>
				<td>Retrieves the main view of the sheet</td>
			</tr>
			<tr>
				<td><code>GetBackgroundView</code></td>
				<td>Retrieves the background view of the sheet</td>
			</tr>
		</table>
	</li>
	<li>CATIDftView
		<table class="fill">
			<tr>
				<td><code>GetComponent</code></td>
				<td>Retrieves elements aggregated by the view and identified by 
				its IID.</td>
			</tr>
		</table>
	</li>
	<li><em>CATIDftFactory</em> implemented on drawing container enables you to 
		create any objects which are not aggregated by a view. for example pattern, 
		detail or relations.</li>
</ul>
<p>A sheet aggregates views and a view aggregates all objects instantiated in it. 
There is always an active view in a sheet. To create objects directly in a sheet, 
the main view of the sheet has to be activated.</p>
<table>
	<caption>Drafting Structuring Objects UML Diagram</caption>
	<tr>
		<td>
		<img alt="Drafting Structuring Objects UML Diagram" height="293" src="images/CAADriStructuringObjectUML.gif" width="390"/><p>
		</p>
		</td>
	</tr>
</table>
<p>A view inherits from sketch to manages 2D geometry and 2D constraints. Two kinds 
of geometry coexist in a view:</p>
<ol>
	<li>2D geometry: geometry managed by the CAA sketcher modeler.</li>
	<li>Generative geometry: geometry created in a generative view from 3D data.</li>
</ol>
<p>Two kinds of interfaces allow you to get information on geometry:</p>
<ol>
	<li>IDMxxx interfaces: these interfaces are implemented by 2D geometry as well 
		as generative geometry.</li>
	<li>CATISktUse2Dxxx interfaces: these interfaces are only available with 2D 
		geometry.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="2DComponent"></a>Drafting 2D Component Objects</h2>
<p>A 2D component is a re-usable set of geometry and annotations. This component 
is located in a detail sheet and can be edited like a view. This is why this component 
is called Detail View. The 2D component can be instantiated several times, each 
instance providing a component with a specific orientation, position and scale.</p>
<p>No object can be modified in Ditto instance except Text modifiable in instance.</p>
<p><strong>Text modifiable in instance:</strong></p>
<p>A modifiable text in instance is a text with a specific attribute to inform the 
system to duplicate the text when a ditto is instantiated. See under the way to 
access to modifiable objects in instance:</p>
<pre class="code">// GetModifiableObjects method allows you to retrieve texts modifiable in ditto piDitto

CATIADrawingComponent * piMyDrawComp = NULL;
HRESULT rc = piMyDitto -&gt; QueryInterface (IID_CATIADrawingComponent,(void**)&amp;piMyDrawComp);
if ( SUCCEEDED(rc) )
{
  long Count = 0;
  piMyDrawComp -&gt; GetModifiableObjectsCount (Count);
  for ( int Idx = 1; Idx&lt;=Count; Idx++ )
  {
    CATVariant Variant;
    rc = BuildVariant ((long)Idx, Variant);
    if ( SUCCEEDED(rc) )
    {
      CATIABase * piABase = NULL;
      rc = piMyDrawComp -&gt; GetModifiableObject (Variant, <strong>piABase</strong>);
      if ( SUCCEEDED(rc) )
     {</pre>
<p>Note: There is no C++ interface dedicated to manage 2D Component, the previous 
code sample uses interface C++ generated from IDL interfaces: </p>
<ol>
	<li>CATIADrawingComponents manages the lifecycle of the 2DComponent and implemented 
		by a Sheet.</li>
	<li>CATIADrawingComponent manages the 2DComponent properties.</li>
</ol>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="2DGeometry"></a>Drafting 2D Geometry Objects </h2>
<p>These objects are created by using 2D wire frame factory defined in CATSketcherUseItf 
framework. A pointer on <em>CATISktUse2DWFFactory</em> interface may be obtained 
by using a <code>QueryInterface</code> on the view [<a href="#References">1</a>].</p>
<p><strong>Notes</strong>:</p>
<ol>
	<li>The view has to be activated to deal with 2D geometry. When a view is activated, 
		associated sketch is in open edition, so geometry may be created.</li>
	<li>If an interactive command deals with geometry, at the end of the 2D geometry 
		creation step, <code>SaveEdition</code> method defined on <em>CATISktUseSketchEditor</em> 
		interface has to be executed. <em>CATISktUseSketch</em> interface inherits 
		from <em>CATISktUseSketchEditor</em>, so, <code>SaveEdtion</code> may be 
		executed from <em>CATISktUseSketch</em> interface.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="2DConstraint"></a>Drafting 2D Constraint Objects </h2>
<p>These objects are created by using 2D constraint factory defined in CATSketcherUseItf 
framework. A pointer on <em>CATISktUse2DConstraintFactory</em> interface may be 
obtained by using a <code>QueryInterface</code> on the view. In this factory
<code>CreateConstraint</code> method allows constraints to be created in the view.</p>
<h2><a name="Annotation"></a>Drafting Annotation Objects </h2>
<p>These objects are created by using annotation factories defined in CATAnnotationUseItf 
framework. Pointers on these factories may be obtained by using a <code>QueryInterface</code> 
on the View [<a href="#References">2</a>]. All the annotations inherit from Annotation 
object. <em>CATIftAnnotation</em> interface manages associative position and associative 
orientation between annotations or annotation and geometry and also global information 
relative to the annotation text.</p>
<table class="fill">
	<tr>
		<td>CATIDftBaseAnnotationFactory</td>
		<td><em>To create Texts, Ballons and Arrows.</em></td>
	</tr>
	<tr>
		<td>CATIDftDimensionFactory</td>
		<td><em>To create Dimensions</em></td>
	</tr>
	<tr>
		<td>CATIDftSpecialAnnotationFactory</td>
		<td><em>To create GD&amp;T, Datum target, Datum Feature or Roughness symbol.</em></td>
	</tr>
</table>
<p>When an annotation is modified feature has to be rebuild to get the result [<a href="#References">3</a>].</p>
<table>
	<caption>Annotation Objects UML Diagram</caption>
	<tr>
		<td>
		<img alt="" height="673" src="images/CAADriAnnotationObjectUML.gif" width="559"/>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="DressUp"></a>Drafting Dress-up objects </h2>
<p>These objects are created by using drawing annotation factories. A pointer on
<em>CATIDftSpecialDressUpFactory, CATIDftBaseDressUpFactory </em>interface may be 
obtained by using a <code>QueryInterface</code> on the view. Sometime these elements 
require geometry to be created. The Center Line Creation sample explains how to 
create center line from 2D geometry or Generative Geometry [<a href="#References">4</a>].</p>
<table class="fill">
	<tr>
		<td>CATIDftSpecialDressUpFactory</td>
		<td>To create Axis Line, Center Line and Threads</td>
	</tr>
	<tr>
		<td>CATIDftBaseDressUpFactory</td>
		<td>To create Area Fill or Insert Pictures</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="GenerativeViews"></a>Drafting Generative Views</h2>
<p>These views are created from 3D data coming from 3D Shape representations included 
in products. A dedicated interface, <em>CATIDftGenViewFactory</em>, allows the generative 
views to be created. This interface is implemented by the sheet object, so the created 
generative view is automatically aggregated by the sheet after creation [<a href="#References">5</a>]. 
The necessary information to create a link between 3D data and the generative view 
is insured by a<em> CATOmbObjectInContext</em>[<a href="#References">6</a>] .</p>
<p>Additional features are created to manage callouts. A callout is composed of 
one or several texts, circular or linear segments and arrows, it represents for 
example the cutting profile when a section view is created or the clipping in a 
detail view [<a href="#References">7</a>].</p>
<p><strong>Note:</strong> When a Drawing representation containing generative views 
is opened, the associated 3D data are not loaded, a dedicate service, <code>Load3DDataFromDrawing</code>, 
defined in <em>CATDftGenPLMServices</em> toolbox allows 3D data to be loaded 
from the Drawing Representation Reference</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="GeneratedObjects"></a>Drafting Generated Objects </h2>
<p>These objects are automatically created when a Generative View is created or 
updated. Generative Geometry is defined from 3D data and associated on it. Generative 
Geometry cannot be edited, only graphic properties may be modified [<a href="#References">8</a>].</p>
<p><strong>Note:</strong> If graphic properties of Generative Geometry are modified, 
the size of the model increases and the performance during update step of the Drawing 
Views decreases. Indeed, during Generative View update step, Generative Geometry 
is removed and recreated. So, a mapping table is created to store the graphic properties 
modifications to restore the correct properties at the end of the update. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Additional"></a>Additional Notions</h2>
<p>Drafting application proposes a set of interfaces to plug a CAA toolbar in the 
Drafting workbenches:</p>
<ul>
	<li>The <em>CATIDrwAddIn</em> interface enable you to add a new command in Drafting 
		Working Views workbench.</li>
	<li>The <em>CATIDrwBGAddin</em> interface enable you to add a new command in 
		Drafting Sheet Background workbench.</li>
	<li>The <em>CATIDrwDetailWkbAddin</em> interface enable you to add a new command 
		in Drafting Detail Sheet workbench.</li>
</ul>
<p>Interactive commands defined in CAADraftingInterfaces.edu framework have been 
plugged in a toolbar by using <em>CATIDrwAddIn</em> interface.</p>
<p>The <em>CATIDftMultiSheet</em> interface, implemented by the sheet enables an 
interactive command to be kept active when the active sheet is changing [<a href="#References">8</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CopyPaste"></a>Copy Paste, Life Cycle and Update</h2>
<p>Most of the CAA Drafting features implements <em>CATIUseEntity</em> interface. 
This interface allows to use <em>DataCommonProtocolServices</em> and <em>DataCommonProtocolCCPServices</em> 
services. [<a href="#References">9</a>]</p>
<table class="fill">
	<tr>
		<th>Service</th>
		<th>Methods</th>
	</tr>
	<tr>
		<td>DataCommonProtocolServices</td>
		<td>CanDelete, Delete, IsUpToDate, Update</td>
	</tr>
	<tr>
		<td>DataCommonProtocolCCPServices</td>
		<td>CopyAndPasteTo, GetAvailableFormats, CopyAndPasteSpecialTo</td>
	</tr>
</table>
<p><strong>Notes:</strong></p>
<ul>
	<li>IsUptodate, Update methods are only implemented by the Generative Views. 
		To update a feature aggregated by a view, the view aggregating the feature 
		must be updated. Drawing features implement CanDelete and Delete methods</li>
	<li>Copy/paste operation is not available for all features. For example a Callout 
		feature can not be copied/pasted.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Licensing"></a>Licensing</h2>
<p>Drafting Modeler API are available if license one of the following technical 
product is granted: ID1,GDR,LO1,FTA. ID1 and GDR are included in the TDD commercial 
product.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAADriUcStructure.htm">Creating a New Drawing Representation 
		Reference</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADriUcCreateDim.htm">Creating a Distance Dimension on Interactive 
		Geometry</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAADriUcDimDressup.htm">Editing Dimension Dress-Up</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAADriUcCenterLine.htm">Creating Center Lines in a Drawing 
		Representation Reference</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAADriUcCreateGenView.htm">Creating a Generative View from 
		3D Data </a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbModelingProtocol/CAAOmbTaVirtualObject.htm'); return false;">
		Understanding Link Concepts</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAADriUcCallout.htm">Editing Callouts in Generative Views</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAADriUcGenViewAccess.htm">Editing Generated Geometry in Generative 
		Views</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAADriUcMultiSheetCmd.htm">Creating a Multi Sheet Interactive 
		Command</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbModelingProtocol/CAAOmbTcModelingProtocolToc.htm'); return false;">
		Modeling Protocol</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article has explained the foundations of the Drafting Modeler.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Dec 2009]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [May 2010]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Nov 2011]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
