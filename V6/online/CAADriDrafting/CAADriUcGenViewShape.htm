<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Editing Generative Shape</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Generative Shape</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwGenShape use case. This use case explains 
		how to retrieve a generated shape in the generative view. A generated shape 
		is a generated contour when a section view is created and used to delimit 
		the pattern area.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwGenShape Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwGenShape Do</a></li>
					<li><a href="#How">How to Launch CAADrwGenShape</a></li>
					<li><a href="#Where">Where to Find the CAADrwGenShape Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, and save in database, a 
PLM drawing representation reference. You will learn:</p>
<ul>
	<li>How to retrieve the Drawing Representation Reference from the PLM ID.</li>
	<li>Load the associated 3D data.</li>
	<li>Scan all the Generated Views in the current Sheet.</li>
	<li>Activate the Hidden line mode.</li>
	<li>Save the Drawing Representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwGenShape Use Case</h2>
<p>CAADrwGenShape is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwGenShape Do</h3>
<p>The CAADrwGenShape use case creates 2 Generative View from 3D Data in a Drawing 
Representation Reference already created.</p>
<table>
	<caption>Fig. 1: Drawing Representation Used by the Use case</caption>
	<tr>
		<td>
		<img alt="Initial Drawing Representation" height="673" src="images/CAADrwGenViewShape.jpg" width="495"/></td>
	</tr>
</table>
<p>The program processes the section View.The section view is the activate view 
of the Sheet.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwGenShape</h3>
<p>To launch CAADrwGenShape, you will need to set up the build time environment, 
then compile CAADrwGenShape along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c<em> &quot;</em>CAADrwGenShape <em>Repository</em> <em>Server User</em> <em>Password</em> <em>SecurityCtx 
                                    PLMType AttributeVal1 Version</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for Component to be opened</td>
		<td>component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1<em> </em></td>
		<td>CAADrwGenShapeDRW </td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version<em> </em></td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>].</li>
	<li>The PLMType is necessary to locate the component in database</li>
	<li>The following argument defines the value of the <strong>PLM_ExternalID</strong> 
		attribute of the Drawing PLM representation reference.</li>
	<li>The <strong>Version</strong> is the V_version attribute of a PLM representation 
		reference.</li>
</ul>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwGenShape.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwGenShape Code</h3>
<p>The CAADrwGenShape use case is made of a single source file named CAADrwGenShape.cpp 
located in the CAADrwGenShape.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwGenShape.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven steps in CAADrwGenShape:</p>
<ol>
	<li><a href="#Step1">Parsing the Input Arguments</a></li>
	<li><a href="#Step2">Creating a PLM session and connect to the input repository</a></li>
	<li><a href="#Step3">Retrieving the Drawing Representation Reference and Open 
		it</a></li>
	<li><a href="#Step4">Retrieving the Drawing Root and the Active View</a></li>
	<li><a href="#Step5">Getting all the Generated Shapes in the Active View</a></li>
	<li><a href="#Step6">Reading all the Points defining the Contours of a Generated 
		Shape</a></li>
	<li><a href="#Step7">Retrieving Pattern Associated to a Genrated Shape</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing the Input Arguments</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 1;
  cout &lt;&lt; &quot;CAADrwGenShape started&quot; &lt;&lt; endl;

  // 1. Checks the input arguments
  // =========================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id Drawing&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_externalId = iargv[7];
  const char* comp_version = iargv[8];
...</pre>
<ul>
	<li><code>Repository</code> is the repository name (also named provider) to 
		use.</li>
</ul>
<p>All these data will be used in the next sections to initialize the PLM session 
then to search representation in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a PLM session and connect to the input repository</h3>
<pre class="code"> ...
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Representation Reference</h3>
<pre class="code">...   
CATIPsiRepresentationReference *piDrawingRepRef = NULL;
// Open a Drawing inside a Bag for complete control of its lifecycle
CATOmbLifeCycleRootsBag Bag;&nbsp;
  hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version, IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
 ...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Drawing Root and the Active View</h3>
<pre class="code">...   
CATIDftDrawing *piDftDrawing = NULL;
if (piDrawingRepRef) 
{
  if (SUCCEEDED(CATDftGenPLMServices::Load3DDataFromDrawing(piDrawingRepRef)))
  hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);
}
CATIDftView *piDftView = NULL;
if (piDftDrawing)
{
  hr = piDftDrawing-&gt;GetActiveView(&amp;piDftView);
  piDftDrawing-&gt;Release();piDftDrawing=NULL;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>&nbsp;Getting all the Generated Shapes in the Active View</h3>
<pre class="code">...
CATIUnknownList * piList = NULL;
if (SUCCEEDED(hr) &amp;&amp; piDftView)
{
  if (SUCCEEDED( piDftView-&gt;GetComponents(IID_CATIDrwGenDrawShape,&amp;piList)))
  piDftView-&gt;Release(); piDftView=NULL;
}
if (piList)
{
  unsigned int piListSize = 0;
  CATIDrwGenDrawShape * piGenShape = NULL;
  IUnknown * item = NULL;
  piList-&gt;Count(&amp;piListSize);

  // Loop on all Generated shapes of the view.
  for(unsigned int i=0 ; i&lt;piListSize ; i++)
  {
    if(SUCCEEDED( piList-&gt;Item(i, &amp;item) ) )
    {
    // Retrieves the geometry of the Generated shape .
    if(item)
    {
      item-&gt;QueryInterface(IID_CATIDrwGenDrawShape, (void**) &amp; piGenShape);
      item-&gt;Release(); item = NULL;
    }
...</pre>
<p>GetComponent method is the usual way to retrieve, element aggregatted by a view 
identified by an IID.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Reading all the Points defining the Contours of a Generated 
Shape</h3>
<pre class="code">...
 if (piGenShape)
{
  CATListOfInt ListOfNbPtPerContour;
  CATListPtrCATMathPoint2D ListOfPoints;
  int NbContour=0;
  if (SUCCEEDED(piGenShape-&gt;GetDescription(NbContour, ListOfNbPtPerContour, ListOfPoints)))
  {
    // Check geometry
    for (int numcont=1 ; numcont&lt;=NbContour ; numcont++)
    {
      int NbPtcnt = ListOfNbPtPerContour[numcont];
      for (int numpt=1 ; numpt&lt;=NbPtcnt ; numpt++)
      {
        // Get coordinates of the shape
        CATMathPoint2D *tmpt = ListOfPoints[numpt];
        if (tmpt) 
        {
          nbpointstotal++;
          cout &lt;&lt; &quot; Number point = &quot; &lt;&lt; numpt &lt;&lt; &quot; X= = &quot;&lt;&lt; tmpt-&gt;GetX() &lt;&lt; &quot;Y = &quot; &lt;&lt; tmpt-&gt;GetY() &lt;&lt; endl;
          // Memory clean
          delete tmpt ; tmpt=NULL;
        }
      }
    }
  }
...</pre>
<p>GetViews method returns all the views from the Drawing including the main view 
and the background view.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving Pattern Associated to a Generated Shape</h3>
<pre class="code">...
// Get Pattern used by the generative shape,
CATIDftPattern *piDftPattern=NULL;
if (SUCCEEDED(piGenShape-&gt;GetPattern(&amp;piDftPattern)) &amp;&amp; piGenShape)
{ 
  int patternType=0;
  piDftPattern-&gt;GetPatternType(&amp;patternType);
  if (patternType == 1) 
  {
    nbpattern++;
    cout &lt;&lt; &quot;Hatching Pattern found&quot; &lt;&lt; endl;
  }
  else
    rc = 4;

  piDftPattern-&gt;Release();piDftPattern=NULL;
}

// Memory clean 
piGenShape-&gt;Release(); piGenShape = NULL;...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to retrieve the generated shape in the generative view.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
