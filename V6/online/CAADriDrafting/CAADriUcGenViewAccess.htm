<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Editing Generated Geometry in Generative Views</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Generated Geometry in Generative Views</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwGeomAccess use case. This use case explains 
		how to scan the generative geometryin an existing drawing representation 
		reference. the generated geometry is the geometry extracted from the 3D 
		data and created in the generative view.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwGeomAccess Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwGeomAccess Do</a></li>
					<li><a href="#How">How to Launch CAADrwGeomAccess</a></li>
					<li><a href="#Where">Where to Find the CAADrwGeomAccess Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, and save in database, a 
PLM drawing representation reference. You will learn:</p>
<ul>
	<li>How to retrieve the Drawing Representation Reference from the PLM ID.</li>
	<li>Retrieve the Drawing Root.</li>
	<li>Get the genrated geometry of activate Generative view.</li>
	<li>Save the Drawing Representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwGeomAccess Use Case</h2>
<p>CAADrwGeomAccess is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwGeomAccess Do</h3>
<p>The CAADrwGeomAccess use case creates 2 Generative View from 3D Data in a Drawing 
Representation Reference already created.</p>
<table>
	<caption>Fig. 1: Drawing Representation used by the Use Case</caption>
	<tr>
		<td>
		<img alt="Initial Drawing Representation" height="614" src="images/CAADrwGenViewAccess1.jpg" width="409"/></td>
	</tr>
</table>
<p>The current sheet of this Drawing contains 2 generative views: The front view 
and a section view, the last one is the activated view.</p>
<table>
	<caption>Fig. 2: Drawing Representation Modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="Modified Drawing Representation" height="614" src="images/CAADrwGenViewAccess2.jpg" width="408"/></td>
	</tr>
</table>
<p>The generated geometry is colorizing: The red color is applied for generated 
geometry coming from the section, the green color is applied for generated geometry 
coming from projection.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwGeomAccess</h3>
<p>To launch CAADrwGeomAccess, you will need to set up the build time environment, 
then compile CAADrwGeomAccess along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c<em> &quot;</em>CAADrwGeomAccess <em>Repository</em> <em>Server User</em> <em>Password</em> <em>SecurityCtx PLMType AttributeVal1 Version</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for component To be opened</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1<em> </em></td>
		<td>CAADrwGenAccessDRW </td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version<em> </em></td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>].</li>
	<li>The PLMType is necessary to locate the component in database</li>
	<li>The following argument defines the value of the <strong>PLM_ExternalID</strong> 
		attribute of the Drawing PLM representation reference.</li>
	<li>The <strong>Version</strong> is the V_version attribute of a PLM representation 
		reference.</li>
</ul>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwGenAccess.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwGeomAccess Code</h3>
<p>The CAADrwGeomAccess use case is made of a single source file named CAADrwGeomAccess.cpp 
located in the CAADrwGeomAccess.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwGeomAccess.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven steps in CAADrwGeomAccess:</p>
<ol>
	<li><a href="#Step1">Parsing the Input Arguments</a></li>
	<li><a href="#Step2">Creating a PLM session and connect to the input repository</a></li>
	<li><a href="#Step3">Retrieving the Drawing Representation Reference and Open 
		it</a></li>
	<li><a href="#Step4">Retrieving the Drawing Root from the Representation Reference</a></li>
	<li><a href="#Step5">Retrieving the Generated geometry in the activated view</a></li>
	<li><a href="#Step6">Reading and coloring the Generated geometry</a></li>
	<li><a href="#Step7">Saving the Drawing Representation in the data base and 
		closing the session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing the Input Arguments</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 2;
  int nbpattern = 0;
  int nbpointstotal = 0;
  cout &lt;&lt; &quot;CAADrwGeomAccess started&quot; &lt;&lt; endl;

  // 1. Checks the input arguments
  // =============================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id Drawing&gt; &lt;version&gt;&quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType   = iargv[6];
  const char* comp_drw_externalId = iargv[7];
  const char* comp_version = iargv[8];
...</pre>
<ul>
	<li><code>env</code> is the name of the current environment to use.</li>
	<li><code>Repository</code> is the repository name (also named provider) to 
		use.</li>
</ul>
<p>All these data will be used in the next sections to initialize the PLM session 
then to search representation in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a PLM session and connect to the input repository</h3>
<pre class="code"> ...
  
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Representation Reference and Open 
It</h3>
<pre class="code">... 
  // 3. Opens the Drawing representation reference 
   // =========================================
   CATIPsiRepresentationReference *piDrawingRepRef = NULL;
   CATOmbLifeCycleRootsBag Bag;
   
   hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
   ...
   // 4 Loads the Drawing Representation in "Edit Mode"
   // =================================================
   CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
   if (piDrawingRepRef &amp;&amp;  SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
   {
     hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
     piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
   }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Drawing Root from the Representation Reference</h3>
<pre class="code">...
CATIDftDrawing *piDftDrawing=NULL;
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);
if (FAILED(hr))
cout &lt;&lt; &quot;KO GetDrawingRoot&quot; &lt;&lt; endl;
}...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Generated geometry in the activated view</h3>
<pre class="code">...
CATIDftView *piDftView = NULL;
if (piDftDrawing)
{
  hr = piDftDrawing-&gt;GetActiveView(&amp;piDftView);
  piDftDrawing-&gt;Release();piDftDrawing=NULL;
}

// 6. Retrieves the Applicative Extension of the Generative Section View
// =====================================================================
CATIDftGenGeomAccess *piGenGeomAccess = NULL;
IUnknown *piGenViewAccess = NULL;
if (NULL != piDftView) 
{
  piDftView-&gt;GetApplicativeExtension(IID_CATIDftGenGeomAccess,&amp;piGenViewAccess);
  piDftView-&gt;Release() ; piDftView=NULL;
}
if (piGenViewAccess)
{
  piGenViewAccess-&gt;QueryInterface(IID_CATIDftGenGeomAccess, (void**) &amp; piGenGeomAccess);
  piGenViewAccess-&gt;Release() ; piGenViewAccess=NULL;
}

// 7. Retrieves the list of the Generated geometry
// ===============================================
CATIUnknownList * piList = NULL;
if (piGenGeomAccess)
{
  piGenGeomAccess-&gt;GetAllGeneratedItems(IID_CATIDftGenGeom, &amp;piList);
  piGenGeomAccess-&gt;Release();piGenGeomAccess=NULL;
}
...</pre>
<p>A generative view contains an applicative extension to store the generated geometry 
and the specification of the view.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Reading and coloring the Generated geometry</h3>
<pre class="code">...
 if (piList)
{
  unsigned int piListSize = 0;
  piList-&gt;Count(&amp;piListSize);

  CATIDftGenGeom * piGenGeom = NULL;
  IUnknown * item = NULL;
  CATIVisProperties *piVisProp = NULL;
  CATVisPropertiesValues ioValues;
  CATVisPropertyType iPropertyType = CATVPColor;

  // 8. Loop on all Generated Geometry of the view
  // =============================================
  for(unsigned int i=0 ; i&lt;piListSize ; i++)
  {
    if( SUCCEEDED(piList-&gt;Item(i, &amp;item)))
    {
      if(SUCCEEDED(item-&gt;QueryInterface(IID_CATIDftGenGeom, (void**) &amp; piGenGeom)))
      {
        CATCurve * Curve = NULL;
        if (SUCCEEDED(piGenGeom-&gt;GetUnderlyingGeometry(&amp;Curve))) 
        {
          // 8.1 Color modification
          // ======================
          if(SUCCEEDED( piGenGeom-&gt;QueryInterface(IID_CATIVisProperties, (void**) &amp; piVisProp) ) )
          {
            rc = 0;
            CATBoolean cutInfo = FALSE;
            if (SUCCEEDED(piGenGeom-&gt;IsCut(&amp;cutInfo)))
            {
              // 8.1.1 Red color is applied for generated geometry coming from section 
              // =====================================================================
              if (cutInfo)
                ioValues.SetColor( 255,0,0);

              // 8.1.2 Greeen color is applied for generated geometry coming from projection
              // ===========================================================================
              else
                ioValues.SetColor( 0,255,0);

              piVisProp-&gt;SetPropertiesAtt( ioValues, iPropertyType, CATVPLine);
            }
            piVisProp-&gt;Release(); piVisProp=NULL; 
          }
          Curve-&gt;Release(); Curve = NULL;
        }

        // Memory clean 
        piGenGeom-&gt;Release(); piGenGeom = NULL;
        item-&gt;Release(); item = NULL;
      }
    }
  }
  // Memory clean  
  piList-&gt;Release(); piList = NULL; 
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Saving the Drawing Representation Reference in the Database 
and Closing the Session</h3>
<pre class="code">...   
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = Bag.RemoveAll();
hr = CATPLMSessionServices::ClosePLMSession();</pre>
<p>This section represents the usual sequence for saving a representation reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to retrieve all generated geometry in a generative view.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
