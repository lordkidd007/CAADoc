<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Annotations on View Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Annotations on View Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCoordinates use case. This use case 
		explains how to retrieve the view components and create annotations</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwCoordinates Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCoordinates Do</a></li>
					<li><a href="#How">How to Launch CAADrwCoordinates</a></li>
					<li><a href="#Where">Where to Find the CAADrwCoordinates Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to retrieve the view components. These components can 
be:</p>
<ul>
	<li>Geometry</li>
	<li>Annotations</li>
	<li>Generative results.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCoordinates Use Case</h2>
<p>CAADrwCoordinates is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf and CATAnnotationUseItf frameworks capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCoordinates Do</h3>
<table>
	<caption><a name="Fig1"></a>Fig. 1 The Drawing Representation Reference Before 
	Running CAADrwCoordinates</caption>
	<tr>
		<td>
		<img alt="Drawing Representation Reference Before 
	Running CAADrwCoordinates" height="455" src="images/CAADrwCoordinates1.jpg" width="582"/></td>
	</tr>
</table>
<p>Fig. 1 represents the drawing representation Reference containing 2D points.</p>
<table>
	<caption>Fig. 2 The Drawing Representation Reference After Running CAADrwCoordinates</caption>
	<tr>
		<td>
		<img alt="Drawing Representation Reference After Running CAADrwCoordinates" height="455" src="images/CAADrwCoordinates2.jpg" width="581"/></td>
	</tr>
</table>
<p>Fig. 2 represents the previous drawing representation reference after CAADrwCoordinates 
processing.<br />
A text has been created near each point. This text is formatted like follows:</p>
<p>Point <em>point index</em><br />
X = <em>the x point coordinate</em><br />
Y = <em>the y point coordinate</em></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCoordinates</h3>
<p>To launch CAADrwCoordinates, you will need to set up the build time environment, 
then compile CAADrwCoordinates along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADrwCoordinates Repository Server Username Password SecurityCtx PLMType  PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for Component to be opened</td>
		<td>component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalIDValue</td>
		<td>CAADrwCoordinates</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwCoordinates.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This &quot;3dxml&quot; contains the representation reference with the following 
attributes:</p>
<ul>
	<li><strong>PLMExternalIDValue</strong> : CAADrwCoordinates</li>
	<li><strong>Version</strong> : --- </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCoordinates Code</h3>
<p>The CAADrwCoordinates use case is made of a single source file named CAADrwCoordinates.cpp 
located in the CAADrwCoordinates.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCoordinates.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six steps in CAADRWCoordinates:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying the Drawing Reference in Database and Loading 
		It</a></li>
	<li><a href="#Step3">Retrieving the Drawing Root from the Drawing Representation 
		Reference and Getting the Active View</a></li>
	<li><a href="#Step4">Getting the View Points</a></li>
	<li><a href="#Step5">Scanning Points and Creating Texts</a></li>
	<li><a href="#Step6">Saving the Representation and Closing the PLM Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  // 1. Checks the input arguments
  // =============================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id&gt; &lt;version&gt;&quot;&lt;&lt; endl;
    return 1;
  }

 endl;
    return 1;
  }

  const char* repository = iargv[1];
  const char* server     = iargv[2];
  const char* user       = iargv[3];
  const char* password   = iargv[4];
  const char* SecurityCtx       = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_drw_externalId  = iargv[7];
  const char* comp_version     = iargv[8];
  
  hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
  
...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Drawing Reference in Database and Loading It</h3>
<pre class="code">...
  CATIPsiRepresentationReference *piDrawingRepRef = NULL;
  CATOmbLifeCycleRootsBag Bag;
  
  hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
   ....
  // 4 Loads the Drawing Representation in "Edit Mode"
  // =================================================
  CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
  if (piDrawingRepRef &amp;&amp;  SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
  {
    hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
    piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
  }
...</pre>
<p>This section represents the usual sequence to query a representation reference 
in the database and open it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Root from the Drawing Representation 
Reference and Getting the Active View</h3>
<pre class="code">...
// 7. Retrieves the drawing root from the Drawing representation reference
// ==============================================================
CATIDftDrawing *piDftDrawing=NULL;
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);

// 8. Retrieves the active View in the current sheet
// =================================================
CATIDftView *piDftView = NULL;
if (piDftDrawing)
{
if (SUCCEEDED(piDftDrawing-&gt;GetActiveView(&amp;piDftView)))
{

...</pre>
<p>A drawing may contain several sheets, but only one is the current one. The current 
sheet is the sheet containing the active view, that is the view currently edited.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Getting the View Points</h3>
<pre class="code">...
// 9. Gets the geometry in the view
// ==================================
// The drawing startup model contains several points to annotate by creating a text containing the point coordinates.
CATIUnknownList * piList = NULL;
// Gets the Annotation Factory for the text creation.
CATIDftBaseAnnotationFactory_var spAnnFactory = piDftView;
if (NULL_var != spAnnFactory)
{
  if (SUCCEEDED( piDftView-&gt;GetComponents(IID_CATI2DPoint,&amp;piList)))
...</pre>
<p>The view geometry can be retrieved using the <em>CATIDescendants</em> interface. 
The first argument of the <em>GetDirectChildren</em> method is a scan filter. In 
this example, we only get points.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Scanning Points and Creating Texts</h3>
<pre class="code">...
if (piList)
{
  unsigned int piListSize = 0;
  piList-&gt;Count(&amp;piListSize);
  IUnknown * item = NULL;
  for(unsigned int i=0 ; i&lt;piListSize ; i++)
  {
    if( SUCCEEDED( piList-&gt;Item(i, &amp;item) ) )
    {
      // Gets the coordinates of the current point
      CATI2DPoint *pi2DPoint = NULL;
      hr = item-&gt;QueryInterface(IID_CATI2DPoint,(void **)&amp;pi2DPoint);
      if (SUCCEEDED(hr) )
      {
        double coord[2];
        pi2DPoint-&gt;GetPointData(coord);

        // 10. Compute the string of the text
        // =============================
        CATUnicodeString textString(&quot;Point &quot;);
        CATUnicodeString index;
        index.BuildFromNum(i);
        textString += index;
        int titleLength = textString.GetLengthInChar();
        textString.Append(&quot;\n&quot;);
        textString.Append(&quot;X = &quot;);
        CATUnicodeString coordText[2];
        coordText[0].BuildFromNum(coord[0]);
        textString.Append(coordText[0]);
        textString.Append(&quot;\n&quot;);
        textString.Append(&quot;Y = &quot;);
        coordText[1].BuildFromNum(coord[1]);
        textString.Append(coordText[1]);

        // 11. Creates the text
        // =================
        CATIDftText *piDftText = NULL;
        const double txtpos[2] = {coord[0]+10.0,coord[1]+10.0};
        if (SUCCEEDED(spAnnFactory-&gt;CreateText(txtpos, &amp;piDftText)))
        {
          wchar_t *ptxtChar = new wchar_t[textString.GetLengthInChar()+1];
          textString.ConvertToWChar(ptxtChar);
          piDftText-&gt;SetString(ptxtChar);
          delete [] ptxtChar;
          ptxtChar = NULL; 
          CATIDrwSubString *piDrwSubString = NULL;

          // 12. Modify the text
          // =================
          if (SUCCEEDED(piDftText-&gt;QueryInterface(IID_CATIDrwSubString,(void **)&amp;piDrwSubString)))
          { 
            // Select the sub string to modifiable.
            piDrwSubString-&gt;SetSelection(1,8);

            // Modify the text properties
            CATIDftTextProperties *piTextProp = NULL;
            if (SUCCEEDED(piDftText-&gt;GetTextProperties(&amp;piTextProp)))
            {
              piTextProp-&gt;SetBold(TRUE);
              piTextProp-&gt;SetUnderline(TRUE);
              piTextProp-&gt;Release();piTextProp=NULL;
              
            }
            piDrwSubString-&gt;Release();piDrwSubString=NULL;
          }
          piDftText-&gt;Release();piDftText=NULL;
        }
        pi2DPoint-&gt;Release();pi2DPoint=NULL;
      }
      item-&gt;Release(); item = NULL;
    }
  }
  piList-&gt;Release(); piList = NULL; 
}
...</pre>
<p>We loop on the points and get the coordinates using <em>CATI2DPoint::GetPointData</em>. 
The text string is computed using <em>CATUnicodeString</em> operators.<br />
The <em>CATIDftBaseAnnotationFactory</em> annotation factory is implemented by the 
view and so the coordinates passed in <code>CreateDftText</code> are view coordinates. 
The <em>CATIDftTextProperties</em> interface allows text property modifications, 
such as setting the text with a bold typeface using the <code>SetBold</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Saving the Representation and Closing the PLM Session</h3>
<pre class="code">...
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = Bag.RemoveAll();
hr = CATPLMSessionServices::ClosePLMSession();</pre>
<p>This section represents the usual sequence for saving a newly created representation 
reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows also how to open a drawing representation reference, get 
the root feature which implements the <em>CATIDftDrawing</em> interface. A pointer 
to this interface is the key to enter and navigate inside the drawing structure, 
and can be retrieved using the <code>GetDrawingRoot </code>method of the <em>CATDftDrawingPLMServices
</em>toolbox. Retrieving the active view is performed thanks to the <code>GetCurrentView</code> 
method of the <em>CATIDftDrawing</em> interface. This current view is scanned using 
the GetComponents method of <em>CATIDftView</em>.<br />
The view also implements the <em>CATIDftBaseAnnotationFactory</em> interface and 
the texts are created using its <code>CreateDftText</code> method, and set with 
a bold typeface using the <code>SetBold</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
