<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Dimension System on Interactive Geometry</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Dimension System on Interactive Geometry</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCreateDimSyst use case. This use case 
		explains how to create dimension system on interactive in a drawing representation 
		reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAADrwCreateDimSyst Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCreateDimSyst Do</a>
					</li>
					<li><a href="#How">How to Launch CAADrwCreateDimSyst</a></li>
					<li><a href="#Where">Where to Find the CAADrwCreateDimSyst Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case you will learn how to create dimension system on interactive 
geometry. The dimension system is a set of dimensions. The positioning of these 
dimensions depend of the type of the dimension system: Cumulated, Stacked or Chained. 
This sample is an interactive command which create a Stacked dimension system, from 
extremity points of line put in the CSO.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCreateDimSyst Use Case</h2>
<p>CAADrwCreateDimSyst is a use case of the CAADraftingInterfaces.edu framework 
that illustrates DraftingUseItf and CATAnnotationUseItf frameworks capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCreateDimSyst Do</h3>
<p>This use case is made of a state command that creates a dimension system from 
points already put in the CSO.</p>
<table id="table3">
	<caption>Fig. 1: The Drawing with Geometry on which the Dimensions Will Be Created</caption>
	<tr>
		<td>
		<img alt="Drawing with Geometry on which the Dimensions Will Be Created" height="578" src="images/CAADrwCreateDimSyst1.jpg" width="560"/></td>
	</tr>
</table>
<p>This picture represents geometry created by Interactive Drafting product</p>
<table id="table4">
	<caption>Fig. 2: The Drawing with Selected Points Used to Create a Dimension 
	System (Red Squares)</caption>
	<tr>
		<td>
		<img alt="Drawing with Selected Points Used to Create a Dimension System" height="542" src="images/CAADrwCreateDimSyst2.jpg" width="529"/></td>
	</tr>
</table>
<table id="table5">
	<caption>Fig. 3: The Drawing with Geometry on which the Dimensions Are Created</caption>
	<tr>
		<td>
		<img alt="Drawing with Geometry on which the Dimensions Are Created" height="723" src="images/CAADrwCreateDimSyst3.jpg" width="531"/></td>
	</tr>
</table>
<p>This picture shows the dimension system created by the CAA command CreateDimSystem.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCreateDimSyst</h3>
<p>To launch CAADrwCreateDimSyst, you will need to set up the build time environment, 
then compile CAADrwCreateDimSyst and CAADrwAddin along with its prerequisites, set 
up the run time environment.[<a href="#References">1</a>].</p>
<ol>
	<li>Launch a CATIA session</li>
	<li>Right-click on the Drafting workshop to activate CAAUseCaseCommands toolbar</li>
	<li>Launch the <span lang="fr">Creating a Dimension System </span>use case command, 
		and select geometry.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCreateDimSyst Code</h3>
<p>The CAADrwCreateDimSyst use case is made of two source files named CAADrwCreateDimSystCmd.h 
and CAADrwCreateDimSystCmd.cpp located in the CAADrwCreateDimSyst.m module of the 
CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCreateDimSyst.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three steps in CAADrwCreateDimSyst:</p>
<ol>
	<li><a href="#Step1">Building the State Chart and Creating the Appropriate 
		Selection Agent</a> </li>
	<li><a href="#Step2">Retrieving the Selection and Creating the Dimension System</a></li>
	<li><a href="#Step3">Modifying The Dimension System</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Building the State Chart and Creating the Appropriate 
Selection Agent</h3>
<pre class="code">void CAADrwCreateDimSystCmd::BuildGraph()
{ 
  // Creation of the acquisition agent
  _pObjectAgent = new CATPathElementAgent(&quot;_pObjectAgent A&quot;);
  _pObjectAgent -&gt;SetBehavior( CATDlgEngWithPrevaluation | 
  CATDlgEngMultiAcquisition | 
  CATDlgEngWithCSO); 

  // We only want to get points
  _pObjectAgent -&gt;AddElementType(&quot;IDMPoint2D&quot;);
  AddCSOClient(_pObjectAgent);

  // States definition
  CATDialogState* pState1 = GetInitialState(&quot;Sel points&quot;);
  pState1-&gt;AddDialogAgent(_pObjectAgent);

  // Transition definition 
  AddTransition(pState1, NULL, IsOutputSetCondition(_pObjectAgent),
  Action((ActionMethod)&amp;CAADrwCreateDimSystCmd::CreateDimSyst, NULL, NULL));
}</pre>
<p>In this section we create a CATPathElementAgent and set the corresponding element 
type to IDMPoint.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Selection and Creating the Dimension System</h3>
<pre class="code">boolean CAADrwCreateDimSystCmd::CreateDimSyst(void *iData)
{ 
  CATSO* pObjSO = _pObjectAgent-&gt;GetListOfValues(); 
  CATPathElement *pElemPath = NULL;

  // Dimension System creation:
  // ==========================
  if (NULL != pObjSO) 
  {
    // We will scan the CSO from the begining
    pObjSO-&gt;InitElementList();
    CATIDftDimensionFactory *piDrwFact = NULL;
    IDMPoint2D *piFirstElem = NULL;
    IDMPoint2D *piSecondElem = NULL;
    IDMPoint2D *piNextElem = NULL;
    CATIDrwDimSystem *piDimSyst = NULL;
    CATIDrwDimDimension *piDim = NULL;
    CATDimSystemDefinition sysDef;
    sysDef.SystemType = StackedDimSystem;
    sysDef.SetOffsetMode(ConstantOffsetSystem);
    sysDef.SetValueAlignmentMode(OnRefLineSide);
    sysDef.SetValueOffset(100.0);
    while (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement()) )
    {
      if (NULL == piFirstElem)
      {
        piFirstElem = (IDMPoint2D *)pElemPath-&gt;FindElement(IID_IDMPoint2D);
        piDrwFact = (CATIDftDimensionFactory *)pElemPath-&gt;FindElement(IID_CATIDftDimensionFactory);
      }
      else if (NULL == piSecondElem)
      {
        piSecondElem = (IDMPoint2D *)pElemPath-&gt;FindElement(IID_IDMPoint2D);
        // Dimension creation
        if (piSecondElem &amp;&amp; piFirstElem)
        {
          CATDrwDimType dimType = DrwDimDistance;
          CATDimDefinition dimDef;
          dimDef.OrientationReference = ParallelDim;
          dimDef.Orientation = DrwDimAuto;
          
          CATListPtrCATIDftDimensionReference SelectionsList;

          CATIDftDimensionReference_var hDimReference1;
          double pt1[2] = { 0.0 };
          piFirstElem-&gt;GetPointData(pt1);
          CATMathPoint2D Pt1(pt1);
          if (piDimFact &amp;&amp; SUCCEEDED(piDimFact-&gt;CreateDimensionReference(piFirstElem,Pt1,hDimReference1)))
            SelectionsList.Append(hDimReference1);

          CATIDftDimensionReference_var hDimReference2;
          double pt2[2] = { 0.0 };
          piSecondElem-&gt;GetPointData(pt2);
          CATMathPoint2D Pt2(pt2);
          if (piDimFact &amp;&amp; SUCCEEDED(piDimFactvCreateDimensionReference(piSecondElem,Pt2,hDimReference2)))
            SelectionsList.Append(hDimReference2);

          if (piDimFact)
          {
            piDimFact-&gt;CreateDimension(SelectionsList,&amp;dimDef,spDim);
            piDimFact-&gt;CreateDimSystem(spDim,&amp;sysDef,spDimSyst);
          }
        } 
      }
      else if (NULL == piNextElem)
      {
        piNextElem = (IDMPoint2D *)pElemPath-&gt;FindElement(IID_IDMPoint2D);
        // Dimension system creation
        if (piNextElem &amp;&amp; piDimSyst &amp;&amp; piDim)
        {
          double pt1[2];
          piNextElem-&gt;GetPointData(pt1);
          CATMathPoint2D ptSel(pt1[0],pt1[1]);
          CATIDrwDimDimension *myDimToAdd = NULL;
          spDimSyst-&gt;AddDimension((CATBaseUnknown *)piNextElem,myDimToAdd,&amp;ptSel);
        }
        if (piNextElem) piNextElem-&gt;Release(),piNextElem=NULL;
      }
      else
        cout &lt;&lt; &quot;invalid input&quot; &lt;&lt; endl;
    }</pre>
<p>The acquisition agent did put the selected points into the CSO. So we get the 
SO and loop on it. A dimension is created from the 2 first points in the SO, then 
the dimension system is created from this dimension by using <code>CreateDimSystem</code> 
method defined in CATIDftDimensionFactory interface, Others dimensions are created 
in the dimension system by using <code>AddDimension </code>method defined in CATIDrwDimSystem 
interface. CATDimSystemDefinition class allows to initialize a set of parameters 
for the dimension system definition as the type of the dimension system (Chained, 
Cumulated, Stacked).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Modifying the Dimension System</h3>
<pre class="code">// Dimension System modifications:
// ===============================
if (piDimSyst)
{
  // Get the master dimension for dimension system moving
  CATIDrwDimDimension *piMasterDim=NULL;
  CATMathPoint2D ptPos(150.0,230);
  piDimSyst-&gt;GetMasterDimension(&amp;piMasterDim);
  if (piMasterDim)
  {
    piMasterDim-&gt;MoveDimensionLine (ptPos);
    CATIDrwTextProperties spDimProp = piMasterDim;
    if (NULL_var != spDimProp)
      spDimProp-&gt;Refresh();
    piMasterDim-&gt;Release();piMasterDim=NULL;
  }
  // Dimension system properties modification
  CATIDrwStackedDimSystem *piDrwStkSyst=NULL;
  if (SUCCEEDED(piDimSyst-&gt;QueryInterface(IID_CATIDrwStackedDimSystem,(void **)&amp;piDrwStkSyst)))
  {
    double valueoffset = 12.0;
    piDrwStkSyst-&gt;SetValueAlignmentMode(AlignedOnCenter); 
    piDrwStkSyst-&gt;SetOffset(valueoffset);
    piDrwStkSyst-&gt;Release();piDrwStkSyst=NULL;
  }
  piDimSyst-&gt;LineUp(2);
}

  </pre>
<p>The modification of dimension system dimensions line is insured by the moving 
of the dimension line of the &quot;master&quot; dimension. At the end of this operation,
<code>LineUp </code>method allows to update the positioning of all others dimension 
line of the dimensions system.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a state command dealing with geometry selections. 
The <em>IDMxx2D</em> interface identifiers are used as filters and allows the selection 
of interactive and generative geometry. Using the <em>CATIDftDimensionFactory,</em> 
interface, implemented by the view, it is possible to create annotations on these 
geometries.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [March 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
