<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Frames and Title Blocks</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Frames and Title Blocks</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwTitleBlock use case. This use case explains 
		how to read a drawing representation reference stored in the database, get 
		the sheet background view, and create geometry and annotations in it.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwTitleBlock Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwTitleBlock Do</a></li>
					<li><a href="#How">How to Launch CAADrwTitleBlock</a></li>
					<li><a href="#Where">Where to Find the CAADrwTitleBlock Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to open a drawing representation reference 
stored in the data base and navigate through drawing sheets and views as well as 
how to get and use geometrical and annotation factories.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwTitleBlock Use Case</h2>
<p>CAADrwTitleBlock is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf and CATAnnotationUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwTitleBlock Do?</h3>
<table>
	<caption>Fig. 1: Initial Drawing Representation</caption>
	<tr>
		<td>
		<img alt="" height="330" src="images/CAADrwTitleBlock1.jpg" width="613"/></td>
	</tr>
</table>
<p>Fig. 1 represents the drawing representation on which a title block will be added.</p>
<table>
	<caption>Fig. 2 The Drawing Representation Modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="" height="359" src="images/CAADrwTitleBlock2.jpg" width="704"/></td>
	</tr>
</table>
<p>Fig. 2 represents the drawing representation modified by the use case program. 
It first creates a basic drafting structure composed of a drawing, a sheet, and 
two superimposed views.</p>
<p>The two views are:</p>
<ol>
	<li>The main view which contains the elements directly created in the sheet</li>
	<li>The background view, which is dedicated to the frames and title blocks.</li>
</ol>
<p>These two views are part of the sheet. So they cannot be deleted and they are 
not shown in the graph. Then the program gets the background view and creates a 
frame using 2D lines and a text in the bottom right corner.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwTitleBlock</h3>
<p>To launch CAADrwTitleBlock, you will need to set up the build time environment, 
then compile CAADrwTitleBlock along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADrwTitleBlock Repository Server Username Password SecurityCtx PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLMExternalIDValue</td>
		<td>CAADrwTitleBlock</td>
		<td rowspan="2">Component Attribute </td>
	</tr>
	<tr>
		<td>7</td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwTitleBlock.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwTitleBlock Code</h3>
<p>The CAADrwTitleBlock use case is made of a single source file named CAADrwTitleBlock.cpp 
located in the CAADrwTitleBlock.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwTitleBlock.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six steps in CAADRWTitleBlock:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying the Drawing Reference in Database and Loading 
		it</a></li>
	<li><a href="#Step3">Navigating through the Drawing and Sheet to Get the 
		Background View</a></li>
	<li><a href="#Step4">Getting the Geometry Factory and Creating the Frame 2D 
		Lines</a></li>
	<li><a href="#Step5">Getting the Annotation Factory and Creating the Title 
		Block Texts</a></li>
	<li><a href="#Step6">Saving the Drawing the Representation and Closing the 
		Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 1;

  // 1. Checks the input arguments
  // =============================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLM External Id&gt; &lt;version&gt;&quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  onst char* comp_externalId = iargv[7];
  const char* comp_version = iargv[8];
 
   // 2. Creates a PLM session and connect to the input repository
  // ============================================================
  CATBoolean traceok = TRUE;
  hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
  </pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Drawing Reference in Database and Loading It</h3>
<pre class="code">
...
   // 3. Opens the Drawing representation reference 
  // =============================================
  CATIPsiRepresentationReference *piDrawingRepRef = NULL;
  CATOmbLifeCycleRootsBag Bag;

  hr = ::CAAOpenPLMComponent("VPMRepReference", comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
...
 // 4 Loads the Drawing Representation in "Edit Mode"
  // =================================================
  CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
  if (piDrawingRepRef &amp;&amp;  SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
  {
    hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
    piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
  }

</pre>
<p>The root feature of a drawing document is the Drawing, that is, the feature that 
implements the <em>CATIDrawing</em> interface. We can get a pointer to <em>CATIDrawing</em> 
using the <em>CATIDftDocumentServices</em> interface, which is implemented by the 
document. The <code>GetDrawing</code> method first argument is the <em>CATIDrawing</em> 
interface IID.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Navigating through the Drawing and Sheet to Get the 
Background View</h3>
<pre class="code">...
// 7. Retrieves the drawing root from the Drawing representation reference
// =======================================================================

CATIDftDrawing *piDftDrawing=NULL;
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);

if (piDrawingRepRef) piDrawingRepRef-&gt;Release(),piDrawingRepRef=NULL;

// 8. Retrieves the background view in the current sheet
// =====================================================
if (piDftDrawing)
{
  CATIDftSheet *piDftSheet = NULL;
  if (SUCCEEDED(piDftDrawing-&gt;GetActiveSheet(&amp;piDftSheet)))
  {
    CATIDftView *piDftBGView = NULL;
    if (SUCCEEDED(piDftSheet-&gt;GetBackgroundView(&amp;piDftBGView)))
    {
    ...</pre>
<p>A drawing representation reference may contain several sheets, but only one is 
current at a time. From the Drawing representation, the drawing root is retrieved 
by using GetDrawingRoot defined in CATDftDrawingPLMServices toolbox. The current 
sheet is the sheet containing the active view, that is the view currently edited.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Getting the Geometry Factory and Creating the Frame 2D 
Lines</h3>
<pre class="code">...

// 9. Geometry Creation
// ==================

// We now can create geometries in the view after :
// - Setting the view as the current one
// - Getting the view geometry factory interface
piDftBGView-&gt;Activate();
CATISktUse2DWFFactory_var spGeomFactory = piDftBGView;

double X[8] = { 936.0, 949.0, 963.0, 1010.0, 1062.0, 1093.0, 1157.0, 1176.0};
double Z[11] ={ 17.0, 22.0, 35.0, 48.0, 53.0, 58.0, 63.0, 68.0, 73.0, 78.0, 88.0};
double PtTmp[6];

double startPoint[2], endPoint[2];

// Creation of horizontal lines
PtTmp[0]=Z[0];
PtTmp[1]=Z[1];
PtTmp[2]=Z[3];
PtTmp[3]=Z[5];
PtTmp[4]=Z[7];
PtTmp[5]=Z[10];
for (int i= 0;i &lt; 6; i++)
DrwCreateLine(spGeomFactory, X[0],PtTmp[i],X[7],PtTmp[i]);

DrwCreateLine(spGeomFactory, X[3], Z[2], X[7], Z[2]);
DrwCreateLine(spGeomFactory,X[0], Z[9], X[5], Z[9]);

PtTmp[0]=Z[4];
PtTmp[1]=Z[6];
PtTmp[2]=Z[8];
for (i= 0;i &lt; 3; i++)
DrwCreateLine(spGeomFactory, X[3],PtTmp[i],X[5],PtTmp[i]);

// Creation of vertical lines
PtTmp[0]=X[0];
PtTmp[1]=X[7];
for (i= 0;i &lt; 2; i++)
DrwCreateLine(spGeomFactory, PtTmp[i],Z[0],PtTmp[i],Z[10]);

DrwCreateLine(spGeomFactory,X[3], Z[1], X[3], Z[10]);
DrwCreateLine(spGeomFactory,X[5], Z[3], X[5], Z[10]);

PtTmp[0]=X[4];
PtTmp[1]=X[6];
for (i= 0;i &lt; 2; i++)
DrwCreateLine(spGeomFactory, PtTmp[i],Z[1],PtTmp[i],Z[2]);

DrwCreateLine(spGeomFactory,X[1], Z[5], X[1], Z[7]);
DrwCreateLine(spGeomFactory,X[2], Z[5], X[2], Z[9]);

// Lines and circles creation for projection mode symbol.
double X1[3] = { 941.0, 949.0, 955.0};
double Z1[5] ={ 70.0, 71.0, 73.0, 75.0, 76.0};
startPoint[0] = X1[0];
startPoint[1] = Z1[1];
endPoint[0] = X1[0];
endPoint[1] = Z1[3];
spGeomFactory-&gt;CreateLine(startPoint, endPoint); 

startPoint[0] = X1[0];
startPoint[1] = Z1[3];
endPoint[0] = X1[1];
endPoint[1] = Z1[4];
CATBaseUnknown_var Line1 = spGeomFactory-&gt;CreateLine(startPoint, endPoint); 

startPoint[0] = X1[1];
startPoint[1] = Z1[4];
endPoint[0] = X1[1];
endPoint[1] = Z1[0];
spGeomFactory-&gt;CreateLine(startPoint, endPoint); 

startPoint[0] = X1[1];
startPoint[1] = Z1[0];
endPoint[0] = X1[0];
endPoint[1] = Z1[1];
CATBaseUnknown_var Line2 = spGeomFactory-&gt;CreateLine(startPoint, endPoint); 

// Creation of two concentric circles:
double center[2];
center[0]=X1[2];
center[1]=Z1[2];
double radius = 3.0;
CATBaseUnknown_var Cercle1 = spGeomFactory-&gt;CreateCircle(center,radius);

radius = 2.0;
spGeomFactory-&gt;CreateCircle(center,radius);
...</pre>
<p>Subprogram to create a 2D line.</p>
<pre class="code">// Subprogram to create 2D line.
// =============================
void DrwCreateLine(CATISktUse2DWFFactory_var spGeomFact, double StartPtX,double StartPtY,double EndPtX,double EndPtY)
{
double startPoint[2], endPoint[2];
startPoint[0] = StartPtX;
startPoint[1] = StartPtY;
endPoint[0] = EndPtX;
endPoint[1] = EndPtY;
spGeomFact-&gt;CreateLine(startPoint, endPoint);
}</pre>
<p>Before using the factory, you have to make the view current. The view implements 
the <em>CATISktUse2DWFFactory</em> 2D geometry factory interface. It is the sketcher 
factory and, as a consequence, you can use the same methods to create a profile 
in a part or 2D geometric objects in a drawing view.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Getting the Annotation Factory and Creating the Title 
Block Texts</h3>
<pre class="code">...
// 10. Creates the dressup in the titleblock
// ==================================

// Gets the view annotation factory
CATIDftBaseAnnotationFactory_var spAnnFactory = piDftBGView;
CATIDftSpecialDressUpFactory_var spDressFactory = piDftBGView;

// 10.1 Creates the titleblock texts
// ============================

// Inserts the title in the titleblock
CATIDftText *piDftText = NULL;
double txtpos1[2] = {1013.,45.};
CATUnicodeString textString(&quot;TITLE BLOCK PERFORMED BY CAA2 APPLICATION&quot;);
DrwCreateText(spAnnFactory, txtpos1, textString, &amp;piDftText);
if (piDftText)
  piDftText-&gt;Release();piDftText=NULL;

// Inserts the company name in the titleblock
double txtpos2[2] = {940., 40.};
CATUnicodeString textString1(&quot;DASSAULT \nSYSTEMES&quot;);
DrwCreateText(spAnnFactory, txtpos1, textString1, &amp;piDftText);
if (piDftText)
  piDftText-&gt;Release();piDftText=NULL;

// Adds the current date in the titleblock
const double txtpos3[2] = {940., 54.};
CATTime theTime = CATTime::GetCurrentLocalTime();
int theDay = theTime.GetDay();
int theMonth = theTime.GetMonth();
int theYear = theTime.GetYear();
CATUnicodeString dayUC,monthUC,yearUC;
dayUC.BuildFromNum(theDay);
monthUC.BuildFromNum(theMonth);
yearUC.BuildFromNum(theYear);

textString = monthUC + &quot; - &quot; + dayUC + &quot; - &quot; + yearUC; 
DrwCreateText(spAnnFactory, txtpos1, textString, &amp;piDftText);
if (piDftText)
{
  CATIDrwSubString *piDrwSubString = NULL;
  if (SUCCEEDED(piDftText-&gt;QueryInterface(IID_CATIDrwSubString,(void **)&amp;piDrwSubString)))
  {
    // Select the sub string to modifiable.
    piDrwSubString-&gt;SetSelection(1,21);
    CATIDftTextProperties *piDftTextProp = NULL;
    hr = piDftText-&gt;GetTextProperties(&amp;piDftTextProp);
    if (SUCCEEDED(hr))
    {
      piDftTextProp-&gt;SetFontSize(3.5);
      piDftTextProp-&gt;Release();piDftTextProp=NULL;
    }
    piDrwSubString-&gt;Release();piDrwSubString=NULL;
  }
  piDftText-&gt;Release();piDftText=NULL;
}

// 10.2 Creates the axis line and center line of the titleblock
// ==================================================
CATIDftAxisLine *piaxisline = NULL;
if ( SUCCEEDED(spDressFactory-&gt;CreateAxisLine(Line1,Line2,&amp;piaxisline)) )
  piaxisline-gt;Release(), piaxisline = NULL;

CATIDftCenterLine *piCenterline = NULL;
if ( SUCCEEDED(spDressFactory-gt;CreateCenterLine(Cercle1,NULL_var,&amp;piCenterline)) )
  piCenterline-gt;Release(), piCenterline = NULL;...</pre>
<p>Subprogram to create a drawing text.</p>
<pre class="code">// Subprogram to create a drawing text.
// ====================================
HRESULT DrwCreateText(CATIDftBaseAnnotationFactory *ipiAnnFactory, const CATMathPoint2D &amp;iTxtPos, CATUnicodeString iusTextString, CATIDftText **opiDftText)
{
  HRESULT hr = E_INVALIDARG;

  if (ipiAnnFactory)
  {
    CATIDftText_var hDftText;
    hr = ipiAnnFactory-&gt;CreateText(iTxtPos,hDftText);
    if ( SUCCEEDED(hr) )
    {
       hr = hDftText-&gt;SetString(iusTextString);
       if (SUCCEEDED(hr))
       {
          // Text properties modification: Set bold and italic
          CATIDftTextProperties *piDftTextProp = NULL;
          hr = hDftText-&gt;QueryInterface(IID_CATIDftTextProperties, (void**)&amp;piDftTextProp);
          if (SUCCEEDED(hr))
          {
             piDftTextProp-&gt;SetBold(TRUE);
             piDftTextProp-&gt;SetItalic(TRUE);
             piDftTextProp-&gt;Release();piDftTextProp=NULL;

             hr = hDftText-&gt;QueryInterface(IID_CATIDftText,(void **)&amp;opiDftText);
          }
       }
    }
  }

   return hr;
}

</pre>
<p>The <em>CATIDftBaseAnnotationFactory</em> annotation factory is implemented by 
the view and so the coordinates passed in <code>CreateText</code> are view coordinates. 
The <em>CATIDrwTextProperties</em> interface allows for text property modification, 
such as setting the text with a bold typeface using the <code>SetBold</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Saving the Drawing Representation and Closing the Session</h3>
<pre class="code">...
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = CATPLMSessionServices::ClosePLMSession();
</pre>
<p>This section represents the usual sequence for saving a newly created representation 
reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating a Drawing representation, 
and when creating a frame and a title block in the current sheet background view. 
The <em>CATIDftDrawing</em> interface is implemented by the drawing root object. 
A pointer to this interface is the key to enter and navigate the drawing structure, 
and can be retrieved using the <code>GetDrawingRoot</code> method of the <em>CATDftDrawingPLMServices 
toolbox</em>. Retrieving the background view is performed first by retrieving the 
current sheet thanks to the <code>GetActiveSheet</code> method of the <em>CATIDftDrawing</em> 
interface, and then asking the current sheet for this background view using the
<code>GetBackgroundView</code> of <em>CATIDftSheet</em>. This background view is 
made current using the <code>SetCurrentView</code> method of <em>CATIDftSheet</em>, 
and a handler to the <em>CATISktUse2DWFFactory</em> interface implemented by the 
view is retrieved to create the frame lines thanks to the <code>CreateLine</code> 
method. The view also implements the <em>CATIDftBaseAnnotationFactory</em> interface 
and the title block is created using its <code>CreateText</code> method, and set 
with a bold typeface using the <code>SetBold</code> method.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
