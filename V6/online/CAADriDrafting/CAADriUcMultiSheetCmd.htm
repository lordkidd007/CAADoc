<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Multi Sheet Interactive Command</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Multi Sheet Interactive Command</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwMultiSheetCmd use case. This use case 
		explains how to create a command working on several sheets.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAADrwMultiSheetCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwMultiSheetCmd Do</a></li>
					<li><a href="#How">How to Launch CAADrwMultiSheetCmd</a></li>
					<li><a href="#Where">Where to Find the CAADrwMultiSheetCmd Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will You With This Use Case</h2>
<p>In this use case you will learn how to create an interactive command working 
on several sheets.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwMultiSheetCmd Use Case</h2>
<p>CAADrwMultiSheetCmd is a use case of the CAADraftingInterfaces.edu framework 
that illustrates DraftingUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwMultiSheetCmd Do</h3>
<p>This use case shows a command working on several sheets. The use case interactive 
command has two steps:</p>
<ol>
	<li>Select a reference text</li>
	<li>Select a text to move. The text position is modified according to the reference 
		text position.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwMultiSheetCmd</h3>
<p>To launch CAADrwMultiSheetCmd, you will need to set up the build time environment, 
then compile CAADrwMultiSheetCmd and CAADrwAddin along with its prerequisites, set 
up the run time environment, and then include the command in a workbench [<a href="#References">1</a>].</p>
<ol>
	<li>Launch CATIA session.</li>
	<li>Right-click on Drafting workshop to activate CAAUseCaseCommands toolbar.</li>
	<li>Create a drawing document containing two sheets</li>
	<li>Create &quot;TEXT SHEET 1&quot; text in Sheet 1. (See <a href="#Fig1">Fig: 
		1</a>)</li>
	<li>Create &quot;TEXT SHEET 2&quot; text in Sheet 2. (See <a href="#Fig2">Fig: 
		2</a>)</li>
	<li>Launch the use case interactive command. (Sheet 2 is the current sheet)</li>
	<li>Select TEXT SHEET 1 text in Sheet 1. (Sheet 1 is the current sheet)</li>
	<li>Double click Sheet.2 in the specification tree to activate it</li>
	<li>Select TEXT SHEET 2 text in Sheet 2. (Sheet 2 is the current sheet). The 
		TEXT SHEET2 is moved (See <a href="#Fig3">Fig: 3</a>) according to TEXT 
		SHEET1 text position.</li>
</ol>
<table>
	<caption><a name="Fig1"></a>Fig 1: Sheet.1 is the Current Sheet</caption>
	<tr>
		<td>
		<img alt="Sheet.1" height="349" src="images/CAADrwMultiSheet1.jpg" width="650"/></td>
	</tr>
</table>
<table>
	<caption><a name="Fig2"></a>Fig 2: Sheet.2 is the Current Sheet</caption>
	<tr>
		<td>
		<img alt="Sheet.2" height="334" src="images/CAADrwMultiSheet2.jpg" width="672"/></td>
	</tr>
</table>
<table>
	<caption><a name="Fig3"></a>Fig 3: Sheet.2 is the Current Sheet</caption>
	<tr>
		<td>
		<img alt="Sheet.2" height="338" src="images/CAADrwMultiSheet3.jpg" width="623"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwMultiSheetCmd Code</h3>
<p>The CAADrwMultiSheetCmd use case is made of two source files named CAADrwMultiSheetCmd.h 
and CAADrwMultiSheetCmd.cpp located in the CAADrwMultiSheetCmd.m module of the CAADraftingInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwMultiSheetCmd.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight steps in CAADrwMultiSheetCmd:</p>
<ol>
	<li><a href="#Step1">Retrieve the Current Drawing Root from the Frame</a>
	</li>
	<li><a href="#Step2">Reading the Current Multi Sheet Mode</a> </li>
	<li><a href="#Step3">Activating the Multi Sheet Mode</a> </li>
	<li><a href="#Step4">Building the State Chart and Creating the Appropriate Selection 
		Agent</a></li>
	<li><a href="#Step5">Selecting the new sheet to activate</a></li>
	<li><a href="#step6">Selecting the Reference Text and Storing its Coordinates</a></li>
	<li><a href="#Step7">Selecting the Text to Move and Storing the New Position</a></li>
	<li><a href="#Step8">Restoring the Previous Multi Sheet Mode Value</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Drawing Root from the Frame</h3>
<pre class="code">// ----------------------------------------------------------------------------
CAADrwMultiSheetCmd::CAADrwMultiSheetCmd()
                    :CATStateCommand(CATString(&quot;AlignText&quot;)),
                                     _pObjectAgent(NULL)
{
   // Get the current drawing root from the frame 
  _piDrawingRoot = NULL;
  CATApplicationFrame *appFrame = CATApplicationFrame::GetFrame();
  CATIAApplication *ptApp = NULL;
  if (appFrame)
  {
    if (SUCCEEDED(appFrame-&gt;QueryInterface(IID_CATIAApplication, (void**) &amp;ptApp)))
    {
      CATIAEditor *ptEditor = NULL;
      if (SUCCEEDED(ptApp-&gt;get_ActiveEditor(ptEditor)))
      {
        CATIABase *piActiveObject = NULL;
        if (SUCCEEDED(ptEditor-&gt;get_ActiveObject(piActiveObject)) &amp;&amp; piActiveObject
        {
          piActiveObject-&gt;QueryInterface(IID_CATIDftDrawing,(void **)&amp;_piDrawingRoot);
          piActiveObject-&gt;Release();piActiveObject=NULL;
        }
        ptEditor-&gt;Release();ptEditor=NULL;
      }
      ptApp-&gt;Release(); ptApp = NULL;
    }
   }
   // Save Multi sheet mode value to restore it at the end of the command
   GetMultiSheetMode(_PreviousMode);
   // Active Multi sheet mode
   if (!_PreviousMode) SetMultiSheetMode(TRUE);
   _TextPos[0] = 0.0;
   _TextPos[1] = 0.0;
}</pre>
<p>The drawing root is the active object of the current editor. From the main application, 
the method get_ActiveEditor defined in CATIAApplicationFrame returns the current 
editor, then the drawing root is returned by using get_ActiveObject defined in CATIAEditor 
interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Reading the Current Multi Sheet Mode</h3>
<pre class="code">// Method To Get working mode from CATIDftMultiSheetMode interface
void CAADrwMultiSheetCmd::GetMultiSheetMode(boolean &amp;oMode)
{
  oMode = FALSE;
  if (_piDrawingRoot)
  {
    CATIDftMultiSheetMode *multiSheetManager=NULL;
    if (SUCCEEDED(_piDrawingRoot-&gt;QueryInterface(IID_CATIDftMultiSheetMode, (void **) &amp;multiSheetManager)))
    {
      multiSheetManager-&gt;GetMultiSheetMode(&amp;oMode);
      multiSheetManager-&gt;Release(); multiSheetManager = NULL;
    }
  }
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Activating the Multi Sheet Mode</h3>
<pre class="code">// Method To Set working mode from CATIDftMultiSheetMode interface
void CAADrwMultiSheetCmd::SetMultiSheetMode(boolean iMode)
{
  if (_piDrawingRoot)
  {
    CATIDftMultiSheetMode *multiSheetManager=NULL;
    if (SUCCEEDED(_piDrawingRoot-&gt;QueryInterface(IID_CATIDftMultiSheetMode, (void **) &amp;multiSheetManager)))
    {
      multiSheetManager-&gt;SetMultiSheetMode(iMode);
      multiSheetManager-&gt;Release();multiSheetManager = NULL;
    }
  }
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Building the State Chart and Creating the Appropriate Selection 
Agents</h3>
<p>
<img alt="State Chart Diagram" height="353" src="images/CAADrwMultiSheet4.jpg" width="480"/></p>
<pre class="code">// ----------------------------------------------------------------------------
void CAADrwMultiSheetCmd::BuildGraph()
{  
   // Creation of the acquisition agents
   _pObjectAgent = new CATPathElementAgent(&quot;pObjectAgent&quot;);
   _pObjectAgent -&gt;SetBehavior( CATDlgEngWithPrevaluation | 
                               CATDlgEngMultiAcquisition | 
                               CATDlgEngWithCSO);
   _pObjectAgent1 = new CATPathElementAgent(&quot;pObjectAgent1&quot;);
   _pObjectAgent1 -&gt;SetBehavior(  CATDlgEngWithEdit);
   // We want to select text
   _pObjectAgent -&gt;SetElementType(IID_CATIDftText);
   AddCSOClient(_pObjectAgent);
   // We want to select Sheet
   _pObjectAgent1 -&gt;SetElementType(IID_CATIDftSheet);
   AddCSOClient(_pObjectAgent1);

   //  States definition
   CATDialogState* state1 = GetInitialState(&quot;Sel reference text&quot;);
   CATDialogState* state2 = AddDialogState(&quot;Sel text to align&quot;);
   state1-&gt;AddDialogAgent(_pObjectAgent);
   state1-&gt;AddDialogAgent(_pObjectAgent1);
   state2-&gt;AddDialogAgent(_pObjectAgent);
   state2-&gt;AddDialogAgent(_pObjectAgent1);
   // Transition definition: New sheet activation
   AddTransition(state1, state1, IsOutputSetCondition(_pObjectAgent1),
                 Action((ActionMethod)&amp;CAADrwMultiSheetCmd::ActiveSheet, NULL, NULL));
   AddTransition(state2, state2, IsOutputSetCondition(_pObjectAgent1),
                 Action((ActionMethod)&amp;CAADrwMultiSheetCmd::ActiveSheet, NULL, NULL));
   // Transition definition: Check the selected text
   AddTransition(state1, state2, IsOutputSetCondition(_pObjectAgent),
                 Action((ActionMethod)&amp;CAADrwMultiSheetCmd::CheckText, NULL, NULL));
   // Transition definition: Move the text
   AddTransition(state2, NULL, IsOutputSetCondition(_pObjectAgent),
                 Action((ActionMethod)&amp;CAADrwMultiSheetCmd::MoveText, NULL, NULL));
}</pre>
<p>In this section we create:</p>
<ol>
	<li>A CATPathElementAgent to select a Drawing Complex text.</li>
	<li>A CATPathElementAgent to activate a Drawing Sheet by a double-click on this 
		sheet in the specification tree.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Selecting the new Sheet to activate</h3>
<pre class="code">boolean CAADrwMultiSheetCmd::ActiveSheet(void *)
{
  // Get the selected Sheet 
  CATPathElement *pElemPath = _pObjectAgent1-&gt;GetValue();
  if (pElemPath)
  {
    // Make sure the element is a Sheet
    CATIDftSheet *piDftSheet = (CATIDftSheet *)pElemPath-&gt;FindElement(IID_CATIDftSheet);
    if (NULL != piDftSheet )
    {            
      CATBoolean bIsCurrent = FALSE;
      piDftSheet-&gt;IsCurrent(&amp;bIsCurrent);
      if (!bIsCurrent &amp;&amp; _piDrawingRoot)
        _piDrawingRoot-&gt;SetActiveSheet(piDftSheet);
      piDftSheet-&gt;Release(); piDftSheet = NULL;
    }
    _pObjectAgent1 -&gt; InitializeAcquisition();
    return TRUE;
  }
  return FALSE; 
}
...</pre>
<p>The acquisition agent did put the selected Sheet into the CSO. So we retrieve 
the object in the path element.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="step6">Selecting the Reference Text and Storing its Coordinates</a></h3>
<pre class="code">boolean CAADrwMultiSheetCmd::CheckText(void *)
{ 
  // We get the Selected set of objects
  CATSO* pObjSO = _pObjectAgent-&gt;GetListOfValues(); 
  CATPathElement *pElemPath = NULL;


  if (NULL != pObjSO) 
  {
    // There is a selection, we will scan it from the beginning
    pObjSO-&gt;InitElementList();
    while (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement()))
    {
      // Make sure the element is a text
      CATIDftText *piDftText = (CATIDftText *)pElemPath-&gt;FindElement(IID_CATIDftText);

      if (NULL != piDftText)
      { 
        piDftText-&gt;GetPosition(_TextPos);
        piDftText-&gt;Release(); piDftText = NULL;
      }
    }

    _pObjectAgent -&gt; InitializeAcquisition();
    return TRUE;
  }
  return FALSE;
}
...</pre>
<p>The acquisition agent did put the selected text into the CSO. So we get the set 
of object and loop on it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Selecting the Text to Move and Storing the New Position</h3>
<pre class="code">// ----------------------------------------------------------------------------
boolean CAADrwMultiSheetCmd::MoveText(void *)
{ 
  // We get the Selected set of objects
  CATSO* pObjSO = _pObjectAgent-&gt;GetListOfValues(); 
  CATPathElement *pElemPath = NULL;

  if (NULL != pObjSO) 
  {
    // There is a selection, we will scan it from the beginning
    pObjSO-&gt;InitElementList();
    while (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement()))
    {
      // Make sure the element is a text
      CATIDftText *piDftText = (CATIDftText *)pElemPath-&gt;FindElement(IID_CATIDftText);

      if (NULL != piDftText)
      { 
        piDftText-&gt;SetPosition(_TextPos);
        CATIModelEvents_var event(piDftText);
        if (event !=NULL_var)
        {
          CATModify info((CATBaseUnknown *)piDftText);
          event-&gt;Dispatch(info);
        }
        piDftText-&gt;Release(); piDftText = NULL;
      }
    }
    _pObjectAgent -&gt; InitializeAcquisition();
    return TRUE;
  }

  // Restore the previous Multi Sheet mode value
  SetMultiSheetMode(_PreviousMode);
  return FALSE;
}
...</pre>
<p><strong>Note</strong>: When a text is modified and needs to regenerate its graphical 
representations, it just has to send CATModify event to warn all its.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Restoring the Previous Multi Sheet Mode Value</h3>
<pre class="code">...            
// Restore Active Multi sheet mode
  SetMultiSheetMode(_PreviousMode);
  return FALSE;
}</pre>
<p><strong>Note</strong>: The Multi Sheet Mode Value has to be restore in the destructor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a command working on several sheets: Retrieve 
current drawing, manage the multi sheet Mode and move a text.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
