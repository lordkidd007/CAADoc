<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Editing Generative Views</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Generative Views</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwGenViewModification use case. This use 
		case explains how to modify generative views in an existing drawing representation 
		reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADrwGenViewModification Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwGenViewModification Do</a></li>
					<li><a href="#How">How to Launch CAADrwGenViewModification</a></li>
					<li><a href="#Where">Where to Find the CAADrwGenViewModification 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create, and save in database, a 
PLM drawing representation reference. You will learn:</p>
<ul>
	<li>How to retrieve the Drawing Representation Reference from the PLM ID.</li>
	<li>Load the associated 3D data.</li>
	<li>Scan all the Generated Views in the current Sheet.</li>
	<li>Activate the Hidden line mode.</li>
	<li>Save the Drawing Representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwGenViewModification Use Case</h2>
<p>CAADrwGenViewModification is a use case of the CAADraftingInterfaces.edu framework 
that illustrates DraftingUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwGenViewModification Do</h3>
<p>The CAADrwGenViewModification use case creates 2 Generative View from 3D Data 
in a Drawing Representation Reference already created.</p>
<table>
	<caption>Fig. 1: Drawing Representation Used by the Use Case</caption>
	<tr>
		<td>
		<img alt="Initial Drawing Representation " height="691" src="images/CAADrwGenViewModification1.jpg" width="638"/></td>
	</tr>
</table>
<table id="table7">
	<caption>Fig. 2: Drawing Representation Modified by the Use Case</caption>
	<tr>
		<td>
		<img alt="Modified Drawing Representation " height="707" src="images/CAADrwGenViewModification2.jpg" width="641"/></td>
	</tr>
</table>
<p>The program processes all the views of the current Sheet and activate the hidden 
line mode.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwGenViewModification</h3>
<p>To launch CAADrwGenViewModification, you will need to set up the build time environment, 
then compile CAADrwGenViewModification along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c<em> &quot;</em>CAADrwGenViewModification <em>Repository</em> <em>Server Username</em> <em>Password</em> <em>SecurityCtx 
                                    PLMType AttributeVal1 Version</em>&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for component To be opened</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>7</td>
		<td>AttributeVal1<em> </em></td>
		<td>CAADrwGenViewModificationDRW </td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Version<em> </em></td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>].</li>
	<li>The PLMType is necessary to locate the component in database</li>
	<li>The following argument defines the value of the <strong>PLM_ExternalID</strong> 
		attribute of the Drawing PLM representation reference.</li>
	<li>The <strong>Version</strong> is the V_version attribute of a PLM representation 
		reference.</li>
</ul>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwGenViewModification.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwGenViewModification Code</h3>
<p>The CAADrwGenViewModification use case is made of a single source file named 
CAADrwGenViewModification.cpp located in the CAADrwGenViewModification.m module 
of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwGenViewModification.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight steps in CAADrwGenViewModification:</p>
<ol>
	<li><a href="#Step1">Parsing the Input Arguments</a></li>
	<li><a href="#Step2">Creating a PLM session and connect to the input repository</a></li>
	<li><a href="#Step3">Retrieving the Drawing Representation Reference and Open 
		it</a></li>
	<li><a href="#Step4">Loading the associated 3D Data and getting the Drawing 
		Root</a></li>
	<li><a href="#Step5">Retrieving all the views from the drawing Root</a></li>
	<li><a href="#Step6">Retrieving the Applicative Extension of the Drawing View</a></li>
	<li><a href="#Step7">Activating the hidden line mode for each view</a></li>
	<li><a href="#Step8">Saving the Drawing Representation Reference in the Database 
		and Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing the Input Arguments</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 1;
  cout &lt;&lt; &quot;CAADrwGenViewModification started&quot; &lt;&lt; endl;

  // 1. Checks the input arguments
  // =========================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id Drawing&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_externalId = iargv[7];
  const char* comp_version = iargv[8];
...</pre>
<ul>
	<li><code>env</code> is the name of the current environment to use.</li>
	<li><code>Repository</code> is the repository name (also named provider) to 
		use.</li>
</ul>
<p>All these data will be used in the next sections to initialize the PLM session 
then to search representation in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a PLM session and connect to the input repository</h3>
<pre class="code"> ...
CATBoolean traceok = TRUE;
hr = ::CAAAdpCreateSession(repository,server,user,password,SecurityCtx,traceok);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Representation Reference</h3>
<pre class="code">...   
   // 3. Opens the Drawing representation reference 
   // =========================================
   CATIPsiRepresentationReference *piDrawingRepRef = NULL;
   CATOmbLifeCycleRootsBag Bag;
  
   hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
  ...

   // 4 Loads the Drawing Representation in "Edit Mode"
   // =================================================
   CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
   if (piDrawingRepRef &amp;&amp;SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
   {
     hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
     piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
   }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Loading the associated 3D Data and Getting the Drawing root</h3>
<pre class="code">...
CATIDftDrawing *piDftDrawing = NULL;
if (piDrawingRepRef) 
{
if (SUCCEEDED(CATDftGenPLMServices::Load3DDataFromDrawing(piDrawingRepRef)))
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving all the view from the Drawing Root</h3>
<pre class="code">...
// 5. Retrieves all the Views fromn the Drawing Root
// ===========================================
CATIUnknownList * piListOfViews = NULL;
unsigned int viewListSize = 0;
if (piDftDrawing)
{
  if (SUCCEEDED(piDftDrawing-&gt;GetViews(&amp;piListOfViews)))
  {
    piListOfViews-&gt;Count(&amp;viewListSize);
  }
  piDftDrawing-&gt;Release();piDftDrawing=NULL;
}...</pre>
<p>The <code>GetViews</code> method returns all the views from the Drawing including 
the main view and the background view.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Applicative Extension of the Drawing View</h3>
<pre class="code">...
if (piListOfViews)
{
  IUnknown * itemView = NULL;
  CATIDftView *piCurrentView = NULL;

  // 6. Loop on all the views
  // ====================
  cout &lt;&lt; &quot;viewlist = &quot; &lt;&lt; viewListSize &lt;&lt; endl;
  int nbViewModif = 0;
  for(unsigned int numview=0 ; numview&lt;viewListSize ; numview++)
  {
    piListOfViews-&gt;Item(numview, &amp;itemView);
    if (itemView)
    {
      itemView-&gt;QueryInterface(IID_CATIDftView,(void **)&amp;piCurrentView);
      itemView-&gt;Release(),itemView=NULL;
    }

    // 7. Gets the applicative extension of the View
    // =======================================
    IUnknown *piViewModif = NULL;
    if (piCurrentView)
    {
      piCurrentView-&gt;GetApplicativeExtension(IID_CATIDftGenViewModification,&amp;piViewModif);
      piCurrentView-&gt;Release() ; piCurrentView=NULL;
    }
...</pre>
<p>The applicative extension is only exist for the generative views, it contains 
the generative geometry: Geometry extracted from the 3D.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Activating the hidden line mode for each view</h3>
<pre class="code">...
     if (piViewModif)
     {
       piViewModif-&gt;QueryInterface(IID_CATIDftGenViewModification,(void **)&amp;piDftGenViewModif);
       piViewModif-&gt;QueryInterface(IID_CATIDftGenViewUpdate,(void **)&amp;piDftGenViewUpdate);
       piViewModif-&gt;Release();piViewModif=NULL;
     }
     // 8. View modification: Apply the hidden line for the current view and View Update 
     // ================================================================================
     if (piDftGenViewModif)
     {
       CATDftGenViewProperties theViewProperties;
       CATBoolean bHiddenLineMode = TRUE;
       theViewProperties.SetHiddenLinesMode(bHiddenLineMode);
       if (SUCCEEDED(piDftGenViewModif-&gt;ModifyGenViewProperties (&amp;theViewProperties)))
       {
         if (piDftGenViewUpdate &amp;&amp; SUCCEEDED(piDftGenViewUpdate-&gt;Update()))
         {
           cout &lt;&lt; &quot; view update successful &quot; &lt;&lt; endl;
           nbViewModif++;
         }
       }
       piDftGenViewModif-&gt;Release();piDftGenViewModif=NULL;
    }
    if (piDftGenViewUpdate) piDftGenViewUpdate-&gt;Release(),piDftGenViewUpdate=NULL;
  }
  piListOfViews-&gt;Release();piListOfViews=NULL;
...</pre>
<p>The view must be update after hidden lines mode activation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Saving the Drawing Representation Reference in the Database 
and Closing the Session</h3>
<pre class="code">...   
CATListPtrCATBaseUnknown pListToSave ;
pListToSave.Append(piDrawingRepRef);
CATAdpSaver saver;
hr = <strong>saver.Save</strong>(&amp;pListToSave);
hr = Bag.RemoveAll();
hr = CATPLMSessionServices::ClosePLMSession();</pre>
<p>This section represents the usual sequence for saving a representation reference.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to retrieve Generative Views from Drawing Root and how 
to change the view properties.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
