<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Center Lines</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Center Lines</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCenterLine use case. This use case explains 
		how to create center lines on interactive or generative geometry in a drawing 
		representation reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#Interfaces">About the Use of IDMxxx2D and CATI2Dxxx Interfaces</a>
			</li>
			<li><a href="#UseCase">The CAADrwCenterLine Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCenterLine Do</a> </li>
					<li><a href="#How">How to Launch CAADrwCenterLine</a></li>
					<li><a href="#Where">Where to Find the CAADrwCenterLine Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case you will learn how to create annotations (center lines) on interactive 
and generative geometry.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Interfaces"></a>About the Use of IDMxxx2D and CATI2Dxx Interfaces</h2>
<p>There are two levels of interfaces:</p>
<ol>
	<li>IDMxxx2D for consulting</li>
	<li>CATI2Dxxx for editing.</li>
</ol>
<table>
	<caption>Fig. 1: The 2D Interfaces UML Diagram</caption>
	<tr>
		<td>
		<img alt="2D Interface UML Diagram" height="287" src="images/CAADrwCenterLine2.jpg" width="424"/></td>
	</tr>
</table>
<p>The IDM interfaces are standard interfaces (Interfaces for Design and Modeling). 
IDMs may be re-implemented for user-defined objects. This is the way to integrate 
those elements in:</p>
<ul>
	<li>Sketcher picking assistant</li>
	<li>Drafting annotations.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCenterLine Use Case</h2>
<p>CAADrwCenterLine is a use case of the CAADraftingInterfaces.edu framework that 
illustrates DraftingUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCenterLine Do</h3>
<p>This use case is made of a state command that waits for a selection and creates 
center lines on selected circles.</p>
<table>
	<caption>Fig. 2: Running the Command on Generative and Interactive Geometry</caption>
	<tr>
		<td>
		<img alt="Running the Command on Generative and Interactive Geometry" height="433" src="images/CAADrwCenterLine1.jpg" style="position: relative" width="470"/></td>
	</tr>
</table>
<p>This picture represents two views:</p>
<ol>
	<li>The generative view of a 3D shape representation with additional geometry 
		(the two green circles)</li>
	<li>The same view after applying the command on it. Center lines were created 
		on the selected circles.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCenterLine</h3>
<p>To launch CAADrwCenterLine, you will need to set up the build time environment, 
then compile CAADrwCenterLine and CAADrwAddin along with its prerequisites, set 
up the run time environment [<a href="#References">1</a>].</p>
<ol>
	<li>Launch a CATIA session</li>
	<li>Right-click on the Drafting workshop to activate CAAUseCaseCommands toolbar</li>
	<li>Launch the Center line use case command, and select geometry.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCenterLine Code</h3>
<p>The CAADrwCenterLine use case is made of two source files named CAADrwCenterLine.h 
and CAADrwCenterLine.cpp located in the CAADrwCenterLine.m module of the CAADraftingInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCenterLine.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two steps in CAADrwCenterLine:</p>
<ol>
	<li><a href="#Step1">Building the State Chart and Creating the Appropriate 
		Selection Agent.</a> </li>
	<li><a href="#Step2">Retrieving the Selection and Creating the Center Line</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Building the State Chart and Creating the Appropriate 
Selection Agent</h3>
<pre class="code">void CAADrwCenterLineCmd::BuildGraph()
{  
   // Creation of the acquisition agent
   _ObjectAgent = new CATPathElementAgent(&quot;_ObjectAgent A&quot;);
   _ObjectAgent -&gt;SetBehavior( CATDlgEngWithPrevaluation | 
                               CATDlgEngMultiAcquisition | 
                               CATDlgEngWithCSO); 

   // We only want to get circles
   _ObjectAgent -&gt;AddElementType(&quot;<strong>IDMCircle2D</strong>&quot;);
   AddCSOClient(_ObjectAgent);
   
   //  States definition
   CATDialogState* pState1 = GetInitialState(&quot;Sel circle&quot;);
   pState1-&gt;AddDialogAgent(_ObjectAgent);
   
   // Transition definition
   AddTransition(pState1, NULL, IsOutputSetCondition(_ObjectAgent),
                 Action((ActionMethod)&amp;CAADrwCenterLineCmd::CreateCtrLine, NULL, NULL));
}</pre>
<p>In this section we create a CATPathElementAgent and set the corresponding element 
type to IDMCircle. So only circles could be selected [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Selection and Creating the Center Line</h3>
<pre class="code">boolean CAADrwCenterLineCmd::CreateCtrLine(void *iData)
{ 
   CATSO* pObjSO = _ObjectAgent-&gt;GetListOfValues(); 
   CATPathElement *pElemPath = NULL;
   
   if (NULL != pObjSO)  
   {
      // We will scan the CSO from the begining
      pObjSO-&gt;InitElementList();
      while (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement())  )
      {
         
         // Make sure the element is a circle type
         // This circle can be interactive or a generative result (from part, model, ...)
         IDMCircle2D *piElementRef = (IDMCircle2D *)pElemPath-&gt;<strong>FindElement(IID_IDMCircle2D)</strong>;
         
         if (NULL != piElementRef)
         {
            // Find the special DressUp factory (on the view)
            <strong>CATIDftSpecialDressUpFactory</strong>  *piDrwFact = (CATIDftSpecialDressUpFactory *)pElemPath-&gt;FindElement(IID_CATIDftSpecialDressUpFactory);
            if (NULL != piDrwFact)
            {
               // Let's create the center line
               piDrwFact-&gt;<strong>CreateDrwCenterLine</strong>((CATBaseUnknown *)piElementRef);
               piDrwFact-&gt;Release();
            }
            piElementRef-&gt;Release();
         }
      }
      
      _ObjectAgent -&gt; InitializeAcquisition();
      return TRUE;
   }
   return FALSE;
}</pre>
<p>The acquisition agent did put the selected circles into the CSO. So we get the 
SO and loop on it. The selected circles can be generative ones or interactive ones. 
We get the annotation factory on the view and call the center line factory method 
giving the circle as argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create a state command dealing with geometry selections. 
The <em>IDMxx2D</em> interface identifiers are used as filters and allows the selection 
of interactive and generative geometry. Using the <em>CATIDftSpecialDressUpFactory,</em> 
interface, implemented by the view, it is possible to create annotations on these 
geometries.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
