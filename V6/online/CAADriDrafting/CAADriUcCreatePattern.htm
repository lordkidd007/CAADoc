<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Hatching Pattern on 2D Geometry</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Hatching Pattern on 2D Geometry</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADrwCreatePattern.cpp use case. This use 
		case explains how to create a hatching pattern on 2D geometry.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAADrwCreatePattern Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADrwCreatePattern Do</a>
					</li>
					<li><a href="#How">How to Launch CAADrwCreatePattern</a></li>
					<li><a href="#Where">Where to Find the CAADrwCreatePattern Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case you will learn how to create a hatching pattern on 2D geometry.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADrwCreatePattern Use Case</h2>
<p>CAADrwCreatePattern is a use case of the CAADraftingInterfaces.edu framework 
that illustrates DraftingUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADrwCreatePattern Do</h3>
<p>This sample creates a hatching pattern on 2Dgeometry in batch mode:</p>
<table>
	<caption>Fig. 1: The Start Up Model Containing 2D Geometry</caption>
	<tr>
		<td>
		<img alt="Initial Start Up Model" height="592" src="images/CAADrwAreaFill1.jpg" width="657"/></td>
	</tr>
</table>
<table>
	<caption>Fig. 2: The Start Up Model Processed by CAADrwCreatePattern</caption>
	<tr>
		<td>
		<img alt="Modified Start Up Model" height="592" src="images/CAADrwAreaFill2.jpg" width="657"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADrwCreatePattern</h3>
<p>To launch CAADrwCreatePattern, you will need to set up the build time environment, 
then compile CAADrwCreatePatternalong with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADrwCreatePattern Repository Server Username Password SecurityCtx PLMType PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>The user name</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer(as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM Type</td>
		<td>A PLM Type for component to be opened</td>
		<td>component Type</td>
	</tr>
	<tr>
		<td><span lang="fr">7</span></td>
		<td>PLMExternalIDValue</td>
		<td>CAADrwCreatePattern</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td><span lang="fr">8</span></td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the PLM Access / Import As 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\InputData\CAADrwCreatePattern.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADrwCreatePattern Code</h3>
<p>The CAADrwCreatePattern use case is made of one source file named CAADrwCreatePattern.cpp 
located in the CAADrwCreatePattern.m module of the CAADraftingInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADraftingInterfaces.edu\CAADrwCreatePattern.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven steps in CAADRWCreatePattern:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying the Drawing Reference in Database and Loading 
		It</a></li>
	<li><a href="#Step3">Retrieving the Drawing Root from the Drawing Representation 
		Reference and Getting the Main View</a></li>
	<li><a href="#Step4">Reading 2D Geometry on which Area Fill Will Be Created</a>
	</li>
	<li><a href="#Step5">Area Fill Creation</a></li>
	<li><a href="#Step6">Hatching Pattern Creation</a></li>
	<li><a href="#Step7">Saving the Representation and Closing the PLM Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr;
  int rc = 1;

  // 1. Checks the input arguments
  // =============================
  if (9 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;user&gt; &lt;password&gt; &lt;SecurityCtx&gt; &lt;PLMType&gt; &lt;PLM External Id&gt; &lt;version&gt;&quot;&lt;&lt; endl;
    return 1;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* user = iargv[3];
  const char* password = iargv[4];
  const char* SecurityCtx = iargv[5];
  const char* comp_PLMType = iargv[6];
  const char* comp_externalId = iargv[9];
  const char* comp_version = iargv[10];
 ...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Drawing Reference in Database and Loading It</h3>
<pre class="code">...   
  // 3. Opens the Drawing representation reference 
  // =============================================
  CATIPsiRepresentationReference *piDrawingRepRef = NULL;
  CATOmbLifeCycleRootsBag Bag;
 
  hr = ::CAAOpenPLMComponent(comp_PLMType,comp_drw_externalId,comp_version,IID_CATIPsiRepresentationReference,(void **)&amp;piDrawingRepRef,Bag);
  ...
  
   // 4 Loads the Drawing Representation in "Edit Mode"
  // =================================================
  CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
  if (piDrawingRepRef &amp;&amp;SUCCEEDED( piDrawingRepRef-&gt;QueryInterface( IID_CATIPsiRepresentationLoadMode, (void **) &amp; piRepLoadMode ) ) )
  {
    hr = piRepLoadMode-&gt;ChangeLoadingMode( CATIPsiRepresentationLoadMode::EditMode );
    piRepLoadMode-&gt;Release();piRepLoadMode=NULL;
  }

...
</pre>
<p>This section represents the usual sequence to query a representation reference 
in the database and open it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Drawing Root from the Drawing Representation 
Reference and Getting the Main View</h3>
<pre class="code">...   
// 7. Retrieves the drawing root from the Drawing representation reference
// =======================================================================
CATIDftDrawing *piDftDrawing=NULL;
hr = CATDftDrawingPLMServices::GetDrawingRoot(piDrawingRepRef,&amp;piDftDrawing);

// 8. Retrieves the active View in the current sheet
// =================================================
CATIDftView *piDftView = NULL;
if (piDftDrawing)
{
if (SUCCEEDED(piDftDrawing-&gt;GetActiveView(&amp;piDftView)))
{
...</pre>
<p>A drawing may contain several sheets, but only one is the current one. The current 
sheet is the sheet containing the active view, that is the view currently edited.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Reading 2D Geometry on which Area Fill Will Be Created</h3>
<pre class="code">...
// 9. Gets the geometry in the view
// ================================
// The drawing representation reference model contains a profile made of lines and circles. So these
// elements are arranged.

CATIUnknownList * piListValidElem =NULL;
CATIUnknownListImpl * piNewList = new CATIUnknownListImpl();
piNewList-&gt;QueryInterface(IID_CATIUnknownList, (void **) &amp;piListValidElem);
piNewList-&gt;Release(); piNewList=NULL;

if (piListValidElem)
{
  CATIUnknownList * piList = NULL;
  if (SUCCEEDED( piDftView-&gt;GetComponents(IID_CATI2DCurve,&amp;piList)))
  {
    if (piList)
    {
      unsigned int piListSize = 0;
      piList-&gt;Count(&amp;piListSize);
      IUnknown * item = NULL;
      for(unsigned int i=0 ; i&lt;piListSize ; i++)
      {
        if( SUCCEEDED( piList-&gt;Item(i, &amp;item) ) )
        {
          CATIAlias *piAlias = NULL;
          if (SUCCEEDED(item-&gt;QueryInterface(IID_CATIAlias,(void **)&amp;piAlias)))
          {
            CATUnicodeString namealias;
            namealias = piAlias-&gt;GetAlias();
            if (namealias.SearchSubString(&quot;area&quot;) != -1)
              piListValidElem-&gt;Add(i, item);

            piAlias-&gt;Release();piAlias=NULL;
          }
          item-&gt;Release(); item = NULL;
        }
      }
      piList-&gt;Release(); piList = NULL; 
    }
  }
...</pre>
<p>The 2D geometry in this drawing representation reference is identified by external 
name applied on each element. These elements are automatically arranged by the way 
to used to create it: Profile command in Geometry Creation Toolbar. If these elements 
are not arranged, the area fill will be created with a wrong display.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Area Fill Creation</h3>
<pre class="code">...   
unsigned int nbValidElem = 0;
piListValidElem-&gt;Count(&amp;nbValidElem);

// At least three elements are necessary to create a contour.
if (nbValidElem &gt; 2)
{
  CATLISTV(CATI2DCurve_var) geomList;
  CATListOfDouble startParamList;
  CATListOfDouble endParamList;
  CATListOfInt nbCurvesPerOutline;

  CATI2DCurve_var spCurveElm;
  double pStartParam, pEndParam, pInter ;
  int index=0, creation=0, containment=0;

  IUnknown *item = NULL;
  CATI2DCurve *piCurveElem =NULL;

  // The areafill is built from one contour
  nbCurvesPerOutline.Append(nbValidElem);

  // Loop on geometry elements 
  for (int i=0; i&lt;nbValidElem; i++)
  {
    if( SUCCEEDED( piListValidElem-&gt;Item(i, &amp;item) ) )
    {
      if(SUCCEEDED( item-&gt;QueryInterface(IID_CATI2DCurve,(void **)&amp;piCurveElem)))
      {
        piCurveElem-&gt;GetParamExtents(&amp;pStartParam,&amp;pEndParam);
        if (pStartParam &gt; pEndParam)
        {
          pInter = pStartParam;
          pStartParam = pEndParam;
          pEndParam = pInter; 
        }
        startParamList.Append(pStartParam);
        endParamList.Append(pEndParam);
        geomList.Append(piCurveElem);
        piCurveElem-&gt;Release();piCurveElem=NULL;
      }
      item-&gt;Release();item=NULL;
    }
  }

// 10. Creates the areafill
// ========================

// Notes: The areafill object will be correctly created if elements are
// arranged list.

// Gets the DressUp factory from the view
   CATIDftBaseDressUpFactory_var spBaseDressUpFactory = piDftView;

   CATIDftAreaFill *piDftAreaFill = NULL;
   if (SUCCEEDED(spBaseDressUpFactory-&gt;CreateAreaFill(geomList, startParamList,endParamList, nbCurvesPerOutline,&amp;piDftAreaFill)))
   {
  
...</pre>
<p>Four lists are necessary to create an areafill:</p>
<ol>
	<li>The fist one contains the list of the curves used to create the outline 
		of the areafill</li>
	<li>The second one contains the list of the starting parameters for each curves</li>
	<li>The third one contains the list of the ending parameter for each curve</li>
	<li>The last one contains a list of integer meaning the number of curves to 
		take into account for each outline.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Hatching Pattern Creation</h3>
<pre class="code">...   
// 11. Create the hatching pattern 
// =================================
CATIDftFactory *piDftFact = NULL;
if (SUCCEEDED(piDftDrawing-&gt;GetDrawingFactory(&gt;piDftFact)))
{
  CATIDftHatchingPattern *piHatching = NULL;
  if (SUCCEEDED( piDftFact-&gt;CreateHatchingPattern(IID_CATIDftHatchingPattern, (void **) &amp;piHatching)))
  {
    hr = piHatching -&gt;SetOffset(15.0);
    hr = piHatching -&gt;SetAngle ((double) ( CATRadianToDegree * CATPIBY4));
    hr = piHatching -&gt;SetPitch (8.0);
    hr = piHatching -&gt;SetTexture (1);
    hr = piHatching -&gt;SetThikness(1);
    hr = piHatching -&gt;SetColor(4);

    // 12. Add the hatching pattern to the areafill
    // ============================================
    CATIDftPattern *piDftPattern = NULL;
    if (SUCCEEDED(piHatching-&gt;QueryInterface(IID_CATIDftPattern,(void **)&amp;piDftPattern)))
    {
      piDftAreaFill-&gt;SetPattern(piDftPattern);
      rc = 0;
      piDftPattern-&gt;Release();piDftPattern=NULL;
    }
    piHatching-&gt;Release(); piHatching = NULL;
  } 
  piDftFact-&gt;Release();piDftFact=NULL;
}
...</pre>
<p>To create an hatching pattern, the drawing factory has to be retrieved from the 
drawing root. Once the hatching pattern created, it must be applied to the areafill.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Saving the Representation and Closing the PLM Session</h3>
<pre class="code">...
  CATListPtrCATBaseUnknown pListToSave ;
  pListToSave.Append(piDrawingRepRef);
  CATAdpSaver saver;
  hr = <strong>saver.Save</strong>(&amp;pListToSave);
  hr = Bag.RemoveAll();
  hr = CATPLMSessionServices::ClosePLMSession();
}</pre>
<p>This section represents the usual sequence for saving a newly created CATIA document.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating an area fill 
in the active view of a drawing representation reference. The Area fill is created 
by using the <em>CATIDftBaseDressUpFactory</em> interface.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
