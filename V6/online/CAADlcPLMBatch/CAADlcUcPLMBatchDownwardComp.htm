<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Running DownwardCompatibility batch outside Batch Monitor</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><a name="Top"></a>
		<h1>Run DownwardCompatibility Batch outside Batch Monitor</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p><span>The </span><code><strong>CAADLCPLMBatchDownwardComp</strong></code> 
		use case is the Downward Compatibility batch launched outside the official
		<strong>BatchMonitor</strong> environment which converts the <strong>PLM 
		Components</strong> to a list of <strong>V5 Document Files.</strong></p>
		<p>The Use Case illustrates the steps involved to set a list of PLM Components 
		among other inputs to the Downward Compatibility batch and to subsequently 
		launch it. It finally decodes the output XML generated to retrieve the Identity 
		of the PLM Components and the paths of the converted V5 Documents. It is 
		important to know the <strong>BatchInfrastructure</strong> concepts at the 
		time of studying this Use Case.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADLCPLMBatchDownwardComp Use Case</a>
			<ul>
				<li><a href="#What">What Does the CAADLCPLMBatchDownwardComp Do</a></li>
				<li><a href="#How">How to Launch CAADLCPLMBatchDownwardComp</a></li>
				<li><a href="#Where">Where to Find the CAADLCPLMBatchDownwardComp Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Use Case primarily introduces us to:</p>
<ul>
	<li><code><strong>CATPLMBatch</strong></code> <code><strong>CAA</strong></code>
	<code><strong>C++</strong></code> services to set a list of data and other relevant 
	information conforming to the Batch Infrastructure format to be processed by 
	the <code><strong>DownwardCompatibility</strong></code> batch application launched 
	outside the official <strong>BatchMonitor</strong> environment.</li>
	<li><code><strong>CATPLMBatchXMLToolBox</strong></code> <code><strong>CAA C++</strong></code> 
	services for decoding the mapping XML file generated by the batch application 
	above.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADLCPLMBatchDownwardComp Use Case</h2>
<p><code><strong>CAADLCPLMBatchDownwardComp</strong></code> is a use case of the
<code><strong>CAADataLifeCycle.edu</strong></code> framework that illustrates the
<code><strong>PLMBatchDataAccessInterfaces</strong></code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADLCPLMBatchDownwardComp Do</h3>
<p>The Use Case fundamentally launches the <code><strong>DC</strong></code> (<code><strong>Downward</strong></code>
<code><strong>Compatibility</strong></code>) batch to convert a set of PLM Components 
to V5 Documents.</p>
<p>The Use Case builds a Query with user inputs which when run on the database returns 
a list of PLM Component <code><strong>Identificators</strong></code>. This information 
is written into a Parameters XML file, an input for the <code><strong>DC</strong></code> 
batch processing.</p>
<p>An input PLM Component of the type <code><strong>PLM Reference</strong></code> 
for <code><strong>DC</strong></code> conversion is as seen below [<a href="#Fig. 1">Fig. 
1</a>].</p>
<table>
	<caption><a name="Fig. 1"></a>Fig. 1 A PLM Reference for Migration</caption>
	<tr>
		<td>
		<img alt="A PLM Reference for Migration" src="images/CAADLCPLMBatchFileDWC_Fig1.gif" width="453" height="214"></td>
	</tr>
</table>
<p>In the model above, a <code><strong>PLM Reference</strong></code> aggregates 
an Instance of another <code><strong>PLM Reference</strong></code> beneath it. This 
Child Reference aggregates an instance of a <code><strong>PLM Rep Ref</strong></code> 
beneath it. When this model is input to the <code><strong>DownwardCompatibility
</strong></code>batch process, the root Reference with all the PLM Components aggregated 
beneath it are converted to the corresponding V5 Documents listed below:</p>
<ul>
	<li><code><strong>CAADLCPLMBatchFile_Root</strong></code>.<code><strong>CATProduct</strong></code>,
	<code><strong>CAADLCPLMBatchFile_Child</strong></code>.<code><strong>CATProduct</strong></code>.</li>
	<li><code><strong>CAADLCPLMBatchFile_Shape</strong></code>.<code><strong>CATPart</strong></code>.</li>
</ul>
<p>The output of the <code><strong>DC</strong></code> batch processing is an XML 
file, which is decoded to retrieve the <code><strong>Identificator</strong></code> 
of the input PLM Component and the list of path of the converted CAA V5 Documents. 
This XML file is more appropriately referred to as a <strong>Mapping XML</strong>.
</p>
<p>This Mapping XML file is created at the directory location as defined by the
<code><strong>PLMBATCH_Default_Target</strong></code> variable. The converted V5 
Documents too occur at the same location. In case the <code><strong>PLMBATCH_Default_Target</strong></code> 
variable is not set, the Mapping XML has the entire path of the converted V5 Documents 
listed in it. This path can be easily retrieved using the services provided by the
<code><strong>CATPLMBatchXMLToolBox</strong></code> class, as depicted in a step 
below.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADLCPLMBatchDownward Comp</h3>
<p>To launch <code><strong>CAADLCPLMBatchDownwardComp</strong></code>, you will 
need to set up the build time environment, then compile <code><strong>CAADLCPLMBatchDownwardComp
</strong></code>along with its prerequisites, set up the run time environment, and 
then execute the use case <a href="#References">[1].</a></p>
<p>To launch the use case execute the command:</p>
<p><code><strong>mkrun -c &quot;CAADLCPLMBatchDownwardComp Repository Server User Password 
SecurityCtx Environment PLMCoreReferenceCustomized ConversionMode TargetedVersion -license LicenseFilePath 
-ParamXMLFilePath ParamXmlPath Attribute1 value1 [Attribute2 value2 ...]&quot;</strong></code>.</p>
<p>where:</p>
<table class="border1">
	<tr>
		<th><strong>Repository</strong></th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th><strong>Server</strong></th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th><strong>User</strong></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><strong>Password</strong></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><strong>SecurityCtx</strong></th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (since we only browse the PLM Data, no modifications)</td>
	</tr>
	<tr>
		<th><strong>Environment</strong></th>
		<td>A PLM environment containing a PRODUCT&#39;s customization</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<th style="height: 19px"><strong>PLMCoreReferenceCustomized</strong></th>
		<td style="height: 19px">The non NLS name of the PLM Reference Customization</td>
	</tr>
	<tr>
		<th><strong>ConversionMode</strong></th>
		<td>main action that has to be done on the selected object ( Check/Convert)</td>
	</tr>
	<tr>
		<th><strong>TargetedVersion</strong></th>
		<td>The CATIA Version of conversion ( CATIAV5R15/ CATIAV5R16/ CATIAV5R16)</td>
	</tr>
	<tr>
		<th><strong>LicenseFilePath*</strong></th>
		<td>Full path of a file containing the licensing information for DownwardCompatibility 
		Batch</td>
	</tr>
	<tr>
		<th><strong>ParamXMLPath</strong></th>
		<td>Full path of the directory where the Batch Parameters XML file is to 
		be created</td>
	</tr>
	<tr>
		<th><strong>Attribute1 value1</strong></th>
		<td>List of attribute-value pairs (attribute name and its value) to look 
		for PLM Reference and PLM Representation Reference</td>
	</tr>
</table>
<p>(*) Refer to the License section of the technical technical [<a href="#References">6</a>] 
to create this file.</p>
<p>You can use any PLM Product Reference or PLM Product Representation Reference 
in database. But you can also use data provided by the use case. Import a <code>
<strong>3D XML</strong></code> file supplied in the <code><strong>CAADataLifeCycle.edu</strong></code> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\InputData\CAADLCPLMBatchDWC.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed</p>
<p>This 3dXML file has<code><strong> PLM Product Reference</strong></code> with attributes </p>
<ul>
	<li><code><strong>V_Name : CAADLCPLMBatchFile_Root</strong></code></li>
	<li><code><strong>majorrevision : A </strong></code></li>
	<li> <code><strong>PLM_ExternalID : This will be auto-generated if &quot;Imported 
	as new&quot;.</strong></code></li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADLCPLMBatchDownwardComp Code</h3>
<p>The <code><strong>CAADLCPLMBatchDownwardComp</strong></code> use case is located 
in the <code><strong>CAADLCPLMBatchDownwardComp.m</strong></code> module of the
<code><strong>CAADataLifeCycle.edu</strong></code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\CAADLCPLMBatchDownwardComp.m</code></p>
<p>The use case also refers to the <code><strong>CAADLCBatchEventWatcher.m</strong></code> 
module also in the <code><strong>CAADataLifeCycle.edu</strong></code> framework</p>
<p><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\CAADLCBatchEventWatcher.m</code></p>
<p>where <code><strong>InstallRootFolder</strong></code> <a href="#References">[1]</a> 
is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><strong>CAADLCPLMBatchDownwardComp</strong></code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Retrieve the PLM Components from the Database">Retrieve the PLM 
	Components from the Database</a></li>
	<li><a href="#Create a CATPLMBatch object">Create a CATPLMBatch Object, a Service 
	Provider for the DownwardCompatibility Batch</a></li>
	<li><a href="#SetApplicativeParameters">Set Applicative Parameters to PLM Batch</a></li>
	<li><a href="#SetApplicativeParameters">Set the list of PLM Components to be 
	processed by the DownwardCompatibility Batch</a></li>
	<li><a href="#Generate a Parameters XML File">Generate a Parameters XML File 
	for the DownwardCompatibility Batch</a></li>
	<li><a href="#Launch the DownwardCompatibility Batch">Launch the DownwardCompatibility 
	Batch</a></li>
	<li><a href="#Retrieve the Mapping XML">Retrieve the Mapping XML File</a></li>
	<li><a href="#Decode the Mapping XML">Decode the Mapping XML File</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><strong>CAADLCPLMBatchDownwardComp</strong></code> use case begins 
by creating a session and connecting to the Input Repository. This, being the most 
fundamental prerequisite for all batch use cases, it is the first step in their 
execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we are not modifying PLM data but only retrieving it from the database). 
There are other parameters as well, details of which can be found in the &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; use case article [<a href="#References">2</a>]. This 
article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the PLM Components from the Database"></a>Retrieve the PLM 
Components from the Database</h3>
<p>A list of PLM Components, an input for the Downward Compatibility processing 
are retrieved by running a query on the database based on the inputs provided to 
the Use Case.</p>
<p>We begin by retrieving a pointer to the input Environment from the Repository 
&amp; Environment String.</p>
<pre class="code">...
	const char* repository = iArgv[1] ;
	const CATString EnvId(iArgv[6]) ;
	<strong>CATIAdpEnvironment* poEnv</strong> = NULL ;
	<strong>CATAdpDictionaryServices::GetEnvironment</strong>(repository,EnvId,&amp;poEnv) ;
...</pre>
<p>Next, an <code><strong>AttributeSet</strong></code> object is built with the 
set of <strong>Attribute-values </strong>input by the user. The Use Case &quot;<strong>Querying 
PLM Components by Attributes</strong>&quot; [<a href="#References">3</a>] delves deeper 
into this subject.</p>
<pre class="code">...
	<strong>CATAdpAttributeSet</strong> iAttributeSet ;
	<strong>CATListPtrCATIAdpPLMIdentificator</strong> oListofPLMComponents ;

	int attrpos = 0;
	attrpos = 14;
	for (int AttrIndex = attrpos ; AttrIndex &lt;= (attrpos+((NbAttributes-1)*2)) ; AttrIndex++)
	{
		const CATString Attribute(iArgv[AttrIndex]) ;
		const CATUnicodeString Value(iArgv[AttrIndex+1]) ;
		hr = <strong>iAttributeSet.AddAttribute</strong>(Attribute,Value) ;
		AttrIndex++ ;
		...</pre>
<p>Calls to the <code><strong>GetComponentfromDataBase</strong></code> routine follows, 
to retrieve PLM Components from the database. The <code><strong>AttributeSet</strong></code> 
object is the key input for this routine, which fundamentally defines the query 
to be run on the underlying repository.</p>
<pre class="code">const char* iStrPLMType=iArgv[7];

  CATListPtrCATIAdpPLMIdentificator <strong>oListofPLMComponents</strong> ;
...
  hr = GetComponentfromDataBase(ilistOfAttribute,ilistOfValues,iStrPLMType,oListofPLMComponents) ;
...</pre>
<p>Among these types, we determine the PLM type for <code>iStrPLMType</code>&nbsp; as specified by the user in the inputs.</p>
<p>The implementation for this occurs within the <code><strong>GetComponentsfromDataBase</strong></code> 
routine which follows.</p>
<p>The first call to <code><strong>GetComponentfromDataBase</strong></code> returns 
a list <code><strong>oListofPLMComponents</strong></code> of PLM Components of the 
type specified by the string <code>iStrPLMType</code> <code><strong>.</strong></code></p>
<p>Yet again, the Use Case &quot;<strong>Querying PLM Components by Attributes</strong>&quot; 
[<a href="#References">3</a>] details these steps involved in actually building 
and running Queries for PLM Components on the database.</p>
<pre class="code">HRESULT GetComponentfromDataBase(CATListOfCATString &amp;ilistOfAttribute,
                                 CATListOfCATUnicodeString &amp;ilistOfValues,
                                 const char* &amp;istrPLMTypeInput,
                                 CATListPtrCATIAdpPLMIdentificator &amp;oListofPLMComponents)
{	
...
	<strong>CATListPtrCATAdpQueryResult</strong> oQueryResults ;
	
	hr = CAAAdpGetPLMObjectsFromAttrAndFromType(ilistOfAttribute, ilistOfValues,
					       istrPLMTypeInput,
			                         opiCATIType,
				                oAttributeSet,
					       oQueryResults);
...	 
	int QueryResSize = <strong>oQueryResults.Size</strong>() ;
	for (int k=1; k&lt;=<strong>QueryResSize</strong>; k++)
	{
		<strong>CATAdpQueryResult*</strong> pCurrentResult = NULL ;
		pCurrentResult = oQueryResults[k] ;
		...
		<strong>CATIAdpPLMIdentificator</strong> <strong>*</strong> oIdentifier = NULL ;
		hr = <strong>pCurrentResult</strong>-&gt;<strong>GetIdentifier</strong>(oIdentifier) ;
		...
		<strong>oListofPLMComponents.Append</strong>(oIdentifier) ;
...
	}
</pre>
<p>The result of running the query <strong>CAAAdpGetPLMObjectsFromAttrAndFromType</strong> 
is a list of PLM Components. The information of each PLM Component is contained 
within a <code><strong>CATAdpQueryResult</strong></code> object. The call to
<code><strong>CATAdpQueryResult::GetIdentifier</strong></code> returns this
<code><strong>Identificator</strong></code>. This <code><strong>Identificator</strong></code> 
is then appended to the input list namely <code><strong>oListofPLMComponents</strong></code>. 
The article &quot;<strong>PLM Component Identifier</strong>&quot; [<a href="#References">5</a>] 
gives us more insights to an <code><strong>Identificator</strong></code> of a PLM 
Component.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create a CATPLMBatch object"></a>Create a CATPLMBatch object, a Service 
Provider for the DownwardCompatibility Batch</h3>
<p>The <code><strong>CATPLMBatch</strong></code> class provides services to create 
a Batch Parameters XML file. The batch to be run, its release version, the license 
for running it, the data to be processed by this batch and the target directory 
path for the batch output, are written to this Batch Parameters file, in an XML 
format as defined by the Batch Infrastructure standards. </p>
<pre class="code">...
	<strong>CATUnicodeString</strong> <strong>BatchName</strong>(&quot;DownwardCompatibility&quot;) ;
	<strong>CATPLMBatch *</strong> PLMBatch = new CATPLMBatch(<strong>BatchName.ConvertToChar()</strong>) ;
...</pre>
<p>The <code><strong>CATPLMBatch</strong></code> class takes the Batch name as an 
argument during instantiation. It is the name of the Batch Application as it appears 
in the <strong>BatchMonitor</strong> UI list. This batch name is subsequently written 
into the Batch Parameters XML file created in the steps ahead.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="SetApplicativeParameters"></a>Set Applicative Parameters to PLM Batch</h3>
<p>The <code>SetApplicativeParameters</code> method allows us to set applicative 
parameters for the current batch application [<a href="#References">7</a>] and a 
given option. Here we are setting Conversion mode to PLM Batch. This will decide 
main action that has to be done on selected object. Here we have two options Convert 
or Check. </p>
<pre class="code">...
	CATListOfCATUnicodeString ConversionMode;
	ConversionMode.Append(iArgv[8]);
	CATString OptionName(&quot;<strong>CATDWC_ConversionMode</strong>&quot;);

	hr = PLMBatch-&gt;<strong>SetApplicativeParameters</strong>(OptionName,<strong>ConversionMode</strong>);
...</pre>
<p>For setting conversion mode option name is given as <code>CATDWC_ConversionMode</code>.
</p>
<p>Then We are setting Targeted Version. Converted document will be able to open 
at least on the Targeted Version. Here options are CATIAV5R15 or CATIAV5R16 or CATIAV5R17. 
By default version is CATIAV5R18.</p>
<pre class="code">...
	CATListOfCATUnicodeString TargetedVersion;
	TargetedVersion.Append(iArgv[9]);

	hr = PLMBatch-&gt;<strong>SetApplicativeParameters</strong>(&quot;<strong>CATDWC_TargetedVersion</strong>&quot;,<strong>TargetedVersion</strong>);
...</pre>
<p>For setting Targeted Version option name is given as <code>CATDWC_TargetedVersion</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the list of components to be processed"></a>Set the List of PLM 
Components to be processed by the DownwardCompatibility Batch</h3>
<p>The list of PLM Components to be processed by the <code><strong>DownwardCompatibility</strong></code> 
batch is set within the <code><strong>CATPLMBatch</strong></code> object. It is 
then subsequently written to the Batch Parameters XML file, in a format as defined 
by the <strong>BatchInfrastructure</strong> standards.</p>
<pre class="code">...
	hr = <strong>PLMBatch</strong>-&gt;<strong>SetSelectedObjects</strong>(oListofPLMComponents) ; 
...</pre>
<p>The <code><strong>CATPLMBatch::SetSelectedObjects</strong></code> call takes 
a list of PLM Components namely. <code><strong>oListofPLMComponents</strong></code> 
(a list of <code><strong>CATIAdpPLMIdentificator</strong></code>) for the <code>
<strong>DownwardCompatibility</strong></code> processing. This list was retrieved 
in an earlier step namely. &quot;<a href="#Retrieve the PLM Components from the Database">Retrieve 
PLM Components from the database</a>&quot;.</p>
<p>Its important to note that the <code><strong>CATPLMBatch</strong></code>::<code><strong>SetSelectedObjects</strong></code> 
call returns SUCCESS, only if all PLM Components in the input list exist, have read 
access and are of the type supported by the batch application.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Generate a Parameters XML File"></a>Generate a Parameters XML File 
for the DownwardCompatibility Batch</h3>
<p>The <code><strong>CATPLMBatch</strong></code> finally generates a Parameters 
XML file, an input for the <code><strong>DownwardCompatibility</strong></code> batch.</p>
<pre class="code">...
	CATUnicodeString <strong>LicenseFile</strong> ;
	LicenseFile = iArgv[11] ;
	CATUnicodeString <strong>ParamXmlFilePath(iArgv[14])</strong> ;
...
	hr = <strong>PLMBatch</strong>-&gt;<strong>FillXmlFile</strong>(LicenseFile,ParamXmlFilePath) ;
...</pre>
<p>The Parameters XML file is created at the location as specified by <code>
<strong>ParamXmlFilePath</strong></code> input to the <code><strong>CATPLMBatch</strong></code>::<code><strong>FillXmlFile</strong></code> 
call. </p>
<p>Another significant information which gets written to the Parameters XML file 
is the target directory path where the output of the <code><strong>DownwardCompatibility</strong></code> 
Batch processing is found. The user customizes this path, by setting the &quot;<code><strong>PLMBATCH_Default_TargetDir</strong></code>&quot; 
environment variable. The <strong>Global Results html</strong> and a <strong>Mapping 
XML</strong>, the results of the <code><strong>DownwardCompatibility</strong></code> 
run, are created at this location.</p>
<p>If the <code><strong>ParamXmlFilePath</strong></code> is a NULL string, the XML 
file with a default name (same as the <code><strong>DownwardCompatibility</strong></code> 
Batch name) at the default location (defined by the <code><strong>PLMBATCH_Default_TargetDir</strong></code> 
variable) is created. This default value is then assigned to the <code><strong>ParamXmlFilePath</strong></code> 
string and returned by the <code><strong>FillXMLFile</strong></code> routine.</p>
<p>This Parameters XML file is finally updated with the <strong>Licensing</strong> 
information essential for running the <code><strong>DownwardCompatibility</strong></code> 
batch.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch the DownwardCompatibility Batch"></a>Launch the DownwardCompatibility 
Batch </h3>
<p>We finally launch the <code><strong>DownwardCompatibility</strong></code> Batch. 
The Parameters XML file, created earlier having all the data essential for the batch 
processing is an input for this step.</p>
<pre class="code">...
	hr = <strong>LaunchPLMBatchFBDIBatch</strong> (ParamXmlFilePath) ;
...</pre>
<p>The <code><strong>LaunchDownwardCompatibilityBatch</strong></code> routine has 
the steps involved to launch the <code><strong>DownwardCompatibility</strong></code> 
batch. The &quot;<strong>Launching a CAA Batch</strong>&quot; Use Case [<a href="#References">4</a>] 
is a useful reference, since it further details those steps.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the Mapping XML"></a>Retrieve the Mapping XML File</h3>
<p>The <code><strong>CATPLMBatch</strong></code> Instance provides a service to 
retrieve the <strong>Mapping XML </strong>file, an output of the <code><strong>DownwardCompatibility</strong></code> 
Batch process.</p>
<pre class="code">...
	<strong>CATUnicodeString</strong> DWCMappingXmlFile ;
	hr = PLMBatch-&gt;<strong>GetReportName</strong>(DWCMappingXmlFile);
...</pre>
<p>It is interesting to note that the <code><strong>CATPLMBatch</strong></code>::<code><strong>GetReportName</strong></code> 
call returns a string which represents the entire path of the Mapping XML and the 
Global Results file, without their extensions.</p>
<p>We append a &quot;<strong>.xml</strong>&quot; to this string and thus have access to the 
Mapping XML file, in the steps ahead. </p>
<pre class="code">...
	DWCMappingXmlFile.<strong>Append</strong>(&quot;<strong>.xml</strong>&quot;);
...</pre>
<p>Users have the choice to append a &quot;.<strong>html</strong>&quot; to that string, so 
that they have access to the global results of the <code><strong>DownwardCompatibility</strong></code> 
batch run.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Decode the Mapping XML"></a>Decode the Mapping XML and display the 
File Path of the converted V5 Documents</h3>
<p>We decode the Mapping XML, an output of the <code><strong>DownwardCompatibility</strong></code> 
batch launch.</p>
<p>Each PLM Component, subsequent to its conversion can be associated with a list 
of CAA V5 Documents. This Mapping XML has information of each PLM Component and 
the paths of all the associated converted V5 Documents.</p>
<pre class="code">...
	CATIAdpPLMIdentificator * oPLMComponentOrigin = NULL ;
	CATListOfCATUnicodeString oListofMappedPath ;
	short int irecnumber = 1 ;
	
	while( SUCCEEDED(hr = <strong>CATPLMBatchXMLToolBox::ReadQueryPathMappingFile</strong> 
						( DWCMappingXmlFile, irecnumber, 
						  oPLMComponentOrigin, oListofMappedPath)))
	{
		HRESULT HR = S_OK;
		HR = <strong>RetrieveIdentifierSet</strong>(oPLMComponentOrigin) ;
		for(int x = 1 ; <strong>x &lt;= oListofMappedPath.Size()</strong> ; x++)
			cout &lt;&lt; <strong>oListofMappedPath[x].ConvertToChar</strong>() &lt;&lt; endl ;
		
		if(<strong>S_FALSE == hr</strong>) <strong>break</strong>; //last record reached
		...</pre>
<p>The <code><strong>CATPLMBatchXMLToolBox</strong></code>::<code><strong>ReadQueryPathMappingFile</strong></code> 
routine decodes the Mapping XML. It outputs an <code><strong>Identificator</strong></code>
<code><strong>oPLMComponentOrigin</strong></code> of the input PLM Component and 
an associated list of converted CAA V5 Documents <code><strong>oListOfMappedPath</strong></code>.</p>
<p>The <code><strong>Identificator</strong></code> of the PLM Component returns 
its Identity <code><strong>PLM_ExternalID</strong></code> through the steps detailed 
in the <code><strong>RetrieveIdentifierSet</strong></code> routine. The Use Case 
&quot;<strong>Querying PLM Components by Attributes</strong>&quot; [<a href="#References">3</a>] 
details those steps further and the article &quot;<strong>PLM Component Identifier</strong>&quot; 
[<a href="#References">5</a>] gives us more insights to an <code><strong>Identificator</strong></code> 
of a PLM Component.</p>
<p>The argument <code><strong>irecnumber</strong></code> passed to this call represents 
the position of the record to decode, in the Mapping XML file. If a specific record 
is to be retrieved, user can specify its <code><strong>irecnumber</strong></code>. 
If all records are to be retrieved, the API call occurs within a loop as the code 
above depicts.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><strong>CAADLCPLMBatchDownwardComp</strong></code> use case ends by 
simply closing the PLM session. Since all use cases necessarily conclude by closing 
the PLM session, we have a dedicated article on this topic namely &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code><strong>CAADLCPLMBatchDownwardComp</strong></code> Use Case launches 
the <code><strong>DownwardCompatibility</strong></code> Batch process outside the 
official <strong>BatchMonitor</strong> environment, within the client code. It primarily 
converts an input PLM Component to a list of V5 Documents, associated with it.</p>
<p>Initially a query is run on the database based on the inputs specified by the 
user, to retrieve a list of PLM Components, an input data for the <code><strong>
DownwardCompatibility</strong></code> processing. A <code><strong>CATPLMBatch</strong></code> 
object enables us write this data to a Parameters XML file, an input for the
<code><strong>DownwardCompatibility</strong></code> batch. The Parameters XML also 
has other data relevant for running the batch, in a format as specified by the BatchInfrastructure 
standards.</p>
<p>The <code><strong>DownwardCompatibility</strong></code> batch finally generates 
an XML file which has the information to map each PLM Component processed with an 
associated list of converted CAA V5 Documents. This Mapping XML file is finally 
decoded to display the <code><strong>PLM_ID</strong></code> of each PLM Component 
and the paths of the converted V5 Documents. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a> </td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">
		Querying PLM Components by Attributes</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAABatUseCases/CAABatBatchLauncherSample.htm">
		Launching a CAA Batch</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAPlmTaCATIAdpPLMIdentificator.htm">
		PLM Component Identifier</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAADlcTaPLMBatchPrinciples.htm">Launching PLM Batch outside 
		the Batch Monitor Environment</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAADlcQrOptionList_DWC.htm">Downwoard Compatiblity Batch Options</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
