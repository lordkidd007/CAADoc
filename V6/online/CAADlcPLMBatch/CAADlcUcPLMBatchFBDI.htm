<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Running FBDI outside Batch Monitor</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Run FBDI Batch outside Batch Monitor</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The <strong>CAADLCPLMBatchFBDI</strong> use case is a batch command which 
		primarily converts <strong>V5 Document</strong> Files into PLM Components 
		and saves them into the database. The <strong>FBDI</strong> batch, launched 
		outside the official BatchMonitor Environment does this migration.</p>
		<p>The Use Case illustrates the steps involved to set a list of V5 Documents 
		among other inputs to the FBDI batch and to subsequently launch it. It finally 
		decodes the output XML generated to list the newly migrated PLM Components. 
		Its important to know the PLM batch concepts [<a href="#References">6</a>] 
		at the time of studying this Use Case.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADLCPLMBatchFBDIUse Case</a>
			<ul>
				<li><a href="#What">What Does CAADLCPLMBatchFBDIDo</a></li>
				<li><a href="#How">How to Launch CAADLCPLMBatchFBDI</a></li>
				<li><a href="#Where">Where to Find the CAADLCPLMBatchFBDI Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Use Case primarily introduces us to:</p>
<ul>
	<li>
	<p><code>CATPLMBatch CAA C++</code> services to set a list of data and other 
	relevant information conforming to the Batch Infrastructure format to be processed 
	by the <code>FBDI</code> batch application launched outside the official
	<strong>BatchMonitor</strong> environment</p>
	</li>
	<li><code>CATPLMBatchXMLToolBox CAA C++</code> services for decoding the mapping 
	XML file generated by the batch application above</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADLCPLMBatchFBDI Use Case</h2>
<p><code>CAADLCPLMBatchFBDI</code> is a use case of the <code>CAADataLifeCycle.edu</code> 
framework that illustrates the <code>PLMBatchDataAccessInterfaces</code> framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADLCPLMBatchFBDI Do</h3>
<p>The Use Case fundamentally launches the <code>FBDI</code> (<strong>File Based 
Data Import</strong>) batch to migrate a set of CAA V5 Documents to the data of 
the most recent release version and saves them into the database.</p>
<p>The list of the V5 documents to be processed by the <code>FBDI</code> batch is 
contained within a text file, an input for the Use Case execution. This text file 
is read to retrieve the list of CAA V5 document paths, and written into an XML file, 
an input for the <code>FBDI</code> processing.</p>
<p>Each V5 Document listed in the Parameters XML file is then processed. An input 
document of the type <code>CATProduct</code> for migration is as seen below [<a href="#Fig. 1">Fig. 
1</a>].</p>
<table>
	<caption><a name="Fig. 1"></a>Fig. 1 CATProduct Input For FBDI Migration</caption>
	<tr>
		<td>
		<img alt="CATProduct Input For FBDI Migration" src="images/CAADLCPLMBatchFileEnoviaV5_Fig1.jpg" width="451" height="294"></td>
	</tr>
</table>
<p>A <code>CATProduct</code> aggregates several other Sub-Products and Parts beneath 
it. Hence running <code>FBDI</code> on a Product migrates its aggregating children 
as well. Thus, the migration for the Product above results in the following PLM 
Components to be saved in the database with Prefix value. In the DB each PLM Component 
has unique name to maintain this user has to take care and provide prefix. This 
prefix can be given input to UC as argument, this is the same prefix which we set 
in interactive CATIA (Tools-&gt;Options-&gt;PLM Access-&gt; Identification-&gt; Identification 
String).</p>
<ul>
	<li>PLM References namely. <code>CAADLCPLMBatchFileEnoviaV5_Root</code>,
	<code>CAADLCPLMBatchFileEnoviaV5_Child</code> and <code>CAADLCPLMBatchFileEnoviaV5_Shape</code></li>
	<li>PLM Rep Reference namely. <code>CAADLCPLMBatchFileEnoviaV5_Shape</code></li>
</ul>
<p>The next scenario is for migrating an input document of the type <code>CATPart</code> 
as the one depicted below [<a href="#Fig. 2">Fig. 2</a>]</p>
<table>
	<caption><a name="Fig. 2"></a>Fig. 2 CATPart Input For FBDI Migration</caption>
	<tr>
		<td>
		<img alt="CATPart Input For FBDI Migration" src="images/CAADLCPLMBatchFileEnoviaV5_Fig2.jpg" width="378" height="256"></td>
	</tr>
</table>
<p>In this case, a PLM Reference (<code>CAADLCPLMBatchFileEnoviaV5_Shape<strong>)</strong></code> 
and a PLM Rep Ref namely. <code>CAADLCPLMBatchFileEnoviaV5_3DShape</code> gets saved 
in the database.</p>
<p>For both the above scenarios, an XML file is output which has the entire path 
of the input CAA V5 Document and information representing the associated migrated 
PLM Components, all in an XML format. It is more appropriately referred to as a
<strong>Mapping XML</strong>.</p>
<p>The last step is to decode this XML to retrieve for display, a string representing 
the entire path of the CAA V5 Document, an input for the FBDI migration. It also 
involves retrieving an Identity of the associated PLM Components for display.</p>
<p>The reports will get generated in the report directory which is set by default 
or can be valuated by the end user.</p>
<p>This Mapping XML file is created at the directory location as defined by the
<code>PLMBATCH_Default_Target</code> variable. Read the &quot;Analysing the PLM batch 
output&quot; section [] for more detail about the output location.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADLCPLMBatchFBDI</h3>
<p>To launch <code>CAADLCPLMBatchFBDI</code>, you will need to set up the build 
time environment, then compile <code>CAADLCPLMBatchFBDI</code> along with its prerequisites, 
set up the run time environment, and then execute the use case
<a href="#References">[1].</a></p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAADLCPLMBatchFBDI Repository Server User Password SecurityCtx 
Environment Prefix -ReportDirectory CompleteDirectoryPath -input InputDataTxtFile 
-license LicenseFilePath [-ParamXMLFilePath ParamXmlPath]&quot;</code></p>
<p>where:</p>
<table class="border1">
	<tr>
		<th><strong>Repository</strong></th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th><strong>Server</strong></th>
		<td>The server as Host:: <em>name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<th><strong>User</strong></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><strong>Password</strong></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><strong>SecurityCtx</strong></th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (since we only browse the PLM Data, no modifications)</td>
	</tr>
	<tr>
		<th><strong>Environment</strong></th>
		<td>PLM environment containing Product customization</td>
	</tr>
	<tr>
		<th><strong>Prefix</strong></th>
		<td>Prefix for newly FBDI migrated PLM Components</td>
	</tr>
	<tr>
		<th><strong>CompleteDirectoryPath</strong></th>
		<td>Directory path where report and traces will be generated (for path use 
		forward slash (/), no backslash (\))</td>
	</tr>
	<tr>
		<th><strong>InputDataTxtFile*</strong></th>
		<td>Path of the txt file containing the V5 Documents to be processed by 
		the FBDI Batch</td>
	</tr>
	<tr>
		<th><strong>LicenseFilePath**</strong></th>
		<td>Path of the file containing the licensing information for FBDI Batch</td>
	</tr>
	<tr>
		<th><strong>ParamXMLPath</strong></th>
		<td>Path of the directory where the Batch Parameters XML file is to be created. 
		An optional input.</td>
	</tr>
</table>
<p><strong>*InputDataTxtFile</strong> is <strong><code>CAADLCInputV5Documents.txt</code></strong> 
- located within:</p>
<table>
	<tr>
		<td><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\InputData\</code></td>
	</tr>
</table>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This text file has the entries for input models <code>CAADLCPLMBatchFileEnoviaV5_Root</code>.<code>CATProduct</code> 
and <code>CAADLCPLMBatchFileEnoviaV5_3DShape</code>. <code>CATPart</code> which 
also occur at the location</p>
<p>(**) Refer to the Licence section of the technical technical [<a href="#References">6</a>] 
to create this file.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADLCPLMBatchFBDI Code</h3>
<p>The <code>CAADLCPLMBatchFBDI</code> use case is located in the <code>CAADLCPLMBatchFBDI.m</code> 
module of the <code>CAADataLifeCycle.edu</code> framework</p>
<p><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\CAADLCPLMBatchFBDI.m\</code></p>
<p>The Use Case also refers to the <code>CAADLCBatchEventWatcher.m</code> module 
also in the <code>CAADataLifeCycle.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADataLifeCycle.edu\CAADLCPLMBatchFBDI.m\</code></p>
<p>where <code>InstallRootFolder</code> <a href="#References">[1]</a> is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code>CAADLCPLMBatchFBDI</code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Set Prefix for new migrated PLM Components">Set Prefix for new 
	migrated PLM Components</a></li>
	<li><a href="#Set Prefix for new migrated PLM Components">Check if the Input 
	Text File exists and read its contents</a></li>
	<li>
	<a href="#Instantiate a CATPLMBatch object dedicated to the PLMBatchFBDI batch">
	Create a CATPLMBatch Object, a Service Provider for the FBDI Batch</a></li>
	<li>
	<a href="#Set the list of CAA V5 Documents to be processed by FBDI Batch">Set 
	a list of V5 Documents to be processed by the FBDI Batch</a></li>
	<li><a href="#Set the Report Parameters">Set the Report Parameters</a></li>
	<li><a href="#Generate a FBDI Batch Parameters XML File">Generate a Parameters 
	XML File for the FBDI Batch</a></li>
	<li><a href="#Launch the FBDI Batch">Launch the FBDI Batch</a></li>
	<li><a href="#Retrieve the Mapping XML">Retrieve the Mapping XML File</a></li>
	<li><a href="#Decode the Mapping XML">Decode the Mapping XML File</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAADLCPLMBatchFBDI</code> use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we are not modifying PLM data but only retrieving it from the database). 
There are other parameters as well, details of which can be found in the &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; use case article [<a href="#References">2</a>]. This 
article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set Prefix for new migrated PLM Components"></a>Set Prefix for new 
migrated PLM Components</h3>
<p>The PLM Components imported to the DB by running the FBDI process should essentially 
be have unique PLM_ExternalID. This is achieved, thanks to <strong>&quot;PLMBusinessLogic&quot;
</strong>preference repository which lets the user have the liberty to set a string, 
which is prefixed to any PLM Component imported by FBDI. This is the same prefix 
which we set in interactive CATIA (Tools-&gt;Options-&gt;PLM Access-&gt; Identification-&gt; 
Identification String).</p>
<p>User then has to ensure that this prefix is set to a new value so that any subsequent
<strong>run of the FBDI</strong> process on the same phase-I file, will result in 
a unique PLM_ExternalID for the new PLM Component imported in DB.</p>
<pre class="code">...
  CATSysPreferenceRepository * pRepository = CATSysPreferenceRepository::GetPreferenceRepository(&quot;PLMBusinessLogic&quot;);
  ...
  CATUnicodeString PrefixBeforeValuation = &quot;&quot;; 
  CATLONG32 Res = pRepository-&gt;ReadPreference(&quot;IdString&quot;, &amp; PrefixBeforeValuation);
  ...
  CATLONG32 Res2 = pRepository-&gt;WritePreference(&quot;IdString&quot;, &amp; Prefix);
  ...
  CATUnicodeString PrefixAfterValuation = &quot;&quot;; 
  CATLONG32 Res = pRepository-&gt;ReadPreference(&quot;IdString&quot;, &amp; PrefixAfterValuation);
  ... 
  hr = pRepository-&gt;SaveRepository();
...</pre>
<p>Here we retrieve &quot;<strong>PLMBusinessLogic</strong>&quot; preference repository. Then 
we read and and update &quot;<strong>IdString</strong>&quot; Preference value with user input 
Prefix value. This updated value will get appended as prefix with the name of newly 
FBDI migrated PLM Components.</p>
<p>A call to <code>CATSysPreferenceRepository</code>::<code>GetPreferenceRepository</code> 
returns <em>CATSysPreferenceRepository</em> * type (<code>pRepository</code>) and 
arguments are as follows</p>
<ul>
	<li><code>PLMBusinessLogic</code>, a name of the <em>CATSysPreferenceRepository</em> 
	used by the applications.</li>
</ul>
<p>Next we read the current preferred value of the &quot;IdString&quot; attribute. A call 
to <code>CATSysPreferenceRepository</code>::<code>ReadPreference</code> on <code>
pRepository</code>, the arguments are as follows:</p>
<ul>
	<li><code>IdString</code> , a name of the attribute whose preferred value to 
	be retrieved.</li>
	<li><code>PrefixBeforeValuation</code>, a CATUnicodeString type, Retrieved value 
	of the above attribute.</li>
</ul>
<p>Then we set the IdString value with input Prefix, a call to <code>CATSysPreferenceRepository</code>::<code>WritePreference</code> 
takes following arguments</p>
<ul>
	<li><code>IdString</code>, a name of the attribute whose preferred value to 
	be set.</li>
	<li><code>Prefix</code>, a <em>CATUnicodeString</em> type, user input value 
	for above attribute.</li>
</ul>
<p>Next we again retrieve and confirm value is set, A call to <code>CATSysPreferenceRepository</code>::<code>ReadPreference</code> 
takes following arguments:</p>
<ul>
	<li><code>IdString</code>, a name of the attribute whose preferred value to 
	be retrieved.</li>
	<li><code>PrefixAfterValuation</code>, a <em>CATUnicodeString</em> type, Retrieved 
	value of the abover attribute (After re-valuation).</li>
</ul>
<p>Then we save the repository by calling <code>CATSysPreferenceRepository</code>::<code>SaveRepository.
</code>The <code>PLMBusinessLogic</code> preference repository saves the preferred 
value for the &quot;<strong>IdString</strong>&quot; attribute.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Check if input Txt file exists"></a>Check if the Input Text File exists 
and read its contents</h3>
<p>The list of the CAA V5 Documents to be processed by the <strong>FBDI</strong> 
Batch application is listed in an input text file. A CAA V5 Document is specified 
by its complete path, per line within this text file.</p>
<p>Thus, each CAA V5 Document path is retrieved from the input text and is appended 
to a list of <code>CATUnicodeString</code>, an input for batch processing in the 
steps ahead.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>
<a name="Instantiate a CATPLMBatch object dedicated to the PLMBatchFBDI batch">
</a>Create a CATPLMBatch object, a Service Provider for the FBDI Batch</h3>
<p>The <strong>CATPLMBatch</strong> class provides services to create a Batch Parameters 
XML file. The batch to be run, the license for running it and the data to be processed 
by this batch are written to this Batch Parameters file, in an XML format as defined 
by the Batch Infrastructure standards.</p>
<pre class="code">...
  <strong>CATUnicodeString</strong> <strong>BatchName</strong>(&quot;FBDI&quot;) ;
  <strong>CATPLMBatch *</strong> PLMBatch = new CATPLMBatch(<strong>BatchName.ConvertToChar()</strong>) ;
...</pre>
<p>The <strong>CATPLMBatch</strong> class takes the Batch name as an argument during 
instantiation. It is the name of the Batch Application as it appears in the
<strong>BatchMonitor</strong> UI list. This batch name is subsequently written into 
the Batch Parameters XML file created in the steps ahead.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the list of CAA V5 Documents to be processed by FBDI Batch">
</a>Set a List of V5 Documents to be processed by the FBDI Batch</h3>
<p>The list of CAA V5 Documents to be processed by the <strong>FBDI</strong> batch 
is set within the <strong>CATPLMBatch</strong> object. It is then subsequently written 
to the Batch Parameters XML file.</p>
<pre class="code">...
  hr = <strong>PLMBatch</strong>-&gt;<strong>SetSelectedObjects</strong>(ListofFileObjects) ; 
...</pre>
<p>The <strong>CATPLMBatch</strong>::<strong>SetSelectedObjects</strong> call takes 
a list of CATIA V5 Documents namely. <strong>ListOfFileObjects</strong> for the
<strong>FBDI</strong>processing. This list has been populated by reading an input 
text file, in an earlier step. (<a href="#Set Prefix for new migrated PLM Components">Check 
Input Text file exists and read its contents</a>)</p>
<p>Its important to note that the <strong>CATPLMBatch</strong>::<strong>SetSelectedObjects</strong> 
call returns SUCCESS, only if all documents in the input list exist, have read access 
and are of the type supported by the batch application (CATIA V5 Document extensions)</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the Report Parameters"></a>Set the Report parameter</h3>
<p>Here we set the PLMBatch report directory. This defines the directory where reports 
and traces will be generated. The directory path is set by variable the report parameter 
namely PLMBATCH_Report_Directory.</p>
<p>By default, the report directory is valuated by the value set for the PLMBATCH_Default_ReportDir 
variable. when this variable is not exported/set then report directory is set to 
the current directory (directory where the .exe application is running)</p>
<pre class="code">...
  CATUnicodeString strCompleteDirectoryPath = iArgv[9]; 
  CATString strOptionName = &quot;<strong>PLMBATCH_Report_Directory</strong>&quot;;
  
  hr = <strong>PLMBatch-&gt;SetReportParameters</strong>(<strong>strOptionName,strCompleteDirectoryPath</strong>) ; 
...</pre>
<p>A call to <code>CATPLMBatch::SetReportParameters</code> takes following arguments:</p>
<ul>
	<li><code>strOptionName</code>, a <em>CATString</em> type, represents the report 
	parameter, in this case we set &quot;<code>PLMBATCH_Report_Directory</code>&quot;.
	</li>
	<li><code>strCompleteDirectoryPath</code>, a <em>CATUnicodeString</em> type, 
	the complete path value for report directory .</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Generate a FBDI Batch Parameters XML File"></a>Generate a Parameters 
XML File for the FBDI Batch</h3>
<p>The <strong>CATPLMBatch</strong> finally generates a Parameters XML file, an 
input for the <strong>FBDI</strong> batch.</p>
<pre class="code">...
  CATUnicodeString <strong>LicenseFile</strong> ;
  LicenseFile = iArgv[13] ;
  CATUnicodeString <strong>ParamXmlFilePath = iArgv[15]</strong> ;
...
  hr = <strong>PLMBatch</strong>-&gt;<strong>FillXmlFile</strong>(LicenseFile,ParamXmlFilePath) ;
...</pre>
<p>The Parameters XML file is created at the location as specified by <strong>ParamXmlFilePath</strong> 
input to the <strong>CATPLMBatch</strong>::<strong>FillXmlFile</strong> call.</p>
<p>Another significant information which gets written to the Parameters XML file 
is the target directory path where the output of the <strong>FBDI</strong> Batch 
processing is found. The user customizes this path, by setting the &quot;<strong>PLMBATCH_Default_TargetDir</strong>&quot; 
environment variable. The <strong>Global Results html</strong> and a <strong>Mapping 
XML</strong>, the results of the <strong>FBDI</strong> run, are created at this 
location.</p>
<p>If the <strong>ParamXmlFilePath</strong> is a <strong>NULL</strong> string, the 
XML file with a default name (same as the <strong>FBDI</strong> Batch name) at the 
default location (defined by the <strong>PLMBATCH_Default_TargetDir</strong> variable) 
is created. This default value is then assigned to the <code>ParamXmlFilePath</code> 
string and returned by the <code>FillXMLFile</code> routine.</p>
<p>This Parameters XML file is finally updated with the <strong>Licensing</strong> 
information essential for running the <strong>FBDI</strong> batch.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch the FBDI Batch"></a>Launch the FBDI Batch</h3>
<p>We finally launch the <strong>FBDI</strong> Batch. The Parameters XML file, created 
earlier having all the data essential for the FBDI batch processing is an input 
for this step.</p>
<pre class="code">...
  hr = <strong>LaunchPLMBatchFBDIBatch</strong> (ParamXmlFilePath) ;
...</pre>
<p>The <code>LaunchPLMBatchFBDIBatch</code> routine has the steps involved to launch 
the <strong>FBDI</strong> batch. The &quot;<strong>Launching a CAA V5 Batch</strong>&quot; 
Use Case [<a href="#References">3</a>] is a useful reference, since it further details 
those steps.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the Mapping XML"></a>Retrieve the Mapping XML File</h3>
<p>The <code>CATPLMBatch</code> Instance provides a service to retrieve the
<strong>Mapping XML</strong> file, an output of the <code><strong>FBDI</strong></code> 
Batch process.</p>
<pre class="code">...
  <strong>CATUnicodeString</strong> FBDIMappingXmlFile ;
  hr = PLMBatch-&gt;<strong>GetReportName</strong>(FBDIMappingXmlFile);
...</pre>
<p>It is interesting to note that the <code>CATPLMBatch</code>::<code>GetReportName</code> 
call returns a string which represents the entire path of the Mapping XML and the 
Global Results file, without their extensions.</p>
<p>We append a &quot;<strong>.xml</strong>&quot; to this string and thus have access to the 
Mapping XML file, in the steps ahead.</p>
<pre class="code">...
  FBDIMappingXmlFile.<strong>Append</strong>(&quot;<strong>.xml</strong>&quot;);
...</pre>
<p>Users have the choice to append a &quot;.<strong>htm</strong>&quot; to that string, so 
that they have access to the global results of the <code><strong>FBDI</strong></code> 
batch run.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Decode the Mapping XML"></a>Decode the Mapping XML and seek an Identificator 
of each Migrated PLM Component</h3>
<p>We decode the Mapping XML, an output of the <code>FBDI</code> batch launch. Each 
CAA V5 Document can be associated with a set of PLM Components, after its migration 
to the target provider . This Mapping XML has the path of each input CAA V5 Document 
and the Identity of all the associated migrated PLM Components output.</p>
<pre class="code">...
  <strong>CATUnicodeString</strong> oPathOrigin ;
  <strong>CATLISTP(CATIAdpPLMIdentificator)</strong> oListofMappedPLMComponent;
  short int irecnumber = 1 ;
  while(SUCCEEDED(hr = <strong>CATPLMBatchXMLToolBox::ReadPathQueryMappingFile</strong> 
                                             (FBDIMappingXmlFile, irecnumber, 
                                              <strong>PathOrigin</strong>, <strong>oListofMappedPLMComponent</strong>)))
  {
    HRESULT HR = S_OK ;
    <strong>for</strong>(int i = 1 ; <strong>i&lt;=oListofMappedPLMComponent.Size()</strong> ; i++)
      HR = <strong>RetrieveIdentifierSet</strong>(oListofMappedPLMComponent[i]) ;
      ...
      if( <strong>S_FALSE == hr</strong> )
        <strong>break</strong>;
        irecnumber++ ; 
    }
...</pre>
<p>An interesting point to note here is that each converted PLM Component is represented 
by its database query, in the Mapping XML File. Thus the decoding of this XML by 
a call to the <code>CATPLMBatchXMLToolBox</code>::<code>ReadPathQueryMappingFile</code> 
routine actually involves running each query on the database and retrieving a list 
of <code>Identificators oListofMappedPLMComponent</code>. It also returns the path 
of the input V5 Document <code>PathOrigin</code>.</p>
<p>The <code>Identificator</code> of the PLM Component returns its Identity
<code>PLM_ExternalID</code> through the steps detailed in the <code>RetrieveIdentifierSet</code> 
routine. The Use Case &quot;<strong>Querying PLM Components by Attributes</strong>&quot; [<a href="#References">4</a>] 
details those steps further and the article &quot;<strong>PLM Component Identifier</strong>&quot; 
[<a href="#References">5</a>] gives us more insights to an <code>Identificator</code> 
of a PLM Component.</p>
<p>The argument <code>irecnumber</code> passed to this call represents the position 
of the record to decode, in the Mapping XML file. If a specific record is to be 
retrieved, user can specify its <code>irecnumber</code>. If all records are to be 
retrieved, the API call occurs within a loop as the code above depicts.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAADLCPLMBatchFBDI</code> use case ends by simply closing the PLM session. 
Since all use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic namely &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAADLCPLMBatchFBDI</code> Use Case launches the <code>FBDI</code> Batch 
process outside the official <strong>BatchMonitor</strong> environment, within the 
client code. It primarily converts a V5 Document to a list of PLM Components associated 
with it.</p>
<p>Initially a list of V5 Documents is set as an input data for the <code>FBDI</code> 
Batch processing. A <code>CATPLMBatch</code> class enables us write this data to 
a <strong>Parameters XML File</strong>, an input for the <code>FBDI</code> Batch 
processing. The Parameters XML also has other data relevant for running the batch, 
in a format as specified by the <strong>BatchInfrastructure</strong> standards.</p>
<p>The <code>FBDI</code> process finally generates an XML file which has the information 
to map each CAA V5 Document input to an associated list of converted PLM Components. 
This Mapping XML file is finally decoded to display the path of each V5 Document 
and the <code>PLM_ExternalID</code> of the each converted PLM Component.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAABatUseCases/CAABatBatchLauncherSample.htm">
		Launching a CAA V5 Batch</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">
		Querying PLM Component by Attributes</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAPlmTaCATIAdpPLMIdentificator.htm">
		PLM Component Identifier</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAADlcTaPLMBatchPrinciples.htm">Launching PLM Batch outside 
		the Batch Monitor Environment</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
