<html>
	<head>
		<title>Browsing with Modeler APIs</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

                <style type="text/css">
.style2 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
</style>

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Opening Requirement Object in Session</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This Use Case will illustrate the concept of opening a 
					Requirement Object in session. The Use Case details the steps involved in the CAA Customization to 
					open a 
					Requirement object in session using the CATAdpOpener APIs.</p>
				<ul>
							<li><A href="#Learn">What You Will Learn 
                                With This Use Case</A>
							<li><a href="#UseCase">The 
                                CAARmiOpeningRequirementObject UseCase</a>
							<ul type="disc">
								<li><a href="#What">What Does 
                                        CAARmiOpeningRequirementObject Do</a>
								<li><a href="#How">How to Launch 
								CAARmiOpeningRequirementObject
								</a>
								<li><a href="#Where">Where to Find the 
								CAARmiOpeningRequirementObject Code</a>
								</li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A>
							</li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What you will learn with this Use Case</h2>
<p>Most importantly, opening the Requirement object in session</p>
<p>Three types of Requirement objects can be opened in session</p>
<ul><li>Requirement Group</li>
	<li>Requirement Specification</li>
	<li>Requirement</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAARmiOpeningRequirementObject
        Use Case</h2>
		<p><code><a>CAARmiOpeningRequirementObject</a></code> is a use case of the 
        <code><a>CAAReqModelerUseItf.edu</a></code> framework that 
			illustrates <code>VPLMRequirementModelerItf</code> framework capabilities.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAARmiOpeningRequirementObject
        Do</h3>
<p>The input for this Use Case is a <span class="style2">Requirement</span> <code>
Model</code>&nbsp;as depicted below. </p>

<table>
	<caption><em>Fig.1 Requirement Data Model</em></caption>
	<tr>
		<td>
		<img alt="" src="images/CAARmiReqDataModel1.jpg" width="238" height="297"></td>
	</tr>
</table>

<p>It consists of a root Requirement Specification object <span class="style2">
Root_Req_Spec ---</span>.</p>
<p>The Root aggregates <span class="style2">
Chapter_X ---</span> and <span class="style2">Req_A ---</span>, the Requirement Entities.</p>
<p>These Entities in turn aggregates other Requirement Entities
<span class="style2">Comment_X1 and Comment_Main </span>of type 'Chapter', and <span class="style2">Req_X1 and SubReq_A1 </span> of type 'Requirement'.</p>
<p>The process to retrieve a PLM Component from the database, essentially 
requires two inputs</p>
<ul>
	<li>A list of IDSet attribute-values, provided as an input for UC execution</li>
	<li>PLMType to determine the Knowledge type of the Requirement reference 
	to be browsed</li>
</ul>
<p>The input PLMType is the type of the Requirement Root-object which is to be 
opened in session. The Requirement Root-object are of three types as mentioned 
above i.e. Types of the Requirement objects that can be opened in session</p>
<p>The Use Case thus retrieves an Identificator of the Requirement Root-object, in the 
underlying database.</p>
<p>It next loads it in session, in <strong>Authoring</strong> 
mode, which essentially loads in session all the Requirement Entities and 
Relations. This loading in done by using the CATAdpOpener API
<span class="style2">CompleteAndOpen()</span>. </p>
	
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAARmiOpeningRequirementObject</h3>
		<p>To launch <code>CAARmiOpeningRequirementObject</code>, you will need to set up the build time environment, 
			then compile <code>CAARmiOpeningRequirementObject<b> </b></code>along with its prerequisites, set up the run time 
			environment, and then execute the use case [<a href="#References">1</a>].&nbsp;</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a>CAARmiOpeningRequirementObject </code><a><code><i>Repository Server User Password SecurityCtx 
PLMType iAllAttributes&nbsp;IDSetAttribute1 IDSetAttributeValue1 [IDSetAttribute1* IDSetAttributeValue1* ...]</i>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script>TST</td>
  </tr>
  <tr>
    <th><b>Server</b></th>
    <td>The name and port of the server as name:port_number/RootURI</td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user identifier</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project). Choose Role as Reviewer ( as the use case does not modify the PLM Data) </td>
  </tr>
    <tr>
    <th><b>PLMType</b></th>
    <td>A String representing the PLMType For Requirement Reference: Requirement 
	Specification or Requirement (depending on the root object type)</td>
  </tr>
<tr>
    <th ><b>AllAtributes</b></th>
    <td>Yes (val=1) ,  No (val=0) </td>
  </tr>

	<tr>
    <th height="35">IDSetAttribute1*<td height="16">First Identification Set(IDSet) 
	attribute for the Requirement Reference to browse</td>
  </tr>
		
		 <tr>
    <th height="35">IDSetAttributeValue1*<td height="16">First IDSet attribute 
	value for the Requirement Reference to browse</td>
  </tr>
 
  </table>






<p align="left">* We could have several such Attribute-Value set. The count is 
determined by the IDSet attributes defined by the PLMType of the 
Requirement Reference to be browsed.</p>
<script type="text/javascript">insertLinkToTop();</script> 

<h3><a name="Where"></a>Where to Find the CAARmiOpeningRequirementObject
        Code</h3>
<p>The <code>CAARmiOpeningRequirementObject<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\</code><a><code>CAA</code></a><code>CAAReqModelerUseItf.edu\</code>
	<code>CAARmiOpeningRequirementObject.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
	 
		<p>Following are the main steps in <code><a>
		CAARmiOpeningRequirementObject </a></code>:</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
   <li><a href="#Retrieve the Functional Ref">Retrieve Requirement Reference 
	to browse from underlying database</a></li>
	<li>
	<p style="line-height: 100%; margin-top: 0"><a href="#Epilog">Epilog</a>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAARmiOpeningRequirementObject <b> </b></code>use case, to begin with, 
creates a PLM Session. Its defined by the repository to be connected to, server, 
user, password and a Security Context. The Security context primarily defines a 
role with which the user is logged into the current session. In the current Use 
Case, since it simply browses through a Requirement Model hierarchy, it does not 
involve any modification of the PLM data. The article &quot;<strong>Creating a Basic PLM Batch</strong>&quot; [<a href="#References">2</a>] 
delves further deeper into this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Retrieve the Functional Ref"></a>Retrieve the Requirement 
Specification to browse, from an underlying database</h3>
<p>To begin with, we retrieve from the underlying database, the Requirement 
Specification for browsing. The query to an underlying database for a PLM Component is 
built with primarily two inputs</p>
<ul>
	<li>An attribute-value list </li>
	<li>The PLMType of the PLM Component being queried</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Build an IDSet"></a>Build an Identification Attribute-Value set</h4>
<p>A PLM Type essentially defines a set of attributes, to uniquely identify it 
in the underlying database. These are referred to as IDSet attributes. A list of 
such attribute-value set, combined with the PLM Type uniquely identifies a PLM 
Component in the underlying database. This list is one of the inputs for the 
database query. The list is built, as depicted by the code extract below</p>
<pre class="code">
CATListOfCATString iListAttributeName ;
CATListOfCATUnicodeString iListAttributeValue ;

for (int AttrIndex=8; AttrIndex &lt;= (8+((NbAttributes-1)*2)); AttrIndex++)
  {
    const CATString Attribute =  CATCkePLMNavPublicServices::RetrieveBasicAttributeNameFromPreviousOne(NULL_var,iArgv[AttrIndex]).CastToCharPtr();
    cout &lt;&lt; "The attribute name  is " &lt;&lt; Attribute.CastToCharPtr() &lt;&lt; endl;
    iListAttributeName.Append(Attribute); 		
    const CATUnicodeString Value(iArgv[AttrIndex+1]);
    cout &lt;&lt; "The attribute value is " &lt;&lt; Value.ConvertToChar() &lt;&lt; endl;
    iListAttributeValue.Append(Value);
    // Attribute names occur alternatively in the input arguments
    // So we need to jump two steps each time for each iteration of this loop
     AttrIndex++;
}

</pre>
<p>An attribute-value set are built with user inputs. The count 
of the attribute-value set is defined by the PLMType of the Requirement Reference 
to browse. </p>
<script type="text/javascript">insertLinkToTop();</script>

<h4><a name="Run Query"></a>Run Query and Retrieve Requirement Reference from the Underlying Database</h4>
<p>At this stage, we have with us the inputs (PLMType and the  
attribute-value sets) which together define our database query. The query 
enables us retrieve an Identificator of a PLM Component, conforming to the 
search criteria, defined by the query. We then load this Component in session.</p>
<pre class="code">...
              
   CATIAdpPLMIdentificator* opiIDComp = NULL;
   hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				    istrPLMType,opiIDComp);
   ...
   hr= opener.CompleteAndOpen(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;piFunctRef);
...</pre>
<p>It next loads the Requirement Entities in session, which essentially loads in session all the 
Requirement Entities and Relations. </p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAARmiOpeningRequirementObject  </code>use case ends by simply closing 
the PLM session. [<a href="#References">2</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case <code>CAARmiOpeningRequirementObject<b> </b></code>details the 
steps involved in the CAA Customization to open a Requirement Root object in 
session using the CATAdpOpener API. This Use-case illustrates only loading of a 
Requirement Specification object. You may also try to load in all the three 
different types of Requirement Root-object</p>
<p>The Use Case thus retrieves an Identificator of the Requirement Root Reference, in the 
underlying database. It next loads it in session, in <strong>Authoring</strong> 
mode, which essentially loads in session all the Requirement Entities and 
Relations</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td >[1]</td>
				<td ><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
						and Launching a CAA Use Case</A></td>
			</tr>
			<tr>
				<td >[2]</td>
				<td >
                <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
                Creating a PLM Basic Batch</a></td>
			</tr>
			<tr>
				<td >[3]</td>
				<td >
                <a href="CAARmiTaReqModelerOverview.htm">Requirement Modeler Overview</a></td>
			</tr>

			
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Feb 2013]&nbsp;&nbsp; </td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<!---------------------------------comment------------------------------------->
		  <script type="text/javascript">insertCopyright();</script>
	</body>
</html>


