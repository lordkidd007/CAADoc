<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Browsing a Library Model</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Library Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the <code>CAACLGBrowsingLibraryModel<strong> </strong>
		</code>use case. The Use Case details the steps involved in order to browse 
		a Catalog(Library) Model .</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAACLGBrowsingLibraryModel Use Case</a>
			<ul>
				<li><a href="#What">What does the CAACLGBrowsingLibraryModel Do</a></li>
				<li><a href="#How">How to launch CAACLGBrowsingLibraryModel</a></li>
				<li><a href="#Where">Where to find the CAACLGBrowsingLibraryModel 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
 </td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns the CAA Exposed services to browse a Catalog(referred to as Library 
hereafter) for the Chapters(referred to as Classes hereafter) contained within. 
Further one can browse a chapter for the subchapters and items contained within. 
Finally one can retrieve the type of the entity that an item points to.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACLGBrowsingLibraryModel UseCase</h2>
<p><code>CAACLGBrowsingLibraryModel </code>is a use case of the <code>CAALibraryNavUseItf.edu</code> 
framework that illustrates the <code>PLMLibraryNavUseItf </code>framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACLGBrowsingLibraryModel Do</h3>
<p>The input for this Use Case is a <code>Library Model</code> as depicted in [<a href="#Fig.1">Fig.1</a>] 
below. </p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 Input Library Model</caption>
	<tr>
		<td><img alt="Input Library Model" src="images/CAABrowsingLibraryModel_Fig1.jpg"></td>
	</tr>
</table>
<p>As depicted in the [<a href="#Fig.1">Fig.1</a>] above, the input model consists 
of a root Library <code>CAACLGBrowsingLibraryModel_Lib---</code>.</p>
<p>The Root aggregates <code>ChildClass_1</code>, a Class beneath it.&nbsp; </p>
<p>This Class <code>ChildClass_1</code> in turn aggregates <code>SubChildClass_1
</code>(a Class) and <code>ChildClassItem_1 </code>(an item) under it.</p>
<p>This sub-class <code>SubChildClass_1</code> in turn aggregates an Item <code>
SubChildClassItem_1</code> under it.</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2 Library Model Browse Output</caption>
	<tr>
		<td><img alt="Library Model Browse Output" src="images/CAABrowsingLibraryModel_Fig2.jpg"></td>
	</tr>
</table>
<p>The Use Case browses our input model and outputs its hierarchy as depicted in 
[<a href="#Fig.2">Fig.2</a>] above. The model appears exactly similar to the way 
it is represented in the spec tree . </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALmiBrowseLibraryModel</h3>
<p>To launch <code>CAACLGBrowsingLibraryModel</code>, you will need to set up the 
build time environment, then compile <code>CAACLGBrowsingLibraryModel<strong> </strong>
</code>along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAACLGBrowsingLibraryModel Repository Server User Password 
SecurityCtx PLMType IDAttribute1 AttrValue1 [IDAttribute2 Value2 ...] <strong>&quot;</strong></code>
</p>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as <em>name</em>:<em>port_number\RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role. Organization. Project).
		Choose Role as Reviewer ( as the use case does not modify the PLM 
		Data)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type</td>
	</tr>

	<tr>
		<th>IDAttribute1*</th>
		<td>IDSet attribute Name for the Library to be opened</td>
	</tr>
	<tr>
		<th>AttrValue1*</th>
		<td>Attribute Value for the Library to be opened</td>
	</tr>
</table>
<p>* We could have several such Attribute-Value set. The count is determined by 
the IDSet attributes defined by the usable custo type of the PLM Component browsed</p>
<p>You can directly execute this use case if you know how to locate your own component, 
i.e. its PLM environment, modeler, type and its ID Set attributes. If not, you can 
import a 3D XML file supplied in the CAALibraryNavUseItf.edu framework .The input 
Library model is retrieved by importing <code>CAACLGBrowsingLibraryModel</code>.<a><code>3dxml</code></a> 
file from the <a><code>CAALibraryNavUseItf.edu</code></a> framework.</p>
<p><code>InstallRootFolder\CAADoc\CAALibraryNavUseItf.edu\InputData\CAACLGBrowsingLibraryModel.3dxml</code></p>
<p>where <code>InstallRootFolder</code>[<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Library with the following attributes:</p>
<ul>
	<li><a><code>PLM_ExternalID</code></a>: CAACLGBrowsingLibraryModel_Lib</li>
	<li><a><code>Version</code></a>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACLGBrowsingLibraryModel Code</h3>
<p>The <a><code>CAACLGBrowsingLibraryModel</code></a> use case is located in the
<a><code>CAACLGBrowsingLibraryModel.m</code></a> module of the <a><code>CAALibraryNavUseItf.edu</code></a> 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALibraryNavUseItf.edu\CAACLGBrowsingLibraryModel.m</code></p>
<p>where <code><a>InstallRootFolder</code></a> [<a href="#References">1</a>] 
is the foler where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><a>CAACLGBrowsingLibraryModel</a></code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Retrieve the Library">Retrieve the Library to browse from underlying 
	database</a> </li>
	<li><a href="#GetLibrary">Load the Library in session </a></li>
	<li><a href="#Browse the Library">Browse the Library</a></li>
	<li><a href="#Browse a Class">Browse a Class</a></li>
	<li><a href="#Browse an Item">Browse an Item</a></li>
	<li><a href="#Epilog">Epilog</a> </li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog </h3>
<p>The <code>CAACLGBrowsingLibraryModel<strong> </strong></code>use case, to begin with, creates 
a PLM Session. Its defined by the repository to be connected to, server, user, password 
and a Security Context. The Security context primarily defines a role with which 
the user is logged into the current session. In the current Use Case, since it simply 
browses through a Library Model hierarchy, it does not involve any modification 
of the PLM data. So a Reviewer role serves our purpose in this case. The article 
&quot;<strong>Creating a Basic PLM Batch</strong>&quot; [2] delves further deeper into this 
subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the Library"></a>Retrieve the Library to browse from underlying 
database</h3>
<p>To begin with, we retrieve from the underlying database, the Library to be opened.</p>
<p>This step can be divided into the following three sub-steps:</p>
<ol>
	<li>Build an Attribute-Value set </li>
	<li>Run Query and retrieve the Identificator of the Library from the underlying 
	database</li>
</ol>
<p>The implementation details of Retrieving the Identificator of the PLM Object 
providing its ID Set as an input , is described in the article [<a href="#References">4</a>].</p>
<p>The Library identificator (retrieved in this section) is further used to open 
the Library, whose implementation details are described in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="GetLibrary"></a>Load the Library in session </h3>
<p>Here, we use the identificator (retrieved in previous section) to load the Library 
in session, using <code>PLMCLGPublicLibraryNavServices::GetLibrary</code> API.</p>
<pre class="code">
...
	CATIAdpPLMIdentificator* oIdentifier = NULL;
	...
	PLMICLGLibrary *oLibrary=NULL;
	<strong>hr= PLMCLGPublicLibraryNavServices::GetLibrary(oIdentifier, oLibrary);
</strong>...</pre>
<p>The call to <code>PLMCLGPublicLibraryNavServices::GetLibrary</code> takes the 
identificator(of the PLM Object to be opened) as an input argument and provide the 
opened Library object, <strong>oLibrary</strong>(in form of <em>PLMICLGLibrary *</em>) 
as an output argument. The Library object opened here is further used to browse 
in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Browse the Library"></a>Browse the Library</h3>
<pre class="code">
...
	<strong>hr = BrowseLibrary(oLibrary);</strong>
...
</pre>
<p>Here, we retrieve the name of the root Library and all the Child Classes&nbsp; 
present immediately under it.</p>
<p>Let us have a look at the implementation of the method <code>BrowseLibrary</code>.</p>
<pre class="code">
...
<strong>HRESULT BrowseLibrary(PLMICLGLibrary *&amp;oLibrary)</strong>
{
	CATUnicodeString oName(&quot;&quot;);
	<strong>hr= oLibrary-&gt;GetName (oName);</strong>
	if (SUCCEEDED(hr)) 
	{
	  CATListPtrPLMICLGClass oClasslist_openedLib;
	  <strong>hr= oLibrary-&gt;ListClasses(oClasslist_openedLib);</strong>
	  ...
	  while (j&lt;=oClasslist_openedLib.Size() &amp;&amp; SUCCEEDED(hr))
	  {
	      hr = <strong>BrowseClass</strong>(oClasslist_openedLib[j], 1);
	      ...
	  }
	  ...
	}
}</pre>
<p>As depicted in the code extract above, we make a call to the <code>GetName</code> 
and <code>ListClasses</code> on the Library object (retrieved in previous section 
[<a href="#GetLibrary">#</a>]).</p>
<p>The <code>PLMICLGLibrary::GetName()</code> implementation on a Library to retrieve 
the name of the Library.</p>
<p>The <code>PLMICLGLibrary::ListClasses()</code> implementation on a Library to 
list the child Classes present immediately beneath it.</p>
<p>Next, we make a call to the subroutine namely: <code>BrowseClass</code>() for 
all the child classes (present immediately beneath Library).</p>
<p>The method <code>BrowseClass</code>() is meant to retrieve the sub-classes and 
the items present under a Class.</p>
<p>Let us have a look at the implementation of the method <code>BrowseClass</code>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Browse a Class"></a>Browse a Class</h3>
<p>Here , we retrieve the sub-classes and the items present under a Class. 
So browsing the class is effectively a recursive process, since a class contains 
sub classes and items beneath it.</p>
<pre class="code"><strong>HRESULT BrowseClass(PLMICLGClass* &amp;ipiClass, int iDepth)</strong>
{
     ...	
     CATUnicodeString oName_Class=&quot;&quot;;
     <strong>hr= ipiClass-&gt;GetName(oName_Class);</strong>
     if (SUCCEEDED(hr)) 
     {
         ...
     <strong>   hr= BrowseItems(ipiClass,iDepth);</strong>
        if (SUCCEEDED(hr)) 
        {
           ...	
           CATListPtrPLMICLGClass osubClasseslist;
     <strong>      hr= ipiClass-&gt;ListClasses(osubClasseslist);</strong>
     	  int j=1;
     	  while (j&lt;=osubClasseslist.Size() &amp;&amp; SUCCEEDED(hr))
     	  {						
	      <strong>hr = BrowseClass(osubClasseslist[j], iDepth++);</strong>
	      j++;
     	  }	
 	  ...
        }
     }  
    ...  	
}</pre>
<p>The method <code>BrowseItems</code> is called to browse the immediate items present 
under the Class.</p>
<p>The <code>PLMICLGClass::ListClasses()</code> implementation on a Class , returns 
a list of direct child Sub-Classes beneath it .</p>
<p>What follows is a recursive call to the same subroutine namely: <code>BrowseClass()</code>,
with the Class(present beneath Library ) or the Sub-Class( present beneath a Child 
Class), as an input argument.</p>
<p>Let us have a look at the implementation of the method <code>BrowseItems</code>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Browse an Item"></a>Browse an Item</h3>
<pre class="code">
<strong>HRESULT BrowseItems(PLMICLGClass* &amp;ipiClass, int iDepth)</strong>
{	
     ...
     CATListPtrPLMICLGItem oItemList;
     <strong>hr= ipiClass-&gt;ListItems(oItemList);</strong>
     int j=1;
     while (j&lt;=oItemList.Size() &amp;&amp; SUCCEEDED(hr))
     {
	PLMICLGItem *piItem = oItemList[j];
	if(NULL!=piItem) 
	{		
	   CATUnicodeString oName=&quot;&quot;;
	<strong>   hr= piItem-&gt;GetName(oName);</strong>
	   if (SUCCEEDED(hr)) 
	   {		
	       PLMICLGItem::ItemType oType;
	<strong>       hr= piItem-&gt;GetItemType(oType);</strong>
	   }
	   ...		
	   j++;
         }
     }   
     ...
}
		</pre>
<p>The <code>PLMICLGClass::ListItems()</code> implementation on a Class , returns 
a list of direct Items beneath it .</p>
<p>The <code>PLMICLGItem::GetItemType()</code> implementation on a Item to retrieve 
the type of pointed item .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAACLGBrowsingLibraryModel </code>use case ends by simply closing the 
PLM session [<a href="#References">2</a>]. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In the Use Case <code>CAACLGBrowsingLibraryModel</code>, a Library is browsed 
using the services exposed by the interfaces belonging to the <code>PLMLibraryNavUseItf</code>
framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">Querying a PLM Object With Attribute Set</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Opening PLM Reference with various Expand Modes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2010]</td>
		<td>Document created</td>
	</tr>
	<tr>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
</tr>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
