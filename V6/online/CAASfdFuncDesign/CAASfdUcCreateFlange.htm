<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating SFD Flange</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating SFD Flange</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATStrUseItf use case. This use case 
		explains how to Create Flange.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASfdCreateFlange Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASfdCreateFlange Do</a></li>
				<li><a href="#How">How to Launch CAASfdCreateFlange</a></li>
				<li><a href="#Where">Where to Find the CAASfdCreateFlange 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming with 
CATIA SFD(Structure Functional Design) Interfaces. Its main intent is to create SFD flange.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASfdCreateFlange Use Case</h2>
<p>CAASfdCreateFlange.m is a use case of the CAAStructureFuncDesignDoc.edu framework 
that illustrates the CATIA SFD Interfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASfdCreateFlange Do</h3>
<p>The goal of CAASfdCreateFlange use case is to show how to create flange.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASfdCreateFlange</h3>
<p>To launch CAASfdCreateFlange, you will need to set up the build time 
environment, then compile CAASfdCreateFlange along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot; CAASfdCreateFlange Repository Server User Password SecutityCtx Environment PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
		reference containing the data to create the user feature reference.</td>
	</tr>
</table>
<p>* The input model is retrieved by importing the <strong>CAASfdCreateFlange.3dxml</strong>
    file from the  <strong>CAAStructureFuncDesign.edu</strong> framework.
</p>
<p>
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\InputData\CAASfdCGR.3dxml</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\InputData\CAASfdSR.3dxml</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\InputData\CAASfdSteel_A90.3dxml</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\InputData\CAASddWT18x179_5.3dxml</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureFuncDesign.edu\InputData\CAASfdCreateFlange.3dxml</code>
</p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>SFD_Flange</code></li>
  <li><a><code><strong>Version</strong></code></a>:
    ---</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASfdCreateFlange Code</h3>
<p>The CAASfdCreateFlange sample is made of a single class named CAASfdCreateFlange 
located in the CAASfdCreateFlange.m module of the CAAStructureFuncDesign.edu 
framework: <code>InstallRootFolder\CAADoc\CAAStructureFuncDesign.edu\CAASfdCreateFlange.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CATPLMSessionServices</em></td>
		<td>Class to create and delete a batch session.</td>
	</tr>
	<tr>
		<td><em>PLMPSISessionHelpers</em></td>
		<td>Class managing session data for the creation of PLM entities.</td>
	</tr>
	<tr>
		<td><em>CATAdpDictionaryServices</em></td>
		<td>Class to provide all basic functions to browse and navigate on PLM dictionaries.</td>
	</tr>
	<tr>
		<td><em>CATAdpQueryServices</em></td>
		<td>Class to manage queries on PLM component in database.</td>
	</tr>
	<tr>
		<td><em>CATAdpOpenSaveServices</em></td>
		<td>Class to manage Open and Save in session.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseFlangeMngt</em></td>
		<td>Interface to manage Flange.</td>
	</tr>
	<tr>
		<td><em>CATIStrUsePlateServices</em></td>
		<td>Interface to get free edges of plate.</td>
	</tr>
	<tr>
		<td><em>CATIRfgUsePart</em></td>
		<td>Interface to get plane systems.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseFlange</em></td>
		<td>Interface to create flange.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the environment and it&#8217;s components creation 
by looking at the code of the Main. There are 18 logical steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Setting the Connection Parameters</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating a Session</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Setting the Current Environment to &quot;envToUse&quot; 
		from Input</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Retrieving the Environment</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Retrieving the Customized Reference of the Product 
		Modeler</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Opening the &quot;SFD_Flange&quot; Model (arg[7])</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Opening the Product</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Getting the CATIMmiPrtContainer and Part from It</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Retrieving &quot;Deck_2&quot;</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Getting Existing Plate "Deck_2.1"</a></td>
	</tr>
	<tr>
		<td>12</td>
		<td><a href="#Step12">Getting Flange Mngt from Plate and Adding Flange on It</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Calling CreateFlange</a></td>
	</tr>
	
	<tr>
	<td>14</td>
		<td><a href="#Step14">Retrieving the Flanges</a></td>
	</tr>
	
	<tr>
	<td>15</td>
		<td><a href="#Step15">Removing the Flange</a></td>
	</tr>
	
	<tr>
	<td>16</td>
		<td><a href="#Step16">Updating Flange</a></td>
	</tr>
	
	<tr>
	<td>17</td>
		<td><a href="#Step17">Saving Created Flanges</a></td>
	</tr>

	<tr>
		<td>18</td>
		<td><a href="#Step18">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
 if (8 != argc)
 {
  cout &lt;&lt; endl;
  cout &lt;&lt;&quot;CAASfdCreateFlange &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Environment&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
  cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
  cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Environment: A PLM environment containing PLMProductDS (a PRODUCT's custo).&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  goto EscapeWay;
 }

 //------------------------------------------------------------------
 // - For Setting Environment
 //------------------------------------------------------------------ 
  envToUse = argv[6];

 //------------------------------------------------------------------
 // - For Setting Repository
 //------------------------------------------------------------------ 
  repository = argv[1];
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Connection Parameters</h3>
<p>Connection Parameters initialization.</p>
<pre class="code">...
  hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;Repository&quot;, argv[1]);
  if (FAILED(hr))
   {
    retCode = 2;
    goto EscapeWay;
   }

 hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;Server&quot;, argv[2]);
 if (FAILED(hr))
  { 
   retCode = 3;
   goto EscapeWay;
  }

 hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;UserID&quot;, argv[3]);
 if (FAILED(hr))
 { 
  retCode = 4;
  goto EscapeWay;
 }

 hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;UserPasswd&quot;, argv[4]);
 if (FAILED(hr))
 {
  retCode = 5;
  goto EscapeWay;
 }

 hr = CATPLMSessionServices::SetPLMSessionParameter(&quot;SecurityCtx&quot;, argv[5]);
 if (FAILED(hr))
 {
  retCode = 6;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Session</h3>
<p>A session must always be created in a batch environment.</p>
<pre class="code">...
 hr = CATPLMSessionServices::InitPLMSession();
 if (FAILED(hr))
 {
  retCode = 7;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting the Current Environment to &quot;envToUse&quot; from 
Input</h3>
<pre class="code">...
 hr = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
 if (SUCCEEDED(hr) &amp;&amp; (NULL != pSessionHelpers))
 {
  hr = pSessionHelpers-&gt; SetCurrentEnvironment(envToUse);
  if ( FAILED(hr) )
  {
   retCode = 8;
   goto EscapeWay;
  }
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Environment</h3>
<pre class="code">...
 hr = CATAdpDictionaryServices::GetEnvironment(repository, envToUse, &amp;pIAdpEnvironment);
 if ( FAILED(hr) || ( NULL == pIAdpEnvironment) )
 {
  retCode = 9;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Customized Reference of the Product Modeler</h3>
<pre class="code">...
 hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", hTypeModeler);
 if( ( FAILED(hr) || (NULL_var == hTypeModeler) ) )
 {
  retCode = 10;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Opening the &quot;SFD_Flange&quot; Model (arg[7])</h3>
<pre class="code">...
 attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;,argv[7]);
 hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler,
                                                       attributeSet,
                                                       ListP_QueryResults) ;

 if(1 &lt;= ListP_QueryResults.Size())
 {
   pQueryResult = ListP_QueryResults[1] ;
   if(NULL != pQueryResult)
   {
    hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
   }
 }
 if ( (FAILED(hr)) || (NULL == pIPLMIdent) )
 {
  retCode = 11;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Opening the Product</h3>
<pre class="code">...
 hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMProducts, (void**)&amp;pIPLMProduct);
 if ( (FAILED(hr)) || (NULL == pIPLMProduct) )
 {
  retCode = 12;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Getting the CATIMmiPrtContainer and Part from It</h3>
<pre class="code">...
  hr  =  SwitchToDesignModeAndReturnPartContainer(pIPLMProduct,pIPrtCont,pPlatePart);  
  if((NULL == pIPrtCont) || (NULL == pPlatePart)) 
  {  
    retCode  =  13;  
    goto  EscapeWay;  
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Retrieving "Deck_2"</h3>
<pre class="code">...
  hr = GetPartObj(pPlatePart,"Deck_2", spSfdPanel);
  if(NULL_var == spSfdPanel)  
  {  
    retCode = 14;  
    goto EscapeWay;  
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Getting Existing Plate "Deck_2.1"</h3>
<pre class="code">...
 spStrUseNav = spSfdPanel;
 if(NULL_var == spStrUseNav)  
 {  
   retCode = 15;  
   goto EscapeWay;  
 }	
  
 spStrUseNav-&gt;GetChildren(spListOfChildren);
 if(NULL_var == spListOfChildren[1])
 {
  retCode = 16;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Getting Flange Mngt from Plate and Adding Flange on It</h3>
<pre class="code">...
 spStrFlangeMngt = spListOfChildren[1];
 if(NULL_var == spStrFlangeMngt)  
 {  
  retCode = 17;  
  goto EscapeWay;  
 }
  
 hr = spStrFlangeMngt-&gt;AddFlange(spMechFeatFlange);  
 if(NULL_var == spMechFeatFlange)  
 {  
  retCode = 18;  
  goto EscapeWay;  
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Calling CreateFlange</h3>
<pre class="code">...
 spFlange = spMechFeatFlange;
 if(NULL_var == spFlange)  
 {  
  retCode = 19;  
  goto EscapeWay;  
 }
 ReturnCode = CreateFlange(spFlange, pPlatePart);
 if((ReturnCode)!=0)
 {
  retCode = ReturnCode;
  goto EscapeWay;
 }
...</pre>

<p>SetType/GetType: 
Sets and gets the Type of conversion for flange resp. 1- catStrFlangeCentered, 2- catStrFlangeTangent</p>
<p>SetFlangeStartLimit/GetFlangeStartLimit: 
Set and get the Flange Start Limit resp.</p>
<p>SetFlangeEndLimit/GetFlangeEndLimit: 
Set and get the Flange End Limit resp.</p>
<p>SetWidthMeasurementType/GetWidthMeasurementType: 
Set and get the Width Measurement Type resp. 1- catStrFlangeWidthToInnerFace, 2- catStrFlangeWidthToOuterFace, 3- catStrFlangeWidthToNeutralFibre</p>
<p>GetOperatedPlate: 
Get the operated Plate.</p>
<p>GetBendingAngle: 
Get the Bending Angle and valuate it.</p>
<p>GetBendingRadius: 
Get the Bending Radius and valuate it.</p>
<p>GetFlangeWidth: 
Get the Flange Width and valuate it.</p>
<p>GetStartEndCutOffset: 
Get the Start EndCut Offset and valuate it.</p>
<p>GetEndEndCutOffset: 
Get the End EndCut Offset and valuate it.</p>
<p>GetStartEndCutRadius: 
Get the Start EndCut Radius and valuate it.</p>
<p>GetEndEndCutRadius: 
Get the End EndCut Radius and valuate it.</p>
<p>GetStartEndCutDistance: 
Get the Start EndCut Distance and valuate it.</p>
<p>GetEndEndCutDistance: 
Get the End EndCut Distance and valuate it.</p>
<p>GetStartEndCutAngle:
Get the Start EndCut Angle and valuate it.</p>
<p>GetEndEndCutAngle: 
Get the End EndCut Angle and valuate it.</p>
<p>SetEdges: 
Set the Edges on which flanges to be created.</p>
<p>GetEdge: 
Get the Edge of Plate.</p>
<pre class="code">...
CreateFlange(CATIStrUseFlange_var &amp;ispStrUseFlange, CATIMmiUsePrtPart *&amp;ipPlatePart )
{
 if(!!ispStrUseFlange)  
    {
     CATIMmiMechanicalFeature_var spOperatedPlate = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetOperatedPlate</strong>(spOperatedPlate);
     if(NULL_var == spOperatedPlate)
     {
      ReturnCode = 20;
     }
				
     CATICkeParm_var spBendingAngle = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetBendingAngle</strong>(spBendingAngle);
     CATUnicodeString sValue = "120deg";
     spBendingAngle-&gt;Valuate(sValue);
		
     CATICkeParm_var spBendingRadius = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetBendingRadius</strong>(spBendingRadius);
     sValue = "50mm";
     spBendingRadius-&gt;Valuate(sValue);
		
     CATICkeParm_var spFlangeWidth = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetFlangeWidth</strong>(spFlangeWidth);
     sValue = "500mm";
     spFlangeWidth-&gt;Valuate(sValue);
		
     CATICkeParm_var spStartEndCutOffset = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetStartEndCutOffset</strong>(spStartEndCutOffset);
     sValue = "0mm";
     spStartEndCutOffset-&gt;Valuate(sValue);
		
     CATICkeParm_var spEndEndCutOffset = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetEndEndCutOffset</strong>(spEndEndCutOffset);
     sValue = "0mm";
     spEndEndCutOffset-&gt;Valuate(sValue);
		
     CATICkeParm_var spStartEndCutRadius = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetStartEndCutRadius</strong>(spStartEndCutRadius);
     sValue = "50mm";
     spStartEndCutRadius-&gt;Valuate(sValue);
		
     CATICkeParm_var spEndEndCutRadius = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetEndEndCutRadius</strong>(spEndEndCutRadius);
     sValue = "50mm";
     spEndEndCutRadius-&gt;Valuate(sValue);
		
     CATICkeParm_var spStartEndCutDistance = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetStartEndCutDistance</strong>(spStartEndCutDistance);
     sValue = "50mm";
     spStartEndCutDistance-&gt;Valuate(sValue);
		
     CATICkeParm_var spEndEndCutDistance = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetEndEndCutDistance</strong>(spEndEndCutDistance);
     sValue = "50mm";
     spEndEndCutDistance-&gt;Valuate(sValue);
		
     CATICkeParm_var spStartEndCutAngle = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetStartEndCutAngle</strong>(spStartEndCutAngle);
     sValue = "60deg";
     spStartEndCutAngle-&gt;Valuate(sValue);
		
     CATICkeParm_var spEndEndCutAngle = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetEndEndCutAngle</strong>(spEndEndCutAngle);
     sValue = "60deg";
     spEndEndCutAngle-&gt;Valuate(sValue);
		
     hr = ispStrUseFlange-&gt;<strong>SetType</strong>(catStrFlangeCentered);
     if(!SUCCEEDED(hr))
     {
      ReturnCode = 21;
     }
			
     CATStrFlangeType oType;
     hr = ispStrUseFlange-&gt;<strong>GetType</strong>(oType);
     if(NULL == oType)
     {
      ReturnCode = 22;
     }
				
     hr = ispStrUseFlange-&gt;<strong>SetWidthMeasurementType</strong>(catStrFlangeWidthToInnerFace);
     if(!SUCCEEDED(hr))
     {
      ReturnCode = 23;
     }
			
     CATStrFlangeWidthMeasurementType oFlangeWidthMeasurementType;
     hr = ispStrUseFlange-&gt;<strong>GetWidthMeasurementType</strong>(oFlangeWidthMeasurementType);
     if(NULL == oFlangeWidthMeasurementType)
     {
      ReturnCode = 24;
     }
				
     CATLISTV(CATBaseUnknown_var) oListOfFreeEdges;
     CATLISTV(CATIMmiMechanicalFeature_var) spListOfFreeEdgesLimits;
     CATIStrUsePlateServices_var spStrUsePlateServices = spOperatedPlate;
     hr = spStrUsePlateServices-&gt;GetFreeEdges(oListOfFreeEdges, spListOfFreeEdgesLimits);
     CATLISTV(CATIMmiMechanicalFeature_var) spListOfLimits;
     if(spListOfFreeEdgesLimits.Size()&gt;0)
     {
      spListOfLimits.Append(spListOfFreeEdgesLimits[1]);
      //spListOfLimits.Append(spListOfFreeEdgesLimits[3]);
      hr = ispStrUseFlange-&gt;<strong>SetEdges</strong>(spListOfLimits);
     }
     if(!SUCCEEDED(hr))
     {
      ReturnCode = 25;
     }
		
     CATIMmiMechanicalFeature_var spEdgeIndex = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetEdge</strong>(spEdgeIndex);
     if(NULL_var == spEdgeIndex)
     {
      ReturnCode = 26;
     }
		
     CATIMmiMechanicalFeature_var ospFlangeStartLimit = NULL_var;
     GetReferenceObject("CROSS", 30, ospFlangeStartLimit, ipPlatePart);
     hr = ispStrUseFlange-&gt;<strong>SetFlangeStartLimit</strong>(ospFlangeStartLimit);
     if(!SUCCEEDED(hr))
     {
      ReturnCode = 27;
     }
		
     CATIMmiMechanicalFeature_var spFlangeStartLimit_1 = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetFlangeStartLimit</strong>(spFlangeStartLimit_1);
     if(NULL_var == spFlangeStartLimit_1)
     {
      ReturnCode = 28;
     }
		
     CATIMmiMechanicalFeature_var ospFlangeEndLimit = NULL_var;
     GetReferenceObject("CROSS", 60, ospFlangeEndLimit, ipPlatePart);
     hr = ispStrUseFlange-&gt;<strong>SetFlangeEndLimit</strong>(ospFlangeEndLimit);
     if(!SUCCEEDED(hr))
     {
      ReturnCode = 29;
     }
		
     CATIMmiMechanicalFeature_var spFlangeEndLimit_1 = NULL_var;
     hr = ispStrUseFlange-&gt;<strong>GetFlangeEndLimit</strong>(spFlangeEndLimit_1);
     if(NULL_var == spFlangeEndLimit_1)
     {
      ReturnCode = 30;
     }
    }
 return ReturnCode;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Retrieving the Flanges</h3>
<pre class="code">...
 hr = spStrFlangeMngt-&gt;GetFlanges(spListOfFlanges);  
 if(!SUCCEEDED(hr))
 {
  retCode = 31;
  goto EscapeWay;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Removing the Flange</h3>
<pre class="code">...
 hr = spStrFlangeMngt-&gt;RemoveFlange(spMechFeatFlange);
 if(NULL_var == spMechFeatFlange)  
 {  
  retCode = 32;  
  goto EscapeWay;  
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Updating Flange</h3>
<pre class="code">...
 hr = spFlange-&gt;Update();
 if(FAILED(hr))  
 {  
  retCode = 33;  
  goto EscapeWay;  
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Saving Created Flanges</h3>
<pre class="code">...
 hr = adpSaver.Save();
 if(FAILED(hr))  
 {  
  retCode = 34;  
  goto EscapeWay;  
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Disconnecting and Deleting the Session</h3>
<pre class="code">...
 hr = CATPLMSessionServices::ClosePLMSession();
 if (FAILED(hr)) 
 {
  cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
  retCode = 35;
 }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create sfd flange.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>



