<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Exporting FE data</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Exporting FE data</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to export FE data into your own format.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASimRepExporter Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASimRepExporter Do</a></li>
				<li><a href="#How">How to Launch CAASimRepExporter </a></li>
				<li><a href="#Where">Where to Find the CAASimRepExporter Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to export a FEM representation using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASimRepExporter Use Case</h2>
<p>CAASimRepExporter is a use case of the <code>CAASimRepExtend.edu</code> framework that illustrates 
<code>CATSimRepInterfaces</code> framework capabilities regarding export.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASimRepExporter Do?</h3>
<p>CAASimRepExporter export the nodes and elements contained into the FEMRep.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a product has one 3D parts and one FEM representation.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASimExporter 
	Product Model</caption>
	<tr>
		<td><img src="images/CAASimExporter001.jpg"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASimRepExporter</h3>
<p>To launch CAASimRepExporter, you will need to set up the build time 
environment, then compile CAASimRepExporter.m along with its prerequisites, set 
up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASimRepExporter Repository Server User Password SecurityCtx 
PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires input PLM Data: PLM reference and PLM Representation Reference. This data is stored in 3D XML Files, whose extension is &quot;3dxml&quot;. 
You must import these PLM Data in the database using the PLM Access / Import As 3D XML command prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>CAASimRepExtend.edu\CAASimRepExtendEduRsc.m\src\resources\CAASimRepExporter.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASimRepExporter Code</h3>
<p>The CAASimRepExporter use case is made of two source files named CAASimRepExporter.cpp and CATSimManagerSIMExporterCAA.cpp located in the CAASimRepExporter.m 
module of the CAASimRepExtend.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASimRepExtend.edu\CAASimRepExporter.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAASimRepExporter:</p>
<ol>
	<li><a href="#Step1">Creating PLM Session</a></li>
	<li><a href="#Step2">Opening the input product</a></li>
	<li><a href="#Step3">Retrieving the FEM Rep Manager</a></li>
	<li><a href="#Step4">Exporting the FEM Rep manager</a></li>
	<li><a href="#Step5">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating PLM Session</h3>
<p>To create a PLM session, you should use services from the <code>CAAPLMClientAdapter.edu</code> 
framework.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);
...
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the input product</h3>
<p>To open the product test model, you should use services from the <code>CAAPLMClientAdapter.edu</code> framework.<br/>
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMRepInstances * piRepInstances = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n, IID_CATIPLMRepInstances, (void **) &amp;piRepInstances, Bag, authoringMode);	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article "Connecting to V6 Server"[<a href="#References">2</a>]</p>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the FEM Rep Manager</h3>
<p>To retrieve the FEM Rep manager, you should iterate on each representation instances and stop on the first FEM representation found.
You can use <code>CATFmtRepManagerServices::IsAFEMRep</code> service to identify if the representation instance is a finite element representation.</p>
<pre class="code">...
CATIFmtRepManager * pRepManager = NULL;
CATIPrdIterator * pIter = NULL;
piRepInstances -&gt; Iterator ( pIter );
if ( pIter )
{
    CATBaseUnknown_var nextRep;
    while ( SUCCEEDED ( pIter -&gt; Next ( nextRep ) ) )
    {
        if ( CATFmtRepManagerServices::IsAFEMRep( nextRep ) )
        {
            pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATIFmtRepManager);
            break;
        }
    }
    pIter-&gt;Release(); pIter = NULL;
}
...
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Exporting the FEM Rep manager</h3>
<p>First, before calling the exporter, you should define the path and the units of the export. To define the units for the export,
a new instance of the <code>CATFmtUnitsConverter</code> class needs to be created. In the case of the export, the <code>SetBaseMagnitudesUnits</code>
method defines the units on which you want to retrieve the value. List of all allowable units are documented within the technical article "List 
of Available Magnitudes" [<a href="#References">3</a>]</p>
<pre class="code">...
<span class="comment">//Define the output file path</span>
char * path = NULL;
CATGetEnvValue("TEMP", &amp;path);
CATUnicodeString strPath(path);
strPath.Append("\\ExportDS.txt");
free(path);
<span class="comment">//Create a new class instance of the units converter</span>
CATFmtUnitsConverter * pUnits = new CATFmtUnitsConvertor ();
CATListValCATUnicodeString lBaseMagnitude, lUnits;
lBaseMagnitude.Append("LENGTH");
lUnits.Append("inch");
...
</pre>
<p>Then the path and the class instance of the units converter need to be saved into a new class instance which will have all the arguments that 
the exporter needs : Path, Units, Parameters...</p>
<pre class="code">...
<span class="comment">//Create a new class instance for the export arguments</span>
CATISimImportExportArgs * piArgs = NULL;
hr = ::CATCreateClassInstance ("CATSimImportExportArgs", NULL, 0, IID_CATISimImportExportArgs, (void **) &amp;piArgs);
...
hr = piArgs-&gt;SetPath(CATUnicodeString(strPath));
...
hr = piArgs-&gt;SetUnits (pUnits);
...
</pre>
<p>Finally, the export can be called through the <code>CATISimManagerSIMExport</code> interface. The export key, here "CAAExporterDS", 
is unique and must be defined by the implementation of <code>CATISimManagerSIMExporter</code>. For further information about how to define
your own exporter refer to the technical article "Define your own exporter" [<a href="#References">4</a>]</p>
<pre class="code">...
CATISimManagerSIMExport_var spCAAExport ( pRepManager );
hr = spCAAExport-&gt;Export("CAAExporterDS", piArgs);
...
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the AddRef'ed objects.</p>
<pre class="code">...
if(NULL != piRepInstances) { piRepInstances-&gt;Release(); piRepInstances= NULL; }
...
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloaseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASimRepExporter</code> use case demonstrates the use of various 
CAA APIs in <code>CATSimRepInterfaces</code> framework to export capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAFmFeatModExt/CAAFmExtTaMagnitudes.htm">
		List of Available Magnitudes</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASimScenarioDoc/CAASimDefineExporter.htm">
		Define your own exporter</a></td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>


