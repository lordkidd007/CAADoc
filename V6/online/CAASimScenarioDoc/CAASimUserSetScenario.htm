<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Managing Sections</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1" style="height: 32px">
		<h1><a name="Top"></a>Create User Sets</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case shows how to create user sets and how to organise 
		excitation/probes inside them.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAUserSetScenario Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAUserSetScenario Do</a></li>
				<li><a href="#How">How to Launch CAAUserSetScenario </a></li>
				<li><a href="#Where">Where to Find the CAAUserSetScenario Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create scenario and adds some 
excitation/probes inside it, and then to organise them into user sets, using the 
Generic CAA APIs</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAUserSetScenario Use Case</h2>
<p>CAAUserSetScenario is a use case of the <code>CATSimRepExtend.edu</code> 
framework that illustrates 
<code>CATSimRepInterfaces</code> framework capabilities regarding scenario 
creation and user sets management.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAUserSetScenario Do?</h3>
<p>CAAUserSetScenario allows the creation of user sets into a previously created 
scenario.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a simulation object.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAAUserSetScenario Product 
	Model</caption>
	<tr>
		<td><img src="images/CAASimulation01.jpg"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAUserSetScenario</h3>
<p>To launch CAAUserSetScenario, you will need to set up the build time 
environment, then compile <code>CAAUserSetScenario.m</code> along with its prerequisites, set 
up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASimUserSetScenario Repository Server User Password 
SecurityCtx PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. 
		Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires input PLM Data: PLM reference and PLM Representation 
Reference. This data is stored in 3D XML Files, whose extension is &quot;3dxml&quot;. You 
must import these PLM Data in the database using the PLM Access / Import As 3D 
XML command prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>
CAASimRepExtend.edu\CAASimRepExtendEduRsc.m\src\resources\CAASimModels.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAUserSetScenario Code</h3>
<p>The CAAUserSetScenario use case is made of the file named 
<code>CAAUserSetScenario.cpp</code> located in the <code>CAASimUserSetScenario.m</code></p>
<p><code>InstallRootFolder\CAADoc\CAASimRepExtend.edu\CAASimUserSetScenario.m\src\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are nine logical steps in CAAUserSetScenario:</p>
<ol>
	<li><a href="#Step1">Creating PLM Session</a></li>
	<li><a href="#Step2">Opening the input product</a></li>
	<li><a href="#Step3">Retrieving the Scenario representation root feature</a></li>
	<li><a href="#Step4">Retrieving the FEM representation root feature</a></li>
	<li><a href="#Step5">Creating the scenario pointing the FEM</a></li>
	<li><a href="#Step6">Creating Excitation/Probe using CAA APIs</a></li>
	<li><a href="#Step7">Creating user sets</a></li>
	<li><a href="#Step8">Organizing features into User Sets</a></li>
	<li><a href="#Step9">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating PLM Session</h3>
<p>To create a PLM session, you should use services from the <code>
CAAPLMClientAdapter.edu</code> 
framework.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the input product</h3>
<p>To open the simulation object, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework. A query interface can be done from the 
retrieved <code>CATIPLMNavReference</code> pointer to the <code>CATISimulationPLMManager</code> interface.</p>
<pre class="code">...
CATBoolean ExpandAll = TRUE;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATOmbLifeCycleRootsBag newBag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n, IID_CATIPLMNavReference, (void **) &amp;piNavRefOnRoot, newBag, ExpandAll);	                     
...
CATISimulationPLMManager * piSimObj = NULL;
piNavRefOnRoot-&gt;QueryInterface(IID_CATISimulationPLMManager, (void**) &amp; piSimObj);
...
</pre>
<p>For further information about setting up a PLM session refer to the article 
&quot;Connecting to V6 Server&quot;[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Scenario representation root feature</h3>
<p>To retrieve the scenario representation root feature, you should use the 
<code>GetRootManagerFromSO</code> method from the <code>CATISimScenarioRepManager</code> interface.</p>
<pre class="code">...
CATISimScenarioRepManager_var spScenarioManager;
CATISimulationPLMManager::SimulationCategoryIdentifier iCategoryId = CATISimulationPLMManager::Scenario;
CATBaseUnknown * piRoot = NULL;
if(FAILED(piSimObj-&gt;GetRootManagerFromSO(iCategoryId, piRoot)))
{...}
spScenarioManager = piRoot;
if(piRoot)  piRoot-&gt;Release();
piRoot = NULL;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the FEM representation root feature</h3>
<p>To retrieve the Product of the simulation, you should iterate on each representation 
instances under this Product and stop on the first FEM representation found. You can use <code>
CATFmtRepManagerServices::IsAFEMRep</code> service to identify if the 
representation instance is a finite element representation.</p>
<pre class="code">...
 <span class="comment">// Get the simulated product</span>
  CATIPLMComponent * piSimulatedProduct = NULL;
  if(FAILED(piSimObj-&gt;RetrieveSimulatedComponent(piSimulatedProduct)) || !piSimulatedProduct) 
  { ... }

  CATIPLMRepInstances_var spRepInstance(piSimulatedProduct);
  if(piSimulatedProduct)  piSimulatedProduct-&gt;Release(); piSimulatedProduct = NULL;

  if(!spRepInstance) 
  { ... }

 <span class="comment">// Iterate on each rep instances : We stop on first FEM Rep found</span>

  CATIPrdIterator * pIter = NULL;
  CATIPLMComponent_var spFemRepInstance;
  CATBaseUnknown * piFEMRepRoot = NULL;
  spRepInstance-&gt;Iterator(pIter);
  if (pIter)
  {
    CATBaseUnknown_var nextRep;
    while (SUCCEEDED(pIter-&gt;Next(nextRep)))
    {
      if (CATFmtRepManagerServices::IsAFEMRep(nextRep))
      {
        spFemRepInstance = nextRep;
        piFEMRepRoot = CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATBaseUnknown);
        break;
      }
    }
    pIter-&gt;Release();
    pIter = NULL;
  }

  if(!piFEMRepRoot) 
  { ... }
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the scenario pointing the FEM</h3>
<p>First you need to create an object in context representating the previously created FEM. 
This object will be used to make point the FEEM root by the scenario.</p>
<pre class="code">...
CATLISTV(CATBaseUnknown_var) BehaviorLinkslist;
CATISimObjectInContext_var spSimOIC = CATSimObjectInContextFactory::BuildFromObject(piFEMRepRoot);
if(spSimOIC != NULL_var)  spSimOIC-&gt;Release();
if(piFEMRepRoot)  piFEMRepRoot-&gt;Release();
piFEMRepRoot = NULL;
if(!spSimOIC)  {...}
BehaviorLinkslist.Append(spSimOIC);
...
</pre>
<p>Then you should create the scenario pointing the FEM representation.</p>
<pre class="code">...
CATUnicodeString SolverLateType("CAASimSolver");
CATISimScenarioSpec_var spScenario;
hr = spScenarioManager-&gt;CreateScenario(spScenario, BehaviorLinkslist, SolverLateType);
</pre>
<p>For further information about creating your own scenario refer to the article "Create a 
Scenario referencing a solver and a FEM representation"[<a href="#References">3</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating Excitation/Probe using CAA APIs</h3>
<p>The first step to create excitations and probes into the scenario container 
is to retrieve the feature catalog which contains the start up of the feature 
that you want to instanciate.</p>
<pre class="code">...
CATUnicodeString ProbeLateType("CAASimProbe");
CATUnicodeString ExcitationLateType("CAASimExcitation");

CATFmCredentials SpecCredential;
CATUnicodeString CatalogName = "CAASimRepFeaturesCatalog";<span class="comment">// Name of the CATFct file that describes the CAA Excitation/Probe</span> 
CATUnicodeString ClientId = "CAASimRepFeaturesClientId";<span class="comment">// ID used to generate the CATfct file</span>

if(FAILED(SpecCredential.RegisterAsApplicationBasedOn(CATFmFeatureModelerID, ClientId)))  return 1;
if(FAILED(SpecCredential.RegisterAsCatalogOwner(CatalogName, ClientId)))  return 1;

CATFmStartUpFacade ProbeStartUpFacade(SpecCredential,ProbeLateType);
CATFmStartUpFacade ExcitationStartUpFacade(SpecCredential,ExcitationLateType);
...
</pre>
<p>You should also retrieve the scenario feature container.</p>
<pre class="code">...
CATBaseUnknown_var spContainerBU = CATSimFeatureModelServices::GetContainerFrom(spScenario);
if(spContainerBU==NULL_var)  {...}
CATFmContainerFacade SpecContainerFacade(SpecCredential, spContainerBU);
...
</pre>
<p>Finaly, you should instance the new features and add them into the scenario 
feature container.</p>
<pre class="code">...
CATLISTV(CATISimProbe_var) ProbeList;
CATLISTV(CATISimExcitation_var) ExcitationList;
for ( int i = 0 ; i &lt; 10000 ; ++i )
{
  CATFmFeatureFacade InstanceProbeFromStartUp(SpecCredential);
  CATFmFeatureFacade InstanceExcitationFromStartUp(SpecCredential);
  if(FAILED(ProbeStartUpFacade.InstantiateIn(SpecContainerFacade, InstanceProbeFromStartUp))) {...}
  if(FAILED(ExcitationStartUpFacade.InstantiateIn(SpecContainerFacade, InstanceExcitationFromStartUp))) {...}

  CATBaseUnknown_var spProbeBU = InstanceProbeFromStartUp.GetFeature();
  CATBaseUnknown_var spExcitationBU = InstanceExcitationFromStartUp.GetFeature();
  CATISimProbe_var spProbe(spProbeBU);
  CATISimExcitation_var spExcitation(spExcitationBU);

  if(spProbe==NULL_var || spExcitation==NULL_var) {...}
  ProbeList.Append(spProbe);
  ExcitationList.Append(spExcitation);
}

if(FAILED(spScenario-&gt;AddProbes(ProbeList)))  {...}
if(FAILED(spScenario-&gt;AddExcitations(ExcitationList)))  {...}
</pre>
<p>For further information about creating excitations and probes refer to the article "Create 
excitation and probe in the scenario container"[<a href="#References">4</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating user sets</h3>
<p>You should use the <code>CATISimUserSetManager</code> interface to manage the user sets. 
You can retrieve an instance of this interface with a query interface from the 
scenario feature.</p>
<pre class="code">...
CATISimUserSetManager_var spScenarioMan (spScenario);
if(spScenarioMan==NULL_var) { ... }

CATBaseUnknown* piUserSet = NULL;
CATISimUserSet_var spUserSet;
<span class="comment">//For Probes and Excitationse</span>
int k = 0;
for ( k = 0 ; k &lt; 2 ; ++k )
{
  if(FAILED(spScenarioMan-&gt;AddUserSet( k == 0 ? "Probes" : "Excitations", piUserSet)) || !piUserSet) 
  { ... }
  spUserSet = piUserSet; piUserSet-&gt;Release();
  piUserSet = NULL;
  if(spUserSet==NULL_var) 
  { ... }
  spUserSet = NULL_var;
  }

  CATLISTV(CATBaseUnknown_var) rootUserSets;
  if (FAILED(spScenarioMan-&gt;ListUserSets(rootUserSets))) 
  { ... }
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Organizing features into User Sets</h3>
<p>The <code>CATISimUserSet</code> interface allows the management of the user set's contents 
as showed in the following code snippet.</p>
<pre class="code">...
CATLISTV(CATBaseUnknown_var) listOfData;
char buffer[260];<span class="comment">//For the User Set's names</span>

<span class="comment">//For Probes and Excitations</span>
for ( k = 0 ; k &lt; 2 ; ++k )
{
  const char* str = k == 0 ? "Probes %04d to %04d" : "Excitations %04d to %04d";
  spUserSet = rootUserSets[k+1];
  
  <span class="comment">//Create "1000" group User Sets</span>
  CATISimUserSetManager_var spUserSet1000;
  for ( int i = 0 ; i &lt; 10 ; ++i )
  {
    sprintf(buffer, str, i*1000 + 1, (i+1)*1000);
    if(FAILED(spUserSet-&gt;AddUserSet(buffer, piUserSet)) || !piUserSet) 
    { ... }
    spUserSet1000 = piUserSet; piUserSet-&gt;Release(); piUserSet = NULL;
    if(spUserSet1000==NULL_var) 
    { ... }
    
    <span class="comment">//Create "100" group User Sets</span>
    CATISimUserSet_var spUserSet100;
    for ( int j = 0 ; j &lt; 10 ; ++j )
    {
      sprintf(buffer, str, i*1000 + j*100 + 1, i*1000 + (j+1)*100);
      if(FAILED(spUserSet1000-&gt;AddUserSet(buffer, piUserSet)) || !piUserSet) 
      { ... }
      spUserSet100 = piUserSet; piUserSet-&gt;Release(); piUserSet = NULL;
      if(spUserSet100==NULL_var) 
      { ... }

      <span class="comment">//Create a group of 100</span>
      if (k == 0)
      for ( int z = 0 ; z &lt; 100 ; ++z )
        listOfData.Append(ProbeList[1 + i*1000 + j*100 + z]);
      else
        for ( int z = 0 ; z &lt; 100 ; ++z )
          listOfData.Append(ExcitationList[1 + i*1000 + j*100 + z]);

      spUserSet100-&gt;AddContent(listOfData);
      listOfData.RemoveAll();
    }
  }
}
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed objects.</p>
<pre class="code">...
if (piSimObj) {piSimObj-&gt;Release(); piSimObj = NULL;}
...
<span class="comment">// Empties the bag</span>
newBag.RemoveRoot(piSimObj);
hr = ::CAAAdpCloseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAUserSetScenario</code> use case demonstrates the use of various 
CAA APIs in <code>CATSimRepInterfaces</code> framework to create and manage user 
sets.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASimScenarioDoc/CAASimCreateScenario.htm">
		Create a Scenario referencing a solver and a FEM representation</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASimScenarioDoc/CAASimCreateExcitationProbe.htm">
		Create excitation and probe in the scenario container</a></td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

