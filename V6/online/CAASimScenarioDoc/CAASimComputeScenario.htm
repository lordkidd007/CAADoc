<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Compute a scenario and manage the generated results</title>
<style type="text/css">
.style1 {
	font-family: monospace;
	color: #976970;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><h1><a name="Top"></a>Compute a scenario and manage the generated results</h1></td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create some excitation and probe in the scenario container .</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASimSpecifyAndComputeScenario Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASimSpecifyAndComputeScenario Do?</a></li>
				<li><a href="#How">How to Launch CAASimSpecifyAndComputeScenario?</a></li>
				<li><a href="#Where">Where to Find the CAASimSpecifyAndComputeScenario Code?</a> </li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show an end user how to compute a scenario referencing a probe and an excitation using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASimSpecifyAndComputeScenario Use Case</h2>
<p><code>CAASimSpecifyAndComputeScenario</code> is a use case of the <code>CAASimRepExtend.edu</code> framework
that illustrates the <code>CATSimRepInterfaces</code>, <code>CATSimRepAdp</code>, <code>CATSimRepExecution</code> and <code>FeatureModelerExt</code> framework capabilities regarding Scenario and Result model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASimSpecifyAndComputeScenario Do?</h3>
<p><code>CAASimSpecifyAndComputeScenario</code> is a &quot;batch&quot; that illustrates (among others)
how to create some excitation and probe in the scenario container.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>].
It contains a simulation referencing a product with a FEM model owning a 3D mesh part and a structural property.
The use case will create an excitation and a probe and make reference them by a scenario in the Scenario representation.  
</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASimModels Model</caption>
	<tr>
		<td><img src="images/CAASimulation01.jpg"></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASimSpecifyAndComputeScenario?</h3>
<p>First, you need to import the <code>CAASimModels.3dxml</code> into your 
data base. You can find it under : <code>InstallRootFolder\CAADoc\CAASimRepExtend.edu\CAASimRepExtendEduRsc.m\src\resources</code></p>
<p><span lang="fr">Then t</span>o launch <code>CAASimSpecifyAndComputeScenario</code>, you will need to set up the build time environment 
and compile the <code>CAASimSpecifyAndComputeScenario.m</code> module along with its 
prerequisites [<a href="#References">1</a>]. Once it's built, set up the run time
environment and execute the following command: </p>
<p><code>mkrun -c &quot;<i><a>CAASimSpecifyAndComputeScenario</a>
<a>Repository</a> <a>Server</a> <a>User</a> <a>Password</a> <a>SecurityCtx</a> <a>Env</a> <a>PLM_External_Root</a> <a>V_version_Root</a></i>&quot;</p>

<p>
where:</p>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td><script type="text/javascript">insertRepository();</script></td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>Environment</b></th>
		<td>A PLM environment</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
	
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASimSpecifyAndComputeScenario Code</h3>
<p>The CAASimSpecifyAndComputeScenario use case is made of a single 
file located in the <code>CAASimSpecifyAndComputeScenario.m</code> 
module of the <code>CAASimRepExtend.edu</code> 
framework:<br>
<code>InstallRootFolder\CAADoc\CAASimRepExtend.edu\CAASimSpecifyAndComputeScenario.m\</code></p>
<p>Where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The CAASimSpecifyAndComputeScenario use case can be divided into several steps. Among them we can notice the 4 following steps concerning the scenario computation :</p>
<ol>
	<li><a href="#SubResultStartup">Creation of the CAA scenario subResult Startup and declaration by their specifications</a></li>
	<li><a href="#SubResultSpecification">Specify the scenario subResult behavior during the scenario computation</a></li>
	<li><a href="#ComputeScenario">Launch the computation and generate the results on a scenario referencing a probe and an excitation</a></li>
	<li><a href="#ResultsPostTreatment">Retrieve the computed results and make an example of post processing</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SubResultStartup"></a>Create the CAA scenario sub result startup in the client catalog</h3>
<p>Before creating the scenario sub results while the compute process, we need to create a new subresult startup and their own attributes through the usual process thanks to osm tools [<a href="#References">2</a>].
We also need to declare the sub result type to their specifications (excitation and probe)</p>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<pre class="code">document `CAASimRepFeaturesCatalog.CATfct` {
	container `RootCont` #root{
		feature `CAASimScenarioSubResult`#3 `CATSimulationScenarioSubResult`#94@`CATSimRepModeler.feat` #startup {
			double `Time` #list #out
			double `MeasuredResults` #list #out
			external `LinkToComputedResults` #external_link_meta_data(CAASimResultRep)
		}
	}
		meta_data_definition {
		external_link_meta_data `CAASimResultRep` {
			meta_data_relation->role = "CAAGenericGeneralPurpose"
			meta_data_relation->category = "Reference"
		}
	}
}</pre>
<p>The Scenario subresult base type proposed by the Simulia infrastructure catalog is the <strong>CATSimulationScenarioSubResult</strong>. We add 2 new output attributes to the base startup (Time and MeasuredResults)
to store the computed results. Third attribute, "LinkToComputedResults", is neutral and will be used to point the NON V5 Representation which will stream the post processing file</p>

<p>To specify the scenario subresult type for the specifications (excitations, probes or solver), the client need to implement the <code>CATISimResultProvider</code> interface on these
specifications and implement the <code>GetSubResultLateType(CATString & ioType)</code> method.</p>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SubResultSpecification"></a>Specify the scenario subResult behavior during the scenario computation</h3>
<p>Before generating the scenario result and subresult, we need to implement the calculation performed during the scenario computation.
This calculation is performed during the update of the subresult feature which is called on the <code>CATIFmFeatureBehaviorCustomization</code> interface.
The method which needs to be implemented is <code>CATIFmFeatureBehaviorCustomization::Build()</code>.</p>
<p>Code below illustrates an implemenation of the CATIFmFeatureBehaviorCustomization interface on the CAASimScenarioSubResult feature.
You can retrieve it under : </span><code>InstallRootFolder\CAADoc\</code><span lang="fr" class="style1">CAASimRepExtend.edu\CAASimRepItfImpl.m\src\CAAESimProbeExecutionCusto.cpp</span></p>

<pre class="code">...

CATISimScenarioSubResult_var spSubResult(GetImpl());

CATFmCredentials SpecCredential;
CATUnicodeString CatalogName = "CAASimRepFeaturesCatalog"; <span class="comment">// Name of the CATFct file that describes the CAA Excitation/Probe</span>
CATUnicodeString ClientId = "CAASimRepFeaturesClientId"; <span class="comment">// ID used to generate the CATfct file</span>
HRESULT HR = SpecCredential.RegisterAsApplicationBasedOn(CATFmFeatureModelerID, ClientId);
HR = SpecCredential.RegisterAsCatalogOwner(CatalogName, ClientId);

<span class="comment">//Retrieve the subresults attributes to fill them by &quot;calculated value&quot;</span>
CATFmFeatureFacade SubResultFacade(SpecCredential, spSubResult);
CATFmAttributeName TimeAttributeName("Time");
CATFmAttributeName MeasuredResultsAttributeName("MeasuredResults");
CATFmAttributeValue TimeAttributeValue;
CATFmAttributeValue MeasuredResultsAttributeValue;

<span class="comment">//First unset old set attributes</span>
HR = SubResultFacade.UnsetValue(TimeAttributeName);
HR = SubResultFacade.UnsetValue(MeasuredResultsAttributeName);

CATRawColldouble ListOfTimeDouble;
CATRawColldouble ListOfMeasureDouble;

for(int i=1;i&le;10;i++)
{
  double aTime = i*1.0;
  double aMeasure = i*5.0;

  ListOfTimeDouble.Append(aTime);
  ListOfMeasureDouble.Append(aMeasure);    
}

HR = SubResultFacade.GetValue(TimeAttributeName, TimeAttributeValue);
HR = SubResultFacade.GetValue(MeasuredResultsAttributeName, MeasuredResultsAttributeValue);

TimeAttributeValue.BuildFromListOfDouble(ListOfTimeDouble);
MeasuredResultsAttributeValue.BuildFromListOfDouble(ListOfMeasureDouble);

<span class="comment">//fill the subresults attributes...</span>
HR = SubResultFacade.SetValue(TimeAttributeName, TimeAttributeValue);
HR = SubResultFacade.SetValue(MeasuredResultsAttributeName, MeasuredResultsAttributeValue);

...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ComputeScenario"></a>Launch the computation and generate the results on a scenario referencing a probe and an excitation</h3>
<p>We are now ready to launch the whole computation protocol which will create the scenario result and subresult and launch the update on them.</p>

<pre class="code">...
CATISimScenario_var spScenario;
...
<td><a href="../CAASimScenarioDoc/CAASimCreateScenario.htm">
Create a scenario</a></td>
<script type="text/javascript">    insertLinkToTop();</script>
...

HRESULT HR = CATSimExecutionServices::Compute(spScenario);

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ResultsPostTreatment"></a>Retrieve the computed results and make an example of post processing.</h3>
<p>We wil now retrieve the calculated results to store them in a post processing file and save them in a non V5 representation.</p>
<pre class="code">...

CATISimScenarioSubResult_var spComputedSubResult=...;

<span class="comment">//Create an Excel file with the computed results and a NONV5 rep to stream them.</span>
CATUnicodeString FileDir = CATGetTempDirectory();
CATUnicodeString FileName("CAASimResults.xls");   
char TempFilepath[ CATMaxPathSize ];
CATUnicodeString FilePath;

CATMakePath(FileDir.ConvertToChar(), FileName.ConvertToChar(), TempFilepath);  
FilePath = TempFilepath;

CATICkeRelationFactory_var spFactoryOfParm(spContainerBU);

<span class="comment">//File creation</span>
CATICkeSheet_var spTheSheet = spFactoryOfParm->CreateSheet(FilePath, 1);

<span class="comment">//Fill the excel file with the calculated subresult datas</span>
<span class="comment">// fill the first row cell</span>
CATUnicodeString Cellule = "Time";
spTheSheet->SetCell(1,1,Cellule,1,0);
<span class="comment">// fill the second row cell</span>
Cellule = "Measured Results";
spTheSheet->SetCell(1,2,Cellule,1,0);

<span class="comment">//Get the Computed value in the subresult</span>
CATFmFeatureFacade SubResultFacade(iSpecCredential, ispComputedSubResult);
CATFmAttributeName TimeAttributeName("Time");
CATFmAttributeName MeasuredResultsAttributeName("MeasuredResults");
CATFmAttributeValue TimeAttributeValue;
CATFmAttributeValue MeasuredResultsAttributeValue;

HRESULT HR = SubResultFacade.GetValue(TimeAttributeName, TimeAttributeValue);
HR = SubResultFacade.GetValue(MeasuredResultsAttributeName, MeasuredResultsAttributeValue);

<span class="comment">//Get the list of results/time double values</span>
CATRawColldouble ListOfTimeValues;
CATRawColldouble ListOfMeasuredResultsValues;
HR = TimeAttributeValue.ConvertToListOfDouble(ListOfTimeValues);
HR = MeasuredResultsAttributeValue.ConvertToListOfDouble(ListOfMeasuredResultsValues);

<span class="comment">//Fill the excel time column</span>
for (int i=1; i<=ListOfTimeValues.Size() ; i++ )
{
  double TimeValue =ListOfTimeValues[i];
  CATUnicodeString TimeString("");
  TimeString.BuildFromNum(TimeValue);
  spTheSheet->SetCell(i+1, 1, TimeString, 0, 0); 
}  

<span class="comment">//Fill the excel MeasuredResults column</span>
for(i=1; i<=ListOfMeasuredResultsValues.Size() ; i++)
{
  double MeasuredResultValue =ListOfMeasuredResultsValues[i];
  CATUnicodeString MeasuredResultString("");
  MeasuredResultString.BuildFromNum(MeasuredResultValue);
  spTheSheet->SetCell(i+1, 2, MeasuredResultString, 0, 0); 
}

<span class="comment">//create the NON V5 representation</span>
iCategoryId = CATISimulationPLMManager::Result; 
CATUnicodeString DisciplineSimulationDocument("dsc_Simulation_Document");
CATUnicodeString FileType("xls");
CATISimulationPLMObject * piRepresentation = NULL;
CATUnicodeString TypeNameSimulationDocument("SIMObjSimulationRepReferenceGeneric");
CATIType_var TypeSimulationDocument;

<span class="comment">//get the knowledge type of the simulation document</span>
HR = CATCkePLMNavPublicServices::RetrieveKnowledgeType(TypeNameSimulationDocument, TypeSimulationDocument)

<span class="comment">//get the simulation object from the scenario sub result</span>
CATISimulationPLMManager * piSimObj = CATSimFeatureModelServices::GetSimulationObjectFrom(spComputedSubResult);
HR = piSimObj->AggregateSimulationDocument(iCategoryId, TypeSimulationDocument, FilePath, FileType, DisciplineSimulationDocument, piRepresentation);

<span class="comment">//Create a link descriptor between the subResult and the NONV5 rep</span> 
CATBaseUnknown * piObject =  (CATBaseUnknown *)(piRepresentation);
CATLISTP(CATIPLMComponent) PathOfInstances;  
CATOmbObjectInContext * piObjectInContext = NULL;
CATOmbObjectInContext * piResultObjectInContext = NULL;

HR = CATOmbObjectInContext::CreateObjectInContext(PathOfInstances, NULL, piObject, piResultObjectInContext);

<span class="comment">//Set the link to Computed value subresult attribute</span>
CATFmFeatureFacade SubResultFacade(SpecCredential, spComputedSubResult);
CATFmAttributeName LinkToComputedResultsAttributeName("LinkToComputedResults");
CATFmAttributeValue LinkToComputedResultsAttributeValue;

LinkToComputedResultsAttributeValue.SetExternalObject(piResultObjectInContext);
HR = SubResultFacade.SetValue(LinkToComputedResultsAttributeName, LinkToComputedResultsAttributeValue)

...</pre>   
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASimSpecifyAndComputeScenario</code> use case explains (among others) how to compute a scenario referencing a probe and an excitation using the Generic CAA APIs exposed 
in the <code>CATSimRepInterfaces</code>, <code>CATSimRepAdp</code>, <code>CATSimRepExecution</code> and <code>FeatureModelerExt</code> framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="../CAAFmFeatModExt/CAAOsmUcCatalogSU.htm">
		Defining StartUp Catalog</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sep 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
