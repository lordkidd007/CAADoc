<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating an Opening - Adaptor</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Opening - Adaptor</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case element</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the need and the use of this adaptor for the standard opening
		UseCases.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#BeforeStarting">Before Starting</a></li>
			<li><a href="#UseCase">The CAASddCreateStdOpeningAdpt Adaptor Class</a>
			<ul>
				<li><a href="#What">What Does CAASddCreateStdOpeningAdpt Do</a></li>
				<li><a href="#How">How to Use CAASddCreateStdOpeningAdpt</a></li>
				<li><a href="#Where">Where to Find the CAASddCreateStdOpeningAdpt</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>On this page you will learn how the common APIs &amp; method calls can be grouped and put in one place to avoid
redundancy and effectively allow modularity.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BeforeStarting"></a>Before Starting</h2>
<p>You may want to read from the beginning for creating an opening in SDD [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASddCreateStdOpeningAdpt Adaptor Class</h2>
<p>The CAASddCreateStdOpeningAdpt provides a starting point and a base for opening
creation in SDD either on a plate or on a profile. It contains all the 
code common to creation of opening using standard positioning strategies.</p>
<p>For any one positioning strategy, while creating a standard opening, you may derive from this class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASddCreateEndcut Do</h3>
<p>This adaptor:</p>
  	<ul>
  		<li>Navigates to a desired product in the SpecTree</li>
  		<li>Creates and empty opening</li>
  		<li>Sets the category to "Opening"</li>
  		<li>Sets the creation mode(by default to catStrOpeningStandard), else, other if specified</li>
  		<li>Sets the limit mode &amp; the direction</li>
  		<li>Contains a dedicated method to retrieve the contours &amp; positioning strategies available for standard opening creation</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Use CAASddCreateStdOpeningAdpt</h3>
<p>You may simply derive an implementation for interface CAAISddCreateOpening from this adaptor.
The properties for openings mentioned in the above list will set by the adaptor.
The implementation then needs to take care of only the rest of the properties.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASddCreateStdOpeningAdpt</h3>
<p>The adaptor can be found at the following location:<br /> 
CAASddCreateOpening.m module of the CAAStructureDetDesign.edu framework: <code>
InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\CAASddCreateOpening.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This adaptor deals with the following CAA APIs:</p>
<table class="fill">
	<tr>
		<td><em>CATIStrUseOpeningStandard</em></td>
		<td>Interface on SDD opening created/to create as standard type opening.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningType</em></td>
		<td>Interface on SDD opening to set the proper type of opening intended.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningMngt</em></td>
		<td>Interface on SDD plate/profile to manage creation, deletion and 
		retrieval of SDD openings on the plates/profiles.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseRefOffset</em></td>
		<td>Interface of positioning strategy to set reference &amp; its offset.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseCategoryMngt</em></td>
		<td>Interfaces on SDD opening to set/get category.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseProfile</em></td>
		<td>Interface on SDD profile(member/stiffener/stiffener on free edge.</td>
	</tr>	
	<tr>
		<td><em>CATISddUseProductStiffener</em></td>
		<td>Interface on SDD stiffener product node.</td>
	</tr>
	<tr>
		<td><em>CATISddUseProductStiffenerOnFreeEdge</em></td>
		<td>Interface on SDD stiffener on free edge product node.</td>
	</tr>
	<tr>
		<td><em>CATISddUseProductPlate</em></td>
		<td>Interface on SDD plate product node.</td>
	</tr>
	<tr>
		<td><em>CATISddUseStiffener</em></td>
		<td>Interface on SDD stiffener node.</td>
	</tr>
	<tr>
		<td><em>CATISddUseStiffenerOnFreeEdge</em></td>
		<td>Interface on SDD stiffener on free edge node.</td>
	</tr>
	<tr>
		<td><em>CATISddUsePlate</em></td>
		<td>Interface on SDD plate node.</td>
	</tr>
</table>
<p>This adaptor uses the following enumerations:</p>
<table class="fill">
    <tr>
		<td><em>CATStrUseOpeningCreationMode</em></td>
		<td>Interface for instantiation &amp; modification of detail 
		features(endcuts, slots &amp; openings).</td>
	</tr>
	<tr>
		<td><em>CATStrUseOpeningLimitsMode</em></td>
		<td>Interface for instantiation &amp; modification of detail 
		features(endcuts, slots &amp; openings).</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>In this use case there are 6 logical steps in Main:</p>
<table class="fill">
	<tr><th>#</th><th>Step</th>	</tr>
	<tr><td>1</td><td><a href="#Step1">Navigating to the Plate/Profile</a></td>	</tr>
	<tr><td>2</td><td><a href="#Step2">Adding Empty Opening</a></td>	</tr>
	<tr><td>3</td><td><a href="#Step3">Setting Category &amp; Type</a></td>	</tr>
	<tr><td>4</td><td><a href="#Step4">Setting Direction &amp; Limit Mode</a></td>	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Navigating to the Plate/Profile</h3>
<p>The implementation class deliberately calls the <code>Process</code> method. The second parameter to
this method is the location of desired SDD product under the root product.</p>
<pre class="code">...
int CAASddCreateStdOpeningAdpt::Process( CATIPLMNavOccurrence_var &amp;ispRootOccurrence,
                                            int iPrdNo,
                                            CATIMmiMechanicalFeature_var &amp;ospFeat,
                                            CATIMmiMechanicalFeature_var &amp;ospOpening,
                                            CATStrOpeningCreationMode iOpeningMode )
{
  // ---------------------------------------------
  //  Check product
  // ---------------------------------------------
  CATListPtrCATIPLMNavOccurrence ListOfChildOccurrences;
  ispRootOccurrence-&gt;ListChildren( ListOfChildOccurrences );
  int nlistOfChildOccurrencesSize = ListOfChildOccurrences.Size();
  if( nlistOfChildOccurrencesSize &lt; iPrdNo ) { cout &lt;&lt; "Unable to locate requested SDD product under root product." &lt;&lt; endl; return 152; }
...</pre>
<p>
The list <code>ListOfChildOccurrences</code> contains products in the same sequence as seen in the SpecTree.
Navidation to the desired product can thus be achieved by knowing the exact location in the model.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Adding Empty Opening</h3>
<p>Once we have navidated to the desired SDD product &amp; obtained the SDD feature, we can
retrieve the opening management interface &amp; add empty opening as follows:</p>
<pre class="code">...
CATIStrUseOpeningMngt_var spOpeningMngt = ospFeat;
if( ( ospFeat == NULL_var ) || ( spOpeningMngt == NULL_var ) )     { cout &lt;&lt; "Unable to locate any SDD product under root product." &lt;&lt; endl; return 401; }

// ---------------------------------------------
//  Add a new empty opening
// ---------------------------------------------
spOpeningMngt-&gt;AddOpening( ospOpening );
if( ospOpening == NULL_var )         { cout &lt;&lt; "Unable to Create a new empty opening on selected SDD product." &lt;&lt; endl; return 402; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting Category &amp; Type</h3>
<p>The category management and the opening type interface can be obtained on the newly created opening</p>
<pre class="code">...
// ---------------------------------------------
//  Set the category
// ---------------------------------------------
CATIStrUseCategoryMngt_var spOpeningCategory = ospOpening;
if( spOpeningCategory == NULL_var )         { cout &lt;&lt; "Unable to set category for created opening." &lt;&lt; endl; return 403; }
CATUnicodeString ucOpeningCategory = "Opening";
spOpeningCategory-&gt;SetCategory( ucOpeningCategory );

// ---------------------------------------------
//  Set the opening type to standard
// ---------------------------------------------
CATIStrUseOpeningType_var spOpeningType = ospOpening;
if( spOpeningType == NULL_var )         { cout &lt;&lt; "Unable to set opening type." &lt;&lt; endl; return 404; }
spOpeningType-&gt;SetType( iOpeningMode );
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Direction &amp; Limit Mode</h3>
<p>The direction &amp; limit mode can be set as follows:</p>
<pre class="code">...
// ---------------------------------------------
//  Navigate to a ref plane using CAASddNavigationServices
// ---------------------------------------------
CATIMmiMechanicalFeature_var spSFDPart;
CAASddNavigationServices::GetMechanicalPartFromProduct( ispRootOccurrence, spSFDPart );
CATUnicodeString ucRefPlaneName = "CROSS.18";
CATIMmiMechanicalFeature_var spPlaneCROSS18, spPlaneCROSS20;
HRESULT RC = E_FAIL;
RC = CAASddNavigationServices::GetReferencePlaneFromAlias( spSFDPart, ucRefPlaneName, spPlaneCROSS18 );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to retrieve reference plane CROSS.18." &lt;&lt; endl; return 405; }
ucRefPlaneName = "CROSS.20";
RC = CAASddNavigationServices::GetReferencePlaneFromAlias( spSFDPart, ucRefPlaneName, spPlaneCROSS20 );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to retrieve reference plane CROSS.20." &lt;&lt; ndl; return 405; }
CATIStrUseProfile_var spProfile = ospFeat;

// ---------------------------------------------
//  For Standard mode
// ---------------------------------------------
if( iOpeningMode == catStrOpeningStandard )
{
  CATIStrUseOpeningStandard_var spOpeningStd = ospOpening;
  if( spOpeningStd == NULL_var )                                              { cout &lt;&lt; "Unable to set standard opening type." &lt;&lt; endl; return 406; }
  CATStrOpeningSTDMode OpeningSTDMode = catStrOpeningSTDOblongMode;
  RC = spOpeningStd-&gt;SetStandardModeType( OpeningSTDMode );
  if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to set standard opening type." &lt;&lt; endl; return 406; }

  // ---------------------------------------------
  //  Direction &amp; LimitMode
  // ---------------------------------------------
  CATStrOpeningLimitsMode OpeningLimitMode = catStrOpeningLimitsThrough;
  spOpeningStd-&gt;SetLimitMode( OpeningLimitMode );
  if( !!spProfile )
    spOpeningStd-&gt;SetDirectionForOpeningOnProfile( CATFalse );
  else
    spOpeningStd-&gt;SetDirection( spPlaneCROSS18 );
}

// ---------------------------------------------
//  For Sketch opening
// ---------------------------------------------
if( iOpeningMode == catStrOpeningOutputProfile )
{
  CATIStrUseOpeningOutputProfile_var spOpeningOutputProfile = ospOpening;
  if( spOpeningOutputProfile == NULL_var )                                  { cout &lt;&lt; "Unable to set sketch opening type." &lt;&lt; endl; return 406; }

  // ---------------------------------------------
  //  Direction &amp; LimitMode
  // ---------------------------------------------
  CATStrOpeningLimitsMode OpeningLimitMode = catStrOpeningLimitsThrough;
  spOpeningOutputProfile-&gt;SetLimitMode( OpeningLimitMode );
  if( !!spProfile )
    spOpeningOutputProfile-&gt;SetDirection( spPlaneCROSS20 );
  else
    spOpeningOutputProfile-&gt;SetDirection( spPlaneCROSS18 );
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This shows how to set the common properties for openings in SDD.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="CAASddUcCreateOpening.htm">Creating an Opening</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
