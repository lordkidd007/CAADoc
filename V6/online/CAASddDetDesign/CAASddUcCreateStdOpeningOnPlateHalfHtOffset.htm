<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating a Standard Opening on an SDD Plate Using Half-Height/Offset Strategy</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Standard Opening on an SDD Plate Using Half-Height/Offset Strategy</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case element</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATStrUseItf use case. This use case 
		explains how to create an Opening in SDD.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#BeforeStarting">Before Starting</a></li>
			<li><a href="#UseCase">The CAASddCreateStdOpeningOnPlateHalfHtOffset Component</a>
			<ul>
				<li><a href="#What">What Does CAASddCreateStdOpeningOnPlateHalfHtOffset 
					Component Do</a></li>
				<li><a href="#How">How to Create &amp; Use CAASddCreateStdOpeningOnPlateHalfHtOffset 
					Component</a></li>
				<li><a href="#Where">Where to Find the CAASddCreateStdOpeningOnPlateHalfHtOffset 
					Component Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case page</h2>
<p>On this page you will learn how to use the adaptor [<a href="#References">3</a>]
to create a component.
This component adheres to interface <code>CAAISddCreateOpening</code> and creates
a standard opening on a plate using the Half-Height/Offset strategy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BeforeStarting"></a>Before Starting</h2>
<p>You may want to read from the beginning for creating an opening in SDD [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASddCreateStdOpeningOnPlateHalfHtOffset component</h2>
<p>This component navigates to the desired plate and creates a standard opening on
this plate using the Half-Height/Offset positioning strategy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASddCreateStdOpeningOnPlateHalfHtOffset Component 
Do</h3>
<p>This component:</p>
  	<ul>
  		<li>Navigates to a desired product in the SpecTree</li>
  		<li>Creates a standard opening</li>
  		<li>Applies the Oblong contour &amp; Half-Height/Offset strategy to the opening</li>
  		<li>Retrieves the contour parameters &amp; the positioning parameters</li>
  		<li>Sets the contour parameters &amp; the positioning strategy parameters.</li>
  	</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Create &amp; Use CAASddCreateStdOpeningOnPlateHalfHtOffset 
Component</h3>
<p>The <a href="CAASddUcCreateOpening.htm">Creating an Opening</a> page describes how to create &amp; use the component.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASddCreateStdOpeningOnPlateHalfHtOffset Code</h3>
<p>The component can be found at the following location:<br />
CAASddCreateOpening.m module of the CAAStructureDetDesign.edu framework:</p>
<p>The component is made up of the following two files:</p>
<p><code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\CAASddCreateOpening.m\src\CAASddCreateStdOpeningOnPlateHalfHtOffset.cpp</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\CAASddCreateOpening.m\LocalInterfaces\CAASddCreateStdOpeningOnPlateHalfHtOffset.h</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This component deals with the following CAA APIs:</p>
<table class="fill">
	<tr>
		<td><em>CATIStrUseOpeningStandard</em></td>
		<td>Interface on SDD opening created/to create as standard type opening.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningsMgr</em></td>
		<td>Interface on SDD plate/profile to retrieve standard 
		contours/positioning strategies &amp; their repective parameters.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningMngt</em></td>
		<td>Interface on SDD plate/profile to manage creation, deletion and 
		retrieval of SDD openings on the plates/profiles.</td>
	</tr>
	<tr>
		<td><em>CATIStrUsePlate</em></td>
		<td>Interface on SDD plate.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseRefOffset</em></td>
		<td>Interface to set reference &amp; its offset.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>In this use case there are 5 logical steps in Main:</p>
<table class="fill">
	<tr><th>#</th><th>Step</th>	</tr>
	<tr><td>1</td><td><a href="#Step1">Navigating to Product Node &amp; Creating a Basic Opening</a></td>	</tr>
	<tr><td>2</td><td><a href="#Step2">Retrieving the Available Contour &amp; Positioning Strategies</a></td>	</tr>
	<tr><td>3</td><td><a href="#Step3">Selecting the Contour &amp; the Positioning Strategy</a></td>	</tr>
	<tr><td>4</td><td><a href="#Step4">Setting Values for the Contour Parameters &amp; the Strategy Parameters</a></td>	</tr>
	<tr><td>5</td><td><a href="#Step5">Setting the Contour Parameters &amp; the Strategy Parameters</a></td>	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Navigating to Product Node &amp; Creating a Basic Opening</h3>
<p>Navigation to desired profile or plate product
is done with the help of the adaptor. The method <code>Process</code> of the adaptor
<a href="CAASddUcCreateStdOpeningAdpt.htm"><code>Creating an Opening - Adaptor</code></a>
does the actual navigation.
From this component, we merely call the method with parameters as seen below.</p>
<pre class="code">...
// ---------------------------------------------
//  Add a new opening and set its basic properties
// ---------------------------------------------
int rc = -1;
CATIMmiMechanicalFeature_var spOpeningFeat, spPlateFeat;
rc = CAASddCreateStdOpeningAdpt::Process( ispRootOccurrence, 7, spPlateFeat, spOpeningFeat );
if( rc )        return rc;

// ---------------------------------------------
//  Check for valid outputs
// ---------------------------------------------
CATIStrUseOpeningStandard_var spStdOpening = spOpeningFeat;
CATIStrUsePlate_var spPlate = spPlateFeat;
if( ( spStdOpening == NULL_var ) || ( spPlate == NULL_var ) )             { cout &lt;&lt; "Unable to set HalfHeight/Offset parameters." &lt;&lt; endl; return 7408; }
...</pre>
<p>
The above code navigates to the 7th product(which is a transverse bulkhead) under the root node &amp; adds
an empty standard opening to this plate.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Available Contour &amp; Positioning Strategies</h3>
<p>The adaptor is used once again to retrieve the available contours &amp; strategies on the selected plate.
This time the method <code>GetAvailableStandardContourAndPositioningStrategies</code>
does the job for you. The only input is the plate. The output from this method contains the
list of contours &amp; strategies.</p>
<pre class="code">...
// ---------------------------------------------
//  Get available contours &amp; positioning strategies
// ---------------------------------------------
CATIStrUseOpeningMngt_var spOpeningMngt = spPlateFeat;
if( spOpeningMngt == NULL_var )                                             { cout &lt;&lt; "Unable to set HalfHeight/Offset parameters." &lt;&lt; endl; return 7409; }
CATListValCATUnicodeString ListOfContours, ListOfPosStrategies;
rc = CAASddCreateStdOpeningAdpt::GetAvailableStandardContourAndPositioningStrategies( spPlateFeat, ListOfContours, ListOfPosStrategies );
if( rc )          return rc;
if( ListOfContours.Size() &lt; 3 )                                             { cout &lt;&lt; "Unable to get oblong contour name." &lt;&lt; endl; return 7410; }
if( ListOfPosStrategies.Size() &lt; 2 )                                        { cout &lt;&lt; "Unable to get positioning strategies." &lt;&lt; endl; return 7410; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Selecting the Contour &amp; the Positioning Strategy</h3>
<p>The desired strategy i.e. Half-Height/Offset strategy is the 2nd in the returned list of positioning strategies.
Similarly, desired contour(oblong) is the 3rd in the list of contours.</p>
<pre class="code">
// ---------------------------------------------
//  Select &amp; apply oblong contour &amp; HalfHeight/Offset strategy
// ---------------------------------------------
CATUnicodeString ucContourName = ListOfContours[ 3 ], ucPosStratName = ListOfPosStrategies[ 2 ];
CATIStrUseOpeningsMgr_var spOpeningsMgr = spPlateFeat;
if( spOpeningsMgr == NULL_var )                                              { cout &lt;&lt; "Unable to set HalfHeight/Offset parameters." &lt;&lt; endl; return 7411; }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Values for the Contour Parameters &amp; the Strategy Parameters</h3>
<p>The <code>CATIStrUseOpeningsMgr</code> interface is used to retrieve the 
contour &amp; strategy parameters.</p>
<pre class="code">
// ---------------------------------------------
//  Set the list of parameters of contour
// ---------------------------------------------
HRESULT RC = E_FAIL;
CATListValCATBaseUnknown_var ListOfContourParms, ListOfPosParms;
RC = spOpeningsMgr-&gt;GetStandardContourParms( ucContourName, ListOfContourParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to get standard opening contour parameters." &lt;&lt; endl; return 7412; }
RC = spOpeningsMgr-&gt;GetStandardPositioningStrategyParms( ucPosStratName, ListOfPosParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to get standard opening positioning strategy parameters." &lt;&lt; endl; return 7413; }
</pre>
<p>For the Half-Height/Offset positioning strategy for creation of opening on plate, there are in all 
three positioning parameters.
You may not worry about the first &amp; the second. However, it is
mandatory to select appropriate values for the third parameter.</p>
<p>The interface <code>CATIStrUseRefOffset</code> can be used to set these values.</p>
<pre class="code">
// ListOfContourParms
//     1 - CATIStrUsePosSupportFace
//     2 - --------------------------------
//     3 - CATIStrUseRefOffset
// ---------------------------------------------
//  Set the list of parameters for strategy
// ---------------------------------------------
if( ListOfPosParms.Size() &lt; 3 )                                             { cout &lt;&lt; "Unable to retrieve positioning strategies." &lt;&lt; endl; return 7414; }
CATIStrUseRefOffset_var spRefOffset = ListOfPosParms[ 3 ];
if( spRefOffset == NULL_var )                                               { cout &lt;&lt; "Unable to retrieve positioning strategies." &lt;&lt; endl; return 7414; }
</pre>

<p>Once, you have the <code>CATIStrUseRefOffset</code> for the required parameter,
you will have to select one reference plane.<br />
The following code uses <code>CAASddNavigationServices</code> to select LONG.-10.</p>
<pre class="code">
// ---------------------------------------------
//  Get reference planes for HalfHeight/Offset
// ---------------------------------------------
CATIMmiMechanicalFeature_var spSFDPart;
CAASddNavigationServices::GetMechanicalPartFromProduct( ispRootOccurrence, spSFDPart );

CATUnicodeString ucRefPlaneName = "LONG.-10";
CATIMmiMechanicalFeature_var spPlaneLONG_10;
RC = CAASddNavigationServices::GetReferencePlaneFromAlias( spSFDPart, ucRefPlaneName, spPlaneLONG_10 );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to retrieve reference plane LONG.-10." &lt;&lt; endl; return 7415; }

// ---------------------------------------------
//  Set the reference planes for HalfHeight/Offset
// ---------------------------------------------
CATStrOrientation RelevantSide = StrSameOrientation;
CATIPrdObject_var spPrdObjectRoot = NULL_var;//ispRootOccurrence;
RC = spRefOffset-&gt;SetSpecification( spPrdObjectRoot, spPlaneLONG_10 );
spRefOffset-&gt;SetRelevantSide( RelevantSide );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to set reference plane DECK.-10." &lt;&lt; endl; return 7416; }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting the Contour Parameters &amp; the Strategy Parameters</h3>
<p>Finally the <code>CATIStrUseOpeningStandard</code> interface is used to set the
parameters.</p>
<pre class="code">
RC = spStdOpening-&gt;SetContourAndPosStrategy( ucContourName, ListOfContourParms, ucPosStratName, ListOfPosParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to set contour &amp; positioning strategy." &lt;&lt; endl; return 7416; }</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create endcut.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="CAASddUcCreateOpening.htm">Creating an Opening</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="CAASddUcCreateStdOpeningAdpt.htm">Creating an Opening - Adaptor</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
