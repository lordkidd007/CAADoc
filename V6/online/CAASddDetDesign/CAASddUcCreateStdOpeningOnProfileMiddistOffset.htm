<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating a Standard Opening on an SDD Profile Using the MidDist/Offset Strategy</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Standard Opening on an SDD Profile Using the MidDist/Offset Strategy</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case element</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATStrUseItf use case. This use case 
		explains how to create an Opening in SDD.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#BeforeStarting">Before Starting</a></li>
			<li><a href="#UseCase">The CAASddCreateStdOpeningOnProfileMiddistOffset Component</a>
			<ul>
				<li><a href="#What">What Does CAASddCreateStdOpeningOnProfileMiddistOffset component 
					Do</a></li>
				<li><a href="#How">How to Create &amp; Use CAASddCreateStdOpeningOnProfileMiddistOffset 
					Component</a></li>
				<li><a href="#Where">Where to Find the CAASddCreateStdOpeningOnProfileMiddistOffset 
					Component Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>On this page you will learn how to use the <code>CAASddCreateStdOpeningAdpt</code> [<a href="#References">3</a>] to create a component.
This component adheres to interface <code>CAAISddCreateOpening</code> and creates
a standard opening on a stiffener using the MidDist/Offset strategy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BeforeStarting"></a>Before Starting</h2>
<p>You may want to read from the beginning for creating an opening in SDD [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASddCreateStdOpeningOnProfileMiddistOffset Component</h2>
<p>This component navigates to the desired stiffener and creates a standard opening on
this stiffener using the MidDist/Offset positioning strategy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASddCreateStdOpeningOnProfileMiddistOffset Component 
Do</h3>
<p>This component:</p>
<ul>
  		<li>Navigates to a desired product in the SpecTree.</li>
  		<li>Creates a standard opening.</li>
  		<li>Applies the Oblong contour &amp; MidDist/Offset strategy to the opening.</li>
  		<li>Retrieves the contour parameters &amp; the positioning parameters.</li>
  		<li>Sets the contour parameters &amp; the positioning strategy parameters.</li>
  	</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Create &amp; Use CAASddCreateStdOpeningOnProfileMiddistOffset 
Component</h3>
<p>The <a href="CAASddUcCreateOpening.htm">Creating an Opening</a> page describes how to create &amp; use the component.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASddCreateOpening Code</h3>
<p>The component can be found at the following location:<br /> 
CAASddCreateOpening.m module of the CAAStructureDetDesign.edu framework:</p>
<p>The component is made up of the following two files:</p>
<p><code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\CAASddCreateOpening.m\src\CAASddCreateStdOpeningOnProfileMiddistOffset.cpp</code><br />
<code>InstallRootFolder\CAADoc\CAAStructureDetDesign.edu\CAASddCreateOpening.m\LocalInterfaces\CAASddCreateStdOpeningOnProfileMiddistOffset.h</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This component deals with the following CAA APIs:</p>
<table class="fill">
	<tr>
		<td><em>CATIStrUseOpeningStandard</em></td>
		<td>Interface on SDD opening created/to create as standard type opening.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningType</em></td>
		<td>Interface on SDD opening to set the proper type of opening intended.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningsMgr</em></td>
		<td>Interface on SDD plate/profile to retrieve standard 
		contours/positioning strategies &amp; their repective parameters.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseOpeningMngt</em></td>
		<td>Interface on SDD plate/profile to manage creation, deletion and 
		retrieval of SDD openings on the plates/profiles.</td>
	</tr>
	<tr>
		<td><em>CATIStrUseProfile</em></td>
		<td>Interface on SDD profile(member/stiffener/stiffener on free edge).</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>In this use case there are 5 logical steps in Main:</p>
<table class="fill">
	<tr><th>#</th><th>Step</th>	</tr>
	<tr><td>1</td><td><a href="#Step1">Navigating to product node &amp; creating a basic opening</a></td>	</tr>
	<tr><td>2</td><td><a href="#Step2">Retrieving the available contour &amp; positioning strategies</a></td>	</tr>
	<tr><td>3</td><td><a href="#Step3">Selecting the contour &amp; the positioning strategy</a></td>	</tr>
	<tr><td>4</td><td><a href="#Step4">Setting the contour parameters &amp; the strategy parameters</a></td>	</tr>
	<tr><td>5</td><td><a href="#Step5">Setting values for the contour parameters &amp; the strategy parameters</a></td>	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Navigating to product node &amp; creating a basic opening</h3><p>Navigation to desired profile or plate product
is done with the help of the adaptor. The method <code>Process</code> of the adaptor
<a href="CAASddUcCreateStdOpeningAdpt.htm"><code>Creating an Opening - Adaptor</code></a>
does the actual navigation.</p>
<p>From this component, we merely call the method with parameters as seen below.</p>
<pre class="code">...
// ---------------------------------------------
//  Add a new opening and set its basic properties
// ---------------------------------------------
int rc = -1;
CATIMmiMechanicalFeature_var spOpeningFeat, spStiffenerFeat;
rc = CAASddCreateStdOpeningAdpt::Process( ispRootOccurrence, 4, spStiffenerFeat, spOpeningFeat );
if( rc )        return rc;

// ---------------------------------------------
//  Check for valid outputs
// ---------------------------------------------
CATIStrUseOpeningStandard_var spStdOpening = spOpeningFeat;
CATIStrUseProfile_var spProfile = spStiffenerFeat;
if( ( spStdOpening == NULL_var ) || ( spProfile == NULL_var ) )             { cout &lt;&lt; "Unable to set MidDist/Offset parameters." &lt;&lt; endl; return 2408; }
...</pre>
<p>
The above code navigates to the 4th product(which is a transverse stiffener) under the root node &amp; adds
an empty standard opening to this stiffener.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the available contour &amp; positioing strategies</h3>
<p>The adaptor is used once again to retrieve the available contours &amp; strategies on the selected profile.
This time the method <code>GetAvailableStandardContourAndPositioningStrategies</code>
does the job for you. The only input is the stiffener. The output from this method contains the
list of contours &amp; strategies.</p>
<pre class="code">...
// ---------------------------------------------
//  Get available contours &amp; positioning strategies
// ---------------------------------------------
CATIStrUseOpeningMngt_var spOpeningMngt = spStiffenerFeat;
if( spOpeningMngt == NULL_var )                                             { cout &lt;&lt; "Unable to set MidDist/Offset parameters." &lt;&lt; endl; return 1409; }
CATListValCATUnicodeString ListOfContours, ListOfPosStrategies;
rc = CAASddCreateStdOpeningAdpt::GetAvailableStandardContourAndPositioningStrategies( spStiffenerFeat, ListOfContours, ListOfPosStrategies );
if( rc )          return rc;
if( ListOfContours.Size() &lt; 3 )                                             { cout &lt;&lt; "Unable to get oblong contour name." &lt;&lt; endl; return 1410; }
if( ListOfPosStrategies.Size() &lt; 3 )                                        { cout &lt;&lt; "Unable to get positioning strategies." &lt;&lt; endl; return 1411; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Selecting the contour &amp; the positioing strategy</h3>
<p>The desired strategy i.e. MidDist/Offset strategy is the 2nd in the returned list of positioning strategies.</p>
<p>Similarly, desired contour(oblong) is the 3rd in the list of contours.</p>
<pre class="code">
// ---------------------------------------------
//  Select &amp; apply oblong contour &amp; MidDist/Offset strategy
// ---------------------------------------------
CATUnicodeString ucContourName = ListOfContours[ 3 ], ucPosStratName = ListOfPosStrategies[ 2 ];
CATIStrUseOpeningsMgr_var spOpeningsMgr = spStiffenerFeat;
if( spOpeningsMgr ==NULL_var )                                              { cout &lt;&lt; "Unable to set MidDist/Offset parameters." &lt;&lt; endl; return 1412; }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting the contour parameters &amp; the strategy parameters</h3>
<p>The <code>CATIStrUseOpeningsMgr</code> interface is used to retrieve the contour &amp; strategy parameters
&amp; the <code>CATIStrUseOpeningStandard</code> is used to set these parameters for the created opening.</p>
<pre class="code">
// ---------------------------------------------
//  Set the list of parameters
// ---------------------------------------------
HRESULT RC = E_FAIL;
CATListValCATBaseUnknown_var ListOfContourParms, ListOfPosParms;
RC = spOpeningsMgr-&gt;GetStandardContourParms( ucContourName, ListOfContourParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to get standard opening contour parameters." &lt;&lt; endl; return 1413; }
RC = spOpeningsMgr-&gt;GetStandardPositioningStrategyParmsForProfile( ucPosStratName, ListOfPosParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to get standard opening positioning strategy parameters." &lt;&lt; endl; return 1414; }
RC = spStdOpening-&gt;SetContourAndPosStrategyForProfile( ucContourName, ListOfContourParms, ucPosStratName, ListOfPosParms );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to set standard opening contour parameters &amp; strategy parameters." &lt;&lt; endl; return 1415; }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting values for the contour parameters &amp; the strategy parameters</h3>
<p>The <code>CATIStrUseOpeningStandard</code> interface provides a dedicated method to set the 
values for the selected contour &amp; the selected strategy.
As far as the MidDist/Offset strategy for opening creation on a profile is concerned, 
two reference surfaces have to
be set, the mid-distance of which is used for opening creation. We use LONG.-2 &amp; 
LONG.2 reference planes as the reference surfaces.
<code>CAASddNavigationServices</code> is used to navigate to LONG.-2 &amp; LONG.2.</p>
<pre class="code">
// ---------------------------------------------
//  Set the values for parameters
// ---------------------------------------------
CATIMmiMechanicalFeature_var spSFDPart;
CAASddNavigationServices::GetMechanicalPartFromProduct( ispRootOccurrence, spSFDPart );
CATUnicodeString ucRefPlaneName = "LONG.2";
CATIMmiMechanicalFeature_var spPlaneLONG2, spPlaneLONG_2;

RC = CAASddNavigationServices::GetReferencePlaneFromAlias( spSFDPart, ucRefPlaneName, spPlaneLONG2 );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to retrieve reference plane LONG.2" &lt;&lt; endl; return 3416; }

ucRefPlaneName = "LONG.-2";
RC = CAASddNavigationServices::GetReferencePlaneFromAlias( spSFDPart, ucRefPlaneName, spPlaneLONG_2 );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to retrieve reference plane LONG.-2." &lt;&lt; endl; return 3417; }

CATUnicodeString ucVOffset = "0", ucAnchorPointName = "Gravity", ucAngleParam = "0";
RC = spStdOpening-&gt;SetMidDistOffsetPosStratParms( spStiffenerFeat, spPlaneLONG2, spPlaneLONG_2, ucVOffset, ucAnchorPointName, ucAngleParam );
if( FAILED(RC) )                                                            { cout &lt;&lt; "Unable to set values for standard opening contour &amp; strategy parameters." &lt;&lt; endl; return 3418; }
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create endcut.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="CAASddUcCreateOpening.htm">Creating an Opening</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="CAASddUcCreateStdOpeningAdpt.htm">Creating an Opening - Adaptor</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
