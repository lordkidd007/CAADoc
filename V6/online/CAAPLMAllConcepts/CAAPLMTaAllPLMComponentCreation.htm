<html>

  <head>
  <meta http-equiv="Content-Language" content="en-us">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 12.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
  <title>PLM Component Creation</title>
  <script language="JavaScript" src="../CAADocJavaScript/submit.js">
  </script>  </head>

  <body >

 

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>PLM Component Creation</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>


   <!---------------------------------comment------------------------------------->
   <table class="abstract">
     <tr>
       <td>
       <h2>Abstract</h2>
       <p><span lang="en-us">This article succinctly describes the different way 
       to create a PLM Component.</span></p>
       <ul>
         <li><a href="#Principle">Principle</a></li>
         <li><a href="#Logic of Creation API">Creation API, the Logic</a></li>
         <li><a href="#PLM New, the Interactive Command">PLM New, the Interactive Command</a></li>
         <li><span lang="en-us"><strong style="font-weight: 400">
         <a href="#InShort">In Short</a></strong></span></li>
         <li><span lang="en-us"><strong style="font-weight: 400">
         <a href="#References">References</a></strong></span></li>
       </ul>
       </td>
     </tr>
   </table>
   <!---------------------------------comment------------------------------------->

      <!---------------------------------comment------------------------------------->
   <h2><a name="Principle"></a>Principle</h2>
<p>A PLM Component is created from a &quot;template&quot;. A template is an instantiable 
PLM Class [<a href="#References">1</a>]. This instantiable PLM Class can be:</p>
<ul>
  <li>an instantiable PLM Class of a PLM Modeler [<a href="#References">2</a>],</li>
  <li>a PLM Class (necessary instantiable) of one customization of a PLM 
  Modeler.&nbsp; </li>
</ul>
<p>The type of a PLM Component (we said core type) can be on of the six PLM Core 
Modeler types [<a href="#References">3</a>]:</p>
<ul>
  <li>PLM Reference</li>
  <li>PLM Representation Reference</li>
  <li>PLM Instance</li>
  <li>PLM Representation Instance</li>
  <li>PLM Port</li>
  <li>PLM Connection</li>
</ul>
<p>Creating a PLM component consists in to create an object of a given 
template, and to valuate its related PLM Attributes [<a href="#References">4</a>]. 
The creation is always client side, in an authoring session [<a href="#References">5</a>], 
the first save will create the object (PLM Object) in the underlying database. </p>
<p>There is no generic API to create a PLM Component, it is necessary an API 
provided by the PLM Modeler.&nbsp;Nevertheless the logic for each modeler is the 
same. Let's us introduce it in the next chapter. </p>
<p>In the last chapter, we introduce the PLM New command that you can invoke in 
 your own command.</p>
 <script type="text/javascript">insertLinkToTop()</script>

<h2><a name="Logic of Creation API"></a>Creation API, the Logic</h2>
<p>Whatever the modeler, if it exposes an API to create one of its PLM object, 
the API will have always the same logic:</p>
<ul>
	<li><a href="#About the input arguments">Checking input arguments</a></li>
	<li><a href="#Invoking the BL">Invoking the 'Initialization' Business logic</a></li>
	<li><a href="#Checking PLM Attributes Safety">Checking PLM Attributes Safety (ok for a save)</a></li>
	<li><a href="#Creating the PLM Object">Creating the PLM Object</a></li>
</ul>
<p><strong><a name="About the input arguments"></a>About the input arguments</strong></p>
<p>The list is not the same according to the PLM object to create, but if you 
find those just below, their meaning will be the same :</p>
<ul>
	<li><strong>The type</strong> of the object to create as a <em>CATIType</em>.
	<p>This argument should be NULL in most cases, otherwise the method will 
	specify the valid value. </p></li>
	<li><strong>The environment </strong>defining the authoring customization as 
	a <em>CATIAdpPLMEnvironment</em><p>If the value is NULL, the current 
	environment is chosen to find the authoring type. </p></li>
	<li><strong>A List of PLM Attributes</strong> as a list of <em>CATICkeParm_var</em> <p>
	This list should be always NULL, otherwise the method will specify the valid 
	PLM Attributes. </p></li>
</ul>
<p><strong><a name="Invoking the BL"></a>Invoking the 'Initialization' Business logic </strong></p>
<p> This step consists in  to call the business logic [<a href="#References">6</a>] 
which valuates the PLM Attributes according to the deployment customization.  </p>
<p> <strong><a name="Checking PLM Attributes Safety"></a>Checking PLM Attributes Safety </strong>  </p>
<p> The API ensures that the created PLM Object could be saved. The mandatory, 
the identification PLM Attributes are not empty, and valid.</p>
<p> <strong><a name="Creating the PLM Object"></a>Creating the PLM Object</strong></p>
<p> Once all the steps are OK, the method finally creates the PLM object. 
Usually the API returns a pointer on the newly created object.&nbsp; But the 
modeler can consider it is useless.</p>
 <script type="text/javascript">insertLinkToTop()</script>

<script type="text/javascript">insertLinkToTop()</script>
    <h2><a name="PLM New, the Interactive Command"></a>PLM New, the Interactive Command
 

</h2>
<p>For some specific PLM Components, the list is hard-coded, you can also create 
them by the PLM New command. In your own command, you launch an instance of the 
PLM New command. The final end user is invited to create his/her PLM Component, 
whose the type is fixed by CAA code, as he could do it with the default PLM New 
command.&nbsp; For more details about this openness, refer to the referenced 
article [<a href="#References">7</a>].

</p>
<p>Except this PLM new API, there is no API to create a PLM object, and open it 
in an editor.

</p>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="InShort"></a>In Short</h2>
   <p>There is no generic API to create a PLM Component, it is necessary API 
   provided by each PLM Modeler. </p>
   
  <script type="text/javascript">insertLinkToTop()</script>

   <!---------------------------------comment------------------------------------->
   <h2><a name="References"></a>References</h2>
   <table  id="table16">
     <tr>
       <td  >[1]</td>
       <td >
		<a href="CAAPLMTaAllPLMDictionary.htm">PLM Dictionary</a></td>
     </tr>
     <tr>
       <td  >[2]</td>
       <td >
		<a href="CAAPLMTaAllCusto.htm">Understanding PLM Modeler and Customization</a></td>
     </tr>
     <tr>
       <td  >[3]</td>
       <td >
		<a href="CAAPLMTaAllCorePrinciples.htm">PLM Core Model Overview</a></td>
     </tr>
     <tr>
       <td  >[4]</td>
       <td ><a href="CAAPLMTaAllAttributes.htm">Understanding PLM Attributes </a> </td>
     </tr>
      <tr>
       <td height="15"  >[5]</td>
       <td height="15" ><a href="CAAPLMTaAllClientServerArchi.htm">PLM Client/Server Architecture Overview</a></td>
     </tr>
     <tr>
       <td  >[6]</td>
       <td >
       <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAABusinessLogicInfra/CAABlo_BL_PLMIdentificationInitialization.htm')">
Identification Initialization Business Logic</a></td>
     </tr>
     <tr>
       <td height="15"  >[7]</td>
       <td height="15" ><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAIpmPLMMngt/CAAIpmTaPLMNew.htm')">
PLM New, Interactive Command</a></td>
     </tr>
    
     </table>
  
   <script type="text/javascript">insertLinkToTop()</script>

   <!---------------------------------comment------------------------------------->
   <h2><a name="History"></a>History</h2>
   <table >
     <tr>
       <td >Version: <strong>1</strong> [Jun 2008]</td>
       <td >Document created</td>
     </tr>
     <tr>
       <td >Version: <strong>2</strong> [Nov 2010]</td>
       <td >&nbsp;Document updated due to new API of creation</td>
     </tr>

   </table>
   <script type="text/javascript">insertLinkToTop()</script>
   <!---------------------------------comment------------------------------------->
   <script type="text/javascript">insertCopyright();</script>


  </body>

</html>

