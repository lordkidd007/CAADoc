<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0014)about:internet -->
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
<title>Understanding PLM Dictionary</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Understanding PLM Dictionary</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains what is the PLM dictionary. </p>
		<ul>
			<li><a href="#Logical View, a Set of PLM Classes">Logical View, a 
			Set of PLM Classes</a></li>
			<li><a href="#PLM Class Definition">PLM Class Definition</a><ul>
				<li><a href="#PLM Class Enriching">PLM Class Enriching</a></li>
				<li><a href="#PLM Class Identifier">PLM Class Type</a></li>
				<li><a href="#PLM Class State">PLM Class Use</a></li>
				<li><a href="#PLM Attributes ( or PLM Data Model )">PLM Attributes (or PLM Data 
				Model)</a></li>
				<li><a href="#PLM Relations">PLM Relations</a> </li>
				<li><a href="#PLM Behaviors">PLM Behaviors</a></li>
			</ul></li>
			<li><a href="#Physical View, Metadata File">Physical View, a Set of Metadata Files</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Logical View, a Set of PLM Classes"></a>Logical View, a Set of PLM 
Classes</h2><font SIZE="2">
</font>
<p>The PLM dictionary is a structure containing PLM Modeler definitions. As 
a PLM Modeler is a set of entities, that we called PLM Class, we can said that 
the PLM dictionary is a set of PLM Classes. </p>
<p>These PLM Classes are like prototypes, ENOVIA V6 server uses them to 
read/write the database: either to create PLM objects (instances of PLM Classes) 
within the vault (database), or to retrieve information on existing PLM 
Objects. The server does not know the database structure, the PLM dictionary 
gives it its structure.</p>
<p>The &quot;PLM Client/Server Architecture Overview&quot; article [<a href="#References">1</a>] 
has already introduced this definition. The objective of the current article is to 
enter deeply within the PLM dictionary definition.</p>
<p>First, we should explain the core of the PLM dictionary, the
<a href="#PLM Class Definition">PLM Class</a>. This definition will be a logical 
definition. Thanks to this kind of presentation it will be easier to explain, 
and by consequence to understand, what is a PLM Modeler and its customizations [<a href="#References">2</a>].</p>
<p>The last chapter, <a href="#Physical View, Metadata File">Physical View, 
Metadata Files</a>, comes back to the concrete view of the PLM dictionary, in 
other words how PLM Classes are physically defined within files, named metadata 
files.</p>
<p>Note: this article does not explain the client view of the PLM dictionary, 
for this purpose there is a dedicated and referenced article&nbsp;[<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>

<h2><a name="PLM Class Definition"></a>PLM Class Definition</h2>
<p>Basically, a PLM Class is defined&nbsp; by:</p>
<ul>
	<li>a name, which is also called its <a href="#PLM Class Identifier">type</a>,</li>
	<li>an <a href="#PLM Class State">use</a>, </li>
	<li>a list of <a href="#PLM Attributes ( or PLM Data Model )">PLM Attributes</a>,</li>
	<li>a list of <a href="#PLM Relations">PLM Relations</a>,</li>
	<li>a list of <a href="#PLM Behaviors">PLM Behaviors</a>.</li>
</ul>
<p>The first four parts are persistent information (stored within the PLM 
dictionary) unlike behaviors which are described by code. Nevertheless behaviors have 
been added in this logical view of the PLM class.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLM Class Enriching"></a>PLM Class Enriching</h3>
<p>A PLM Class can be created from a base PLM Class, in this case we said that 
the new PLM Class enriched the base PLM Class. Enrich means to create a new PLM 
Class having:</p>
<ul>
	<li>its own name, or type</li>
	<li>its own use,</li>
	<li>its own attributes + those of the base class,</li>
	<li>its own relations + those of the base class,</li>
	<li>ts own behaviors + those of the base class</li>
</ul>
<p>To illustrate the purpose, [<a href="#Fig.1">Fig.1</a>] just below, shows 
the creation of a PLM Modeler&nbsp; class (on right) from a PLM Core Modeler 
class (on left). </p>
<table border="0" id="table11">
	<caption align="center"><a name="Fig.1">Fig.1</a> PLM Class Enriching</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAPLMAllCoreModeler_Derivation.gif" width="401" height="290"></td>
	</tr>
</table>
<p>The new PLM Class (on right) contains a new PLM Attribute (<code>PLM 
Attributes 4</code>), no new PLM Relations, and two new PLM Behaviors (<code>PLM 
Behavior 3</code> and <code>PLM Behavior 4</code>)</p>
<p>Take care, the system only permits <b>addition</b>. When a new PLM Class is 
created it is not possible to 
modify or delete attributes, relations or behaviors coming from the base PLM Class. This 
purpose will be detailed in the last three sections of this chapter.</p>
<p>To finish we should add that this PLM Class enriching will be used to create 
PLM Classes for:</p>
<ul>
  <li>PLM Modeler (based on PLM Core Modeler Classes),</li>
  <li>PLM Customization&nbsp; ( based on PLM Modeler Classes).</li>
</ul>
<p>You have dedicated articles to enter deeply in the specificities of&nbsp; 
these PLM Classes [<a href="#References">2</a>][<a href="#References">8</a>], 
but for the current article this light information is sufficient.</p>
<script type="text/javascript">insertLinkToTop()</script>





<h3><a name="PLM Class Identifier"></a>PLM Class Type</h3>
<p>Each PLM Class has its own name. This name is also called&nbsp; 'type'. </p>
<p>Some example:</p>
<ul>
	<li><i>PLMCoreInstance</i> is the type of the PLM Class representing the 
	PLM instance for the PLM Core Modeler. </li>
	<li><i>VPMInstance</i> is the type of the PLM Class representing the PLM instance 
    for the PRODUCT Modeler. </li>
	<li>PLMProductInstanceDS is the type of the PLM Class representing the PLM instance 
    for 
	PLMProductDS, a customization of the PRODUCT Modeler.&nbsp; </li>
</ul>
<p>One important remark: This type is not a late type : you cannot implement interface with 
this name.</p>
<p>This type is located :</p>
<ul>
  <li>within the PLM Class (PLM dictionary)</li>
</ul>
<blockquote>
  <p>In session, this type is accessible through an Object Modeler component 
  implementing <i>CATIType. </i>These kind of objects are build when the PLM 
  dictionary is projected through the Knowledge layer. You have all the details 
  in the referenced article [<a href="#References">3</a>]. </p>
</blockquote>
<ul>
  <li>On PLM Object in database [<a href="#References">1</a>]</li>
</ul>
<blockquote>
  <p>A PLM object, stored in database, is an instantiation of a PLM class. The 
  PLM object will have the same type as the one providing from its original PLM 
  Class. This type will be a mandatory information for database query.</p>
</blockquote>
<ul>
  <li>On PLM Object in session </li>
</ul>
<blockquote>
  <p>The PLM object in session is represented by an Object Modeler component 
  implementing <i>CATIPLMComponent</i>. This interface enables you to retrieve 
  the type of the PLM object. This type is represented in session by&nbsp; an 
  Object Modeler component implementing <i>CATIAdpType. </i></p>
</blockquote>
<script type="text/javascript">insertLinkToTop()</script>

<h3>
<a name="PLM Class State"></a>PLM Class Use</h3>
<p>A PLM Class is created with an use. There are three kinds of use:</p>
<ul>
	<li><b>Instantiation </b>use: Such a PLM Class is a concrete PLM Class, it 
	can only be used to create PLM object in the vault.</li>
	<li><b>Customization</b> use: Such a PLM Class is an abstract PLM Class, it 
	cannot be used to create PLM object in the vault. Its unique use is to be 
	enriched to create a new PLM Class which will be concrete, i.e. for 
	instantiation use.</li>
	<li><b>Internal</b> use : Such a PLM Class is also abstract. It can be used 
	to create a new PLM Class which can have the three uses: instantiation, 
	customization or internal.</li>
</ul>
<p>The following picture illustrates these three cases:</p>
<table border="0" id="table16">
	<caption align="center"> Fig.2 PLM Class Use Categories</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAPLMAllDictionary_PLMClassUse.gif"></td>
	</tr>
</table>
<p>You can see:</p>
<ul>
	<li>Only an &quot;instantiable&quot; PLM Class (black circle) can be used to create a 
	PLM object within the vault</li>
	<li>The only one possibilities to create new PLM class are 
	<ul>
		<li>From an internal PLM Class (white circle) : all PLM class use 
		categories are possible (1)/(2)/(3) </li>
		<li>From a customizable PLM Class (dashed circle) : only an &quot;instantiable 
		PLM Class&quot; (4)</li>
		<li>from an instantiable PLM Class: never</li>
	</ul>
	</li>
</ul>
<p>These uses are internally (within the PLM Dictionary) defined by two tags:</p>
<ul>
	<li><b>Abstract</b> (yes/no ) : can be used or not to create a PLM object ,</li>
	<li><b>CAA2Derivable</b> (Yes/no): can be enriched or not by an another people as the PLM 
	Modeler creator</li>
</ul>
<p>This table gives the tag's values for each use:</p>
<table border="1" id="table15">
	<tr>
		<th>PLM Class Use</th>
		<th>Abstract</th>
		<th>CAA2Derivable</th>
	</tr>
	<tr>
		<td><b>Instantiable</b> </td>
		<td align="center">NO</td>
		<td align="center">NO</td>
	</tr>
	<tr>
		<td><b>Customizable</b> </td>
		<td align="center">YES</td>
		<td align="center">YES</td>
	</tr>
	<tr>
		<td><b>Internal</b> </td>
		<td align="center">YES</td>
		<td align="center">NO</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="PLM Attributes ( or PLM Data Model )"></a>PLM Attributes ( or PLM Data Model )</h3>
<p>As any database, objects are defined through attributes. The type of a PLM Attribute can 
be string, int, float, date, boolean or enumeration. The Understanding PLM 
Attribute article is completely dedicated to describe what are PLM 
Attributes [<a href="#References">4</a>].</p>
<p>Such as mentioned just above, there is PLM Attribute inheritance. On a PLM 
Class resulting from a PLM customization, we will have the following PLM 
attributes:</p>
<ul>
	<li>Those of the base PLM Core Class,</li>
	<li>Those of the PLM Modeler Class ,</li>
	<li>Those of the customization Class.</li>
</ul>
<p>But, at each level it is not possible to delete or modify a PLM Attribute 
defined in a upper level. One example: a PLM Attribute defined as &quot;mandatory&quot; 
for one PLM Core Modeler class, cannot be changed as optional by a customization.&nbsp; 
(*)</p>
<p>The set of PLM Attributes for a PLM Class is also known as the&nbsp;<b>PLM 
Data Model</b>. </p>
<p>(*) see possible exception through PLM mask [<a href="#References">6</a>]</p>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="PLM Relations"></a>PLM Relations </h3>
<p>A PLM relation is an entity characterizing the link between two PLM 
classes. As of today, there are only three kinds of PLM relation:</p>
<ul>
	<li>aggregation </li>
	<li>Instance<i> </i>Of</li>
	<li>Referencing </li>
</ul>
<p>A PLM Class can support several PLM Relations.</p>
<p>Note: as of today, only the PLM Core Modeler can define PLM relations. PLM 
Modelers and PLM customization cannot add new PLM Relations. </p>
<p>Like PLM Attributes, PLM relations are stored in the PLM dictionary. </p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLM Behaviors"></a>PLM Behaviors</h3>
<p>Each PLM Class represents a semantic by its PLM Relation and its PLM 
Attributes. But it is not enough to define a PLM class, we shoud add behaviors. </p>
<p>PLM behaviors defined on the PLM Core Modeler Classes cannot be 
superseded. </p>
<p>A PLM Modeler which has its own semantic can add its own behavior. </p>
<p>For a PLM class of a PLM Customization, it is not possible to add PLM 
behaviors. Nevertheless PLM Business logic [<a href="#References">7</a>] enables 
an administrator to introduce PLM behavior customization. But in all cases, this 
customization will never break the PLM Behaviors defined by the PLM Modeler or 
the PLM Core Modeler. </p>

<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Physical View, Metadata File"></a>Physical View, a Set of Metadata Files</h2>
<p>In the previous section we have described that the PLM Class is like the 
summation of 
attributes, relations and behaviors: those of the PLM Class itself, and those of 
its base PLM Classes. Nevertheless it is a logical view enabling&nbsp; you to 
understand the concept. In fact:</p>
<ul>
	<li>Behaviors are not included in the PLM dictionary, (they are defined by 
	code)</li>
	<li>Attributes and relations are not grouped together like it is illustrated 
	on [<a href="#Fig.1">Fig.1</a>]</li>
</ul>
<p>Physically, the PLM dictionary contains metadata files defined in xml. There 
are </p>
<ul>
	<li>one XML file for the PLM Core Modeler</li>
	<li>one or more for the PLM Modeler ( one for the modeler, and one for 
	each intermediate modeler if they exists) - See the article [<a href="#References">2</a>] 
	for intermediate modeler definition</li>
	<li>one per customization of a PLM Modeler</li>
</ul>
<p>A picture to illustrate the purpose. It is the physical representation of the 
PLM Classes represented [<a href="#Fig.1">Fig.1</a>].</p>
<table border="0" id="table17">
	<caption><a name="Fig.3">Fig.3</a> Metadata Files</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAPLMAllDictionary_metadata.gif" width="566" height="312"></td>
	</tr>
</table>
<p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
On [<a href="#Fig.3">Fig.3</a>]&nbsp; (*) two metadata files are drawn:</p>
<ul>
	<li>Those of the PLM Core Modeler :&nbsp; You retrieve the attributes and the relations 
	presented on [<a href="#Fig.1">Fig.1</a>] </li>
	<li>Those of the PLM Modeler: Compare with [<a href="#Fig.1">Fig.1</a>], you can see that 
    in opposite to the logical view, the PLM Class within the metadata only 
	contains the PLM Attribute added by the PLM Modeler.</li>
</ul>
<p>(*) only one PLM Class has been represented. The&nbsp; PLM Core Modeler 
contains six PLM Classes, and the PLM Modeler can contain at least six PLM 
Classes.</p>
<p>A metadata file contains entities (or xml tag). Each 
entity contains:</p>
<ul>
	<li>the name of the class</li>
	<li>the abstract and CAA2derivable tags,</li>
	<li>the attributes of the class (only those of the level)</li>
	<li>the relations of the class (only those of the level)</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h2><a name="InShort"></a>In Short</h2>

<p>In this article you have learned that the PLM dictionary contains a set of 
PLM Classes defining PLM Modelers. A PLM Class contains :</p>
<ul>
	<li>a type,</li>
    <li>an use,</li>
    <li>PLM Attributes of the PLM Class&nbsp;&nbsp; + those of its base PLM 
	Classes</li>
	<li>PLM Relations of the PLM Class&nbsp;&nbsp; + those of its base PLM 
	Classes</li>
	<li>PLM Behaviors&nbsp; of the PLM Class + those of its base PLM Classes</li>
</ul>
<p>The physical contents of the PLM dictionary are metadata files, where the PLM 
Behaviors are not present, and which only contains the information defined by 
the level. </p>
<p>The list of PLM Classes for each PLM Modeler and their sample 
customization, is available in the CAA encyclopedia [<a href="#References">5</a>]. 
In these pages, named PLM Data Model pages, you have access to the PLM Class 
types, and their public PLM 
attributes [<a href="#References">4</a>]. </p>
<script type="text/javascript">insertLinkToTop()</script>

<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td valign="top">[1]</td>
		<td><a href="CAAPLMTaAllClientServerArchi.htm">PLM Client/Server 
		Architecture Overview</a></td>
	</tr>
	
	<tr>
		<td valign="top">[2]</td>
		<td><a href="CAAPLMTaAllCusto.htm">Understanding PLM Modeler and Customization</a></td>
	</tr>
	
		<tr>
		<td valign="top">[4]</td>
		<td><a href="CAAPLMTaAllAttributes.htm">Understanding PLM Attributes</a></td>
	</tr>
	<tr>
		<td valign="top">[5]</td>
		<td>
				PLM Dictionary  Reference</td>
	</tr>
	<tr>
		<td valign="top">[6]</td>
		<td><a href="CAAPLMTaAllMask.htm">Understanding PLM Mask</a></td>
	</tr>
	
	<tr>
		<td valign="top">[7]</td>
		<td>PLM Openness Overview</td>
	</tr>
	
	<tr>
		<td valign="top">[8]</td>
		<td><a href="CAAPLMTaAllCoreModelerReference.htm">PLM Core Modeler 
        Reference</a></td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop()</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <b>1</b> [Dec 2007]</td>
		<td valign="top">Document created</td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

