<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
<title>PLM Core Model Overview</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>PLM Core Model Overview</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This article gives an introduction to the PLM Core fundamentals.</p>
      <ul>
        <li><strong style="font-weight: 400"><a href="#Part1">PLM Kernel</a></strong><ul>
        <li><strong style="font-weight: 400"><a href="#UnifiedModel">Unified Model</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#BasicServices">Basic Services</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#CollaborativeDAGs">Collaborative DAGs</a></strong></li>
      </ul>
    	</li>
        <li><strong style="font-weight: 400"><a href="#Part2">PLM Core Model</a></strong><ul>
        <li><strong style="font-weight: 400"><a href="#CommonCapabilities">Common Capabilities</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMRepRef">PLM Reference</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMInst">PLM Instance</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMPort">PLM Port</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMConnection">PLM Connection</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMRepRef">PLM Representation Reference</a></strong></li>
		<li><strong style="font-weight: 400"><a href="#PLMRepInst">PLM Representation Instance</a></strong></li>
      </ul>
    	</li>
        <li><strong style="font-weight: 400"><a href="#InShort">In Short</a></strong></li>
        <li><strong style="font-weight: 400"><a href="#References">References</a></strong></li>
      </ul>
    </td>
  </tr>
</table>
<!---------------------------------comment------------------------------------->
<h2><a name="Part1"></a>PLM Kernel</h2>
<p>The PLM kernel consists of three layers as illustrated by the following 
figure, from the bottom to the top:</p>
<ul>
	<li>The PLM Meta Model Foundation, where the Entity-relationship model is 
	defined along with PDM concepts</li>
	<li>The PLM Core Model, a specialization of the Meta Model</li>
	<li>The Component Models, which are in turn specializations of the PLM Core 
	Model</li>
</ul>
<p align="center">
<img border="0" src="images/plmlayers.jpg" width="621" height="370"></p>
<p align="center">Fig. 1 - The three layers of the PLM kernel</p>
<p>In this article, we will focus on the PLM Core Model layer.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="UnifiedModel"></a>Unified Model</h3>
<p>The PLM core can be qualified as <b> <i>simple</i></b>, <b> <i>unbreakable</i></b>, 
<b> <i>agile</i></b> 
and <b> <i>efficient</i></b>.</p>
<p>In order to support PLM (Product Life cycle Management) across all types of 
application, a unified model is created with six classes implementing life 
cycle operations (versioning, maturity, etc). These classes which form the PLM 
Core Model are: 
Reference, Instance, Port, Connection, Representation Reference and 
Representation Instance. This model, based on the 
Entity-Relationship model, is kept <b> <i>simple</i></b> as each class is clearly 
designed for a 
concise and specific usage.</p>
<p>These six classes are in turn specialized by component modelers (henceforth 
referenced to as modelers) to 
create their own types. These types can extend the core's behavior but 
not supersede it, thus always ensuring that basic life cyle operations 
implemented by the core are<i> 
<b>unbreakable</b></i> (the core's behavior will always be carried out, no matter how 
it is extended.)</p>
<p>A modeler specialization is defined using declarative means in the PLM 
dictionary, with these declarations being projected in a second stage to the 
database. A modeler can also declare that its types can be further 
customized by end users with tools like RADE and the same PLM Dictionary, 
enabling an <b> <i>agile</i></b> PLM Core model.</p>
<p>A compact set of core classes combined with basic services (see following 
section) 
contributes to make the PLM core highly optimized and <b> <i>efficient</i></b>, 
benefiting all modelers.</p>
<script type="text/javascript">insertLinkToTop()</script>


<h3><a name="BasicServices"></a>Basic Services</h3>
<p>On this reduced set of core classes are implemented operations that are 
available to modelers through declarative structures without the need of a single line of code. These 
operations can be seperated into three groups:</p>
<ul>
	<li>Create, Update and Delete (CrUD)</li>
	<li>Query, Expand, Open and Save (QEOpS): the PLM vocabulary to move PLM 
	components between the client and the server</li>
	<li>Life cycle management (Maturity, Versioning, etc...)</li>
</ul>
<p align="center">
<img border="0" src="images/plmcore.jpg" width="518" height="258"></p>
<p align="center">Fig. 2 - The PLM Core Layer</p>
<script type="text/javascript">insertLinkToTop()</script>


<h3><a name="CollaborativeDAGs"></a>Collaborative DAGs</h3>
<p>Modeler's components are organized as a Direct Acyclic Graphs (DAG) that can 
be expanded as trees, thus 
ensuring a clear separation. However, collaborating 
modelers can still share components thanks to referencing relations, the 
only of kind of relation allowed to cross a DAG boundary.</p>
<p align="center">
<img border="0" src="images/plmdags.jpg" width="582" height="234"></p>
<p align="center">Fig. 3 - The PLM DAGs</p>
<p>To sum up, the PLM core consists in a reduced set of classes implementing basic 
operations and life cycle behaviors. The PLM components are organized as 
separated DAGs, with only referencing relations allowed between DAGs.</p>
<script type="text/javascript">insertLinkToTop()</script>

<h2><a name="Part2"></a>PLM Core Model</h2>
<p>In this section we will detail each class composing the PLM Core model. Let's 
start with the capabilities that are common to all PLM classes.</p>
<script type="text/javascript">insertLinkToTop()</script>


<h3><a name="CommonCapabilities"></a>Common Capabilities</h3>
<p>All the PLM Core classes support the following capabilities:</p>
<ul>
	<li>The ability to be specialized by modelers or customized by  
	end-users. Remember that attributes, relations or behavior can only be 
	augmented but not superseded.</li>
	<li>The basic PLM operations such as Create, Update and Delete (CrUD) and 
	the life cycle management.</li>
	<li>Three kinds of possible relations:<ul>
		<li>Aggregation</li>
		<li>Instance<i> </i>Of</li>
		<li>Referencing</li>
	</ul>
	</li>
	<li>The ability to store private data as multiple streams in a vault.</li>
</ul>
<p>A PLM component is defined as a single entity with its identification, 
to which are appended &quot;satellite&quot; PLM information units like extensions, vault 
links, relations and lists. A given satellite unit can only belong to one and 
only PLM component.</p>
<p>Such a PLM component is considered to be the &quot;atom of concurrent 
modification&quot; implying that:</p>
<ul>
	<li>A modification of the PLM entity or of one of its satellites is viewed 
	as a modification of the PLM component</li>
	<li>Modifications of a component are serialized: only one modification at a time is 
	allowed. No concurrent modification is thus possible on a given component.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLMRef"></a>PLM Reference</h3>
<p><img border="0" src="images/reference.png" width="79" height="51"></p>
<p>The <b>Reference</b> as represented by the above illustration, is the PLM building block. Its particularities are:</p>
<ul>
	<li>Can be used/resused</li>
	<li>Is a <i>Separable</i> component, i.e. must exist by itself</li>
	<li>Can aggregate other components</li>
	<li>Cannot be aggregated</li>
	<li>Carries a maturity</li>
	<li>Is versionable</li>
	<li>Duplicating or versioning a Reference is to duplicate itself and its 
	aggregated objects (instances/connection/port/ and its mono-instantiable 
	Representation Reference )</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLMInst"></a>PLM Instance</h3>
<p><img border="0" src="images/instance.png" width="66" height="40"></p>
<p>The <b>Instance</b>:</p>
<ul>
	<li>Is the result of a Reference being used (by a Reference)</li>
	<li>Is aggregated by a Reference (not<i> Separable</i>)</li>
	<li>Points to its Reference via an<i> Instance Of </i>relation</li>
	<li>May carry an effectivity</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLMPort"></a>PLM Port</h3>
<p><img border="0" src="images/port.png" width="71" height="40"></p>
<p>The <b>Port</b> provides a stable abstraction of private data to the outside, 
isolating both parties (the outside and the private data) from each other.</p>
<ul>
	<li>Is aggregated by a Reference (<i>not Separable</i>)</li>
	<li>&quot;Exposes&quot; an Instance, another Port, or representation</li>
    <li>carrie a single &quot;referencing&quot; relation to the exposed object</li>
	<li>Offers a stable name</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLMConnection"></a>PLM Connection</h3>
<p><img border="0" src="images/connection.png" width="122" height="40"></p>
<p>The <b>Connection</b> models semantic relationships between 
PLM components.</p>
<ul>
	<li>Is aggregated by a Reference (<i>not Separable</i>)</li>
	<li>&quot;Connects&quot; entities through multiple &quot;referencing&quot; relations.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>


<h3><a name="PLMRepRef"></a>PLM Representation Reference</h3>
<p><img border="0" src="images/repreference.png" width="79" height="51"></p>
<p>The <b>Representation Reference</b> is alike to a Reference:</p>
<ul>
	<li>Can be used/resused</li>
	<li>Is a <i>Separable</i> component, i.e. can exist by itself</li>
	<li>Cannot be aggregated</li>
	<li>Carries a maturity</li>
	<li>Is versionable</li>
	<li>Carries private data streams, handled via Vault links</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>

<h3><a name="PLMRepInst"></a>PLM Representation Instance</h3>
<p><img border="0" src="images/repinstance.png" width="66" height="40"></p>
<p>The <b>Representation Instance</b> is alike to an Instance:</p>
<ul>
	<li>Is the result of a Representation Reference being used (by a Reference)</li>
	<li>Is aggregated by a Reference (<i>not Separable</i>)</li>
	<li>Points to its Representation Reference via an<i> Instance Of </i>relation</li>
	<li>Cannot carry an effectivity</li>
</ul>
<p>In summary, here is the figure that illustrates all the PLM Core components and 
how they fit together:</p>
<p align="center">
<img border="0" src="images/plmcoreobjects.jpg" width="304" height="276"></p>
<p align="center">Fig. 4 - The PLM Core Components</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>You've been given a short overview of the PLM Core Model consisting of six 
classes: Reference, Instance, Port, Connection, Representation Reference and 
Representation Instance.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!---------------------------------comment------------------------------------->


<h2><a name="References"></a>References</h2>
<table>
  <tr>
    <td>[1]</td>
    <td> </td>
  </tr>
  
</table>
<script type="text/javascript">insertLinkToTop()</script>

<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td >Version: <strong>1</strong> [Jun 2006]</td>
    <td >Document created</td>
  </tr>
 
</table>
<script type="text/javascript">insertLinkToTop()</script>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

