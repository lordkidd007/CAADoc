<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating an Interruptible Task</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Interruptible Task</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create an interruptible task with an indicator 
		of progression.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAAfrProgressTask Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrProgressTask Do</a></li>
					<li><a href="#How">How to Launch CAAAfrProgressTask</a></li>
					<li><a href="#Where">Where to Find the CAAAfrProgressTask Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Some processes can take so long that a user interface indicating the progression 
can be very useful. It can be also interesting to give the end user the ability 
to stop the task. This article shows how this information and control can be implemented 
by a DS component. You will need to:</p>
<ul>
	<li>Implement the <em>CATIProgressTask</em> interface to perform the task and 
		control the end user interface through the <em>CATIProgressTaskUI</em> interface,
	</li>
	<li>Use the <em>CATTaskController</em> class to launch the task.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrProgressTask Use Case</h2>
<p>CAAAfrProgressTask is a use case of the CAAApplicationFrame.edu framework that 
illustrates AfrStandard framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrProgressTask Do</h3>
<p>This use case simulates a long process . The task is composed of fifty steps, 
each step consisting in to execution of the following code:</p>
<pre class="code">for ( int j= 0 ; j&lt;= 5000000 ; j++)
{
   double k = 24.25 * (double) j ;
}</pre>
<p>The progression of the process is indicated by using a DS component which displays 
the following dialog box:</p>
<table>
	<caption><a name="Fig.1"></a>Fig.1: Progress Bar Dialog</caption>
	<tr>
		<td>
		<img alt="Progress Bar Dialog" height="190" src="images/CAAAfrProgressTaskCmdDlgWithCancel.jpg" width="682"/></td>
	</tr>
</table>
<p>In this dialog box there are four parts (surrounded in red) that the programmer 
can customize:</p>
<ul>
	<li>The title of the dialog box</li>
	<li>The icon, located at top left, symbolizing the task</li>
	<li>The name of the object concerned by the task</li>
	<li>A comment just above the progress bar.</li>
</ul>
<p>The others parts are:</p>
<ul>
	<li>Three ways of estimating the progress of the process
		<ul>
			<li>A progress bar</li>
			<li>The percentage of the task already executed</li>
			<li>An estimation of the remaining time.</li>
		</ul>
	</li>
	<li>A Cancel button used to stop the process ( this button is optional)</li>
</ul>
<p>This task is launched from an interactive command that has been added to the 
<kbd>CAA: Analyse Geom</kbd> app of the CAAGeometry model. This command, <kbd>Progress 
Task</kbd> has been defined in the <kbd>CAA Geometry Analysis Section</kbd> 
of the action bar: </p>
<table>
	<caption><a name="Fig.2"></a>Fig.2: &quot;Progress Task&quot; command in the &quot;Geometry Analysis Section&quot; 
	of action bar</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrProgressTaskCmd.jpg" width="352" height="167"/></td>
	</tr>
</table>
<p>This command is a <em>CATDlgDialog</em> having the following user interface:</p>
<table>
	<caption style="width: 184px"><a name="Fig.3"></a>Fig.3: The <kbd>Progress Task</kbd> Command</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrProgressTaskCmdDlg2.jpg" width="144" height="123"/></td>
	</tr>
</table>
<ul>
	<li>The <kbd>Interruptible Task</kbd> check button enables the display of the <kbd>Cancel</kbd> 
		button in the dialog box containing the progress bar [<a href="#Fig.1">Fig.1</a>].
	</li>
	<li>If the end use clicks on the <kbd>Compute</kbd> button, the task is launched.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrProgressTask</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">2</a>] for a detailed description of how this use case should 
be launched. For the specific scenario :</p>
<p>Launch 3DEXPERIENCE. When the application is ready:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Analyse Geom</kbd> 
	app</li>
	<li>Launch the <kbd>Progress Task</kbd> command to see the <kbd>Interruptible 
		Task</kbd> dialog box.
	</li>
	<li>Click <kbd>Compute</kbd>
		<ul>
			<li>The <kbd>Computing</kbd> Dialog box appears without the
				<kbd>Cancel</kbd> button. Wait until the end of the process</li>
		</ul>
	</li>
	<li>Check <kbd>Interruptible Task</kbd> in the <kbd>Interruptible Task</kbd> 
		dialog box</li>
	<li>Click <kbd>Compute</kbd>
		<ul>
			<li>The <kbd>Computing</kbd> Dialog box appears with the
				<kbd>Cancel</kbd> button</li>
			<li>Click <kbd>Cancel</kbd> before the end of the process.</li>
		</ul>
	</li>
	<li>Click <kbd>Compute</kbd>
		<ul>
			<li>The <kbd>Computing</kbd> Dialog box appears with the
				<kbd>Cancel</kbd> button. Wait until the end of the process</li>
		</ul>
	</li>
	<li>Click <kbd>Close</kbd> in the <kbd>Interruptible Task</kbd> 
		dialog box.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrProgressTask Code</h3>
<p>The CAAAfrProgressTask use case is made of a single file located in the CAAAfrProgressTask.m 
module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrProgressTask.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in CAAAfrProgressTask:</p>
<ol>
	<li><a href="#Step1">Creating the Interactive Command</a></li>
	<li><a href="#Step2">Implementing the CATIProgressTask Interface</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Interactive Command</h3>
<p>This command is called <em>CAAAfrProgressTaskSampleCmd</em>. This section describes:</p>
<ol>
	<li><a href="#Step11">The header file</a></li>
	<li><a href="#Step12">The source file</a></li>
	<li><a href="#Step13">The NLS resource file</a></li>
</ol>
<ol>
	<li><a name="Step11"></a>The header file
		<pre class="code">// Dialog Framework
#include &quot;CATDlgDialog.h&quot;     // Needed to derive from CATDlgDialog

// Dialog Framework
class CATDlgCheckButton;
// AfrFoundation Framework
class CATFrmEditor;

class CAAAfrProgressTaskSampleCmd : public CATDlgDialog
{
  ...
  <strong>DeclareResource</strong>(CAAAfrProgressTaskSampleCmd, CATDlgDialog);
  
  public :
    
    CAAAfrProgressTaskSampleCmd();
    virtual ~CAAAfrProgressTaskSampleCmd();  
    ...

  private : 

    void <strong>ClickCompute</strong>(CATCommand            *iPublishingCommand, 
                    CATNotification         *iNotification, 
                    CATCommandClientData     iUsefulData);
 
    void <strong>ClickClose</strong>(CATCommand              *iPublishingCommand, 
                    CATNotification         *iNotification, 
                    CATCommandClientData     iUsefulData);
                    
    void <strong>EditorClose</strong>  (CATCallbackEvent  iEvent,
                       void             *iFrom,
                       CATNotification  *iNotification,
                       CATSubscriberData iData,
                       CATCallback       iCallBack);
                           
    CAAAfrProgressTaskSampleCmd(const CAAAfrProgressTaskSampleCmd &amp;iObjectToCopy);

    CAAAfrProgressTaskSampleCmd &amp; operator = (const CAAAfrProgressTaskSampleCmd &amp;iObjectToCopy);

  private : 

    <strong>CATDlgCheckButton</strong> * _pInterruptTask  ;
    <strong>CATFrmEditor</strong>      * _pEditor ;
};</pre>
		<p>This header file contains the following declaration:</p>
		<ul>
			<li>The class derives from <em>CATDlgDialog</em></li>
			<li>The <code>DeclareResource</code> macro states that the resources 
				of the <em>CAAAfrProgressTaskSampleCmd</em> command class are located 
				in the CAAAfrProgressTaskSampleCmd.CATNls file. If resources were 
				assigned to the <em>CATDlgDialog</em> class, they would be concatenated 
				with those of <em>CAAAfrProgressTaskSampleCmd</em></li>
			<li>As usual, the class has a constructor and a destructor</li>
			<li>The copy constructor and the &quot;=&quot; operator are set as private 
				to prevent the compiler from automatically creating them as public.</li>
			<li>Two callback methods contain the code to be executed when the end 
				user presses either Compute or Close</li>
			<li>A callback method, <code>EditorClose</code> , to be prevent when 
				an editor is closed. If this editor, referenced by <code>_pEditor</code>, 
				is those which has launched the command, the command kills it.</li>
			<li>A check button</li>
		</ul>
	</li>
	<li><a name="Step12"></a>The source file
		<ul>
			<li>The necessary header files:
				<pre class="code">// COPYRIGHT DASSAULT SYSTEMES 2002

//Local Framework
#include &quot;CAAAfrProgressTaskSampleCmd.h&quot;

// Dialog Framework
#include &quot;CATDlgCheckButton.h&quot;
#include &quot;CATDlgPushButton.h&quot;
#include &quot;CATDlgGridConstraints.h&quot;
...

//AfrFoundation Framework
#include &quot;CATApplicationFrame.h&quot;
#include &quot;CATFrmEditor.h&quot;
//AfrStandard Framework
#include &quot;CATTaskController.h&quot;
...

// C++ standard library
#include &quot;iostream.h&quot;
...</pre>
			</li>
			<li>This command is launched from a header command:
				<pre class="code">...
#include &quot;<strong>CATCreateExternalObject</strong>.h&quot;
<strong>CATCreateClass</strong>(CAAAfrProgressTaskSampleCmd);
...</pre>
				<p>The <code>CATCreateClass</code> macro enables the instantiation 
				of the command by its class name.</p>
			</li>
			<li>The constructor:
				<pre class="code">...
CAAAfrProgressTaskSampleCmd::CAAAfrProgressTaskSampleCmd()
          :<strong>CATDlgDialog</strong> ((CATApplicationFrame::GetFrame())-&gt;GetMainWindow(), 
                          &quot;CAAAfrProgressTaskSampleId&quot;,
                          CATDlgGridLayout | CATDlgWndBtnClose )
{
  _pInterruptTask = new <strong>CATDlgCheckButton</strong>(this, &quot;InterruptId&quot; );
  _pInterruptTask-&gt;SetGridConstraints(0,0,1,1,CATGRID_CENTER);      
  
  CATDlgPushButton * pComputeButton   = NULL ;
  pComputeButton = new <strong>CATDlgPushButton</strong>(this, &quot;ComputeButtonId&quot; );
  pComputeButton-&gt;SetGridConstraints(1,0,1,1,CATGRID_CENTER);      

  AddAnalyseNotificationCB(pComputeButton, pComputeButton-&gt;GetPushBActivateNotification(),
                (CATCommandMethod)&amp;CAAAfrProgressTaskSampleCmd::<strong>ClickCompute</strong>,
                            NULL);
  
  AddAnalyseNotificationCB(this, this-&gt;GetWindCloseNotification(),
                (CATCommandMethod)&amp;CAAAfrProgressTaskSampleCmd::<strong>ClickClose</strong>,
                            NULL);
  AddAnalyseNotificationCB(this, this-&gt;GetDiaCLOSENotification(),
                (CATCommandMethod)&amp;CAAAfrProgressTaskSampleCmd::<strong>ClickClose</strong>,
                            NULL);

  <strong>_pEditor</strong> = CATFrmEditor::GetCurrentEditor();
  if ( (NULL != _pEditor) &amp;&amp; (NULL != CATFrmLayout::GetCurrentLayout()) )
  {
     ::<strong>AddCallback</strong>(this,
                CATFrmLayout::GetCurrentLayout(),
		  CATFrmEditor::EDITOR_CLOSE_ENDED(),
		  (CATSubscriberMethod)&amp;CAAAfrProgressTaskSampleCmd::EditorClose,
		  NULL);
  }
  <strong>SetVisibility</strong>(CATDlgShow);
}
...
</pre>
				<p>The application main frame is the parent of the dialog box. 
				The style of this dialog box is <code>CATDlgGridLayout</code> to 
				enhance the positioning of each included dialog object and <code>
				CATDlgWndBtnClose</code> to display only one button, the <code>Close</code> 
				button, at the bottom of the box.</p>
				<p>This dialog box has two included dialog objects:</p>
				<ul>
					<li>a check button, referenced by the <code>_pInterruptTask</code> 
						pointer, to enable the end user to request the task to be 
						interruptible or not. </li>
					<li>a push button, referenced by the <code>pComputeButton</code> 
						pointer, to launch the task</li>
				</ul>
				<p>The <code>ClickClose</code> callback method is called when the 
				end user clicks:</p>
				<ul>
					<li>on the Close Button: the <code>GetDiaCLOSENotification</code> 
						notification is used</li>
					<li>on the Close window (NT: the cross at upper right corner 
						and UNIX the right mouse button on the banner): the
						<code>GetWindCloseNotification</code> notification is used</li>
				</ul>
				<p>Finally, we set a callback to be prevent when an editor is closed. 
				This notification is sent by the current layout (a singleton during 
				the session). </p>
			</li>
			<li>The destructor:
				<p>In the destructor code, it is not necessary to delete the dialog 
				object created in this command, as it will be automatically deleted 
				by the Dialog process, but it is strongly recommended to reset the 
				data member to NULL. </p>
				<pre class="code">...
CAAAfrProgressTaskSampleCmd::~CAAAfrProgressTaskSampleCmd() 
{
   _pInterruptTask   = NULL ;
   
   if ( (NULL != _pEditor) &amp;&amp; ( NULL != CATFrmLayout::GetCurrentLayout()) )
   {
      ::<strong>RemoveSubscriberCallbacks</strong>(this,CATFrmLayout::GetCurrentLayout());
   }
   _pEditor = NULL ;
}
...</pre>
				<p>The callback set in the constructor must be removed, unless if 
				the destruction has been requested from the <code>EditorClose</code> 
				method where the remove has already be done.</p>
			</li>
			<li>The ClickCompute method:
				<pre class="code">...
void CAAAfrProgressTaskSampleCmd::ClickCompute (   CATCommand          * iPublishingCommand,
                                              CATNotification     * iNotification,
                                              CATCommandClientData  iUsefulData)
{
  <strong>CATTaskController  Task</strong>;

  <strong>CATIProgressTask</strong> * pIProgressTask = NULL ;
  HRESULT rc = QueryInterface(IID_CATIProgressTask,(void**)&amp; pIProgressTask);

  if ( SUCCEEDED(rc) &amp;&amp; (NULL != _pInterruptTask ) )
  {
      if ( CATDlgCheck == _pInterruptTask-&gt;GetState() )
      {
         Task.<strong>Schedule</strong>(pIProgressTask,<strong>TRUE</strong>,NULL);
      }else
      {
         Task.<strong>Schedule</strong>(pIProgressTask,<strong>FALSE</strong>,NULL);
      }

      pIProgressTask-&gt;Release();
      pIProgressTask = NULL ;
  }
}
...</pre>
				<p>The end user has clicked on the &quot;Compute&quot; button and 
				the task must be launched. This is possible by using the <em>CATTaskControler</em> 
				(AfrStandard framework). The <code>Schedule</code> method will launch 
				a command which contains the dialog box with the progress bar [<a href="#Fig.1">Fig.1</a>]. 
				The arguments of this method are respectively:</p>
				<ul>
					<li>The <em>CATIProgressTask</em> interface pointer, referenced 
						by <code>pIProgressTask</code>. In this case the command 
						itself implements this interface, so it performs a <code>
						QueryInterface</code> on itself </li>
					<li>A boolean to indicate if the Cancel button must be displayed. 
						In this case, the <code>_pInterruptTask</code> check button 
						contains the end user choice.</li>
					<li>A value (here NULL) used as input data of the <code>PerformTask</code> 
						method.</li>
				</ul>
			</li>
			<li>The ClickClose method:
				<pre class="code">...
void CAAAfrProgressTaskSampleCmd::ClickClose(CATCommand           * iPublishingCommand,
                                          CATNotification      * iNotification,
                                          CATCommandClientData   iUsefulData)
{
  SetVisibility(CATDlgHide);
                         
  <strong>RequestDelayedDestruction</strong>();
}
...</pre>
				<p><code>RequestDelayedDestruction</code> enables to delete the 
				command.</p>
			</li>
			<li>The EditorClose method:
				<pre class="code">...
void CAAAfrProgressTaskSampleCmd::EditorClose(CATCallbackEvent  iEvent, 
                                              void            * iFrom,
                                              CATNotification * iNotification,
                                              CATSubscriberData iClientData,
                                              CATCallback       iCallBack ) 
{
  if ( <strong>_pEditor == iFrom</strong> )
   {
   
      // Now this extension will receive any message.
      //
      ::<strong>RemoveSubscriberCallbacks</strong>(this,CATFrmLayout::GetCurrentLayout());

      // Suicide
      <strong>RequestDelayedDestruction</strong>();

      _pEditor = NULL ; 
   }
}
...</pre>
				<p>An editor is closed, i.e a model is closed. The layout sends 
				a notification indicating that the publisher is the editor; The 
				variable iFrom is the editor to be closed. If this editor is the 
				same as the one that has launched the current command, it must be 
				deleted.</p>
			</li>
		</ul>
	</li>
	<li><a name="Step13"></a>The NLS resource file:
		<p>The <code>CAAAfrProgressTaskSampleCmd</code><code>.CATNls</code> file 
		is located in the <code>CAAApplicationFrame.edu/CNext/resources/msgcatalog</code> 
		directory. It contains:</p>
		<ul>
			<li>The title of the dialog box and titles of the included dialog objects:
				<pre class="code"><strong>Title</strong>                =&quot;Interruptible Task&quot; 
ComputeButtonId.Title=&quot;Compute&quot; ;
InterruptId.Title    =&quot;Interruptible Task&quot; ;
...</pre>
			</li>
			<li>The help message displayed in the status bar when you pass over 
				the dialog box:
				<pre class="code">...
<strong>Help</strong> = &quot;Dialog box which creates an interruptible task &quot;;
...</pre>
			</li>
			<li>The long help message displayed in a balloon when you select a dialog 
				object with the question mark:
				<pre class="code">...
InterruptId.<strong>LongHelp</strong>     =&quot;Check if the task is interruptible or not&quot; ;
ComputeButtonId.LongHelp =&quot;Launch the task. It is interruptible if the previous
button is checked&quot; ;
...</pre>
			</li>
			<li>The short help message displayed in a balloon when you pass over 
				a dialog object:
				<pre class="code">...
InterruptId.<strong>ShortHelp</strong>     =&quot;Check if the task is interruptible or not&quot; ;
ComputeButtonId.ShortHelp =&quot;Launch the task&quot; ;
...</pre>
			</li>
			<li>The help message displayed in the status bar when you pass over 
				a dialog object:
				<pre class="code">...
InterruptId.<strong>Help</strong>     =&quot;Check if the task is interruptible or not&quot; ;
ComputeButtonId.Help =&quot;Launch the task&quot; ;
...</pre>
			</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implementing the CATIProgressTask Interface</h3>
<p>The <em>CAAAfrProgressTaskSampleCmd</em> class implements the <em>CATIProgressTask</em> 
interface. This section describes how this is done:</p>
<ol>
	<li><a href="#Step21">
		Declaring the methods of the <em>CATIProgressTask</em> interface in the 
		header file</a></li>
	<li><a href="#Step22">Adding the necessary included files in the 
		source file</a></li>
	<li><a href="#Step23">Coding the PerformTask method</a></li>
	<li><a href="#Step24">Coding the GetCatalogName method</a>
	</li>
	<li><a href="#Step25">Coding the GetIcon method</a></li>
	<li><a href="#Step26">Modifying the CAAAfrProgressTaskSampleCmd.CATNls 
		file</a></li>
	<li><a href="#Step27">Declaring the command as a 
		component</a></li>
</ol>
<ol>
	<li><a name="Step21">
		</a>Declaring the methods of the <em>CATIProgressTask</em> interface in 
		the header file
		<pre class="code">...
<strong>class CATIProgressTaskUI</strong> ;

class CAAAfrProgressTaskSampleCmd : public CATDlgDialog
{
    ...      
 public :
 
    ...
    virtual HRESULT <strong>PerformTask</strong>    (CATIProgressTaskUI  * iUI, void * iUserData);
    
    virtual HRESULT <strong>GetCatalogName</strong> (CATString           * oCatalogName);

    virtual HRESULT <strong>GetIcon</strong>        (CATString           * oIcon) ;
    ...
}</pre>
		<p>These are the three methods of the <em>CATIProgressTask</em> interface.</p>
	</li>
	<li><a name="Step22"></a>Adding the necessary include files<pre class="code">...
// Dialog Framework
...
#include &quot;CATMsgCatalog.h&quot;
...

//Application Frame Framework
...
#include &quot;CATIProgressTaskUI.h&quot;
...</pre>
	</li>
	<li><a name="Step23"></a>Coding the PerformTask method
		<pre class="code">...
HRESULT CAAAfrProgressTaskSampleCmd::PerformTask (CATIProgressTaskUI  * iUI, void * iUserData)
{
    if ( NULL == iUI ) return E_FAIL ;

    int min = 1 ;
    int max = 50 ;
    iUI-&gt;<strong>SetRange</strong>(min,max);
    
    for ( int i= min ; i &lt;= max ; i++)
    {
        iUI-&gt;<strong>SetProgress</strong>(i);

        CATUnicodeString usMessage ;
        CATUnicodeString usParam[1] ;
        
        <strong>usParam[0].BuildFromNum(i);</strong>

        usMessage = CATMsgCatalog::<strong>BuildMessage</strong>(&quot;CAAAfrProgressTaskSampleCmd&quot;,
                                        &quot;ProgressTaskUI.<strong>CommentRuntime</strong>&quot;,usParam,1,
                                        &quot;Step ...&quot;);

        iUI-&gt;<strong>SetComment</strong>(usMessage);

        // begin of the step'simulation 
        for ( int j= 0 ; j&lt;= 5000000 ; j++)
        {
            double k = 24.25 * (double) j ;
        }
        // end of the step'simulation 

        CATBoolean interrupt ;
        if ( S_OK != iUI-&gt;<strong>IsInterrupted</strong>(&amp;interrupt) || (TRUE == interrupt) )
        {
            return E_FAIL ;
        }
    }
    return S_OK ;
}
...</pre>
		<p>This method consists in executing the task and giving information to 
		the dialog box managed by the <em>CATIProgressTaskUI</em> interface [<a href="#Fig.1">Fig 
		1</a>].</p>
		<p>At first, before beginning the task, it is necessary to define the range 
		of the process by using the <code>SetRange</code> method.</p>
		<p>At each step, the dialog box is modified:</p>
		<ul>
			<li>The progress bar, the estimated time remaining and the percentage 
				of the progression: using the <code>SetProgress</code> method.</li>
			<li>The comment above the progress bar: using the <code>BuildMessage</code> 
				to construct the NLS message and <code>SetComment</code> to modify 
				the text
				<p>In this use case, the message is &quot;Step i ...&quot; where 
				i is the number of the step.</p>
			</li>
		</ul>
		<p>The task is stopped if the end user clicks on the Cancel button. The
		<code>IsInterrupted</code> method returns <code>FALSE</code> if the end 
		user has clicked on the button or if the Cancel button does not exist. If 
		the command has been interrupted, the method returns<code> E_FAIL</code>, 
		and the dialog box will be closed.</p>
	</li>
	<li><a name="Step24"></a>Coding the GetCatalogName method
		<pre class="code">...
HRESULT CAAAfrProgressTaskSampleCmd::GetCatalogName (CATString * oCatalogName)
{
    if ( NULL == oCatalogName ) return E_FAIL ;

    *oCatalogName = CATString(&quot;CAAAfrProgressTaskSampleCmd&quot;);
    return S_OK ;
}
...</pre>
		<p>This method returns the name of the NLS file which contains the title, 
		the default name of the object concerned and the default comment. See the 
		next section &quot;<a href="#Step26">Modifying the CAAAfrProgressTaskSampleCmd.CATNls file</a>&quot;</p>
	</li>
	<li><a name="Step25"></a>Coding theGetIcon method
		<pre class="code">...
HRESULT CAAAfrProgressTaskSampleCmd::GetIcon(CATString  * oIcon) 
{
    if ( NULL == oIcon ) return E_FAIL ;

    *oIcon = CATString(&quot;I_CAAProgressClock&quot;);
    return S_OK ;
}
...</pre>
		<p>The I_CAAProgressClock.bmp icon can be found in the CNext/resources/graphic/icons/normal 
		of the CAAApplicationFrame.edu.</p>
	</li>
	<li><a name="Step26"></a>Modifying the CAAAfrProgressTaskSampleCmd.CATNls file
		<p>Each label of the dialog box is prefixed by the keyword <code>ProgressTaskUI:</code></p>
		<pre class="code">...
ProgressTaskUI.<strong>Title</strong> = &quot;Computing...&quot;;
ProgressTaskUI.<strong>ObjectName</strong> = &quot;Model&quot;;
ProgressTaskUI.<strong>Comment</strong> = &quot;Step ...&quot;; // Not used in the use case
...</pre>
		<p>In this use case, only the <code>Title</code> and the <code>ObjectName</code> 
		are useful. For the comment, the message is changed at each step, so the 
		default text &quot;Step ...&quot; is not used. At each step the message 
		is constructed thanks to the <code>CommentRuntime</code> keyword. The parameter 
		is the number of the step.</p>
		<pre class="code">...
ProgressTaskUI.CommentRuntime = &quot;Step /p1 ...&quot;;</pre>
	</li>
	<li><a name="Step27"></a>Declaring the command as 
		a component
		<p>An object which implements an interface must be a component.</p>
		<pre class="code">...
class CAAAfrProgressTaskSampleCmd : public CATDlgDialog
{
    <strong>CATDeclareClass</strong>;
    ...      
 public :      
...</pre>
		<p>The <code>CATDeclareClass</code> macro declares that the class <em>CAAAfrProgressTaskSampleCmd</em> 
		belongs to a component.</p>
		<pre class="code">...
<strong>CATImplementClass</strong>(CAAAfrProgressTaskSampleCmd, Implementation, <strong>CATCommand</strong>, CATNull);
...</pre>
		<p>The <code>CATImplementClass</code> macro declares that the <em>CAAAfrProgressTaskSampleCmd</em> 
		class is a component main class thanks the <code>Implementation</code> keyword, 
		and OM-derives [<a href="#References">1</a>] from <em>CATCommand</em>.</p>
		<pre class="code">...
#include &lt;TIE_CATIProgressTask.h&gt; 
TIE_CATIProgressTask(CAAAfrProgressTaskSampleCmd);
...</pre>
		<p>The <em>CAAAfrProgressTaskSampleCmd</em> class states that it implements 
		the <em>CATIProgressTask</em> interface thanks to the <code>TIE_CATIProgressTask</code> 
		macro.</p>
		<p>The interface dictionary, the CAAApplicationFrame.edu.dico file, located 
		in the CNext/code/dictionary of the CAAApplicationFrame.edu framework contains 
		the following line:</p>
		<pre class="code">...
CAAAfrProgressTaskSampleCmd CATIProgressTask  libCAAAfrProgressTask
...</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article shows how to create an interruptible task with an indicator of progression. 
The object which contains the task implements the <em>CATIProgressTask</em> interface 
and the task is itself launched by an <em>CATTaskControler</em> class instance.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMInheritance.htm">
		Object Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2002]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Oct 2013]</td>
		<td>Document modified</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
