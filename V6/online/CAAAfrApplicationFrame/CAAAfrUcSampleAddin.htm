<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating an Add-in</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an Add-in</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create an add-in.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrGeoOperationAdn Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeoOperationAdn Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeoOperationAdn</a></li>
					<li><a href="#Where">Where to Find the CAAAfrGeoOperationAdn 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#Troubleshooting">Troubleshooting</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create an add-in to a given 
app. 
An add-in is an object that enables to extend an app by adding commands and 
arranging them in the action bar. Command headers are used to make the link between the add-in 
and the commands.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeoOperationAdn Use Case</h2>
<p>CAAAfrGeoOperationAdn is a use case of the CAAApplicationFrame.edu framework 
that illustrates the AfrFoundation framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrGeoOperationAdn Do</h3>
<p>The CAAAfrGeoOperationAdn use case creates an add-in to the <kbd>CAA: Create Geom</kbd> app for the CAAGeometry model. 
Is is made up of a set of three Operations commands, <strong>Union</strong>, <strong>Subtract</strong>, and 
<strong>Fillet</strong>, that are added in the <kbd>CAA Geometry Creation Section</kbd> of the action bar.</p>

		<table>
			<tr>
				<td>
				<img alt="" src="images/CAAAfrGeomWkbAddin.png" width="714" height="188"/></td>
			</tr>
		</table>

	

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeoOperationAdn</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">1</a>] for a detailed description of how this use case should 
be launched.</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
	<li>Click on <kbd>3D</kbd>, the west quadrant of the Compass.</li>
	<li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> app.</li>
	<li>Check that the <kbd>CAA Geometry Creation Section</kbd> is the current section</li>
</ul>
<p>The Operation commands should appear in the action bar.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrGeoOperationAdn Code</h3>
<p>The CAAAfrGeoOperationAdn use case is made of a single class named <em>CAAAfrGeoOperationAdn</em> 
located in the CAAAfrGeoCreationWkbAddin.m module of the CAAApplicationFrame.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoCreationWkbAddin.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the add-in, you should create the module directory to store the 
add-in code along with its two subdirectories LocalInterfaces and src. For this 
example, the directory is named CAAAfrGeoCreationWkbAddin.m and can be found in 
the CAAApplicationFrame.edu framework. Then you will need to create the 
following files:</p>



<table>
	<tr>
	<td>In the CAAAfrGeoCreationWkbAddin.m\LocalInterfaces directory</td>
	</tr>
	<tr>
		<td>
		<ul>
		  <li>CAAAfrGeoOperationAdn.h </li>
		  </ul>
		  </td>
		  <td>The header file of the add-in description class</td>
	</tr>
		
	<tr>
	<td>In the CAAAfrGeoCreationWkbAddin.m\src directory</td>
	</tr>
	<tr>
		<td>
		<ul>
			<li>CAAAfrGeoOperationAdn.cpp</li>
			</ul>
			</td>
				<td>The source file of the add-in description class</td>
			</tr>
    <tr>
	<td>In the dictionary, that is the CNext\code\dictionary directory</td>
		</tr>
		<tr>
			<td>
			<ul>
				<li>CAAApplicationFrame.edu.dico</li>
			</ul>
			</td>
				<td>The interface dictionary</td>
			</tr>
    <tr>
	<td>In the CNext\resources\msgcatalog directory </td>
	</tr>
		<tr>
		<td> 	
			<ul>
				<li>CAAAfrGeoOperationAdnHeader.CATNls and<br />
				CAAAfrGeoOperationAdnHeader.CATRsc</li>
				</ul>
				</td>
				<td>The command header resource files</td>
			</tr>
		
</table>

<p>To create the CAA Geometrical Creation addin, there are four steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Create the add-in description class</td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Create the command headers</td>
		<td><code>CreateCommands</code> method</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Arrange the commands in a section of action bar</td>
		<td><code>CreateToolbars</code> method</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Provide the resources</td>
		<td>Resource files</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Add-in Description Class</h3>
<ol>
	<li>Create the CAAAfrGeoOperationAdn.h file
		<pre class="code">#include &quot;CATBaseUnknown.h&quot;  // Needed to derive from CATBaseUnknown

class CATCmdContainer;       // Needed by CreateToolbars

class CAAAfrGeoOperationAdn : public CATBaseUnknown
{
  CATDeclareClass;
  public:
     CAAAfrGeoOperationAdn();
     virtual ~CAAAfrGeoOperationAdn();

     void CreateCommands();
     CATCmdContainer * CreateToolbars();
};</pre>
	</li>
	<li>Create the CAAAfrGeoOperationAdn.cpp file
		<pre class="code">// Local Framework
#include &quot;CAAAfrGeoOperationAdn.h&quot;

// AfrFoundation Framework 
#include &lt;CATCreateWorkshop.h&gt;    // To use NewAccess - SetAccess - SetAccessChild ...

// Declaration of a new Command Header Class 
#include &quot;CATAfrCommandHeader.h&quot;        // See <a href="#Step2">Creating the Command Headers</a>

CATImplementClass(CAAAfrGeoOperationAdn, DataExtension,
                  CATBaseUnknown, CAAAfrGeoOperationAddin);

#include &lt;TIE_CAAIAfrGeoCreationWkbAddin.h&gt;
TIE_CAAIAfrGeoCreationWkbAddin(CAAAfrGeoOperationAdn);</pre>
		<pre>CAAAfrGeoOperationAdn::CAAAfrGeoOperationAdn()
{}

CAAAfrGeoOperationAdn::~CAAAfrGeoOperationAdn()
{}

void CAAAfrGeoOperationAdn::CreateCommands()
{
  ... // See <a href="#Step2">Creating the Command Headers</a>
}

CATCmdContainer * CAAAfrGeoOperationAdn::CreateToolbars()
{
  ... // See <a href="#Step3">Creating the Container and Arranging the Commands</a>
}
</pre>
		<p>The <em>CAAAfrGeoOperationAdn</em> class states that it implements the
		<em>CAAIAfrGeoCreationWkbAddin</em> interface thanks to the <code>TIE_CAAIAfrGeoCreationWkbAddin</code> 
		macro. The <code>CATImplementClass</code> macro declares that the <em>CAAAfrGeoOperationAdn</em> 
		class is a data extension, thanks to the <code>DataExtension</code> keyword, 
		that extends <em>CAAAfrGeoOperationAddin</em>. The third argument must always 
		be set as <em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension. 
		The name of the latetype, the fourth argument of the CATImplementClass macro, 
		mustn't be the same as an existing C++ class name or an existing latetype 
		name.</p>
	</li>
	<li>Updating the Dictionary
		<p>Update the interface dictionary, that is a file named, for example, CAAApplicationFrame.dico, 
		whose folder's pathname is concatenated at run time in the CATDictionaryPath 
		environment variable, and containing the following declaration to state 
		that the <em>CAAAfrGeoOperationAddin</em> component implements the <em>CAAIAfrGeoCreationWkbAddin</em> 
		interface, and whose code is located in the libCAAAfrGeoCreationWkbAddin 
		shared library or DLL.</p>
		<pre class="code">CAAAfrGeoOperationAddin CAAIAfrGeoCreationWkbAddin libCAAAfrGeoCreationWkbAddin</pre>
		<p>Note that the component main class name is used to refer to the component 
		in the interface dictionary, and never the extension class names. Note also 
		that the shared library or DLL to associate with the component/interface 
		pair is the one that contains the code created by the call to the TIE macro 
		(This is generally the same library than the one that contains the interface 
		implementation code, since the TIE macro is usually included in the extension 
		class source file.) This is because when a client asks a component for an 
		interface pointer, the TIE class is instantiated first, and it either retrieves 
		the existing instance of the appropriate extension class, or otherwise instantiates 
		it.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Command Headers</h3>
<p>This is done by the <code>CreateCommands</code> method. Each command available 
in your add-in must have a command header. A command header is an instance of a 
command header class. Refer to The Command Headers for more details.</p>
<ol>
	<li>Create the command headers in the empty <code>CreateCommands</code> method. 
		This method should contain one instantiation statement of the command header 
		per command header. Each statement has the following form, for example for 
		the Union command.
		<pre class="code">void CAAAfrGeoOperationAdn::CreateCommands()
{
  ...
  CATAfrCommandHeader::CATCreateCommandHeader(&quot;Union&quot;, 
                                              &quot;CommandLib&quot;,
                                              &quot;UnionCmd&quot;, 
                                              (void *)NULL, 
                                              &quot;CAAAfrGeoOperationAdnHeader&quot;, 
                                              CATFrmAvailable):
  ...
}</pre>
		<p>The command header constructor has the following arguments:</p>
		<ul>
			<li><code>Union</code> is the identifier you need to assign to the command 
				header. It will be used afterwards:
				<ul>
					<li>To associate the command starters you will define to put 
						the command in the action bar with the command header. 
						This is done for this add-in in <a href="#Step3">Creating the Container and Arranging the Commands</a></li>
					<li>To build the variables that define the command header resources, 
						such as the help messages seen by the end user in his/her 
						own language, or the icon to display in the toolbar. This 
						is explained in <a href="#Step4">Providing the Resources</a>.</li>
				</ul>
			</li>
			<li><code>CommandLib</code> is the name of the shared library or DLL 
				containing the Union command's code, without the prefix lib, and 
				without the suffix depending on the operating system.</li>
			<li><code>UnionCmd</code> is the name of the Union command class</li>
			<li>the next argument is the possible pointer to the object to pass 
				to the command when executing it. It is often a character string 
				that indicates the action to carry out when the same command can 
				perform several actions depending on the active data, such as &quot;update&quot; 
				or &quot;update all&quot;, or &quot;cut&quot; or &quot;copy&quot;</li>
			<li><em>CAAAfrGeoOperationAdnHeader</em> 
				is the name of the resource file</li>
			<li><em>CATFrmAvailable</em> defines 
				the availability of the command.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Arranging the Commands in a Section of the Action 
Bar</h3>
<p>Finally, we'll create a container which enables us to insert the commands in a section of 
the action bar. This is the job of 
the <code>CreateToolbars</code> method.</p>
<ul>
	<li>Creating the container
		<pre class="code">CATCmdContainer * CAAAfrGeoOperationAdn::CreateToolbars()
{

     NewAccess(CATCmdContainer,pCAAAfrOperationTlb,CAAAfrOperationTlb);

      //Insert in the CAA Geometry Creation section
      NewAccess(CATCmdContainer,pCAAAfrGeoCreateSection,CAAAfrGeoCreateSection);
      AddAccessChild(pCAAAfrGeoCreateSection, pCAAAfrOperationTlb);

      NewAccess(CATCmdStarter,pCAAAfrTUnionStr,CAAAfrTUnionStr);
      SetAccessCommand(pCAAAfrTUnionStr,"CAAAfrUnionHdr");
      SetAccessChild(pCAAAfrOperationTlb,pCAAAfrTUnionStr);
	 
      NewAccess(CATCmdStarter,pCAAAfrTSubstractStr,CAAAfrTSubstractStr);
      SetAccessCommand(pCAAAfrTSubstractStr,"CAAAfrSubstractHdr");
      SetAccessNext(pCAAAfrTUnionStr,pCAAAfrTSubstractStr);

      NewAccess(CATCmdStarter,pCAAAfrTFilletStr,CAAAfrTFilletStr);
      SetAccessCommand(pCAAAfrTFilletStr,"CAAAfrFilletHdr");
      SetAccessNext(pCAAAfrTSubstractStr,pCAAAfrTFilletStr);

  ...
}</pre>
		<p>Here is what happens:</p>
		<ul>
			<li>The Operation container is created as an instance of the CATCmdContainer 
				class using the <code>NewAccess</code> macro. 
			pCAAAfrOperationTlb is the variable used to handle the Operation 
			command container instance pointer, and CAAAfrOperationTlb is the 
			identifier used to refer to it in the add-in resource files. This 
			identifier must be unique among all the container identifiers [<a href="#References">3</a>]. </li>
				
			<li>The &quot;CAA Geometry Create Section&quot; container is declared as an instance of the <em>CATCmdContainer</em> 
			class using the <code>NewAccess</code> macro. <code>pCAAAfrGeoCreateSection</code> 
			is the variable used to handle the section container 
			instance pointer, and <code>CAAAfrGeoCreateSection</code> is the 
			identifier used to refer to it. This 
			identifier is unique among all container identifiers. The Operation container is set as child of the Geometry Creation section. </li>


			<li>Three macros are required for each command. For example, the Union 
				command is processed as follows:
				<ol>
					<li>First, the command starter is created as a CATCmdStarter 
						instance using the <code>NewAccess</code> macro. pCAAAfrTUnionStr 
						is the variable used to handle a pointer to that instance, 
						and CAAAfrTUnionStr is its identifier.</li>
					<li>Then the Union command header is associated with this command 
						starter using the <code>SetAccessCommand</code> macro. The 
						second parameter is the Union command header identifier 
						defined as the first parameter of the command header constructor. 
						Refer to <a href="#Step2">Creating the Command Headers</a></li>
					<li>Finally the Union command starter is set as the child of 
					the Operation container.</li>
				</ol>
				<p>Proceed in the same way for the other commands, except that they 
				are set as next of one another using the <code>SetAccessNext</code> 
				macro.</p>
			</li>
		</ul>
	</li>
	
	<li>Returning the section<pre class="code">CATCmdContainer * CAAAfrGeoOperationAdn::CreateToolbars()
{
  ...
		 

  return pCAAAfrGeoCreateSection; 
}</pre>
		<p>The first chained container declared, <code>pCAAAfrGeoCreateSection</code>, is returned 
		by this method.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Providing the Resources</h3>
<p>You should provide the resources for the commands : the command header resources in the command header resource files: titles, 
		messages, icons, and the accelerators associated with the commands. This 
		is described in "How to Create Standard Command Headers"[<a href="#References">5</a>] article.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Troubleshooting"></a>Troubleshooting</h2>
<h3>My add-in is not Available or a System Failure Occurred</h3>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<td>
		<img alt="Symptom" height="29" src="../CAAIcons/images/symptom.gif" width="10"/></td>
		<td>I create an app add-in but it's not available, or a system failure 
		occurs.</td>
	</tr>
	<tr>
		<td>
		<img alt="Solution" height="30" src="../CAAIcons/images/solution.gif" width="28"/></td>
		<td>Check your late type name in the CATImplementClass macro. The late type 
		name must not be an existing C++ class name or an existing late type name.</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>A Command isn't Displayed in the Action Bar</h3>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<td>
		<img alt="Symptom" height="29" src="../CAAIcons/images/symptom.gif" width="10"/></td>
		<td>I create a command starter for a command, and I arrange it in the 
		action 
		bar, but the command isn't displayed.</td>
	</tr>
	<tr>
		<td>
		<img alt="Diagnosis" height="27" src="../CAAIcons/images/diagnos.gif" width="17"/></td>
		<td>The command starter is not associated with a command header, and is 
		thus not displayed, since the command cannot be launched without command 
		header.</td>
	</tr>
	<tr>
		<td>
		<img alt="Solution" height="30" src="../CAAIcons/images/solution.gif" width="28"/></td>
		<td>Check your <code>CreateToolbars</code> method. The command starter must 
		be associated with a command header for the command you want to display 
		thanks to the <code>SetAccessCommand</code> macro.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>An add-in enables to add commands to an app or to a data model without modifying the app's code. You simply need to implement the 
interface that the app or data model exposes for add-ins.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocCppNamingRulesChecklist.htm">
		Checklist for C++ Naming Rules</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAAfrTaI18NWorkshop.htm">How to Create Resources for Apps </a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAAfrTaStdCommandHeader.htm">How to Create Standard Command Headers</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2002]</td>
		<td>Menu item addition</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Oct 2013]</td>
		<td>3DEXPERIENCE migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
