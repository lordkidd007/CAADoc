<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Search Queries</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Search Queries</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and launch queries to look for objects 
		in models. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAACafSearch Use Case</a>
				<ul>
					<li><a href="#What">What Does CAACafSearch Do</a> </li>
					<li><a href="#How">How to Launch CAACafSearch</a> </li>
					<li><a href="#Where">Where to Find the CAACafSearch Code</a>
					</li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a> </li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create and launch queries to look 
for objects in models. You will specially learn:</p>
<ul>
	<li>To create a simple criterion (like in the General tab page of the Search 
		command).</li>
	<li>To create knowledge types and attributes based criterion (like in the Advanced 
		tab page of the Search command).</li>
	<li>To create a composed criterion (and, or, except operations between two criteria).</li>
	<li>To create a criterion from a string expressed in NLS or Transformat format.</li>
	<li>To launch a query.</li>
	<li>To set the found objects in the PSO (Pre-highlighted Set of Objects).</li>
</ul>
<p>Before getting to the use case itself, it is important to already be familiar 
with the basic notions of the Search. See the referenced article [<a href="#References">1</a>] 
for an overview.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACafSearch Use Case</h2>
<p>CAACafSearch is a use case of the CAACATIAApplicationFrm.edu framework that illustrates 
InteractiveInterfaces framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACafSearch Do</h3>
<p>The CAACafSearch use case is a state command [<a href="#References">2</a>] 
integrated in the fixed area of the action bar thanks to the &quot;general add-in&quot; 
use case [<a href="#References">3</a>]. </p>
<table>
	<caption style="width: 305px"><a name="Fig.1"></a>Fig.1: The Search Demonstrator Command</caption>
	<tr>
		<td>
		<img alt="" src="images/CAACafSearchAddin.png" width="309" height="117"/><br />
		</td>
	</tr>
</table>
<p>This command, the <strong>Search Demonstrator...</strong> command, offers to 
the end user the choice between pre-defined criteria and several contexts thanks 
to this user interface:</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2: The Search Demonstrator Dialog Box</caption>
	<tr>
		<td>
		<img alt="" src="images/CAACafSearchDlg.jpg" width="425" height="132"/></td>
	</tr>
</table>
<p>There are eight pre-defined criteria which are the following:</p>
<table>
	<caption style="width: 421px"><a name="Fig.3"></a>Fig.3: The Criterion List</caption>
		<td>
		<img alt="" src="images/CAACafSearchQueries.jpg" width="610" height="184"/></td>		
</table>
<p>All the criteria will be created and deleted at the beginning of the 
		state command. Only the text of the criteria (in NLS or Transformat format) 
		will be kept before its destruction. When the end user clicks on the Launch 
		button, an action method is triggered. In this method, a criterion is re-created 
		from the text. A query with this criterion and with the current context 
		is launched.</p>
		
<p>There are four contexts which are the following:</p>
<table>
	<caption><a name="Fig.4"></a>Fig.4: The Context List</caption>
	<tr>
		<td>
		<img alt="" src="images/CAACafSearchcxt.jpg" width="578" height="135"/></td>
		
	</tr>
</table>
<p>You can refer to the technical article &quot;Search Overview&quot;[<a href="#References">1</a>] for more 
		details about these four contexts.</p>
		
<p>When the end user clicks on the Launch button, the count of found elements is 
displayed in the editor and the elements are pre-highlighted.</p>
<table>
	<caption><a name="Fig.5"></a>Fig.5: A Query Result</caption>
	<tr>
		<td>
		&nbsp;<img alt="" src="images/CAACafSearchResult.jpg" width="524" height="448"/></td>
	</tr>
</table>
<p>This picture shows the result for the first query. Three elements are 
pre-highlighted in the tree.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACafSearch</h3>
<p>To launch CAACafSearch , you will need to set up the build time environment, 
then compile CAACafSearch along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">4</a>]. </p>
<p>But just before launching the execution, edit the CAAApplicationFrame.edu.dico 
interface dictionary file located in the dictionary directory of the CAAApplicationFrame.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CNext\code\dictionary\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In this file, remove the &quot;<strong>#</strong>&quot; character before the 
two following lines, and then run mkCreateRuntimeView.</p>
<pre class="code">...
#CAAAfrGeneralWksAddin       CATIWorkbenchAddin          libCAAAfrGeneralWksAddin  
#CAAAfrGeneralWksAddin       CATIAfrGeneralWksAddin      libCAAAfrGeneralWksAddin
...</pre>
<p>The two line deal with the &quot;General&quot; add-in described in the CAAAfrGeneralWksAddin 
use case [<a href="#References">3</a>] located in the CAAAfrGeneralWksAddin.m module 
(CAAApplicationFrame.edu framework).</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the session is ready, do the 
following:</p>
<ol>
	<li>On the top bar, select <strong>Add Services -&gt; Import -&gt; CATIA File...</strong> .</li>
	<li><strong>File Selection</strong> Dialog box click <strong>CAACafSearch.CATPart</strong> 
		(*) and click <strong>Open</strong>.</li>
	<li><strong>List of documents to import</strong> Dialog box click <strong>Ok</strong>.</li>
	<li><strong>Import Report</strong> Dialog box click <strong>Ok</strong>.</li>
	<li>In the action bar, click <strong>Search Demonstrator</strong>.</li>
	<li>In the <strong>Search Demonstrator</strong> Dialog box, choose a criterion 
		and a context.</li>
	<li>Click <strong>Launch</strong>.</li>
	<li>Click <strong>Close</strong>.</li>
	<li>On the top bar, click <strong>Add Services -&gt; Import -&gt; CATIA File...</strong>.</li>
	<li><strong>File Selection</strong> Dialog box click <strong>CAACafSearch.CATProduct</strong> 
		(*) and click <strong>Open</strong>.</li>
	<li><strong>List of documents to import</strong> Dialog box click <strong>Ok</strong>.</li>
	<li><strong>Import Report</strong> Dialog box click <strong>Ok</strong>.</li>
	<li>In the action bar, click <strong>Search Demonstrator</strong>.</li>
	<li>In the <strong>Search Demonstrator</strong> Dialog box choose a criterion 
		and a context.</li>
	<li>Push <strong>Launch</strong>.</li>
	<li>Click <strong>Close</strong>.</li>
</ol>
<p>(*) The file is located in the InputData directory of the CAACATIAApplicationFrm.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACATIAApplicationFrm.edu\InputData\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACafSearch Code</h3>
<p>The CAACafSearch use case is made of several classes located in the CAACafSearch.m 
module of the CAACATIAApplicationFrm.edu framework:</p>
<p><code>InstallRootDirectory\CAA</code><code>CATIAApplicationFrm</code><code>.edu\CAACafSearch.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>There are three classes:</p>
<table>
	<tr>
		<td>CAACafSearchCmd</td>
		<td>The state command which creates the queries and enables the end user 
		to launch them and see the result in the PSO. Only the piece of code in 
		relationship with the Search API will be explained here.</td>
	</tr>
	<tr>
		<td>CAACafSearchDlg</td>
		<td>The dialog box associated with the <em>CAACafSearchCmd</em> state command. 
		This class will be not detailed here.</td>
	</tr>
	<tr>
		<td>CAACafLaunchNextQueryNotification</td>
		<td>The notification sent by the <em>CAACafSearchDlg</em> command when the 
		end user clicks the Launch button. This notification will be received by 
		the <em>CAACafSearchCmd</em> command to valuate a dialog agent [<a href="#References">5</a>] 
		and trigger an action to launch the query and display the result. This class 
		will be not detailed here.</td>
	</tr>
</table>
<p>The pre-requisite code is the &quot;General&quot; add-in. This add-in contains 
the Search Demonstrator command. Refer to the Where to Find the CAAAfrGeneralWksAddin 
Code section of the CAAAfrGeneralWksAddin [<a href="#References">3</a>] use case 
for details.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAACafSearch:</p>
<ol>
	<li><a href="#Step1">Creating the Engine, Context and Services Components</a></li>
	<li><a href="#Step2">Creating Criteria</a></li>
	<li><a href="#Step3">Launching Queries</a></li>
	<li><a href="#Step4">Displaying Found Objects in PSO</a>.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating 
the Engine, Context and Services Components</h3>
<p>In the <em>CAACafSearchCmd</em> class constructor, the Search components always 
used during the state command are created. Each component (xxx) is instantiated 
by the <em>CATCreateInstance</em> global function and thanks a CLSID contained in 
the CATIniSearchxxxComponent file [<a href="#References">6</a>].</p>
<pre class="code">...
#include &quot;CATIIniSearchServices.h&quot;
#include &quot;CATIIniSearchEngine.h&quot;
#include &quot;CATIIniSearchContext.h&quot;
#include &quot;<strong>CATIniSearch</strong>Engine<strong>Component</strong>.h&quot;
#include &quot;CATIniSearch<strong>Context</strong>Component.h&quot;
#include &quot;CATIniSearch<strong>Services</strong>Component.h&quot;
...      
    ::<strong>CATCreateInstance</strong>(<strong>CLSID_CATIniSearchEngineComponent</strong>, NULL, 0, 
                                     <strong>IID_CATIIniSearchEngine</strong>,
                                     (void**)&amp;_pIniSearchEngineOnCurrentEngine);

    ::CATCreateInstance(<strong>CLSID_CATIniSearchContextComponent</strong>, NULL, 0, 
                                     <strong>IID_CATIIniSearchContext,</strong>
                        (void**)&amp;_pIniSearchContextOnCurrentContext);


    ::CATCreateInstance(<strong>CLSID_CATIniSearchServicesComponent</strong>, NULL, 0, 
                                     <strong>IID_CATIIniSearchServices</strong>,
                                     (void**)&amp;_pIniSearchServices);
...</pre>
<p>The first component is the Search engine component. It is handled by <code>_pIniSearchEngineOnCurrentEngine</code> 
a <em>CATIIniSearchEngine</em> interface pointer. It will be used in an action method 
of the <em>CAACafSearchCmd</em> to launch the query selected by the end user.</p>
<p>The second component is the Search context component. It is handled by <code>
_pIniSearchContextOnCurrentContext</code> a <em>CATIIniSearchContext</em> interface 
pointer. Before launching the query, the context selected by the end user will be 
retrieved from the <em>CAACafSearchDlg</em> class instance. The context component 
is one parameter of the query, the second being the criterion.</p>
<p>The third component is a component of services. It is handled by <code>_pIniSearchServices</code> 
a <em>CATIIniSearchServices</em> interface pointer.</p>
<p>The service's component is used in the <a href="#Step2">Creating Criteria</a> 
section for the <a href="#Step25">Name Based Criterion</a>, and like the 
first two components, in the <a href="#Step3">Launching Queries</a> 
section too.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Criteria</h3>
<p>eight criteria (<a href="#Fig.3">Fig. 3</a>) are created in a method called by 
the <em>CAACafSearchCmd</em> constructor. For each criterion the methodology is 
the same:</p>
<ol>
	<li>The criterion is created.</li>
	<li>Its text is kept in a global list.</li>
	<li>The criterion is deleted.</li>
</ol>
<p>The text is kept for two raisons: to build the contents of the CAACafSearchDlg's 
combo and to re-create the criterion just before <a href="#Step3">launching 
the query.</a></p>
<p>Simple criteria:</p>
<ul>
	<li><a href="#Step21">Color Based Criterion</a></li>
	<li><a href="#Step22">Color and Visibility Based Criterion</a></li>
	<li><a href="#Step23">Type and Thickness Line Based Criterion</a></li>
	<li><a href="#Step24">Layer Based Criterion</a></li>
	<li><a href="#Step25">Name Based Criterion</a></li>
</ul>
<p>Advanced criteria:</p>
<ul>
	<li><a href="#Step26">Retrieving the Type Dictionary</a></li>
	<li><a href="#Step27">Criterion Based on a Dimension Attribute</a></li>
	<li><a href="#Step28">Criterion Based on a String Attribute</a></li>
	<li><a href="#Step29">Criterion Based on an User Attribute</a></li>
</ul>
<ul>
	<li><strong><a name="Step21"></a>Color Based Criterion</strong>
		<p><strong>Goal</strong>: Retrieve all the objects with the red color (255,0,0).</p>
		<p>First the color criterion component is created. <code>pIniSearchColorCriterion
		</code>is a <em>CATIIniSearchColorCriterion</em> interface pointer and an 
		handle of the component. </p>
		<pre class="code">...
  CATIIniSearchColorCriterion * pIniSearchColorCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchColorCriterionComponent, NULL, 0,
                         IID_CATIIniSearchColorCriterion,
                         (void**)&amp;<strong>pIniSearchColorCriterion</strong>);
...</pre>
		<p>Thanks, to the <em>CATIIniSearchColorCriterion</em> interface, the color 
		parameters can be set:</p>
		<pre class="code">...
  unsigned int *Color = new unsigned int[3];
  Color[0]=255; Color[1]=0; Color[2]=0;
  CATUnicodeString ColorName;
         
  rc = pIniSearchColorCriterion-&gt;<strong>FindColorNameFromRGBColorCode</strong>(Color,ColorName);
  ...
  rc = pIniSearchColorCriterion-&gt;<strong>SetParameters</strong>(Color[0],Color[1],Color[2],
                                   <strong>CATIniSearchEnumeration::Equal</strong>,
                                   ColorName);
  delete []Color;
...</pre>
		<p>The <code>FindColorNameFromRGBColorCode</code> method retrieves from 
		the three color components the name of the color. If no name exists, the 
		method returns E_FAIL. There are 48 (basic colors) + 16 (custom colors) 
		names possible. This name, <code>ColorName</code>, is set as argument of 
		the <code>SetParameters</code> method to be displayed in the criterion
		<a href="#Text1">text</a>.</p>
		<p>Finally, the text of the criterion is retrieved.</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchColorCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetNLSQuery</strong>(Text);
   ...
...</pre>
		<p><a name="Text1"></a>It is the following text:</p>
		<pre class="code">Color=Basic 25</pre>
		<p>The name &quot;Basic 25&quot; is the name of the red color.</p>
	</li>
	<li><strong><a name="Step22"></a>Color and Visibility 
		Based Criterion</strong>
		<p><strong>Goal</strong>: Retrieve all the objects with the color (253,4,191) 
		and which are visible.</p>
		<p>First the color criterion component is created. <code>pIniSearchColorCriterion
		</code>is a <em>CATIIniSearchColorCriterion</em> interface pointer and an 
		handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchColorCriterion</strong> * pIniSearchColorCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchColorCriterionComponent, NULL, 0,
                         IID_CATIIniSearchColorCriterion,
                         (void**)&amp;<strong>pIniSearchColorCriterion</strong>);
...</pre>
		<p>Then the three color components are set as argument of the color component 
		but not the name of the color. See the <a href="#Text2">text</a> 
		of the criterion.</p>
		<pre class="code">...
  unsigned int *Color = new unsigned int[3];
  Color[0]=253; Color[1]=4; Color[2]=191;
 
  rc = pIniSearchColorCriterion-&gt;<strong>SetParameters</strong>(Color[0],Color[1],Color[2],
                                   CATIniSearchEnumeration::<strong>Equal</strong>);
  delete []Color;                         
...</pre>
		<p>Then, the visibility criterion component is created. <code>pIniSearchVisibilityCriterion
		</code>is a <em>CATIIniSearchVisibilityCriterion</em> interface pointer 
		and an handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchVisibilityCriterion</strong> * pIniSearchVisibilityCriterion = NULL ;
  rc = ::CATCreateInstance(CLSID_CATIniSearchVisibilityCriterionComponent, NULL, 0,
                         IID_CATIIniSearchVisibilityCriterion,
                         (void**)&amp;<strong>pIniSearchVisibilityCriterion</strong>);
...</pre>
		<p>The value of the criteria, <code>CATShowAttr</code>, and the sign of 
		comparison, <code>Equal</code>, are set with the <code>SetParameters</code> 
		method.</p>
		<pre class="code">...
  rc = pIniSearchVisibilityCriterion-&gt;SetParameters(
                                          CATIIniSearchVisibilityCriterion::<strong>CATShowAttr</strong>,
                                          CATIniSearchEnumeration::<strong>Equal</strong>);       
...</pre>
		<p>The third criterion is a logical combination of the two criteria just 
		above created. It is an And operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchAndCriterion</strong> * pIniSearchAndCriterion = NULL ;
  rc = ::CATCreateInstance(CLSID_CATIniSearchAndCriterionComponent, NULL, 0,
                         IID_CATIIniSearchAndCriterion,
                         (void**)&amp;<strong>pIniSearchAndCriterion</strong>);</pre>
		<p>The color and the visibility criteria are set as argument of the combination 
		criterion: </p>
		<pre class="code">...
rc = pIniSearchAndCriterion-&gt;<strong>SetParameters</strong>(pIniSearchVisibilityCriterion,
                                           pIniSearchColorCriterion);     
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a NLS text.</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetNLSQuery</strong>(Text);
   ...
...</pre>
		<p><a name="Text2"></a>It is the following text:</p>
		<pre class="code">(Visibility=Visible &amp; Color='(253,141,91)')</pre>
		<p>Note that the color is with the (r, g, b) format since the name of the 
		color has not been set as parameter of the criterion.</p>
	</li>
	<li><strong><a name="Step23"></a>Type and Thickness 
		Line Based Criterion</strong>
		<p><strong>Goal</strong>: Retrieve all the dotted lines whose the thickness 
		is superior to .1mm.</p>
		<p>First the dashed (line type) criterion component is created. <code>pIniSearchDashedCriterion
		</code>is a <em>CATIIniSearchDashedCriterion</em> interface pointer and 
		an handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchDashedCriterion</strong> * pIniSearchDashedCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchDashedCriterionComponent, NULL, 0,
                         IID_CATIIniSearchDashedCriterion,
                         (void**)&amp;<strong>pIniSearchDashedCriterion</strong>);
...</pre>
		<p>Then the value of the line type and the sign of comparison are set as 
		argument. The value of the line type can be an index value, refer to the
		<code>Get</code>/<code>SetLineType</code> methods of the <em>CATVisPropertiesValues</em> 
		class for the possible values, or can be a string. In our sample, it is 
		the &quot;Dotted&quot; string. It is a NLS name. The &quot;Dashed&quot; 
		combo in the Search command displays all the NLS names. </p>
		<pre class="code">...
rc = pIniSearchDashedCriterion-&gt;SetParameters(&quot;<strong>Dotted</strong>&quot;,
                                   CATIniSearchEnumeration::<strong>Equal</strong>);                   
...</pre>
		<p>Then, the weight criterion component is created. <code>pIniSearchWeightCriterion</code> 
		is a <em>CATIIniSearchWeightCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchWeightCriterion</strong> * pIniSearchWeightCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchWeightCriterionComponent, NULL, 0,
                         IID_CATIIniSearchWeightCriterion,
                         (void**)&amp;<strong>pIniSearchWeightCriterion</strong>);
...</pre>
		<p>Then the value of the criteria and the sign of comparison are set.
		</p>
		<pre class="code">...
  float weight = .1f ;
  rc = pIniSearchWeightCriterion-&gt;SetParameters(weight,
                                   CATIniSearchEnumeration::<strong>Superior</strong>); 
...</pre>
		<p>The third criterion is a logical combination of the two criteria just 
		above created. It is an And operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchAndCriterion</strong> * pIniSearchAndCriterion = NULL ;
  rc = ::CATCreateInstance(CLSID_CATIniSearchAndCriterionComponent, NULL, 0,
                         IID_CATIIniSearchAndCriterion,
                         (void**)&amp;<strong>pIniSearchAndCriterion</strong>);
...</pre>
		<p>The dashed and the weight criteria are set as argument of the combination 
		criterion. </p>
		<pre class="code">...
  rc = pIniSearchAndCriterion-&gt;<strong>SetParameters</strong>(pIniSearchWeightCriterion,
                                                     pIniSearchDashedCriterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a NLS text.</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetNLSQuery</strong>(Text);
   ...
...</pre>
		<p>It is the following text</p>
		<pre class="code">(Weight&gt;0.1mm &amp; Dashed=Dotted)</pre>
	</li>
	<li><a name="Step24"></a><strong>Layer Based Criterion</strong>
		<p><strong>Goal</strong>: Retrieve all the objects which are either on layer 
		2 or on the layer 3.</p>
		<p>First a layer criterion component is created. <code>pIniSearchLayer2Criterion</code> 
		is a <em>CATIIniSearchLayerCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchLayerCriterion</strong> * pIniSearchLayer2Criterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchLayerCriterionComponent, NULL, 0,
                         IID_CATIIniSearchLayerCriterion,
                         (void**)&amp;<strong>pIniSearchLayer2Criterion</strong>);
...</pre>
		<p>The index of the layer is set with the <code>SetParameters</code> method.</p>
		<pre class="code">...
  CATUnicodeString LayerIndex ;
  LayerIndex.<strong>BuildFromNum</strong>(2);
  rc = pIniSearchLayer2Criterion-&gt;<strong>SetParameters</strong>(LayerIndex,
                                   CATIniSearchEnumeration::<strong>Equal</strong>);
...</pre>
		<p>Then a second layer criterion component is created. <code>pIniSearchLayer3Criterion</code> 
		is a <em>CATIIniSearchLayerCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchLayerCriterion</strong> * pIniSearchLayer3Criterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchLayerCriterionComponent, NULL, 0,
                         IID_CATIIniSearchLayerCriterion,
                         (void**)&amp;<strong>pIniSearchLayer3Criterion</strong>);
...</pre>
		<p>The index of the layer is also set with the <code>SetParameters</code> 
		method.</p>
		<pre class="code">...
  CATUnicodeString LayerIndex ;
  LayerIndex.<strong>BuildFromNum</strong>(3);
  rc = pIniSearchLayer3Criterion-&gt;<strong>SetParameters</strong>(LayerIndex,
                                   CATIniSearchEnumeration::<strong>Equal</strong>);
...</pre>
		<p>The third criterion is a logical combination of the two criteria just 
		above created. It is an Or operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchOrCriterion</strong> * pIniSearchOrCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchOrCriterionComponent, NULL, 0,
                         IID_CATIIniSearchOrCriterion,
                         (void**)&amp;<strong>pIniSearchOrCriterion</strong>);
...</pre>
		<p>The two layer criteria are set as argument of the combination criterion.
		</p>
		<pre class="code">...
  rc = pIniSearchOrCriterion-&gt;<strong>SetParameters</strong>(pIniSearchLayer2Criterion,
                                             pIniSearchLayer3Criterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a NLS text.</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchOrCriterion -&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetNLSQuery</strong>(Text);
   ...
...</pre>
		<p>It is the following text</p>
		<pre class="code">(Layer=2 + Layer=3)</pre>
	</li>
	<li><a name="Step25"></a><strong>Name Based Criterion</strong>
		<p><strong>Goal</strong>: Retrieve all the objects whose the name begins 
		by the &quot;Line&quot; string but which does not contain the &quot;Width&quot; 
		string. The first string is not case sensitive whereas the second one is 
		case sensitive. </p>
		<p>First a first name criterion component is created. <code>pIniSearchNameLineCriterion</code> 
		is a <em>CATIIniSearchNameCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchNameCriterion</strong> * pIniSearchNameLineCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchNameCriterionComponent, NULL, 0,
                         IID_CATIIniSearchNameCriterion,
                         (void**)&amp;<strong>pIniSearchNameLineCriterion</strong>);
...</pre>
		<p>The name is &quot;Line*&quot;, where * is not the wild card. The
		<code>CorrectString</code> method enables you to create a string where the 
		* character will be interpreted as the star character and not as the wild 
		card. The second argument of the <code>CorrectString</code> method specifies 
		that the input string do not contain a wild card. See the
		<a href="#Text5">text</a> of the criterion. </p>
		<pre class="code">...
  CATUnicodeString Name = &quot;&quot; ;
  CATUnicodeString StringToCorrect = &quot;Line*&quot; ;
  _pIniSearchServices-&gt;<strong>CorrectString</strong>(StringToCorrect,FALSE,Name);
</pre>
		<p>The string is associated with the name component thanks to the <code>
		SetParameters</code> method. The string is not case sensitive, it means 
		that the following strings are valid: Line, line, LINE.</p>
		<pre class="code">...
  CATBoolean CaseSensibility = FALSE ;
  rc = pIniSearchNameLineCriterion-&gt;<strong>SetParameters</strong>(Name,CaseSensibility,
                                   CATIniSearchEnumeration::Equal);
...</pre>
		<p>Then, the second name criterion component is created. <code>pIniSearchNameWidthCriterion</code> 
		is a <em>CATIIniSearchNameCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchNameCriterion</strong> * pIniSearchNameWidthCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchNameCriterionComponent, NULL, 0,
                         IID_CATIIniSearchNameCriterion,
                         (void**)&amp;<strong>pIniSearchNameWidthCriterion</strong>);

...</pre>
		<p>The string is associated with the name component thanks to the <code>
		SetParameters</code> method. In this case, the star character is the wild 
		card, no correction of the string is necessary. The string is case sensitive, 
		it means that only the &quot;Width&quot; string is valid.</p>
		<pre class="code">...
  CATUnicodeString Name = &quot;*Width*&quot; ;
  CATBoolean <strong>CaseSensibility</strong> = TRUE ;
  rc = pIniSearchNameWidthCriterion-&gt;<strong>SetParameters</strong>(Name,CaseSensibility,
                                   CATIniSearchEnumeration::Equal);
       
...</pre>
		<p>The third criterion is a logical combination of the two criteria just 
		above created. It is an Except operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchExceptCriterion</strong> * pIniSearchExceptCriterion = NULL ;
  rc = ::CATCreateInstance(CLSID_CATIniSearchExceptCriterionComponent, NULL, 0,
                         IID_CATIIniSearchExceptCriterion,
                         (void**)&amp;<strong>pIniSearchExceptCriterion</strong>);
...</pre>
		<p>The two name criteria are set as argument of the combination criterion. 
		The order is important.</p>
		<pre class="code">...
  rc = pIniSearchVisibilityCriterion-&gt;<strong>SetParameters</strong>(pIniSearchNameLineCriterion,
                                                     pIniSearchNameWidthCriterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a Transformat 
		text [<a href="#References">1</a>].</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetTransFormatQuery</strong>(Text);
   ...
...</pre>
		<p><a name="Text5"></a>It is the following text</p>
		<pre class="code">(Name=Line'*' - Name_CAP=*Width*)</pre>
		<p>The string <code>Name</code> means that the string is not case sensitive 
		whereas <code>Name_CAP </code>means that it is case sensitive. </p>
	</li>
	<li><a name="Step26"></a><strong>Retrieving the Type 
		Dictionary</strong>
		<p>An advanced criterion is composed of a knowledge type based criterion. 
		This type, a <em>CATIType</em>, can be retrieved thanks to a dictionary 
		[<a href="#References">1</a>].</p>
		<pre class="code">...
  <strong>CATITypeDictionary_var</strong> pITypeDictionaryOnCurrentDic ;
  pITypeDictionaryOnCurrentDic = <strong>CATGlobalFunctions::GetTypeDictionary</strong>();
...</pre>
		<p><code>pITypeDictionaryOnCurrentDic</code> will be used in the further 
		sections.</p>
	</li>
	<li><a name="Step27"></a><strong>Criterion Based 
		on a Dimension Attribute</strong>
		<p><strong>Goal</strong>: Retrieve all the Hole features whose the diameter 
		is superior or equal to 10mm.</p>
		<p>First a type criterion component is created. <code>pIniSearchTypeCriterion</code> 
		is a <em>CATIIniSearchTypeCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchTypeCriterion</strong> * pIniSearchTypeCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchTypeCriterionComponent, NULL, 0,
                         IID_CATIIniSearchTypeCriterion,
                         (void**)&amp;<strong>pIniSearchTypeCriterion</strong>);
...</pre>
		<p>The type associated with the Hole feature is retrieved thanks to the
		<code>FindTypeInPackage</code> method. Refer to the Search technical article 
		[<a href="#References">1</a>] for details about the two first argument of 
		this method. In this case, <code>Hole</code> is a type of the <code>PartDesign</code> 
		package. </p>
		<pre class="code">...
  CATIType_var TypePtr;
  rc = pITypeDictionaryOnCurrentDic-&gt;<strong>FindTypeInPackage</strong>(&quot;Hole&quot;,&quot;PartDesign&quot;,TypePtr);                                                                                                                  
...</pre>
		<p>Then the type (a <em>CATIType</em> interface pointer) can be set as argument 
		of the type component. The last argument of the <code>SetParameters</code> 
		method is the internal name of the app which contains this type. Refer 
		to the technical article to know how to retrieve the internal 
		name of apps [<a href="#References">1</a>]. </p>
		<pre class="code">...
  rc = pIniSearchTypeCriterion-&gt;<strong>SetParameters</strong>(TypePtr,
                                   CATIniSearchEnumeration::Equal,&quot;<strong>CATPrtSearch</strong>&quot;);                                                                                                               
...</pre>
		<p>The Diameter attribute is an attribute of type dimension. So, a dimension 
		criterion component is created. <code>pIniSearchDimensionCriterion</code><strong>
		</strong>is a <em>CATIIniSearchDimensionCriterion</em> interface pointer 
		and an handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchDimensionCriterion</strong> * pIniSearchDimensionCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchDimensionCriterionComponent, NULL, 0,
                         IID_CATIIniSearchDimensionCriterion,
                         (void**)&amp;<strong>pIniSearchDimensionCriterion</strong>);

...</pre>
		<p>The dimension component is valuated with the internal name of the attribute 
		[<a href="#References">1</a>], with the value of comparison and the sign 
		of comparison. </p>
		<pre class="code">...
  CATUnicodeString AttributeInternalName = &quot;Diameter&quot; ;
  CATUnicodeString AttributeValue = &quot;10.0mm&quot; ;
  CATUnicodeString AttributeNLSName = &quot;Diameter&quot; ;

  rc = pIniSearchDimensionCriterion-&gt;<strong>SetParameters</strong>(AttributeInternalName, 
                                               AttributeValue,
                                               CATIniSearchEnumeration::<strong>SupEqual</strong>, 
                                               AttributeNLSName);
       
...</pre>
		<p>The third criterion is a logical combination between the type and the 
		attribute criterion just above created. It is necessary an And operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchAndCriterion</strong> * pIniSearchAndCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchAndCriterionComponent, NULL, 0,
                         IID_CATIIniSearchAndCriterion,
                         (void**)&amp;<strong>pIniSearchAndCriterion</strong>);
...</pre>
		<p>The two name criteria are set as argument of the combination criterion. 
		The order is important, the type criterion must be the first.</p>
		<pre class="code">...
  rc = pIniSearchAndCriterion-&gt;<strong>SetParameters</strong>(pIniSearchTypeCriterion,
                                                     pIniSearchDimensionCriterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a Transformat 
		text [<a href="#References">1</a>].</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetTransFormatQuery</strong>(Text);
   ...
...</pre>
		<p>It is the following text</p>
		<pre class="code">CATPrtSearch.Hole.Diameter&gt;=10mm</pre>
		<p>In a transformat string, all the name are internal names. <code>CATPrtSearch</code> 
		is the internal name of the app which contains the type. <code>Hole</code> 
		is the name of the type, and <code>Diameter</code> is the name of the attribute.</p>
	</li>
	<li><a name="Step28"></a><strong>Criterion Based 
		on a String Attribute</strong>
		<p><strong>Goal</strong>: Retrieve all the Product features whose the Part 
		Number name begins by the &quot;CAAPart&quot; string.</p>
		<p>First a type criterion component is created. <code>pIniSearchTypeCriterion</code> 
		is a <em>CATIIniSearchTypeCriterion</em> interface pointer and an handle 
		of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchTypeCriterion</strong> * pIniSearchTypeCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchTypeCriterionComponent, NULL, 0,
                         IID_CATIIniSearchTypeCriterion,
                         (void**)&amp;<strong>pIniSearchTypeCriterion</strong>);
...</pre>
		<p>The type associated with the Product feature is retrieved thanks to the
		<code>FindTypeInPackage</code> [<a href="#References">1</a>] method. </p>
		<pre class="code">...
  CATIType_var TypePtr;
  rc = pITypeDictionaryOnCurrentDic-&gt;FindTypeInPackage(&quot;<strong>Product</strong>&quot;,&quot;<strong>ProductPackage</strong>&quot;, TypePtr);                                                                                                                                                                                              
...</pre>
		<p>Then the type ( a <em>CATIType</em> interface pointer ) can be set as 
		argument of the type component. The last argument of the <code>SetParameters</code> 
		method is the internal name [<a href="#References">1</a>] of the app 
		which contains this type. </p>
		<pre class="code">...
  rc = pIniSearchTypeCriterion-&gt;SetParameters(TypePtr,
                                   CATIniSearchEnumeration::<strong>Equal,</strong>
                                   &quot;<strong>CATProductSearch</strong>&quot;);                                                                                                              
...</pre>
		<p>The &quot;Part Number&quot; attribute is an attribute of type string. 
		So, a string criterion component is created. <code>pIniSearchStringCriterion</code><strong>
		</strong>is a <em>CATIIniSearchStringCriterion</em> interface pointer and 
		an handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchStringCriterion</strong> * pIniSearchStringCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchStringCriterionComponent, NULL, 0,
                         IID_CATIIniSearchStringCriterion,
                         (void**)&amp;<strong>pIniSearchStringCriterion</strong><strong> </strong>);

...</pre>
		<p>The string component is valuated with the internal name of the attribute 
		[<a href="#References">1</a> ] with the value of comparison and the sign 
		of comparison. The last argument of the method is the NLS Name of the attribute. 
		This parameter is optional, but if you don't set it, and no model which 
		contains this attribute has been loaded, the <code>GetNlSQuery</code> method 
		will return E_FAIL.</p>
		<pre class="code">...
  CATUnicodeString AttributeInternalName = &quot;<strong>PartNumber</strong>&quot; ;
  CATUnicodeString AttributeNLSName = &quot;Part Number&quot; ;
  CATUnicodeString AttributeValue        = &quot;CAAPart*&quot; ;
  CATBoolean CaseSensibility             = FALSE ;
  rc = pIniSearchStringCriterion-&gt;<strong>SetParameters</strong>(AttributeInternalName, 
                                               AttributeValue,
                                               CaseSensibility ,
                                               CATIniSearchEnumeration::<strong>Equal</strong>,
                                               AttributeNLSName);  
       
...</pre>
		<p>The third criterion is a logical combination between the type and the 
		attribute criterion just above created. It is necessary an And operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchAndCriterion</strong> * pIniSearchAndCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchAndCriterionComponent, NULL, 0,
                         IID_CATIIniSearchAndCriterion,
                         (void**)&amp;<strong>pIniSearchAndCriterion</strong>);
...</pre>
		<p>The two name criteria are set as argument of the combination criterion. 
		The order is important, the type criterion must be the first.</p>
		<pre class="code">...
  rc = pIniSearchAndCriterion-&gt;<strong>SetParameters</strong>(pIniSearchTypeCriterion,
                                             pIniSearchStringCriterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a TransFormat 
		text [<a href="#References">1</a>].</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetTransformatQuery</strong>(Text);
   ...
...</pre>
		<p>It is the following text</p>
		<pre class="code">CATProductSearch.PLMProductDS.Name=*Part*</pre>
		<p>In a transformat string, all the name are internal names. <code>CATProductSearch</code> 
		is the internal name of the app which contains the type. <code>PLMProductDS</code> 
		is the name of the type, and Name is the name of the 
		attribute. Compare with the next criterion <a href="#Text8">text</a>.</p>
	</li>
	<li><a name="Step29"></a><strong>Criterion Based on 
		an User Attribute</strong>
		<p><strong>Goal</strong>: Retrieve all the Product features whose the value 
		of the CAAAttr user attribute is inferior or equal to .1</p>
		<p>First a type criterion component is created. <code>pIniSearchTypeCriterion</code> 
		is a <em>CATIIniSearchTypeCriterion</em> interface pointer and an handle 
		of the component. See the previous section for the details.</p>
		<p>The &quot;CAAAttr&quot; attribute is an user attribute. So, an User criterion 
		component is created. <code>pIniSearchUserCriterion</code> is a <em>CATIIniSearchUserCriterion</em> 
		interface pointer and an handle of the component. </p>
		<pre class="code">...
  <strong>CATIIniSearchUserCriterion</strong> * pIniSearchUserCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchUserCriterionComponent, NULL, 0,
                         IID_CATIIniSearchUserCriterion,
                         (void**)&amp;<strong>pIniSearchUserCriterion</strong>);


...</pre>
		<p>The user component is valuated with the internal name of the attribute 
		[<a href="#References">1</a>], with the value of comparison and the sign 
		of comparison.</p>
		<pre class="code">...
  CATUnicodeString AttributeInternalName = &quot;CAAAttr&quot; ;
  CATUnicodeString AttributeValue = &quot;.1&quot; ;
  rc = pIniSearchUserCriterion-&gt;<strong>SetParameters</strong>(AttributeInternalName, 
                                               AttributeValue,
                                               CATIniSearchEnumeration::<strong>InfEqual</strong>);  
       
...</pre>
		<p>The third criterion is a logical combination between the type and the 
		attribute criterion just above created. It is necessary an And operation.</p>
		<pre class="code">...
  <strong>CATIIniSearchAndCriterion</strong> * pIniSearchAndCriterion = NULL ;
  rc = ::<strong>CATCreateInstance</strong>(CLSID_CATIniSearchAndCriterionComponent, NULL, 0,
                         IID_CATIIniSearchAndCriterion,
                         (void**)&amp;<strong>pIniSearchAndCriterion</strong>);
...</pre>
		<p>The two name criteria are set as argument of the combination criterion. 
		The order is important, the type criterion must be the first.</p>
		<pre class="code">...
  rc = pIniSearchAndCriterion-&gt;<strong>SetParameters</strong>(pIniSearchTypeCriterion,
                                             pIniSearchStringCriterion);       
...</pre>
		<p>Finally, the text of the criterion is retrieved. It is a NLS text [<a href="#References">1</a>].
		</p>
		<pre class="code">...
   <strong>CATIIniSearchCriterion</strong> * pSearchCriterion = NULL ;
   rc = pIniSearchAndCriterion-&gt;QueryInterface(IID_CATIIniSearchCriterion,
                                                  (void**) &amp;pSearchCriterion);
   ...
      CATUnicodeString Text = &quot;&quot; ;
      pSearchCriterion-&gt;<strong>GetNLSQuery</strong>(Text);
   ...
...</pre>
		<p><a name="Text8"></a>It is the following text</p>
		<pre class="code">'Product Structure'.'Product DS'.CAAAttr&lt;='.1'</pre>
		<p>It is a NLS string, so all the names are translated. <code>'Product Structure'</code> 
		is the name of the app, <code>'Product DS'</code> is the name of the type 
		and <code>'CAAAttr' </code>is the name of the attribute. Compare with the 
		previous criterion <a href="#Text8">text</a>.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Launching Queries</h3>
<p>The end user has pushed the Launch button - See <a href="#Fig.2">Fig 2</a> - 
an action method of the <em>CAACafSearchCmd</em> class is trigerred. This action 
method should first re-create the criterion from a text, retrieve the current context 
and then launch a query. </p>
<p>First the text of the criterion is retrieved from the end user selection. </p>
<pre class="code">...
  int CriterionIndex = -1 ;
  _pSearchDlg-&gt;<strong>GetCurrentCriterion</strong>(CriterionIndex);

  <strong>CATUnicodeString</strong> CriterionText = &quot;&quot;;
  if ( NULL != _pListCriterionTexts )
  {
     if ( (CriterionIndex &gt;= 1) &amp;&amp; (CriterionIndex &lt;= _pListCriterionTexts-&gt;Size()) )
     {
        CriterionText = (*<strong>_pListCriterionTexts</strong>)[CriterionIndex];
     }
  }
...</pre>
<p>Then, the context is retrieved with the <code>GetCurrentContext</code><strong>
</strong>method, a <em>CAACafSearchDlg</em> class method. </p>
<pre class="code">...
  <strong>CATIIniSearchContext::Scope</strong> ContextValue = CATIIniSearchContext::Everywhere ;
  _pSearchDlg-&gt;<strong>GetCurrentContext</strong>(ContextValue);
...</pre>
<p>A criterion is re-created thanks to the <code>DecodeStringToCriterion </code>
method of the <em>CATIIniSearchServices</em> interface. <code>_pIniSearchServices
</code>is an handle on the service's component created in the
<a href="#Step1">Creating the Engine, 
Context and Services Components</a> section. <code>CriterionText</code> is the text 
of the criterion, just above retrieved, and <code>pIniSearchCriterion</code> is 
the <em>CATIIniSeachCriterion</em> interface pointer on the newly criterion. The 
second argument, <code>FALSE</code>, means that in case of error, no window will 
be launched. </p>
<pre class="code">...
     CATIIniSearchCriterion * pIniSearchCriterion = NULL ;
     rc = _pIniSearchServices-&gt;<strong>DecodeStringToCriterion</strong>(CriterionText,
                                                        FALSE,
                                                        pIniSearchCriterion);
...</pre>
<p>After the criterion creation, the context component can be updated with the current 
scope. <code>_pIniSearchContextOnCurrentContext</code> is an handle on the context 
component created in the
<a href="#Step1">Creating the Engine, 
Context and Services Components</a> section. </p>
<pre class="code">...
 rc = _pIniSearchContextOnCurrentContext-&gt;<strong>SetScope</strong>(ContextValue);
...</pre>
<p>Then, the query is composed by using the context and the criterion. <code>_pIniSearchEngineOnCurrentEngine</code> 
is an handle on the search engine component created in the
<a href="#Step1">Creating the Engine, 
Context and Services Components</a> section. </p>
<pre class="code">...
 rc = _pIniSearchEngineOnCurrentEngine-&gt;<strong>SetCriterionAndContext</strong>(pIniSearchCriterion,
                                                 _pIniSearchContextOnCurrentContext);
...</pre>
<p>Finally, the query can be launched. The default argument of the <code>LaunchSearchOnDocument</code> 
method, <code>NULL,</code> is used. It means that the search is done on the current 
data model. </p>
<pre class="code">...
 rc = _pIniSearchEngineOnCurrentEngine-&gt;<strong>LaunchSearchOnDocument</strong>()
...</pre>
<p>The result of the search is analyzed in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying Found Objects in PSO</h3>
<p>The found objects should be pre-highlighted. They will be set in the <em>CATPSO</em> 
instance associated with the current model (in fact the editor of the current model). 
This instance, <code>_pPso</code>, has been retrieved in the <em>CAACafSearchCmd</em> 
class constructor such as:</p>
<pre class="code">...
  CATFrmEditor * pEditor = <strong>GetEditor</strong>();
  if ( NULL !=  pEditor )
  {
      _pPso = pEditor-&gt;<strong>GetPSO</strong>();
  }
...</pre>
<p>The <code>GetEditor</code> method is a <em>CATStateCommand</em> method. It retrieves 
the <em>CATFrmEditor</em> class instance associated with the active model. This 
instance has created the <em>CATPSO</em> class instance [<a href="#References">6</a>].</p>
<p>The <code>GetFoundObjects</code> method of the <em>CATIIniSeachEngine </em>interface 
retrieves all the found objects. The returned value, <code>pListOfFoundObjects,</code> 
is a <em>CATSO</em> object, it means that the method returns a list of complete 
paths. Each value of the list is a <em>CATPathElement (</em>Visualization<em>
</em>framework<em>)</em>. Note that <code>pListOfFoundObjects</code><code>
</code>cannot be NULL, because the <code>GetFoundObjects</code> method returns
<code>E_FAIL</code> if no object are found. </p>
<pre class="code">...
  <strong>CATSO</strong> * pListOfFoundObjects = NULL ;
  int nbelt = 0 ;
  _pIniSearchEngineOnCurrentEngine-&gt;<strong>GetFoundObjects</strong>(pListOfFoundObjects);
...</pre>
<p>Since several objects can be found, the complete path of the objects are set 
in the <em>CATPSO</em> thanks to the <code>AddElements</code> method, and after 
the last addition, the <code>EndAddElements</code> is called.</p>
<pre class="code">...
  nbelt = pListOfFoundObjects-&gt;<strong>GetSize</strong>();
        
  if ( NULL != _pPso )
  {
     for ( int i= 0 ; i &lt; nbelt ; i++ )
     {
        CATBaseUnknown * pCurrent = (*pListOfFoundObjects)[i] ;
        if ( NULL != pCurrent )
        {
                 _pPso-&gt;<strong>AddElements</strong>(pCurrent);
        }
      }
      _pPso-&gt;<strong>EndAddElements</strong>();
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to use the Search API to create queries and launch 
them.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACafTaSearch.htm">Search Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">Getting 
		Started with State Dialog Commands</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAAfrUcSampleGeneralWksAddin.htm">Making Your Model 
		Independent Command Available in All Apps</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegUcSampleDialogWithAgent2.htm">
		Associating a Dialog Box with a Dialog Agent - Part 2</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysUcOMSimpleCmpCLSID.htm">
		Instantiating a Component using its CLSID</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAAfrTaOverview.htm">Wintop Frame Overview</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
