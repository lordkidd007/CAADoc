<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Editing Objects</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Objects</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to make an object editable, and how to create 
		the associated dialog.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrGeoEdition Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeoEdition Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeoEdition</a></li>
					<li><a href="#Where">Where to Find the CAAAfrGeoEdition Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create make an object editable, and 
which object to provide to edit it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeoEdition Use Case</h2>
<p>CAAAfrGeoEdition is a use case of the CAAApplicationFrame.edu framework that 
illustrates the AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrGeoEdition Do</h3>
<p>The CAAAfrGeoEdition use case makes the Point object an editable object, and 
provides it with an editing command and an editing dialog.</p>
<p>
<img alt="" src="images/CAAAfrPointCmdEditMenu.gif" width="333" height="331"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeoEdition</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">1</a>] use case for a detailed description of how this use 
case should be launched. For the specific scenario:</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> app. </li>
    <li>Create at least one point using the <kbd>Point</kbd> command in <kbd>CAA Geometry Creation Section</kbd> of the action bar.</li>
	<li>Right click this point and select the <kbd>Definition</kbd> command.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrGeoEdition Code</h3>
<p>The CAAAfrGeoEdition use case is made of three classes located in the CAAAfrGeoEdition.m 
module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoEdition.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>These classes are:</p>
<table>
	<tr>
		<td><em>CAAEAfrEditPoint</em></td>
		<td>Extension class for the <em>CAASysPoint</em> component</td>
	</tr>
	<tr>
		<td><em>CAAAfrPointEditCmd</em></td>
		<td>Editing command class</td>
	</tr>
	<tr>
		<td><em>CAAAfrPointEditDlg</em></td>
		<td>Dialog class associated with the editing command class</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To make an object editable, there are three steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Make the point object implement the
		<em>CATIEdit</em> interface</a></td>
		<td><em>CAAEAfrEditPoint</em> class</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the editing command</a></td>
		<td><em>CAAAfrPointEditCmd</em> class</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the editing dialog</a></td>
		<td><em>CAAAfrPointEditDlg</em> class</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Making the Point Object Implement the CATIEdit Interface</h3>
<p>The <em>CATIEdit</em> interface mainly provides the <code>Activate</code> method 
that should return the <em>CATCommand</em> class instance that actually enables 
the object edition. <code>Activate</code> is called whenever the end user intends 
to edit the object by double clicking or through the object's contextual menu.</p>
<p>To make the <em>CAASysPoint</em> component implements the <em>CATIEdit</em> interface, 
we create a class that derives from the <em>CATExtIEdit</em> adapter class as a 
data extension of the <em>CAASysPoint</em> class, and that provides code for the
<code>Activate</code> method. The other methods of the <em>CATIEdit</em> interface 
are inherited from <em>CATExtIEdit</em>.</p>
<ol>
	<li>Create the header file for the <em>CAAEAfrEditPoint</em> class
		<pre class="code">#include &quot;CATExtIEdit.h&quot;   //Needed to derive from CATExtIEdit

class CAAEAfrEditPoint : public <strong>CATExtIEdit</strong>
{
  <strong>CATDeclareClass</strong>;
  public :
    CAAEAfrEditPoint();
    virtual ~CAAEAfrEditPoint();
    virtual CATCommand  * <strong>Activate</strong>(CATPathElement * iPath);
  private :
    CAAEAfrEditPoint(const CAAEAfrEditPoint &amp;iObjectToCopy);
};</pre>
		<p>The <code>CATDeclareClass</code> macro declares that <em>CAAEAfrEditPoint</em> 
		belongs to a component. It only redefine the Activate method of <em>CATIEdit</em>.</p>
	</li>
	<li>In the class source file, insert the object modeler part
		<pre class="code">...
<strong>CATImplementClass</strong>(CAAEAfrEditPoint,
                  <strong>DataExtension</strong>,
                  CATBaseUnknown,
                  <strong>CAASysPoint</strong>);

#include &quot;TIE_CATIEdit.h&quot;
TIE_CATIEdit(CAAEAfrEditPoint);
...</pre>
		<p>The <code>CATImplementClass</code> macro reads: <em>CAAEAfrEditPoint</em> 
		is a data extension of <em>CAASysPoint</em>. The third argument must always 
		be set as <em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension. 
		The TIE macro creates the TIE class for the <em>CATIEdit</em> interface.</p>
	</li>
	<li>Implement the <code>Activate</code> method
		<pre class="code">...
CATCommand * CAAEAfrEditPoint::<strong>Activate</strong>(CATPathElement * pPath)
{
  CAAAfrPointEditCmd *  pEdtCmd = NULL;
  CAAISysPoint * pISysPointOnPoint = NULL;                
  HRESULT rc = <strong>QueryInterface</strong>(<strong>IID_CAAISysPoint</strong>, (void**)&amp;pISysPointOnPoint);
  if (SUCCEEDED(rc))
  {
    CAAAfrPointEditCmd *  pEdtCmd = new <strong>CAAAfrPointEditCmd</strong>(pISysPointOnPoint);
    pISysPointOnPoint-&gt;<strong>Release</strong>();
  }
  return (CATCommand*) pEdtCmd;
}</pre>
		<p>The <code>Activate</code> method:</p>
		<ul>
			<li>First retrieves a pointer to an interface implemented by the object 
				to pass to the dialog box. Here we choose to retrieve a pointer 
				to the type interface of <em>CAASysPoint</em> because this interface 
				exposes methods that manages the object parameters we want to display 
				in the dialog box for modification, that is the point coordinates</li>
			<li>Then constructs the dialog command object. This is an instance of 
				the <em>CAAAfrPointEditCmd</em> described in <a href="#Step2">Creating 
				the Editing Command</a> to which the previous pointer to the object 
				to edit is passed </li>
			<li>Finally, returns the editing command pointer as a <em>CATCommand</em> 
				pointer.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Editing Command</h3>
<p>The point editing command is named <em>CAAAfrPointEditCmd</em> and directly derives 
from <em>CATCommand</em>. In addition to the three methods inherited from <em>CATCommand</em> 
and redefined to manage its availability and lifecycle, that is, <code>Activate</code>,
<code>Desactivate</code>, and <code>Cancel</code>, the command has also the
<code>CloseBox</code> method that is called when the end user closes the dialog 
box to request the dialog destruction. The command data members are a pointer to 
the dialog and a pointer to the <em>CAAISysPoint</em> interface.</p>
<p>The CAAAfrPointEditCmd.cpp file is as follows. Let's examine its body in an event 
driven way.</p>
<ul>
	<li>The constructor is called by the command selector when the end user double 
		clicks on the object, or select the Definition item of the point contextual 
		menu.
		<pre class="code">...

CAAAfrPointEditCmd::CAAAfrPointEditCmd(CAAISysPoint * ipEdit)					 
             : CATCommand (&quot;PointEditCommandId&quot;,<strong>CATCommandModeExclusive</strong>),
               _pEdit(ipEdit),_DialogPoint(NULL)
{
  if (_pEdit) _pEdit -&gt; AddRef();
}
...</pre>
		<p>The constructor sets the command as exclusive thanks to <code>CATCommandModeExclusive</code> 
		passed as second parameter of the <em>CATCommand</em> constructor. This 
		deletes all possible existing commands. Any command that modifies the model 
		must be set as exclusive. The constructor also retrieves a pointer to the
		<em>CAAISysPoint</em> interface on the object to edit.</p>
	</li>
	<li>The <code>Activate</code> method is called by the command selector just 
		after its instantiation
		<pre class="code">...
CATStatusChangeRC CAAAfrPointEditCmd::Activate(CATCommand      *iCmd,
                                               CATNotification *iNotif)
{
  if ( !_DialogPoint)
  {
    CATDlgStyle style = CATDlgGridLayout | CATDlgWndBtnOKCancelPreview;&lt;
    CATString id (&quot;CAAAfrPointEditDlgId&quot;);
    CATDialog * pParent = (CATApplicationFrame::GetFrame())-&gt;GetMainWindow() ;

    _DialogPoint = new <strong>CAAAfrPointEditDlg</strong>(pParent,id,style,_pEdit);

    <strong>AddAnalyseNotificationCB</strong>(_DialogPoint, _DialogPoint-&gt;<strong>GetWindCloseNotification</strong>(),
                             (CATCommandMethod)&amp;CAAAfrPointEditCmd::<strong>CloseBox</strong>,
                             NULL);

    _DialogPoint-&gt;<strong>Build</strong>();
  }

  _DialogPoint-&gt;<strong>SetVisibility</strong>(CATDlgShow);
  return (CATStatusChangeRCCompleted);
}
...</pre>
		<p><code>Activate</code> is called whenever the command selector gives the 
		focus to the command, whether because the end user clicks on it or because 
		it takes the focus after being deactivated by a shared command. <code>Activate</code> 
		creates the dialog if it does not already exists, makes it visible, and 
		returns that the method normally completes.</p>
		<p>To create the dialog box, the dialog box constructor is called with the 
		following parameters:</p>
		<ol>
			<li>As a <em>CATCommand</em> class instance, its parent in the command 
				tree structure is passed as first parameter. Since for a dialog, 
				it should be another dialog, this is set as the frame window.</li>
			<li>The dialog box name is passed as the second parameter</li>
			<li>The style concatenation makes a dialog box with the three buttons 
				OK (<code>CATDlgWndOK</code> ), Preview (<code>CATDlgWndPREVIEW</code>), 
				and Cancel(<code>CATDlgWndCANCEL</code>). With UNIX, a Help button 
				is added (<code>CATDlgWndHELP</code>). With Windows, a question 
				mark is put in the title bar instead (<code>CATDlgWndHELP</code> 
				and <code>CATDlgWndTitleBarHelp</code>). The dialog window is arranged 
				using a grid (<code>CATDlgGridLayout</code>) </li>
			<li>The pointer to the interface <em>CAAISysPoint</em> is passed as 
				the fourth parameter.</li>
		</ol>
		<p>A callback is set on the dialog box to be informed when the ned user 
		closes it, and the dialog box <code>Build</code> method is called to actually 
		fill it with appropriate controls. The constructor of a dialog object should 
		only allocate storage for the dialog box, but should not set any of the 
		labels or fields with values coming from resource files, since these files 
		could be required before being allocated by the constructor. Valuation is 
		dedicated to the <code>Build</code> method, and the dialog can be shown. 
		The method returns that it is completed. Refer to <a href="#Step3">Creating 
		the Editing Dialog</a> for more details.</p>
	</li>
	<li>The other methods are as follows.
		<pre class="code">...
CATStatusChangeRC CAAAfrPointEditCmd::<strong>Desactivate</strong>(CATCommand      * iCmd,
                                                  CATNotification * iNotif)
{
  _DialogPoint-&gt;SetVisibility(CATDlgHide);
  return (CATStatusChangeRCCompleted);
}

CATStatusChangeRC CAAAfrPointEditCmd::<strong>Cancel</strong>(CATCommand      * iCmd,
                                             CATNotification * iNotif)
{
  _DialogPoint-&gt;SetVisibility(CATDlgHide);
  RequestDelayedDestruction();  
  return (CATStatusChangeRCCompleted);
}

void CAAAfrPointEditCmd::<strong>CloseBox</strong>(CATCommand           * iSendingCommand,
                                  CATNotification      * iSentNotification,
                                  CATCommandClientData   iUsefulData)
{
  _DialogPoint-&gt;SetVisibility(CATDlgHide);
  RequestDelayedDestruction();
}</pre>
		<p>These methods do the following:</p>
		<ul>
			<li><code>Desactivate</code> is called whenever the command selector 
				withdraws the focus from it. This happens when a shared command 
				takes the focus. The command remains in the command stack, ready 
				to take the focus again as soon as the shared command completes. 
				It simply hides the dialog to ensure that the end user will not 
				click in it while the command is deactivated, but don't delete anything 
				to be ready to restore the dialog if the focus is assigned to it 
				afterward</li>
			<li><code>Cancel</code> is called whenever the command definitely looses 
				the focus and should be deleted, usually when the end user selects 
				another exclusive command. <code>Cancel</code> hides the dialog 
				and requets the command destruction</li>
			<li><code>CloseBox</code> is called whenever the end user whenever the 
				end user clicks OK or Cancel, or closes the dialog. It is equivalent 
				to <code>Cancel</code>, but is not called as a callback of the dialog, 
				and not by the command selector. <code>RequestDelayedDestruction</code> 
				informs the command selector to release the focus from the command. 
				The default command, usually Select, is activated instead.</li>
		</ul>
	</li>
	<li>The destructor is called by <code>RequestDelayedDestruction</code> and should 
		first remove the callback set on the dialog before requesting the dialog 
		destruction.
		<pre class="code">...
CAAAfrPointEditCmd::~CAAAfrPointEditCmd()
{
  if (_DialogPoint)
  {
    RemoveAnalyseNotificationCB(_DialogPoint,
                                _DialogPoint-&gt;GetWindCloseNotification(),
                                NULL);
    _DialogPoint-&gt;RequestDelayedDestruction();
  }
}</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Editing Dialog</h3>
<p>The editing command is the dialog box created using the <code>Activate</code> 
method of the <em>CATIEdit</em> interface implementation. It highly depends on the 
object to edit and is designed and coded as any other dialog box, that is with an 
empty constructor and a <code>Build</code> method. The dialog box for the <em>CAASysPoint</em> 
class is as follows:</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrPointCmdEditor.jpg" width="262" height="159"/></td>
		<td>This dialog box shows three spinners to display and change the point 
		x, y, and z coordinates. The OK button applies the new parameter values 
		and closes the dialog box. The Preview button only applies the new parameter 
		values, but the dialog box remains displayed. The Cancel button closes the 
		window and restores the coordinate initial values.</td>
	</tr>
</table>
<p>The <em>CAAAfrPointEditDlg</em> class derives from the <em>CATDlgDialog</em> 
class, which is the base class for all dialog boxes. The constructor takes a pointer 
to the <em>CAAISysPoint</em> interface. This is the main interface implemented by 
the object, and this pointer will be useful to get the object's parameter values 
to build the dialog box, and to modify the object when the end user clicks OK or 
Preview.</p>
<p>The <code>Build</code> method creates the controls, arranges them in the dialog 
box, and sets the labels and numerical values from resource files or using the pointer 
to the <em>CAAISysPoint</em> interface. It sets the callbacks for the OK, Preview, 
and Cancel push buttons, and for the window closing event, that is, <code>ClickOK</code>,
<code>ClickPreview</code>, <code>ClickCancel</code>, and <code>CloseBox</code> respectively.</p>
<p>We'll examine the callback methods, then <code>CloseBox</code>, and finally
<code>ModifyModelAndVisu</code> that modifies the model and request for a display 
refresh.</p>
<ol>
	<li><code>ClickOK</code>
		<pre class="code">void CAAAfrPointEditDlg::ClickOK(CATCommand * iSendingCommmand,
                                 CATNotification * iSentNotification,
                                 CATCommandClientData UsefulData)
{
  ModifyModelAndVisu(_XSpinner-&gt;GetCurrentValue(),
                     _YSpinner-&gt;GetCurrentValue(),
                     _ZSpinner-&gt;GetCurrentValue());
  CloseBox();
}</pre>
		<p>This method is executed whenever the end user clicks the OK push button. 
		It first modifies the point and the display thanks to the <code>ModifyModelAndVisu</code> 
		method using the current values of the spinners and calls the <code>CloseBox</code> 
		method that takes appropriate actions to close the dialog.</p>
	</li>
	<li><code>ClickPreview</code>
		<pre class="code">void CAAAfrPointEditDlg::ClickPreview(CATCommand * iSendingCommmand,
                                    CATNotification * iSentNotification,
                                    CATCommandClientData UsefulData)
{
  ModifyModelAndVisu(_XSpinner-&gt;GetCurrentValue(),
                     _YSpinner-&gt;GetCurrentValue(),
                     _ZSpinner-&gt;GetCurrentValue());
}</pre>
		<p>This method is executed whenever the end user clicks the Preview push 
		button. It just modifies the point and the display like <code>ClickOK</code>, 
		but leaves the dialog box displayed.</p>
	</li>
	<li><code>ClickCancel</code>
		<pre class="code">void CAAAfrPointEditDlg::ClickCancel(CATCommand * iSendingCommmand,
                                     CATNotification * iSentNotification,
                                     CATCommandClientData UsefulData)
{
  ModifyModelAndVisu(_Xfirst,_Yfirst,_Zfirst);
  CloseBox();
}</pre>
		<p>This method is executed whenever the end user clicks the Cancel push 
		button. It just restores the point and the display using the point initial 
		coordinates, and closes the dialog.</p>
	</li>
	<li><code>ClickClose</code><br />
		<pre class="code">void CAAAfrPointEditDlg::ClickClose(CATCommand * iSendingCommmand,
                                    CATNotification * iSentNotification,
                                    CATCommandClientData UsefulData)
{
  CloseBox();
}</pre>
		<p>This method is executed whenever the end user closes the dialog. It calls 
		the <code>CloseBox</code> method.</p>
	</li>
	<li><code>CloseBox</code>
		<pre class="code">void CAAAfrPointEditDlg::CloseBox()
  { SetVisibility(CATDlgHide);

  SendNotification(GetFather(),CATDlgDialog::GetWindCloseNotification());
}</pre>
		<p>This method hides the dialog, and sends a notification to state that 
		the dialog should be closed This notification is sent to the dialog father, 
		set to the frame window as the first parameter of its constructor. This 
		notification moves from a command to its parent along the command tree structure 
		up to the first command that have set a callback for this notification and 
		for this dialog. Since there are few chances that such a command exists, 
		the notification reaches the command selector that resends it to the active 
		command, which fortunately has set such a callback execute its own <code>
		CloseBox</code> method when such a notification is received from the dialog.</p>
	</li>
	<li>The <code>ModifyModelAndVisu</code> method modifies the point in the model 
		and sends a notification to request the display to update accordingly.<br />
		<pre class="code">void CAAAfrPointEditDlg::ModifyModelAndVisu(const float iX, const float iY, const float iZ)
{
  _pPointEdit-&gt;SetCoord(iX, iY, iZ);

  CATIModelEvents * pModelEvents = NULL;
  HRESULT rc = _pPointEdit -&gt; QueryInterface(IID_CATIModelEvents, (void**)&amp;pModelEvents);
  if (SUCCEEDED(rc))
  {
    CATModify * pNotif = new <strong>CATModify</strong>(pModelEvents);
    pModelEvents-&gt;Dispatch(*pNotif);
    delete pNotif;
    pModelEvents-&gt;Release();
  } 
}</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Any object can be edited using a dialog when the end user double clicks a representation 
of the object when the Select command is the active one, or from the object contextual 
menu, provided the object implements the <code>Activate</code> method of the <em>
CATIEdit</em> interface.</p>
<p>The object editing command is then made active. This command must be created 
in the exclusive mode to ensure that both its availability and its lifecycle are 
correctly managed by the command selector. The associated dialog box dedicated to 
editing the object is like any other dialog box. It updates the object's data using 
methods provided by the object, and its representation(s) by dispatching notifications 
to the visualization manager, both by means of callbacks set on its different controls.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform </td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
