<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>How to Add an Object Property Page</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>How to Add an Object Property Tab</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The Properties command, accessible from an object's contextual menu, displays a dialog box with property 
		tabs. This 
		article explains the Properties command and discusses how to create 
		and integrate property tabs for your own objects. </p>
		<ul>
			<li><a href="#100000">What is the Properties command?</a></li>
			<li><a href="#200000">Creating Your Property Tab</a>
				<ul>
					<li><a href="#210000">Creating the Property Page Editor Factory</a>
					
					</li>
					<li><a href="#220000">Creating the Property Page Editor</a>
					</li>
					<li><a href="#230000">Creating the Property Page Dialog</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>What is the Properties command?</h2>
<p>The Properties command displays a tabbed dialog box, each tab containing a 
property page. It enables the end user to work with many properties gathered in 
a single place, rather than having several dialog boxes accessed seperatly. 
Each property tab contains various controls to set values or options for one or 
several properties to manage element's persistent parameters that the end user can 
modify. When the end user clicks on a tab, the controls for the properties are displayed 
and the end user can alternatively display different property tabs by clicking 
on different tabs. The Properties command is launched from an object's contextual menu.</p>
<p>Remark: Object properties are different from app preferences that are accessed by using the 
<kbd>Me Services->Preferences</kbd> menu 
in the top bar[1]. The preferences command manages parameters or attributes that are independent from the current selection 
and are of general purpose. Their values are saved into setting 
files.</p>
<p>The&nbsp; Properties dialog box displays a property tab for 
each type of property available for the current selected object. For example, in 
the screen shot below, there are three property tabs named &quot;Mechanical&quot;, 
&quot;Feature Properties&quot; and &quot;Graphic&quot;.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAACafEditProp1.jpg" width="571" height="491"/></td>
		<td>The Graphic tab is provided by the general application. To have this 
		tab available, an object needs to implement the <em>CATIVisProperties</em> interface.</td>
	</tr>
</table>
<p>Each property tab displays controls to set parameter values or working options 
for its related property. These values are read from the element when the properties 
dialog box is built. The dialog box works as follows: </p>
<ul>
	<li>Clicking on <kbd>OK</kbd> commits all the changed values and options in all the property 
		tabs modified or simply scanned, that is saves the values and options into 
		the selected object(s), and closes the Properties dialog box. </li>
	<li>Clicking on  <kbd>Apply</kbd> saves the values and options into the selected object(s), 
		but lets the dialog box open. Parameter modifications are taken into account, 
		and the selected objects change accordingly.</li>
	<li>Clicking on <kbd>Close</kbd> closes the Properties dialog box without saving modified values, unless <kbd>Apply</kbd> 
	button had been clicked on before. </li>
</ul>
<p>When the end user selects <kbd>Properties</kbd> item of an object's 
contextual menu, the property tabs are built as follows: </p>
<ul>
	<li>The first time, the interface dictionary is scanned to retrieve all the 
		interfaces implemented by the <code>CATEditorManager</code> object. This object is used 
		to create and manage property pages. Then the factory 
		dictionary is scanned to check whether these interfaces are factory interfaces, 
		and each factory interface is requested to create an instance of the class 
		it is dedicated to, that is a property editor. </li>
	<li>The CSO contents is retrieved and passed to the <code>ExtractFromSelection</code> 
		method of each property editor. </li>
	<li>The <code>ExtractFromSelection</code> method determines whether the 
	object(s) in the CSO implements the property interface(s) this property 
	editor deals with, and if this is the case, the property page editor creates 
	the property page dialog to be displayed in theProperties dialog box.</li>
</ul>
<p> Remark: To help improve performance when creating the Properties dialog box, 
you can decide to hide some properties. Their property page editors are not created, 
as well as their dialogs. The Properties dialog box shows a <kbd>More...</kbd> press button 
that enables to display these properties. To force property 
tabs 
to be displayed by default, the objects must implement the <em>CATIRootProperties</em> interface. 
The GetListOfEditors method returns the property page editors to instantiate. 
Otherwise, the property pages are created when the end user presses on the <kbd>More</kbd> button.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Creating Your Property Tab</h2>
<p>To create your property tab, you need to consider having objects that implement 
one or several property interfaces, that is, interfaces that derive from CATIEditProperty. 
If this is the case, you need to create: </p>
<ul>
	<li>A property page <strong>editor</strong><br />
		It retrieves the selected objects from the CSO, checks whether they implement 
		the appropriate property interface, retrieves the selected object properties, 
		creates and manages the dialog displayed and its controls, and applies or 
		cancels the modifications entered in the dialog. </li>
	<li>A property page <strong>dialog</strong><br />
		It gathers the different controls that enable the end user to see and edit 
		the selected object properties.</li>
</ul>
<p>Since you create new properties and their property pages when you wish, the property 
page editor instantiation mechanism relies on factories. You need first to create 
a <strong>factory interface</strong>, and then implement it to create the property 
page <strong>factory</strong>.</p>
<p>Let's detail the tasks to do to create a property page, whose editor is CAAPPEdt.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="210000"></a>Creating the Property Page Editor Factory</h3>
<p>You need:</p>
<ul>
	<li>To create the property page editor factory interface<br />
		The <em>CAAIPPEdtFactory</em> interface derives from the <em>CATIGenericFactory</em> 
		interface.
		<p>
		<img alt="Property Page Editor Factory" height="129" src="images/CAACafEditPropFactory1.gif" width="379"/></p>
	</li>
</ul>
<ul>
	<li>To create the property page editor factory<br />
		The factory class can be creates using macros in the header and source files.
		<p>
		<img alt="Property Page Editor Factory" height="99" src="images/CAACafEditPropFactory2.gif" width="413"/></p>
	</li>
	<li>To update the interface dictionary and the factory dictionary.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="220000"></a>Creating the Property Page Editor</h3>
<p>You'll now create the class for the property page. This class derives from the 
CATEditor class, implements the <em>CATIEditProperties</em> interface and overrides 
the methods shown in the diagram below.</p>
<p>
<img alt="Property Page Objects" height="238" src="images/CAACafEditPropObjects.gif" width="586"/></p>
<p>These methods are those of the <em>CATIEditProperties</em> interface and are 
either pure virtual or empty in their CATEditor implementation. You should provide 
their body to make them play the following role: </p>
<ul>
	<li><code>ExtractFromSelection</code> returns the list of objects found in the 
		Current Set of Objects (CSO) that implement the property interface </li>
	<li><code>GetEditorTitle</code> returns the property tab title </li>
	<li><code>SetEditorSize</code> lets you request which size you need to accommodate 
		your property tab, among the possible values: small, medium, or large
	</li>
	<li><code>BuildEditor</code> instantiates the associated dialog class </li>
	<li><code>SetPropertyValue</code> sets the values and options in the property 
		page dialog from the objects </li>
	<li><code>CommitModification</code> applies to the selected objects the modifications 
		made to values and options in the property page dialog. </li>
	<li><code>CancelModification</code> is empty, but exists and could be used to 
		delete temporary objects that could possibly be allocated in previous methods
	</li>
	<li><code>CloseWindowFromEditor</code> is called whenever the end user selects 
		another property tab.</li>
</ul>
<p>The methods <code>ExtractFromSelection</code>, <code>GetEditorTitle</code>,
<code>SetEditorSize</code>, <code>BuildEditor</code>, and <code>SetPropertyValue</code> 
are executed in this order when instantiating the property page.</p>
<p>When the end user clicks on: </p>
<ul>
	<li><kbd>OK</kbd>, the <code>CommitModification</code> method is executed and the dialog box 
		is closed</li>
	<li><kbd>Apply</kbd>, the <code>CommitModification</code> method is executed, but the dialog box 
		is not closed</li>
	<li><kbd>Close</kbd>, the dialog box is closed.</li>
</ul>
<p><code>SetPropertyValue</code>, <code>CommitModification</code>, and <code>CancelModification</code> 
call in turn the methods with the same name of the associated dialog class.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="230000"></a>Creating the Property Page Dialog</h3>
<p>This dialog is a class that derives from <em>CATDlgFrame</em>. You can create 
and arrange the controls, and possibly other dialog objects, such as separators, 
frames, and so on, to help control arrangement.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Creating a new property tab for the Properties command, available in an 
selected object's contextual menu, implies to create a property page editor factory, a property 
page editor class instantiated by this factory, and to supply a property page dialog class gathering the controls to access 
the parameters and values of the object's properties you let the end user access 
and modify.</p>
<p>To be extracted from the Current Set of Objects (CSO), the objects should 
implement the property interface(s) to which the new property tab is dedicated.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACafTaToolsOptions.htm">How to Add an App Preferences Tab</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform </td>
	</tr>


</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
