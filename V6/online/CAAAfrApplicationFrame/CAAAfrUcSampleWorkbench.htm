<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating an App</title>
<style type="text/css">
.style1 {
				text-decoration: underline;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating an App</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create an app. An app gathers the necessary 
		commands to work on a data model and perform specific tasks. In a 
		complex application, a same data model can be associated with several 
		apps, each app providing a given usage configuration dedicated to a 
		specific process&nbsp;&nbsp; </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrGeoCreationWbench Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeoCreationWbench Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeoCreationWbench</a></li>
					<li><a href="#Where">Where to Find the CAAAfrGeoCreationWbench 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#Troubleshooting">Troubleshooting</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create an app. The app organizes the 
access to the commands it gathers, mostly located in a section of the action 
bar, but possibly in the <kbd>App Mode</kbd> and <kbd>Object Properties</kbd> panels, or in a contextual menu. 
Command headers are used to make the link between the app and the commands.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeoCreationWbench Use Case</h2>
<p>CAAAfrGeoCreationWbench is a use case of the CAAApplicationFrame.edu framework 
that illustrates the AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrGeoCreationWbench Do</h3>
<p>The CAAAfrGeoCreationWbench use case creates an app named <kbd>CAA: Create Geom</kbd> for the CAAGeometry model. 
Two sets of commands are provided:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		
		
		<td>The <strong>Solids</strong> commands : five new commands: Cuboid, Sphere, Torus, and Cylinder 1 and 2.</td>
	</tr>
	<tr>
		
		<td>The <strong>Surfaces</strong> commands : three new commands: 
		Revolution Surface, Nurbs Surface, and Offset Surface.</td>
	</tr>
</table>

<p> These commands are added in the <kbd>CAA Geometry Creation Section</kbd> of the 
action bar. </p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeoCreationWbench</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">3</a>] for a detailed description of how this use case should 
be launched. For the specific scenario :</p>
<p>Do not type the module name on the command line, but type <strong>3DEXPERIENCE</strong> instead. When 
the application is ready, do the following:</p>
<ul>
<li>Click on <kbd>3D</kbd>, the west quadrant of&nbsp; the compass.</li>
<li>In the <kbd>3DModeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> 
app </li>
</ul>

<p>This creates a new CAAGeometry model with the <kbd>CAA: Create Geom</kbd>  app 
active.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrGeoCreationWbench Code</h3>
<p>The CAAAfrGeoCreationWbench use case is made of classes and interfaces located 
in the CAAAfrGeoCreationWbench.m module and in the PublicInterfaces directory 
of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoCreationWbench.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>These classes and interfaces are:</p>
<table>
	<tr>
		<td><em>CAAAfrGeoCreationWkb</em></td>
		<td>App description class</td>
	</tr>
	<tr>
		<td><em>CAAAfrGeoCreationWkbFactory</em></td>
		<td>Factory class for the app class</td>
	</tr>
	<tr>
		<td><em>CAAIAfrGeoCreationWkbFactory</em></td>
		<td>Factory interface implemented by <em>CAAAfrGeoCreationWkbFactory</em></td>
	</tr>
	<tr>
		<td><em>TIE_CAAIAfrGeoCreationWkbFactory</em></td>
		<td>TIE class for the factory interface</td>
	</tr>
	<tr>
		<td><em>CAAIAfrGeoCreationWkbAddin</em></td>
		<td>Add-in interface exposed by the app and that all its add-ins must 
		implement</td>
	</tr>
	<tr>
		<td><em>TIE_CAAIAfrGeoCreationWkbAddin</em></td>
		<td>TIE class for the add-in interface</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Before creating an app, you should check that the data model to which your 
	app is dedicated exposes the <em>CATIxxxConfiguration</em> interface, where 
xxx is&nbsp; the model identifier. It is mandatory to implement this interface, otherwise the app won't 
		be available. 
		<br />In our example, the interface is <em>CATICAAAfrGeometryWksConfiguration.</em> 
We are creating an add-in to the CAAGeometry model, for which the identifier is.<code>CAAAfrGeometryWks.</code></p>
	
	

<p>To create the <kbd>CAA: Create geom</kbd> app, there are eight steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the App Factory Interface</a></td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the App Factory</a></td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the App Description Class</a></td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Create the Command Headers</a></td>
		<td><code>CreateCommands</code> method</td>
	</tr>
	<tr>
		<td style="height: 15px">5</td>
		<td style="height: 15px"><a href="#Step5">Create the App and arrange the 
		Commands</a></td>
		<td style="height: 15px"><code>CreateWorkbench</code> method</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Provide the App Resources</a></td>
		<td>Resource files</td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Create the App Exposed Interface</a></td>
		<td>PublicInterfaces and src</td>
	</tr>
    <tr>
		<td>8</td>
		<td><a href="#Step8">Declare the App in the Compass</a></td>
		<td>MyApps service</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the App Factory Interface</h3>
<p>This factory interface is named <em>CAAIAfrGeoCreationWkbFactory</em>. To create 
this interface, create:</p>
<ol>
	<li>The header file</li>
	<li>The source file</li>
	<li>The TIE tsrc file.</li>
</ol>
<p>This is shown below.</p>
<ol>
	<li>Its header file CAAIAfrGeoCreationWkbFactory.h is as follows<br />
		<pre class="code">#include &lt;CATIGenericFactory.h&gt; 

extern IID <strong>IID_CAAIAfrGeoCreationWkbFactory</strong>;

class CAAIAfrGeoCreationWkbFactory : public <strong>CATIGenericFactory</strong>
{
  <strong>CATDeclareInterface</strong>;
  public :
};</pre>
		<p>A factory interface is an abstract class that 
		derives from <em>CATIGenericFactory</em>. As any interface, it has an IID 
		declared as IID_ followed by the interface name, and includes the <code>
		CATDeclareInterface</code> macro that declares that this abstract class 
		is an interface. No additional method than those of <em>CATIGenericFactory</em> 
		is necessary. Don't forget the public keyword required by the TIE compiler.</p>
	</li>
	<li>Its source file CAAIAfrGeoCreationWkbFactory.cpp is as follows.
		<pre class="code">#include &lt;CAAIAfrGeoCreationWkbFactory.h&gt;

IID IID_CAAIAfrGeoCreationWkbFactory = <strong>{
    0xb32eed10,
    0xd4c1,
    0x11d3,
    {0xb7, 0xf5, 0x00, 0x08, 0xc7, 0x4f, 0xe8, 0xdd}
  };</strong>

<strong>CATImplementInterface</strong>(CAAIAfrGeoCreationWkbFactory, CATIGenericFactory);</pre>
		<p>This file includes a GUID [<a href="#References">1</a>], shown in bold 
		typeface. The <code>CATImplementInterface</code> macro is used in conjunction 
		with <code>CATDeclareInterface</code> in the header file to make an interface 
		from this abstract class and to declare that it OM-derives from <em>CATIGenericfactory</em>.</p>
	</li>
	<li>Create a file named TIE_CAAIAfrGeoCreationWkbFactory.tsrc in the src directory, 
		and containing:
		<pre class="code">#include &quot;CAAIAfrGeoCreationWkbFactory.h&quot;</pre>
		<p>The Multi-Workspace Application Builder (mkmk) will generate the TIE 
		for this interface for you, that is, the TIE_CAAIAfrGeoCreationWkbFactory.h 
		file in the ProtectedGenerated directory.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the App Factory</h3>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: The factory 
		class that creates app instances must concatenate the name of the class 
		to instantiate, that is, the app description class <strong>CAAAfrGeoCreationWkb</strong>, 
		with the string <strong>Factory</strong>. This gives <strong>CAAAfrGeoCreationWkbFactory.</strong>
		</td>
	</tr>
</table>
<p>To create this class, create:</p>
<ol>
	<li>The header file, using the <code>CATDeclareConfigurationFactory</code> macro</li>
	<li>The source file, using the <code>CATImplementConfigurationFactory</code> 
		macro</li>
	<li>Update the interface dictionary and the factory dictionary.</li>
</ol>
<ol>
	<li>Create the CAAAfrGeoCreationWkbFactory.h header file.
		<pre class="code">#include &quot;CATWorkshopConfigurationFactory.h&quot; 

CATDeclareConfigurationFactory(CAAAfrGeoCreationWkb);</pre>
		<p>The <code>CATDeclareConfigurationFactory</code> macro argument is the 
		name of the app description class.</p>
	</li>
	<li>Create the CAAAfrGeoCreationWkbFactory.cpp file.
		<pre class="code">#include &lt;CAAAfrGeoCreationWkb.h&gt;
#include &lt;CAAAfrGeoCreationWkbFactory.h&gt;

#include &lt;TIE_CAAIAfrGeoCreationWkbFactory.h&gt;

CATImplementConfigurationFactory(CAAAfrGeoCreationWkb,
                                 CAAIAfrGeoCreationWkbFactory);</pre>
		<p>The <code>CATImplementConfigurationFactory</code> arguments are the 
		name of the app description class and the name of the app factory 
		interface respectively. The <code>CATDeclareConfigurationFactory</code> 
		and <code>CATImplementConfigurationFactory</code> macros create the app 
		factory implementation class as a data extension of the <em>CATApplicationFrame</em> 
		component</p>
	</li>
	<li>You should now update the two dictionary files:
		<ul>
			<li>The <em>interface dictionary</em>, that is a file whose name is 
				the framework name suffixed by dico, such as CAAApplicationFrame.dico, 
				and that you should create or update in the framework CNext/code/dictionary 
				directory. The interface dictionary contains the following declaration 
				to state that the <em>CATApplicationFrame</em> component implements 
				the <em>CAAIAfrGeoCreationWkbFactory</em> interface, by means of 
				the extension class created by the macros, whose code is located 
				in the libCAAAfrGeoCreationWbench shared library or DLL:<br />
				<pre class="code">CATApplicationFrame  CAAIAfrGeoCreationWkbFactory  libCAAAfrGeoCreationWbench</pre>
			</li>
			<li>The <em>factory dictionary</em>, that is a file whose name is the 
				framework name suffixed by fact, such as CAAApplicationFrame.fact, 
				and that you should create or update in the framework CNext/code/dictionary 
				directory. The factory dictionary contains the following declaration 
				to state that the <em>CAAIAfrGeoCreationWkbFactory</em> interface 
				is an interface to a factory whose implementation creates a <em>
				CAAAfrGeoCreationWkb</em> class instance:
				<pre class="code">CAAAfrGeoCreationWkb CAAIAfrGeoCreationWkbFactory</pre>
			</li>
		</ul>
		<p>At run time, the pathname of the directory that contains these dictionaries 
		files is concatenated to other dictionary pathnames in the CATDictionaryPath 
		environment variable.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the App Description Class</h3>
<p>The <em>CAAAfrGeoCreationWkb</em> class implements the <em>CATICAAAfrGeometryWksConfiguration</em> 
interface exposed by the CAAAfrGeometryWks model. It includes the following methods:</p>
<ul>
	<li><code>CreateCommands</code> to instantiate the command headers for the 
	commands of the app</li>
	<li><code>CreateWorkbench</code> to create the containers for the app and 
	arrange the commands in sections of the action bar.
	</li>
	<li><code>GetCustomInterface</code>s which returns the names of the 
	interfaces exposed by the app to enable its customization</li>
	<li><code>GetAddinInterface</code> which returns the name of the interface 
	exposed by the app to create add-ins.</li>
</ul>
<p>You should:</p>
<ul>
	<li>Create the header and source files for the <em>CAAAfrGeoCreationWkb</em> 
		class</li>
	<li>Update the dictionary.</li>
</ul>
<ol>
	<li>Create the CAAAfrGeoCreationWkb.h file
		<pre class="code">#include &quot;CATBaseUnknown.h&quot;
#include &quot;CATListPV.h&quot;

class CATCmdWorkbench;

class CAAAfrGeoCreationWkb : public CATBaseUnknown
{
  CATDeclareClass;
  public:
     CAAAfrGeoCreationWkb();
     virtual ~CAAAfrGeoCreationWkb();

     void              CreateCommands();
     CATCmdWorkbench * CreateWorkbench();
     CATClassId        GetAddinInterface();
     void              GetCustomInterfaces(CATListPV * oDefaultIIDList , 
                                           CATListPV * oCustomIIDList) ;
  private:
     CAAAfrGeoCreationWkb(const CAAAfrGeoCreationWkb &amp;iObjectToCopy);
};</pre>
		<p>The <em>CAAAfrGeoCreationWkb</em> class C++-derives from <em>CATBaseUnknown</em>. 
		The <code>CATDeclareClass</code> macro declares that the class <em>CAAAfrGeoCreationWkb</em> 
		belongs to a component. The class has a constructor, a destructor, the four 
		methods of the <em>CATIWorkbench</em> interface, and a copy constructor. 
		Note that the copy constructor is set as private. This prevents the compiler 
		from creating the copy constructor as public without you know. This copy 
		constructor is not implemented in the source file.</p>
	</li>
	<li>Create the CAAAfrGeoCreationWkb.cpp file. The file skeleton is shown below. 
		The implementation of each method is described in separate sections.
		<pre class="code">#include &lt;CAAAfrGeoCreationWkb.h&gt;

#include &lt;CATAfrCommandHeader.h&gt; // See <a href="#Step4">Creating the Command Headers</a>
#include &quot;CATIAfrCommandHeader.h&quot;

#include &lt;CATCreateWorkshop.h&gt;

CATImplementClass(CAAAfrGeoCreationWkb, Implementation, CATBaseUnknown, CATNull);
#include &lt;TIE_CATICAAAfrGeometryWksConfiguration.h&gt; 
TIE_CATICAAAfrGeometryWksConfiguration(CAAAfrGeoCreationWkb);

CAAAfrGeoCreationWkb::CAAAfrGeoCreationWkb() {}
CAAAfrGeoCreationWkb::~CAAAfrGeoCreationWkb() {}

void CAAAfrGeoCreationWkb::CreateCommands()
{
  ...  // See <a href="#Step4">Creating the Command Headers</a>
}

CATCmdWorkbench * CAAAfrGeoCreationWkb::CreateWorkbench()
{
  ...  // See <a href="#Step5">Creating the App and Arranging the Commands</a>
}

CATClassId CAAAfrGeoCreationWkb::GetAddinInterface()
{
  return &quot;CAAIAfrGeoCreationWkbAddin&quot;;
}

void CAAAfrGeoCreationWkb::GetCustomInterfaces(CATListPV * oDefaultIIDList,
                                               CATListPV * oCustomIIDList)
{}</pre>
		<p>The <em>CAAAfrGeoCreationWkb</em> class states that it implements the
		<em>CATICAAAfrGeometryWksConfiguration</em> interface thanks to the
		<code>TIE_CATICAAAfrGeometryWksConfiguration</code> macro. The <code>CATImplementClass</code> 
		macro declares that the <em>CAAAfrGeoCreationWkb</em> class is a component 
		main class [<a href="#References">2</a>], thanks to the <code>Implementation</code> 
		keyword, and that it OM-derives from CATBaseUnknown [<a href="#References">2</a>]. 
		The fourth parameter must always be set to <code>CATNull</code> for component 
		main classes.</p>
		<p>The <code>GetCustomInterfaces</code> method must be empty. The names 
		of the interface exposed by the app to enable clients to create add-ins 
		is returned by the <code>GetAddinInterface</code> method. See
		<a href="#Step7">Creating the App Exposed Interface</a> to create 
		this interface.</p>
	</li>
	<li>Updating the Dictionary
		<p>Update the interface dictionary, that is a file named, for example, CAAApplicationFrame.dico, 
		whose directory's pathname is concatenated at run time in the CATDictionaryPath 
		environment variable, and containing the following declaration to state 
		that the <em>CAAAfrGeoCreationWkb</em> class implements the <em>CATICAAAfrGeometryWksConfiguration</em> 
		interface, and whose code is located in the libCAAAfrGeoCreationWbench shared 
		library or DLL. Since <em>CATICAAAfrGeometryWksConfiguration</em> 
		C++ and OM-derives from <em>CATIWorkbench</em>, add also a line to 
		express that <em>CAAAfrGeoCreationWkb</em> also implements <em>
		CATIWorkbench</em> [<a href="#References">2</a>]. The update is in bold typeface:</p>
		<pre class="code">CATApplicationFrame  CAAIAfrGeoCreationWkbFactory         libCAAAfrGeoCreationWbench
<strong>CAAAfrGeoCreationWkb CATIWorkbench                        libCAAAfrGeoCreationWbench</strong>
<strong>CAAAfrGeoCreationWkb CATICAAAfrGeometryWksConfiguration   libCAAAfrGeoCreationWbench</strong></pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Command Headers</h3>
<p>This is done by the <code>CreateCommands</code> method. Each command 
available in your app must have a command header. A command header is an instance of 
a command header class [<a href="#References">6</a>].</p>
<ol>
	<li>Create the code to instantiate your command headers in the empty <code>CreateCommands</code> 
		method. This method should contain one instantiation statement of the command 
		header class per command. Each statement has the following form, for example 
		for the Cuboid command.
		<pre class="code">void CAAAfrGeoCreationWkb::CreateCommands()
{
  ...
  CATAfrCommandHeader::CATCreateCommandHeader(&quot;CAAAfrCuboidHdr&quot;, 
                                              &quot;CAADegGeoCommands&quot;, 
                                              &quot;CAADegCreateCuboidCmd&quot;,
                                              (void *) NULL,
                                              &quot;CAAAfrGeoCreationWkbHeader&quot;,
                                              CATFrmAvailable);
  ...
}</pre>
		<p>The command header creator has the following arguments:</p>
		<ul>
			<li><code>CAAAfruboidHdr</code> is the identifier you need to assign 
				to the command header. It will be used afterwards:
				<ul>
					<li>To associate the command starters you will define to put 
					the command in action bar with the command 
					header. This is done for this app in <a href="#Step5">
					Creating the App and Arranging the Commands</a>.</li>
					<li>To build the variables that define the command header resources, 
						such as the name seen by the end user in his/her own language 
					and icon 
						in the Compass and in the action bar. This is 
						explained in <a href="#Step6">Providing the Resources 
					and Inserting the App into the compass</a></li>
				</ul>
			</li>
			<li><code>CAADegGeoCommands</code> is the name of the shared library 
				or DLL containing the Cuboid command's code, without the prefix 
				lib, and without the suffix depending on the operating system.</li>
			<li><code>CAADegCreateCuboidCmd</code> is the name of the Cuboid command 
				class</li>
			<li>the next argument is the possible pointer to the object to pass 
				to the command when executing it. It is often a character string 
				that indicates the action to carry out when the same command can 
				perform several actions depending on the active model and data, 
				such as &quot;update&quot; or &quot;update all&quot;, or &quot;cut&quot; 
				or &quot;copy&quot;.</li>
			<li><code>CAAAfrGeoCreationWkbHeader</code> is the name of the resource 
				file</li>
			<li><code>CATFrmAvailable</code> defines the availability of the command 
				header.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the App and Arranging the Commands</h3>
<p>This is the job of the <code>CreateWorkbench</code> method. The aim is to 
organize the commands in a section of the action bar.</p>
<p>Here is what the action bar looks like when <kbd>CAA: Create Geom</kbd> app is 
active:</p>
<p>
<img alt="" src="images/CAAAfrGeomWkbl.png" width="690" height="185"/></p>

<p>We can see that the Solid and Surfacic commands of our app have been added in 
a section called <kbd>CAA geometry Creation</kbd>. </p>
<p> Note: The other commands that you can see in this section have been added by 
other use cases of the CAA Geometry sample, to illustrate other functionalities. </p>
<p>You should create:</p>
<ul>
	<li>The <a href="#510000">app</a></li>
	<li>The command <a href="#520000">containers</a> for the action bar</li>
	<li>The content of the <a href="#530000">Solids</a> commands</li>
	<li>The content of the <a href="#540000">Surfacic</a> commands</li>
</ul>
<ol>
	<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	<li><a name="510000"></a>Creating the App
		<p>The app contains its commands. Create the app 
		as an instance of the <em>CATCmdWorkbench</em> class using the <code>NewAccess</code> 
		macro.</p>
		<pre class="code">CATCmdWorkbench * <strong>CAAAfrGeoCreationWkb</strong>::CreateWorkbench()
{
  NewAccess(CATCmdWorkbench,pCAAAfrGeoCreationWkb,<strong>CAAAfrGeoCreationWkb</strong>);
  <strong>SetAccessRepresentationType</strong>(pCAAAfrGeoCreationWkb, "AfrActionBar");

  ... // See <a href="#520000">Creating the Containers for the commands in action bar</a>
  return pCAAAfrGeoCreationWkb;
}</pre>
		<p><code>pCAAAfrGeoCreationWkb</code> is the variable used to handle the 
		app instance pointer, and <code><strong>CAAAfrGeoCreationWkb</strong></code> 
		is the app identifier. Note that the app class name and the app 
		identifier must be identical to take into account the app 
		resources. They appear both in bold typeface. This 
		identifier is also used to name the app resource files CAAAfrGeoCreationWkb.CATNls 
		and CAAAfrGeoCreationWkb.CATRsc. The app resources, and how to provide 
		them, are described in Creating Resources for apps. See also
		<a href="#Step6">Providing the Resources and Inserting the app into 
		the compass</a> for an overview of all the resources to create.
		<br /> It is necessary to set the app representation type with the value "AfrActionBar" to 
		be able to insert commands in the action bar.
		This is done with the <code>SetAccessRepresentationType</code> macro.
		</p>
	</li>
		<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	<li><a name="520000"></a>Creating the Containers for the commands in action 
	bar
	<p>It is mandatory to organize your commands in containers to be able to 
	insert them in a section of the action bar.
	<br />A seperator will appear in between each container.</p>
		<p>
		<img alt="" src="images/CAAAfrGeomWkb2.png" width="399" height="215"/></p>
		<p>The code to insert the commands in the action bar:</p>
		<pre class="code">...
    NewAccess(<strong>CATCmdContainer</strong>,pCAAAfrGeoCreateSection,CAAAfrGeoCreateSection);
    AddAccessChild((CATCmdContainer*)pCAAAfrGeoCreationWkb, pCAAAfrGeoCreateSection);
    	
    NewAccess(<strong>CATCmdContainer</strong>,pCAAAfrSolidEltTlb,CAAAfrSolidEltTlb);
    AddAccessChild((CATCmdContainer*)pCAAAfrGeoCreateSection, pCAAAfrSolidEltTlb);
   
    ...  // See <a href="#530000">Creating the Solids Container Content</a>
   
    NewAccess(<strong>CATCmdContainer</strong>,pCAAAfrSurfacicEltTlb,CAAAfrSurfacicEltTlb);
    SetAccessNext(pCAAAfrSolidEltTlb,pCAAAfrSurfacicEltTlb);
    ...  // See <a href="#540000">Creating the Surfaces Container Content</a>
   
...</pre>
		<p>Here is what happens:</p>
		<ul>
		   <li>The "CAA Geometry Create Section" container is created as an instance of the <em>CATCmdContainer</em> 
				class using the <code>NewAccess</code> macro. <code>pCAAAfrGeoCreateSection</code> 
				is the variable used to handle the section container 
				instance pointer, and <code>CAAAfrGeoCreateSection</code> is the 
			identifier used to refer to it in the app resource files. This 
			identifier must be unique among all container identifiers that can 
			be found within the application. The section is set as the 
			child of the app using the <code>AddAccessChild</code> macro. </li>

			<li>The Solids container is created as an instance of the <em>CATCmdContainer</em> 
				class using the <code>NewAccess</code> macro. <code>pCAAAfrSolidEltTlb</code> 
				is the variable used to handle the Solid commands container 
				instance pointer, and <code>CAAAfrSolidEltTlb</code> is the 
			identifier used to refer to it in the app resource files. This 
			identifier must be unique among all the container identifiers that can 
			be found within the application. The Solids container is set as the 
			child of the app using the <code>AddAccessChild</code> macro (the section 
			can already have commands defined in it). </li>
			
			<li>The Surfaces container is created in the same way, but it is set next 
				to the Solids container using the <code>SetAccessNext</code> macro. 
				A separator will appear in the action bar between the two containers.</li>
		</ul>
		<p>The container resources, and how to provide them, are described in Creating 
		Resources for apps. See also <a href="#Step6">Providing the Resources 
		and Inserting the App into the Compass</a> for an overview of all 
		the resources to create.</p>
	</li>
		<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	<li><a name="530000"></a>Creating the Solids Container Content
		<p>
		<img alt="" src="images/CAAAfrGeomWkb3.png" width="304" height="169"/></p>
		<p>This Solids container has five commands: Cuboid, Sphere, Torus, and Cylinder1, 
		cylinder2. 
		You should, for each command:</p>
		<ol>
			<li>Create a command starter using the <code>NewAccess</code> macro</li>
			<li>Associate the command starter, using the <code>SetAccessCommand</code> 
				macro, with the appropriate command header identifier defined in 
				the <code>CreateCommands</code> method</li>
			<li>Arrange the command starters in the action bar using the <code>SetAccessChild</code> 
				and <code>SetAccessNext</code> macros</li>
		</ol>
		<pre class="code">...
      NewAccess(CATCmdStarter,pCAAAfrTSolidEltCuboidStr,CAAAfrTSolidEltCuboidStr);
      SetAccessCommand(pCAAAfrTSolidEltCuboidStr,&quot;CAAAfrCuboidHdr&quot;);
      SetAccessChild(pCAAAfrSolidEltTlb,pCAAAfrTSolidEltCuboidStr);

      NewAccess(CATCmdStarter,pCAAAfrTSolidEltSphereStr,CAAAfrTSolidEltSphereStr);
      SetAccessCommand(pCAAAfrTSolidEltSphereStr,&quot;CAAAfrSphereHdr&quot;);
      SetAccessNext(pCAAAfrTSolidEltCuboidStr,pCAAAfrTSolidEltSphereStr);

      NewAccess(CATCmdStarter,pCAAAfrTSolidEltTorusStr,CAAAfrTSolidEltTorusStr);
      SetAccessCommand(pCAAAfrTSolidEltTorusStr,&quot;CAAAfrTorusHdr&quot;);
      SetAccessNext(pCAAAfrTSolidEltSphereStr,pCAAAfrTSolidEltTorusStr);

      NewAccess(CATCmdStarter,pCAAAfrTSolidEltCylinder1Str,CAAAfrTSolidEltCylinder1Str);
      SetAccessCommand(pCAAAfrTSolidEltCylinder1Str,&quot;CAAAfrCylinder1Hdr&quot;);
      SetAccessNext(pCAAAfrTSolidEltTorusStr,pCAAAfrTSolidEltCylinder1Str);
         
      NewAccess(CATCmdStarter,pCAAAfrTSolidEltCylinder2Str,CAAAfrTSolidEltCylinder2Str);
      SetAccessCommand(pCAAAfrTSolidEltCylinder2Str,&quot;CAAAfrCylinder2Hdr&quot;);
      SetAccessNext(pCAAAfrTSolidEltCylinder1Str,pCAAAfrTSolidEltCylinder2Str);
...</pre>
		<p>Three macros are required for each command. For example, the Cuboid command 
		is processed as follows:</p>
		<ol>
			<li>First create the command starter as a <em>CATCmdStarter</em> instance 
				using the <code>NewAccess</code> macro. <code>pCAAAfrTSolidEltCuboidStr</code> 
				is the variable used to handle a pointer to that instance, and
				<code>CAAAfrTSolidEltCuboidStr</code> is its identifier.</li>
			<li>Then associate the Cuboid command header with this command starter 
				using the <code>SetAccessCommand</code> macro. The second parameter 
				is the Cuboid command header identifier defined as the first parameter 
				of the command header constructor. Refer to <a href="#Step4">Creating 
				the Command Headers</a> </li>
			<li>Finally set the Cuboid command starter as the child of the Solids 
				toolbar.</li>
		</ol>
		<p>Proceed in the same way for the other commands, except that they are 
		set as next of one another using the <code>SetAccessNext</code> macro.</p>
	</li>
		<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	<li><a name="540000"></a>Creating the Surfaces Container Content
		<p>
		<img alt="" src="images/CAAAfrGeomWkb4.png" width="232" height="172"/></p>
		<p>This container has three commands: Revolution Surface, Nurbs Surface, 
		and Offset Surface. You should, for each command:</p>
		<ol>
			<li>Create a command starter using the <code>NewAccess</code> macro.</li>
			<li>Associate the command starter, using the <code>SetAccessCommand</code> 
				macro, with the appropriate command header identifier defined in 
				the <code>CreateCommands</code> method.</li>
			<li>Arrange the command starters in the action bar using the <code>SetAccessChild</code> 
				and <code>SetAccessNext</code> macros.</li>
		</ol>
		<pre class="code">...
    NewAccess(CATCmdStarter,pCAAAfrTSurfRevolStr,CAAAfrTSurfRevolStr);
    SetAccessCommand(pCAAAfrTSurfRevolStr,&quot;CAAAfrRevolSurfHdr&quot;);
    SetAccessChild(pCAAAfrSurfacicEltTlb,pCAAAfrTSurfRevolStr);

    NewAccess(CATCmdStarter,pCAAAfrTSurfNurbsStr,CAAAfrTSurfNurbsStr);
    SetAccessCommand(pCAAAfrTSurfNurbsStr,&quot;CAAAfrNurbsSurfHdr&quot;);
    SetAccessNext(pCAAAfrTSurfRevolStr,pCAAAfrTSurfNurbsStr);

    NewAccess(CATCmdStarter,pCAAAfrTSurfOffsetStr,CAAAfrTSurfOffsetStr);
    SetAccessCommand(pCAAAfrTSurfOffsetStr,&quot;CAAAfrOffsetSurfHdr&quot;);
    SetAccessNext(pCAAAfrTSurfNurbsStr,pCAAAfrTSurfOffsetStr);
...</pre>
		<p>Three macros are required for each command. For example, the Revolution 
		Surface command is processed as follows:</p>
		<ol>
			<li>First create the command starter as a <em>CATCmdStarter</em> instance 
				using the <code>NewAccess</code> macro. <code>pCAAAfrTSurfRevolStr</code> 
				is the variable used to handle a pointer to that instance, and
				<code>CAAAfrTSurfRevolStr</code> is its identifier.</li>
			<li>Then associate the Revolution Surface command header with this command 
				starter using the <code>SetAccessCommand</code> macro. The second 
				parameter is the Revolution Surface command header identifier defined 
				as the first parameter of the command header constructor. Refer 
				to <a href="#Step4">Creating the Command Headers</a></li>
			<li>Finally set the Revolution Surface command starter as the child 
				of the Surfaces toolbar.</li>
		</ol>
		<p>Proceed in the same way for the other commands, except that they are 
		set as next of one another using the <code>SetAccessNext</code> macro.</p>
	</li>
		<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Providing the App Resources</h3>
<p>You should provide the resources for the app and for all its contents. 
These resources are classified as follows:</p>
<ul>
	<li><span class="style1">The app resources, located into the two app 
		resource files:</span>
		<ol>
			<li>The resource file containing the title and help messages in the 
				English language, and that can be translated into other languages. 
				It is suffixed using <strong>CATNls</strong></li>
			<li>The resource file containing the icons and other resources that 
				should not be translated. It suffixed by<strong> CATRsc</strong></li>
		</ol>
		<p>The resource files must have the app identifier as file name, that 
		is CAAAfrGeoCreationWkb. This identifier is declared in the <code>CreateWorkbench</code> 
		method of the app description class, as the third parameter of the
		<code>NewAccess</code> macro that creates the app.</p>
		<pre class="code">NewAccess(CATCmdWorkbench,pCAAAfrGeoCreationWkb,<strong>CAAAfrGeoCreationWkb</strong>);</pre>
		<p>Hence, our app resource files are CAAAfrGeoCreationWkb.CATNls and 
		CAAAfrGeoCreationWkb.CATRsc. These files are located in the 
		CNext\resources\msgcatalog directory of the framework containing the app module. This directory 
		includes subdirectories, one for each language into which the title and 
		messages of the CAAAfrGeoCreationWkb.CATNls file can be translated.</p>
		
		<p>Each resource is provided using a key and a text, or a file name without 
		suffix, separated by the equal sign. The key is built as a concatenation 
		of the object identifier you defined as the third parameter of the <code>
		NewAccess</code> macro, a dot, and a keyword designating the appropriate 
		resource. The message is enclosed using double quotes and ended using a 
		semicolon. For example, the CAAAfrGeoCreationWkb app title is defined 
		as follows:</p>
		<pre class="code">CAAAfrGeoCreationWkb.Title     = &quot;CAA:Create Geom&quot;;</pre>
		<ul>
			<li>The CAAAfrGeoCreationWkb.CATNls file
				<p>This file contains:</p>
				<ul>
					<li>The resources for the app: the name and icon that appear in 
						the list of apps of given by the compass, and the title 
					that appears when the app is active. By default, an app 
					belongs to the 3D Modeling apps, therefore in the <strong> 
					3D </strong>quadrant of the Compass. its associated help 
					message, the short help displayed when the mouse is over the 
					app 
						icon, and the long help</li>
					<li>Eventually, the titles of the app's sections.</li>
				</ul>
				<p>The CAAAfrGeoCreationWkb.CATNls, is as follows:</p>
				<pre class="code">//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// APP
//----------------------------------------------------------------------------
CAAAfrGeoCreationWkb.Title      = "CAA:Create Geom" ;
CAAAfrGeoCreationWkb.ShortHelp  = "App to create Geometrical Elements" ;
CAAAfrGeoCreationWkb.Help       = "CAA Geometrical Creation" ;
CAAAfrGeoCreationWkb.LongHelp   = "App to create CAA Geometrical Elements. 
                                   The CAA geometry model is a specific model dedicated to
                                   the User Interface CAA use cases." ;


//----------------------------------------------------------------------------
// SECTION
//---------------------------------------------------------------------------- 
CAAAfrGeoCreateSection.Title        = "CAA Geometry Creation Section" ;
	</pre>
			</li>
		
<li>The CAAAfrGeoCreationWkb.CATRsc file
<p>This file contains the declaration of the icon that appears 
				in the list of apps shown by the compass .</p>

<pre class="code">

// Icons for the compass 64x64 
CAAAfrGeoCreationWkb.Icon.NormalPnl      = &quot;I_WkAsCAAAfrGeoCreationWkb&quot;;
CAAAfrGeoCreationWkb.Icon.PressedlPnl = &quot;IP_WkAsCAAAfrGeoCreationWkb&quot;;
CAAAfrGeoCreationWkb.Icon.FocusedlPnl = &quot;IF_WkAsCAAAfrGeoCreationWkb&quot;;

</pre>
</li>
</ul>
</li>		
	
	<li><span class="style1">The command header resources in the command header resource files</span>: titles, 
		messages, icons, and the accelerators associated with the commands. The 
		resource files searched for at run time should have the same name than you 
		command header class, that is CAAAfrGeoCreationWkbHeader.
		<ul>
			<li>The CAAAfrGeoCreationWkbHeader.CATNls file contains the following 
				for the Cuboid commands
				<pre class="code">CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.Category  = &quot;Element&quot;;
CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.Title     = &quot;Cuboid&quot;;
CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.ShortHelp = &quot;Cuboid&quot;;
CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.Help      = &quot;Cuboid command is not yet implemented&quot;;
CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.LongHelp  = &quot;Cuboid command: allows you to create a cuboid, but is not yet implemented.&quot;;
...</pre>
				<p>For each command, the title, short help, help, and long help 
				are declared.</p>
			</li>
			<li>The CAAAfrGeoCreationWkbHeader.CATRsc file includes the following 
				for the Cuboid command
				<pre class="code">CAAAfrGeoCreationWkbHeader.CAAAfrCuboidHdr.Icon.Normal    = &quot;I_CAACube&quot;;
...</pre>
				<p>This icon name is provided to display in the action bar where 
				the Cuboid command is included. </p>
			</li>
		</ul>
	</li>
	
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating the App Exposed Interface</h3>
<p>To enable client apps of your app to customize it with add-ins, 
you should provide the <em>CAAIAfrGeoCreationWkbAddin</em> interface that the 
client app will implement. This enables the client app to add its own commands 
in the action bar.</p>
<p>The header file of this interface should be inserted in the ProtectedInterfaces 
or PublicInterfaces directory of your framework to make it available to client apps. 
To create the <em>CAAIAfrGeoCreationWkbAddin</em> interface:</p>
<ul>
	<li>Create the CAAIAfrGeoCreationWkbAddin.h file as follows.
		<pre class="code">#include &lt;CATIWorkbenchAddin.h&gt;        // Needed to derive from CATIWorkbenchAddin
#include &quot;CAAAfrGeoCreationWbench.h&quot;   // Needed to export the IID

extern IID ExportedByCAAAfrGeoCreationWbench <strong>IID_CAAIAfrGeoCreationWkbAddin</strong>;

class ExportedByCAAAfrGeoCreationWbench CAAIAfrGeoCreationWkbAddin : public <strong>CATIWorkbenchAddin</strong>
{
  <strong>CATDeclareInterface</strong>;
  public :
};</pre>
		<p>The CAAIAfrGeoCreationWkbAddin.h file contains the <code>ExportedByCAAAfrGeoCreationWbench</code> 
		definition that manages the DLL interface for Windows, and is set to blank 
		for UNIX. Don't forget the public keyword required by the TIE compiler.</p>
	</li>
	<li>Create the CAAIAfrGeoCreationWkbAddin.cpp file with a GUID [<a href="#References">1</a>], 
		shown in bold typeface:
		<pre class="code">#include &lt;CAAIAfrGeoCreationWkbAddin.h&gt;

IID IID_CAAIAfrGeoCreationWkbAddin = <strong>{
    0xa4188b88,
    0xd4c1,
    0x11d3,
    {0xb7, 0xf5, 0x00, 0x08, 0xc7, 0x4f, 0xe8, 0xdd}
  };</strong>

<strong>CATImplementInterface</strong>(CAAIAfrGeoCreationWkbAddin, CATIWorkbenchAddin);</pre>
	</li>
</ul>
<p>The <code>CATDeclareInterface</code> and <code>CATImplementInterface</code> macros 
make an interface from this C++ class.</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Declare the App in the Compass</h3>
<p>To make the app visible in the compass, it needs to be declared in the myApps service. 
This procedure is fully described in the technical article "Declaring a User App in the MyApps Service"[<a href="#References">5</a>]. 
The app identifier needed for this declaration is the same as the one used to identify the app resources, 
that is, "<strong>CAAAfrGeoCreationWkb</strong>".
You will need to specify in which quadrant of the compass the app should be located. That's up to you, 
logically in should be in the <strong>west</strong> quadrant, the quadrant dedicated to 3D 
modeling apps.</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Troubleshooting"></a>Troubleshooting</h2>
<h3>A Command Isn't Displayed in the Action Bar</h3>
<table>
	<tr>
		<td>
		<img alt="symptom.gif (111 bytes)" height="29" src="../CAAIcons/images/symptom.gif" width="10"/></td>
		<td>I create a command starter for a command, and I arrange it in a 
		section of the action 
		bar, but the command isn't displayed there.</td>
	</tr>
	<tr>
		<td>
		<img alt="diagnos.gif (130 bytes)" height="27" src="../CAAIcons/images/diagnos.gif" width="17"/></td>
		<td>The command starter is not associated with a command header, and is 
		thus not displayed, since the command cannot be launched without command 
		header.</td>
	</tr>
	<tr>
		<td>
		<img alt="solution.gif (218 bytes)" height="30" src="../CAAIcons/images/solution.gif" width="28"/></td>
		<td>Check your <code>CreateWorkbench</code> method. The command starter 
		must be associated with a command header for the command you want to display 
		thanks to the <code>SetAccessCommand</code> macro.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>An app gathers tools, that is commands you develop or pick-up among those 
existing to work on models of a given type. An app can be selected from the 
Compass.</p>
<p>Then you create the app files, declare the implemented interfaces <em>CATIxxxConfiguration</em> 
and <em>pppIxxxWorkbenchFactory</em>, where ppp is the prefix of your app, and xxx is the name of your 
app, and the app 
factory, in the dictionary. You have to declare the headers of the commands you 
want to propose, arrange them in sections of the action bar, and create the 
necessary external resources. Your app is ready to use.</p>
<p>You can create different apps for a same data model. Each app gathers commands dedicated for 
specific process and one app can be activated by the end user at a time using 
the compass.</p>
<p>You should also provide the IxxxAddin interface with your app, where xxx 
is the name of your app, to enable client applications to customize it by adding 
new commands in the action bar.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysQrOMGUID.htm">
		About Globally Unique Identifiers</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysTaOMInheritance.htm">
		Object Modeler Inheritances</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
    <td >[5]</td>
    <td ><a href="../CAADocUseCases/CAADocDeclareNewApp.htm">Declaring a User App in the MyApps Service</a></td>
  </tr>
	<tr>
    <td >[6]</td>
    <td ><a href="CAAAfrTcCmdHeadersToc.htm">Command Headers</a></td>
  </tr>

</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2003]</td>
		<td>Warm start integration</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Apr 2006]</td>
		<td>Warm start removal</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Oct 2013]</td>
		<td>3DEXPERIENCE migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
