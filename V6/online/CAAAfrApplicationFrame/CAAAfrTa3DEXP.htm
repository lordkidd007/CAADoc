<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>IFWE Compass User Experience Adoption Tips</title>
</head>

<body onload="createToc(); highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>IFWE Compass User Experience Adoption Tips</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The previous article "IFWE Compass User Experience Novelties"[<a href="#References">1</a>] 
		has given you a global view of the changes that have occurred in the CAA 
		Application Frame.</p>
		<p>This article focuses on the impacts for your CAA applications and will 
		give you tips on how to migrate your commands to adopt the IFWE Compass 
		User Experience principles.</p>
		<div id="toc">
		</div>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Impacts"></a>Impacts for your CAA Applications</h2>
<p>With the IFWE Compass User Experience, <strong>the menu bar and all the toolbars 
have been suppressed</strong>.</p>
<p>These major changes are the most impacting for your CAA applications. In order 
to be compliant with the new user interface, it will be necessary to relocate 
your commands. For that, you 
will need to re-think their logical organization in the frame.</p>
<p>The next chapters will help you to understand where to relocate your commands 
and how to migrate the source code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="ActionBar"></a>Where to Locate your Commands?</h2>
<p>Most of your commands or toolbars are meant to be located in the new action bar, 
which is the main area to access app commands. A command in the action 
bar must be a command that launches an action. For example, commands that create 
or analyze something. The action bar only allows standard commands launched by a 
simple push button represented by an icon. Specialized commands (for example a combo), 
are not authorized.</p>
<p>Commands that modify properties or options can be inserted in dedicated 
panels, the <kbd>Object Properties</kbd> panel or the <kbd>App Options</kbd> panel. </p>
<p>Contextual menus remain a possibility for any contextual command. If you have 
already defined contextual menus, there's nothing to change.</p>
<p>Note: in future versions, it will be possible to locate some of your commands 
in the global items of the top bar .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Sections"></a>How to Organize your Commands in the Action Bar ?
</h2>
<p>The aim is to organize your commands in such a way that when you are performing 
a specific task, you have a quick an easy access to the most useful commands. 
Commands of the action bar are organized in sections, and in groups within 
sections. Sections and groups have a primary area with commands visible at all 
times, and eventually a secondary area with commands visible on demand, those 
less frequently used then the commands in the primary area. Similar commands can 
be grouped in flyouts.&nbsp;&nbsp;
</p>
<p>To make your commands visible in the action bar, it is mandatory to declare 
its section. There are different types of sections that are listed below:</p>
<h3><a name="GlobalSection"></a>General Sections</h3>
<p>There are three general sections that all apps inherit from, in which you can 
insert your commands:</p>
<ul>
	<li>The fixed area
	<p>
	<table>
			<tr>
				<td>
				<img alt="" src="images/CAANewFixedSection.jpg" width="440" height="110"/>
				</td>
			</tr>
		</table>
</p>

		<p>Located at the left hand side of the action bar for all sections, it contains standard 
		frequently used commands that are independent of the current context, such 
		as Copy/Paste, Undo/Redo, etc.It replaces the former <kbd>Standard</kbd> 
		toolbar:</p>
		
		<table>
			<caption style="width: 276px">The Former <kbd>Standard</kbd> Toolbar</caption>
			<tr>
				<td>
				<img alt="" src="images/CAAOldStdToolBar.jpg"/>
				</td>
			</tr>
		</table>
	</li>
	<p></p>
	<li>The Tools section
	<table>
			<tr>
				<td>
				<img alt="" src="images/CAANewToolsSection.jpg" width="553" height="132"/>
				</td>
			</tr>
		</table>

		<p>It contains general transverse tools, such as the commands that used 
		to be contained in the <kbd>Knowledge</kbd> Toolbar:</p>
		<table>
			<caption style="width: 276px">The Former <kbd>Knowledge</kbd> Toolbar</caption>
			<tr>
				<td>
				<img alt="" height="72" src="images/CAAOldKnowledgeToolBar.jpg" width="287"/>
				</td>
			</tr>
		</table>
	</li>
	<p></p>
	<li>The View section
	<table>
			<tr>
				<td>
				<img alt="" src="images/CAANewViewSection.jpg" width="444" height="133"/>
				</td>
			</tr>
		</table>

		<p>It replaces the former <kbd>View</kbd> toolbar:</p>
		<table>
			<caption style="width: 276px">The Former <kbd>View</kbd> Toolbar</caption>
			<tr>
				<td>
				<img alt="View Section" height="73" src="images/CAAOldViewToolBar.jpg" width="340"/>
				</td>
			</tr>
		</table>
	</li>
</ul>
<h3><a name="CAASection"></a>Your Own Sections</h3>
<p>You can create your own sections for your apps or add-ins.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Prop"></a>Properties and Options</h2>
<p>Two panels are provided to store commands that deal with object properties and 
application options, the <kbd>Object Properties</kbd> panel and the <kbd>App Options</kbd> panel. You 
can insert into these panels any appropriate commands.</p>
<table>
	<tr>
		<td><img alt="" src="images/CAANewPropertiesPanel.jpg"/></td>
		<td>&nbsp;</td>
		<td><img alt="" src="images/CAANewAppModePanel.jpg"/></td>
	</tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="R2014GA"></a>What Happens to your Commands by Default?</h2>
<ul>
	<li><strong>Former Workbenches</strong>:
		<p>Your CAA workbenches are no longer workbenches but are now considered 
		as apps. They will need to be declared in a service called <strong>MyApps</strong>[<a href="#References">3</a>]. Once this 
		declaration has been done, they will become visible in the list of apps 
		accessible from the compass.&nbsp; They are located in 
		the quadrant you have specified in the MyApps declaration.</p>
		<table>
			<caption>The CAA Apps in List of Apps</caption>
			<tr>
				<td>
				<img alt="CAA Workbenches" height="312" src="images/CAAAppsList.jpg" width="284"/>
				</td>
			</tr>
		</table>
	</li>
	<p></p>
	<li><strong>Toolbars</strong>:
		<p>Toolbars are meant to disappear. Until you have relocated somewhere else 
		in the frame (most probably into a section of the action bar), by default, 
		they will continue to appear underneath the action bar.</p>
		<table>
			<caption style="width: 546px">The Remaining CAA Toolbars</caption>
			<tr>
				<td>
				<img alt="" src="images/CAAOldToolBars.png" width="560" height="214"/>
				</td>
			</tr>
		</table>
	</li>
	<p></p>
	<li><strong>Menus in the Menu Bar</strong>:
		<p>The former menu bar has disappeared. Any of your commands declared in 
		a menu of the menu bar will need to be relocated. But until you have 
		migrated, you will still have access to these commands.</p>
		<p>The access to the former menu bar is provided by a dedicated button in 
		the <kbd>Tools</kbd> section of the action bar. It's a secondary command, thus it's 
		hidden by default. In the different menus, you will only see your  
		remaining commands, all DS commands having been suppressed from these menus.</p>
		<table>
			<caption>The Menu Bar Button</caption>
			<tr>
				<td>
				<img alt="Menu Bar Button" height="305" src="images/CAAOldMenuBarButton.png" width="354"/>
				</td>
			</tr>
		</table>
	</li>
	<p></p>
	<li><strong>Contextual Menus</strong>:
		<p>There is no change concerning commands in a contextual menu.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Migr"></a>How to Migrate</h2>
<h3><a name="Migr1"></a>Declare Action Bar</h3>
<p>To be able to add commands in the action bar in the context of your app 
(former workbench), you need to set a representation type by adding a line in the <code>
CreateWorkbench</code> method that creates your app:</p>
<pre class="code">CATCmdWorkbench * MyWkb::CreateWorkbench()
{
  NewAccess(CATCmdWorkbench,pMyCAAWkb,MyCAAWkbId);
  <strong>SetAccessRepresentationType(pMyCAAWkb, "AfrActionBar");</strong>
  
  ... 
  
  return pMyCAAWkb;
}</pre>
<h3><a name="Migr2"></a>Declare Sections</h3>
<p>To organize your toolbars into sections, you need to add a level of container 
as parent of your toolbars. This container corresponds to the section. It is 
mandatory to keep the toolbar container level in between the 
section and your commands, or else the commands will not be visible. This 
logical level is visible in the action bar thanks to separators within the 
section, it corresponds to the groups within sections that we mentioned earlier 
in this article.</p>

<p>In the case of declaration of toolbars for an app (former workbench), it's in the <code>CreateWorkbench</code> method.</p>

<pre class="code">
CATCmdWorkbench * MyWkb::CreateWorkbench()
{
...
	
   <strong> NewAccess(CATCmdContainer,pMySection,MySectionId);
    AddAccessChild(pMyCAAWkb, pMySection);</strong>

    NewAccess(CATCmdContainer,pMyCAATlb,MyCAATlbId);
    SetAccessChild(<strong>pMySection</strong>, pMyCAATlb);

  ... 
  
  return pMyCAAWkb;
}
</pre>

<p>In the case of declaration of toolbars for an add-in, it's in the <code>CreateToolbars</code> 
method. <strong>Beware of the value returned by the method,</strong> it needs to be the 
highest level of 
container declared in the method. In the following example, it's the pointer on 
the declared section, while it used to be the pointer on the toolbar.</p>

<pre class="code">
CATCmdContainer * myAddin::CreateToolbars()
{
  <strong> NewAccess(CATCmdContainer,pMySection,MySectionId);</strong>
  
   NewAccess(CATCmdContainer,pMyCAATlb,MyCAATlbId);
   SetAccessChild(<strong>pMySection</strong>, pMyCAATlb);

...
   return <strong>pMySection</strong>;
}
</pre>



<p>The section identifier declared in the <code>NewAccess</code> macro, here &quot;MySectionId&quot;, 
is unique and determines in which section your toolbar is located. You can associate 
this Id with a title by adding the title name in the CATNls resource file:</p>
<pre class="code">...

MySectionId.Title        = "My Section Name" ;
...
</pre>
<p>If you want to add a toolbar in the fixed section,<kbd>Tools</kbd> Section or <kbd>View</kbd> Section, 
you should use the following identifiers:</p>
<ul>
	<li>"<strong>AfrActionBarFixedSection</strong>" to merge your toolbar with the 
		fixed area.
		<pre class="code">...
	
   NewAccess(CATCmdContainer, pFixedSection, <strong>AfrActionBarFixedSection</strong>);
   AddAccessChild(pMyCAAWkbWkb, pFixedSection);

   ...
   NewAccess(CATCmdContainer,pMyCAATlb,MyCAATlbId);
   AddAccessChild(pFixedSection, pMyCAATlb); 
...</pre>
	</li>
	<li>"<strong>AfrGeneralSection</strong>" to merge your toolbar with the <kbd>Tools</kbd> 
		Section.
		<pre class="code">...
	
   NewAccess(CATCmdContainer, pGeneralSection, <strong>AfrGeneralSection</strong>);
   AddAccessChild(pMyCAAWkbWkb, pGeneralSection);

   ...
   NewAccess(CATCmdContainer,pMyCAATlb,MyCAATlbId);
   AddAccessChild(pGeneralSection, pMyCAATlb); 
...</pre>
	</li>
	<li>"<strong>AfrViewSection</strong>" to merge your toolbar with the <kbd>View</kbd> Section.
		<pre class="code">...
	
   NewAccess(CATCmdContainer, pViewSection, <strong>AfrViewSection</strong>);
   AddAccessChild(pMyCAAWkbWkb, pViewSection);

   ...
   NewAccess(CATCmdContainer,pMyCAATlb,MyCAATlbId);
   AddAccessChild(pViewSection, pMyCAATlb); 
...</pre>
	</li>
</ul>

<h3><a name="Migr4"></a>Declare Secondary Commands</h3>
<p>If you want to declare your command as a secondary command, visible on demand, you should use the 
<code>SetAccessWeight</code> macro, either in the <code>CreateWorkbench</code> method or in the <code>CreateToolbars</code> 
method of respectively your app or add-in definition.
<pre class="code">...
   <strong>SetAccessWeight</strong>(pMyCommand, 0.f);
...</pre>
</p>


<h3><a name="Migr3"></a>Declare Properties and Options</h3>
<p>To insert a toolbar or a simple command into the <kbd>Properties</kbd> or <kbd>App 
Option</kbd> panels, you need to declare specific properties and options containers 
with their corresponding representation types:</p>
<ul>
	<li><strong>AppModeRepType</strong>
		<pre class="code">...

    NewAccess (CATCmdContainer, pTlbAppMode, ToolbarAppMode); 
    AddAccessChild(pMyCAAWkb, pTlbAppMode);
    SetAccessRepresentationType(pTlbAppMode,"<strong>AppModeRepType</strong>");
    
    NewAccess(CATCmdStarter,pMyCAACmd, MyCAACmdId);
    AddAccessChild(pTlbAppMode, pMyCAACmd);
    SetAccessCommand(pMyCAACmd, "MyCAACmdHdr");
   
...</pre>
	</li>
	<li><strong>ObjectPropertiesRepType</strong>
		<pre class="code">...
	
    NewAccess (CATCmdContainer, pTlbRepType, ToolbarRepType); 
    AddAccessChild(pMyCAAWkb, pTlbRepType);
    SetAccessRepresentationType(pTlbRepType,"<strong>ObjectPropertiesRepType</strong>");
    
    NewAccess(CATCmdContainer, pMyCAATlb, MyCAATlbId);
    AddAccessChild(pTlbRepType, pMyCAATlb); 
   
...</pre>
	</li>
</ul>
<h3><a name="Migr4"></a>Command Icons</h3>
<p> The correct format for the command icons has changed. It is now a 32x32 
size picture in png format, instead of a 20x20 size picture in bmp format.<br />
The way icons are declared in the CATRsc resource file associated with an app 
or add-in does not change:</p>
<pre class="code">MyCAAWkbHeader.MyCAACmdHdr.Icon.Normal    = "I_MyCAAIcon" ;</pre>
<p>Until you have created icons in the new format, the existing icons are used by default, but 
they appear with an ugly rendering.</p>
<h3><a name="Migr5"></a>Suppress Command in the Menu Bar</h3>
<p>Eventually, you should suppress from the menu bar any commands that you have 
declared there. The items of the menu bar were identified by the following names:</p>
<ul>
	<li>Edit Menu: "CATAfrEditMnu".</li>
	<li>View Menu: "CATAfrView".</li>
	<li>Insert Menu: "CATAfrInsertMnu".</li>
	<li>Tools Menu: "CATAfrToolsMnu".</li>
</ul>
<p>The two following macros were used to declare your menus: <code>SetAddinMenu</code>,
<code>SetWorkshopMenu</code>.</p>
<p>For example, the insertion of a command in the Tools Menu:</p>
<pre class="code">...
NewAccess(CATCmdContainer, pMyTlb, MyTlbIf); // a Toolbar container   
NewAccess(CATCmdContainer, pMyMbr, MyMbrId); // a Menubar container 
NewAccess(CATCmdContainer,pMyToolsMnu,<strong>CATAfrToolsMnu</strong>); // a Tools menu container
SetAccessChild(pMyMbr, pMyToolsMnu);

<strong>SetAddinMenu</strong>(pMyTlb,pMyMbr);
...</pre>
<p>All these lines should be suppressed. This step is just a clean-up step, but 
in no way mandatory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>


<p>There's one immediate mandatory migration step that you need to do, that 
is the declaration of your apps, former workbenches, in the MyApps 
service[<a href="#References">3</a>]. In the case of add-ins, there's nothing to do. </p>
<p>Once your apps are have been declared, all your commands remain accessible. 
By default,&nbsp;your CAA toolbars continue to appear underneath the action bar. A 
special button in the action bar enables you to access the menus of the former 
menu bar and their remaining content.</p>

<p>You will need to migrate your commands to make them compliant with the IFWE 
Compass User Experience principles. Most of your 
toolbars will need to be reorganized into sections of the action bar, either 
into existing general sections, either into your own new sections. Some of your 
commands might need to be integrated in specific Option or Properties Panels. </p>

<p> The next article, &quot;Migration of a CAA Geometry Sample&quot;[<a href="#References">2</a>] 
explains the different migration steps that were done for a basic use case of the CAA 
Geometry sample. </p>




<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrTaFrameNoveltiesOverview.htm">IFWE Compass User Experience 
		Novelties</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrUcSampleWorkbench2.htm">Migration of a CAA Geometry Sample</a></td>
	</tr>
	<tr>
    <td >[3]</td>
    <td ><a href="../CAADocUseCases/CAADocDeclareNewApp.htm">Declaring a User App in the MyApps Service</a></td>
  </tr>

</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<p><br />
</p>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
