<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Cameras</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Cameras</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a command that can be passed a 
		parameter. It uses a camera to modify the current tab viewpoint, the parameter being 
		the selected viewpoint.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrGeoCommands Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeoCommands Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeoCommands</a></li>
					<li><a href="#Where">Where to Find the CAAAfrGeoCommands Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to pass a parameter to a command, and 
how to use a camera to modify the current tab viewpoint.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeoCommands Use Case</h2>
<p>CAAAfrGeoCommands is a use case of the CAAApplicationFrame.edu framework that 
illustrates the AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAAAfrGeoCommands Use Case Do</h3>
<p>The CAAAfrGeoCommands use case includes several commands. The 
CAAAfrChangeViewNormalCmd command that changes the current tab viewpoint is the 
only command described here. This command that belongs to the 
CAAAfrGeometryWshop changes the current tab 
viewpoint to one of the following.</p>
<table>
	<tr>
		<td>
		<img alt="" src="images/CAAAfr3DCameraYZ2.jpg" width="112" height="109"/></td>
		<td>See the yz plane from left. Select &quot;Normal X&quot; command.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAAAfr3DCameraZX2.jpg" width="114" height="105"/></td>
		<td>See the zx plane from right : Select &quot;Normal Y&quot; command.</td>
	</tr>
	<tr>
		<td>
		<img alt="" src="images/CAAAfr3DCameraXY2.jpg" width="113" height="118"/></td>
		<td>See the xy plane from top. Select &quot;Normal Z&quot; command.</td>
	</tr>
</table>
<p>This command is instantiated from the <kbd>CAA Create Geom</kbd> app, using as many 
command headers as there are end user commands, that is, as there are push items 
in the action bar.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeoCommands</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">1</a>] for a detailed description of how this use case should 
be launched.</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the Compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> 
	app.</li>
    <li>In the action bar, activate <kbd>View</kbd> section.</li>
	<li>Three commands are proposed: <kbd>Normal X</kbd>, <kbd>Normal Y</kbd>, 
		and <kbd>Normal Z</kbd>, setting the viewpoint to see the YZ plane, the ZX plane, and 
		the XY plane respectively.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrGeoCommands Code</h3>
<p>The CAAAfrGeoCommand use case is made of a single class named <em>CAAAfrChangeViewNormalCmd</em> 
located in the CAAAfrGeoCommands.m module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In addition, the command header that stands for this command in the 
CAAAfrGeometryWshop and that passes the parameter to the command is described 
with the app.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the command that changes the current tab viewpoint, there are three 
steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Create the command and storing the argument</td>
		<td>constructor</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Set the camera axes</td>
		<td><code>Activate</code> method</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Create the camera and assign it to the current tab</td>
		<td><code>Activate</code> method</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Command and Storing the Argument</h3>
<p>The command constructor is as follows.</p>
<pre class="code">CAAAfrChangeViewNormalCmd::CAAAfrChangeViewNormalCmd(void *iArgument)
                         : CATCommand(&quot;ViewNormalId&quot;,<strong>CATCommandModeExclusive</strong>)
{
   _ArgumentCmd = <strong>CATPtrToINT32</strong>(iArgument) ;
}</pre>
<p>The command headers call the constructor with an argument that indicates the 
plane that should be normal to the sight direction. This argument is:</p>
<ul>
	<li>1 to see the YZ plane</li>
	<li>2 to see the ZX plane</li>
	<li>3 to see the XY plane.</li>
</ul>
<p>This argument is kept in the data member <code>_ArgumentCmd</code>. It is an 
integer. The <code>CATPtrToINT32</code> macro enables you to safely convert in 64 
bits a pointer to an INT. See the referenced article [<a href="#References">3</a>] 
to see instantiations of a command header class using the <em>CAAAfrChangeViewNormalCmd</em> 
class.</p>
<p>The command is set as exclusive thanks to <code>CATCommandModeExclusive</code>. 
Since it doesn't modify the model, it could be also set as shared, but since it 
is a one-shot command, there is no possibility of selecting another command before 
it completes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting the Camera Axes</h3>
<p>The <code>Activate</code> method first sets the camera axes depending on the 
argument value.</p>
<pre class="code">CATStatusChangeRC CAAAfrChangeViewNormalCmd::<strong>Activate</strong>(CATCommand * iFromClient,
                                                      CATNotification * iEvtData)
{
  CATMathDirection direction, zenith;
  CATMathPoint origin(0.f, 0.f, 0.f);

  switch (_ArgumentCmd)
  {
    case 1 : direction.SetCoord(-1.f,0.f,0.f);
             zenith.SetCoord(0.f,0.f,1.f);
             break ;
    case 2 : direction.SetCoord(0.f,-1.f,0.f);
             zenith.SetCoord(0.f,0.f,-1.f);
             break ;
    case 3 : direction.SetCoord(0.f,0.f,-1.f);
             zenith.SetCoord(0.f,1.f,0.f);
             break ;
  }
  ...</pre>
<p>The argument takes the value of 1 for a plane normal to the x axis, 2 for a plane 
normal to the y axis, and 3 for a plane normal to the z axis. The camera axes are 
made up of a sight direction axis that joins the eye and the target, and a zenith 
axis perpendicular to the sight direction.</p>
<p>
<img alt="Camera Directions and Planes" height="269" src="images/CAAAfr3DCameraData.gif" width="564"/></p>
<ul>
	<li>The camera that sees the yz plane has a sight direction opposed to the x 
		axis (-1,0,0) and a zenith direction parallel to the z axis</li>
	<li>The camera that sees the zx plane has a sight direction opposed to the y 
		axis (0,-1,0) and a zenith direction opposed to the z axis (0,0,-1)</li>
	<li>The camera that sees the xy plane has a sight direction opposed to the z 
		axis (0,0,-1) and a zenith direction parallel to the y axis.</li>
</ul>
<p>These direction as set as <em>CATMathDirection</em> instances is the switch.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Camera and Assigning it to the Current Tab</h3>
<pre class="code">  ...
  CATFrmLayout *pCurrentLayout = <strong>CATFrmLayout::GetCurrentLayout</strong>();
  if ( pCurrentLayout )
  {
    CATFrmWindow *pCurrentWindow = pCurrentLayout-&gt;<strong>GetCurrentWindow</strong>();
    if ( pCurrentWindow )
    {
      CATFrm3DCamera * pCameraImpl = new <strong>CATFrm3DCamera</strong>(&quot;cam3d&quot;,
                                                        origin,
                                                        direction,
                                                        zenith);
      <strong>CATI3DCamera</strong> *pCamera = NULL;                
      HRESULT rc = pCameraImpl-&gt;QueryInterface(IID_CATI3DCamera, (void**)&amp;pCamera);
      if (SUCCEEDED(rc))
      {
        pCurrentWindow-&gt;<strong>SetCurrentCamera</strong>(pCamera);
	pCamera-&gt;Release();
      }
      pCameraImpl-&gt;Release();
    }
  }  
  return CATStatusChangeRCCompleted;
}</pre>
<p>To set the camera axes as those of the viewpoint of the current tab, the layout 
is first retrieved thanks to the static <code>CATFrmLayout::GetCurrentLayout</code> 
method, and then the current tab is retrieved from this layout using <code>GetCurrentWindow</code>. 
Then a 3D camera is instantiated with the eye location, sight and zenith directions 
determined with respect to the argument passed and a pointer to the <em>CATI3DCamera</em> interfaces 
is retrieved from this camera. This pointer is assigned to the current tab whose 
viewpoint changes to match the camera thanks to the <code>SetCamera</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A command can be passed a parameter to enable a single command to act as if several 
commands were offered to the end user. These end user commands should nevertheless 
be close to each other. There is a command header for each end user command that 
instantiates the command and passes the parameter value appropriate to the end user 
intent, and the command tests this value to do the corresponding task.</p>
<p>A camera is an object that can be assigned to a tab to set or reset the viewpoint 
characteristics of the tab, that is, the eye location, and the sight and zenith 
directions.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAAfrTaStdCommandHeader.htm">How to Create Standard Command 
		Headers</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Mar 2004]</td>
		<td>64 bits</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Dec 2007]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Oct 2013]</td>
		<td>Document updated</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
