<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using the Tools Palette for an App</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using the Tools Palette for an 
		App</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case is intended to show you how to implement the <em>CATIAfrPaletteOptions
		</em> interface to provide for an app options in the tools palette, available as soon as 
		the app is active.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrPaletteOptions Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrPaletteOptions Do</a></li>
					<li><a href="#How">How to Launch CAAAfrPaletteOptions</a></li>
					<li><a href="#Where">Where to Find the CAAAfrPaletteOptions 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Tools Palette is a special toolbar which is dynamically updated when:</p>
<ul>
	<li>Entering an app - The app implements the <em>CATIAfrPaletteOptions</em> 
		interface.
		<p>Command headers are added in the Tools Palette once the app is activated, 
		and they are removed after the app's deactivation.</p>
	</li>
	<li>Executing a shared/exclusive command - The command implements the <em>CATIAfrCmdPaletteOptions</em> 
		interface.
		<p>Command headers may be added when the command is activated and they are 
		removed when the command is canceled. For a state command, there is also 
		the possibility to add command headers for a specific state, they are removed 
		when the state is left. When the command is deactivated, the command headers 
		become unavailable. This is illustrated in the use case &quot;Creating a 
		Command with Options in the Tools Palette&quot;&nbsp; [<a href="#References">1</a>].</p>
	</li>
</ul>
<p>This use case is intended to show you how to implement the&nbsp; <em>CATIAfrPaletteOptions</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrPaletteOptions Use Case</h2>
<p>CAAAfrPaletteOptions is a use case of the CAAApplicationFrame.edu framework that 
illustrates AfrStandard framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrPaletteOptions Do</h3>
<p>CAAAfrPaletteOptions is the implementation of the <em>CATIAfrPaletteOptions
</em> interface on an app of the CAAGeometry model [<a href="#References">2</a>]. It enables 
us to display the <kbd>Tools Palette</kbd>. This toolbar 
contains 
command header instances. In the use case, there is a command header displaying 
the count of points and lines created in the CAAGeometry data model.</p>
<table>
	<caption><a name="Fig.1"></a>Fig.1: Tools Palette</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrPaletteWkb.jpg" width="263" height="198"/></td>
	</tr>
</table>
<p>This header is a customized command header. Its graphic representation is not 
a check button with an icon, but two <em>CATDlgEditor</em> class instances. Refer 
to the CAAAfrEltCountHeader use case [<a href="#References">4</a> ] for complete 
details about this specific header.</p>
<p>Now, if you launch the Cuboid command from the action bar, you can see on the picture 
below, [<a href="#Fig.2">Fig.2</a>], that new options have been added. This 
command also uses Tools Palette options for its scenario [<a href="#References">1</a>].</p>
<table>
	<caption style="width: 379px"><a name="Fig.2"></a>Fig.2: Cuboid Command</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrPaletteWkbWithCmd.jpg" width="377" height="234"/></td>
	</tr>
</table>
<p>Once the Cuboid command is completed, the Tools Palette is restored, and just contains 
the two editors again.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrPaletteOptions</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">2</a>] for a detailed description of how this use case should 
be launched.</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> 
	app  </li>
	<li>click on <kbd>Point</kbd> command and create some points.</li>
	<li>click on <kbd>Line</kbd> command and create some lines.</li>
	<li>click on <kbd>Cuboid</kbd> command.
		<ul>
			<li>Select a point</li>
			<li>Click
				<img alt="CAACreateBoxSwitchAgentCuboidWidthDepth" height="22" src="images/CAAAfrCreateBoxSwitchAgentCuboidWidthDepth.jpg" width="22"/>
			</li>
			<li>Select a second point</li>
			<li>Click
				<img alt="CAACreateBoxSwitchOrigin" height="22" src="images/CAAAfrCreateBoxSwitchOrigin.jpg" width="22"/> 
				(the icon is not highlighted any more)</li>
			<li>indicate a point to define the depth (= height)</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrPaletteOptions Code</h3>
<p>The CAAAfrPaletteOptions use case is made of a single class,<em>CAAEAfrPaletteOptions</em>, 
located in the CAAAfrPaletteOptions.m module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrPaletteOptions.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">7</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are two logical steps in CAAAfrPaletteOptions:</p>
<ol>
	<li><a href="#Header">Creating the Header File</a></li>
	<li><a href="#Source">Creating the Source File</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Header"></a>Creating the Header File</h3>
<p>Here is the CAAEAfrPaletteOptions.h file</p>
<pre class="code">#include &quot;CATBaseUnknown.h&quot;    
#include &quot;CATListOfCATCommandHeader.h&quot;       

class CAAEAfrPaletteOptions: public CATBaseUnknown
{
  CATDeclareClass;

  public:

    CAAEAfrPaletteOptions();
    virtual ~CAAEAfrPaletteOptions();
 
    CATLISTP(CATCommandHeader) <strong>GetPaletteOptions</strong>();

  private:
    CAAEAfrPaletteOptions(const CAAEAfrPaletteOptions &amp;iObjectToCopy);
    CAAEAfrPaletteOptions &amp; operator = (const CAAEAfrPaletteOptions &amp;iObjectToCopy);
};</pre>
<p>The <em>CAAEAfrPaletteOptions</em> class derives from <em>CATBaseUnkown</em>. 
The <code>GetPaletteOptions</code> method is the only one method of the <em>CATIAfrPaletteOptions</em> 
interface. The <code>CATDeclareClass</code> macro declares that the <em>CAAEAfrPaletteOptions</em> 
class belongs to a component. Note that the copy constructor and the assignment 
operator are set as private, and are not implemented in the source file. This prevents 
the compiler from creating them as public without you know.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Source"></a>Creating the Source File</h3>
<p>Here is the CAAEAfrPaletteOptions.cpp file</p>
<pre class="code">...
#include &lt;TIE_CATIAfrPaletteOptions.h&gt;
TIE_CATIAfrPaletteOptions(CAAEAfrPaletteOptions);

CATImplementClass(CAAEAfrPaletteOptions, 
                  <strong>DataExtension</strong>, 
                  CATBaseUnknown, 
                  <strong>CAAAfrGeoCreationWkb_Palette</strong>);

CAAEAfrPaletteOptions::CAAEAfrPaletteOptions():CATBaseUnknown(){}

CAAEAfrPaletteOptions::~CAAEAfrPaletteOptions(){}
...</pre>
<p>The <em>CAAEAfrPaletteOptions</em> class states that it implements the <em>CATIAfrPaletteOptions</em> 
interface thanks to the <code>TIE_CATIAfrPaletteOptions</code> macro. The <code>
CATImplementClass</code> macro declares that the <em>CAAEAfrPaletteOptions</em> 
class is a data extension, thanks to the <code>DataExtension</code> keyword, that 
extends <code>CAAAfrGeoCreationWkb_Palette</code>. The third argument must always 
be set as <em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension.</p>
<p><code>CAAAfrGeoCreationWkb_Palette</code>: is the concatenation of the internal 
name of the app + &quot;_<code>Palette&quot;</code>. This interface can be 
only implemented on your app. You cannot implement it on a Dassault Syst&#232;mes 
app. The internal name of the app is the third argument of the <code>
NewAccess</code> macro when the first argument is <code>CATCmdWorkbench</code> [<a href="#References">5</a>].</p>
<pre class="code">...
NewAccess(<strong>CATCmdWorkbench</strong>,pCAAAfrGeoCreationWkb,CAAAfrGeoCreationWkb);</pre>
<p>Now, lets us see the <code>GetPaletteOptions</code> implementation.</p>
<pre class="code">...
CATLISTP(CATCommandHeader) CAAEAfrPaletteOptions::GetPaletteOptions()
{
    CATLISTP(CATCommandHeader) TheListToReturn ;

    CATBaseUnknown *pMyCommand = CATAfrcommandHeader::CATGetCommandHeader<strong></strong>(&quot;CAAAfrEltCountHdr&quot;);

    if ( FAILED(rc) || ( NULL ==pMyCommand) )
    {
	    pMyCommand = CATAfrDialogCommandHeaderFactory::CATCreateDialogCommandHeader(&quot;CAAAfrEltCountHdr&quot;, 
                                                                                    &quot;CAAAfrEltCountHdr&quot;,
                                                                                    &quot;EltCountHdr&quot;,
                                                                                    CATFrmAvailable);
    } 

    if ( NULL != pMyCommand)
    {
       TheListToReturn.<strong>Append</strong>((CATCommandHeader*)pMyCommand);
    }

    return TheListToReturn ;
}
...</pre>
<p>The goal of this method is to append command header instances into the returned 
list. The most important thing, is to take care of the instantiation. This method 
is called each time one enters in the concerned app. So before instantiating 
the command header class, check that the instantiation does not already exist. Refer 
to the &quot;Command Header Management&quot; section of the technical article about 
the command header [<a href="#References">6</a>] to understand the life cycle of 
a command header instance.</p>
<p>To do the check, use <em>CATAfrGetCommandHeader</em>, the global function which 
returns an instance associated with the current editor. (The <em>CATFrmEditor</em> 
class instance associated with the model). If no instance, i.e <code>pMyCommand</code> 
the second argument of the global function is NULL, then you can create the command 
header instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has explained how to implement the <em>CATIAfrPaletteOptions</em> 
interface to add options in the Tools Palette for your app.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcCmdPalette.htm">Creating a Command with Options in 
		the Tools Palette</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAAfrTaOverview.htm">Wintop Frame Overview</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAAfrUcSampleEditorHdr.htm">Creating Editors in a Command</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAAfrUcSampleWorkbench.htm">Creating an App</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAAfrTaCommandHeaders.htm">Understanding the Command Headers</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2004]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Dec 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
