<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Making Your Model Independent Command Available in All Apps
</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Making Your Model Independent Command Available in 
		All Apps</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to insert a model independent command in the 
		fixed area of the action bar.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAAfrGeneralWksAddin Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeneralWksAddin Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeneralWksAddin</a></li>
					<li><a href="#Where">Where to Find the CAAAfrGeneralWksAddin 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to integrate your model independent command in 
the fixed area of the action bar. This area is on the left hand side of the 
action bar and contains general commands visible all the time. You will learn to 
implement an interface, the <em>CATIAfrGeneralWksAddin interface.</em></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeneralWksAddin Use Case</h2>
<p>CAAAfrGeneralWksAddin is a use case of the CAAApplicationFrame.edu framework 
that illustrates AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrGeneralWksAddin Do</h3>
<p>The CAAAfrGeneralWksAddin creates a model independent add-in, called 
&quot;General&quot;, that adds three commands 
in the fixed area of the action bar.</p>

	
		<p style="width: 757px">
		<img alt="" src="images/CAAAfrGeneralWspAddin.png" width="721" height="196"/></p>
		<p>The <strong>General</strong> add-in:&nbsp; it contains in first position the 
		<kbd>Search Demonstrator</kbd> command [<a href="#References">3</a>], the <kbd>Viewer 
		Feedback demonstrator</kbd> command [<a href="#References">9</a>] and the <kbd>Center Graph demonstrator</kbd> command 
		[<a href="#References">11</a>] .</p>

	

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeneralWksAddin</h3>
<p>To launch CAAAfrGeneralWksAddin , you will need to set up the build time environment, 
then compile CAAAfrGeneralWksAddin along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">4</a>].</p>
<p>But just before launching the execution, edit the CAAApplicationFrame.edu.dico 
interface dictionary file located in the dictionary directory of the CAAApplicationFrame.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CNext\code\dictionary\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In this file, remove the &quot;<strong>#</strong>&quot; character at the beginning 
the two following lines:</p>
<pre class="code">...
#CAAAfrGeneralWksAddin       CATIWorkbenchAddin          libCAAAfrGeneralWksAddin  
#CAAAfrGeneralWksAddin       CATIAfrGeneralWksAddin      libCAAAfrGeneralWksAddin
...</pre>
<p>and run mkCreateRuntimeView.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrGeneralWksAddin Code</h3>
<p>The CAAAfrGeneralWksAddin use case is made of a single class named <em>CAAAfrGeneralWksAdn</em> 
located in the CAAAfrGeneralWksAddin.m module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAAApplicationFrame.edu\CAAAfrGeneralWksAddin.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the add-in, you should create the module directory to store the add-in 
code along with its two subdirectories LocalInterfaces and src. For this example, 
this directory is named CAAAfrGeneralWksAddin.m and can be found in the CAAApplicationFrame.edu 
framework. Then you will need to create the following files.</p>
<table>
	<tr>
		<td colspan="2">In the CAAAfrGeneralWksAddin.m\LocalInterfaces directory:</td>
	</tr>
	<tr>
		<td>
		<ul>
			<li>CAAAfrGeneralWksAdn.h</li>
		</ul>
		</td>
		<td>The header file of the add-in description class</td>
	</tr>
	<tr>
		<td colspan="2">In the CAAAfrGeneralWksAddin.m\src directory:</td>
	</tr>
	<tr>
		<td>
		<ul>
			<li>CAAAfrGeneralWksAdn.cpp</li>
			
		</ul>
		</td>
		<td>The source file of the add-in description class</td>
	</tr>
	<tr>
		<td colspan="2">In the dictionary, that is the CNext\code\dictionary directory, 
		referenced at run time using the CATDictionaryPath environment variable, 
		create or update:</td>
	</tr>
	<tr>
		<td>
		<ul>
			<li>CAAApplicationFrame.edu.dico</li>
		</ul>
		</td>
		<td>The interface dictionary</td>
	</tr>
	<tr>
		<td colspan="2">In the CNext\resources\msgcatalog directory, referenced 
		at run time using the CATMsgCatalogPath environment variable:</td>
	</tr>
	
	<tr>
		<td>
		<ul>
			<li>CAAAfrGeneralWksAddinHeader.CATNls and<br />
				CAAAfrGeneralWksAddinHeader.CATRsc</li>
		</ul>
		</td>
		<td>The command header resource files</td>
	</tr>
</table>
<p>There are four logical steps in CAAAfrGeneralWksAddin:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the add-in description class</a></td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create the command headers</a></td>
		<td><code>CreateCommands</code> method</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the add-in and arrange the commands</a></td>
		<td><code>CreateToolbars</code> method</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Provide the resources</a></td>
		<td>CNext\resources</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Create the Add-in Description Class</h3>
<ol>
	<li>Create the CAAAfrGeneralWksAdn.h file
		<pre class="code">#include &quot;CATBaseUnknown.h&quot;

class CATCmdContainer;

class CAAAfrGeneralWksAdn : public CATBaseUnknown
{
  CATDeclareClass;
  
  public:
     CAAAfrGeneralWksAdn();
     virtual ~CAAAfrGeneralWksAdn();
  
     // Creates the command headers
     void CreateCommands();

     // Arranges the commands in toolbars and menubar
     CATCmdContainer * CreateToolbars();

  private :

     // Copy constructor, not implemented
     // Set as private to prevent from compiler automatic creation as public.
     CAAAfrGeneralWksAdn(const CAAAfrGeneralWksAdn &amp;iObjectToCopy);

     // Assigment operator, not implemented
     // Set as private to prevent from compiler automatic creation as public.
     CAAAfrGeneralWksAdn &amp; operator = (const CAAAfrGeneralWksAdn &amp;iObjectToCopy);
};</pre>
	</li>
	<li>Create the CAAAfrGeneralWksAdn.cpp file
		<pre class="code">// Local Framework
#include &quot;CAAAfrGeneralWksAdn.h&quot;

// AfrFoundation Framework 
#include &lt;CATCreateWorkshop.h&gt;    // To use NewAccess - SetAccess - SetAccessChild ...

// Declaration of a new Command Header Class 
#include &quot;CATAfrCommandHeader.h&quot;        // See <a href="#Step2">Creating the Command Headers</a>

CATImplementClass(CAAAfrGeneralWksAdn, DataExtension,
                  CATBaseUnknown, <strong>CAAAfrGeneralWksAddin</strong>);

#include &lt;TIE_<strong>CATIAfrGeneralWksAddin</strong>.h&gt;
TIE_CATIAfrGeneralWksAddin(CAAAfrGeneralWksAdn);

CAAAfrGeneralWksAdn::CAAAfrGeneralWksAdn()
{}

CAAAfrGeneralWksAdn::CAAAfrGeneralWksAdn()
{}

void CAAAfrGeneralWksAdn::CreateCommands()
{
  ... // See <a href="#Step2">Creating the Command Headers</a>
}

CATCmdContainer * CAAAfrGeneralWksAdn::CreateToolbars()
{
  ... // See <a href="#Step3">Creating the Toolbar and Arranging the Commands</a>
}
</pre>
		<p>The <em>CAAAfrGeneralWksAdn</em> class states that it implements the
		<em>CATIAfrGeneralWksAddin</em> interface thanks to the <code>TIE_</code><code>CATIAfrGeneralWksAddin</code> 
		macro. The <code>CATImplementClass</code> macro declares that the <em>CAAAfrGeneralWksAdn</em> 
		class is a data extension, thanks to the <code>DataExtension</code> keyword, 
		that extends <em>CAAAfrGeneralWksAddin</em>. The third argument must always 
		be set as <em>CATBaseUnknown</em> or <em>CATNull</em> for any kind of extension.</p>
	</li>
	<li>Updating the Dictionary<p>Update the interface dictionary, that is a file 
		named, for example, CAAApplicationFrame.dico, whose directory's pathname 
		is concatenated at run time in the CATDictionaryPath environment variable, 
		and containing the following declaration to state that the <em>CAAAfrGeneralWksAddin
		</em>component implements the <em>CATIAfrGeneralWksAddin</em> interface, 
		and whose code is located in the libCAAAfrGeneralWksAddin shared library 
		or DLL.</p>
		<pre class="code">CAAAfrGeneralWksAddin CATIAfrGeneralWksAddin libCAAAfrGeneralWksAddin</pre>
		<p>Note that the component main class name is used to refer to the component 
		in the interface dictionary, and never the extension class names. Note also 
		that the shared library or DLL to associate with the component/interface 
		pair is the one that contains the code created by the call to the TIE macro 
		(This is generally the same library than the one that contains the interface 
		implementation code, since the TIE macro is usually included in the extension 
		class source file.) This is because when a client asks a component for an 
		interface pointer, the TIE class is instantiated first, and it either retrieves 
		the existing instance of the appropriate extension class, or otherwise instantiates 
		it.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Create the Command Headers</h3>
<p>Before reading this section, you can you refer to the &quot;The Command Headers&quot; 
article [<a href="#References">5</a>] to have an overview of the command header 
concepts, and more precisely you have the &quot;Defining Headers in CATIAfrGeneralWksAddin 
implementations&quot; section, which details the specificities of command headers 
created in this general add-in.</p>
<p>This is done by the <code>CreateCommands</code> method. Each command available 
in your add-in should be represent by a command header. A command header is an instance 
of a command header class.</p>
<p>The command header is created using the <code>CATAfrCommandHeader::CATCreateCommandHeader</code> 
method.</p>
<ol>
	<li>Create the command headers in the <code>CreateCommands</code> method. This 
		method should contain one instantiation statement of the command header 
		per command header. Each statement has the following form.
		<pre class="code">void CAAAfrGeneralWksAdn::CreateCommands()
{
  ...
   CATAfrCommandHeader::CATCreateCommandHeader(&quot;<b>CAAAfrSearchHdr</b>&quot;, 
                             &quot;CAACafSearch&quot;, 
                             &quot;CAACafSearchCmd&quot;, 
                             (void *)NULL, 
                             &quot;<b>CAAAfrGeneralWksAddinHeader</b>&quot;, 
                             CATFrmAvailable);
  ...
}</pre>
		<p>The command header constructor has the following arguments:</p>
		<ul>
			<li><code>CAAAfrSearchHdr</code> is the identifier you need to assign 
				to the command header. It will be used afterwards:
				<ul>
					<li>To associate the command starters you will define to put 
						the command in a menu and in toolbars with the command header. 
						This is done for this add-in in <a href="#Step3">Creating 
						the Toolbar and Arranging the Commands</a>.</li>
					<li>To build the variables that define the command header resources, 
						such as the help messages seen by the end user in his/her 
						own language, or the icon to display in the toolbar. This 
						is explained in <a href="#Step4">Providing the Resources</a></li>
				</ul>
			</li>
			<li><code>CAACafSearch</code> is the name of the shared library or DLL 
				containing the Search Demonstrator command's code, without the prefix 
				lib, and without the suffix depending on the operating system.</li>
			<li><code>CAACafSearchCmd</code> is the name of the Search Demonstrator 
				command class</li>
			<li>the next argument is the possible pointer to the object to pass 
				to the command when executing it</li>
			<li><code>CAAAfrGeneralWksAddinHeader</code> is the name of the resource 
				file</li>
			<li><code>CATFrmAvailable</code> defines the availability of the command.</li>
		</ul>
	</li>
</ol>
<p>The command header associated with the <kbd>Viewer Feedback demonstrator</kbd> is described in the use 
case [<a href="#References">9</a>].</p>
<p>The command header associated with the <kbd>Center Graph demonstrator</kbd>&nbsp; is described in the use 
case [<a href="#References">11</a>].</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Create the Add-in and Arrange the Commands</h3>
<p>Finally, we'll insert the commands in the action bar. This is the job of 
the <code>CreateToolbars</code> method.</p>
<ul>
	<li>Creating the toolbar
		<pre class="code">CATCmdContainer * CAAAfrGeneralWksAdn::CreateToolbars()
{
   NewAccess(CATCmdContainer, pCAAAfrGeneralWksTlb, CAAAfrGeneralWksTlb);

  //Insert in the fixed area
  NewAccess(CATCmdContainer, pFixedSection, <strong>AfrActionBarFixedSection</strong>);
  AddAccessChild(pFixedSection, pCAAAfrGeneralWksTlb);

  NewAccess(CATCmdStarter, pCAAAfrSearchStr, CAAMmrGeneralSearchStr);
  SetAccessCommand(pCAAAfrSearchStr, "CAAAfrSearchHdr");
  SetAccessChild(pCAAAfrGeneralWksTlb, pCAAAfrSearchStr);
 
  NewAccess(CATCmdStarter, pCAAAfrViewerFeedbackStr, CAAAfrViewerFeedbackStr);
  SetAccessCommand(pCAAAfrViewerFeedbackStr, "CAAAfrViewerFeedbackHdr");
  SetAccessNext(pCAAAfrSearchStr, pCAAAfrViewerFeedbackStr);
  
  NewAccess(CATCmdStarter, pCAAAfrCenterGraphStr, CAAAfrCenterGraphStr);
  SetAccessCommand(pCAAAfrCenterGraphStr, "CAAAfrCenterGraphHdr");
  SetAccessNext(pCAAAfrViewerFeedbackStr, pCAAAfrCenterGraphStr);
  
  return pFixedSection;
}</pre>
		<p>Here is what happens:</p>
		<ul>
			<li>The General container is created as an instance of the <em>CATCmdContainer</em> 
				class using the <code>NewAccess</code> macro. <code>pCAAAfrGeneralWksTlb</code> 
				is the variable used to handle the General container 
				instance pointer, and <code>CAAAfrGeneralWksTlb</code> is the identifier 
				used to refer to it in the add-in resource files. This identifier 
				must be unique among all the container identifiers [<a href="#References">6</a>]. </li>
			<li>The fixed section container is declared as an instance of the <em>CATCmdContainer</em> 
			class using the <code>NewAccess</code> macro. <code>pFixedSection</code> 
			is the variable used to handle the section container 
			instance pointer, and <code>AfrActionBarFixedSection</code> is the 
			identifier used to refer to it. The General container is set as child of the fixed section. </li>
			<li>Three macros are required for each command.
				<ol>
					<li>First, the command starter is created as a <em>CATCmdStarter</em> 
						instance using the <code>NewAccess</code> macro. <code>pCAAAfrSearchStr</code> 
						is the variable used to handle a pointer to that instance, 
						and <code>CAAMmrGeneralSearchStr</code> is its identifier.</li>
					<li>Then the command header is associated with this command 
						starter using the <code>SetAccessCommand</code> macro. The 
						second parameter is the command header identifier defined 
						as the first parameter of the command header constructor. 
						Refer to <a href="#Step2">Creating the Command Headers</a></li>
					<li>Finally the command starter is set as the child of the 
					General container thanks to the <code>SetAccessChild</code> macro 
						or next of the previous starter with the <code>SetAccessNext</code> 
						macro.</li>
				</ol>
			</li>
		</ul>
	</li>
	<li>Returning the toolbar
		<pre class="code">CATCmdContainer * CAAAfrGeneralWksAdn::CreateToolbars()
{
  ...
  
  return pFixedSection;
}</pre>
		<p>The first chained container declared, <code>pFixedSection</code>, is returned 
		by this method.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Provide the Resources</h3>
<p>You should provide the resources for the commands, 
	the command header resources in the command header resource files: titles, 
		messages, icons, and the accelerators associated with the commands. This 
		is described in "How to Create Standard Command Headers"[<a href="#References">8</a>] article.</p>
		<ul>
		<li>
		<p>The CAAAfrGeneralWksAddinHeader.CATNls:</p>
		<pre class="code">CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Category  = &quot;Edit&quot; ;
CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Title     = &quot;Search Demonstrator...&quot; ;
CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.ShortHelp = &quot;Search Demonstrator&quot; ;
CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Help      = &quot;Demonstrator of the Search CAA API&quot; ;
CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.LongHelp  = &quot;Search Demonstrator 
This Command launches some queries on the current model. The result is put
into the HSO.&quot; ;</pre> 
</li>
<li>
		<p>The CAAAfrGeneralWksAddinHeader.CATRsc:</p>
		<pre class="code">CAAAfrGeneralWksAddinHeader.CAAAfrSearchHdr.Icon.Normal    = &quot;I_CAASearch&quot; ;</pre>
		<p>For the resources of the <code>CAAAfrViewerFeedbackHdr</code> command header, refer 
		to the <code>CAACafViewerFeedback</code> use case [<a href="#References">9</a>].</p>
		<p>For the resources of the <code>CAAAfrCenterGraphHdr</code> command header, refer 
		to the <code>CAACafCenterGraph</code> use case [<a href="#References">11</a>].</p>

	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how by implementing the <em>CATIAfrGeneralWksAddin</em> 
interface you can add your model independent command in the fixed area of the 
action bar, making it available to all apps.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcSampleAddin.htm">Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrTaOverview.htm">Wintop Frame Overview</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAACafUcSampleSearch.htm">Creating Search Queries</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAAfrTaCommandHeaders.htm">Understanding the Command Headers</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAACppTechArticles/CAADocCppNamingRulesChecklist.htm">
		Checklist for C++ Naming Rules</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAAfrTaI18NWorkshop.htm">How to Create Resources for Apps</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td><a href="CAAAfrTaStdCommandHeader.htm">How to Create Standard Command Headers</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="../CAAVisVisualization/CAAVisUcViewerFeedback.htm">Viewer 
		Feedback</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td><a href="CAAAfrUcCheckHeader.htm">Creating a Check Item</a></td>
	</tr>
	<tr>
		<td>[11]</td>
		<td><a href="CAACafUcSampleCenterGraph.htm">Center Tree Nodes</a></td>
	</tr>

	
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Oct 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Oct 2013]</td>
		<td>3DEXPERIENCE migration</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
