<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Property Page for Your Objects</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Property Tab for Your Objects</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to add a property tab to the Properties 
		command dialog box for 
		one or several property interfaces that objects implement.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAACafEditTextureProp Use Case</a>
				<ul>
					<li><a href="#What">What Does CAACafEditTextureProp Do</a>
					</li>
					<li><a href="#How">How to Launch CAACafEditTextureProp</a>
					</li>
					<li><a href="#Where">Where to Find the CAACafEditTextureProp 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create a property tab for a given property 
of objects in your model [<a href="#References">1</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACafEditTextureProp Command Use Case</h2>
<p>CAACafEditTextureProp is a use case of the CAACATIAApplicationFrm.edu framework 
that illustrates the CATIAApplicationFrame framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACafEditTextureProp Command Do</h3>
<p>CAACafEditTextureProp creates the Texture Properties property tab with the two 
check buttons that set or unset the Metal Aspect and Rough properties to objects. 
The values of these properties are read from the object when the property page is 
built. The dialog box is as follows:</p>
<p>
<img alt="" src="images/CAACafEditProperties.jpg" width="425" height="333"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACafEditTextureProp</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the &quot;<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">The 
CAAGeometry Sample</a>&quot; use case for a detailed description of how this use 
case should be launched.</p>
<p>But just before launching the execution, edit the CAACATIApplicationFrm.edu.dico 
interface dictionary file located in the dictionary directory of the CAACATIApplicationFrm.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACATIAApplicationFrm.edu\CNext\code\dictionary\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In this file, remove the &quot;#&quot; character before the two following lines, 
and then run mkCreateRuntimeView.</p>
<pre class="code"># 2 lines to decomment to see pages in the Property Dialog Box
# CAACafTexturePropertyPageEdt CATIEditProperties  libCAACafEditTextureProp
# CAACafColorPropertyPageEdt   CATIEditProperties  libCAACafEditColorProp</pre>
<p>The second line deals with the Color tab page created by the non-described 
CAACafEditColorProp use case located in the CAACafEditColorProp.m module. Then, 
in the window where you run the mkrun command, do not type the module name on 
the command line, but type 3DEXPERIENCE instead. When the session is ready, do the following: </p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>CAA: Create Geom</strong> app. </li>
    <li>Create at least three points, a plane using these three points, and a circle 
		in the plane, using the commands in <strong>CAA Geometry Creation Section</strong> of the action bar.</li>
	<li>Right click the circle, and select <strong>Properties</strong> in the contextual menu.</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACafEditTextureProp Code</h3>
<p>The CAACafEditTextureProp use case is made of classes and interfaces located 
in the CAACafEditTextureProp.m module and in the ProtectedInterfaces directory of 
the CAACATIAApplicationFrm.edu framework:</p>
<p><code>InstallRootDirectory\CAADoc\CAACATIAApplicationFrm.edu\CAACafEditTextureProp.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>These classes and interfaces are:</p>
<table>
	<tr>
		<td><em>CAACafTexturePropertyPageEdt</em></td>
		<td>Property page editor class</td>
	</tr>
	<tr>
		<td><em>CAACafTexturePropertyPageEdtFactory</em></td>
		<td>Factory class for the property page editor class</td>
	</tr>
	<tr>
		<td><em>CAAICafTexturePropertyPageEdtFactory</em></td>
		<td>Factory interface implemented by <em>CAACafElementPropertyPageEdtFactory</em></td>
	</tr>
	<tr>
		<td><em>TIE_CAAICafTexturePropertyPageEdtFactory</em></td>
		<td>TIE class for the factory interface</td>
	</tr>
	<tr>
		<td><em>CAACafTexturePropertyPageDlg</em></td>
		<td>Dialog box class associated with the property page editor</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a property page, there are four main steps:</p>
<ol>
	<li><a href="#Step1">Create the property page editor factory interface</a>
	</li>
	<li><a href="#Step2">Create the property page editor factory</a> </li>
	<li><a href="#Step3">Create the property page editor</a> </li>
	<li><a href="#Step4">Create the property page dialog</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Property Page Editor Factory Interface</h3>
<p>This factory interface is named CAAICafTexturePropertyPageEdtFactory. To create 
this interface, create:</p>
<ol>
	<li>The header file </li>
	<li>The source file </li>
	<li>The TIE tsrc file.</li>
</ol>
<p>This is shown below. </p>
<ol>
	<li><strong>Header file</strong>: CAAICafTexturePropertyPageEdtFactory.h is 
		as follows.
		<pre class="code">#include &lt;CATIGenericFactory.h&gt;.

extern IID <strong>IID_CAAICafTexturePropertyPageEdtFactory</strong>;

class CAAICafTexturePropertyPageEdtFactory : public <strong>CATIGenericFactory</strong>
{
  <strong>CATDeclareInterface</strong>;
  public :
};</pre>
		<p>A factory interface is an interface, that is, an abstract class that 
		derives from <em>CATIGenericFactory</em>. As any interface, it has an IID 
		declared as IID_ followed by the interface name, and includes the <code>
		CATDeclareInterface</code> macro that declares that this abstract class 
		is an interface. No additional method than those inherited from <em>CATIGenericFactory</em> 
		is necessary. Don&quot; t forget the public keyword required by the tie 
		compiler.</p>
	</li>
	<li><strong>Source file</strong>: CAAICafTexturePropertyPageEdtFactory.cpp is 
		as follows.
		<pre class="code">#include &quot;CAAICafTexturePropertyPageEdtFactory.h&quot;

IID IID_CAAICafTexturePropertyPageEdtFactory = <strong>{ 
    0x0cf4c1bc,
    0xd409,
    0x11d3,
    {0xb7, 0xf5, 0x00, 0x08, 0xc7, 0x4f, 0xe8, 0xdd}
    };</strong>

<strong>CATImplementInterface</strong>(CAAICafTexturePropertyPageEdtFactory, CATIGenericFactory);</pre>
		<p>This file includes a GUID [<a href="#References">3</a>] as follows. The 
		GUID is shown in bold typeface. The <code>CATDeclareInterface</code> in 
		the header file and the <code>CATImplementInterface</code> macros make an 
		interface from this C++ class. The second parameter of <code>CATImplementInterface</code> 
		declares that <em>CAAICafTexturePropertyPageEdtFactory</em> OM-derives from
		<em>CATIGenericFactory</em>.</p>
	</li>
	<li><strong>TIE file</strong>: to enable components to implement this interface, 
		create a file named TIE_CAAICafTexturePropertyPageEdtFactory.tsrc in the 
		src directory, and containing:
		<pre class="code">#include &quot;CAAICafTexturePropertyPageEdtFactory.h&quot;</pre>
		<p>The building tool mkmk will generate the TIE for this interface, that 
		is the TIE_CAAICafTexturePropertyPageEdtFactory.h file for you in the ProtectedGenerated 
		directory.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Property Page Editor Factory</h3>
<p>Macros help to create the class. These macros create a class whose name is made 
of the property page editor class name to which the string Factory is appended. 
This is the reason why the header file is named CAACafTexturePropertyPageEdtFactory.h 
and the source file is named CAACafTexturePropertyPageEdtFactory.cpp.</p>
<p>To create this class, create: </p>
<ol>
	<li>The header file, using the <code>CAT_EDITOR_DECLARE_FACTORY</code> macro
	</li>
	<li>The source file, using the <code>CAT_EDITOR_DEFINE_FACTORY</code> macro
	</li>
	<li>Update the interface dictionary and the factory dictionary.</li>
</ol>
<ol>
	<li><strong>Header file</strong>: CAACafTexturePropertyPageEdtFactory.h is as 
		follows.
		<pre class="code">#include &lt;CATEditorFactory.h&gt;
#include &lt;CAACafTexturePropertyPageEdt.h&gt;

#define ExportedBy<strong>NOTHING</strong>

<strong>CAT_EDITOR_DECLARE_FACTORY</strong>(<strong>NOTHING</strong>, CAACafTexturePropertyPageEdt, CAACafTexturePropertyPageEdt);</pre>
		<p>It is important to set the same string where <code><strong>NOTHING</strong></code> 
		is used in this example. <code>ExportedByNOTHING</code> sets a non existing 
		shared library or DLL to the class. Setting a valid one is useless, since 
		the created class in an extension of <em>CATEditorManager</em>, and its 
		instantiation is made when <em>CATEditorManager</em> is asked for <em>CAAICafTexturePropertyPageEdtFactory</em>. 
		In this case, the appropriate shared library or DLL is retrieved using the 
		interface dictionary. The second parameter is the name of the property page 
		editor class. This name is used to create the factory class name by appending 
		Factory. The third parameter is a type assigned to the class to instantiate 
		that could be retrieved using the <code>CATIGenericFactory::Support</code> 
		method. It is unused here, but must be set, and is thus also set to the 
		name of the class to instantiate.</p>
	</li>
	<li><strong>Source file</strong>: CAACafTexturePropertyPageEdtFactory.cpp is 
		as follows.
		<pre class="code">#include &lt;CAACafTexturePropertyPageEdtFactory.h&gt;

<strong>CAT_EDITOR_DEFINE_FACTORY</strong>(CAACafTexturePropertyPageEdt, CAACafTexturePropertyPageEdt);
 
#include &lt;TIE_CAAICafTexturePropertyPageEdtFactory.h&gt;
<strong>TIE_CAAICafTexturePropertyPageEdtFactory</strong>(CAACafTexturePropertyPageEdtFactory);</pre>
		<p>The <code>CAT_EDITOR_DECLARE_FACTORY</code> and <code>CAT_EDITOR_DEFINE_FACTORY</code> 
		macros create the property page editor factory implementation class as a 
		data extension of the <em>CATEditorManager</em> class. Then the TIE macro 
		declares that this extension class implements the <em>CAAICafTexturePropertyPageEdtFactory</em> 
		interface.</p>
	</li>
	<li><strong>Dictionary files</strong>: you should now update
		<ul>
			<li>The <em>interface dictionary</em>, that is a file whose name is 
				the framework name suffixed by dico, such as CAACATIAApplicationFrm.edu.dico, 
				and that you should create or update in the framework CNext/code/dictionary 
				directory. The interface dictionary contains the following declaration 
				to state that the CATEditorManager component implements the <em>
				CAAICafTexturePropertyPageEdtFactory</em> interface, by means of 
				the extension class created by the macros, whose code is located 
				in the libCAACafEditTextureProp shared library or DLL:
				<pre class="code">CATEditorManager CAAICafTexturePropertyPageEdtFactory libCAACafEditTextureProp</pre>
			</li>
			<li>The <em>factory dictionary</em>, that is a file whose name is the 
				framework name suffixed by fact, such as CAACATIAApplicationFrm.fact, 
				and that that you should create or update in the framework CNext/code/dictionary 
				directory. The factory dictionary contains the following declaration 
				to state that the <em>CAAICafTexturePropertyPageEdtFactory</em> 
				interface is an interface to a factory whose implementation creates 
				an CAACafTexturePropertyPageEdt class instance:
				<pre class="code">CAACafTexturePropertyPageEdt   CAAICafTexturePropertyPageEdtFactory</pre>
			</li>
		</ul>
		<p>At run time, the pathname of the directory that contains these files 
		is concatenated at run time in the CATDictionaryPath environment variable.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Property Page Editor</h3>
<p>You'll now create the class for the property page. This class derives from the
<em>CATEditor</em> class, implements the <em>CATIEditProperties</em> interface and 
overrides methods that are either pure virtual or empty in their <em>CATEditor</em> 
implementation. You should provide their body to make them play the following role:
</p>
<ul>
	<li><code>ExtractFromSelection</code> returns the list of objects found in the 
		Current Set of Objects (CSO) that implement the <em>CAAISysTextureProperties</em> 
		interface </li>
	<li><code>GetEditorTitle</code> returns the property page title </li>
	<li><code>SetEditorSize</code> lets you request which size you need to accommodate 
		your property page, among the possible values: small, medium, or large
	</li>
	<li><code>BuildEditor</code> instantiates the associated dialog class </li>
	<li><code>SetPropertyValue</code> sets the values and options in the property 
		page dialog from the element </li>
	<li><code>CommitModification</code> applies to the selected elements the modifications 
		made to values and options in the property page dialog </li>
	<li><code>CancelModification</code> is empty, but exists and could be used to 
		delete temporary objects that could possibly be allocated in previous methods
	</li>
	<li><code>CloseWindowFromEditor</code> is called whenever the end user selects 
		another property page.</li>
</ul>
<p>The methods <code>ExtractFromSelection</code>, <code>GetEditorTitle</code>,
<code>SetEditorSize</code>, <code>BuildEditor</code>, and <code>SetPropertyValue</code> 
are executed in this order when instantiating the property page.</p>
<p>When the end user clicks: </p>
<ul>
	<li>OK, the <code>CommitModification</code> method is executed and the window 
		is closed </li>
	<li>Apply the <code>CommitModification</code> method is executed, but the window 
		is not closed </li>
	<li>Cancel, the <code>CancelModification</code> method is executed and the window 
		is closed </li>
	<li>Close, the window is closed.</li>
</ul>
<p><code>SetPropertyValue</code>, <code>CommitModification</code>, and <code>CancelModification</code> 
call in turn the methods with the same name of the associated dialog class.</p>
<p>The property page editor class header file is shown below.</p>
<pre class="code">#include &quot;CATEditor.h&quot;                 // Needed to derive from CATEditor
#include &quot;CATLISTV_CATBaseUnknown.h&quot;   // Needed by ExtractFromSelection,...

class CAACafTexturePropertyPageDlg;    // Dialog Page
class CATEditorPage;                   // Tabpage frame parent

class CAACafTexturePropertyPageEdt : public CATEditor
{
  CATDeclareClass;
  public:
    CAACafTexturePropertyPageEdt();
    virtual ~CAACafTexturePropertyPageEdt(); 
    virtual void ExtractFromSelection(CATLISTV(CATBaseUnknown_var) &amp; oExtract, 
                               const  CATLISTV(CATBaseUnknown_var) * iSelection=NULL);
    virtual CATUnicodeString  GetEditorTitle();
    virtual void SetEditorSize(int &amp; oSize);
    virtual void BuildEditor(CATEditorPage *); 
    virtual void SetPropertyValue(CATLISTV(CATBaseUnknown_var)&amp; iExtract, 
                                  ModeReadWrite iMode);
    virtual void CommitModification(CATLISTV(CATBaseUnknown_var)&amp; iExtract);
    virtual void CancelModification(CATLISTV(CATBaseUnknown_var)&amp; iExtract);
    virtual void CloseWindowFromEditor();
  
 private:
    CAACafTexturePropertyPageDlg * _pTextureFrame ;
};</pre>
<p>We'll examine each method individually. </p>
<ul>
	<li>The <strong>constructor</strong> initializes the <code>_pT</code><code>extureFrame</code> 
		dialog frame to include in the property page to <code>NULL</code>.
		<pre class="code">// Local Framework
#include &quot;CAACafTexturePropertyPageEdt.h&quot;
#include &quot;CAACafTexturePropertyPageDlg.h&quot;

// CAASystem.edu Framework
#include &quot;CAAISysTextureProperties.h&quot;

// Visualization Framework
#include &quot;CATPathElement.h&quot;

// System Framework
#include &quot;CATLISTV_CATBaseUnknown.h&quot;
#include &quot;CATMsgCatalog.h&quot;
#include &quot;CATUnicodeString.h&quot;

// CATIAApplicationFrame Framework 
#include &quot;CATEditorPage.h&quot;

#include &quot;TIE_CATIEditProperties.h&quot;
TIE_CATIEditProperties(CAACafTexturePropertyPageEdt);

CATImplementClass(CAACafTexturePropertyPageEdt, Implementation, CATBaseUnknown , CATNull);
CAACafTexturePropertyPageEdt::CAACafTexturePropertyPageEdt()
                            :CATEditor(),<strong>_pTextureFrame(NULL)</strong>
{}

CAACafTexturePropertyPageEdt::~CAACafTexturePropertyPageEdt()
{
  _pTextureFrame = NULL;
}</pre>
	</li>
	<li><code><strong>ExtractFromSelection</strong></code> is called with the list 
		of objects in the CSO as second argument. This should be a list of <em>CATPathElement</em> 
		instances.
		<pre class="code">void CAACafTexturePropertyPageEdt::ExtractFromSelection(CATLISTV(CATBaseUnknown_var)&amp; oExtract,
                                                        const CATLISTV(CATBaseUnknown_var) * iSelection)
{
  oExtract.RemoveAll();
  if (iSelection &amp;&amp; iSelection-&gt;Size())
  {
    CAAISysTextureProperties * pISysTexProperties = NULL;
    HRESULT resu;
    for (int i=1 ; i&lt;= iSelection-&gt;Size(); i++ )
    {
      if ( (*iSelection)[i] != NULL_var )
      {
        CATBaseUnknown_var ukn  = (*iSelection)[i];
	CATBaseUnknown * pukn = ukn;
        if ( pukn )
        {
          CATPathElement path = (CATPathElement &amp;) *pukn;
          if ( path.GetSize() )
          {
            CATBaseUnknown * leaf = path[path.GetSize()-1];
            resu =  leaf-&gt;QueryInterface(IID_CAAISysTextureProperties,
                                         (void**)&amp;pISysTexProperties);

            <em>// object extracted implements CAAISysTextureProperties</em>
            if ( SUCCEEDED(resu) )
            {
              oExtract.Append((*iSelection)[i]);
              pISysTexProperties-&gt;Release();
              pISysTexProperties = NULL;
            }
          }
        }
      }
    }
  }
}</pre>
		<p>The list is scanned, and any object that implements the <em>CAAISysTextureProperties</em> 
		interface is added to the <code>oExtract</code> list returned as the first 
		argument.</p>
	</li>
	<li><code><strong>GetEditorTitle</strong></code> assigns the property page title.
		<pre class="code">CATUnicodeString CAACafTexturePropertyPageEdt::GetEditorTitle()
{
  CATUnicodeString Title;
  Title = CATMsgCatalog::BuildMessage(&quot;CAACafTexturePropertyPageDlg&quot;,
                                      &quot;TexturePageTitle&quot;,
                                       NULL, 0, &quot;Texture&quot;);
  return Title;
}</pre>
		<p>It creates a thet title as a <em>CATUnicodeString</em> instance using 
		the static <code>BuildMessage</code> of <em>CATMsgCatalog</em>. This method 
		takes the following arguments: </p>
		<ul>
			<li><code>CAACafTexturePropertyPageDlg</code> is the message catalog 
				name found in the CAACafTexturePropertyPageDlg.CATNls message file
			</li>
			<li><code>TexturePageTitle</code> is the message key using which the 
				property page editor title should be retrieved </li>
			<li>The third argument is set to <code>NULL</code> because there is 
				no parameters customizing the message </li>
			<li>The fourth argument is the number of parameters, here 0 </li>
			<li><code>Texture</code> is the default title to be used if the message 
				catalog is not found.</li>
		</ul>
	</li>
	<li><code><strong>SetEditorSize</strong></code> sets the property page size.
		<pre class="code">void CAACafTexturePropertyPageEdt::SetEditorSize(int &amp; oSize )
{
  oSize = 1;
}</pre>
		<p>This size can be set to small (1), medium (2), or large (3) for this 
		property page. The dialog window is displayed using the largest value found 
		among the property pages to be displayed.</p>
	</li>
	<li><code><strong>BuildEditor</strong></code> instantiates and builds the dialog 
		object for the property page.
		<pre class="code">void CAACafTexturePropertyPageEdt::BuildEditor(CATEditorPage * iEditor)
{
  _pTextureFrame = new CAACafTexturePropertyPageDlg(iEditor);
  _pTextureFrame-&gt;Build();
}</pre>
		<p>This dialog object is described in <a href="#Step4">Creating the Property 
		Page Dialog</a>.</p>
	</li>
	<li><code><strong>SetPropertyValue</strong></code> requests from the dialog 
		object to set the values and options of its controls from the properties 
		of the extracted objects.
		<pre class="code">void CAACafTexturePropertyPageEdt::SetPropertyValue(CATLISTV(CATBaseUnknown_var)&amp; iExtract,
                                                    ModeReadWrite iMode)
{
  _pTextureFrame-&gt;SetPropertyValue(iExtract, iMode);
}</pre>
		<p><code>iMode</code> is always set to <code>Write</code></p>
	</li>
	<li><code><strong>CommitModification</strong></code> saves the modified values 
		in each extracted object.
		<pre class="code">
void CAACafTexturePropertyPageEdt::CommitModification(CATLISTV(CATBaseUnknown_var)&amp; iExtract)
{
  _pTextureFrame-&gt;CommitModification(iExtract);
}</pre>
		<p>It is called whenever the end user clicks OK or Apply.</p>
	</li>
	<li><code><strong>CancelModification</strong></code> cancels the modifications 
		brought to the parameter values in the property page.
		<pre class="code">void CAACafTexturePropertyPageEdt::CancelModification(CATLISTV(CATBaseUnknown_var)&amp; extract)
{
  _pTextureFrame-&gt;CancelModification(extract);
}</pre>
		<p>It is called whenever the end user clicks Cancel. When the end user clicks 
		Cancel, the objects are not yet modified.</p>
	</li>
	<li><code><strong>CloseWindowFromEditor</strong></code> is called whenever the 
		end user selects a new property page, but not when the dialog box is closed.
		<pre class="code">void CAACafTexturePropertyPageEdt::CloseWindowFromEditor()
{}</pre>
	</li>
</ul>
<p>Update the interface dictionary, that is a file named, for example, CAACATIAApplicationFrm.edu.dico, 
whose directory's pathname is concatenated at run time in the CATDictionaryPath 
environment variable, and containing the following declaration to state that the
<em>CAACafTexturePropertyPageEdt</em> class implements the <em>CATIEditProperties</em> 
interface, and whose code is located in the libCATAfrEduEditProp shared library 
or DLL. The update is in bold typeface:</p>
<pre class="code">CATEditorManager CAAICafTexturePropertyPageEdtFactory libCATAfrEduEditProp
<strong>CAACafTexturePropertyPageEdt CATIEditProperties       libCATAfrEduEditProp</strong></pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Property Page Dialog</h3>
<p>This dialog class represents the contents of the tab page. Its header file is 
as follows.</p>
<pre class="code">#include &quot;CATDlgFrame.h&quot;  // Needed to derive from  CATDlgFrame  
#include &lt;CATEditor.h&gt;

class CATDlgCheckButton;

class CAACafTexturePropertyPageDlg : public CATDlgFrame
{
  public :
    DeclareResource(CAACafTexturePropertyPageDlg, CATDlgFrame);

    CAACafTexturePropertyPageDlg (CATDialog * ipParent);
    virtual ~CAACafTexturePropertyPageDlg ();

    void Build();
    void SetPropertyValue(CATLISTV(CATBaseUnknown_var) &amp; iExtract,ModeReadWrite iMode);
    void CommitModification(CATLISTV(CATBaseUnknown_var) &amp; iExtract);
    void CancelModification(CATLISTV(CATBaseUnknown_var) &amp; iExtract);
    void CloseWindowFromEditor();

  private :
    CAACafTexturePropertyPageDlg ();
    CAACafTexturePropertyPageDlg(const CAACafTexturePropertyPageDlg &amp;iObjectToCopy);

  private :
    CATDlgCheckButton * _pMetal;
    CATDlgCheckButton * _pRough;
};</pre>
<p>A property page dialog must derive from <em>CATDlgFrame</em>. The <code>DeclareResource</code> 
macro declares that the messages and resources are to be searched for in the CAACafTexturePropertyPageDlg.CATNls 
and CAACafTexturePropertyPageDlg.CATRsc files respectively. These files are delivered 
in the CNext\resources\msgcatalog directory of CAACATIAApplicationFrame.edu framework. 
The class has a constructor with a single argument to get its parent, and a destructor. 
The constructor only initializes the data members, while the <code>Build</code> 
method creates and arranges the controls, and sets the callbacks onto these controls. 
The other methods are the companion methods of those of <em>CATEditor</em> overriden 
in <em>CAACafTexturePropertyPageEdt</em>. A default constructor and a copy constructor 
are set as private, and are not implemented in the source file. This prevents the 
compiler from creating them as public without you know. </p>
<p>We'll examine each method individually.</p>
<ul>
	<li>The <strong>constructor</strong> only allocates storage for the controls. 
		The destructor is empty since any dialog object automatically deletes its 
		dialog object data members.
		<pre class="code">// Local Framework
#include &quot;CAACafTexturePropertyPageDlg.h&quot;
#include &quot;CAAISysTextureProperties.h&quot;

// Dialog Framework
#include &quot;CATDlgCheckButton.h&quot;

// Visualization Framework
#include &quot;CATPathElement.h&quot;

CAACafTexturePropertyPageDlg::CAACafTexturePropertyPageDlg (CATDialog * parent)
                            : CATDlgFrame(parent, &quot;TexturePageFrame&quot;, CATDlgFraNoFrame|CATDlgFraNoTitle),
                              _pMetal(NULL), _pRough(NULL)
{}

CAACafTexturePropertyPageDlg ::~CAACafTexturePropertyPageDlg ()
{
  _pMetal = NULL;
  _pRough = NULL;
}</pre>
	</li>
	<li><code><strong>Build</strong></code> creates the controls.
		<pre class="code">void CAACafTexturePropertyPageDlg ::Build()
{
  _pMetal  = new CATDlgCheckButton(this,&quot;Metal&quot;);
  _pRough  = new CATDlgCheckButton(this,&quot;Rough&quot;);
}</pre>
	</li>
	<li><code><strong>SetPropertyValue</strong></code> sets the values and options 
		of its controls, and saves these values, from the properties of the first 
		extracted object. Here it checks or unchecks the appropriate check buttons 
		accordingly.
		<pre class="code">void CAACafTexturePropertyPageDlg::SetPropertyValue(CATLISTV(CATBaseUnknown_var) &amp; iExtract,ModeReadWrite mode)
{
  _pMetal-&gt;SetState(CATDlgCheck);
  _pRough-&gt;SetState(CATDlgCheck);
   
  int IsMetalic = 1 ;
  int IsRough   = 1 ;

  if ( iExtract.Size() &gt; 0 )
  {
      // the first element selected
    CATBaseUnknown_var elt = (iExtract)[1];
    CATBaseUnknown *pPath = elt;
    if ( pPath )
    {
      CATPathElement &amp;path = (CATPathElement &amp;)*pPath;
      if (path.GetSize())
      {
            // the leaf of the first element
        CATBaseUnknown * currentp = path[path.GetSize()-1];

            // Information are on the CAAISysTextureProperties interface
            // of the first object 
        CAAISysTextureProperties * pISysTexProperties = NULL ;
        HRESULT resu =  currentp-&gt;QueryInterface(IID_CAAISysTextureProperties,
                                              (void**)&amp;pISysTexProperties) ;

	        // Get values of this first element to initialize the Dialog's object
        if ( SUCCEEDED(resu) ) 
        {
          pISysTexProperties-&gt;GetMetal(IsMetalic);
          if ( !IsMetalic ) _pMetal-&gt;SetState(CATDlgUncheck);
            pISysTexProperties-&gt;GetRough(IsRough);
          if ( !IsRough   ) _pRough-&gt;SetState(CATDlgUncheck);
            pISysTexProperties-&gt;Release();
        }
      }
    }
  }
  SetSensitivity(CATDlgEnable);
}</pre>
	</li>
	<li><code><strong>CommitModification</strong></code> applies the modified property 
		values to the extracted objects.
		<pre class="code">void CAACafTexturePropertyPageDlg::CommitModification(CATLISTV(CATBaseUnknown_var) &amp; iExtract)
{
  HRESULT resu ;
  CAAISysTextureProperties * pISysTexProperties = NULL ;

  for ( int i=1 ; i &lt;= iExtract.Size() ; i++ )
  {
      // current element to modify 
    CATBaseUnknown_var elt = (iExtract)[i];
    CATBaseUnknown *pPath = elt;
    CATPathElement &amp;path = (CATPathElement &amp;)*pPath;

    if (path.GetSize() )
    {
      CATBaseUnknown * currentp = path[path.GetSize()-1];
      resu =  currentp-&gt;QueryInterface(IID_CAAISysTextureProperties,
                                       (void**)&amp;pISysTexProperties) ;

          // Modification of the model with the current values
      if ( SUCCEEDED(resu) ) 
      {
        if ( _pMetal-&gt;GetState() == CATDlgCheck )
          pISysTexProperties-&gt;SetMetal(1);
        else
          pISysTexProperties-&gt;SetMetal(0);

        if ( _pRough-&gt;GetState() == CATDlgCheck )
          pISysTexProperties-&gt;SetRough(1);
        else
          pISysTexProperties-&gt;SetRough(0);

        pISysTexProperties-&gt;Release();
        pISysTexProperties = NULL ;
      }
    }
  }
}</pre>
	</li>
	<li><code><strong>CancelModification</strong></code> closes the dialog window 
		without applying the modified values.
		<pre class="code">void CAACafTexturePropertyPageDlg::CancelModification(CATLISTV(CATBaseUnknown_var) &amp; iExtract)
{}</pre>
	</li>
	<li><code><strong>CloseWindowFromEditor</strong></code> is called whenever the 
		end user selects another property page when this is the current one.
		<pre class="code">void CAACafTexturePropertyPageDlg::CloseWindowFromEditor()
{}</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Creating a new property tab for the Properties command in contextual menu implies to create a 
property page editor factory interface that derives from <em>CATIGenericFactory</em>, 
the property page editor factory that instantiates the property page editor, and 
to supply the associated property page dialog class gathering the controls to access 
the parameters and values of the object's properties you let the end user access 
and modify.</p>
<p>To be extracted from the Current Set of Objects (CSO), the objects should 
implement the property interface(s) to which this property tab is dedicated.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACafTaEditProperties.htm">How to Add an Object Property 
		Tab</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysQrOMGUID.htm">
		About Globally Unique IDentifiers</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
		<tr>
		<td>Version: <strong>3</strong> [Mar 2014]</td>
		<td>Migration to 3DEXPERIENCE platform </td>
	</tr>


</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
