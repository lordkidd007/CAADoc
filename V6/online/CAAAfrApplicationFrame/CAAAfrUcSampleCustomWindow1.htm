<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Model's Tab - Part 1</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Model's Tab - Part 1</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a new tab to display an existing 
		model and how to instantiate it from a command. To complete this use 
		case, a second use case described in the &quot;Creating a Model's Tab - Part 2&quot; article 
		[<a href="#References">1</a>] explains more precisely the specificity of 
		a multi-viewers tabs.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrHistogramChartWindow Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrHistogramChartWindow Do</a></li>
					<li><a href="#How">How to Launch CAAAfrHistogramChartWindow</a></li>
					<li><a href="#Where">Where to Find the CAAAfrHistogramChartWindow 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>A model, visualized in the application frame, is usually displayed using its 
default tab. This use case is intended to show you how to create a new type of 
tab for an existing data model. </p>
<p>You will learn all the steps to visualize a model in a none-standard way:</p>
<ol>
	<li>How to create the tab class deriving from the <em>CATFrmWindow</em></li>
	<li>How to manage the MVC paradigm by using the <em>CATVisManager</em></li>
	<li>How to create instances of the tab.</li>
</ol>
<p>At last, before getting in this use case, refer to the technical article [<a href="#References">2</a>], 
to have a complete viewpoint of all the objects implicated in the layout.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrHistogramChartWindow Use Case</h2>
<p>CAAAfrHistogramChartWindow is a use case of the CAAApplicationFrame.edu framework 
that illustrates the AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrHistogramChartWindow Do</h3>
<p>The CAAAfrHistogramChartWindow use case creates a special tab for CAAGeometry models. 
This new tab is launched from the <kbd>Histogram Chart Tab</kbd> command. 
Refer to the use case entitled &quot;Associating a Dialog Box with a Dialog Agent 
- Part 2&quot; [<a href="#References">3</a>].</p>
<table>
    <caption style="width: 426px">The <kbd>Histogram Chart Tab</kbd> Command in the <kbd>Tools</kbd> 
	Section </caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrWndHistoChartTab.jpg" width="424" height="227"/></td>
	</tr>
</table>
<p>The top tab on the picture below is the default tab. The bottom tab, 
named "Model Histogram Chart", is created by the <kbd>Histogram Chart Tab</kbd> 
command.</p>
<table>
	<caption><a name="Fig.1"></a>The CAAGeometry Data Tabs</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrWndCreateStandardTab.jpg" width="493" height="367"/></td>
	</tr>
	<tr>
        <td>
		<img alt="" src="images/CAAAfrWndCreateHistoTab.jpg" width="494" height="411"/></td>
	</tr>
</table>
<p>These two tabs display the same data model (six points, one line and one plane) 
with two kinds of visualization:</p>
<ol>
	<li>In the top tab, the elements of the model are visualized in 3D with the
		<em>CATI3DGeoVisu</em> interface</li>
	<li>In the bottom tab, the elements are visualized in 2D with the <em>CAAIVisHistogramChartVisu</em><strong>
		</strong>interface.</li>
</ol>
<p>The CAAGeometry model provides its default tab. To create the <em>CAAAfrHistogramChartWindow</em> 
tab, we have chosen to create a new interface. This interface, <em>CAAISysDocumentChartWindow</em>, 
enables you to have no link between the framework which contains the definition 
tab (CAAApplicationFrame.edu) and the one which contains the command to create 
a tab's instance (CAADialogEngine.edu).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrHistogramChartWindow</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">5</a>] for a detailed description of how this use case should 
be launched. For the specific scenario:</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> 
	app</li>
    <li>In the action bar, activate <kbd>Tools</kbd> section</li>
	<li>Select <kbd>Histogram Chart Tab</kbd> command</li>
	<li>Click <kbd>OK</kbd>.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrHistogramChartWindow Code</h3>
<p>The CAAAfrHistogramChartWindow use case is made up of several classes and interfaces:</p>
<ul>
	<li><em>CAAAfrHistogramChartWindow</em>: The model's tab class</li>
	<li><em>CAAISysDocumentChartWindow</em>: The interface to create a model's 
	tab 
		class instance</li>
	<li><em>CAAIVisHistogramChartVisu</em>: The interface to visualized in 2D the 
		model's elements (not explained here)</li>
	<li><em>CAADegHistogramChartWindowCmd</em>: The state command to create a model's 
		tab class instance thanks to the <em>CAAISysDocumentChartWindow</em>.</li>
</ul>
<p>There are respectively located in the CAAAfrGeoWindows.m, CAASysGeoModelInf.m, 
CAAVisGeoModelInt.m and CAADegGeoCommands.m modules of the CAAApplicationFrame.edu, 
CAASystem.edu, CAAVisualization.edu and CAADialogEngine.edu frameworks:</p>
<p><code>InstallRootFolder\CAADoc\CAAxxx.edu\CAAyyy.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">6</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the Histogram Chart tab, there are two steps which can be divided 
in sub-steps:</p>
<ol>
	<li><strong>Creating the Model's Tab class</strong>
		<table>
			<tr>
				<th>#</th>
				<th>Steps</th>
			</tr>
			<tr>
				<td>1</td>
				<td><a href="#Step1">Creating the Histogram Chart Tab class</a></td>
			</tr>
			<tr>
				<td>2</td>
				<td><a href="#Step2">Providing the dialog object behavior</a></td>
			</tr>
			<tr>
				<td>3</td>
				<td><a href="#Step3">Providing the MDI model behavior</a></td>
			</tr>
			<tr>
				<td>4</td>
				<td><a href="#Step4">Duplicating the tab</a></td>
			</tr>
			<tr>
				<td>5</td>
				<td><a href="#Step5">Deleting the tab</a></td>
			</tr>
		</table>
	</li>
	<li><strong>Creating Model's Tab class instances</strong>
		<table>
			<tr>
				<th>#</th>
				<th>Steps</th>
			</tr>
			<tr>
				<td>6</td>
				<td>
				<a href="#Step6">Creating the CAAISysDocumentChartWindow Interface</a></td>
			</tr>
			<tr>
				<td>7</td>
				<td>
				<a href="#Step7">
				Implementing the CAAISysDocumentChartWindow Interface</a></td>
			</tr>
			<tr>
				<td>8</td>
				<td><a href="#Step8">Using 
				the CAAISysDocumentChartWindow Interface</a></td>
			</tr>
		</table>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Histogram Chart Tab Class</h3>
<p>This model tab includes one viewer. The class for this tab is <em>CAAAfrHistogramChartWindow</em>, 
whose header file is as follows.</p>
<pre class="code">...
class ExportedByCAAAfrGeoWindows CAAAfrHistogramChartWindow: public CATFrmWindow
{
  public:
    CAAAfrHistogramChartWindow(const CATString &amp; iName, CATFrmEditor * iEditor=NULL);
    virtual ~CAAAfrHistogramChartWindow();
    void <strong>Build</strong>();

    virtual CATFrmWindow * <strong>DuplicateWindow</strong>();

    virtual void <strong>DeleteWindow</strong>();
    ...
  private:

    CATNavigation2DViewer * _pViewer ;
    CATPathElement        * _pRootObjectPath ;

};</pre>
<p><em>CAAAfrHistogramChartWindow</em> derives from the <em>CATFrmWindow</em> class. 
This base class manages the integration of the tab in the application layout. 
The <em>CAAAfrHistogramChartWindow</em> class has:</p>
<ul>
	<li>A constructor and a <a href="#Step5">destructor</a></li>
	<li>A <code><a href="#Step4">DuplicateWindow</a></code> method</li>
	<li>A <code><a href="#Step5">DeleteWindow</a></code> to delete or release the 
		specific data of the tab.</li>
	<li>The <code><a href="#Step2">Build</a></code> method, as usual for a 
	Dialog class, creates and arranges the dialog objects, and for a model's tab 
		manages the interactivity.</li>
</ul>
<p>This class keeps in data member the viewer and the root of the model to display.
</p>
<p>The constructor class is simple:</p>
<pre class="code">CAAAfrHistogramChartWindow :: CAAAfrHistogramChartWindow 
                         ( const CATString &amp;iName, CATFrmEditor * iEditor )
                   : <strong>CATFrmWindow</strong>(iName,iEditor), _pViewer(NULL),_pRootObjectPath(NULL)
{
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Providing the Dialog Object Behavior</h3>
<p>The dialog object behavior consists in:</p>
<ul>
	<li><a href="#S21">Instantiating the viewer to display</a></li>
	<li><a href="#S22">Arranging the viewer in the tab</a></li>
	<li><a href="#S23">Setting the current viewer</a></li>
</ul>
<p>The <code>Build</code> method creates the viewer, arranges it in the tab and 
sets it the current viewer.</p>
<ol>
	<li><a name="S21"></a>Instantiating the viewer to display
		<pre class="code">void CAAAfrHistogramChartWindow :: Build() 
{
   CATDlgFrame * pFrameWindow = <strong>GetViewerFrame</strong>() ;

   CATString ViewerName = &quot;HistogramChar2DViewer&quot; ;
   int width  = 200 ;
   int height = 200 ;
   CATDlgStyle DlgStyle = CATDlgFraNoTitle | CATDlgFraNoFrame ;
   _pViewer = new <strong>CATNavigation2DViewer</strong>(pFrameWindow,ViewerName,
                                               DlgStyle,width,height) ;
   _pViewer-&gt;SetBackgroundColor(0.7f,0.7f,0.7f);
   _pViewer-&gt;SetGraduatedBackground(0);
...</pre>
		<p><code>_pViewer</code> is a <em>CATNavigation2DViewer</em> class instance:</p>
		<ul>
			<li>Its parent, <code>pFrameWindow</code> , is a <em>CATDlgFrame</em> 
				object created by the <em>CATFrmWindow</em> class [<a href="#References">2</a>].
			</li>
			<li>Its size (<code>width</code> and <code>height</code>) is given in 
				pixels. </li>
			<li>Its background color is white and not gratuaded. (<code>SetBackgroundColor</code> 
				and <code>SetGraduatedBackground</code> are <em>CATViewer</em> methods)</li>
		</ul>
	</li>
	<li><a name="S22"></a>Arranging the viewer in the tab<pre class="code">...
FrameWindow-&gt;<strong>Attach4Sides</strong>(Frame);
...</pre>
		<p>The <code>Attach4Sides</code> method attaches <code>_pViewer</code> to 
		the four sides of the <code>pFrameWindow</code> frame.</p>
	</li>
	<li><a name="S23"></a>Setting the current viewer
		<pre class="code">...
  _pViewer-&gt;<strong>ReframeOn</strong>(0.f,300.f,-20.f,300.f);
  <strong>SetViewer</strong>(_pViewer);
...</pre>
		<p>The <code>Reframe</code> method ensures that the whole contents of
		<code>_pViewer</code> is displayed, while the <code>SetViewer</code> method 
		sets <code>_pViewer</code> as the current viewer. We have now a nice tab, 
		but few interactive mechanisms are available. Let's assign them now.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Providing the MDI Model Behavior</h3>
<p>The MDI (Multiple Document Interface) behavior consists in:</p>
<ul>
	<li><a href="#S31">Retrieving the visualization manager and the model root object</a>
	</li>
	<li><a href="#S32">Requesting the model to create its graphics representation 
		and attaching them to the visualization manager</a></li>
	<li><a href="#S33">Managing the links between these objects and all the other 
		objects enabling interactivity.</a></li>
</ul>
<ol>
	<li><a name="S31"></a>Retrieving the visualization manager and the model root 
		object
		<p>Still in the <code>Build</code> method, let's now the unique visualization 
		manager be aware of the model to display, under which viewpoints, and with 
		which tools, that is, which interfaces should be queried onto the model 
		objects to make them display.</p>
		<pre class="code">...
  CATFrmEditor * pEditor = <strong>GetEditor</strong>();
  CATVisManager * pVisuManager = CATVisManager::<strong>GetVisManager</strong>();

  if ( (NULL != pEditor ) &amp;&amp;

      ( NULL ! = pVisuManager) )	
      { CATBaseUnknown * pRootObject=  NULL
      ;
         CATPathElement path = pEditor -&gt;<strong>GetUIActiveObject</strong> (); _pRootObjectPath =
      new
CATPathElement(path);
...</pre>
		<p><code>pEditor</code>, a pointer to the editor, is the argument of the 
		tab constructor kept by the <em>CATFrmWindow</em> class. Then the visualization 
		manager is retrieved, and the root object. In this use case, the root object 
		is the current UI active object. A local <em>CATPathElement ,</em> <code>
		_pRootObjectPath</code>, is created to keep &quot;a pointer&quot; on the 
		root object. This path will be released in the destructor.</p>
	</li>
	<li><a name="S32"></a>Requesting the model to create its graphics representation 
		and attaching them to the visualization manager
		<pre class="code">...
    if ( NULL != _pRootObjectPath )      
    {    	    
         CATCommand * pCommandSelector = (CATCommand*) pEditor-&gt;<strong>GetCommandSelector</strong>();

         list&lt;IID&gt; ListIVisu;
         IID visu = IID_<strong>CAAIVisHistogramChartVisu</strong>;
         ListIVisu.fastadd(&amp;visu);

         CATViewpoint  * pViewPoint = NULL ;
         pViewPoint = (CATViewpoint*) &amp;(_pViewer-&gt;<strong>GetMain2DViewpoint</strong>());

         pVisuManager-&gt;<strong>AttachTo</strong>(_pRootObjectPath,pViewPoint,ListIVisu,pCommandSelector);
...</pre>
		<p>The command selector, that is, the command that stands at the top of 
		the command tree, is retrieved. This selector will be the father of a
		<em>CATSelector</em> class instance created by the <code>AttachTo</code> 
		[<a href="#References">4</a>]. The manipulators attached to the graphic 
		representation of the model will be linked to this <em>CATSelector</em> 
		enabling the selection and the pre-selection in the viewer.</p>
		<p>The list with the interface implemented by the objects of the models 
		is set up.</p>
		<p>The main 2D viewpoint of the viewer is retrieved and attached to the 
		visualization manager along with the model's root object, the list of interfaces 
		to use, and the command selector.</p>
	</li>
	<li><a name="S33"></a>Managing the links between these objects and all the other 
		objects enabling interactivity
		<pre class="code">...
         CATPSO * pPSO = pEditor-&gt;<strong>GetPSO</strong>() ;   
         pVisuManager-&gt;<strong>AttachPSOTo</strong>( pPSO,pViewPoint);

         CATHSO * pHSO = pEditor-&gt;<strong>GetHSO</strong>() ; 
         pVisuManager-&gt;<strong>AttachHSOTo</strong>( pHSO,pViewPoint);

         CATISO * pISO = pEditor-&gt;<strong>GetISO</strong>()  ;  
         pISO-&gt;<strong>AddViewer</strong>(_pViewer);
...</pre>
		<p>This piece of code retrieves the Preselected Set of Objects (PSO) and 
		the Highlighted Set of Objects (HSO) from the editor, and requests the visualization 
		controller to attach the viewpoint to the PSO and to the HSO. Now, when 
		the end user moves the mouse above a representation in a viewer, the path 
		element corresponding to this representation is put in the PSO, is highlighted 
		and put in the HSO.</p>
		<p>The Interactive Set of Objects (ISO) is also retrieved. These objects 
		are those which don't belong to the model, but that are so handy to manipulate 
		representations in viewers, such as handles to move or deform them. The 
		ISO now knows the viewer.</p>
		<p>The tab <code>Build</code> method is now complete.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Duplicating the Tab</h3>
<p>This is done thanks to the <code>Duplicate</code> method.</p>
<pre class="code">...
CATFrmWindow * CAAAfrHistogramChartWindow :: DuplicateWindow()
{
   CATString NameOfThis = <strong>GetBaseName</strong>().CastToCharPtr() ;
   CAAAfrHistogramChartWindow * pWindowToReturn = NULL ;
   pWindowToReturn  = new <strong>CAAAfrHistogramChartWindow</strong>(NameOfThis,GetEditor() )  ;
   pWindowToReturn -&gt;<strong>Build</strong>();
   pWindowToReturn-&gt;<strong>SetBaseName</strong>(GetBaseName());

   return  pWindowToReturn ;
}
...</pre>
<p>The <code>Duplicate</code> method creates a tab of the same type than the 
current one. This new tab is managed by the editor dedicated to the data model. 
This editor is those kept by the current tab and retrieved by the <code>GetEditor</code> 
method of the <em>CATFrmWindow</em> base class.</p>
<p>The <code>SetBaseName</code> method enables you to manage the tab's title.Refer to the &quot;<a href="#CreateHistogramWindow">Implementing 
the <em>CAAISysDocumentChartWindow</em> interface</a>&quot; section.</p>
<p>
&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Deleting the Tab</h3>
<pre class="code">...
void CAAAfrHistogramChartWindow :: DeleteWindow()
{
   if ((NULL != GetEditor() ) &amp;&amp; (NULL != _pViewer) )
   {       
      CATISO * pISO = NULL ;
      pISO = GetEditor()-&gt;<strong>GetISO</strong>();

      if  (NULL != pISO)   pISO-&gt;<strong>RemoveViewer</strong>(_pViewer);

      CATViewpoint  * pViewPoint = NULL ;
      pViewPoint = (CATViewpoint*) &amp;(_pViewer-&gt;<strong>GetMain2DViewpoint</strong>());

      CATVisManager * pVisuManager = CATVisManager::<strong>GetVisManager</strong>();

      if ( (NULL != pViewPoint) &amp;&amp;  ( NULL != pVisuManager) )
      {
         pVisuManager-&gt;<strong>DetachPSOFrom</strong>(pViewPoint) ;
         pVisuManager-&gt;<strong>DetachHSOFrom</strong>(pViewPoint);
 
         pVisuManager-&gt;<strong>DetachFrom</strong>(_pRootObjectPath,pViewPoint);
      }
   }
   CATFrmWindow::<strong>DeleteWindow</strong>();

}
...</pre>
<p>The tab is deleted thanks to the <code>DeleteWindow</code> method, that removes 
the viewer from the ISO, then retrieves the viewpoint and detaches it from the PSO 
and from the HSO, and that recursively calls the <code>DeleteWindow</code> method 
of the base class. This last line is mandatory to ensure the complete destruction 
of the tab in the layout.</p>
<p>The destructor simply deletes the path to the root object. No need to delete 
the viewer, since as any dialog object, they will be automatically deleted when 
the tab itself will be deleted.</p>
<pre class="code">...
CAAAfrHistogramChartWindow :: ~CAAAfrHistogramChartWindow ()
{
   if ( NULL != _pRootObjectPath) _pRootObjectPath-&gt;Release() ;
   _pRootObjectPath = NULL ;
}
...</pre>
<p>The model's tab class is now complete. You will learn how to create instances.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating the CAAISysDocumentChartWindow Interface</h3>
<p>This new interface [<a href="#References">6</a>] has only one method, the
<code>CreateHistogramWindow</code> method.</p>
<pre class="code">...
class ExportedByCAASysGeoModelInf CAAISysDocumentChartWindow : public CATBaseUnknown
{
  CATDeclareInterface;

  public :
  virtual HRESULT <strong>CreateHistogramWindow</strong>() = 0;

};
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Implementing the CAAISysDocumentChartWindow Interface</h3>
<p>This interface is implemented on the CAAGeometry model. The last argument of 
the <code>CATImplementClass</code> macro is the late type of the model. It is
<code>CAAGeom</code> for the CAAGeometry model.</p>
<pre class="code">...
#include &quot;TIE_CAAISysDocumentChartWindow.h&quot;              
TIE_CAAISysDocumentChartWindow(CAAEAfrDocumentChartWindow); 

CATImplementClass(CAAEAfrDocumentChartWindow, DataExtension, CATBaseUnknown,<strong>CAAGeom</strong>);
...</pre>
<p>The constructor and the destructor are empty.</p>
<pre class="code">...
CAAEAfrDocumentChartWindow::CAAEAfrDocumentChartWindow(){}

CAAEAfrDocumentChartWindow::~CAAEAfrDocumentChartWindow(){}
...</pre>
<p>The <code><a name="CreateHistogramWindow">CreateHistogramWindow</a></code> method 
is similar to the <a href="#Step4">Duplicate</a> method of the <em>CAAAfrHistogramChartWindow</em> 
class.</p>
<pre class="code">...
HRESULT CAAEAfrDocumentChartWindow::CreateHistogramWindow()  
{
   // 1- Creating the new instance
   CATUnicodeString <strong>WindowName</strong> = CATMsgCatalog::BuildMessage(&quot;CAAAfrHistogramChartWindow&quot;,
                                        &quot;BaseName&quot;,NULL,0,&quot;Histogram Chart&quot;);
   CATString WindowBaseName = WindowName.ConvertToChar();
   
   CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
   if (NULL != pEditor)
   {
      CAAAfrHistogramChartWindow * pWindow = new <strong>CAAAfrHistogramChartWindow</strong>(WindowBaseName,pEditor);
      pWindow-&gt;<strong>Build</strong>();
      
      //2- Managing the Tab's Title
      CATUnicodeString BaseName = pWindow-&gt;<strong>GetBaseName</strong>();
      pWindow-&gt;<strong>SetBaseName</strong>(BaseName);

      //3- Managing the current tab
      CATFrmLayout *currentLayout = CATFrmLayout::<strong>GetCurrentLayout</strong>();
      currentLayout-&gt;<strong>SetCurrentWindow</strong>
(pWindow);
   }
   return rc;
}
...</pre>
<p>This method is divided in three parts:</p>
<ol>
	<li>Create a <em>CAAAfrHistogramChartWindow</em> class instance
		<p>The first identifier is a default name extracted from the CAAAfrHistogramChartWindow.CATNls 
		file. In most cases, this identifier is the complete path of the model.</p>
		<p>In the CNext\Resources\msgcatalog directory of the CAAApplicationFrame.edu 
		framework you will find the CAAAfrHistogramChartWindow.CATNls file which 
		contains the following line:</p>
		<pre class="code">...
BaseName = &quot;Model Histogram Chart&quot;;
...</pre>
	</li>
	<li>
		<p>The <code>GetBaseName</code> method retrieves the name of the model without 
		its complete path. The <code>SetBaseName</code> method enables to modify 
		the title of the already existing tabs. Refer to the <a href="#Step4">
		Duplicate</a> method.</p>
	</li>
	<li>
		<p>Set the current tab as current in the application. In other words, 
		the new tab has the focus. The tabs management is the role of the 
		unique <em>CATFrmLayout</em> class instance [<a href="#References">2</a>].</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Using the CAAISysDocumentChartWindow Interface</h3>
<p>In the <em>CAADegHistogramChartWindowCmd</em> state command [<a href="#References">3</a>], 
there is a transition with the <code>CreateHistogramChartWindow</code> action method:</p>
<pre class="code">...
CATBoolean CAADegHistogramChartWindowCmd::CreateHistogramChartWindow(void *iDummy)
{
  CATFrmEditor * pEditor = <strong>GetEditor</strong>();
     if ( NULL != pEditor )
     {
        <strong>CAAISysDocumentChartWindow</strong> * pIDocumentChartWnd = NULL;    
        <strong>CATPathElement</strong> UIPath = pEditor-&gt;<strong>GetUIActiveObject</strong>();
        pIDocumentChartWnd = (CAAISysDocumentChartWindow*) UIPath.<strong>FindElement</strong>(IID_CAAISysDocumentChartWindow);
					   
        if (NULL != pIDocumentChartWnd)
        {
           pIDocumentChartWnd-&gt;<strong>CreateHistogramWindow</strong>(); 
           ... 
} 
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Models of the same type are always displayed in similar tabs. You can instantiate 
the <em>CATFrmGraphAnd3DWindow</em> class and the <em>CATFrmGraphAnd2DWindow</em> 
class provided by CAA, or create your own tab which should derive from the
<em>CATFrmWindow</em> base class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcSampleCustomWindow2.htm">Creating a Model's Tab 
		- Part 2</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrTaLayoutV5.htm">Understanding the Wintop Frame Layout</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegUcSampleDialogWithAgent2.htm">
		Associating a Dialog Box with a Dialog Agent - Part 2</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAAfrTaCommandModel.htm">Understanding the Wintop Frame Command 
		Model</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Oct 2013]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
