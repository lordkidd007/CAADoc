<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Model's Tab - Part 2</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Model's Tab - Part 2</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a new tab to display a model. It 
		explains more precisely the specificity of a multi-viewer tab. A first 
		article, &quot;Creating a Model's Tab - Part 1&quot;&nbsp; [<a href="#References">1</a>], enables you to understand how to 
		launch a model's tab from a command.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAAfrCustomWindow Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrCustomWindow Do</a></li>
					<li><a href="#How">How to Launch CAAAfrCustomWindow</a></li>
					<li><a href="#Where">Where to Find the CAAAfrCustomWindow Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create a tab with several viewers 
for a model of a given type [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrCustomWindow Use Case</h2>
<p>CAAAfrCustomWindow is a use case of the CAAApplicationFrame.edu framework that 
illustrates the AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrCustomWindow Do</h3>
<p>The CAAAfrCustomWindow use case creates a tab for CAAGeometry models. This 
new tab is launched from the <kbd>Custom Tab</kbd> command.</p>
<table>
     <caption>The &quot;Custom Tab&quot; command in the Tools section of action bar</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAAfrWndCustoTab.jpg" width="459" height="193"/></td>
	</tr>
</table>
<p></p>
<table>
<caption><a name="Fig.1"></a>The CAAGeometry Data Custom Tab</caption>
<tr>
<td>
<img alt="" src="images/CAAAfrWndCustomWindow2.jpg" width="797" height="532"/></td>
</tr>
</table>
<p>The elements are visualized in three viewers, with one viewer active at the time. 
The action bar appears in the active viewer, here it's the top left frame 
&quot;Viewer3Dnum1&quot;.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrCustomWindow</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">5</a>] for a detailed description of how this use case should 
be launched. For the specific scenario :</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
    <li>Click on <kbd>3D</kbd>, the west quadrant of the compass.</li>
    <li>In the <kbd>3D Modeling apps</kbd> section, select <kbd>CAA: Create Geom</kbd> app.</li>
	<li>In the action bar, activate <kbd>Tools</kbd> section</li>
	<li>Select <kbd>Custom Tab</kbd> command</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAAfrCustomWindow Code</h3>
<p>The CAAAfrCustomWindow use case is made up of a single class named CAAAfrCustomWindow 
located in the CAAAfrGeoWindows.m module of the CAAApplicationFrame.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeoWindows.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">6</a>] is the folder 
where the API CD-ROM is installed. It includes the CAAAfrCustomWindow.h header file 
in the PrivateInterfaces directory of the CAAApplicationFrame.edu framework and 
the CAAAfrCustomWindow.cpp source file in the src directory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create the custom tab, there are five steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create the custom tab class</a></td>
		<td>LocalInterfaces and src</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Provide the dialog object behavior</a></td>
		<td><code>Build</code> method</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Provide the MDI model tab behavior</a></td>
		<td><code>Build</code> method</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Duplicate the tab</a></td>
		<td><code>Duplicate</code> method</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Delete the tab</a></td>
		<td><code>DeleteWindow</code> and Destructor</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Custom Tab Class</h3>
<p>This tab includes two 3D viewers of different sizes located in the upper part 
of the tab, and a 2D viewer located in the lower part of the tab. The class 
for this tab is <em>CAAAfrCustomWindow</em>, whose header file is as follows.</p>
<pre class="code">...
class ExportedByCAAAfrGeoWindows CAAAfrCustomWindow: public CATFrmWindow
{
  public:
    CAAAfrCustomWindow(const CATString &amp; iName, CATFrmEditor * iEditor=NULL);
    virtual ~CAAAfrCustomWindow();
    
    virtual CATFrmWindow * <strong>DuplicateWindow</strong>();
    virtual void <strong>DeleteWindow</strong>();
    
    void <strong>Build</strong>();
    
    void <strong>GetViewers</strong>(CATNavigation3DViewer ** oV1,
                       CATNavigation3DViewer ** oV2, 
                       CATNavigation2DViewer ** oV3);
   ...
  private:
    CATNavigation3DViewer * _pViewer1;
    CATNavigation3DViewer * _pViewer2;
    CATNavigation2DViewer * _pViewer3;
    CATPathElement        * _pRootObjectPath;
};</pre>
<p><em>CAAAfrCustomWindow</em> has</p>
<ul>
	<li>a constructor and a destructor</li>
	<li>a <code>DuplicateWindow</code> method that has become obsolete and 
	should be deprecated in future versions.</li>
	<li>a <code>DeleteWindow</code> method called when the end user closes the 
	tab 
		or closes the model</li>
	<li>a <code>Build</code> method as all the Dialog boxes</li>
	<li>a <code>GetViewers</code> method to retrieve pointers to its three viewers</li>
	<li>Its data members are the three navigation viewers and the root model to 
		display.</li>
</ul>
<p>The constructor class is simple.</p>
<pre class="code">CAAAfrCustomWindow::CAAAfrCustomWindow(const CATString &amp; iName,
                                       CATFrmEditor    * iEditor)
                  : <strong>CATFrmWindow</strong>(iName, iEditor),
                    _pViewer1(NULL), _pViewer2(NULL), _pViewer3(NULL),
                    _pRootObjectPath(NULL),
{
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Providing the Dialog Object Behavior</h3>
<p>The dialog object behavior consists in:</p>
<ul>
	<li><a href="#S21">Instantiating the different viewers to display</a></li>
	<li><a href="#S22">Arranging these viewers in the model tab</a></li>
	<li><a href="#S23">Setting the current viewer</a></li>
</ul>
<p>The constructor creates the viewers, arranges them in the tab and sets one 
of them the current viewer.</p>
<ol>
	<li><a name="S21"></a>Instantiating the different viewers to display
		<pre class="code">void CAAAfrCustomWindow::Build()
{
  int width, height;
  CATString  ViewerName; 

  CATDlgFrame * FrameWindow = <strong>GetViewerFrame</strong>() ;
  CATString FrameName = &quot;FrameName&quot;;
  CATDlgFrame * Frame = new CATDlgFrame(FrameWindow, FrameName,
                                        CATDlgGridLayout|CATDlgFraNoFrame);

  ViewerName = &quot;Viewer3Dnum1&quot;;
  width = 200 ; height = 200;
  _pViewer1 = new CATNavigation3DViewer(Frame, ViewerName, width, height);
    
  ViewerName = &quot;Viewer3Dnum2&quot; ;
  width = 200 ; height = 300 ;
  _pViewer2 = new CATNavigation3DViewer(Frame, ViewerName, width, height);

  ViewerName = &quot;Viewer2D&quot; ;
  width = 200 ; height = 500 ;
  _pViewer3 = new CATNavigation2DViewer(Frame, ViewerName, width, height);
...</pre>
		<p>The viewer sizes are given in pixels. The MDI application frame is the parent of the viewers. This frame has been created to 
		be inserted between the frame created by the <em>CATFrmWindow</em> (
		<code>FrameWindow</code> ) and the viewers. It allows us to arrange the 
		viewers with the grid layout and not with the tabulation layout [<a href="#References">3</a>] 
		which is a little bit more complex. The <code>FrameWindow</code> frame has 
		not been created with the <code>CATDlgGridLayout</code> style [<a href="#References">1</a>].
		</p>
	</li>
	<li><a name="S22"></a>Arranging these viewers in the tab
		<pre class="code">...
FrameWindow-&gt;Attach4Sides(Frame);
  _pViewer1-&gt;SetGridConstraints(0,0,1,1,CATGRID_4SIDES);
  _pViewer2-&gt;SetGridConstraints(0,1,1,1,CATGRID_4SIDES);
  _pViewer3-&gt;SetGridConstraints(1,0,2,1,CATGRID_4SIDES);
  Frame-&gt;SetGridRowResizable(0,1);
  Frame-&gt;SetGridRowResizable(1,1);
  Frame-&gt;SetGridColumnResizable(0,1);
  Frame-&gt;SetGridColumnResizable(1,1);
...</pre>
		<p>The <code>Attach4Sides</code> method attaches the <code>Frame</code> 
		object to the four sides of the <code>FrameWindow</code> object. It is a 
		method used by the tabulation layout.</p>
		<p>Then the <code>SetGridConstraints</code> method applied to <code>_Viewer1</code> 
		is located on grid cells beginning with the cell at the intersection of 
		the row 0 and column 0, and expands from left to right on 1 row, and from 
		top to bottom on 1 column. <code>CATGRID_4SIDES</code> means that the viewer 
		occupies the whole cell space. Row 0 and 1, as well as columns 0 and 1, 
		as first argument of the <code>SetGridxxResizable</code> methods, are declared 
		to be resizable since the second argument is 1 (on the opposite, 0 means 
		non resizable.)</p>
		<p>
		<img alt="Custom Window" height="219" src="images/CAAAfrWndCustomWindow.gif" width="323"/></p>
	</li>
	<li><a name="S23"></a>Setting the current viewer
		<pre class="code">...
  _pViewer1-&gt;Reframe();
  SetViewer(_pViewer1);
...</pre>
		<p>The <code>Reframe</code> method ensures that the whole contents of
		<code>_pViewer1</code> is displayed, while the <code>SetViewer</code> method 
		sets <code>_pViewer1</code> as the current viewer. You will retrieve this 
		viewer with the <code>GetViewer</code> method of the <em>CATFrmWindow</em> 
		class.</p>
		<p>We have now a nice window tab, but few interactive mechanisms are available. 
		Let's assign them now.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Providing the MDI Model Behavior</h3>
<p>The MDI (Multiple Document Interface) model behavior consists in:</p>
<ul>
	<li><a href="#S31">Retrieving the visualization manager and the model root object</a>
	</li>
	<li><a href="#S32">Requesting the model to create its graphics representation(s) 
		and attaching them to the visualization manager</a></li>
	<li><a href="#S33">Managing the links between these objects and all the other 
		objects enabling interactivity.</a></li>
</ul>
<ol>
	<li><a name="S31"></a>Retrieving the visualization manager and the root object
		<p>Still in the <code>Build</code> method, let's now the unique visualization 
		manager be aware of the model to display, under which viewpoints. The
		<code>GetEditor</code> method of the <em>CATFrmWindow</em> enables you to 
		retrieve the editor of the constructor class.</p>
		<pre class="code">...
  CATFrmEditor * pEditor = <strong>GetEditor</strong>();
  CATVisManager * pVisuManager = CATVisManager::<strong>GetVisManager</strong>();

  // Here is the code to retrieve the root model, pRootObject
...</pre>
		<p>In this article the code to retrieve the model to display is not explained 
		once it is not useful for a real model.</p>
	</li>
	<li><a name="S32"></a>Requesting the model to create its graphics representation(s) 
		and attaching them to the visualization manager
		<pre class="code">...
  if ( (NULL != pEditor  ) &amp;&amp; (NULL != pRootObject ) &amp;&amp; (NULL != pVisuManager) )
    { 
      _pRootObjectPath = new CATPathElement(pRootObject);

      CATCommand * CommandSelector = (CATCommand*) pEditor-&gt;<strong>GetCommandSelector</strong>();

      list&lt;IID&gt; ListIVisu3d, ListIVisu2d;
      IID visu3d = IID_CATI3DGeoVisu;
      IID visu2d = IID_CATI2DGeoVisu;
      ListIVisu3d.fastadd(&amp;visu3d);
      ListIVisu2d.fastadd(&amp;visu2d);
     
      CATViewpoint * pViewPoint1 = NULL;
      CATViewpoint * pViewPoint2 = NULL;
      CATViewpoint * pViewPoint3 = NULL;

      pViewPoint1 = (CATViewpoint*) &amp;(_pViewer1-&gt;GetMain3DViewpoint());
      pVisuManager-&gt;<strong>AttachTo</strong>(_pRootObjectPath,pViewPoint1,ListIVisu3d,CommandSelector);

      pViewPoint2 = (CATViewpoint*) &amp;(_pViewer2-&gt;GetMain3DViewpoint());
      pVisuManager-&gt;AttachTo(_pRootObjectPath,pViewPoint2,ListIVisu3d,CommandSelector);

      pViewPoint3 = (CATViewpoint*) &amp;(_pViewer3-&gt;GetMain2DViewpoint());
      pVisuManager-&gt;AttachTo(_pRootObjectPath,pViewPoint3,ListIVisu2d,CommandSelector);
...</pre>
		<p>If the editor, the visualization manager, and the root object are successfully 
		retrieved, this root object is then turned to a <em>CATPathElement</em>, 
		the command selector, that is, the command that stands at the top of the 
		command tree [<a href="#References">4</a>], is retrieved, and the lists 
		of 2D and 3D interfaces implemented by the objects of the models are set 
		up. Then for each viewer, its main viewpoint is retrieved and attached to 
		the visualization manager along with the root object, the list of interfaces 
		to use, and the command selector.</p>
	</li>
	<li><a name="S33"></a>Managing the links between these objects and all the other 
		objects enabling interactivity
		<pre class="code">...
      CATPSO * pPSO = pEditor-&gt;<strong>GetPSO</strong>() ;  // Preselected Set Objects 
      CATHSO * pHSO = pEditor-&gt;<strong>GetHSO</strong>() ;  // Highlighted Set Objects 

      pVisuManager-&gt;<strong>AttachPSOTo</strong>(pPSO, pViewPoint1);
      pVisuManager-&gt;AttachPSOTo(pPSO, pViewPoint2);
      pVisuManager-&gt;AttachPSOTo(pPSO, pViewPoint3);
      pVisuManager-&gt;<strong>AttachHSOTo</strong>(pHSO, pViewPoint1);
      pVisuManager-&gt;AttachHSOTo(pHSO, pViewPoint2);
      pVisuManager-&gt;AttachHSOTo(pHSO, pViewPoint3);

      CATISO * pISO = pEditor-&gt;<strong>GetISO</strong>(); 
      pISO-&gt;<strong>AddViewer</strong>(_pViewer1);
      pISO-&gt;AddViewer(_pViewer2);
      pISO-&gt;AddViewer(_pViewer3);
    }
  }
}
...</pre>
		<p>This piece of code retrieves the Preselected Set of Objects (PSO) and 
		the Highlighted Set of Objects (HSO) from the editor, and requests the visualization 
		controller to attach the appropriate viewpoints to the PSO and to the HSO. 
		Now, when the end user moves the mouse above a representation in a viewer, 
		the path element corresponding to this representation is put in the PSO, 
		is highlighted and put in the HSO.</p>
		<p>The Interactive Set of Objects (ISO) is also retrieved. These objects 
		are those which don't belong to the model, but that are so handy to manipulate 
		representations in viewers, such as handles to move or deform them. The 
		ISO now knows the three viewers.</p>
		<p>The tab <code>Build</code> method is now complete.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Duplicating a Model Tab</h3>
<p>This is done thanks to the Duplicate method.</p>
<pre class="code">...
CATFrmWindow * CAAAfrCustomWindow :: DuplicateWindow()
{
  CATString NameOfThis = GetBaseName().CastToCharPtr();
  CAAAfrCustomWindow * pWindowToReturn = NULL;
  pWindowToReturn = new <strong>CAAAfrCustomWindow</strong>(NameOfThis,GetEditor());
  pWindowToReturn-&gt;<strong>Build</strong>();
  
  pWindowToReturn-&gt;<strong>SetBaseName</strong>(GetBaseName());

  float r,v,b ;
  if (NULL != _pViewer1) _pViewer1-&gt;<strong>GetBackgroundColor</strong>(&amp;r, &amp;v, &amp;b);

  CATNavigation3DViewer * pV1 = NULL;
  CATNavigation3DViewer * pV2 = NULL;
  CATNavigation2DViewer * pV3 = NULL;

  pWindowToReturn-&gt;<strong>GetViewers</strong>(&amp;pV1, &amp;pV2, &amp;pV3);
  if (NULL != pV1) pV1-&gt;<strong>SetBackgroundColor</strong>(r, v, b);

  return  pWindowToReturn;
}
...</pre>
<p>The <code>Duplicate</code> method is now complete. It performs the following:</p>
<ul>
	<li>Creates a tab of the same type than the current one</li>
	<li>Sets the same name than the current one. The <code>SetBaseName</code> 
	method modifies the name of the first tab if only one exists. At the base name, 
		an index is added [<a href="#References">2</a>].</li>
	<li>Retrieves the background color of the first viewer as a RGB triplet</li>
	<li>Retrieves the created tab viewers</li>
	<li>Sets the retrieved background color to the first viewer of the created 
	tab</li>
</ul>
<p>This method uses the <code>GetViewers</code> method below:</p>
<pre class="code">void CAAAfrCustomWindow :: GetViewers(CATNavigation3DViewer ** oV1,
                                      CATNavigation3DViewer ** oV2,
                                      CATNavigation2DViewer ** oV3)
{
  *oV1 = _pViewer1;
  *oV2 = _pViewer2;
  *oV3 = _pViewer3;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Deleting the Tab</h3>
<pre class="code">...
void CAAAfrCustomWindow::DeleteWindow()
{
  if ( (NULL != GetEditor()) &amp;&amp; (NULL != pViewer1) &amp;&amp;
  (NULL != pViewer2) &amp;&amp; (NULL != pViewer3) )
  {
    // Detaches Viewers from the ISO
    CATISO *pISO = NULL;
    pISO = <strong>GetEditor</strong>()-&gt;GetISO();
    if (NULL != pISO) pISO-&gt;<strong>RemoveViewer</strong>(_pViewer1);
    if (NULL != pISO) pISO-&gt;RemoveViewer(_pViewer2);
    if (NULL != pISO) pISO-&gt;RemoveViewer(_pViewer3);

    // Retrieves Viewpoints
    CATViewpoint * pViewpoint1 = NULL;
    CATViewpoint * pViewpoint2 = NULL;
    CATViewpoint * pViewpoint3 = NULL;
    pViewpoint1 = (CATViewPoint *) &amp;(_pViewer1-&gt;GetMain3DViewpoint());
    pViewpoint2 = (CATViewPoint *) &amp;(_pViewer2-&gt;GetMain3DViewpoint());
    pViewpoint3 = (CATViewPoint *) &amp;(_pViewer3-&gt;GetMain2DViewpoint());

    // Retrieves the unique visu manager
    CATVisManager *pVisuManager = <strong>CATVisManager::GetVisManager</strong>();
    if ( (NULL != pViewpoint1) &amp;&amp;
         (NULL != pViewpoint2) &amp;&amp;
         (NULL != pViewpoint3) &amp;&amp; (NULL != pVisuManager) )
    {
      // Detaches Viewpoints from PSO and HSO
      pVisuManager-&gt;<strong>DetachPSOFrom</strong>(pViewpoint1);
      pVisuManager-&gt;DetachPSOFrom(pViewpoint2);
      pVisuManager-&gt;DetachPSOFrom(pViewpoint3);
      pVisuManager-&gt;<strong>DetachHSOFrom</strong>(pViewpoint1);
      pVisuManager-&gt;DetachHSOFrom(pViewpoint2);
      pVisuManager-&gt;DetachHSOFrom(pViewpoint3);

      // Detaches Viewpoints from the visu manager
      pVisuManager-&gt;<strong>DetachFrom</strong>(_pRootObjectPath, pViewpoint1);
      pVisuManager-&gt;DetachFrom(_pRootObjectPath, pViewpoint2);
      pVisuManager-&gt;DetachFrom(_pRootObjectPath, pViewpoint3);
    }
  }
  <strong>CATFrmWindow::DeleteWindow</strong>();
}

CAAAfrCustomWindow::~CAAAfrCustomWindow()
{
  if (NULL != _pRootObjectPath) delete _pRootObjectPath;
  _pRootObjectPath = NULL;
}
...</pre>
<p>The tab is deleted thanks to the <code>DeleteWindow</code> method, that removes 
the viewers from the ISO, then retrieves their viewpoints and detaches them from 
the PSO and from the HSO, and that recursively calls the <code>DeleteWindow</code> 
method of the base class. The destructor simply deletes the path to the root 
object. No need to delete the viewers, since as any dialog object, they will be 
automatically deleted when the tab itself will be deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains the structure of a model's tab class:</p>
<ul>
	<li>A <code>Build</code> method
		<ul>
			<li>To create and arrange the viewers in the tab</li>
			<li>To attach the root's model and the Interactive Set Objects to the 
				command tree.</li>
		</ul>
	</li>
	<li>A <code>DuplicateWindow</code> method to create a new instance from an existing 
		one</li>
	<li>A <code>DeleteWindow</code> method to detach the root's model and the Interactive 
		Set Objects from the command tree.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAfrUcSampleCustomWindow1.htm">Creating a Model's Tab 
		- Part 1</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAAfrTaLayoutV5.htm">Understanding the Wintop Frame Layout</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="../CAADlgDialog/CAADlgTaObjectLayout.htm">How to 
		Arrange Dialog Objects</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAAfrTaCommandModel.htm">Understanding the Wintop Frame Command 
		Model</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAAfrUcCAAGeometryOverview.htm">The CAAGeometry Sample</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Mar 2003]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: <strong>4</strong> [Oct 2013]</td>
		<td>Document updated</td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
