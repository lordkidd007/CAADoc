<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Instantiating a User Feature Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Instantiating a User Feature Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to instantiate a User Feature reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMcaUdfInstantiation Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAMcaUdfInstantiation Do</a></li>
					<li><a href="#How">How to Launch CAAMcaUdfInstantiation</a></li>
					<li><a href="#Where">Where to Find the CAAMcaUdfInstantiation 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>With this article you will learn how to instantiate it. An instantiation follows 
a strict process whose depends its success.</p>
<p>Before reading this article, see the technical article about Power Copy and User 
Feature [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMcaUdfInstantiation Use Case</h2>
<p>CAAMcaUdfInstantiation is a use case of the CAARepTemplate.edu framework that 
illustrates CATTemplateInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMcaUdfInstantiation Do</h3>
<p>In the CAAMcaUserFeature_CAAUdfLoft 3D Shape depicted in [<a href="#Fig1">Fig. 
1</a>] we have a User Feature reference <strong><code>CAAUserFeatureSample</code></strong> 
created by the &quot;Creating a User Feature Reference&quot; use case [<a href="#References">1</a>]. 
It is a loft which needs two inputs (two green points) for each instantiation.</p>
<table>
	<caption><a name="Fig1">Fig.1</a>: The CAAMcaUserFeature_CAAUdfLoft 3D Shape</caption>
	<tr>
		<td><img alt="" src="images/CAAMcaUdfCreation2.jpg"/></td>
	</tr>
</table>
<p>This User Feature reference is a surfacic features set which implements <em>CATIUdfInstantiate</em>. 
Thanks to this interface it is possible to instantiate it.</p>
<p>In this use case we describe two instantiations. These two instantiations are 
set in the CAAMcaUdfInstantiation_CAAUdfModel 3D Shape depicted in [<a href="#Fig2">Fig. 
2</a>]. This representation reference contains at the beginning three points which 
will be used as input (Point.1, Point.2, Point.3).</p>
<table>
	<caption><a name="Fig2">Fig.2</a>: The CAAMcaUdfInstantiation_CAAUdfModel 3D 
	Shape</caption>
	<tr>
		<td><img alt="" src="images/CAAMcaUdfInstantiation1.jpg"/></td>
	</tr>
</table>
<p>The first instantiation is a feature named <code><strong>CAAUserFeatureSample.1</strong></code>. 
For the first input we have chosen the point <code>Point.3</code> and for the second 
the point <code>Point.1</code>.</p>
<p>The second instantiation is a feature where we have explicitly given a name:
<code><strong>TheLoftWithPoint2and3</strong></code>. For the first input we have 
chosen the point <code>Point.3</code>. For the second input we have used the <em>
UseIdenticalName</em> method of <em>CATIUdfInstantiate</em> to valuate it. At last, 
for this new User Feature, we have changed the value of each circle's radius. Each 
radius is a published parameter. (See the step &quot;Publishing Parameters&quot; 
in the &quot;Creating a User Feature Reference&quot; use case [<a href="#References">1</a>].)</p>
<p>The representation reference, with these two instantiations, is saved in CAAMcaUdfInstantiation_CAAUdfModel 
3D shape depicted in [<a href="#Fig3">Fig.3</a>]. In green is the <code>CAAUserFeatureSample.1</code> 
and in pink the <code>TheLoftWithPoint2and3</code>.</p>
<table>
	<caption><a name="Fig3">Fig.3</a>: The CAAMcaUdfInstantiation_CAAUdfModel 3D 
	Shape: the Representation Reference with the Two New Instances of User Features</caption>
	<tr>
		<td><img alt="" src="images/CAAMcaUdfInstantiation2.jpg"/></td>
	</tr>
</table>
<p><strong>The interactive scenario:</strong></p>
<p>Launch CATIA. When the application is ready:</p>
<ul>
	<li><strong>Open CAAMcaUdfInstantiation_CAAUdfModel</strong> representation
		<a href="#Note">(*)</a>.</li>
	<li>On the <strong>Insert</strong> menu, click <strong>Instantiate From Representation</strong>.</li>
	<li><strong>Open CAAMcaUserFeature_CAAUdfLoft</strong> representation
		<a href="#Note">(*)</a>.
		<p>An <strong>Insert Object</strong> dialog box appears:</p>
		<ul>
			<li>Click <strong>Point.3</strong> and <strong>Point.1</strong> in the 
				specifications tree.</li>
			<li>Click <strong>OK</strong>. The new instance appears in the specifications 
				tree.</li>
		</ul>
	</li>
	<li>On the <strong>Insert</strong> menu, click <strong>Instantiate From Representation</strong> 
		again.</li>
	<li><strong>Open CAAMcaUserFeature_CAAUdfLoft</strong> representation
		<a href="#Note">(*)</a>.
		<p>An <strong>Insert Object</strong> dialog box appears:</p>
		<ul>
			<li>Click <strong>Use Identical Name</strong> option to valuate those 
				points automatically whose names correspond to those found in the 
				spec tree within CATIA.</li>
			<li>As you would like to overwrite the point, namely Point1 with your 
				own point, namely Point3 also from the spec tree, click <strong>
				Point.3</strong> in the specifications tree to valuate the first 
				input.</li>
			<li>Enter <strong>The Loft With Point2 and Point3</strong> in the
				<strong>Name</strong> field.</li>
			<li>Click the <strong>Parameters</strong> tab and change in the editor 
				values parameters.</li>
			<li>Click <strong>OK</strong>. The new instance appears in the specifications 
				tree.</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMcaUdfInstantiation</h3>
<p>To launch CAAMcaUdfInstantiation, you will need to set up the build time environment, 
then compile CAAMcaUdfInstantiation along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">3</a>]. To 
launch the use case execute the command:</p>
<p>mkrun -c &quot;<em>CAAMcaUdfInstantiation Repository Server User Password SecurityCtx 
PLMType Model_PLMExternalIDValue Model_version PLMExternalIDValue Version&quot;</em></p>
<p>Where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (Since use case do not modify the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type of the PLM Representation Reference to be opened</td>
	</tr>
	<tr>
		<th>Model_PLMExternalID</th>
		<td>The <code><strong>PLM_ExternalID</strong></code> of the PLM representation 
		reference containing the data where the user feature reference to be instantiated.</td>
	</tr>
	<tr>
		<th>Model_Version</th>
		<td>The <code><strong>V_version</strong></code> of the same PLM Representtaion 
		Reference</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code><strong>PLM_ExternalID</strong></code> of the PLM representation 
		reference containing the data of the created user feature reference.</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code><strong>V_version</strong></code> of the same PLM Representtaion 
		Reference</td>
	</tr>
</table>
<p><a name="Note"></a>(*) The Input Models, loaded in the PROVIDER in CAAMcaUdfInstantiation.3dxml 
file and CAAMcaUserFeature.3dxml file has representation references namely CAAMcaUdfInstantiation_CAAUdfModel 
and CAAMcaUserFeature_CAAUdfLoft respectively, at the paths specified below.</p>
<p><code>InstallRootFolder\CAADoc\CAARepTemplate.edu\InputData\CAAMcaUdfInstantiation.3dxml\</code></p>
<p>and</p>
<p><code>InstallRootFolder\CAADoc\CAARepTemplate.edu\InputData\CAAMcaUserFeature.3dxml\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>These 3DXML files contains the Input Models with the following attributes, which 
needs to be imported to the PROVIDER, you are working with:</p>
<ul>
	<li><strong>Model_PLMExternalID</strong>: CAAMcaUdfInstantiation_CAAUdfModel 
		(with a prefix)/</li>
	<li><strong>Model_Version</strong>: ---</li>
	<li><strong>PLM_ExternalID</strong>: CAAMcaUserFeature_CAALoft (with a prefix).</li>
	<li><strong>Version</strong>: ---</li>
</ul>
<p><strong>Attention</strong>: Its mandatory that you provide a suitable prefix 
to the PLM_ExternalID of the Input Model, while importing a 3D XML file, to ensure 
that data stored in the PROVIDER, is unique.</p>
<p>Please refer to the document [<a href="#References">3</a>] for how to import 
and reimport such a 3D XML file in your PLM repository</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMcaUdfInstantiation Code</h3>
<p>The CAAMcaUdfInstantiation use case is made of one main located in the CAAMcaUdfInstantiation.m 
module of the CAARepTemplate.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAARepTemplate.edu\CAAMcaUdfInstantiation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In the CAAMmrUtilities.m module of the CAAMechanicalModeler.edu framework, there 
is a global function to retrieve data from the input representation reference, named 
CAAMmrGetGeometry. It is located in <code>CAAMmrGetGeometry.cpp</code>. The header 
of this function, <code>CAAMmrGetGeometry.h</code>, is set in the PublicInterfaces 
directory of the framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We do not explain step-by-step the first instantiation and next the second instantiation. 
We have chosen to show step by step how to instantiate a User Feature reference. 
In each section we detail the part concerning the first and/or the second instantiation. 
With this presentation you can see the main methods to succeed an instantiation 
and mainly the order of each step. Each instantiation begins from the step &quot;<a href="#Step5">Setting 
the Destination Path</a>&quot; until the step &quot;<a href="#Step10">Ending the 
Instantiation</a>&quot;.</p>
<ol>
	<li><a href="#Step1">Opening the Input Model</a></li>
	<li><a href="#Step2">Retrieving the Mechanical Part of CAAMcaUdfInstantiation_CAAUdfModel 
		and the Root Container of CAAMcaUserFeature_CAAUdfLoft</a></li>
	<li><a href="#Step3">Locking the Representation Reference Containing the Reference 
		to Instantiate</a></li>
	<li><a href="#Step4">Retrieving the User Feature Reference to Instantiate</a></li>
	<li><a href="#Step5">Setting the Destination Path</a></li>
	<li><a href="#Step6">Valuating the Inputs</a></li>
	<li><a href="#Step7">Changing Parameter Values</a></li>
	<li><a href="#Step8">Instantiating the User Feature Reference</a></li>
	<li><a href="#Step9">Changing the Name of the New Instance</a></li>
	<li><a href="#Step10">Ending the Instantiation</a></li>
	<li><a href="#Step11">Updating the New Instantiations</a></li>
	<li><a href="#Step12">Closing session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Input Model</h3>
<p>First 3D Shape to open <code>CAAMcaUdfInstantiation_CAAUdfModel</code>, which 
contains three points:</p>
<pre class="code">...
  CATString RepositoryName = iArgv[1];
  CATString strPLMType = iArgv[6]; 
  CATUnicodeString model_PLM_ExternalIDValue = iArgv[7];
  CATUnicodeString model_V_versionValue = iArgv[8];
  ...
  rc = ::CAAOpenPLMComponent(strPLMType,
                             model_PLM_ExternalIDValue,
                             model_V_versionValue,
                             IID_CATIPLMComponent,
                             (void**)&amp;piPLMCompOnModel,
                             bag,
                             TRUE);

  CATIPsiRepresentationLoadMode_var spRepRef = piPLMCompOnModel;

  HRESULT Hresult = spRepRef-&gt;<strong>ChangeLoadingMode</strong>(CATIPsiRepresentationLoadMode::EditMode);
...</pre>
<p>Second 3D Shape to open, <code>CAAMcaUserFeature_CAAUdfLoft</code> which contains 
the User Feature reference <code>CAAUserFeatureSample</code> to instantiate:</p>
<pre class="code">...
  CATUnicodeString feat_PLM_ExternalIDValue = iArgv[9];
  CATUnicodeString feat_V_versionValue = iArgv[10]; 
  CATIPLMComponent * piPLMCompOnFeatRef = NULL; 
  ...
  rc = ::CAAOpenPLMComponent(strPLMType,
                             feat_PLM_ExternalIDValue,
                             feat_V_versionValue,
                             IID_CATIPLMComponent,
                             (void**)&amp;piPLMCompOnFeatRef,
                             bag2,
                             TRUE);

  CATIPsiRepresentationLoadMode_var spRepRef2 = piPLMCompOnFeatRef;
  if(NULL_var != spRepRef2)
    HRESULT Hresult = spRepRef2-&gt;ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);
...</pre>
<p><code>piPLMCompOnFeatRef</code> is the <em>CATIPLMComponent</em> interface pointer 
on the Representation Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Mechanical Part of CAAMcaUdfInstantiation_CAAUdfModel 
and the Root Container of CAAMcaUserFeature_CAAUdfLoft</h3>
<p>For CAAMcaUdfInstantiation_CAAUdfModel we need the Mechanical Part which contains 
the surfacic features set with three points:</p>
<pre class="code">...
  CATIPLMNavRepReference * pIPLMNavRepReferenceOnCreatedRepRef = NULL ; 
  rc = piPLMCompOnModel-&gt;QueryInterface(IID_CATIPLMNavRepReference, (void **) &amp; pIPLMNavRepReferenceOnCreatedRepRef);

  CATIMmiPrtContainer * pIPrtContOnCAAUdfModel = NULL ;
  rc  = pIDataAccessOnCreatedRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>(&quot;CATPrtCont&quot;  
                                                                  IID_CATIMmiPrtContainer, 
                                                                  (void **)&amp;pIPrtContOnCAAUdfModel); 
...
  CATIMmiMechanicalFeature_var spMechFeatOnPart ;  
  rc = pIPrtContOnCAAUdfModel-&gt;GetMechanicalPart(spMechFeatOnPart);
...	
  CATISpecObject_var spSpecObjectCAAUdfModelPart = spMechFeatOnPart;

  CATBaseUnknown_var spCAAUdfModelPart = spSpecObjectCAAUdfModelPart;     
  CATBaseUnknown* <strong>pCAAUdfModelPart</strong>= (CATBaseUnknown*)spCAAUdfModelPart;
...</pre>
<p>Here we use the RetrieveApplicativeContainer method of the CATIPsiRepRefApplicativeDataAccess 
in order to retrieve the applicative container created previously.</p>
<p><code>pCAAUdfModelPart</code> is a pointer on the <code>CAAMcaUdfInstantiation_CAAUdfModel</code> 
Mechanical Part.</p>
<p>For <code>CAAMcaUserFeature_CAAUdfLoft</code>, only the root container is necessary:</p>
<pre class="code">...
  rc = piPLMCompOnFeatRef-&gt;QueryInterface(IID_CATIPLMNavRepReference, (void **) &amp; pIPLMNavRepReferenceOnCreatedRepRef);
  if (FAILED(rc))  return 1;
      
  rc  = pIPLMNavRepReferenceOnCreatedRepRef-&gt;<strong>RetrieveApplicativeContainer</strong>(&quot;CATPrtCont&quot;  
                                                                          IID_CATIMmiPrtContainer,
                                                                          (void **)&amp;pIPrtContOnCAAUdfLoft);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Locking the Representation Reference Containing the Reference 
to Instantiate</h3>
<p>The instantiation of an user feature reference creates a temporary link between 
the PLM Representation Reference containing this reference and the Representation 
containing the newly created feature. When the last instantiation step is done (see
<a href="#Step10">Ending the Instantiation</a>), the link is removed, and if the 
PLM Representation Reference containing this reference is not &quot;attached&quot;, 
its main SD is unloaded.</p>
<pre class="code">...
  CATOmbLifeCycleRootsBag Bag ;
  Bag.InsertRoot(piPLMCompOnFeatRef);
...</pre>
<p><code>piPLMCompOnFeatRef</code> is the <em>CATIPLMComponent</em> interface pointer 
on the PLM Representation Reference opened in <a href="#Step1">Opening the Input 
Model</a>.</p>
<p>See the opposite operation &quot;<a href="#Step12">Closing the Session</a>&quot;.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the User Feature Reference to Instantiate</h3>
<p>Now, we can retrieve the User Feature reference, the only one, of this 3D Shape:</p>
<pre class="code">  CATLISTV(CATIUdfInstantiate_var) iListOfUserFeatureReferences;
   CATTemplatesAccessServices::<strong>GetUserFeatureList</strong>(pIPrtContOnCAAUdfLoft,iListOfUserFeatureReferences);
...
  CATIUdfInstantiate_var hIUdfInstantiate;

  if (iListOfUserFeatureReferences.Size() ==1 &amp;&amp;
        (NULL_var != iListOfUserFeatureReferences[1]))
  {
    // CAAMcaUserFeature_CAAUdfLoft  contains only one User Feature reference
    //
    hIUdfInstantiate =  iListOfUserFeatureReferences[1] ;</pre>
<p><code>GetUserFeatureList</code> returns the list of all User Feature references 
existing in the User Feature Set. Each User Feature reference implements <em>CATIUdfInstantiate.</em></p>
<p>Now we can begin the instantiation steps.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting the Destination Path</h3>
<pre class="code">...
  CATPathElement PathFirstInstantiate1(pCAAUdfModelPart);
  CATPathElement * FirstUIactiveObject1 = NULL ;
  CATBaseUnknown_var FirstDest1 = NULL_var ;

  rc = pIUdfInstantiate-&gt;<strong>SetDestinationPath</strong>(&amp;PathFirstInstantiate1,
                                            FirstUIactiveObject1,FirstDest1);
  if ( FAILED(rc) ) return 1;
...</pre>
<p>This piece of code is common for the two instantiations. The source ended by 
1 for the first instantiation and ended by 2 for the second one.</p>
<p>The first role of this method is to initialize the instantiation process. Each 
instantiation must begin by this call. The second role of this method is to give 
the representation reference where the instantiation will be set.</p>
<p>The first argument of <code>SetDestinationPath</code> is <code>PathFirstInstantiate.
</code>It is the complete path of the <code>CAAMcaUdfInstantiation_CAAUdfModel
</code>representation reference. The second and third (outputs) arguments are not 
used in this use case.</p>
<p><strong>Note</strong>: When the first argument of <code>SetDestinationPath</code> 
is the complete path of a representation reference, the two last output arguments 
remain to NULL. When the path is the complete path of a product, a representation 
reference is automatically created. The second argument is the path of the UI object 
to activate, to use in an interactive command, and the last argument returns a pointer 
to this new representation reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Valuating the Inputs</h3>
<p>For the first instantiation, we set the point <code>Point.3</code> and the point
<code>Point.1</code> for the first and second input respectively:</p>
<pre class="code">...
  CATBaseUnknown * pInput1 = NULL ;
  rc = <strong>::CAAMmrGetGeometry</strong>(spSpecObjectCAAUdfModelPart,&quot;<strong>Point.3</strong>&quot;,&amp;pInput1);
  if ( FAILED(rc) )return 1 ;

  CATPathElement * pPathFirstInput1 = new CATPathElement(pInput1);
  rc = pIUdfInstantiate-&gt;<strong>SetNewInput</strong>(1,pPathFirstInput1);
  if ( FAILED(rc) )return 1 ;
  ...
  rc = <strong>::CAAMmrGetGeometry</strong>(spSpecObjectCAAUdfModelPart,&quot;<strong>Point.1</strong>&quot;,&amp;pInput1);
  if ( FAILED(rc) ) return 1 ;

  CATPathElement * pPathSecondInput1 = new CATPathElement(pInput1);
  rc = pIUdfInstantiate-&gt;<strong>SetNewInput</strong>(2,pPathSecondInput1);
  if ( FAILED(rc) ) return 1 ;
 ...</pre>
<p><code>CAAMmrGetGeometry</code> is a global function which retrieves in a 3D Shape 
given in first argument, a feature whose <em>CATIAlias</em> name is the same as 
the second argument. So the returned feature is associated with the input thanks 
to the SetNewInput method.</p>
<p>For the second instantiation, at first the <em>UserIdenticalName</em> method 
is used to valuate the inputs. The role of this method is to find for each input 
a feature whose <em>CATIAlias</em> name is equal to the role of the input. The features 
are searched for from a root given as argument of the method. In this case the root 
is <code>spCAAUdfModelPart</code>, the pointer to the <code>CAAMcaUdfInstantiation_CAAUdfModel
</code>representation reference.</p>
<pre class="code">...
  rc = pIUdfInstantiate-&gt;<strong>UseIdenticalName</strong>(spCAAUdfModelPart);
  if ( FAILED(rc) ) return 1 ;
...</pre>
<p>After calling <code>UseIdenticalName</code>, it is necessary to check that all 
inputs are valuated because the search can fail. Even if <code>UseIdenticalName</code> 
returns S_OK you must use the <code>GetNewInput</code> method for each input. If 
the returned value is NULL_var the input is not valuated.</p>
<p>In this case, for the first input, we have a failure, <code>spOnFirstInput2</code> 
is NULL_var. It is normal. The role of this input is "The top point of the loft", 
and in the <code>CAAMcaUdfInstantiation_CAAUdfModel</code>, no point has a such
<em>CATIAlias</em> name.</p>
<p>But for the second input, <code>spOnSecondInput2</code> is not NULL_var. The 
role of the second input is <code>Point.2</code>, so we have found the feature
<code>Point.2</code>.</p>
<pre class="code">...
  CATBaseUnknown_var spOnFirstInput2 = pIUdfInstantiate-&gt;<strong>GetNewInput</strong>(1);
  if ( NULL_var != spOnFirstInput2 )
  {
    return 1 ;
  }

  CATBaseUnknown_var spOnSecondInput2 = pIUdfInstantiate-&gt;GetNewInput(2);
  if ( NULL_var == spOnSecondInput2 )
  {
    return 1 ;
  }
...</pre>
<p><strong>Note</strong>: The <code>GetOldInputs</code> method, not used here, returns 
the input's list of the User Feature reference, so the size of this list gives you 
the count of input to valuate, and returns the role for each input.</p>
<p>So now, we valuate the first input explicitly with the <code>Point.3</code>.</p>
<pre class="code">...
  CATBaseUnknown * pInput2 = NULL ;
  rc = <strong>::CAAMmrGetGeometry</strong>(spSpecObjectCAAUdfModelPart,&quot;Point.3&quot;,&amp;pInput2);
  if ( FAILED(rc) ) return 1 ;

  CATPathElement * pPathFirstInput2 = new CATPathElement(pInput2);
  rc = pIUdfInstantiate-&gt;<strong>SetNewInput</strong>(1,pPathFirstInput2);
  if ( FAILED(rc) ) return 1 ;

  pPathFirstInput2-&gt;Release();
  pPathFirstInput2 = NULL ;

  pInput2-&gt;Release();
  pInput2 = NULL ;
...</pre>
<p><strong>Note</strong>: It is strongly recommended to valuate the inputs during 
the instantiation. You can nevertheless change them after the instantiation thanks 
to the <em>CATIUdfFeatureInstance</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Changing Parameter Values</h3>
<p>For this use case, we have just done it for the second instantiation.</p>
<p>The User Feature reference <code>CAAUserFeatureSample</code> contains a lot of 
parameters. Only two have been published. You can modify only the published parameters. 
In the following picture you can see the two published parameters: the radius of 
the top circle and the radius of the bottom circle.</p>
<table>
	<caption><a name="Fig4">Fig.4</a>: The Published Parameters Displayed in the 
	Specifications Tree</caption>
	<tr>
		<td><img alt="" src="images/CAAMcaUdfCreation3.jpg"/></td>
	</tr>
</table>
<pre class="code">...
  CATListValCATBaseUnknown_var * pListParam = NULL ;
  CATListOfCATUnicodeString * pListParamRole = NULL ;
  rc = pIUdfInstantiate-&gt;<strong>GetParameters</strong>(pListParam,pListParamRole);

  if ( SUCCEEDED(rc) &amp;&amp; ( NULL != pListParam) &amp;&amp; ( NULL != pListParamRole ) )
  {
    int nbparam = pListParam-&gt;Size();
    if ( 2 == nbparam )
    {
      for ( int i=1 ; i &lt;= 2 ; i++ )
      {
        <strong>CATICkeParm</strong>_var spCkeParm = (*pListParam)[i] ;
        if ( NULL_var != spCkeParm)
        {
          ...
          spCkeParm-&gt;Valuate(i*0.010f);
          ...
        }
      }
    }
    ...
  }
...</pre>
<p>The <code>GetParameters</code> returns the published parameters, <code>pListParam</code>, 
and their respectical role <code>pListParamRole</code>. These two list have the 
same size. With the <em>CATICkeParm</em> interface (LiteralFeatures Framework), 
the value of the parameters are changed. In this case, each radius is divided by 
100.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Instantiating the User Feature Reference</h3>
<p>This piece of code is the same for the two instantiations:</p>
<pre class="code">...
  rc = pIUdfInstantiate-&gt;<strong>Instantiate</strong>(NULL_var);
  if ( FAILED(rc) ) return 1 ;

  CATBaseUnknown_var spFirstInstance = NULL_var ;
  spFirstInstance = pIUdfInstantiate-&gt;<strong>GetInstantiated</strong>(pIUdfInstantiate);
  if ( NULL_var == spFirstInstance ) return 1 ;
...</pre>
<p>Thanks to the <code>Instantiate</code> method, the new instance is created in 
the current surfacic features set of the representation reference specified by the
<code>SetDestinationPath</code> method. So the argument of the <code>Instantiate</code> 
method can be NULL_var.</p>
<p>We can have a pointer to this instance thanks to the <code>GetInstantiated</code> 
method. <code>spFirstInstance</code> is the smart pointer for the first instantiation. 
The argument of this method is the User Feature reference itself.</p>
<p><strong>But caution</strong>, after the <code>Instantiate</code> call, it is 
not possible to modify the inputs and the parameters. When the instantiation process 
will be totally ended, you can use the <em>CATIUdfFeatureInstance</em> interface 
to edit it [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Changing the Name of the New Instance</h3>
<p>Before ending the instantiation process, and after the instance creation, it 
is possible to change the default name of the new instance. The default name is 
the name of the User Feature reference to which an index is appended.</p>
<p>For the first instance, the name is thus: "<strong>CAAUserFeatureSample.1</strong>". 
For the second instance, we change it to "<strong>The Loft With Point2 and Point3</strong>".</p>
<pre class="code">...
  CATUnicodeString NewName = &quot;The Loft With Point2 and Point3&quot;&quot;
  rc = pIUdfInstantiate-&gt;<strong>SetDisplayName</strong>(NewName);
  if ( FAILED(rc) ) return 1 ;
...</pre>
<p>You can see the result in <a href="#Fig3">Fig.3</a>.</p>
<p><strong>Note</strong>: The <code>GetDisplayName</code> method, not used here, 
returns the name of the User Feature reference, so after <code>SetDisplayName</code>, 
the result of <code>GetDisplayName</code> is always <code>&quot;CAAUserFeatureSample&quot;</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Ending the Instantiation</h3>
<p>This piece of code is the same for the two instantiations:</p>
<pre class="code">...
  rc = pIUdfInstantiate-&gt;<strong>EndInstantiate</strong>();
  if ( FAILED(rc) ) return 1 ;
...</pre>
<p>The instantiation process is ended. To restart a new instantiation, you must 
go to the &quot;<a href="#Step5">Setting The Destination Path</a>&quot; step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Updating the New Instantiations</h3>
<p>The goal of this step is to update the new instances. The code for the first 
instance is:</p>
<pre class="code">...
  CATISpecObject_var spSpecObj1= spFirstInstance ;
  CATTry
  {
    spSpecObj1-&gt;<strong>Update</strong>();
  }
  CATCatch(CATError,error)
  {
    ...
    return 1 ;
  }
  CATEndTry
 ...</pre>
<p><code>spFirstInstance</code> is a pointer to the first instance. We retrieved 
it using the <code>GetInstantiated</code> method. Refer to <a href="#Step8">Instantiating 
the User Feature Reference</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Closing the Session</h3>
<pre class="code">... 
  Bag.<strong>RemoveRoot</strong>(piPLMCompOnFeatRef);
...
  piPLMCompOnFeatRef = NULL;
  rc = ::<strong>CAAAdpCloseSession</strong>();     
...</pre>
<p>The <code>RemoveRoot</code> method removes from the bag the Representation Reference 
containing the reference to instantiate. This reference was inserted in the bag 
in <a href="#Step3">Locking the Representation Reference Containing the Reference 
to Instantiate</a>. <code>piPLMCompOnFeatRef</code> was initialized in
<a href="#Step1">Opening the Input Model</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to instantiate a User Feature reference:
</p>
<ul>
	<li>Retrieves the User Feature reference to instantiate. For this use case, 
		it is the first User Feature reference in the User Feature Set of the
		<code>CAAMcaUserFeature_CAAUdfLoft</code> 3D Shape. This feature implements 
		the <code>CATIUdfInstantiate</code> interface.</li>
	<li>Sets the path of the representation reference where the User Feature reference 
		will be instantiated using the <code>SetDestinationPath</code> method.</li>
	<li>Valuates the inputs thanks to the <code>SetNewInput</code> or <code>UseIdenticalName</code> 
		methods.</li>
	<li>Valuates the published parameters (optional) retrieved thanks to the
		<code>GetParameters</code> method, and modified using the <em>CATICkeParm</em> 
		interface.</li>
	<li>Instantiates the new instance thanks to the <code>Instantiate</code> method.</li>
	<li>Changes the name of the new instance (optional) thanks to the <code>SetDisplayName</code> 
		method.</li>
	<li>Ends the instantiation with the call to the <code>EndInstantiate</code> 
		method.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[2]</td>
		<td><a href="CAAMcaTaPowerCopyAndUserFeatures.htm">An Overview of Power Copies and User Features</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAMcaUcUdfEdition.htm">Editing a User Feature</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Nov 2001]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
