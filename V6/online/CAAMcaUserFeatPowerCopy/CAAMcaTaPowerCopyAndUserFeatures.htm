<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>An Overview of Power Copies and User Features</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>An Overview of Power Copies and User Features</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article details the essential characteristics and mechanisms of 
		Power Copies and User Features. A reading of the technical articles about 
		the 3D Shape Representation [<a href="#References">1</a>][<a href="#References">2</a>][<a href="#References">3</a>] 
		is recommended to take full benefits from this article.</p>
		<ul>
			<li><a href="#100000">Introduction</a></li>
			<li><a href="#200000">Definitions</a>
				<ul>
					<li><a href="#210000">What Is a &quot;Component&quot;?</a></li>
					<li><a href="#220000">What Are the &quot;KnowledgeTemplates&quot; 
						Set and the &quot;PowerCopy&quot; Set?</a></li>
					<li><a href="#230000">What Is an &quot;Input&quot;?</a></li>
					<li><a href="#240000">What Is a &quot;Published Parameter&quot;?</a></li>
					<li><a href="#250000">What Is a &quot;Role&quot;?</a></li>
				</ul>
			</li>
			<li><a href="#300000">How to Use the Interfaces</a>
				<ul>
					<li><a href="#310000">Power Copy and User Feature Instantiation</a></li>
					<li><a href="#320000">User Feature Edition</a></li>
				</ul>
			</li>
			<li><a href="#400000">Technologies Used</a>
				<ul>
					<li><a href="#410000">An Example of the Copy/Paste Mechanism</a></li>
					<li><a href="#420000">An Example of the Instance/Reference Mechanism</a></li>
					<li><a href="#430000">The Replace Mechanism</a></li>
				</ul>
			</li>
			<li><a href="#500000">Useful Tips</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>Introduction</h2>
<p>To design your geometrical models, in most cases, Part and GSD features are sufficient. 
But if these features cannot answer your needs, you must create others. One solution 
is to redefine an existing geometrical feature, but then you have to re-implement 
complex interfaces like <em>CATIBuild</em>, <em>CATIReplace</em>... So, an intermediate 
solution is to create User Features or Power Copies. These elements are geometrical 
features that are composed of other features. With this solution you can create 
new geometrical features with a minimal implementation cost.</p>
<p>Power Copy and User Feature capabilities are used to group features which are 
often repeated and never modified and to create applicative features. With the User 
Feature, the internal features are hidden. This is useful for designers to hide 
complexity and/or for customers to maintain confidentiality.</p>
<p>This document begins by defining the terms used to describe a User Feature or 
a Power Copy.</p>
<p>In the next section, <a href="#300000">How to Use the Interfaces</a>, the CATTemplateInterfaces 
framework's interfaces are described for each process: how to create a User Feature 
(or a Power Copy), how to instantiate a User Feature (or a Power Copy) and how to 
edit a User Feature (process not available for Power Copy).</p>
<p>The <a href="#400000">Technologies Used</a> section gives an internal view where 
the main difference between a Power Copy and a User Feature becomes explicit: on 
the one hand, the Copy/Paste mechanism is used and on the other hand, the Reference/Instance 
mechanism is used.</p>
<p>The Power Copy or the User Feature to be instantiated is saved in a 3D Shape 
Representation.</p>
<p>This document is useful for the CAA developer, but also for the end user who 
may need to use interactive commands to create or instantiate a Power Copy or a 
User Feature. This article also gives a number of <a href="#500000">Useful Tips</a> 
to enhance the usage of these features.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>Definitions</h2>
<h3><a name="210000"></a>What Is a &quot;Component&quot;?</h3>
<p>A component is a feature that is used to form the User Feature (or the Power 
Copy) reference. This feature can be:</p>
<ul>
	<li>A geometrical feature.</li>
	<li>A knowledge object (Rules, Formulas, Design Table, Check).</li>
	<li>A constraint.</li>
	<li>Another User Feature.</li>
	<li>A surfacic set (Ordered Geometrical Set or Geometrical Set).</li>
	<li>A Body (not the PartBody).</li>
</ul>
<p>A User Feature (or a Power Copy) can be made up of any number of components. 
These components must be selected from the same 3D Shape Representation as the one 
containing the User Feature or the Power Copy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="220000"></a>What Are the &quot;KnowledgeTemplates&quot; Set and 
the &quot;PowerCopy&quot; Set?</h3>
<p>User Features and Power Copies that are used to be instantiated are called User 
Feature <strong>references</strong> and Power Copy <strong>references</strong> respectively.</p>
<p>The &quot;KnowledgeTemplates&quot; and &quot;PowerCopy&quot; sets aggregate User 
Feature references and Power Copy references respectively. These two sets are non 
mechanical features aggregated in the MechanicalPart feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="230000"></a>What Is an &quot;Input&quot;?</h3>
<p>An input is a feature that is not directly selected to form the User Feature 
or the Power Copy, but this feature is pointed at through an external link by a 
component that <strong>is</strong> part of the UserFeature or Power Copy. Inputs must be valuated 
at the time of instantiation.</p>
<p>For example, let's look at the inputs of the User Feature reference created in 
the use case &quot;Creating a User Feature Reference&quot; [<a href="#References">5</a>].</p>
<table>
	<caption><a name="Fig1">Fig.1</a>: Input Description</caption>
	<tr>
		<td>
		<img alt="" height="420" src="images/CAAMcaInputs.jpg" width="640"/></td>
	</tr>
</table>
<p>This feature has only one component, a Geometrical Set (the green box). It contains 
a loft, Loft.2, defined by two circles, <code>Circle.3</code> and <code>Circle.4</code>. 
These circles are placed on two planes, <code>Plane.1</code> and <code>Plane.2</code>. 
These two planes are perpendicular to a line, <code>Line.2</code>, at each of its 
end points. These end points, Point.1 and Point.2, are not inside the group of features 
defining the components. So these two points are the &quot;inputs&quot;.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="240000"></a>What Is a &quot;Published Parameter&quot;?</h3>
<p>The feature can have knowledge parameters which can be published or not. Refer 
to the <em>CATIParmPublisher</em> interface of the KnowledgeInterfaces Framework. 
The parameters of the User Feature (or the Power Copy) are made up of the set of 
all knowledge parameters of its components. Among these parameters, you can select 
(publish) those whose values are likely to be modified during the instantiation 
step.</p>
<p>Let's take the same example that was shown in the <a href="#230000">What Is an &quot;Input&quot;?</a> 
section:</p>
<table>
	<caption><a name="Fig2">Fig.2</a>: Parameter Description</caption>
	<tr>
		<td>
		<img alt="" height="480" src="images/CAAMcaParameterSchema.jpg" width="690"/></td>
	</tr>
</table>
<p>The User Feature reference contains only one component, a Geometrical Set (the 
green box) and it contains several features: Line.2, Circle.3, Circle.4, Plane.1... 
In Fig.2 we have only presented the parameters for Line.2 (L. from the start point, 
L. from the end point), Circle.3 (Radius) and Circle.4 (Radius). These two last 
radius parameters are outside the green box because they have been &quot;published&quot;.</p>
<p>The published parameters appear in the specification tree only for the User Feature; 
they can be found in the UserFeatures set and under each instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="250000"></a>What Is a &quot;Role&quot;?</h3>
<p>For each input and published parameter you can give an &quot;external&quot; name. 
This external name is the &quot;role&quot;. The default role of an input is the 
name of the feature and the default role of a parameter is its default name. For 
example, in the case of a parameter, it is easier to understand &quot;The Radius 
of the Top Circle&quot; rather than &quot;Radius&quot;.</p>
<p>For the input, the role has an extra significance: the role is useful to give 
more meaning to the end user, but it can also be used to automatically look for 
inputs. To valuate the inputs at each instantiation, you can specifically set a 
feature for each input, but you can also use the &quot;Use Identical Name&quot; 
function. This means that the process tries to valuate an input by looking for a 
feature whose name returned through <em>CATIAlias</em> is identical to the role name 
of the input.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>How to Use the Interfaces</h2>
<h3><a name="310000"></a>Power Copy or User Feature Instantiation</h3>
<p>The Power Copy references and the User Feature references are instantiated by 
nearly the same process. Refer to the use case &quot;Instantiating a User Feature 
Reference&quot; [<a href="#References">6</a>] for a concrete example of instantiating 
a User Feature.</p>
<p>The User Feature or the Power Copy reference to be instantiated is found in a 
3D Shape Representation called the <strong>reference</strong> 3D Shape Representation. The 
instance will be created in a <strong>destination</strong> 3D Shape Representation. These 
two documents can be the same but it is not recommended. Refer to
<a href="#500000">Useful Tips</a> for an more detailed explanation.</p>
<p>The instantiation process is the following:</p>
<ol>
	<li>Retrieve the feature to be instantiated
		<p>For the User Feature list:</p>
		<pre class="code">  ...
  CATLISTV(CATIUdfInstantiate_var) UserFeatureList;
  HRESULT hr1 = CATTemplatesAccessServices::<strong>GetUserFeatureList</strong>(piPartContainer,UserFeatureList);
  ...</pre>
		<p>For the Power Copy list:</p>
		<pre class="code">  ...
  CATLISTV(CATIUdfInstantiate_var) PowerCopyList;
  HRESULT hr1 = CATTemplatesAccessServices::<strong>GetPowerCopyList</strong>(piPartContainer,PowerCopyList);
  ...</pre>
		<p><code>piUdfFactoryOnPartContainer</code> is the <em>CATIUdfFactory</em> 
		pointer on the root container of the reference 3D Shape Representation, 
		and pFeatureList is a pointer on a CATISpecObject_var list.</p>
		<p>The list contains the User Feature or the Power Copy references that 
		can be instantiated. These feature references implement the <em>CATIUdfInstantiate</em> 
		interface to enable instantiations.</p>
		<pre class="code">  ...
  CATISpecObject_var spFeatureReference =  (*pFeatureList)[<strong>i</strong>] ;   
  <strong>CATIUdfInstantiate</strong> *piUdfInstantiateOnFeatRef = NULL ;
  rc = spFeatureReference-&gt;QueryInterface(IID_CATIUdfInstantiate,(void **) &amp;piUdfInstantiateOnFeatRef);
  ...</pre>
		<p>The value of <code>i</code> is ranged between 1 and the maximum number 
		of references. This number is given by the size of the <code>pFeatureList</code> 
		list.</p>
	</li>
	<li><a name="Anchor1">Set the destination location</a>
		<p>An instance of a User Feature will always be located in a Geometrical 
		Features Set of a MechanicalPart. The nature of the feature reference determines 
		the choice between a Body, a Solid Body, a Geometrical Set or an Ordered 
		Geometrical Set.</p>
		<p>For Power Copy instantiation, the location of duplicated features depends 
		on their own nature.</p>
		<p>There are two different ways to define the destination location of instantiation:</p>
		<ul>
			<li>The old method consists in designating the MechanicalPart as the 
				destination. If your MechanicalPart contains several Geometrical 
				Features Sets, the instantiation will occur in the current one. 
				Use the <code>SetCurrentFeature</code> method of the <em>CATIPrtPart</em> 
				(interface of the MecModInterfaces Framework) to change the current 
				tool.</li>
		</ul>
		<p><a name="Anchor2">First retrieve a pointer to the MechanicalPart destination</a>:</p>
		<pre class="code">  ...
  CATIMmiMechanicalFeature_var spMechFeatOnPart ;  
  rc = piPartContainer-&gt;GetMechanicalPart(spMechFeatOnPart);
  ...	
  CATBaseUnknown_var spBuknOnMechanicalPart = spMechFeatOnPart;
  CATBaseUnknown * <strong>pMechanicalPart</strong> = (CATBaseUnknown *)spBuknOnMechanicalPart ;
  ...</pre>
		<p><code>piPartContainer</code> is the root container of the <strong>destination</strong> 
		3D Shape Representation.</p>
		<p>Next, set the path of this MechanicalPart to the Feature reference:</p>
		<pre class="code">  ...
  CATPathElement PathOfTheMechanicalPart (pMechanicalPart);
  CATBaseUnknown * pUIActiveObject = NULL ;
  CATBaseUnknown_var spMechanicalPartDestination;
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>SetDestinationPath</strong>(&amp;PathOfTheMechanicalPart,
                           pUIActiveObject,spMechanicalPartDestination);
  ...</pre>
		<p><code>PathOfTheMechanicalPart</code> is a <em>CATPathElement</em> created 
		from a <em>CATBaseUnknown</em> pointer on the MechanicalPart, and pUIActiveObject 
		and spMechanicalPartDestination are NULL and NULL_var, respectively, as 
		returned values of the <code>SetDestinationPath</code> method.</p>
		<ul>
			<li>The new method consists in designating a feature as the destination 
				along with a relative position. You can choose to insert the features &quot;Inside&quot; 
				a Geometrical Features Set or &quot;After&quot; it. If you choose 
				a geometric feature as destination, then the only available position 
				is &quot;After&quot;. The feature you choose as destination is automatically 
				set as the current feature.</li>
		</ul>
		<p>Set the path of the choosen destination feature and the relative position 
		to the Template reference:</p>
		<pre class="code">  ...
  CATPathElement PathOfTheDestinationFeature (pDestinationFeature);
  CATUnicodeString relativePosition = &quot;After&quot;;
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>SetDestinationPathOfInsertion</strong>(&amp;PathOfTheDestinationFeature,
                           relativePosition);
  ...</pre>
		<p><code>PathOfTheDestinationFeature</code> is a <em>CATPathElement</em> created 
		from a <em>CATBaseUnknown</em> pointer on the geometric feature designated 
		as the destination (<code>pDestinationFeature</code>), and relativePosition 
		is a CATUnicodeString whose value can be &quot;Inside&quot; or &quot;After&quot;.</p>
		<p>If you want to use the current feature as the default destination, you 
		can retrieve it using the <code>GetDefaultDestinationOfInsertion</code> 
		method.</p>
		<pre class="code">  ...
  CATPathElement PathOfTheMechanicalPart (pMechanicalPart);
  CATPathElement* PathOfTheDestinationFeature = NULL;
  CATUnicodeString relativePosition;
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>GetDefaultDestinationOfInsertion</strong>(&amp;PathOfTheMechanicalPart,
                           PathOfTheDestinationFeature,relativePosition);
  ...</pre>
		<p><code>PathOfTheMechanicalPart</code> is a <em>CATPathElement</em> created 
		from a <em>CATBaseUnknown</em> pointer on the MechanicalPart.</p>
	</li>
	<li>Valuate all the inputs

		<p>All the features that valuate the inputs are features from the same MechanicalPart 
		as the MechanicalPart in which the Power Copy or the User Feature is to 
		be instantiated.</p>
		<p>First solution: use the <code>SetNewInput</code> method for each input.</p>
		<pre class="code">  ...
  CATPathElement * pPathOnInput (pFeatureInput);
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>SetNewInput</strong>(x,pPathOnInput);
  ...</pre>
		<p><code>x</code> is the position of the input in the list returned by the
		<code>GetOldInputs</code> method and is ranged between 1 and the number 
		of inputs. This number is given by the size of the list. pPathOnInput is 
		the <em>CATPathElement</em> of the feature pointed to by pFeatureInput</p>
		<p>Second solution: Use the <code>UseIdenticalName</code> method.</p>
		<pre class="code">  ...
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>UseIdenticalName</strong>(spRoot);
  ...</pre>
		<p><code>spRoot</code>, in most cases, is a smart pointer to the MechanicalPart 
		of the destination 3D Shape Representation, <code>spBuknOnMechanicalPart</code>, 
		retrieved in <a href="#Anchor2">First retrieve a pointer to the MechanicalPart 
		destination</a>.</p>
		<p>The role of this method is to automatically look for a feature for each 
		input. An input is valuated when there exists in the root a feature whose
		<em>CATIAlias</em> name is identical to the role of the input.</p>
		<p>Example: The User Feature (or Power Copy) has 4 inputs whose first two 
		have a specific role: MyRole1 and MyRole2 respectively.</p>
			<table class="fill">
				<tr>
					<th>Input Name</th>
					<th>Input Role</th>
					<th>Default valuation</th>
				</tr>
				<tr>
					<td>Point.1</td>
					<td>MyRole1</td>
					<td>Point.1</td>
				</tr>
				<tr>
					<td>Point.2</td>
					<td>MyRole2</td>
					<td>Point.2</td>
				</tr>
				<tr>
					<td>Line.1</td>
					<td>Line.1</td>
					<td>Line.1</td>
				</tr>
				<tr>
					<td>Line.2</td>
					<td>Line.2</td>
					<td>Line.2</td>
				</tr>
			</table>

		<p>The destination 3D Shape Representation contains the following features: 
		a point called MyRole1, Point.1,Line.1 ....</p>
		<p>The <code>UseIdenticalName</code> method finds only two features: MyRole1 
		and Line.1 associated to Point.1 and Line.1 respectively. Point.2 and Line.2 
		are not valuated because any feature in the root has MyRole2 or Line.2 as
		<em>CATIAlias</em> name.</p>
		<table class="fill">
			<tr>
				<th>Input's Name</th>
				<th>Input's Role</th>
				<th>Valuation after UseIdenticalName</th>
			</tr>
			<tr>
				<td>Point.1</td>
				<td>MyRole1</td>
				<td><strong>MyRole1</strong></td>
			</tr>
			<tr>
				<td>Point.2</td>
				<td>MyRole2</td>
				<td>Point.2</td>
			</tr>
			<tr>
				<td>Line.1</td>
				<td>Line.1</td>
				<td><strong>Line.1</strong></td>
			</tr>
			<tr>
				<td>Line.2</td>
				<td>Line.2</td>
				<td>Line.2</td>
			</tr>
		</table>
		<p>After the <code>UseIdenticalName</code> method it is important to check 
		that all inputs are valuated.</p>
		<pre class="code"> ...
  CATBoolean Uncomplete = FALSE ;  
  int i = <strong>1</strong> ; 
  int NbInput = .... ; // the size of the list returned by GetOldInputs
  while ( (FALSE == Uncomplete ) &amp;&amp; ( i &lt;= NbInput) )
  {
     CATBaseUnknown_var spOnInput = piUdfInstantiateOnFeatRef-&gt;<strong>GetNewInput</strong>(i);
     if ( NULL_var == spOnInput )
     {
        Uncomplete = TRUE ; // the current input is not valuated
     }else i ++ ;
  } 
...</pre>
		<p>If one or several inputs are not valuated by the <code>UseIdenticalName</code> 
		method, you can use the <code>S</code><code>etNewInput</code> method to 
		perform the valuation.</p>
		<p><strong>Caution</strong>: the <code>UseIdenticalName</code> method returns S_OK 
		even if an input is not valuated.</p>
	</li>
	<li>Valuate the published parameters

		<p>This step is not mandatory, you can keep the default values which are 
		those values on the User Feature or the Power Copy reference. Retrieve the 
		list of all published parameters using the <code>GetParameters</code> method. 
		This method also returns the list of their role. These two lists have the 
		same length.</p>
		<pre class="code"> ...
  CATListValCATBaseUnknown_var * pParameterList = NULL;
  CATListOfCATUnicodeString * pParameterRoleList = NULL ;
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>GetParameters</strong>(pParameterList,pParameterRoleList);
  if ( NULL != pParameterList )
  {
     int NbPublishedParameters = pParameterList-&gt;<strong>Size</strong>();
     for ( int i= <strong>1</strong> ; i &lt;= NbPublishedParameters ; i++ )
     {
         <strong>CATICkeParm</strong>_var spCkeParmOnParameter = (*pParameterList)[i];
         if ( NULL_var != spCkeParmOnParameter )
         {
            ...
         }
     }
  }
...</pre>
		<p>You can modify the parameters using the <em>CATICkeParm</em> interface 
		of the KnowledgeInterfaces framework.</p>
	</li>
	<li>Instantiate

		<pre class="code"> ...
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>Instantiate</strong>(NULL_var);
...</pre>
		<p>The argument of this method must be NULL_var.</p>
		<p><strong>Caution</strong>: After this call, it is not possible to change an input 
		or a parameter. In the case of a User Feature, you could change it by using 
		the <em>CATIUdfFeatureInstance</em> interface, but always after the end of 
		the current instantiation.</p>
	</li>
	<li>Change the name of the new instantiated feature (for User Features only)

		<p>You can change the name of a new instantiation by using the <code>SetDisplayName</code> 
		method.</p>
		<pre class="code"> ...
  CATUnicodeString   NewNameOfTheInstance = &quot;A different name &quot; ;
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>SetDisplayName</strong>(NewNameOfTheInstance);
...</pre>
		<p>The default name of the User Feature instance is the name of its reference, 
		returned by the <code>G</code><code>etDisplayName</code> method with an 
		index appended.</p>
	</li>
	<li>End the instantiation process

		<pre class="code"> ...
  rc = piUdfInstantiateOnFeatRef-&gt;<strong>EndInstantiate</strong>();
...</pre>
		<p>After this call the instantiation is closed, you can make a new instantiation 
		by returning to the second step <a href="#Anchor1">Set the destination location</a>.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="320000"></a>User Feature Edition</h3>
<p>The User Feature is editable thanks to the <em>CATIUdfFeatureInstance</em> interface. 
Refer to the use case &quot;Editing a User Feature&quot; [<a href="#References">7</a>] 
for two examples of the edition process.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="400000"></a>Technologies Used</h2>
<p>Following is a description of the mechanisms used for the creation and instantiation 
of User Features and Power Copies.</p>
<table>
	<caption><a name="Fig3">Fig.3</a>: Mechanism Description</caption>
	<tr>
		<td>
		<img alt="" height="456" src="images/CAAMcaPresGenTechnologiesUsed.jpg" width="667"/></td>
	</tr>
</table>
<p><strong>In the case of a Power Copy</strong>:</p>
<ul>
	<li>The Power Copy reference has links to the selected features (Ref Features). 
		These selected features are the components of the Power Copy reference.</li>
	<li>Each instantiation of a Power Copy reference is a copy of each of its components 
		(Copied Feature).</li>
	<li>After an instantiation, there is no link between the copied feature and 
		the reference component.</li>
</ul>
<p>This is the Copy/Paste mechanism.</p>
<p><strong>In the case of a User Feature</strong>:</p>
<ul>
	<li>The User Feature reference aggregates a copy of each selected feature.</li>
	<li>Each instantiation of a User Feature reference creates a new feature: an 
		instance of the User Feature reference.</li>
	<li>After an instantiation, the new User Feature is always editable: you can 
		change the value of its published parameters and/or replace its inputs.</li>
	<li>There is a link between the User Feature instance and its reference, but 
		this link is not used. So a modification in the reference is not currently 
		propagated to the instances. (The propagation will be done in a next release).</li>
</ul>
<p>This is the Instance/Reference mechanism.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><strong><a name="410000"></a>An Example of the Copy/Paste Mechanism</strong></h3>
<p>As you have seen, the Copy/Paste mechanism is used for Power Copy instantiation. 
Here is an example showing the created object, the linked object during creation 
and the instantiation.</p>
<h5>Creation:</h5>
<p>In a reference 3D Shape Representation we have a line, Line.2. The Power Copy 
reference is created by selecting this line. We publish the &quot;Distance to P2&quot; 
parameter of the line.</p>
<table>
	<caption><a name="Fig4">Fig.4</a>: Internal View of a Power Copy Reference</caption>
	<tr>
		<td>
		<img alt="" height="444" src="images/CAAMcaCopyPastePart1.jpg" width="505"/>
		</td>
	</tr>
</table>
<p>Note that:</p>
<ul>
	<li>There is a link between the Power Copy reference and the Line.2 line.</li>
	<li>The Power Copy reference contains the list of published parameters. This 
		list has a link to the published parameter.</li>
</ul>
<h5>Instantiation:</h5>
<p>In a destination 3D Shape Representation, we have four points : Point.1, Point.2, 
Point.3 and Point.4. We choose Point.3 and Point.4 as inputs for the Power Copy. 
After the instantiation, in the destination 3D Shape Representation we have:</p>
<table>
	<caption><a name="Fig5">Fig.5</a>: Internal View of an Instance of a Power 
	Copy Reference</caption>
	<tr>
		<td>
		<img alt="" height="405" src="images/CAAMcaCopyPastePart2.jpg" width="373"/>
		</td>
	</tr>
</table>
<p>Note that:</p>
<ul>
	<li>A new line, Line.1, has been created.</li>
	<li>The new line, Line.1, has links to Point.3 and Point.4.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><strong><a name="420000"></a>An Example of the Instance/Reference Mechanism</strong></h3>
<p>As you have seen, the Instance/Reference mechanism is used for User Feature instantiation. 
Here is an example of the created objects, the linked objects during creation and 
the instantiation.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h5>Creation</h5>
<p>In a reference 3D Shape Representation we have a line, Line.2. The user feature 
reference is created by selecting this line. We publish the &quot;Distance to P2&quot; 
parameter of the line.</p>
<table>
	<caption><a name="Fig6">Fig.6</a>: Internal View of a User Feature Reference</caption>
	<tr>
		<td>
		<img alt="" height="573" src="images/CAAMcaUserFeaturePart1.jpg" width="653"/>
		</td>
	</tr>
</table>
<p>Note that:</p>
<ul>
	<li>The new User Feature reference, named MyNewUF, is a black box which contains:
		<ul>
			<li>A line (Line.1), which is a copy of the selected line Line.2.</li>
			<li>A parameter which is not published (Distance to P1).</li>
			<li>The list of published parameters.</li>
		</ul>
	</li>
	<li>The inputs (Point.1 and Point.2) and the published parameter (Distance to 
		P2) are outside to the black box.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h5>Instantiation:</h5>
<p>In a destination 3D Shape Representation, we have four points : Point.1, Point.2, 
Point.3 and Point.4. We choose Point.3 and Point.4 as inputs for the User Feature. 
After the instantiation, in the destination 3D Shape Representation we have:</p>
<table>
	<caption><a name="Fig7">Fig.7</a>: Internal View of an Instance of a User 
	Feature Reference</caption>
	<tr>
		<td>
		<img alt="" height="569" src="images/CAAMcaUserFeaturePart2.jpg" width="653"/>
		</td>
	</tr>
</table>
<p>Note that:</p>
<ul>
	<li>The name of the new User Feature, MyNewUF.1, is the name of the reference 
		indexed by 1.</li>
	<li>This new feature is editable, which means that the inputs and the published 
		parameter can be modified.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="430000"></a>The Replace Mechanism</h3>
<p>See the Use case &quot;Performing a Replace on a Mechanical Feature&quot; [<a href="#References">8</a>] 
for a detailed example of the Replace mechanism.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="500000"></a>Useful Tips</h2>
<p>When instantiating a PowerCopy or a User Feature, check its input:</p>
		<ul>
			<li>Always check the orientation for curve and surface.</li>
			<li>If you need to instantiate a Power Copy several time on the same 
				input, rename your inputs and use the &quot;Use Identical Name&quot; 
				option.</li>
		</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Use the User Feature or Power Copy to create new feature at a minimal cost. They 
are also useful to group features which are often repeated and never modified and 
to create applicative features.</p>
<p>The Copy/Paste mechanism is used to instantiate a Power Copy with inputs and 
parameters. After instantiation of a Power Copy, the resulting features are 
all independant features and are editable.</p>
<p>The Instance/Reference mechanism is used to instantiate a User Feature. It is 
more powerful than the Copy/Paste mechanism. The User Feature is a black box whose 
arguments are the inputs and the published parameters. After instantiation of a 
User Feature, the resulting feature is editable.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTa3DShape.htm">
		From the PLM Representation to the 3D Shape</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaContentsSpecCont1.htm">
		The Geometrical Feature Sets</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaContentsSpecCont2.htm">
		The Geometrical Features</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAMcaUcUdfInstantiation.htm">Instantiating a User Feature 
		Reference</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAMcaUcUdfEdition.htm">Editing a User Feature</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td>Performing a Replace on a Mechanical Feature</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Feb 2005]</td>
		<td>Document Updated to modify the default icon</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Apr 2006]</td>
		<td>Document Updated for V6</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
