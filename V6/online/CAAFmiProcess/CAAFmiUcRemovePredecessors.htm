<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Removing Predecessors</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Removing Predecessors</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes an example of use of Framework DELPPRProcessItf</p>
		<p>This example is authoring the Manufacturing Process model and navigates 
		in it.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmiRemovePredecessors Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFmiRemovePredecessors Do</a></li>
					<li><a href="#How">How to Launch CAAFmiRemovePredecessors</a></li>
					<li><a href="#Where">Where to Find the CAAFmiRemovePredecessors 
						Code</a> </li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to remove a predecessor element from the 
process structure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmiRemovePredecessors Use Case</h2>
<p>CAAFmiRemovePredecessors is a use case of the CAAPPRProcessItf.edu framework 
that illustrates DELPPRProcessItf framework capabilities. It will create the following 
structure:</p>
<table>
	<caption>Fig. 1: Model Structure of this Use Case</caption>
	<tr>
		<td>
		<img alt="Structure Model" src="images/CAAFmiCreateStructure_Structure.png" width="600px"/>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmiRemovePredecessors Do</h3>
<p>The use case creates a root processes of type &quot;assembly&quot;, it carries 
on creating other processes as &quot;RemoveMaterial&quot; under &quot;assembly&quot; 
and &quot;Provide&quot; under the RemoveMaterial as predecessors. It will navigate 
to the RemoveMaterial process and removes its predecessor, which is provide process.</p>
<p><strong>Usecase Objects:</strong> <code><strong>CAAFmiRemovePredecessors</strong></code></p>
<p><strong>Expected Result:</strong> The result is a return code, its value is:</p>
<ul>
	<li>0 on successful completion</li>
	<li>1 if execution failed.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmiRemovePredecessors</h3>
<p>To launch CAAFmiRemovePredecessors, you will need to set up the build time environment, 
then compile CAAFmiRemovePredecessors along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Additional instructions:</p>
<p><code>mkrun -c &quot;CAAFmiRemovePredecessors Repository Server User Password 
SecurityCtx Environment&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Repository</td>
		<td>The name of the repository (or provider)</td>
	</tr>
	<tr>
		<td>Server</td>
		<td>The name and port of the server</td>
	</tr>
	<tr>
		<td>User</td>
		<td>The user identifier</td>
	</tr>
	<tr>
		<td>Password</td>
		<td>The user password</td>
	</tr>
	<tr>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project)
		</td>
	</tr>
	<tr>
		<td>Environment</td>
		<td>A PLM Environment containing a modeler customization</td>
	</tr>
</table>
<p>Example:</p>
<p><em>mkrun -c &quot;CAAFmiRemovePredecessors PLM1 ve4al10dsy:8090 uxodtipt Ovb2pcds 
VPMADMIN.ADMIN.DEFAULT VPM&quot;</em></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmiRemovePredecessors Code.</h3>
<p>The CAAFmiRemovePredecessors use case is made of a file located in the CAAFmiRemovePredecessors.m 
module of the CAAPPRProcessItf.edu framework:<br />
<code>InstallRootFolder\CAADoc\CAAPPRProcessItf.edu\CAAFmiRemovePredecessors.m</code></p>
<p><em>Main files:</em></p>
<pre class="code">
CAAPPRProcessItf.edu/CAAFmiRemovePredecessors.m/src/CAAFmiRemovePredecessors.cpp</pre>
<pre class="code">CAAPPRProcessItf.edu/ProtectedInterfaces/CAAFmiSessionServices.h
CAAPPRProcessItf.edu/ProtectedInterfaces/CAAFmiReleaseServices.h
CAAPPRProcessItf.edu/CAAFmiServices.m/src/CAAFmiSessionServices.cpp
CAAPPRProcessItf.edu/CAAFmiServices.m/src/CAAFmiReleaseServices.cpp</pre>
<pre class="code">
CAAPLMClientAdapter.edu/PublicInterfaces/CAAAdpCreateCloseSession.h</pre>
<p><em>Documented Framework(CAA files): </em></p>
<pre class="code"><a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf');return false;">DELPPRProcessItf</a><a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf', 'function', 'GetPPRProcessAuth');return false;">/PublicInterfaces/DELPPRProcessAuthAccess.h</a>
<a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf');return false;">DELPPRProcessItf</a><a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf', 'interface', 'DELIPPRProcessAuth');return false;">/PublicInterfaces/DELIPPRProcessAuth.h</a>
<a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf');return false;">DELPPRProcessItf</a><a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf', 'function', 'GetPPRProcessNav');return false;">/PublicInterfaces/DELPPRProcessNavAccess.h</a>
<a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf');return false;">DELPPRProcessItf</a><a href="#" onclick="javascript:CAAlink('CPP', 'DELPPRProcessItf', 'interface', 'DELIPPRProcessNav');return false;">/PublicInterfaces/DELIPPRProcessNav.h</a>
</pre>
<pre class="code">
<a href="#" onclick="javascript:CAAlink('CPP', 'CATPLMComponentInterfaces');return false;">CATPLMComponentInterfaces</a><a href="#" onclick="javascript:CAAlink('CPP', 'CATPLMComponentInterfaces', 'interface', 'CATIPLMNavReference');return false;">/PublicInterfaces/CATIPLMNavReference.h</a>
</pre>
<pre class="code"><a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeInterfaces');return false;">KnowledgeInterfaces</a><a href="#" onclick="javascript:CAAlink('CPP', 'KnowledgeInterfaces', 'interface', 'CATITypeDictionary');return false;">/PublicInterfaces/CATITypeDictionary.h</a>
</pre>
<pre class="code"><a href="#" onclick="javascript:CAAlink('CPP', 'ObjectModelerBase');return false;">ObjectModelerBase</a><a href="#" onclick="javascript:CAAlink('CPP', 'ObjectModelerBase', 'class', 'CATOmbLifeCycleRootsBag');return false;">/PublicInterfaces/CATOmbLifeCycleRootsBag.h</a>
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight logical steps in CAAFmiRemovePredecessors:</p>
<ol>
	<li><a href="#Step1">Getting the DELIPPRProcessAuth Interface</a></li>
	<li><a href="#Step2">Getting the DELIPPRProcessNav Interface</a></li>
	<li><a href="#Step3">Getting the CATITypeDictionary Interface</a></li>
	<li><a href="#Step4">Creating Process References</a></li>
	<li><a href="#Step5">Binding Process References</a></li>
	<li><a href="#Step6">Navigate between Processes</a></li>
	<li><a href="#Step7">Removing Predecessors of the RemoveMaterial Process Occurrence</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Getting the DELIPPRProcessAuth Interface</h3>
<pre class="code">
DELIPPRProcessAuth_var hPPRProcessAuth;
rc = ::GetPPRProcessAuth(hPPRProcessAuth);</pre>
<p>The DELIPPRProcessAuth interface is retrieved thanks to the ::GetPPRProcessAuth() 
service global function, it will be later used to create processes and to bind it 
with predecessor processes.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Getting the DELIPPRProcessNav Interface</h3>
<pre class="code">
DELIPPRProcessNav_var hPPRProcessNav;
rc = ::GetPPRProcessNav(hPPRProcessNav);</pre>
<p>The DELIPPRProcessAuth interface will be later used to navigate between related 
processes.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Getting the CATITypeDictionary Interface</h3>
<pre class="code">
CATITypeDictionary_var hTypeDic = CATGlobalFunctions::GetTypeDictionary();</pre>
<p>The CATITypeDictionary interface will be later used to retrive the desired process 
types to create.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating Process References:</h3>
<p>The DELIPPRProcessAuth interface is used to create processes.</p>
<ol>
	<li><a href="#Step41">Creating the Root Process Reference (CreateAssembly)</a></li>
	<li><a href="#Step42">Inserting the Reference into the Bag</a></li>
	<li><a href="#Step43">Creating Another Process Reference (RemoveMaterial) that 
		Will Later Be Made the Predecessor of the Root Process</a></li>
	<li><a href="#Step44">Creating Another Process Reference (Provide) that Will 
		Later Be Made the Predecessor of the RemoveMaterial Process</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step41"></a>Creating the Root Process Reference (CreateAssembly)</h4>
<pre class="code">
CATIType_var hCreateAssemblyType;
rc = hTypeDic-&gt;FindType(&quot;CreateAssembly&quot;, hCreateAssemblyType);
CATIPLMNavReference * piNavRefOnRootProcess = NULL;
rc = hPPRProcessAuth-&gt;CreateProcess(hCreateAssemblyType,(void **)&amp;piNavRefOnRootProcess);</pre>
<p>A process is created from a CATIType retrieved from the dictionary by name and 
package name. As a result, the DELIPPRProcessAuth::CreateProcess(..) method, is 
providing you with a CATIPLMNavReference.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step42"></a>Inserting the Reference into the Bag</h4>
<pre class="code">
CATOmbLifeCycleRootsBag Bag;
rc = Bag.InsertRoot(hNavRefOnRootProcess);</pre>
<p>The Root Process should be stored into the Bag.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step43"></a>Creating Another Process Reference (RemoveMaterial) that 
Will Later Be Made the Predecessor of the Root Process</h4>
<pre class="code">CATIType_var hRemoveMaterialType;
rc = hTypeDic-&gt;FindType(&quot;RemoveMaterial&quot;, hRemoveMaterialType);
CATIPLMNavReference * piNavRefOnRemoveMaterialProcess = NULL;
rc = hPPRProcessAuth-&gt;CreateProcess(hRemoveMaterialType,(void **)&amp;piNavRefOnRemoveMaterialProcess);</pre>
<p>Like for the root process creation, only the the process type is different: a 
RemoveMaterial Process is created.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step44"></a>Creating Another Process Reference (Provide) that Will 
Later Be Made the Predecessor of the RemoveMaterial Process</h4>
<pre class="code">CATIType_var hProvideType;
rc = hTypeDic-&gt;FindType(&quot;Provide&quot;, hProvideType);
CATIPLMNavReference * piNavRefOnProvideProcess = NULL;
rc = hPPRProcessAuth-&gt;CreateProcess(hProvideType,(void **)&amp;piNavRefOnProvideProcess);</pre>
<p>Like for the root process creation, only the the Process type is different: a 
Provide Process is created.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Binding Process References:</h3>
<p>The DELIPPRProcessAuth interface is used to bind processes with predecessor processes.</p>
<ol>
	<li><a href="#Step51">Make the RemoveMaterial Process the Predecessor of the 
		CreateAssembly Reference</a></li>
	<li><a href="#Step52">Make the Provide process the Predecessor of the RemoveMaterial 
		Occurrence</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step51"></a>Make the RemoveMaterial Process the Predecessor of the 
CreateAssembly Reference</h4>
<pre class="code">
CATIPLMNavOccurrence * piNavOccOnRemoveMaterialProcessOcc = NULL;
rc = hPPRProcessAuth-&gt;InsertPredecessor(hNavRefOnRootProcess,
                                        hNavRefOnRemoveMaterialProcess,
                                        hNavRefOnRootProcess,
                                        (void **)&amp;piNavOccOnRemoveMaterialProcessOcc);</pre>
<p>The InsertPredecessor method insert a predecessor, returning an occurrence of 
the predecessor based on the context defined by the third parameter.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step52"></a>Make the Provide Process the Predecessor of the RemoveMaterial 
Occurrence</h4>
<pre class="code">
CATIPLMNavOccurrence * piNavOccOnProvideProcessOcc = NULL;
rc = hPPRProcessAuth-&gt;InsertPredecessor(hNavOccOnRemoveMaterialProcessOcc,
                                        hNavRefOnProvideProcess,
                                        hNavRefOnRemoveMaterialProcess,
                                        (void **)&amp;piNavOccOnProvideProcessOcc);</pre>
<p>Proceeds like the previous step, but from the occurrence specified as first parameter 
instead of the previously used reference. It creates a relation of functional precedence 
between the successor process reference, and a dynamically instantiated predecessor 
process, returning its corresponding occurrence, related to the specified context.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Navigate between Processes</h3>
<pre class="code">
CATListPtrCATIPLMNavOccurrence listSuccessorsProvide;
rc = hPPRProcessNav-&gt;GetSuccessors(hNavOccOnProvideProcessOcc, 
	                                hNavRefOnRootProcess, 
	                                listSuccessorsProvide);

CATListPtrCATIPLMNavOccurrence listPredecessorsRemoveMaterial;
rc = hPPRProcessNav-&gt;GetPredecessors(hNavOccOnRemoveMaterialProcess, 
		                                hNavRefOnRootProcess, 
		                                listPredecessorsRemoveMaterial);
</pre>
<ul>
	<li>Getting successors is permitted through the use of <strong>GetSuccessors</strong>:
		<p>This method returns the successors of a process and is not recursive. 
		The returned occurrences are computed in the context of the first upper 
		scope.</p>
	</li>
	<li>Getting predecessors is permitted through the use of <strong>GetPredecessor</strong>:
		<br />
		This method returns the predecessors of a process and is not recursive. 
		The occurrences are computed in the conThis method returns the predecessors 
		of a process and is not recursive. The occurrences are computed in the context 
		of the first upper scope.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Removing Predecessors of the RemoveMaterial Process Occurrence</h3>
<pre class="code">
rc = hPPRProcessAuth-&gt;RemovePredecessor(hNavOccOnRemoveMaterialProcess, hNavOccOnProvideProcessOcc );</pre>
<p>DELIPPRProcessAuth is used for removing the Predecessors. RemoveMaterial process 
occurrence is saved after navigating and is used in RemovePredecessor API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>PPR Processes that is created can be navigated and the predecessors of a process 
can be removed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAFmiUcCreateStructure.htm">Creating a Process Structure</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Aug 2012]</td>
		<td>Document Created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
