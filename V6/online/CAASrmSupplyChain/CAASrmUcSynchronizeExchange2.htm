<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Synchronizing PLM Entities</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Synchronizing PLM Entities</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case illustrates the steps involved to synchronize a set of 
		PLM entities. By synchronization it implies, importing a set of PLM entities 
		from a source site to a target site.</p>
		<p>A PLM Channel is an exchange context created between two specific repositories 
		in order to allow data exchange and ownership transfers. Refer the Technical 
		article [<a href="#References">1</a>] for the details of PLM Channel creation 
		and Data Exchange.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASrmSynchronizeExchange2 Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASrmSynchronizeExchange2 Do</a></li>
				<li><a href="#How">How to Launch CAASrmSynchronizeExchange2</a></li>
				<li><a href="#Where">Where to Find the CAASrmSynchronizeExchange2 
				Code</a> </li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a> </li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The UC teaches an end-user fundamentally to synchronize a set of PLM entities.</p>
<p>It also details the steps involved to set the options for the synchronization. 
It further sets the Briefcase directory path, the location at which the published 
briefcase for import exists.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASrmSynchronizeExchange2 Use Case</h2>
<p><code>CAASrmSynchronizeExchange2 </code>is a use case of the <code>CAASRMExposedServices.edu</code> 
framework that illustrates <code>PLMSRMExposedServices</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASrmSynchronizeExchange2 Do</h3>
<p>The UC illustrates the steps involved to synchronize (import) a set of PLM entities 
at a target site from a source site, which publishes them.</p>
<p>The UC sets the options for synchronization, primarily if entities defined by 
a higher dictionary level can be imported as weakened entities. It also sets the 
option if an error must be output on conflict or it needs to be resolved by choosing 
the local one or overridden with the incoming one.</p>
<p>The synchronization further sets the Briefcase directory path, a location at 
which the published briefcase exists, from which the PLM entities will be imported.</p>
<p>Finally it calls the synchronize operation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASrmSynchronizeExchange2</h3>
<p>To launch <code>CAASrmSynchronizeExchange2</code>, you will need to set up the 
build time environment, then compile <code>CAASrmSynchronizeExchange2</code> along 
with its prerequisites, set up the run time environment, and then execute the use 
case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;<em>CAASrmSynchronizeExchange2 Repository Server User Password 
SecurityCtx -InputData PublishBCFilePath -ReportPath ReportFilePath -AcknowFilePath 
AcknowledgementFilePath</em>&quot;</code></p>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>-InputData</th>
		<td>
		<p>indicates the next argument is the path of the PLMBriefcase file, for 
		import (of PLM entities)</p>
		</td>
	</tr>
	<tr>
		<th>PublishBCFilePath</th>
		<td>if a directory the multi BC choice has been chosen in the publish operation, 
		otherwise it is simple BC file (.PLMBriefcase) </td>
	</tr>
	<tr>
		<th>-ReportPath</th>
		<td>indicates the next argument is the path of the Report File</td>
	</tr>
	<tr>
		<th>ReportFilePath</th>
		<td>the path at which the Report file will be output</td>
	</tr>
	<tr>
		<th>-AcknowFilePath</th>
		<td>indicates the next argument is the path of the acknowledgement file 
		generated as a result of sync</td>
	</tr>
	<tr>
		<th>AcknowledgementFilePath</th>
		<td>the path of the file where to write the confirmation file ( it contains 
		synchronization status) generated by this use case. <br>
		The file must not exist and its extension must be &quot;.PLMBriefcase&quot;<br>
		Example: &quot;C:\Temp\AcknowledgeFilePath.PLMBriefcase&quot;</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASrmSynchronizeExchange2 Code</h3>
<p>The <code>CAASrmSynchronizeExchange2 </code>use case is made of a <strong>main</strong> 
routine in the source file <strong>CAASrmSynchronizeExchange2.cpp</strong> which 
exists at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAASRMExposedServices</code>.<code>edu\CAASrmSynchronizeExchange2.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a> </li>
	<li><a href="#Retrieve handle to interface - 1">Retrieve the handle to the Class 
	exposing the services managing the PLM Channel</a></li>
	<li><a href="#Set the options of sync">Set the Options of Synchronization</a></li>
	<li><a href="#Set the multiple BC Directory Path">Set the multiple BC Directory 
	path</a></li>
	<li><a href="#Set the report file path">Set the Report Path</a></li>
	<li>Synchronize with the published BC</li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAASrmSynchronizeExchange2 </code>use case begins by creating a session 
and connecting to the Input Repository with an appropriate role. The use case &quot;Creating 
a Basic PLM Batch&quot; [<a href="#References">8</a>] deals with Opening and Closing 
a PLM Session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve handle to interface - 1"></a>Retrieve the handle to the Class 
exposing the services managing the PLM Channel</h3>
<p>We retrieve the class pointer which exposes the services managing the PLM Channel.</p>
<pre class="code"><strong>CATPLMExchangeChannelServices* pExchangeChannelServices = new CATPLMExchangeChannelServices()</strong>;</pre>
<p>The <em>CATPLMExchangeChannelServices</em> class is instantiated the standard 
way, with a call to the new operator.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the options of sync"></a>Set the Options of Synchronization</h3>
<p>We set the option to authorize or not the creation of weakened PLM entities in 
the repository during synchronization. We also set the option on conflict.</p>
<pre class="code">CATBoolean allowWeakenedEntities = TRUE;
<strong>CATPLMExchangeChannelServices::CATPLMChannelOption optionOnConflict = CATPLMExchangeChannelServices::TakeIncoming</strong>;
rc = <strong>pExchangeChannelServices-&gt;SetOptionsForSynchronizeExchange</strong>(allowWeakenedEntities, optionOnConflict);</pre>
<p>The call to <code>SetOptionsForSynchronizeExchange</code>() of the <em>CATIPLMExchangeServices</em> 
class sets the options for synchronization.</p>
<p>There is an option to authorize or not the creation of weakened PLM entities 
in the repository during synchronization. When importing a PLM entity from a higher 
dictionary level, unknown attributes and unsupported extensions are ignored. This 
causes degradation of the PLM entity which results in a weakened entity. By default 
this option is set to FALSE, meaning the method fails if the data degradation is 
detected during synchronization. To force the creation of weakened entities, the 
option is set to TRUE.</p>
<p>The other option is to solve conflict when the briefcase to import contains data 
with a new history branch (due to repair site ownership tool). This is realized 
with an enum type, <em>CATPLMChannelOption</em> in the scope of the <em>CATIPLMExchangeServices</em> 
class. The enum defines three variables namely.</p>
<ul>
	<li><strong>ErrorOnConflict</strong>, the default setting, which outputs an 
	error on conflict</li>
	<li><strong>KeepLocal</strong>, if user wants to keep the local version of the 
	data</li>
	<li><strong>TakeIncoming</strong>, if user wants to overwrite data with the 
	new incoming one</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the multiple BC Directory Path"></a>Set the Multiple Briefcase 
Directory Path</h3>
<p>We next set the path at which the published briefcases for synchronization are 
located.</p>
<pre class="code">rc = <strong>pExchangeChannelServices-&gt;SetMultipleBriefcaseDirectoryForSynchronize</strong>(strPublishBCFilePath);</pre>
<p>The <code>SetMultipleBriefcaseParametersForSynchronize</code>() call of the
<em>CATPLMExchangeChannelServices</em> class sets this information.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Set the report file path"></a>Set the Report File Path</h3>
<p>We set the location at which the Report file is generated, as a result of the 
Publish or Synchronize operation.</p>
<pre class="code">rc =  <strong>pExchangeChannelServices-&gt;SetReportFilePath</strong>(strReportFilePath);</pre>
<p>The call to <code>SetReportFilePath</code>() of the <em>CATIPLMExchangeChannelServices</em> 
sets the Report path. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>Synchronize with the Published Briefcase</h3>
<p>We finally synchronize a list of PLM entities. The publish happens optimally 
thanks to an earlier setting of an acknowledgement file, that output by the last 
synchronization at the target site. The publish also outputs a set of Briefcase 
files, yet again, determined by a setting in an earlier step.</p>
<pre class="code">CATString ochannelId;
CATString isynchroEnv = environment;
CATUnicodeString ibriefcaseFilePath = strPublishBCFilePath + CATUnicodeString(&quot;\\&quot;) + CATUnicodeString(&quot;PublishedData.PLMBriefcase&quot;);
rc = <strong>pExchangeChannelServices-&gt;SynchronizeExchange</strong>(ibriefcaseFilePath, strAcknowledgeFilePath,isynchroEnv, ochannelId);</pre>
<p>The <code>SynchronizeExchange</code>() call of the <em>CATPLMExchangeChannelServices</em> 
class publishes the PLM entities intended for transfer to a distant site. The input 
arguments are:</p>
<ul>
	<li>
	<p><code>ibriefcaseFilePath</code>, a <em>CATUnicodeString</em> type, represents 
	the complete path of the published briefcase (a .PLMBriefcase extension) to 
	import.</p>
	</li>
	<li>
	<p><code>strAcknowledgeFilePath</code>, a <em>CATUnicodeString</em> type, a 
	file which confirms the synchronization. It captures operations done during 
	the synchronization.</p>
	</li>
	<li>
	<p><code>isynchroEnv</code>, a <em>CATString</em> type, representing the PLM 
	environment.</p>
	</li>
	<li>
	<p><code>ochannelId</code>, a <em>CATString</em> type, the unique PLM Channel 
	Identification between the local and the distant site for data transfer.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAASrmSynchronizeExchange2 </code>use case ends by simply closing the 
PLM session. Since all use cases necessarily conclude by closing the PLM session, 
we have a dedicated article on this topic namely &quot;Creating a Basic PLM Batch&quot; [<a href="#References">3</a>].
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to synchronize (import) a set of PLM entities, 
using a PLM Channel. These entities have been published from a source site and are 
synchronized at a target site, which effectively is a data-transfer. A PLM Channel 
is an exchange context created between two specific repositories in order to allow 
data exchange and ownership transfers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASrmTaSupplyChain.htm">Exchanging Data Using PLM Channel</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
