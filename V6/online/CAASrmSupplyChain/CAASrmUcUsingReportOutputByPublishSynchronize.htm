<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Using Report Output by Publish/Synchronize Operations</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Report Output by Publish/Synchronize Operations</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This use case illustrates the steps involved to access a report file 
		generated by the Publish/Synchronize operations on PLM entities, using a 
		PLM Channel. This report contains the global status of the operations performed 
		on a set of PLM entities as well as the status for each PLM entity.</p>
		<p>A PLM Channel is an exchange context created between two specific repositories 
		in order to allow data exchange and ownership transfers. Refer the Technical 
		article [<a href="#References">1</a>] for the details of PLM Channel creation 
		and Data Exchange.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASrmUsingReportOutputByPublishSynchronize 
			Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASrmUsingReportOutputByPublishSynchronize 
				Do</a></li>
				<li><a href="#How">How to Launch CAASrmUsingReportOutputByPublishSynchronize</a></li>
				<li><a href="#Where">Where to Find the CAASrmUsingReportOutputByPublishSynchronize 
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a> </li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The UC teaches an end-user the steps involved to access and read information 
stored in a Report file generated as an output of the Publish/Synchronize of PLM 
entities, using a PLMChannel.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASrmUsingReportOutputByPublishSynchronize Use Case</h2>
<p><strong><code>CAASrmUsingReportOutputByPublishSynchronize</code></strong> is a use case 
of the <code>CAASRMExposedServices.edu</code> framework that illustrates <code>PLMSRMExposedServices</code> 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASrmUsingReportOutputByPublishSynchronize Do</h3>
<p>The UC simply accesses and reads information stored in a Report file generated 
as an ouput of the Publish/Synchronize of PLM entities, using the PLMChannel.</p>
<p>It initially outputs the global status of the operation. On failure, it outputs 
the precise error ID and the error message.</p>
<p>It further iterates through the global report to retrieve the operation report 
for individual PLM entities. On success, it outputs the operation performed on the 
entity. On failure, it outputs the precise error ID and the error message.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASrmUsingReportOutputByPublishSynchronize</h3>
<p>To launch <code>CAASrmUsingReportOutputByPublishSynchronize</code>, you will 
need to set up the build time environment, then compile <strong><code>CAASrmUsingReportOutputByPublishSynchronize
</code></strong>along with its prerequisites, set up the run time environment, and then 
execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAASrmUsingReportOutputByPublishSynchronize Repository Server 
User Password SecurityCtx Envirnonment ReportFilePath&quot;</code></p>
<p>where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>Report<strong>FilePath</strong></th>
		<td>The Report File Path where the Report of the Publish/Synchronize operation 
		is saved. It is a file with a PLMBriefcaseReport extension </td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASrmUsingReportOutputByPublishSynchronize 
Code</h3>
<p>The <strong><code>CAASrmUsingReportOutputByPublishSynchronize </code></strong>use case 
is made of a <strong>main</strong> routine in the source file <strong>CAASrmReportGenerationMain.cpp</strong> 
which exists at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAASRMExposedServices.edu\CAASrmReportGeneration.m\</code></p>
<p>and a global routine which actually analyzes the report file input, defined in 
the source file <strong>CAASrmReportGeneration.cpp</strong> existing at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAASRMExposedServices.edu\CAASrmUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Prolog">Prolog</a> </li>
	<li><a href="#Retrieve handle to interface - 1">Retrieve an Interface to the 
	services accessing the PLM Channel Report</a>
	<ul>
		<li><a href="#Init the report file">Initialize the Report File</a></li>
		<li><a href="#Retrieve an interface to the global status">Retrieve an Interface 
		to the global status of the operation (Publish, Sync) </a></li>
		<li><a href="#Retrieve an interface to the global status">Retrieve the global 
		status of the operation</a></li>
		<li><a href="#Retrieve error key - 1">Retrieve the Error Key, in case of 
		failure</a></li>
		<li><a href="#Retrieve error message - 1">Retrieve the Error message, in 
		case of failure</a></li>
		<li><a href="#Retrieve Interface - 2">Retrieve an Interface on the operation 
		status on individual PLM entities</a></li>
		<li><a href="#Retrieve ID">Retrieve the Identificator of the PLM entity 
		under analysis</a></li>
		<li><a href="#Retrieve status of operation on current entity">Retrieve the 
		status of the operation on the current entity</a></li>
		<li><a href="#retrieve operation performed on current entity">Retrieve the 
		operation performed on the entity</a></li>
		<li><a href="#retrieve additional info">Retrieve the additional info on 
		this entity</a></li>
		<li><a href="#retrieve error key - 2">Retrieve the Error Key, in case of 
		failure</a></li>
		<li><a href="#retrieve error message - 2">Retrieve the Error message, in 
		case of failure</a></li>
		<li><a href="#identify if its failure by propagation">Identify if it is 
		failure by propagation or not</a></li>
	</ul>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <strong><code>CAASrmUsingReportOutputByPublishSynchronize</code> </strong>use case 
begins by creating a session and connecting to the Input Repository with an appropriate 
role. The use case &quot;Creating a Basic PLM Batch&quot; [<a href="#References">8</a>] deals 
with Opening and Closing a PLM Session.</p>
<p>The main routine then simply calls the global routine <code>CAASrmReportGeneration</code>() 
which processes the Report, input to it as an argument. This routine is detailed 
further split in the sections that follow.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve handle to interface - 1"></a>Retrieve an Interface to the 
services accessing the PLM Channel Report</h3>
<p>We retrieve an Interface to service which allows access to the PLM Channel Report.</p>
<pre class="code">CATIPLMChannelReportServices* piPLMChannelReportServices<strong> </strong>= NULL;
HRESULT rc = <strong>GetCATIPLMChannelReportServices</strong>(piPLMChannelReportServices); </pre>
<p>The global routine <code>GetCATIPLMChannelReportServices</code>() returns a
<em>CATIPLMChannelReportServices</em> type, an Interface to the services which allow 
access to the PLM Channel report.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Init the report file"></a>Initialize the Report File</h3>
<p>The initialization of the report file, unsrambles it and loads its contents in 
the current session.</p>
<pre class="code">rc = <strong>piPLMChannelReportServices-&gt;InitReport</strong>(iReportFilePath);</pre>
<p>The <code>InitReport</code>() call of the <em>CATIPLMChannelReportServices</em> 
Interface initializes the report file input. The Report file (path inclusive) is 
input as a <em>CATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve an interface to the global status"></a>Retrieve an Interface 
to the global status of the Publish/Sync operation </h3>
<p>An Interface to the global status of the Publish/Synchronize operation is retrieved 
here.</p>
<pre class="code">CATIPLMChannelReportGlobal* oReportGlobal = NULL;
rc = <strong>piPLMChannelReportServices-&gt;GetChannelReportGlobal</strong>(oReportGlobal);</pre>
<p>The <code>GetChannelReportGlobal</code>() of the <em>CATIPLMChannelReportServices</em> 
Interface returns the global status as a <em>CATIPLMChannelReportGlobal</em>* type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve error key - 1"></a>Retrieve the Error Key, on failure</h3>
<p>In case of failure of the Publish/Synchronize operation, the error key, which 
precisely identifies the error, is retrieved.</p>
<pre class="code">CATString oErrorKey;
rc = <strong>oReportGlobal-&gt;GetErrorKey</strong>(oErrorKey);</pre>
<p>The <code>GetErrorKey</code>() call of the <em>CATIPLMChannelReportGlobal</em> 
Interface returns the error key, as a <em>CATString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve error message - 1"></a>Retrieve the Error message, on failure</h3>
<p>In case of failure of the Publish/Synchronize operation, the error message is 
retrieved. The localization is determined by the location where the original operation 
was performed.</p>
<pre class="code">CATUnicodeString strErrorMsg;
rc = <strong>oReportGlobal-&gt;GetOriginalErrorMessage</strong>(strErrorMsg);</pre>
<p>The <code>GetOrigninalErrorMessage</code>() call of the <em>CATIPLMChannelReportGlobal</em> 
Interface returns the error message, as a <em>CATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve Interface - 2"></a>Retrieve an Interface to the status of 
the operations on individual PLM entities</h3>
<p>It next iterates through the report to retrieve the status of operation on individual 
PLM entities.</p>
<pre class="code"><strong>CATIPLMChannelReportData* oReportData = NULL</strong>;
while (S_OK == <strong>piPLMChannelReportServices-&gt;GetNextChannelReportData</strong>(oReportData))</pre>
<p>The <code>GetNextChannelReportData</code>() call on the <em>CATIPLMChannelReportServices</em> 
Interface, retrieves the status of the operation on individual PLM entities, as 
a <em>CATIPLMChannelReportData</em>* type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve ID"></a>Retrieve the Identificator of the PLM entity under 
analysis</h3>
<p>It then retrieves the Identificator of the PLM entity, currently under analysis.</p>
<pre class="code">CATIAdpPLMIdentificator* oObjectId = NULL;
rc = <strong>oReportData-&gt;GetObjectId</strong>(oObjectId);</pre>
<p>The <code>GetObjectId</code>() call of the <em>CATIPLMChannelReportData</em> 
Interface, retrieves the PLM identificator as a <em>CATIAdpPLMIdentificator</em>* 
type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve status of operation on current entity"></a>Retrieve the status 
of operation on the current entity</h3>
<p>It then retrieves the status of the operation on individual PLM entity.</p>
<pre class="code"><strong>CATIPLMChannelReportData::CATPLMChannelOperationStatus oPLMChannelOperationStatus</strong>;
rc = <strong>oReportData-&gt;GetOperationStatus</strong>( oPLMChannelOperationStatus);
if (SUCCEEDED(rc) &amp;&amp; (<strong>CATIPLMChannelReportData::Success == oPLMChannelOperationStatus</strong>))
     ...
else if (SUCCEEDED(rc) &amp;&amp; (<strong>CATIPLMChannelReportData::Failure == oPLMChannelOperationStatus</strong>))
     ...</pre>
<p>The <code>GetOperationStatus</code>() call of the <em>CATIPLMChannelReportData</em> 
Interface returns the operation status, as a <em>CATPLMChannelOperationStatus</em> 
type, an enum declared inside the scope of the <em>CATIPLMChannelReportData</em> 
class.</p>
<p>The enum declares <strong>Success</strong> and <strong>Failure</strong> as the 
two variables, representing the success or failure of the operations on individual 
PLM entities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="retrieve operation performed on current entity"></a>Retrieve the Operation 
performed on the current entity</h3>
<p>It then retrieves the operation performed on the current PLM entity.</p>
<pre class="code"><strong>CATIPLMChannelReportData::CATPLMChannelOperationType oChannelOperationType</strong>;
rc = <strong>oReportData-&gt;GetPerformedOperation</strong>(oChannelOperationType);</pre>
<p>The <code>GetPerformedOperation</code>() call of the <em>CATIPLMChannelReportData</em> 
Interface retrieves the operation performed type, as a <em>CATPLMChannelOperationType</em> 
type, an enum defined in the scope of the <em>CATIPLMChannelReportData</em> class.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="retrieve additional info"></a>Retrieve the additional info on this 
entity</h3>
<p>The additional info of the PLM entity is retrieved here.</p>
<pre class="code">CATListOfCATUnicodeString oAdditionalInfos;
rc = <strong>oReportData-&gt;GetAdditionalInfo</strong>(&amp;oAdditionalInfos);
if (SUCCEEDED(rc))
{
     CATUnicodeString strAddInfo;
     for (int i=1; i&lt;=oAdditionalInfos.Size(); i++)
     {
          strAddInfo = oAdditionalInfos[i];
          cout &lt;&lt; &quot;The additional info is &quot; &lt;&lt; strAddInfo.ConvertToChar() &lt;&lt; endl;
     }
}</pre>
<p>The <code>GetAdditionalInfo</code>() of the <em>CATIPLMChannelReportData</em> 
class, returns the additional info as a <em>CATListOfCATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="retrieve error key - 2"></a>Retrieve the Error Key, in case of failure</h3>
<p>In case of failure of the Publish/Synchronize operation, the error key, which 
precisely identifies the error, is retrieved.</p>
<pre class="code">CATString oErrorKey;
rc = <strong>oReportData-&gt;GetErrorKey</strong>(oErrorKey);</pre>
<p>The <code>GetErrorKe</code>y() call of the <em>CATIPLMChannelReportData</em> 
Interface returns the error key, as a <em>CATString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="retrieve error message - 2"></a>Retrieve the Error message, in case 
of failure</h3>
<p>In case of failure of the Publish/Synchronize operation, the error message is 
retrieved. The localization is determined by the location where the original operation 
was performed.</p>
<pre class="code">CATUnicodeString strErrorMsg;
rc = <strong>oReportData-&gt;GetOriginalErrorMessage</strong>(strErrorMsg);</pre>
<p>The <code>GetOriginalErrorMessage</code>() call of the <em>CATIPLMChannelReportData</em> 
Interface returns the error message, as a <em>CATUnicodeString</em> type.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="identify if its failure by propagation"></a>Identify if it is a failure 
by propagation or not</h3>
<p>Here we identify if a failure occurs owing to propagation or not. In other words, 
if the current PLM entity itself is responsible for the failure or it occurred owing 
to an error propagation from up above the hierarchy.</p>
<pre class="code"><strong>CATIPLMChannelReportData::CATPLMChannelOperationPropagationStatus oChannelOperationPropagationStatus</strong>;
rc = <strong>oReportData-&gt;GetErrorPropagationStatus</strong>(oChannelOperationPropagationStatus);
if (SUCCEEDED(rc) &amp;&amp; (<strong>CATIPLMChannelReportData::Error == oChannelOperationPropagationStatus</strong>))
     cout &lt;&lt; &quot;It IS NOT AN error by propagation&quot; &lt;&lt; endl;
else if (SUCCEEDED(rc) &amp;&amp; (<strong>CATIPLMChannelReportData::ErrorByPropagation == oChannelOperationPropagationStatus</strong>))
     cout &lt;&lt; &quot;It IS AN error by propagation&quot; &lt;&lt; endl;</pre>
<p>The <code>GetErrorPropagationStatus</code>() call of the <em>CATIPLMChannelReportData</em> 
Interface returns the error propagation status, as a <em>CATPLMChannelOperationPropagatonStatus</em> 
type, an enum defined in the scope of the <em>CATIPLMChannelReportData</em> class. 
The enum defines <strong>Error</strong> and <strong>ErrorByPropagation</strong> 
as the two values, defining the failure types.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <strong><code>CAASrmUsingReportOutputByPublishSynchronize</code></strong> use case 
ends by simply closing the PLM session. Since all use cases necessarily conclude 
by closing the PLM session, we have a dedicated article on this topic namely &quot;Creating 
a Basic PLM Batch&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved to access and read information stored inside 
a Report file generated by the Publish/Synchronize operation on PLM entities, using 
the PLM Channel. A PLM Channel is an exchange context created between two specific 
repositories in order to allow data exchange and ownership transfers.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAASrmTaSupplyChain.htm">Exchanging Data Using PLM Channel</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Creating a Basic PLM Batch</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
