<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Querying and Loading a PLM Component Using Object Selection</title>
<style type="text/css">
.style1 {
	background-color: #F9F9F9;
}
</style>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Querying and Loading a PLM Component Using Object 
		Selection</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>A PLM object selection is a UI to search for a PLM Entity from an underlying 
		database and load it in the current session. The Technical Article &quot;<strong>Understanding 
		a PLM object selection</strong>&quot; provides an indepth explanation of concepts 
		associated with an object selector. [<a href="#References">1</a>]</p>
		<p>This Use Case illustrates the steps involved in customizing an &quot;Object 
		Selection&quot; dialog panel. The services provided by the <code>CATPLMUIInterfaces</code> 
		framework set the PLM Entity type queried for and the search criteria (attribute-value 
		set) </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAIpmObjectSelector Use Case</a>
			<ul>
				<li><a href="#What">What does CAAIpmObjectSelector do ?</a></li>
				<li><a href="#How">How to Launch CAAIpmObjectSelector ?</a></li>
				<li><a href="#Where">Where to Find the CAAIpmObjectSelector code 
				?</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Use case teaches us to deploy the CAA Openness (<code>CATPLMUIInterfaces</code> 
Interfaces) to:</p>
<ul>
	<li>Create a PLM object selection</li>
	<li>Predefine a scope of PLM Entity search (PLM type) and 
	to build a search criteria (Attribute-value sets)</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAIpmObjectSelector Use Case</h2>
<p><code>CAAIpmObjectSelector</code> is a use case of the <code>CAAPLMUIInterfaces.edu</code> 
framework that illustrates the <code>CATPLMUIInterfaces</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAIpmObjectSelector Do?</h3>
<p>The goal of <code>CAAIpmObjectSelector</code> Use Case is to deploy the Openness 
provided by CAA, to create an object selection, a UI for selecting a PLM Entity 
from an underlying PLM database, customized to specific user requirements. In this 
UC, the customization involves, to query for a <code>VPMReference</code> type which 
conforms to the search criteria defined by the <code>PLM_ExternalID</code> and
<code>owner</code> attribute and its wildcard value set. </p>
<p>It integrates a <strong>General</strong> <strong>Workshop AddIn</strong> in
<strong>CATIA</strong> (&quot;<strong>Select and Load PLM Entity</strong>&quot; command, in 
the &quot;<strong>CAA VPLM object selection</strong>&quot; toolbar, detailed in the &quot;<strong>How 
to Launch</strong>&quot; section that follows) which implements this CAA Customization.</p>
<p>We now run through the Use Case scenario. </p>
<ul>
	<li>On click of command, it launches the Object Selection dialog box [<a href="#Fig1">Fig. 
	1</a>]. The attributes displayed in this panel, are those defined by the &quot;<strong>Read</strong>&quot; 
	mask of the PLM Entity type being queried for.<table>
		<caption><a name="Fig1"></a>Fig. 1 Object Selection Dialog Box</caption>
		<tr>
			<td>
			<img alt="" src="images/CAAPLMObjectSelectorUC_Fig1.png" width="606" height="481"></td>
		</tr>
	</table>
	</li>
	<li>Click &quot;<strong>Advanced Search</strong>&quot; and the panel depicted below [<a href="#Fig.2">Fig. 
	2</a>] appears. The attributes displayed in this panel are those defined by 
	the <strong>EZQuery</strong> mask of the PLM Entity type being searched for.<br>
	<table>
		<caption><a name="Fig.2"></a>Fig. 2 &quot;Advanced Search&quot; Panel</caption>
		<tr>
			<td>
			<img alt="Advanced Search Panel" src="images/CAAPLMObjectSelectorUC_Fig2.png"></td>
		</tr>
	</table>
	<p>As the panel above depicts, we query for a <code>VPMReference</code> type 
	and the <code>PLM_ExternalID</code> (<code>Part Number</code>) attribute-value 
	set, hardcoded in the customization, define the search criteria here. The attribute-value 
	sets could be anything, meaning these are not restricted to only those defined 
	by the <strong>EZQuery</strong>/<strong>Read</strong> mask. </p>
	<p>For the UC, we have restricted the object scope of search to only a <code>
	VPMReference</code> type, but it can be further relaxed to include <code>Product 
	(Abstract)</code> type, as well (see &quot;<a href="#Define the type of PLM Entity for Query">Define 
	the Object Scope of Search</a>&quot; in step by step)</p>
	<p>Since, <code>owner</code> (Responsible) attribute is not defined by the
	<strong>EZQuery</strong> mask of a <code>VPMReference</code> type, it does not 
	appear in the &quot;Search Criteria&quot; panel below, but it is necessarily taken into 
	account when the query is run, subsequently. If user relaxes the object scope 
	of search to include Product (Absract) types as well, which has the <code>owner</code> 
	attribute in the scope of its EZQuery mask, the attribute will be seen in the 
	search panel, as well as taken into account by the query.</p>
	<p>Please read the &quot;Define the Query&quot; section, which dwells further on this 
	subject.</p>
	</li>
	<li>On running the query, the object selection panel lists the output [<a href="#Fig. 3">Fig. 
	3</a>]. Please note the 'owner' attribute value for the query is that set by 
	the user for the <strong>CAAObjectSelectorUserValue</strong> environment variable, 
	in CATIA console. Refer the How to Launch section, for further details.<table>
		<caption><a name="Fig. 3"></a>Fig. 3 Object Selection Panel with the List 
		Output by Query</caption>
		<tr>
			<td>
			<img alt="" src="images/CAAPLMObjectSelectorUC_Fig3.gif" width="871" height="395"></td>
		</tr>
	</table>
	</li>
	<li>The user proceeds to select the item from the list. Next on &quot;<strong>OK</strong>&quot; 
	click, the chosen PLM Entity is loaded in the current session, in Authoring 
	(ExpandAll) mode.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAIpmObjectSelector ?</h3>
<p>To launch <code>CAAIpmObjectSelector</code> , you will need to set up the build 
time environment, then compile <code>CAAIpmObjectSelector</code> along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">1</a>] 
in the following way: </p>
<ul>
	<li>Set the current directory to <code>InstallRootDirectory/CAAPLMUIInterfaces.edu</code>
	</li>
	<li>Set up the build time environment and build the <code>CAAIpmPLMToolbar.m, 
	CAAIpmObjectSelector.m </code>module (see reference <a href="#[1]">[1]</a>)
	</li>
	<li>Edit the <code>CNext/code/dictionary/CAAPLMUIInterfaces.edu.dico</code> 
	dictionary. Be sure that the #CAA# uncommented from the following lines :
	<table class="code">
		<tr>
			<td>
			<pre>
#CAA# CATPLMToolBarAddinType  CATIAfrGeneralWksAddin	libCAAIpmPLMToolbar
#CAA# CATPLMToolBarAddinType  CATIWorkbenchAddin       libCAAIpmPLMToolbar </pre>
			</td>
		</tr>
	</table>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code>
	</li>
	<li>
	<p>The input model is retrieved by importing the </p>
	<table id="table15">
		<tr>
			<td><code>InstallRootDirectory\CAAPLMUIInterfaces.edu\InputData\<a>CAAP</a>LMObjectSelector.3dxml</code></td>
		</tr>
	</table>
	<p>where <code>InstallRootDirectory</code> [<a href="#References">1</a>] is 
	the directory where the CAA CD-ROM is installed.</p>
	<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
	<ul>
		<li><a><code>PLM_ExternalID</code></a>: <a><code>CAA</code></a><code>PLMObjectSelector_Root</code></li>
		<li><a><code>Version</code></a>: ---</li>
	</ul>
	<p>Please use the 3DXML provided with this UC, since it has all the data essential 
	for the UC to illustrate the object selection concepts. Import this 3D XML file, 
	modify the code to take into the account the PLM_ExternalID of the newly imported 
	component and proceed with the UC execution</p>
	<p><b>Attention</b>: Please refer to the document [<a href="#References">1</a>] 
	for how to import and reimport such a 3D XML file in your PLM repository</p>
	</li>
	<li>
	<p>Set the environment variable <code>CAAObjectSelectorUserValue</code> to your 
	ENOVIA Login ID. The customization code valuates <code>'owner'</code> attribute 
	with the value of this environment variable, to be used as a query criteria</p>
	</li>
	<li>Start <code>CATIA</code> by executing <code>mkrun</code>, essentially in 
	the same console where you have set the Environment variable above</li>
	<li>Display your toolbar named &quot;<strong>CAAPLMCommandsToolbar</strong>&quot;, 
	if necessary through the <i><strong> Action bar</strong></i>:
	<table>
		<caption><a name="Fig.4"></a>Fig. 4 Action bar Menu</caption>
		<tr>
			<td>
			<img alt="View / Toolbar Menu" src="images/CAAIpmObjectSelector01.png"></td>
		</tr>
	</table>
	</li>
	<li>Click on the &quot;<strong>Select and Load PLM Entity</strong>&quot; command within 
	the above toolbar. Refer the previous &quot;<strong>What does the UC do</strong>&quot; 
	section for steps to proceed further.
	<table>
		<caption><a name="Fig.5"></a>Fig. 5 Object Selection Command</caption>
		<tr>
			<td>
			<img alt="" src="images/CAAPLMObjectSelectorUC_Fig5.png" width="240" height="115"></td>
		</tr>
	</table>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where">Where to Find the </a>CAAIpmObjectSelector <a name="Where">Code</a></h3>
<p>The <code>CAAIpmObjectSelector</code> sample is made of a single class named
<code>CATPLMObjSelectorCAATstCmd</code> located in the <code>CAAIpmObjectSelector.m</code> 
module of the <code>CATPLMUIInterfaces.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAPLMUIInterfaces.edu\CAAIpmObjectSelector.m\</code></p>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<p>This command is referenced by a toolbar. You can find the sample of the creation 
of this toolbar in the following folder:</p>
<p><code>InstallRootFolder\CAADoc\CAAPLMUIInterfaces.edu\CAAIpmPLMToolbar.m\</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Here are the eight steps to follow for using the PLMObjectSelector:</p>
<ol>
	<li><a href="#Retrieve the Object Selector Factory">Retrieving the Object Selector 
	Factory</a></li>
	<li><a href="#Define the type of PLM Entity for Query">Defining the Type of 
	PLM Entity for Query (Object scope of search)</a></li>
	<li><a href="#Define the Query">Define the Query</a></li>
	<li><a href="#Create the Object Selector">Create the object selection</a></li>
	<li><a href="#Launch Object Selector">Launch object selection</a></li>
	<li><a href="#Load selected PLM Entity in Session">Load selected Entity in session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the Object Selector Factory"></a>Retrieving the Object Selector 
Factory</h3>
<p>The object selection is created and managed in our <code>CATCommand</code> constructor. 
The first step involves retrieving a factory which lets us create an object selection.</p>
<pre class="code"><strong>CATPLMObjSelectorCAATstCmd::CATPLMObjSelectorCAATstCmd()</strong>
: CATCommand(&quot;PLMObjSelectorCAATstCmd&quot;,CATCommandModeUndefined)
{
	CATIPLMObjectSelectorFactory * piPLMObjectSelectorFactory = NULL;
<strong>	CATIPLMObjectSelectorServices::GetPLMObjectSelectorFactory(piPLMObjectSelectorFactory)</strong>;
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>Take care, it is your responsibility to handle the lifecycle (release) of the 
factory pointer returned here. You&#39;ll find the factory is released immediately after 
the creation of the Object Selection happens in the &quot;<strong>Create the Object Selection</strong>&quot; 
step below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Define the type of PLM Entity for Query"></a>Define the Type of PLM 
Entity for Query</h3>
<p>A wider scope of search for the PLM Entity is being set here. </p>
<pre class="code">...
  char* i<span class="style1">PLMType</span> = &quot;<strong>VPMReference</strong>&quot;;
  <strong>CATIType_var</strong> spCATIType; 
  CATCkePLMNavPublicServices::<strong>RetrieveKnowledgeType</strong>(iPLMType ,spCATIType);
  _piPLMObjectSelector -&gt;<strong>SetObjectScopeFromType</strong>(spCATIType);
....</pre>
<p>We search specifically for a VPMReference type. It is a PLM Entity type we arrive 
at, when the Object Scope is set as a <code>VPMReference</code> of the PRODUCT 
Modeler. </p>
<p>This method <code>SetObjectScopeFromType </code>of <em>CATIPLMObjectSelector</em> 
considers <em>CATIType</em> type and sets the object scope. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Define the Query"></a>Define the Query (Attribute-Value sets)</h3>
<p>We build a &quot;part&quot; of the query with a list of Attribute-Value pairs, in the customization 
code. The query is further updated with the attribute-value sets, input through 
the &quot;Advanced Search&quot; panel. These attributes listed in the &quot;Advanced Search&quot; panel 
are those defined by the EZQuery mask for the PLM Entity type being queried. The 
PLM object selection is initialized with this select clause.</p>
<pre class="code">...
      CATCkeGlobalFunctions::InitializeLiteralsEnvironment();
	CATCkeListOfParm ListOfCkePLMAttributes = new CATCkeListOf(Parm); 
	CATICkeParmFactory_var spCkeParmFactory = CATCkeGlobalFunctions::GetVolatileFactory(); 
...
</pre>
<p>We deal with building a string parameters in this section, and the normal tendency 
could be to begin this section with a call CATCkeGlobalFunctions::InitializeLiteralsEnvironment. 
But a word of caution here. This call is absolutely not essential while we deal 
with the PLM Attributes. The code extract above includes this call with a strikethrough, 
to emphasize the fact that the call is conspicuous by its absence.</p>
<pre class="code">...
	CATICkeParm * piCke= NULL;
	C<strong>ATICkeParm_var spCkeParmForID = spCkeParmFactory-&gt;CreateString(&quot;PLM_ExternalID&quot;,
	                                                    &quot;CAAPLMObjectSelector_Root*&quot;)</strong>; 
...</pre>
<p>This step builds an attribute-value set. The <code>PLM_ExternalID</code> value 
is set to &quot;<code>CAAPLMObjectSelector_Root</code>*&quot;, which partly builds our search 
criteria.</p>
<pre class="code">...
<strong>	CATICkeParm::UserAccessMode WantedRights = CATICkeParm::ReadOnly;
	</strong><strong>spCkeParmForID </strong><strong>-&gt; SetUserAccess (WantedRights); 
</strong>	ListOfCkePLMAttributes-&gt;Append(spCkeParmForID);
...</pre>
<p>We set the access permissions for the attribute-values in the search panel for 
an end user. The <code>PLM_ExternalID</code> is set in <code>ReadOnly</code> (uneditable) 
mode. The &quot;<strong>What does the UC do</strong>&quot; section, depicts the &quot;Name&quot; (<code>PLM_ExternalID</code>) 
field, set as uneditable (grayed out). </p>
<p>Please note that the &quot;access mode&quot; we refer to here is in the context of an attribute 
value set as a search criteria, which is essentially different from the &quot;access 
mode&quot; of an attribute value associated with a PLM entity. (For eg. <code>
'owner'</code> 
attribute is &quot;read only&quot; for an end-user, while it could be set as &quot;editable&quot; in 
the search panel)</p>
<pre class="code">...	
	char * pEnoviaUser = NULL ;
         CATLibStatus result = ::CATGetEnvValue(&quot;CAAObjectSelectorUserValue&quot;,&amp;pEnoviaUser);  

         CATUnicodeString strEnoviaUser;
...	strEnoviaUser = pEnoviaUser ;
        
         CATICkeParm_var  spCkeParmForUser =  spCkeParmFactory-&gt;CreateString(&quot;owner&quot;, strEnoviaUser);
<strong>         CATICkeParm::UserAccessMode wantedRightsForUser= CATICkeParm::ReadWrite;
</strong>       <strong>  spCkeParmForUser-&gt;SetUserAccess(wantedRightsForUser)</strong>;
       <strong>  ListOfCkePLMAttributes-&gt;Append(spCkeParmForUser)</strong>;
...</pre>
<p>We further append our search criteria with an attribute-value set for 'owner'. 
The value for 'owner' is read from an environment variable <code>CAAObjectSelectorUserValue</code> 
set in your CATIA console (see &quot;<strong>How to Launch</strong>&quot; section). </p>
<p>A significant point to note is that we do not set the access permissions for 
the 'owner' attribute value in the &quot;Advanced Search&quot; panel. It is redundant in this 
context, since in an earlier step the object scope of search was set to a <code>
VPMReference</code> type. Now this type does not include 'owner' in its EZQuery mask 
scope. As a result 'owner' does not appear in its search panel, thus rendering the 
question of setting its access permissions irrelevant.</p>
<p>Ofcourse, if the object scope of search was set to Product(Abstract) type then 
the <code>CATICkeParm::SetUserAccess </code>call is indeed relevant, since <code>
'owner'</code> is EZQuery masked for a <code>Product(Abstract)</code> type and hence 
does appear in its &quot;Advanced Search&quot; panel.</p>
<pre class="code">...	
<strong>      rc = _piPLMObjectSelector -&gt;  SetAttributesScope( ListOfCkePLMAttributes);</strong>
</pre>
<p>Finally we have a call to the <code>CATIPLMObjectSelector::SetAttributeScope()</code> 
API. An <strong>important point to note</strong> in this context is:</p>
<p>Any attribute-value set could define the scope of our query. The PLM Security 
Mask has no affect. But if our attribute-value set is defined by the EZQuery mask 
of the PLM Entity type queried for, then this attribute is displayed in the &quot;Advanced 
Search&quot; panel, while otherwise it is not. In either case though, it is certainly 
taken into account when the query is run. Ofcourse, the access mode of our attribute-value, 
set with a call to SetUserAccess is only relevant when the attribute is visible 
in the Advanced Search panel.</p>
<p>For eg. <code>'owner'</code> (Responsible) is defined by the EZQuery mask for 
PRODUCT (ABSTRACT).</p>
<table>
	<caption><a name="Fig.6"></a>Fig. 6 Search Panel for Product (Abstract) Type</caption>
	<tr>
		<td>
		<p>
		<img alt="Search Panel for Product (Abstract) Type" src="images/CAAPLMObjectSelectorUC_img6.png" width="245" height="359"></p>
		</td>
	</tr>
</table>
<p>Hence this attribute is displayed in the &quot;<strong>Search Criteria</strong>&quot; panel 
for Product (abstract) [<a href="#Fig.6">Fig.6</a>] and when we run the query (search) 
it does take the <code>'owner'</code> attribute into account.</p>
<table>
	<caption><a name="Fig.7"></a>Fig. 7 Query Output</caption>
	<tr>
		<td>
		<img alt="Query Output" src="images/CAAPLMObjectSelectorUC_img9.png" width="620" height="180"></td>
	</tr>
</table>
<p>As a result, the PLM Entities listed in the Object Selection panel, [<a href="#Fig.7">Fig.7</a>] 
as an output of that query, consist of only those Product References created by 
user &quot;<strong>odtitp</strong>&quot; (For users, it would be their login User ID, the 
one that they set for the environment variable <code>CAAObjectSelectorUserValue</code>)</p>
<table>
	<caption><a name="Fig.8"></a>Fig. 8 Search Panel for VPMReference Type</caption>
	<tr>
		<td>
		<img alt="Search Panel for VPMReference Type" src="images/CAAPLMObjectSelectorUC_img7.png" width="245" height="359"></td>
	</tr>
</table>
<p>On the other hand, <code>'owner'</code> (Responsible) attribute is not defined 
by the EZQuery mask for <code>VPMReference</code>. Hence this attribute is not displayed 
in the &quot;Search Criteria&quot; panel [<a href="#Fig.8">Fig.8</a>] but is still taken into 
account when the query is subsequently run. Hence the output list is the same as 
depicted in [<a href="#Fig.7">Fig.7</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create the Object Selector"></a>Create the object selection</h3>
<pre class="code">CATDialog* MainWindowAsFatherDialog = CATApplicationFrame::GetApplicationFrame()-&gt;GetMainWindow();
CATString DialogTitle(&quot;MyObjectSelectorId&quot;);
rc = <strong>piPLMObjectSelectorFactory-&gt;CreateObjectSelector</strong> (MainWindowAsFatherDialog,
						DialogTitle,
					        _piPLMObjectSelector);
    piPLMObjectSelectorFactory-&gt;Release();
    piPLMObjectSelectorFactory = NULL;
....</pre>
<p>The Factory component retrieved earlier provides a service to create an Object 
Selection panel. The Application Frame (<code>MainWindowAsFatherDialog</code>, a
<code>CATDialog*</code> type) is set as the parent of our object selection dialog.
<code>DialogTitle</code>, a <code>CATString</code> type, a character string, an 
Identifier for the Object Selector dialog panel. Quite contrary to the general case, 
this Identifier string is not accessed to manage the resources (NLS) associated 
with a dialog box. It however facilitates the Object Selector with internal management 
other than the NLS.</p>
<p>The factory is released then, now that it is no longer required.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Launch Object Selector"></a>Launch object selection </h3>
<pre class="code">....
	CATCommand* pCmd = NULL;
	<strong>_piPLMObjectSelector-&gt;StartCommand(pCmd)</strong>;
	<strong>pCmd-&gt;SetFather(this)</strong>;
....</pre>
<p>An object selection is a dialog command. The notifications sent by the object 
selection, are handled by our <code>CATCommand</code>, which is set as a father 
of the object selection with a call to <code>CATIPLMObjectSelector::SetFather(this)</code>.
</p>
<p>Our <code>CATCommand</code> subscribes for the object selection notifications, 
such that in response to those, it triggers corresponding actions.</p>
<pre class="code">....CATNotification * pOKNotif = NULL;
<strong>_piPLMObjectSelector-&gt;GetSelectionEndedNotification(pOKNotif)</strong>;
CATNotification * pCancelNotif = NULL;
<strong>_piPLMObjectSelector-&gt;GetSelectionCancelledNotification(pCancelNotif)</strong>;

<strong>AddAnalyseNotificationCB</strong> ( 	pCmd, 
			<strong>pOKNotif</strong>, 
			(CATCommandMethod)&amp;<strong>CATPLMObjSelectorCAATstCmd::OnEndNotification</strong>, 
			NULL );
<strong>AddAnalyseNotificationCB</strong> ( 	pCmd, 
			<strong>pCancelNotif</strong>, 
			(CATCommandMethod)&amp;<strong>CATPLMObjSelectorCAATstCmd::OnCancelAction</strong>, 
			NULL ); 
...
</pre>
<p>On object selection &quot;<code>OK</code>&quot; click, the action <code>OnEndNotification</code> 
is invoked. It retrieves the user selection (PLM Entity identified by the user in 
the list output by the query) and loads it in the current session.</p>
<p>On object selection &quot;<code>CANCEL</code>&quot; click, the action <code>OnCancelAction</code> 
is invoked. It simply destroys our <code>CATCommand</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Load selected PLM Entity in Session"></a>Load selected PLM Entity in 
Session</h3>
<pre class="code"> ...
      void <strong>CATPLMObjSelectorCAATstCmd::OnEndNotification</strong>( CATCommand* cmd, 
                                                    CATNotification* evt, 
                                                    CATCommandClientData data )
...
      rc = <strong>_piPLMObjectSelector-&gt;GetSelection(pBaseComp)</strong>;
      CATOmbLifeCycleRootsBag Bag;
      rc= Bag.InsertRoot(pBaseComp);
 ...
      rc = <strong>NavigateThroughSelectedComp</strong>(pBaseComp);
      ...
      pBaseComp-&gt;Release();
      pBaseComp=NULL;
      ...
      Bag.RemoveAll();
 				</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>The call to <code>CATIPLMObjectSelector::GetSelection(CATBaseUnknown*&amp;)</code> 
retrieves a PLM Entity, selected by an end-user in the object selection panel and 
loads it in session. The PLM Entity is loaded in Authoring (ExpandAll) mode in session. 
We confirm this with the call to <code>NavigateThroughSelectedComp</code> routine. 
It navigates down the product hierarchy of the input PLM Entity, and confirms that 
Product Instances and Rep Instances, which together build our product model, are 
all loaded in the current session.</p>
<p>Yet again, as we always recommend, on loading our PLM entity in session, we insert 
it in a BAG dedicated exclusively for our application, which handles its lifecycle. 
Our PLM Entity thus remains in session, as long our application requires access 
to it.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A PLM object selection is a UI to search for a PLM Entity from an underlying 
database, retrieve it and load it (Authoring mode) in the current session.</p>
<p>This Use Case illustrates the steps involved in accessing the services exposed 
by the PLM UI Management Interfaces (<code>CATPLMUIInterfaces</code>) to create 
this object selection. The CAA Openness also enables an end user to initialize (hardcode) 
the scope of search (Modeler, Custo, PLMCore type) and the search criteria (attribute 
value sets)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="[1]">[1]</a></td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAIpmTaPLMNew.htm">Understanding PLM New Command</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm'); return false;">
		Creating an Add-in</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Mar 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: 2 [Apr 2008]</td>
		<td>Document updated</td>
	</tr>
	<tr>
		<td>Version: 3 [Mar 2009]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
