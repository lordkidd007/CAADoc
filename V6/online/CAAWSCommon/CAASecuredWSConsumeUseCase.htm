<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Consuming a Web Service Secured by WS-Security in WebSphere and WCF</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Consuming a Web Service Secured by WS-Security in 
		WebSphere and WCF</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to be able to consume the <strong>ping</strong> 
		web service in a secured environment, where SOAP messages are encrypted 
		and signed, thanks to WS-Security implementations provided by Microsoft 
		WCF Framework and IBM WebSphere application server.</p>
		<ul>
			<li><a href="#1">What You Will Learn With This Use Case</a></li>
			<li><a href="#2">Preliminary Steps</a></li>
			<li><a href="#3">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="1"></a>What You Will Learn With This Use Case</h2>
<p>This use case relies on the <strong>ping</strong> web service, described in the
<i>&quot;Building and Launching a Web Service&quot;</i> Use Case [<a href="#References">1</a>]. 
Only the wsdl file changes slightly, due to improvement in WCF SOAP Fault mechanisms.</p>
<p>The differences, on the client side, will mainly consist in configuring the environment 
around the web service code itself, in order to take benefit of automatic signature 
and encryption of SOAP Messages, provided by the WS-Security implementation.</p>
<p>In the current article, we will focus on this aspect only.</p>
<p>This use case will show you how to configure the WCF web service client in two 
scenarios:</p>
<ol>
	<li><strong>Scenario 1</strong>: The web service implementation is running in 
		a WCF environment , and secured with the WSHttpBinding ( default binding 
		for WS-Security in WCF).</li>
	<li><strong>Scenario 2</strong> (&quot;Interoperability scenario&quot;): The 
		web service has been deployed in a Websphere Application Server, enhanced 
		with the Feature Pack For Web Services, and secured with a customized binding, 
		using keys and certificates.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="2"></a>Preliminary Steps</h2>
<ul>
	<li>You first have to get certificates and keys, which are necessary for signature 
		and encryption mechanisms. Those certificates must have been generated by 
		a Certificate Authority. </li>
	<li>They must be compliant with entities that have been used on Application 
		Servers side.</li>
	<li>The ping web service implementation must have been deployed and secured 
		in the application server (see [<a href="#References">2</a>] for scenario 
		1, [<a href="#References">3</a>] for scenario 2).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="3"></a>Step-by-Step</h2>
<p>The following section first describes how to set up your project, then how to 
import the use case code samples, and finally how to build the project. It then 
explains how to launch the related use case scenario. Note again that we just show 
a simple way to.</p>
<ol>
	<li><a href="#30">Prerequisites</a></li>
	<li><a href="#31">Provided Materials</a></li>
	<li><a href="#32">Setting Up a New Visual Studio Project</a></li>
	<li><a href="#33">Writing the Client Code</a></li>
	<li><a href="#34">Building the Use Case Code Samples</a></li>
	<li><a href="#35">Launching the Use Case Scenario</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="30"></a>Prerequisites</h3>
<p>Before you start your web service client project, you MUST have generated the 
client proxy for the <strong>IPingService</strong> web service, using the<strong> 
svcutil.exe</strong> tool, delivered with the WCF (Windows Communication Foundation) 
SDK. The command should look like:</p>
<pre class="code">
<i>&lt;SDK_Location_bin_directory&gt;</i>\Bin\SvcUtil.exe /config:PingServiceClientMain.exe.config /o:PingServiceClient.cs &lt;wsdl_and_xsd_location&gt;
</pre>
<p>where:</p>
<ul>
	<li><i>&lt;SDK_Location_bin_directory&gt;</i> is the directory where WCF SDK 
		has been installed (ex: C:\Program Files\Microsoft SDKs\Windows\v6.0).</li>
	<li>&lt;wsdl_and_xsd_location&gt; is either the file or the uri location where 
		the wsdl and associated files can be found.
		<p>Examples:</p>
		<pre class="code">C:\&quot;Program Files&quot;\&quot;Microsoft SDKs&quot;\Windows\v6.0\Bin\SvcUtil.exe /config:TestCAAPingServiceClient.exe.config /o:CAAPingServiceClient.cs http://yoni3dsy/m1webservicesinfra/ping.svc?wsdl
C:\&quot;Program Files&quot;\&quot;Microsoft SDKs&quot;\Windows\v6.0\Bin\SvcUtil.exe /config:TestCAAPingServiceClient.exe.config /o:CAAPingServiceClient.cs E:\tmp\wsdl\PingService.wsdl E:\tmp\xsd\PingService.xsd E:\tmp\xsd\wsErrors.xsd</pre>
	</li>
</ul>
<p><strong>Notes</strong>:</p>
<ol>
	<li>The <strong>/config</strong> option MUST be used, and the value must be:
		<strong><i>Name_Of_the_executable.config,</i></strong> where <i>Name_Of_Executable</i> 
		is the name of the client main which will be launched. This configuration 
		file and the executable file MUST be located in the same directory at runtime.</li>
	<li>Depending on the kind of wsdl parameter, you may have different configuration 
		files: in scenario 1 (web service deployed in a WCF environment), the usage 
		of an uri (where the service implementation has been deployed and secured 
		with WSS) leads to a well-formed configuration file directly: the wsdl file 
		is generated dynamically, and contains the information of the wss security 
		bindings deployed on the server, for the given web service. The client code 
		will be simplified drastically (see section <a href="#33">Writing the Client 
		Code</a>).
		<p>If you use a simple wsdl file and the associated xsds which describe 
		the web service, the generated configuration file has no information about 
		those bindings.</p>
	</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="31"></a>Provided Materials</h3>
<p>In the <strong>caawssecuredping.mj</strong> module, under <strong>CAAWebServices.edu</strong> 
framework, you will find several files:</p>
<ol>
	<li>A sample of a web service client which consumes the IPingService web service:
		<strong>CAASecuredPingMain.cs</strong>. We will rely on this class for showing 
		how to create your own client.</li>
	<li>An already generated proxy: <strong><i>CAAPingService.cs</i></strong> , 
		which shows you the kind of csharp classes the <strong>svcutil.exe</strong> 
		tool generates from a <i>web service description</i> <i>language</i> and 
		associated <i>xml schema</i> files.</li>
	<li>Sample configuration files:
		<table class="fill">
			<tr>
				<td rowspan="2">Scenario&nbsp;1</td>
				<td>Static</td>
				<td><strong>TestCAASecuredWSPing.exe.staticwsdl.config</strong>, 
				generated by <strong>svcutils.exe</strong>, from a static wsdl file 
				and its associated schemas.</td>
			</tr>
			<tr>
				<td>Dynamic</td>
				<td><strong>TestCAASecuredWSPing.exe.wcf.config</strong> generated 
				by <strong>svcutils.exe</strong>, from a wsdl uri parameter. This 
				configuration file will be used in scenario 1 (full wcf test case)</td>
			</tr>
			<tr>
				<td>Scenario&nbsp;2</td>
				<td></td>
				<td><strong>TestCAASecuredWSPing.exe.was.config </strong>which will 
				be used for <strong>scenario 2</strong>.</td>
			</tr>
		</table>
	</li>
</ol>
<p>Moreover, for ease, you will find a <strong>IPingService.wsdl.caatxt </strong>
file under the CNext/resources/wsdl directory, and <strong>IPingService.xsd.caatxt</strong> 
+ <strong>wserrors.xsd.caatxt </strong>under the CNext/resources/wsd directory. 
You will use them to generate the client material with svcutil.exe, in scenario 
2.</p>
<ul>
	<li>Move them to <strong>IPingService.wsdl </strong>, <strong>IPingService.xsd</strong> 
		and <strong>wserrors.xsd</strong>.</li>
	<li>Modify the <span class="attribute">location</span> attribute value in the &lt;<span class="tag">soap:address</span>&gt; 
		tag, in order to refer to the URI the web service is deployed at.
		<pre class="code"><span class="keyword">&lt;</span><span class="tag">soap:address</span> <span class="attribute">location</span><span class="keyword">=</span>&quot;<span class="keyword">http://<strong><i>machine</i></strong>:<i><strong>port/rootURI</strong></i>/PingService</span>&quot;<span class="keyword">/&gt;</span></pre>
	</li>
	<li>Run the <strong>svcutil.exe</strong> tool, which generates the client classes 
		and configuration file needed.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="32"></a>Setting Up a New Visual Studio Project </h3>
<ol>
	<li>Open Visual Studio 2005 (Start/All Programs/Microsoft Visual Studio 2005/Microsoft 
		Visual Studio 2005)</li>
	<li><strong>File</strong> menu / <strong>New...</strong> /<strong> Project</strong></li>
	<li>Choose a <strong>Console Application</strong> Project
		<p>
		<img alt="New Console Application" src="images/CAASecuredPingWSClient_new_Project.gif"/></p>
	</li>
	<li>Visual Studio initializes a new class that will be your client main.</li>
	<li>Now, you have to import in your project, the <strong>CAAPingServiceClient.cs</strong> 
		proxy generated earlier (Menu <strong>Project / Add existing item</strong>).</li>
	<li>You are now ready to write your web service consumer.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="33"></a>Writing the Client Code</h3>
<ul>
	<li>In our sample, the <strong>Main</strong> input arguments are the URI where 
		the web service can be called, and the message text to be sent.
		<p>Example:</p>
		<pre class="code">TestCAASecuredWSPing.exe -u http://yoni3dsy/m1webservicesinfra/ping.svc -m &quot;Test Web Service Ping with activated WSS&quot;</pre>
		<ul>
			<li>The -<strong>m </strong>argument (input message to be sent) is optional. 
				If not given, the use case sends an &quot;<strong>hello</strong>&quot; 
				string by default.</li>
			<li>The <strong>-u </strong>argument (url of the web service endpoint) 
				is optional, if the associated configuration file already contains 
				this URL.</li>
		</ul>
	</li>
	<li>The steps for calling the web service deployed on the application server 
		are:
		<ol>
			<li>Create the Main class, and write methods to test arguments:
				<pre class="code">
<span class="keyword">static void</span> Main(<span class="keyword">string</span>[] args){
  TestCAASecuredWSPing ws = <span class="keyword">new</span> TestCAASecuredWSPing();
  <span class="comment">// test arguments</span>
  <span class="keyword">if</span> (ws.ParseArgs(args)) {
    ws.PrintUsage(); <span class="keyword">return</span>;}
  <span class="keyword">else</span> {
    ws.CallService();
  }
}</pre>
			</li>
			<li>In the <strong><i>CallService</i></strong> method of the test class, 
				create an instance of the proxy:
				<pre class="code">
<span class="comment">// Instantiate the service, and create the service url PingServiceClient pingsv;</span>
<span class="keyword">if</span> (url.Length == 0){
  <span class="comment">// case: when the configuration is generated from the uri ( web service deployed in WCF and secured);</span>
  Console.WriteLine("CLIENT&gt;&gt; creates the client proxy: use Ping endpoint from config file.");
  Console.WriteLine();
  pingsv = new PingServiceClient();
}
<span class="keyword">else</span>{
  <span class="comment">// Else ( Web service deployed on was, or proxy generated from a static wsdl file).</span>
  Console.WriteLine("CLIENT&gt;&gt; creates the client proxy: use input url.");
  Console.WriteLine();
  pingsv = <span class="keyword">new</span> PingServiceClient("PingService");
  pingsv.Endpoint.Address = <span class="keyword">new</span> System.ServiceModel.EndpointAddress(url);
}
</pre>
			</li>
			<li>Call the Ping Web Method, which computes the words count of the 
				input message:
				<pre class="code">
<span class="keyword">try</span> {
  Console.WriteLine("CLIENT&gt;&gt; call the ping method.\n");
  System.Nullable&lt;int&gt; count = pingsv.ping(msg);
  <span class="keyword">string</span>[] words = msg.Split(<span class="keyword">null</span>);
  <span class="keyword">int</span> wc = words.Length;
  <span class="keyword">if</span> (count != wc){
    Console.WriteLine("CLIENT&gt;&gt; An error has occurred, count={0} and should be {1}", count, wc);
  }
  <span class="keyword">else</span> {
    Console.WriteLine("CLIENT&gt;&gt; input ping request = \"{0}\" ",msg);
    Console.WriteLine("CLIENT&gt;&gt; words count response = {0} ", count);
    Console.WriteLine("CLIENT&gt;&gt; ===&gt; OK");
  }
}
<span class="keyword">catch</span> (Exception e) {
  Console.WriteLine("&gt;&gt;&gt;PING SERVICE EXCEPTION&lt;&lt;&lt;\n" + e);
}
</pre>
			</li>
		</ol>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="34"></a>Building the Use Case Code Samples</h3>
<p>Use the Build / Build Solution menu in Visual Studio. You may have compilation 
errors due to missing imports and/or missing try/catch blocks. You may have to add 
such imports (keyword <strong>using</strong>, etc.) and blocks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="35"></a>Launching the Use Case Scenario</h3>
<p>Edit the Configuration File - Benefit from the WSS Security Activation.</p>
<p>According to the scenarios you want to run, you may have to modify or not the 
configuration file associated with the web service client executable. Remember that 
the configuration file must have the same name as the executable file, plus <i>.config</i> 
extension, and must be located in the same directory.</p>
<h5>Scenario 1 (WCF Client / WCF Server)</h5>
<ol>
	<li><strong>case 1</strong>: the client material has been generated from the &quot;dynamic&quot; 
		wsdl uri (server where the web service has been deployed and secured); nothing 
		has to be done, as the file is already configured with the right properties 
		and bindings. The configuration should look like the TestCAASecuredWSPing.exe.wcf.config 
		file (see <a href="#31">Provided Material</a>).
		<p>You will just run the <strong>TestCAASecuredWSPing</strong> executable.</p>
	</li>
	<li><strong>case 2</strong>: the client material has been generated from a wsdl 
		file and associated xsds, with no reference to WS policy to be used. Then, 
		the xml configuration file may look like:
		<pre class="code">
<span class="keyword">&lt;?</span><span class="tag">xml</span> <span class="attribute">version</span><span class="keyword">=</span>&quot;<span class="keyword">1.0</span>&quot; <span class="attribute">encoding</span><span class="keyword">=</span>&quot;<span class="keyword">utf-8</span>&quot;<span class="keyword">?&gt;</span>
  <span class="keyword">&lt;</span><span class="tag">configuration</span><span class="keyword">&gt;</span>
    <span class="keyword">&lt;</span><span class="tag">system.serviceModel</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;</span><span class="tag">bindings</span><span class="keyword">&gt;</span>
      ...
      <span class="keyword">&lt;/</span><span class="tag">bindings</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;</span><span class="tag">client</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;</span><span class="tag">endpoint</span> <strong><span class="attribute">binding</span><span class="keyword">=</span>&quot;<span class="keyword">basicHttpBinding</span>&quot;</strong>
               <span class="attribute">bindingConfiguration</span><span class="keyword">=</span>&quot;<span class="keyword">IPingServiceBinding</span>&quot;
               <span class="attribute">contract</span><span class="keyword">=</span>&quot;<span class="keyword">IPingService</span>&quot;
               <span class="attribute">name</span><span class="keyword">=</span>&quot;<span class="keyword">IPingServiceBinding_IPingService</span>&quot; <span class="keyword">/&gt;</span>
      <span class="keyword">&lt;/</span><span class="tag">client</span><span class="keyword">&gt;</span>
    <span class="keyword">&lt;</span><span class="tag">/system.serviceModel</span><span class="keyword">&gt;</span>
  <span class="keyword">&lt;</span><span class="tag">/configuration</span><span class="keyword">&gt;</span></pre>
		<p>You have to modify one item only: <span class="attribute">binding</span>=&quot;<span class="keyword">basicHttpBinding</span>&quot; 
		to <span class="attribute">binding</span>=&quot;<span class="keyword">wsHttpBinding&quot;</span>. 
		The client sample will automatically benefit from the WS-Security features, 
		at runtime.</p>
	</li>
</ol>
<p><strong>Note</strong>: &quot;<span class="keyword">wsHttpBinding</span>&quot; 
is a default binding provided with WCF, mainly for tests and samples purpose. In 
a real environment, custom bindings should be used.</p>
<h5>Scenario 2 (WCF client / WebSphere Application Server)</h5>
<p>In this scenario, certificates , keys and a specific custom binding ( &quot;<span class="keyword">SignThenEncryptCustomBinding</span>&quot;) 
are used. We assume the PingService has already been deployed on the WebSphere Application 
server, enhanced with the Feature Pack for Web Services, and the WS-Security activated 
with this binding (this is done through the Administration console of the WebSphere 
application Server. See official documentation for more details about this).</p>
<p>The configuration file to rely on is <strong>TestCAASecuredWSPing.exe.was.config</strong> 
(see <a href="#31">Provided Material</a>). The content looks like:</p>
<pre class="code">
<span class="keyword">&lt;?</span><span class="tag">xml</span> <span class="attribute">version</span><span class="keyword">=</span>&quot;<span class="keyword">1.0</span>&quot; <span class="attribute">encoding</span><span class="keyword">=</span>&quot;<span class="keyword">utf-8</span>&quot;<span class="keyword">?&gt;</span>
  <span class="keyword">&lt;</span><span class="tag">configuration</span><span class="keyword">&gt;</span>
    <span class="keyword">&lt;</span><span class="tag">system.serviceModel</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;</span><span class="tag">behaviors</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;</span><span class="tag">endpointBehaviors</span><span class="keyword">&gt;</span>
          <span class="keyword">&lt;</span><span class="tag">behavior</span> <span class="attribute">name</span><span class="keyword">=</span>&quot;<span class="keyword">Client-Cert-Behavior</span>&quot;<span class="keyword">&gt;</span>
            <span class="keyword">&lt;</span><span class="tag">clientCredentials</span><span class="keyword">&gt;</span>
              <span class="keyword">&lt;</span><span class="tag">clientCertificate</span> <strong><span class="attribute">findValue</span><span class="keyword">=</span>&quot;<span class="keyword">12</span>&quot;</strong> <span class="attribute">x509FindType</span><span class="keyword">=</span>&quot;<span class="keyword">FindBySerialNumber</span>&quot; <span class="keyword">/&gt;</span>
              <span class="keyword">&lt;</span><span class="tag">serviceCertificate</span><span class="keyword">&gt;</span>
                <span class="keyword">&lt;</span><span class="tag">defaultCertificate</span> <strong><span class="attribute">findValue</span><span class="keyword">=</span>&quot;<span class="keyword">13</span>&quot;</strong> <span class="attribute">storeName</span><span class="keyword">=</span>&quot;<span class="keyword">TrustedPeople</span>&quot; <span class="attribute">x509FindType</span><span class="keyword">=</span>&quot;<span class="keyword">FindBySerialNumber</span>&quot; <span class="keyword">/&gt;</span>
                <span class="keyword">&lt;</span><span class="tag">authentication</span> <span class="attribute">certificateValidationMode</span><span class="keyword">=</span>&quot;<span class="keyword">PeerOrChainTrust</span>&quot; <span class="keyword">/&gt;</span>
              <span class="keyword">&lt;/</span><span class="tag">serviceCertificate</span><span class="keyword">&gt;</span>
            <span class="keyword">&lt;/</span><span class="tag">clientCredentials</span><span class="keyword">&gt;</span>
          <span class="keyword">&lt;/</span><span class="tag">behavior</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;/</span><span class="tag">endpointBehaviors</span><span class="keyword">&gt;</span>
      <span class="keyword"> &lt;/</span><span class="tag">behaviors</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;</span><span class="tag">bindings</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;</span><span class="tag">customBinding</span><span class="keyword">&gt;</span>
          <span class="keyword">&lt;</span><span class="tag">binding</span> <span class="attribute">name</span><span class="keyword">=</span>&quot;<span class="keyword">SignThenEncryptCustomBinding</span>&quot; <span class="keyword">&gt;</span>
            <span class="keyword">&lt;</span><span class="tag">textMessageEncoding</span> <span class="attribute">messageVersion</span><span class="keyword">=</span>&quot;<span class="keyword">Soap11</span>&quot; <span class="keyword">/&gt;</span>
            <span class="keyword">&lt;</span><span class="tag">security</span> <span class="attribute">defaultAlgorithmSuite</span><span class="keyword">=</span>&quot;<span class="keyword">Basic128Rsa15</span>&quot;
                      <span class="attribute">authenticationMode</span><span class="keyword">=</span>&quot;<span class="keyword">MutualCertificate</span>&quot;
                      <span class="attribute">securityHeaderLayout</span><span class="keyword">=</span>&quot;strict&quot;
                      <span class="attribute">includeTimestamp</span><span class="keyword">=</span>&quot;<span class="keyword">true</span>&quot;
                      <span class="attribute">keyEntropyMode</span><span class="keyword">=</span>&quot;<span class="keyword">CombinedEntropy</span>&quot;
                      <span class="attribute">messageProtectionOrder</span><span class="keyword">=</span>&quot;<span class="keyword">SignBeforeEncrypt</span>&quot;
                      <span class="attribute">messageSecurityVersion</span><span class="keyword">=</span>&quot;<span class="keyword">WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10</span>&quot;<span class="keyword">&gt;</span>
              <span class="keyword">&lt;</span><span class="tag">issuedTokenParameters</span> <span class="attribute">keyType</span><span class="keyword">=</span>&quot;<span class="keyword">AsymmetricKey</span>&quot; <span class="keyword">/&gt;</span>
              <span class="keyword">&lt;</span><span class="tag">secureConversationBootstrap</span> <span class="keyword">/&gt;</span>
            <span class="keyword">&lt;/</span><span class="tag">security</span><span class="keyword">&gt;</span>
            <span class="keyword">&lt;</span><span class="tag">httpTransport</span> <span class="keyword">/&gt;</span>
          <span class="keyword">&lt;/</span><span class="tag">binding</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;/</span><span class="tag">customBinding</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;/</span><span class="tag">bindings</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;</span><span class="tag">client</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;</span><span class="tag">endpoint</span> <strong><span class="attribute">address</span><span class="keyword">=</span>&quot;<span class="keyword">http://myMachine:9081/TestWebServices/PingService</span>&quot;</strong>
                  <span class="attribute">behaviorConfiguration</span><span class="keyword">=</span>&quot;<span class="keyword">Client-Cert-Behavior</span>&quot;
                  <strong><span class="attribute">binding</span><span class="keyword">=</span>&quot;<span class="keyword">customBinding</span>&quot;</strong>
               <strong><span class="attribute">   bindingConfiguration</span><span class="keyword">=</span>&quot;<span class="keyword">SignThenEncryptCustomBinding</span>&quot;</strong>
                  <span class="attribute">contract</span><span class="keyword">=</span>&quot;<span class="keyword">IPingService</span>&quot;
                  <span class="attribute">name</span><span class="keyword">=</span>&quot;<span class="keyword">IPingServiceBinding_IPingService</span>&quot;<span class="keyword">&gt;</span>
          <span class="keyword">&lt;</span><span class="tag">identity</span><span class="keyword">&gt;</span>
            <span class="keyword">&lt;</span><span class="tag">dns</span> <span class="attribute">value</span><span class="keyword">=</span>&quot;<span class="keyword">Bob</span>&quot; <span class="keyword">/&gt;</span>
          <span class="keyword">&lt;/</span><span class="tag">identity</span><span class="keyword">&gt;</span>
        <span class="keyword">&lt;/</span><span class="tag">endpoint</span><span class="keyword">&gt;</span>
      <span class="keyword">&lt;/</span><span class="tag">client</span><span class="keyword">&gt;</span>
    <span class="keyword"> &lt;/</span><span class="tag">system.serviceModel</span><span class="keyword">&gt;</span>
  <span class="keyword">&lt;/</span><span class="tag">configuration</span><span class="keyword">&gt;</span></pre>
<p><strong>Note</strong>: It is recommended to strictly follow the steps described 
in this document in order to build a client configuration file which matches exactly 
the server side configuration also described in the document. <strong>In any case, 
your client configuration file must match the server configuration file.</strong></p>
<p>This configuration file is related to the certificates used: So, under the
<span class="keyword">&lt;</span><span class="tag">clientCredentials</span><span class="keyword">&gt;</span> 
tag, references to certificates are done through the <span class="attribute">findValue</span> 
attribute (<strong>12</strong> and <strong>13</strong>), which are the serial numbers 
of the certificates used in our sample:</p>
<table>
	<colgroup align="center" span="2">
	</colgroup>
	<tr>
		<td>
		<img alt="New console application" src="images/CAASecuredPingWS_Alice_Certificate.gif"/>
		</td>
		<td>
		<img alt="New console application" src="images/CAASecuredPingWS_Bob_Certificate.gif"/>
		</td>
	</tr>
	<tr>
		<td><strong>Alice's Certificate</strong></td>
		<td><strong>Bob's Certificate</strong></td>
	</tr>
</table>
<p>The way those certificates and associated keys have to be declared and used are 
detailed in [<a href="#References">4</a>]. At runtime, the WCF infrastructure will 
use keys associated with both certificates to encrypt/decrypt the parts of the messages 
that are signed and secured.</p>
<p>You also can create or edit your configuration file with the Microsoft Service 
Configuration Editor.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="37"></a>Running the TestCAASecuredPing Executable</h4>
<ol>
	<li>Open a new command window</li>
	<li>Go to the bin (or the bin/Debug) directory, under the directory where your 
		project is located.
		<p><strong>Example</strong>:</p>
		<pre class="code">cd C:\Documents and Settings\user1\My Documents\Visual Studio 2005\Projects\TestCAASecuredWSPing\TestCAASecuredWSPing\bin\Debug</pre>
	</li>
	<li>Check the configuration file has the right name:
		<p><strong>Example</strong>: if the executable is TestCAASecuredWSPing.exe</p>
		<pre class="code">TestCAASecuredWSPing.exe.config</pre>
	</li>
	<li>Then run the exe file with your input arguments (if needed):
		<pre class="code">TestCAASecuredPing.exe -m &quot;Test Web Service Ping with activated WSS&quot; [-u PiingServiceURL]</pre>
		<p>You should have traces like:</p>
		<p>
		<img alt="New console application" src="images/CAASecuredPingWSClient_output.gif"/></p>
	</li>
	<li>For Scenario 2, you can use a <strong>TCP-IP monitor</strong> tool, in order 
		to view the SOAP request that has been sent to the application server. (The 
		response cannot be read, due to the WCF client.) You will notice that its 
		content is encrypted, and that the SOAP headers transmit information about 
		signature and encryption. A sample of this request can be viewed here [<a href="#References">5</a>].</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case describes how to set up a build time and run time environment that 
enables to easily call a secured web service (signed and encrypted messages), thanks 
to WS Security activation, both on client and server side.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="CAAWSBuildingLaunching.htm">Building 
		and Launching a Web Service Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>deploy a web service in WCF / IIS</td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>deploy a web service in WebSphere Application Server Feature Pack for 
		web services</td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>Achieving Web services interoperability between the WebSphere Web Services 
		Feature Pack and Windows Communication Foundation</td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="xml/EncryptedAndSignedSOAPRequest.xml">Sample of Encrypted 
		and Signed SOAP Request</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2007]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
