<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Consuming Dassault Syst&#232;mes Web Services with a Java Client</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Consuming Dassault Syst&#232;mes Web Services with a Java 
		Client</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create a java client which consumes the 
		Dassault-Systemes web services, from the artefacts generated by JAX-WS tools 
		.</p>
		<ul>
			<li><a href="#1">What You Will Learn With This Use Case</a></li>
			<li><a href="#2">Introduction to JAX-WS </a></li>
			<li><a href="#3">Preliminary Steps</a></li>
			<li><a href="#4">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="1"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to consume Dassault-Systemes web services 
with a JAVA client, based on artifacts generated by tools delivered with the JDK 
1.6. Those tools are provided with the JAX-WS implementation available the JDK 1.6.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="2"></a>Introduction to JAX-WS</h2>
<p><strong>JAX-WS</strong> is a specification designed for easing the use of web 
services technology, either on the client side either on the server side, by hiding 
all the SOAP and internal web services layers.</p>
<p>This specification, designed to replace JAX-RPC, describes how to define web 
services and web service client through the use of annotations (annotations available 
since JDK 1.5 ) in java classes.The last available version (February 2007) is
<strong>JAX-WS 2.1</strong>, which is a maintenance release of <strong>JAX-WS 2.0</strong>, 
the reference specification ([<a href="#References">1</a>]).</p>
<p><strong>Example 1</strong>: Example of generated web service client class: PingService</p>
<pre class="code"><span class="comment">/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1 in JDK 6
 * Generated source version: 2.1
 */</span>
 <span class="keyword"><strong>@WebServiceClient</strong></span> (name = &quot;<span class="keyword">PingService</span>&quot;,
                  targetNamespace = &quot;<span class="keyword">urn:com:dassault_systemes:webservice</span>&quot;,
                  wsdlLocation = &quot;<span class="keyword">http://pelfortdsy:8090/ematrix/webservice?command=get&amp;id=ping&amp;type=wsdl</span>&quot;)
  public class PingService
    extends Service
    {...
      <span class="comment">/**
       * @return
       * returns IPingService
       */</span>
      <span class="keyword"><strong>@WebEndpoint</strong></span>(name = &quot;<span class="keyword">PingServicePort</span>&quot;)
      public IPingService getPingServicePort() {...}
    ...}</pre>
<p><strong>Example 2</strong>: Example of generated web service client interface: 
IPingService</p>
<pre class="code"><span class="comment">/**
 * Interface to test the responsiveness of the application server.
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1 in JDK 6
 * Generated source version: 2.1
 */</span>
<span class="keyword"><strong>@WebService</strong></span>(name = &quot;IPingService&quot;,
            targetNamespace = &quot;urn:com:dassault_systemes:webservice&quot;)
<span class="keyword">@XmlSeeAlso</span>({
  com._3ds.wserror.ObjectFactory.class,
  com.dassault_systemes.webservice.ObjectFactory.class
})
public interface IPingService {
  <span class="comment">/**
   * Pings the application server by sending it a simple message
   * @param iSentence
   * @return
   * returns java.lang.Integer
   * @throws PingErrorType
   */</span>

  <span class="keyword">@WebMethod</span>
  <span class="keyword">@WebResult</span>(name = &quot;oWordCount&quot;, targetNamespace = &quot;urn:com:dassault_systemes:webservice&quot;)
  <span class="keyword">@RequestWrapper</span>(localName = &quot;ping&quot;, targetNamespace = &quot;urn:com:dassault_systemes:webservice&quot;,
                  className = &quot;com.dassault_systemes.webservice.Ping&quot;)
  <span class="keyword">@ResponseWrapper</span>(localName = &quot;pingResponse&quot;,
                   targetNamespace = &quot;urn:com:dassault_systemes:webservice&quot;,
                   className = &quot;com.dassault_systemes.webservice.PingResponse&quot;)
  public Integer ping(
    <span class="keyword">@WebParam</span>(name = &quot;iSentence&quot;, targetNamespace = &quot;urn:com:dassault_systemes:webservice&quot;)
    String iSentence)
    throws PingErrorType
    ;
}</pre>
<p>This programming model is becoming the de-facto standard in the J2EE world, as 
it&#39;s now implemented and used by a wide range of application Servers providers (IBM 
for websphere application server, SUN for GlassFish and Metro Stack, ORACLE -BEA 
for WebLogic, etc.). Moreover, the implementation of JAX-WS has been delivered with 
the JDK1.6 (JAX-WS 2.1 implementation since JDK1.6 update 5).</p>
<p><strong>JAX-WS</strong> is tightly related to <strong>JAXB</strong>, just as 
web services description files are linked to XML schema datatypes. JAXB specifications 
describe how the XML schema datatypes will be bound to java data types classes.</p>
<p>In order to prevent web services consumers and providers to implement on their 
own the client and server &quot;artifacts&quot;, tools have also been specified in JAX-WS:</p>
<ul>
	<li><span class="keyword"><strong>wsimport</strong></span>: generates the artifacts 
	from a wsdl to be able to consume web services.</li>
	<li><span class="keyword"><strong>wsgen</strong></span>: generates the material 
	needed for the web service implementation and deployment.</li>
	<li><span class="keyword"><strong>apt</strong></span>: facility for processing 
	annotations.</li>
</ul>
<p><span class="keyword"><strong>xjc</strong></span> should also be added to this 
list, as it&#39;s a tool related to the JAXB generation of java data types, as JAX-WS 
relies on this particular databinding.</p>
<p>In this use case, we will only use the <span class="keyword"><strong>wsimport</strong></span> 
and <span class="keyword"><strong>xjc</strong></span> utilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="3"></a>Preliminary Steps</h2>
<p>In this use case, we will show how to create a jax-ws client which will consume 
a simple web service : PingService, which is delivered with the Dassault Syst&#232;mes 
web services infrastructure. This web service takes a string as the input parameter 
and returns the string words count.</p>
<p>Before being able to develop this java client, the web services must have been 
deployed on an application server.To check it&#39;s the case, you can open a web navigator, 
and try to get its wsdl by typing the following url:</p>
<pre class="code">http://&lt;server&gt;:&lt;port&gt;/&lt;applicationURI&gt;/webservice?command=get&amp;id=ping&amp;type=wsdl</pre>
<p>you should see this kind of result:</p>
<p><img alt="Ping Service wsdl" src="images/PingServiceWSDL.png"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="4"></a>Step-by-Step</h2>
<p>The following section first describes how to generate the java jax-ws artifacts 
needed for consuming the &quot;ping&quot; web service deployed on the server, how to write 
the client code that will call the web service, how to build the code and launch 
the client.</p>
<ol>
	<li><a href="#40">Prerequisites</a></li>
	<li><a href="#41">Provided Material</a></li>
	<li><a href="#42">Creating JAX-WS Artifacts from the Ping Web Service</a></li>
	<li><a href="#43">Writing the Client Code</a></li>
	<li><a href="#44">Building the Client Code </a></li>
	<li><a href="#45">Launching the Use Case Scenario</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="40"></a>Prerequisites</h3>
<p>No prerequisites are needed if the JDK referenced on the client machine matches 
the right version ( see Program Directory for the version to be used, given that 
a JAX-WS implementation has been embedded in the JDK, since the 6.0_02 version. 
). Anyway, if you JDK version is lower than the one needed, you will have to get 
a JAX-WS implementation from your own.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="41"></a>Provided Material</h3>
<p>Under the <strong>CAAWebServices.edu</strong> framework, you will find:</p>
<ol>
	<li><strong>a caajaxwsstandardclient.mj</strong> module, which provides a client 
	class, <span class="keyword">TestJAXWSPingClient.java</span>, which consumes 
	the PingService web service, relying on the artifacts generated by wsimport 
	with the standard options. The artifacts are located in the same module.<strong></strong><strong></strong></li>
	<li><strong>a caajaxwsnowrapclient.mj</strong> module, which provides the same 
	kind of client,<span class="keyword"> TestJAXWSNoWrapPingClient.java</span>, 
	but uses slightly different artifacts.Those artifacts are also generated by 
	the wsimport tool, but with a specific binding option; showing this option may 
	be useful in some cases.</li>
	<li><strong></strong>a binding xml file, <strong>NoWrapPingServiceBinding.xml</strong>, 
	located the CNext\resources\xml directory. This file is a sample of JAXB binding 
	files to be used in 2, in order to generate non wrapped java artifacts (this 
	meand that the request and response objects are not hidden on the client side, 
	see [] section. This file is a sample file, you should modify it to match the 
	real URL where the wsdl file can be found.</li>
</ol>
<p>The following sections details the way to write and use this material.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="42"></a>Creating JAX-WS Artifacts from the Ping Web Service</h3>
<h4>Standard Options</h4>
<p>For creating the standard artifacts, you have to use the wsimport tool, which 
is located at &lt;JDK_HOME&gt;\bin. The way to use it is:</p>
<pre class="code">&lt;JDK_HOME&gt;\bin\wsimport.exe -d &lt;outputdirectory&gt; &lt;wsdl_location&gt;</pre>
<p>The generated artifacts will be created under the &lt;outputdirectory&gt;. The &lt;wsdl_location&gt; 
can be an url where the wsdl can be found ( this is the recommended way, given the 
web services have been deployed on an application server), or the full path of the 
wsdl file.</p>
<p><strong>Example</strong>:</p>
<pre class="code">c:\Program Files\java\JDK1.6.0_02\bin\wsimport.exe -d e:\tmp\generatedArtifacts -verbose &quot;http://localhost:9081/enovia/webservice?command=get&amp;id=ping&amp;type=wsdl&quot;</pre>
<p>You should see in the directory structure located under the e:\tmp\generatedArtifacts:</p>
<p>
<img alt="generatedArtifactsStructureTree" src="images/generatedArtifacts.png"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>No Wrapping Option</h4>
<p>The artifacts generated by JAX-WS wsimport utility can differ, according to one 
specific option:<strong> -b</strong> which manages the way the binding step (i.e. 
how to associate XML datatypes with Java classes), behaves. this -b option refers 
to a &quot;binding XML file&quot;, which describes which customization can be done ( name 
of the package for generated artifacts, style of binding, etc, see the JAX-B specifications
[<a href="#References">2</a>]). As knowing this option may be useful for controlling the 
artifacts to be produced, you can create a binding file which looks like the
<strong>NoWrapPingServiceBinding.xml</strong> file:</p>
<pre class="code">&lt;bindings
  xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; wsdlLocation=&quot;http://localhost:9081/enovia/webservice?command=get&amp;amp;id=ping&amp;amp;type=wsdl&quot;
  xmlns=&quot;http://java.sun.com/xml/ns/jaxws&quot;&gt;
    &lt;enableWrapperStyle&gt;false&lt;/enableWrapperStyle&gt;
&lt;/bindings&gt;</pre>
<p>In this sample, only 2 items are important to be set : the <strong>wsdlLocation</strong> 
attribute, pointing to the target wsdl, and the <strong>enableWrapperStyle</strong> 
element value, set to <strong>false</strong>. This will determine the way artifacts 
are created by the JAXB implementation, embedded in the wsimport tool.</p>
<p>The way to use the wsimport tool is:</p>
<pre class="code">&lt;JDK_HOME&gt;\bin\wsimport.exe -b &lt;bindingfile_Location&gt; -d &lt;outputdirectory&gt; -keep &lt;wsdl_location&gt;</pre>
<p><strong>Note</strong>: the wsdlLocation attribute value must absolutely match 
with the &lt;wsdlLocation&gt; value.</p>
<p><strong>Example</strong>:</p>
<pre class="code">c:\Program Files\java\JDK1.6.0_02\bin\wsimport.exe -b e:\tmp\input\NoWrapPingServiceBinding.xml -d e:\tmp\generatedArtifacts -keep &quot;http://localhost:9081/enovia/webservice?command=get&amp;id=ping&amp;type=wsdl&quot; </pre>
<p>You should see the same artifacts as the one created before, but the contents 
of the IPingService classes are different.</p>
<p><strong>Note</strong>: the -d option generates the .class files only. If you 
want to use .java files only, you can change the -d option into a -s option, and 
only .java artifacts will be generated. Else, if you want both ( .java files and 
.class files, you should use the -d option and the -keep option together, which 
is the default option we use for this article).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>Specific Scenario: Consume Several Web Services in the Same Client Java Class</h4>
<p>If the wsimport utility accepts several wsdl files as arguments, the current 
behaviour leads to an overwriting of classes sharing the same name and namespace. 
For arguments datatypes, in most cases, this is not a problem, as the types used 
in the Dassault-Systemes web services are the same if their share the same name 
and the same namespace. But wsimport supersedes its own internal objects, namely 
the package-info.java and the ObjectFactory.java class. This last class is the one 
which instantiates the artifacts representing the web service endpoint and its port 
Type, and should not be overwritten.</p>
<p>A solution, for avoiding this wrong behaviour, is to call the wsimport for each 
wsdl iteratively and generate artifacts into separate directories. The next step 
is to merge the various contents of the ObjectFactory.java file, so that it will 
be able to instantiate all the web service client representatives. The last step 
is to put the merged class and the others artifacts in their right directories.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="43"></a>Writing the Client Code</h3>
<p>Now we have the generated artifacts linked to the ping webservice, deployed on 
an application server, and we want to write the code which will consume this web 
service. the way we will instantiate the web service depends on &quot;where&quot; we want 
to call it: if we want to call the web service on the same server we used for creating 
the artifacts, the client code will be straightforward; if we want to call the web 
service on another server, where we know the webservices are deployed too, we will 
have to write a few additional lines.</p>
<p>So, in our client use case, the optional arguments can be:</p>
<ol>
	<li><strong>-s iSentence</strong>: the sentence which will be the input parameter 
	of the <strong>PingService</strong> web service ( &quot;<span class="keyword">PingService</span>&quot; 
	is the name, <span class="keyword">&quot;ping&quot;</span> is the unique id of this service). 
	The web service counts the words of the sentence, and returns this value as 
	the response.</li>
	<li><strong>-u iURL</strong>: the URL where the webservice can be called (ex: 
	&quot;http://server2:port2/ematrix&quot;), if different from the first server used for 
	generating the artifacts.</li>
</ol>
<p>We will detail the 2 different codes to write, according to the kind of artifacts 
generation done.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>With Artifacts Generated from the Default Options</h4>
<ol>
	<li>Create a new java class, named TestStdJaxWSPingClient , which will have 
	five methods: the constructor, the main method, parseArgs, printUsage and callService. 
	We will only focus here on the <strong>callService</strong> method, just look 
	at the provided material for the other classical method. Write the needed imports:
	<pre class="code">import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import com.dassault_systemes.webservice.IPingService;
import com.dassault_systemes.webservice.PingErrorType;
import com.dassault_systemes.webservice.PingService;
public class TestStdJAXWSPingClient {...}</pre>
	</li>
	<li>In the <strong><i>callService</i></strong> method of the test class, create 
	an instance of the proxy., and call the service:
	<p>If no server URL has been passed in arguments, the code is straightforward:</p>
	<pre class="code"> PingService srv=new PingService();
IPingService myPingService = srv.getPingServicePort();
 try{
  System.out.println(&quot;Calling the \&quot;ping\&quot; web service with input sentence =\&quot;&quot;+_inputSentence+&quot;\&quot;&quot;);
  int wordCounts = myPingService.ping(_inputSentence);
  <span class="comment">// where _inputSentence if the sentence passed as an argument, or a default value.</span>
  <span class="comment">// print the results on the console.</span>
  
  System.out.println(&quot;webservice response ==&gt;wordCounts =&quot;+wordCounts);
 }</pre>
	<p>If the input url value is not null, i.e. the web service will be called on 
	another server than the one used for creating the artifacts, some additional 
	code need to be written:</p>
	<p>First, the instantiation of the PingService is different:</p>
	<pre class="code">URL wsdl_URL=null;
 try {
   wsdl_URL = new URL(_rootURI+&quot;/webservice?command=get&amp;id=ping&amp;type=wsdl&quot;); // URL of the wsdl on the input server.
 }
 catch (MalformedURLException e) {
  System.out.println(&quot;ERROR : \&quot;&quot;+_rootURI+&quot;\&quot; is not an available URL&quot;);
  printUsage();
 }
 try {
  String namespace=&quot;urn:com:dassault_systemes:webservice&quot;;
  String serviceName=&quot;PingService&quot;;
  srv=new PingService(wsdl_URL,new QName(namespace,serviceName));
 }
 catch(Exception e){
  System.out.println(&quot;Error when instanciating the ping web service. ErrorMessage is :&quot;);
  e.printStackTrace();
 }</pre>
	<p>Set the URL the web service is located at, and call the service as above:</p>
	<pre class="code">if(_rootURI!=null){
  String urlEndPoint=_rootURI+&quot;/webservice?id=ping&quot;; // where the web service is located.
  BindingProvider bp = (BindingProvider)myPingService;
  bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,urlEndPoint); // set the service address.
 }
 try {
  String namespace=&quot;urn:com:dassault_systemes:webservice&quot;;
  String serviceName=&quot;PingService&quot;;
  srv=new PingService(wsdl_URL,new QName(namespace,serviceName));
 }
// call the ping web method (see above)</pre>
	</li>
	<li>then treat the exception throw:
	<pre class="code">catch (<strong>PingErrorType</strong> e) {
 System.out.println(&quot;ERROR WHEN CALLING The \&quot;ping\&quot; webservice&quot;);
 e.printStackTrace();
 System.exit(1);
}</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>With Artifacts Generated from the No Wrapping Style Option</h4>
<p>The steps are the same as above, the only difference is the additional imports 
to declare:</p>
<pre class="code">import com.dassault_systemes.webservice.Ping;
import com.dassault_systemes.webservice.PingResponse;</pre>
<p>and how to call the <span class="keyword">PingService</span> web service:</p>
<pre class="code">try {
 System.out.println(&quot;Calling the \&quot;ping\&quot; web service with input sentence =\&quot;&quot;+_inputSentence+&quot;\&quot;&quot;);
 com.dassault_systemes.webservice.Ping request = new Ping();
 request.setISentence(_inputSentence);
 PingResponse response = myPingService.ping(request);
 Integer wordsCount = response.getOWordCount();
 System.out.println(&quot;webservice response ==&gt;wordCounts =&quot;+wordsCount);
}catch (PingErrorType e)
{...}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="44"></a>Building the Client Code</h3>
<p>You have several ways to build this caa use cases:</p>
<ul>
	<li>Simply use the standard javac executable : given that artifacts .class files 
	have already been generated from wsimport ( else, if you only generated the 
	java artifacts, you will have to compile them first), the command may look like:
	<pre class="code">&lt;JDK_HOME&gt;\bin\javac.exe -classpath &lt;src_Location_of_artifacts_classes&gt; -verbose *.java</pre>
	<p>where &lt;src_Location_of_artifacts_classes&gt; is the src directory where the 
	artifact .class files are located.</p>
	</li>
	<li>Use either:
	<ul>
	<li>Compilation tools if you chose to write your java client within off-the-shelf 
	IDEs like Eclipse for example.</li>
	<li>mkmk tools if you chose to directly use the provided material. Please 
	refer to [<a href="#References">3</a>] for more details.</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="45"></a>Launching the Use Case Scenario</h3>
<p>Run the TestStdJaxWSClient and the TestNoWrapJaxWSClient:</p>
<ol>
	<li>Open a new command window.</li>
	<li>Use the java executable to launch either the <span class="keyword">
	<strong>TestStdJaxWSClient</strong></span> or <span class="keyword"><strong>
	TestNoWrapJaxWSClient</strong></span> main:
	<pre class="code"> &lt;JDK_HOME&gt;\bin\java.exe -classpath &lt;src_Location_of_artifacts_classes&gt; TeststdJaxWSClient [-options]</pre>
	<p>Example:</p>
	<pre class="code">&quot;C:\Program Files\Java\jdk1.6.0_02\bin\java.exe&quot;
 -classpath C:\tmp\CAAJAX-WS\src com.dassault_systemes.webservice.client.testStdJAXWSPingClient
  -s &quot;Hello. this is JAX-WS client testing the Ping web service&quot;
  -u http://pelfortdsy:8090/ematrix</pre>
	</li>
	<li>You should have traces like:
	<p>
	<img alt="web service client command traces" src="images/CallingThePingWebServiceFromCmd.png"/></p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case describes how to set up a build time and run time environment that 
enables to easily call a simple Dassault-Systeme web service with a JAX-WS java 
client, from the generation of artifacts with tools embedded in the standard JDK, 
to the java code writing which relies on those artifacts.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkUrl('http://jcp.org/en/jsr/detail?id=224&#8217;); return false ;">
		JSR 224 : Java API For XM-Based Web Services (JAX-WS 2.0)</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkUrl('http://jcp.org/en/jsr/detail?id=031&#8217;); return false ;">
		JSR 31 : Java Architecture For XML Binding (JAX-B)</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="CAAWSBuildingLaunching.htm">Building 
		and Launching a Web Service Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
