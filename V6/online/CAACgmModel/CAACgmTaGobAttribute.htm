<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>The Management of Foreign Data</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>The Management of Foreign Data</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The geometric attributes are a quick way to add data on CGM objects. 
		Moreover, they are used to introduce foreign surfaces into CGM, that this 
		paper precisely details. </p>
		<ul>
			<li><a href="#CGM attributes">CGM Attributes</a>
			<ul>
				<li><a href="#Definition">Definition</a></li>
				<li><a href="#Characterization">Characterization</a></li>
				<li><a href="#Management">Management</a></li>
				<li><a href="#Stream and unstream">Stream and Unstream</a></li>
				<li><a href="#Non Persistent Attribute: Sample">Non Persistent Attribute: 
				Sample</a></li>
			</ul>
			</li>
			<li><a href="#The introduction of a foreign surface class">The Introduction 
			of a Foreign Surface Class</a>
			<ul>
				<li><a href="#Basic principle">Base Principle</a></li>
				<li><a href="#CATForeignGeometryData">CATForeignGeometryData</a></li>
				<li><a href="#CATForeignSurfaceData">CATForeignSurfaceData</a></li>
				<li><a href="#CATMathForeignFunctionXY">CATMathFunctionXY</a></li>
				<li><a href="#How to proceed">How to Proceed</a></li>
			</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CGM attributes"></a>CGM Attributes</h2>
<h3><a name="Definition"></a>Definition</h3>
<p>A CGM attribute (CATCGMAttribute class) is an object that can be pointed to by 
a CGM object (CATICGMObject interface, or its derived interfaces such a CATGeometry, 
CATSurface, CATCurve for example). It contains data that you want to add to a CGM 
object, without deriving from the corresponding interface. This is useful:</p>
<ul>
	<li>To stamp an object (during a scan process for example).</li>
	<li>To attach temporary processed data (such as extracted meshing).</li>
	<li>To store foreign data with specific management methods.</li>
	<li>In particular, this is used to introduce foreign surface into CGM.</li>
</ul>
<p>Depending on your need, you can create <em>temporary</em> or <em>streamable</em> 
attribute classes, by deriving your own class from the CATCGMAttribute class and 
CATCGMStreamAttribute class respectively:</p>
<ul>
	<li>Temporary attributes are only living during the time of your program execution.</li>
	<li>Streamable attributes can be translated into a sequence of bytes to be saved 
	on a given media, and read from a sequence of bytes that comes from a previous 
	translation.</li>
</ul>
<table>
	<caption>Fig. 1: The Objects Involved in the Attribute Mechanisms</caption>
	<tr>
		<td>
		<img src="images/CAACgmGobForeign0.gif" alt="Foreign" width="479" height="359"></td>
		<td>An attribute is a CATCGMAttribute object that is referenced by a CATICGMObject.
		<p>It can be temporary or streamable</p>
		<p>You create your own attribute class by derivation.</p>
		<p>All derived object from the CATICGMObject interface obviously owns the 
		attributes management mechanism.</p>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Characterization"></a>Characterization</h3>
<p>An attribute is characterized by a class name, an application name and a version 
number. The application name is a logical name for the physical load module that 
contains the attribute class. The mapping between the logical and physical names 
is realized through the <em>static query implementation</em> as precisely described 
in the Object Modeler documentation. What you need to know here is that you have 
to create a header that contains the physical name, a source that declares the mapping 
and a line into a dictionary. The header is as follows:</p>
<pre class="code">//-----------------------------------------------------------------------------
//         header XXX.h for the physical load name (XXX)
//-----------------------------------------------------------------------------
#ifdef  _WINDOWS_SOURCE
#ifdef  __XXX
#define ExportedByXXX   __declspec(dllexport)
#else
#define ExportedByXXX   __declspec(dllimport)
#endif
#else
#define ExportedByXXX
#endif</pre>
<p>The <a name="source"></a>source is:</p>
<pre class="code">//-----------------------------------------------------------------------------
//         source MyApplicationName.cpp for the mapping
//  logical load name (MyApplicationName) - physical load name (XXX)
//  through the dictionary
//-----------------------------------------------------------------------------
#include &quot;AppDef.h&quot;
<strong>AppDef(MyApplicationName)</strong>;</pre>
<p>The dictionary <a name="MyApplicationName.dico"><code>MyApplicationName.dico</code></a> 
contains the following line:</p>
<pre class="code">MyApplicationName        CATICGMDomainBinder        libXXX</pre>
<p>Now, you have to declare the mapping in your attribute class by the mean of the 
macro <code>CATCGMDeclareAttribute</code>, as showed in the header example <code>
MyAttributeClass.h</code> below, and the macro <code>CATCGMImplAttribute</code>, 
as in the code example for a persistent (or streamable) <code>MyAttributeClass.cpp</code>:</p>
<pre class="code">#ifndef MyAttributeClass_H
#define MyAttributeClass_H
class CATCGMAttributeDef;
class CATCGMStream;
class CATICGMObject;
class CATCGMContainer;

#include &quot;CATCGMStreamAttribute.h&quot;
#include &quot;XXX.h&quot;

//-----------------------------------------------------------------------------
// case of a streamable attribute
class ExportedByXXX MyAttributeClass : public CATCGMStreamAttribute
{
  <strong>CATCGMDeclareAttribute</strong>(MyAttributeClass, CATCGMStreamAttribute);
  public :
  virtual void Stream(CATCGMStream &amp; ioStream);
  virtual void UnStream(CATCGMStream &amp; iStream);
// own methods..
  void SetValue(long iVal);
  void GetValue (long &amp; oVal);
  protected :
// useful- returns 1 if TRUE 0 otherwise
    virtual long Compare(const CATCGMAttribute &amp;iOtherAttribute);
};
// useful
ExportedByXXX void CastTo(CATCGMAttribute * iMyAttribute, MyAttributeClass * &amp; oMyAttribute);
#endif</pre>
<p>The corresponding source <code>MyAttributeClass.cpp</code> is:</p>
<pre class="code">#include &quot;CATCGMAttrId.h&quot;
#include &quot;MyAttributeClass.h&quot;
#include &quot;CATBaseUnknown.h&quot;
#include &quot;CATCGMStream.h&quot;

void CastTo(CATCGMAttribute * curattr, MyAttributeClass * &amp; retour)
{
  retour =NULL;
  if (curattr -&gt;IsATypeOf(UAIDPtr(MyAttributeClass)))
    retour = (MyAttributeClass *) curattr;
}
// declaration of the class, the application and the version.
<strong>CATCGMImplAttribute</strong>(MyAttributeClass,CATCGMStreamAttribute,MyApplication,1);

void MyAttributeClass::Stream(CATCGMStream &amp; Str)
{Str.WriteLong(streamedvalue);}

void MyAttributeClass::UnStream(CATCGMStream &amp; Str)
{Str.ReadLong(streamedvalue);}

void MyAttributeClass::SetValue(long val)
{ streamedvalue=val;}

void MyAttributeClass::GetValue (long &amp; val)
{ val = streamedvalue;}

long MyAttributeClass::Compare(const CATCGMAttribute &amp; NewAttr)
{
  long idef = 0;
  MyAttributeClass * newattr;
  CastTo((MyAttributeClass *)&amp;NewAttr, newattr);
  if (streamedvalue== newattr-&gt;streamedvalue)
    idef=1;
  return idef;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Management"></a>Management</h3>
<p>Once defined, an attribute can be used by a CATICGMObject. Hence, the <code>CATICGMObject::PutAttribute</code> 
method allows a CATICGMObject to point to an attribute.</p>
<p>Now, the attributes can be read (<code>CATICGMObject::GetAttribute</code>) or 
released (<code>CATICGMObject::ReleasedAttribute</code>). If a CATICGMObject releases 
an attribute that is no more used, the attribute is deleted.</p>
<p>A CATICGMObject may point several attributes of different classes; conversely, 
an attribute may be pointed by several CATICGMObjects of the same container (a container 
is a set that contains objects). If a CATICGMObject is deleted, the attribute(s) 
that it points is(are) also deleted if this(these) attribute(s) is(are) no more 
pointed by any other CATICGMObjects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Stream and unstream"></a>Stream and Unstream</h3>
<p>The stream and unstream mechanisms allow you to translate a (persistent) object 
into a sequence of bytes and vice et versa. To unstream a file (at the File/Read 
operation for example), the unstream process uses the mapping between the application 
name and the load module name to load the right physical load module. If the load 
module is not found during the unstream process, the attribute is copied and referenced 
by the the CATICGMObject, but not seen, so that the model can be read and the data 
are not lost, but not usable too.</p>
<p>To write the stream and unstream methods for your own attribute, take into account 
that: </p>
<ul>
	<li>For that purpose, the CATMathStream class offers you methods to stream and 
	unstream data according to their type (&quot;long&quot;, &quot;double&quot;, &quot;string&quot;, &quot;char&quot; for 
	example).</li>
	<li>These methods take into account the NT/Unix platform type, so you do not 
	have to care with this point, except if you decide to stream your data as a 
	whole buffer. For that reason also, do not use the stream method of a &quot;long&quot; 
	to stream two&quot;int&quot;.</li>
	<li>You must write and read the data in the same order. If you have arrays of 
	variable length, write the length of the array before the values.</li>
	<li>The upward and downward compatibility may be managed by using the method 
	that gives you the object data length to unstream, especially if you only add 
	(or suppress) data . If not sufficient, you may use a version number to insure 
	the compatibility of your different versions of attributes.</li>
	<li>Do not let point your streamable attribute to other objects.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Non Persistent Attribute: Sample"></a>Non Persistent Attribute: Sample</h3>
<p>First described the application name through the
<a href="#MyApplicationName.dico">dictionary</a> and the corresponding
<a href="#source">header file</a>.</p>
<p>The header of a new attribute class can be as as follows:</p>
<pre class="code">#ifndef UserNonPersistentAttr_H_
#define UserNonPersistentAttr_H_
#include &quot;XXX.h&quot;
#include &quot;CATCGMAttribute.h&quot;

class ExportedByXXX UserNonPersistentAttr : public CATCGMAttribute
{
public :
CATCGMDeclareAttribute(UserNonPersistentAttr,CATCGMAttribute);
UserNonPersistentAttr();
UserNonPersistentAttr(const UserNonPersistentAttr&amp;);
UserNonPersistentAttr&amp; operator=(const UserNonPersistentAttr&amp;);
virtual ~UserNonPersistentAttr();

};
#endif</pre>
<p>The source file is then:</p>
<pre class="code">#include &quot;UserNonPersistentAttr.h&quot;
CATCGMImplAttribute(UserNonPersistentAttr,CATCGMAttribute,NoAppDef,1);
//
UserNonPersistentAttr::UserNonPersistentAttr() :
CATCGMAttribute()
{
}
//
UserNonPersistentAttr::UserNonPersistentAttr(const UserNonPersistentAttr&amp;)
{
}
//
UserNonPersistentAttr&amp; UserNonPersistentAttr::operator=(const UserNonPersistentAttr&amp;)
{
return *this;
}
//
UserNonPersistentAttr::~UserNonPersistentAttr()
{
}</pre>
<p>To use it:</p>
<pre class="code">//Creates a UserNonPersistentAttr
UserNonPersistentAttr * pMyAttr=new UserNonPersistentAttr();
//
// Puts it on a line
piLine-&gt;PutAttribute(pMyAttr);
//
// Gets it from the line
UserNonPersistentAttr * pRetrievedAttr=
    (UserNonPersistentAttr*) piLine-&gt;GetAttribute(UAIDPtr(UserNonPersistentAttr))
// 
//Releases it from the line if no more needed
piLine-&gt;ReleaseAttribute(pRetrievedAttr);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="The introduction of a foreign surface class"></a>The Introduction of 
a Foreign Surface Class</h2>
<p>CATIA Geometric Modeler offers a large variety of surfaces (CATSurface interface) 
from elementary surfaces to Nurbs surfaces, and from sampled surfaces to procedural 
surfaces. All the capabilities of these surfaces are described in the [<a href="#References">2</a>] 
paper.</p>
<p>You may need to introduce your own surface classes, either you want to have a 
special interface for existing CATSurfaces (for example, you want to have a class 
for Bezier surface, that is a specific case of CATNurbsSurface), or you have developed 
own methods that are optimized for a given type of surfaces.</p>
<p>This section describes the way to introduce foreign surfaces in CGM. Once introduced, 
they can be handled as any CATSurface: thus, they can be used, for example, by the 
geometric operators or as the geometric support of topological faces as any CATSurface. 
All CATSurface must be C2 continuous (at least twice differentiable). So does your 
own surfaces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Basic principle"></a>Base Principle</h3>
<p>The base principle is to involve an attribute class called CATForeignSurfaceData 
and the interface CATIForeignSurface in a bi-directional relashionship: the CATIForeignSurface 
is a void shell, that is filled by the CATForeignSurfaceData, as attribute of CATIForeignSurface.
</p>
<ul>
	<li>CATIForeignSurface retrieves the CATForeignSurfaceData attribute through 
	a <code>GetAttribute</code> method, called here <code>GetData</code>.</li>
	<li>CATForeignSurfaceData can ask for its reference by the <code>GetReference</code> 
	method.</li>
</ul>
<p>You only have to derive your own attribute class from CATForeignSurfaceData, 
and overload the pure virtual (at least) methods.</p>
<table>
	<caption>Fig. 2: The Mechanism of Introduction of a Foreign Surface</caption>
	<tr>
		<td>
		<img src="images/CAACgmGobForeign2.gif" alt="Foreign" width="479" height="359"></td>
		<td>CGM offers two objects that are bi-directionally linked. CATIForeignSurface 
		and CATForeignSurfaceData.
		<p>To introduce your own surface object, you have to derive CATForeignSurfaceData,
		and overload the methods to fit the properties of your object.</p>
		<p>Then, a CATIForeignSurface object that have a MySurfaceData object as 
		data is handled as any CATSurface by CGM, and with the behavior you have 
		given it.</p>
		</td>
	</tr>
</table>
<p>CATForeignSurfaceData is a CATCGMStreamAttribute. Hence, it globally owns the 
same properties as its father, except that: </p>
<ul>
	<li>A CATForeignSurfaceData cannot be pointed by several CATIForeignSurface, 
	and a CATIForeignSurface cannot point several CATForeignSurfaceData (although 
	it can points other CATCGMAttribute that are not CATForeignSurfaceData).</li>
	<li>If the load module containing the attribute class is not found, the file 
	is not readable.</li>
</ul>
<p>Once described the general mechanism, we detail now the methods of CATForeignGeometryData 
and CATForeignSurfaceData, that must or may be written for taking into account the 
properties of your own surface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATForeignGeometryData"></a>CATForeignGeometryData</h3>
<p>This class handles the common behavior of all the foreign geometric objects. 
It is the counterpart of the CATGeometry interface. We find here </p>
<ul>
	<li>Pure virtual methods, that you must overload for your own object:
	<ul>
		<li><code>Stream</code> and <code>Unstream</code> (as previously 
		explained).</li>
		<li><code>Clone</code> duplicates your object.</li>
		<li><code>Move3D</code> transforms your object according to a given 
		mathematical transformation (rotation, symmetry, etc.).</li>
	</ul>
	</li>
	<li>Virtual methods, that have a default behavior. You may overload them to 
	increase the performances or to better fit the behavior of your own class:
	<ul>
		<li><code>CloneAndMove3D</code> duplicates, then transforms your object.</li>
		<li><code>GetSize</code> gives an approximated evaluation of the size of 
		your object, while <code>Dump</code> writes information about the 
		object.</li>
		<li><code>CheckUp</code> performs some checks on your objects.</li>
	</ul>
	</li>
</ul>
<p>If you compare the methods that are requested for your object with the CATGeometry 
and CATICGMObject methods, you can notice that nothing maps the <code>GetLinks</code> 
method. Indeed, if your object refers to an other one, that is foreign or CGM, this 
forward linked object would not be taken into account in any CGM processes up to 
now.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATForeignSurfaceData"></a>CATForeignSurfaceData</h3>
<p>This class handles the behavior of the foreign surfaces. It is the counterpart 
of the CATSurface interface. Let us first remind some important CATSurface properties:
</p>
<ul>
	<li>As a surface is a bi-parameterized geometric element, it may be represented 
	by three functions of two variables, called <strong>CATMathFunctionXY</strong> 
	(<code>(FX(u,v), FY(u,v), FZ(u,v))</code>). <code>(u,v)</code> are the parameters 
	of a point on the surface and are managed by the <code>CATSurParam</code> class. 
	Each type of surface is responsible for the mapping (called <em>evaluation</em>) 
	between the <code>(u,v)</code> parameters and their corresponding coordinates 
	in the 3D space. Hence the evaluation of a point of a surface amounts to the 
	evaluation of the CATMathFunctionXY.
	<ul>
		<li>If you do not find the type of function you want in CGM (CATMathFunctionXY 
		or one of its derivated classes), you must derive your own function class.</li>
	</ul>
	</li>
	<li>Surfaces can have several <em>patch</em>es in each direction: a patch is 
	a part of the surface where it is many infinitely deferentiable. At the frontier 
	of the patch the function is only C2 continuous, and the continuity properties 
	are modeled by a nodal vector (the CATKnotVector class). The patches are located 
	with a patch number <code>iPatchU</code> in the first direction and a patch 
	number <code>iPatchV</code> in the second direction. Hence, you can use a local 
	parameter on a given patch, or a global parameter, that takes in account the 
	whole surface. The patch numbers are not necessarily positive, but their values 
	are consecutive. Notice that the nodal vectors must not be periodic.</li>
	<li>A surface has a current limitation, and a maximum limitation, outside which 
	it is not defined or cannot be extrapolated and then cannot be evaluated. A 
	surface limitation is defined by two <code>CATSurParam</code> objects and managed 
	by a <code>CATSurLimits</code> class. The current limitation defines the area 
	of the surface that is useful, visualized and used by default by the geometric 
	operators.</li>
</ul>
<p>Hence, the main methods of the CATForeignSurfaceData are: </p>
<ul>
	<li>Pure virtual methods, that you must overload for your own object:
	<ul>
		<li><code>GetLimits, GetInternalMaxLimits</code> and <code>GetMaxLimits</code> 
		return the current and maximum limitation respectively, <code>SeLimits</code> 
		defines a current limitation.</li>
		<li>Extrapolate must extend the MaxLimits of this surface.</li>
		<li><code>GetKnotVector</code> retrieves the nodal representation if 
		your surface has several patches.</li>
		<li><code>GetEquationSize</code> and <code>CreateLocalEquation</code> give 
		the number of patches and the CATMathFunctionXY associated with each 
		patch respectively.</li>
		<li><code>IsConfused</code> tests is the transformation of your surface 
		is globally coincident with another surface.</li>
		<li><code>IsCloseU</code> and <code>IsClosedV</code> test is your 
		surface is closed in the first or second direction respectively.</li>
	</ul>
	</li>
	<li>Virtual methods, that have a default behavior. You may overload them to 
	increase the performances or to better fit the behavior of your own class: 	<ul>
		<li><code>GetBox</code> , <code>GetBoundingBox</code>, <code>GetInternalMaxLimits</code>,
		<code>GetInternalMaxBoundingBox</code> deal with limitations of a part of 
		a surface, and are defined by default, as soon as the evaluators on the 
		corresponding CATMathFunctionXY are available. So do the different <code>
		Eval</code> methods.</li>
		<li><code>CreateParam</code> returns a CATSurParam on the surface.</li>
		<li><code>IsInvariant</code> tests is your surface is geometrically 
		invariant by a mathematical transformation.</li>
		<li><code>HasImplicitEquation</code>, <code>GetImplicitEquation</code>,
		<code>GetParam</code>, <code>GetParamOnIsopar</code> deal with surfaces 
		that have an implicit equation. In this case, it allows to have directly 
		the mapping from the <code>(x,y,z)</code> cartesian coordinates of a point 
		to the <code>(u,v)</code> parameters.</li>
		<li><code>HasMathCurve</code>, <code>GetMathCurve</code> returns the mathematical 
		representation of an iso-parametric curve of a surface if this 
		mathematical representation exists.</li>
		<li><code>CreateOffset</code> returns the result of the offset of a surface. 
		By default, it creates the procedural CATOffsetSurface.</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATMathForeignFunctionXY"></a>CATMathFunctionXY</h3>
<p>This class manages the evaluators that are used by the surface evaluators. There 
are already CATMathLinearXY, CATMathFunctionXY, CATMathPolynomXY are kind of CATMathFunctionXY 
that are already provided in CGM.</p>
<p>If needed however, you may derive your own class of function to fit your object 
behavior, and overload at least the evaluator <code>Eval</code> of the value of 
the function.</p>
<p>The evaluation of the first and second derivatives may be approximated by default. 
So do the interval evaluators. It is however strongly recommended to overload the 
first derivatives evaluation, the best being to also write the second derivatives 
evaluation. If you overload the interval evaluators you will increase the CPU performances.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to proceed"></a>How to Proceed</h3>
<p>This section summarizes the steps for the integration of your own surface class.</p>
<ul>
	<li>Analyze the need of a new type of CATMathFunctionXY. If needed:
	<ul>
		<li>Create your own class <code>MyFunctionXY</code> of function of two variables, 
		by derivation of CATMathFunctionXY.</li>
		<li>Write the evaluators of this new function.</li>
		<li>Optionally, write the evaluation of the first and second 
		derivatives, and the interval evaluators.</li>
		<li>Write the <code>Stream</code> and <code>UnStream</code> methods for 
		this object.</li>
	</ul>
	</li>
	<li>Create your class <code>MySurfaceData</code> by derivation of the CATForeignSurfaceData 
	class:
	<ul>
		<li>Write the mandatory methods (do not forget the methods of the CATCGMStreamAttribute 
		as <code>Stream</code> and <code>UnStream</code> or the methods of CATForeignGeometryData 
		as <code>Clone</code> and <code>Move</code>, and the default 
		constructor).</li>
		<li>Optionally, write the other CATForeignSurfaceData methods.</li>
		<li>Possibly write specific methods for this class.</li>
	</ul>
	</li>
	<li>You are ready to use your own surface class and to test it:
	<ul>
		<li>Create a <code>MySurfaceData</code> object.</li>
		<li>Create a <code>CATIForeignSurface</code> object with the <code>CATGeoFactory::CreateForeignSurface</code> 
		method, by giving a pointer to the <code>MySurfaceData</code> object.</li>
		<li>And use the created <code>CATIForeignSurface</code> as any surface in 
		CGM.</li>
	</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<ul>
	<li>The geometric attributes allow you to put additional data on all object 
	deriving from the CATICGMObject interface.</li>
	<li>Foreign surfaces are added into CGM by the derivation of the CATForeignSurfaceData 
	(and possibly a CATMathFunctionXY). This CATForeignSurfaceData is the attribute 
	filling the void CATIForeignSurface, that may be then handled as any CATSurface.</li>
	<li>The following table summarizes the properties of the different attributes:
	<table class="fill">
		<tr>
			<th>Attribute</th>
			<th>Pointed by</th>
			<th>Streamable</th>
		</tr>
		<tr>
			<td>CATCGMAttribute</td>
			<td>one or more CATICGMObject</td>
			<td>no</td>
		</tr>
		<tr>
			<td>CATCGMStreamAttribute</td>
			<td>one or more CATICGMObject of the same container</td>
			<td>yes<br>
			A file is readable, even if the attribute class load module is not found</td>
		</tr>
		<tr>
			<td>CATForeignSurfaceData</td>
			<td>only one CATIForeignSurface, that points only one CATForeignSurfaceData</td>
			<td>yes<br>
			A file is not readable if the attribute class load module is not found</td>
		</tr>
	</table>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAACgmTaGobCurves.htm">The Curves of CATIA Geometric Modeler</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAACgmTaGobSurfaces.htm">The Surfaces of CATIA Geometric Modeler</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
