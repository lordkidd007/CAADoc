<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Monitoring Service Use Case</title>
</head>
 
<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Monitoring Service Use Case<br>
		</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article illustrates how to use the <i>Monitoring </i>web services 
		operations to monitor XPG Gateway.</p>
		<p>To take full advantage out of this use case, refer to the &quot;Monitoring 
		Service Description&quot; [<a href="#References">1</a>] and technical article 
		[<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#CAAXPGEventBusStatus">CAAXPGEventBusStatus</a>
			<ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventBusStatus Use Cases">
				What You Will Learn With CAAXPGEventBusStatus Use Cases</a></li>
				<li><a href="#The CAAXPGEventBusStatus Use Case">The CAAXPGEventBusStatus 
				Use Case</a></li>
			</ul>
			</li>
			<ul>
				<li><a href="#What Does CAAXPGEventBusStatus Do">What Does CAAXPGEventBusStatus 
				Do</a></li>
				<li><a href="#How to Launch CAAXPGEventBusStatus">How to Launch 
				CAAXPGEventBusStatus </a></li>
				<li><a href="#Step by Step CAAXPGEventBusStatus">Where to Find the 
				CAAXPGEventBusStatus Code</a></li>
				<li><a href="#Step by Step CAAXPGEventBusStatus">Step by Step CAAXPGEventBusStatus</a></li>
			</ul>
			</li>
			<li><a href="#CAAXPGEventOperation">CAAXPGEventOperation</a>
			<ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventOperation Use Cases">
				What You Will Learn With CAAXPGEventOperation Use Cases</a></li>
				<li><a href="#The CAAXPGEventOperation Use Case">The CAAXPGEventOperation 
				Use Case</a></li>
				<li><a href="#What Does CAAXPGEventOperation Do">What Does CAAXPGEventOperation 
				Do</a></li>
				<li><a href="#How to Launch CAAXPGEventOperation">How to Launch 
				CAAXPGEventOperation </a></li>
				<li><a href="#Where to Find the CAAXPGEventOperation Code">Where 
				to Find the CAAXPGEventOperation Code</a></li>
				<li><a href="#Step by Step CAAXPGEventBusStatus">Step by Step CAAXPGEventBusStatus</a></li>
			</ul>
			</li>
			<li><a href="#CAAXPGEventInformation">CAAXPGEventInformation</a>
			<ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventOperation Use Cases">
				What You Will Learn With CAAXPGEventInformation Use Cases</a></li>
				<li><a href="#The CAAXPGEventInformation Use Case">The CAAXPGEventInformation 
				Use Case</a></li>
				<li><a href="#What Does CAAXPGEventInformation Do">What Does CAAXPGEventInformation 
				Do</a></li>
				<li><a href="#How to Launch CAAXPGEventInformation">How to Launch 
				CAAXPGEventInformation </a></li>
				<li><a href="#Where to Find the CAAXPGEventInformation Code">Where 
				to Find the CAAXPGEventInformation Code</a></li>
				<li><a href="#Step by Step CAAXPGEventInformation">Step by Step 
				CAAXPGEventInformation</a></li>
			</ul>
			</li>
			<li><a href="#CAAXPGEventQueueInfo">CAAXPGEventQueueInfo</a><ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventQueueInfo Use Cases">
				What You Will Learn With CAAXPGEventQueueInfo Use Cases</a></li>
				<li><a href="#The CAAXPGEventQueueInfo Use Case">The CAAXPGEventQueueInfo 
				Use Case</a></li>
				<li><a href="#What Does CAAXPGEventQueueInfo Do">What Does CAAXPGEventQueueInfo 
				Do</a></li>
				<li><a href="#How to Launch CAAXPGEventQueueInfo">How to Launch 
				CAAXPGEventQueueInfo</a></li>
				<li><a href="#Where to Find the CAAXPGEventQueueInfo Code">Where 
				to Find the CAAXPGEventQueueInfo Code</a></li>
				<li><a href="#Step by Step CAAXPGEventQueueInfo">Step by Step CAAXPGEventQueueInfo</a></li>
			</ul>
			</li>
			<li><a href="#CAAXPGEventsFromSearchCriteria">CAAXPGEventsFromSearchCriteria</a><ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventsFromSearchCriteria Use Cases">
				What You Will Learn With CAAXPGEventsFromSearchCriteria Use Cases</a></li>
				<li><a href="#The CAAXPGEventQueueInfo Use Case">The CAAXPGEventsFromSearchCriteria 
				Use Case</a></li>
				<li><a href="#What Does CAAXPGEventsFromSearchCriteria Do">What 
				Does CAAXPGEventsFromSearchCriteria Do</a></li>
				<li><a href="#How to Launch CAAXPGEventsFromSearchCriteria">How 
				to Launch CAAXPGEventsFromSearchCriteria </a></li>
				<li>
				<a href="#Where to Find the CAAXPGEventsFromSearchCriteria Code">
				Where to Find the CAAXPGEventsFromSearchCriteria Code</a></li>
				<li><a href="#Step by Step CAAXPGEventsFromSearchCriteria">Step 
				by Step CAAXPGEventsFromSearchCriteria </a></li>
			</ul>
			</li>
			<li><a href="#CAAXPGEventBusMonitoring">CAAXPGEventBusMonitoring</a><ul>
				<li>
				<a href="#What You Will Learn With CAAXPGEventBusMonitoring Use Cases">
				What You Will Learn With CAAXPGEventBusMonitoring Use Cases</a></li>
				<li><a href="#The CAAXPGEventBusStatus Use Case">The CAAXPGEventBusMonitoring 
				Use Case</a></li>
				<li><a href="#What Does CAAXPGEventBusMonitoring Do">What Does CAAXPGEventBusMonitoring 
				Do</a></li>
				<li><a href="#How to Launch CAAXPGEventsFromSearchCriteria">How 
				to Launch CAAXPGEventBusMonitoring </a></li>
				<li><a href="#Where to Find the CAAXPGEventBusMonitoring Code">Where 
				to Find the CAAXPGEventBusMonitoring Code</a></li>
				<li><a href="#Step by Step CAAXPGEventBusMonitoring">Step by Step 
				CAAXPGEventBusMonitoring </a></li>
			</ul>
			</li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="CAAXPGEventBusStatus"></a>CAAXPGEventBusStatus </h2>
<h3><a name="What You Will Learn With CAAXPGEventBusStatus Use Cases">What You Will 
Learn With CAAXPGEventBusStatus Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Web Service
<code>GetGatewayStatus</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="The CAAXPGEventBusStatus Use Case">The CAAXPGEventBusStatus Use Case</a></h3>
<p><code>CAAXPGEventBusStatus</code> is a use case of the <code>CAAXPGWebServices.edu</code> 
framework that illustrates how to get overall Gateway status using Web Service
<code>GetGatewayStatus</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventBusStatus Do"></a>What Does CAAXPGEventBusStatus 
Do</h3>
<p>This use case is a command line application which retrieves the status of Gateway calling 
Web Service <code>GetGatewayStatus</code>. If there is any error or warning then 
it is shown on command prompt. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventBusStatus"></a>How to Launch CAAXPGEventBusStatus
</h3>
<p>To launch <code>CAAXPGEventBusStatus</code>, you will need to set up the build 
time environment, then compile <code>CAAXPGEventBusStatus</code> along with its 
prerequisites (the proxy), set up the run time environment, and then execute the 
use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventBusStatus.exe serviceUrl</code> </p>
<p>where:</p>
<table class="border1" id="table1">
	<tr>
		<th>serviceUrl</th>
		<td>The serviceUrl of the Monitoring Service on the Gateway; it should look like 
		this <code>http://host:port/webappname/webservice?id=XPGMonitoringService
		</code></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventBusStatus Code"></a>Where to Find the 
CAAXPGEventBusStatus Code</h3>
<p>The CAAXPGEventBusStatus use case is made of source files located in 
the CAAXPGWebServices.edu framework: </p>
<table id="table2" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusStatus.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusStatus.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step by Step CAAXPGEventBusStatus"></a>Step by Step CAAXPGEventBusStatus</h3>
<p>This use case is a command line application in which we take Monitoring Service 
URL as input. </p>
<p>We create object of <em>XPGMonitoringServiceClient</em> using the URL.</p>
<pre class="code">                XPGMonitoringServiceClient proxy;
                using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, serviceUrl))
</pre>
<p>&nbsp;Then we call Web Service GetGatewayStatus on this object of type <code>XPGMonitoringServiceClient</code>.</p>
<pre class="code">ListOfGatewayErrorsType gwErrors = proxy.GetGatewayStatus();</pre>
<p>GetGatewayStatus returns list of <code>GatewayErrorType</code>. The <code>GatewayErrorType
</code>object contains Error IDs and Error messages. </p>
<p>The situations that block Gateway 
operation are classified as Error. Errors have ID greater than 100. If there are 
Blocked events or event busy for more than <code>ThresholdTimeForBusyEvent
</code>mentioned in gateway-config.properties then such cases are treated as warnings.</p>
<p>Warnings have Error ID greater than zero and less than 101. Error ID zero denotes 
Gateway is running properly i.e. there is no error or warning. We show the errors 
and warnings returned by <em>GetGatewayStatus</em> on command prompt and also write 
into log file.</p>
<p>Here is the expected output when there is a blocked event:</p>
<pre class="code">
MonitoringService URL = http://host:port/Gateway/webservice?id=XPGMonitoringService
Gateway Error Count : 1
Gateway status -
Warning 1: id:2 Warning message: Blocked Remote Event/Events
</pre>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="CAAXPGEventOperation"></a>CAAXPGEventOperation </h2>
<h3><a name="What You Will Learn With CAAXPGEventOperation Use Cases">What You Will 
Learn With CAAXPGEventOperation Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Web Services
<code>RemoveEvent </code>and <code>RetryEvent</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="The CAAXPGEventOperation Use Case">The CAAXPGEventOperation Use Case</a></h3>
<p><code>CAAXPGEventOperation </code>is the second use case of the <code>CAAXPGWebServices.edu</code> 
framework. Its role is to illustrate to remove or retry a particular event using Web 
Services <code>RemoveEvent </code>and <code>RetryEvent </code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventOperation Do">What Does CAAXPGEventOperation Do</a></h3>
<p>This use case is a command line application which takes Monitoring Service URL 
and Event ID as input and asks user if he/she wants to remove or retry the event 
with inputted ID. It removes or retries the event as per user&#39;s selection. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventOperation"></a>How to Launch CAAXPGEventOperation
</h3>
<p>To launch <code>CAAXPGEventOperation</code> , you will need to set up the build 
time environment, then compile <code>CAAXPGEventOperation</code> along with its 
prerequisites (the proxy), set up the run time environment, and then execute the 
use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventOperation.exe &#8211;eventID=id serviceUrl</code></p>
<p>where:</p>
<table class="border1" id="table1">
	<tr>
		<th>eventID</th>
		<td>The unique ID of the event</td>
	</tr>
	<tr>
		<th>serviceUrl</th>
		<td>The serviceUrl of the MonitoringService on the Gateway; it should look like 
		this <code>http://host:port/webappname/webservice?id=XPGMonitoringService</code></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventOperation Code"></a>Where to Find the 
CAAXPGEventOperation Code</h3>
<p>The CAAXPGEventOperation use case is made of source files located in 
the CAAXPGWebServices.edu framework: </p>
<table id="table3" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventOperation.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventOperation.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="Step by Step CAAXPGEventOperation"></a>Step by Step CAAXPGEventOperation</h3>
<p>This use case is a command line application in which we take Monitoring Service 
URL and Event ID as input. </p>
<pre class="code">CAAXPGEventOperation.exe -eventID=&quot;a59147a-28669ce0-130ad5292f7&#8212;8000&quot; http://host:port/Gateway/webservice?id=XPGMonitoringService</pre>
<p>We create object of <code>XPGMonitoringServiceClient </code> type using the URL.</p>
<pre class="code">XPGMonitoringServiceClient proxy;
                using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, iServiceURL))
</pre>
<p>We ask user if he/she wants to remove or retry the Event with the inputted Event 
ID </p>
<p>User sees following text on command prompt</p>
<pre class="code">--------------------------------------------------------------------------------
&nbsp;CAAXPGEventOperations 
--------------------------------------------------------------------------------
&nbsp;1. Remove event  
&nbsp;2. Retry event
&nbsp;ESC key : Exit the application
--------------------------------------------------------------------------------
</pre>
<p>If user enters 1 then we call method <code>removeEvent</code> in which we call 
Web Service <code>RemoveEvent</code> on the object of <code>XPGMonitoringServiceClient
</code> type to remove the Event. &nbsp; </p>
<pre class="code">bool res = (bool)iProxy.RemoveEvent(iEventID);</pre>
<p><code>RemoveEvent</code> takes Event ID as input parameter and it returns the result 
of the operations if it is successful or not.</p>
<p>If user enters 2 then we call method <code>retryEvent</code> in which we call 
Web Service <code>RetryEvent</code> on the object of <code>XPGMonitoringServiceClient</code> 
to retry the Event. </p>
<pre class="code">
bool res = (bool)iProxy.RetryEvent(iEventID);
</pre>
<p><code>RetryEvent</code> takes Event ID as input parameter and it returns the result 
of the operations if it is successful or not.</p>
<p>User has to press Escape key to exit from the application. </p>
<p>Here is the expected output: </p>
<pre class="code">
MonitoringService URL = http://host:port/Gateway/webservice?id=XPGMonitoringService
Event UID = a59147a-28669ce0-130ad5292f7&#8212;8000
----------------------------------------------------------------------------- 
CAAXPGEventOperations                                                           
----------------------------------------------------------------------------   
1. RemoveEvent
2. RetryEvent
ESC key : Exit the application
-----------------------------------------------------------------------------    
 1
 Event a59147a-28669ce0-130ad5292f7&#8212;8000 removed successfully !

-----------------------------------------------------------------------------
 CAAXPGEventOperations
-----------------------------------------------------------------------------
 1. RemoveEvent
 2. RetryEvent
 ESC key : Exit the application
-----------------------------------------------------------------------------
&#8592;
Exiting application.

CAAXPGEventOperation.exe -eventID=&quot;a59147a-1dd1de45-130ad52b59c--8000&quot; &quot;http://host:port/Gateway/webservice?id=XPGMonitoringService&quot;
MonitoringService URL = http://host:port/Gateway/webservice?id=XPGMonitoringService
Event UID = a59147a-1dd1de45-130ad52b59c--8000
-----------------------------------------------------------------------------
 CAAXPGEventOperations
-----------------------------------------------------------------------------
 1. RemoveEvent
 2. RetryEvent
 ESC key : Exit the application
-----------------------------------------------------------------------------
 2
 Event a59147a-1dd1de45-130ad52b59c--8000 set to be retried
-----------------------------------------------------------------------------
 CAAXPGEventOperations
-----------------------------------------------------------------------------
 1. RemoveEvent
 2. RetryEvent
 ESC key : Exit the application
-----------------------------------------------------------------------------
Exiting application.
</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CAAXPGEventInformation"></a>CAAXPGEventInformation</h2>
<h3><a name="What You Will Learn With CAAXPGEventInformation Use Cases">What You 
Will Learn With CAAXPGEventInformation Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Web Services
<code>GetEventState</code> and <code>GetEventInformation</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="The CAAXPGEventInformation Use Case">The CAAXPGEventInformation Use 
Case</a></h3>
<p><code>CAAXPGEventInformation </code>is a use case of the <code>CAAXPGWebServices.edu</code> 
framework that illustrates how to get event related information from Event ID using 
Web Services <code>GetEventState </code>and <code>GetEventInformation</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventInformation Do"></a>What Does CAAXPGEventInformation 
Do</h3>
<p>This use case is a command line application which takes Monitoring Service URL 
and Event ID as input and asks user if he/she wants to get information of the event 
or just state of event. It shows all the event information or the event state (as per user selection) on command prompt.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventInformation"></a>How to Launch CAAXPGEventInformation
</h3>
<p>To launch <code>CAAXPGEventInformation</code>, you will need to set up the build 
time environment, then compile <code>CAAXPGEventInformation</code> along with its 
prerequisites (the proxy), set up the run time environment, and then execute the 
use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventInformation.exe -eventID=id serviceUrl</code> </p>
<p>where:</p>
<table class="border1" id="table4">
	<tr>
		<th>eventID</th>
		<td>The unique ID of the event</td>
	</tr>
	<tr>
		<th>serviceUrl</th>
		<td>The serviceUrl of the Monitoring Service on the Gateway; it should look like 
		this <code>http://host:port/webappname/webservice?id=XPGMonitoringService
		</code></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventInformation Code"></a>Where to Find the 
CAAXPGEventInformation Code</h3>
<p>The <code>CAAXPGEventInformation </code>use case is made of source files 
located in the CAAXPGWebServices.edu framework: </p>
<table id="table5" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventInformation.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventInformation.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step by Step CAAXPGEventInformation"></a>Step by Step CAAXPGEventInformation</h3>
<p>This use case is a command line application in which we take Monitoring Service 
URL and Event ID as inputs. </p>
<pre class="code">CAAXPGEventInformation.exe -eventID=&quot;a59147a--7611e9d5-130baebc9f9--8000&quot; http://host:port/Gateway/webservice?id=XPGMonitoringService</pre>
<p>We create object of <code>XPGMonitoringServiceClient </code>type using the URL.</p>
<pre class="code">XPGMonitoringServiceClient proxy;
using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, iServiceURL)) </pre>
<p>We ask user if he/she wants to get all the information of the event with the 
inputted Event ID or wants to know just the event state. </p>
<p>User sees following text on command prompt </p>
<pre class="code">--------------------------------------------------------------------------------
 CAAXPGEventInformation. 
--------------------------------------------------------------------------------
 1. Get event information 
 2. Get event state
  ESC key : Exit the application
--------------------------------------------------------------------------------
</pre>
<p>If user enters 1 then we call method <code>getEventsInfo </code>in which we call 
Web Service <code>GetEventInformation </code>on the object of <code>XPGMonitoringServiceClient
</code></p>
<pre class="code">EventInformationType oEventInformation = iProxy.GetEventInformation(iEventID);</pre>
<p>Web Service <code>GetEventInformation </code>returns an object of type <code>EventInformationType
</code>which contains all the event information. </p>
<p>If user enters 2 then we call method <code>getEventState </code>in which we call 
Web Service <code>GetEventState </code>on the object of <code>XPGMonitoringServiceClient
</code>type which returns <code>EventStateType </code>i.e. state of the Event </p>
<pre class="code">string eventState = iProxy.GetEventState(iEventID);</pre>
<p>User has to press Escape key to exit from the application. </p>
<p>Here is the expected output: </p>
<pre class="code">
MonitoringService URL = http://host:port/Gateway/webservice?id=XPGMonitoringService
Event UID = a59147a--7611e9d5-130baebc9f9&#8212;8000


-----------------------------------------------------------------------------
 CAAXPGEventInformation.
-----------------------------------------------------------------------------
 1. GetEventInformation
 2. GetEventState
  ESC key : Exit the application
-----------------------------------------------------------------------------
1
-----------------------------------------------------------------------------
   Event Information :-
         Event Id        =  a59147a--7611e9d5-130baebc9f9--8000
         Queue Name      =  testuser
         Event State     =  REMOTE_PROCESSING_ERROR
         Event Error ID  =  2
         Error Message   =  Remote Processing failed. Error - batch failed to reconcile data.
          Please see the traces at ftp://anonymous@tesstmachine/clientlogs/a59147a--7611e9d5-130baebc9f9--8000/2011-08-08_05_48_35
         Queue Type      =  REMOTE
         Event Path      =  D:\Gateways\VXG\Gateway\shadow\\ a59147a--7611e9d5-130baebc9f9--8000-TKGEN
         Event Duration  =  1123
         Event Size      =  1
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
 CAAXPGEventInformation.
-----------------------------------------------------------------------------
 1. GetEventInformation
 2. GetEventState
  ESC key : Exit the application
-----------------------------------------------------------------------------
2
         EventState = REMOTE_PROCESSING_ERROR
-----------------------------------------------------------------------------
 CAAXPGEventInformation.
-----------------------------------------------------------------------------
 1. GetEventInformation
 2. GetEventState
  ESC key : Exit the application

&#8592;
Exiting application.

</pre>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="CAAXPGEventInformation"></a><a name="CAAXPGEventQueueInfo"></a>CAAXPGEventQueueInfo
</h2>
<h3><a name="What You Will Learn With CAAXPGEventQueueInfo Use Cases">What You Will 
Learn With CAAXPGEventQueueInfo Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Web Service
<code>GetListOfQueue</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="The CAAXPGEventQueueInfo Use Case">The CAAXPGEventQueueInfo Use Case</a></h2>
<p><code>CAAXPGEventQueueInfo </code>is a use case of the <code>CAAXPGWebServices.edu</code> 
framework that illustrates how to get the list of active Event Queues using Web Service
<code>GetListOfQueue</code>. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventQueueInfo Do"></a>What Does CAAXPGEventQueueInfo 
Do</h3>
<p>This use case is a command line application which retrieves list of Queue names 
in the Gateway calling Web Service <code>GetListOfQueue </code>and shows it on command 
prompt. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventQueueInfo"></a>How to Launch CAAXPGEventQueueInfo
</h3>
<p>To launch <code>CAAXPGEventQueueInfo</code> , you will need to set up the build 
time environment, then compile <code>CAAXPGEventQueueInfo</code> along with its 
prerequisites (the proxy), set up the run time environment, and then execute the 
use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventQueueInfo.exe serviceUrl</code></p>
<p>where:</p>
<table class="border1" id="table6">
		<tr>
		<th>serviceUrl</th>
		<td>The serviceUrl of the MonitoringService on the Gateway; it should look like 
		this <code>http://host:port/webappname/webservice?id=XPGMonitoringService</code></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventQueueInfo Code"></a>Where to Find the 
CAAXPGEventQueueInfo Code</h3>
<p>The CAAXPGEventQueueInfo use case is made of source files located in 
the CAAXPGWebServices.edu framework: </p>
<table id="table7" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventQueueInfo.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventQueueInfo.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>

<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="Step by Step CAAXPGEventQueueInfo"></a>Step by Step CAAXPGEventQueueInfo</h3>
<p>This use case is a command line application in which we take Monitoring Service 
URL as input. </p>
<p>We create object of <code>XPGMonitoringServiceClient </code>type using the URL.
</p>
<pre class="code">                XPGMonitoringServiceClient proxy;
                using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, serviceUrl))
</pre>
<p>Then we call Web Service <code>GetListOfQueue </code>on this object of <code>
XPGMonitoringServiceClient </code>type.</p>
<pre class="code">ListOfQueueNamesType listOfQueueNames = proxy.GetListOfQueue();</pre>
<p>Web Service <code>GetListOfQueue </code>returns list of <code>QueueNameType</code>. 
We show the Queue names on command prompt. </p>
<p>Here is the expected output: </p>
<pre class="code">

Number of Queues = 3
Queue Names are:-
[1] =abc
[2] =abcd
[3] =testUser
</pre>
<h2><a name="CAAXPGEventInformation"></a>
<a name="CAAXPGEventsFromSearchCriteria"></a>CAAXPGEventsFromSearchCriteria </h2>
<h3><a name="What You Will Learn With CAAXPGEventsFromSearchCriteria Use Cases">
What You Will Learn With CAAXPGEventsFromSearchCriteria Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Web Services
<code>GetEvents </code>and <code>GetEventsCount</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h3><a name="The CAAXPGEventBusMonitoring Use Case">The CAAXPGEventsFromSearchCriteria 
Use Case</a></h3>
<p><code>CAAXPGEventsFromSearchCriteria </code>is a use case of the <code>CAAXPGWebServices.edu</code> 
framework that illustrates how to get the number of events and event IDs that match 
a provided search criterion using Web Services <code>GetEvents </code>and <code>GetEventsCount</code>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventsFromSearchCriteria Do"></a>What Does CAAXPGEventsFromSearchCriteria 
Do</h3>
<p>This use case is a command line application which takes Monitoring Service URL 
and search options as input and asks user if he/she wants to get IDs of events or 
number of events satisfying the search criterion. It shows the obtained information 
on command prompt. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventsFromSearchCriteria"></a>How to Launch CAAXPGEventsFromSearchCriteria
</h3>
<p>To launch <code>CAAXPGEventsFromSearchCriteria</code>, you will need to set up 
the build time environment, then compile <code>CAAXPGEventsFromSearchCriteria</code> 
along with its prerequisites (the proxy), set up the run time environment, and then 
execute the use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventsFromSearchCriteria.exe [-h] <br> 
[&nbsp; -queueName = &lt;Queue Name&gt; | <br>
  &nbsp;&nbsp;
  -queueType = &lt;LOCAL/REMOTE&gt; | <br>
  &nbsp;&nbsp;
  -queueState = &lt;BUSY/BLOCKED/READY&gt; | <br>
  &nbsp;&nbsp;
  -eventStateType = &lt;PROCESSING/QUEUED/ERROR/ARCHIVED&gt; | <br>
  &nbsp;&nbsp;
  -eventDuration = &lt;Event Duration&gt; | <br>
  &nbsp;&nbsp;
  -eventName = &lt;Event Name &gt; | <br>
  &nbsp;&nbsp;
  -creationDate = &lt;OPERATOR;DATE1;DATE2 &gt; | <br>
  &nbsp;&nbsp;
  -eventSize = &lt;Event Size&gt; |<br> &nbsp;&nbsp; -processingResult= &lt;SUCCESS / ERROR / WARNING / FILE_TRANSFER_ERROR / CANCELED &gt; |<br> 
  &nbsp;&nbsp; 
  -processingReturnCode= &lt;integer&gt; <br> ] 
&lt;url&gt;</code> </p>
<p>where:</p>
<table class="border1" id="table8">
	<tr>
		<th>queueName &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
		<td>Name of the Queue.</td>
	</tr>
	<tr>
		<th>queueType</th>
		<td>Type of Queue : LOCAL/REMOTE</td>
	</tr>
	<tr>
		<th>queueState</th>
		<td>State of Queue : BUSY/BLOCKED/READY</td>
	</tr>
	<tr>
		<th style="height: 19px">eventStateType </th>
		<td style="height: 19px">The type of the state of the event.&nbsp;PROCESSING/QUEUED/ERROR/ARCHIVED</td>
	</tr>
	<tr>
		<th>eventDuration </th>
		<td>Minimum duration of the event in current state in minutes</td>
	</tr>
	<tr>
		<th>eventName </th>
		<td>Name of an event</td>
	</tr>
   <tr>
		<th>creationDate</th>
		<td>Event creation date. Expected format is OPERATOR;DATE1;DATE2.<br>
		 - <strong>OPERATOR</strong> = The operator for Date Criteria. Values can be ON/AFTER/BEFORE/BETWEEN<br>
		 - <strong>date1</strong> and <strong>date2</strong> are dates in UTC(GMT) format. The format expected is yyyy-MM-dd-HH:mm:ss where yyyy=Year, MM=Month, dd=Day, HH=Hour, mm=Minute, ss=Second <br>
		 Time expected is in 24-hour format.Please note that date2 is valid only if BETWEEN operator is used. In case of ON operator only date1 will be used.<br>
 	     e.g.To search events created between 1st March 2013, 2:10 AM and 10th April 2013, 4:20 PM use following command 
		:&nbsp; <br>
		<strong>-creationDate=BETWEEN;2013-03-01-02:10:00;2013-04-10-16:20:00 
		 
		 </strong> 
		 
		 </td>
	</tr>

	<tr>
		<th>eventSize </th>
		<td>size of the data relative to the already locally processed event 
		in KB </td>
	</tr>
	<tr>
		<th style="height: 16px">processingResult</th>
		<td>Result status of the processing 
		SUCCESS/ERROR/WARNING/FILE_TRANSFER_ERROR/CANCELED.</td>
	</tr>
     <tr>
		<th style="height: 24px">processingReturnCode</th>
		<td>Return code of the processing (int).</td>
	</tr>
	<tr>
		<th>url</th>
		<td>The Url of the MonitoringService on the Gateway.It should look like 
		this <span class="style1">http://host:port/webappname/webservice?id=XPGMonitoringService</span> </td>
	</tr>
</table>
<p> <strong>Important Points to remember</strong> :</p>
<ul> 
<li> <p>While searching event user can use any one of the 
above mentioned seach criteria. All search criterias are optional.</p>
 </li>
<li> <p> In order to retrieve events which are present in 
archived events list , user have to define event state type criteria as <code>ARCHIVED</code>. 
Events which are successfully executed or cancelled will get added to archived 
events list. If archived criteria is not applied to get events then events from 
active list will be retieved.</p>
</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventsFromSearchCriteria Code"></a>Where to 
Find the CAAXPGEventsFromSearchCriteria Code</h3>
<p>The <code>CAAXPGEventsFromSearchCriteria </code>use case is made of source 
files located in the <code>CAAXPGWebServices.edu</code> framework: </p>
<table id="table9" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventsFromSearchCriteria.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventsFromSearchCriteria.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step by Step CAAXPGEventsFromSearchCriteria"></a>Step by Step CAAXPGEventsFromSearchCriteria</h3>
<p>This use case is a command line application which is designed to get the number of 
events and event IDs that match a provided search criterion. It takes many options 
but only URL is a mandatory option.</p>
<p>We create object of <code>SearchCriteriaType </code>type and initialize its member 
as per search options obtained from command prompt.</p>
<p>We create object of <code>XPGMonitoringServiceClient </code>using the URL.
</p>
<pre class="code">                XPGMonitoringServiceClient proxy;
                using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, iServiceURL))
</pre>
<p>We ask user if he/she wants to get number of Events satisfying the provided search 
criterion or the list of Event IDs satisfying the provided search criterion. </p>
<p>User sees following text on command prompt </p>
<pre class="code">--------------------------------------------------------------------------------
 CAAXPGEventsFromSearchCriteria. 
--------------------------------------------------------------------------------
 1. Get events count  
 2. Get events
  ESC key : Exit the application
--------------------------------------------------------------------------------
</pre>
<p>If user enters 1 then we call method <code>getEventsCount </code>in which we 
call Web Service <code>GetEventsCount </code>on the object of <code>XPGMonitoringServiceClient</code> type.
</p>
<pre class="code">int oEventCount = (int)proxy.GetEventsCount(iSearchCriteriaType);</pre>
<p>Web Service <code>GetEventsCount </code>takes an object of <code>SearchCriteriaType </code>type as input and returns number of 
events satisfying provided search criterion.
</p>
<p>We display the obtained event count on command prompt. </p>
<p>If user enters 2 then we call method <code>getEvents </code>in which we call 
Web Service <code>GetEvents </code>on the object of <code>XPGMonitoringServiceClient</code>
</p>
<pre class="code">ListOfEventUIDsType oListOfEventUID = proxy.GetEvents(iSearchCriteriaType);</pre>
<p>Web Service <code>GetEvents </code>takes object <em>iSearchCriteriaType</em> as 
input and returns a to list of Event IDs satisfying the provided search criterion. 
We display the obtained Events IDs on command prompt.</p>
<p>to get the list of Event IDs satisfying provided search criterion. Web 
Service <code>GetEvents</code> takes object <em>SearchCriteriaType</em> as input. We display the 
obtained Events IDs on command prompt. </p>
<p>User has to press Escape key to exit from the application.</p>
<p>For example to get LOCAL BLOCKED events execute following command:</p>
<pre class="code">CAAXPGEventsFromSearchCriteria  -queueType=LOCAL -queueState=BLOCKED http://host:port/webappname/webservice?id=XPGMonitoringService&quot;</pre>
<p>Here is the expected output: </p>
<pre class="code">
-----------------------------------------------------------------------------
 CAAXPGEventsFromSearchCriteria.
-----------------------------------------------------------------------------
 1. GetEventsCount
 2. GetEvents
  ESC key : Exit the application
-----------------------------------------------------------------------------
 1
	Number of events satisfying the provided search criteria = 1

-----------------------------------------------------------------------------
 CAAXPGEventsFromSearchCriteria.
-----------------------------------------------------------------------------
 1. GetEventsCount
 2. GetEvents
  ESC key : Exit the application
-----------------------------------------------------------------------------
 2
         Number of events satisfying the provided search criteria = 1
         Event IDs -
         EventId[1] =a59147a-1dd1de45-130ad52b59c--8000

-----------------------------------------------------------------------------
 CAAXPGEventsFromSearchCriteria.
-----------------------------------------------------------------------------
 1. GetEventsCount
 2. GetEvents
  ESC key : Exit the application
-----------------------------------------------------------------------------
&#8592;
Exiting application.
</pre>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="CAAXPGEventInformation"></a><a name="CAAXPGEventBusMonitoring"></a>
CAAXPGEventBusMonitoring </h2>
<h3><a name="What You Will Learn With CAAXPGEventBusMonitoring Use Cases">What You 
Will Learn With CAAXPGEventBusMonitoring Use Cases</a></h3>
<p>The objective of this use case is to explain how to use Monitoring Service 
Web Services to monitor status of Gateway.</p>
<script type="text/javascript">insertLinkToTop()</script>
<h2><a name="The CAAXPGEventBusMonitoring Use Case">The CAAXPGEventBusMonitoring 
Use Case</a></h2>
<p><code>CAAXPGEventBusMonitoring </code>is a use case of the <code>CAAXPGWebServices.edu</code> 
framework that illustrates how to keep checking Gateway status and how to take corrective 
action if there is any error or warning. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAAXPGEventBusMonitoring Do"></a>What Does CAAXPGEventBusMonitoring 
Do</h3>
<p>This use case is a command line application. Various Gateway monitoring activities 
have been covered in this use case. It iteratively calls Web Service <em>GetGatewayStatus</em> 
to keep checking health of Gateway. It displays all the obtained information like 
Errors and Warnings on command prompt and also writes into log file. The Gateway 
Error messages contain hints about corrections. Application waits for user&#8217;s action 
for Error corrections. After corrections it starts again checking Gateway Status.
</p>
<p>In case of warning situations like blocked events or busy events (events in processing 
state for more than defined Threshold time) it displays list of such events and 
take input from user if busy events should be removed and the blocked events should 
be retried. According to user input it removes Busy events and retries Blocked events.</p>
<p>Following Monitoring Web Services are called in this use case </p>
<ul>
	<li>GetGatewayStatus </li>
	<li>GetListOfQueue</li>
	<li>RestoreGatewayOperation</li>
	<li>GetEvents</li>
	<li>GetEventInformation</li>
	<li>RemoveEvent</li>
	<li>RetryEvent</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAAXPGEventBusMonitoring"></a>How to Launch CAAXPGEventBusMonitoring
</h3>
<p>To launch <code>CAAXPGEventBusMonitoring</code>, you will need to set up the 
build time environment, then compile <code>CAAXPGEventBusMonitoring</code> along 
with its prerequisites (the proxy), set up the run time environment, and then execute 
the use case [<a href="#References">3</a>].</p>
<p><code>CAAXPGEventBusMonitoring [&lt;serviceUrl&gt;] [-statusCheckInterval=&lt;Time in 
minutes&gt;] [-thresholdTimeForBusyEvent=&lt;Time in Minutes&gt;] [-noActionOnWarning=&lt;true/false&gt;][-displayQueuenames=&lt;true/false&gt;] 
[-logFolder=&lt;Log Folder Path&gt;]</code> </p>
<p>where:</p>
<table class="border1" id="table10">
	<tr>
		<th>serviceUrl </th>
		<td>The serviceUrl of the MonitoringService on the Gateway. it should look like 
		this <br>
		<a href="http://host:port/webappname/webservice?id=XPGMonitoringService">http://host:port/webappname/webservice?id=XPGMonitoringService</a>&nbsp; </td>
	</tr>
	<tr>
		<th>statusCheckInterval</th>
		<td>Time interval in minutes to get status of Gateway. Get status will be 
		called periodically. The mentioned time will be used as minimum time interval 
		between the two get status calls.</td>
	</tr>
	<tr>
		<th>thresholdTimeForBusyEvent</th>
		<td>As mentioned in gateway-config.properties</td>
	</tr>
	<tr>
		<th>noActionOnWarning</th>
		<td>true - On warnings input from user is sought for the actions on warnings<br>
		false - Warnings are just displayed and no input from user is sought
		</td>
	</tr>
	<tr>
		<th>displayQueuenames</th>
		<td>true - If Gateway status is okay display existing Queue names <br>
		false 
		&#8211; Queue names are not displayed </td>
	</tr>
	<tr>
		<th>logFolder</th>
		<td>Log folder path. For example C:\\temp</td>
	</tr>
</table>
<p>The command line argument  &lt;serviceUrl&gt; is mandatory. If other options are not provided as command line argument then it&#8217;ll read the 
options from <code>appSettings </code>section of application Config file. </p>
<table>
	<tr>
		<td><img src="images/CAAXpgUcMonitoringWebServiceUseCase_image1.jpg"></td>
	</tr>
</table>
<p>This use case will display the Gateway status on command prompt. It will also 
log the information into log file. The log file name is MonitoringLog.txt and it 
is created in the log folder mentioned by user. </p>
<p>There is an additional option in application Config file &#8220;MaxLogSize&#8221;. When log 
file reaches this size backup of log file is taken. </p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAAXPGEventBusMonitoring Code"></a>Where to Find 
the CAAXPGEventBusMonitoring Code</h3>
<p>The <code>CAAXPGEventBusMonitoring </code>use case is made of several source 
files located in the <code>CAAXPGWebServices.edu</code> framework: </p>
<table id="table11" border="1">
	<tr>
		<td>The <code>Main</code> application class</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusMonitoring.m\src\Main.cs</code></td>
	</tr>
	<tr>
		<td>The GatewayErrorHandling.cs source file contains sample code that describes 
		Gateway error handling</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusMonitoring.m\src\GatewayErrorHandling.cs</code></td>
	</tr>
	<tr>
		<td>The GatewayWarningHandling.cs source file contains sample code that 
		describes Gateway warnings handling</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusMonitoring.m\src\GatewayWarningHandling.cs</code></td>
	</tr>
	<tr>
		<td>The C# proxy [<a href="#References">4</a>]&nbsp; file</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\XPGMonitoringServiceClientProxy.m\src\IXPGMonitoringService.cs</code></td>
	</tr>
	<tr>
		<td>The config file [<a href="#References">3</a>]</td>
		<td><code>:GatewayHome\CAA\UseCases\CAAXPGWebServices.edu\CAAXPGEventBusMonitoring.m\src\App.config</code></td>
	</tr>
</table>
<p><code>GatewayHome</code> is the folder where the xPDM Gateway is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step by Step CAAXPGEventBusMonitoring"></a>Step by Step CAAXPGEventBusMonitoring</h3>
<p>This use case is a command line application which is designed to get number of 
events and event IDs that match provided search criterion. It takes many options 
but only URL is mandatory option.</p>
<p><strong>Main.cs</strong></p>
<p>This use case code is split into three files : <code>Main.cs, GatewayErrorHandling.cs
</code>and <code>GatewayWarningHandling.cs</code>. </p>
<p>Main.cs is the entry point of the application, it parses the input arguments. 
It gets URL and other configuration options from command prompt. The configuration 
options which are not provided as command line arguments are obtained from Application 
config file in the method <code>SetOptionsFromConfigFile</code>. Method <code>createLogFile
</code>creates log file named &#8220;MonitoringLog.txt&#8221;.&nbsp; It is created in the log 
folder as mentioned in command line argument or if log folder is not mentioned in 
command line argument then log file is created in LogFolder mentioned in application 
config file. If log file size exceeds MaxLogSize mentioned in Application config 
file then&nbsp; method <code>LogFileBackup </code>takes backup of log file by renaming 
it to &quot;MonitoringLog_ + Time stamp + .txt&quot;</p>
<p>We create object of <code>XPGMonitoringServiceClient </code>and in loop call 
Web Service GetGatewayStatus. It is called iteratively unless user presses Escape 
key or CTRL + C. The interval between calls is defined by <code>statusCheckInterval</code>.</p>
<pre class="code">XPGMonitoringServiceClient proxy;
using (proxy = new XPGMonitoringServiceClient(&quot;IXPGMonitoringService&quot;, serviceUrl))
{
  ...
    do
    {
     ...
        ListOfGatewayErrorsType gwErrors = proxy.GetGatewayStatus();
</pre>
<p>GetGatewayStatus returns list of <code>GatewayErrorType</code>. <em>GatewayErrorType</em> 
object contains Error IDs and Error messages. The situations that block Gateway 
operation are classified as Error. Errors have ID greater than 100.&nbsp; If there 
are Blocked events or event busy for more than <code>ThresholdTimeForBusyEvent
</code>mentioned in gateway-config.properties then such cases are treated as 
warnings. Warnings have Error ID greater than zero and less than 101. Error ID 
zero denotes Gateway is running properly i.e. there is no error or warning.</p>
<p>If there is no error and if option <code>mbDisplayQueuenames </code>is <em>true</em> then 
the list of Queue names is displayed on command prompt calling Web Service
<code>GetListOfQueue</code>.</p>
<pre class="code">ListOfQueueNamesType listOfQueueNames = iProxy.GetListOfQueue();</pre>
<p>If there are Errors and warning then those are displayed on command prompt and 
also written into log file.</p>
<p><strong>GatewayErrorHandling.cs</strong></p>
<p>If there is any error then method <code>GatewayErrorHandling </code>is called 
which is in <code>GatewayErrorHandling.cs</code>. In this method we ask user to 
take corrective actions and then we ask user if restore Gateway operation should 
be called. If user chooses to call restore Gateway operation then Web Service
<code>RestoreGatewayOperation </code>is called and <code>GetGatewayStatus </code>
is called again to get Gateway status after restore operation. </p>
<pre class="code">bool iRetryBlockedEvents = true;
RestoreGatewayErrorType oResult = iProxy.RestoreGatewayOperation(iRetryBlockedEvents);
...
ListOfGatewayErrorsType gwErrors1 = iProxy.GetGatewayStatus();
</pre>
<p>If user chooses not to call Restore Gateway then we ask if user wishes to exit 
from the application. If user selects exit then we end the application else we continue 
checking Gateway Status.</p>
<p><strong>GatewayWarningHandling.cs.</strong></p>
<p>If there is no error and there are warnings then those conditions are handled 
by methods <code>HandleProlongedBusyEvents </code>&nbsp;and <code>HandleBlockedEvents
</code>written in &lt;code&gt; GatewayErrorHandling.cs. </p>
<p><strong>Method</strong> <strong>HandleProlongedBusyEvents</strong> </p>
<p>If there is any event is in processing state for more than <code>ThresholdTimeForBusyEvent
</code>mentioned in gateway-config.properties then method <code>HandleProlongedBusyEvents
</code>.We search such events calling Web Service <code>GetEvents</code>. </p>
<pre class="code">SearchCriteriaType iSearchCriteriaType = new SearchCriteriaType();
 iSearchCriteriaType.eventDuration = mThresholdTimeForBusyEvent;
 iSearchCriteriaType.eventStateType = &quot;PROCESSING&quot;;            
 ListOfEventUIDsType oListOfEventUID = iProxy.GetEvents(iSearchCriteriaType);
</pre>
<p><code>GetEvents </code>returns a list of Event IDs which we pass to Web Service
<code>GetEventInformation </code>to get Event Information and we show Event information 
on command prompt and also write into log file.</p>
<pre class="code">EventInformationType oEventInformation = Proxy.GetEventInformation(iEventID);</pre>
<p>We ask user if he/she wants to delete all such events. If user enters &#8216;y&#8217; then 
we delete all such events. Else we ask if user wants to delete a particular event 
and ask user to enter Event ID of the event user wants to delete. We delete the 
event calling method <code>removeEvent </code>which calls Web Service <code>RemoveEvent</code>.</p>
<pre class="code">EventUIDType EventID = new EventUIDType();
EventID.value = sEventId;
removeEvent(EventID, iProxy);
</pre>
<p><strong>Method</strong> <strong>HandleBlockedEvents</strong></p>
<p>If&nbsp; there are any blocked Events present then method <code>HandleBlockedEvents
</code>is called to handle such situations. We search Blocked Events calling Web 
Service <code>GetEvents</code>. </p>
<pre class="code">  SearchCriteriaType iSearchCriteriaType = new SearchCriteriaType();
  iSearchCriteriaType.queueState = &quot;BLOCKED&quot;;
  ListOfEventUIDsType oListOfEventUID = Proxy.GetEvents(iSearchCriteriaType);
</pre>
<p><code>GetEvents </code>returns Event IDs of blocked events which we pass to Web 
Service <code>GetEventInformation </code>to get Event Information and we show Event 
information on command prompt and also write into log file. </p>
<p>We ask user if he/she wants to retry all blocked events. If user enters &#8216;y&#8217; then 
we retry all blocked events. We retry all blocked events calling Web Service
<code>RestoreGatewayOperation</code>. The input <code>iRetryBlockedEvents </code>
we pass to <code>RestoreGatewayOperation </code>has value true. </p>
<pre class="code">bool iRetryBlockedEvents = true;
RestoreGatewayErrorType oResult = iProxy.RestoreGatewayOperation(iRetryBlockedEvents);
</pre>
<p>If user chooses not to retry all blocked events then we ask if user wants to 
retry a particular event and ask user to enter Event ID of the event user wants to 
retry. We retry the event calling Web Service <code>RetryEvent</code>.</p>
<pre class="code">res = (bool)iProxy.RetryEvent(iEventID);</pre>
<p>Here is the expected output when there is no error or warning: </p>
<pre class="code">
Log file - :C:\Temp\MonitoringLog.txt
MonitoringService URL = http://host:port/Gateway/webservice?id=XPGMonitoringService
************** 7/28/2011 8:00:00 PM **************
Checking Gateway status. Press Escape key to exit

Gateway Status -
No Error or warning

Going into wait state for 30 minutes. If you want to exit press CTRL+C.

************** 7/28/2011 8:30:00 PM **************
Checking Gateway status. Press Escape key to exit

Gateway Status -
No Error or warning

Going into wait state for 30 minutes. If you want to exit press CTRL+C.

************** 7/28/2011 9:00:00 PM **************
Checking Gateway status. Press Escape key to exit

Gateway Status &#8211;
No Error or warning

Going into wait state for 30 minutes. If you want to exit press CTRL+C.</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td valign="top">[1] </td>
		<td><a href="XPGServiceIndex.html">Monitoring Service Description</a></td>
	</tr>
	<tr>
		<td valign="top">[2] </td>
		<td><a href="CAAXpgTaMonitoringServices.htm">XPG Monitoring Service		</a></td>
	</tr>
	<tr>
		<td valign="top">[3] </td>
		<td>
		<a href="../CAAWSCommon/CAAWSBuildingLaunching.htm">
		Building and Launching a Web Service Use Case</a></td>
	</tr>
	<tr>
		<td valign="top">[4] </td>
		<td>
		<a href="../CAAWSCommon/CAAWSGenerateClientBinding.htm">
		Generating a C# Client Binding</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <b>1</b> [Aug 2011]</td>
		<td valign="top">Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
