<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Searching Event</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Searching Event</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use-Case</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
		<p>This article gives details about searching event with different 
		search criterias available by using event monitoring services.This article illustrates 
		all basic steps required searching events. </p>
		<ul> 
		<li> <a href="#What">what you will learn with this Use?</a></li>
		<li> <a href="#UC"> The Searching Event Usecase</a></li>
		<li> <a href="#HOW"> How to Launch Searching Event</a></li>
		<li> <a href="#Where">Where to Find Searching Event Code</a></li>
		<li> <a href="#Step"> Step By Step</a></li>
		<li> <a href="#Inshort">InShort</a></li>
		<li> <a href="#References">References</a></li>
		</ul>
		
		</td>
		</tr>   
  </table>
<!---------------------------------comment------------------------------------->
<h2> <a name="What"> </a> What you will learn with this Usecase</h2>
<p> This usecase is intended to show the usage of event monitoring services in 
retrieving events present at gateway by using simple scenario. Monitoring services are implemented 
on both, XPDM and 3DEXPGateway. So we can retrieve events from both the gateway by using 
this usecase.</p>
<p> User will be able to understand about monitoring of gateway and search operation 
wtth different search criteria used in monitoring.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2> <a name="UC"> </a> The Searching Event Usecase</h2>
<p> <strong>Searching Event</strong> belongs to CAAVIExchangeServices.edu 
framework. This usecase illustrates different methods mentioned in <code>IXPGMonitoringService</code>.</p>
<p> This is a simple Java CAA batch usecase, which has main routine. This 
usecase has following operation for monitoring gateway :</p>
<ul>  
<li> Retrieving gateway status</li>
<li> Restore gateway</li>
<li> Get list of queues</li>
<li> Retrieve count of events (User need to mention the search criteria for this 
operation)</li>
<li> Retrieve event (User need to mention the search criteria for this 
operation)</li>
<li> Retrieve event information</li>
<li> Retrieve event state</li>
<li> Remove event</li>
<li> Retry event</li>


</ul>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="HOW"> </a>How to Launch Searching Event Usecase</h2>
<p> This is a simple Java CAA batch usecase. We can execute this usecase from 
Eclipse application. Execution of java usecases is detailed in
<a href="#References">CAA Java Basic Batch [3]</a>.</p>
<p> Once this usecase is launched then user need to mention the URL of gateway 
which need to be monitored and select the option from the available list for 
monitoring the gateway.&nbsp;</p>
<p> Execution and options available in monitoring gateway are shown in following Fig.1</p>
<table>
<caption> Fig.1 Gateway Monitoring Launch</caption>
<tr> 
<td> 
<img src="images/CAAVISearchLaunch.jpg" width="511" height="278"/>
</td>
</tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Where"></a>Where to Find Searching EventCode</h2>
<p>The <code>Searching Event</code> use case is made of a <strong>main</strong> 
routine in the source file <strong>SearchingEvent.java</strong> which exists 
at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAVIExchangeServices.edu\CAAVIMonitoringServices.mj\src\com\dassault_systemes\GatewayMonitoring\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step By Step</h2>
<ol> 
	<li><a href="#Step1">Instantiating XPGMonitoringService</a></li>
	<li><a href="#Step2">Defining Search Criteria</a></li>
	<li><a href="#Step3">Searching Events</a></li>
	
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step1"></a>Instantiating XPGMonitoringService </h2>
<p> This usecase can be used for searching events on both XPDM and 3DExpGateway. 
User have to specify URL of gateway on which events need to be retrieved. We are using object of <code>Scanner</code> class for taking user input. We are creating object of type <code> XPGMonitoringService</code> by using this URL.</p>
<pre class="code">
input = new Scanner(System.in);
String GatewayURL = input.nextLine();
XPGMonitoringService monitor = new XPGMonitoringService(GatewayURL);
</pre>
<p><code> GatewayURL </code> is a string entered by user representing URL of 
gateway which will be monitored. This URL string is used for creating the object 
<code>_connect</code> of type <code>XPGConnectivityWrapper</code> .This object is further used as input parameter in creating <code>_eventWS</code> object of type 
<code>XPGMonitoringServicesWrapper</code>. All other gateway monitoring operations are included in the same java file. 
This code is written in <code> XPGMonitoringService.java</code>. This 
methods are further calling to methods of 
<code>XPGMonitoringServicesWrapper</code> class. </p>
<p> 
<code>XPGMonitoringServicesWrapper</code> class is a wrapper class between the 
user code and web services implementation. 
<code>XPGMonitoringServicesWrapper::Setproxy </code> method is used for setting 
required parameters and to retrieve handle for the interface of monitoring 
gateway.</p>
<p> 
<code>SERVICE_ID </code> and <code> SERVICE_NAME </code> are initialized with 
value <code>XPGMonitoringService</code>.&nbsp; We have to provide the name of 
wsdl, Here it is <strong>IXPGMonitoringService0.wsdl</strong></p>
<p> 
For instantiating <code>XPGMonitoringService</code> class 
we required wsdl URL and QName. This class is automatically generated while creating proxies using JAX-WS. </p>

<pre class="code">
...
String URL_WSDL_LOC = this._connection.get_parms().buildUriWSDLForServiceId(SERVICE_ID) ;
String URL_ENDPOINT = this._connection.get_parms().buildUriForService(SERVICE_ID) ;

XPGMonitoringService mtr = null;
QName QNAME_SERVICE = XPGConnectivityWrapper.buildQName_SERVICE_ForService(SERVICE_NAME);
if(this._connection.is_localWSDL())
{
  URL wsdlURL = XPGConnectivityWrapper.class.getResource("IXPGMonitoringService0.wsdl");
  mtr = new XPGMonitoringService(wsdlURL,QNAME_SERVICE);
}
else
  mtr = new XPGMonitoringService(new URL(URL_WSDL_LOC),QNAME_SERVICE);
...
_eventPort = mtr.getXPGMonitoringServicePort();			
BindingProvider bindingProvider = (BindingProvider) _eventPort;
bindingProvider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, URL_ENDPOINT); 
...
</pre>
<p> Once object is created successfully then we use <code>XPGMonitoringService::getXPGMonitoringServicePort</code> method to retrieve 
the handle of monitoring interface <code> IXPGMonitoringService</code>, Which will be further used for calling other monitoring mehtods.</p>
<script type="text/javascript">insertLinkToTop();</script>


<h2><a name="Step2"></a>Defining Search Criteria</h2>
<p>Once succeesful connection has been created then user will be allowed to 
retrieve event from gateway with required search criteria which are mentioned in 
available choices. </p>
<p>Following are available search criterias which can be used for retrieving 
events from gateway : </p>
<pre class="code">
Select from following options for Searching Event : 
 1 . QueueType  
 2 . QueueState 
 3 . QueueName 
 4 . EventState 
 5 . Event Name 
 6 . Creation Date 
 7 . Event Procesing Result 
 8 . Processing ReturnCode 
 9 . Event Size 
 10 . Event Duration 
 0 . Exit 
 Enter Your Choice : </pre>
 <p> To search events in archieved events list we have to mention criteria of 
	EventStateType. To perform this searching we have to set <code>SearchCriteriaType::setEventStateType(EventStateTypeType.ARCHIVED)</code>.</p>
<p> In this usecase,we are allowing user to select choice of(yes or no).</p>
<p> We can use multiple search criterias simultaneously for searching events. In 
this usecase, we have illustrated searching with only one criteria (Searching in 
archieved events list illustrate combination of two criterias).</p>
<p> To create object of search criteria of type <code>SearchCriteriaType</code>, we are using one local method which is named as <code> CreateSearchCriteriaType</code>. 
This is static member function declared in <code>SearchingEvent</code> class.</p>
<pre class="code">private static SearchCriteriaType CreateSearchCriteriaType()
{
  ObjectFactory obj = new ObjectFactory();
  SearchCriteriaType iSearch = obj.createSearchCriteriaType();  	
  return iSearch; 
}</pre>
<p>This method uses <code> ObjectFactory::createSearchCriteriaType </code>for 
creating this object.</p>


<h3> Queue Type</h3>
<p> This criteria allows user to search events depending on type of queue. To 
perform this operation user have to enter choice 1. </p>
<p> Available type of queue are : <code> LOCAL </code>and <code> REMOTE</code>. When user select choice 
as 1, it will ask to select type of queue from available types. These types are 
mentioned in brackets "( .... )".</p>
<p> User have to enter this type name. This string is case sensitive.</p>
<pre class="code">
Enter Your Choice : 1
Enter Queue Type (LOCAL or REMOTE) : LOCAL
</pre>
<p> We are using <code> QueueTypeType.fromValue</code> method to create the object of QueueType. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setQueueType</code>.</p>
<pre class="code">
String Queue = input_Choice.nextLine();
QueueTypeType qType = QueueTypeType.fromValue(Queue);
...
iSearch.setQueueType(qType);		           
</pre>

<h3> Queue State</h3>
<p> This criteria allows user to search events depending on state of queue. To 
perform this operation user have to enter choice 2. </p>
<p> Available state of queue are :<code> BUSY, BLOCKED </code> and <code> READY </code>. When user select choice 
as 2, it will ask to select state of queue from available states. These types are 
mentioned in brackets "( .... )".</p>
<p> User have to enter this state. This string is case sensitive.</p>
<pre class="code">
 Enter Your Choice : 2
 Enter Queue State Type (BUSY or BLOCKED or READY ): READY</pre>
 
<p> We are using <code> QueueStateType.fromValue</code> method to create the object of QueueStateType. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setQueueState</code>.</p>
<pre class="code">
String QueueState = input_Choice.nextLine();
QueueStateType qST= QueueStateType.fromValue(QueueState);
...
iSearch.setQueueState(qST);		           
</pre>

<h3> Queue Name</h3>
<p> This criteria allows user to search events depending on name of queue. To 
perform this operation user have to enter choice 3. </p>
<p> When user select choice 
as 3, it will ask to enter name of queue. Here, user must know about name of 
queue in which he/she want to search events.</p>
<p> User have to enter this name. This string is case sensitive.</p>
<pre class="code">
Enter Your Choice : 3
Enter Queue Name : ABC
</pre>
<p> We are using <code> QueueNameType.setValue</code> method to set value of 
queue name. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setQueueName</code>.</p>
<pre class="code">
String QueueName = input_Choice.nextLine();
QueueNameType qName = new QueueNameType();
qName.setValue(QueueName);
...
iSearch.setQueueName(qName);</pre>


<h3> Event State</h3>
<p> This criteria allows user to search events depending on state of an event. To 
perform this operation user have to enter choice 4. </p>
<p> When user select choice 
as 4, it will ask to enter state of an event from available states. Available 
state of any event are : <code> ARCHIVED </code> or <code> PROCESSING </code> or <code> QUEUED </code> or <code> ERROR </code></p>
<p> User have to enter this state. This string is case sensitive.</p>
<pre class="code">
Enter Your Choice : 4
Enter EventStateTypeType (ARCHIVED or PROCESSING or QUEUED or ERROR) : PROCESSING </pre>
 
<p> We are using <code> EventStateTypeType.fromValue</code> method to create the object of EventStateTypeType. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setEventStateType</code>.</p>
<pre class="code">
String eventState = input_Choice.nextLine();
EventStateTypeType eState = EventStateTypeType.fromValue(eventState);
...
iSearch.setEventStateType(eState);</pre>


<h3> Event Name</h3>
<p> This criteria allows user to search events depending on name of event. To 
perform this operation user have to enter choice 5. </p>
<p> When user select choice 
as 5, it will ask to enter name of event. Here, user must know about exact name of 
event which he/she want to search.</p>
<p> User have to enter this name. This string is case sensitive.</p>
<pre class="code">
Enter Your Choice : 5
Enter EventNameType : PRODUCTMirror</pre>
<p> We are using <code> EventNameType.setValue</code> method to set value of 
event name. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setEventName</code>.</p>
<pre class="code">
String eventName = input_Choice.nextLine();
EventNameType eName = new EventNameType();
eName.setValue(eventName);
...
iSearch.setEventName(eName);</pre>


<h3> Event Creation Date</h3>
<p> This criteria allows user to search events depending on creation date of event. To 
perform this operation user have to enter choice 6. </p>
<p> When user select choice 
as 6, it will ask to enter date and time of event. Here, user must know about exact 
date and time of 
event which he/she want to search.</p>
<p> User have to enter creation date and time in same format as mentioned in 
brackets. </p>
<pre class="code">
 Enter Your Choice : 6
 Enter Date (yyyy/mm/dd): 2014/07/16
 Enter Time (hh:mm:ss) : 12:33:09
</pre>
<p> We are using local method <code> CreateDateCriteriaType </code> to create object of type <code> DateCriteriaType</code>. 
This is static member function declared in <code>SearchingEvent</code> class.</p>
<pre class="code">
private static DateCriteriaType CreateDateCriteriaType(String eventDate,String eventTime)
{
   ObjectFactory obj = new ObjectFactory();
   DateCriteriaType dateType = obj.createDateCriteriaType();
   String[] eventStr = eventDate.split("/");
   String[] eventTimeStr = eventTime.split(":");
   
   XMLGregorianCalendar iCal;	
   try
   {
     DatatypeFactory iDTFactory = DatatypeFactory.newInstance();
     iCal = iDTFactory.newXMLGregorianCalendar();
     iCal.setYear(Integer.parseInt(eventStr[0]));
     iCal.setMonth(Integer.parseInt(eventStr[1]));
     iCal.setDay(Integer.parseInt(eventStr[2]));
     iCal.setTime(Integer.parseInt(eventTimeStr[0]), Integer.parseInt(eventTimeStr[1]), Integer.parseInt(eventTimeStr[2]));
     dateType.setOperator(DateCriteriaOperatorType.ON);
     dateType.setDate1(iCal);
   }catch (DatatypeConfigurationException e) 
   {
     e.printStackTrace();
   }		
   return dateType;
}
</pre>
<p> Here,we are using abilities of <code> XMLGregorianCalendar </code>to set date and time 
values for<code> DateCriteriaType</code> object.</p>
<p> This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setCreationDate</code>.</p>
<pre class="code">
String eventTime = input_Choice.nextLine();
DateCriteriaType eDate = CreateDateCriteriaType (eventDate,eventTime);
...
iSearch.setCreationDate(eDate);</pre>


<h3> Event Processing Result</h3>
<p> This criteria allows user to search events depending on event processing 
result. To 
perform this operation user have to enter choice 7. </p>
<p> When user select choice 
as 7, it will ask to enter processing result of an event from available list. Available 
event processing results are : <code> SUCCESS </code> or <code> ERROR </code> or <code> WARNING </code> or <code> FILE_TRANSFER_ERROR </code> or <code> CANCELED </code> or <code> UNKNOWN</code>.</p>
<p> User have to select from this processing result. This string is case sensitive.</p>
<pre class="code">
Enter Your Choice : 7
Enter EventProcessResultType : SUCCESS or ERROR or WARNING or FILE_TRANSFER_ERROR or CANCELED or UNKNOWN 
</pre>
<p> We are using <code> EventProcessResultType.fromValue</code> method to create the object of EventProcessResultType. 
This object will be further used for setting search criteria by using the method <code>SearchCriteriaType::setProcessingResult</code>.</p>
<pre class="code">
String eventResult = input_Choice.nextLine();
EventProcessResultType eResult = EventProcessResultType.fromValue(eventResult);
...
iSearch.setProcessingResult(eResult);</pre>


<h3> Event Processing Return Code</h3>
<p> This criteria allows user to search events depending on event processing 
return code value. To 
perform this operation user have to enter choice 8. </p>
<p> When user select choice 
as 8, it will ask to enter processing return code for an event. User must know 
exact value of this processing return code.</p>
<pre class="code">
Enter Your Choice : 8
Enter Processing Return Code : 1
</pre>
<p> User must enter integer value of return code. Here,we are parsing string 
input to integer. This <code> Integer  </code>object will be used in <code>SearchCriteriaType::setProcessingReturnCode</code>.</p>
<pre class="code">
String eventRC = input_Choice.nextLine();
Integer eReturnCode = Integer.parseInt(eventRC);
...
iSearch.setProcessingReturnCode(eReturnCode);</pre>


<h3> Event Size</h3>
<p> This criteria allows user to search events depending on event size. To 
perform this operation user have to enter choice 9. </p>
<p> When user select choice 
as 9, it will ask to enter size of an event. User must know exact value of size.</p>
<pre class="code">
Enter Your Choice : 9
Enter Event Size : 1
</pre>
<p> User must enter integer value of event size. Here,we are parsing string 
input to integer. This <code> Integer  </code>object will be used in <code>SearchCriteriaType::setEventSize</code>.</p>
<pre class="code">
String eventSize = input_Choice.nextLine();
Integer eSize = Integer.parseInt(eventSize);
...
iSearch.setEventSize(eSize);
</pre>


<h3> Event Duration</h3>
<p> This criteria allows user to search events depending on event duration. To 
perform this operation user have to enter choice 10. </p>
<p> When user select choice 
as 10, it will ask to enter duration of an event. User must know exact value of 
duration.</p>
<pre class="code">
Enter Your Choice : 10
Enter Event Duration : 0</pre>
<p> User must enter integer value of event duration. Here,we are parsing string 
input to integer. This <code> Integer  </code>object will be used in <code>SearchCriteriaType::setEventDuration</code>.</p>
<pre class="code">
String eventDur = input_Choice.nextLine();
Integer eDuration = Integer.parseInt(eventDur);
...
iSearch.setEventDuration(eDuration);</pre>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step3"></a>Defining Search Criteria</h2>
<p> Once search criteria is successfully defined then depending on this criteria 
events will be retrieved. Here,We are calling <code>XPGMonitoringServicesWrapper::getEvents</code> method to retrieve the list of available events.</p>
<p> <code>iSearch</code> is an object of type <code>SearchCriteriaType</code> which is created by using local mehtod <code> CreateSearchCriteriaType</code> and criteria is defined 
as explained in earlier section.</p>
<pre class="code">
monitor.getEvents(iSearch);
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Inshort"></a>In Short</h2>
<p>This usecase gives us details about search method of monitoring services.This article 
illustrates all available search criterias which can be used for retrieving 
events presents at gateway.</p>
<script type="text/javascript">insertLinkToTop();</script>


<h2><a name="References"></a>References    </h2>
 <table>
     <tr>
		<td>[1]</td>
		<td><a href="CAAVISearchWithMonitorServices.htm">Overview of Monitoring</a> </td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVIGatewayMonitorServices.htm">Gateway Monitoring</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAVISearchWithMonitorServices.htm">CAA Java Basic Batch</a></td>
	</tr>
  </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [July 2014]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


