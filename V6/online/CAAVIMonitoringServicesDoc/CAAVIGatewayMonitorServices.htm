<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Gateway Monitoring</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Gateway Monitoring</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use-Case</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
		<p>This article gives details about different options available for 
		monitoring gateway. This article illustrates different monitoring 
		operations performed on gateway by using event monitoring services.</p>
		<ul> 
		<li> <a href="#What">What you will learn with this Use?</a></li>
		<li> <a href="#UC"> The GatewayMonitoring Usecase</a></li>
		<li> <a href="#HOW"> How to Launch GatewayMonitoring</a></li>
		<li> <a href="#Where">Where to Find GatewayMonitoring Code</a></li>
		<li> <a href="#Step"> Step By Step</a></li>
		<li> <a href="#Inshort">InShort</a></li>
		<li> <a href="#References">References</a></li>
		</ul>
		
		</td>
		</tr>   
  </table>
<!---------------------------------comment------------------------------------->
<h2> <a name="What"> </a> What you will learn with this Usecase</h2>
<p> This usecase is intended to show the usage of event monitoring services in 
gateway monitoring by using simple scenario. Monitoring services are implemented 
on both , XPDM and 3DEXPGateway. So we can monitor both the gateway by using 
this usecase.</p>
<p> User will be able to understand about monitoring of gateway and different 
operation used in monitoring.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2> <a name="UC"> </a> The GatewayMonitoring Usecase</h2>
<p> <strong>GatewayMonitoring </strong> belongs to CAAVIExchangeServices.edu 
framework. This usecase illustrates different methods mentioned in <code>IXPGMonitoringService</code>.</p>
<p> This is a simple Java CAA batch usecase, which has main routine. This 
usecase has following operation for monitoring gateway :</p>
<ul>  
<li> Retrieving gateway status</li>
<li> Restore gateway</li>
<li> Get list of queues</li>
<li> Retrieve count of events (User need to mention the search criteria for this 
operation)</li>
<li> Retrieve event (User need to mention the search criteria for this 
operation)</li>
<li> Retrieve event information</li>
<li> Retrieve event state</li>
<li> Remove event</li>
<li> Retry event</li>


</ul>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="HOW"> </a>How to Launch GatewayMonitoring</h2>
<p> This is a simple Java CAA batch usecase. We can execute this usecase from 
Eclipse application. Execution of java usecases is detailed in
<a href="#References">CAA Java Basic Batch [3]</a>.</p>
<p> Once this usecase is launched then user need to mention the URL of gateway 
which need to be monitored and select the option from the available list for 
monitoring the gateway.&nbsp;</p>
<p> Execution and options available in monitoring gateway are shown in following Fig.1</p>
<table>
<caption> Fig.1 Gateway Monitoring Launch</caption>
<tr> 
<td> 
<img src="images/CAAVIGWMonitorLaunch.jpg"/>
</td>
</tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Where"></a>Where to Find GatewayMonitoring Code</h2>
<p>The <code>GatewayMonitoring</code> use case is made of a <strong>main</strong> 
routine in the source file <strong>GatewayMonitoring.java</strong> which exists 
at the location:</p>
<p><code>InstallRootFolder\CAADoc\CAAVIExchangeServices.edu\CAAVIMonitoringServices.mj\src\com\dassault_systemes\GatewayMonitoring\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step By Step</h2>
<ol> 
	<li><a href="#Step1">Instantiating XPGMonitoringService</a></li>
	<li><a href="#Step2">Gateway Monitoring</a></li>
	
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Instantiating XPGMonitoringService </h3>
<p> This usecase can be used for monitoring both XPDM and 3DExpGateway. User 
have to specify URL of gateway which need to be monitored. We are using object of <code>Scanner</code> class for taking user input.</p>
<p> We are creating object of type <code> XPGMonitoringService</code> by using this URL.</p>
<pre class="code">
input = new Scanner(System.in);
String GatewayURL = input.nextLine();
XPGMonitoringService monitor = new XPGMonitoringService(GatewayURL);
</pre>
<p><code> GatewayURL </code> is a string entered by user representing URL of 
gateway which will be monitored. This URL string is used for creating the object 
<code>_connect</code> of type <code>XPGConnectivityWrapper</code> .This object is further used as input parameter in creating <code>_eventWS</code> object of type 
<code>XPGMonitoringServicesWrapper</code>. All other gateway monitoring operations are included in the same java file. 
This code is written in <code> XPGMonitoringService.java</code>. This 
methods are further calling to methods of 
<code>XPGMonitoringServicesWrapper</code> class. </p>
<p> 
<code>XPGMonitoringServicesWrapper</code> class is a wrapper class between the 
user code and web services implementation. 
<code>XPGMonitoringServicesWrapper::Setproxy </code> method is used for setting 
required parameters and to retrieve handle for the interface of monitoring 
gateway.</p>
<p> 
<code>SERVICE_ID </code> and <code> SERVICE_NAME </code> are initialized with 
value <code>XPGMonitoringService</code>.&nbsp; We have to provide the name of 
wsdl, Here it is <strong>IXPGMonitoringService0.wsdl</strong></p>
<p> 
For instantiating <code>XPGMonitoringService</code> class 
we required wsdl URL and QName. This class is automatically generated while creating proxies using JAX-WS. </p>

<pre class="code">
...
String URL_WSDL_LOC = this._connection.get_parms().buildUriWSDLForServiceId(SERVICE_ID) ;
String URL_ENDPOINT = this._connection.get_parms().buildUriForService(SERVICE_ID) ;

XPGMonitoringService mtr = null;
QName QNAME_SERVICE = XPGConnectivityWrapper.buildQName_SERVICE_ForService(SERVICE_NAME);
if(this._connection.is_localWSDL())
{
  URL wsdlURL = XPGConnectivityWrapper.class.getResource("IXPGMonitoringService0.wsdl");
  mtr = new XPGMonitoringService(wsdlURL,QNAME_SERVICE);
}
else
  mtr = new XPGMonitoringService(new URL(URL_WSDL_LOC),QNAME_SERVICE);
...
_eventPort = mtr.getXPGMonitoringServicePort();			
BindingProvider bindingProvider = (BindingProvider) _eventPort;
bindingProvider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, URL_ENDPOINT); 
...
</pre>
<p> Once object is created successfully then we use <code>XPGMonitoringService::getXPGMonitoringServicePort</code> method to retrieve 
the handle of monitoring interface <code> IXPGMonitoringService</code>, Which will be further used for calling other monitoring mehtods.</p>
<script type="text/javascript">insertLinkToTop();</script>


<h2><a name="Step2"></a> Gateway Monitoring</h2>
<p>Once succeesful connection has been created then user will be allowed to 
select operation he want to perfom from available choices. </p>
<p>Following are the operations which can be performed in monitoring gateway: </p>
<pre class="code">
 Select from following options : 
 1 . Gateway Status 
 2.  Restore Gateway 
 3.  Get Queues 
 4 . Retrieve Count of Events (Define Search Criteria) 
 5 . Retrieve Event (Define Search Criteria)
 6 . Retrieve Event Information 
 7 . Retrieve Event State 
 8 . Remove Event 
 9 . RetryEvent 
 0. Exit 
 Enter Your Choice : 
</pre>
<h3> Gateway Status</h3>
<p> For retrieving gateway status user have to enter choice 1.&nbsp;In this case, we 
will call to <code>XPGMonitoringService::GatewayStatus</code>.This method is further calls to <code> XPGMonitoringServicesWrapper::getGatewayStatus</code>. </p>
<p>From wrapper class we can directly call to <code> IXPGMonitoringService::getGatewayStatus</code> method. 
This method will return <code>ListOfGatewayErrorsType</code>. This list contains 
the list of GatewayErrorType. <strong>GatewyErrorType</strong> having error id as 0 represents '<strong>No 
Error or No Warning</strong>'. This error code are explained in
<a href="#References">Overview of Monitoring[1]</a>. Error message can be 
retrieved by using <code>GatewayErrorType::getMessage</code> method.</p>
<pre class="code">
ListOfGatewayErrorsType lGError = XPGMonitoringService._eventWS.getGatewayStatus();
if(lGError!=null)
{
    List&lt;GatewayErrorType&gt; ErrorList =  lGError.getItem();
    for(int i=0;i &lt; ErrorList.size();i++)
    {
       GatewayErrorType gError = ErrorList.get(i);
       if(gError.getErrorID()==0)
       {
	System.out.println(" ' " + gError.getMessage() + " ' ");	
       }
       else
       {
         System.out.println("Gateway has Following Errors");
	System.out.println("ID :" + gError.getErrorID() + "  Mesage :" + gError.getMessage());				
      }
}
</pre>

<h3> Restore Gateway&nbsp;</h3>
<p> If gateway has some error then those can be restored by using this 
operation. User have to enter 2 to perform this operation.&nbsp;If user enters this 
choice then we will call to <code> XPGMonitoringServicesWrapper::restoreGatewayOperation</code> method. If any error occur during this operation will be recovered from <code> RestoreGatewayErrorType</code>.
</p>
<pre class="code">
RestoreGatewayErrorType oRestoreError = XPGMonitoringService._eventWS.restoreGatewayOperation();
if(oRestoreError != null)
{
 	System.out.println("ID : " + oRestoreError.getErrorID()  + "  Message :  " + oRestoreError.getMessage());	    
}
else
 System.out.println("Not able to restore gateway");
</pre>

<h3> Get Queues</h3>
<p> This method will get the list of available queues. To perform this operation 
user have to enter 3. If user selects this choice then we will call to <code>XPGMonitoringServicesWrapper::getListOfQueues</code> method.</p>
<p> This method will return list of queuenames of type <code>ListOfQueueNamesType</code> if exist. If size of this list is 
0,then no any queue exist at gateway.</p>
<p> &nbsp;Name of this queue can be retrieved by 
using <code> QueueNameType::getValue</code> mehtod.</p>
<pre class="code">
ListOfQueueNamesType oListofQueue = XPGMonitoringService._eventWS.getListOfQueues();
if(oListofQueue != null)
{
   List&lt;QueueNameType&gt; lQueueName = oListofQueue.getItem();
   if(lQueueName.size()!=0)
   {
      for(int i=0;i &lt; lQueueName.size();i++)
      {
         QueueNameType queueName = lQueueName.get(i);
	System.out.println("Queue [" + i +"] : " + queueName.getValue());				  
      }
   }
...
}
</pre>

<h3> Retrieve Count of Events</h3>
<p> This method will provide the count of events available at gateway with 
mentioned criteria. To select this operation user have to enter 4.If user 
selects this choice then we will call to <code>XPGMonitoringServicesWrapper::getEventCount</code> method.</p>
<p> This method will return integer reresenting the number of available events 
with defined criteria.Note : To search the events from archieved events list&nbsp;we have to 
mention the special search criteria. For this purpose we use the method, <code>SearchCriteriaType::setEventStateType(EventStateTypeType.ARCHIVED)</code>.</p>
<pre class="code">
if(iSearch == null)
    iSearch = this.CreateSearchCriteriaType();
Integer oEventCount = XPGMonitoringService._eventWS.getEventCount(iSearch);
...
</pre>
<p> <code>XPGMonitoringService::getEventCount</code> methods uses argument <code>iSearch</code>, this is of type <code>SearchCriteriaType</code>. We have 
created one dedicated local method to create this 
type of object. This method is named as <code> CreateSearchCriteriaType</code>.
<pre class="code">
public SearchCriteriaType CreateSearchCriteriaType()
{
   ObjectFactory obj = new ObjectFactory();
   SearchCriteriaType iSearch = obj.createSearchCriteriaType();
   EventNameType oEventName = new EventNameType();
   oEventName.setValue("PRODUCTMirror");	 
   iSearch.setEventName(oEventName);
   iSearch.setEventStateType(EventStateTypeType.ARCHIVED);
   
   return iSearch; 
 } </pre>
<p>This method uses <code> ObjectFactory::createSearchCriteriaType </code>for creating this object.To illustrate search event we have used only two criterias of <code>EventNameType</code> and <code>EventStateTypeType</code>.
&nbsp;</p>

<h3> Retrieve Events</h3>
<p> To select this operation user have to enter 5.If user selects this choice 
then we will call to <code>XPGMonitoringServicesWrapper::getEvents</code> method.</p>
<p> This method will return list of event uid of type <code>EventUIDType</code>. If 
size of this list is 0,then no any event with given criteria exist at gateway. </p>
<pre class="code">
if(iSearch == null)
   iSearch = this.CreateSearchCriteriaType();	  
List<EventUIDType> oListId = null;
lUIDType = XPGMonitoringService._eventWS.getEvents(iSearch);
if(lUIDType == null)
{
  System.out.println(" No Event found with given Search Criteria ");
}
else
{
  System.out.println("Event Found with Given criteria : ");
  oListId = lUIDType.getItem();
  for(int i=0; i &lt;oListId.size();i++)
  {
	 EventUIDType oEventId = oListId.get(i);
	 System.out.println(" Event UID : " + oEventId.getValue());
  }
}
</pre>
<p> <code>XPGMonitoringService::getEvents</code> method uses argument <code>iSearch</code>, this is of type <code>SearchCriteriaType</code>. 
As mentioned in earlier section,we use local method to create this object.
<p> To illustrate searching events with other different criteria we have 
dedicated article, Please refer to <a href="#References">Searching Event [2]</a>.<h3> Retrieve Event Information</h3>
<p> To select this operation user have to enter 6.If user selects this choice 
then we will call to <code>XPGMonitoringServicesWrapper::getEventInformation</code> method.</p>
<p> This method requires uid of an event as input argument. To allow user for 
selecting event which he/she wants to retrieve ,we are using one local method 
named as <code>getEventUID</code>. This method uses list of uids <code> oListId</code> as an input parameter,This list is valuated in <code>XPGMonitoringService::getEvents</code> 
method.</p>
<p> As shown in following code, we first display the uids of available events 
and then allow user to enter uid of event. By using string comparison method, we 
can finalize the uid entered by user and then use this in <code>XPGMonitoringService::getEventInformation</code> 
method. </p>
<pre class="code">
private static EventUIDType getEventUID(List&lt;EventUIDType&gt; oListId)
{   	
   uIDInput = new Scanner(System.in);	
   System.out.println(" Enter UID from above mentioned Events : ");
   String uIdEvent = uIDInput.nextLine();
   EventUIDType oEventId = null;
   for(int i=0; i&lt; oListId.size();i++)
   { 
	 if(oListId.get(i).getValue().equalsIgnoreCase(uIdEvent))
	     oEventId = oListId.get(i);
   }	
   System.out.println("  " + uIdEvent); 
   return oEventId;    	
}</pre>
<pre class="code">
EventInformationType oEventInformation  = XPGMonitoringService._eventWS.getEventInformation(oEventId);
...
dumpEventInformation(oEventInformation);
</pre>
<p> <code>XPGMonitoringService::getEventInformation</code> method returns object <code>oEventInformation </code>
which contains event information.This object is of type <code>EventInformationType</code>. To retrieve and display information related to event we use once
local method which is named as <code>dumpEventInformation</code>.
This object contains information related to event about description, name ,type, 
size,state processing arguments etc.<h3> Retrieve Event State</h3>
<p> We can retrieve state of an event by using method mentioned in earlier 
section <a href="#Step2">Retrieve Event Information</a>. But monitoring service 
interfaces has dedicated method for retrieving state of an event. This sections 
is illustrating this method. To select this method user have to enter 7. In this 
case we will call to <code>XPGMonitoringServicesWrapper::getEventState</code> method. </p>
<p> This method takes id of an event as an input parameter,this is retrieved 
from <code> getEventUID</code> method,which is detailed in earlier section.</p>
<pre class="code">
...
EventStateType oEventState = XPGMonitoringService._eventWS.getEventState(oEventId);
...	 
</pre>
<p> This method returns object <code>oEventState</code> of type <code>EventStateType </code>representing state of an event. </p>
<h3> Remove Event</h3>
<p> To select this operation user have to select 8. In this case we will call to <code>XPGMonitoringServicesWrapper::removeEvent</code> method. 
</p>
<p> This method takes uid of an event to be removed as input parameter.This is 
calculated by using <code> getEventUID</code> method,which is detailed in earlier section.</p>
<pre class="code">
Boolean oResult = false;
...
oResult = XPGMonitoringService._eventWS.removeEvent(oEventId);
...		
</pre>
<p> This method returns result of removing event in boolean format. We have used 
variable <code>oResult</code> of type <code>Boolean</code>. This method returns
<strong>true</strong> on succeessful removal else returns <strong>false</strong>.</p>
<h3> Retry Event</h3>
<p> To select this operation user have to select 8. In this case we will call to <code>XPGMonitoringServicesWrapper::retryEvent</code> method. 
</p>
<p> This method takes uid of blocked event to be retried as input parameter.This is 
calculated by using <code> getEventUID</code> method,which is detailed in earlier section.</p>
<pre class="code">
Boolean oResult = false;
...
oResult = XPGMonitoringService._eventWS.retryEvent(oEventId);
...		
</pre>
<p> This method returns result of event retry in boolean format. We have used 
variable <code>oResult</code> of type <code>Boolean</code>. This method returns
<strong>true</strong> on succeessful retry else returns <strong>false</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Inshort"></a>In Short</h2>
<p>This usecase gives us details about monitoring services.This article 
illustrates method present in XPGMonitoringService interface for monitoring 
gateway.</p>
<script type="text/javascript">insertLinkToTop();</script>


<h2><a name="References"></a>References    </h2>
 <table>
     <tr>
		<td>[1]</td>
		<td><a href="CAAVISearchWithMonitorServices.htm">Overview of Monitoring</a> </td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVISearchWithMonitorServices.htm">Searching Event</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAVISearchWithMonitorServices.htm">CAA Java Basic Batch</a></td>
	</tr>
  </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [July 2014]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


