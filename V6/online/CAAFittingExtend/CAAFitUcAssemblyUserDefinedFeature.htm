<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating User Defined Assembly Features and Sequencing Them</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating User Defined Assembly Features and Sequencing 
		Them</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the creation of an user defined assembly Feature 
		in Simulation context. It also explains how to sequence this Feature inside 
		an Assembly Sequence.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFittingSequencingExtendInMSR Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFittingSequencingExtendInMSR 
						Do</a></li>
					<li><a href="#How">How to Launch CAAFittingSequencingExtendInMSR</a></li>
					<li><a href="#Where">Where to Find the CAAFittingSequencingExtendInMSR 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create instances of an user defined 
assembly Feature and how to sequence this Feature inside of an Assembly Sequence 
using time constraints.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFittingSequencingExtendInMSR Use Case</h2>
<p>CAAFittingSequencingExtendInMSR is a use case of the CAADELFittingExtendItf.edu 
framework that illustrates DELFittingExtendItf framework capabilities.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFittingSequencingExtendInMSR Do</h3>
<p>CAAFittingSequencingExtendInMSR begins with opening of a Manufacturing Simulation 
PLM Component in a V6 session. This Manufacturing Simulation contains a Product 
as Model.</p>
<p>Then it creates an Assembly Sequence and four user defined assembly Features 
and add them to the Sequence. No default sequencing is applied to the assembly Features. 
A first sequence of assembly Features is defined and it is modified changing the 
time constraints.</p>
<p>Finally the use case saves the modified Manufacturing Simulation PLM Component 
that can be then opened in a V6 interactive session to visualize the result in a 
Gantt editor.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFittingSequencingExtendInMSR</h3>
<p>To launch CAAFittingSequencingExtendInMSR, you will need to set up the build 
time environment, then compile CAAFittingSequencingExtendInMSR along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Launch the use case as follows:</p>
<pre class="code">mkrun -c<em> &quot;CAAFittingSequencingExtendInMSR repository server user password SecurityCtx environment PLMExternalID version&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>
		<script type="text/javascript">		        insertRepository();</script>
		</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The name and port of the server as name:port_number (e.g. e4au2dsy:1571)</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user</td>
		<td>The user name (e.g. odtitp)</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>environment</td>
		<td>A PLM environment</td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalID</td>
		<td>MfgSimulation-WithQuad_Product-CAA (the PLM_ExternalID value of the 
		input Manufacturing Simulation PLM Reference)</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>8</td>
		<td>version</td>
		<td>--- (the majorrevision value of the input Manufacturing Simulation PLM Reference)</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection. </li>
	<li>The <strong>environment</strong> is necessary to locate the necessary Modelers.</li>
	<li>The last two arguments define the <strong>values</strong> of the <strong>
		attribute names</strong>.</li>
</ul>
<p>You can execute this use case based on provided data importing the 3D XML file 
supplied in the CAADELFittingExtendItf.edu framework:<code><br />
InstallRootFolder\CAADoc\CAADELFittingExtendItf.edu\InputData\MfgSimulation-WithQuad_Product.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFittingSequencingExtendInMSR Code</h3>
<p>The CAAFittingSequencingExtendInMSR use case is made of a single file located 
in the CAAFittingSequencingExtendInMSR.m module of the CAADELFittingExtendItf.edu 
framework: <code>InstallRootFolder\CAADoc\CAADELFittingExtendItf.edu\CAAFittingSequencingExtendInMSR.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six logical steps in CAAFittingSequencingExtendInMSR:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying and Loading the Simulation PLM Reference</a></li>
	<li><a href="#Step3">Creating the Assembly Sequence</a></li>
	<li><a href="#Step4">Creating Assembly Features and Adding Them to the Assembly 
		Sequence</a></li>
	<li><a href="#Step5">Modifying the Assembly Features Sequence Changing the Time 
		Constraints</a></li>
	<li><a href="#Step6">Saving the Modified Manufacturing Simulation and Closing 
		the PLM Session</a></li>
</ol>
<h3>Introduction and vocabulary</h3>
<p>Before describing the use case in details, some technical information are necessary.</p>
<p>First of all, it is necessary to create a <strong>new startup</strong> deriving 
from provided Feature <code>DELBasicAssembly</code>. For this use case, a startup 
named <code>DSMove</code> has been created in a catalog. The osm file that was used 
to generate this catalog contains at least this line:</p>
<pre class="code">feature DSMove DELBasicAssembly@`DNBFittingLibrary.feat` #startup { }</pre>
<p>Please refer to articles on Feature modeling if you are not familiar with Feature 
Catalogs.</p>
<p>Then, you can refer to use case "Creating an Assembly Sequence with Tracks" [<a href="#References">2</a>] 
that describes the notion of <strong>Assembly Activity</strong> which is the key 
element of sequencing.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">...
    HRESULT rc = ::CAAAdpCreateSession(repository, server, user, password, securityContext, TRUE); 

    // Set the current environment
    //----------------------------
    PLMPSISessionHelpers* pSessionHelpers = NULL;
    rc = PLMPSISessionHelpers::GetSessionHelpers(pSessionHelpers);
    if (NULL != pSessionHelpers)
    {
        rc = pSessionHelpers-&gt;SetCurrentEnvironment(environment);
    }
...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2">Querying and Loading the Simulation PLM Reference</a></h3>
<pre class="code">
...
    // Retrieve object type to search
    CATIType_var hSimulationRefType;
    rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType("SIMObjSimulationObjectGeneric",hSimulationRefType);

    // Query
    CATListPtrCATAdpQueryResult oQueryResults;
    CATAdpAttributeSet AttributeSet;
    AttributeSet.AddAttribute("PLM_ExternalID", SimulationId);
    AttributeSet.AddAttribute("V_version", version);

    rc = CATAdpPLMQueryServices::GetElementsFromAttributes(hSimulationRefType,AttributeSet,oQueryResults);  
...</pre>
<p>This section represents the usual sequence to query a Simulation Reference in 
the database and to open it in session.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3">Creating the Assembly Sequence</a></h3>
<pre class="code">
...
    // Get the factory
    DELIFitFactory_var hFitFactory;
    rc = DELGetFitFactory(hFitFactory);
    
    DELIFitActivityReference_var hRootAssSequence;
    DELIFitAssemblyActivity_var hRootAssSequenceAssemblyActivity;
    
    // Create Assembly Sequence
    rc = hFitFactory-&gt;CreateRootAssemblySequence (hRootAssSequence, hRootAssSequenceAssemblyActivity);    
...</pre>
<p>A factory exists to create Assembly Sequence Features in DELFittingSequencingItf 
framework: it can be retrieved with <code>DELGetFitFactory</code> API. The interface
<code>DELIFitFactory</code> is available on this factory and the API <code>CreateRootAssemblySequence</code> 
allows to create Assembly Sequence with the following output arguments :</p>
<ul>
	<li><code>hAssSequence</code> is the created Assembly Sequence</li>
	<li><code>hRootAssSequenceAssemblyActivity</code> is the related Assembly Activity<br />
	</li>
</ul>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating Assembly Features and Adding Them to the Assembly 
Sequence</h3>
<pre class="code">...
    DELIFitExtendFactory_var hFitExtendFactory;
    rc = DELGetFitExtendFactory(hFitExtendFactory);
...</pre>
<p>First step is to retrieve the <strong>factory</strong> that allows to instantiate 
user defined assembly Features. The API to use is DELGetFitExtendFactory.</p>
<p>Then Features are instantiated using the method <code>CreateAssemblyFeature</code> 
on the interface <code>DELIFitExtendFactory</code> available on the factory.</p>
<pre class="code">...
    CATUnicodeString UserDefinedFeatureType = "DSMove";
    CATBaseUnknown_var hActivityObject1, hActivityObject2, hActivityObject3, hActivityObject4;

    // Create Features in Assembly Sequence (related Assembly Activity is also created)
    rc = hFitExtendFactory-&gt;CreateAssemblyFeature ( DELIFitExtendFactory::Excitation, hRootAssSequence, 
                                                    UserDefinedFeatureType, hActivityObject1);
 ...</pre>
<p>This use case is working in Simulation context, so the first argument is
<code>Excitation</code>.</p>
<p>As an existing Assembly Sequence is given as father (second argument), the method
<code>CreateAssemblyFeature</code> simultaneously creates the Feature and an Assembly 
Activity which is a child of the Assembly Activity related to the given Assembly 
Sequence.</p>
<p>The Feature type is given as third argument by the startup name: <code>DSMove</code>.</p>
<p>The ouput of the method is the last argument: this is the created Assembly Feature. 
Note that the associated Assembly Activity could be retrieved later on.</p>
<p>&nbsp;</p>
<p>Another way to create the user defined Feature is to use the method <code>CreateAssemblyFeature</code> 
without father as parameter or with the Simulation Reference.</p>
<pre class="code">...
    // Create Feature in Simulation (no related Assembly Activity is created)
    // In interactive mode, Simulation can be NULL, then the current one will be chosen
    rc = hFitExtendFactory-&gt;CreateAssemblyFeature ( DELIFitExtendFactory::Excitation, hSimulationReference, 
                                                    UserDefinedFeatureType, hActivityObject3);      
...</pre>
<p>In this case, the created assembly Feature has no related Assembly Activity created.</p>
<p>It is then possible to add it to an Assembly Sequence.</p>
<pre class="code">...
    //=============================================================================
    // Add remaining Features in sequence  
    //=============================================================================    
    DELIFitAssemblySequenceActivity_var hRootAssSequenceActivity = hRootAssSequenceAssemblyActivity;
    
    DELIFitActivityReference_var hActivityReference3 = hActivityObject3;

    DELIFitAssemblyActivity_var hAssemblyActivity3, hAssemblyActivity4;
    rc = hRootAssSequenceActivity-&gt;AddChild (hActivityReference3, hAssemblyActivity3);     
...</pre>
<p>The assembly Feature is added to the Assembly Sequence related Assembly Activity 
(<code>hRootAssSequenceActivity</code>) with <code>AddChild</code> method on interface
<code>DELIFitAssemblyActivity</code>. An Assembly activity related to the assembly 
Feature is then created and this is this one that is child of <code>hRootAssSequenceActivity</code>.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5">Modifying the Assembly Features Sequence Changing the Time Constraints</a></h3>
<pre class="code">...
	//=============================================================================
	// Create sequence: Move1 - Move2 - Move3 - Move4
	//=============================================================================
	DELIFitSequencing_var hAssemblyActivitySequencing2 = hAssemblyActivity2;
	DELIFitSequencing_var hAssemblyActivitySequencing3 = hAssemblyActivity3;
	DELIFitSequencing_var hAssemblyActivitySequencing4 = hAssemblyActivity4;
	
	rc = hAssemblyActivitySequencing2-&gt;AddAfterInSequence (hAssemblyActivity1);
	rc = hAssemblyActivitySequencing3-&gt;AddAfterInSequence (hAssemblyActivity2);
	rc = hAssemblyActivitySequencing4-&gt;AddAfterInSequence (hAssemblyActivity3);
...</pre>
<p>The sequencing is working on Assembly Activities objects. The interface to use 
is <code>DELIFitSequencing</code>. Here we create a simple linear sequence (Move1 
- Move2 - Move3 - Move4), so the method <code>AddAfterInSequence</code> is used 
for each Assembly Activity.</p>
<p>It is possible then to modify this sequence with other methods of <code>DELIFitSequencing</code>.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Saving the Modified Manufacturing Simulation and Closing 
the PLM Session</h3>
<pre class="code">...
    CATAdpSaver Saver;
    Saver.Save(NULL);
    
    rc = ::CAAAdpCloseSession();
...</pre>
<p>This section represents the usual sequence for saving a newly created PLM Reference 
and closing the session.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Feature <code>DELBasicAssembly</code> is the one to be derived to define 
new startup for user defined assembly Features. Creating user defined assembly Features 
from this startup can be realized with dedicated interface <code>DELIFitExtendFactory</code>. 
The created Features can be added to an Assembly Sequence so that the interface
<code>DELIFitSequencing</code> can be used to sequence the related Assembly Activities 
creating time constraints between them.</p>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAFittingUse/CAAFitUcCreateAssemblySequence.htm">
		Creating an Assembly Sequence with Tracks</a></td>
	</tr>
</table>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [March 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">    insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">    insertCopyright();</script>

</body>

</html>
