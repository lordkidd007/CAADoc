<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Using the Mathematical Classes</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using the Mathematical Classes</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAMthBase use case and explains how to use 
		the mathematical classes.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#General features on Mathematical Classes">General Features 
			of Mathematical Classes</a></li>
			<li><a href="#UseCase">The CAAMthBase Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAMthBase Do</a></li>
				<li><a href="#How">How to Launch CAAMthBase</a></li>
				<li><a href="#Where">Where to Find the CAAMthBase Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you to use the mathematical classes. It first 
gives general features on these classes, then proposes examples of use:</p>
<ul>
	<li>Creation of mathematical points, lines, vectors; use of operators.</li>
	<li>Search for the eigen values and vectors of a 3x3 matrix.</li>
	<li>Define a transformation of axis systems.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="General features on Mathematical Classes"></a>General Features of Mathematical 
Classes</h2>
<p>The Mathematics framework provides the basic mathematical classes (such as planes, 
2D/3D vectors, 2D/3D points, 2D/3D matrices) and their associated usual behavior: 
for example, the norm of a vector, the determinant, the trace or the inverse of 
a matrix.</p>
<p>These mathematical classes are concrete (as opposed to the interfaces), and are 
optimized to give the best performance. Their instances cannot be streamed. In fact, 
they are not dedicated to be stored but only to be used in a transient way.</p>
<p>The mathematical classes use the operators (+, *, ^), when this makes sense: 
hence, you can add two vectors with the <em>+</em> operator, or define a vector 
by subtracting a point to another one.</p>
<p>The methods of the mathematical classes always consider that their outputs are 
allocated by the caller: in that way, the caller completely manages the memory, 
and can optimize its use. Now, following the CAA naming conventions of the arguments, 
all their arguments must be named with the <em>i</em> prefix, even the outputs (resource 
allocated and deallocated by the caller). This is not very significant for distinguishing 
which is really modified. Hence, the &quot;output&quot; arguments are denoted with an <em>
io</em> prefix.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMthBase Use Case</h2>
<p>CAAMthBase is a use case of the CAAMathematics.edu framework that illustrates 
Mathematics framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMthBase Do</h3>
<table>
	<caption>Fig. 1: The Objects Used In the CAAMthBase Use Case</caption>
	<tr>
		<td>
		<img src="images/CAACgmMthMath1.gif" alt="Use Case Objects" width="480" height="384"></td>
		<td>In this use case, you use the <em>CATMathPoint</em>, <em>CATMathVector</em>,
		<em>CATMathLine</em>, <em>CATMathAxis</em> and <em>CATMathTransformation</em> 
		classes.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMthBase</h3>
<p>To launch CAAMthBase, you will need to set up the build time environment, then 
compile CAAMthBase.m along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMthBase Code</h3>
<p>The CAAMthBase use case is made of a main named CAAMthBase.cpp located in the 
CAAMthBase.m module of the CAAMathematics.edu framework: <code>InstallRootFolder\CAADoc\CAAMathematics.edu\CAAMthBase.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical sections in CAAMthBase:</p>
<ol>
	<li><a href="#Creating Points, Vectors, Lines">Creating Instances of Points, 
	Vectors, and Lines</a> directly or by the means of operators</li>
	<li><a href="#Searching For the Eigen Values and Vectors of a 3x3 Matrix">Searching 
	for the Eigen Values and Vectors of a 3x3 Matrix</a></li>
	<li><a href="#Defining a transformation of axis systems">Defining a Transformation 
	of Axis Systems</a></li>
</ol>
<p>We now comment each of those sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Creating Points, Vectors, Lines"></a>Creating Instances of Points, 
Vectors, and Lines</h3>
<pre class="code"><a name="CATMathPoint"></a>CATMathPoint 	O, A(20. ,10. ,0.) ; // Default constructor, O is (0.,0.,0.)
	
<a name="CATMathVector"></a>CATMathVector u(10., 20. ,0.);
u.<a name="Normalize"></a>Normalize();                     // Normalize u;
	
// H: Orthogonal projection of A on the line (O,u): 
// Use the operators 
// A-O is a vector, (A-O)*u the dot product
//
CATMathVector OA = <strong>A - O</strong> ;
CATMathPoint  H  = O + ( <strong><a name="OA*u"></a>OA*u</strong><a name="OA*u"> </a>) * u;
 
// Computes the normal of the two vectors (A-O) and u: ^ is the cross product
CATMathVector n  = <strong><a name="OA ^ u"></a>OA ^ u</strong>;
	
//
// Another way to project to get H: 
// use the Project method of the CATMathLine class. 
//
<a name="CATMathLine"></a>CATMathLine  line(O,u);
CATMathPoint projection;
line.<a name="Project"></a>Project( A , projection );
	 
// Returns the <a name="SquareDistanceTo"></a>distance between the two computed points. 
//If non nul, it is an error.
		
if ( H.SquareDistanceTo( projection ) != 0.  ) return (1);
	
// Outputs the coordinates of the projected points
<strong>double aCoord[3]</strong>;
H.GetCoord( aCoord );
cout &lt;&lt; &quot;coordinates of the projected point : &quot; 
		&lt;&lt; aCoord[0] &lt;&lt; &quot;\t&quot; 
		&lt;&lt; aCoord[1] &lt;&lt; &quot;\t&quot;
		&lt;&lt; aCoord[2] &lt;&lt; endl;</pre>
<p><strong>Notes</strong>:</p>
<ul>
	<li>The use of the operators: <em>A-O</em> is a vector, <em>(A-O)*u</em> the 
	dot product, <em>^</em> is the cross product.</li>
	<li>The allocation of the memory by the caller; the <code>aCoord</code> array 
	for example.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Searching For the Eigen Values and Vectors of a 3x3 Matrix"></a>Searching 
for the Eigen Values and Vectors of a 3x3 Matrix</h3>
<pre class="code">// M=  0. 12.  13.
//    21.  0.  23.
//    31.  32.  0.
	
<a name="CATMath3x3Matrix"></a>CATMath3x3Matrix M ( 0.,  0.,  0.,
                    21.,  0.,  0.,
                    31., 32.,  0.);
	
// It is not invertible
CATMath3x3Matrix N;
if ( M.<a name="Inverse"></a>Inverse( N ) ) return (2);
	
// Retrieves the eigen vectors and values
int	      nbValues;
double	      aEigenValues [3];
CATBoolean     aHasAssociatedVector[3];
CATMathVector  aEigenVectors[3];
CATBoolean     isDiagonal;
	
M.<a name="EigenVectors"></a>EigenVectors( nbValues , 
                aEigenValues , 
<strong>                aHasAssociatedVector</strong> , 
                aEigenVectors , 
                isDiagonal );

for(int i = 0 ; i &lt; nbValues ; i++ )
{
  cout &lt;&lt; &quot;Eigen value number &quot; &lt;&lt; i+1 &lt;&lt; &quot; : &quot; &lt;&lt; aEigenValues[i];
  if (aHasAssociatedVector[i]) 
  {
    cout &lt;&lt; &quot; eigen vector &quot;        &lt;&lt; aEigenVectors[i].GetX() &lt;&lt; &quot;\t&quot;
         &lt;&lt; aEigenVectors[i].GetY() &lt;&lt; &quot;\t&quot;
         &lt;&lt; aEigenVectors[i].GetZ() &lt;&lt; endl;
  }
  else
  {
    cout &lt;&lt; &quot; no associated eigen vector &quot; &lt;&lt; endl;
  }
}</pre>
<p>The method to search the eigen values and vectors takes into account the case 
where there is no vector associated with an eigen value, that is to say when the 
dimension of the associated eigenspace is less than the multiplicity of the eigen 
value. Hence, the <code>aHasAssociated</code> array allows the caller to test whether 
this vector exists.</p>
<p>Notice also that all the arrays are allocated by the caller.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Defining a transformation of axis systems"></a>Defining a Transformation 
of Axis Systems</h3>
<p>To define the transformation of an axis system into another one, one has to combine 
two transformations:</p>
<ul>
	<li>the first from the final axes system to the canonical</li>
	<li>the second from the canonical axes system to the initial.</li>
</ul>
<p>The constructor of <a name="CATMathAxis"></a><em>CATMathAxis</em> takes a point 
and three vectors as input arguments. If these arguments are omitted, default values 
are used.</p>
<table class="fill">
	<tr>
		<th>Constructor</th>
		<th>Default Values</th>
	</tr>
	<tr>
		<td>CATMathAxis axis(A,U,V,W);</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>CATMathAxis axis(A,U,V);</td>
		<td>W is by default the third canonical direction</td>
	</tr>
	<tr>
		<td>CATMathAxis axis(A,U);</td>
		<td>W is by default the third canonical direction<br>
		V is by default the second canonical direction</td>
	</tr>
	<tr>
		<td>CATMathAxis axis(A);</td>
		<td>W is by default the third canonical direction<br>
		V is by default the second canonical direction<br>
		U is by default the first canonical direction</td>
	</tr>
	<tr>
		<td>CATMathAxis axis;</td>
		<td>W is by default the third canonical direction<br>
		V is by default the second canonical direction<br>
		U is by default the first canonical direction<br>
		A is by default the canonical origin</td>
	</tr>
</table>
<p>The constructor uses the three input vectors as follows:</p>
<ul>
	<li><code>U</code> is normalized (if needed) to become the axis first direction.</li>
	<li>The axis second direction belongs to the plane (<code>U, V</code>) and is 
	orthogonal to <code>U</code>.</li>
	<li><code>W</code> is used to give the orientation of the axis system.</li>
</ul>
<p>Although the input vectors can be not normalized and orthogonal, there resulting 
axis has three normalized and orthogonal directions.</p>
<pre class="code">CATMathAxis <strong>fromAxis</strong> ( O , OA , u );    
CATMathAxis toAxis   ( A , u , H-A);
<a name="CATMathTransformation"></a>CATMathTransformation transfo2;

// the transformation is defined as the composition 
//of two transformation as follows:
transfo2 = CATMathTransformation ( toAxis,<a name="CATMathOIJK"></a>CATMathOIJK ) 
	 * CATMathTransformation ( CATMathOIJK, fromAxis);

// <a name="apply it on a point"></a>apply it on a point:
CATMathPoint transfoOfO = transfo2 <strong>*</strong> O;

// the first coordinate of O in fromAxis is negative in toAxis.
if ( transfo2OfO.GetX()&gt;0) return (4) ; 

// the second coordinate of O in fromAxis is positive in toAxis.
 if ( transfo2OfO.GetY()&lt;0) return (4) ;</pre>
<ul>
	<li><code>fromAxis</code> is the axes system defined as follows:
	<ul>
		<li>The point <code>O</code> is the origin.</li>
		<li>The vector <code>OA</code> is normalized to become the first direction.</li>
		<li>The second direction is orthogonal to OA, and in the (OA,u) plane.</li>
		<li>The third argument is taken by default to the third direction of the 
		canonical axes system. <code>fromAxis</code> third direction is orthogonal 
		to the two firsts, in the orientation defined by the third argument.</li>
	</ul>
	</li>
	<li><code>CATMathOIJK</code> represents the canonical axis system.</li>
	<li>Notice the use of the * operator.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article has proposed milestones to use the mathematical classes, and has 
illustrated them on some examples.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td valign="top">[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
