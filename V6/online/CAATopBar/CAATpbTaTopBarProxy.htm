<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Language" content="en-us" />
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
        <link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
        <script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
        <script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
        <script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>      
        <title>TopBarProxy API Documentation</title>
        <style type="text/css">
            .style2 {
            color: #008000;
            }
            .style3 {
            color: #FF7900;
            text-decoration: underline;
            }
            .style4 {
            color: #FF0000;
            }
            </style>
    </head>
    <body onload="highlightSearchTerms();" class="style1">
        <table class="DocHeader">
            <tr>
                <td class="DocHeader1">
                    <h1>TopBarProxy API Documentation</h1>
                </td>
            </tr>
            <tr>
                <td class="tech">Technical Article</td>
            </tr>
        </table>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <table class="abstract">
            <tr>
                <td>
                    <h2>Abstract</h2>
                    <p>This document is to explain what the TopBarProxy is, and how 
                        it works, and it will also describe how to use it.
                    </p>
                    <ul>
                        <li>
                            <a href="#Part1">What is the TopBarProxy?</a>
                        </li>
                        <li>
                            <a href="#Part2">Deployment</a>
                            <ul>
                                <li><a href="#Part21">Dependency</a></li>
                                <li><a href="#Part22">Initialization</a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="#Part3"><span class="style3">Add items </span>
                            </a>
                            <ul>
                                <li><a href="#Part31">Adding commands through 
                                    declaration</a>
                                </li>
                                <li><a href="#Part32">Adding groups of items</a></li>
                                <li><a href="#Part33">Adding a &quot;checked&quot; item</a></li>
                                <li><a href="#Part34">Adding a executable item which 
                                    also has SubMenu</a>
                                </li>
                                <li><a href="#Part35">Setting a menu as dynamic: Modify 
                                    the menu just before it is displayed</a>
                                </li>
                                <li><a href="#Part36">Separators</a></li>
                            </ul>
                        </li>
                        <li><a href="#InShort">In Short</a></li>
                        <li><a href="#References">References</a></li>
                    </ul>
                </td>
            </tr>
        </table>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="Part1"></a>What is the TopBarProxy?</h2>
        <p>The TopBar is a module visible in top of every 3DExperience platform 
            web pages. This TopBar is populated with commands provided by instances 
            of TopBarProxy. Depends on your context, your TopBarProxy can be:
        </p>
        <ul>
            <li> Widget, inline or framed,</li>
            <li> Other component which provides some commands.</li>
        </ul>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="Part2"></a>Deployment</h2>
        <p>There are 2 modules related to the TopBar:</p>
        <ul>
            <li>One module called TopBar is to instantiate the TopBar with its 
                options in page. The main frame that will manage the content 
                components has to instantiate the TopBar.
            </li>
            <li>To communicate with the TopBar, TopBarProxy module is needed. Make 
                an instance of TopBarProxy per content component, the content 
                component will communicate with the TopBarProxy via the TopBarProxy 
                API. We will call &quot;CommandProvider&quot; this component.
            </li>
        </ul>
        <p>This documentation describe how to initialize the TopBarProxy module, 
            to initialize TopBar see TopBar documentation.
        </p>
        <h3><a name="Part21"></a>Dependency</h3>
 <p>All libraries, modules used are available in 
		runtime view in the folder:<br />
         &nbsp;&nbsp;&nbsp; <strong>
         \webapps</strong></p>
      <p>You will only need to add links for 
		the css, UWA css and TopBarProxy css:</p>
        <pre class="code">
&lt;-- CSS--&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../UWA2/assets/css/inline.css&quot; media=&quot;all&quot;/&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../TopBarProxy/TopBarProxy.css&quot; media=&quot;all&quot; /&gt;
</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part22"></a>Initialization</h3>
        <p>The initialization is done through a new, provide the id of this 
            Command Provider. Depends on your environment of development,&nbsp; two 
            cases exist:
        </p>
        <ol>
            <li>
                Working in a<strong> widget case</strong>, the id of this Command 
                Provider needs to be the widget id.
                <ul>
                    <li>Initialize the TopBarProxy with the widget id</li>
                </ul>
                <p>Use new to create a TopBarProxy: <br />
                    new TopBarProxy({options});<br />
                    <em><strong>Parameters</strong></em><br />
                    option {Object}
                </p>
                <ul>
                    <li>id {String} id of the content component, if working in a 
                        widget, this has to be the widget ID.
                    </li>
                </ul>
                <p><em><strong>Example</strong></em></p>
                <pre class="code">
   <span class="style2">//You can instantiate a TopBarProxy with the id of the widget</span>
   require(['UWA/Core', 'TopBarProxy/TopBarProxy'], function (Core, TopBarProxy) {
      'use strict';
      thisCommandProvider.topBarProxy = new TopBarProxy({
         'id': widget.id
      });
   });
</pre>
            </li>
            <li>
                <strong>NOT in the widget case</strong>, set the TopBarProxy id 
                following your own process.
                <p>Use new to create a TopBarProxy: <br />
                    new TopBarProxy({options});<br />
                    <em><strong>Parameters</strong></em><br />
                    option {Object}
                </p>
                <ul>
                    <li>id {String} id of the content component.</li>
                </ul>
                <p><em><strong>Example</strong></em></p>
                <pre class="code">
require(['UWA/Core', 'TopBarProxy/TopBarProxy'], function (Core, TopBarProxy) {
   'use strict';
   thisCommandProvider.topBarProxy = new TopBarProxy({
      'id': 'commandProviderId1'
   });
});</pre>
            </li>
        </ol>
        <h2><a name="Part3"></a>Add items</h2>
        <h3><a name="Part31"></a>Adding commands</h3>
        <p>
            <img alt="TopBar Commands" src="images/topbarcommands.png"/>
            <br />
            There is 2 ways to add commands, these commands in TopBar are visible, 
            when Frame activates the command provider Id.
        <br />
			Please note that TopBar manages if your commands is be visible or 
			not, for example:<br />
			If working in 3DDashboard context, your widget's commands are 
			visible only when your widget is maximized.
        </p>
        <ol>
            <li>
                Add command through declaration using:<br />
                thisCommandProvider.topBarProxy.setContent({content});
                <p><strong><em>Parameters</em></strong> </p>
                <ul>
                    <li>
                        content {Object} this is a json object that holds the menu
                        <ul>
                            <li>
                                profile {Array} [Optional] 
                                <ul>
                                    <li>label {Object} [Optional] what we be shown to end 
                                        use, should be internationalized
                                    </li>
                                    <li>onExecute {Function} [Optional] define the 
                                        callback to be called on when executing the command
                                    </li>
                                    <li>submenu {Object} [Optional] an instance of Menu, 
                                        containing some MenuItem
                                    </li>
                                </ul>
                            </li>
                            <li>
                                share {Array} [Optional] 
                                <ul>
                                    <li>label {Object} [Optional] what we be shown to end 
                                        use, should be internationalized
                                    </li>
                                    <li>onExecute {Function} [Optional] define the 
                                        callback to be called on when executing the command
                                    </li>
                                    <li>submenu {Object} [Optional] an instance of Menu, 
                                        containing some MenuItem
                                    </li>
                                </ul>
                            </li>
                            <li>
                                home {Array} [Optional] 
                                <ul>
                                    <li>label {Object} [Optional] what we be shown to end 
                                        use, should be internationalized
                                    </li>
                                    <li>onExecute {Function} [Optional] define the 
                                        callback to be called on when executing the command
                                    </li>
                                    <li>submenu {Object} [Optional] an instance of Menu, 
                                        containing some MenuItem
                                    </li>
                                </ul>
                            </li>
                            <li>
                                help {Array} [Optional] 
                                <ul>
                                    <li>label {Object} [Optional] what we be shown to end 
                                        use, should be internationalized
                                    </li>
                                    <li>onExecute {Function} [Optional] define the 
                                        callback to be called on when executing the command
                                    </li>
                                    <li>submenu {Object} [Optional] an instance of Menu, 
                                        containing some MenuItem
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
                <p><em><strong>Example</strong></em></p>
                <pre class="code">
var callback = thisCommandProvider.callback = function (menuItem) {
<span class="style2">    // If not bound to another object, 'this' is the MenuItem on which the command is executed.
    // The menuItem is anyway accessible as first argument of the callback.</span>
    alert(&quot;Received an event on command {0} execution.&quot;.format(menuItem.get('label')));
};

<span class="style2">// Set the commands through raw JSON object.
// label: what we be shown to end use, should be internationalized
// onExecute: define the callback to be called on when executing the command
// submenu: defines a menuitem as an entry to a submenu</span>
thisCommandProvider.topBarProxy.setContent({
    profile: [
        {'label': 'Command1', 'onExecute': callback},
        {'label': 'Command2', 'onExecute': callback}
    ],
    add: [
        {'label': 'Type1', 'onExecute': callback},
        {'label': 'Type2', 'onExecute': callback}
    ],
    share: [
        {'label': 'Share...', 'onExecute': callback},
        {'label': 'Save', 'submenu': [
            {'label': 'Save All', 'onExecute': callback}
        ]},
        {'label': 'Export...', 'onExecute': callback}
    ],
    home: [
        {'label': 'Collab1', 'onExecute': callback},
        {'label': 'Collab2', 'onExecute': callback}
    ],
    help: [
        {'label': 'Getting Started', 'onExecute': callback}
    ]
});</pre>
            </li>
            <li>
                Add commands through code, by initializing Menus and Menuitems.
                <br />
                <img alt="TopBar Commands" src="images/topbarsubmenu.png"/>
                <ul>
                    <li>Create a submenu</li>
                    <li>
                        Create a menuitem containing the submenu using:<br />new 
                        MenuItem({options});
                        <br />
                        <strong><em>Parameters</em></strong><br/>options {Object}
                        <ul>
                            <li>label {Object} [Optional] shown to end use, should be 
                                internationalized
                            </li>
                            <li>onExecute {Function} [Optional] define the callback to 
                                be called on when executing the command
                            </li>
                            <li>submenu {Object} [Optional] an instance of Menu, 
                                containing some MenuItem
                            </li>
                        </ul>
                    </li>
                    <li>
                        Add a new menuitem containing the created submenu using :<br />
                        thisCommandProvider.topBarProxy.addContent({content});<br />
                        <strong><em>Parameters</em></strong><br />content {Object}
                        <ul>
                            <li>profile, add, share, home, help {Object} [Optional] 
                                instance of menuItem
                            </li>
                        </ul>
                    </li>
                </ul>
                <p><em><strong>Example</strong></em></p>
                <pre class="code"> require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';
        <span class="style2">// Creating a submenu</span>
        var menu = new Menu();
        for (var i = 0; i &lt; 5; i++) {
            menu.add(new MenuItem({
                'label': 'My menu item' + (i + 1),
                'onExecute': callback
            }));
        };
        <span class="style2">// Creating a menuItem containing the submenu</span>
        var menuItem = new MenuItem({'label': 'My sub menu', 'submenu': menu});

        <span class="style2">// Add a new menuitem containing the created submenu</span>
        thisCommandProvider.topBarProxy.addContent({
            'profile': [menuItem]
        });
    });
   </pre>
            </li>
        </ol>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part32"></a>Adding groups of items</h3>
        <p><img alt="TopBar Grouped Items" src="images/groupedItems.png"/><br />
            Commands can also be added as a group, enabling to show separators, and 
            managing a groupMaxItem property.
        </p>
        <ul>
            <li>Create a submenu</li>
            <li>
                Create a menuitem containing the submenu, and declare it as a Group:<br /> 
                new MenuItem({options})<br />
                <strong><em>Parameters             </em></strong><br />
                options {object}
                <ul>
                    <li>label {Object} [Optional] shown to end use, should be 
                        internationalized
                    </li>
                    <li>onExecute {Function} [Optional] define the callback to be 
                        called on when executing the command
                    </li>
                    <li>submenu {Object} [Optional] an instance of Menu, containing 
                        some MenuItem
                    </li>
                </ul>
            </li>
            <li>
                Add the menu item to profile menu:<br />
                thisCommandProvider.topBarProxy.addContent({content});<strong><em><br />
                Parameters</em></strong><br />content {Object}
                <ul>
                    <li>profile, add, share, home, help {Object} [Optional] instance 
                        of menuItem
                    </li>
                </ul>
            </li>
        </ul>
        <p><strong><em>Example</em></strong></p>
        <pre class="code">
    <span class="style2">// Create a group of items</span>
    require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';

        <span class="style2">// Creating a submenu</span>
        var menu = new Menu();
        for (var i = 0; i &lt; 5; i++) {
            menu.add(new MenuItem({
                'label': 'My grouped menu item ' + (i + 1),
                'onExecute': callback
            }));
        };

        <span class="style2">// Creating a menuitem containing the submenu, and declare it as a Group</span>
        var menuItem = new MenuItem({'label': '', 'submenu': menu, 'group': true});

        <span class="style2">// Add the menu item to profile menu</span>
        thisCommandProvider.topBarProxy.addContent({
            'profile': menuItem
        });
    });</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part33"></a>Adding a &quot;checked&quot; item</h3>
        <p><img alt="TopBar Checked Item" src="images/checkedItem.png"/><br />
            A checked item can be add as command.
        </p>
        <ul>
            <li>
                Creating a menuitem with 'checked' property, and add an execution 
                callback to change the property value:<br />
                new MenuItem({options});
                <strong><em><br />
                Parameters
                </em></strong><br />
                options {object}
                <ul>
                    <li>label {Object} [Optional] shown to end use, should be 
                        internationalized
                    </li>
                    <li>onExecute {Function} function (item) { item.set ('checked', !item.get('checked'));</li>
                    <li>checked {Boolean} [Optional] set to true for item to be 
                        checked on launch
                    </li>
                </ul>
            </li>
            <li>
                Add the created menu item:
                <br />thisCommandProvider.topBarProxy.addContent({content});<br />
                <strong><em>
                Parameters</em></strong><br />
                content {Array}
                <ul>
                    <li>profile, add, share, home, help {Object} [Optional] instance 
                        of menuItem
                    </li>
                </ul>
            </li>
        </ul>
        <p><strong><em>Example</em></strong></p>
        <pre class="code">
      require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';

        <span class="style2">// Creating a menuitem with 'checked' property, and add an execution cb to change the property value</span>
        var menuItem = new MenuItem({
            'label': 'myCheckedItem',
            'checked': true,
            'onExecute': function (item) {
                item.set('checked', !item.get('checked'));
            }
        });

        <span class="style2">// Add the created menu item</span>
        thisCommandProvider.topBarProxy.addContent({
            'profile': [menuItem]
        });
    });</pre>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part34"></a>Adding a executable item which also has SubMenu</h3>
        <p><img alt="TopBar Executable Submenu" src="images/executableSubmenu.png"/><br />
            When working with sub menus, sometimes it is useful to give access to main 
            command directly on the sub-menu item, as other items may be more 
            advanced options. To do this, just set the 'onExecute' and 'submenu' 
            properties on the same item.
        </p>
        <ul>
            <li>
                Creating a menuitem with 'onExecute' property, and also with 
                'submenu' definition:<br />
                new MenuItem({options));
                <strong><em><br />
                Parameters
                </em></strong><br />
                options {object}
                <ul>
                    <li>label {Object} [Optional] what we be shown to end use, should 
                        be internationalized
                    </li>
                    <li>onExecute {Function} function (item) { item.set ('checked', !item.get('checked'));</li>
                    <li>
                        submenu {Array} [Optional]
                        <ul>
                            <li>label {String}</li>
                            <li>onExecute {Function} to execute on click</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>
                Add the created menu item:
                <br />thisCommandProvider.topBarProxy.addContent({content});<br />
                <strong><em>
                Parameters</em></strong><br />
                content {Array}
                <ul>
                    <li>profile, add, share, home, help {Object} [Optional] instance 
                        of menuItem
                    </li>
                </ul>
            </li>
        </ul>
        <p><strong><em>Example</em></strong></p>
        <pre class="code">
    require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';

       <span class="style2"> // Creating a menuitem with 'onExecute' property, and also with 'submenu' definition</span>
        var menuItem = new MenuItem({
            'label': 'Save',
            'onExecute': callback,
            'submenu': [
                {'label': 'Save All', 'onExecute': callback},
                {'label': 'Save Nothing', 'onExecute': callback},
                {'label': 'Advanced Save...', 'onExecute': callback}
            ]
        });

        <span class="style2">// Add the created menu item</span>
        thisCommandProvider.topBarProxy.addContent({
            'profile': [menuItem]
        });
    });});</pre>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part35"></a>Setting a menu as dynamic: Modify the menu just 
            before it is displayed
        </h3>
        <p>In some case, it may be needed to compute the content of a menu only 
            when it is shown to user. In this case, use the specific &quot;addOnSubMenuDisplayedEvent&quot; 
            function on proxy, to declare a callback on menu displayed.<br />
            You MUST call the &quot;reOnSubMenuReady&quot; function to tell the TopBar that 
            menu can be shown, unless the menu will NOT be displayed at all.
        </p>
        <ul>
            <li>
                Use method:
                <br />thisCommandProvider.topBarProxy.addOnSubMenuDisplayedEvent({options});<br />
                <strong><em>
                Parameters</em></strong><br />
                options {Object}
                <ul>
                    <li>profile, add, share, home, help {function} [Optional] 
                        declared callback on menu displayed
                    </li>
                </ul>
            </li>
        </ul>
        <p><strong><em>EExample</em></strong></p>
        <pre class="code">
    require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';

        <span class="style2">// Use this specific function to declare a callback on 'profile' main menu displayed</span>
        thisCommandProvider.topBarProxy.addOnSubMenuDisplayedEvent({
            'profile': function (item) {
                // Get all content of current item menu
                var menu = item.get('submenu');

         <span class="style2">       // Strange code which enables to add 1 menu item each time it is called
                //  until there are 10 items, then remove them all</span>
                if (menu.length &gt; 9) {
                    menu.remove(menu.slice(6));
                } else {
                    menu.add({label: new Date()});
                }

<span class="style2">                // Warn topbar that edition is done, and menu is ready.
                // </span><span class="style4">MANDATORY</span><span class="style2">: if not called, entire menu will not be shown to the user</span>
                item.fireOnSubMenuReady();
            }
        });
    });</pre>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Part36"></a>Separators</h3>
        <p>Prefer using the group syntax, but if needed add a specific item which 
            will be rendered as a separator between commands.
        </p>
        <ul>
            <li>
                Create a separator menuItem:
                <br />new MenuItem({options});<br />
                <strong><em>
                Parameters</em></strong><br />
                options {Object}
                <ul>
                    <li>separator {Boolean} set this Boolean to TRUE</li>
                </ul>
            </li>
            <li>
                Add the created menu item: <br />
                thisCommandProvider.topBarProxy.addContent({content});<br />
                content {Array}
                <ul>
                    <li>profile, add, share, home, help {Object} [Optional] instance of 
                        menuItem
                    </li>
                </ul>
            </li>
        </ul>
        <p><strong><em>Example</em></strong></p>
        <pre class="code">
    require(['UWA/Core', 'TopBarProxy/Menu', 'TopBarProxy/MenuItem'], function (Core, Menu, MenuItem) {
        'use strict';

       <span class="style2"> // Creating separator menuitem</span>
        var menuItem = new MenuItem({
            'separator': true
        });

        <span class="style2">// Add the created menu item</span>
        thisCommandProvider.topBarProxy.addContent({
            'add': [{'label': 'Before Separator'}, menuItem, {'label': 'After Separator'}]
        });
    });</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="InShort"></a>In Short</h2>
        <p><em>Follow this tutorial to instantiate a TopBar Proxy in your app.</em></p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="References"></a>References</h2>
        <table class="reference">
            <tr>
                <td>[1]</td>
                <td><a href="#">Tools Options</a></td>
            </tr>
        </table>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="History"></a>History</h2>
        <table class="history">
            <tr>
                <td>Version: <strong>1</strong> [Jan 2000]</td>
                <td>Document created</td>
            </tr>
        </table>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <script type="text/javascript">insertCopyright();</script>
    </body>
</html>
