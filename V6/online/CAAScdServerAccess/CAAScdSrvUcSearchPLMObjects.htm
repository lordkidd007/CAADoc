<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="devlang" content="idl" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Searching PLM Objects</title>
</head>

<body onload="highlightSearchTerms();">

<table class="table1">
	<tr>
		<td class="DocHeader3">
		<table class="DocHeader">
			<tr>
				<td class="DocHeader1" colspan="2">
				<h1>Searching PLM Objects</h1>
				</td>
			</tr>
			<tr>
				<td class="DocHeader4" colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td class="DocHeader3">
				<table class="DocHeaderIntro">
					<tr>
						<td class="Intro1">
						<p class="header"><a name="hj-top"></a>This use case searches 
						for PLM objects from the underlying database, and illustrates 
						the failure to set a PLM attribute to a PLM object if it 
						is not loaded in the current session.</p>
						<div id="toc">
						</div>
						<hr class="header" /></td>
					</tr>
					<tr>
						<td class="Intro2"><span class="run-in">Before you begin:</span> 
						Note that:<ul>
							<li>You should first launch 3DEXPERIENCE</li>
						</ul>
						<p><span class="run-in">Where to find the macro</span>:
						<a href="CAAScdSrvUcSearchPLMObjectsSource.htm">CAAScdSrvUcSearchPLMObjectsSource.htm</a></p>
						</td>
					</tr>
				</table>
				</td>
				<td class="DocHeader2">
				<table class="DocTopics">
					<tr>
						<td class="TopicsTitle">Related Topics</td>
					</tr>
					<tr>
						<td>
						<a href="../CAAScdInfInfrastructure/CAAInfLaunchingVBUseCase.htm">
						Launching an Automation Use Case</a></td>
					</tr>
					<tr>
						<td><a href="CAAScdSrvObjSearchService.htm">SearchService Object</a></td>
					</tr>
					<tr>
						<td><a href="CAAScdSrvObjDatabaseSearch.htm">DatabaseSearch Object</a></td>
					</tr>
				</table>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<table class="table1">
	<tr>
		<td>
		<ol class="task">
			<li>
				<p><strong>Prolog</strong></p>
				<p>The macro is made up of the <strong>SearchPLMObjects</strong> 
				sub. It typically begins with the following extract of code, which 
				serves as a built-in &quot;error handling&quot; mechanism.</p>
				<pre class="code"> <span class="keyword">Sub</span><strong> SearchPLMObjects</strong>()

  <span class="comment">'Error handling</span>
  <span class="keyword">On Error GoTo </span>ErrorSub
...</pre>
				<p>This instruction means that when a method will throw an error, 
				the macro will skip to the line named, <strong>ErrorSub</strong>. 
				See the step <a href="#Epilog">Epilog</a>.</p>
			</li>
			<li>
				<p><strong>Retrieving the SearchService object</strong></p>
				<p>The first step is to retrieve a <strong>SearchService</strong> 
				object from the session using the <strong>Application</strong> 
				object.</p>
				<pre class="code">... 
  <span class="keyword">Dim</span> oSearchService <span class="keyword">As</span> SearchService
  <span class="keyword">Set</span> oSearchService = CATIA.<strong>GetSessionService</strong>(&quot;<strong>Search</strong>&quot;)
...</pre>
				<p>The <strong>SearchService</strong> object is retrieved from the
				<strong>Application</strong> object (CATIA) using the <code>GetSessionService</code> 
				function.</p>
			</li>
			<li>
				<p><strong>Retrieving the DatabaseSearch object</strong></p>
				<p>The <strong>DatabaseSearch</strong> object is aggregated to the
				<strong>SearchService</strong> object to build and hold the search 
				and the search results.</p>
				<pre class="code"> ...
  <span class="keyword">Dim</span> oDBSearch <span class="keyword">As</span> DatabaseSearch
  <span class="keyword">Set</span> oDBSearch = oSearchService.<strong>DatabaseSearch</strong>
...</pre>
				<p>The <strong>DatabaseSearch</strong> object is retrieved from 
				the <strong>SearchService</strong> object thanks to the <strong>
				DatabaseSearch</strong> property.</p>
			</li>
			<li>
				<p><strong>Building the search</strong></p>
				<p>Several search modes exist. The Advanced Search Easy mode is 
				used here. This search mode is the default one, so it does not need 
				to be explicitly set. The search built here searches for objects of a 
				given type, and the names of which include a given character string. 
				Both type and name are asked from the end user who will type each of them in 
				an InputBox.</p>
				<p>First ask the end user to enter an object type.</p>
				<pre class="code"> ...
  <span class="keyword">Dim</span> strObjectType <span class="keyword">As</span> String
  strObjectType = InputBox("Please enter the type of objects to search", "Enter Object Type")
...</pre>
				<table>
					<caption>Fig. 1 Dialog to Input Object Search Type</caption>
					<tr>
						<td>
						<img alt="Input Object Search Type" src="CAAScdSrvUcSearchPLMObjects001.png"/></td>
					</tr>
				</table>
				<p>The input object type is retrieved using the <code>strObjectType</code> 
				variable. You can use any customization type available in your 
				environment. To search for physical products, for example, type VPMReference.</p>
				<pre class="code"> ... 
  oDBSearch.<strong>BaseType</strong> = strObjectType
...</pre>
				<p>This type is assigned to the search using the <strong>BaseType</strong> 
				property of the <strong>DatabaseSearch</strong> object.</p>
				<p>Then ask the end user to enter a value for the Name property, 
				or a substring of this value.</p>
				<pre class="code"> ...
  <span class="keyword">Dim</span> strObjectName <span class="keyword">As</span> String
  strObjectName = InputBox(&quot;Please enter the name of objects to search", "Enter Object Name")
...</pre>
				<table>
					<caption>Fig. 2 Dialog to Input Object Name</caption>
					<tr>
						<td>
						<img alt="Input Object Name" src="CAAScdSrvUcSearchPLMObjects002.png"/></td>
					</tr>
				</table>
				<p>The input object name is retrieved using the <code>strObjectName</code> 
				variable. The Name property is internally represented using the PLM_ExternalID attribute.</p>
				<pre class="code"> ... 
  oDBSearch.<strong>AddEasyCriteria</strong> &quot;<strong>PLM_ExternalID</strong>&quot;, <strong>strObjectName</strong>
...</pre>
				<p>It is assigned to the search using the <strong>AddEasyCriteria</strong> 
				sub of the <strong>DatabaseSearch</strong> object.</p>
			</li>
			<li>
				<p><strong>Launching the search</strong></p>
				<pre class="code"> ... 
  oSearchService.<strong>Search</strong>
...</pre>
				<p>The <strong>Search</strong> sub of the <strong>SearchService</strong> 
				object launches the search. The list of found objects is displayed 
				in the Search results.</p>
			</li>
			<li>
				<p><strong>Retrieving the search results</strong></p>
				<pre class="code"> ...
  <span class="keyword">Dim</span> cObjects <span class="keyword">As</span> PLMEntities
  <span class="keyword">Set</span> cObjects = oDBSearch.<strong>Results</strong>
...</pre>
				<p>The <strong>Results</strong> property of the <strong>DatabaseSearch</strong> 
				object returns the PLM objects of the database matching the criteria in a
				<strong>PLMEntities</strong> collection object. This collection 
				contains references to all the PLM objects found and displayed in the 
				Search results.</p>
			</li>
			<li>
				<p><strong>Displaying the title of the first object in the collection</strong></p>
				<pre class="code">... 
<span class="keyword">  </span>MsgBox &quot;Title of the first object retrieved: &quot; &amp; cObjects.Item(1).<strong>GetAttributeValue</strong>(&quot;<strong>V_Name</strong>&quot;)
...</pre>
				<p>The <strong>GetAttributeValue</strong> function of the first
				<strong>PLMEntity</strong> object of the collection (<code>cObjects.Item(1)</code>) 
				retrieves its title stored using the value of the <strong>V_Name</strong> 
				attribute and displays it in the message box as for example in the 
				image below.</p>
				<table>
					<caption>Fig. 3 Title of the First Object Retrieved</caption>
					<tr>
						<td>
						<img alt="First Retrieved Object Title" src="CAAScdSrvUcSearchPLMObjects003.png"/></td>
					</tr>
				</table>
			</li>
			<li>
				<p><strong>Attempting to set PLM Attribute V_Name through a PLM entity 
				listed in the Search Results</strong></p>
				<pre class="code">... 
  cObjects.Item(1).<strong>SetAttributeValue</strong> &quot;<strong>V_Name</strong>&quot;, &quot;<strong>New Name</strong>&quot;
...</pre>
				<p>A call to the <strong>SetAttributeValue</strong> sub on a <strong>
				PLMEntity</strong> object (<code>cObjects.Item(1)</code>), attempts 
				to set the the value &quot;New Name&quot; to the attribute &quot;V_Name&quot;. But this call fails. 
				This is because the objects retrieved from a search and handled 
				as <strong>PLMEntity</strong> objects are not PLM objects, but 
				references to the PLM objects in the database. See <a href="#Epilog">Epilog</a>.</p>
			</li>
			<li>
				<p><a name="Epilog"></a><strong>Epilog</strong></p>
				<p>The following extract of code typically occurs at the end of 
				the subroutine. It is primarily meant for error-handling purpose. 
				Any run time error that the macro encounters, results in the execution 
				flow reaching this part of the code, and then terminating with a 
				normal exit from the sub scope.</p>
				<pre class="code">...
<span class="comment">'Skip to the end of the macro</span>
  <span class="keyword">GoTo</span> EndSub

<span class="comment">'Line reached when an error is thrown by a method</span>
ErrorSub:
  MsgBox Err.Description _
  + vbCrLf + &quot; The SetAttributeValue called on an object in the search results fails&quot; _
  + vbCrLf + &quot; The V_Name value remains: &quot; + PLMComps.Item(1).GetAttributeValue(&quot;V_Name&quot;) _ 
  + vbCrLf + &quot; Objects retrieved from a search are not PLM objects but references to them.&quot;

<span class="comment">'Last line of the macro</span>    
EndSub:
<span class="keyword">End Sub</span></pre>
				<p>Usually the statement <code>MsgBox Err.Description</code> is used 
				alone. In this case, the <strong>SetAttributeValue</strong> sub called 
				against a <strong>PLMEntity</strong> object will always fail, 
				because it is not the PLM object itself, 
				but a reference to it, and attribute values cannot be set from 
				such references.</p>
				<table>
					<caption>Fig. 4 Error Issued when Attempting to Set a New Name 
					to a PLM Object from the Search Results</caption>
					<tr>
						<td>
						<img alt="Error Message" src="CAAScdSrvUcSearchPLMObjects004.png"/></td>
					</tr>
				</table>
				<p>To set attributes to, and work with PLM objects, use the <strong>
				PLMOpen</strong> sub of the <strong>PLMOpenService</strong> object 
				to open the <strong>PLMEntity</strong> object in the session.</p>
			</li>
		</ol>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
