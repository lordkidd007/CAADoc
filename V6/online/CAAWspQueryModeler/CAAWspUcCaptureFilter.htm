<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieve a Persistent Filter and Run It on an Associated Product Root
</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Retrieve a Persistent Filter and Run It on an Associated Product Root</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case illustrates the steps involved in the CAA Customization 
		to retrieve a Persistent Filter from the database, execute it on its associated 
		Root Product, to output a list of Identificators of PLM entities. These 
		PLM entities are the Product References contained in the output filtered 
		model. The filtered model consists of a Product Root aggregating beneath 
		it all PLM Instances which conform to our filter criteria.</p>
		<p>A &quot;<strong>Persistent Filter</strong>&quot; is a PLM Core Reference 
		type, specialized by the <code>PLMWspFilter</code> Modeler [<a href="#References">1</a>]. 
		It is a PLM Equivalent of a Filter which an end-user interactively builds 
		in CATIA with the &quot;<strong>Filter</strong>&quot; command available 
		in the <strong>&quot;VPM Navigator&quot;</strong> toolbar/workbench. A Filter 
		consists of the filter criteria and a link to the Root Product, on which 
		the filter is to be applied.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWSPCaptureFilter Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAWSPCaptureFilter Do</a></li>
					<li><a href="#How">How to Launch CAAWSPCaptureFilter</a></li>
					<li><a href="#Where">Where to Find the CAAWSPCaptureFilter Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>User learns the <code>PLMWorkspaceInterfaces</code> framework capabilities to 
build a CAA Customization to</p>
<ul>
	<li>Retrieve a &quot;<strong>Persistent Filter</strong>&quot; from an underlying 
		database. A Filter consists of a Filter criteria and a link to the Root 
		Product, on which the filter is applied.</li>
	<li>Execute this &quot;<strong>Persistent Filter</strong>&quot; on the Root 
		Product it links to, to output a list of Identificators of PLM References, 
		which form the filtered model.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWSPCaptureFilter Use Case</h2>
<p><code>CAAWSPCaptureFilter</code> is a use case of the <code>CAAWorkspaceInterfaces.edu</code> 
framework that illustrates the <code>PLMWorkspaceInterfaces</code> framework capabilities. 
However the module used to showcase the Filter modeler capability is <strong>
CAAWSPCaptureQuery.m </strong> of CAAWorkspaceInterfaces.edu Framework</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWSPCaptureFilter Do</h3>
<p>Fundamentally the Use Case executes a &quot;<strong>Persistent Filter</strong>&quot; 
on its associated Root Model, to output a list of Identificators of PLM entities. 
These PLM entities are the PLM References contained in the output filtered model. 
The filtered model consists of the Product Root aggregating all PLM Instances beneath 
it which conform to our filter criteria.</p>
<p>To begin with, the UC retrieves a Filter from an underlying database. The filter 
was interactively created and stored in the database, prior to the Use Case execution. 
(Refer the &quot;<strong>How to Launch</strong>&quot; section). The &quot;<strong>Persistent 
Filter</strong>&quot; is retrieved with the <strong>PLM_ExternalID</strong> attribute value set, its unique identification in the 
database.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Persistent Filter Listed in the Search Panel</caption>
	<tr>
		<td>
		<img alt="Persistent Filter" height="99" src="images/CAAWSPCaptureFilter_Fig1.gif" width="532"/></td>
	</tr>
</table>
<p>[Fig.1] depicts the &quot;Persistent Filter&quot; listed in the panel, in interactive 
CATIA.</p>
<p>The Filter is then executed on the Root model it points to. [<a href="#Fig1">Fig. 
1</a>] depicts the &quot;<strong>Explore with Filter</strong>&quot; command in the 
contextual menu of the filter listed. It is significant to note here that the Filter 
consists of not only the filter criteria, but also a link to its associated Root 
Product in the database, it is applied on.</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: The Input Root Product Model</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image2.jpg" width="710" height="193"/></td>
	</tr>
</table>
<p>[<a href="#Fig2">Fig.2</a>] depicts the root model on which the filter is to 
be applied.</p>
<table>
	<caption><a name="Fig3"></a>Fig.3: The Output Filtered Model</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image3.jpg" width="542" height="147"/></td>
	</tr>
</table>
<p>We next apply the filter on the root model. [<a href="#Fig3">Fig.3</a>] depicts 
the model after the filter is applied. The filtered model consists of Root, aggregating 
all entities beneath it which conform to the filter criteria. [Fig.4] depicts the 
UC output in the console.</p>
<table>
	<caption><a name="Fig4"></a>Fig.4: UC Output in Console</caption>
	<tr>
		<td>
		<pre class="code" style="width: 670px">
CAAWSPCaptureQuery started
...
The session is successfully created
 Success CATCkePLMNavPublicAccessServices ::RetrieveKnowledgeType non custo type  PLMWspPVS
Query succeeded
Found PLM_ExternalID:MyFilter
There are 5 element with the persistent search criteria
non non
non non
non non
non non
non non
PLM session closed
CAAWSPCaptureQuery ended</pre>
		</td>
	</tr>
</table>
<p>Since the UC is a batch executable it simply outputs a list of PLM entities (count 
and alias) which together define the filtered model. [<a href="#Fig4">Fig.4</a>] 
depicts this output in bold. You can observe that the Root (<strong>CAAWSPCaptureFilter_Root-ImportedAsNew 
5093---)</strong> is among the result. It is always the case.</p>
<p>We, next see the steps involved to launch the Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWSPCaptureFilter</h3>
<p>To begin with, import the 3DXML provided with this UC. It contains a Root Product 
Model as depicted in [<a href="#Fig2">Fig.2</a>].</p>
<p>Launch CATIA. Load the input Root model in a VPM Navigator session within CATIA.</p>
<table>
	<caption><a name="Fig5"></a>Fig.5: Root Product Listed in the Search Panel</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image1.jpg" width="748" height="117"/></td>
	</tr>
</table>
<p>This could be done as [<a href="#Fig5">Fig.5</a>] depicts, by initially 
querying for the root product from the database. Next, when the root is listed 
in the Search panel, the &quot;Explore&quot; command in the contextual menu, loads the 
Root Product in a VPM Navigator session.</p>

<p>The next step, is to create the Filter object. [<a href="#Fig2">Fig.2</a>] above 
depicts the &quot;Filter&quot; command in the &quot;Navigation&quot; action bar 
within the &quot;CATIA Product Finder&quot; App, which creates the filter object.</p>
<table>
	<caption><a name="Fig7"></a>Fig.7: Building a Filter</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image7.jpg" width="494" height="312"/></td>
	</tr>
</table>
<p>[<a href="#Fig7">Fig.7</a>] depicts the dialog panel which has all the filter 
objects applied on the Root product currently loaded in session, listed in it. It 
launches the &quot;Attribute Filter&quot; dialog panel, through which the filter 
criteria is built.</p>
<table>
	<caption>Fig.8: Building the Filter Criteria</caption>
	<tr>
		<td>
		<img alt="" src="images/AttributeFilter_image.jpg" width="593" height="414"/></td>
	</tr>
</table>
<p>The filter criteria is defined as &quot;<strong>Part Number == &quot;CAAWSPCaptureFilter_Child2*&quot;</strong>&quot;. 
Click on Apply, and it runs on the Root model currently loaded in session.</p>
<table>
	<caption><a name="Fig9"></a>Fig.9: Root Model with Filter Applied</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image3.jpg" width="542" height="147"/></td>
	</tr>
</table>
<p>An icon (funnel) appears alongside the root node in the model tree, as depicted 
in [<a href="#Fig9">Fig.9</a>]. You'll find the root model is filtered for only 
those entities which conform to the filter criteria, we defined above.</p>
<p>Run the &quot;Store Filter&quot; command [Fig.10], to store the 
filter in the database. </p>
<table>
	<caption>Fig. 10: Store Filter Command</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_Image12.jpg" width="239" height="172"/></td>
	</tr>
</table>
<table>
	<caption><a name="Fig10"></a>Fig.11: New Filter Create Panel</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWSPCaptureFilter_image10.jpg" width="472" height="283"/></td>
	</tr>
</table>
<p>[<a href="#Fig10">Fig.10</a>] depicts the &quot;New / Filter&quot; panel for 
user to specify the name of the Filter for storage in the database. We specify &quot;MyFilter&quot; 
as the name, which is the PLM_ExternalID of the persistent filter. V_version 
value by default is A (ofcourse, this will be defined by the Business Logic at the customer 
end) but we should not pass this value to query the Filter Object. Only PLM_ExternalID value 
should be the input for the UC execution 
in the step ahead.</p>
<p>To launch <code>CAAWSPCaptureQuery</code>, you will need to set up the build 
time environment, compile <code>CAAWSPCaptureQuery</code> along with its prerequisites, 
set up the runtime environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAWSPCaptureQuery Repository Server User password SecurityCtx PLMType PLM_ExternalID&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The PLMType</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>A <code>PLM_ExternalID</code> of the Filter stored</td>
	</tr>
	</table>
<p>* It is interesting to note here that a &quot;<strong>Persistent Filter</strong>&quot; 
contains within it the Filter criteria and a link to the product root on which the 
filter is applied. When a Persistent Filter is exported to a 3DXML, the filter is, 
on the run applied on the Product Root, to output a filtered model, which is eventually 
exported to the 3DXML. This 3DXML is very much relevant in an industrial scenario, 
wherein a manufacturer sends a filtered model, consisting of only those entities, 
that are of interest to the supplier, for obvious IPR (Intellectual Property Rights) 
protection issues.</p>
<p>Now, this 3DXML is obviously not of interest for us (UC context), since the UC 
execution involves applying the filter on an input root model (unfiltered). Hence 
the 3DXML we provide with this UC, is that created by exporting the Root Product.</p>
<p>The <code>CAAWSPCaptureFilter_Filter.3dxml</code> file occurs in the <a>
<code>CAAWorkspaceInterfaces.edu</code></a> fwk. *, at the location</p>
<p><code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\InputData\CAAWSPCaptureQuery_Filter.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed. Please refer to document [<a href="#References">1</a>] 
for how to import such a 3dxml in your PLM repository.</p>
<p>The details of the Root Product in the 3DXML are listed below:</p>
<ul>
	<li><a><code>PLM_ExternalID</code></a>: CAAWSPCaptureFilter_Root</li>
	<li><a><code>Version</code></a>: A</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWSPCaptureFilter Code</h3>
<p>The <code>CAAWSPCaptureFilter</code> use case is made of a class/file located 
at <code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\CAAWSPCaptureQuery.m</code>.</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in <code>CAAWSPCaptureQuery</code>:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the Persistent Filter with its IDSet Attribute 
		and its PLM Type, at the Modeler Level</a></li>
	<li><a href="#Step3">Executing the Persistent Filter on its Associated Root 
		Product</a></li>
	<li><a href="#Step4">Displaying the Count and the Alias of PLM Entities Output 
		by Query</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The <code>CAAWSPCaptureFilter</code> use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we connect with the Reviewer Role (since we ain't modifying PLM 
data but only querying the database). There are other parameters as well, details 
of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">2</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<p>Further, it also retrieves the PLM Type defined for a <code>PLMCoreReference</code> 
by the <code>PLMWspFilter</code> Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Persistent Filter with its IDSet Attributes 
and its PLM Type at the Modeler Level</h3>
<p>Since a &quot;<strong>Persistent Filter</strong>&quot; is fundamentally treated 
as a PLM Entity type in the database, the steps to retrieve it is essentially the 
same, as for any other PLM Entity. The PLM type and the Identification Set attribute 
values together, uniquely identify a &quot;Persistent Filter&quot; in the database.
</p>
<pre class="code">
...
    CATListOfCATString iListAttributeName ;
    CATListOfCATUnicodeString iListAttributeValue ;

     iListAttributeName.Append("PLM_ExternalID");
     iListAttributeValue.Append(comp_externalId);

     CATIAdpPLMIdentificator* opiIDComp = NULL;
   
     hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				       iStrPLMType,opiIDComp);
...</pre>
<p>The call to <strong>CAARetrieveIDofUniquePLMObject</strong> returns the PLM Identificator 
of the &quot;Persistent Filter&quot;. The Use Case &quot;Querying, Expanding and 
Opening PLM Components&quot; [<a href="#References">4</a>] details this call further.</p>
<p>Its input argument <code>spCATType</code>, a <code>CATIType</code>* type, represents 
the PLM type specialized for a &quot;<code>PLMCoreReference</code>&quot; by the &quot;<code>PLMWspPVS</code>&quot; 
Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Executing the Persistent Filter on its Associated Root Product</h3>
<pre class="code">
...
	CATListPtrCATIAdpPLMIdentificator oIdsListResults;
         hr = <strong>CATWSPCaptureServices::Execute</strong>(piPLMId, oIdsListResults);
...</pre>
<p>The filter is finally executed. It outputs a list of Identificators of PLM Components 
which together define the output filtered model. The filtered model consists of 
a Root Product which aggregates beneath it all entities which conform to the filter 
criteria.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying the Count and Alias of PLM Entities Output by 
the Filter Execution</h3>
<pre class="code">...
		cout &lt;&lt; &quot;   There are &quot; &lt;&lt; <strong>oIdsListResults.Size()</strong> &lt;&lt; &quot; element with the persistent filter criteria&quot; &lt;&lt; endl;
...</pre>
<p>We display the count of the PLM Entities output by the filter executed. It is 
the count of the PLM Entities which occur within the filtered model.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A batch Use Case which illustrates the steps involved in the CAA Customization 
to retrieve a Persistent Filter from an underlying database, execute it on the associated 
Root Product, to output a list of Identificators of PLM Components, which together 
define the output filtered model. This filtered model consists of a Root Product 
which aggregates beneath it all entities which conform to this filter criteria.</p>
<p>A &quot;<strong>Persistent Filter</strong>&quot; is fundamentally treated as 
a PLM entity type in the database. Hence the steps to retrieve it are primarily 
the same as for any other PLM entity. We query for a Filter, with its IDSet attributes 
and the PLM Type specialized by the <code>PLMWspFilter</code> Modeler for a
<code>PLMCoreReference</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Opening PLM Reference with various Expand Modes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Sep 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: 2 [May 2009]</td>
		<td>Document modified</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
