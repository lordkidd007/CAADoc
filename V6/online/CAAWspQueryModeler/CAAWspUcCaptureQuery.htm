<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Retrieve and Execute a Persistent Database Query</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Retrieve and Execute a Persistent Database Query</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case illustrates the steps involved in the CAA Customization 
		which retrieves a Persistent Search from the database, executes it and retrieves 
		a list of Identificators of PLM Entities which conform to the search criteria.</p>
		<p>A &quot;<strong>Persistent Search</strong>&quot; is a PLM Core Reference 
		type, specialized by the <code>PLMWspQuery</code> Modeler [<a href="#References">1</a>]. 
		It is a PLM Equivalent of a Query which an end-user interactively builds 
		in CATIA with the &quot;<strong>Advanced Search</strong>&quot; 
		and &quot;<strong>Save Search</strong>&quot; command.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWSPCaptureQuery Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAWSPCaptureQuery Do</a></li>
					<li><a href="#How">How to Launch CAAWSPCaptureQuery</a></li>
					<li><a href="#Where">Where to Find the CAAWSPCaptureQuery Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>User learns the <code>PLMWorkspaceInterfaces</code> framework capabilities to 
build a CAA Customization to</p>
<ul>
	<li>Retrieve a &quot;<strong>Persistent Search</strong>&quot; from an underlying 
		database</li>
	<li>Execute this &quot;<strong>Persistent Search</strong>&quot; on an underlying 
		db, to output a list of Identificators of PLM Components, which conform 
		to the search criteria</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWSPCaptureQuery Use Case</h2>
<p><code>CAAWSPCaptureQuery</code> is a use case of the <code>CAAWorkspaceInterfaces</code>.edu 
framework that illustrates the <code>PLMWorkspaceInterfaces</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWSPCaptureQuery Do</h3>
<p>The goal of the <code>CAAWSPCaptureQuery</code> Use Case is to execute a Persistent 
Search to retrieve a list of Identificators of PLM Components which conform to this 
search criteria, from an underlying database.</p>
<p>The steps involved in the UC execution are listed below. Please note that this 
UC is primarily a batch executable. The screen shots depicted below represent an 
equivalent of the UC step, in an interactive CATIA session.</p>
<ul>
	<li>Retrieve a &quot;Persistent Search&quot; with its IdentifierSet attributes 
		and the PLM Type, from an underlying database. The &quot;Persistent Search&quot; 
		is fundamentally treated as another PLM Entity. Hence, what is actually 
		retrieved is an Identificator of the &quot;Persistent Search&quot;.
		<table>
			<caption><a name="Fig1"></a>Fig.1: List the Searches</caption>
			<tr>
				<td>
				<img alt="" src="images/CAAWspUcCaptureQuery_image3.jpg" width="484" height="102"/></td>
			</tr>
		</table>
		In Interactive CATIA, the Persistent Search retrieved (MyCaptureQuery) is 
		listed in the &quot;Search Output&quot; panel as depicted in [<a href="#Fig1">Fig.1</a>] 
		above. </li>
</ul>
<ul>
	<li>Executes the &quot;Persistent Search&quot; to output a list of Identificators 
		of PLM Entities which conform to the input search criteria
		<table>
			<caption><a name="Fig2"></a>Fig.2: Execute the Search</caption>
			<tr>
				<td>
				<img alt="" src="images/CAAWspUcCaptureQuery_image4.jpg" width="492" height="148"/>
				<br />
				</td>
			</tr>
		</table>
		In Interactive CATIA, the contextual command &quot;<strong>Run Search</strong>&quot; 
		executes the Persistent Query in the database, as depicted in [<a href="#Fig2">Fig.2</a>] 
		above.</li>
	<li>On execution of the Persistent search, it returns a list of Identificators 
		of PLM Entities which conform to the search criteria. The UC displays the 
		count and the alias of each PLM entity in this list.
		<table>
			<caption><a name="Fig3"></a>Fig.3 List of PLM Entities output by Persistent 
			Query Execution</caption>
			<tr>
				<td>
				<img alt="" src="images/CAAWspUcCaptureQuery_image8.jpg" width="854" height="133"/></td>
			</tr>
		</table>
		In Interactive CATIA, the PLM entities output on executing the Persistent 
		Query, are listed in the dialog panel depicted in [<a href="#Fig3">Fig.3</a>] 
		above.</li>
</ul>
<p>A sample output of this UC execution occurs below. In bold those steps which 
are listed above.</p>
<pre class="code">
CAAWSPCaptureQuery started
...
 The session is successfully created
Success CATCkePLMNavPublicAccessServices ::RetrieveKnowledgeType non custo type  PLMWspQuery
Query succeeded
Found PLM_ExternalID:MySearch
There are 2 element with the persistent search criteria
non non
non non
PLM session closed
CAAWSPCaptureQuery ended</pre>
<p>We, next see the steps involved to launch the Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWSPCaptureQuery</h3>
<p>To begin with, the user has to create a Query (Search). It is done interactively 
in CATIA, with the <strong>Advanced Search</strong> 
command.</p>
<table>
	<caption><a name="Fig4"></a>Fig.4: The Search Specifications</caption>
	<tr>
		<td>
		<img alt="" src="images/SearchCriteria_image10.jpg" width="475" height="523"/></td>
	</tr>
</table>
<p>[<a href="#Fig4">Fig.4</a>] depicts the &quot;<strong>Search Criteria</strong>&quot; 
panel, where the search specification &quot;<strong>Part Number == &quot;CAAWSPCaptureQuery*</strong>&quot; 
is input.</p>
<table>
	<caption><a name="Fig5"></a>Fig.5: Storing a Search in Database</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWspUcCaptureQuery_image7.jpg" width="171" height="124"/></td>
	</tr>
</table>
<p>The Search is stored in the database with the <strong>
Save Search</strong> command. as the [<a href="#Fig5">Fig.5</a>] depicts.</p>
<table>
	<caption><a name="Fig6"></a>Fig.6: New Search Panel</caption>
	<tr>
		<td>
		<img alt="" src="images/CAAWspUcCaptureQuery_image35.jpg" width="374" height="285"/></td>
	</tr>
</table>
<p>We assign the name &quot;<strong>MyCaptureQuery</strong>&quot; for the Search, 
while storing it in the db, as depicted in the search panel above [<a href="#Fig6">Fig.6</a>]. 
It is infact the <code>PLM_ExternalID</code> attribute value of the Search. The 
PLM_ExternalID attribute and its value are input for the batch UC execution.</p>
<p>We next import the input model for this UC execution to our database. It is retrieved 
by importing the <code>CAAWSPCaptureQuery_Query.3dxml</code> file from the <a>
<code>CAAWorkspaceInterfaces.edu</code></a> fwk. *</p>
<p><code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\InputData\CAAWSPCaptureQuery_Query.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">10</a>] is the folder 
where the API CD-ROM is installed. Please refer to document [<a href="#References">1</a>] 
for how to import such a 3dxml in your PLM repository.</p>
<p>Our 3DXML consists of PLM Components detailed below. When imported to user database, 
you'll for sure, find those components when the query above is executed.</p>
<ul>
	<li><a><code>PLM_ExternalID</code></a>: CAAWSPCaptureQuery_Root1</li>
	<li><a><code>Version</code></a>: A</li>
	<li><code>PLM_ExternalID:</code> CAAWSPCaptureQuery_Root2</li>
	<li><code>V_version:</code> A</li>
</ul>
<p>To launch <code>CAAWSPCaptureQuery</code>, you will need to set up the build 
time environment, compile <code>CAAWSPCaptureQuery</code> along with its prerequisites, 
set up the runtime environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAAWSPCaptureQuery Repository Server User password SecurityCtx PLMType PLM_ExternalID&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>PLMType </th>
		<td>A PLMType </td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>A <code>PLM_ExternalID</code> of the Search stored*</td>
	</tr>
	</table>
<p>* It might be of interest for end-users to note that though the 3DXML is created 
by exporting a &quot;<strong>Persistent Search</strong>&quot;, as normally done 
for any other PLM Entity, unlike the general case, the 3DXML does not contain the &quot;<strong>Search&quot;</strong> 
entity in it. What actually happens, is on export, the query is run on an underlying 
database, to output a list of PLM entities which conform to the search criteria. 
This list is then exported and stored in a 3DXML. To relate that in a real life 
scenario, manufacturer would typically be interested in providing the PLM Entities 
output by a particular query to a supplier, for which this 3DXML comes handy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWSPCaptureQuery Code</h3>
<p>The <code>CAAWSPCaptureQuery</code> use case is made of a class/file located 
at <code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\CAAWSPCaptureQuery.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAWSPCaptureQuery:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the Persistent Search with its IDSet Attribute 
		and its PLM Type at the Modeler Level</a></li>
	<li><a href="#Step3">Executing the Persistent Search</a></li>
	<li><a href="#Step4">Displaying the Count and the Alias of PLM Entities Output 
		by Query</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The <code>CAAWspCaptureQuery</code> use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we connect with the Reviewer Role (since we ain't modifying PLM 
data but only querying the database). There are other parameters as well, details 
of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [2]. This article primarily deals with Opening and Closing a PLM 
session.</p>
<p>Further, it also retrieves the PLM Type defined for a <code>PLMCoreReference</code> 
by the <code>PLMWspQuery</code> Modeler. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Persistent Search with its Identification 
Set Attributes and its PLM Type at the Modeler Level</h3>
<p>Since a &quot;<strong>Persistent Search</strong>&quot; is fundamentally treated 
as a PLM Entity type in the database, the steps to retrieve it is essentially the 
same, as for any other PLM Entity. The Modeler PLM type and the Identification Set 
attribute values together, uniquely identify a &quot;Persistent Search&quot; in 
the database.</p>
<pre class="code">
...
    CATListOfCATString iListAttributeName ;
    CATListOfCATUnicodeString iListAttributeValue ;

    iListAttributeName.Append("PLM_ExternalID");
    iListAttributeValue.Append(comp_externalId);

    CATIAdpPLMIdentificator* opiIDComp = NULL;
   
     hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
				       iStrPLMType,opiIDComp);
...</pre>
<p>The call to CAARetrieveIDofUniquePLMObject returns the PLM Identificator of the &quot;Persistent 
Search&quot;. The Use Case &quot;Querying, Expanding and Opening PLM Components&quot; 
[<a href="#References">4</a>] details this call further.</p>
<p>Its input argument spCATType, a <code>CATIType</code>* type, represents the PLM 
Type specialized for a &quot;<code>PLMCoreReference</code>&quot; by the &quot;<code>PLMWspQuery</code>&quot; 
Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Executing the Persistent Search</h3>
<pre class="code">
...
	CATListPtrCATIAdpPLMIdentificator oIdsListResults;
         hr = <strong>CATWSPCaptureServices::Execute</strong>(piPLMId, oIdsListResults);
...</pre>
<p>The query is finally executed. It outputs a list of Identificators of PLM Components 
which conform to the search criteria. Please note the PLM Components are not loaded 
in session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying the Count and Alias of PLM Entities Output by 
the Query</h3>
<pre class="code">...
		cout &lt;&lt; &quot;   There are &quot; &lt;&lt; <strong>oIdsListResults.Size()</strong> &lt;&lt; &quot; element with the persistent search criteria&quot; &lt;&lt; endl;
...</pre>
<p>We display the count of the PLM Entities output by the query executed. We expect 
atleast two entities, those which were imported in your database from the 3DXML 
provided with this UC.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A batch Use Case which illustrates the steps involved in the CAA Customization 
to retrieve a Persistent Search from an underlying database, execute it to output 
a list of Identificators of PLM Components, which conform to a search criteria defined 
by this Persistent Search. A &quot;<strong>Persistent Search</strong>&quot; is fundamentally 
treated as a PLM entity type in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpenPLMRefWithDiffExpandMode.htm">
		Opening PLM Reference with various Expand Modes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Sep 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: 2 [May 2009]</td>
		<td>Document modified</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
