<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Persistent Filter associated to a Product Root
</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Retrieve a Persistent Filter associated to a Product Root</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case illustrates the steps involved in the CAA Customization 
		to retrieve a Persistent Filter</p>
		<p>A &quot;<strong>Persistent Filter</strong>&quot; is a PLM Core Reference 
		type, specialized by the <code>PLMWspPVS</code> Modeler [<a href="#References">1</a>]. 
		It is a PLM Equivalent of a Filter which an end-user interactively builds 
		in CATIA with the &quot;<strong>Filter</strong>&quot; command available 
		in the <strong>&quot;VPM Navigator&quot;</strong> toolbar/workbench. A 
		Filter consists of the filter criteria and a link to the Root Product.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWSPRetrieveFilters Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAWSPRetrieveFilters Do</a></li>
					<li><a href="#How">How to Launch CAAWSPRetrieveFilters</a></li>
					<li><a href="#Where">Where to Find the CAAWSPRetrieveFilters Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>User learns the <code>PLMWorkspaceInterfaces</code> framework capabilities to 
build a CAA Customization to create Persistent Filter using APIs of class CATPLMPersistentFilterServices. 
The basic functionality illustrated in this Use-case is</p>
<ul>
	<li>Retrieving a Persistent Filter using API. This Filter 
	is associated to a Product root. The Product Structure under this 
	root is filtered according to the Filtering Criteria.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWSPRetrieveFilters Use Case</h2>
<p><code>CAAWSPRetrieveFilters</code> is a use case of the <code>CAAWorkspaceInterfaces.edu</code> 
framework that illustrates the <code>PLMWorkspaceInterfaces</code> framework 
capabilities. The module used to showcase the Filter modeler capability is <strong>
CAAWSPRetrieveFilters.m </strong> of CAAWorkspaceInterfaces.edu Framework</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWSPRetrieveFilters Do</h3>
<p>The Use-case illustrates the steps to retrieve an existing Persistent Filter 
present in database. </p>
<p>The UC retrieves the Persistent Filter from database 
with the <strong>PLM_ExternalID</strong> attribute value set, its unique 
identification in the database. There must be a Filter object already present in 
the database. If there is no Filter object present in the databse, then you will 
have to create it. You may create a Filter interactively and Store it in 
database or you may run our use-case CAAWSPCreateFilters</p>
<p>A call to the GetPersistentFilterDefinition API retrieves the Expand 
Specification of the Persistent Filter. Then we can retrieve the CATExpandFilter 
object from it with a call to FillFilter() API.</p>
<p>We, next see the steps involved to launch the Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWSPRetrieveFilters</h3>


<p>To launch <code>CAAWSPRetrieveFilters</code>, you will need to set up the build 
time environment, compile <code>CAAWSPRetrieveFilters</code> along with its prerequisites, 
set up the runtime environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAWSPRetrieveFilters Repository Server User password SecurityCtx PLMType PLM_ExternalID&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		PLM Database/Repository</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The PLMType of Persistent Filter</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>A <code>PLM_ExternalID</code> of the Filter object</td>
	</tr>
	
	</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWSPRetrieveFilters Code</h3>
<p>The <code>CAAWSPRetrieveFilters</code> use case is made of a class/file located 
inside <code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\CAAWSPRetrieveFilters.m </code>module</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in <code>CAAWSPRetrieveFilters</code></p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the Filter Object</a></li>
	<li><a href="#Step3">Retrieve Expand Specification from the Filter object</a></li>
	<li><a href="#Step4">Create Expand specification: To attach Expand Filter to the Product Root</a></li>
	<li><a href="#Step5">Get Filter definition</a></li>
	<li><a href="#Step6">Epilog</a></li>
</ol>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The <code>CAAWSPRetrieveFilters</code> use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we may connect with the Leader Role (since we are modifying PLM 
data). There are other parameters as well, details 
of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">2</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>

<h3><a name="Step2"></a>Retrieving the Filter Object</h3>
<p>The PLM type and the </p>
<pre class="code">
...
 	CATUnicodeString iPLM_ExternalIDValue(iargv[7]);
	
	iListAttributeName.Append("PLM_ExternalID");
	iListAttributeValue.Append(iPLM_ExternalIDValue);
		
 	CATIAdpPLMIdentificator* opiIDComp = NULL;

	hr = ::CAARetrieveIDofUniquePLMObject (iListAttributeName,iListAttributeValue,														
							iStrPLMType,opiIDComp);
...
</pre>
<p>The call to <strong>CAARetrieveIDofUniquePLMObject</strong> returns the PLM Identificator 
of the 'Filter' object. The PLM Type of Filter object is <strong>PLMWspPVS</strong></p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieve Expand Specification from the Filter object</h3>
<pre class="code">
...
	CATAdpPLMExpandSpecification *ipIAdpPLMExpandSpecification = NULL;
	hr = CATPLMPersistentFilterServices :: GetPersistentFilterDefinition (opiIDComp, ipIAdpPLMExpandSpecification);

	if (SUCCEEDED (hr) &amp;&amp; ipIAdpPLMExpandSpecification-&gt;IsValid())
		cout &lt;&lt; "	GetPersistentFilterDefinition succeeded ..!" &lt;&lt; endl;
...
</pre>
<p>The call to BuildFromXMLExpression() API builds a CATAdpPLMExpandFilter 
object with the filter criteria mentioned in the XML string.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Check whether the Expand Specification is Valid</h3>
<pre class="code">
...
	CATBoolean value = FALSE;
	if (NULL != ipIAdpPLMExpandSpecification)
		value = ipIAdpPLMExpandSpecification -&gt; IsValid();
	if (value == TRUE)
		cout &lt;&lt; "	ExpandSpecification is valid ..!" &lt;&lt; endl;
...</pre>
<p>The CATAdpPLMExpandSpecification is valid if the IsValid() is successful</p>

<h3><a name="Step5"></a>Get Filter definition</h3>
<p>We can get the CATAdpPLMExpandFilter object to perform further operations.</p>
<pre class="code">
...
	CATAdpPLMExpandFilter opExpandFilter;
	
	hr = ipIAdpPLMExpandSpecification -&gt; FillFilter (opExpandFilter);
	if (SUCCEEDED (hr))
		cout &lt;&lt; "	FillFilter succeeded ..!" &lt;&lt; endl;
...
</pre>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Step6"></a>Epilog</h3>
<p>The Usecase ends with the session closure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->



<h2><a name="InShort"></a>In Short</h2>
<p>A batch usecase which illustrates the procedure to retrieve a Filter object 
from the database. Also it shows some basic operation you may perform on the 
Filter retrieved like, Get Filter definition</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [July 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
</body>

</html>
