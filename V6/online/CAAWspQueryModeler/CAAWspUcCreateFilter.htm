<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Persistent Filter associated to a Product Root
</title>
<style type="text/css">
.style1 {
	font-family: "Courier New", Courier;
	font-size: 9pt;
	color: #976970;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Create a Persistent Filter associated to a Product Root</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case illustrates the steps involved in the CAA Customization 
		to create a Persistent Filter</p>
		<p>A &quot;<strong>Persistent Filter</strong>&quot; is a PLM Core Reference 
		type, specialized by the <code>PLMWspPVS</code> Modeler [<a href="#References">1</a>]. 
		It is a PLM Equivalent of a Filter which an end-user interactively builds 
		in CATIA with the &quot;<strong>Filter</strong>&quot; command available 
		in the <strong>&quot;VPM Navigator&quot;</strong> toolbar/workbench. A Filter 
		consists of the filter criteria and a link to the Root Product, on which 
		the filter is to be applied.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWSPCreateFilters Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAWSPCreateFilters Do</a></li>
					<li><a href="#How">How to Launch CAAWSPCreateFilters</a></li>
					<li><a href="#Where">Where to Find the CAAWSPCreateFilters Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>User learns the <code>PLMWorkspaceInterfaces</code> framework capabilities to 
build a CAA Customization to create Persistent Filter using APIs of class CATPLMPersistentFilterServices. 
The basic functionality illustrated in this Use-case is</p>
<ul>
	<li><strong>Creating</strong> a Persistent Filter using API. This Filter 
	created is associated to a Product root. The Product Structure under this 
	root is filtered according to the Filtering Criteria provided through XML 
	file in code</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWSPCreateFilters Use Case</h2>
<p><code>CAAWSPCreateFilters</code> is a use case of the <code>CAAWorkspaceInterfaces.edu</code> 
framework that illustrates the <code>PLMWorkspaceInterfaces</code> framework capabilities. 
However the module used to showcase the Filter modeler capability is <strong>
CAAWSPCreateFilters.m </strong> of CAAWorkspaceInterfaces.edu Framework</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWSPCreateFilters Do</h3>
<p>Fundamentally the Use Case creates a &quot;<strong>Persistent Filter</strong>&quot; 
on its associated Root Model, according to the Filtering criteria given as input 
through XML. On creating the Filter, the product model gets filtered as per the 
criteria given through XML string input.</p>
<p>To begin with, the UC retrieves the Root product from an underlying database 
with the <strong>V_Name</strong> and <strong>majorrevision</strong> attribute value set, its identification 
attributes in the 
database. The filter criteria is then given as an input in the form of string. 
The 'Persistent 
Filter' is then created through API.</p>
<p>Since the UC is a batch executable it creates a Persistent Filter object and 
saves it in the database. By launching CATIA interactively and querying the 
Filter object, you can observe that the Root (<strong>CAAFiltersRoot_Assembly)</strong> is 
Filtered according to the criteria.</p>
<p>It is interesting to note here that a &quot;<strong>Persistent Filter</strong>&quot; 
contains within it the Filter criteria and a link to the product root on which 
the filter is applied.</p>
<p><strong>Note:</strong> You may also retrieve the Root Physical Product by 
using <strong>PLM_ExternalID</strong> and <strong>majorrevision</strong> as the 
identification set attributes. This will also guarantee its unicity</p>
<p>We, next see the steps involved to launch the Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWSPCreateFilters</h3>
<p>To begin with, import the 3DXML provided with this Framework <code>
CAAFiltersRootAssembly.3dxml</code>. It contains a Root Product Model.</p>
<p>To launch <code>CAAWSPCreateFilters</code>, you will need to set up the build 
time environment, compile <code>CAAWSPCreateFilters</code> along with its prerequisites, 
set up the runtime environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAAWSPCreateFilters Repository Server User password SecurityCtx PLMType V_name majorrevision Filter_Name&quot;</pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		PLM Database/Repository</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>The PLMType of Physical Product</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>A <code>V_name</code> of the Root PhysicalProduct stored</td>
	</tr>
	<tr>
		<th>majorrevision</th>
		<td>Majorrevision value of the Root Product </td>
	</tr>
	<tr>
		<th>Filter_Name</th>
		<td>Name of the Filter</td>
	</tr>

	</table>
<p>The <code>CAAFiltersRootAssembly.3dxml</code> file occurs in the <a>
<code>CAAWorkspaceInterfaces.edu</code></a> fwk. *, at the location</p>
<p><code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\InputData\CAAFiltersRootAssembly.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed. Please refer to document [<a href="#References">1</a>] 
for how to import such a 3dxml in your PLM repository.</p>
<p>The details of the Root Product in the 3DXML are listed below:</p>
<ul>
	<li><a><code>V_name</code></a>: CAAFiltersRoot_Assembly</li>
	<li><span class="style1">m</span><a><code>ajorrevision</code></a>: A</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWSPCreateFilters Code</h3>
<p>The <code>CAAWSPCreateFilters</code> use case is made of a class/file located 
inside <code>InstallRootFolder\CAADoc\CAAWorkspaceInterfaces.edu\CAAWSPCreateFilters.m </code>module</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in <code>CAAWSPCreateFilters</code>:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving the Product Root with its IDSet Attribute 
		and its PLM Type, at the Modeler Level</a></li>
	<li><a href="#Step3">Build Filter XML</a></li>
	<li><a href="#Step4">Create Expand specification: To attach Expand Filter to the Product Root</a></li>
	<li><a href="#Step5">Create Persistent Filter</a></li>
	<li><a href="#Step6">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The <code>CAAWSPCreateFilters</code> use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we may connect with the Leader Role (since we creating PLM 
data). There are other parameters as well, details 
of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">2</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<p>Further, it also retrieves the PLM Type defined for a <code>PLMCoreReference</code> 
by the <code>PLMWspPVS</code> Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Product Root with its IDSet Attributes 
and its PLM Type at the Modeler Level</h3>
<p>The PLM type and the Identification Set attribute 
values together, uniquely identifies a 'Physical Product' in the database.
</p>
<pre class="code">
...
 	CATUnicodeString iV_nameValue(iargv[7]);
	CATUnicodeString imajorrevisionValue(iargv[8]);
	
	iListAttributeName.Append("V_Name");
	iListAttributeName.Append(CATCkePLMNavPublicServices::GetMajorRevisionAttributeName(NULL_var).CastToCharPtr());
	
	iListAttributeValue.Append(iV_nameValue);
	iListAttributeValue.Append(imajorrevisionValue);
	
 	CATIAdpPLMIdentificator* opiIDComp = NULL;

	hr = ::CAARetrieveIDofUniquePLMObject (iListAttributeName,iListAttributeValue,														
							iStrPLMType,opiIDComp);
...
</pre>
<p>The call to <strong>CAARetrieveIDofUniquePLMObject</strong> returns the PLM Identificator 
of the &quot;Persistent Filter&quot;.</p>
<p>Its input argument <code>spCATType</code>, a <code>CATIType</code>* type, represents 
the PLM type specialized for a &quot;<code>PLMCoreReference</code>&quot; by the &quot;<code>PLMWspPVS</code>&quot; 
Modeler.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Build Filter XML</h3>
<pre class="code">
...
	hr = pPLMExpandFilter.BuildFromXMLExpression( ifilter_string );
	if (SUCCEEDED(hr)) cout &lt;&lt; "Build XML succeeded..!" &lt;&lt; endl;
...</pre>
<p>The call to BuildFromXMLExpression() API builds a CATAdpPLMExpandFilter 
object with the filter criteria mentioned in the XML string.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Create Expand specification: To attach Expand Filter to the Product Root</h3>
<pre class="code">
...
	CATAdpPLMExpandSpecification * ipAdpPLMExpandSpecification = new CATAdpPLMExpandSpecification (opiIDComp, pPLMExpandFilter);
	if (ipAdpPLMExpandSpecification -&gt; IsValid())
		cout &lt;&lt; "Expand Specification built correctly " &lt;&lt; endl;
...</pre>
<p>The CATAdpPLMExpandSpecification object attaches the Expand Filter to the 
Product Root. It means that the filter criteria is attached to the root. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Step5"></a>Create Persistent Filter</h3>
<pre class="code">
...
	hr = CATPLMPersistentFilterServices :: CreatePersistentFilter ( usrFilterName, ipAdpPLMExpandSpecification, opIFilterAdpId );
	if (SUCCEEDED(hr) &amp;&amp; ( NULL != opIFilterAdpId) )
		cout &lt;&lt; " Create Filter success..." &lt;&lt; endl;
...</pre>
<p>The call to create Persistent Filter creates the Filter with the desired 
Filter name with the ExpandSpecification created in above step. It also outputs 
a pointer to the Filter object created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->

<h3><a name="Step6"></a>Epilog</h3>
<p>The Usecase ends with the session closure.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->



<h2><a name="InShort"></a>In Short</h2>
<p>A batch</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [July 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
</body>

</html>
