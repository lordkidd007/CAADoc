<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Managing Parameter Rights</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Parameter Rights</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to manage the parameter access rights.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifParameterRights Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifParameterRights Do</a></li>
					<li><a href="#How">How to Launch CAALifParameterRights</a></li>
					<li><a href="#Where">Where to Find the CAALifParameterRights 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The literal feature platform manages the parameter rights in two steps:</p>
<ol>
	<li>By specifying access rights on the literal.</li>
	<li>Then by making the parameter editor process the specified accessed rights. 
		That way, the end-user is only authorized to access parameters according 
		to the rights specified.</li>
</ol>
<p>In this use case, you will only learn how to specify access rights on parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifParameterRights Use Case</h2>
<p>CAALifParameterRights is a use case of the CAALiteralFeatures.edu framework that 
illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifParameterRights Do</h3>
<p>This use case creates two integer type parameters and set their access rights.</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: In a batch program 
		which does not involve any parameter editor, you can specify access rights 
		but they are not really active. To test the right access effectiveness. 
		you must plug an editor to your application. </td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifParameterRights</h3>
<p>To launch CAALifParameterRights, you will need to set up the build time environment, 
then compile CAALifParameterRights along with its prerequisites, set up the run 
time environment, and then execute the use case which main program is CAALifParametersMain. 
This program encompasses several use cases [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifParametersMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifParameterRights Code</h3>
<p>The CAALifParameterRights use case is made of the CAALifParameterRights.cpp file 
located in the CAALifParameters.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifParameters.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The main program related to this file is CAALifParametersMain.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>CAALifParameterRights is made up of three steps:</p>
<ol>
	<li><a href="#Step1">Creating the Parameters</a></li>
	<li><a href="#Step2">Retrieving the Default Access Rights</a></li>
	<li><a href="#Step3">Setting the Access Rights</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Parameters</h3>
<p>The &quot;intParam0&quot; and &quot;intParam1&quot; parameters are created as 
persistent parameters [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Default Access Rights</h3>
<p>The default parameter rights are retrieved by using the CATICkeParm::UserAccess 
method.</p>
<pre class="code">CATICkeParm_var spP1 = ... ; 
cout &lt;&lt; &quot;Default rights (3 expected - readOnly)&quot; &lt;&lt; endl;
cout &lt;&lt; int(spP1-&gt;UserAccess ()) &lt;&lt; endl;
cout &lt;&lt; &quot;Default rights (0 expected)&quot; &lt;&lt; endl;
cout &lt;&lt; int(spP1-&gt;IsReadOnly () ) &lt;&lt; endl;
</pre>
<p>By default a parameter is created with ReadWrite access mode. The access rights 
are defined by the enum below:</p>
<pre class="code">enum UserAccessMode
{
  NotSeen = 0,
  ReadOnly = 1,
  WriteOnly = 2,
  ReadWrite = 3,
  User = 4
}</pre>
<p>In addition to the usual access rights, the literals support the NotSeen access 
right whereby you can specify that a parameter can only be used by the application 
developer. The NotSeen access right has nothing to do with the Hidden properties 
which is managed by the end-user.</p>
<p>You can also use the CATICkeParm::IsReadOnly method to determine the parameter 
access rights.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting the Access Rights</h3>
<pre class="code">...
spP1-&gt;SetUserAccess(ReadOnly);
spP2-&gt;SetUserAccess(ReadOnly);
...
</pre>
<p>The &quot;intParam0&quot; access right is set to ReadOnly by using the CATICkeParm::SetUserAccess 
method which takes as its argument one of the items of the UserAccessMode enum.</p>
<p>The &quot;intParam0&quot; parameter is constrained by the p1 = 3 * p2 - 2 formula 
although it is declared as a ReadOnly parameter. The formula is created and the &quot;intParam0&quot; 
parameter is updated according to the formula.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
