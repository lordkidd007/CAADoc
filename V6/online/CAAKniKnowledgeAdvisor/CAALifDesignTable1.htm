<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Accessing the Design Table Values</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Accessing the Design Table Values</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAALifDesignTableAccess use case which illustrates 
		how to access the values in a design table.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifDesignTableAccess Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifDesignTableAccess Do</a></li>
					<li><a href="#How">How to Launch CAALifDesignTableAccess</a></li>
					<li><a href="#Where">Where to Find the CAALifDesignTableAccess 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to retrieve the values of a design table.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifDesignTableAccess Use Case</h2>
<p>CAALifDesignTableAccess is a use case of the CAALiteralFeatures.edu framework 
that illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does the CAALifDesignTableAccess Do</h3>
<p>The main operations performed in this use case are</p>
<ul>
	<li>Creating a design table from the representation reference of a .txt file</li>
	<li>Doing the associations required for the use case</li>
	<li>Displaying the column names</li>
	<li>Reading the cell values.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifDesignTableAccess</h3>
<p>To launch CAALifDesignTableAccess, you will need to set up the build time environment, 
then compile CALifDesignTableMain along with its prerequisites [<a href="#References">1</a>], 
import the briefcase InstallRootDirectory/CAALiteralFeatures.edu/FunctionTests/InputData/CAALiteralFeatures.3dxml 
containing the text file (with possibly a prefix ImportPrefix) and then execute 
the use case which main program is CALifDesignTableMain.</p>
<pre class="code">mkrun -c &quot;CAALifDesignTableMain <em>repository server_name:port_number user password \
         role environment modeler ImportPrefixCAALifDesignTable00</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifDesignTableAccess Code</h3>
<p>The CAALifDesignTableAccess use case is made of single source file named CAALifDesignTableAccess.cpp 
which is called by its CAALifDesignTableMain.cpp main program. Both files are located 
in the CAALifDesignTable.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifDesignTable.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Here is the step-by-step description of the program:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Creating Parameters</a></li>
	<li><a href="#Step3">Creating the Design Table</a></li>
	<li><a href="#Step4">Displaying the List of Associations</a></li>
	<li><a href="#Step5">Retrieving the Column Associated With a Parameter</a></li>
	<li><a href="#Step7">Setting the Active Configuration</a></li>
	<li><a href="#Step7">Retrieving the Parameter Associated With a Column</a></li>
	<li><a href="#Step8">Retrieving the Value Located in a Given Row and a Given 
		Column</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>This step creates a session, a 3D Shape representation, and retrieves from the 
representation's root container a pointer to the factory to be used to create the 
parameters as well as the formula [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Parameters</h3>
<p>Six parameters are created [<a href="#References">2</a>] [<a href="#References">3</a>]. 
For the purpose of the example, the parameter names are identical to the design 
table column names. That way all the parameters can be automatically associated 
with the design table columns.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Design Table</h3>
<p>See [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying the List of Associations</h3>
<pre class="code">const CATListOfCATUnicodeString* pLass = spDesign-&gt;Associations();
cout &lt;&lt; &quot;List of associations&quot; &lt;&lt; endl;
for (int i=1 ; i &lt;= pLass-&gt;Size() ; i++)
{
  cout &lt;&lt; ((*pLass)[i]).CastToCharPtr() &lt;&lt; endl;
} </pre>
<p>You can check that all the parameters have been associated with all the columns. 
Here is the list of associations which is displayed at run-time:</p>
<pre class="code">List of associations
Representation1\Column1
Representation1\Column2
Representation1\Column3
Representation1\Column4
Representation1\Column5
Representation1\Column6</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Column Associated With a Parameter</h3>
<p>The column p2 is associated with, is retrieved by using the ParameterColumn method 
of <em>CATIDesignTable</em> interface. The column number is returned.</p>
<pre class="code">cout &lt;&lt; (spPp2-&gt;Name()).CastToCharPtr() &lt;&lt; &quot; is on column #&quot; ;
// 2 is expected
cout &lt;&lt; spDesign-&gt;ParameterColumn(spPp2) &lt;&lt; endl;</pre>
<p>This method returns 0 when the parameter is not associated with any column.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting the Active Configuration</h3>
<p>Configuration2 is declared as active by using the SetCurrentConfiguration method 
of the <em>CATIDesignTable</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving the Parameter Associated With a Column</h3>
<p>The parameter associated with Column4 is retrieved and displayed. Before retrieving 
the parameter associated with a column, you must specify a current configuration. 
Otherwise, the ColumnParameter method may return unpredictable result.</p>
<pre class="code">...
CATUnicodeString col4 = &quot;Representation1\\Column4&quot;;
CATICkeParm_var spPar0 = spDesign-&gt;ColumnParameter(0,&amp;col4);
cout &lt;&lt; &quot;The value of the parameter in Column4 is: &quot; ; 
cout &lt;&lt; (spPar0-&gt;Show()).CastToCharPtr() &lt;&lt; endl;</pre>
<p>The ColumnParameter method returns the parameter which is found in the column 
whose index is specified as the first argument. If the first argument value is 0, 
the method returns the parameter which is found in the column whose name is specified 
in the second argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving the Value Located in a Given Row and a Given 
Column</h3>
<pre class="code">...
cout &lt;&lt; &quot;The parameter value(CellWithColumnType) in Column5 Row2 is: &quot; ; 
cout &lt;&lt; (spDesign-&gt;CellWithColumnType(2,5)).CastToCharPtr() &lt;&lt; endl;

// Display the value in Col5/Row2 as a double in MKS unit 
cout &lt;&lt; &quot;The parameter value(CellAsDouble) in Column5 Row2 is: &quot; ; 
cout &lt;&lt; spDesign-&gt;CellAsDouble(2,5) &lt;&lt; endl;</pre>
<p>The value located in column5 row5 is displayed. The CellWithColumnType method 
of <em>CATIDesignTable</em> returns either the value with unit if the unit is specified 
in the cell or the raw value concatenated with the unit specified with the column 
name, if any. The value located in column5 row5 is displayed. CATIDesignTable::CellAsDouble 
returns the value read in a cell in SI units.</p>
<p>Compare the string returned by CATIDesignTable::CellWithColumnType (15mm) with 
the value returned by CATIDesignTable::CellAsDouble (0.015).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To access a design table, you are provided with methods to:</p>
<ul>
	<li>read the values contained in cells.</li>
	<li>list the associations created between parameters and design table columns.</li>
	<li>find out in what column a parameter is defined for the current configuration.</li>
	<li>find out the parameter defined in a column for the current configuration.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifFirstApplication.htm">Getting Started with Knowledge 
		Interfaces Programming</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALifDesignTable0.htm">Programming with Design Tables</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
