<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Getting Started with Knowledge Interfaces Programming</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Getting Started with Knowledge Interfaces Programming</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAALifGettingStarted use case. This use case 
		shows how to create parameters and a formula that uses these parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifGettingStarted Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifGettingStarted Do</a></li>
					<li><a href="#How">How to Launch CAALifGettingStarted</a></li>
					<li><a href="#Where">Where to Find the CAALifGettingStarted 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create length and magnitude type 
parameters, create a formula using these parameters, retrieve and display a parameter 
value, modify a parameter value and check how the formula result is affected.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifGettingStarted Use Case</h2>
<p>CAALifGettingStarted is a use case of the CAALiteralFeatures.edu framework that 
illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifGettingStarted Do</h3>
<p>CAALifGettingStarted gives you a feel of how you can create and manipulate the 
parameter and relation objects. The parameters define a cylinder. They are the cylinder 
radius, height, and volume. Since the volume of the cylinder can be computed from 
its radius and height, a formula, that is, a relation object, is created to perform 
this computation. The different values of the parameters are retrieved and displayed, 
and the radius is modified to show the formula result update.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifGettingStarted</h3>
<p>To launch CAALifGettingStarted, you will need to set up the build time environment, 
then compile CAALifGettingStarted along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifGettingStarted <em>repository</em> <em>server_name:port_number user</em> <em>password</em> <em>role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifGettingStarted Code</h3>
<p>The CAALifGettingStarted use case is made of a single source file named CAALifGettingStarted.cpp 
located in the CAALifGettingStarted.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifGettingStarted.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create parameters that describe a cylinder and a formula that computes the 
cylinder volume using these parameters, there are five main steps:</p>
<ol>
	<li><a href="#Step1">Prolog</a><br />
		This step creates a session, a 3D Shape representation, and retrieves from 
		its root container a pointer to the factories to be used to create the parameters 
		as well as the formula.</li>
	<li><a href="#Step2">Creating the Parameters</a><br />
		The cylinder is described using two length type parameters named <code>Radius</code> 
		and <code>CylHeight</code>. The cylinder volume is a magnitude type parameter 
		named <code>CylVolume</code></li>
	<li><a href="#Step3">Creating the Formula</a><br />
		The cylinder volume is computed using the formula:<code><br />
		CylVolume = (PI * Radius**2)*CylHeight</code></li>
	<li><a href="#Step4">Modifying a Parameter Value and Checking the Formula Update</a><br />
		The cylinder height is modified. The formula updates the volume and the 
		new volume value is displayed.</li>
	<li><a href="#Step5">Epilog</a><br />
		This step closes the session.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>Before going any further in literal programming, you must initialize your environment.</p>
<pre class="code">int main (int argc, char** argv)
{
  CAALifServices services;

  if (argc != 8)
    return CAALifKO;

  // Initialize the PLM session
  int rc = 0;
  rc = services.<strong>CAALifInitSession</strong> (argv[1], argv[2], argv[3], argv[4], argv[5], argv[6], argv[7]);
  if( rc != CAALifOk )
    return rc;

  // Retrieve the parameter factory 
  CATIContainer* container = NULL;		
  rc = services.<strong>CAALifCreateInstanceContainer</strong>( &amp;container );
  if( rc != CAALifOk )
    return rc;

  CATICkeParmFactory_var spFact = container;
  ...</pre>
<p>This task consists in:</p>
<ol>
	<li>Creating a session<br />
		This is done by the <code>CAALifInitSession</code> method of the <em>CAALifServices</em> 
		class defined in the CAALifBasis.m module.</li>
	<li>Creating a 3D Shape representation and retrieving its root container.<br />
		This is done by the <code>CAALifCreateInstanceContainer</code> method of 
		the <em>CAALifServices</em> class that is also defined in the CAALifBasis.m 
		module and that returns a <em>CATIContainer</em> interface smart pointer, 
		cast into a <em>CATICkeParmFactory/CATICkeRelationFactory</em> smart pointer. 
		There are two important points about these interfaces:
		<ol>
			<li>They are implemented by any feature container</li>
			<li>They provide you with all the literals and methods creation methods.</li>
		</ol>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Parameters</h3>
<p>Three parameters are created using the <em>CATICkeParmFactory</em> smart pointer: 
two length type parameters for the cylinder radius and height, and a dimension type 
parameter for the cylinder volume.</p>
<ol>
	<li>Creating two length type parameters
		<pre class="code">  ...
  CATUnicodeString RadiusName(&quot;Radius&quot;);
  double RadiusValue = 2.5;

  CATICkeParm_var spRadius = spFact-&gt;<strong>CreateLength</strong>(RadiusName, RadiusValue);
  if (NULL_var != spRadius)
  {
    ... // Display the radius
    CATUnicodeString HeightName(&quot;CylHeight&quot;);
    double HeightValue = 4.;
    CATICkeParm_var spHeight = spFact-&gt;<strong>CreateLength</strong>(HeightName, HeightValue);
    if (NULL_var != spHeight)
    {
      ... // Display the cylinder height
      ...</pre>
		<p>The length type parameters are created using the <code>CreateLength</code> 
		method of the <em>CATICkeParmFactory</em> interface. This method takes as 
		its first argument the parameter name and as its second argument the initial 
		value assigned to the parameter. This value must be expressed according 
		to the International System of Units (SI), that is, in meters.</p>
	</li>
	<li>Creating a dimension type parameter
		<pre class="code">      ...
      CATICkeMagnitude_var
        spVolumeMagnitude = <strong>CATCkeGlobalFunctions::GetParmDictionary()-&gt;FindMagnitude</strong>(&quot;VOLUME&quot;);
        if (NULL_var != spVolumeMagnitude)
        {      
          CATUnicodeString VolumeName(&quot;CylVolume&quot;);
          double VolumeValue = 2.;
          CATICkeParm_var 
          spVolume = spFact-&gt;<strong>CreateDimension</strong>(spVolumeMagnitude,
                                             VolumeName,
                                             VolumeValue);
          if (NULL_var != spVolume)
          {
             ... // Display the volume
             ...</pre>
		<p>The dimension type parameter must have a magnitude chosen among those 
		managed by the dictionary of types. A smart pointer to the <code>VOLUME</code> 
		magnitude is asked to the dictionary using <code>CATCkeGlobalFunctions::GetParmDictionary()-&gt;FindMagnitude</code> 
		method. The dimension type parameter is created thanks to the <code>CreateDimension</code> 
		method of the <em>CATICkeParmFactory</em> interface, that takes the magnitude 
		as a parameter in addition to the parameter name and initial value. This 
		value is also expressed according to the International System of Units (SI), 
		that is, in cubic meters.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Formula</h3>
<p>The formula will compute the cylinder volume. This task is done in two substeps:</p>
<ol>
	<li>Creating the list of parameters to be used in the formula
		<pre class="code">  ...
  // Create the list of parameters to be used in the formula
  CATCkeListOf(Parm) pParamList;
  pParamList.Append (spVolume);
  pParamList.Append (spRadius);
  pParamList.Append (spHeight); 
  ...</pre>
		<p>Before creating a formula, you must provide its parameter list. It is 
		a <em>CATCkeListOf(Parm)</em> instance containing at least all the parameters 
		referred to in the formula. The list is built by appending all the required 
		parameters, including the one to be computed. The parameters required to 
		define the formula are: the volume, the radius, and the cylinder height.</p>
	</li>
	<li>Creating the formula itself
		<p>When you create a formula, you must specify the parameter to be constrained 
		as well as the expression that defines it. Here is the portion of the code 
		that creates the &quot;VolumeFormula&quot; relation.</p>
		<pre class="code">  ...
  // Create the formula &quot;CylVolume = PI * (Radius ** 2) * CylHeight
  CATICkeRelation_var
  spFormula = spRelFact-&gt;<strong>CreateFormula</strong> (&quot;VolumeFormula&quot;,
                                     &quot;&quot;,
                                     &quot;&quot;, 
                                     spVolume, 
                                     &amp;pParamList,
                                     &quot;PI*(a2**2)*a3&quot;,
                                     NULL_var,
                                     CATCke::False);

  if (NULL_var != spFormula)
  {
    cout &lt;&lt; &quot;The cylinder volume calculated from VolumeFormula is &quot; ;
    cout &lt;&lt; spVolume-&gt;<strong>Show</strong>().CastToCharPtr() &lt;&lt; endl;
    ...</pre>
		<p>The formula is a created using the <code>CreateFormula</code> method 
		of the <em>CATICkeRelationFactory</em> interface that returns a smart pointer 
		to the <em>CATICkeRelation</em> interface. The arguments of the <code>CreateFormula</code> 
		method are:</p>
		<table class="fill">
			<tr>
				<td><code>VolumeFormula</code></td>
				<td>The formula name</td>
			</tr>
			<tr>
				<td><code>spVolume</code></td>
				<td>The parameter to compute</td>
			</tr>
			<tr>
				<td><code>pParamList</code></td>
				<td>The list of parameters to be used in the formula</td>
			</tr>
			<tr>
				<td><code>PI*(a2**2)*a3</code></td>
				<td>The expression defining the constrained parameter.<br />
				The a<sub>i</sub> notation allows you to specify a relation argument &quot;a&quot; 
				from its rank &quot;i&quot; in the parameter list.<br />
				<code>spVolume</code> is the first parameter appended to the list. 
				It defines <code>a1</code>.<br />
				<code>spRadius</code> is the second parameter appended to the list. 
				It defines <code>a2</code>.<br />
				<code>spHeight</code> is the third parameter appended to the list. 
				It defines <code>a3</code>.</td>
			</tr>
		</table>
		<p>Note that the second and third arguments must be passed as blank strings, 
		that the seventh argument is a smart pointer that must be set to <code>NULL_var</code>, 
		and that the last argument must be set to <code>CATCke::False</code>.</p>
		<p>The volume of the cylinder is automatically computed as soon as the formula 
		is created. The <code>Show</code> method of the <em>CATICkeParm</em> interface 
		retrieves the volume value as a <em>CATUnicodeString</em> instance that must 
		be cast to a char * using the <code>CastToCharPtr</code> method to be displayed 
		using <code>cout</code>. This value is expressed using the units specified 
		in your CATIA settings (Tools-&gt;Options-&gt;General-&gt;Units). 
		For example, if the volume unit defined in your settings is the cubic inch, 
		you should see:</p>
		<pre>The cylinder volume calculated from VolumeFormula is 4.793e+006in3</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Modifying a Parameter Value and Checking the Formula Update</h3>
<p>There are several ways to modify a parameter. In our example, we use the
<code>Valuate</code> method of the <em>CATICkeParm</em> interface and specify a double 
as its arguments.</p>
<pre class="code">  ...
  // Modify the &quot;Radius&quot; value
  double NewRadiusValue = 4.;
  spRadius -&gt; <strong>Valuate</strong>(NewRadiusValue);

  cout &lt;&lt; &quot;New radius value is &quot; ;
  cout &lt;&lt; spRadius-&gt;<strong>Show</strong>().CastToCharPtr() &lt;&lt; endl;
  cout &lt;&lt; &quot;The new cylinder volume calculated from the VolumeFormula is &quot; ;
  cout &lt;&lt; spVolume-&gt;<strong>Show</strong>().CastToCharPtr() &lt;&lt; endl;
  ...</pre>
<p>The <code>Valuate</code> method of the <em>CATICkeParm</em> interface modifies 
the cylinder radius value. The value passed as the argument should always be expressed 
according to the International System of Units (SI). The new radius value is 4 meters. 
The <code>Show</code> method of the <em>CATICkeParm</em> interface retrieves this 
value as a <em>CATUnicodeString</em> instance that must be cast to a char * using 
the <code>CastToCharPtr</code> method to be displayed using <code>cout</code>.</p>
<p>The values returned by the <code>Show</code> method are expressed using the units 
specified in your CATIA settings (Tools-&gt;Options-&gt;General-&gt;Units). 
For example, if the default length unit in your settings is the mm and the default 
volume unit the cubic meter, you should see:</p>
<pre>New radius value is 4000mm

The new cylinder volume calculated from the VolumeFormula is 201.062 m3</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Epilog</h3>
<pre class="code">  ...
  rc = services.<strong>CAALifCloseSession</strong>();
  return rc;
}</pre>
<p>The <code>CAALifCloseSession</code> method of the <em>CAALifServices</em> class 
defined in the CAALifBasis.m module deletes the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating and using parameter 
and relation objects. The <em>CATCkeParmFactory/CATICkeRelationFactory</em> interfaces 
that provide methods to create these objects are implemented by any feature container. 
The first factoriy creates parameters and returns them as <em>CATICkeParm</em> interface 
pointers. A length type parameter is created using a name and a value, while a dimension 
type parameter has a magnitude in addition. This magnitude is retrieved from the 
dictionary of types as a <em>CATICkeMagnitude</em> interface pointer. A formula computes, 
or constrains, a parameter using others. Each parameter is first set as a <em>CATCkeListOf(Parm)</em> 
collection item, and the collection is passed to the formula factory method with 
the parameter to value, and the formula itself. The <code>Valuate</code> method 
of the <em>CATICkeParm</em> interface modifies the parameter values. The formula is 
then automatically updated.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
