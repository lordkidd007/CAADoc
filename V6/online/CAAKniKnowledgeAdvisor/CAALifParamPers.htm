<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Persistent Parameters</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Persistent Parameters</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create and manage persistent parameters, 
		i.e., literals that you can save in a permanent binary form that persists 
		after they are deleted from memory. Later you can load the persistent objects 
		from persistent storage and reconstruct them in memory.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifParametersPersistent Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifParametersPersistent Do</a></li>
					<li><a href="#How">How to Launch CAALifParametersPersistent</a></li>
					<li><a href="#Where">Where to Find the CAALifParametersPersistent 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to create and modify parameters of simple, 
dimension and enumerated types.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifParametersPersistent Use Case</h2>
<p>CAALifParametersPersistent is a use case of the CAALiteralFeatures.edu framework 
that illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifParametersPersistent Do</h3>
<p>The CAALifParametersPersistent use case is divided into five parts:</p>
<ol>
	<li>Creating and managing simple type parameters
		<ol>
			<li>creates four simple type parameters:
				<ul>
					<li>intParam - which is an integer with an initial value of 
						2</li>
					<li>realParam - which is a real with an initial value of 2.3
					</li>
					<li>stringParam - which is a string with an initial value of &quot;Bonjour&quot;</li>
					<li>booleanParam - which is a boolean with an initial value 
						of true (CATCke::True).</li>
				</ul>
			</li>
			<li>displays the name and the value of each simple type parameter.</li>
			<li>modifies each simple type parameter</li>
		</ol>
	</li>
	<li>Creating and managing length and angle parameters
		<ol>
			<li>creates two dimension type parameters:
				<ul>
					<li>lengthParam - which is a length with an initial value of 
						2</li>
					<li>angleParam - which is an angle with an initial value of 
						3.1416</li>
				</ul>
			</li>
			<li>displays the name and value of each dimension type parameter.</li>
		</ol>
	</li>
	<li>Creating and managing magnitude type parameters
		<ol>
			<li>creates one magnitude type parameter
				<ul>
					<li>volumeParam - which is a VOLUME magnitude with an initial 
						value of 20.5</li>
				</ul>
			</li>
			<li>displays the name and the value of volumeParam</li>
			<li>modifies the volumeParam value</li>
		</ol>
	</li>
	<li>Creating and managing enumerated type parameter
		<ol>
			<li>creates the ListOfPeople1 enum parameter.</li>
			<li>modifies it.</li>
		</ol>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifParametersPersistent</h3>
<p>To launch CAALifParametersPersistent, you will need to set up the build time 
environment, then compile CAALifParametersMain along with its prerequisites, set 
up the run time environment, and then execute the use case which main program is 
CAALifParametersMain. This program encompasses several use cases [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifParametersMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifParametersPersistent Code</h3>
<p>The CAALifParametersPersistent use case is made of the CAALifParametersPersistent.cpp 
file located in the CAALifParameters.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifParameters.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The main program related to this use case is CAALifParametersMain.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>CAALifParametersPersistent is divided into five steps:</p>
<ol>
	<li><a href="#Step2">Creating and Managing Simple Type Parameters</a></li>
	<li><a href="#Step3">Creating and Managing Dimension Type Parameters</a></li>
	<li><a href="#Step4">Creating and Managing Magnitude Type Parameters</a></li>
	<li><a href="#Step5">Creating and Managing Enumerated Type Parameters</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating and Managing Simple Type Parameters</h3>
<p>Simple type parameters are integers, reals, strings or booleans.</p>
<ol>
	<li><em>Creating simple type parameters</em>
		<p>To create a simple type parameter, you should use one of the methods 
		below:</p>
		<ol>
			<li>CATICkeParmFactory::CreateInteger</li>
			<li>CATICkeParmFactory::CreateReal</li>
			<li>CATICkeParmFactory::CreateString</li>
			<li>CATICkeParmFactory::CreateBoolean</li>
		</ol>
		<p>Each method takes the parameter name as its first argument, the parameter 
		value as its second argument.</p>
		<pre class="code">CATCke::Boolean CAALifParametersPersistent(CATICkeParmFactory_var ispFact)
{
// ------------------------------
// Simple type parameters
// ------------------------------

   // Create a real
   // Parameter name is &quot;realParam&quot;, parameter value is 2.3
   CATICkeParm_var spPp2 = ispFact-&gt;CreateReal (&quot;realParam&quot;,2.3);
   ...
   // Create a boolean
   // Parameter name is &quot;booleanParam&quot;, parameter value is CATCke::True
   CATICkeParm_var spPp4 = ispFact-&gt;CreateBoolean (&quot;booleanParam&quot;,CATCke::True);</pre>
		<p>If the second argument of CATICkeParmFactory::CreateInteger is passed 
		as a real, its is converted to an integer. Likewise, if the second argument 
		of CATICkeParmFactory::CreateReal is passed as an integer, the method converts 
		it to a real.</p>
		<p>The value of a boolean is either CATCke::True or CATCke::False.</p>
	</li>
	<li><em>Retrieving and displaying parameter values</em></li>
	<li>There are three methods to retrieve and display a parameter value whatever 
		its type:
		<ol>
			<li>CATICkeInst::Show which displays the end user view of the parameter 
				value (i.e the parameter value with the units and settings specified 
				in the Tools-&gt;Options...-&gt;General Units tab).</li>
			<li>CATICkeInst::AsType which:
				<ul>
					<li>either returns the parameter value when the parameter is 
						of the appropriate type </li>
					<li>or converts the parameter value to a value with the type 
						expected.
						<ul>
							<li>CATICkeInst::AsInteger converts:
								<ul>
									<li>a real to an integer </li>
									<li>a boolean to 0 or 1 </li>
									<li>an enum to its rank </li>
								</ul>
							</li>
							<li>CATICkeInst::AsReal converts
								<ul>
									<li>an integer to a real </li>
									<li>a boolean to 0 or 1 </li>
									<li>an enum to its rank </li>
								</ul>
							</li>
						</ul>
					</li>
				</ul>
			</li>
			<li>CATIParmAsStored::ValueStored which returns the value in model units 
				[<a href="#References">3</a>].</li>
		</ol>
		<p>Here is a code extract illustrating how to use these methods.</p>
		<pre class="code">...
// Display the name and value of realParam
cout &lt;&lt; spPp2-&gt;Name().CastToCharPtr() &lt;&lt; &quot; value is: &quot; &lt;&lt; endl;
cout &lt;&lt; spPp2-&gt;Show ().CastToCharPtr()&lt;&lt; &quot; (with CATICkeParm::Show)&quot; &lt;&lt; endl ;
cout &lt;&lt; spPp2-&gt;Value()-&gt;AsReal ()   &lt;&lt; &quot; (with CATICkeInst::AsReal)&quot; &lt;&lt; endl;</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating and Managing Dimension Type Parameters</h3>
<ol>
	<li><em>Creating length and angle type parameters</em>
		<p>They are created by the following methods:</p>
		<ol>
			<li>CATICkeParmFactory::CreateLength</li>
			<li>CATICkeParmFactory::CreateAngle</li>
		</ol>
		<p>The value passed as the second argument should be specified in MKS units, 
		i.e, in meters for a length type parameter and in radians for an angle type 
		parameters.</p>
		<pre class="code">...
// ------------------------------------------------
// Dimension type parameters (Length and Angle) 
// ------------------------------------------------
 
  // Create and display a Length type parameter
  // Parameter name is &quot;lengthParam&quot;, parameter value is 2
  CATICkeParm_var spPp5 = ispFact-&gt;CreateLength (&quot;lengthParam&quot;,2);
  ...
  
  // Create and display an Angle type parameter
  // Parameter name is &quot;angleParam&quot;, parameter value is 3.1416
  CATICkeParm_var spPp6 = ispFact-&gt;CreateAngle (&quot;angleParam&quot;,3.1416);
  ...
</pre>
	</li>
	<li><em>Retrieving Parameter Values</em>
		<p>The portion of code below</p>
		<pre class="code">...
// Display the name and value of lengthParam
cout &lt;&lt; spPp5-&gt;Name().CastToCharPtr() &lt;&lt; &quot; value is: &quot; &lt;&lt; endl;
cout &lt;&lt; spPp5-&gt;Show ().CastToCharPtr() &lt;&lt; &quot; (with CATICkeParm::Show)&quot; &lt;&lt; endl ;
cout &lt;&lt; spPp5-&gt;Value()-&gt;AsReal () &lt;&lt; &quot; (with CATICkeInst::AsReal)&quot; &lt;&lt; endl;

CATIParmAsStored_var spPps5 = spPp5;
cout &lt;&lt; spPps5-&gt;ValueStored() ;
cout &lt;&lt; &quot; (with CATIParmAsStored::ValueStored (in mm)) &quot; &lt;&lt; endl;</pre>
		<p>displays in the standard output:</p>
		<pre>lengthParam value is:
2 (with CATICkeParm::Show)
2.0 (with CATICkeInst::AsReal)</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating and Managing Magnitude Type Parameters</h3>
<p>Dimension other than lengths and angles are created by using the CATICkeParmFactory::CreateDimension 
method.</p>
<p>To create a magnitude type parameter:</p>
<ul>
	<li>you must specify a magnitude as the first argument of the CATICkeParmFactory::CreateDimension 
		method</li>
	<li>use the CATIParmDictionary::FindMagnitude method to get this magnitude</li>
	<li>use the CATCkeGlobalFunctions::GetParmDictionary method to retrieve the 
		CATIParmDictionary.</li>
</ul>
<pre class="code">...
// ------------------------------
// Magnitude type parameters
// ------------------------------

CATICkeParm_var
  spPp7 = ispFact-&gt;CreateDimension(
CATCkeGlobalFunctions::GetParmDictionary()-&gt;FindMagnitude(&quot;VOLUME&quot;),
                                                 &quot;volumeParam&quot;,20.5);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating and Managing Enumerated Type Parameters</h3>
<p>An enumerated type is a user-defined type consisting of a set of named constants 
called enumerators. By default, the first enumerator has a value of 1, and each 
successive enumerator is one larger than the value of the previous one.</p>
<p>Here are the steps required to create then modify an enumerated type parameter:</p>
<ol>
	<li><em>Create the list of objects making up the enumerated type parameter</em>
		<p>In the example above, we create the ListOfPeople enum type which defines 
		the list of strings below:<br />
		<code>enum ListOfPeople {John, Emmanuel, Pierre, Frederic}</code></p>
		<pre class="code">...
// ------------------------------
// Enum type parameters
// ------------------------------

   //  Create the list of items making up the enum
   CATListOfCATUnicodeString pLst;
   pLst.Append(&quot;John&quot;);
   pLst.Append(&quot;Emmanuel&quot;);
   pLst.Append(&quot;Pierre&quot;);
   pLst.Append(&quot;Frederic&quot;);
</pre>
	</li>
	<li><em>Create the enumerated type</em>
		<p>You must use CATICkeParmFactory::CreateEnumereType which takes as its 
		first argument the name of the parameter and as its second argument the 
		object list</p>
		<pre class="code">...
// Create the enumerated type
CATIEnumere_var 
   spTypeEnumere = ispFact-&gt;CreateEnumereType(&quot;ListOfPeople&quot;,pLst);  </pre>
	</li>
	<li><em>Create the enumerated object itself</em>
		<p>You must use the CATICkeParmFactory::CreateEnumere method which takes 
		as its third argument the object (from the list) to be assigned to the enum 
		parameter. </p>
		<pre class="code">...
// Create the object of type &quot;ListOfPeople&quot; 
//     ListOfPeople1 is the object name
//     Pierre is the value assigned to the enum at creation
CATICkeParm_var spPp8 = ispFact-&gt;CreateEnumere (spTypeEnumere,
                                               &quot;ListOfPeople1&quot;,&quot;Pierre&quot;);
cout &lt;&lt; spPp8-&gt;Value()-&gt;AsInteger () &lt;&lt; endl; // Returns 3</pre>
		<p>Note that the CATICkeInst::AsInteger method returns 3, i.e. the rank 
		of &quot;Pierre&quot; in the enumerated list.</p>
	</li>
	<li><em>Modify the enum value</em>
		<p>To modify the value of an enum, you must either use:</p>
		<ul>
			<li>The CATICkeParm::Valuate method and specify in the argument the 
				rank of the object to be assigned to the enum. </li>
			<li>The CATICkeParm::Valuate method and specify in the argument the 
				object to be assigned to the enum.</li>
		</ul>
		<pre class="code">...
// Assign the first value of the list to the enum 
spPp8-&gt;Valuate (1);
cout &lt;&lt; spPp8-&gt;Name().CastToCharPtr() ;
cout &lt;&lt; &quot; enum new value is (John): &quot; &lt;&lt; endl;
cout &lt;&lt; spPp8-&gt;Show().CastToCharPtr() &lt;&lt; endl;
cout &lt;&lt; spPp8-&gt;Name().CastToCharPtr() ;
cout &lt;&lt; &quot; enum new value is (Frederic): &quot; &lt;&lt; endl;
// Assign the &quot;frederic&quot; string to the enum
spPp8-&gt;Valuate (&quot;Frederic&quot;);</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To create a parameter you must use the <code>CATICkeParmFactory::CreateType</code> 
appropriate method.</p>
<p>To create a magnitude type parameter:</p>
<ul>
	<li>you must specify a magnitude as the first argument of the CATICkeParmFactory::CreateDimension 
		method</li>
	<li>use the CATIParmDictionary::FindMagnitude method to get this magnitude</li>
	<li>use the CATCkeGlobalFunctions::GetParmDictionary method to retrieve the 
		CATIParmDictionary.</li>
</ul>
<p>To modify a parameter, you must use the CATICkeParm::Valuate method.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifFirstApplication.htm">Getting Started with Knowledge 
		Interfaces Programming</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifUnits.htm">About Units</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
