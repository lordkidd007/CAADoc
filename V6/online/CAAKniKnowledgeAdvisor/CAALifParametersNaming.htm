<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>About Parameters Naming</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>About Parameters Naming</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The purpose of this article is to help you to choose the correct method 
		when you need to manipulate the name of your applicative parameters.</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#Modelisation">Model</a></li>
			<li><a href="#What1">What You See in CATIA and What You Can Do Interactively</a>
				<ul>
					<li><a href="#Fx">In F(x)</a></li>
					<li><a href="#SpecificationTree">In the Specification Tree</a></li>
					<li><a href="#ParametersExplorer">In the Parameters Explorer</a></li>
				</ul>
			</li>
			<li><a href="#What2">What to Know when Developing Your Application</a>
				<ul>
					<li><a href="#ParameterCreation">About Parameter Creation</a></li>
					<li><a href="#CATICkeParmServices">About the CATICkeParm Services 
						Manipulating Parameter Naming</a></li>
					<li><a href="#CATIAlias">About CATIAlias</a></li>
					<li><a href="#InternalRole">Where Else Is the Internal Role 
						Used</a></li>
					<li><a href="#VB">About VB and CATIAParameters</a></li>
					<li><a href="#UDF">About Parameters in User Defined Features</a></li>
				</ul>
			</li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>When you manipulate the parameters <a href="#References">[1]</a> of your object, 
depending on where you watch them in CATIA (editors or specification tree), or depending 
on which API you use in your application, you will have different names. It may 
seem complicated, but it especially offers a richness of treatments. You may want 
to manipulate the basic name of your parameter, or to see its path in the model 
or in a specific context, or you may want to assign it a nickname, etc. The aim 
of this article is to make a status once for all on the parameter naming.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Modelisation"></a>Model</h2>
<p>We distinguish two names for a same parameter:</p>
<ol>
	<li>The internal role</li>
	<li>The variable name</li>
</ol>
<p>The <strong>internal role</strong> is the name given to the parameter at creation. 
If the parameter has been created by an application, generally, it is not modified 
afterwards, because the application can use this internal role to recognize this 
parameter among the others. But it is possible interactively through the Parameters 
Explorer.</p>
<p>The <strong>variable name</strong> is the name given by the user when he explicitly 
renames it in F(x) or in the Parameter's Explorer. In theory, applications don't 
use this variable name.</p>
<p>In the image below, Point.1 has 3 coordinates parameters. X, Y and Z are their
<strong>internal role</strong> assigned at their creation. The first coordinate 
X has been renamed by the end user in Point1_X: it is the <strong>variable name</strong> 
of the parameter.</p>
<p>
<img alt="Part Body" height="206" src="images/CAALifNaming1.gif" width="275"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="What1"></a>What You See in CATIA and What You Can Do 
Interactively</h2>
<h3><a name="Fx"></a>In F(x):</h3>
<ul>
	<li>A parameter is seen with its variable name if it exists and otherwise with 
		its pathname (built on the internal role).</li>
	<li>You can rename a parameter. This action modifies its variable name.</li>
	<li>You can delete its variable name by entering an empty string in the &quot;Name&quot; 
		field. This action re-displays the pathname automatically.</li>
</ul>
<p>
<img alt="Formula Dialog Box" height="422" src="images/CAALifNaming2.gif" width="640"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SpecificationTree"></a>In the Specification Tree</h3>
<p>A parameter is seen with its variable name if it exists and otherwise with its 
internal role.</p>
<h3><a name="ParametersExplorer"></a>In the Parameters Explorer:</h3>
<ul>
	<li>The &quot;Local Name&quot; field displays the internal role.</li>
	<li>The &quot;Name&quot; field displays the variable name.</li>
	<li>The internal role can be modified for user parameters. In the other case, 
		this name can used by the application.</li>
	<li>The variable name can be modified and deleted. In this case the pathname 
		appears automatically.</li>
</ul>
<p>
<img alt="Parameter Explorer" height="526" src="images/CAALifNaming3.gif" width="468"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="What2"></a>What to Know when Developing Your 
Application</h2>
<h3><a name="ParameterCreation"></a>About Parameter Creation</h3>
<p>When you create a parameter with a method of <strong><em>CATICkeParmFactory</em></strong> 
like <em><strong>CreateLength(&quot;H&quot;, 47.477mm)</strong></em>, the first 
argument becomes the internal role of the parameter: here &quot;H&quot;.</p>
<h3><a name="CATICkeParmServices"></a>About the CATICkeParm Services Manipulating 
Parameter Naming</h3>
<dl>
	<dt>CATICkeParm::InternalRole()</dt>
	<dd>Returns the Internal Role of the parameter</dd>
	<dt>CATICkeParm::Role()</dt>
	<dd>In the case of a non user parameter, this method tries to translate in NLS 
	the Internal Role by searching in the NLS file equivalent to the startup catalog 
	of the aggregating feature. In other words, the Role of the parameter H aggregated 
	under a point will be searched as the translation of &quot;H&quot; in the file 
	CATHybridShapeNLS.CATNls equivalent to the CATHybridShape.feat catalog containing 
	the point startup.</dd>
	<dt>CATICkeParm::PathName()</dt>
	<dd>This pathname is NLS. It is the concatenation of the CATICkeParm::Role of 
	the parameter, with the CATIAlias::GetAlias of the parent features of the parameter.</dd>
	<dt>CATICkeParm::Name()</dt>
	<dd>Returns the variable name if it exists otherwise it returns the pathname.</dd>
	<dt>CATICkeParm::Rename</dt>
	<dd>Modifies the variable name.</dd>
	<dt>CATICkeParm::IsNamed()</dt>
	<dd>Indicates if the parameter has a variable name.</dd>
	<dt>CATICkeParm::RelativeName()</dt>
	<dd>Does the same as Name(). But it has a supplementary argument which is the 
	aggregating object where we stop the naming.</dd>
</dl>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CATIAlias"></a>About CATIAlias</h3>
<p>An alias is the name seen by the end user. It can be translated (NLS). For a 
parameter, the method CATIAlias::GetAlias returns the value of CATICkeParm::Name(). 
The method SetAlias calls CATICkeParm::Rename().</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="InternalRole"></a>Where Else Is the Internal Role Used</h3>
<p>The internal role is used in the default implementation of CATIExposeObject. 
The methods CATIExposeObject::GetValue(&quot;H&quot;) and CATIExposeObject::SetValue(&quot;H&quot;, 
...) are scanning parameters with the CATIParmPublisher::VisitChildren service looking 
for the one with the Internal Role &quot;H&quot;.</p>
<p>As a consequence, the method GetAttributeReal(&quot;H&quot;) available in Knowledge 
Expert and based on CATIExposeObject works by comparing its argument to the Internal 
Role. The SetAttributeReal method creates the parameter if it doesn't exist and 
appends it to the object (It has the same effect as interactivly through the Parameters 
Explorer).</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="VB"></a>About VB and CATIAParameters</h3>
<p>In a macro VB, When you create a parameter through the collection of parameters 
CATIAParameters, it is aggregated under the feature on which you get the collection, 
and the name to specify in argument is the <strong>internal role</strong>. </p>
<p>The Item method of CATIAParameters works either on the alias (variable name or 
pathname) or on the RelativeName with the feature in argument. Item is sensitive 
to NLS.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UDF"></a>About Parameters in User Defined Features</h3>
<p>Note the following current limitation: be careful with User Defined Feature (UDF) 
because they have a particular behavior. when you publish a parameter embedded into 
a UDF, its variable name is put into its internal role, and the variable name is 
then deleted (CATICkeParm::Rename(&quot;&quot;)). The &quot;Name&quot; field accessible 
in the &quot;Parameters&quot; tab of a UDF is the internal role.</p>
<p>Before the publication of the parameter Point1_X</p>
<p>
<img alt="User Feature Definition Dialog Box" height="282" src="images/CAALifNaming4.gif" width="410"/>
</p>
<p>After the publication, by checking the button &quot;Published&quot;.</p>
<p>
<img alt="User Feature Definition Dialog Box" height="262" src="images/CAALifNaming5.gif" width="415"/></p>
<p>As you can see in the Parameters Explorer, the &quot;Name&quot; field displays 
the pathname and the variable name has been copied in the internal role.</p>
<p>
<img alt="Parameter Explorer" height="469" src="images/CAALifNaming6.gif" width="457"/></p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAALifOverview.htm">Knowledge Interfaces Overview</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mai 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
