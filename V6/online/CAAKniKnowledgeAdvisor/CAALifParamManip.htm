<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Manipulators</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Manipulators</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to associate a manipulator with a literal.
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Reminder">Reminder About Parameter Edition</a></li>
			<li><a href="#UseCase">The CAALifParametersMani Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifParametersMani Do</a></li>
					<li><a href="#How">How to Launch CAALifParametersMani</a></li>
					<li><a href="#Where">Where to Find the CAALifParametersMani 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn to create a manipulator and specify its value 
range.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Reminder"></a>Reminder about Parameter Edition</h2>
<p>When editing a parameter, right-clicking the value field displays a contextual 
menu which provides you with commands to help you select the value to be assigned 
to a parameter.<br />
<img alt="Formula Dialog Box" height="422" src="images/KwxManipul.gif" width="656"/></p>
<p>When you modify the parameter value, you use the use the
<img alt="Arrows" height="18" src="images/KwxSpinner.gif" width="17"/> arrows to 
increment or decrement the amount to be specified. This object which appears to 
the end user as up and down arrows is called a <em>spinner</em>. The object which 
describes how the spinner behaves is called a <em>manipulator</em>.</p>
<p>You can describe a manipulator as an object which has bounds, which increments 
or decrements its value by a certain number of the appropriate units etc., but a 
manipulator is only meaningful when applied to a parameter.</p>
<p>The manipulator dictates the lower and upper bounds of the parameter value (Range 
command in the contextual menu), the number of steps to be memorized by the system 
when you add a new step from the Change Step command or a list of authorized values 
for multiple-value parameters.</p>
<p>Other data related to parameters (tolerance, measure and comments) are not controlled 
by manipulators.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifParametersMani Use Case</h2>
<p>CAALifParametersMani is a use case of the CAALiteralFeatures.edu framework that 
illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifParametersMani Do</h3>
<p>The CAALifParametersMani sample:</p>
<ul>
	<li>Creates a manipulator</li>
	<li>Specifies its value range</li>
	<li>Creates a parameter</li>
	<li>Associates the manipulator with the parameter.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifParametersMani</h3>
<p>To launch CAALifParametersMani, you will need to set up the build time environment, 
then compile CAALifParametersMani along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifParametersMani Code</h3>
<p>The CAALifParametersMani use case is located in:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifParameters.m\</code></p>
<p>where <code>InstallRootFolder </code>[<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CAALifParametersMani is in the CAALifParametersMani.cpp file. The main program 
related to this file is CAALifParametersMain.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The CAALifParametersMani use case is made up of eight steps:</p>
<ol>
	<li><a href="#Step1">Creating a Manipulator</a></li>
	<li><a href="#Step2">Making a Manipulator Persistent</a></li>
	<li><a href="#Step3">Specifying the Manipulator Range</a></li>
	<li><a href="#Step4">Creating a Length Type Parameter</a></li>
	<li><a href="#Step5">Assigning a Value to the Length Type Parameter</a></li>
	<li><a href="#Step6">Testing the Assigned Value</a></li>
	<li><a href="#Step7">Testing Another Value</a></li>
	<li><a href="#Step8">Assigning Other Values</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a Manipulator</h3>
<pre class="code">// Create a manipulator
CATICkeParmFactory_var spFact = cont;
CATIParmManipulator_var spManip = spFact-&gt;CreateParmManipulator ();</pre>
<p>A manipulator is created by using the CATICkeParmFactory::CreateParmManipulator 
method which returns a CATIParmManipulator.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Making a Manipulator Persistent</h3>
<pre class="code"><strong>Code to Provide</strong></pre>
<p>A manipulator is not persistent. In a global application, you have to create 
it the first time you enter the editor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Specifying the Manipulator Range</h3>
<pre class="code">// Specify the manipulator range 
spManip-&gt;SetAccurateRange (10,1,20,2);</pre>
<p>The lower and upper bounds of the manipulator are specified.</p>
<p>The CATIParmManipulator::SetAccurateRange takes as its arguments:</p>
<ol>
	<li>The lower bound of the value range (10)</li>
	<li>A number which specifies whether the lower bound can be included in the 
		parameter value range:
		<ol>
			<li>0, when no minimum is defined</li>
			<li>1, when the lower bound can be one of the value of the defined range. 
				This is the value specified in our example.</li>
			<li>2, when the lower bound is to be excluded from the parameter value 
				range.</li>
		</ol>
	</li>
	<li>The upper bound of the value range (20)</li>
	<li>A number which specifies whether the lower bound can be included in the 
		parameter value range:
		<ol>
			<li>0, when no maximum is defined</li>
			<li>1, when the upper bound can be one of the value of the defined range</li>
			<li>2, when the upper bound is to be excluded from the parameter value 
				range. This is the value specified in our example.</li>
		</ol>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating a Length Type Parameter</h3>
<p>The &quot;lengthParam&quot; length type parameter is created [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Assigning a Value to the Length Type Parameter</h3>
<pre class="code">...
s-&gt;ValuateStored (15);
...</pre>
<p>The &quot;lengthParam&quot; parameter is assigned a value in model unit. Let's 
remind you that the model unit for length is the mm.</p>
<p>This means that the parameter value is 15 mm.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Testing the Assigned Value</h3>
<pre class="code"><strong>Code to Provide</strong></pre>
<p>A test is performed to determine whether the value 10 is authorized. Normally, 
it should be. 10 is the lower bound but the lower bound has been specified as a 
possible value. The value returned by the CATIParmManipulator::TestValue method 
is described by the enum below:</p>
<pre class="code">enum TestRC
{
  Ok =0,
  MinReached =1,
  MaxReached =2,
  NotInEnum =3,    // only for enumerated type
  NotAuthorized =4 // value type is wrong
};</pre>
<p>0 is returned.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Testing Another Value</h3>
<p>Another test is performed to determine whether the value 21 is authorized. Normally, 
it should not be as 21 is beyond the upper bound. The value returned by CATIParmManipulator::TestValue 
is 2 indicating that the upper bound has been overtaken.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Assigning Other Values</h3>
<p>Testing a value does not mean that the value is applied to the parameter. Now, 
the value 10 is assigned to &quot;lengthParam&quot;. Displaying the actual parameter 
value gives 10.</p>
<p>The value 20 is assigned to &quot;lengthParam&quot;. Displaying the actual parameter 
value gives 10, the last authorized value assigned to the parameter.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>A manipulator allows you to define how the parameter values can be specified 
in terms of bounds, increment/decrement amounts, steps to be memorized. A manipulator 
is to be associated with a parameter.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
