<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Knowledge Interfaces Overview</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Knowledge Interfaces Overview</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The purpose of this article is to explain the benefits of using parameters 
		and relations from a developer standpoint. To keep up with the material 
		discussed in this article, it is better to have a prerequisite knowledge 
		of the parameter, formula and design table principles from an end user point 
		of view. If you are a brand new on these subjects, take a look at the
		<em>Knowledge Advisor User's Guide</em>. It is also absolutely required 
		to dabble with the ObjectSpecsModeler principles.</p>
		<ul>
			<li><a href="#Introduction">Introduction</a></li>
			<li><a href="#Basic">Some Basic Capabilities</a>
				<ul>
					<li><a href="#Accessing">Accessing 
						the Feature Attributes in <em>F(x)</em></a></li>
					<li><a href="#Adding">Adding Knowledgeware 
						Relations</a></li>
					<li><a href="#Using">Using Specific 
						Editing Capabilities</a></li>
				</ul>
			</li>
			<li><a href="#Benefits">Other Benefits</a>
				<ul>
					<li><a href="#Manipulators">Manipulators</a></li>
					<li><a href="#Event">Event Managing</a></li>
					<li><a href="#UnitMagnitude">Units and Magnitude 
						Management</a></li>
					<li><a href="#UserFunctions">User Functions</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p><em>Parameters</em> are those objects you manipulate when you edit a feature 
in order to display or modify its properties. <em>Relations</em> are objects whereby 
you specify that a parameter is defined with respect to others. As an end user, 
you can create parameters from the &quot;Formulas&quot; dialog box as well as from 
most workbenches.</p>
<p>Parameters are referred to as <em>literals</em>. Parameters and relations as 
well as the services to manage them are all described in the KnowledgeInterfaces 
framework.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Basic"></a>Some Basic Capabilities</h2>
<p>A hole is a mechanical feature which is defined by its type (simple, tapered, 
etc.), its extension (blind, up to last, etc.)and its parameters: its diameter, 
its depth, its threading and some others characteristics depending or not on the 
hole type.</p>
<p>When you edit a hole, you display a panel with the values of the hole characteristics. 
All these characteristics are defined in the CATIA internal code as feature attributes 
(CATISpecAttribute).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Accessing"></a>Accessing the Feature 
Attributes in <em>F(x)</em></h3>
<p>When you click the
<img alt="Formula Icon" height="24" src="images/I_FormulaP2.gif" width="24"/> icon, 
most of the hole characteristics are displayed in the parameter list. To be displayed 
and managed by the &quot;Formulas&quot; dialog box services, the hole feature as 
well as its parameters must fulfill two main conditions edicted by the KnowledgeInterfaces 
framework:</p>
<ul>
	<li>the hole type feature must be &quot;published&quot;, i.e. it must implement 
		the <strong>CATIParmPublisher</strong> interface</li>
	<li>and its attributes must be implemented as parameters provided by the KnowledgeInterfaces 
		framework.</li>
</ul>
<p>In the mechanical modeler, all the features implement CATIParmPublisher from 
the very beginning.</p>
<p>
<img alt="Formula Dioag Box" height="430" src="images/KhwParameters.gif" width="645"/></p>
<p>From <em>F(x)</em>, you can access the values of the hole parameters and modify 
them as well, you can add a formula to these parameters and you are also warned 
when a parameter is constrained by a formula (the value field is grayed out).</p>
<p>If you define your own feature and want to make your feature attributes displayed 
and managed in
<img alt="Formula Icon" height="24" src="images/I_FormulaP2.gif" width="24"/>, 
you must implement your attributes as parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Adding"></a>Adding Knowledgeware Relations</h3>
<p>There is another advantage of implementing attributes as CATICkeParm objects: 
you can constrain a parameter by a rule or use it in a check and benefit from all 
the advantages provided by the knowledgeware products (Knowledge Advisor for example).</p>
<p>
<img alt="Formula Dioag Box" height="422" src="images/KwrConstraints.gif" width="656"/></p>
<p>In the figure above, the hole diameter named PartBody\Hole.1\Diameter is constrained 
by a rule. The value field of the &quot;Edit name or value of the current parameter&quot; 
is grayed out. You are warned by a push button (not simply an icon) that the hole 
diameter is constrained by a relation. You can't modify the hole diameter value. 
Clicking the push button opposite the value field displays the relation edition 
box.</p>
<p>Relations only take CATICkeParm objects as their arguments. Relations are objects 
that implement the CATICkeRelation interface.</p>
<p>You can create your own relations. To do so, you must create the appropriate 
CATICkeRelation object by using one of the methods provided by the CATICkeRelationFactory 
interface. This is explained and exemplified in the Creating and Managing Relations 
article [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Using"></a>Using Specific Editing Capabilities</h3>
<p>Back to our hole example. If the hole diameter is constrained by a rule:</p>
<ul>
	<li>the value field of the &quot;Edit name or value of the current parameter&quot; 
		is grayed out to prevent you from modifying the diameter value</li>
	<li>a push button opposite the value field gives you a clue about the type of 
		relation constraining the diameter (formula, rule, check or design table)</li>
	<li>clicking the push button opposite the value field displays the relation 
		editor.</li>
</ul>
<p>You can find these editing capabilities not only in
<img alt="Formula Icon" height="24" src="images/I_FormulaP2.gif" width="24"/> but 
also in the hole edition box (the dialog box which is displayed when you click the 
hole feature in the geometry area or in the specification tree).</p>
<p>The hole edition box uses the capabilities provided by the CATICkeParamFrame 
interface. These capabilities operate on CATICkeParm objects constrained by CATICkeRelation 
objects.</p>
<table>
	<tr>
		<td>
		<img alt="Parameter Box" height="44" src="images/KwrConstraints0.gif" width="279"/></td>
		<td><em>Portion of the
		<img alt="Formula Icon" height="24" src="images/I_FormulaP2.gif" width="24"/> 
		dialog box which is managed by the LiteralsEditor framework.</em></td>
	</tr>
	<tr>
		<td>
		<img alt="Diameter Box" height="32" src="images/KwrConstraints1.gif" width="229"/></td>
		<td><em>Portion of the Hole edition box managed by the LiteralsEditor framework.</em></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Benefits"></a>Other Benefits</h2>
<p>The other benefits deal with manipulators, event managing, unit and magnitude 
management, and adding user functions.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Manipulators"></a>Manipulators</h3>
<p>When editing a parameter, right-clicking the value field displays a contextual 
menu which provides you with commands to help you select the value to be assigned 
to a parameter.<br />
<img alt="Formula Dialog Box" height="422" src="images/KwxManipul.gif" width="656"/></p>
<p>When you modify the parameter value, you use the use the
<img alt="Arrows" height="18" src="images/KwxSpinner.gif" width="17"/> arrows to 
increment or decrement the amount to be specified. This object which appears to 
the end-user as up and down arrows is called a <em>spinner</em>. The object which 
describes how the spinner behaves is called a <em>manipulator</em>.</p>
<p>You can describe a manipulator as an object which has bounds, which increments 
or decrements its value by a certain number of the appropriate units etc. The manipulator 
dictates the lower and upper bounds of the parameter value (Range command in the 
contextual menu), the number of steps to be memorized by the system when you add 
a new step from the Change Step command or a list of authorized values for multiple-value 
parameters.</p>
<p>A manipulator is a LiteralFeatures capability which can be accessed on CATICkeParm 
objects. For information on how to create a manipulator, see Using Manipulators 
[<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Event"></a>Event Managing</h3>
<p>The KnowledgeInterfaces framework provides you with a number of services whereby 
you can be notified whenever certain types of events occur. These events are:</p>
<ul>
	<li>the parameter value modification or &quot;ChangeValue&quot; event</li>
	<li>the parameter rename</li>
	<li>the modification of the parameter appearance or &quot;ChangeVisu&quot; event
		<ul>
			<li>when the visibility changes (hidden command)</li>
			<li>when the access rights are modified</li>
			<li>when the relation constraining the parameter is either set or unset, 
				activated or deactivated</li>
			<li>when the magnitude current unit changes</li>
		</ul>
	</li>
	<li>the parameter deletion.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UnitMagnitude"></a>Unit and Magnitude Management</h3>
<p>Literals support a large number of units and <em>magnitudes i.e.</em> quantities 
expressed in specific units. Length, Angle and Time are magnitudes for example.</p>
<p>See About Units [<a href="#References">3</a>] for information on the services 
provided to manage units.</p>
<p>Magnitudes are managed through a dictionary, see Using Persistent Parameters 
[<a href="#References">4</a>] for examples illustrating how to use units and magnitudes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UserFunctions"></a>Adding User Functions</h3>
<p>Parameters can be constrained by relations. Within a relation, you can use other 
parameters as well as operators and functions. If the default functions do not suit 
your application needs, you can add new functions. These new functions will be used 
by the end-user from the dictionary.</p>
<p>See Writing a User Function [<a href="#References">5</a>] for more information 
on how to write a user functions.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The KnowledgeInterfaces framework provides you with services to manipulate features 
through their parameters. For those who implement a feature, this framework provides 
the necessary interfaces to implement to publish your feature parameters and integrate 
them to the <em>F(x)</em> capabilities. When your feature characteristics meet the 
LiteralFeatures requirements (they are parameters), you can benefit from additional 
knowledgeware capabilities:</p>
<ul>
	<li>specifications of relations</li>
	<li>manipulators</li>
	<li>editing capabilities</li>
	<li>unit and magnitude management</li>
	<li>user functions.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAALifFormRuleChecks.htm">Creating and Managing Relations</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifParamManip.htm">Using Manipulators</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifUnits.htm">About Units</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAALifUserFunctions.htm">Creating User Functions</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
