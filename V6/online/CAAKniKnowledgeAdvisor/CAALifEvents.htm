<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Subscribing to Events</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Subscribing to Events</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>An event is an object that notifies another that an event has occurred. 
		This article explains how to subscribe to the events supported by the KnowledgeInterfaces 
		framework.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Events">About the KnowledgeInterfaces Framework Events</a></li>
			<li><a href="#UseCase">The CAALifEvents Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifEvents Do</a></li>
					<li><a href="#How">How to Launch CAALifEvents</a></li>
					<li><a href="#Where">Where to Find the CAALifEvents Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This article explains how to subscribe to &quot;change value&quot;, &quot;change 
visu&quot; and &quot;delete&quot; events.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Events"></a>About the KnowledgeInterfaces Framework Events</h2>
<p>The LiteralFeatures platform supports four types of events which are described 
by the CATIParmEvents interface. These events are:</p>
<ol>
	<li>the parameter value modification or &quot; ChangeValue&quot; event (CATIParmEvents::GetChangeValueNotification)</li>
	<li>the parameter rename (CATIParmEvents::GetRenameNotification)</li>
	<li>the modification of the parameter appearance or &quot;Change Visu&quot; 
		event (CATIParmEvents::GetChangeVisuNotification)
		<ul>
			<li>when the visibility changes (hidden command)</li>
			<li>when the access rights are modified</li>
			<li>when the relation constraining the parameter is either set or unset, 
				activated or deactivated</li>
			<li>when the magnitude current unit changes</li>
		</ul>
	</li>
	<li>the parameter deletion (CATIParmEvents::GetDeleteNotification).</li>
</ol>
<p>When designing a literal-based application, if you want to be warned whenever 
a parameter is modified, you must be provided with a feature whose purpose is to 
observe or detect the parameter modifications. This feature must subscribe to the 
events supported by the Knowledge platform.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifEvents Use Case</h2>
<p>CAALifEvents is a use case of the CAALiteralFeatures.edu framework that illustrates 
KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifEvents Do</h3>
<p>This use case:</p>
<ol>
	<li>Creates a length type parameter</li>
	<li>Subscribes to the events occurring on this parameter</li>
	<li>Modifies its value</li>
	<li>Checks that a &quot;change value&quot; notification has been issued</li>
	<li>Modifies its access rights</li>
	<li>Checks that a &quot;visu notification&quot; has been issued</li>
	<li>Deletes the parameter</li>
	<li>Checks that a &quot;delete notification&quot; has been issued</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifEvents</h3>
<p>To launch CAALifEvents, you will need to set up the build time environment, then 
compile CAALifEventsMain along with its prerequisites, set up the run time environment, 
and then execute the use case which main program is CAALifEventsMain [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifEventsMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifEvents Code</h3>
<p>The CAALifEvents use case is located in:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifEvents.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The main program related to this use case is CAALifEventsMain.</p>
<p>An implementation of the CAAILifMyObjectEvents interface is defined in the CAALifMyObjectEventsImpl 
implementation of a C++ object. The interface is defined in the PrivateInterfaces 
folder, the implementation is defined in the CAALifEvents.m module.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Here is the step-by-step description of the program:</p>
<ol>
	<li><a href="#Step1">Retrieving the Knowledge Factory</a></li>
	<li><a href="#Step2">Creating a Length Parameter</a></li>
	<li><a href="#Step3">Specifying the Current Unit of the Length Parameter</a></li>
	<li><a href="#Step4">Creating the &quot;CAAMyObject&quot; </a></li>
	<li><a href="#Step5">Subscribing to the Three Events</a></li>
	<li><a href="#Step6">Modifying the Length Parameter Value</a></li>
	<li><a href="#Step7">Displaying the Number of &quot;change value&quot; Notifications</a></li>
	<li><a href="#Step8">Modifying the Access Rights of the Length Parameter</a></li>
	<li><a href="#Step9">Mofifying the Current Unit of the Length Parameter</a></li>
	<li><a href="#Step10">Displaying the Number of &quot;change visu&quot; Notifications</a></li>
	<li><a href="#Step11">Deleting the Length Parameter</a></li>
	<li><a href="#Step12">Deleting the Event Object</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Knowledge Factory</h3>
<p>The CATICkeParmFactory is retrieved from the 3D shape representation root container. 
For more information on the purpose of this factory, see [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Length Parameter</h3>
<p>A Length type parameter is created. This parameter is assigned a 1m initial value. 
Let's remind you that the value you pass in the argument of a CreateLength method 
is read as an SI unit. This also applies to other literal creation methods. The 
parameter which is created is the one we are going to &quot;observe&quot;. In other 
words its is going to subscribe to the events managed by the KnowledgeInterfaces 
framework.</p>
<pre class="code">CATICkeParm_var spLength = piFact-&gt;CreateLength (&quot;Length&quot;,1);
spLength-&gt;<strong>SetUserAccess</strong>(CATICkeParm::<strong>User</strong>);</pre>
<p>The parameter is declared as &quot;user&quot; in order to be deleted later.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Specifying the Current Unit of the Length Parameter</h3>
<p>The current unit of the &quot;Length&quot; parameter is specified as the first 
item of the list which is displayed in the Tools-&gt;Options-&gt;Units for parameters 
of Length type. In our example, the first unit in the list of units for Length type 
parameter is the mm. Depending on your application settings, you may get a different 
unit when displaying a parameter value. For more information, see [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the &quot;CAAMyObject&quot; object</h3>
<p>The &quot;CAAMyObject&quot; Object is created. The CAALifMyObjectEventsImpl implementation 
provides an implementation of the CAAILifMyObjectEvents interface which is defined 
in the PrivateInterfaces directory.</p>
<p>About the CAAILifMyObjectEvents::Observe method:<br />
This method which is implemented in the CAALifMyObjectEventsImpl.cpp uses the CATEventSubscriber::AddSubscription 
method defined in the System framework.</p>
<pre class="code">virtual CATCallback AddSubscription( CATInterfaceEvents *<em>eventManager</em>,
        CATCallbackEvent <em>event</em>,
        CATSubscriberMethod <em>method</em>,
        char *<em>interfaceID</em>,
        CATSubscriberData <em>data</em> = NULL ) = 0 ;</pre>
<p>Writing the instruction below:</p>
<pre class="code">spSpev-&gt;AddSubscription(spParameterEvents,
              spParameterEvents-&gt;GetChangeValueNotification(),
             (CATSubscriberMethod)&amp;CAAILifMyObjectEvents::IfChangeValue,
              &quot;CAAILifMyObjectEvents&quot;,
            (CATSubscriberData) this);</pre>
<p>means that the parameter the Observe method is applied to calls the service defined 
in the third argument (IfChangeValue) when the event specified in the second argument 
occurs. The CAAILifMyObjectEvents::IfChangeValue method is defined in CAALifMyObjectEventsImpl::Observe 
extension. It just increments a counter and displays a message in the standard output 
whenever the parameter value is modified.</p>
<p>Subscriptions to &quot;delete&quot; and &quot;change visu&quot; events are patterned 
on the same principle.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the &quot;OBJ0&quot; object </h3>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Subscribing to the Three Events</h3>
<p>Subscribe to the three events defined in the CAAILifMyObjectEvents::Observe method 
and implemented in the CAALifMyObjectEventsImpl extension. From this point, all 
the &quot;change value&quot;, &quot;change visu&quot; and &quot;delete&quot; events 
should issue a message and increment the counters defined in the Observe method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Modifying the Length Parameter Value</h3>
<p>The &quot;Length&quot; parameter value is replaced with 30 mm. let's remind you 
that when you use the CATICkeParm::ValuateStored method the value specified in the 
argument is the document default unit (i.e. mm for length parameters). Upon modification 
of the &quot;Length&quot; parameter, the counter which record the &quot;change value&quot; 
events increments. The statements below:</p>
<pre class="code">spStore-&gt;ValuateStored (30);
cout &lt;&lt; &quot;The p1 value is &quot; &lt;&lt; spLength-&gt;Show().CastToCharPtr() &lt;&lt; endl;</pre>
<p>display in the standard output:</p>
<pre class="code">Receiving ChangeValue number 1
The p1 value is 30mm</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Displaying the Number of &quot;change value&quot; Notifications</h3>
<p>The number of &quot;change value&quot; notifications is displayed. As expected, 
1 notification has been recorded.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Modifying the Access Rights of the Length Parameter</h3>
<p>The access rights of the &quot;Length&quot; parameter are modified. A &quot;change 
visu&quot; notification should be issued. The statements below:</p>
<pre class="code">spLength-&gt;SetUserAccess(CATICkeParm::ReadOnly);
cout &lt;&lt; &quot;Number of \&quot;change visu\&quot; notifications (1 is expected) &quot; ;
    cout &lt;&lt; CAALifMyObjectEventsImpl::nbchangevisu &lt;&lt; endl;</pre>
<p>display in the standard output:</p>
<pre class="code">Receiving ChangeVisu number 1
Number of &quot;change visu&quot; notifications (1 is expected) 1</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Mofifying the Current Unit of the Length Parameter</h3>
<p>The current unit of the &quot;Length&quot; parameter is modified. A &quot;change 
visu&quot; notification should be issued. The statements below:</p>
<pre class="code">spMag-&gt;SetCurrentUnit ((*(spMag-&gt;Units()))[2]);
cout &lt;&lt; &quot;The p1 value is &quot; &lt;&lt; spLength-&gt;Show().CastToCharPtr() &lt;&lt; endl;</pre>
<p>display in the standard output:</p>
<pre class="code">Receiving ChangeVisu number 2
The p1 value is 0.03m</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Displaying the Number of &quot;change visu&quot; Notifications</h3>
<p>The number of &quot;change visu&quot; notifications is displayed. As expected, 
2 notifications have been recorded.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Deleting the Length Parameter</h3>
<p>The &quot;Length&quot; parameter is deleted. The statements below:</p>
<pre class="code"><strong>CATIUseEntity</strong> *pUseEntityOnLenghtParam = NULL;
rc = spLength-&gt;QueryInterface(IID_CATIUseEntity , (void**)&amp; pUseEntityOnLenghtParam);
if ( SUCCEEDED(rc) )
{
    rc = <strong>DataCommonProtocolServices</strong>::<strong>Delete</strong>(pUseEntityOnLenghtParam);
    pUseEntityOnLenghtParam-&gt;Release(); pUseEntityOnLenghtParam = NULL ;
    ...
cout &lt;&lt; &quot;Number of \&quot;delete\&quot; notifications (1 is expected) &quot; ;
cout &lt;&lt; CAALifMyObjectEventsImpl::nbdelete &lt;&lt; endl;</pre>
<p>display in the standard output the following messages:</p>
<pre class="code">Receiving Delete number 1
Number of &quot;delete&quot; notifications (1 is expected) 1</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Deleting the Feature Event Object</h3>
<p>The CAAILifMyObjectEvents object is deleted. Note that is strongly recommended 
to delete an event object after all objects it was intended to be applied have been 
deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>Four types of events are supported by the LiteralFeatures platform:</p>
<ol>
	<li>The parameter value modification or &quot; ChangeValue&quot; event </li>
	<li>The parameter rename </li>
	<li>The modification of the parameter appearance or &quot;Change Visu&quot; 
		event</li>
	<li>The parameter delete.</li>
</ol>
<p>When developing an application, subscribing to events requires a feature dedicated 
to the detection of parameter modifications.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td valign="top">[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td valign="top">[2]</td>
		<td><a href="CAALifFirstApplication.htm#Step1">Getting Started with Literal 
		Feature Programming</a></td>
	</tr>
	<tr>
		<td valign="top">[3]</td>
		<td><a href="CAALifUnits.htm">About Units</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td valign="top">Version: <strong>1</strong> [Jan 2000]</td>
		<td valign="top">Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
