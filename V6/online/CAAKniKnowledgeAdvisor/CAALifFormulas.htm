<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Managing Formulas</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Managing Formulas</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create, modify, and display formulas. To 
		keep up with the material presented in this article, it is better if you 
		have a prerequisite knowledge of formulas from an end user point of view. 
		If need be, refer to the <em>Knowledge Advisor User's Guide</em>.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifFormula Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifFormula Do</a></li>
					<li><a href="#How">How to Launch CAALifFormula</a></li>
					<li><a href="#Where">Where to Find the CAALifFormula Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to:</p>
<ul>
	<li>Create and modify a formula</li>
	<li>Test the formula activity, then reactivate a formula after it has been deactivated.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifFormula Use Case</h2>
<p>CAALifFormula is a use case of the CAALiteralFeatures.edu framework that illustrates 
KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifFormula Do</h3>
<p>The CAALifFormula use case:</p>
<ol>
	<li>Creates three parameters of string type:
		<ul>
			<li>ModuleName - with an initial value of CAALifRelations</li>
			<li>ProjectKey - with no initial value specified</li>
			<li>Topic - with no initial value specified</li>
		</ul>
	</li>
	<li>Creates a formula specifying that the ProjectKey parameter value is determined 
		from the six first characters of the ModuleName parameter. To extract this 
		sub-string from ModuleName, we use the Extract function. The extract function 
		is provided by default as a string function in the dictionary which is displayed 
		in the &quot;Formulas&quot; dialog box when you create a formula as an end 
		user. For information on how to use this function, see the <em>Knowledge 
		Advisor Programming Guide</em>.</li>
	<li>Modifies the formula expression. The initial formula ExtractForm:ProjectKey=ModuleName.Extract(0,6) 
		is replaced with ExtractForm:ProjectKey=Topic.Extract(0.5) tests the formula 
		activity. When a formula is modified, it is deactivated. In this step, we 
		check that the formula is deactivated.</li>
	<li>Re-activates the formula.</li>
</ol>
<p><em>Reminder</em></p>
<p>The ExtractForm:ProjectKey=ModuleName.Extract(0,6) notation the one used to display 
a formula in the specification tree. ExtractForm is the formula name, ProjectKey 
is the parameter to be constrained by the formula, ModuleName is the parameter the 
Extract method applied to.</p>
<p>In this article, we use the same notation as in the specification tree.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifFormula</h3>
<p>To launch CAALifFormula, you will need to set up the build time environment, 
then compile CAALifRelationMain along with its prerequisites, set up the run time 
environment, and then execute the use case. This program encompasses two use cases 
[<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifRelationMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifFormula Code</h3>
<p>The CAALifFormula use case is made of CAALifFormula.cpp file located in the CAALifRelations.m 
module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifRelations.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the foler 
where the API CD-ROM is installed.</p>
<p>The main program related to this file is CAALifRelationMain.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>CAALifFormula is divided into seven steps:</p>
<ol>
	<li><a href="#Step1">Creating the Parameters</a></li>
	<li><a href="#Step2">Creating the Parameter List</a></li>
	<li><a href="#Step3">Creating the Formula</a></li>
	<li><a href="#Step4">Displaying the Extracted String</a></li>
	<li><a href="#Step5">Modifying the Formula Expression</a></li>
	<li><a href="#Step6">Testing the Formula Activity</a></li>
	<li><a href="#Step7">(Re)-Activating the Formula</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Parameters</h3>
<p>Three parameters are created [<a href="#References">2</a>] [<a href="#References">3</a>]. 
Note that in a usual application, these parameters are already created. You just 
have to retrieve them and append them within a list.</p>
<pre class="code">...
// -------------------------
// 1 - Create the parameters
// -------------------------

  // Create the &quot;ModuleName&quot; parameter
  // Initial value = &quot;CAALifRelations&quot;
  CATICkeParm_var 
    spString1=spFact-&gt;CreateString(&quot;ModuleName&quot;,&quot;CAALifRelations&quot;);
  
  // Create the &quot;ProjectKey&quot; parameter
  // No initial value specified
  CATICkeParm_var 
    spString2=spFact-&gt;CreateString(&quot;ProjectKey&quot;,&quot;&quot;); 
  
  // Create the &quot;Topic&quot; parameter
  // Initial value is &quot;Formulas&quot;
  CATICkeParm_var 
    spString3=spFact-&gt;CreateString(&quot;Topic&quot;,&quot;Formulas&quot;); 
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Parameter List</h3>
<p>Before creating a formula or any other relation, you must create a parameter 
list containing at least, all the parameters to be used in the formula. The parameter 
to be constrained by the formula and the parameters used as the arguments in the 
formula expression must be appended to the list.</p>
<p>Note that you can create a list with more parameters that required.</p>
<p>Objects can be appended in any order but you should bear in mind that the order 
they are declared in the list (that is their rank) is reused when you create the 
formula.</p>
<pre class="code">...
// -----------------------------
// 2 - Create the parameter list
// -----------------------------

  // Create the parameter list
  CATCkeListOf(Parm) pList;

  // Append ModuleName to the created list
  pList.Append (spString1);  // a1 = &quot;ModuleName&quot;

  // Append ProjectKey to the created list 
  pList.Append (spString2);  // a2 = &quot;ProjectKey&quot; 

  // Append Topic to the created list
  pList.Append (spString3);  // a3 = &quot;Topic&quot;
...</pre>
<p>If you modify the parameter list, pay attention to the relations which rely on 
this parameter list.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Formula</h3>
<p>The CATICkeRelationFactory::CreateFormula method allows you to create a formula. 
The formula created specifies that the ProjectKey parameter equals the first six 
characters of the ModuleName parameter value.</p>
<p><strong><em>About the Extract Method (see the Knowledge Advisor Programming Guide)</em></strong></p>
<p>Extract is to be used as a method applying to ProjectKey. It returns the sub-string 
starting at a given position with a specified length. The first argument of Extract 
is the index of the sub-string first character. The second argument is the sub-string 
length.</p>
<p>The formula which would be displayed ExtractForm:ProjectKey.Extract(0,6) in the 
specification-tree is specified &quot;a1.Extract(0,6)&quot; in the CreateFormula 
method.</p>
<pre class="code">// -------------------------------------------------------------
// 3 - Create the ExtractForm formula which extracts
//     the first six characters from the ModuleName parameter
// -------------------------------------------------------------
CATICkeRelation_var
  spFormula1 = spRelFact-&gt;CreateFormula (&quot;ExtractForm&quot;,
                                                 &quot;&quot;,
                                                 &quot;&quot;,
                                          spString2,
                                              &amp;list,
                                  &quot;a1.Extract(0,6)&quot;,
                                           NULL_var,
                                     CATCke::False);</pre>
<p>Here is the description of the arguments:</p>
<ul>
	<li><em>argument 1:</em> specify the name of the formula to be created (&quot;ExtractForm&quot;)</li>
	<li><em>argument 2:</em> should be a blank string</li>
	<li><em>argument 3:</em> should be a blank string</li>
	<li><em>argument 4:</em> specify the parameter to be constrained (&quot;ProjectKey&quot;)</li>
	<li><em>argument 5: </em>specify the list of parameters to be used in the formula</li>
	<li><em>argument 6:</em> specify the expression defining the constrained parameter.<br />
		The a<sub>i</sub> notation allows you specify a relation argument from its 
		rank in the parameter list.<br />
&quot;ModuleName&quot; is the first parameter appended to the list. It is denoted 
		a1 in the CreateFormula method.</li>
	<li><em>argument 7:</em> should be NULL_var </li>
	<li><em>argument 8:</em> should be CATCke::False.</li>
</ul>
<p>If the syntax of the formula expression is wrong, the CreateFormula method returns 
NULL_var.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Displaying the Extracted String</h3>
<p>The expected value for ProjectKey parameter is CAALif. To check this value, we 
use the CATICkeInst::AsString method.</p>
<pre class="code">...
// -------------------------------------------------------------
// 3 - Retrieving and displaying the new ProjectKey value
// -------------------------------------------------------------
cout &lt;&lt; &quot;The ProjectKey value is: &quot; ;
cout &lt;&lt; (spString2-&gt;Value()-&gt;AsString()).CastToCharPtr() &lt;&lt; endl; 
...</pre>
<p>At run-time, the statements above display in the standard output the message 
below:</p>
<pre>The ProjectKey value is: CAALif</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Modifying the Formula Expression</h3>
<p>The CATICkeRelationExp::Modify method is to be used to modify the expression 
of a formula. Note that modifying a formula deactivates it. If you display the value 
of the constrained parameter before the relation has been reactivated, you don't 
get the new value.</p>
<pre class="code">...
// ------------------------------------------------
// 4 - Modify the formula
//     Replace a1.Extract(0,6) with a3.Extract(0.5)
// ------------------------------------------------
CATICkeRelationExp_var spExpform = spFormula1 ;
spExpform-&gt;Modify(&amp;list,&quot;a3.Extract(0,5)&quot;, NULL_var, CATCke::False);</pre>
<p>Here is the description of the arguments:</p>
<ul>
	<li><em>argument 1: </em>specify the parameter list where the parameters used 
		to specify the formula expression are appended.</li>
	<li><em>argument 2:</em> specify the new formula expression</li>
	<li><em>argument 3:</em> should be NULL_var</li>
	<li><em>argument 4:</em> should be CATCke::False</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Testing the Formula Activity</h3>
<p>A formula which is modified is deactivated. We check that ExtractForm is no longer 
active.</p>
<pre class="code">...
// ------------------------------------------------
// 5 - Test the formula activity
// ------------------------------------------------
cout &lt;&lt; spFormula1-&gt;IsActivated() &lt;&lt; endl;
...
cout &lt;&lt; &quot;The ProjectKey value is: &quot; ;
cout &lt;&lt; (spString2-&gt;Value()-&gt;AsString()).CastToCharPtr() &lt;&lt; endl;</pre>
<p>At run-time, the statements above display in the standard output the messages 
below</p>
<pre>0
The ProjectKey value is: CAALif</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>(Re)-Activating the Formula</h3>
<p>The CATICkeRelation::Activate() method allows you to reactivate a formula which 
has just been modified (this also applies to rules and checks).</p>
<pre class="code">...
// ------------------------------------------------
// 6 - Re-activate the formula
// ------------------------------------------------
spFormula1-&gt;Activate();
cout &lt;&lt; &quot;The ProjectKey value is: &quot; ;
cout &lt;&lt; (spString2-&gt;Value()-&gt;AsString()).CastToCharPtr() &lt;&lt; endl;</pre>
<p>At run time, the statements above display in the standard output the messages 
below:</p>
<pre>The ProjectKey value is: Formu</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The following programming steps are typically required when writing formulas:</p>
<ol>
	<li>Create the parameter list to be passed as the argument 5 of the CATICkeRelationFactory::CreateFormula 
		method</li>
	<li>Create the formula itself. The a<sub>i</sub> notation method relies on the 
		parameter rank in the parameter list.</li>
	<li>If need be, modify the formula by using the CATIRelationExp::Modify method. 
		Modifying a formula deactivates this formula.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifParamVolat.htm">Using Volatile Parameters</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
