<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating User Functions</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating User Functions</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>If the default functions provided in the &quot;Formula&quot;, &quot;Rule&quot; 
		or &quot;Check&quot; editors do not cater for your application needs, you 
		can create new functions. These extra functions called <em>user functions</em> 
		can be used to define operators as well as mathematical operations or measures. 
		When a user function is added to the editor, any end-user can use it within 
		a relation.</p>
		<p>This article illustrates the different pieces of code you have to write 
		to add a user function to your editor.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifUserFunction Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifUserFunction Do</a></li>
					<li><a href="#How">How to Launch CAALifUserFunction</a></li>
					<li><a href="#Where">Where to Find the CAALifUserFunction Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case, you will learn how to create a user function to be added to 
the Knowledge Advisor dictionary.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifUserFunction Use Case</h2>
<p>CAALifUserFunction is a use case of the CAALiteralFeatures.edu framework that 
illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifUserFunction Do</h3>
<p>This use case creates the hypothenuse function. Given X and Y two input arguments, 
the function is defined as follows:</p>
<pre>&quot;CAAHypothenuse = SQRT(X*X+Y*Y)&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifUserFunction</h3>
<p>To launch CAALifUserFunction, you will need to set up the build time environment, 
then compile CAALifUserFunctionsMain along with its prerequisites, set up the run 
time environment, and then execute the use case which main program is CAALifUserFunctionsMain 
[<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifUserFunctionsMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifUserFunction Code</h3>
<p>The CAALifUserFunction use case is made of several classes located in the CAALifUserFunction.m 
and CAALifBasis.m modules of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifUserFunction.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The use case is divided into four parts:</p>
<ol>
	<li>The code portion which defines the function signature. It is provided in 
		the CAALifDicoLibrary.cpp file of the CAALifBasis.m module. This class is 
		an implementation of the CATIAddLibrary interface.</li>
	<li>The code portion which specifies how the user function is computed to generate 
		a result. This part is called the <em>evaluator</em> and it is supplied 
		in the CAALifEval.cpp file of the CAALifBasis.m module.</li>
	<li>The piece of code which loads the library containing the user function. 
		This part is delivered in the CAALifCreateExt.cpp file of the CAALifBasis.m 
		module. It is an extension of the CAALifDicoLibrary class to implement the 
		CATICreateInstance interface.</li>
	<li>The main program which is delivered in the CAALifUserFunctionsMain.cpp of 
		the CAALifUserFunctions.m module. Its purpose is only to check that the 
		function defined in the CAALifDicoLibrary class is valid and can be used 
		in a formula.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The CAALifUserFunction use case is divided into the following steps:</p>
<ol>
	<li><a href="#Step1">Defining the Function Signature</a></li>
	<li><a href="#Step2">Writing the Evaluator</a></li>
	<li><a href="#Step3">Creating a User Function Object</a></li>
	<li><a href="#Step4">Checking the User Function Validity (Main Program)</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Defining the Function Signature</h3>
<p>Actually, to define a user function signature, you must provide an implementation 
of the CATIAddLibrary interface (KnowledgeInterfaces framework). By doing this, 
you define a type that you will have to instantiate later on to finally create your 
user function object. The only method to implement is CATIAddLibrary::Add.</p>
<ol>
	<li>Start by declaring the CATImplementClass macro. The object type to be created 
		(CAALifDicoLibrary) is to be passed as the first argument of the macro.</li>
	<li>Specify that the CAALifDicoLibrary object implements CATIAddLibrary by including 
		the TIE header file as well as the TIE macro. Let's remind you that the 
		TIE_CATIAddLibrary.h header is generated from the <code>TIE_<em>interface</em>.tsrc</code> 
		file. Refer to the System framework documentation for more information.</li>
	<li>Provide the implementation of the CATIAddLibrary::Add method. When declaring 
		a user function signature, use the methods provided by the CATICkeFunctionFactory 
		object retrieved with CATCkeGlobalFunctions::GetFunctionFactory, or by the 
		CATIParmDictionary object retrieved with CATCkeGlobalFunctions::GetParmDictionary.
		<ol>
			<li>CATICkeFunctionFactory::CreateFunction allows you to create a function. 
				You must pass the user function name (&quot;CAAHypothenuse&quot;) 
				as the first argument, the type of the return value as the second 
				argument and the evaluator as the third argument.</li>
			<li>CATICkeFunctionFactory::CreateArg enables you to create an argument.
			</li>
			<li>CATIParmDictionary::Get<em>xxx</em>Type allows you to specify an 
				argument type.</li>
		</ol>
	</li>
	<li>Specify the arguments of the user function. To do this, use the CATICkeSignature::AddArgument 
		which takes as its argument a CATICkeArg object. You retrieve the CATICkeArg 
		object by using the CATICkeFunctionFactory::CreateArg method.
		<p>In our example, the &quot;CAAHypothenuse&quot; function has two input 
		arguments. Output arguments can also be specified. To do so, you must specify 
		a third argument as following:</p>
		<pre class="code">spSign-&gt;AddArgument(
		CATCkeGlobalFunctions::GetFunctionFactory()-&gt;CreateArg(
			&quot;iC&quot;,
			CATCkeGlobalFunctions::GetParmDictionary()-&gt;GetLengthType(),
			CATICkeArg::Out));</pre>
		<p>A user-function which returns the computed value in an output argument 
		cannot be used in a formula.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Writing the Evaluator</h3>
<p>The purpose of the evaluator is to compute the O (result) = SQRT(A*A + B*B) relation. 
The programming steps typically required when writing an evaluator are:</p>
<ol>
	<li>Retrieve the parameters from the argument list passed in the first argument 
		of the evaluator. When the user function has output arguments, you must 
		also get the pointers to the output arguments as the purpose of the evaluator 
		is finally to assign the computed result to the output argument(s). Examples 
		of functions using output arguments are the default:
		<pre><em>point.</em><strong>coord</strong>(<em>coordNumber</em>)
<em>point.</em><strong>coord</strong>(<em>Real1, Real2, Real3</em>)</pre>
		<p>provided in the knowledgeware editors and operating on GSM objects.</p>
	</li>
	<li>Retrieve the input parameter values. To do this, use one of the appropriate 
		CATICkeInst::As<em>xxx</em> method. If any, you must also get the output 
		arguments.</li>
	<li>Write the C++ code allowing the user function to evaluate. Performing the 
		computation is very simple in our example. But you may come across more 
		complicated cases, needing to access the geometric modeler data.</li>
	<li>Assign the computed result either to the function return value or to the 
		output argument. In our example, the user function has no output argument, 
		the computed result is assigned to the return value.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a User Function Object</h3>
<p>The System framework provides you with a service whereby you can create an instance 
of an object adhering to a given interface. To create an object adhering to the 
CATIAddLibrary interface, we extend the code implementing CATIAddLibrary and provide 
in this extension the CATICreateInstance implementation. To implement the CreateInstance 
method, you just have to use the <code>new</code> operator.</p>
<pre class="code">...
CATImplementClass(CAALifCreateExt, CodeExtension, CATBaseUnknown, CAALifDicoLibrary);

#include &lt;TIE_CATICreateInstance.h&gt;
TIE_CATICreateInstance(CAALifCreateExt); 

// Implement CATICreateInstance::CreateInstance
HRESULT __stdcall CAALifCreateExt::CreateInstance (void **ppv)
{
  *ppv = new CAALifDicoLibrary();
  return S_OK;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Checking the User Function Validity (Main Program)</h3>
<p>The purpose of the CAALifUserFunctions.cpp sample is only to check that the user 
function can be used in a formula, i.e. that the expression declaration is correct 
and that the parameter constrained by the formula is properly updated.</p>
<p>Here are the programming steps:</p>
<ol>
	<li>The environment is initialized, then the CATICkeParmFactory/CATICkeRelationFactory 
		are retrieved from the representation container. Refer to [<a href="#References">2</a>] 
		for more information on the purpose of this factory.</li>
	<li>Two parameters of real type are created. These parameters are to be used 
		as input arguments in the user function used in &quot;Formula1&quot;. For 
		information on how to create parameters, see [<a href="#References">3</a>].</li>
	<li>The real type parameter &quot;z&quot; is created. This parameter is to be 
		constrained by &quot;Formula1&quot;.</li>
	<li>The formula created specifies that the &quot;z&quot; parameter equals 2 
		* &quot;CAAHypothenuse(x, y)&quot;. For information on how to create a formula, 
		see [<a href="#References">4</a>].</li>
	<li>The Formula1 syntax is checked. To do this, we use the CATICkeRelation::CanBeEvaluated 
		method. If the method returns 1, the formula evaluates and the resulting 
		value is displayed in the standard output. Otherwise, a message warns you 
		that the formula syntax is wrong.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>To write the code of a user-function, you must:</p>
<ol>
	<li>Specify the function signature: its name, arguments and evaluator. This 
		function signature is defined through a type which is extended to create 
		the user-function object itself.</li>
	<li>Regenerate the Knowledge index file thanks to <tt>CATCkeGenerateIdx</tt></li>
	<li>Write the evaluator declared in the function signature.</li>
	<li>Create an object which has the type of the signature. To do so, you must 
		provide an implementation of the CATICreateInstance interface (System framework).</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifFirstApplication.htm#Step1">Getting Started with Literal 
		Feature Programming</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALifFormRuleChecks.htm">Creating and Managing Relations</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
