<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Managing Relations</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Managing Relations</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create relations such as formulas, rules 
		and checks.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Reminder">A Reminder about Relations</a></li>
			<li><a href="#UseCase">The CAALifRuleCheck Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifRuleCheck Do</a></li>
					<li><a href="#How">How to Launch CAALifRuleCheck</a></li>
					<li><a href="#Where">Where to Find the CAALifRuleCheck Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In these use cases, you will learn how to:</p>
<ul>
	<li>Create a rule and a check</li>
	<li>Retrieve the expression or body of a relation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Reminder"></a>A Reminder about Relations</h2>
<p>There are three types of relations: the formulas, the rules and the checks. Relations 
are created by the appropriate services of the CATICkeRelationFactory object. A 
relation is described by the CATICkeRelation interface which allows you to manage 
the relation activity, hide or make a relation reappear in the specification tree, 
add, remove or replace a parameter in the relation expression. The expression, i.e. 
the body of a relation is described by the CATICkeRelationExp interface. This article 
illustrates how to use very simply the most common services provided by CATICkeRelation 
and CATICkeRelationExp interfaces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifRuleCheck Use Case</h2>
<p>CAALifRuleCheck is a use case of the CAALiteralFeatures.edu framework that illustrates 
KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifRuleCheck Do</h3>
<p>This use case creates a rule and a check and retrieves the expression or body 
of a relation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifRuleCheck</h3>
<p>To launch CAALifRuleCheck, you will need to set up the build time environment, 
then compile CAALifRelationMain along with its prerequisites, set up the run time 
environment, and then execute the use case. This program encompasses two use cases 
[<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifRelationMain <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifRuleCheck Code</h3>
<p>The CAALifRuleCheck use case is made of the CAALifRuleCheck.cpp file located 
in the CAALifRelations.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifRelations.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The main program related to this file is CAALifRelationMain.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>The CAALifRuleCheck is divided into four steps:</p>
<ol>
	<li><a href="#Step1">Creating a Rule</a></li>
	<li><a href="#Step2">Displaying the Rule Body</a></li>
	<li><a href="#Step3">Checking a Rule</a></li>
	<li><a href="#Step4">Creating a Check</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a Rule</h3>
<ol>
	<li>The parameters required for the purpose of the rule are created as well 
		as the parameter list which is to be passed as the argument 5 of the creation 
		method. If need be, refer to the explanations given above for the formula 
		sample.</li>
	<li>The &quot;rel1&quot; rule is created.
		<pre class="code">// Create a rule
  CATICkeRelation_var 
    spRule1 = spRelFact-&gt;CreateProgram (&quot;rel1&quot;,
                                         &quot;&quot;,
                                         &quot;&quot;,
                                      &amp;list,
       &quot;if (a1 &gt; 9 m) \n {a4 = a1*a2*a3} \n else {a4 = 100*a5*a2}&quot;,
                                NULL_var, CATCke::False);</pre>
		<p>The whole string passed in the argument 5 should be declared as one statement 
		line (you cannot break the string between quotes in your C++ code). To specify 
		a new line in the rule body, use the \n character.</p>
		<p>If the syntax of your rule/check is wrong, the CreateProgram/Check method 
		returns NULL_var, but this only applies to expressions declared with the 
		'a<em>i'</em> notation.</p>
		<p>The rule which would be displayed as:</p>
		<pre>If (Width &gt; 9 m)
  {v=Width*Length*Height}
else
  {v=100*surface*Length}</pre>
		<p>in the rule editor, is specified as <code>&quot;if (a1&gt;9m)\n {a4=a1*a2*a3}\n 
		else {a4 = 100*a5*a2}&quot;</code> in the CreateProgram method.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Displaying the Rule Body</h3>
<p>The CATICkeRelationExp::Body allows you to display the expression making up the 
rule body. You must specify '1' as the first argument value, if you want to re-calculate 
the expression. In an application, it is recommended to recalculate the expression 
since parameter names and values are subject to changes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Checking the Rule</h3>
<p>The &quot;Width&quot; parameter is modified by using the CATICkeParm::Valuate 
method. The first part of the rule is no longer valid and the else statement is 
applied.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating a Check</h3>
<p>The 'Ch1' check is created. The check which would be displayed as: <code>Length &gt; 
Width</code> in the check editor is specified as <code>a2 &gt; a3</code> in the 
CreateCheck method. Replacing the check body with <code>a2 - a3</code> results in 
a syntax error. If you are using the a<em>i</em> notation, NULL_var is returned 
by the CreateCheck method and the following message is displayed in the standard 
output:<br />
&quot;The check cannot be created&quot;</p>
<pre class="code">// Create a check                          
  CATICkeRelation_var 
  check1 = fact-&gt;CreateCheck (&quot;Ch1&quot;,&quot;&quot;,&quot;&quot;,&amp;list,&quot;a2 &gt; a3&quot;,NULL_var,CATCke::False);</pre>
<p>If need be, to manage the rule and check activity after an expression has been 
modified, you can proceed exactly as explained in the formula sample.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The following programming steps are typically required when writing relations:</p>
<ol>
	<li>Create the parameter list to be passed as the argument 5 of the CreateFormula/Program/Check</li>
	<li>Create the formula itself. Using the ai notation is strongly recommended 
		to get rid of NLS problems. If the ai notation method is used and the expression 
		syntax wrong, the creation method returns NULL_var.</li>
	<li>Modify the relation by using the CATIRelationExp::Modify method. Beware 
		that modifying the body of relation deactivates this relation.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
