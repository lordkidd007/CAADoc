<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Programming with Design Tables</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Programming with Design Tables</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAALifDesignTableCreate use case. This use 
		case illustrates how to create a design table from the representation of 
		an external text file, how to specify associations and select a current 
		configuration.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifDesignTableCreate Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifDesignTableCreate Do</a></li>
					<li><a href="#How">How to Launch CAALifDesignTableCreate</a></li>
					<li><a href="#Where">Where to Find the CAALifDesignTableCreate 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to teach you how to create a design table from the 
representation of an external .txt file, do automatic associations as well as one-by-one 
associations and manage configurations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifDesignTableCreate Use Case</h2>
<p>CAALifDesignTableCreate is a use case of the CAALiteralFeatures.edu framework 
that illustrates KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifDesignTableCreate Do</h3>
<p>This use case:</p>
<ul>
	<li>Creates a design table from the representation reference wrapping the external 
		file CAALifDesignTable00.txt below:
		<table class="fill">
			<colgroup align="center" span="6">
			</colgroup>
			<tr>
				<th>Representation1\Column1</th>
				<th>Representation1\Column2</th>
				<th>Representation1\Column3</th>
				<th>Representation1\Column4</th>
				<th>Representation1\Column5</th>
				<th>Representation1\Column6 (deg)</th>
			</tr>
			<tr>
				<td>7</td>
				<td>7.5</td>
				<td>Test design table</td>
				<td>False</td>
				<td>15mm</td>
				<td>10</td>
			</tr>
			<tr>
				<td></td>
				<td>7.29</td>
				<td>I hope it works</td>
				<td>True</td>
				<td>15</td>
				<td>100</td>
			</tr>
		</table>
	</li>
	<li>Does automatic associations as well as one by one (also called manual) associations</li>
	<li>Retrieves and displays the number of associations</li>
	<li>Displays the current configuration</li>
	<li>Modifies the current configuration</li>
	<li>Checks the new parameter values after the configuration has been changed.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifDesignTableCreate</h3>
<p>To launch CAALifDesignTableCreate, you will need to set up the build time environment, 
then compile CALifDesignTableMain along with its prerequisites, set up the run time 
environment, import the briefcase InstallRootDirectory/CAALiteralFeatures.edu/FunctionTests/InputData/CAALiteralFeatures.3dxml 
containing the text file (with possibly a prefix ImportPrefix) and then execute 
the use case which main program is CALifDesignTableMain [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c &quot;CAALifDesignTableMain <em>repository server_name:port_number user password \
         role environment modeler ImportPrefixCAALifDesignTable00</em>&quot;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifDesignTableCreate Code</h3>
<p>The CAALifDesignTableCreate use case is made of single source file named CAALifDesignTableCreate.cpp 
which is called by its CAALifDesignTableMain.cpp main program. Both files are located 
in the CAALifDesignTable.m module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifDesignTable.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Here is the step-by-step description of the program:</p>
<ol>
	<li><a href="#Step1">Prolog</a><br />
		This step which is performed in CAALifDesignTableMain creates a session, 
		retrieves a pointer to be used to create parameters from the representation 
		root container .</li>
	<li><a href="#Step2">Creating the Parameters</a><br />
		Six parameters are created. These parameters are intended to be associated 
		with the values of the design table to be created later on. </li>
	<li><a href="#Step3">Creating the Design Table</a><br />
		The DesignTable.1 design table is created from the ImportPrefix<em>CAALifDesignTable00</em> 
		representation reference.</li>
	<li><a href="#Step4">Doing Associations</a><br />
		Only one parameter (&quot;Representation1\Column1&quot;) is associated automatically. 
		Other associations are done one-by-one.</li>
	<li><a href="#Step5">Retrieving the Current Configuration</a><br />
		The current configuration(0) is displayed by using the CATIDesignTable::ConfigurationRow 
		method</li>
	<li><a href="#Step6">Setting a New Configuration</a><br />
		Configuration1 is declared as active by using the CATIDesignTable::SetCurrentConfiguration 
		method. You can check that the first line of the CAALifDesignTable00.txt 
		file is applied to DesignTable.1</li>
	<li><a href="#Step7">Removing an Association</a><br />
		The association created with Column4 is removed by using the CATIDesignTable::RemoveAssociation 
		method. Configuration2 is now selected as active configuration. The parameter 
		values are displayed again. They all match the second line of the CAALifDesignTable00.txt 
		file except the first and the fourth parameter values.<br />
		When a cell is empty in the input design table or when an association has 
		been removed, the value assigned to the corresponding parameter is the last 
		which has been assigned to it.</li>
	<li><a href="#Step8">Epilog</a><br />
		This step closes the session.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>Before going any further, you must initialize your environment.</p>
<pre class="code">int main (int argc, char** argv)
{
  CAALifServices services;

  // 8 arguments : 7 for the PLM session and 1 for the design table text file representation reference
  if (argc != 9)
    return CAALifKO;

  // Initialize the session for PLM session
  int rc = 0;
  rc = services.<strong>CAALifInitSession</strong> (argv[1], argv[2], argv[3], argv[4], argv[5], argv[6], argv[7]);
  if( rc != CAALifOk )
    return rc;

  // Retrieve the parameter factory 
  CATIContainer* container = NULL;		
  rc = services.<strong>CAALifCreateInstanceContainer</strong>( &amp;container );
  if( rc != CAALifOk )
    return rc;

  CATICkeParmFactory_var spFact = container;
...</pre>
<p>This task consists in:</p>
<ol>
	<li>Creating a session<br />
		This is done by the <code>CAALifInitSession</code> method of the <em>CAALifServices</em> 
		class defined in the CAALifBasis.m module. </li>
	<li>Creating a representation and retrieving its root container through a literal 
		factory interface.<br />
		This is done by the <code>CAALifCreateInstanceContainer</code> method of 
		the <em>CAALifServices</em> class that is also defined in the CAALifBasis.m 
		module and that returns a <em>CATIContainer</em> interface smart pointer, 
		cast into a <em>CATICkeParmFactory/CATICkeRelationFactory</em> smart pointer. 
		There are two important points about these interfaces:
		<ol>
			<li>They are implemented by any feature container </li>
			<li>They provide you with all the literal and relation creation methods.</li>
		</ol>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating Parameters</h3>
<p>Six parameters are created using the <em>CATICkeParmFactory</em> smart pointer 
[<a href="#References">2</a>].</p>
<pre class="code">...
CATICkeParm_var spPp1 = spFact-&gt;CreateInteger (&quot;Column1&quot;,0);
CATICkeParm_var spPp2 = spFact-&gt;CreateReal (&quot;r&quot;,0.0);
CATICkeParm_var spPp3 = spFact-&gt;CreateString (&quot;s&quot;,&quot;&quot;);
CATICkeParm_var spPp4 = spFact-&gt;CreateBoolean (&quot;b&quot;,CATCke::True);
CATICkeParm_var spPp5 = spFact-&gt;CreateLength (&quot;l&quot;,0);
CATICkeParm_var spPp6 = spFact-&gt;CreateAngle (&quot;a&quot;,0);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Design Table</h3>
<p>The DesignTable.1 design table is created using the <em>CATICkeRelationFactory</em> 
smart pointer. The CreateDesignTable method of the <em>CATICkeRelationFactory</em> 
interface is used. This method takes as its first argument the design table name, 
as its second argument a comment and as its third argument the representation reference 
of the external file.</p>
<p>The CreateDesignTable method returns NULL_var when:</p>
<ul>
	<li>the format of the file wrapped by the representation reference, is neither 
		a .txt nor an .xls file</li>
	<li>the Excel&#174; application cannot be accessed.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Doing Associations</h3>
<p>This task is done in three sub steps:</p>
<ol>
	<li>Creating the list of parameters to be associated automatically with the 
		design table values. Only the parameters with the same name in the representation 
		and in the design table can be associated. &quot;Column1&quot; is the only 
		parameter which fulfills this condition.
		<pre class="code">...
CATLISTV(CATBaseUnknown_var) spList;
spList.Append(spPp1);
...</pre>
	</li>
	<li>Creating the automatic associations themselves<br />
		The AutomaticAssociations method of the <em>CATIDesignTable</em> interface 
		is used. This method takes as its first argument the <em>CATIParmPublisher</em> 
		root (the root container is a <em>CATIParmPublisher</em>), as its second 
		argument the NULL_var smart pointer, and as its third argument the list 
		of parameters to be associated with the design table values.
		<pre class="code">...
spDesign-&gt;AutomaticAssociations(iCont, NULL_var, &amp;spList);
...</pre>
		<p>The list passed as the third argument of the AutomaticAssociations method 
		contains only a single item: &quot;Column1&quot;. The spP1 value is automatically 
		added to the design table. If you make the input list longer by adding all 
		the other parameters, the AutomaticAssociations method won't give you a 
		different result as the names of the other parameters differs from the design 
		table column names. If you want to associate a parameter with a column with 
		a different name, you must use the AddAssociation method of the <em>CATIDesignTable</em> 
		interface and perform the associations one-by-one as in the step below.</p>
	</li>
	<li>Creating other Associations One-by-One The <code>AddAssociation</code> method 
		of the <em>CATIDesignTable</em> interface is used. This method takes as 
		its first argument the name of the design table column and as its second 
		argument the parameter to be associated with the design table column.
		<pre class="code">...
CATIDesignTable::DTError assoc_error = spDesign-&gt;AddAssociation(&quot;Representation1\\Column2&quot;, spPp2);
assoc_error = spDesign-&gt;AddAssociation(&quot;Representation1\\Column3&quot;, spPp3);
assoc_error = spDesign-&gt;AddAssociation(&quot;Representation1\\Column4&quot;, spPp4);
assoc_error = spDesign-&gt;AddAssociation(&quot;Representation1\\Column5&quot;, spPp5);

// Wrong association, on purpose
assoc_error = spDesign-&gt;AddAssociation(&quot;<strong>Representation1\\Column16</strong>&quot;, spPp6);
...</pre>
		<p>Here is the list of errors that can be returned by the <code>AddAssociation</code> 
		method: </p>
		<pre class="code">NoError,
ColumnNamesNotUnique,
BadCellType,
BadColumnType,
NotAMagnitude,
BadConfiguration,
ParseSheetError,
ParameterAlreadyAssociated,
ColumnAlreadyAssociated,
ColumnDoesntExist,
MiscellaneousError</pre>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Number of Associations</h3>
<p>The <code>Associations</code> method of the <em>CATIDesignTable</em> interface 
returns the list of associations that have been done.</p>
<pre class="code">...
// 5 is expected
cout &lt;&lt; &quot;The number of associations is: &quot;;
cout &lt;&lt; spDesign-&gt;Associations()-&gt;Size() &lt;&lt; endl;</pre>
<p>The number of associations is displayed. One associations has been done automatically, 
four others have been done one-by-one by using the <code>AddAssociation</code> method 
of the <em>CATIDesignTable</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving the Current Configuration</h3>
<p>After a design table has been created and associations done between the design 
table values and the parameters, there is no current configuration. The design table 
configuration must be specified by using the SetCurrentConfiguration method of the
<em>CATIDesignTable</em> interface. </p>
<p>The ConfigurationRow method of the <em>CATIDesignTable</em> interface returns 
the configuration number. 0 means that there is no active configuration.</p>
<pre class="code">...
// Display the current configuration (0 expected)
cout &lt;&lt; &quot;The current configuration is: &quot; ;
cout &lt;&lt; spDesign-&gt;ConfigurationRow() &lt;&lt; endl;

// Set Configuration1 as current configuration
// and display the active configuration
spDesign-&gt;SetCurrentConfiguration(1); 
cout &lt;&lt; &quot;The new current configuration is: &quot; &lt;&lt; spDesign-&gt;ConfigurationRow() &lt;&lt; endl;
...</pre>
<p>Redisplaying the parameter values allows to check that the first row of the CAALifDesignTable00.txt 
file is applied to DesignTable.1</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Removing an Association</h3>
<p>The association created with Column4 is removed by using the RemoveAssociation 
method of the <em>CATIDesignTable</em> interface. The new number of associations 
is now 4.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Epilog</h3>
<pre class="code">  ...
  rc = services.<strong>CAALifCloseSession</strong>();
  return rc;</pre>
<p>The <code>CAALifCloseSession</code> method of the <em>CAALifServices</em> class 
defined in the CAALifBasis.m module deletes the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The following programming steps are typically required when creating a design 
table: </p>
<ul>
	<li>Retrieve the <em>CATICkeRelationFactory</em> interface.</li>
	<li>Create the design table by using the CreateDesignTable method of <em>CATICkeRelationFactory</em> 
		interface. .</li>
	<li>Do the required associations by using either the AutomaticAssociations or 
		the AddAssociation methods of <em>CATIDesignTable</em>.</li>
	<li>Specify the configuration to be used as active configuration.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
