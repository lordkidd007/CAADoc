<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Parameter Editor(2)</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Parameter Editor(2)</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAALifParamFrame use case. This use case shows 
		how to create a parameter, associate a manipulator with it and provide an 
		editor to modify the value of this parameter. Please note that it is highly 
		recommended for the user to refer the article [<a href="#References">1</a>] 
		for creating Parameter Editor.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifParamFrame Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifParamFrame Do</a></li>
					<li><a href="#How">How to Launch CAALifParamFrame</a></li>
					<li><a href="#Where">Where to Find the CAALifParamFrame Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to create a parameter manipulator and 
build an editor allowing you to modify interactively a parameter value by using 
a spinner. The spinner operates according to the manipulator specifications (range, 
bounds and increment/decrement value).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifParamFrame Use Case</h2>
<p>CAALifParamFrame is a use case of the CAALiteralFeatures.edu framework that illustrates 
KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifParamFrame Do?</h3>
<p>CAALifParamFrame explains how to associate a manipulator with a length type parameter 
and create an editor whereby the parameter can be modified according to an increment/decrement 
amount and within a value range specified in the manipulator definition. The interactive 
tool which is used to increment or decrement the parameter value is a <em>spinner</em>. 
This spinner is an option of the editor object which is created.</p>
<p>In addition, this use case illustrates how to subscribe to a parameter &quot;ChangeValue&quot; 
notification. Each time the spinner is operated, the parameter value changes (except 
if either bound is reached) and an information box displays the new parameter value.</p>
<p>This use case can be worked through in three ways:</p>
<ol>
	<li>The parameter to be edited (&quot;Length1&quot;) is constrained by a formula 
		(&quot;Length1 = Length2 * 2&quot;) which is deactivated. This is the use 
		case which is provided by default.
		<table>
			<tr>
				<td>
				<img alt="Length Box" src="images/CAALifParamFrame_img1.jpg"/></td>
				<td>To the end-user, the parameter is displayed as an editable data. 
				No <em>f(x)</em> push-button is displayed opposite the editor value 
				field.</td>
			</tr>
		</table>
	</li>
	<li>The formula which constrains the parameter to be edited is activated (see 
		[<a href="#References">2</a>] for more information on how to manage the 
		activity of a knowledgeware relation) and you specify that the <em>f(x)</em> 
		push button can be clicked to display a formula editor (this is done by 
		passing the container root object as the first argument of the <code>GetInPanelEdition</code> 
		method of the <em>CATICkeParamFrame</em> interface (see [<a href="#References">3</a>]). 
		Since <code>GetInPanelEdition</code> attaches the associated parameter name 
		as the default label to the frame, hence we do not explicitly associate 
		any label to the frame.<table>
			<tr>
				<td>
				<img alt="Length Box" src="images/CAALifParamFrame_img2.jpg"/></td>
				<td>To the end-user, the value field of the editor is grayed-out, 
				the parameter value is not editable because it is constrained by 
				a formula which is active.</td>
			</tr>
		</table>
	</li>
	<li>The formula which constrains the parameter to be edited is activated and 
		you make the <em>f(x)</em> push inactive by specifying <code>CATCkeRelationButtonDisabled</code> 
		as the <code>CATCkeFrameStyle</code> style in the third argument of the
		<code>GetInPanelEdition</code> method of the <em>CATICkeParamFrame</em> 
		interface (see [<a href="#References">3</a>]).
		<table>
			<tr>
				<td>
				<img alt="Length Box" src="images/CAALifParamFrame_img3.jpg"/></td>
				<td>To the end-user, the value field of the editor is grayed-out, 
				the parameter value is not editable because it is constrained by 
				a formula which is active. The<em> f(x)</em> push button is inactive.</td>
			</tr>
		</table>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifParamFrame</h3>
<p>To launch CAALifParamFrame, you will need to set up the build time environment, 
then compile CAALifParamFrame along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<pre class="code">mkrun -c &quot;CAALifParamFrame <em>repository server_name:port_number user password role environment modeler</em>&quot;</pre>
<p>Once you have displayed the parameter editor as it is delivered by default, you 
can use the down arrow of the spinner to decrement the &quot;Length1&quot; parameter 
value. Here is the information box you get:</p>
<p>
<img alt="Prompt Box" height="119" src="images/CAALifParamFrame3.gif" width="182"/></p>
<p>Note that you cannot use the up arrow of the spinner to increment the parameter 
value as the upper bound of the manipulator has been set to 5mm. Likewise, if you 
keep on decrementing the parameter value, you won't be able to reach a value less 
than 0.5 mm.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifParamFrame Code</h3>
<p>The CAALifParamFrame use case is made of three files : two source files named 
CAALifApplication.cpp and CAALifWindow.cpp, both located in the CAALifParamFrame.m 
module of the CAALiteralFeatures.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CAALifParamFrame.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed, and one resource file named CAALifWindow.CATNls, 
located in:</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\CNext\resources\msgcatalog\</code></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Here are the programming steps to create a parameter editor in a dialog window:</p>
<ol>
	<li><a href="#Step1">Creating an Interactive Application</a><br />
		This step creates an interactive application so that the window which contains 
		the objects to be created can be displayed and run as a standalone application.</li>
	<li><a href="#Step2">Creating the Knowledgeware Features</a><br />
		Two length parameters as well as a formula are created.</li>
	<li><a href="#Step3">Creating the &quot;Length1&quot; Manipulator</a><br />
		The parameter to be associated with a manipulator and displayed in an editor 
		is created.</li>
	<li><a href="#Step4">Creating the &quot;Length1&quot; Parameter Editor</a><br />
		A parameter editor with a spinner is created.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating an Interactive Application</h3>
<p>The interactive application is made of the class <em>CAALifApplication</em> that 
derives from <em>CATInteractiveApplication</em>. In addition to the constructor 
and destructor, this interactive application class redefines two methods of <em>
CATInteractiveApplication</em>:</p>
<ol>
	<li><code>BeginApplication</code>, called just after the application constructor. 
		This method creates the different objects managed by the application, namely 
		here the window to contain the parameters, the formula and the parameter 
		editor. None of these objects can be created without a reference. The preliminary 
		declarations required to create a reference and initialize the environment 
		are also done by this method.</li>
	<li><code>EndApplication</code>, called when the application destruction is 
		requested. This method is dedicated to deallocate objects or close files. 
		Note that the application window declared as the application class data 
		member is automatically deleted. The environment initialization is performed 
		in the <code>BeginApplication</code> method as well as the parameter editor 
		creation, and the <code>EndApplication</code> method removes the created 
		reference and closes the session.</li>
</ol>
<pre class="code">...
void CAALifApplication::BeginApplication()
{
  ...
  CAALifWindow * pMainWindow ;
  pMainWindow = new CAALifWindow(this);
  ...
  pMainWindow-&gt;Build();

  pMainWindow-&gt;SetVisibility(CATDlgShow);
}

int CAALifApplication::EndApplication()
{              
  ...
  CAALifClose ();
  ... 
  return 0;
}
...
CAALifApplication ApplicationInstance(&quot;CAALifAppplicationInstance&quot;);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Knowledgeware Features</h3>
<p>All the objects manipulated in this use case are created in the <code>CAALifWindow::Build</code> 
method. Prior to creating a knowledgeware objects you must initialize the environment 
and retrieve the <em>CATICkeParmFactory</em> smart pointer from the reference root 
container. See [<a href="#References">3</a>] for more information on how to initialize 
the environment.</p>
<ol>
	<li>Creating two length type parameters
		<pre class="code"> ...
   _spParam1 = piParamFact-&gt;<strong>CreateLength</strong>(&quot;Length1&quot;,0);
 ...
    CATICkeParm_var spParam2;
    spParam2 = piParamFact-&gt;<strong>CreateLength</strong>(&quot;Length2&quot;, 2.5/1000);
 ...</pre>
		<p>Let's remind you that the second argument of the <code>CreateLength</code> 
		method must be expressed according to the International System of Units 
		(SI), that is, in meters. The initial value of &quot;Length2&quot; is 2.5mm. 
		See [<a href="#References">4</a>] for more information on how to create 
		parameters.</p>
	</li>
	<li>Creating a formula constraining &quot;Length1&quot;
		<pre class="code">...
   CATCkeListOf(Parm) pParamList;
   if((NULL_var!=_spParam1) &amp;&amp; (NULL_var!=spParam2))
   {
     pParamList.Append (_spParam1);
     pParamList.Append (spParam2);
   }
...
   CATICkeRelation_var spFormula;
   CATICkeRelationFactory_var spRelFact (piParamFact);
   if ((NULL_var!=spRelFact) &amp;&amp; (NULL_var!=_spParam1) &amp;&amp; (pParamList.Size()!=0))
   {
     spFormula= spRelFact-&gt;<strong>CreateFormula</strong> (&quot;Formula1&quot;,
					 &quot;&quot;,
					&quot;&quot;, 
					_spParam1,
					&amp;pParamList,
					&quot;a2*2&quot;,
					NULL_var,
					CATCke::False); 
   }
...</pre>
		<p>See [<a href="#References">5</a>] for information on formulas. The formula 
		which is created specifies that &quot;Length1=Length2 * 2&quot;. Right after 
		the formula is created, the &quot;Length1&quot; value becomes 5 mm.</p>
	</li>
	<li>Deactivate the formula
		<pre class="code">
...
    CATIKweActivable_var hKweActivable= spFormula;
    if(NULL_var!=hKweActivable)
    {
	hKweActivable-&gt;<strong>SetActivationStatus</strong>(0);
    }    
...</pre>
		<p>To display the f(x) pushbutton opposite the value field of the parameter 
		editor, you can comment the statement just above so that &quot;<strong>Formula1</strong>&quot; 
		keeps on being activated.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the &quot;Length1&quot; Manipulator</h3>
<p>The manipulator which is created defines:</p>
<ol>
	<li>a minimum value of 0.5 in model units i.e. in mm. This lower bound can be 
		included in the &quot;Length1&quot; range of possible values. See [<a href="#References">6</a>] 
		for information on units.</li>
	<li>a maximum value of 5.0 mm. This upper bound can be included in the &quot;Length1&quot; 
		value range.</li>
	<li>a increment/decrement amount (step) of 0.5 mm.</li>
</ol>
<pre class="code">  
...
  CATIParmManipulator_var spParmManip;
  if((NULL!=piParamFact) )
  {
     spParmManip = piParamFact-&gt;<strong>CreateParmManipulator</strong>();  
     ...
     _spParam1-&gt;<strong>SetManipulator</strong> (spParmManip);

     spParmManip-&gt;SetAccurateRange (0.5,1,5,1);

     spParmManip-&gt;SetStep (0.5);
  ...</pre>
<p>After it is created, the manipulator is associated with the &quot;Length1&quot; 
parameter. See [<a href="#References">7</a>] for information on manipulators.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the &quot;Length1&quot; Parameter Editor</h3>
<p>A parameter which is created by using any of the relations provided by the
<em>CATICkeRelationFactory</em> factory supports the <em>CATICkeParamFrame</em> 
interface. From this interface you can create a <em>CATDlgFrame</em> object by using 
the <code>GetInPanelEdition</code> method. Since <code>GetInPanelEdition</code> 
attaches the associated parameter name(parameter &quot;Length1&quot; in our case) 
as the default label to the frame , hence we do not explicitly associate any label 
to the frame.</p>
<pre class="code">
...
   CATICkeParamFrame_var spParamFrame1 = _spParam1;
   CATDlgFrame *pFrame1  = NULL;
   pFrame1  = spParamFrame1-&gt;<strong>GetInPanelEdition</strong>(NULL_var, this,
	                                  CATCkeLabel|CATCkeWithSpinner|CATCkeRelationButtonDisabled, &quot;MySpinner&quot;);
...</pre>
<p>What the displayed editor looks like depends on the values passed as the arguments.</p>
<ol>
	<li>the <em>CATIParmPublisher</em> object which is passed as the first argument 
		allows you to plug an editor whenever the parameter is constrained by a 
		relation. This object must be the root of the literals created in your reference.
	</li>
	<li>the second argument refers to the window where the parameter editor is to 
		be created</li>
	<li>the third argument is made up of a list of style identifiers. Refer to the 
		KnowledgeInterfaces framework interface documentation for more information. 
		Note that specifying the <code>CATCkeNoFormula</code> identifier prevents 
		from displaying the formula push button. You can make the <em>f(x)</em> 
		push inactive by specifying <code>CATCkeRelationButtonDisabled</code> .</li>
	<li>the fourth argument is the name of the returned frame (used in the resource 
		file).</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects and interfaces used when creating a parameter 
editor. There are three important points to remember about:</p>
<ol>
	<li>a parameter supports by default the <em>CATICkeParmFrame</em> interface.</li>
	<li>through this interface, you can access to the creation of a parameter editor. 
		The <code>GetInPanelEdition</code> method allows you to create a parameter 
		editor with a specified style.</li>
	<li>depending on whether the parameter is constrained and depending on the editor 
		style, you may display or not a button opposite the editor value field.</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAALifParamEditor.htm">Creating a Parameter Editor</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAALifFirstApplication.htm">Getting Started with Knowledge 
		Interfaces Programming</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAALifParamPers.htm">Using Persistent Parameters</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAALifFormulas.htm">Creating and Managing Formulas</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAALifUnits.htm">About Units</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAALifParamManip.htm">Using Manipulators</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
