<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Knowledge Advisor Glossary</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Knowledge Advisor Glossary</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The purpose of this article is to give you the right definition for each 
		term of the Knowledge vocabulary used in the context of the KnowledgeInterfaces 
		framework.</p>
		<ul>
			<li><a href="#General">General - Product Definition</a></li>
			<li><a href="#Concepts1">Concepts Relying on Application Definition</a></li>
			<li><a href="#CoreObjects">Knowledge Core Objects</a></li>
			<li><a href="#Concepts2">Knowledge Core Additional Concepts</a></li>
			<li><a href="#Where">Where To Find Each Concept in The Code</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="General"></a>General - Product Definiton</h2>
<p><strong>Knowledge Advisor:</strong> Build time product for creating rules, set 
of equations, reactions, loops, lists, etc.</p>
<p><strong>KWA:</strong> Acronym for Knowledge Advisor product. Used for explaining 
that this license if required for certain APIs.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Concepts1"></a>Concepts Relying on Application Definition</h2>
<p><strong>Knowledge Type:</strong> Class of objects that can be used by Knowledgeware 
products.</p>
<blockquote>
	<p>Example: Hole, Length, Point</p>
	<p>This types are created by the applications based on an implementation defined 
	in KnowledgeInterfaces.</p>
</blockquote>
<p><strong>Attribute:</strong> Property of a type. A type can hold some attributes. 
An attribute is defined by a name and a type.</p>
<blockquote>
	<p>Example: a Hole has an attribute named Diameter of type Length.</p>
	<p>Example: a Pad has an attribute named Sketch of type Sketch.</p>
	<p>This is also created by the applications based on an implementation defined 
	in KnowledgeInterfaces.</p>
</blockquote>
<p><strong>Object:</strong> An object that can be used by Knowledgeware products.</p>
<blockquote>
	<p>Example: Hole.1, Pad.1, etc&#8230;</p>
	<p>These are applicative implementations that are seen through a protocol defined 
	in KnowledgeInterfaces.</p>
</blockquote>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CoreObjects"></a>Knowledge Core Objects</h2>
<p><strong>Knowledge dictionary:</strong> A singleton that provides access to all 
the types, and functions, classified in packages.</p>
<p><strong>Knowledge function:</strong> A function that can be used in the Knowledge 
language. It describes its arguments and it knows how to be evaluated.</p>
<blockquote>
	<p>Example: sin (x)</p>
	<p>Example: Message (String, String, &#8230;)</p>
</blockquote>
<p><strong>Magnitude:</strong> A particular type of values for dimensions.</p>
<blockquote>
	<p>Example: Length, Viscosity, etc&#8230;</p>
</blockquote>
<p><strong>Unit: </strong>Associated with a magnitude.</p>
<blockquote>
	<p>Example: mm, m, km, etc&#8230;</p>
</blockquote>
<p><strong>Enumerated Type:</strong> A particular type of values for values that 
take a limited list of possible values.</p>
<blockquote>
	<p>Example: Boolean, Severity</p>
</blockquote>
<p><strong>Literal:</strong> A persistent value, owned by a feature. It can be of 
type Boolean, Integer, Real, String, or of any subtype of dimensions and enumerated 
types that exist in the dictionary.</p>
<p><strong>Volatile value:</strong> A non persistent value. It can be of the same 
type as persistent values.</p>
<p><strong>List feature: </strong>A feature that allows to reference a set of persistent 
objects or literals.</p>
<p><strong>Volatile list :</strong> A non persistent object that allows to reference 
a set of objects or values.</p>
<p><strong>Knowledge expression : </strong>An object (persistent or not) that is 
used to describe with a text an evaluation method and that can be used to perform 
the evaluation on <a href="#Parameter">parameters</a>.</p>
<blockquote>
	<p>Example: expression named exp1 that computes a distance between two points 
	( P1: #In Point, P2:#In Point, L :#Out Length)</p>
	<p>body = &#8220;let x1=0mm let x2=0mm let y1=0mm let y2=0mm let z1=0mm let 
	z2=0mm </p>
	<blockquote>
		<blockquote>
			<p>P1.coord (x1,y1,z1); P2.coord (x2,y2,z2);L=sqrt((x1-x2)2+(y1-y2)2+(z1-z2)2)</p>
		</blockquote>
	</blockquote>
</blockquote>
<p><strong>Knowledge relation :</strong> A persistent feature that describes a valuation 
relationship between persistent <a href="#Parameter">parameters</a>. Any literal 
can be used as output of a relation. Some objects can be used as output of relation 
like a list feature or a geometric datum.</p>
<blockquote>
	<p>Example: a formula between two literals: y=2*x</p>
	<p>Example: a formula between two objects: Pt=centerofgravity(Body)</p>
</blockquote>
<p><strong>Design Table:</strong> A kind of relation that valuates N literals from 
a literal called configuration that belongs to the design table. The evaluation 
method is based on a table (excel or .txt file).</p>
<p><strong>Equivalent Dimension:</strong> A kind of relation that valuates N literals 
from a literal called driving that belongs to the equivalent dimension. Each literal 
in output is affected with the value of the driving literal.</p>
<p><strong>Formula:</strong> A kind of relation that valuates one persistent parameter 
from a set of parameters used as input, based on the Knowledge language.</p>
<p><strong>Rule:</strong> A kind of relation that valuates several persistent parameters 
from a set of parameters used as input, based on the Knowledge language.</p>
<p><strong>Check:</strong> A kind of relation that produces a Boolean diagnosis 
from several persistent parameters used as input, based on the Knowledge language.</p>
<p><strong>Set of Equations:</strong> A kind of relation that valuates several persistent 
parameters from a set of parameters used as input, based on the Knowledge language, 
with an evaluation performed by a mathematical solver.</p>
<p><strong>Optimization constraints:</strong> A kind of relation that expresses 
a constraint between several persistent parameters used as input, based on the Knowledge 
language, to be integrated in the definition of optimization.</p>
<p><strong>Knowledge law:</strong> A mathematical relationship between formal values 
that can be used by features.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Concepts2"></a>Knowledge Core Additional Concepts</h2>
<p><strong><a name="Parameter"></a>Parameter:</strong> A parameter is a variable 
with a name that can be passed as an argument of an expression for its evaluation. 
It can be read or written inside an expression (let&#8217;s talk of its <em>content</em>). 
Several Knowledge objects are parameters (Literal, Volatile value, List feature, 
Volatile List, Geometric datum, Reference to objects).</p>
<p><strong>Persistent parameter:</strong> Only some parameters are persistent in 
the data model (Literal, List feature, Geometric datum, Reference to persistent 
objects). Only those parameters can be used as input or output of a relation because 
a relation creates a link to the objects that it manipulates. Note that only the 
first 3 ones (Literal, List feature and Geometric datum) can be used as outputs.</p>
<p><strong>Reference to object:</strong> It is possible to create a parameter from 
an object to be able to use it in an expression evaluation or in a relation if it 
is persistent. It is used only as an input in the expression or in the relation.</p>
<p><strong>Geometric datum:</strong> This object does not belong to the Knowledge 
Interface framework. It is provided by GSMModel. But it is a persistent parameter.</p>
<p><strong>Knowledge library:</strong> It is a place where an applications can declare 
their own Knowledge types and Knowledge functions. It is a C++ code that we know 
how to trigger.</p>
<p><strong>Knowledge Package: </strong>It is a classification for Knowledge types 
and functions. They are created by applications.</p>
<p><strong>Parameter valuator:</strong> An object that is responsible for valuating 
a parameter. For example a Knowledge relations. But there may exist other applicative 
objects that know how to valuate parameters. They are called parameter valuator.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Where"></a>Where To Find Each Concept in The Code</h2>
<table class="fill">
	<colgroup align="left" span="3">
	</colgroup>
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Concepts</th>
		<th>C++ Interfaces</th>
		<th>Automation Interfaces</th>
		<th>Implementations</th>
		<th>Persistent</th>
	</tr>
	<tr>
		<td>Knowledge type</td>
		<td>CATIType<br />
		CATICkeType<br />
		CATIAttributesDescription</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Attributes</td>
		<td>CATIAttributeInfos</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Object</td>
		<td>CATIExposeObject<br />
		CATICkeFeature</td>
		<td>None</td>
		<td>Applicative</td>
		<td>Yes or No</td>
	</tr>
	<tr>
		<td>Knowledge dictionary</td>
		<td>CATITypeDictionary<br />
		CATIParmDictionary</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Knowledge function</td>
		<td>CATICkeFunction<br />
		CATICkeSignature</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Magnitude</td>
		<td>CATICkeMagnitude<br />
		(CATICkeType)</td>
		<td>None</td>
		<td>1</td>
		<td>Yes in Literals.feat</td>
	</tr>
	<tr>
		<td>Unit</td>
		<td>CATICkeUnit</td>
		<td>CATIAUnit</td>
		<td>1</td>
		<td>Yes in Literals.feat</td>
	</tr>
	<tr>
		<td>Enumerated type</td>
		<td>CATIEnumere</td>
		<td>None</td>
		<td>1</td>
		<td>Yes in Literals.feat</td>
	</tr>
	<tr>
		<td>Literal</td>
		<td>CATICkeParm<br />
		CATIParmEvents<br />
		CATIParmAsStored<br />
		CATIValue</td>
		<td>CATIAParameter<br />
		CATIAIntParam<br />
		CATIAEnumParam<br />
		CATIABoolParam<br />
		CATIADimension</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Volatile value</td>
		<td>CATICkeParm<br />
		CATIParmEvents<br />
		CATIParmAsStored<br />
		CATIValue</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Reference to objects</td>
		<td>CATICkeParm<br />
		CATIParmEvents<br />
		CATIParmAsStored<br />
		CATIValue</td>
		<td>None</td>
		<td>1</td>
		<td>Yes or No</td>
	</tr>
	<tr>
		<td>List feature</td>
		<td>CATIList<br />
		CATICkeParm<br />
		CATIParmEvents<br />
		CATIParmAsStored<br />
		CATIValue</td>
		<td>CATIAList</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Volatile list</td>
		<td>CATIList<br />
		CATICkeParm<br />
		CATIParmEvents<br />
		CATIParmAsStored<br />
		CATIValue</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Knowledge expression</td>
		<td>CATICkeExpression<br />
		CATICkeFunction</td>
		<td>None</td>
		<td>1</td>
		<td>Yes or No</td>
	</tr>
	<tr>
		<td>Knowledge relation</td>
		<td>CATICkeRelation<br />
		CATIRelationEvents<br />
		CATIReplace<br />
		CATIParmValuator</td>
		<td>CATIARelation</td>
		<td>Abstract</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Design table</td>
		<td>CATIDesignTable<br />
		(CATICkeRelation)</td>
		<td>CATIADesignTable<br />
		(CATIARelation)</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Equivalent dimension</td>
		<td>(CATICkeRelation)</td>
		<td>None</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge check</td>
		<td>CATICkeCheck<br />
		(CATICkeRelation)</td>
		<td>CATIACheck<br />
		(CATIARelation)</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge rule</td>
		<td>(CATICkeRelation)</td>
		<td>CATIAProgram<br />
		(CATIARelation)</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge formula</td>
		<td>(CATICkeRelation)</td>
		<td>CATIAFormula<br />
		(CATIARelation)</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge law</td>
		<td>CATICkeLaw<br />
		(CATICkeRelation)</td>
		<td>None</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge set of equations</td>
		<td>CATICkeSetOfEquations<br />
		(CATICkeRelation)</td>
		<td>CATIASetOfEquations</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Optimization constraints</td>
		<td>CATIOptConstraint<br />
		(CATICkeRelation)</td>
		<td>CATIAOptimizationConstraint</td>
		<td>1</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>Knowledge package</td>
		<td>None</td>
		<td>None</td>
		<td>1</td>
		<td>No</td>
	</tr>
	<tr>
		<td>Parameter valuator</td>
		<td>CATIParmValuator</td>
		<td>None</td>
		<td>Applicative</td>
		<td>Yes</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
