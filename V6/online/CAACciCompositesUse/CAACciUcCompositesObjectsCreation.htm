<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Composites Features: Plies and Cores</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Composites Features: Plies and Cores</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the creation of Composites Data Model features. 
		How to create Plies and Cores, how to set the associated required parameters, 
		such as material, contour geometry etc.</p>
		<p>The class CAACciCompositesObjectsCreation first accesses to some geometrical 
		references and composites parameters (like material, direction), second 
		creates plies and cores in Composites Data model </p>
		<ul>
			<li><a href="#Learn">What you will learn with This Use Case</a></li>
			<li><a href="#UseCase">The CAACciCompositesObjectsCreation Use Case</a>
				<ul>
					<li><a href="#What">What Does CAACciCompositesObjectsCreation 
						Do</a></li>
					<li><a href="#How">How to Launch CAACciCompositesObjectsCreation
						</a></li>
					<li><a href="#Where">Where to Find CAACciCompositesObjectsCreation 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will You Learn With This Use Case</h2>
<p>
<img alt="CompositesCreation" height="448" src="images/CAACciCompositesManufacturingWithZone.jpg" width="850"/></p>
<p>This use case illustrate the ability to create in Composites Data Model new Composites 
Features. Composites Features created are plies and Cores, in the sample all the 
required input for plies and cores are created or retrieved in the 3DShape. There 
are set as references(inputs) of the objects definition.</p>
<h2><a name="UseCase"></a>The CAACciCompositesObjectsCreation Use Case</h2>
<p>CAACciCompositesObjectsCreation is a use case of the CAACompositesUseItf.edu 
framework that illustrates usage of component. CATICciRetrieveCompositesData and 
the usage of accessor of Composites feature CATICciStacking, CATICcciSequence, CATICciPliesGroup, 
etc.</p>
<h3><a name="What"></a>What Does CAACciCompositesObjectsCreation Do</h3>
<p>The goal of CAACciCompositesObjectsCreation is to illustrate creation and instantiation 
in the 3DShape of Composites Features.</p>
<h3><a name="How"></a>How to Launch CAACciCompositesObjectsCreation</h3>
<p>To launch CAACciCompositesObjectsCreation, you will need to set up the build 
time environment, then compile CAACciCompositesObjectsCreation.m along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">2</a>].To 
launch the use case execute the command:</p>
<p>mkrun -c &quot;<em>CAACciCompositesObjectsCreation Repository Server User Password 
SecurityCtx PLMType PLMExternalID Version</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose a role to access data</td>
	</tr>
	<tr>
		<th>PLMType </th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code><strong>PLM_ExternalID</strong></code> ofa PLM Reference or 
		PLM Representation Reference be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code><strong>V_version</strong></code> of a PLM Reference or PLM 
		Representation Reference</td>
	</tr>
</table>
<p>(*) The Input Model, loaded in the PROVIDER for CAACciCompositesObjectsCreation 
sample is CAACciCompositesManufacturingWithZone.3dxml file, at the path specified below.[<a href="#References">1</a>]</p>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\InputData\CAACciCompositesManufacturingWithZone.3dxml\</code></p>
<p><code>I</code>where <code>InstallRootFolder</code> [<a href="#References">2</a>] 
is the folder where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Input Models with the following attributes:, which 
needs to be imported to the PROVIDER, you are working with.</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: Rep-CompositesManufacturingWithZone</li>
	<li><strong>Version</strong>: --- </li>
</ul>
<p><strong>Attention</strong>: It is mandatory that you provide a suitable prefix 
to the PLM_ExternalID of the Input Model, while importing a 3D XML file, to ensure 
that data stored in the PROVIDER, is unique.</p>
<p>Please refer to the document [<a href="#References">2</a>] for how to import 
and re-import such a 3D XML file in your PLM repository.</p>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>]. </li>
	<li>The PLMType is necessary to locate the component in database. </li>
	<li>The IID argument define the <strong>value</strong> of the <strong>attribute 
		name of the representation object in database</strong>. (Used to read or 
		create and save.) </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACciCompositesObjectsCreation Code</h3>
<p>The CAACciCompositesObjectsCreation use case is made of main program located 
in the CAACciCompositesObjectsCreation.m module of the CAACompositesUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\CAACciCompositesObjectsCreation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are different logical steps illustrated in CAACciCompositesObjectsCreation 
navigate in the Composites 3DShape. </p>
<ul>
	<li><a href="#Part">Retrieve Part Feature in the 3DShape</a></li>
	<li><a href="#Component">Use the Composites Data Access Component</a></li>
	<li><a href="#Factory">Composites Objects Factory</a></li>
	<li><a href="#PliesGroup">Create a New PlyGroup in Staking</a></li>
	<li><a href="#Ply">Create a New Ply in a PlyGroup</a></li>
	<li><a href="#Core">Create a New Core in a Ply Group</a></li>
	<li><a href="#Update">Update</a></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Part"></a>Retrieve Part Feature in the 3DShape</h3>
<p>We open a 3DShape Part representation , all Composites features are instantiated 
in the part container of the 3D Shape representation.</p>
<p>We first get a smart pointer to <em>CATIMmiPrtContainer</em> from the<em>CATIPLMNavRepReference</em> 
interface tied on the PLMComponent associated to the 3DShape then we get the Mechanical 
Part feature from the <em>CATIMmiMechanicalFeature</em> which allow to retrieve
<em>CATIMmiUsePrtPart</em>interface.</p>
<pre class="code">... 
...  
      CATString  StrPLMType = iArgv[6];
  
      rc = ::CAAOpenPLMComponent(StrPLMType,PLM_ExternalIDValue,V_versionValue,
                                 IID_CATIPLMComponent,(void**)&amp; piPLMComponentOnPart,bag,ExpandAll);
... 
     CATIPsiRepresentationLoadMode_var spLoadModeOn3DShape = piPLMComponentOnPart;
      if (spLoadModeOn3DShape != NULL_var)
        rc = spLoadModeOn3DShape-&gt;ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);

     CATIMmiPrtContainer * piPrtCont = NULL;
     CATIPsiRepRefApplicativeDataAccess * pDataAccess = NULL ; 
     rc = piPLMComponentOnPart-&gt;QueryInterface( IID_CATIPsiRepRefApplicativeDataAccess, (void **) &amp; pDataAccess );
     if (SUCCEEDED(rc) &amp;&amp; NULL != pDataAccess)
      {
          rc = pDataAccess -&gt; RetrieveApplicativeContainer("CATPrtCont",IID_CATIMmiPrtContainer,(void **)&amp;pMmiUsePrtCont);
          pDataAccess -&gt; Release();        pDataAccess = NULL ;
       }

    CATIMmiMechanicalFeature_var spMechFeatOnPart ;
    if (NULL!= pMmiUsePrtCont) {   
      rc = pMmiUsePrtCont-&gt; GetMechanicalPart(spMechFeatOnPart);
      pMmiUsePrtCont-&gt; Release();    pMmiUsePrtCont= NULL;
    }
    CATIMmiUsePrtPart_var spMmiUsePrtPart = spMechFeatOnPart;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Component"></a>Use the Composites Data Access Component</h3>
<p>Data access component is provided by Composites APIis Interfaces<br />
The component is designed to retrieve Composites Features in the 3DShape.</p>
<pre class="code">
... 
CATICciRetrieveCompositesData * pIRetrieveCompositesData = NULL;
    rc = 	<strong>CATCreateCciRetrieveCompositesData</strong> (pIRetrieveCompositesData); 
    if (SUCEEDED(rc) ) {
        ...
        pIRetrieveCompositesData-&gt;Release() ;pIRetrieveCompositesData = NULL;  <span class="comment">// Release of the component after usage </span>
    }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Factory"></a>Composites Objects Factory</h3>
<p>The CATICciCompositesDataFactory APIs interface allows to create composites objects 
3DShape.</p>
<pre class="code">... 
	CATICciCompositesDataFactory_var spICreateCompositesData( pMmiUsePrtCont);
	if( NULL_var == spICreateCompositesData ){ 
		return   1;
	}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="PliesGroup"></a>Create a New PlyGroup in Staking</h3>
<p>CATICciCompositesDataFactory::CreatePliesGroup is used to create new pliesGroup. 
A reference surface, a draping direction and a rosette reference need to be provide 
when it is created. If no pPliesGroup name is provided as input system will automatically 
compute the PliesGroup name. </p>
<pre class="code">... 
    CATBoolean DrapingDir = FALSE;
    <span class="comment"> //----------------- Creation of a Plies Group -----------------</span>
    CATUnicodeString PliesGpName = &quot;&quot;;
    CATICciPliesGroup_var spPliesGroupCaa = 
        spICreateCompositesData -&gt; <strong>CreatePliesGroup</strong>( PliesGpName,spMmiSurface,DrapingDir,spMfRosette );
    if( NULL_var != spPliesGroupCaa ){
        //.....     
    }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Ply"></a>Create a New Ply in a PlyGroup</h3>
<p>CATICciCompositesDataFactory::CreatePly is used to create new Ply . The ply is 
inserted in a given PliesGroup. If no Ply name is provided as input system will 
automatically compute the Ply name. Once created it is required to fill in the needed 
reference objects that are associated to the ply: draping direction, CompositesGeometry 
for the contour, Rosette, Support shell, material reference. </p>
<p>GetCompositesGeometry initializes the data structure for contour definition if 
not not exist on the ply. As well AddContour creates a default Composites contour 
that is filled in later on with the list of curves passed in SetCurves method.</p>
<p>Material and direction has to be parts of the existing corresponding Composites 
parameters list.</p>
<pre class="code">... 
    CATIMmiMechanicalFeature_var spMmiSurface = .... ; 
    CATLISTV(CATIMmiMechanicalFeature_var) spMechFeatListOfCurves= ...;

      <span class="comment">//----------------- Creation of a Ply -----------------</span>
    CATIMmiMechanicalFeature_var spMmiPGroup =  spPliesGroupCaa; 
    CATUnicodeString PlyName = &quot;&quot;;
    CATICciPly_var spPlyCaa = spICreateCompositesData -&gt; <strong>CreatePly</strong>( PlyName,spMmiPGroup );

    if( NULL_var != spPlyCaa ){
        HRESULT  rcPly =  spPlyCaa -&gt; <strong>SetDrapingDirection</strong> (DrapingDir); 
        //.....  

        CATICciCompositesGeometry_var spCompositesGeometry ;
        CATICciContour_var spContour;
         <span class="comment">// Contour ? </span>
        if (NULL_var != spMmiSurface &amp;&amp; spMechFeatListOfCurves.Size() &gt;0 ) 
        {
            rc = spPlyCaa -&gt; <strong>GetCompositesGeometry</strong>(spCompositesGeometry);
            if ( NULL_var != spCompositesGeometry)
            {
                //We create and define it
                rc = spCompositesGeometry -&gt; <strong>AddContour</strong>(spContour);
                if (NULL_var != spContour)
                {
                    //Support Shell .......
                    rc = spContour -&gt; <strong>SetSupportShell</strong> (spMmiSurface);

                    // Contour definition ......
                    rc = spContour -&gt; <strong>SetCurves </strong>(spMechFeatListOfCurves);
                }
            }
        }
        <span class="comment"> //Rosette .......</span>
        if (NULL_var != spMfRosette) { 

            rc = spPlyCaa -&gt; <strong>SetRosette</strong>(spMfRosette);
        }
         <span class="comment">// Material ?</span> 
        if (NULL_var != spMaterialCache) { 
            rc = spPlyCaa -&gt; <strong>SetMaterial</strong>(spMaterialCache);

        }
         <span class="comment">// Direction ? </span>
        if (NULL_var != spDirection) { 
            //We set the direction to the new ply (same as the core)
            rc = spPlyCaa -&gt; <strong>SetDirection</strong>( spDirection );
        }
    } 
 ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Core"></a>Create a New Core in a Ply Group</h3>
<p>CATICciCompositesDataFactory::CreateCore is used to create new Core. The Core 
is inserted in a given PliesGroup. If no Core name is provided as input system will 
automatically compute the Core name. Once created it is required to fill in the 
needed reference objects that are associated to the Core : Solid references, Material, 
Direction and rosette.</p>
<p>Material and direction has to be parts of the existing corresponding Composites 
parameters list.</p>
<pre class="code">... 
    CATIMmiMechanicalFeature_var spMmiSolidForCore= .... ;

     <span class="comment">//----------------- Creation of a Core -----------------</span>
    CATUnicodeString CoreName = &quot;&quot;;
    CATICciCore_var spCoreCaa = spICreateCompositesData -&gt; <strong>CreateCore</strong>( CoreName,spPliesGroupCaa );
    if( NULL_var != spCoreCaa )
    {

         <span class="comment">// Core Solid reference</span> 
        if (NULL_var != spMmiSolidForCore){ 
            rc =  spCoreCaa-&gt; <strong>SetGeometry</strong>( spMmiSolidForCore);
        }

         <span class="comment">//Material ?</span>
        if (NULL_var != spMaterialCache) { 
            rc =  spCoreCaa-&gt; <strong>SetMaterial</strong>(spMaterialCache);

        }

         <span class="comment">//Direction ?</span>
        if (NULL_var != spDirection) { 
            rc =  spCoreCaa-&gt; <strong>SetDirection</strong>( spDirection );
        }

         <span class="comment">//Rosette ? </span>
        if (NULL_var != spMfRosette ) { 
            rc =  spCoreCaa-&gt; <strong>SetRosette</strong>( spMfRosette );
        }
    }
 ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Update"></a>Update</h3>
<p>After Composites object creation in the 3DShape, update the 3DShape [<a href="#References">1</a>].</p>
<pre class="code">... 
    CATIUseEntity *pUseEntity= NULL;
    rc = spMmiUsePrtPart-&gt;QueryInterface(IID_CATIUseEntity , (void**)&amp; pUseEntity);
    if ( SUCCEEDED(rc))	{
        rc = DataCommonProtocolServices::Update(pUseEntity);
        pUseEntity-&gt;Release(); pUseEntity = NULL ;
    }
    if (FAILED(rc))
    {
        <span class="comment">// ... UPDATE ERROR</span>

       RetCode = 1 ;
    }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article has demonstrated the way to enhance composites data model by creating 
new PliesGroup, Plies or Cores, etc.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAFmFeatMod/CAAFmTaOverview.htm">
		Feature Modeler Concept</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a> </td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAACciTaCompositesDesign.htm">About Composites Engineering 
		Design Features</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
