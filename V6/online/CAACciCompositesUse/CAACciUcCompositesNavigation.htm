<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Navigating the Composites Data Model</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Navigating the Composites Data Model </h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the navigation in Composites Data Model, that 
		is to say how to retrieve Composites Features in the 3D Shape</p>
		<p>The class CAACciCompositesNavigation object explains the navigation in 
		Composites Data Model, how to access to the features, how to get Composites 
		informations. </p>
		<ul>
			<li><a href="#Learn">What You Will Learn with This Use Case</a></li>
			<li><a href="#UseCase">The CAACciCompositesNavigationUse Case</a>
				<ul>
					<li><a href="#What">What Does CAACciCompositesNavigation Do</a></li>
					<li><a href="#How">How to Launch CAACciCompositesNavigation</a></li>
					<li><a href="#Where">Where to Find CAACciCompositesNavigationCode</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will You Learn With This Use Case</h2>
<p>This use case illustrates the ability to navigate in Composites Data Model. Composites 
Features are scanned and associated data material, rosette, direction, geometries 
(contours, reference shell, flatenning results) are accessed. </p>
<h2><a name="UseCase"></a>The CAACciCompositesNavigation Use Case</h2>
<p>CAACciCompositesNavigation is a use case of the CAACompositesUseItf.edu framework 
that illustrates usage of component CATICciRetrieveCompositesData and 
the usage of accessor of Composites features CATICciCompositesParameters, CATICciStacking, 
CATICciSequence, CATICciPliesGroup, etc.</p>
<h3><a name="What"></a>What Does CAACciCompositesNavigation Do</h3>
<p>The goal of CAACciCompositesNavigation is to open a 3DShape representation containing 
Composites Objet Representations, to scan Composites Features and to dump Composites 
Features information.</p>
<h3><a name="How"></a>How to Launch CAACciCompositesNavigation</h3>
<p>To launch CAACciCompositesNavigation, you will need to set up the build time 
environment, then compile CAACciCompositesNavigation.m along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">2</a>].To 
launch the use case execute the command:</p>
<p>mkrun -c &quot;<em>CAACciCompositesNavigation Repository Server User Password 
SecurityCtx PLMType PLMExternalID Version</em>&quot;</p>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose a role to access data</td>
	</tr>
	<tr>
		<th>PLMType </th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code><strong>PLM_ExternalID</strong></code> ofa PLM Reference or 
		PLM Representation Reference be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code><strong>V_version</strong></code> of a PLM Reference or PLM 
		Representation Reference</td>
	</tr>
</table>
<p>Differents 3D XML files contain the usable Input Models, at the path specified 
below.[<a href="#References">1</a>] </p>
    <p>Navigation in Composites Data Model&nbsp; is illustrated in this sample on four differents Input Data representation </p>
    <p>They have each to be imported to the PROVIDER to work with </p>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\InputData\CAACciCompositesBasicZoneGroup.3dxml</code>
</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: Rep-00-BasicZoneGroupWithTransition
	</li>
	<li><strong>Version</strong>: --- </li>
</ul>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\InputData\CAACciCompositesParaboloid.3dxml</code>
</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: Rep-01-ParaboloidWithInspectionPoints</li>
	<li><strong>Version</strong>: --- </li>
</ul>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\InputData\CAACciCompositesTrainingPliesFromZones.3dxml</code>
</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: Rep-00-Training-PliesFromZones</li>
	<li><strong>Version</strong>: ---</li>
</ul>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\InputData\CAACciCompositesWithPliesCoreAndSlicing.3dxml</code>
</p>
<ul>
	<li><strong>PLM_ExternalID</strong>: Rep-00-CompositesWithPliesCoreAndSlicing
	</li>
	<li><strong>Version</strong>: --- </li>
</ul>
 
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
    <p><strong>Attention</strong>: It is mandatory that you provide a suitable prefix 
to the PLM_ExternalID of the Input Model, while importing a 3D XML file, to ensure 
that data stored in the PROVIDER, is unique.</p>
<p>Please refer to the document [<a href="#References">2</a>] for how to import 
and re-import such a 3D XML file in your PLM repository.</p>
<ul>
	<li>The <strong>first five</strong> are related to the connection and described 
		in the Basic Batch use case [<a href="#References">2</a>]. </li>
	<li>The PLMType is necessary to locate the component in database. </li>
	<li>The IID argument define the <strong>value</strong> of the <strong>attribute 
		name of the representation object in database</strong>. (Used to read or 
		create and save.) </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACciCompositesNavigation Code</h3>
<p>The CAACciCompositesNavigation use case is made of main program located in the 
CAACciCompositesNavigation.m module of the CAACompositesUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACompositesUseItf.edu\CAACciCompositesNavigation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are different logical steps illustrated in CAACciCompositesNavigation navigate 
in the Composites 3DShape. </p>
<ul>
	<li><a href="#Part">Retrieve Part Feature in the 3DShape</a></li>
	<li><a href="#Component">Use the Composites Data Access Component</a></li>
	<li><a href="#Nav">Navigate in Composites Features in the 3DShape</a>
		<ul>
			<li><a href="#Param">Composites Parameters</a></li>
			<li><a href="#Zones">Zones Group and Zones</a></li>
			<li><a href="#Stacking">Stacking/Plies Group</a></li>
			<li><a href="#PliesAndCore">Plies and Cores</a></li>
		</ul>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Part"></a>Retrieve Part Feature in the 3DShape</h3>
<p>We open a 3DShape Part representation , all Composites features are instantiated 
in the part container of the 3D Shape representation.</p>
<p>We first get a smart pointer to <em>CATIMmiPrtContainer</em> from the <em>CATIPLMNavRepReference</em> 
interface tied on the PLMComponent associated to the 3DShape then we get the Mechanical 
Part feature from the <em>CATIMmiMechanicalFeature</em> which allow to retrieve
<em>CATIMmiUsePrtPart</em>interface.</p>
<pre class="code">
... 
    CATString  StrPLMType = iArgv[6];
  
      rc = ::CAAOpenPLMComponent(StrPLMType,PLM_ExternalIDValue,V_versionValue,
                                 IID_CATIPLMComponent,(void**)&amp; piPLMComponentOnPart,bag,ExpandAll);
... 
     CATIPsiRepresentationLoadMode_var spLoadModeOn3DShape = piPLMComponentOnPart;
	 if (spLoadModeOn3DShape != NULL_var)
        rc = spLoadModeOn3DShape-&gt;ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);

     CATIMmiPrtContainer * piPrtCont = NULL;
     CATIPsiRepRefApplicativeDataAccess * pDataAccess = NULL ; 
     rc = piPLMComponentOnPart-&gt;QueryInterface( IID_CATIPsiRepRefApplicativeDataAccess, (void **) &amp; pDataAccess );
     if (SUCCEEDED(rc) &amp;&amp; NULL != pDataAccess)
      {
          rc = pDataAccess -&gt; RetrieveApplicativeContainer("CATPrtCont",IID_CATIMmiPrtContainer,(void **)&amp;piPrtCont);
          pDataAccess -&gt; Release();        pDataAccess = NULL ;
       }

    CATIMmiMechanicalFeature_var spMechFeatOnPart ;
    if (NULL!= piPrtCont) {   
      rc = piPrtCont -&gt; <strong>GetMechanicalPart</strong>(spMechFeatOnPart);
      piPrtCont -&gt; Release();    piPrtCont = NULL;
    }
    CATIMmiUsePrtPart_var spMmiUsePrtPart = spMechFeatOnPart;
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Component"></a>Use the Composites Data Access Component</h3>
<p>Data access component is provided by Composites APIs Interfaces.<br />
The component is designed to retrieve Composites Features in the 3DShape. </p>
<pre class="code">
... 
    CATICciRetrieveCompositesData * pIRetrieveCompositesData = NULL;
    rc = <strong>CATCreateCciRetrieveCompositesData</strong> (pIRetrieveCompositesData); 
    if (SUCEEDED(rc) ) {
        ...
        pIRetrieveCompositesData-&gt;Release() ;pIRetrieveCompositesData = NULL;  <span class="comment">// Release of the component after usage </span>
    }
...
</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Nav"></a>Navigate in Composites Features in the 3DShape</h3>
<h4><a name="Param"></a>Composites Parameters</h4>
<p>Data access component allow to get Composites Parameters </p>
<p>Composites parameters are the Composites Materials and the predefined Fiber Directions 
used in the Composite Features. <br />
This information Material and Direction is centralized in composites parameter and 
shared by all the Composites Geometrical object of the 3DShape.<br />
This avoids a multiple instantiation of the parameter at Plies / Cut Pieces or Core 
level.</p>
<pre class="code">
... 
    CATICciCompositesParameters_var spCompositesParameters = NULL_var;
    rc = spIComData -&gt; <strong>GetParameters</strong>(spMmiUsePrtPart, spCompositesParameters);
    if (NULL_var!= spCompositesParameters) {
            
        <span class="comment">//Material Cache </span>
       CATListValCATBaseUnknown_var MaterialList;
       int NbOfMatCache = 0 ;
       spCompositesParameters-&gt;<strong>GetNumberOfMaterialCache</strong> (NbOfMatCache);
       for (int jj = 1; jj &lt;= NbOfMatCache; jj ++)
       {
           CATICciMaterialCache_var spMatCache; 
           spCompositesParameters-&gt; <strong>GetMaterialCache </strong>( jj,spMatCache); 
           ....
       }

        <span class="comment"> //Direction </span>
       CATListOfDouble ListOfDouble;
       rc = spIComData -&gt;<strong>GetDirections</strong>( spMmiUsePrtPart, ListOfDouble );
       if (ListOfDouble.Size () &gt; 0  ){ 
          .....
       }
    }
...
</pre>
<h4><a name="Zones"></a>Zones Group and Zones</h4>
<p>Data access component allow to get Zone Groups and Zone. <br />
For sure ,the API will returns Zones group only if the 3DShape representation contain 
the correspondent Preliminary Design Information.</p>
<pre class="code">
... 
    CATLISTV(CATBaseUnknown_var) ListOfZonesGroup;
    rc = spIComData -&gt; <strong>GetGroupsOfZones</strong>( spMmiUsePrtPart,ListOfZonesGroup );
    if( SUCCEEDED( rc )  &amp;&amp; ListOfZonesGroup.Size() &gt; 0 ) 
    { 
        for ( int iIdxZnGrp =1 ; iIdxZnGrp &lt;= ListOfZonesGroup.Size () ;iIdxZnGrp ++) 
        {
            CATIAlias_var spAlias = ListOfZonesGroup[iIdxZnGrp]; 
            printf(&quot;ZONEGRP[%2d]= %s\n&quot;,iIdxZnGrp, (spAlias -&gt; GetAlias()).ConvertToChar()); 
            
            CATICciZonesGroup_var spZonesGroup =  ListOfZonesGroup[iIdxZnGrp]; 
            if( NULL_var != spZonesGroup )
            {

                <span class="comment"> // Reference Shell and Darapping Direction </span>
                CATIMmiMechanicalFeature_var spMFRefShell ;
                CATBoolean DrapingDirection = FALSE;
                rc = spZonesGroup -&gt; <strong>GetReferenceShell</strong>( spMFRefShell, DrapingDirection);
          	...   
 
                 <span class="comment">//Rosette </span>
                CATMathAxis Axis;
                rc = spZonesGroup -&gt; <strong>GetRosette</strong>( Axis );
                ... 

                 <span class="comment">// Zones </span>
                CATICciZone_var spZone; 
                CATLISTV(CATBaseUnknown_var) ZonesList;
                rc = spZonesGroup -&gt; <strong>GetZones</strong>( ZonesList );
                if( SUCCEEDED( rc )  &amp;&amp; ( 1 &lt;= ZonesList.Size() ))
                {
                    for ( int iIdxZn =1 ; iIdxZn &lt;= ZonesList.Size () ;iIdxZn ++) 
                    {
                        spZone =  ZonesList[ii] ;
                        CATIAlias_var spAlias = ZonesList[iIdxZn]; 
                        printf(&quot;ZONE[%2d]= %s \n&quot;,iIdxZn,(spAlias -&gt; GetAlias()).ConvertToChar());  
                        ...
                    }  <span class="comment">// End Loop on Zones </span>

                } 
                ... 
                
            }  <span class="comment">// Test Zone Group  </span>
        }  <span class="comment">//End loop on ZoneGroup  </span>
    }
...</pre>
<h4><a name="Stacking"></a>Stacking/Plies Group</h4>
<p><strong>Stacking: </strong>Data access component allow to get the Stacking Composites 
set. <br />
There is one unique Stacking in a 3DShape, aggregated object under Stacking can 
be either Plies Groups or Sequences.</p>
<p>Note: <br />
In general objects under Stacking are only Plies Groups (but it can occurs that 
you will find list of sequences, these 3DShape are in former 3DShape representation 
coming from V5 Version. </p>
<pre class="code">
... 
    CATICciStacking_var Stacking = NULL_var;
    rc = spIComData -&gt; <strong>GetStacking</strong>( spMmiUsePrtPart,Stacking );
    if( SUCCEEDED( rc ) &amp;&amp; NULL_var != Stacking )	
    {	
        CATLISTV(CATBaseUnknown_var) ListOfPliesGroupAndSeq;
        rc = Stacking -&gt; <strong>GetElementsUnderStacking</strong>( ListOfPliesGroupAndSeq );
        if( SUCCEEDED(rc ) &amp;&amp; ListOfPliesGroupAndSeq .Size() &gt;0) 
        {
            ii =0 ; 
            for (ii = 1; ii &lt;= ListOfPliesGroupAndSeq.Size(); ii++ )
            {
                CATIAlias_var spAlias( ListOfPliesGroupAndSeq[ii] );
                printf (&quot;UNDERSTACKING[%4d]= %s\n&quot;,ii,(spAlias -&gt; GetAlias()).ConvertToChar()); 
		.... 	
            }

        }
    }
...
</pre>
<p><strong>Plies Groups </strong>Data access component allow to get directly the 
list of Plies group in the 3DShape.</p>
<pre class="code">
... 
    CATLISTV(CATBaseUnknown_var) ListOfPliesGroups;
    rc = spIComData -&gt; <strong>GetGroupsOfPlies</strong>( spMmiUsePrtPart,ListOfPliesGroups );
    if( SUCCEEDED( rc ) &amp;&amp; ( 1 &lt;= ListOfPliesGroups.Size() ) )
    {
        for ( int iIdxPliesGrp =1 ; iIdxPliesGrp &lt;= ListOfPliesGroups.Size () ;iIdxPliesGrp ++) 
        {

            CATIAlias_var spAlias = ListOfPliesGroups[iIdxPliesGrp]; 
            printf (&quot;PLIESGRP[%2d]= %s\n&quot;,iIdxPliesGrp,(spAlias -&gt; GetAlias()).ConvertToChar()); 
            
            CATICciPliesGroup_var spPliesGroup =  ListOfPliesGroups[iIdxPliesGrp];
            if( NULL_var != spPliesGroup )
            {

                 <span class="comment">// Reference Shell and direction</span> 
                CATIMmiMechanicalFeature_var spMFRefShell ;
                CATBoolean DrapingDirection = FALSE;
                rc = spPliesGroup -&gt; <strong>GetReferenceShell</strong>( spMFRefShell,DrapingDirection);
		        ....	

                 <span class="comment">//Rosette </span>
                CATMathAxis Axis;
                rc = spPliesGroup -&gt; <strong>GetRosette</strong>( Axis );
		.... 

                <span class="comment"> // Sequences </span>
                CATLISTV(CATBaseUnknown_var) ListOfSequences;
                rc = spPliesGroup -&gt; <strong>GetSequences</strong>( ListOfSequences );
                if( SUCCEEDED( rc ) &amp;&amp; ( 1 &lt;= ListOfSequences.Size() ))
                {
                    ii = 0 ; 
                    for(ii = 1; ii &lt;= ListOfSequences.Size(); ii++ )
                    {
                        CATIAlias_var spAlias( ListOfSequences[ii] );
  
                        CATICciSequence_var spSequence( ListOfSequences[ii] ); //Sequence.1
                        CATLISTV(CATBaseUnknown_var) ListOfPliesAndCores;
                        rc = spSequence -&gt; <strong>GetPliesAndCores</strong>( ListOfPliesAndCores );
			..... 
	            }
                }
            }
        }  <span class="comment">//End loop on plies group </span>
    }
 ...
</pre>
<h4><a name="PliesAndCore"></a>Plies and Core</h4>
<p>Plies and Core are recovered at the sequence level.<br />
Sequence describe a set of plies or Core that can be Stacked in the same manufacturing 
transaction.<br />
For example Plies in Sequences have usually same material, direction, and do not 
overlap on the reference surface.</p>
<p><strong>Plies : </strong>Geometric ply definition consist in a contour and a 
reference surface, The reference surface is the global support surface for the composites 
Parts. Additional geometrical result may exist associated to the plies due to the 
Engineering Design made in composites interactive workbench on Composites Parts:</p>
<table class="fill">
	<tr>
		<th>HighlightShell</th>
		<td>Is the reference shell delimited by the contour</td>
	</tr>
	<tr>
		<th>Flattening Geometry</th>
		<td>Is the contour developed on a plane reference, computed by flattenning 
		operation </td>
	</tr>
	<tr>
		<th>Manufacturing Geometry</th>
		<td>Is the ply geometry add within the Material excess used for manufacturing, 
		computed in Composites Manufacturing 3DShape </td>
	</tr>
	<tr>
		<th>Producibility</th>
		<td>Is the producibility object - Producibility object is instanciated when 
		studing the manufacturability of the ply </td>
	</tr>
</table>
<p><strong>Core: </strong>Geometric Core definition consists in a solid - a reservation 
aera - the solid is designed in the 3DShape and referenced by Core Feature.</p>
<pre class="code">
... 
    CATLISTV(CATBaseUnknown_var) ListOfPliesAndCores;
    rc = spSequence -&gt; <strong>GetPliesAndCores</strong>( ListOfPliesAndCores );
    if(SUCCEEDED(rc) &amp;&amp; ListOfPliesAndCores.Size() &gt;= 1  ) 	
    {
        for (ii = 1; ii &lt;= ListOfPliesAndCores.Size(); ii++ )
        {
            CATIAlias_var spAlias( ListOfPliesAndCores[ii] );
            printf (&quot;PLIESANDCORE[%2d]= %s \n&quot;,  ii ,(spAlias-&gt;GetAlias()).ConvertToChar());

            CATICciPly_var  spPly = ListOfPliesAndCores[ii] ; 
            if (NULL_var != spPly ) 
            {
                 <span class="comment">//Material Cache </span>
                CATICciMaterialCache_var spMatPly = NULL_var;
                rc = spPly -&gt; <strong>GetMaterialCache</strong>(spMatPly);
	        ...

                 <span class="comment">// Rosette reference </span>
                CATIMf3DAxisSystem_var spMf3DAxisSystem;
                rc = spPly -&gt; <strong>GetRosette</strong>( spMf3DAxisSystem );
	        ...

                <span class="comment"> //Fiber direction </span>
                double Direction = 0.0;
                CATICkeParm_var spCkeParmDir ;
                rc = spPly -&gt; <strong>GetDirection</strong>( spCkeParmDir );
	        ...

                <span class="comment"> // Shell orientation </span>
                CATBoolean DrapingDirection = FALSE;
                CATIMmiMechanicalFeature_var RefShell ;
                rc = spPly -&gt; <strong>GetReferenceShell</strong>( RefShell,DrapingDirection);
	        ...

                <span class="comment"> // Contour </span>
                CATICciContour_var spContour;
                CATICciCompositesGeometry_var spCompositesGeometry ;
                rc = spPly -&gt; <strong>GetCompositesGeometry</strong>(spCompositesGeometry);
                CATIMmiMechanicalFeature_var spMmiMechFeatContour; 
                if (NULL_var != spCompositesGeometry ) {
                     spCompositesGeometry  -&gt;<strong>GetResult</strong>(spMmiMechFeatContour);
                     spContour= spMmiMechFeatContour; 
                     ...
                }

                <span class="comment"> //Producibility (Not Necessary defined ) </span>
                CATICciProducibility_var spProducibility = NULL_var;
                rc = spPly -&gt; <strong>GetProducibility</strong>(spProducibility);
	        ...

                <span class="comment"> // Manufacturing Geom (Not Necessary defined ) </span>
                CATIMmiMechanicalFeature_var ManuGeometry = NULL_var;
                rc = spPly -&gt; <strong>GetGeometry</strong>( ManuGeometry );
	        ...

                 <span class="comment">// Flattening Geom (Not Necessary defined ) </span>
                CATLISTV(CATIMmiMechanicalFeature_var) FlatGeometry;
                rc = spPly -&gt; <strong>GetFlattenedGeometries</strong>( FlatGeometry );
	        ...

                 <span class="comment">// Shell Geometry (Not Necessary defined ) </span>
                CATIMmiMechanicalFeature_var HighLightShell = NULL_var;
                rc = spPly -&gt; <strong>GetHighlightShell</strong>( HighLightShell );
	        ...
            } <span class="comment">// End Ply Definition </span>

            else
            {
                CATICciCore_var  spCore = ListOfPliesAndCores[ii] ; 
                if (NULL_var != spCore ) 
                {

                     <span class="comment">//Material Cache </span>
                    CATICciMaterialCache_var spMatC = NULL_var;
                    rc = spCore  -&gt; <strong>GetMaterialCache</strong>(spMatC);
		    ...

                    <span class="comment"> //Direction </span>
                    double Direction = 0.0;
                    CATICkeParm_var spCkeParmDir = NULL_var;
                    rc = spCore  -&gt; <strong>GetDirection</strong>( spCkeParmDir );
		    ...

                    <span class="comment"> //Rosette </span>
                    CATIMf3DAxisSystem_var spMf3DAxisSystem;
                    rc = spCore  -&gt; <strong>GetRosette</strong>( spMf3DAxisSystem );
		    ...

                     <span class="comment">//Engineering Geometry - Solid reference  </span>
                    CATBaseUnknown_var spIngGeo;
                    rc = spCore  -&gt; <strong>GetEngineeringGeometry</strong>( spIngGeo );
	            ...

                   <span class="comment">  //Manufacturing Geometry - Solid reference  </span>
                    CATBaseUnknown_var spManGeo ;
                    rc = spCore -&gt; <strong>GetManufacturingGeometry</strong>( spManGeo );
		    ...

                } <span class="comment"> // End Core definition </span>

            }
        }  <span class="comment">//End loop on Plies and Core </span>
    }  
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article has demonstrated the way to navigate in Composites Data Model, access 
to main Composites Feature Objects and retrieve associated feature references and 
parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAACciTaCompositesDesign.htm">About Composites Engineering 
		Design Features </a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
