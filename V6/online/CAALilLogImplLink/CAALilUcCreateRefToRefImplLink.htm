<html>
	<head>
		<title>Creating Reference to Reference Implement Relation Link</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

        

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Reference to Reference Implement Relation Link </h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td style="height: 103px">
					<h2>Abstract</h2>
					<p>This Use Case mainly illustrates about the creation of 
					an Implement link between Functional Reference and Logical 
					Reference.    </p>
				<ul>
							<li><A href="#Learn">What You Will Learn 
                                With This Use Case</A>
							<li><a href="#UseCase">The 
                                CAALilCreateRefToRefImplLink Use Case</a>
							<ul type="disc">
								<li><a href="#What">What Does 
                                        CAALilCreateRefToRefImplLink Do</a>
								<li><a href="#How">How to Launch 
								CAALilCreateRefToRefImplLink </a>
								<li><a href="#Where">Where to Find the 
								CAALilCreateRefToRefImplLink Code</a> </li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A> </li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to create Implement link between 
Functional Root Reference and Logical Root Reference. In addition, user learns to 
create object in context (OIC) for Root Reference object. </p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAALilCreateRefToRefImplLink
        Use Case</h2>
		<p><code><a>CAALilCreateRefToRefImplLink</a></code> is a use case of the 
        <code><a>CAALogImplLinkUseItf.edu</a></code> framework that 
			illustrates <code>CATLogicalImplementLinkUseItf</code> framework capabilities.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAALilCreateRefToRefImplLink
        Do</h3>
		<p>The Use case basically talks about creation of an Implement link 
		between Functional Reference and Logical Reference.</p>
<ul>
	<li>Initially we load the Logical Reference. The loading mode is &quot;Authoring&quot; 
	mode to enable to load in session all the Logical structure. The possible 
	aggregated Implement relations will be loaded too. </li>
	<li>Next we load the Functional Reference under the same condition.</li>
	<li>Further we create an object in context (OIC) for Logical 
	Reference (to represent the Source) as well as for Functional Reference&nbsp; 
	(to represent the Target) . </li>
	<li>Before creation of an implement relation we retrieve count of Target 
	from Source and vice versa. </li>
	<li>Further we create an Implement relation between two created OIC 
	from source and vice versa.</li>
	<li>Lastly, we confirm the success of the creation of an implement link by confirming if the count of implement relation 
	Target from a Source finally is +1 compared to the count prior to the implement link creation.
On similar lines, we also confirm if the count of implement relation sources from our 
	Target under consideration, is +1 compared to the count prior to the implement link creation.
 </li>
</ul>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAALilCreateRefToRefImplLink</h3>
		<p>To launch <code>CAALilCreateRefToRefImplLink</code>, you will need to set up the build time environment, 
			then compile <code>CAALilCreateRefToRefImplLink<b> </b></code>along with its prerequisites, set up the run time 
			environment, and then execute the use case [<a href="#References">1</a>].&nbsp;</p>
			<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a>CAALilCreateRefToRefImplLink </code><a><code><i>Repository Server User Password SecurityCtx 
FunctionalPLMType LogicalPLMType&nbsp;</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -LogRef </i>
</code><a><code><i>Attribute_name1 
Attribute_value1  [Attribute_name1 Attribute_value1 ...]</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -FuncRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]</i></code><a><code>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th ><b>Server</b></th>
    <td >The server as Host:Port_number/RootURI</td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project) Choose Role as Designer( as the use case we are creating new Implement  link (the PLM object))</td>
  </tr>
 		<tr>
			<th> FunctionalPLMType</th>
			<td>Functional PLMType name </td>
		</tr>
		<tr>
			<th> LogicalPLMType</th>
			<td>Logical PLMType name</td>
		</tr>

	<tr>
    <th ><b>Attribute_name1</b></th>
    <td>The identification attribute name for Logical reference (ID Set)  </td>
  </tr>
  <tr>
    <th ><b>Attribute_value1</b></th>
    <td>The identification attribute value for Logical reference (ID Set)</td>
  </tr>
  <tr>
    <th ><b>Attribute_name2</b></th>
    <td>The identification attribute name for <a>Functional</a> reference (ID Set)</td>
  </tr>
	<tr>
    <th ><b>Attribute_value2 </b></th>
    <td>The identification attribute value for <a>Functional</a> reference (ID Set)</td>
  </tr>
  </table>

<p>The input model for this use case is retrieved by importing the <code>
CAALilCreateRefToRefImplLink</code><a><code>.3dxml</code></a> file which 
located at:</p>
<table id="table15" >
    <tr>
      <td><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\InputData</code></td>
    </tr>
</table>
<p >CAALilCreateRefToRefImplLink.3dxml this 3D XML file contains the root 
Logical Reference and Functional Root with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALilCreateRefToRefImplLink_LogRoot</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
CAALilCreateRefToRefImplLink_Func_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="Where"></a>Where to Find the CAALilCreateRefToRefImplLink
        Code</h3>
<p>The <code>CAALilCreateRefToRefImplLink<b> </b></code>use case is defined at the 
location:</p>
<table style="height: 15px">
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\CAALilCreateRefToRefImplLink.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
		<ul >
			<li><a href="#Prolog">Prolog</a><li>
			<a href="#Load the Product Reference And Logical Reference in the session in Authoring Mode">Load the 
			Functional Reference And Logical Reference in the session in Authoring Mode 
			</a> </li>
			<li>
			<a href="#Create the two Object in context (one for the source, and one for the target)">Create the two Object in context (one for the source, and one for the target)</a></li>
			<li>
			<a href="#Retrieve the Implement link manager">Retrieve the Implement  link manager</a></li>
			<li>
			<a href="#Check the Count of Number of source from target and Target from source">Retrieve Count of 
			Source from Target and Target from Source.</a></li>
			<li>
			<a href="#Create Reference to Reference Implement link">Create Reference to Reference Implement link</a></li>
			<li>
			<a href="#Check the Count of Number of source from target 2">Check Count of 
			Source from Target and Target from 
			Source.</a></li>
			<li><a href="#Epilog">Epilog</a></li>
	</ul>
    <script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALilCreateRefToRefImplLink</code> use case begins by creating a 
session and connecting to the input repository  with an 
appropriate role (designer, in this case). The Use Case&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
[<a href="#References">2</a>] deals with Opening and Closing a PLM Session.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
        <a name="Load the Product Reference And Logical Reference in the session in Authoring Mode">
		</a>Load the Functional Reference And Logical Reference in the session in 
		Authoring Mode</h3>
		<p>We begin with by retrieving the <code>Identificator</code>  
		of input Functional Reference and Logical Reference. Further we load the 
		Functional Reference 
		and Logical Reference in the session in &quot;Authoring&quot; mode. For details of 
		loading Reference in session refer [<a href="#References">3</a>] use case. </p>
	
<script type="text/javascript">insertLinkToTop();</script> 

<h3>
<a name="Create the two Object in context (one for the source, and one for the target)">
</a>Create two Object in context (one for the source, and one for the target)</h3>




<p>The input Functional Reference and Logical Reference are all loaded in the 
current session. Now we will create object in context for loaded Functional 
Reference as well Logical Reference.</p>
		<table class="code" id="Table38">
			<tr>
				<td><pre>...
    <strong>CATOmbObjectInContext</strong> * piOmbObjCtxOnFunctRoot = NULL;
    CATListPtrCATIPLMComponent ComponentList; 
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnFunctRoot, piOmbObjCtxOnFunctRoot);
    ...		
    CATOmbObjectInContext * piOmbObjCtxOnLogicalRoot = NULL;
    hr = CATOmbObjectInContext::<strong>CreateObjectInContext</strong>(ComponentList, NULL, piPLMCompOnLogicalRoot, piOmbObjCtxOnLogicalRoot);
...</pre>
				</td>
			</tr>
		</table>
		<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em>
		call in this case takes a empty list namely. <code>ComponentList </code> and 
		opened PLM Component pointer,&nbsp;as 
		inputs. </p>
<p>In this case we call this method twice one for Functional 
		Reference (<code>piPLMCompOnFunctRoot</code>) and for Logical Reference (<code>piPLMCompOnLogicalRoot</code>).
<code>piPLMCompOnFunctRoot </code>represents the Target, and <code>piPLMCompOnLogicalRoot
</code>represents the Source.</p>
<p>Please note that in this case we are giving empty list as first argument 
and second argument as NULL, since we are creating object in context for Root 
object. </p>
		<script type="text/javascript">insertLinkToTop();</script> 
<h3 ><a name="Retrieve the Implement link manager"></a>Retrieve the Implement link manager</h3>
	<p>Now here we proceed to retrieve Implement link manager. This object provides services to manage 
	an Implement link.&nbsp; </p>
		<table class="code" id="Table37">
			<tr>
				<td><pre>...
    <strong>CATILogicalImplementLinkManager</strong>* piImplementLinkManager = NULL;
    hr = CATLogicalImplementLinkProvider::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
				</td>
			</tr>
		</table>
		<p align="left">A call to <code>GetImplementLinkManager</code> of <em>CATLogicalImplementLinkProvider</em>
		returns the Logical Implement manager <code>piImplementLinkManager</code>.</p>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
		<a name="Check the Count of Number of source from target and Target from source">
		</a>Retrieve Count of Source from Target and Target from 
		Source</h3>
	<p>Now we retrieve count of Targets associated with the Source (Logical 
	Reference). 
	We use the object in context (<code>piOmbObjCtxOnLogicalRoot)</code>.&nbsp; Then we retrieve the count of sources associated with the 
	Target 
	(Functional Reference). We use the object in context (<code>piOmbObjCtxOnFunctRoot)</code>. </p> 
		<table class="code" id="Table44">
			<tr>
				<td><pre>...    
    int countOfTargetsBeforeNewLinkCreation =0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfTargetsBeforeNewLinkCreation);
    ...	
    int countOfSourceBeforeNewLinkCreation = 0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctRoot,countOfSourceBeforeNewLinkCreation);
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a count of Target. The 
details of this local method is explained in another use case [<a href="#References">4</a>].</p>
<p>A call to <code>RetrieveCountOfSource </code>returns a count of Source [<a href="#References">4</a>]. </p>

<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Create Reference to Reference Implement link"></a>Create 
		Reference to Reference Implement link </h3>

<p>Now we will create the Reference to Reference Implement link between the 
loaded Functional Reference as Target and Logical Reference as Source. </p>
				<table class="code" id="Table37">
			<tr>
				<td><pre>...
   CATListValCATICkeParm_var EmptyList ; 
   <strong>CATILogicalImplementLink</strong> * pImplementLinkConnection = NULL ; 
   hr =  piImplementLinkManager-&gt;<strong>CreateImplementRelation</strong>(NULL_var, NULL, EmptyList, piOmbObjCtxOnLogicalRoot,
	                                                piOmbObjCtxOnFunctRoot, pImplementLinkConnection );
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>CreateImplementRelation</code> of <em>
CATILogicalImplementLink</em> on 
<code>piImplementLinkManager</code> creates a Implement link between two input Objects 
(<code>piOmbObjCtxOnLogicalRoot, piOmbObjCtxOnFunctRoot</code>).</p>
<p>First argument is NULL_var due to that default type will be taken into 
consideration. Next argument environment is NULL in this case current set 
environment will be taken into consideration. Third argument Attribute list is 
empty since BL will valuate attribute values.&nbsp;&nbsp; </p>


<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Check the Count of Number of source from target 2"></a>Check Count 
		of Source from Target and Target from Source</h3>

<p>Now we will again retrieve the count of Source as well Target as we have 
retrieved in earlier steps, but here we expect the count is increment one (+1). Since we have 
created Implement link between 
Target and Source, so count must be increment one (+1) to previous count. </p>
				<table class="code" id="Table37">
			<tr>
				<td><pre>...
    int countOfTargetsAfterNewLinkCreation =0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalRoot,countOfTargetsAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfTargetsBeforeNewLinkCreation+1) != countOfTargetsAfterNewLinkCreation)) return 1;
    ...
    int countOfSourceAfterNewLinkCreation =0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctRoot,countOfSourceAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfSourceBeforeNewLinkCreation+1) != countOfSourceAfterNewLinkCreation )) return 1;
...
</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a count of Target [<a href="#References">4</a>]. A call to <code>RetrieveCountOfSource </code>returns a count of Source [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Epilog"></a>Epilog</h3>
<p align="left">The <code>CAALilCreateRefToRefImplLink</code> use case ends by simply 
saving and closing the PLM session. Since all use cases necessarily conclude by closing the PLM session, we have a dedicated article on this topic namely &quot;Creating a
Basic PLM Batch&quot; [<a href="#References">2</a>].&nbsp;</p>

		<script type="text/javascript">insertLinkToTop();</script> 
	 


		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p align="left">The Use Case illustrates the creation of an Implement Relation 
Link between a Functional Reference and a Logical Reference.</p>
<p align="left">In the process of creation of an Implement link we learn creation 
of OIC of a Functional Reference and a Logical Reference. </p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			<tr>
				<td vAlign="top" >[1]</td>
				<td ><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
						and Launching a CAA Use Case</A></td>
			</tr>
			<tr>
				<td vAlign="top" >[2]</td>
				<td >
                <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
                Creating a PLM Basic Batch</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[3]</td>
				<td ><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[4]</td>
				<td ><a href="CAALilUcRetrieveImplLink.htm">Retrieving Source and Targets of Implement Relation</a></td>
			</tr>
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [May 2010]</td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		  <script type="text/javascript">insertCopyright();</script>
	</body>
</html>


