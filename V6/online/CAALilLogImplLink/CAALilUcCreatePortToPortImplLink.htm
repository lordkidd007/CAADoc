<html>
	<head>
		<title>Creating Port to Port Implement Relation Link </title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

        

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Port to Port Implement Relation Link </h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This Use Case mainly illustrates about the creation of an Implement Relation between 
					Logical 
					Port 
and Functional Port.</p>
				<ul>
							<li><A href="#Learn">What You Will Learn 
                                With This Use Case</A>
							<li><a href="#UseCase">The 
                                CAALilCreatePortToPortImplLink Use Case</a>
							<ul type="disc">
								<li><a href="#What">What Does 
                                        CAALilCreatePortToPortImplLink Do</a>
								<li><a href="#How">How to Launch 
								CAALilCreatePortToPortImplLink </a>
								<li><a href="#Where">Where to Find the 
								CAALilCreatePortToPortImplLink Code</a> </li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A> </li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, the user learns to create an Implement link between Logical 
Port and Functional Port. In addition we will learn to create object in context (OIC) for Logical 
Port 
and Functional Port.</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAALilCreatePortToPortImplLink
        Use Case</h2>
		<p><code><a>CAALilCreatePortToPortImplLink</a></code> is a use case of the 
        <code><a>CAALogImplLinkUseItf.edu</a></code> framework that 
			illustrates <code>CATLogicalImplementLinkUseItf</code> framework capabilities.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAALilCreatePortToPortImplLink
        Do</h3>
		<p>The Use case basically talks about creation of an Implement link 
		between Logical Port and Functional Port. </p>
<ul>
	<li>Initially we load the Logical Reference. The loading mode is &quot;Authoring&quot; 
	mode to enable to load in session all the Logical structure including Ports. 
	The possible aggregated Implement relations will be loaded too. </li>
	<li>Next we load the Functional Reference under the same condition.</li>
	<li>Then important step is to retrieve path of first instances up to Source 
	and Target.</li>
	<li>Further we create an object in context (OIC) for Logical Port (to 
	represent the Source) as well as for Functional Port (to represent the 
	Target) </li>
	<li>Before implement link creation,&nbsp;we retrieve the count of the Source 
	objects from Target object and count Target objects from Source object. </li>
	<li>Next we create Implement link between Source and Target OIC. </li>
	<li>Lastly, we confirm the success of the creation of an implement link by confirming if the count of implement relation 
	Target from a Source finally is +1 compared to the count prior to the implement link creation.
On similar lines, we also confirm if the count of implement relation sources from our 
	Target under consideration, is +1 compared to the count prior to the implement link creation. </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAALilCreatePortToPortImplLink</h3>
		<p>To launch <code>CAALilCreatePortToPortImplLink</code>, you will need to set up the build time environment, 
			then compile <code>CAALilCreatePortToPortImplLink<b> </b></code>along with its prerequisites, set up the run time 
			environment, and then execute the use case [<a href="#References">1</a>].&nbsp;</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a>CAALilCreatePortToPortImplLink </code><a><code><i>Repository Server User Password SecurityCtx LogicalPLMType FunctionalPLMType&nbsp;</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -LogRef </i>
</code><a><code><i>Attribute_name1 
Attribute_value1  [Attribute_name1 Attribute_value1 ...]</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -FuncRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]

</i></code> </p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -PLMIDLogInst PLM_ExternalID_value1 [PLM_ExternalID_value1 ... ]</i></code></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-PLMIDFuncInst PLM_ExternalID_value2 [PLM_ExternalID_value2 ... ]</i></code><a><code>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th ><b>Server</b></th>
    <td >The server as Host:Port_number/URI</td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project) Choose Role as Designer( as the use case we are creating new Implement  link (the PLM object))</td>
  </tr>
 		<tr>
			<th> LogicalPLMType </th>
			<td>Logical PLMType name </td>
		</tr>
		<tr>
			<th > FunctionalPLMType </th>
			<td>Functional PLMType name</td>
		</tr>

	<tr>
    <th  ><b>Attribute_name1</b></th>
    <td>The identification attribute name for Logical ref (IDSet Attribute) </td>
  </tr>
  <tr>
    <th ><b>Attribute_value1</b></th>
    <td>The identification attribute value for Logical ref (IDSet Attribute)</td>
  </tr>
  <tr>
    <th ><b>Attribute_name2</b></th>
    <td>The identification attribute name for Functional ref (IDSet Attribute) </td>
  </tr>
	<tr>
    <th ><b>Attribute_value2 </b></th>
    <td>The identification attribute value for Functional Ref (IDSet Attribute)</td>
  </tr>
  	<tr>
    <th ><b>PLM_ExternalID_value1 </b></th>
    <td>The PLMExtenalID value list for Path of first inst for Logical Instance</td>
  </tr>

	<tr>
    <th ><b>PLM_ExternalID_value2 </b></th>
    <td>The PLMExtenalID value list for Path of first inst for Functional Instance</td>
  </tr>

  </table>

<p>The input model for this use case is retrieved by importing the <code>
CAALilCreatePortToPortImplLink</code><a><code>.3dxml</code></a> file which 
located at:</p>
<table id="table15" width="974">
    <tr>
      <td width="972"><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\InputData</code></td>
    </tr>
</table>
<p align="left">CAALilCreatePortToPortImplLink.3dxml this 3D XML file contains the root 
Logical Reference and Functional Root with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALilCreatePortToPortImplLink_Log_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALilCreatePortToPortImplLink_Func_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
	<p align="left">And the Instance names are as below</p>
<ul>
  <li><a><code>PLM_PLM_ExternalID_value1</code></a>:
    CAALilCreatePortToPortImplLink_Func_Child1.1</li>
  <li><a><code>PLM_PLM_ExternalID_value2</code></a>:
    CAALilCreatePortToPortImplLink_Log_Child1.1</li>
</ul>
		<h3><a name="Where"></a>Where to Find the CAALilCreatePortToPortImplLink
        Code</h3>
<p>The <code>CAALilCreatePortToPortImplLink<b> </b></code>use case is defined at the 
location:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\CAALilCreatePortToPortImplLink.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
		<ul >
			<li><a href="#Prolog">Prolog</a><li>
						<a href="#Load the Product Reference And Logical Reference in the session">Load the 
						Logical Reference And Functional Reference in the session
						</a> </li>
			<li>
						<a href="#RefRefLink">Create - if necessary - the Ref/Ref Implement Link</a></li>
			<li>
			<a href="#Create the two Object in context (one for the source, and one for the target)">Create the two Object in context (one for the source, and one for the target)</a></li>
			<li>
			<a href="#Retrieve the Implement link manager">Retrieve the Implement  link manager</a></li>
			<li>
			<a href="#Check the Count of Number of source from target and Target from source">Retrieve Count of 
			Source from Target and Target from 
			Source.</a></li>
			<li>
			<a href="#Create Instance to Instance Implement link">Create Port to Port Implement link</a></li>
			<li>
			<a href="#Check the Count of Number of source from target and Target from source2">Check Count of 
			Source from Target and Target from Source.</a></li>
			<li><a href="#Epilog">Epilog</a></li>
	</ul>
    <script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALilCreatePortToPortImplLink</code> use case begins by creating a 
session and connecting to the Input Repository  with an 
appropriate role (Designer, in this case). The Use Case&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
[<a href="#References">2</a>] deals with Opening and Closing a PLM Session.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
        <a name="Load the Product Reference And Logical Reference in the session">
		</a>Load the Logical Reference And Functional Reference in the session</h3>
		<p>We begin with by retrieving the <code>Identificator</code> 
		of input Logical Reference and Functional Reference. Further we load the 
		Logical Reference and Functional Reference in the session. For details of 
		loading Reference in session refer [<a href="#References">3</a>] use case. </p>
	
<script type="text/javascript">insertLinkToTop();</script> 

<h3><a name="RefRefLink"></a>Create - if necessary - the Ref/Ref Implement Link</h3>
<p>Before creating a inst/inst link, an implement link between the two references must exist. </p>
<pre class="code">
...
hr = <strong>CAALilCheckRefRefImplementLink</strong>(piPLMCompOnLogRoot, piPLMCompOnFunctionalRoot);
if (FAILED(hr)) return 1;
...
</pre>
<p>This method is explained in the referenced use case [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
<h3>
<a name="Create the two Object in context (one for the source, and one for the target)">
</a>Create two Object in context (one for the source, and one for the target)</h3>




<p>Now we will create object in context (OIC) for Logical instance. To create OIC we 
need to retrieve Path of first Instances. </p>


<h4>Creates the Object in context for Logical Port</h4>
		<table class="code" id="Table38">
			<tr>
				<td><pre>...
   CATListPtrCATIPLMComponent ListComponentLogicalPathOfInst; 
   CATIPLMNavReference *piNavRefOnEndLogRef = NULL;
   hr = <strong>RetrievePathOfInstancesAndLastInstRef</strong>(piPLMCompOnLogRoot,
					ListLogicalPLMIDAttrValueOfFirstInst,
					ListComponentLogicalPathOfInst,
					piNavRefOnEndLogRef,
					level);
    ...
	CATILogPorts  *  piLogPortsOnRef  =  NULL; 
	CATILogPort_var spLogicalPort ;
	hr= piNavRefOnEndLogRef-&gt;CATListValCATILogPort_var spListLogicalPorts ;
	hr = piLogPortsOnRef-&gt;<strong>List</strong>(spListLogicalPorts);
    ...
	spLogicalPort = spListLogicalPorts[1];
    ...
	CATOmbObjectInContext * piOmbObjCtxOnLogicalPort = NULL;
	hr = <strong>CATOmbObjectInContext</strong>::<strong>CreateObjectInContext</strong>(ListComponentLogicalPathOfInst, NULL, spLogicalPort, piOmbObjCtxOnLogicalPort);
...</pre>
				</td>
			</tr>
		</table>
		<p>A call to <code>RetrievePathOfInstancesAndLastInstRef</code> create path of first instances of 
		Source Logical Port object [<a href="#RetrievePathOfInst">#</a>] and 
		the Reference of the last element(<code>piNavRefOnEndLogRef</code>).&nbsp;Retrieving 
		last element is significant since this aggregates Port (<code>spLogicalPort</code>). &nbsp; &nbsp; </p>


<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em>
		call in this case takes a Path of first Instance list namely <code>
ListComponentLogicalPathOfInst</code> and 
		second argument is NULL, and third argument is Port Object(<code>spLogicalPort</code>),&nbsp;then API returns the Object in context (<code>piOmbObjCtxOnLogicalPort</code>) 
for port as last argument. </p>


<h4>Creates the Object in context for Functional Port</h4>

<p>Next we will create Object in Context for Functional Flow. In very similar 
manner as we have created OIC of Logical port.</p>
		<table class="code" id="Table45">
			<tr>
				<td><pre>...
    CATListPtrCATIPLMComponent ListComponentFuncPathOfInst;
    CATIPLMNavReference *piNavRefOnEndFunctionalRef = NULL;
    level =1;
    hr = <strong>RetrievePathOfInstancesAndLastInstRef</strong>(piPLMCompOnFunctionalRoot,
		                         ListPLMIDAttrValueOfFunctionalPathOfInst,
				       ListComponentFuncPathOfInst,
				       piNavRefOnEndFunctionalRef,
 			                level);
    ...
    CATIFctPorts_var spiFuncPortsOnFuncRef=piNavRefOnEndFunctionalRef;
    CATListValCATIFctPort_var ListOfPortsUnderFuncRef;
    CATIPLMNavEntity_var spiNavEntOnPort;
    hr = spiFuncPortsOnFuncRef-&gt;<strong>List</strong>(ListOfPortsUnderFuncRef);
    ...
    spiNavEntOnPort = ListOfPortsUnderFuncRef[1];
    ...
    CATOmbObjectInContext * piOmbObjCtxOnFunctionalPort = NULL;
    hr = <strong>CATOmbObjectInContext::CreateObjectInContext</strong>(ListComponentFuncPathOfInst, NULL, spiNavEntOnPort, piOmbObjCtxOnFunctionalPort);
...</pre>
				</td>
			</tr>
		</table>
		<p>A call to <code>RetrievePathOfInstancesAndLastInstRef</code> create path of first instances of 
		Source Logical Port object [<a href="#RetrievePathOfInst">#</a>] and 
		the Reference of the last element(<code>piNavRefOnEndLogRef</code>).&nbsp; 
		Retrieving last element is significant since this aggregates Port (<code>spiNavEntOnPort</code>). &nbsp; &nbsp; &nbsp; </p>


<p>The <code>CreateObjectInContext</code> of <em>CATOmbObjectInContext</em>
		call in this case takes a Path of first Instance list namely <code>
ListComponentLogicalPathOfInst</code> and 
		second argument is NULL, and third argument is Functional Flow Object(<code>spiNavEntOnPort</code>),&nbsp;then API returns the Object in context (<code>piOmbObjCtxOnFunctionalPort</code>) 
for port as last argument. </p>
		<script type="text/javascript">insertLinkToTop();</script> 
<h3 ><a name="Retrieve the Implement link manager"></a>Retrieve the Implement link manager</h3>
	<p>Now here we proceed to retrieve Implement link manager. This Implement 
	manager will provide services to manage the Implement link.&nbsp; </p>
		<table class="code" id="Table37">
			<tr>
				<td><pre>...
   CATILogicalImplementLinkManager* piImplementLinkManager = NULL;
   hr = <strong>CATLogicalImplementLinkManagerProvider</strong>::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
				</td>
			</tr>
		</table>
		<p align="left">A call to <code>GetImplementLinkManager</code> of <em>CATLogicalImplementLinkProvider</em>
		call returns the Logical Implement manager <code>piImplementLinkManager</code>.</p>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
		<a name="Check the Count of Number of source from target and Target from source">
		</a>Retrieve Count of Source from Target and Target from 
		Source</h3>
	<p>Now we retrieve count of targets associated with Source object in context (Logical Port). Then further we retrieve count of 
	Source from Target object in context (Functional Port). </p>
		<table class="code" id="Table44">
			<tr>
				<td><pre>...
    int countOfTargetsBeforeNewLinkCreation = 0; 
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalPort,countOfTargetsBeforeNewLinkCreation);

    int countOfSourceBeforeNewLinkCreation = 0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctionalPort,countOfSourceBeforeNewLinkCreation);
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a count of Target <code>countOfTargetsBeforeNewLinkCreation.</code> The details of this local method is explained in another use case [<a href="#References">4</a>]. </p>
<p>A call to <code>RetrieveCountOfSource </code>returns a count of Source <code>countOfSourceBeforeNewLinkCreation </code> [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Create Instance to Instance Implement link"></a>Create Port to Port Implement link </h3>

<p>Now we will create the instance to instance Implement link between the 
created Logical Port OIC as source and Functional Port OIC as target. </p>
				<table class="code" id="Table37">
			<tr>
				<td><pre>...
   CATListValCATICkeParm_var EmptyList ; 
   CATILogicalImplementLink * pImplementLinkConnection = NULL ; 
   hr =  piImplementLinkManager-&gt;<strong>CreateImplementRelation</strong>(NULL_var, NULL, EmptyList, 
                                                         piOmbObjCtxOnLogicalPort,
		                                       piOmbObjCtxOnFunctionalPort,
                            		           pImplementLinkConnection );
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>CreateImplementRelation</code> of <em>CATILogicalImplementLinkManager</em> on 
<code>piImplementLinkManager</code> creates a Implement link between two input 
Objects (<code>piOmbObjCtxOnLogicalPort, piOmbObjCtxOnFunctionalPort</code>).</p>
<p>First argument is NULL due to that default Type will be taken into 
consideration. and next argument Environment is NULL in this case current set 
environment will be taken into consideration. Third argument Attribute list is 
empty since BL will valuate attribute values.&nbsp;&nbsp;&nbsp; </p>


<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Check the Count of Number of source from target and Target from source2">
		</a>Check Count of Source from Target and Target from Source</h3>

<p>Now we will again retrieve the count of Source as well target as we have 
retrieved in earlier steps, but here we expect the count is increment one (+1). Since we have 
created Implement link between 
target and source, so count must be increment one (+1) to previous count. </p>
				<table class="code" id="Table37">
			<tr>
				<td><pre>...
    int countOfTargetsAfterNewLinkCreation = 0;
    hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalPort,countOfTargetsAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfTargetsBeforeNewLinkCreation+1) != countOfTargetsAfterNewLinkCreation)) return 1;
    ...	
    int countOfSourceAfterNewLinkCreation = 0;
    hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctionalPort,countOfSourceAfterNewLinkCreation);
    if ((FAILED(hr))||((countOfSourceBeforeNewLinkCreation+1) != countOfSourceAfterNewLinkCreation )) return 1;
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a count of target <code>countOfTargetsAfterNewLinkCreation</code>[<a href="#References">4</a>]. </p>
<p>A call to <code>RetrieveCountOfSource </code>returns a count of source <code>countOfSourceAfterNewLinkCreation</code>[<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Epilog"></a>Epilog</h3>
<p align="left">The <code>CAALilCreatePortToPortImplLink</code> use case ends by simply 
saving and closing the PLM session. Since all use cases necessarily conclude by 
saving closing the PLM session, we have a dedicated article on this topic namely &quot;Creating a
Basic PLM Batch&quot; [<a href="#References">2</a>].&nbsp;</p>

		<script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Epilog"></a><a name="RetrievePathOfInst"></a>RetrievePathOfInstancesAndLastInstRef</h3>
<p align="left">The <code>RetrievePathOfInstancesAndLastInstRef</code> method browse through 
the input model structure recursively, and creates list of path of first 
instances as per the input PLM_ExternalID list input. and returns the Reference 
of the last instance in the generated path of instances. &nbsp;&nbsp; </p>
				<table class="code" id="Table37">
			<tr>
				<td ><pre>
HRESULT <strong>RetrievePathOfInstancesAndLastInstRef</strong>(CATIPLMNavReference *piPLMNavRefOnRef,
						CATListOfCATUnicodeString ListPLMIDAttrValueOfPathOfInst,
						CATListPtrCATIPLMComponent &amp;ComponentList,
						CATIPLMNavReference *&amp;piNavRefOnEndRef ,
						int Level)
	
{	
</pre>
				</td>
			</tr>
		</table>

<p>A call to <code>ListChildren </code> of <em>CATListPtrCATIPLMNavEntity</em>
retrieves the List of children Objects.</p>
<p>If the children object count is more than one we proceed to browse 
further.&nbsp; </p>

		
				<table class="code" id="Table37">
			<tr>
				<td ><pre>
        int j=1 ;
        <strong>while ( (j&lt;=childrenList.Size()) &amp;&amp; (SUCCEEDED(rc)) )
</strong>        {

	   CATIPLMNavEntity * pNavEntityOnchild = childrenList[j];
		
   	   CATListOfCATUnicodeString listattr , listvalattr;
	   listattr.Append("PLM_ExternalID");
	   pNavEntityOnchild-&gt;GetPublicAttributes(listattr, listvalattr);
		
  	  <strong> if (listvalattr[1] == ListPLMIDAttrValueOfPathOfInst[Level] )</strong>
	   {
		CATIPLMComponent * piPLMCompOnCurrentInst = NULL ;
		rc = pNavEntityOnchild-&gt;QueryInterface(IID_CATIPLMComponent, (void**) &amp;piPLMCompOnCurrentInst);
		
   		<strong>ComponentList.Append(piPLMCompOnCurrentInst);</strong>
		
		CATIPLMNavInstance * pNavInstanceOnCurrentChild = NULL ;
		rc = pNavEntityOnchild-&gt;QueryInterface(IID_CATIPLMNavInstance, (void**) &amp;pNavInstanceOnCurrentChild);
			
 		CATIPLMNavReference* pReferenceOnChild = NULL ;
		rc = pNavInstanceOnCurrentChild-&gt;GetReferenceInstanceOf(pReferenceOnChild);
				
		Level++;
		rc = <strong>RetrievePathOfInstancesAndLastInstRef</strong>(pReferenceOnChild,ListPLMIDAttrValueOfPathOfInst,
		                                                                     ComponentList,piNavRefOnEndRef, Level) ;
		...
		if(NULL==piNavRefOnEndRef)
		{
		   piNavRefOnEndRef = pReferenceOnChild ;
		   piNavRefOnEndRef-&gt;AddRef();
		}
	}
}	
...</pre>
				</td>
			</tr>
		</table>


<p>Here we browse through the input mode structure with generic APIs, so that 
this method will be used for the both models Logical as well Functional. </p>
<p>we browse through recursively for matching each PLM_ExternalID from each 
level. Further after matching PLM_ExternalID with instance name we append the 
instance in the Path of first element list.</p>
<p>And finally this method will fill the list of path of first instance element 
list.&nbsp; </p>
<p>The reference of last Instance (last element from the list generated above) 
returned through <code>piNavRefOnEndRef.</code></p>


		<script type="text/javascript">insertLinkToTop();</script> 


		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p align="left">The Use Case illustrates the creation of the Port to 
Port implement relation link.</p>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td vAlign="top" >[1]</td>
				<td ><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
						and Launching a CAA Use Case</A></td>
			</tr>
			<tr>
				<td vAlign="top" >[2]</td>
				<td >
                <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
                Creating a PLM Basic Batch</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[3]</td>
				<td ><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
			</tr>
		
		<tr>
			<td vAlign="top" >[4]</td>
				<td >
				<a href="CAALilUcRetrieveImplLink.htm">Retrieving Source and Targets of Logical-Functional Implement Relation</a></td>
			</tr>
			<tr>
			<td vAlign="top" >[5]</td>
				<td >
				<a href="CAALilUcCreateInstToInstImplLink.htm">Creating Instance to Instance Implement Relation Link</a></td>
			</tr>

			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Nov 2010]</td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		  <script type="text/javascript">insertCopyright();</script>
	</body>
</html>


