<html>
	<head>
		<title>Deleting Implement Relation Link</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<meta content="Microsoft FrontPage 12.0" name="GENERATOR">
		<meta content="FrontPage.Editor.Document" name="ProgId">
		<link href="../CAADocStyleSheets/caav5.css" type="text/css" rel="Stylesheet">
         <script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

        

                </head>
		
	<body  >
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Deleting Implement Relation Link </h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


				<!---------------------------------comment------------------------------------->
		<table class="abstract">
			<tr>
				<td>
					<h2>Abstract</h2>
					<p>This Use Case mainly illustrates about the deletion of an Implement Relation between 
					Logical 
					objects 
and Functional objects. This use case details all cases of Implement link type 
					deletion. 
					(Reference to Reference, Port to Port, Connection to 
					Instance, Instance to Instance). </p>
				<ul>
							<li><A href="#Learn">What You Will Learn 
                                With This Use Case</A>
							<li><a href="#UseCase">The 
                                CAALilDeleteImplLink Use Case</a>
							<ul type="disc">
								<li><a href="#What">What Does 
                                        CAALilDeleteImplLink Do</a>
								<li><a href="#How">How to Launch 
								CAALilDeleteImplLink </a>
								<li><a href="#Where">Where to Find the 
								CAALilDeleteImplLink Code</a> </li>
							</ul>
							<li><A href="#Step">Step-by-Step</A>
							<li><A href="#InShort">In Short</A>
							<li><A href="#References">References</A> </li>
						</ul>
				</td>
			</tr>
		</table>
		<!---------------------------------comment------------------------------------->
		<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>Most importantly, user learns to delete different types of Implement link between 
Logical object and Functional object. </p>
<ul>
	<li>
	Reference to Reference 
	</li>
	<li>
	Instance to Instance
	</li>
	<li>
	Port to Port 
	</li>
	<li>
	Instance to Connection
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="UseCase"></a>The CAALilDeleteImplLink
        Use Case</h2>
		<p><code><a>CAALilDeleteImplLink</a></code> is a use case of the 
        <code><a>CAALogImplLinkUseItf.edu</a></code> framework that 
			illustrates <code>CATLogicalImplementLinkUseItf</code> framework capabilities.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h3><a name="What"></a>What Does CAALilDeleteImplLink
        Do</h3>
		<p>The Use case basically talks about deletion of an Implement link 
		between Logical object 
and Functional object. </p>
<ul>
	<li>Initially we load a Logical Reference. The loading mode is &quot;Authoring&quot; 
	mode to enable to load in session all the Logical structure. The possible 
	aggregated Implement relations will be loaded too. </li>
	<li>Next we load a Functional Reference under the same condition.</li>
	<li>Further we create an object in context (OIC) for Logical object (to 
	represent the Source) as well as for Functional object (to represent the 
	Target), The object for creation of OIC is decided by case to case (RefRef/InstInst/ConInst/PortPort 
	). </li>
	<li>Before implement link deletion,&nbsp;we retrieve the count of the Source 
	objects from Target object and count Target objects from Source object. </li>
	<li>Next we delete Implement link between Source and Target OIC. </li>
	<li>Lastly, we confirm the success of the deletion of an implement link by confirming if the count of implement relation 
	Target from a Source finally is less one (-1) compared to the count prior to the implement link 
	deletion.
On similar lines, we also confirm if the count of implement relation sources from our 
	Target under consideration, is -1 compared to the count prior to the implement link 
	deletion. </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="How"></a>How to Launch CAALilDeleteImplLink</h3>
		<p>To launch <code>CAALilDeleteImplLink</code>, you will need to set up the build time environment, 
			then compile <code>CAALilDeleteImplLink<b> </b></code>along with its prerequisites, set up the run time 
			environment, and then execute the use case [<a href="#References">1</a>].&nbsp;</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a>CAALilDeleteImplLink </code><a><code><i>Repository Server User Password SecurityCtx LogicalPLMType FunctionalPLMType   ImpleLinkType&nbsp;</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -LogRef </i>
</code><a><code><i>Attribute_name1 
Attribute_value1  [Attribute_name1 Attribute_value1 ...]</i></code></a></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -FuncRef Attribute_name2 Attribute_value2 [Attribute_name2 Attribute_value2 ...]

</i></code> </p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -PLMIDLogInst PLM_ExternalID_value1 [PLM_ExternalID_value1 ... ]</i></code></p>
<p><code><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-PLMIDFuncInst PLM_ExternalID_value2 [PLM_ExternalID_value2 ... ]</i></code><a><code>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
    <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
    <th ><b>Server</b></th>
    <td >The server as Host:Port_number/URI</td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>
    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project) Choose Role as Designer( as the use case we are creating new Implement  link (the PLM object))</td>
  </tr>
 		<tr>
			<th> LogicalPLMType</th>
			<td>Logical customization name </td>
		</tr>
		<tr>
			<th > FunctionalPLMType</th>
			<td>Functional customization name</td>
		</tr>
 	<tr>
			<th> ImpleLinkType</th>
			<td>RefRef/InstInst/ConInst/PortPort </td>
		</tr>

	<tr>
    <th  ><b>Attribute_name1</b></th>
    <td>The identification attribute name for Logical ref (IDSet Attribute) </td>
  </tr>
  <tr>
    <th ><b>Attribute_value1</b></th>
    <td>The identification attribute value for Logical ref (IDSet Attribute)</td>
  </tr>
  <tr>
    <th ><b>Attribute_name2</b></th>
    <td>The identification attribute name for Functional ref (IDSet Attribute) </td>
  </tr>
	<tr>
    <th ><b>Attribute_value2 </b></th>
    <td>The identification attribute value for Functional Ref (IDSet Attribute)</td>
  </tr>
  	<tr>
    <th ><b>PLM_ExternalID_value1 </b></th>
    <td>The PLMExtenalID value list for Path of first inst for Logical Instance</td>
  </tr>

	<tr>
    <th ><b>PLM_ExternalID_value2 </b></th>
    <td>The PLMExtenalID value list for Path of first inst for Functional Instance</td>
  </tr>

  </table>

<p>The input model for this use case is retrieved by importing the <code>
CAALilDeleteImplLink</code><a><code>.3dxml</code></a> file which 
located at:</p>
<table id="table15" >
    <tr>
      <td width="972"><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\InputData</code></td>
    </tr>
</table>
<p >CAALilDeleteImplLink.3dxml this 3D XML file contains the Logical 
Root Reference and Functional Root Reference with the
following attributes:</p>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALilDeleteImplLink_Log_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
<ul>
  <li><a><code>PLM_ExternalID</code></a>:
    CAALilDeleteImplLink_Func_Root</li>
  <li><a><code>Version</code></a>:
    ---</li>
</ul>
	<p >And the Instance names inputs are as below as per case</p>
<p >For case <strong>InstInst</strong> and for case <strong>ConInst</strong></p>
<ul>
  <li><a><code>PLM_PLM_ExternalID_value1</code></a>:
    CAALilDeleteImplLink_Func_Child1.1</li>
	<li><a><code>PLM_PLM_ExternalID_value2</code></a>:
    CAALilDeleteImplLink_Log_Child1.1</li>
</ul>
	<p >For case<strong> PortPort</strong></p>
<ul>
  <li><a><code>PLM_PLM_ExternalID_value1</code></a>:
    CAALilDeleteImplLink_Func_Child1.1&nbsp; CAALilDeleteImplLink_Func_Child2.1</li>
	<li><a><code>PLM_PLM_ExternalID_value2</code></a>:
    CAALilDeleteImplLink_Log_Child1.1</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<h3><a name="Where"></a>Where to Find the CAALilDeleteImplLink
        Code</h3>
<p>The <code>CAALilDeleteImplLink<b> </b></code>use case is defined at the 
location:</p>
<table >
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAALogImplLinkUseItf.edu\CAALilDeleteImplLink.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h2><a name="Step"></a>Step-by-Step</h2>
		<ul >
			<li><a href="#Prolog">Prolog</a><li>
						<a href="#Load the Product Reference And Logical Reference in the session">Load the 
						Logical Reference And Functional Reference in the session
						</a> </li>
			<li>
			<a href="#Create the two Object in context (one for the source, and one for the target)">Create the two Object in context (one for the source, and one for the target)</a></li>
			<li>
			<a href="#Retrieve the Implement link manager">Retrieve the Implement  link manager</a></li>
			<li>
			<a href="#Check the Count of Number of source from target and Target from source">Check the Count of Number of source from target and Target from 
			source.</a></li>
			<li>
			<a href="#Create Instance to Instance Implement link">Delete Implement link </a></li>
			<li>
			<a href="#Check the Count of Number of source from target and Target from source2">Check the Count of Number of source from target and Target from 
			source.</a></li>
			<li><a href="#Epilog">Epilog</a></li>
	</ul>
    <script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Prolog"></a>Prolog&nbsp;</h3>
<p>The <code>CAALilDeleteImplLink</code> use case begins by creating a 
session and connecting to the Input Repository  with an 
appropriate role (Designer, in this case). The Use Case&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
[<a href="#References">2</a>] deals with Opening and Closing a PLM Session.</p>
		<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
        <a name="Load the Product Reference And Logical Reference in the session">
		</a>Load the Logical Reference And Functional Reference in the session</h3>
		<p>We begin with by retrieving the <code>Identificator</code> 
		of input Logical Reference and Functional Reference. Further we load the 
		Logical Reference and Functional Reference in the session. For details of 
		loading Reference in session refer [<a href="#References">3</a>] use case. </p>
	
<script type="text/javascript">insertLinkToTop();</script> 

<h3>
<a name="Create the two Object in context (one for the source, and one for the target)">
</a>Create two Object in context (one for the source, and one for the target)</h3>




<p>Now we will create object in context for Logical object 
(<code>piOmbObjCtxOnLogicalObject</code>) and Functional object (<code>piOmbObjCtxOnFunctionalObject</code>). Here we handle all types </p>
<ul>
	<li>Reference to Reference (RefRef) - In this case we create OIC for two 
	Reference objects in between Implement link exist (Logical reference and 
	Functional reference [<a href="#References">5</a>]) </li>
	<li>Instance to Instance (InstInst) - In this case we create OIC for two 
	Instance objects in between Implement link exist (Logical instance and 
	Functional Instance [<a href="#References">6</a>]) </li>
	<li>Port to Port (PortPort) - In this case we create OIC for two Port 
	objects in between Implement link exist (Logical Port and Functional Port 
	(Flow) [<a href="#References">7</a>] ) </li>
	<li>Connection to Instance (ConInst) - In this case we create OIC for 
	Logical Instance object and Functional Connection object [<a href="#References">8</a>]. 
	Implement link is exist between these two objects.&nbsp; </li>
</ul>


		<script type="text/javascript">insertLinkToTop();</script> 
<h3 ><a name="Retrieve the Implement link manager"></a>Retrieve the Implement link manager</h3>
	<p>Now here we proceed to retrieve Implement link manager. This Implement 
	manager will provide services to manage the Implement link.&nbsp; </p>
		<table class="code" id="Table37">
			<tr>
				<td><pre>...
   <strong>CATILogicalImplementLinkManager</strong>* piImplementLinkManager = NULL;
   hr = <strong>CATLogicalImplementLinkManagerProvider</strong>::<strong>GetImplementLinkManager</strong>(piImplementLinkManager);
...</pre>
				</td>
			</tr>
		</table>
		<p >A call to <code>GetImplementLinkManager</code> of <em>CATLogicalImplementLinkProvider</em>
		returns the Logical Implement manager <code>piImplementLinkManager</code>.</p>
	<script type="text/javascript">insertLinkToTop();</script> 
		<h3 >
		<a name="Check the Count of Number of source from target and Target from source">
		</a>Check Count of source from target and Target from 
		source</h3>
	<p>Now we retrieve count of targets associated with source Object in 
	context. Then further we retrieve count of Source from Target object in 
	context. </p>
		<table class="code" id="Table44">
			<tr>
				<td><pre>...		
   int countTargetBeforeDeletion = 0; 
   hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalObject,countTargetBeforeDeletion);
   ...
   int countSourceBeforeDeletion = 0;
   hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctionalObject,countSourceBeforeDeletion);
 ...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a Count of Target [<a href="#References">4</a>]. </p>
<p>A call to <code>RetrieveCountOfSource </code>returns a count of Source [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Create Instance to Instance Implement link"></a>Delete Implement link </h3>

<p>Now we will delete the Implement link between the 
created Logical Object OIC as source and Functional object OIC as Target. </p>
				<table class="code" id="Table37">
			<tr>
				<td><pre>...
   hr = piImplementLinkManager-&gt;<strong>DeleteImplementRelation</strong>(piOmbObjCtxOnLogicalObject,piOmbObjCtxOnFunctionalObject);
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>DeleteImplementRelation</code> of <em>CATILogicalImplementLinkManager</em> on 
<code>piImplementLinkManager</code> deletes an Implement link between two input 
Objects (<code>piOmbObjCtxOnLogicalObject, piOmbObjCtxOnFunctionalObject</code>).</p>


<script type="text/javascript">insertLinkToTop();</script> 
<h3 >
		<a name="Check the Count of Number of source from target and Target from source2">
		</a>Check Count of source from target and Target from source</h3>

<p>Now we will again retrieve count of Source from Target and vice versa. Here we expect the count is less one (1). Since we have 
deleted Implement link between 
Target object and Source object, So count must be less one (1). </p>
				<table class="code" id="Table37">
			<tr>
				<td style="width: 789px"><pre>...
   hr = <strong>RetrieveCountOfTargets</strong>(piImplementLinkManager,piOmbObjCtxOnLogicalObject,countTargetAfterDeletion);
 	
   hr = <strong>RetrieveCountOfSource</strong>(piImplementLinkManager,piOmbObjCtxOnFunctionalObject,countSourceAfterDeletion);
 ...
   if ((countTargetBeforeDeletion != (countTargetAfterDeletion+1)) &amp;&amp; (countTargetBeforeDeletion != 0)) return 1;

   if ((countSourceBeforeDeletion != (countSourceAfterDeletion+1)) &amp;&amp; (countSourceBeforeDeletion != 0)) return 1;
...</pre>
				</td>
			</tr>
		</table>
<p>A call to <code>RetrieveCountOfTargets </code>returns a Count of Target [<a href="#References">4</a>]. </p>
<p>A call to <code>RetrieveCountOfSource </code>returns a count of Source [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script> 
	<h3><a name="Epilog"></a>Epilog</h3>
<p >The <code>CAALilDeleteImplLink</code> use case ends by simply 
saving and closing the PLM session. Since all use cases necessarily conclude by 
saving and closing the PLM session, we have a dedicated article on this topic namely &quot;Creating a
Basic PLM Batch&quot; [<a href="#References">3</a>].&nbsp;</p>

		


		<script type="text/javascript">insertLinkToTop();</script> 


		<!---------------------------------comment------------------------------------->
		<h2><a name="InShort"></a>In Short</h2>
<p >The Use Case illustrates the deletion of the implement relation link 
of following types between Logical object and Functional object</p>
<ul>
	<li>
	Reference to Reference 
	</li>
	<li>
	Instance to Instance
	</li>
	<li>
	Port to Port 
	</li>
	<li>
	Instance to Connection
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script> 
		<!---------------------------------comment------------------------------------->
		<h2><a name="References"></a>References</h2>
		<table>
			
			<tr>
				<td vAlign="top" >[1]</td>
				<td ><a href="../CAADocUseCases/CAADocRunSample.htm">Building 
						and Launching a CAA Use Case</A></td>
			</tr>
			<tr>
				<td vAlign="top" >[2]</td>
				<td >
                <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
                Creating a PLM Basic Batch</a></td>
			</tr>
			<tr>
				<td vAlign="top" >[3]</td>
				<td ><a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
			</tr>
			<tr>
			<td vAlign="top" >[4]</td>
				<td >
				<a href="CAALilUcRetrieveImplLink.htm">Retrieving Source and Targets of Logical-Functional Implement Relation</a></td>
			</tr>
				

<tr>
				<td vAlign="top" >[5]</td>
				<td ><a name="Top2" href="CAALilUcCreateRefToRefImplLink.htm">Creating Reference to Reference Implement Relation Link</a></td>
			</tr>

<tr>
				<td vAlign="top" >[6]</td>
				<td ><a name="Top1" href="CAALilUcCreateInstToInstImplLink.htm">Creating Instance to Instance Implement Relation Link 
				</a> </td>
			</tr>
			<tr>
				<td vAlign="top" >[7]</td>
				<td ><a name="Top0"></a>
				<a name="Top0" href="CAALilUcCreatePortToPortImplLink.htm">Creating Port to Port Implement Relation Link</a> </td>
			</tr>

<tr>
				<td vAlign="top" >[8]</td>
				<td ><a href="CAALilUcCreateConToInstImplLink.htm">Creating 
				Connection to Instance Implement Relation Link</a></td>
			</tr>


		
			</table>
		
		<!---------------------------------comment------------------------------------->
		<h2><a name="History"></a>History</h2>
		<table >
			<tr>
				<td vAlign="top">Version: <strong>1</strong> [Nov 2010]</td>
				<td vAlign="top">Document created</td>
			</tr>
			</table>
		<script type="text/javascript">insertLinkToTop();</script>
		<!---------------------------------comment------------------------------------->
		  <script type="text/javascript">insertCopyright();</script>
	</body>
</html>


