<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Defining and Using AMD Modules</title>  
</head>
<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Defining and Using AMD Modules</h1>
		
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes a basic use case demonstrating AMD modules. It is the use case associated with the technical article you have in reference [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAWebAppsOperationApp Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAWebAppsOperationApp Do</a></li>
				<li><a href="#How">How to Launch CAAWebAppsOperationApp</a></li>
				<li><a href="#Where">Where to Find the CAAWebAppsOperationApp Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create AMD modules, and how to use them. 

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAWebAppsOperationApp Use Case</h2>
<p>CAAWebAppsOperationApp is a use case of the CAAWebAppsJS.edu framework that illustrates AMD module capabilities. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAWebAppsOperationApp Do</h3>
<p>The AMD pattern has been implemented through a very basic <b>3D</b>EXPERIENCE platform widget, the "CAA Computation App". This widget displays the result of hard coded operations, which
 enables us to stay focused on the main purpose of the use case. </p>
<table> 
    <tr>
		<td> <img alt="mkmk-g" src="images/CAAWebAppsucAMDDo1.png"/></td>
    </tr>
</table> 
 <p>Just above, you see the widget like it appears when loaded from the 3D Dashboard. The body displays the result of the check (is the input number positive or not) applied to -3. The check is performed by a function 
 exposed by the <code>DS/CAAWebAppsOperationBase/basic/LogicOp</code>  AMD module. </p>
 <p>Then  the end user is invited to change the operation by a selection in the Preference menu. Two more operations are hard-coded:<p>
 <table> 
    <tr>
		<td><img alt="mkmk-g" src="images/CAAWebAppsucAMDDo2.png"/></td>
	</tr>
</table> 
<p> <b>Nfirst</b>, the sum of the first N natural numbers, and <b>Abs</b>, the absolute value of a number. Once choosen, the <code>Refresh</code> event is triggered by the widget, and in the callback associated with this event 
the appropriate operation is performed with an hard-coded value.</p> 
 <table> 
    <tr>
		<td><img alt="mkmk-g" src="images/CAAWebAppsucAMDDo3.png"/></td>
	</tr>
</table> 
<p>With Nfirst, your can see the result for the first ten natural numbers.</p>
<table> 
    <tr>
		<td><img alt="mkmk-g" src="images/CAAWebAppsucAMDDo4.png"/></td>
	</tr>
</table> 
<p>And with Abs, your can see the result with -6 as input of the computation. </p>
<p>The positive check, the absolute value of a number, the sum of the first N natural numbers are operations encapsulated in JavaScript functions. Instead global functions, we have used the <b>define</b> prototyp,
 to create AMD modules.</p>
<ul>
<li><code>DS/CAAWebAppsOperationBase/basic/UnitaryOp</code> is the name of the AMD module exposing these two mathematical functions:
<ul>
<li><b>abs(x)</b>, returns the absolute value of x. This function uses itself another function, <i>isPositive</i>, a function exported by the <code>DS/CAAWebAppsOperationBase/basic/LogicOp</code> module</li>
<li><b>nFirst(x)</b>, returns the sum of the first N natural numbers. This function uses the <i>add</i> function exported by <code>DS/CAAWebAppsOperationBase/basic/BinaryOp</code>  module</li>
</ul>
</li>
<li><code>DS/CAAWebAppsOperationBase/complex/ComplexOp</code> is the name of the AMD module exposing one function.
<ul>
<li><b>check1(x)</b>, returns a string whose the value is depending on the value of x. If x is positive it returns a string based on the <i>oK</i> function,
otherwise the string is based on the <i>error</i> function. <i>oK</i> and  <i>error</i> functions are defined in the <code>DS/CAAWebAppsOperationMsg/MessageOp</code> module.</li>            
</ul>
</li>
</ul> 
<p>Those basic functions, without connection with the reality, have been designed to show some basic AMD module features like functions with or without other required functions, 
functions in the same mweb module, or not. The step by steps shows how they have been writen, and how they are used. <p>
      
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAWebAppsOperationAppp</h3>
<p>To launch CAAWebAppsOperationApp, you will need to set up the build time environment, then 
compile CAAWebAppsOperationApp along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">2</a>].</p>
      
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAWebAppsOperationApp Code</h3>
<p>The CAAWebAppsOperationApp use case is made of several files located in three mweb [<a href="#References">3</a>] modules of the 
    CAAWebAppsJS.edu framework:</p>
    <ul>
        <li>CAAWebAppsOperationApp mweb module</li>
        <ul> 
            <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationApp.mweb\src\CAAWebAppsOperationApp.html</code>, the widget html web page</li>
        </ul>
        <li>CAAWebAppsOperationBase mweb module</li>
         <ul> 
         <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationBase.mweb\src\basic\BinaryOp.js</code>, the javascript file containing the <code>DS/CAAWebAppsOperationBase/basic/BinaryOp</code> AMD module</li>
         <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationBase.mweb\src\basic\LogicOp.js</code>, the javascript file containing the <code>DS/CAAWebAppsOperationBase/basic/LogicOp</code> AMD module</li>
         <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationBase.mweb\src\basic\UnitaryOp.js</code>, the javascript file containing the <code>DS/CAAWebAppsOperationBase/basic/UnitaryOp</code> AMD module</li>
         <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationBase.mweb\src\complex\ComplexOp.js</code>, the javascript file containing the <code>DS/CAAWebAppsOperationBase/complex/ComplexOp</code> AMD module</li>
         </ul> 
        <li>CAAWebAppsOperationMsg mweb module</li>
          <ul> 
             <li> <code>InstallRootFolder\CAADoc\CAAWebAppsJS.edu\CAAWebAppsOperationMsg.mweb\src\MessageOp.js</code>, the javascript file containing the <code>DS/CAAWebAppsOperationMsg/MessageOp</code> AMD module</li>
         </ul> 
    </ul>
  <p>where InstallRootFolder is the folder where the API CD-ROM is installed.</p> 
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAWebAppsOperationApp:</p>
    <ul>
        <li><a href="#Step1">Creating AMD modules</a></li>
        <li><a href="#Step2">Requiring AMD module into the Web App</a></li>  
        <li><a href="#Step3">Using AMD module functions</a></li>  		
    </ul>
 
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating AMD modules</h3>
<p>In this section are detailed the different AMD modules, each one having a specifity.</p>
    <ul>
        <li><a href="#part1-1">The AMD Module without dependencies</a></li>
         <li><a href="#part1-2">The AMD Module with dependencies defined in same mweb module</a></li>
         <li><a href="#part1-3">The AMD Module with dependencies defined in another mweb module</a></li>

    </ul>
 <h4><a name="part1-1"></a>The AMD Module without dependencies</h4>
    <p>Let's start by the basic case where the module is without dependencies. Just below you have a typical module structure:</p>
    <pre class="code">
 /* global define */
 <b>define</b>('<b>DS/CAAWebAppsOperationMsg/MessageOp</b>', 
   function () {
	
   ...
	
   'use strict';

   var <b>exports</b>;

   exports = {
   ...
   };
   return <b>exports</b>;
});
</pre>
<p>It begins with <code>define</code>, the function defining the module, continues with the definition of a local variable, <code>exports</code>, and ends by the export of this object, 
with the <code>return</code> instruction.  </p>
<p>In this case <code>exports</code> is a key/value structure, where the value associated with each key is a function. </p>
    <pre class="code">
exports = {
   <b>oK</b> : function (text) { return &quot;YES,&quot; + text ; } ,
   <b>error</b> : function (text) { return &quot;NO,&quot; + text ;
} </pre>


<p>Let's notice three important points: </p>
<ul>
<li><code>/*global define */</code> is an instruction for the JS validator. It states define is global on purpose. </li>
<li>The name of the AMD module respects the naming guides [<a href="#References">4</a>], <code>'DS'</code>  ( for DS code) + <code>'CAAWebAppsOperationMsg'</code> (for the mweb module name), + <code>'MessageOp'</code>, the JavaScript file name.</li>
<li>The <code>"use strict"</code> instruction.  By using it, it prevents you to forget the <code>var</code> before functions and objects. If you forget "var", you define global elements, instead local ones, and by consequence you do not have anymore 
a code encapulation. </li>
</ul>
<p><i> <a name="Logic"> </a>Logic.js </i>, exporting the <i>isPositive</i> function,  has the same structure as <i>MessageOp.js</i> : </p>
    <pre class="code">
 /* global define */
 <b>define</b>('DS/CAAWebAppsOperationBase/basic/<b>LogicOp</b>' , function () {
   ...
	
   'use strict';

   var <b>exports</b>;

   exports = {
        <b>isPositive</b> : function (x) {
	 if ( x &gt;= 0 ) {
	   return true ; 
 	 } else {
	   return false ;
	 }
        }
   };
   return <b>exports</b>;
});</pre>
    <p>The name of the AMD module is&nbsp; 'DS'&nbsp; ( for DS code) + 'CAAWebAppsOperationBase'&nbsp; , the mweb module name, and '<i>LogicOp</i>', the javascript file name.&nbsp; </p>
 <h4><a name="part1-2"></a>The AMD Module with dependencies in the same mweb module</h4>
    
    <p>The <i>BinaryOp.js</i> file </p>
    <pre class="code">
 /* global define */
 <b>define</b>('<b>DS/CAAWebAppsOperationBase/basic/BinaryOp</b>', 
       ['DS/CAAWebAppsOperationBase/basic/LogicOp'],
   function (<b>LogicOp</b>) {
    
   'use strict';

   ...
</pre>
    <p>In first, you still have the name of the AMD module : <code>'DS'</code> (for DS  code) + <code>'CAAWebAppsOperationBase'</code> (the mweb module name) + <code>'/basic'</code> (the sub-directory below src),
	&nbsp; and finally <code>'/BinaryOp</code>',
	the javascript file name without its js extension. See <a href="#Where" >Where to Find the CAAWebAppsOperationApp Code</a> section, where the complete path of the BinaryOp.js file is given.</p>
    <p>In second place is the list of pre-requisites AMD modules.&nbsp; <code>DS/CAAWebAppsOperationBase/basic/LogicOp</code> exports an object which is used by the <code>LogicOp</code>. </p>
    <p>In third place is the anonymous function whose the argument (<i>LogicOp</i>) is the representant of the object exported by the <i>LogicOp</i> AMD module. </p>
    <p>This&nbsp; BinaryOp AMD module exports two functions, <i>add</i> and <i>sub</i>. </p>
<pre class="code">
 ...
   var exports ;
   exports = {
       <b>add</b> : function (x,y) {
           return x+y ;
       },

       <b>sub</b> : function (x,y) {
          if ( <b>LogicOp</b>.IsPositive(x-y) )  {
             return x-y ;
          } else {
             return y-x ;
          }
        } 
    } ;
   return exports;
});</pre>
    <p>You can observe that  the <i>sub</i> function uses the argument (<i>LogicOp)</i>  of the anonymous function  to call the <a href="#Logic"> <i>IsPositive</i></a> function.&nbsp; </p>
    <p>With the next example, <a name="Unitary"></a><i>UnitaryOp</i> , there are 2 dependencies:</p>
    <pre class="code">
/*global define */
<b>define</b>('DS/CAAWebAppsOperationBase/basic/<b>UnitaryOp</b>',[
	'DS/CAAWebAppsOperationBase/basic/BinaryOp',
	'DS/CAAWebAppsOperationBase/basic/LogicOp'
] , function (<b>binaryOp, logicOp</b> ) {

	'use strict';

	var exports;
	
	exports = {
	      
		<b>nFirst</b> : function (x) {
			if ( x &gt; 0 ) {
				var value=0 ;
				for ( var i= 1 ; i &lt= x ; i++  ) { value = <b>binaryOp.</b>add(value,i); }
				return value;
			} else {
				return -1 ;
			}
		},	 
		<b>abs</b> 	: function (x) {
			if ( <b>logicOp.i</b>sPositive(x) ) {
				return x ;
			} else {
				return -x;
			}
		}
	} ;
	
	return exports;
});</pre>
  <h4><a name="part1-3"></a>The AMD Module with dependencies defined in another mweb module</h4>
 <p> The  <i>ComplexOp</i> AMD module exports the <i>Check1</i> function </p>
<pre class="code">
/* global define */
<b>define</b>('DS/CAAWebAppsOperationBase/complex/<b>ComplexOp</b>',[
	'DS/CAAWebAppsOperationMsg/MessageOp'
] , function ( messageOp ) {
    'use strict' ;

    var exports;

    exports = {
      <b> check1 </b>: function (x) {
	if ( x >=0 ) {
	   return ( <b>messageOp.oK</b>(" The input is positive") );
	}else {
            return ( <b>messageOp.error</b>(" The input is not positive ") );
	}
       } 
    } ;  
    return exports;
});
</pre>
<p>In this example, the AMD module (<i>ComplexOp</i>) uses another AMD module (<a href="#part1-1"><i>MessageOp</i> </a>) which is defined in another mweb (<i>CAAWebAppsOperationMsg</i>) 
than itself (<i>CAAWebAppsOperationBase</i>), both in the same fw (CAAWebAppsJS.edu).&nbsp; The links between the mweb module are not declared, so the Imakefile file of the <i>CAAWebAppsOperationBase</i> module 
has not been modified for this purpose. But, if the mweb module containing the dependency was in another fw, the identitycard of CAAWebAppsJS.edu would have been modified to declare framework links. </p>
<h3><a name="Step2"></a>Requiring AMD module into the Web App</h3>
 
    <p>Just below the structure of the script section of the widget app  html file :</p>
<pre class="code">
...
&lt;script&gt;
    /* global widget , require */
    <b>require</b>( ['DS/CAAWebAppsOperationBase/complex/ComplexOp',
		      'DS/CAAWebAppsOperationBase/basic/UnitaryOp'], <b>function</b> (complexOp,unitaryOp) { 
       'use strict'; 
       <a href="#Step3">See Using AMD module functions section </a>
    <b>} ); </b>		
&lt;/script&gt;
...  </pre>

   <p>We use the <i>require</i> function to load and execute the required AMD modules, here <code>DS/CAAWebAppsOperationBase/complex/ComplexOp</code> and  
   <code>DS/CAAWebAppsOperationBase/basic/UnitaryOp</code>. 
     Each required module is  represented by an argument of the anonymous function, <i>complexOp</i> and <i>unitaryOp</i> respectively.<p>
	 
	 <p>The core of the anonymous function, see below the <a href="#Step3">Using AMD module functions</a> section, is executed when the required modules are loaded, and executed, which can be later, but once entered into the function,
	 <i>complexOp</i> and <i>unitaryOp</i>, the arguments, are valid. </p>

	<p>Note two important lines in term of JavasScript code writing:</p>
	<ul>
	   <li><code>use strict; </code>, to force the variable declaration before their use, which prevent global variables, </li>
	   <li><code>/* global require, widget */</code> to inform any JS code validator (like JSLint), that require and widget are global, but on purpose.</li>
	</ul>
<h3><a name="Step3"></a>Using AMD module functions</h3>
<p>The core of the widget is as follows:</p>
<pre class="code">
    ...
    var myWidget = {	
        <b>onLoad</b>:function () {	
           <a href="#onLoad">onLoad</a>
        },
        <b>onRefresh</b>:function () {	
           <a href="#onRefresh">onRefresh</a>
        }
    };
    widget.addEvent('onLoad', myWidget.onLoad);
    widget.addEvent('onRefresh', myWidget.onRefresh);
    ...</pre>
    <p>The widget defines two callbacks, one for the <i>OnLoad</i> event, and one for the the&nbsp; <i>onRefresh</i> event, each one using the arguments of the anonymous function to 
fill up the widget's body contents.</p>
    <a name="onLoad"></a><p>The <b>onLoad</b> event :</p>
    <pre class="code">
 ...
    <b>onLoad</b>:function () {	
        var textToDisplay='Is -3 positive ? ' + <b>complexOp.check1</b>(-3) ;
        textToDisplay = textToDisplay + '&lt;/br&gt;&lt;/br&gt; Select the Preference menu to change the operation';
        <b>widget.body.innerHTML</b>=textToDisplay;             		 
    },
...  </pre>
 <P><a href="#part1-3"><i>check1</i></a> is a function of  <code>complexOp</code>, the argument of the anonymous function. It returns a text to display. </p>
	 </p>
    <a name="onRefresh"></a><p>The <b>onRefresh</b> event :</p>    
    <pre class="code">
 ...
    <b>onRefresh</b>:function () {	     
	var operation= widget.getValue('OperationChoice');
	var value= -1 ;
	var textOp='' ;
	if ( operation == 'NFirst' )  {
	   textOp='Sum first 10 numbers';
	   value=<b>unitaryOp.nFirst(10)</b>; 							   
	} 
	if ( operation == 'Abs' )  {
	   textOp='|-3|';
	   value=<b>unitaryOp.abs(-3)</b>; 					
	}
						
	var textToDisplay="The operation " + textOp + ' is = ' + value ;
	textToDisplay = textToDisplay + "&lt;/br&gt;&lt;/br&gt; Select the Preference menu to change the operation"
	<b>widget.body.innerHTML</b>=textToDisplay;     		 
    }
...  </pre>
    <p><a href="#Unitary"><i>nFirst</a> and  <a href="#Unitary">abs</a> </i>are functions both exposed by the DS/CAAWebAppsOperationBase/basic/UnitaryOp AMD module, and called with
<code>unitaryOp</code>, the argument of the anonymous function.</p>
    <p><b>Note:</b></p> 
	<p>In this basic example, the requirement for the two modules is invoked on first thing of the script section. But since <code>complexOp</code> is only used by the onLoad function, and
	<code>unitaryOp</code> by the onRefresh function, the appropriate require could have been made inside each function. In a more complex configuration, the loading/executing performance 
	must be taken into account for the place of the requirement.</p>
	<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to use the <i>require</i> and <i>define</i> functions to use and create AMD modules. You do not need  to include external library defining these 2 functions, they are both already loaded by 3DD.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References&nbsp; </h2>
<table class="reference">
    <tr>
		<td>[1]</td>
		<td><a href="CAAWebAppsTaAMDConcepts.htm">AMD Concepts</a></td>
	</tr>
    <tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Web App Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>mkmk and mweb</td>
	</tr>
    <tr>
		<td>[4]</td>
		<td><a href="CAAWebAppsTaNamingRules.htm">JavaScript Naming Guides</a></td>
	</tr>
<tr>
		<td>[5]</td>
		<td><a href="../CAAWebAppsJSRef/CAAWebAppsQrWidgetClass.htm">Widget Class Reference</a></td>
	</tr>
	
    </table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
