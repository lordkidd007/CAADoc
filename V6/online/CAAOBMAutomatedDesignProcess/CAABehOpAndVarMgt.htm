<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Managing Variables and Operation States for Operation Commands</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Variables and Operation States for Operation 
		Commands</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case shows how to code a CAA command launched by a command Operation 
		and also how to manipulate the variables of DPC Objects (operations or types).</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAOBMInterfacesCmd Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAOBMInterfacesCmd Do</a></li>
				<li><a href="#How">How to Launch CAAOBMInterfacesCmd</a></li>
				<li><a href="#Where">Where to Find the CAAOBMInterfacesCmd Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to control the execution of a <strong>Command 
Operation</strong>. It is illustrated through a CAA command called by a <strong>
Command Operation</strong>. The control of the states of the Operation will guaranty 
the synchronicity of the Operation and the CAA command in order to avoid any side 
effects. It also demonstrates how to access to the variables (attributes) of an 
Operation or of a technological object and how to manage them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAOBMInterfacesCmd Use Case</h2>
<p>CAAOBMInterfacesCmd is a use case of the CAAOBMInterfaces.edu framework that 
illustrates the CATOBMInterfaces and the CATBehaviorInterfaces frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAOBMInterfacesCmd Do</h3>
<p>First, the CAAOBMInterfacesCmd Use Case is based on pre-existing data:</p>
<ul>
	<li>You must create a new Knowledge component, containing a DPC type &quot;Type&quot; 
	(also called technological object) and a set of Operations as shown below.
	<p>You can import it from CAAOBMInterfaces.edu\CNext\resources\graphic\CAAOBMInterfaces.CATfct</p>
	<p><img alt="DPC type Type" src="Images/CAABeh1.gif"/></p>
	</li>
	<li>A product with a 3D Part and publications. You can import this product from 
	CAAOBMInterfaces.edu\CNext\resources\graphic\CAAOBMInterfacesProduct.CATProduct.
	<p>
	<img alt="CAAOBMInterfacesProduct.CATProduct" src="Images/CAABehProduct.jpg"/></p>
	</li>
</ul>
<p>Then, you will have to type the root product with the DPC type/technological 
object.</p>
<p>The DPC type has a User Operation called &quot;<strong>SequentialCombination</strong>&quot; 
containing itself one command Operation called &quot;<strong>Command</strong>&quot; which 
is dedicated to launch a CAA Command. The CAAOBMInterfacesCmd use case implements 
this command which launches a simple dialog dedicated to valuate some variables 
of the DPC type and of its operations.</p>
<p>In the command code, you will see how to control the execution of the operation 
once it has launched the CAA Command in order to synchronize both so that the operation 
does not finish before the end of its command.</p>
<p>In the dialog code, you will see what kind of action you can have on the attributes 
of DPC Objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAOBMInterfacesCmd Code</h3>
<p>The CAAOBMInterfacesCmd use case is made of classes and resources located in 
the CAAOBMInterfacesCmd.m module of the CAAOBMInterfaces.edu framework: <code>InstallRootFolder\CAADoc\CAAOBMInterfaces.edu\CAAOBMInterfacesCmd.m</code>
</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>These classes and interfaces are:</p>
<table>
	<tr>
		<th>Classes and Resources</th>
		<th>Descriptions</th>
	</tr>
	<tr>
		<td><em>CAAOBMInterfacesCommand</em></td>
		<td>CAA Command description class</td>
	</tr>
	<tr>
		<td><em>CAAOBMInterfacesDlg</em></td>
		<td>Dialog description class</td>
	</tr>
	<tr>
		<td><em>CAAOBMInterfaces.CATfct</em></td>
		<td>V5 Catalog describing the DPC type with its attributes and operations</td>
	</tr>
	<tr>
		<td><em>CAAOBMInterfacesProduct.CATProduct</em></td>
		<td>V5 Product to be typed</td>
	</tr>
	<tr>
		<td><em>CAAOBMInterfacesPart.CATPart</em></td>
		<td>V5 Part contained in the Product</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAOBMInterfacesCmd</h3>
<p>Import the CAAOBMInterfaces.CAfct file and create the associated workbench with 
the dedicated command in the DPC toolbar.</p>
<p><img alt="DPC Toolbar" src="Images/CAABehHammer.jpg" width="50" height="287"/>
<img alt="Workbench Creation" src="Images/CAABehWkb.jpg" width="540" height="388"/></p>
<p>When done, insert the Knowledge Component in a Knowledge Application and the 
Application in a Configuration. Then, deploy the Knowledge Configuration.</p>
<p>Open the CAAOBMInterfacesProduct product previously imported.</p>
<p>Start the CAAUseCase workbench.</p>
<p>Select the product and click on this icon
<img alt="Type Icon" src="Images/CAABehType.jpg" width="49" height="37"/> to type 
the product with the DPC type.</p>
<p>As a result you can see :
<img alt="Product Typed bu the Technological Object" src="Images/CAABehTypedProduct.jpg" width="339" height="229"/></p>
<p>The product is now typed by the technological object.</p>
<p>To launch the execution of the use case itself , executes the sequence of Operations 
of the extended product.</p>
<p>To do so, from its submenu, select the command &quot;&lt;<em>Product Name</em>&gt;&quot;-&gt;SequentialCombination</p>
<p>
<img alt="SequentialCombination" src="Images/CAABehExeSequence.jpg" width="561" height="607"/></p>
<p>It opens the following dialog dedicated to manipulate variables:
<img alt="CATObmInterfaces Manipulation Dialog" src="Images/CAABehDialog.jpg" width="448" height="181"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ol>
	<li><a href="#Step1">Creating a CAA Command Dedicated to Be Launched by a Command 
	Operation</a></li>
	<li><a href="#Step2">Managing the States of the Command Operation from the CAA 
	Command</a></li>
	<li><a href="#Step3">Managing the Variables of DPC Objects</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a CAA Command Dedicated to Be Launched by a Command Operation</h3>
<p>A DPC type may have operations of different types. One of them is the Command 
Operation which launches a CAA command. This one is a CATStateCommand and in argument 
of its constructor you must absolutely precise the operation. This is to allow the 
communication between the operation and its command in order to be synchronous during 
the execution of the command.</p>
<p>Its header file CAAOBMInterfacesCommand.h is as follows.</p>
<pre class="code">class CAAOBMInterfacesCommand: public CATStateCommand
{

DeclareResource( CAAOBMInterfacesCommand, CATStateCommand )

public:
CAAOBMInterfacesCommand();
CAAOBMInterfacesCommand(CATBaseUnknown *iOperation);
virtual ~CAAOBMInterfacesCommand();
...
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Managing the States of the Command Operation from the CAA 
Command</h3>
<p>Most of the time, the operations of a technological object are executed sequentially. 
In this Use Case, one of the operations is a Command Operation launching a CAA command. 
If we don&#39;t take the control of the execution of the command operation during the 
execution of the CAA command, the DPC engine will continue to execute the sequence 
of operations. This can be problematic if one of the operation following the Command 
Operation is waiting as an input, an output of the CAA command.</p>
<p>That&#39;s why we strongly advise you to control the operations thanks to the <em>
CATIBehOperationManagement</em> interface.</p>
<p>First, the constructor of the CAA command has to look like this:</p>
<pre class="code">CAAOBMInterfacesCommand::CAAOBMInterfacesCommand(CATBaseUnknown *iOperation) :
CATStateCommand (&quot;CAAOBMInterfacesCommand&quot;, CATCommandMsgRequestSharedMode) 
{
_Operation = iOperation;
if(_Operation) 
    _Operation-&gt;AddRef();

CATIBehOperationManagement_var Manage(_Operation);

Manage-&gt;Start();

...

Manage-&gt;Suspend();
}</pre>
<p>The operation in argument must be stored in a data member of the command to be 
always accessible. From the operation, get a handler on the <em>CATIBehOperationManagement</em>. 
With this API, you will be able to start, suspend, cancel or finish the operation. 
In the constructor, start the operation at the beginning and suspend it at the end.</p>
<p>Do exactly the same in the BuildGraph, Activate and Desactivate methods and in 
any other methods you will create in your own command.</p>
<p>The call to the <code>Start</code> and <code>Suspend</code> methods of the
<em>CATIBehOperationManagement</em> interface have to bracket the code of these 
methods.</p>
<p>The <code>BuildGraph</code> method defines the state chart of the command and 
instanciates the dialog to manage the attributes of the DPC Objects. The Command 
Operation is passed in argument of the dialog constructor.</p>
<p>The Cancel method of the command is called at the end, just before its destruction.</p>
<pre class="code">CATStatusChangeRC CAAOBMInterfacesCommand::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
CATIBehOperationManagement_var Manage(_Operation);
...
Manage-&gt;Start();
...

if(_OK-&gt;IsOutputSet())
    Manage-&gt;Done();

if(_Cancel-&gt;IsOutputSet())
   Manage-&gt;Cancel();
...
}</pre>
<p>The command may have stopped of different manners. At the beginning of the Cancel 
method, we start the Operation. At the end, the state of the operation depends on 
the interaction of the user to finish the command. If the user has clicked on the 
OK button, the operation is stopped properly (status Done). If the user has cancelled 
the dialog, the operation is cancelled. As a consequence, the command operation 
is in an error state and the operation sequence will be interrupted</p>
<p><strong><code>_OK</code></strong> and <strong><code>_Cancel</code></strong> are 
dialog agents associated to the OK and Cancel button of the dialog.</p>
<p>You do not have to manage the state of the operation in the destructor, because 
it has been done in the <code>Cancel</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Managing the Variables of DPC Objects</h3>
<p>The Dialog opened thanks to the CAA Command allows some actions on the variables 
of the extended product and of the operation:</p>
<p>
<img alt="CATObmInterfaces Manipulation Dialog" src="Images/CAABehDialog.jpg" width="448" height="181"/></p>
<ol>
	<li>Valuation of the string variable &quot;Beh_Out2&quot; of the command operation.</li>
	<li>Creation of a link between the variable &quot;Beh_In1&quot; of the command operation 
	and the variable &quot;AttOnType&quot; of the extended product.</li>
	<li>Modification of the type of the attribute &quot;P1&quot; of the command operation.</li>
	<li>Valuation of the attribute &quot;P1&quot; of the operation with a publication.</li>
</ol>
<p>The management of those variables is done with the <em>CATIVariableManagement</em> 
API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>1. Valuation of an operation variable.</h3>
<p>In the panel, modify the value &quot;Default&quot; of the variable Beh_Out2 and then click 
on the Apply button close to the field.</p>
<p>As a resut, if you put the mouse on the attribute Beh_Out2 in the specification 
tree, a tooltip appears containing the new value.</p>
<p>The executed code is the following:</p>
<pre class="code">CATICkeParmFactory_var <strong>CkeParmFactory</strong>(CATCkeGlobalFunctions::GetVolatileFactory());</pre>
<p>First, we get the volatile factory to create values from KnowledgeInterfaces.</p>
<pre class="code">CATICkeParm_var hValueParmReal;

hValueParmReal = <strong>CkeParmFactory</strong>-&gt;CreateString(&quot;StringOnBeh&quot;,EdtValue);</pre>
<p>Then, we create a string parameter with the value <code>EdtValue</code> entered 
in the edit field of the panel.</p>
<pre class="code">CATIValue* <strong>ValueParm</strong> = NULL;

HRESULT rc = hValueParmReal-&gt;QueryInterface(IID_CATIValue, (void**) &amp;<strong>ValueParm</strong>);</pre>
<p>From the parameter <code>hValueParmReal</code> which is a <em>CATICkeParm</em>, 
we query a <em>CATIValue</em>, necessary for the <em>CATIVariableManagement</em> 
API.</p>
<pre class="code">CATIVariableManagement_var hVarMngt(_pOperation);
CATUnicodeString VarName(&quot;Beh_Out2&quot;);
...
hVarMngt-&gt;<strong>SetVariableValue</strong>(&amp;VarName,tio_OUT,<strong>ValueParm</strong>);</pre>
<p>We get the CATIVariableManagement handler from the operation (<code>_pOperation</code> 
was initialized during the dialog constructor), and we valuate its attribute &quot;Beh_Out2&quot; 
with the <em>CATIValue</em> <code>ValueParm</code> created just before.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>2. Creation of a Link between 2 variables.</h3>
<p>In the panel, click on the Apply button to link the AttonType and the Beh_In1 
attributes.</p>
<p>As a result, if you put the mouse on the attribute Beh_In1 in the specification 
tree, a tooltip appears containing the name of the linked attribute AttonType.</p>
<p>The executed code is the following:</p>
<p><a name="GetTypedObject"></a></p>
<pre class="code">CATIVariableManagement_var hProdVarMngt(GetTypedObject());
...</pre>
<p>First, we get the root product from the &quot;TypedObject&quot; input of the current operation.</p>
<p>This is done in the <a href="#GetTypedObject"><em><code>GetTypedObject</code></em></a>method.</p>
<pre class="code">CATIVariableManagement_var hOpVarMngt(_Operation);</pre>
<p>Then, we get both CATIVariableManagement handler from the extended product and 
its command operation (<code>_pOperation</code> was initialized during the dialog 
constructor).</p>
<pre class="code">CATBaseUnknown* pAttOnType = NULL;
CATUnicodeString VarNameType(&quot;AttonType&quot;);

HRESULT hr = ProdVarMngt-&gt;<strong>GetVariable</strong>(&amp;VarNameType, tio_IN,&amp;pAttOnType);</pre>
<p>From the extended product, we get its attribute AttonType.</p>
<pre class="code">CATUnicodeString VarNameOp(&quot;Beh_In1&quot;);

hr = hOpVarMngt-&gt;<strong>LinkVariables</strong>(&amp;VarNameOp,tio_IN,pAttOnType);</pre>
<p>We link the variable Beh_In1 of the operation with the variable AttonType of 
the extended product.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>3. Modification of the type of a variable.</h3>
<p>In the panel, select in the combo box a new type for the variable P1 of the command 
operation and click on the Apply button close to the combo. P1 is a variable of 
type pointer. A pointer variable can point on an object of any kind of knowledgeware 
type. In our example, the available types are <strong>Part</strong>, <strong>Product</strong> 
and <strong>ObjectType</strong>. ObjectType is a generic type for all kind of values 
and objects.</p>
<p>As a resut, if you put the mouse on the attribute P1 in the specification tree, 
a tooltip appears containing the waited type for the object pointed by P1.</p>
<p>The executed code is the following:</p>
<pre class="code">CATITypeDictionary_var dico(CATGlobalFunctions::GetTypeDictionary());</pre>
<p>First, we get the dictionary of type.</p>
<pre class="code">CATIType_var TheType;
         HRESULT rc = 
     dico-&gt;FindType(SelectedType, <strong>TheType</strong>);</pre>
<p>Then, we get the new type to associate to P1. <code>TheType</code> is the value 
selected in the combo box.</p>
<pre class="code">CATIVariableManagement_var hOpVarMngt(_pOperation);</pre>
<p>We get the CATIVariableManagement interface from the Operation.</p>
<pre class="code">CATUnicodeString P1(&quot;P1&quot;);
HRESULT HR = hOpVarMngt-&gt;<strong>SetVariableType</strong>(&amp;P1,tio_IN,<strong>TheType</strong>);</pre>
<p>We change the type of the variable P1.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3>4. Valuation of an operation variable with a publication.</h3>
<p>In the panel, enter the name of the publication which will be pointed by the 
variable P1 and click on the Apply button close to the text field.</p>
<p>In this use case, the available publications are in the part <em>CAAOBMInterfacesPart.CATPart</em>:
<strong>&quot;My Face&quot;</strong> and <strong>&quot;Hole&quot;</strong>. Make sure the 3D Shape is 
in Design Mode. To switch in Design Mode, expand the tree until you see the PartBody 
of the bolt.</p>
<p>The variable P1 has to have the type ObjectType to be able to point one of these 
publication.</p>
<p>As a resut, if P1 is of the correct type, if you put the mouse on it in the specification 
tree, a tooltip appears containing the path of the document containing the publication.</p>
<p>The executed code is the following:</p>
<pre class="code">CATIPLMPorts_var hRootPrd_Ports(GetTypedObject());</pre>
<p>First we get the Ports of the root product as done before (<code><a href="#GetTypedObject">GetTypedObject</a>).
</code></p>
<pre class="code">CATIPLMPort_var hFinalPort;

         hRootPrd_Ports-&gt;GetByName(PubName,hFinalPort);</pre>
<p>We get the port from its name.</p>
<pre class="code">CATICkeParmFactory_var CkeParmFactory = CATCkeGlobalFunctions::GetVolatileFactory();
CATICkeParm_var PortRef = CkeParmFactory-&gt;CreateObjectReference(<strong>hFinalPort</strong>);</pre>
<p>We get the volatile factory to create a parameter feature reference from the 
published object.</p>
<pre class="code">CATIValue* <strong>ValuePort</strong> = NULL;

HRESULT rc = <code>PortRef</code>-&gt;QueryInterface(IID_CATIValue, (void**) &amp;<strong>ValuePort</strong>);</pre>
<p>From the parameter <code>PortRef</code> which is a <em>CATICkeParm</em>, we query 
a <em>CATIValue</em>, necessary for the <em>CATIVariableManagement</em> API.</p>
<pre class="code">CATIVariableManagement_var hOPVarMngt(_pOperation);
...
CATUnicodeString P1(&quot;P1&quot;);
rc = hOPVarMngt-&gt;SetVariableValue(&amp;P1, tio_IN,ValuePort);</pre>
<p>We get the CATIVariableManagement handler from the operation (<code>_pOperation</code> 
was initialized during the dialog constructor), and we valuate its attribute &quot;P1&quot; 
with the <em>CATIValue</em> <code>ValuePort</code> created just before.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>When using a Command Operation launching a CAA command, don&#39;t forget to control 
the state of the Operation during the execution of the command thanks to the <em>
CATIBehOperationManagement</em> interface. With the <em>CATIVariableManagement</em> 
interface, you are able to access and control the variables of Operations and Types.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>2</strong> [Sep 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
