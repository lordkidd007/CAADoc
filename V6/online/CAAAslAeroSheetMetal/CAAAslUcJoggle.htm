<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Modifying a Joggle</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Modifying a Joggle</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the <strong>CAAStmJoggle</strong> use case. This 
		use case explains how to create or modify a Joggle feature. A <strong>Joggle</strong> 
		is a Feature that introduces a local deformation (twist) on a Web or a Surfacic 
		Flange [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAStmJoggle Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAStmJoggle Do</a></li>
					<li><a href="#How">How to Launch CAAStmJoggle </a></li>
					<li><a href="#Where">Where to Find the CAAStmJoggle Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will You Learn With This Use Case</h2>
<p>This use case learns how to use the aerospace sheet metal factory and the Joggle 
public interface to create , display or modify a Joggle. Its main intent is to introduce 
important concepts about the way to create or modify aerospace sheet metal features.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAStmJoggle Use Case</h2>
<p>CAAStmJoggle is a use case of the CAAAerospaceSheetMetal.edu framework that illustrates 
the creation or modification of a Joggle feature.</p>
<h3><a name="What"></a>What Does CAAStmJoggle Do</h3>
<p>This use case will show you the different steps to create or modify a Joggle.</p>
<p>More precisely this sample:</p>
<ul>
	<li>Read and analyze an input data (.txt) file </li>
	<li>Create a PLM session</li>
	<li>Perform a query in the database and open a Representation Reference including 
		the necessary geometric input features</li>
	<li>Create the Joggle feature if it does not exist in the input Representation 
		Reference</li>
	<li>Set the values of the parameters of the Joggle</li>
	<li>Update the Joggle feature</li>
	<li>Save the Representation Reference in the database</li>
	<li>Close the PLM session.</li>
</ul>
<p>With this sample, you will have in batch mode the same capabilities than an interactive 
session.</p>
<p>The input data file contains the same fields than the UI Joggle command dialog:</p>
<p>
<img alt="Joggle Command Dialog" height="526" src="images/CAAAslJoggleTxt.jpg" width="676"/></p>
<p>Some samples of input data are provided in <strong>Data.d\Joggle</strong> folder.</p>
<p>The structure of this file is simple:</p>
<p>KEYWORD: when a keyword is encountered a boolean is set to TRUE: the corresponding 
data is to set.</p>
<p>More details about available KEYWORDS are provided in front of the sample source 
file.</p>
<p>i.e.: The input data file above will create a Joggle on a Surfacic Flange:</p>
<p>
<img alt="Basic Surfacic Flange" height="426" src="images/CAAAslBasicSurfacicFlange.jpg" width="702"/></p>
<p>Remark that a <strong>Web</strong> or a <strong>Surfacic Flange</strong> feature 
must exist in the input Representation ( see the spec tree above ).</p>
<p>The sample will create a <strong>Joggle</strong> on <strong>Surfacic Flange.1</strong> 
with <strong>zx plane</strong> as Joggle Plane:</p>
<p>
<img alt="Joggle on Surfacic Flange" height="430" src="images/CAAAslJoggle1.jpg" width="817"/></p>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAStmJoggle</h3>
<p>To launch CAAStmJoggle, you will need to set up the build time environment, then 
compile CAAStmJoggle along with its prerequisites, and set up the run time environment, 
and then execute the use case [<a href="#References">2</a>].</p>
<p>Launch the use case as follows: </p>
<ul>
	<li>Before launching the use case:
		<ul>
			<li>Edit the file: <strong>CAATestCreateJoggle01.txt</strong>
				<p>Customize the PLM... fields, like in the input data file described 
				above</p>
			</li>
			<li><strong>Import</strong> the <strong>Input Geometry Data</strong> 
				in your <strong>DataBase</strong>: <strong>CAAAerospaceSheetMetal.edu\InputData\CAAJoggleCreation.3dxml</strong>
				<p>Don't forget to give a <strong>Prefix</strong> when importing 
				this file :</p>
				<p>i.e: if Prefix = <strong>Test_1_</strong> ==&gt; the PLM External 
				Id will be: <strong>Test_1_MDD_CAA_Joggle_Creation</strong></p>
				<p>A Prefix is mandatory to enable more than one launch in the database.</p>
			</li>
		</ul>
	</li>
	<li>To launch the use case: set the ENOVIA environment and execute the command:
		<pre>mkrun -c CAAStmJoggle inputFolder\CAATestCreateJoggle01.txt</pre>
	</li>
</ul>
<p>where: <strong>inputFolder</strong> is a folder including CAATestCreateJoggle01.txt</p>
<p>A default file is provided in <strong>CAAAerospaceSheetMetal.edu\Data.d\Joggle</strong></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAStmJoggle Code</h3>
<p>The CAAStmJoggle use case is made up of:</p>
<ul>
	<li>A main program located in the CAAStmJoggle.m module of the CAAAerospaceSheetMetal.edu 
		framework:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\CAAStmJoggle.m\</code></p>
	</li>
	<li>The input file <strong>CAATestCreateJoggle01.txt</strong> is provided in 
		a subfolder of CAAAerospaceSheetMetal.edu:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\Data.d\Joggle</code></p>
	</li>
	<li>The input file <strong>CAAStmJoggle.3dxml</strong> is provided in a subfolder 
		of CAAAerospaceSheetMetal.edu:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\InputData</code></p>
	</li>
</ul>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven main steps in CAAStmJoggle: </p>
<ol>
	<li><a href="#ReadInput">Reading and Analyzing the Input Data</a></li>
	<li><a href="#Initialize">Creating a PLM Session</a></li>
	<li><a href="#Create">Creating the Joggle Feature</a></li>
	<li><a href="#Parameters">Setting the Joggle Parameters</a></li>
	<li><a href="#Update">Updating the Joggle Feature</a></li>
	<li><a href="#Save">Saving the Joggle Representation in the Database</a></li>
	<li><a href="#Close">Closing the PLM Session</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code of the main 
method of the file CAAStmJoggle.cpp.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ReadInput"></a>Reading and Analyzing the Input Data</h3>
<p><strong>Note</strong>: some services are provided in the class <strong>CAAStmServices</strong>.</p>
<pre class="code">      ...
    CAAStmServices CAASmaTools;

    rc = CAASmaTools.AnalyseJoggleInputData (InputDataFilePath, CAAJoggleInput);
    ...</pre>
<p>The method AnalyseJoggleInputData will read the input data file and store the 
data in the class CAAStmInputData: i.e: if the method <strong>GetRunoutValueToSet()</strong> 
returns TRUE it means that the Runout value is to set.</p>
<pre class="code">     ...
     class ExportedByCAAStmServices CAAStmInputData
       {
       public:
    
       CAAStmInputData();
       virtual ~CAAStmInputData();
    
       // General Data :
       // --------------

       // PLM : session management :

       CATUnicodeString          GetPLMRepository ();
       CATUnicodeString          GetPLMServer     ();
       CATUnicodeString          GetPLMUser       ();
       CATUnicodeString          GetPLMPassword   ();
       CATUnicodeString          GetPLMRole       ();

       // PLM : component management :

       CATUnicodeString          GetPLMEnvironment ();
       CATUnicodeString          GetPLMInputId     ();
       CATUnicodeString          GetPLMVersion     ();

       // Sample data :

       CATUnicodeString          GetLengthUnit     ();

       ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Initialize"></a>Creating a PLM Session</h3>
<p>Create a session and query/open a Representation Reference including the input 
geometry: this step has no specificity. It is a call to standard functionalities:</p>
<pre class="code">   ...
   // Creates a PLM session with : repository, server, user, password, role
   CATUnicodeString strRepository = CAAJoggleInput.GetPLMRepository();
   CATUnicodeString strServer     = CAAJoggleInput.GetPLMServer();
   CATUnicodeString strUser       = CAAJoggleInput.GetPLMUser();
   CATUnicodeString strPassword   = CAAJoggleInput.GetPLMPassword();
   CATUnicodeString strRole       = CAAJoggleInput.GetPLMRole();

   CATString Repository = strRepository.ConvertToChar();
   CATString Server     = strServer.ConvertToChar();
   CATString User       = strUser.ConvertToChar();
   CATString Password   = strPassword.ConvertToChar();
   CATString Role       = strRole.ConvertToChar();
    
   rc = ::CAAAdpCreateSession (Repository, Server, User, Password, Role);
   ...
  // Loads the Representation
  CATIPLMComponent * piPLMComponentOnPart = NULL; 
      
  CATUnicodeString strPLMType     = CAAWebInput.GetPLMEnvironment();
  CATUnicodeString strPLMInputId  = CAAWebInput.GetPLMInputId();
  CATUnicodeString strVersion     = CAAWebInput.GetPLMVersion();
  
  CATOmbLifeCycleRootsBag Bag;
  
  rc = ::CAAOpenPLMComponent (strPLMType.ConvertToChar(), strPLMInputId, strVersion, IID_CATIPLMComponent, (void**)&amp; piPLMComponentOnPart, Bag, TRUE);

  CATIMmiPrtContainer * piPrtContainer = NULL;
  
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piPLMComponentOnPart))
    {
    CATIPsiRepresentationLoadMode_var spLoadMode = piPLMComponentOnPart;
    if(NULL_var != spLoadMode)
      rc = spLoadMode -&gt; ChangeLoadingMode (CATIPsiRepresentationLoadMode::EditMode);

    cout &lt;&lt; " (CAAStmJoggle) The Part Representation " &lt;&lt; strPLMInputId.ConvertToChar() &lt;&lt; " is opened." &lt;&lt; endl;
      
    CATIPLMNavRepReference * piNavRepRef = NULL ; 

    rc = piPLMComponentOnPart -&gt; QueryInterface (IID_CATIPLMNavRepReference, (void**)&amp; piNavRepRef);

    if(SUCCEEDED(rc) &amp;&amp; (NULL != piNavRepRef))
      {
      rc = piNavRepRef -&gt; RetrieveApplicativeContainer ("CATPrtCont", IID_CATIMmiPrtContainer, (void**)&amp; piPrtContainer);
        
      piNavRepRef -&gt; Release();
      piNavRepRef = NULL ;
      }

  ...


  // Interfaces to manage Aerospace Sheet Metal Features :
  CATIMmiMechanicalFeature_var     spMechFeatOnPart;
  CATIAerospaceSheetMetalFactory * piAslFactory = NULL;      // ASM Factory
  CATIMmiMechanicalFeature *       piJoggleSpec = NULL;      // Joggle Feature
  CATIMmiMechanicalFeature *       piPrevSupportSpec = NULL; // Joggle Support BEFORE any modification
  CATIStmJoggle *                  piStmJoggle = NULL;       // Joggle public interface
  ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create"></a>Creating the Joggle Feature</h3>
<p>Create a Joggle feature using <strong>CreateJoggle</strong> method of <strong>
CATIAerospaceSheetMetalFactory </strong>: this method will create all internal features 
and links between the attributes of the Joggle. If Modification is asked the joggle 
will be retrieved:</p>
<pre class="code">  ...
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piAslFactory)) 
  { 
    if(CAAJoggleInput.GetModifJoggle())
    {
      // Try to retrieve the Joggle Feature :
      rc = CAASmaTools.FindFeatureInSpecTree (spMechFeatOnPart, CAAJoggleInput.GetModifJoggleName(), &amp;piJoggleSpec);
      ...
      // creation of a new Joggle
      rc = piAslFactory -&gt; CreateJoggle (spMechFeatOnPart, &amp;piJoggleSpec);
      ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Parameters"></a>Setting the Joggle Parameters</h3>
<p>Set the Joggle parameters according to the values stored in CAAJoggleInput</p>
<p>!!! Before setting the parameters it is mandatory to store the previous Joggle 
Support:</p>
<pre class="code">    ...
    // Support :
    // ---------
    if(CAAJoggleInput.GetSupportGeomToSet())
    {
      // Search the Support Geom input specification :
      CATIMmiMechanicalFeature * pSupportGeomSpec = NULL;

      rc = CAASmaTools.FindFeatureInSpecTree (spMechFeatOnPart, CAAJoggleInput.GetSupportGeomName(), &amp;pSupportGeomSpec);

      if(SUCCEEDED(rc) &amp;&amp; (NULL != pSupportGeomSpec)) 
      {
        // Set the Support :
        rc = piStmJoggle -&gt; SetSupport (pSupportGeomSpec);
        ...</pre>
<p>i.e: Plane: set a CATISpecObject pointer</p>
<pre class="code">    ...
    // Joggle Plane :
    // --------------
    if(SUCCEEDED(rc) &amp;&amp; (CAAJoggleInput.GetPlaneGeomToSet()))
    {
      // Search the Joggle Plane Geom input specification :
      CATIMmiMechanicalFeature * pPlaneGeomSpec = NULL;

      rc = CAASmaTools.FindFeatureInSpecTree (spMechFeatOnPart, CAAJoggleInput.GetPlaneGeomName(), &amp;pPlaneGeomSpec);

      if(SUCCEEDED(rc) &amp;&amp; (NULL != pPlaneGeomSpec)) 
      {
        // Set the Joggle Plane :
        rc = piStmJoggle -&gt; SetPlane (pPlaneGeomSpec);
        ...</pre>
<p>i.e: Runout: valuate a CATICkeParm pointer</p>
<pre class="code">    ...
    // Runout Value :
    // --------------
    if(SUCCEEDED(rc) &amp;&amp; (CAAJoggleInput.GetRunoutValueToSet()))
    { 
      CATICkeParm * piRunoutValueParam = NULL;

      rc = piStmJoggle -&gt; GetRunout (&amp;piRunoutValueParam);

      if(SUCCEEDED(rc) &amp;&amp; (NULL != piRunoutValueParam))
      {
        // Valuate the Literal :
        double MKSVal = CAASmaTools.ConvertLengthToMKS (CAAJoggleInput.GetLengthUnit(),
        CAAJoggleInput.GetRunoutValue()); // MKS Units

        piRunoutValueParam -&gt; Valuate(MKSVal);

        // Inactivate the Formula if any :
        CATICkeRelation_var spRelation = piRunoutValueParam -&gt; Relation();
        if(NULL_var != spRelation) 
        {
          if(spRelation -&gt; IsActivated()) spRelation -&gt; Desactivate();
        }
        ...</pre>
<p>i.e., Runout orientation: set a CATOrientation</p>
<pre class="code">      ...
      // Runout Orientation :
      // --------------------
      if(SUCCEEDED(rc) &amp;&amp; (CAAJoggleInput.GetRunoutOrientToSet()))
      { 
        rc = piStmJoggle -&gt; SetRunoutOrient (CAAJoggleInput.GetRunoutOrient());
        ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Update"></a>Updating the Joggle Feature</h3>
<p>We suggest to update the Part Feature instead of the Joggle to force all internal 
links of the Joggle to re-build: </p>
<p>This step is NOT applied if "DISPLAY:" has been chosen.</p>
<p>!!! Before updating the Joggle it is mandatory to call a method to manage internal 
links:</p>
<pre class="code">      ...
      // Manage the Joggle Support :
      //
      // - if the Support has been modified : 
      // the Joggle will be removed from its Previous Support (if any).
      // - if the Joggle Plane has been modified : 
      // the Joggle will be inserted on the Support according with other Joggles (if any).
      // - a new OFFSET Surface of the Support will be created if necessary.

      rc = piStmJoggle -&gt; ManageOnSupport (spMechFeatOnPart, piPrevSupportSpec);
      ...</pre>
<p>Update the Part.</p>
<pre class="code">// Update the Part: 
rc = CAASmaTools.Update (spMechFeatOnPart);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Save"></a>Saving the Representation Reference in the Database</h3>
<p>This step is not necessary if "DISPLAY:" has been chosen.</p>
<pre class="code">// Save the PLM Component
rc = CATAdpOpenSaveServices::Save ();</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Close"></a>Closing the PLM Session</h3>
<p>Release the interface pointers and close the session.</p>
<pre class="code">// Close the PLM session
rc = ::CAAAdpCloseSession();</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create, display or modify a Joggle 
feature.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAslTaFeatures.htm">An Overview of the Aerospace Sheetmetal 
		Design Features</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
