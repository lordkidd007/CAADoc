<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Modifying a Surfacic Flange</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Modifying a Surfacic Flange</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAStmSurfacicFlange use case. This use case 
		explains how to create or modify a Surfacic Flange feature. A Surfacic Flange 
		is a feature to stiffen another aerospace sheet metal feature.[<a href="#References">1</a>]</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAStmSurfacicFlange Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAStmSurfacicFlange Do</a></li>
					<li><a href="#How">How to Launch CAAStmSurfacicFlange </a>
					</li>
					<li><a href="#Where">Where to Find the CAAStmSurfacicFlange 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will You Learn With This Use Case</h2>
<p>This use case learns how to use the aerospace sheet metal factory and the Surfacic 
Flange public interface to create , display or modify a Surfacic Flange. Its main 
intent is to introduce important concepts about the way to create or modify aerospace 
sheet metal features.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAStmSurfacicFlange Use Case</h2>
<p>CAAStmSurfacicFlange is a use case of the CAAAerospaceSheetMetal.edu framework 
that illustrates the creation or modification of a Surfacic Flange feature.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAStmSurfacicFlange Do</h3>
<p>This use case will show you the different steps to create or modify a Surfacic 
Flange.</p>
<p>More precisely this sample:</p>
<ul>
	<li>Read and analyse an input data (.txt) file</li>
	<li>Create a PLM session</li>
	<li>Perform a query in the Database and open a Representation Reference including 
		the necessary geometric input features</li>
	<li>Create or modify a Surfacic Flange feature</li>
	<li>Set the values of the parameters of the Surfacic Flange</li>
	<li>Update the Surfacic Flange feature</li>
	<li>Save the Representation Reference in the Database</li>
	<li>Close the PLM session.</li>
</ul>
<p>With this sample, you will have in batch mode the same capabilities than an interactive 
session.</p>
<p>The input data file contains the same fields than the UI Surfacic Flange command 
panel:</p>
<p>
<img alt="Surfacic Flange Dialog" height="510" src="images/CAAAslSurfacicFlangeTxt.jpg" width="686"/></p>
<p>Some samples of input data are provided in <strong>Data.d\SurfacicFlange</strong> 
folder.</p>
<p>The structure of this file is simple:</p>
<p>KEYWORD: when a keyword is encountered a boolean is set to TRUE: the corresponding 
data is to set.</p>
<p>More details about available KEYWORDS are provided in front of the sample source 
file.</p>
<p>i.e.: The input data file above will create a Surfacic Flange with features included 
in <strong>Test_1_CAAStmSurfacicFlange</strong> Representation:</p>
<p>
<img alt="Surfacic Flange with Features" height="450" src="images/CAAAslBasicWeb.jpg" width="700"/></p>
<p>Remark that the <strong>Web</strong> feature (i.e.: Web.1 ) must exist in the 
input Part (see the spec tree above).</p>
<p>The sample will create a <strong>Surfacic Flange</strong> with <strong>Web.1</strong> 
as Base Feature and <strong>Sketch.2</strong> as Support (Type: Angle):</p>
<p>
<img alt="Surfacic Flange" height="450" src="images/CAAAslSurfacicFlange1.jpg" width="700"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAStmSurfacicFlange</h3>
<p>To launch CAAStmSurfacicFlange, you will need to set up the build time environment, 
then compile CAAStmSurfacicFlange along with its prerequisites, and set up the run 
time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>Launch the use case as follows:</p>
<ul>
	<li>Before launching the use case:
		<ul>
			<li>Edit the File: <strong>CAATestCreateSurfacicFlange01.txt</strong>
				<p>Customize the PLM... fields, like in the input data file described 
				above</p>
			</li>
			<li><strong>Import </strong>the <strong>Input Geometry Data</strong> 
				in your <strong>DataBase</strong>: <strong>CAAAerospaceSheetMetal.edu\InputData\CAASurfacicFlangeCreation.3dxml</strong>
				<p>Don't forget to give a <strong>Prefix</strong> when importing 
				this file :</p>
				<p>i.e: if Prefix = <strong>Test_1_</strong> ==&gt; the PLM External 
				Id will be: <strong>Test_1_MDD_CAA_SurfacicFlange_Creation</strong></p>
				<p>A Prefix is mandatory to enable more than one launch in the DataBase</p>
			</li>
		</ul>
	</li>
	<li>To launch the use case: set the ENOVIA environment and execute the command:
		<pre>mkrun -c CAAStmSurfacicFlange inputFolder\CAATestCreateSurfacicFlange01.txt</pre>
	</li>
</ul>
<p>where:</p>
<p><strong>inputFolder</strong> is a folder including CAATestCreateSurfacicFlange01.txt.</p>
<p>A default file is provided in <strong>CAAAerospaceSheetMetal.edu\Data.d\SurfacicFlange</strong></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAStmSurfacicFlange Code</h3>
<p>The CAAStmSurfacicFlange use case is made up of:</p>
<ul>
	<li>A main program located in the CAAStmSurfacicFlange.m module of the CAAAerospaceSheetMetal.edu 
		framework:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\CAAStmSurfacicFlange.m\</code></p>
	</li>
	<li>The input file <strong>CAATestCreateSurfacicFlange01.txt</strong> is provided 
		in a subfolder of CAAAerospaceSheetMetal.edu:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\Data.d\SurfacicFlange</code></p>
	</li>
	<li>The input file <strong>CAAStmSurfacicFlange.3dxml</strong> is provided in 
		a subfolder of CAAAerospaceSheetMetal.edu:
		<p><code>InstallRootFolder\CAADoc\CAAAerospaceSheetMetal.edu\InputData</code></p>
	</li>
</ul>
<p>where <code>InstallRootFolder</code> is the folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven main steps in CAAStmSurfacicFlange: </p>
<ol>
	<li><a href="#ReadInput">Reading and Analyzing the Input Data</a></li>
	<li><a href="#Initialize">Creating a PLM Session</a></li>
	<li><a href="#Create">Creating the Surfacic Flange Feature</a></li>
	<li><a href="#Parameters">Setting the Surfacic Flange Parameters</a></li>
	<li><a href="#Update">Updating the Surfacic Flange Feature</a></li>
	<li><a href="#Save">Saving the Surfacic Flange Representation in the Database</a></li>
	<li><a href="#Close">Closing the PLM Session</a></li>
</ol>
<p>We will now comment each of those sections by looking at the code of the main 
method of the file CAAStmSurfacicFlange.cpp.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ReadInput"></a>Reading and Analyzing the Input Data</h3>
<p>CAAStmSurfacicFlange sample will first read and analyze an input data file.
</p>
<p>Note: some services are provided in the class <strong>CAAStmServices</strong>.</p>
<pre class="code">     ...
     CAAStmServices CAASmaTools;
     rc = CAASmaTools.AnalyseSurfacicFlangeInputData (InputDataFilePath, CAASurfacicFlangeInput);
     ...</pre>
<p>The method AnalyseSurfacicFlangeInputData will read the input data file and store 
the data in the class CAAStmInputData: i.e., if the method <strong>GetSupportGeomToSet 
() </strong>returns TRUE it means that the Support is to set.</p>
<pre class="code">...
class ExportedByCAAStmServices CAAStmInputData
  {
  public:

    CAAStmInputData();
    virtual ~CAAStmInputData();

    // General Data :
    // --------------

    // PLM : session management:

    CATUnicodeString          GetPLMRepository ();
    CATUnicodeString          GetPLMServer     ();
    CATUnicodeString          GetPLMUser       ();
    CATUnicodeString          GetPLMPassword   ();
    CATUnicodeString          GetPLMRole       ();

    // PLM : component management :

    CATUnicodeString          GetPLMEnvironment ();
    CATUnicodeString          GetPLMInputId     ();
    CATUnicodeString          GetPLMVersion     ();

    // Sample data:

    CATUnicodeString          GetLengthUnit     ();
    ...</pre>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Initialize"></a>Creating a PLM Session</h3>
<p>Create a session and query/open a Representation Reference including the input 
geometry: this step has no specificity. It is a call to standard functionalities:</p>
<pre class="code">  ...
  // Creates a PLM session with : repository, server, user, password, role
  CATUnicodeString strRepository = CAAFlangeInput.GetPLMRepository();
  CATUnicodeString strServer     = CAAFlangeInput.GetPLMServer();
  CATUnicodeString strUser       = CAAFlangeInput.GetPLMUser();
  CATUnicodeString strPassword   = CAAFlangeInput.GetPLMPassword();
  CATUnicodeString strRole       = CAAFlangeInput.GetPLMRole();

  CATString Repository = strRepository.ConvertToChar();
  CATString Server     = strServer.ConvertToChar();
  CATString User       = strUser.ConvertToChar();
  CATString Password   = strPassword.ConvertToChar();
  CATString Role       = strRole.ConvertToChar();
   
  rc = ::CAAAdpCreateSession (Repository, Server, User, Password, Role);
  ...    
  // Loads the Representation
  CATIPLMComponent * piPLMComponentOnPart = NULL; 
      
  CATUnicodeString strPLMType     = CAAWebInput.GetPLMEnvironment();
  CATUnicodeString strPLMInputId  = CAAWebInput.GetPLMInputId();
  CATUnicodeString strVersion     = CAAWebInput.GetPLMVersion();
  CATOmbLifeCycleRootsBag Bag;
  
  rc = ::CAAOpenPLMComponent (strPLMType.ConvertToChar() , strPLMInputId, strVersion, IID_CATIPLMComponent, (void**)&amp; piPLMComponentOnPart, Bag, TRUE);

  CATIMmiPrtContainer * piPrtContainer = NULL;
  
  if(SUCCEEDED(rc) &amp;&amp; (NULL != piPLMComponentOnPart))
    {
    CATIPsiRepresentationLoadMode_var spLoadMode = piPLMComponentOnPart;
    if(NULL_var != spLoadMode)
      rc = spLoadMode -&gt; ChangeLoadingMode (CATIPsiRepresentationLoadMode::EditMode);

    cout &lt;&lt; " (CAAStmSurfacicFlange) The Part Representation " &lt;&lt; strPLMInputId.ConvertToChar() &lt;&lt; " is opened." &lt;&lt; endl;
      
    CATIPLMNavRepReference * piNavRepRef = NULL ; 

    rc = piPLMComponentOnPart -&gt; QueryInterface (IID_CATIPLMNavRepReference, (void**)&amp; piNavRepRef);

    if(SUCCEEDED(rc) &amp;&amp; (NULL != piNavRepRef))
      {
      rc = piNavRepRef -&gt; RetrieveApplicativeContainer ("CATPrtCont", IID_CATIMmiPrtContainer, (void**)&amp; piPrtContainer);
        
      piNavRepRef -&gt; Release();
      piNavRepRef = NULL ;
      }

  ...

    // Interfaces to manage Aerospace Sheet Metal Features :
    CATIMmiMechanicalFeature_var     spMechFeatOnPart;
    CATIAerospaceSheetMetalFactory * piAslFactory = NULL;     // ASM Factory
    CATIMmiMechanicalFeature *       piFlangeSurfSpec = NULL; // Surfacic Flange Feature
    CATIStmFlangeSurf *              piStmFlangeSurf = NULL;  // Surfacic Flange public interface
    ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Create"></a>Creating the Surfacic Flange Feature</h3>
<p>Create a SurfacicFlange feature using <strong>CreateSurfacicFlange </strong>method 
of <strong>CATIAerospaceSheetMetalFactory </strong>: this method will create all 
internal features and links between the attributes of the SurfacicFlange. If a modification 
is asked the Surfacic Flange will be retrieved:</p>
<pre class="code">   ...
   if(SUCCEEDED(rc) &amp;&amp; (NULL != piAslFactory)) 
   { 
     if(CAAFlangeInput.GetModifFlange())
     {
       // Try to retrieve the SurfacicFlange Feature :
       rc = CAASmaTools.FindFeatureInSpecTree (spMechFeatOnPart, CAAFlangeInput.GetModifFlangeName(), &amp;piFlangeSurfSpec);
       ...
       // creation of a new SurfacicFlange
       rc = piAslFactory -&gt; CreateSurfacicFlange (spMechFeatOnPart, &amp;piFlangeSurfSpec);
       ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Parameters"></a>Setting the Surfacic Flange Parameters</h3>
<p>Set the SurfacicFlange parameters according to the the values stored in CAAFlangeInput</p>
<p>i.e., Support Geometry: set a CATISpecObject pointer</p>
<pre class="code">      ...
      // Support Geometry :
      // ------------------
      if(SUCCEEDED(rc) &amp;&amp; (CAAFlangeInput.GetSupportGeomToSet()))
      {
        // Search the Support input specification :
        CATIMmiMechanicalFeature * pSupportSpec = NULL;

        rc = CAASmaTools.FindFeatureInSpecTree (spMechFeatOnPart, CAAFlangeInput.GetSupportGeomName(), &amp;pSupportSpec);

        if(SUCCEEDED(rc) &amp;&amp; (NULL != pSupportSpec)) 
        {
          // Set the Support Geometry :
          rc = piStmFlangeSurf -&gt; SetSupport (pSupportSpec);
          ...</pre>
<p>i.e., EOP: Length From OML: Valuate a CATICkeParm pointer</p>
<pre class="code">      ...
      // EOP Length :
      // ------------
      if(SUCCEEDED(rc) &amp;&amp; (CAAFlangeInput.GetEOPLengthToSet()))
      {
        if((CAAFlangeInput.GetEOPTypeName()) == &quot;Length From OML&quot;)
        {
          CATICkeParm * piEOPLengthParam = NULL;

          rc = piStmFlangeSurf -&gt; GetEOPLength (&amp;piEOPLengthParam);

          if(SUCCEEDED(rc) &amp;&amp; (NULL != piEOPLengthParam))
          {
            // Valuate the Literal ::
            double MKSVal = CAASmaTools.ConvertLengthToMKS (CAAFlangeInput.GetLengthUnit(),
                                                            CAAFlangeInput.GetEOPLengthValue()); // MKS Units

            piEOPLengthParam -&gt; Valuate(MKSVal);
            ...</pre>
<p>i.e., Base Feature orientation: set a CATOrientation</p>
<pre class="code">      ...
      // Base Feature Orientation :
      // --------------------------
      if(SUCCEEDED(rc) &amp;&amp; (CAAFlangeInput.GetBaseFeatureOrientToSet()))
      { 
        rc = piStmFlangeSurf -&gt; SetBaseFeatureOrient (CAAFlangeInput.GetBaseFeatureOrient());
        ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Update"></a>Updating the Surfacic Flange Feature</h3>
<p>We suggest to update the Part Feature instead of the Surfacic Flange to force 
all internal links of the SurfacicFlange to re-build: </p>
<p>This step is not necessary if &quot;DISPLAY:&quot; has been chosen.</p>
<p>Update the Part:</p>
<pre class="code">// Update the Part: 
rc = CAASmaTools.Update (spMechFeatOnPart);</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Save"></a>Saving the Surfacic Flange Representation Reference in the 
Database</h3>
<p>This step is not necessary if &quot;DISPLAY:&quot; has been chosen.</p>
<pre class="code">// Save the PLM Component
rc = CATAdpOpenSaveServices::Save ();</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Close"></a>Closing the PLM Session</h3>
<p>Release the interface pointers and close the session.</p>
<pre class="code">// Close the PLM session
rc = ::CAAAdpCloseSession();</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create, display or modify a Surfacic 
Flange feature.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAAslTaFeatures.htm">An Overview of the Aerospace Sheetmetal 
		Design Features</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
