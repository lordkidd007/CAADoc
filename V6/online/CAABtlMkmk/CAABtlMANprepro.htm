<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>The Declarative File Preprocessor</title>
<style type="text/css">
.auto-style1 {
	font-family: Verdana;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>The Declarative File Preprocessor</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Some declarative files are `preprocessed&#39; (i.e. Imakefile.mk, IdentityCard.h) 
		in order to distinguish specific sections (such as operating systems under 
		which the workspace is being built).</p>
		<ul>
			<li><a href="#Syntax">Syntax</a></li>
			<li><a href="#Sample">Sample</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Syntax"></a>Syntax</h2>
<p>The preprocessor is an internal step which parse any lines that begin with a 
`<strong>#</strong>&#39; character in first column and is followed by an interpreted 
keyword, any others are translated to declarative file parser. Such lines cannot 
be continued on next line with the <strong>\</strong> continuing character.</p>
<p>The comments are enclosed using <strong>/*</strong> and <strong>*/</strong> sequence 
characters.</p>
<p>The following keywords are available:</p>
<ul>
	<li>The <code>#define</code> and <code>#undef</code>keywords
		<pre class="code"><strong>#define</strong> FlagName
<strong>#undef</strong> FlagName</pre>
		<p>They are used for special purpose and may not be used outside Dassault 
		Syst&#232;mes.</p>
	</li>
	<li>The <code>#if</code>, <code>#elif</code>, <code>#else</code>, and <code>
		#endif</code> keywords
		<pre class="code"><strong>#if</strong> Expression
<strong>#elif</strong> Expression
<strong>#else</strong>
<strong>#endif</strong></pre>
		<p>They are used to check flag(s) by analyzing <code>Expression.</code></p>
		<p>Expression consist of test flag clauses that can be mixed with boolean 
		operators and grouped with parenthesis `<strong>(</strong>...<strong>)</strong>&#39;.<br />
		Only the following operators are supported (comparison&#39;s are not):</p>
		<table class="fill">
			<tr>
				<td><strong>&amp;&amp;</strong></td>
				<td>(AND)</td>
			</tr>
			<tr>
				<td><strong>||</strong></td>
				<td>(OR)</td>
			</tr>
			<tr>
				<td><strong>!</strong></td>
				<td>(NOT)</td>
			</tr>
		</table>
	</li>
</ul>
<p>A clause consists of a flag existence test (not a value test), by using the following 
keywords:</p>
<ul>
	<li>The <code>define</code> keyword<pre class="code"><strong>defined</strong> FlagName</pre>
		<p>It is used for special purposes and may not be used outside Dassault 
		Syst&#232;mes</p>
	</li>
	<li>The <code>os</code> keyword
		<pre class="code"><strong>os</strong> OSName</pre>
		<p>It tests predefined flags set by mkmk, depending on the operating system 
		it is executed. Such flag names correspond to values of environment variables
		<em>MkmkOS_Type</em>, <em>MkmkOS_NAME</em> (platform notion) and <em>MkmkOS_Buildtime</em> (targeted 
		operating system notion, the one for which the code is being built)</p>
		<p>The supported operating system names that you can use as <code>OSName</code> are described in the following table:</p>
		<table class="fill">
			<tr>
				<th colspan="3">Value of OSName (case sensitive)</th>
				<th colspan="2" rowspan="2">Operating System</th>
			</tr>
			<tr>
				<th>MkmkOS_Type</th>
				<th>MkmkOS_NAME</th>
				<th>MkmkOS_Buildtime</th>
			</tr>
			<tr>
				<td rowspan="11"><strong>UNIX</strong></td>
				<td rowspan="2"><strong>AIX</strong></td>
				<td>aix_a</td>
				<td>AIX 32-bit</td>
				<td rowspan="2">AIX (IBM)</td>
			</tr>
			<tr>
				<td>aix_a64</td>
				<td>AIX 64-bit</td>
			</tr>
			<tr>
				<td rowspan="4"><strong>SunOS</strong></td>
				<td>solaris_a</td>
				<td>SUN Solaris, SPARC architecture 32-bit</td>
				<td rowspan="4">Sun Solaris (Sun MicroSystems)</td>
			</tr>
			<tr>

				<td>solaris_b</td>
				<td>SUN Solaris, x86 architecture 32-bit</td>
			</tr>
			<tr>
				<td>solaris_a64</td>
				<td>SUN Solaris, SPARC architecture 64-bit</td>
			</tr>
			<tr>
				<td>solaris_b64</td>
				<td>SUN Solaris, x86 architecture 64-bit</td>
			</tr>
			<tr>
				<td rowspan="4"><strong>Linux</strong></td>
				<td>linux_a</td>
				<td>Red Hat Enterprise Linux (RHEL) 32-bit</td>
				<td rowspan="4">Linux</td>
			</tr>
			<tr>
				<td>linux_b</td>
				<td>SUSE Linux Enterprise Server (SLES) 32-bit</td>
			</tr>
			<tr>
				<td>linux_a64</td>
				<td>Red Hat Enterprise Linux (RHEL) 64-bit</td>
			</tr>
			<tr>
				<td>linux_b64</td>
				<td>SUSE Linux Enterprise Server (SLES) 64-bit</td>
			</tr>
			<tr>
				<td><strong>Darwin</strong></td>
				<td>macos_b64</td>
				<td>Mac OS 64-bit</td>
				<td>Mac OS (Apple)</td>
			</tr>
			<tr>
				<td rowspan="2"><strong>Windows</strong></td>
				<td rowspan="2"><strong>Windows_NT</strong></td>
				<td>intel_a</td>
				<td>Windows 32-bit</td>
				<td rowspan="2">Windows (Microsoft)</td>
			</tr>
			<tr>
				<td>win_b64</td>
				<td>Windows 64-bit</td>
			</tr>
			<tr>
				<td rowspan="3"><strong>MOBILE</strong></td>
				<td><strong>Android</strong></td>
				<td>android_a</td>
				<td>Android 32-bit</td>
				<td>Google</td>
			</tr>
			<tr>
				<td rowspan="2"><strong>iOS</strong></td>
				<td>iosdevice_a</td>
				<td>iOS ARM architecture 32-bit</td>
				<td rowspan="2">iOS (Apple)</td>
			</tr>
			<tr>
				<td>iossimul_a</td>
				<td>iOS for use on simulator 32-bit</td>
			</tr>
		</table>
		<table class="Remark">
			<tr>
				<td class="Remark">
					<span class="run-in">Warning</span>:
					Prefer to use the leftmost names whenever you do not need to 
					refer to a specific operating system.
					For example, prefer <strong>Windows</strong> to Windows_NT 
					if you refer to all Windows operating systems, or use
					<strong>UNIX</strong> if 
					you refer to all UNIX operating systems.
				</td>
			</tr>
		</table>
		<p>If needed, you can combine the values of 
		<em>MkmkOS_Type</em><span class="auto-style1"> or </span>
		<em>MkmkOS_NAME</em> with the value of <em>MkmkOS_BitMode</em>, the 
		values of which can be 32 or 64, to refer to specific groups of
		operating systems. For example:</p>
		<ul>
			<li>SunOS64 refers to all SUN Solaris 64-bit operating systems, that 
				is solaris_a64 and solarisb_64.</li>
			<li>UNIX64 refers to all UNIX 64-bit operating systems, that is 
				aix_a64, solaris_a64, solarisb_64, linux_a64, linux_b64, and 
				macos_64. </li>
		</ul>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Sample"></a>Sample</h2>
<p>This example is not optimized in term of logic but it just shows the syntax that 
can be used to distinguish operating systems specifics in a declarative file:</p>
<pre class="code">... common section (available for all operating systems) ...

#if os <strong>AIX ||</strong> os <strong>SunOS</strong>
  ... section available for IBM and SUN platforms ...

  #if os <strong>SunOS32</strong>
  ... section available for SUN 32-bit platforms ...
  #endif

#elif os <strong>Linux</strong>
  ... section available for Linux platforms ...

#elif os <strong>Windows</strong>
  ... section available for all Windows platform (intel_a, win_b64 ) ...

  #if os <strong>intel_a</strong>
    ... section available for Windows 32-bit operating systems ...
  #elif os <strong>win_b64</strong>
    ... section available for Windows 64-bit operating systems ...
  #endif /* &quot;<strong>#if os intel_a</strong>&quot; block closing instruction */
#else /* &quot;<strong>#if os AIX || os SunOS</strong>&quot; else instruction */
  ... section available all other operating systems ...
#endif /* &quot;<strong>#if os AIX || SunOS</strong>&quot; block closing instruction */
  ... common section (available for all operating systems) ...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<ul>
	<li>Preprocessor is invoked for framework and module declarative files</li>
	<li>It can be used to express specific sections for all (supported) operating 
		systems.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
