<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>mkGetPreq</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>mkGetPreq</h1>
		</td>
	</tr>
	<tr>
		<td class="quick">Quick Reference</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td style="height: 167px">
		<h2>Abstract</h2>
		<p>The <strong>mkGetPreq</strong> command records the workspace concatenation 
		path where mkmk will search for prerequisite frameworks. </p>
		<ul>
			<li><a href="#Synopsis">Synopsis</a></li>
			<li><a href="#Usage">Usage</a></li>
			<li><a href="#Options">Options</a></li>
			<li><a href="#Limitations">Limitations</a></li>
			<li><a href="#Examples">Examples</a></li>
			<li><a href="#Scenarios">Advanced Scenarios</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Synopsis"></a>Synopsis</h2>
<p><strong>mkGetPreq</strong> [<strong>-W</strong> WSPath] [<strong>-a</strong>] 
[<strong>-fwout</strong> 
file] 
[<strong>-mkinfo</strong>] [<strong>-noci</strong>] [<strong>-noq</strong>] [<strong>-p</strong> Path1[;|:Path2...]] <!-- [<strong>-q</strong>] --> 
[<strong>-pfile</strong> 
file] [<strong>-pfrom</strong> path]&nbsp; [<strong>-simul</strong>] <!-- [<strong>-jobs</strong> #] --> [<strong>-h</strong> |
<strong>-help</strong> | <strong>-?</strong>]</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Usage"></a>Usage</h2>
<p>mkGetPreq is, like mkCopyPreq <a href="#References">[1]</a>, designed to make 
available to the (local) workspace frameworks the prerequisite frameworks declared 
in their identity cards. mkGetPreq outputs only errors unless the option -noq is 
used.</p>
<p>Whereas mkCopyPreq performs a physical copy of the data useful for build and 
run time from the identified prerequisites to the local workspace, mkGetPreq defines 
a workspace concatenation path, which later on is used by mkmk to dynamically find 
out the services required by the frameworks of the local workspace.</p>
<p>mkGetPreq issues only errors. If you want to know from what folders in the 
dynamic search path all the prerequisite frameworks are taken from, run the command in 
both simulation mode (-simul option) and verbose mode (-noq option). Note that if you want to focus on the prerequisites of a given (local) framework, 
use mkPrintPreq <a href="#References">[2]</a>.</p>
<p><strong>Note</strong>: Contrary to mkmk and other commands, mkGetPreq ignores 
any possible target. As its goal is to define a dynamic search path for every framework 
in a workspace, it never focuses on a given target framework.</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: After the dynamic 
		search path is modified using mkGetPreq, mkmk should be run with the option 
		-u (update).</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Options"></a>Options</h2>
<p>mkGetPreq accepts the following options:</p>
<table class="fill">
	<tr>
		<th>Option</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code>-a</code></td>
		<td>Consider all the frameworks of the workspace.</td>
	</tr>
	<tr>
		<td><code>-fwout file</code></td>
		<td>Print the command output in a file. <code>file</code> is the full 
		pathname of this file.</td>
	</tr>
	<tr>
		<td><code>-h|-help|-?</code></td>
		<td>Display the command help.</td>
	</tr>
<!--
	<tr>
		<td><code>-jobs #</code></td>
		<td>Multiprocessing mode. # is the maximum number of parallel tasks mkGetPreq 
		forks.</td>
	</tr>
-->
	<tr>
		<td><code>-mkinfo</code></td>
		<td>Print additional information when some errors are raised, such as a 
		prerequisite framework not built.</td>
	</tr>
	<tr>
		<td><code>-noci</code></td>
		<td>Avoid framework identity card compilation.</td>
	</tr>
	<tr>
		<td><code>-noq</code></td>
		<td>Verbose mode.</td>
	</tr>
	<tr>
		<td><code>-p Path1[;|:Path2...]</code></td>
		<td>Concatenate workspaces where to search for the prerequisite frameworks.
		<code>Path1</code> and <code>Path2</code> represent workspace root folder 
		paths, and must be separated using a &quot;:&quot; (colon) with Unix and a &quot;;&quot; (semi-colon) 
		with Windows. Windows workspace paths can be mapped drive paths, such a 
		e:\WorkspaceToAdd, or UNC paths, such as \\dsone\rnd\R216rel\BSF.</td>
	</tr>
<!-- R215/R216/R24
	<tr>
		<td><code>-q</code></td>
		<td>Quiet mode. Print errors only.</td>
	</tr>
-->
	<tr>
		<td><code>-pfile file</code></td>
		<td>Concatenate workspaces where to search for the prerequisite frameworks.
		The workspace full pathnames are stored in a file, with a workspace 
		pathname per line. <code>file</code> is the full pathname of this file. 
		Ignored if -p is used.</td>
	</tr>
	<tr>
		<td><code>-pfrom path</code></td>
		<td>Concatenate workspaces where to search for the prerequisite frameworks, 
		starting from a single workspace pathname, and using the prerequisites 
		of this workspace, if any. <code>path</code> is the full pathname of 
		this workspace. Ignored if -p or -pfile is used.</td>
	</tr>
	<tr>
		<td><code>-simul</code></td>
		<td>Simulate the command execution.</td>
	</tr>
	<tr>
		<td><code>-W WSPath</code></td>
		<td>Path of the workspace to process. Default is the current folder.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Limitations"></a>Limitations</h2>
<p>The concatenation concept is very powerful because it prevents the developer 
to attach all the components that the application needs to run. However there are 
some limitations to this feature that you should be aware of:</p>
<ol>
	<li>Prerequisite modules must be specified explicitly using the LINK_WITH clause 
	if Imakefile.mk files. </li>
	<li>If a NONE module has to be modified, the module which embeds this NONE module 
	must be present in the workspace and not just visible throughout the concatenation.
	</li>
	<li>For the time being, all modules generating interfaces (<em>PrivateGenerated</em>,
	<em>ProtectedGenerated</em> and <em>PublicGenerated</em>) must be attached locally. 
	This is a current limitation and it should disappear in a further version.
	</li>
	<li>If a module, which is referenced in a LINK_WITH directive, is destroyed 
	in a local framework, it can be still visible because existing somewhere in 
	the concatenation.</li>
</ol>
<p>Only modules which are found at the first level of the concatenation (thus the 
workspace itself) can be modified.</p>
<p>We consider that a framework is &quot;local&quot;, and thus that its modules can be modified, 
if it contains the source of its Identity Card. As a consequence, it is possible 
to copy some frameworks locally and to prevent that they could be modified by deleting 
the local copy of their Identity Card source file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Examples"></a>Examples</h2>
<p>Define a dynamic prerequisite search from the workspace root folder and for all 
its frameworks in g:\IntegrationWSRoot:</p>
<pre class="code">mkGetPreq -a -p g:\IntegrationWSRoot</pre>
<p>Simulate the dynamic prerequisite search from the workspace root folder and for 
all its frameworks in g:\IntegrationWSRoot:</p>
<pre class="code">mkGetPreq -a -p g:\IntegrationWSRoot -simul</pre>
<p>Define a dynamic prerequisite search from the workspace root folder and for all 
its frameworks in two workspaces:</p>
<p>
<img alt="Prerequisite Frameworks" src="images/CAABtlLinkWith01.png" width="460" height="126"/>
</p>
<p>In this example, Framework1 contains two modules: Module0 and Module1. Module0 
needs services implemented by Module1, by Module2 of Framework2, and Module3 of 
Framework3.</p>
<p>Module0.m needs Module1.m, Module2.m, and Module3.m to link. Its Imakefile.mk 
contains the statement:</p>
<pre class="code">LINK_WITH=Module1 Module2 Module3</pre>
<p>The IdentityCard.xml file of Framework1 is:</p>
<pre class="code">&lt;prerequisite name=&quot;Framework2&quot; access=&quot;Public&quot;/&gt;
&lt;prerequisite name=&quot;Framework3&quot; access=&quot;Public&quot;/&gt;</pre>
<p>mkGetPreq should be run in MyWorkspace as follows: </p>
<pre class="code">mkGetPreq -p WorkspaceB;WorkspaceC</pre>
<p>mkmk will then pick up the services Module0 needs first in MyWorkspace, then 
from WorkspaceB, and finally from WorkspaceC.</p>
<p>To list the frameworks required by those of your workspace, and from 
which workspace each required framework is taken into account, type:</p>
<pre class="code">mkGetPreq -p WorkspaceB;WorkspaceC -simul -noq</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Scenarios"></a>Advanced Scenarios</h2>
<p>This paragraph sets out some scenarios &quot;not that intuitive&quot;. Read them to make 
sure you understand the combined effect of mkGetPreq and mkmk.</p>
<h3>Scenario 1: Local Framework Concatenation</h3>
<p>
<img alt="Local Framework Concatenation" src="images/CAABtlLinkWith02.png" width="464" height="217"/>
</p>
<p>A local framework may be not locally complete. Framework1 contains two modules: Module0 
and Module1. Module0 is in MyWorkspace, but Module1 is not. It is located in TeamWorkspace. 
Module0 needs services implemented by Module1, by Module2 of Framework2, and Module3 
of Framework3.</p>
<p>Module0 needs Module1, Module2, and Module3 to link. Its Imakefile.mk contains 
the statement:</p>
<pre class="code">LINK_WITH=Module1 Module2 Module3</pre>
<p>The IdentityCard.xml file of Framework1 is:</p>
<pre class="code">&lt;prerequisite name=&quot;Framework2&quot; access=&quot;Public&quot;/&gt;
&lt;prerequisite name=&quot;Framework3&quot; access=&quot;Public&quot;/&gt;</pre>
<p>mkGetPreq should be run in MyWorkspace as follows: </p>
<pre class="code">mkGetPreq -p TeamWorkspace;WorkspaceB;WorkspaceC</pre>
<p>TeamWorkspace must be added to enable mkmk to pick up the Module1 services from 
TeamWorkspace. Then mkmk picks up the other services Module0 needs from WorkspaceB, 
and finally from WorkspaceC.</p>
<h3>Scenario 2: Prerequisite Framework Concatenation</h3>
<p>
<img alt="Prerequisite Framework Concatenation" src="images/CAABtlLinkWith03.png" width="451" height="109"/>
</p>
<p>A prerequisite framework resides in two workspaces. Framework2 contains two modules: 
Module2 and Module3. Module2 is in WorkspaceB and Module3 in WorskspaceC. of mkGetPreq 
in such a case is to only consider the modules of Fw2 presents in the first work 
space Fw2 was found.</p>
<p>Module0 needs Module2 and Module3 to link. Its Imakefile.mk contains the statement:</p>
<pre class="code">LINK_WITH=Module2 Module3</pre>
<p>The IdentityCard.xml file of Framework1 is:</p>
<pre class="code">&lt;prerequisite name=&quot;Framework2&quot; access=&quot;Public&quot;/&gt;</pre>
<p>mkGetPreq should be run in MyWorkspace as follows:</p>
<pre class="code">mkGetPreq -p WorkspaceB;WorkspaceC</pre>
<p>Even in concatenating WorkspaceB and WorkspaceC using the -p option, mkmk will 
consider Framework2 only in the first workspace where it is found. This enables Module0 
to link with Module2, but not with Module3.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAABtlMkCopyPreq.htm">mkCopyPreq</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAABtlMkPrintPreq.htm">mkPrintPreq</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
