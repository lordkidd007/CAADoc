<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>The Imakefile.mk Special File</title>
<style type="text/css">
.auto-style1 {
	background-color: #F2F2F2;
}
</style>
</head>

<body onload="createToc();highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>The Imakefile.mk Special File</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The Imakefile.mk file is a text file which must be defined for each module 
		in a framework and whose purpose is to describe what must be produced (by 
		mkmk) from this module. The aim of this paper is to explain how to start 
		with this file and secondly how to use advanced features.</p>
		<p>Before to start building your program, we advise you to read both the 
		first part of this paper (including few samples) and the use of mkmk.</p>
		<div id="toc">
		</div>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Why"></a>Why this Kind of File?</h2>
<p>Every module should be associated with a <strong>Imakefile.mk</strong> file before 
attempt to build with the Native Apps Builder mkmk.</p>
<p>The Imakefile.mk contains make-like macros which are used at compilation time 
and build time. So the Imakefile.mk syntax must comply to the global syntax of makefiles.</p>
<p>As explained in the &quot;The Native Apps Builder mkmk&quot; article [<a href="#References">1</a>], 
our environment proposes the same compiler for all operating systems where V6 can 
be run. This is a convenient way for developers to build their programs since they 
do not have to learn how to use different compilers and how to write (and keep up 
to date) makefiles. However all cannot be done by mkmk and users must explain at 
least what they want to generate.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Samples"></a>Few Samples</h2>
<p>Here are the most basic samples of Imakefile.mk files you could have to write 
regarding the type of data to generate.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Location"></a>Location</h3>
<table>
	<tr>
		<td rowspan="2">
		<img alt="Imakemile.mk File" src="images/CAABtlImakefile17.png" width="170" height="216"/></td>
		<td>Each Imakefile.mk file controls the compilation of the module source 
		files located in the LocalInterfaces and the src folders.</td>
	</tr>
	<tr>
		<td>The Imakefile.mk file is located just below the module folder.</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SharedLibrary"></a>How to Build a Shared Library</h3>
<p>The type of result is specified by a <a href="#Variables">variable</a> named
<code>BUILT_OBJECT_TYPE</code>. The most basic Imakefile.mk contains just one line:</p>
<pre class="code">BUILT_OBJECT_TYPE=SHARED LIBRARY</pre>
<p>Another type of library is the <strong>archive</strong>. It is less used than 
shared libraries but if you need to generate one, just replace the words &quot;<code>SHARED 
LIBRARY&quot;</code> by the word <code>&quot;ARCHIVE</code>&quot;.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Executable"></a>How to Build an Executable</h3>
<p>A main program can be built by setting another value to the previous variable:</p>
<pre class="code">BUILT_OBJECT_TYPE=LOAD MODULE</pre>
<p>Another thing that could be interesting to control is the name of the program: 
this is achieved using another variable, for instance:</p>
<pre class="code">PROGRAM_NAME=my_beautiful_program
BUILT_OBJECT_TYPE=LOAD MODULE</pre>
<p>If no name is defined, default names will be chosen regarding the type of data 
to build.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Java"></a>How to Build a Java Module</h3>
<p>To build a Java module, include:</p>
<pre class="code">PACKAGE_MODULE=my.package
BUILT_OBJECT_TYPE=JAVA</pre>
<p>where <code>my.package</code> is the root of the packages that are to be included 
in the Java module.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Imakefile.mk"></a>Distinguish Operating 
systems in Imakefile.mk</h3>
<p>Even if the same Imakefile.mk file can be used on any (supported) operating systems, 
you may want to mark some differences regarding the current operating system. To 
do this, consult the declarative file preprocessor article [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="PersonalVariables"></a>How to Use Personal 
Preprocessing Variables</h3>
<p>Preprocessing variables are often used in programs for different purposes:</p>
<ul>
	<li>Debug: print messages to trace execution.</li>
	<li>Variants of implementation: according to the current OS or for different 
	levels of services.</li>
</ul>
<p>The Imakefile.mk syntax proposes a set of keyword (one per language) to add such 
variables, here is an example where we set a &quot;<code>DEBUG</code>&quot; variable for the 
compilation of C and C++ files and a &quot;<code>API3</code>&quot; variable for the compilation 
of C++ files (note the use of &quot;<code>$(...)&quot;</code> to reference the value of a 
variable):</p>
<pre class="code">LOCAL_CFLAGS=-DDEBUG
LOCAL_CCFLAGS=$(LOCAL_CFLAGS) -DAPI3
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="SyntaxVariables"></a>Syntax and Variables</h2>
<h3><a name="Syntax"></a>Syntax Rules</h3>
<ol>
	<li>A variable can be defined from a previously defined variable.
	<pre class="code">VAR2=$(VAR1)</pre>
	</li>
	<li>The makefile syntax does not allow to define a variable from itself. Definition 
	such as the following ones are not allowed:
	<pre class="code">VAR1=val1 val2
VAR1=$(VAR1) val3</pre>
	</li>
	<li>Lines beginning by the &#39;#&#39; character are comments or pragma.</li>
	<li>Lines ending with a backslash &#39;\&#39; character continue on the next line.</li>
	<li>Space characters are ignored on both sides of a equal &#39;=&#39; character.</li>
	<li>Except if specified, the space character can be used as separator if a variable 
	is set with several parameters</li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Variables"></a>Variables Interpreted by mkmk</h3>
<p><strong>Note</strong>: Variables following the flag &quot;<strong>internal usage</strong>&quot; 
are those used for special purpose and may not be used outside Dassault Syst&#232;mes.</p>
<h4>mandatory</h4>
<pre class="code">BUILT_OBJECT_TYPE= moduleType</pre>
<p>Where <code>moduleType</code> is the type of the module to build. Its value can 
be:</p>
<table class="fill">
	<tr>
		<th>Value</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code>LOAD MODULE</code></td>
		<td>To build a main program.</td>
	</tr>
	<tr>
		<td><code>SHARED LIBRARY</code></td>
		<td>To build a shared library or DLL.</td>
	</tr>
	<tr>
		<td><code>ARCHIVE</code></td>
		<td>To build an archive.</td>
	</tr>
	<tr>
		<td><code>EL LIBRARY</code></td>
		<td>For Explicitly Loaded. This kind of modules are explicitly loaded at 
		run time. A shared library or DDL is built but it cannot be referenced by 
		the other modules through the <code>LINK_WITH</code> macro.</td>
	</tr>
	<tr>
		<td><code>JAVA</code></td>
		<td>To build a Java module.</td>
	</tr>
	<tr>
		<td><code>RUNTIME DATA</code></td>
		<td>To store <span class="auto-style1">run time resources to be copied 
		to the run time view.</span></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>mandatory for Java</h4>
<p><code>PACKAGE_MODULE</code>= root of the Java packages for the module to build, 
such as com.dev for a module containing the packages com.dev.view and com.dev.controller</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>internal usage</h4>
<p><code>NONE</code> is used to group small modules into a bigger module. The name 
of the small module must be included in an <code>INCLUDED_MODULES</code> macro in 
the big module. The container module can be a LOAD MODULE or a SHARED LIBRARY. The 
container and its contents must belong to the same framework.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code><a name="PROGRAM_NAME"></a>PROGRAM_NAME</code>= name of the built module.</p>
<p>Default value is the module directory name with a prefix or a suffix depending 
of the module type (see <code>BUILT_OBJECT_TYPE</code> variable).</p>
<p>For example, if the module to build is in <em>mymodule.m</em> directory, the 
generated output name is:</p>
<table class="fill">
	<tr>
		<th>BUILT_OBJECT_TYPE</th>
		<th>Generated Module Name</th>
	</tr>
	<tr>
		<td><code>LOAD MODULE</code></td>
		<td>mymodule (UNIX)
		<p>mymodule.exe (Windows)</p>
		</td>
	</tr>
	<tr>
		<td><code>SHARED LIBRARY</code></td>
		<td>libmymodule.a (AIX)
		<p>libmymodule.sl (HP-UX)</p>
		<p>libmymodule.so (SunOS or IRIX)</p>
		<p>mymodule.dll (Windows)</p>
		<p>mymodule.lib (Windows)</p>
		</td>
	</tr>
	<tr>
		<td><code>ARCHIVE</code></td>
		<td>libmymodule.a (UNIX)
		<p>mymodule.lib (Windows)</p>
		</td>
	</tr>
	<tr>
		<td><code>JAVA</code></td>
		<td>mymodule.jar (all OS)
		</td>
	</tr>

</table>
<p>The naming of modules concerns only load modules <code>(BUILT_OBJECT_TYPE= LOAD 
MODULE</code>) and is advised for transparency reasons.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>mandatory</h4>
<p><code>LINK_WITH = lib_1 lib_2 ... lib_n</code></p>
<p>list of modules (i.e. libraries) to be used at link-edition time of the current 
module. This option is mandatory. <strong>You must always at least include JS0GROUP 
in the list of load modules</strong>. The statement becomes:</p>
<p><code>LINK_WITH = JS0GROUP lib_2 ... lib_n</code></p>
<p>When link-editing a module, mkmk uses the subset of libraries which belong to 
the prerequisite frameworks of the embedding framework of the module. mkmk only 
makes available the subset of libraries in the prerequisites that <em><code>LINK_WITH</code></em> 
features. The library name to be used is either the one specified in the corresponding 
Imakefile.mk file or the default computed by mkmk (see <a href="#PROGRAM_NAME">PROGRAM_NAME</a> 
keyword).</p>
<p>Do not forget to referenced the prerequisite frameworks in the identity card 
(IdentityCard.h file [<a href="#References">3</a>]) of the framework to avoid an 
mkmk error (<em>mkmk-WARNING: .....: Modules .... in LINK_WITH was found in component 
.... which is not directly referenced, ignored</em>). <strong>For JS0GROUP, you 
must reference the System framework</strong>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>INCLUDED_MODULES = mod_1 mod_2 ... mod_n</code></p>
<p>list of modules of the current framework whose objects must be included in this 
module. Note that the &quot;.m&quot; code module suffix is not written.</p>
<p>The type of the modules referenced in this macro must be <code>NONE</code> or
<code>ARCHIVE</code> (<code>BUILT_OBJECT_TYPE=NONE</code> or <code>BUILT_OBJECT_TYPE=ARCHIVE</code>).</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>COMDYN_MODULE</code>=</p>
<p>module name which exports the CNext dynamic commons. Be careful the module name 
cannot be referenced in the <code>LINK_WITH</code> macro. This macro concerns only 
Fortran modules of course. If you need to share your own dynamic commons between 
sources, put the sources in the same module.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>IMPACT_ON_IMPORT= YES</code></p>
<p>to force the build of the modules which import this module.</p>
<p>This solves the incoherencies at run time due to the no rebuild of libraries. 
The problem does not exist with C++ programs because the dependencies between modules 
are indicated in header files. The impact is automatically computed and the rebuild 
is done. But with Fortran language this problem exists as shown in the following 
sample.</p>
<table>
	<tr>
		<td>
		<img alt="IMPACT_ON_IMPORT Keyword" src="images/CAABtlImakefile02.gif" width="339" height="239"/></td>
		<td>
		<ol>
			<li>The m3 module in library3 has the m1 module from library1 as prerequisite.</li>
			<li>The s1 symbol moves from m1 (library1) to m2 (library2).</li>
			<li>So library3 must be rebuilt to be correct at the execution time.</li>
		</ol>
		</td>
	</tr>
</table>
<p>This macro must be included always in Fortran modules and never in other modules 
for performance reasons. With C++ programs it is not necessary to force the rebuild.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>OPTIMIZATION_xxx</code>=</p>
<p>xxx can be <em>C</em>, <code>CPP</code>, or <code>FORTRAN</code></p>
<p>This macro is used to define an optimization level for a language. The value 
is ignored if mkmk runs with -g or -dev option.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>CXX_EXCEPTION=</code></p>
<p>mkmk deactivates by default C++ native exceptions. If you need to use C++ native 
exceptions in your module, add this macro to reactivate them. Do not add any value 
after the equal sign. Pay attention not to nest V5 exceptions and C++ native exceptions.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>BUILD=NO</code></p>
<p>module won&#39;t be rebuilt by mkmk until this macro is removed.<br />
Useful in <code>OS</code>-specific section.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>LOCAL_xxFLAGS</code>=</p>
<p>additive compile-time options.</p>
<p>The following table lists the name of the macro corresponding to the language 
to compile.</p>
<table class="fill">
	<tr>
		<th>Language</th>
		<th>Macro Name</th>
	</tr>
	<tr>
		<td>C++</td>
		<td><code>LOCAL_CCFLAGS</code></td>
	</tr>
	<tr>
		<td>C</td>
		<td><code>LOCAL_CFLAGS</code></td>
	</tr>
	<tr>
		<td>fortran</td>
		<td><code>LOCAL_FFLAGS</code></td>
	</tr>
	<tr>
		<td>assembler</td>
		<td><code>LOCAL_ASFLAGS</code></td>
	</tr>
	<tr>
		<td>express grammar</td>
		<td><code>LOCAL_CKMFLAGS</code></td>
	</tr>
	<tr>
		<td>yacc grammar (on UNIX only)</td>
		<td><code>LOCAL_YFLAGS</code></td>
	</tr>
	<tr>
		<td>lex grammar (on UNIX only)</td>
		<td><code>LOCAL_LFLAGS</code></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>LOCAL_LDFLAGS</code>=</p>
<p>additive link-time options</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>SYS_LIBPATH</code>=</p>
<p>additive link-edit time system library directories (-L options)</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>SYS_LIBS</code>=</p>
<p>additive link-edit time system library directories (-l options)</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4>optional</h4>
<p><code>MKMFC_DEPENDENCY</code>=<code>yes</code></p>
<p>additive link-edit time option. Required to build shared libraries directly using 
MFC classes or load modules producing <em>Windows WPF Applications</em> (per opposition 
to <em>Windows Console Applications</em>). In this last case, the <code><em>$(SUB_WIN)</em></code> 
keyword is also mandatory:</p>
<pre class="code">BUILT_OBJECT_TYPE=LOAD MODULE

LINK_WITH = ...

OS = Windows_NT 
MKMFC_DEPENDENCY = yes
LOCAL_LDFLAGS = $(SUB_WIN)</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<ul>
	<li>Mkmk needs an Imakefile.mk file for every module.</li>
	<li>The minimum required is to specify what to built (see macro <code>BUILT_OBJECT_TYPE</code>).</li>
	<li>You can express specific sections for all supported operating systems.</li>
	<li>You can add your own preprocessing variables as well as external libraries.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAABtlMkmk.htm">The Native Apps Builder mkmk</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAABtlMANprepro.htm">The Declarative File Preprocessor</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAABtlMANIdCard.htm">The IdentityCard Special File</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
