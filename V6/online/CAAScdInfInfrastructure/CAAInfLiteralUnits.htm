<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>About Numbers, Literals, and Units</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tbody>
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>About Numbers, Literals, and Units</h1>
		</td>
	</tr>
</tbody>
</table>
<p>Except when explicitly documented, numerical values stored and internally handled 
for computations are expressed using the MKSA unit system except for two dimensions:</p>
<ul>
	<li>Length are expressed in mm</li>
	<li>Angles are expressed in decimal degrees</li>
</ul>
<p>This means that dimensions returned <strong>may not be homogeneous</strong>: surfaces are 
not returned in mm2 (by homogeneity with length in mm) but in m2 (MKSA).</p>
<p>The user interface can be set to display and get values from the end user according 
to another unit system which better match your needs or habits.</p>
<p>The parameter values you can set using macros must be expressed using the same 
unit system, since the user interface filter does not exist when you run macros. 
This also ensures your macros portability. There is one exception: the literals.</p>
<p>Literals are specific objects that represent a parameter with a given type. For 
example, the <strong>Length</strong> object is dedicated to store a length, but its state 
of object brings more that the simple value storage. The <strong>Length</strong> object derives 
from the <strong>Dimension</strong> object, and thus inherits from it the <strong>ValuateFromString</strong> 
method. This method allows the value stored in the <strong>Length</strong> object to be valuated 
using a figure and a unit. For example, valuate the radius of a face fillet using 
the <strong>Radius</strong> property of the <strong>FaceFillet</strong> object which aggregates a <strong>
Length</strong> object to store this radius:</p>
<pre>MyFaceFillet.Radius.ValuateFromString(&quot;5.08mm&quot;)</pre>
<p>The character string is interpreted as a value of 5.08 expressed in mm. You can 
enter a decimal value since the <strong>Dimension</strong> object derives from the <strong>RealParam</strong> 
object which allows for real values to be set. You may want to enter inches instead. 
Simply write:</p>
<pre class="code">MyHole.Diameter.ValuateFromString(&quot;2in&quot;)</pre>
<p>pTo be compatible with formulas syntax, if you don't specify a Unit for the argument 
of <strong>ValuateFromString</strong>, the MKSA units are used:&nbsp; length are expressed 
in meters and angles in radians. <br />
As a thumb rule, always specify the unit when using <strong>ValuateFromString</strong> or 
formulas.</p>
<p>The available unit symbols you can use are those listed in the Units tab-page 
of the <strong>Tools-&gt;Options</strong> menu. The <strong>RealParam</strong> and the <strong>IntParam</strong> 
objects provide to their derived objects the <strong>Value</strong> method which sets or returns 
the value expressed in the MKSA unit system, except for length expressed in millimeters 
and angles expressed in decimal degrees.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
