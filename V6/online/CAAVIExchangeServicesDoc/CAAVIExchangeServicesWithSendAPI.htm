<html xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Export Data using SendToXPDM API</title>
 <script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Export Data using SendToXPDM API</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use-Case</td>
	</tr>
</table>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article illustrates about sending of data from 3DExperience 
		Platform to XPDM
		using SendToXPDM API. </p> 
		<ul>
			<li><a href="#What">What You Will Learn With This Use Cases</a></li>
   		    <li><a href="#UseCase">The CAAVIExchangeServicesWithSendAPI Use Case</a>
              <ul>
	     		<li><a href="#WhatUC">What Does CAAVIExchangeServicesWithSendAPI Do</a></li>
			    <li><a href="#How">How to Launch CAAVIExchangeServicesWithSendAPI Usecase</a></li>
			    <li><a href="#Where">Where to Find the CAAVIExchangeServicesWithSendAPI Code</a></li>	
		 	    <li> <a href="#Step">Step-By-Step</a></li>		
		 	  </ul> 
			 <li> <a href="#Inshort">InShort</a></li>	
			<li><a href="#References">References</a></li>
		</ul>	
		</td>
		</tr>   
  </table>
<!---------------------------------comment------------------------------------->

<script type="text/javascript">insertLinkToTop();</script>


<h2> <a name="What"> </a> What you will learn with this Usecase</h2>
<p>This usecase illustrates export scenario.User will be able to understand about how to send a data from 3DExperience 
platform to XPDM. </p>
<p>There are two ways to automate event sending from <strong>3D</strong>EXPERIENCE Platform to 
XPDM :</p>
<ul>
<li><strong>CAA Batch infrastructure to run XPGClientBatch in batch mode
</strong>:&nbsp;
XPGClientBatch does the processing prior to sending the event to the Event Bus and thus bypasses the dispatch and monitoring capability that Event Bus delivers.&nbsp;
 </li>
 <li><strong>Pull WebServices</strong> : In this case,WebService client needs to 
be developed.  </li>
</ul>
<p>Here we are using a C++ API which has been developed to send an event to Gateway Server for X-PDM. 
This API takes the full advantage of the Event Bus dispatch and monitoring 
capability. </p>
<p>In this usecase we have illustrated the use of this API for initiating the 
exchange from 3DEXperiecne Platform to XPDM.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="UseCase"></a>The CAAVIExchangeServicesWithSendAPI Use Case</h2>
<p> <code><b>CAAVIExchangeServicesWithSendAPI  </b></code> is a use case of the <code><b> CAAVIExchangeServices.edu</b></code>
framework that
illustrates the <code><b>XPGInfrastructureItf</b></code>  framework capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3> <a name="WhatUC"> </a> What Does CAAVIExchangeServicesWithSendAPI Do</h3>
<p> CAAVIExchangeServicesWithSendAPI  is a simple batch usecase.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="How"></a>How to Launch CAAVIExchangeServicesWithSendAPI Usecase</h3>
<p>To launch <code><b>CAAVIExchangeServicesWithSendAPI</b></code>, you will need to set up the build time
environment, then compile <code><b>CAAVIExchangeServicesWithSendAPI</b></code> 
along with its prerequisites, set up the run time environment, and then execute 
the use case.</p>
<p>To
launch the use case execute the command:</p>
<p><code><b> <a>mkrun -c &quot;</a><i>CAAVIExchangeServicesWithSendAPI</i></b></code><i>
</i><a><code><b><i>Repository Server User Password SecurityCtx TargetSiteID InputDataFilePath ParameterFilePath&quot;</i></b></code></a>&nbsp;</p>
<p>where:</p>

<table class="border1"  id="table13">
  <tr>
    <th style="width: 118px"><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th style="width: 118px"><b>Server</b></th>
    <td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th style="width: 118px" ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th style="width: 118px" ><b>Password</b></th>
    <td>The user password to authenticate the user</td>
  </tr>
  <tr>

    <th style="width: 118px"><b>SecurityCtx</b></th>
    <td>a string representing the security context (Role.Organization.Project).</td>
  </tr>
  <tr>
    <th style="width: 118px; height: 29px;">TargetSiteID </th>
    <td>String identifying the XPDM site. This needs to be same with the site id 
	which is defined </br>during Event Bus Deployment</td>
  </tr>
   
	<tr>
	<th style="width: 118px; height: 16px;"> <b>InputData FilePath </b></th>
	<td>The path at which the Input data file is located. This file will have a line entry in the sequence specified below corresponding to each PLM entity.</br>
	PLMType : A String representing the PLMType for the entity to be exported.</br>
        -IDSet : indicates the arguments that follow are the IDSet attribute-value for a PLM entity.</br>
	AttributeName1 : ID Attribute name for the PLM Reference to be exported.</br>
	AttributeValue1 : Attr value for the PLM Reference to be exported.</br>
N Attr-value sets : which define the IDSet for the PLM entities to be 
	transferred to XPDM.</td>
    </tr>
    	<tr>
	<th style="width: 118px;"> <b> ParameterFilePath </b></th>
	<td>The path at which Parameter XML file is 
	located. This is an XML file which has two important nodes as 
	inputParameters and outputParameters.<br>
	<strong>inputParameters</strong> node contains the different tags 
	which defines input parameters like GeometryType3D, FileFormat3D, 
	FileFormat2D,</br> SiteID and ProcessingType etc.</br>
    <strong>outputParameters</strong>	
	node contains the different tags which defines output parameters like PLMBATCH_Report_GlobalReportName,</br> 
	PLMBATCH_Report_ObjectReportFormat, PLMBATCH_Report_Directory 
	etc.</td>
    </tr>  
</table>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Where"></a>Where to Find the CAAVIExchangeServicesWithSendAPI Code</h3>
<p>The <code><b>CAAVIExchangeServicesWithSendAPI</b></code> use case is located in the <code><b>CAAVIExchangeServicesWithSendAPI.m</b></code><a><code><b>.m</b></code></a> module of the
<a><code><b>CAAVIExchangeServices.edu</b><b>.edu</b></code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAVIExchangeServices.edu</code>.<code>edu</code><code>\CAAVIExchangeServicesWithSendAPI.m\</code></td>
  </tr>
</table>
<p>where <code><a><b>InstallRootDirectory</b></a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><b>CAAVIExchangeServicesWithSendAPI</b></code> :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Step1">Instantiate the SendToXPDM</a></li>
	<li>
	<a href="#Step2">Set Target Site ID</a></li>
	<li>
	<a href="#Step3">Query PLM components from the database</a></li>
	<li><a href="#Step4">Set PLM Component to be transferred</a></li>
	<li><a href="#Step5">Set Applicative Parameters</a></li>
	<li><a href="#Step6">Invoke Send Method</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>


<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><b>CAAVIExchangeServicesWithSendAPI</b></code> use case begins by creating a session
and connecting to the input Repository.&nbsp; This
being the most fundamental prerequisite for all batch use cases, it is the first
step in their execution.</p>
<p>In this case, we create a session and connect to Repository .There are other parameters as well,
details of which can be found in the&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
use case article <a href="#References">[2]</a>.
This article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Step1"></a>Instantiate the SendToXPDM</h3>
<p> Create the object of <strong>SendToXPDM</strong> class. This object will 
allow us to invoke different methods declared in public header of SendToXPDM 
class.&nbsp; </p>
<p> This class is having default constructor so we can directly create the 
object.</p>

<pre class="code">
SendToXPDM oSendObject;        </pre>
 
    
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Step2"></a>Set Target Site ID</h3>
<p> While transferring the data between 3DExperience Platform and XPDM it is 
necessary to set the target site ID.</p>
<p> This is mandatory step as Target site ID is important parameter in exchange.</p>
      	
      	<pre class="code">
  CATUnicodeString iTargetSiteID = iArgv[6];
  hr = oSendObject.SetTargetSiteID(iTargetSiteID);        </pre>
   

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Step3"></a>Query PLM components from the database</h3>
<p> In CAA usecase, we have provided the text file which contains the 
information about PLM components which need to be transferred.This file contains 
the information about PLMType, Name and value of attributes to uniquely identify 
the attribute from database. e.g. PLM_EXTERNALID,Version etc.</p>
<pre class="code">
CATLISTP(CATIAdpPLMIdentificator) oPLMComponentsId;
CATUnicodeString iDataFileName = iArgv[7];
if(iDataFileName != "")  hr = RetrievePLMComponents(iDataFileName,oPLMComponentsId);
</pre>
<p> Local method named as <code>RetrievePLMComponents</code> has been used for reading text file, 
creating attribute set and querying the PLM component from database. </p>

<pre class="code">HRESULT RetrievePLMComponents(CATPLMBatch* iPLMBatch, CATUnicodeString iDataFileName,CATLISTP(CATIAdpPLMIdentificator) &amp;oPLMComponentsId)
{
  ... 
  const char* iStrPLMType = listOfStrings[1].ConvertToChar();
  hr = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,iStrPLMType,opiIDComp);
  ...
}
</pre>
<p> This local method uses CAA API <code> CAARetrieveIDofUniquePLMObject</code> for querying the PLM Components from database. 
This is explained in <a href="#References">Querying PLM Object With Unique Key[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Step4"></a>Set PLM Component to be transferred</h3>
<p>Once list of PLM components identificators is successfully retrieved from 
database then we set this PLM components.<code> SendToXPDM::SetSourceObjectID</code> method sets the identificator of PLM Component to be transferred.</p>
<pre class="code">
for (int i=1 ; i &lt;= oPLMComponentsId.Size(); i++)
{
  hr = oSendObject.SetSourceObjectID( oPLMComponentsId[i]); 
  ...
}
</pre>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Step5"></a>Set Applicative Parameters</h3>
<p> We can provide some customized parameters also. In CAA usecase,we have 
provided these parameters by using XML file. This is not a mandatory step.</p>
<pre class="code">
...
CATUnicodeString iParamXMLFile = iArgv[8];
if(iParamXMLFile != "") hr = SetCustomParameterFromXML(oSendObject,iParamXMLFile);
...
</pre>
<p> We have created one local method named as <code> SetCustomParameterFromXML </code> for this purpose. This method has been used for parsing XML file and setting customized parameters.</p>
<pre class="code">
HRESULT SetCustomParameterFromXML(SendToXPDM &amp;oSendObject,CATUnicodeString iParamXMLFile)
{
  ...
  if(oNodeName == "QueueName")
     hr = oSendObject.SetQueueName(oNodeValue);
  else if(oNodeName == "Description")
     hr = oSendObject.SetDescription(oNodeValue);		
  ...
  if(ParentNode.Compare("Custom")) 
  {
    iCustomParams.Append(oNodeName);
    iCustomParams.Append(oNodeValue);
  }
  ...
  hr = oSendObject.SetCustomParams(iCustomParams);
  ...
}
</pre>
<p> Customized parameters can be &quot;<strong>QueueName</strong>&quot;,&quot;<strong>Description</strong>&quot;, 
&quot;<strong>GeometryType</strong>&quot;, &quot;<strong>ProcessingType</strong>&quot; etc. These 
parameters are explained in <a href="#References">xPDM Transfer Batch 
Parameters[3]</a>.</p>
<p> <code> SendToXPDM::SetQueueName</code> method is used for setting QueueName,if 
it is defined in Parameter XML file. Here,<code>oNodeValue</code> is a string 
of type <code> CATUnicodeString</code> which represents value of QueueName node.</p>
<p> <code> SendToXPDM::SetDescription</code> method is used for setting description of an event, if it is defined in parameter XML File.Here,<code>oNodeValue</code> is a string 
of type <code> CATUnicodeString</code> which represents value of description 
node.</p>
<p> <code> SendToXPDM::SetCustomParams</code> method is used for setting other 
customized parameters which are defined in parameter XML File. Here,<code> iCustomParams</code> is a list of 
of type <code> CATListOfCATUnicodeString</code>. This list contain the Name-Value pairs 
of different customized parameters mentioned in Parameter XML file. </p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Step6"></a>Invoke Send Method</h3>
<p> In this step we simply invoke <code> SendToXPDM::Send</code> method.</p>
<pre class="code">
CATString oEventUid;
CATError *opReturnError = NULL;
hr = oSendObject.Send(oEventUid,opReturnError);
...
</pre>
<p> 

<code> SendToXPDM::Send</code> method invokes with following arguments;</p>
<ul> 
<li> <code> oEventUid </code>is the uid of event which has been generated with 
this call. This is of type <code> CATString</code>. This is an output parameter.</li>
<li> <code> opReturnError </code>is of type <code> CATError </code>.If any error occurs then that can be 
retrieved by using this interface. We can use <code> CATError::GetMsgId </code>to retrieve error Id and <code> CATError::GetNLSDiagnostic</code> to retrieve the error message. 
These error and warning are detailed in <a href="#References">X-PDM Error Code 
[5]</a>.</li>

</ul>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><b>CAAVIExchangeServicesWithSendAPI</b></code> use case ends by 
simply closing the PLM session. Since all batch use cases&nbsp;necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">2</a>].&nbsp;</p>


<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Inshort"></a>In Short</h2>
<p>This article gives details about sending the data from 
3DExperience Platform to XPDM. 
User will come to know about different methods of SendToXPDM API.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="References"></a>References    </h2>
 <table>
      <tr>
     <td valign="top">[1]</td>
     <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a> </td>
     </tr>

     <tr>
     <td valign="top">[2]</td>
     <td>
  	 <a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">Creating a Basic PLM Batch</a>
  	</td>
	   </tr>
  
     <tr>
       <td >[3]</td>
       <td >
		<a href="CAAVIExchangeBatchParam.htm">xPDM Transfer Batch Parameters</a></td>
     </tr>
   
 
     <tr>
       <td>[4]</td>
       <td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponentWithUniqueKey.htm">Querying PLM Object with Unique Key</a></td>
     </tr>

     <tr>
       <td >[5]</td>
       <td >
		<a href="CAAXPDMTcErrorCode.htm">X-PDM Error Code</a></td>
     </tr>


   </table>
   
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History </h2> <table><tr>
    <td valign="top"><strong>Version</strong>: [July 2014]</td>
    <td valign="top">Document created</tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>
  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


