<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Feature Modeler Concept</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Feature Modeler Concept</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Abstract"></a>Abstract</h2>
		<p>When you are working with PLM Representation Modelers, the persistent 
		objects you are working with are features. A feature is an object coming 
		from the Feature modeler. This article introduces it, and gives you the 
		minimal information to know.</p>
		<ul>
			<li><a href="#100000">What Is a Feature?</a><ul>
				<li><a href="#110000">For which Purpose?</a></li>
				<li><a href="#120000">Stored in File Vault</a></li>
				<li><a href="#130000">A Black Box</a></li>
				</ul>
			</li>
			<li><a href="#200000">A High Level Object-Oriented 	Model</a>
			<ul>
					<li><a href="#210000">Data Model</a></li>
					<li><a href="#220000">Behavior Model</a></li>
					<li><a href="#230000">Reference / Instance Model</a></li>
				</ul>
			</li>
			<li><a href="#300000">Spec/Result Model</a><ul>
				<li><a href="#310000">Attribute Quality</a></li>
				<li><a href="#320000">Update Protocol</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="100000"></a>What Is a Feature?</h2>
<p>This section describes in few lines what is a feature with an external point 
of view.</p>
<h3><a name="110000"></a>For which Purpose?</h3>
<p>To associate geometry, or complex data to a PLM structure, the solution is the 
Feature modeler. The picture just below represents the board of a skateboard. The 
board has been designed with plenty of elementary features, built together to made 
up a final object, the board. What you see is the visualization (one behavior) of 
the final object- the board.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1 Board with Features</caption>
	<tr>
		<td>
		<img alt="Board with Features" height="124" src="images/CAAFmOverview_skate.gif" width="341"/></td>
	</tr>
</table>
<p>It is an example of geometry, but the feature modeler can be also useful to create 
and store simple or complex data, like the result of a computation between several 
features.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="120000"></a>Stored in File Vault</h3>
<p>If PLM Object are stored in the vault server, feature are always stored within 
the store or file server. A feature is instantiated inside a container itself contained 
in a structure named the stream.</p>
<table>
	<caption>Fig.2 Persistent Storage</caption>
	<tr>
		<td>
		<img alt="Persistent Storage" height="367" src="images/CAAFmOverview_Container.gif" width="527"/></td>
	</tr>
</table>
<p>First, the picture just above shows that a stream can contain one or several 
containers. Generally an application/or a modeler has its dedicated container. Then 
you can observe that the stream is pointed by one PLM Representation reference (and 
only one).</p>
<p>You cannot access the stream structure, it is an hidden entity, the best you 
could have is to access to a container. But in fact, even this container structure 
can be unknown for you. Generally the modeler or the application exposing API to 
create feature hide the container.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="130000"></a>A Black Box</h3>
<p>A feature that you get or create with DS or third party API are black boxes. 
There is no generic API to scan the contents (feature modeler point of view) of 
the feature. To modify a feature (example the wide of board [<a href="#Fig1">Fig.1</a>]), 
you have to use the API provided by the modeler or the application.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="200000"></a>A High Level Object-Oriented Model</h2>
<p>This section describes in few lines what is a feature with an internal point 
of view.</p>
<h3><a name="210000"></a>Data Model</h3>
<p>A feature object data is described by its attributes. Attributes are like &quot;slots&quot; 
attached to feature objects in which data is stored. Attributes contain two main 
types of data:</p>
<ol>
	<li>Simple data corresponding to standard C++ types such as integer, double, 
		string, etc.</li>
	<li>Feature data which is a feature object.</li>
</ol>
<p>An attribute is essentially defined by its:</p>
<ul>
	<li><strong>Name</strong>: this name must be unique to the feature object to 
		which the attribute is attached. In other words, the same name cannot be 
		given to another attribute of the same feature object.</li>
	<li><strong>Type</strong>: this is the kind of data the attribute can contain 
		(i.e., simple data of type integer, double, etc., or feature data).</li>
	<li><strong>Quality</strong>: this is a keyword (<em>IN</em>, <em>OUT</em> or
		<em>NEUTRAL</em>) used by the Feature Modeler during an update operation 
		(see a Net of Objects Linked Together section.</li>
</ul>
<p>Let's look at a simple example, where a feature called &quot;Point2D&quot; is 
defined to represent a point on a plane. This feature would have at least two attributes 
corresponding to the coordinates of a point:</p>
<p>
<img alt="Feature with Two Attributes" height="91" src="images/CAAFmOverview_AttrPoint1.png" width="92"/></p>
<p>The &quot;X&quot; and &quot;Y&quot; attributes are of the &quot;simple&quot; 
type: double floating point values.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="220000"></a>Behavior Model</h3>
<p>Behavior can be associated to a feature object type. In the case of &quot;Line3D&quot; 
feature, it is obvious that one of the required operations is to draw it. We would 
therefore have an interface (CATILine) containing a method by which the line can 
be drawn:</p>
<p>
<img alt="CATLine" height="118" src="images/CAAFmOverview_LineProto.png" width="341"/></p>
<p>Any feature object type deriving from &quot;Line3D&quot; will also inherit the &quot;CATILine&quot; 
interface, allowing its behavior to be reused.</p>
<p>One major benefit of the Feature Modeler is that it provides a set of generic 
mechanisms that are natively integrated to the DS environment. In other words, each 
feature object created type is treated as a native DS object, thus benefiting from 
elaborate services automatically:</p>
<ul>
	<li>Transactions: allowing the &quot;Undo&quot; of modifications applied to 
		a feature object.</li>
	<li>Cut, copy, and paste feature objects.</li>
	<li>Persistency: save and retrieve (stream/unstream) a feature object within 
		the container of the stream descriptor in which it exists.</li>
	<li>Link Management: referencing any feature object a stable way.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="230000"></a>Reference / Instance Model</h3>
<p>A feature, as you can see in a container, is an &quot;instance&quot;, an instance 
feature being created from a &quot;reference&quot; feature. This reference can be 
another existing instance, or can be a &quot;StartUp&quot; feature. &quot;StartUp&quot; 
means a a build-time definition (xml defintion) of a feature. The StartUps are group 
together within a file named feature catalog.</p>
<p>This instantiation step is hidden by the API of creation.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="300000"></a>Spec/Result Model</h2>
<p>In real world applications, feature objects are seldom static and isolate objects. 
A given feature might have an attribute that depends on other ones. The latters 
are called the <strong>Specs</strong> while the former is named the <strong>Result</strong>, 
hence the &quot;Spec/Result&quot; model. So whenever a Spec changes, the &quot;Result&quot; 
must be updated accordingly.</p>
<p>For instance, if we add to the &quot;Point3D&quot; feature an attribute &quot;Distance&quot; 
representing the distance from the origin to the point, it's obvious that this attribute 
must be updated each time any coordinate changes.</p>
<p>
<img alt="Point3D Feature" height="109" src="images/CAAFmOverview_SpecResult_00.png" width="107"/></p>
<p>The &quot;X&quot;, &quot;Y&quot; and &quot;Z&quot; attributes are thus the Specs 
of &quot;Point3D&quot; while &quot;Distance&quot; is the Result. This is a simple 
example, where the dependency is local to a feature. But things can get complicated 
if a feature's Specs in turn depend on other feature's Result as we will see in 
the rest of this section.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="310000"></a>Attribute Quality</h3>
<p>Attributes must thus be labeled as &quot;Spec&quot; or &quot;Result&quot; so 
that the Feature Modeler can figure out whether a feature object is out of date 
and should be refreshed. This is done by giving a <strong>quality</strong> to each 
attribute:</p>
<ul>
	<li><strong>IN</strong> for &quot;Spec&quot; attributes.</li>
	<li><strong>OUT</strong> for &quot;Result&quot; attributes.</li>
	<li><strong>NEUTRAL</strong> for attributes that are neither IN nor OUT.</li>
</ul>
<p>The &quot;Point3D&quot; feature would be defined as:</p>
<p>
<img alt="Point3D Feature" height="108" src="images/CAAFmOverview_SpecResult_01.png" width="139"/></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="320000"></a>The Update Protocol</h3>
<p>Let's consider a network of inter-related feature objects: a feature object whose 
attributes depend on another's attributes one and so on. It is obvious that such 
network must be kept consistent at all times: if an attribute value is modified 
in a given feature object, all the related ones must be rebuilt to reflect this 
change.</p>
<p>The problem is not only finding out which feature objects should be rebuilt but 
also in which order they must be updated. Thanks to the Feature Modeler, applications 
are relieved from this chore. However, it is the responsibility of each feature 
object to rebuild itself appropriately when asked by the Feature Modeler. This is 
the <strong>Update</strong> operation [<a href="#References">1</a>], where the feature 
object must update its &quot;Results&quot; from its &quot;Specs&quot; which are 
ensured to be up to date.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Feature modeler defines a high-level object-oriented model and a spec/result 
model to realize complex net of object persistent in file vault.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFmTaCommonProtocols.htm">Understanding Common Protocols</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Sept 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
