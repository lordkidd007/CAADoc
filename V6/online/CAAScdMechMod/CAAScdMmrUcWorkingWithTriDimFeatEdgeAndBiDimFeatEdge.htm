<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Working with TriDimFeatEdge And BiDimFeatEdge</title>
</head>

<body onload="highlightSearchTerms();">

<table class="table1">
	<tbody>
	<tr>
		<td class="DocHeader3">
		<table class="DocHeader">
			<tbody>
			<tr>
				<td class="DocHeader1" colspan="2">
				<h1>Working with TriDimFeatEdge And BiDimFeatEdge</h1>
				</td>
			</tr>
			<tr>
				<td class="DocHeader4" colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td class="DocHeader3">
				<table class="DocHeaderIntro">
					<tbody>
					<tr>
						<td class="Intro1">
						<p class="header"><a name="hj-top"></a>This use case fundamentally 
						illustrates about working with TriDimFeatEdge And BiDimFeatEdge. 
						In this use case we learn how retrieve and use the TriDimFeatEdge 
						And BiDimFeatEdge.</p>
						<hr class="header" /></td>
					</tr>
					<tr>
						<td class="Intro2"><span class="run-in">Before you begin:</span> 
						Note that:<ul>
							<li>You should first launch CATIA.</li>
							<li>The macro should essentially be launched from a 
							Part Editor (meaning input data is always a PLM Product 
							Representation Reference).</li>
							<li>Product/Part editor must be active before launching 
							the macro.</li>
						</ul>
						<p><span class="run-in">Where to find the macro:</span>
						<a href="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdgeSource.htm">
						CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdgeSource.htm</a></p>
						</td>
					</tr>
				</tbody>
				</table>
				</td>
				<td class="DocHeader2">
				<table class="DocTopics">
					<tbody>
					<tr>
						<td class="TopicsTitle">Related Topics</td>
					</tr>
					<tr>
						<td><a href="../CAAScdInfInfrastructure/CAAInfObjEditor.htm">Editor Object</a></td>
					</tr>
					<tr>
						<td><a href="../CAAScdInfInfrastructure/CAAInfObjSelection.htm">Selection Object</a></td>
					</tr>
					<tr>
						<td><a href="CAAMmrTocPart.htm">Part Object Model Map</a></td>
					</tr>
				</tbody>
				</table>
				</td>
			</tr>
		</tbody>
		</table>
		</td>
	</tr>
</tbody>
</table>
<table class="table1">
	<tbody>
	<tr>
		<td>
		<ol class="task">
			<li>
			<p>Prolog</p>
			<p>The macro begins with the <strong>WorkingWithTriDimFeatEdgeAndBiDimFeatEdge</strong> 
			main subroutine. It typically begins with the following extract of code, 
			which serves as a built-in &quot;error handling&quot; mechanism.</p>
			<pre class="code"><span class="keyword">Sub</span><strong> WorkingWithTriDimFeatEdgeAndBiDimFeatEdge</strong>()

<span class="keyword">On Error GoTo </span>ErrorSub
...</pre>
			<p>The first instruction means that when a method will throw an error, 
			the macro will skip to the line named, <strong>ErrorSub</strong>. See the step
			<a href="#Epilog">Epilog</a>.</p>
			<p><code>WorkingWithTriDimFeatEdgeAndBiDimFeatEdge</code> subroutine 
			firstly retrieves Part object from selection. Then we retrieve HybridBodies. 
			Then from these HybridBodies we retrieve first HybridBody object then 
			we prompt the user for selection of TriDimFeatEdge or BiDimFeatEdge. 
			According to selection we create point on that edge according to input 
			distance. </p>
			</li>
			<li>
			<p>Here, we retrieve the current active Editor object to 
			select PLM object</p>
			<pre class="code">... 
<span class="keyword">Dim</span> oCurrentActiveEditor <span class="keyword">As</span> <strong>Editor</strong>
<span class="keyword">Set</span> oCurrentActiveEditor = CATIA.<strong>ActiveEditor</strong>
...</pre>
			<p>Return a <strong>Editor</strong> object from the Application object (CATIA) 
			using the <strong>ActiveEditor</strong> method. </p>
			</li>
			<li>
			<p>We then retrieve Selection object from active editor</p>
			<pre class="code">...
<span class="keyword">Dim</span> oObjSelection
<span class="keyword">Set</span> oObjSelection = oCurrentActiveEditor.<strong>Selection</strong>
...</pre>
			<p>Return a <strong>Selection</strong> object from the Active Editor using <strong>
			Selection</strong> method. It is significant to note here that we haven't 
			declared a type for <code>oObjSelection</code> (as for several other 
			variables, further ahead in this macro). The section &quot;Tips about VB 
			and VBA&quot; in the technical article &quot;About VB, VBA, Debug, and Compatibility&quot; 
			[] provides an explanation for why these variables are not typed.
			</p>
			</li>
			<li>
			<p>The selection object retrieved above is now updated 
			with the selection criteria (&quot;Part&quot;). The following image shows 
			sample Object from which user could select Part object (Representation).</p>
			<table>
				<tbody>
				<tr>
					<td>
					<img alt="Part Updated" src="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdge_in.jpg" width="455" height="328"/></td>
				</tr>
			</tbody>
			</table>
			<pre class="code">...
<span class="keyword">Dim</span> strStatus<strong> </strong><span class="keyword">As</span> String
<span class="keyword">Dim</span> oInputObjectType(0)

oInputObjectType(0) = &quot;Part&quot;
strStatus = oObjSelection.<strong>SelectElement</strong>(<strong>oInputObjectType</strong>, &quot;Select a Part Element from spec tree or the 3D Viewer&quot;, False)
...</pre>
			<p>&quot;<strong><em>Part</em></strong>&quot; type is appended to 
			an array (<code>oInputObjectType</code>), which now represents the select 
			criteria. The selection object (<code>oObjSelection</code>) is then 
			updated with this select criteria, with a call to <code>SelectElement</code> 
			method. </p>
			<p>At this stage, the application prompts an end user to 
			select a <em>Part</em> from the spec tree or the 3D Viewer (second argument 
			of the <code>SelectElement</code> method, represents the prompt message)</p>
			<p>The last argument is false, indicating the end user 
			will always be invited to select something in the spec tree or the 3D 
			Viewer, though an entity (of the type set as filter in the selection 
			criteria) has already been selected by the end-user.</p>
			<p>Once the user does the selection, the application proceeds 
			further.</p>
			</li>
			<li>
			<p>Now that the user has made a selection in the spec tree 
			or the 3D Viewer, the current step retrieves it (a <em><strong>Part</strong></em>) 
			from the Selection Object which contains it.</p>
			<pre class="code">...
<span class="keyword">Dim</span> oSelectedElement <span class="keyword">As</span> SelectedElement
<span class="keyword">Set</span> oSelectedElement<strong> </strong> =  oObjSelection.<strong>Item</strong>(1)

<span class="keyword">Dim</span> oPart <span class="keyword">As</span> <strong>Part</strong>
<span class="keyword">Set</span> oPart = oSelectedElement<strong>.Value</strong>

MsgBox (&quot;Selected Part Name :&quot;) + oPart.<strong>Name</strong>
...</pre>
			<p>A call to <code>SelectionObject::Item</code> at index 
			1, on <code>oObjSelection</code> returns the selected entity, as a
			<em>SelectedElement</em> type (<code>oSelectedElement</code>). </p>
			<p>Next a call to <code>SelectedElement::Value</code> on 
			the selected entity <code>oSelectedElement</code> (retrieved above) 
			returns <code>oPart</code>, a <em>Part</em> type representing the selection.</p>
			<p>Then we display the <em>Part</em> object name using
			<code>Part::Name</code>.</p>
			<table>
				<tbody>
				<tr>
					<td>
					<img alt="Prompt" src="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdge_1.jpg" width="203" height="107"/></td>
				</tr>
			</tbody>
			</table>
			</li>
			<li>
			<p>Next we retrieve Hybrid Body.</p>
			<p>Firstly we retrieve HybridBodies from Part and then we retrieve first 
			HybridBody from the list of Hybrid Bodies.</p>
			<pre class="code">...
<span class="keyword">Dim</span> oHybridBodies <span class="keyword">As</span> HybridBodies
<span class="keyword">Set</span> oHybridBodies =  oPart.<strong>HybridBodies</strong>

<span class="keyword">Dim</span> oHybridBody <span class="keyword">As</span> HybridBody
<span class="keyword">Set</span> oHybridBody =  oHybridBodies.<strong>Item</strong>(1)
...</pre>
			<p>A call to Part::HybridBodies on oPart retrieves a list of Hybrid 
			Body oHybridBodies, a HybridBodies type</p>
			<p>Next a call to HybridBodies::Item on oHybridBodies retrieves Hybrid 
			Body(oHybridBody), in this case we retrieve first object from the list.
			</p>
			<p>Then we display the <em>HybridBody</em> object name using
			<code>HybridBody::Name</code>.</p>
			<table>
				<tbody>
				<tr>
					<td>
					<img alt="Prompt" src="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdge_2.jpg" width="198" height="107"/></td>
				</tr>
			</tbody>
			</table>
			</li>
			<li>
			<p>Next select and retrieves TriDimFeatEdge or BiDimFeatEdge.</p>
			<p>Prompt the user to select the TriDimFeatEdge or BiDimFeatEdge.</p>
			<pre class="code">...
<span class="keyword">Dim</span> oInputObjectType1(1)
oInputObjectType1(0) = &quot;TriDimFeatEdge&quot;
oInputObjectType1(1) = &quot;BiDimFeatEdge&quot;
Status = oObjSelection.SelectElement(oInputObjectType1, &quot;Select the  TriDimFeatEdge or BiDimFeatEdge&quot;, False)
...</pre>
			<p>&quot;TriDimFeatEdge&quot; and &quot;BiDimFeatEdge&quot; types are appended to an array 
			(<code>oInputObjectType1</code>), which now represents the select criteria. 
			The selection object (<code>oObjSelection</code>) is then updated with 
			this select criteria, with a call to <code>SelectElement</code> method.
			</p>
			<p>At this stage, the application waits for an end user to select TriDimFeatEdge 
			or BiDimFeatEdge from the spec tree or the 3D Viewer (second argument 
			of the <code>SelectElement</code> method, represents the prompt message)</p>
			<p>Now that the user has made a selection in the spec tree or the 3D 
			Viewer, the current step retrieves it (TriDimFeatEdge or BiDimFeatEdge) 
			from the Selection Object which contains it.</p>
			<pre class="code">...
<span class="keyword">Dim</span> oCurve
<span class="keyword">Set</span> oCurve = oObjSelection.Item(1).Value
...</pre>
			<p>A call to <code>SelectionObject::Item</code> at index 
			1, on <code>oObjSelection</code> returns the selected entity, as a
			<em>SelectedElement</em> type (<code>oSelectedElement</code>). </p>
			<p>Next a call to <code>SelectedElement::Value</code> on 
			the selected entity <code>oSelectedElement</code> (retrieved above) 
			returns <code>oCurve</code>, a veriant representing the TriDimFeatEdge 
			or BiDimFeatEdge type according to selection.</p>
			</li>
			<li>
			<p>Then we create point on selected curve (HybridShapePointOnCurve)</p>
			<p>Firstly we prompt the user to input the radius value for face fillet.</p>
			<pre class="code">...
<span class="keyword">Dim</span> dPointDistance <span class="keyword">As</span> Double
dPointDistance = InputBox(&quot;Please enter the point distance on curve  &quot;, &quot;Enter Point Distance Value&quot;)
...</pre>
			<table>
				<tbody>
				<tr>
					<td>
					<img alt="Enter Point Distance Value Dialog Box" src="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdge_3.jpg" width="445" height="384"/></td>
				</tr>
			</tbody>
			</table>
			<p>Now we create point on selected curve (TriDimFeatEdge or BiDimFeatEdge) 
			with input distance.</p>
			<pre class="code">...
<span class="keyword">Dim</span> oHybridShapePointOnCurve <span class="keyword">As</span> HybridShapePointOnCurve
<span class="keyword">Set</span> oHybridShapePointOnCurve = oPart.HybridShapeFactory.AddNewPointOnCurveFromDistance(oCurve, dPointDistance, False)
...</pre>
			<p>A call to <code>Part::HybridShapeFactory</code> , on
			<code>oPart </code>returns the Factory object.</p>
			<p>Next a call to <code>Factory::AddNewPointOnCurveFromDistance</code> 
			create a point on the curve (<code>oCurve</code>, a <em>TriDimFeatEdge</em> 
			or <em>BiDimFeatEdge</em> type) with input distance (<code>dPointDistance</code>).</p>
			<p>Next we append newly created point in the HybridBody.
			</p>
			<pre class="code">...
oHybridBody.AppendHybridShape oHybridShapePointOnCurve

oPart.Update
...</pre>
			<p>A call to <code>HybridBody::AppendHybridShape</code> 
			appends newly created line <code>oHybridShapePointOnCurve</code> (a
			<em>HybridShapePointOnCurve</em> type).</p>
			<p>Then we update the Part object (<code>oPart</code>) 
			using call <code>Part::Update</code>. After this call we can see the 
			created line as shown in below image.</p>
			<table>
				<tbody>
				<tr>
					<td>
					<img alt="Part Updated" src="CAAScdMmrUcWorkingWithTriDimFeatEdgeAndBiDimFeatEdge_out.jpg" width="438" height="312"/></td>
				</tr>
			</tbody>
			</table>
			</li>
			<li>
			<p>We then save the changes.</p>
			<pre class="code">...
CATIA.GetSessionService(&quot;PLMPropagateService&quot;).<strong>Save</strong>
...</pre>
			<p>We next save this product/ Representation in the database. 
			It is done with calls which occur in the following sequence</p>
			<ul>
				<li>
				<p>A call to <code>Application::GetSessionService</code> 
				on CATIA (an Application object, defined internally by VB) returns 
				a <em>PLMPropagateService</em> object.</p>
				</li>
				<li>
				<p>The next call to <code>PLMPropagateService::Save</code> 
				eventually saves this representation n the database.</p>
				</li>
			</ul>
			</li>
			<li>
			<p><a name="Epilog"></a>Epilog</p>
			<p>The following extract of code is primarily meant for 
			error-handling purpose. Any run time error that the macro encounters 
			results in the execution flow reaching this part of the code, and then 
			terminating with a normal exit from subroutine scope.</p>
			<pre class="code">...
    <span class="keyword">GoTo</span> EndSub
    
ErrorSub:
    MsgBox Err.Description

EndSub:
<span class="keyword">End Sub</span></pre>
			</li>
		</ol>
		</td>
	</tr>
</tbody>
</table>

<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
