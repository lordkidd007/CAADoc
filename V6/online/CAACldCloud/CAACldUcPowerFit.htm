<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating a Surface Thanks to the PowerFit Algorithm</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Surface Thanks to the PowerFit Algorithm</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a surface supported by one cloud of 
		points and curves.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAACldQsrPowerFit Use Case</a>
			<ul>
				<li><a href="#What">What Does CAACldQsrPowerFit Do</a></li>
				<li><a href="#How">How to Launch CAACldQsrPowerFit</a></li>
				<li><a href="#Where">Where to Find the CAACldQsrPowerFit Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to use the PowerFit algorithm to build 
a surface on points and curves.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACldQsrPowerFit Use Case</h2>
<p>CAACldQsrPowerFit is a use case of the CAACloudQsrItf.edu framework that illustrates 
CAACloudQsrItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACldQsrPowerFit Do</h3>
<p>CAACldQsrPowerFit presents an example of PowerFit possibilities: Thanks to this 
algorithm, a surface is computed on points (the cloud of points is created by the 
use case) and curves.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACldQsrPowerFit</h3>
<p>To launch CAACldQsrPowerFit, you will need to set up the build time environment, 
then compile CAACldQsrPowerFit along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>]. To launch 
the use case execute the command:</p>
<pre class="code">mkrun &quot;CAACldQsrPowerFit Repository Server User Password Role PLMType PLMExternalID Version&quot;</pre>
<p>Where:</p>
<table class="border1">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<th>User Id</th>
		<td>The user identifier.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>Role</th>
		<td>Choose Designer.</td>
	</tr>
	<tr>
		<th>PLMType </th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the PLM_ExternalID attribute of the PLM representation 
		reference containing the data to edit the user feature reference. </td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The attribute value of the same PLM Representation Reference.</td>
	</tr>
</table>
<p>(*) The Input Model can be loaded in the PROVIDER from CAACldPowerFit.3dxml file, 
at the path specified below.</p>
<p><code>InstallRootFolder\CAADoc\CAACloudQsrItf.edu\InputData\CAACldPowerFit.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li><b>PLM_ExternalID</b> : Part1_Representation-1959314888 (with a prefix)</li>
	<li><b>Version </b>: --- </li>
</ul>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: It is mandatory 
		that you provide a suitable prefix to the PLM_ExternalId of the Input Model, 
		to ensure that data stored in the PROVIDER, 
		is unique.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACldQsrPowerFit Code</h3>
<p>The CAACldQsrPowerFit use case is made of main program located in the CAACldQsrPowerFit.m 
module of the CAACloudQsrItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAACloudQsrItf.edu\CAACldQsrPowerFit.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are ten logical steps in <code>CAACldQsrPowerFit</code>:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Open the Representation Reference and Retrieve Specification Container</a></li>
	<li><a href="#Step3">Retrieving the Factory of DSE and QSR Elements</a></li>
	<li><a href="#Step4">Retrieving and Creating Data</a></li>
	<li><a href="#Step5">Creating the Algorithm</a></li>
	<li><a href="#Step6">Setting the Inputs and the Parameters</a></li>
	<li><a href="#Step7">Running the Algorithm and Getting the Result</a></li>
	<li><a href="#Step8">Creating the Datum Feature</a></li>
	<li><a href="#Step9">Analyzing the Results</a></li>
	<li><a href="#Step10">Saving and Closing the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The use case begins creating a session, and opening the representation. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Open the Representation Reference and Retrieve Specification Container</h3>
<pre class="code">  ...
  CATUnicodeString PLM_RepType = iArgv[6] ;
  
  CATOmbLifeCycleRootsBag Bag ;

  rc = ::CAAOpenPLMComponent(PLM_RepType.ConvertToChar(), PLM_ExternalIDValue, V_versionValue, IID_CATIPLMComponent, (void**)&amp;piPLMComponentOnPart, Bag, TRUE) ;
  ...
  // Swap to Edit Mode
  CATIPsiRepresentationLoadMode_var spLoadModeOn3DShape = piPLMComponentOnPart ;
  if (spLoadModeOn3DShape != NULL_var) {
    rc = spLoadModeOn3DShape -&gt; ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode) ;
  }
  
   CATIPLMNavRepReference * pPLMNavRepReference = NULL ;

  rc = piPLMComponentOnPart -&gt; QueryInterface(IID_CATIPLMNavRepReference, (void**) &amp;pPLMNavRepReference) ;

  
  CATIPrtContainer * piPartContainer = NULL ;
  if (SUCCEEDED(rc) &amp;&amp; pIDataAccessOnCreatedRepRef) {
    rc = pIDataAccessOnCreatedRepRef -&gt; RetrieveApplicativeContainer(&quot;CATPrtCont&quot;, IID_CATIPrtContainer, (void**) &amp;piPartContainer) ;

    pIDataAccessOnCreatedRepRef -&gt; Release() ;
    pIDataAccessOnCreatedRepRef = NULL ;
  }
  ...</pre>
<p>This interface is used to retrieve the main containers of a Part document.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Factory of DSE and QSR Elements</h3>
<pre class="code">  ...
  CATIQsrCAAFactory * pQsrCAAFactory = NULL ;
  HRESULT rc = piPartContainer -&gt; QueryInterface (IID_CATIQsrCAAFactory, (void **) &amp;pQsrCAAFactory) ; 
  ...</pre>
<p>This factory is required to create the algorithm.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving and Creating Data</h3>
<pre class="code">  ...
  CATIPrtPart_var hPart ( piPartContainer -&gt; GetPart() ) ;
  ...
  CATLISTP(CATCell) ListOfEdge ;
  
  CATLISTV(CATBaseUnknown_var) ListBodyResults ;
  GetElementsList(hPart, ListBodyResults) ;
  
  for (int NoBody = 1; NoBody &lt;= ListBodyResults.Size() ; NoBody ++) {
    CATIMfMonoDimResult_var hMonoDimTmp = ListBodyResults[NoBody] ;
    if (!! hMonoDimTmp) {
      CATIGeometricalElement_var hFeatureResultGeomElem = ListBodyResults[NoBody] ;
      if (!! hFeatureResultGeomElem) {
        CATBody_var hPartTopoBody = hFeatureResultGeomElem -&gt; GetBodyResult();
        if (!! hPartTopoBody) {
          CATLISTP(CATCell) CellsList ;
          hPartTopoBody -&gt; GetAllCells(CellsList, 1) ;
          ListOfEdge.Append(CellsList) ;
        }
      }
    }
  }
  ...
  CATCell * pFirstEdge = ListOfEdge[1] ;
  ...
  CATGeoFactory * pGeoFactory = pFirstEdge -&gt; GetContainer() ;
  ...
  CATIDatumFactory * pDatumFactory = NULL ;
  rc = pSpecContainer -&gt; QueryInterface (IID_CATIDatumFactory, (void **) &amp;pDatumFactory) ;  
  ...
  int NbPntsCircle = 100 ;
  int NbCircles = 100 ;
  int NbPoints = NbPntsCircle * NbCircles ;
  float * pPoints = new float[3*NbPoints] ;
  ...
  CreateCloud (pPoints, NbPntsCircle, NbCircles) ;
  ...</pre>
<p>We get the Part root feature from the Part container as a smart pointer to the 
CATIPrtPart interface. Then we retrieve</p>
<ul>
	<li>The curves from the CATPart</li>
	<li>The geometrical factory</li>
	<li>The datum factory</li>
</ul>
<p>We create a cloud (a piece of cylinder).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Algorithm</h3>
<pre class="code">  ...
  CATIQsrCAAPowerFit * pCAAPowerFit = pQsrCAAFactory -&gt; CreatePowerFit (pGeoFactory) ;
  ...</pre>
<p>The algorithm is then created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting the Inputs and the Parameters</h3>
<pre class="code">  ...
  rc = pCAAPowerFit -&gt; SetCloudOfPoints (pPoints, NbPoints, Status) ;
  ...
  CATLISTP(CATCell) ListOfFace ;
  CATListOfInt ListOfContact ;
  for (int Edge = 1 ; Edge &lt;= ListOfEdge.Size() ; Edge ++) {
    ListOfFace.Append (NULL) ;
    ListOfContact.Append (0) ;
  }
  ...
  rc = pCAAPowerFit -&gt; SetCurves(ListOfEdge, ListOfFace, ListOfContact, GapG0Curves, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetG0Points (0.1, Status) ;
  ...
  int CurveUse = 2 ; 
  rc = pCAAPowerFit -&gt; SetCurveUse(CurveUse, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetG0GlobalCurves(0.2, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetG1GlobalCurves(5.0, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetPipeRadius(1.0, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetNbSpans (15, Status) ;
  ...
  rc = pCAAPowerFit -&gt; SetDgSpans (7, Status) ;
  ...</pre>
<p>The only mandatory information are points or curves or points and curves. The 
other inputs have a default value. The order in which methods are called is not 
significant. Only one call to set the points and the curves is authorized.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Running the Algorithm and Getting the Result</h3>
<pre class="code">  ...
  CATBody * pBody = NULL ;
  CATFace * pFace = NULL ;
  Status = 0 ;
  rc = pCAAPowerFit -&gt; MakeFace (pBody, pFace, Status) ;
  ...</pre>
<p>The computation is done within this method. If an error occurs, no face nor body 
are created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Creating the Datum Feature</h3>
<pre class="code">  ...
  if (NULL != pBody) {
    CATISpecObject * pDatumFeature = NULL ;
    rc = pDatumFactory -&gt; InstanciateDatum(pBody, pDatumFeature) ;
    if (SUCCEEDED(rc) &amp;&amp; pDatumFeature) { 
      CATIGSMProceduralView_var hObject = pDatumFeature ;
      if (!! hObject) hObject -&gt; InsertInProceduralView() ;
      pDatumFeature -&gt; Update() ;
      ...
    } else {
      ...
    }
  }
  ...</pre>
<p>The datum feature is created, inserted in the document and updated.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Analyzing the Results</h3>
<pre class="code">  ...
  if (pFace) {
    CATSurface * pSurface = pFace -&gt; GetSurface() ;
    if (pSurface) {
      const CATKnotVector * pKnotVectorU = pSurface -&gt; GetKnotVectorU() ;
      const CATKnotVector * pKnotVectorV = pSurface -&gt; GetKnotVectorV() ;
      if (pKnotVectorU &amp;&amp; pKnotVectorV) {
        cout &lt;&lt; &quot; -&gt;     NbPatchU = &quot; &lt;&lt; pKnotVectorU -&gt; GetNumberOfKnots() - 1 &lt;&lt; endl ;
        cout &lt;&lt; &quot; -&gt;     NbPatchV = &quot; &lt;&lt; pKnotVectorV -&gt; GetNumberOfKnots() - 1 &lt;&lt; endl ;
        cout &lt;&lt; &quot; -&gt;     OrderU   = &quot; &lt;&lt; pKnotVectorU -&gt; GetDegree() + 1 &lt;&lt; endl ;
        cout &lt;&lt; &quot; -&gt;     OrderV   = &quot; &lt;&lt; pKnotVectorV -&gt; GetDegree() + 1 &lt;&lt; endl ;
      }
    }
  }
  ...
  rc = pCAAPowerFit -&gt; GetStatisticError(MaxErr, MeanErr, StdDev, Status) ;
  ...
  rc = pCAAPowerFit -&gt; GetErrorAboveValue (Value, pIdPoints, NbPntsIdPoints, Percent, Status) ;
  ...
  for (int i = 0 ; i &lt; NbPntsIdPoints ; i ++) {
    ...
    rc = pCAAPowerFit -&gt; GetDistanceFace (k, PtInput, PtOutput, Direction, Distance, Status) ;
    ...
  }
  ...</pre>
<p>The segmentation of the surface and the errors (deviations found between the 
points and the resulting surface) are analyzed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Saving and Closing the Session</h3>
<p>Save representation and close the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create a surface supported by a cloud 
of points and curves.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAACldTaPowerFit.htm">About the PowerFit Algorithm</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2004]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
