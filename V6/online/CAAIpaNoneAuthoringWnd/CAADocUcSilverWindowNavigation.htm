<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Navigating Inside the Explorer Window</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Navigating inside Explorer Window</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This UC illustrates navigating a PLM model inside an Explorer (VPM Navigator) 
		Window. In the process it illustrates the significance of the Path Element 
		Agent inside a Navigator session. It also details the PLM models (Occurrence, 
		Ref-Inst) loaded in the current session and illustrates the distinctness 
		of the OM components corresponding to these models in each of the two sessions.</p>
		<ul>
			<li><a href="#What You Will Learn With This Use Case">What You Will 
			Learn With This Use Case</a></li>
			<li><a href="#The CAADocDisplayAttributesCmd Use Case">The CAADocSilverWindowNavigationCmd 
			Use Case</a>
			<ul>
				<li><a href="#What Does CAADocDisplayAttributesCmd Do">What Does 
				CAADocSilverWindowNavigationCmd Do</a></li>
				<li><a href="#How to Launch CAADocDisplayAttributesCmd">How to Launch 
				CAADocSilverWindowNavigationCmd </a></li>
				<li>
				<a href="#Where to Find the CAADocDisplayAttributesCmd Code">Where 
				to Find the CAADocSilverWindowNavigationCmd Code</a></li>
			</ul>
			</li>
			<li><a href="#Step-by-Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!---------------------------------------------------------------------------->
<h2><a name="What You Will Learn With This Use Case"></a>What You Will Learn With 
This Use Case</h2>
<p>The Use Case teaches an end-user:</p>
<ul>
	<li>Navigation of a PLM model beginning with the Root inside the VPM Navigator 
	session.</li>
	<li>Navigation of a PLM model beginning with an entity selected by the user 
	in the spec tree inside the VPM Navigator session.</li>
	<li>Significance of the Path Element Agent in the Explorer session</li>
	<li>Understanding of the OM Components created in an Explorer session mapped 
	to the PLM model.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="The CAADocDisplayAttributesCmd Use Case"></a>The CAADocSilverWindowNavigationCmd 
Use Case</h2>
<p><code>CAADocSilverWindowNavigationCmd</code> is a use case of the <code>CAAImmVPMInterfaces.edu
</code>framework that illustrates the <code>CATImmVPMInterfaces</code> framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What Does CAADocDisplayAttributesCmd Do"></a>What Does CAADocSilveWindowNavigationCmd 
Do</h3>
<p>The <code>CAADocSilverWindowNavigationCmd </code>Use Case primarily illustrates 
the deployment of the CAA Openness to navigate a PLM hierarchy inside the VPM Navigator 
(Explorer).</p>
<p>This is accomplished with the commands &quot;<strong>Navigation from Root</strong>&quot; 
(represented by &quot;<strong>R</strong>&quot;) and &quot;<strong>Navigation from Selection</strong>&quot; 
(represented by &quot;<strong>S</strong>&quot;) inside the &quot;<strong>CAA PLM Navigator addin 
toolbar</strong>&quot;, a<strong> PLM Navigator AddIn</strong> in <strong>CATIA.</strong> 
This <strong>AddIn</strong> (<strong>Toolbar</strong>) exists in the VPM Navigator 
workbench as depicted in the Fig. that follows. The &quot;<strong>How to Launch</strong>&quot; 
section that follows details the steps involved to launch the VPM Navigator workbench 
and access this toolbar.</p>
<table>
	<caption><a name="Fig.1"></a>Fig. 1 CAA PLM Navigator AddIn Toolbar</caption>
	<tr>
		<td>
		<img alt="CAA PLM Navigator AddIn Toolbar" src="images/CAADocUCSilverWindowNavigation_Fig1.jpg"></td>
	</tr>
</table>
<p>The UC executes on an input model as depicted in the Fig. that follows. </p>
<table>
	<caption><a name="Fig.2"></a>Fig. 2 Input Model</caption>
	<tr>
		<td>
		<img alt="Input Model" src="images/CAADocUCSilverWindowNavigation_Fig2.gif" width="531" height="87"></td>
	</tr>
</table>
<p>The model consists of a Root Product, <strong>CAAPLMNavigInExplorerWind_Root</strong> 
which aggregates:</p>
<ul>
	<li>A Representation Instance, <strong>CAAPLMNavigInExplorerWind_RepChild1</strong>.</li>
	<li>A Product Instance, <strong>CAAPLMNavigInExplorerWind_Child1.1</strong> 
	which in turn aggregates:
	<ul>
		<li>A Product Instance, <strong>CAAPLMNavigInExplorerWind_Child2.1</strong></li>
	</ul>
	</li>
</ul>
<p>The UC execution essentially includes the following scenarios.</p>
<p><strong>Scenario 1</strong>: Navigation begins with the Root of the current editor</p>
<p>The UC outputs the model as depicted below.</p>
<pre class="code"><strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplorerWind_Root</strong> V_version: --- V_maturity: IN_WORK
     <strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplWind_Child1</strong> V_version: --- V_maturity: IN_WORK <strong>PLMProductInstanceDS</strong>=PLM_ExternalID: 
     <strong>CAAPLMNavigInExplWind_Child1.1</strong>
	<strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplorerWind_Child2</strong> V_version: --- V_maturity: IN_WORK <strong>PLMProductInstanceDS</strong>=PLM_ExternalID: 
	<strong>CAAPLMNavigInExplorerWind_Child2.1</strong></pre>
<p>The UC firstly retrieves the editable root of the current editor. In the current 
case, since we are inside a VPM Navigator session, the Root is an Occurrence. The 
navigation then begins starting from this Root Occurrence. </p>
<p>To begin with it retrieves the Reference and the Instance associated with the 
Root Occurrence. It further retrieve the PLM properties of the Root Reference displays 
it in the final output.</p>
<p>It next lists the child occurrences directly under the Root Occurrence. Then 
for each child occurrence, it retrieves the associated Instance and Reference. It 
further retrieves the PLM properties of the Ref-Inst model and displays those in 
the final output.</p>
<p>The UC then navigates the child occurrences further below, and the navigation 
is thus recursive. It also retrieves the PLM properties of the associated Ref-Inst 
model to finally output the model as displayed above. It is significant to note 
here that the navigation is down the Occurrence model. The Ref-Inst model is referred 
only to retrieve the PLM properties and not for navigation, since the OM components 
corresponding to the Ref-Inst model inside the Navigator session does not implement 
GetChildren() of the <em>CATIPLMNavReference</em> Interface, which allows for navigation. 
While in an authoring session, the navigation is done through the Ref-Inst model. 
This implies that the OM components inside the Navigator session is distinct from 
that inside the Authoring session.</p>
<p>Another significant point to note here is that the hierarchy output by the UC 
execution exactly corresponds to the model as seen in the spec tree. In other words, 
if we assume that user runs the contextual command &quot;<strong>Refresh and Collapse</strong>&quot; 
on the root node of the spec tree, the entire tree collapses and it is olnly the 
root node seen interactively. The UC execution then only outputs the root node, 
as depicted below.</p>
<pre class="code"><strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplorerWind_Root</strong> V_version: --- V_maturity: IN_WORK</pre>
<p><strong>Scenario 2</strong>: User selects interactively an entity in the PLM 
hierarchy, and the model is navigated further below starting from the entity selected</p>
<p>User selects <strong>CAAPLMNavigInExplorerWind_Child11</strong>, the child occurrence 
at level one below the Root. The output is as depicted below:</p>
<pre class="code"><strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplorerWind_Child1</strong> V_version: --- V_maturity: IN_WORK  <strong>PLMProductInstanceDS</strong>=PLM_ExternalID:
<strong>CAAPLMNavigInExplorerWind_Child1</strong>.<strong>1</strong>
   <strong>PLMProductDS</strong>=PLM_ExternalID: <strong>CAAPLMNavigInExplorerWind_Child2</strong> V_version: --- V_maturity: IN_WORK  <strong>PLMProductInstanceDS</strong>=PLM_ExternalID: 
   <strong>CAAPLMNavigInExplorerWind_Child2.1</strong></pre>
<p>The UC deploys a Path Element agent* inside a State Command to retrieve the entity 
selected by the end user in the spec tree inside the VPM Navigator. The Occurrence 
is thus retrieved and then the steps to display the final output is exactly the 
same as in the previous scenario.</p>
<p>*In the process it depicts the relevance of the Path Element agent, in a scenario 
where your interest is to actually retrieve the underlying PLM entities, this time 
since you intend to navigate through the model. </p>
<p>A significant point to note here, on similar lines, as the previous scenario 
is that the hierarchy output by the UC execution exactly corresponds to the model 
as seen in the spec tree. In other words, if the node selected by user or one of 
them under it, is collapsed/expanded the UC execution will output a hierarchy which 
exactly corresponds to the model as viewed in the spec tree.</p>
<p><strong>Scenario 3</strong>: User selects interactively the only Rep-Inst that 
exists in the hierarchy.</p>
<p>This results in the UC execution prompting the user to make another selection, 
since a Rep Inst is not recognized as a valid selection. It can either be the Root 
or one of the Product Instances in the hierarchy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How to Launch CAADocDisplayAttributesCmd"></a>How to Launch CAADocSilverWindowNavigationCmd
</h3>
<p>To launch <code>CAADocSilverWindowNavigationCmd</code>:</p>
<ol>
	<li>Set the current folder to InstallRootFolder\CAADoc\CAAImmVPMInterfaces.edu</li>
	<li>Set up the build time environment and build the <code>CAAIpaNavAddin.m</code> 
	and <code>CAAIpaSilverNav.m </code>module </li>
	<li>Edit the <code>CNext\code\dictionary\CAAImmVPMInterfaces.edu.dico</code> 
	dictionary by uncommenting the #CAA# from the following lines:
	<pre class="code">#CAA# CAAIpaNavAddinLT  CATIImmNavAddin       libCAAIpaNavAddin
#CAA# CAAIpaNavAddinLT  CATIWorkbenclhAddin   libCAAIpaNavAddin</pre>
	</li>
	<li>Install the dictionary and other resource files by executing <code>mkCreateRuntimeView</code></li>
	<li>Start CATIA by executing <code>mkrun</code></li>
	<li>Create the model as depicted in [<a href="#Fig.1">Fig. 1</a>], save it and 
	load it in the VPM Navigator session</li>
	<li>Display the toolbar named &quot;<strong>CAA PLM Navigator AddIn Toolbar
	</strong>&quot;<strong> </strong>toolbar if necessary. It is depicted in the
	<a href="#Fig.1">Fig <span>1</span></a>. above</li>
	<li>Hereafter, the execution follows the steps listed in the &quot;<strong>What does 
	the UC do</strong>&quot; section above</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where to Find the CAADocDisplayAttributesCmd Code"></a>Where to Find 
the CAADocSilverWindowNavigationCmd Code</h3>
<p>The <code>CAADocSilverWindowNavigationCmd </code>use case is located in the
<code>CAAIpaSilverNav.m</code> module of the <code>CAAImmVPMInterfaces.edu
</code>framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAImmVPMInterfaces.edu\CAAIpaSilverNav.m</code></p>
<p>For the Add-In , the code is located in the <code>CAAIpaNavAddin.m</code> module 
of the <code>CAAImmVPMInterfaces.edu </code>framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAImmVPMInterfaces.edu\CAAIpaNavAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step-by-Step"></a>Step-by-Step</h2>
<p>There are three parts in <code>CAADocSilverWindowNavigationCmd</code>, two of 
them dedicated to the two different scenarios illustrated by the UC and the third 
section which details a common global routine. The parts are listed below:</p>
<ol>
	<li><a href="#Retrieve teh Root">Retrieve the Root</a></li>
	<li><a href="#Use of CATPathElementAgent">Use of CATPathElementAgent</a></li>
	<li><a href="#Check the Occ type">Checking the Occurrence type</a></li>
	<li><a href="#Navigate an Occ hierarchy">Navigating the Occurrence hierarchy</a></li>
	<li><a href="#Retrieve the PLM Attributes">Retrieve the PLM Attributes</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve teh Root"></a>Retrieve the Root</h3>
<p>This step retrieves the Root of the current editor. The implementations exists 
inside a <em>CATCommand</em>. The <code>Activate</code>() method of the <em>CATCommand 
(a one-shot command)</em> contains this implementation.</p>
<pre class="code">CATStatusChangeRC <strong>CAAIpaSilverNavFromRootCmd::Activate</strong>(CATCommand *iFromClient,
						CATNotification * iEvtDat)
{
   CATListPtrCATIPLMComponent ListEditedRoot ;
   <strong>CATPLMComponentInterfacesServices::GetEditedRootPLMComponents</strong>(_pEditor,ListEditedRoot) ;

   CATIPLMComponent *pTheFirstRoot= NULL ;
   if ( ListEditedRoot.Size() != 0 )
      <strong>pTheFirstRoot =  ListEditedRoot[1]</strong>;
 
  ...
</pre>
<p>The <code>GetEditedRootPLMComponents</code> static routine of the <em>CATPLMComponentInterfacesServices</em> 
class returns the editable root PLM entities of an editor. Its inputs are:</p>
<ul>
	<li><code>_pEditor</code>, a <em>CATFrmEditor</em> type representing the current 
	editor</li>
	<li><code>ListEditedRoot</code>, a <em>CATListptrCATIPLMComponent</em> type, 
	an out argument which will have the editable roots of the current editor in 
	it*</li>
</ul>
<p>*Please note that the editable roots of a session are <em>CATIPLMComponent</em> 
is implementations. The editable root is an Occurrence inside a Navigator while 
it is the Root Reference in an Authoring session. This implies that an Occurrence 
in an Authoring session is not a <em>CATIPLMComponent </em>implementation. It is 
also significant to note thus that the Occurrences are distinct OM components inside 
the two sessions.</p>
<p>We retrieve the first and only element in the list of edited roots*. The root 
entity is a PLM Occurrence and hence we can retrieve it as a <em>CATIPLMNavOccurrence_var</em> 
type.</p>
<p>*Since we work inside a Navigator window, there is only a single editable root 
in it. While the RFLP or a PPR editor can have multiple editable roots inside them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Use of CATPathElementAgent"></a>Use of CATPathElementAgent</h3>
<p>This step instantiates a <em>CATPathElementAgent</em>. In an interactive scenario 
inside the VPM Navigator session when one needs access to the underlying PLM Model, 
one has to essentially work with a <em>CATPathElementAgent</em>. In the current 
case, since we intend to navigate the Occurrence model, we will need access to its 
Occurrences and hence the need to instantiate the PathElementAgent. The <code>BuildGraph</code>() 
implementation of our StateCommand is where we do this instantiation.</p>
<pre class="code">void <strong>CAAIpaSilverNavFromSelectionCmd::BuildGraph()</strong>
{
    <strong>_paAcqAgent = new CATPathElementAgent(&quot;PLMAgentForSelection&quot;)</strong>;
    _paAcqAgent-&gt;SetBehavior(CATDlgEngWithPSO | CATDlgEngWithPrevaluation );
        
     <strong>CATDialogState* stGetPLMRefOrInst = GetInitialState(&quot;Select an element&quot;)</strong>;
     <strong>stGetPLMRefOrInst-&gt;AddDialogAgent</strong>(_paAcqAgent);

     <strong>CATDialogTransition* pTransition = AddTransition</strong>(<strong>stGetPLMRefOrInst</strong>, <strong>NULL</strong>,
				AndCondition(IsOutputSetCondition(_paAcqAgent),			                  
				<strong>Condition((ConditionMethod)&amp; CAAIpaSilverNavFromSelectionCmd::IsValid))</strong>,
<strong>				Action((ActionMethod)&amp;CAAIpaSilverNavFromSelectionCmd::BrowseFomSelection)</strong>);
     ...  
}</pre>
<p>A <em>CATPathElementAgent</em> is instantiated, which enables us access to the 
Ref-Inst and the Occurrence model underlying the end-user selection in the Silver 
Window.* This agent is then associated with a state, as it is typically done inside 
a StateCommand implementation.</p>
<p>*A Nav Properties Acquisition agent is recommended, but it works only with Proxy 
objects. In the current case since we need access to the underlying PLM models, 
we use the PathElement agent.</p>
<p>Next we instantiate an initial state which prompts an end-user to select an entity 
from the spec tree inside the Silver window. The Path Element agent is then associated 
with this state.</p>
<p>Finally we declare a transition from this initial state to a final NULL state, 
the action associated with which actually browses the model starting from the user 
selection down the hierarchy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Check the Occ type"></a>Checking the Occurrence Type</h3>
<p>The transition defined above will happen subject to the condition defined by 
the <code>IsValid</code>() method of the StateCommand. This implementation essentially 
confirms if the entity selected is indeed an Occurrence associated with a Reference. 
We insist on a Reference because in an Explorer session, apart from the Instances, 
Rep Instances and Connections too have an Occurrence associated with them. But since 
navigation is applicable only under a Reference, we confirm that the Occurrence 
is that of a Reference, essentially.</p>
<pre class="code">CATBoolean <strong>CAAIpaSilverNavFromSelectionCmd::IsValid </strong>(void *iUsefulData)
{
         CATBoolean IsSelectedObjOk = FALSE ;
	
<strong>	CATPathElement* pathmodel = _paAcqAgent-&gt;GetValue()</strong>;
	CATBaseUnknown* pObj = NULL;

	if ((NULL != pathmodel) &amp;&amp; (pathmodel-&gt;GetSize() &gt; 0))
		<strong>pObj = (*pathmodel)[pathmodel-&gt;GetSize()-1]</strong>;

	<strong>CATIPLMNavOccurrence_var spNavOccOnSel = pObj </strong>;
	if (NULL_var != spNavOccOnSel )
	{ 
	   CATIPLMNavReference *pRef = NULL ;
            <strong>spNavOccOnSel-&gt;GetRelatedReference(pRef)</strong>;
	   if ( NULL != pRef ) 
	   {
	      <strong>CATPLMCoreType isTypeOccurrence = PLMCoreInstance</strong> ;
	      <strong>CATIPLMNavEntity_var spEntityOnChild = pRef </strong>;
		  if ( NULL_var != spEntityOnChild )
               	      <strong>spEntityOnChild-&gt;GetPLMCoreType(isTypeOccurrence)</strong>;
	      
	      <strong>if ( isTypeOccurrence == PLMCoreReference  )
		IsSelectedObjOk=TRUE</strong>;
               <strong>else 
               {
		cout &lt;&lt; &quot;Select another one&quot; &lt;&lt; endl;</strong>
	        _paAcqAgent-&gt;InitializeAcquisition();
	      }
           ...	
           <strong>return 	IsSelectedObjOk</strong>;
}</pre>
<p>The <code>GetValue</code>() method of the <em>CATPathElementAgent</em> class, 
representing the path of objects, from the root entity to the object selected down 
the PLM hierarchy. The entity selected is the last element in this list which we 
retrieve. We next retrieve the object selected as a <em>CATIPLMNavOccurrence_var</em> 
type.</p>
<p>The GetRelatedReference() call of the <em>CATIPLMNavOccurrence</em> Interface 
retrieves the underlying Reference as a <em>CATIPLMNavReference</em>* type, which 
is further retrieved as a <em>CATIPLMNavEntity</em>* type. The call to <code>GetPLMCoreType</code>() 
of the <em>CATIPLMNavEntity</em> Interface retrieves the PLM entity core type. We 
confirm if it is a <strong>PLMCoreReference</strong> and return a <strong>TRUE</strong>, 
if it is.</p>
<p>What follows is the call to the routine which actually browses the Occurrence 
retrieved above. It is a part of the implementation of the action method <code>BrowseFromSelection</code>() 
of the StateCommand.</p>
<pre class="code">CATBoolean <strong>CAAIpaSilverNavFromSelectionCmd::BrowseFomSelection</strong>(void *data)
{
   <strong>CATPathElement* pathmodel = _paAcqAgent-&gt;GetValue()</strong>;
   CATBaseUnknown* pObj = NULL;

   if ((NULL != pathmodel) &amp;&amp; (pathmodel-&gt;GetSize() &gt; 0))
   {
	<strong>pObj = (*pathmodel)[pathmodel-&gt;GetSize()-1]</strong>;
   }

   <strong>CATIPLMNavOccurrence_var spNavOccOnSel = pObj</strong> ;
   if (spNavOccOnSel != NULL_var )
        ::<strong>CAAIpaSilverBrowseOccurrence(spNavOccOnSel,0)</strong>;
 
   return S_OK ;  
}
</pre>
<p>The <code>GetValue</code>() method of the <em>CATPathElementAgent</em> class, 
representing the path of objects, from the root entity to the object selected down 
the PLM hierarchy. The entity selected is the last element in this list which we 
retrieve. </p>
<p>We next retrieve the object selected as a <em>CATIPLMNavOccurrence_var</em> type. 
This is passed to the global routine <code>CAAIpaSilverBrowseOccurrence</code>() 
which navigates the model down the hierarchy, beginning with the object passed to 
it as an input argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Navigate an Occ hierarchy"></a>Navigating an Occurrence hierarchy</h3>
<p>This step details the global routine which browses an Occurrence model. Its input 
is an Occurrence, the starting point of the navigation. </p>
<pre class="code">void <strong>CAAIpaSilverBrowseOccurrence</strong>(<strong>CATIPLMNavOccurrence_var spOnOccurrence</strong>, int level)
{
     CATIPLMNavReference *pNavReference = NULL ;
     <strong>spOnOccurrence-&gt;GetRelatedReference</strong>(pNavReference);
    	
     <strong>CATIPLMNavEntity_var spNavEntity = pNavReference </strong>;
     <strong>DisplayAttributes</strong>(<strong>spNavEntity</strong>,SpacesLevel) ;
     ...
}
</pre>
<p>The input Occurrence is a <em>CATIPLMNavOccurrence_var</em> type. The <code>GetRelatedReference</code>() 
call of the <em>CATIPLMNavOccurrence</em> Interface returns the Reference associated 
with the invoking Occurrence. The Reference is returned as a <em>CATIPLMNavReference</em>* 
type. A significant point to note here is that the <em>CATIPLMNavReference</em> 
is typically implemented on a Reference to enable navigation with its <code>GetChildren</code>() 
call. But in the Explorer session, since the <code>GetChildren</code>() API is not 
implemented on the Reference, navigating using the Reference is impossible. Though 
the OM Component representing the Reference in the Explorer session does implement 
the <em>CATIPLMNavEntity</em> Interface, which enables us to retrieve the PLM properties. 
In other words, the OM components representing a Reference in an explorer session 
is distinct from that in the Authoring session. The TA &quot;<strong>Working with Silver 
Editor</strong>&quot; [<a href="#References"><span>2</span></a>] delves into the depth 
of this subject.</p>
<p>The next step we retrieve the Reference as a <em>CATIPLMNavEntity_var</em> type. 
This is an input to the <code>DisplayAttributes</code>() global routine, which retrieves 
the attribute values (filtered by the TREE mask) of the PLM entity input. The PLM_ID 
value is a part of the output which enables the user to identify the entities in 
the hierarchy output as a result of the UC execution.</p>
<p>We proceed to output, the instance attributes as well in the code that follows.</p>
<pre class="code">void <strong>CAAIpaSilverBrowseOccurrence</strong>(<strong>CATIPLMNavOccurrence_var spOnOccurrence</strong>, int level)
{
     ...
     CATIPLMNavInstance *pNavInstance = NULL ;
     <strong>spOnOccurrence-&gt;GetRelatedInstance</strong>(pNavInstance);
     
     <strong>spNavEntity = pNavInstance</strong> ;
     <strong>DisplayAttributes</strong>(<strong>spNavEntity</strong>,&quot; &quot;) ;
     ...</pre>
<p>The <code>GetRelatedInstance</code>() call of the <em>CATIPLMNavOccurrence</em> 
Interface returns the Reference associated with the invoking Occurrence. The Instance 
is returned as a <em>CATIPLMNavInstance</em>* type. A significant point to note 
here is that this <em>CATIPLMNavInstance</em> implementation on the OM component 
representing the Instance in an Explorer session is not the same as the one in the 
Authoring session.</p>
<p>The next step we retrieve the Instance as a <em>CATIPLMNavEntity_var</em> type. 
This is an input to the <code>DisplayAttributes</code>() global routine, which retrieves 
the attribute values (filtered by the TREE mask) of the PLM entity input.</p>
<p>We proceed next to navigate the Occurrence model, down its hierarchy.</p>
<pre class="code">void <strong>CAAIpaSilverBrowseOccurrence</strong>(<strong>CATIPLMNavOccurrence_var spOnOccurrence</strong>, int level)
{
     ...
     
     // Recursivity 
     CATListPtrCATIPLMNavOccurrence ListofOccChild;
     <strong>spOnOccurrence-&gt;ListChildren</strong>(ListofOccChild);
     for ( int j= 1; j&lt;= ListofOccChild.Size(); j++)
     {
	<strong>CATIPLMNavOccurrence  *pNavOccOnCurrentChild = ListofOccChild[j] </strong>;
	if ( NULL != pNavOccOnCurrentChild)
	{
             CATIPLMNavReference *pRef = NULL ;
             <strong>pNavOccOnCurrentChild-&gt;GetRelatedReference</strong>(pRef);
	    if ( NULL != pRef ) 
	    {
	        CATPLMCoreType isTypeOccurrence = PLMCoreInstance ; 
	        <strong>CATIPLMNavEntity_var spEntityOnChild = pRef </strong>;
	        if ( NULL_var != spEntityOnChild )
                     spEntityOnChild-&gt;GetPLMCoreType(isTypeOccurrence);

                <strong> if ( isTypeOccurrence == PLMCoreReference  )</strong>
		<strong>   CAAIpaSilverBrowseOccurrence</strong>(<strong>pNavOccOnCurrentChild</strong> , level+1);
}
</pre>
<p>The call to <code>ListChildren</code>() of the <em>CATIPLMNavOccurrence</em> 
Interface retrieves the list of direct child occurrences under the invoking Occurrence*. 
The list is retrieved as a <em>CATListPtrCATIPLMNavOccurrence</em> type.</p>
<p>*It is significant to note that we are navigating on an Occurrence and not a 
Reference. This is because inside an Explorer session, unlike an Authoring session, 
the OM Component representing a Reference does not implement the <code>GetChildren</code>() 
API of the <em>CATIPLMNavReference</em> Interface, which is primarily used for navigation. 
As a result we navigate using an Occurrence, and use the Reference component only 
to retrieve the PLM properties.</p>
<p>Next we parse through this output list. Each Child Occurrence is retrieved as 
a <em>CATIPLMNavOccurrence</em> type. What follows is a recursive call to the same 
routine with each Child Occurrence as an input. But then in the Silver window currently, 
it is not only an Instance, but also a Rep Instance and a Connection, which has 
an Occurrence associated with it. The navigation is only applicable for an Occurrence 
associated with an Instance. Hence we introduce a check to confirm if the type of 
the Reference underlying an Occurrence is a <strong>PLMCoreReference</strong>.</p>
<p>The <code>GetRelatedReference</code>() call of the <em>CATIPLMNavOccurrence</em> 
Interface returns the Reference associated with the invoking Occurrence. The Reference 
is returned as a <em>CATIPLMNavReference</em>* type.</p>
<p>We retrieve the Reference next as a <em>CATIPLMNavEntity_var</em> type. The
<code>GetPLMCoreType</code>() of the <em>CATIPLMNavEntity</em> Interface retrieves 
the core type as a <em>CATPLMCoreType</em> type.</p>
<p>If the type retrieved is a <strong>PLMCoreReference</strong> type, we proceed 
with the recursive call to the <code>CAAIpaSilverBrowseOccurrence</code>() routine, 
with the current Child Occurrence as its input.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Retrieve the PLM Attributes"></a>Retrieve the PLM Attributes</h3>
<p>We now detail the <code>DisplayAttributes</code>() global routine. </p>
<pre class="code">void <strong>DisplayAttributes</strong>(<strong>CATIPLMNavEntity_var spEntity</strong>, CATUnicodeString SpacesLevel )
{
    ...
    <strong>CATIPLMComponent_var spCompOnEntity = spEntity</strong> ;
    if ( NULL_var == spCompOnEntity ) return ;

    CATIAdpType* piAdpTypeOnEntity=NULL;
    <strong>spCompOnEntity-&gt;GetAdpType</strong>(piAdpTypeOnEntity);

    CATIType *pTypeOnEntity = NULL ;
    if (NULL!=piAdpTypeOnEntity) 
       <strong>CATPLMTypeServices::GetKweTypeFromAdpType</strong>(piAdpTypeOnEntity, pTypeOnEntity);

     CATListValCATAttributeInfos ListOfAttributes;
     CATUnicodeString TypeName ;
     if ( NULL != pTypeOnEntity )
     {
          <strong>CATCkePLMNavCustoAccessPublicServices::ListFilteredAttributesFromMaskAndCustoType</strong>(pTypeOnEntity,
                                                      <strong>CATCkePLMTypeAttrServices::MaskTree</strong>,ListOfAttributes);
          <strong>TypeName = pTypeOnEntity-&gt;Name()</strong>;
     }

     CATListOfCATUnicodeString ListAttr;
     for ( int i=1 ; i &lt;= ListOfAttributes.Size() ; i++)
     {
	<strong>CATUnicodeString attrName = ListOfAttributes[i].Name()</strong>;
	<strong>ListAttr.Append(attrName)</strong>;
     }
	
     CATListOfCATUnicodeString ListValue;
     <strong>spEntity-&gt;GetPublicAttributes</strong>(ListAttr,ListValue);

     for ( i=1 ; i &lt;= ListOfAttributes.Size() ; i++)
	<strong>cout &lt;&lt; ListAttr[i]  &lt;&lt; &quot;: &quot; &lt;&lt; ListValue[i] &lt;&lt;&quot; &quot; </strong>;
}</pre>
<p>The first step is to retrieve the type of PLM entity. We retrieve the <em>CATIPLMComponent_var</em> 
type on the entity. The call to <code>GetAdpType</code>() of the <em>CATIPLMComponent</em> 
Interface returns the PLM type (a <em>CATIAdpType</em> type) of the entity. </p>
<p>The static call <code>GetKweTypeFromAdpType</code>() of the <em>CATPLMTypeServices</em> 
class, retrieves the Knowledge type (a <em>CATIType</em> type) from the PLM type.
</p>
<p>The static call <code>ListFilteredAttributesFromMaskAndCustoType</code>() of 
the <em>CATCkePLMNavCustoAccessPublicServices</em> class retrieves a list of attributes 
filtered by the TREE mask for our Knowledge type. The list of attributes is retrieved 
as a <em>CATListValCATAttributeInfos</em> type.</p>
<p>We parse through this list and retrieve the attribute name with a call to Name() 
of the <em>CATAttributeInfos</em> class.</p>
<p>Finally the call to <code>GetPublicAttributes</code>() of the <em>CATIPLMNavEntity</em> 
class retrieves the public attribute values of the PLM entity.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The UC illustrates the steps involved in working inside the Navigator Window. 
It integrates two commands in the Explorer workbench, one of them which navigates 
a model beginning with its Root occurrence while the other which navigates it, from 
an entity selected interactively by the end-user in the spec tree.</p>
<p>The first scenario involves retrieving the editable root from the current editor. 
It then navigates through the Occurrence model and displays the PLM properties of 
its associated Ref-Inst model. A significant point to note here is that the navigation 
is essentially done on the Occurrence model and not the Ref-Inst model, since the 
OM Component representing the Ref-Inst model does not implement the <code>GetChildren</code>() 
API of the <em>CATIPLMNavReference</em> Interface. In this respect this OM component 
representing the Ref-Inst model in the Navigator session is distinct from that in 
the Authoring session.</p>
<p>The significance of the Ref-Inst model is limited to retrieving the PLM properties 
of the entities to display them in the model hierarchy output.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="[1]">[1]</a></td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAADocTaWorkingWithSilverEditor.htm">Working with the Silver 
		Editor</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History">History</a></h2>
<table class="history">
	<tr>
		<td>Version: 1 [Feb 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
