<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Executing a Simulation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a contact feature</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create a contact feature.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASMAMpaContacts Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASMAMpaContacts Do</a></li>
				<li><a href="#How">How to Launch CAASMAMpaContacts</a></li>
				<li><a href="#Where">Where to Find the CAASMAMpaContacts Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create a contact feature using the 
Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASMAMpaContacts Use Case</h2>
<p>CAASMAMpaContacts is a use case of the CAASMAMpaInterfaces.edu framework that 
illustrates SMAMpaFoundationItf framework capabilities for creating a contact 
feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASMAMpaContacts Do?</h3>
<p>CAASMAMpaContacts creates a contact property feature, a surface based contact 
feature and a general contact feature on an existing product.</p>
<p>The model for this use case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a product that has eight 3D parts and some publications.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASMAMpaInterfaces 
	Product Model</caption>
	<tr>
		<td><img src="images/CAASMAMpaSections001.jpg"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASMAMpaContacts</h3>
<p>To launch CAASMAMpaContacts, you will need to set up the build 
time environment, compile CAASMAMpaContacts.m along with its 
prerequisites, set up the run time environment, and execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASMAMpaContacts Repository Server User 
Password SecurityCtx PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>The name of the repository</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The name and port of the server as <i> name</i>:<i>port_number</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user identifier</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>A string representing the security context ( Role. Organization. 
		Project&nbsp;);<o:p>
            Choose Role as Reviewer</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>The PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>The PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>The PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires PLM data, which consists of the PLM reference and PLM 
Representation Reference. These data are stored in 3D XML files, whose extension 
is &quot;3dxml&quot;. You must import these PLM data files into the database by clicking on [+] tab in the upper right corner -&gt;Import -&gt;3D XML prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>CAASMAMpaInterfaces.edu\CNext\resources\CAASMAMpaInterfaces.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASMAMpaContacts Code</h3>
<p>The CAASMAMpaContacts use case is made of a single source file 
named CAASMAMpaContacts.cpp located in the CAASMAMpaContacts.m 
module of the CAASMAMpaInterfaces.edu framework:</p>
<p><code>
InstallRootFolder\CAADoc\CAASMAMpaInterfaces.edu\CAASMAMpaContacts.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps in CAASMAMpaContacts:</p>
<ol>
	<li><a href="#Step1">Opening the input product</a></li>
	<li><a href="#Step2">Initializing simulation</a></li>
	<li><a href="#Step3">Retrieving the features set</a></li>
	<li><a href="#Step4">Creating and initializing a contact property feature</a></li>	
	<li><a href="#Step5">Creating a surface-based contact feature</a></li>
	<li><a href="#Step6">Creating a general contact feature</a></li>
	<li><a href="#Step7">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the input product</h3>
<p>To open the product test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework.<br />
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n, IID_CATIPLMNavReference, (void **) &amp;piNavRefOnRoot , Bag, authoringMode);
	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article "Connecting to V6 Server"[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Initializing simulation</h3>
<p>The next step of this use case involves the initialization of the simulation 
on the product that you just opened.</p>
<p>For further information about initializing a simulation refer to the 
article &quot;Creating and Executing a Simulation&quot;[<a href="#References">3</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the features set</h3>
<p>Once you have the analysis case, you should retrieve its feature set. This 
feature set aggregates all simulation features that can be used by the 
individual steps in this analysis case.</p>
<p>To retrieve a feature set from an analysis case, you should use the <code>
GetFeatureSets</code> 
method of <code>SMAIMpaScenarioAnalysisCase</code> interface.</p>
<pre class="code">...
CATListValCATBaseUnknown_var lFeatureSets;
hr = spStaticAnalysisCase-&gt;GetFeatureSets(lFeatureSets);
if(FAILED(hr) || lFeatureSets.Size() == 0)
{
    ...
}
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating and initializing a contact property feature</h3>
<p>You can create or remove simulation features within the feature set with the 
help of <code>SMAIMpaFactory </code> interface.</p>
<p>To create a simulation feature, you should choose the type of feature by 
passing in a string as the first argument of the method <code>CreateFeature</code>. 
The second argument returns the generated simulation feature.</p>
<pre class="code">...
<span class="comment">// Retrieve the feature set factory</span>
spMpaFactory = lFeatureSets[1];
if(spMpaFactory == NULL_var)
{
    ...
}
<span class="comment">// Create the contact property feature</span>
CATBaseUnknown_var spFeatUnk = NULL_var;
hr = spMpaFactory-&gt;CreateFeature(&quot;SMAMpaSurfaceBasedContactProperty&quot;, spFeatUnk);
SMAIMpaSurfaceBasedContactProperty_var spContactProperty(spFeatUnk);
if(FAILED(hr) || spContactProperty == NULL_var)
{
    ...
}
</pre>
<p>As seen in the following code snippet, you can use the <code>
SMAIMpaTangentialBehavior</code> interface to assign a tangential behavior 
to the newly created contact property feature.</p>
<pre class="code">...
<span class="comment">//Add a tangential behavior</span>
SMAIMpaTangentialBehavior_var spTangentialBehavior = NULL_var;
hr = spContactProperty-&gt;AddTangentialBehavior(spTangentialBehavior);
if(FAILED(hr) || spTangentialBehavior == NULL_var)
{
   ...    
}
else
{
	<span class="comment">//Set the friction type</span>
	hr = spTangentialBehavior-&gt;SetFrictionType(SMAIMpaTangentialBehavior::Coulomb);
	if(FAILED(hr))
	{
		...
	}
	<span class="comment">//Set the friction coefficient</span>
	hr = spTangentialBehavior-&gt;SetFrictionCoefficient(0.33);      
	if(FAILED(hr))
	{
		...
	}
	...
}
...
</pre>

<p>You can also use the <code> SMAIMpaNormalBehavior</code> interface 
to assign a normal behavior to the newly created contact property feature. 
</p>
<pre class="code">...
<span class="comment">//Add a normal behavior</span>
SMAIMpaNormalBehavior_var spNormalBehavior = NULL_var;
hr = spContactProperty-&gt;AddNormalBehavior(spNormalBehavior);
if(FAILED(hr) || spNormalBehavior == NULL_var)
{
   ...    
}
else
{
	<span class="comment">//Set the allow separation flag</span>
	hr = spNormalBehavior -&gt;SetAllowSeparationFlag(FALSE);
	if(FAILED(hr))
	{
		...
	}
	<span class="comment">//Set the enforcement type</span>
	hr = spNormalBehavior -&gt;SetEnforcementType(SMAIMpaNormalBehavior::Penalty);
	if(FAILED(hr))
	{
		...
	}
	...
}
...
</pre>



<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a surface-based contact feature</h3>
<p>In a manner similar to the one shown above, we create a surface-based 
contact feature.</p>
<p>You can use the <code>SMAIMpaSurfaceBasedContact</code> interface to modify 
the newly created surface-based contact feature.</p>
<p>As seen in the following code snippet, you can use the <code>
CATISimLinkAccess</code> interface to assign master and slave surfaces 
to the newly created surface-based contact feature:</p>
<pre class="code">...
<span class="comment">// Set the surface-based contact support</span>
CATISimLinkAccess_var spLinkAccess = NULL_var;
hr = spSurfaceBasedContact-&gt;GetMasterSurface(spLinkAccess);
if(NULL_var == spLinkAccess)
{
    ...
}
hr = spLinkAccess-&gt;AddLink(pObjInContext);
if(!!pObjInContext) {pObjInContext-&gt;Release(); pObjInContext=NULL;}
if(FAILED(hr))
{
    ...
}
</pre>
<p>Note that creating and initializing a feature is not sufficient for it to be 
used during simulation. You also need to create a feature state within a step to 
refer to that feature. You can do this by using the <code>CreateFeatureState</code> 
method from the 
<code>SMAIMpaScenarioStep</code> interface.</p>
<pre class="code">...
<span class="comment">// Assign the surface-based contact to the static step</span>
hr = spStep-&gt;CreateFeatureState(spFeatUnk);
if (FAILED(hr))
{
    ...
}
</pre>



<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a general contact feature</h3>
<p>In a manner similar to the one shown above, we create a general 
contact feature.</p>
<p>You can use the <code>SMAIMpaGeneralContact</code> interface to modify the 
newly created general contact feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed objects.</p>
<pre class="code">...
if(NULL!=piNavRefOnRoot) { piNavRefOnRoot-&gt;Release(); piNavRefOnRoot=NULL; }
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASMAMpaContacts</code> use case demonstrates the use 
of various CAA APIs in <code>SMAMpaFoundationItf</code> framework to create a 
contact feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASMAFeaPreProcessingDoc/CAASMAMpaStaticStepSimulation.htm">
		Creating and Executing a Simulation</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
