<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Managing Simulation Feature Support</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing Simulation Feature Support</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to define and manage simulation feature 
		support.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASMAMpaLinkAccess Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASMAMpaLinkAccess Do</a></li>
				<li><a href="#How">How to Launch CAASMAMpaLinkAccess</a></li>
				<li><a href="#Where">Where to Find the CAASMAMpaLinkAccess Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to assign and modify 
simulation feature supports using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASMAMpaLinkAccess Use Case</h2>
<p>CAASMAMpaLinkAccess is a use case of the CAASMAMpaInterfaces.edu framework that illustrates 
support APIs for CATISimObjectInContext and 
CATISimLinkAccess simulation features.</p>
<h3><a name="What"></a>What Does CAASMAMpaLinkAccess Do?</h3>
<p>To illustrate these support manipulation APIs, the use case needs simulation 
features. CAASMAMpaLinkAccess creates a FEMRep and two section properties on an existing 
product object. Next, the supports of the newly created section 
properties are set by two different methods--using publications and retrieving 
the support feature from the product structure. Finally, the use case removes 
a support.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a product has eight 3D parts and some publications.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASMAMpaInterfaces 
	Product Model</caption>
	<tr>
		<td><img src="images/CAASMAMpaSections001.jpg"/></td>
	</tr>
</table>
<h3><a name="How"></a>How to Launch CAASMAMpaLinkAccess</h3>
<p>To launch CAASMAMpaLinkAccess, 
you will need to set up the build time environment, then compile the 
CAASMAMpaLinkAccess along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASMAMpaLinkAccess Repository Server User Password SecurityCtx 
PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th style="height: 22px"><b><i>Repository</i></b></th>
		<td style="height: 22px">PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires input PLM Data: PLM reference and PLM Representation Reference. This data is stored in 3D XML Files, whose extension is &quot;3dxml&quot;. 
You must import these PLM Data in the database by clicking on [+] tab in the upper right corner -&gt;Import -&gt;3D XML prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>CAASMAMpaInterfaces.edu\CNext\resources\CAASMAMpaInterfaces.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASMAMpaLinkAccess Code</h3>
<p>The CAASMAMpaLinkAccess use case is made of a single source file named CAASMAMpaLinkAccess.cpp 
located in the CAASMAMpaLinkAccess.m module of the CAASMAMpaInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASMAMpaInterfaces.edu\CAASMAMpaLinkAccess.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are ten logical steps in CAASMAMpaLinkAccess use case:</p>
<ol>
	<li><a href="#Step1">Opening the input product</a></li>
	<li><a href="#Step2">Creating the FEM Rep and retrieving its Rep Manager</a></li>
	<li><a href="#Step3">Retrieving the Property Set</a></li>
	<li><a href="#Step4">Creating individual properties</a></li>
	<li><a href="#Step5">Setting the meshed bolt support part body from publication</a></li>
	<li><a href="#Step6">Setting the shell section support part bodies from product structure</a></li>	
	<li><a href="#Step7">Replacing the first shell section support</a></li>
	<li><a href="#Step8">Retrieving the section supports</a></li>
	<li><a href="#Step9">Removing the second shell section bolt support</a></li>
	<li><a href="#Step10">Closing the PLM session</a></li>

</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the input product</h3>
<p>To open the product test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework.<br />
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n,
	                     IID_IID_CATIPLMNavReference, (void **) &amp;piNavRefOnRoot , Bag, authoringMode);
	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article &quot;Connecting to V6 Server<!--/a!-->&quot;[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the FEM Rep and retrieving its Rep Manager</h3>
<p>In the next step of this use case, you should create a finite element 
representation model on the product that you just opened.</p>
<pre class="code">...
CATIPrdObject_var spProductAsPrdObj ( piRepInstances );
CATBaseUnknown * pFEMRep = NULL;
hr = CATFmtFEMRepFactory::CreateRepresentation( NULL, spProductAsPrdObj, NULL, NULL, "", FALSE, &amp;pFEMRep );
...
CATIFmtRepManager * pRepManager = NULL;
pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation( spFEMRep, IID_CATIFmtRepManager );
CATIFmtRepManager_var spRepManger(pRepManager);
if(!!pRepManager) pRepManager-&gt;Release();
...</pre>
<p>If you already have a finite element representation for this product, you can 
use <code>CATFmtRepManagerServices</code> to retrieve it.</p>
<pre class="code">...
CATIFmtRepManager * pRepManager = NULL;
CATIPrdIterator * pIter = NULL;
piRepInstances -&gt; Iterator ( pIter );
if ( pIter )
{
    CATBaseUnknown_var nextRep;
    while ( SUCCEEDED ( pIter -&gt; Next ( nextRep ) ) )
    {
        if ( CATFmtRepManagerServices::IsAFEMRep( nextRep ) )
        {
            pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATIFmtRepManager);
            break;
        }
    }
}
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Property Set</h3>
<p>Once you have the rep manager, you should retrieve the property set from the 
FEM Representation. </p>
<p style="height: 15px">To do this, you should use the <code>GetSet</code> 
method of <code>CATIFmtRepManager</code> interface with the enum 
<code>CATFmtSetProperties</code>. <code>CATIFmtRepManager</code> interface header documents 
the list of all allowable enum values for this method.</p>
<pre class="code">...
CATISimSet_var spSimSet = NULL_var;
if ( spRepManger != NULL_var) 
{
    CATBaseUnknown * pSet = spRepManger -&gt; GetSet ( CATFmtSetProperties );
    CATBaseUnknown_var spSet(pSet);
    if ( spSet != NULL_var)
    {
        if(!!pSet) pSet-&gt;Release();
        spSimSet = spSet;
    }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating individual properties</h3>
<p>You can create or remove individual sections within a property set by using
the <code>SMAIMpaFactory </code> interface.</p>
<p>To create a section feature, you choose the type of section by passing in a string 
as the first argument of the method <code>CreateFeature</code>.
The second argument returns the generated feature.
A list of allowable strings for this method is documented within the <code>SMAIMpaFactory </code>
interface header.</p>
<pre class="code">...
<span class="comment">// Retrieve the feature factory</span>
SMAIMpaFactory_var spPropertyFactory(spSimSet);
if (NULL_var == spPropertyFactory)
{
    ...
}
...
<span class="comment">// Create a shell section</span>
CATBaseUnknown_var spSectionUnk=NULL_var;
hr = spPropertyFactory-&gt;CreateFeature("SMAShellSection", spSectionUnk);
SMAIMpaShellSection_var spShellSection = spShellSectionUnk;
...
<span class="comment">// Create a pretension section</span>
spSectionUnk=NULL_var;
hr = spPropertyFactory-&gt;CreateFeature("SMAMeshedBolt", spSectionUnk);
SMAIMpaMeshedBolt_var spMeshedBolt = spSectionUnk;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting the meshed bolt support part body from publication</h3>
<p>You can use the method <code>GetByName</code> of <code>CATIPrdPublications</code> interface to retrieve a publication.
For further details on how to manage publications refer to the article &quot;PLM Publication&quot; [<a href="#References">4</a>].</p>
<pre class="code">...
<span class="comment">// Retrieve the publication named Bolt-1</span>
CATIPrdPublications_var ports (spProductAsPrdObj);
if (ports == NULL_var) return E_FAIL;
CATIPrdPublication_var portOnBolt1 = NULL_var;
CATUnicodeString usName = "Bolt-1";
hr = ports-&gt;GetByName(usName,portOnBolt1);
...</pre>
<p>You must build the object in context in order to manage the link 
between the simulation feature and the support. <br />
The object in context is a link 
descriptor that we can build from the <code>CATOmbObjectInContext</code> CAA 
descriptor or any other linkable object. <br />
A context is an occurrence or a representation occurrence
that can be seen as a path of instances and/or a representation instance.<br />
An object is any PLM object other that an instance (a connection, a port, a 
reference or a representation). An object may also be an internal object of a representation or of a 
connection.<br />
An object in a context means the usage of this object in the context of this 
occurrence.</p>
<pre class="code">...
CATISimObjectInContext * piHybridBodySimOIC = CATSimObjectInContextFactory::BuildFromObject(portOnBolt1);
...</pre>
<p>
You can add the <code>CATISimObjectInContext</code> pointer obtained above as a support to the pretension section with the help of 
the <code>CATISimLinkAccess</code> interface.

This interface has methods to add, remove, or retrieve existing feature links 
stored as supports within a feature.<br />
In the use case, you create the link between the pretension section feature and its support. 
For that, each section interfaces has a method named <code>GetSupport</code> that 
allows you to retrieve the feature link manager object through a 
<code>CATISimLinkAccess</code> smart pointer. <br />
Finally, the <code>AddLink</code> method creates the link.</p>
<p>
<strong>Note</strong>: The <code>CATISimLinkAccess</code> interface is directly implemented on the section 
feature, so you can retrieve the feature link manager by executing a QueryInterface 
from the section feature. Using <code>CATISimLinkAccess</code> obtained through either of the 
two ways will give the same result.<br />
</p>
<pre class="code">...
<span class="comment">// Set the meshed bolt support</span>
CATISimLinkAccess_var spSectionLinkAccess = NULL_var;
hr = spMeshedBolt-&gt;GetSupport(spSectionLinkAccess);
...
hr = spSectionLinkAccess-&gt;AddLink(piHybridBodySimOIC);
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting the shell section support part bodies from product structure</h3>
<p>In this section of the use case, you want to define the shell section support without using the publication. The main difference 
between the previous section and this section of the documentation is
the construction of the path to the object that you want to set as support. A path is an ordered list of product instance starting from the root 
product and jumping from instance product to
instance product. For further information about the product instance path, please refer to the article &quot;Product Modeler Overview&quot; [<a href="#References">3</a>].</p>
<p>The path is essential to build 
the link between the simulation feature and its support because it's a way to 
identify an object instance in an assembly. 
The GetMainBodyPath is a use case internal method to retrieve the main body of a 
product instance and its path. For further details on how to navigate into a product, please refer to the 
article &quot;Browsing a Product Model&quot; [<a href="#References">4</a>].</p>
<pre class="code">...
CATIPrdObject *piRepInstanceAsPrdObj = NULL;
CATLISTP(CATIPLMComponent) PathOfInstance;
CATBaseUnknown_var spSectionSupportUnk = <strong>GetMainBodyPath</strong>(piNavRefOnRoot, "ws3_bolt_part.2", piRepInstanceAsPrdObj, PathOfInstance);
...<br /></pre>
<p>The above method called <code>GetMainBodyPath</code> returns the main body of 
a 3D Shape instance and its path in the product structure. First, the method 
navigates through the product model to find the desired product instance by its name. Then 
the method retrieves the reference product and its application container. From 
this container, you can retrieve the mechanical part with the help of
<code>GetMechanicalPart</code> method. Next, thanks to the <code>GetMainBody</code> method 
of the <code>CATIPartRequest</code> interface, you can retrieve the main body. 
For further information about how to retrieve the main body, please refer to the 
technical article &quot;Geometrical Feature Set&quot; [<a href="#References">5</a>]</p>
<p>Once you have the support feature and its path, you can create a link between 
the support feature and its simulation feature. For further information about 
object in context, please refer to the technical article &quot;Understanding Link 
Concepts&quot; [<a href="#References">6</a>].</p>
<pre class="code">...
<span class="comment">// Build the object in context</span>
CATOmbObjectInContext * pHybridBodyOmbOIC = NULL;
CATIPLMComponent * pRepInstAsPLMComp = NULL;
hr = piRepInstanceAsPrdObj-&gt;QueryInterface(IID_CATIPLMComponent, (void**)&amp;pRepInstAsPLMComp);
...
hr = CATOmbObjectInContext::CreateObjectInContext(PathOfInstance, pRepInstAsPLMComp, spSectionSupportUnk, pHybridBodyOmbOIC );
if (pRepInstAsPLMComp) {
    pRepInstAsPLMComp-&gt;Release();
    pRepInstAsPLMComp = NULL;
}
...
piHybridBodySimOIC = CATSimObjectInContextFactory::BuildFromObject(pHybridBodyOmbOIC);
pHybridBodyOmbOIC-&gt;Release();
pHybridBodyOmbOIC = NULL;
</pre>
<p>Finally, you can set the simulation feature support as you shown in the previous chapter of this use case documentation.</p>
<pre class="code">...
<span class="comment">// Set the support</span>
spSectionLinkAccess = NULL_var;
hr = spShellSection-&gt;GetSupport(spSectionLinkAccess);
hr = spSectionLinkAccess-&gt;AddLink(piHybridBodySimOIC);
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Replacing the first shell section support</h3>
<p>In this step of the use case, you would like to replace one support of the 
shell section with another support. You can do this with the help of the <code>ReplaceLink</code> method 
of <code>CATISimLinkAccess</code> interface. As seen in the fifth section of 
this use case, you retrieve the new support by a publication and then you 
create the object in context (or link) before you replace the old support.</p>
<pre class="code">...
<span class="comment">// Retrieve publication named "Pipe"</span>
CATIPrdPublication_var portOnNeutralFiber = NULL_var;
CATUnicodeString usName = "Pipe";
hr = ports-&gt;GetByName(usName,portOnNeutralFiber);
...
<span class="comment">// Build the object in context from the publication target</span>
piHybridBodySimOIC = CATSimObjectInContextFactory::BuildFromObject(portOnNeutralFiber);
...
<span class="comment">// Replace the first link</span>
hr = spSectionLinkAccess-&gt;ReplaceLink(piHybridBodySimOIC, "MainSupport", 1);
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving the section supports</h3>
<p>You can use the <code>GetLinks</code> 
method to retrieve supports defined for a particular simulation feature. The output of this method 
is a list of <code>CATISimObjectInContext</code> smart pointer. </p>
<p>For each object in context retrieved through the <code>GetLinks</code> method 
you can 
retrieve the feature with the help of the <code>GetTarget</code> method.</p>
<p>This interface is the single entry point to retrieve the geometric feature 
defined in the link.</p>
<pre class="code">...
<span class="comment">// Retrieve the pretension section support</span>
CATLISTV(CATISimObjectInContext_var) supportsList;
hr = spMeshedBolt-&gt;GetSupport(spSectionLinkAccess);
hr = spSectionLinkAccess-&gt;GetLinks(supportsList);
for (int idx=1; idx&lt;=supportsList.Size(); idx++)
{
    CATISimObjectInContext_var spSimOIC = supportsList[idx];
    CATBaseUnknown * pTarget = NULL;
    hr = spSimOIC-&gt;GetTarget(pTarget, 0);
    ...
}
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Removing the second shell section bolt support</h3>
<p>In this step, you want to remove all the shell section support links to solid 
feature. You can use the <code>RemoveLink</code> method of <code>CATISimLinkAccess</code> 
interface to delete simulation link. </p>
<pre class="code">...
<span class="comment">// Retrieve all links</span>
hr = spShellSection-&gt;GetSupport(spSectionLinkAccess);
hr = spSectionLinkAccess-&gt;GetLinks(supportsList);
<span class="comment">// Retrieve the link to remove</span>
for (int idx=1; idx&lt;=supportsList.Size(); idx++)
{
    CATISimObjectInContext_var spSimOIC = supportsList[idx];
    CATBaseUnknown * pTarget = NULL;
    hr = spSimOIC-&gt;GetTarget(pTarget, 0);
    ...
    if ((pTarget-&gt;GetImpl())-&gt;IsA() == "Solid")
    {
        hr = spSectionLinkAccess-&gt;RemoveLink(spSimOIC, "MainSupport");
        ...
    }
}
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Closing the PLM session</h3>
<p>To close the test model, you use services from the <code>CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed 
objects.</p>
<pre class="code">...
if(NULL!=piNavRefOnRoot) { piNavRefOnRoot-&gt;Release(); piNavRefOnRoot=NULL; }
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloaseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASMAMpaLinkAccess</code> use case demonstrates the use of various 
CAA APIs in the <code>CATSimRepInterfaces</code> framework to create and manage simulation feature 
supports.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPstProductModeler/CAAPstTaProductOverview.htm">
		Product Modeler Overview</a></td>
	</tr>

	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPstProductModeler/CAAPstUcBrowsingProductModel.htm">
		Browsing a Product Model</a></td>
	</tr>
	<tr>adl_co 
		<td>[5]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaContentsSpecCont1.htm">
		Geometrical Feature Sets</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAOmbModelingProtocol/CAAOmbTaVirtualObject.htm">
		Understanding Link Concepts</a></td>
	</tr>



</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2013]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>


