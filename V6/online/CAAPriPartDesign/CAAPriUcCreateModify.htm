<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Modifying a Mechanical Design Feature</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Modifying a Mechanical Design Feature</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPriCreateModify use case. This use case 
		explains how to create and modify a Mechanical Design feature within 3D 
		Shape representation [<a href="#References">1</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAPriCreateModify Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPriCreateModify Do</a> </li>
					<li><a href="#How">How to Launch CAAPriCreateModify</a> </li>
					<li><a href="#Where">Where to Find the CAAPriCreateModify Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming the 
CATIA Part Design. Its main intent is to create mechanical design feature.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPriCreateModify Use Case</h2>
<p>CAAPriCreateModify is a use case of the CAAPartUseItf.edu framework that illustrates 
CATPartUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPriCreateModify Do</h3>
<p>The goal of CAAPriCreateModify use case is to show how to use Mechanical Design 
factory to instantiate Mechanical Design feature and how to modify Mechanical design 
feature by using the interfaces of Part Design. We illustrate this by creating and 
modifying a pad feature. The created part and the modified representations are saved 
in two different 3D shape. More precisely CAAPriCreateModify:</p>
<ul>
	<li>Creates an empty 3D Shape representation.</li>
	<li>Creates a rectangular sketch.</li>
	<li>Creates a pad based on the sketch and defined with two offset limit values.</li>
	<li>Saves the 3D Shape representation.</li>
	<li>Modifies the extrusion direction and sets the symmetrical extension property.</li>
	<li>Updates the pad.</li>
	<li>Saves the modified representation.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPriCreateModify</h3>
<p>To launch CAAPriCreateModify, you will need to set up the build time environment, 
then compile CAAPriCreateModify along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>Launch the use case as follows: </p>
<pre class="code">mkrun -c<em> &quot;CAAPriCreateModify repository server user password SecurityCtx environment PLMExternalID&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>The name and port of the server as name:port_number (e.g. e4au2dsy:1571)</td>
	</tr>
	<tr>
		<td>3</td>
		<td>user</td>
		<td>The user name (e.g. odtitp)</td>
	</tr>
	<tr>
		<td>4</td>
		<td>password</td>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<td>5</td>
		<td>SecurityCtx</td>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies the PLM data)</td>
	</tr>
	<tr>
		<td>6</td>
		<td>environment</td>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
		<td>Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLMExternalID</td>
		<td>CAAPriCreateModify001</td>
		<td>Component Attribute</td>
	</tr>
</table>
<ul>
	<li>The <strong>first five</strong> are related to the connection and are described 
		in the "Connecting to V6 Server" use case [<a href="#References">3</a>].
	</li>
	<li>The <strong>environment</strong> is necessary to locate the PRODUCT Modeler.</li>
	<li>The last argument define the <strong>value</strong> of the <strong>attribute 
		name</strong>.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPriCreateModify Code</h3>
<p>The CAAPriCreateModify use case is made of a single class named CAAPriCreateModify 
located in the CAAPriCreateModify.m module of the CAAPartUseItf.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAPartUseItf.edu\CAAPriCreateModify.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eight main steps in CAACreateModify:</p>
<ol>
	<li><a href="#Prolog">Parsing Input Arguments</a></li>
	<li><a href="#Mechanical">Retrieving the Mechanical Part from the Representation 
		Reference</a></li>
	<li><a href="#Factories">Retrieving the Sketch Factory and the List of Reference 
		Planes</a> </li>
	<li><a href="#Sketch">Creating the Sketch</a> </li>
	<li><a href="#Pad">Creating the Pad</a> </li>
	<li><a href="#Saving1">Checking and Saving the Created Pad</a> </li>
	<li><a href="#Modifying">Modifying the Created Pad</a> </li>
	<li><a href="#Saving2">Saving the Modified Pad and Exiting</a></li>
</ol>
<p>We will now comment each of those sections by looking the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Parsing Input Arguments</h3>
<p>CAAPriCreateModify begins by checking that the command lines contains seven arguments. 
It then retrieves the environment, creates a session, and creates 3D Shape representation. 
This is the usual sequence for creating a new 3D Shape representation [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Mechanical"></a>Retrieving the Mechanical Part from the Representation 
Reference</h3>
<pre class="code">...
CATIPLMComponent *piPLMCompOnCreatedRepRef = NULL;  
if ( SUCCEEDED(pPsiCreatedRepRef-&gt;QueryInterface(IID_CATIPLMComponent,(void**)&amp;piPLMCompOnCreatedRepRef)) )
{
  CATIMmiPrtContainer *piPrtCont = NULL;  
  CATIPLMNavRepReference* piNavRep= NULL;
  if ( SUCCEEDED(piPLMCompOnCreatedRepRef-&gt;QueryInterface(IID_CATIPLMNavRepReference,(void**)&amp;piNavRep)) )
  {
    if ( SUCCEEDED(piNavRep-&gt;RetrieveApplicativeContainer("CATPrtCont", IID_CATIMmiPrtContainer, (void**)&amp;piPrtCont)) )
    {
      CATIMmiMechanicalFeature_var spMmiMecFeat;
      CATIMmiUsePrtPart_var spMmiPart;
      if ( SUCCEEDED (piPrtCont-&gt;GetMechanicalPart(spMmiMecFeat)) &amp;&amp; (NULL_var != (spMmiPart = spMmiMecFeat)) )
  ...</pre>
<p>From the pPSICreatedRepRef pointer, the Mechanical Part is obtained by using 
GetMechanicalPart method defined in <em>CATIMmiPrtContainer</em> interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Factories"></a>Retrieving the Sketch Factory and the List of Reference 
Planes</h3>
<pre class="code">...
  // Retrieves the reference Planes of the part
  CATListValCATIMmiMechanicalFeature_var spRefPlanes;
  spMmiPart-&gt;RetrieveReferencePlanes(spRefPlanes);

  // Retrieves the sketch factory to create a rectangular sketch laying on the XY plane (spRefPlanes[1])
  CATISktUseSketchFactory *pSketchFactory = NULL;
  if ( SUCCEEDED(piPrtCont-&gt;QueryInterface(IID_CATISktUseSketchFactory,(void**)&amp;pSketchFactory)) )
  {
...</pre>
<p>From the root container pointed by <em>piPrtCont</em> pointer, you can retrieve 
the sketch object factory interface needed to create sketch objects and you can 
retrieve the reference planes of the current representation from <em>CATIPrtPart</em> 
interface.</p>
<table>
	<tr>
		<td><em>CATISktUseSketchFactory</em></td>
		<td>The sketch object factory interface</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Sketch"></a>Creating the Sketch</h3>
<pre class="code">...
  CATIMmiMechanicalFeature_var spSpecSketch = pSketchFactory-&gt;CreateSketch(spRefPlanes[1]);
  if ( NULL_var != spSpecSketch )
  {
    // Open Sketch edition
    CATISktUseSketch *pSketch = NULL;
    if ( SUCCEEDED(spSpecSketch-&gt;QueryInterface(IID_CATISktUseSketch,(void**)&amp;pSketch)) )
    { 
      // Retrieves the 2D factory to create the lines and points of the sketch
      CATISktUse2DWFFactory *p2DGeomFactory = NULL;
      if ( SUCCEEDED(pSketch--&gt;QueryInterface(IID_CATISktUse2DWFFactory,(void**)&amp;p2DGeomFactory)) )
      {
        CATISktUse2DConstraintFactory *p2DConstraintFactory = NULL;
        if ( SUCCEEDED(pSketch--&gt;QueryInterface(IID_CATISktUse2DConstraintFactory,(void**)&amp;p2DConstraintFactory)) )
        {
          // Draws the lines and the endpoints.
          double pt_bottom_left[2]  = {10., 10.};
          double pt_bottom_right[2] = {50., 10.};
          double pt_top_right[2]    = {50., 50.};
          double pt_top_left[2]     = {10., 50.};
          CATISktUse2DPoint_var spPt_bottom_left  = p2DGeomFactory--&gt;CreatePoint(pt_bottom_left);
          CATISktUse2DPoint_var spPt_bottom_right = p2DGeomFactory--&gt;CreatePoint(pt_bottom_right);
          CATISktUse2DPoint_var spPt_top_right    = p2DGeomFactory--&gt;CreatePoint(pt_top_right);
          CATISktUse2DPoint_var spPt_top_left     = p2DGeomFactory--&gt;CreatePoint(pt_top_left);

          // create curves (rectangle edges)
          CATISktUse2DLine_var spLine1 = p2DGeomFactory--&gt;CreateLine(pt_bottom_left,pt_bottom_right);
          CATISktUse2DLine_var spLine2 = p2DGeomFactory--&gt;CreateLine(pt_bottom_right,pt_top_right);
          CATISktUse2DLine_var spLine3 = p2DGeomFactory--&gt;CreateLine(pt_top_right,pt_top_left);
          CATISktUse2DLine_var spLine4 = p2DGeomFactory--&gt;CreateLine(pt_top_left,pt_bottom_left);

          // create curve connectivities (rectangular profile)
          CATISktUse2DCurve_var spCurve1 (spLine1);
          CATISktUse2DCurve_var spCurve2 (spLine2);
          CATISktUse2DCurve_var spCurve3 (spLine3);
          CATISktUse2DCurve_var spCurve4 (spLine4);
          spCurve1--&gt;SetStartPoint(spPt_bottom_left); 
          spCurve1--&gt;SetEndPoint(spPt_bottom_right);
          spCurve2--&gt;SetStartPoint(spPt_bottom_right); 
          spCurve2--&gt;SetEndPoint(spPt_top_right);
          spCurve3--&gt;SetStartPoint(spPt_top_right); 
          spCurve3--&gt;SetEndPoint(spPt_top_left);
          spCurve4--&gt;SetStartPoint(spPt_top_left); 
          spCurve4--&gt;SetEndPoint(spPt_bottom_left);

          // dimension the rectangle using two length constraints
          p2DConstraintFactory--&gt;CreateConstraint( spLine1, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Length, 0, 0 );
          p2DConstraintFactory--&gt;CreateConstraint( spLine2, NULL, NULL, NULL, NULL, NULL, NULL, Cst2DType_Length, 0, 0 );

          p2DConstraintFactory-&gt;Release();
          p2DConstraintFactory = NULL;
        }
        p2DGeomFactory-&gt;Release();
        p2DGeomFactory = NULL;
      }
      // Closes the sketch edition
      spSketch-&gt;CloseEdition();
...</pre>
<p>As we will see later, one of the specifications of the pad is a sketch. It is 
a 2D object made of curves and points positioned in a plane of the 3D space. Consequently, 
to instantiate a sketch, we use the <code>spRefPlanes[1]</code> that represents 
the plane (0,x,y). Then the sketch is created using the <code>CreateSketch</code> 
method of <em>CATISktUseSketchFactory</em>. The sketch implements the <em>CATISktUse2DWFFactory</em> 
interface that groups all methods to create 2D geometric objects, and the smart 
pointer <code>p2DGeomFactory </code>to this interface is retrieved from the sketch 
for this purpose. A rectangle defined with four points whose coordinates are set 
using <code>spPt_bottom_left</code>, <code>spPt_bottom_right</code>, <code>spPt_top_left</code>, 
and <code>spPt_top_right</code> makes up the sketch. The <em>CATISktUseSketch</em> 
interface defines a set of methods to edit the sketch. Any sketch editing sequence 
begins with <code>OpenEdition</code>, and closes with <code>CloseEdition</code>. 
The <code>CreateLine</code> method of <em>CATISktUse2DWFFactory</em> creates the 
line and the <code>GetStartPoint</code> and <code>GetEndPoint</code> methods on
<em>CATICurve2D</em> interface allow to create the endpoints.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Pad"></a>Creating the Pad</h3>
<pre class="code">...
  CATIPdgUsePrtFactory *pPrtFactory = NULL;
  if ( SUCCEEDED(piPrtCont-&gt;QueryInterface(IID_CATIPdgUsePrtFactory,(void**)&amp;pPrtFactory)) )
  {
    CATIMmiMechanicalFeature_var spMmiPad = pPrtFactory-&gt;CreatePad(pSketch);
    if ( NULL_var != spMmiPad )
    {
      CATIPdgUsePad *pPad = NULL;
      if ( SUCCEEDED(spMmiPad-&gt;QueryInterface(IID_CATIPdgUsePad,(void**)&amp;pPad)) )
      {
        // Set the Pad direction
        CATMathDirection dirZ(0., 0., 1.); // Direction of the pad
        pPad-&gt;ModifyDirection(dirZ);

        // Set the Pad limits
        pPad-&gt;ModifyEndType(catOffsetLimit);
        double firstLimit = 20.;
        pPad-&gt;ModifyEndOffset(firstLimit);

        pPad-&gt;ModifyStartType(catOffsetLimit);
        double secondLimit = 0.;
        pPad-&gt;ModifyStartOffset(secondLimit);
        
        CATIUseEntity_var spUseEntPad = spMmiPad;
        DataCommonProtocolServices::Update(spUseEntPad);
        ...</pre>
<p>The sketch on which the pad relies is now created. The remaining specifications 
of the pad are the direction along which the sketch is to be extruded, and its two 
limits. The <em>CATIPdgUsePrtFactory</em> interface is also implemented by the root 
container, which is now not any longer needed. The pad is created using the
<code>CreatePad</code> method to which the sketch is passed as the argument, and 
its specifications are set using the <em>CATIPdgUsePad</em> interface methods that 
the pad implements itself:</p>
<ul>
	<li><code>ModifyDirection</code>, that sets the pad extrusion direction to the 
		z axis. Note that the default, that is, omitting to call <code>ModifyDirection</code>, 
		is to set this direction to the normal of the sketch plane.</li>
	<li><code>ModifyEndType</code>, that sets the pad end to be set using an offset 
		from the sketch plane using the <code>catOffsetLimit</code> value of the
		<code>CatLimitMode</code> enum.</li>
	<li><code>ModifyEndOffset</code>, that sets this offset, also named the first 
		limit in the pad edition dialog box.</li>
	<li><code>ModifyStartType</code> and <code>ModifyStartOffset</code>, that do 
		the same for the pad second limit. Since <code>firstLimit</code> equals 
		to 0, the pad starts from the sketch plane.</li>
</ul>
<p>The <code>Update</code> method takes these specifications into account to build 
the pad. Mechanical Modeler Features implement generic protocols accessible by DataCommonProtocolServices 
class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Saving1"></a>Checking and Saving the Created Pad</h3>
<pre class="code">...
  // Checks the limits of the created pad
  if (pPad-&gt;<strong>GetEndOffset</strong>()   != firstLimit ||
      pPad-&gt;<strong>GetStartOffset</strong>() != secondLimit)
        return 12;

   // Saves the created pad
   CATAdpSaver saver;
   if ( FAILED(saver.Save() )
        return 13;
...</pre>
<p>
<img alt="Created Pad" height="631" src="images/CAAPriSaveCheckCreatedPad.jpg" width="1024"/></p>
<p>A simple check of the actual offsets of the pad using the methods <code>GetEndOffset</code> 
and <code>GetStartOffset</code> that retrieve the values of the first limit and 
the second limit respectively. If one of these values is different from those defined 
for the creation, CAAPriCreateModify stops with a code 12, otherwise the pad is 
saved.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<p>The figure shows the pad in both the graphic viewer and the specification tree 
where it is displayed using its name <strong>Pad.1</strong>. It relies on the sketch 
named <strong>Sketch.1</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Modifying"></a>Modifying the Created Pad</h3>
<pre class="code">...
  // Modifies the pad changing the extrusion direction
  // and applying the symmetry
  
  CATMathDirection dir2(0., 1., 1.); // Direction of the pad

  // Modifies the first limit type
  pPad-&gt;ModifySym(1);

  // Modifies the first limit
  pPad-&gt;ModifyDirection(dir2);

  // Pad Update
  CATIUseEntity_var spUseEntPad = spMmiPad;
  DataCommonProtocolServices::Update(spUseEntPad);
...</pre>
<p>Let's now modify one of the pad's specifications: using the <code>ModifySym</code> 
method, we set the symmetrical extension property and we modify the direction using 
the method <code>ModifyDirection</code> with <code>dir2</code> as new extrusion 
direction.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Saving2"></a>Saving the Modified Pad and Exiting</h3>
<pre class="code">...
  // Saves the modified pad in the second input path
  CATAdpSaver saver;
  if ( FAILED(saver.Save() )
    return 16;
  ...
  // Closes the session
  if ( FAILED(::CAAAdpCloseSession() )
    return 16;
  ...
}</pre>
<p>
<img alt="Modified Pad" height="616" src="images/CAAPriSaveModifiedPad.jpg" width="999"/></p>
<p>The modified pad is saved in the 3D Shape representation. The figure shows modified 
pad for which the height is now two times the initial height, and the extrusion 
direction is no more perpendicular to the sketch plane. The session is then closed. 
This is the usual sequence for saving a representation and closing the session [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to create and modify a Part Design feature.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTa3DShape.htm">
		From the PLM Representation to the 3D Shape</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document modified</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
