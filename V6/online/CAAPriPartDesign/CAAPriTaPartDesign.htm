<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Part Design Features Overview</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Part Design Features Overview</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the Part Design features. To take full advantage 
		of this article, a pre-requisite knowledge of the Mechanical Modeler is 
		essential.</p>
		<ul>
			<li><a href="#Using">Using Solid Procedure for Mechanical Design</a></li>
			<li><a href="#Procedural">Integrating the Procedural Model: the Build 
			Method</a></li>
			<li><a href="#Creating">Creating a Shape-Based Solid: the BuildShape 
			Method</a></li>
			<li><a href="#Combining">Combining Two Solids</a></li>
			<li><a href="#Dressing">Dressing Up a Solid</a></li>
			<li><a href="#Integrating">Integrating the Generic Naming: the CreateprocReport 
			Method</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Using"></a>Using Solid Procedure for Mechanical Design</h2>
<p>For mechanical part design, the more productive procedure is the <strong>Solid</strong> 
procedure. In a CAD/CAM system, a solid models a piece of 3D space limited by a closed 
skin which represents the material volume of the real solid, when in the <strong>Surfacic</strong> 
procedure there is no material notion: a surface have no thickness.</p>
<p>In the Solid procedure, the designer works with the shapes, dimensions, and locations 
of basic components from the mechanical functions. These mechanical functions are 
able to create, modify, dress-up, and operate solids.</p>
<p>There are three mechanical function categories:</p>
<ol>
	<li>Creating a solid from components other than solids from the following functions:
	<p>Pad, Shaft, Rib, Loft, Close Surface, and Thick Surface in an empty part body.</p>
	</li>
	<li>Combining two solids to generate another one from the following functions:
	<p>Pad, Shaft, Rib, Loft, Add, Union Trim and Assemble to add material.<br />
	Pocket, Groove, Slot, Remove Loft, Hole, Remove, Intersect, Remove Lump, and 
	Assemble to remove material.</p>
	<p>These two mechanical function categories create <strong>Form</strong> features.</p>
	</li>
	<li>Operating the solid from the following functions:
	<p>Fillet, Chamfer, Draft, Thickness, Shell, Sewing, and Split.</p>
	<p>This mechanical function category creates <strong>Contextual</strong> features.</p>
	</li>
</ol>
<p>You can retrieve in details these concepts in the article entitled &quot;The 
Geometrical Features&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Procedural"></a>Integrating the Procedural Model: the Build Method</h2>
<p>The architecture offers a common procedural infrastructure for all applications. 
This infrastructure picks up and manages the input/output dependencies between the 
objects which are evaluated and computed one after the other in a compatible order 
according to their dependencies. The procedural infrastructure allows applicative 
objects to be built from the virtual method: <code>Build</code>. All applications, 
and particularly the Part Design workbench, which wish to have the procedural update 
must implement a <code>Build</code> method for each of its classes and is responsible 
for the method contents.</p>
<p>The technical article entitled &quot;Integrating a New Geometrical Feature in the 
Update Mechanism&quot; [<a href="#References">3</a>] explains the implementation of the
<code>Build</code> method for a new geometrical feature in general, and gives some 
explanations for a shape feature in particular. The &quot;Implementing a Mechanical Design 
Feature Building&quot; [<a href="#References">4</a>] use case is an illustration.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Creating"></a>Creating a Shape-Based Solid: the BuildShape Method</h2>
<p>The usually solid creation is to extrude a planar profile along a direction or 
a revolution axis, a surface or a plane may be used to limit the extrusion. To integrate 
the procedural infrastructure, the <code>Build</code> method is programmed for each 
solid type, and in creation case this method calls the <code>BuildShape</code> method 
dedicated to create a solid.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Combining"></a>Combining Two Solids</h2>
<p>FOr example, a Hole function is seen by a user as one operation on the solid. Nevertheless 
there are two steps: the solid form creation to be combined (a cylinder for a simple 
hole), then the Boolean operation between this solid and the current solid (cylinder 
subtraction for the drilling operation).</p>
<p>The <code>BuildShape</code> method builds the solid form to be combined, named 
tool solid.</p>
<p>The <code>Build</code> method chained the <code>BuildShape</code> method which 
returns the tool solid, then subtracts it from the current solid.</p>
<p>This architecture reuses the solid creation and the Boolean operation code to 
guarantee a stable behavior of the system.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Dressing"></a>Dressing Up a Solid</h2>
<p>A dress-up function operates directly a solid and there is no preliminary step 
with a tool solid. The usually dress-up functions are Fillet, Chamfer, Draft Angle, 
Thickness, etc., and consist in operating a solid locally. This operation prohibits 
a Boolean operation structure because it may adds and removes material to a solid 
at the same time: a draft operation on a face with a plane as neutral element normal 
to it, adds/removes material below/above the plane. The know how of these functions 
is contained in the <code>Build</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Integrating"></a>Integrating the Generic Naming: the CreateprocReport 
Method</h2>
<p>Mechanical functions create, delete, cut, and combine solids which are represented 
with orientated closed skins themselves made of adjacent faces. To replay an operation 
where its input is a BRep element (face, edge, vertex) or to define the available 
mechanical function according to the selected face of the solid, we have to give 
the relation between the mechanical functions and the topological faces created 
or cut from it: this is the Generic Naming objective. The solid skin is continually 
regenerated according to the solid modifications and updates, so the relation must 
be regenerated to.</p>
<p>A mechanical function must indicate to the Generic Naming the symbolic name 
of the generated faces from it. The symbolic name or label is linked with the topological 
faces and followed by the topological operations, to know which face is generated 
by which mechanical function. The <code>CreateprocReport</code> method allows the 
mechanical functions and the Generic Naming to communicate.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaMechModUseOverview.htm">Mechanical Modeler Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAMmrMecMod/CAAMmrTaContentsSpecCont2.htm">
		The Geometrical Features</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		Integrating a New Geometrical Feature in the Update Mechanism</td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		Implementing a Mechanical Design Feature Building</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document modified</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
