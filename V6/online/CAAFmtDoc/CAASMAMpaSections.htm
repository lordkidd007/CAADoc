<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Creating and Managing Sections</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Managing Sections</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to open a simulation object and to create 
		and manage a section property.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAASMAMpaSections Use Case</a>
			<ul>
				<li><a href="#What">What Does CAASMAMpaSections Do</a></li>
				<li><a href="#How">How to Launch CAASMAMpaSections</a></li>
				<li><a href="#Where">Where to Find the CAASMAMpaSections Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create and modify sections using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAASMAMpaSections Use Case</h2>
<p>CAASMAMpaSections is a use case of the CAASMAMpaInterfaces.edu framework that illustrates 
SMAMpaFoundationItf framework 
capabilities regarding section properties.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAASMAMpaSections Do?</h3>
<p>CAASMAMpaSections creates FEMRep and section properties on an existing 
product object and then queries these newly created sections for their supports, 
material information, and section attributes.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>]. It 
contains a product has eight 3D parts and some publications.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAASMAMpaInterfaces 
	Product Model</caption>
	<tr>
		<td><img src="images/CAASMAMpaSections001.jpg"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAASMAMpaSections</h3>
<p>To launch CAASMAMpaSections, you will need to set up the build time 
environment, then compile CAASMAMpaSections.m along with its prerequisites, set 
up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAASMAMpaSections Repository Server User Password SecurityCtx 
PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires input PLM Data: PLM reference and PLM Representation Reference. This data is stored in 3D XML Files, whose extension is &quot;3dxml&quot;. 
You must import these PLM Data in the database by clicking on [+] tab in the upper right corner -&gt;Import -&gt;3D XML prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>CAASMAMpaInterfaces.edu\CNext\resources\CAASMAMpaInterfaces.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAASMAMpaSections Code</h3>
<p>The CAASMAMpaSections use case is made of a single source file named CAASMAMpaSections.cpp 
located in the CAASMAMpaSections.m module of the CAASMAMpaInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAASMAMpaInterfaces.edu\CAASMAMpaSections.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven logical steps in CAASMAMpaSections:</p>
<ol>
	<li><a href="#Step1">Opening the input product</a></li>
	<li><a href="#Step2">Creating the FEM Rep and retrieving its Rep Manager</a></li>
	<li><a href="#Step3">Retrieving the Property Set</a></li>
	<li><a href="#Step4">Creating individual properties</a></li>
	<li><a href="#Step5">Setting individual attributes</a></li>
	<li><a href="#Step6">Retrieving individual properties</a></li>	
	<li><a href="#Step7">Retrieving Shell Section attributes : Thickness, Integration Method...</a></li>
	<li><a href="#Step8">Managing Solid Section material behavior</a></li>
	<li><a href="#Step9">Retrieving orientation information of the solid section</a></li>
	<li><a href="#Step10">Retrieving section support</a></li>
	<li><a href="#Step11">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the input product</h3>
<p>To open the product test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework.<br />
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMNavReference * piNavRefOnRoot = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n, IID_CATIPLMNavReference, (void **) &amp;piNavRefOnRoot , Bag, authoringMode);
	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article "Connecting to V6 Server"[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the FEM Rep and retrieving its Rep Manager</h3>
<p>Next step of this use case involves creation of a finite element 
representation model on the product that you just opened.</p>
<pre class="code">...
<span class="comment">// Create the FEM Rep on root Product</span>
CATIPrdObject_var spProductAsPrdObj ( piNavRefOnRoot );
CATBaseUnknown * pFEMRep = NULL;
hr = CATFmtFEMRepFactory::CreateRepresentation( NULL, spProductAsPrdObj, NULL, NULL, "", FALSE, &amp;pFEMRep );
CATBaseUnknown_var spFEMRep = pFEMRep;
...
CATIFmtRepManager * pRepManager = NULL;
pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation( spFEMRep, IID_CATIFmtRepManager );
CATIFmtRepManager_var spRepManger(pRepManager);
if(!!pRepManager) pRepManager-&gt;Release();
...</pre>

<p>If you already have a finite element representation for this product, you can 
use <code>CATFmtRepManagerServices</code> to retrieve it.</p>
<pre class="code">...
CATIFmtRepManager * pRepManager = NULL;
CATIPrdIterator * pIter = NULL;
piRepInstances -&gt; Iterator ( pIter );
if ( pIter )
{
	CATBaseUnknown_var nextRep;
	while ( SUCCEEDED ( pIter -&gt; Next ( nextRep ) ) )
	{
		if ( CATFmtRepManagerServices::IsAFEMRep( nextRep ) )
		{
			pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATIFmtRepManager);
 			break;
		}
	}
}
...
</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Property Set</h3>
<p>Once you have the rep manager, you should retrieve the property set from the 
FEM Representation. </p>
<p>To do this, you should use the <code>GetSet</code> 
method of <code>CATIFmtRepManager</code> interface with the enum 
<code>CATFmtSetProperties</code>. List of 
all allowable enum values for this method are documented within the <code>CATIFmtRepManager</code> 
interface header.</p>
<pre class="code">...
CATISimSet_var spSimSet = NULL_var;
if ( spRepManger != NULL_var) 
{
    CATBaseUnknown * pSet = spRepManger -&gt; GetSet ( CATFmtSetProperties );
    CATBaseUnknown_var spSet(pSet);
    if ( spSet != NULL_var)
    {
        if(!!pSet) pSet-&gt;Release();
        spSimSet = spSet;
    }
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating individual properties</h3>
<p>You can create or remove individual sections within a property set with the 
help of <code>SMAIMpaFactory </code> interface.</p>
<p>To create a section feature, you should choose the type of section by passing in a string 
as the first argument of the method <code>CreateFeature</code>.
The second argument returns the generated feature.
List of allowable strings for this method are documented within the <code>SMAIMpaFactory </code>
interface header.</p>
<pre class="code">...
<span class="comment">//retrieve the feature factory</span>
SMAIMpaFactory_var spPropertyFactory(spSimSet);
if (NULL_var == spPropertyFactory)
{
    ...
}
...
<span class="comment">//create a solid section</span>
CATBaseUnknown_var spSolidSectionUnk=NULL_var;
hr = spPropertyFactory-&gt;CreateFeature("SMASolidSection", spSolidSectionUnk);
SMAIMpaSolidSection_var spSolidSection = spSolidSectionUnk;
...
<span class="comment">//create a shell section</span>
CATBaseUnknown_var spShellSectionUnk=NULL_var;
hr = spPropertyFactory-&gt;CreateFeature("SMAShellSection", spShellSectionUnk);
SMAIMpaShellSection_var spShellSection = spShellSectionUnk;
...
</pre>
<p>To delete an existing section property you can use the <code>RemoveFeature</code> method 
of this interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Setting individual attributes</h3>
<p>As seen in the following code snippet, you can use the <code>CATISimLinkAccess</code> 
interface to assign supports to the newly created sections:</p>
<pre class="code">...
<span class="comment">// Set the solid section support</span>
CATISimLinkAccess_var spSolidSectionLinkAccess = NULL_var;
hr = ispSolidSection-&gt;GetSupport(spSolidSectionLinkAccess);
if(NULL_var == spSolidSectionLinkAccess) return E_FAIL;
hr = spSolidSectionLinkAccess-&gt;AddLink(pBodyOIC);
...
</pre>
<p>You can use the <code>SetUniformThickness</code> method to set the shell section thickness.</p>
<pre class="code">...
<span class="comment">// Set the uniform thickness</span>
hr = ispShellSection-&gt;SetUniformThickness(0.002);
if (FAILED(hr))
	return E_FAIL;
...
</pre>
<p>You can manage orientation information for a section with the help of 
<code>SMAIMpaOrientation</code> interface. This interface has methods to define 
the rotation axis and the rotation angle. You can also enable/disable use of orientation 
information for a particular section with the help <code>EnableOrientation</code> method.</p>
<pre class="code">...
<span class="comment">// Retrieve the orientation</span>
SMAIMpaOrientation_var spOrientation;
hr = ispSolidSection-&gt;GetOrientation(spOrientation);
...
<span class="comment">// Set the rotation axis</span>
hr = spOrientation-&gt;SetRotationAxisEnum(SMAIMpaOrientation::Axis2);
...
<span class="comment">// Set the rotation angle</span>
hr = spOrientation-&gt;SetAngleRotation(90);
...
<span class="comment">// Enable the orientation</span>
hr = spOrientation-&gt;SetOrientationFlag(CATTrue);
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Retrieving individual properties</h3>
<p>This step of the use case is optional. In this step, you can use the <code>GetContents</code> method 
of <code>CATISimSet</code> interface to retrieve previously created section properties. 
The output of this method is a list of CATBaseUnknown_var smart pointer. You 
should query interface each item of the list to get a smart pointer for 
individual section interfaces.</p>
<pre class="code">...
CATLISTV(CATBaseUnknown_var) lReferenceObjects;
hr = spSimSet-&gt;GetContents(lReferenceObjects);
...
spShellSection = NULL_var;
spSolidSection = NULL_var;
for(int idx=1;idx&lt;=lReferenceObjects.Size();idx++)
{
    CATBaseUnknown_var spBU = lReferenceObjects[idx];
    if( NULL_var == spBU)
    {
        cout &lt;&lt; "	Failed to retrieve properties" &lt;&lt; endl;
        hr = ::CAAAdpCloseSession();
        return 1;
    }

    if(spShellSection == NULL_var)
        spShellSection = spBU;
    if(spSolidSection == NULL_var)
        spSolidSection = spBU;	
}
...
</pre>
<p>You can avoid this step entirely by reusing the interface pointers that you created with the factory interface.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving Shell Section attributes : Thickness, Integration Method...</h3>
<p>Each section type has its own interface to retrieve the individual section 
attributes. For solids you can use <code>SMAIMpaSolidSection</code> interface, for 
shell section you can use <code>SMAIMpaShellSection</code> interface.</p>
<pre class="code" style="margin-left: 40px">...
<span class="comment">//Retrieve the integration method</span>
SMAIMpaShellSection::IntegrationEnum lIntegrationScheme;
hr = spShellSection-&gt;GetIntegrationScheme(lIntegrationScheme);
...
<span class="comment">//Retrieve the number of integration points</span>
int lNumIntPts = 0;
hr = spShellSection-&gt;GetNumIntPoints(lNumIntPts);
...
<span class="comment">//Retrieve the thickness value
</span>CATBoolean bIsUniform;
hr = spShellSection-&gt;GetUniformThicknessFlag(bIsUniform);
if(CATTrue==bIsUniform)
{
	double lThickness = 0.0;
	hr = spShellSection-&gt;GetUniformThickness(lThickness);
	...
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Managing Solid Section material behavior</h3>
<p>You can use the <code>GetMaterialBehavior/SetMaterialBehavior</code> 
methods to 
retrieve and modify material behavior for a section. Input for the 
<code>SetMaterialBehavior</code> is the alias of the behavior that you want to set. 
The output of <code>GetMaterialBehavior</code> is a material 
reference connection interface smart 
pointer. This interface allows you to manage the connections of a material. It uses 
the relations held by the connection object to expose features in material domains. 
<pre class="code">...
<span class="comment">//Retrieve the material behavior</span>
CATIMaterialRefCnx_var spMaterialBehavior;
hr = spSolidSection-&gt;GetMaterialBehavior(spMaterialBehavior);
spAlias = spMaterialBehavior;
cout &lt;&lt; &quot; The actual material behavior is &quot; &lt;&lt; (spAlias-&gt;GetAlias()).ConvertToChar() &lt;&lt; endl;

<span class="comment">//Change the material behavior for solid section</span>
hr = spSolidSection-&gt;SetMaterialBehavior(&quot;Behavior.1&quot;);
...

<span class="comment">//Retrieve the material behavior</span>
hr = spSolidSection-&gt;GetMaterialBehavior(spMaterialBehavior);
...
spAlias = spMaterialBehavior;
cout &lt;&lt; &quot; The new material behavior is &quot; &lt;&lt; (spAlias-&gt;GetAlias()).ConvertToChar() &lt;&lt; endl;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Retrieving orientation information of the solid section</h3>
<p>The <code>SMAIMpaOrientation</code> interface provides you with options for managing 
section orientation. This interface allows you to enable or disable the orientation 
and to set or retrieve orientation attributes. The <code>GetOrientation</code> method from the section 
interface returns the section orientation feature.</p>
<pre class="code">...
<span class="comment">// Get features containing orientation information for the solid section</span>
SMAIMpaOrientation_var spSolidOrientation = NULL_var;
hr = spSolidSection-&gt;GetOrientation(spSolidOrientation);
if (NULL_var == spSolidOrientation)
{
    cout &lt;&lt; &quot;    ERROR : Failed to query to SMAIMpaOrientation interface&quot; &lt;&lt; endl;
    hr = ::CAAAdpCloseSession();
    return 1;
}
...</pre>
<p>In the code below, you should first test whether the solid section orientation 
is enabled. Then you retrieve the rotation axis and the rotation value.</p>
<pre class="code">...
<span class="comment">//Is this orientation enabled on the section?</span>
hr = spSolidOrientation-&gt;GetOrientationFlag(lIsEnableSolid);
if (FAILED(hr))
{
    cout &lt;&lt; &quot;    ERROR : Failed to retrieve the rotation axis&quot; &lt;&lt; endl;    
    return E_FAIL;
}
if (CATTrue == lIsEnableSolid)
{
    <span class="comment">//retrieve the rotation axis</span>
    hr = spSolidOrientation-&gt;GetAxisOfRotation(lRotAxisSolid);
    if (FAILED(hr))
    {
        cout &lt;&lt; &quot;    ERROR : Failed to retrieve the rotation axis&quot; &lt;&lt; endl;
        return E_FAIL;
    }
    <span class="comment">//retrieve the angle of rotation</span>
    hr = spSolidOrientation-&gt;GetAngleOfRotation(lAngRotSolid);
    if (FAILED(hr))
    {
        cout &lt;&lt; &quot;    ERROR : Failed to retrieve the rotation axis angle&quot; &lt;&lt; endl;
        return E_FAIL;
    }
    ...
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Retrieving section support</h3>
<p>You can use the <code>GetSupport</code> 
method to retrieve and modify support for a section. The output of this method 
is a <code>CATISimLinkAccess</code> interface smart pointer. This interface is 
the single entry point to Add or Get links on simulation entities.</p>
<pre class="code">...
<span class="comment">// Retrieve shell section support</span>
CATISimLinkAccess_var spLinkAccess = NULL_var;
hr = spShellSection-&gt;GetSupport(spLinkAccess);
if (FAILED(hr) || NULL_var == spLinkAccess)
{
    cout &lt;&lt; &quot;   ERROR : Failed to retrieve the shell section support&quot; &lt;&lt; endl;
    hr = ::CAAAdpCloseSession();
    return 1;
}
...</pre>
<p>Then you can retrieve all the links contained on the attribute &quot;MainSupport&quot; of 
the simulation entity by calling the <code>GetLinks</code> method. The output of 
this method is a list of <code>CATISimObjectInContext_var</code>. For further 
information about object in context refer to the technical article 
&quot;Understanding Link Concepts&quot; [<a href="#References">3</a>].</p>
<pre class="code">...
<span class="comment">// Retrieve all feature links</span>
CATLISTV(CATISimObjectInContext_var) Links;
hr = spLinkAccess-&gt;GetLinks(Links);
if (FAILED(hr))
{
    cout &lt;&lt;  &quot;   ERROR : Failed to retrieve the links&quot; &lt;&lt; endl;
    hr = ::CAAAdpCloseSession();
    return 1;
}
if (Links.Size() == 0) return E_FAIL;
...</pre>
<p>As you set only one publication feature as support during the shell section initialization, 
you can directly retrieve the first and the only one item 
in the list. Finally, you retrieve the link target which is the section support.</p>
<pre class="code">...
<span class="comment">// Shell section was initialized with just one support feature</span>
CATISimObjectInContext_var spSimOIC(Links[1]);
<span class="comment">// Retrieve the link target</span>
CATBaseUnknown * piTarget = NULL;
hr = spSimOIC-&gt;GetTarget(piTarget);
if (FAILED(hr) || !piTarget)
{
    cout &lt;&lt; &quot;   ERROR : Failed to retrieve the shell section support&quot; &lt;&lt; endl;
    hr = ::CAAAdpCloseSession();
    return 1;
}
...</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>CAAPLMClientAdapter.edu</code> 
framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed 
objects.</p>
<pre class="code">...
if(NULL!=piNavRefOnRoot) { piNavRefOnRoot-&gt;Release(); piNavRefOnRoot=NULL; }
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloaseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAASMAMpaSections</code> use case demonstrates the use of various 
CAA APIs in <code>SMAMpaFoundationItf</code> framework to create and manage sections.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAOmbModelingProtocol/CAAOmbTaVirtualObject.htm">
		Understanding Link Concepts</a></td>
	</tr>



</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
