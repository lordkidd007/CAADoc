<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Browsing Groups</title>
<style type="text/css">
.style1 {
	font-family: monospace;
	color: #976970;
}
</style>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><h1><a name="Top"></a>Browsing Groups</h1></td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td style="height: 118px">
		<h2>Abstract</h2>
		<p>This article explains how to browse groups in a model.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmtBrowseGroup Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmtBrowseGroup Do?</a></li>
				<li><a href="#How">How to Launch CAAFmtBrowseGroup?</a></li>
				<li><a href="#Where">Where to Find the CAAFmtBrowseGroup Code?</a> </li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show an end user how to browse groups using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmtBrowseGroup Use Case</h2>
<p><code>CAAFmtBrowseGroup</code> is a use case of the <code>CAAFmtInterfaces.edu</code> framework
that illustrates the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks capabilities regarding Groups.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmtBrowseGroup Do?</h3>
<p><code>CAAFmtBrowseGroup</code> is a &quot;batch&quot; that illustrates 
how to browse Groups and their contents.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>].
It contains groups of nodes, edges, faces and elements for both a Triangle and a Hexahedron mesh.
The use case will browse the groups' contents, and write various information (depending of the type of entities) as an output. </p>
<table>
	<caption align="top">Fig1: The CAAModelTST01 Model</caption>
	<tr>
		<td><a name="Fig1"></a><img alt="" src="images/CAAFmtBrowseGroup01.png"></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmtBrowseGroup?</h3>
<p><span lang="fr">First, you need to import the CAAModelTST01.3dxml into your 
data base. You can find it under : </span>
<code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtInterfacesEduRsc.m\src\resources</code></p>
<p>To launch <code>CAAFmtBrowseGroup</code>, you will need to set up the build time environment 
and compile the <code>CAAFmtBrowseGroup.m</code> module along with its 
prerequisites [<a href="#References">1</a>]. Once it's built, set up the run time
environment and execute the following command: </p>
<p><code>mkrun -c &quot;<i><a>CAAFmtBrowseGroup</a>
<a>Repository</a> <a>Server</a> <a>User</a> <a>Password</a> <a>SecurityCtx</a> <a>PLM_Type</a> <a>PLM_External_Root</a> <a>V_version_Root</a></i>&quot;</code></p>

<p>
where:</p>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td><script type="text/javascript">insertRepository();</script></td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);
            Choose Role as Designer ( as the use case create the PLM Data)</td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
	
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmtBrowseGroup Code</h3>
<p>The CAAFmtBrowseGroup use case is made of a single 
file located in the <code>CAAFmtBrowseGroup.m</code> 
module of the <code>CAAFmtInterfaces.edu</code> 
framework:<br>
<code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtBrowseGroup.m\</code></p>
<p>The use case relies on functions defined in the <code>CAAAdpUtilities.m</code> module of the
<code>CAAPLMClientAdapter.edu</code> framework:<br>
<code><i>InstallRootDirectory</i>\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>Where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The CAAFmtBrowseGroup use case can be divided into 3 main steps:</p>
<ol>
	<li><a href="#OpenModel">Opening the model</a></li>
	<li><a href="#GetGroupManager">Getting the Group Manager</a></li>
	<li><a href="#ScanGroups">Scanning the Groups</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OpenModel"></a>Opening the model</h3>
<p>To open the test model, we use services from the <code>CAAPLMClientAdapter.edu</code> framework.<br>
The product reference is instanciated through the CATIPLMRepInstances interface.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMRepInstances * piRepInstances = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAAdpOpenProduct(plmtype_n, plmid_n, version_n,
	                     IID_CATIPLMRepInstances, (void **) &amp;piRepInstances, Bag, authoringMode);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="GetGroupManager"></a>Getting the Group Manager</h3>
<p>To get the Group Manager, we need to iterate on the Rep Instances to find the FEMRep, then get the CATFmtSetGroups on the FEMRep.</p>
<pre class="code">...
CATIFmtRepManager * pRepManager = NULL;
CATIPrdIterator * pIter = NULL;
piRepInstances-&gt;Iterator(pIter);
CATBaseUnknown_var nextRep;
while (SUCCEEDED(pIter-&gt;Next(nextRep)))
{
	if (CATFmtRepManagerServices::IsAFEMRep(nextRep))
	{
		pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATIFmtRepManager);
		break;
	}
}
...
CATIFmtGroupManager * pGroupManager = NULL;
CATBaseUnknown * pSet = pRepManager-&gt;GetSet(CATFmtSetGroups);
pSet-&gt;QueryInterface(IID_CATIFmtGroupManager, (void**) &amp;pGroupManager);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ScanGroups"></a>Scanning the Groups</h3>
<p>We first iterate on each group of the Group Manager.</p>
<p>Within each Group, we then iterate on each of its CATFmtFEEntities and get the type of these entities (nodes, edges, faces or elements).</p>
<pre class="code">...
CATListValCATBaseUnknown_var * spGroupsList = NULL;
spGroupsList = pGroupManager-&gt;GetAllGroups();

<span class="comment">// Scan each Group</span>
for (int ii=1;ii&lt;=spGroupsList-&gt;Size();ii++)
{
	CATIFmtGroup_var spGroup((*spGroupsList)[ii]);
	CATFmtListOfFEEntities * pGroupEntities = spGroup-&gt;GetContent();

	<span class="comment">// Scan each CATFmtFEEntities of the group</span>
	for (int jj=1;jj&lt;=pGroupEntities-&gt;Size();jj++)
	{
		CATFmtFEEntities * pGroupEntity = (*pGroupEntities)[jj];
		CATFmtFEEntityType pGroupType = pGroupEntity-&gt;GetType();
		...</pre>
<p>Depending of this type, we can then iterate on each entity and get various information.
Below is the code for Node and Edge entities.</p>
<ul><li>Nodes:</li></ul>
<pre class="code">...
<span class="comment">//Group of nodes</span>
double pCoordinates[3];
CATFmtNode ** pGroupNodes = NULL;
hr = pGroupEntity-&gt;GetNodes(pGroupNodes);

<span class="comment">// Scan each CATFmtNode of the CATFmtFEEntities</span>
for (int kk=1;kk&lt;=pGroupEntity-&gt;GetSize();kk++)
{
	CATFmtNode * pGroupNode = pGroupNodes[kk-1];
	pGroupNode-&gt;GetCoordinates(pCoordinates);
	cout &lt;&lt; <span class="string">&quot; Node #&quot;</span> &lt;&lt; pGroupNode-&gt;GetNumber() &lt;&lt; <span class="string">&quot;; X=&quot;</span> &lt;&lt; pCoordinates[1] &lt;&lt; <span class="string">&quot;; Y=&quot;</span> &lt;&lt; pCoordinates[2] &lt;&lt; <span class="string">&quot;; Z=&quot;</span> &lt;&lt; pCoordinates[3] &lt;&lt; endl;
}
...</pre>
<ul><li>Edges:</li></ul>
<pre class="code">...
<span class="comment">//Group of edges of elements 2 or 3D</span>
CATFmtEdge * pGroupEdges = NULL;
hr = pGroupEntity-&gt;GetEdges(pGroupEdges);

<span class="comment">// Scan each CATFmtEdge of the CATFmtFEEntities</span>
for (int kk=1;kk&lt;=pGroupEntity-&gt;GetSize();kk++)
{
	CATFmtElement * edgeElement = pGroupEdges[kk-1]._Element;
	unsigned edgeTag = pGroupEdges[kk-1]._EdgeNumber;
	cout &lt;&lt; <span class="string">&quot; Edge #&quot;</span> &lt;&lt; edgeTag &lt;&lt; <span class="string">&quot; of Element #&quot;</span> &lt;&lt; edgeElement-&gt;GetTag() &lt;&lt; endl;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAFmtBrowseGroup</code> use case explains how to browse existing groups,
using the Generic CAA APIs exposed in the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
