<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Creating a Mesh Part</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1"><h1><a name="Top"></a>Creating a Mesh Part</h1></td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to create and specify a Mesh Part in a model.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmtCreateMeshpart Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmtCreateMeshpart Do?</a></li>
				<li><a href="#How">How to Launch CAAFmtCreateMeshpart?</a></li>
				<li><a href="#Where">Where to Find the CAAFmtCreateMeshpart Code?</a> </li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show an end user how to create and specify a Mesh Part using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmtCreateMeshpart Use Case</h2>
<p><code>CAAFmtCreateMeshpart</code> is a use case of the <code>CAAFmtInterfaces.edu</code> framework
that illustrates the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks capabilities regarding Mesh Parts.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmtCreateMeshpart Do?</h3>
<p><code>CAAFmtCreateMeshpart</code> is a &quot;batch&quot; that illustrates 
how to create a Mesh Part, set values of specifications and create the mesh.</p>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>].
It contains a 3DShape with a Body, a publication of this Body, and a FEMRep.
The use case will create a new Mesh Part in the FEMRep, using the published body as support, and generate the mesh. </p>
<table>
	<caption align="top">Fig1: The CAAModelTST01 Model</caption>
	<tr>
		<td><a name="Fig1"></a><img alt="" src="images/CAAFmtCreateMeshpart01.png"></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmtCreateMeshpart?</h3>
<p>To launch <code>CAAFmtCreateMeshpart</code>, you will need to set up the build time environment 
and compile the <code>CAAFmtCreateMeshpartDS.m</code> module along with its 
prerequisites [<a href="#References">1</a>]. Once it's built, set up the run time
environment and execute the following command: </p>
<p><code>mkrun -c &quot;<i><a>CAAFmtCreateMeshpartDS</a>
<a>Repository</a> <a>Server</a> <a>User</a> <a>Password</a> <a>SecurityCtx</a> <a>PLM_Type</a> <a>PLM_External_Root</a> <a>V_version_Root</a></i>&quot;</code></p>

<p>
where:</p>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td><script type="text/javascript">insertRepository();</script></td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);
            Choose Role as Designer ( as the use case create the PLM Data)</td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
	
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmtCreateMeshpart Code</h3>
<p>The CAAFmtCreateMeshpart use case is made of a single 
file located in the <code>CAAFmtCreateMeshpartDS.m</code> 
module of the <code>CAAFmtInterfaces.edu</code> 
framework:<br>
<code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtCreateMeshpartDS.m\</code></p>
<p>The use case relies on functions defined in the <code>CAAAdpUtilities.m</code> module of the
<code>CAAPLMClientAdapter.edu</code> framework:<br>
<code><i>InstallRootDirectory</i>\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>Where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The CAAFmtCreateMeshpart use case can be divided into 5 main steps:</p>
<ol>
	<li><a href="#OpenModel">Opening the model</a></li>
	<li><a href="#GetMeshManager">Getting the Mesh Manager</a></li>
	<li><a href="#GetPublication">Getting the published body</a></li>
	<li><a href="#CreateMeshParts">Creating the Mesh Parts</a></li>
	<li><a href="#UpdateMesh">Generating the Mesh: updating the model</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OpenModel"></a>Opening the model</h3>
<p>To open the test model, we use services from the <code>CAAPLMClientAdapter.edu</code> framework.<br>
The product reference is instanciated through the CATIPLMRepInstances interface.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMRepInstances * piRepInstances = NULL;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAAdpOpenProduct(plmtype_n, plmid_n, version_n,
	                     IID_CATIPLMRepInstances, (void **) &amp;piRepInstances, Bag, authoringMode);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="GetMeshManager"></a>Getting the Mesh Manager</h3>
<p>To get the Mesh Manager, we need to iterate on the Rep Instances to find the FEMRep, then get the Mesh Set (CATFmtSetNodesElements) on the FEMRep.</p>
<pre class="code">...
CATIFmtRepManager * pRepManager = NULL;
CATIPrdIterator * pIter = NULL;
piRepInstances-&gt;Iterator(pIter);
if (pIter)
{
	CATBaseUnknown_var nextRep;
	while (SUCCEEDED(pIter-&gt;Next(nextRep)))
	{
		if (CATFmtRepManagerServices::IsAFEMRep(nextRep))
		{
			pRepManager = (CATIFmtRepManager *) CATFmtRepManagerServices::GetRepManagerFromRepresentation(nextRep, IID_CATIFmtRepManager);
			break;
		}
	}
}
...
CATIFmtMeshManager * pMeshManager = NULL;
if (pRepManager) 
{
	CATBaseUnknown * pSet = pRepManager-&gt;GetSet(CATFmtSetNodesElements);
	if (pSet)
	{
		pSet-&gt;QueryInterface(IID_CATIFmtMeshManager, (void**) &amp;pMeshManager);
	}
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="GetPublication"></a>Getting the published body</h3>
<p>In order to create Mesh Parts, we will need a support. In 
this use case, the support is a body that has been published in the root Product.</p>
<p>Therefore, we have to query the CATIPrdObject interface on the product reference that was instantiated through the CATIPLMRepInstances interface,
then get the publications (query the CATIPLMPorts interface), and eventually get the publication by its name.</p>
<pre class="code">...
CATIPrdObject_var spProductAsPrdObj (piRepInstances);

CATIPLMPorts_var ports (spProductAsPrdObj);

CATIPLMPort_var portOnBody = NULL_var;
CATUnicodeString Name = <span class="string">&quot;Publication_Body&quot;</span>;
hr = ports-&gt;GetByName(Name,portOnBody);

CATFmtPath * pathOnBody = NULL;
pathOnBody = CATFmtPathFactory::BuildFromObject(portOnBody);
...</pre>
<h3><a name="CreateMeshParts"></a>Creating the Mesh Parts</h3>
<p>Two Mesh Parts are created:</p>
<ul>
	<li>An Octree Triangle Mesh Part</li>
	<li>An Octree Tetrahedron Mesh Part</li>
</ul>
<p>For each of them, some Global Specifications are defined&nbsp;by 
way of illustration.</p>
<pre class="code">...
CATUnicodeString MP2DName = <span class="string">&quot;CATFmtOctree2DRulesMesher&quot;</span>;
CATIFmtMeshPart * pMyMeshPart2D = pMeshManager-&gt;CreateMeshPart(MP2DName);

hr = pMyMeshPart2D-&gt;SetSupport(pathOnBody);

<span class="comment">// Set global specs</span>
<span class="comment">// Element type: Parabolic</span>
hr = pMyMeshPart2D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;ElementOrder&quot;</span>,2);
<span class="comment">// Size</span>
hr = pMyMeshPart2D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;MeshSizeValue&quot;</span>,5.0);
<span class="comment">// Absolute Sag</span>
hr = pMyMeshPart2D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;AbsoluteSagValue&quot;</span>,0.5);
<span class="comment">// Smoothing criteria: Skewness</span>
hr = pMyMeshPart2D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;QualityCriteria&quot;</span>,2);
...</pre>
<pre class="code">...
CATUnicodeString MP3DName = <span class="string">&quot;CATFmtOctree3DRulesMesher&quot;</span>;
CATIFmtMeshPart * pMyMeshPart3D = pMeshManager-&gt;CreateMeshPart(MP3DName);

hr = pMyMeshPart3D-&gt;SetSupport(pathOnBody);
<span class="comment">// Set global specs</span>
<span class="comment">// Element type: Linear</span>
hr = pMyMeshPart3D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;ElementOrder&quot;</span>,1);
<span class="comment">// Size</span>
hr = pMyMeshPart3D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;MeshSizeValue&quot;</span>,3.0);
<span class="comment">// Global Interior Size</span>
hr = pMyMeshPart3D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;InteriorSizeValue&quot;</span>,6.0);
<span class="comment">// Smoothing criteria: Stretch</span>
hr = pMyMeshPart3D-&gt;SetGlobalSpecification(<span class="string">&quot;Mesh&quot;</span>,<span class="string">&quot;QualityCriteria&quot;</span>,3);
...</pre>
<h3>
<a name="UpdateMesh"></a>Generating the Mesh: updating the model</h3>
<p>We now have to update the Mesh Parts in order to generate the meshes.
In this use case, we choose to update the entire model.</p>
<pre class="code">...
CATIPLMUpdateEngine * updateEngine = NULL;
hr = CATPLMUpdateFactory::InstantiateUpdateEngine(updateEngine);
if (SUCCEEDED(hr) &amp;&amp; (NULL != updateEngine))
{
	hr = updateEngine-&gt;Init(spProductAsPrdObj);
	if (SUCCEEDED(hr))
	{
		hr = updateEngine-&gt;GlobalPLMUpdate();
	}
	<span class="comment">// Get number of elements of each mesh to check that they have been generated properly</span>
	int numberOfElements2D = pMyMeshPart2D-&gt;GetNumberOfElements();
	int numberOfElements3D = pMyMeshPart3D-&gt;GetNumberOfElements();
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAFmtCreateMeshpart</code> use case explains how to create and specify a Mesh Part,
using the Generic CAA APIs exposed in the <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
