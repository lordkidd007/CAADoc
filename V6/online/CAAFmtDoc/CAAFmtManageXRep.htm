<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Managing External Representations</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Managing External Representations</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article explains how to manage an External Representation.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFmtManageXRep Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAFmtManageXRep Do</a></li>
				<li><a href="#How">How to Launch CAAFmtManageXRep</a></li>
				<li><a href="#Where">Where to Find the CAAFmtManageXRep Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to manage external representations 
(XRep) using the Generic CAA APIs.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFmtManageXRep Use Case</h2>
<p><code>CAAFmtManageXRep</code> is a use case of the <code>CAAFmtInterfaces.edu</code> framework that illustrates 
<code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks capabilities regarding external representations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFmtManageXRep Do?</h3>
<p><code>CAAFmtManageXRep</code> shows how to manage an external representation:</p>
<ul>
	<li>It creates and deletes an external representation.</li>
	<li>It manages the link between an external representation and a 3DShape.</li>
	<li>It imports and exports a file and a CGR files.</li>
</ul>
<p>The input model for this Use Case is shown in [<a href="#Fig1">Fig.1</a>].It contains two 3DShapes and a FEMRep.</p>
<table>
	<caption align="center"><a name="Fig1"></a>Fig1: The CAAModelTST01 Model</caption>
	<tr>
		<td><img src="images/CAAFmtCreateFEMRep01.png"/></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFmtManageXRep</h3>
<p>To launch <code>CAAFmtManageXRep</code>, you will need to set up the build time 
environment, then compile <code>CAAFmtManageXRep.m</code> along with its prerequisites, set 
up the run time environment, and then execute the use case [<a href="#References">1</a>]. 
The folder which contains the file and CGR to import should be defined, by setting the environment variable <code>ADL_ODT_IN</code></p>
<p>To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;<i>CAAFmtManageXRep Repository Server User Password SecurityCtx 
PLM_Type PLM_External_Root V_version_Root</i>&quot;</code></p>
<p>where :</p>
<code>
<table  id="table1" >
	<tr>		
		<th><b><i>Repository</i></b></th>
		<td>PLM1</td>
	</tr>
	<tr>
		<th ><b><i>Server</i></b></th>
		<td >The server as host::<i> name</i>:<i>port_number/RootURI</i></td>
	</tr>
	<tr>
		<th><b><i>User</i></b></th>
		<td>The user name</td>
	</tr>
	<tr>
		<th><b><i>Password</i></b></th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th><b><i>SecurityCtx</i></b></th>
		<td>a string representing the security context ( Role. Organization. Project&nbsp;);<o:p>
            Choose Role as Designer ( as the use case create the PLM Data)</o:p></td>
	</tr>
	<tr>
		<th><b>PLM_Type</b></th>
		<td>the PLM type of the Product to open</td>
	</tr>
	<tr>
		<th><b>PLM_External_Root</b></th>
		<td>the PLM Id of the Product to open</td>
	</tr>
	<tr>
		<th><b>V_version_Root</b></th>
		<td>the PLM version of the Product</td>
	</tr>
</table>
</code>
<p><b>Import PLM Data:</b><br/>
The use case requires input PLM Data: PLM reference and PLM Representation Reference. This data is stored in 3D XML Files, whose extension is &quot;3dxml&quot;. 
You must import these PLM Data in the database by clicking on [+] tab in the upper right corner -&gt;Import -&gt;3D XML prior to launching the use case.<br/>
The &quot;3dxml&quot; file is supplied in the <code>CAAFmtInterfaces.edu\CAAFmtInterfacesEduRsc.m\src\resources\CAAModelTST01.3dxml</code>
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFmtManageXRep Code</h3>
<p>The CAAFmtManageXRep use case is made of a single source file named <code>CAAFmtManageXRep.cpp</code> 
located in the <code>CAAFmtManageXRep.m</code> module of the <code>CAAFmtInterfaces.edu</code> framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFmtInterfaces.edu\CAAFmtManageXRep.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five steps in CAAFmtManageXRep:</p>
<ol>
	<li><a href="#Step1">Opening the input product</a></li>
	<li><a href="#Step2">Creating and deleting external representation</a></li>
	<li><a href="#Step3">Manage relation</a></li>
	<li><a href="#Step4">Manage import and export of file and CGR</a></li>
	<li><a href="#Step5">Closing the PLM session</a></li>
</ol>
<p>We will now discuss each of those sections in detail.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the input product</h3>
<p>To open the product test model, you should use services from the <code>
CAAPLMClientAdapter.edu</code> framework.<br />
With the help of the <code>CATIPLMNavReference</code> interface you can navigate through the product structure.</p>
<pre class="code">...
hr = ::CAAAdpCreateSession(repository_n,server_n,user_n,password_n,security_n);

CATBoolean authoringMode = TRUE;
CATIPLMRepInstances * piRepInstances = NULL ;
CATOmbLifeCycleRootsBag Bag;
hr = ::CAAOpenPLMComponent(plmtype_n, plmid_n, version_n,
ID_CATIPLMRepInstances, (void **) &amp;piRepInstances, Bag, authoringMode);
	                     
...</pre>
<p>For further information about setting up a PLM session refer to the article "Connecting to V6 Server"[<a href="#References">2</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating and deleting external representation</h3>
<p>To create an external representation, we need the product that will own the representation.</p>
<p>Therefore, we have to query the CATIPrdObject interface on the product reference that was instantiated through the CATIPLMRepInstances interface.</p>
<pre class="code">...
<span class="comment">// we create the XRep on root Product</span>
CATIPrdObject_var spProductAsPrdObj ( piRepInstances );

CATBaseUnknown * myXRep1 = NULL;
hr = CATFmtXRepFactory::CreateRepresentation ( NULL, spProductAsPrdObj , NULL , NULL, "", FALSE , &amp;myXRep1 );
</pre>
<p>It is also possible to remove the external representation.</p>
<pre class="code">...
<span class="comment">// we create and delete the XRep on root Product</span>
CATBaseUnknown * myXRep2 = NULL;
hr = CATFmtXRepFactory::CreateRepresentation ( NULL, spProductAsPrdObj , NULL , NULL, "", FALSE , &amp;myXRep2 );
...
hr = CATFmtXRepServices::Remove ( myXRep2 );
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Manage relation</h3>
<p>We want to a relation between an external representation and a 3D Shape. The first step is to get the link manager <code>CATIFmtXRepLinkAccess</code>. In this sample, we are using the link manager through a handler.</p>
<pre class="code">...
<span class="comment">// Get the link manager</span>
CATIFmtXRepLinkAccess * pAccess = NULL;
hr = CATFmtXRepServices::GetLinkAccess  ( myXRep1 , pAccess );
...
CATIFmtXRepLinkAccess_var spAccess ( pAccess );
if ( pAccess ) pAccess -&gt; Release (); pAccess = NULL;
...</pre>
<p>To add a relation, we need the object pointed by the relation. In this case, we use a 3D Shape through a <code>CATFmtPath</code>.</p>
<pre class="code">...
<span class="comment">// Get the 3DShape</span>
CATFmtListOfPath shapes;
Get3DShapes( spProductAsPrdObj, shapes );
...
CATFmtPath * path = shapes[1];
...</pre>
<p>Then we can add the relation. The type of the pointed object should be defined.</p>
<pre class="code">...
<span class="comment">// Create a relation</span>
CATIFmtXRepLink * pRelation = NULL;
hr = spAccess -&gt; AddRelation ( path , CATIFmtXRepLinkAccess::CATFmtXRepTo3DShapeRelation, pRelation );
...</pre>
<p>The relation can be removed.</p>
<pre class="code">...
<span class="comment">// Remove the relation</span>
hr = pRelation -&gt; Remove ();
pRelation -&gt; Release (); pRelation = NULL;
...</pre>
<p><code>CATIFmtXRepLinkAccess</code> can also return the number of relations of the external representation.</p>
<pre class="code">...
<span class="comment">// Get the number of relation</span>
int nbRelation = spAccess -&gt; GetNumberOfRelations ();
...</pre>
<p>The relation can be synchronized and can return the pointed object.</p>
<pre class="code">...
<span class="comment">// Synchronize a relation</span>
hr = pRelation -&gt; Synchronize ();
CATBoolean isSynchronized = pRelation -&gt; IsSynchronized ();
...
<span class="comment">// Get the object pointed by the relation</span>
CATFmtPath *pObjectPath = NULL;
hr = pRelation -&gt; GetPointedObject (pObjectPath);
...</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Manage import and export of file and CGR</h3>
<p>The first step is to get the external representation manager <code>CATIFmtXRepFileAccess</code>.</p>
<pre class="code">...
<span class="comment">// GetFileAccess</span>
CATIFmtXRepFileAccess *pFileAccess = NULL;
hr = CATFmtXRepServices::GetFileAccess  ( myXRep1, pFileAccess );
...
pFileAccess -&gt; Release (); pFileAccess = NULL;
...</pre>
<p>To import a file, we have to define the file name and the folder which contains it.</p>
<pre class="code">...
<span class="comment">// Define the name of the file to import</span>
CATUnicodeString fileName = "XRep_Mesh.inp";
hr = pFileAccess -&gt; SetFileName ( fileName );
...
<span class="comment">// Import the file</span>
CATUnicodeString fileFolder   = ::CATGetEnv ( "ADL_ODT_TMP" );
hr = pFileAccess -&gt; ImportFile ( fileFolder );
...</pre>
<p>To import a CGR, the same steps are needed.</p>
<pre class="code">...
<span class="comment">// Define the name of the cgr file</span>
CATUnicodeString cgrName = "XRep_Mesh.cgr";
hr = pFileAccess -&gt; SetNavRepName ( cgrName );
...
<span class="comment">// Import the cgr file</span>
hr = pFileAccess -&gt; ImportNavRep ( fileFolder );
...</pre>
<p>We can retrieve the external representation content:</p>
<ul>
	<li>The file</li>
	<li>The CGR file</li>
	<li>The file name</li>
	<li>The CGR file name</li>
	<li>The size of the file in bytes</li>
</ul>
<pre class="code">...
<span class="comment">// Export the file</span>
CATUnicodeString exportFolder = fileFolder + "\\export";
hr = pFileAccess -&gt; ExportNavRep (exportFolder);
...
<span class="comment">// Export the cgr file</span>
hr = pFileAccess -&gt; ExportNavRep (exportFolder);
...
<span class="comment">// Get the file name</span>
CATUnicodeString getFileName;
hr = pFileAccess -&gt; GetFileName ( getFileName );
...
<span class="comment">// Get the cgr name</span>
CATUnicodeString getCgrName;
hr = pFileAccess -&gt; GetNavRepName ( getCgrName );
...
<span class="comment">// Get the size of the file</span>
CATLONG64 fileSize = 0;
hr = pFileAccess-&gt;GetFileSize ( fileSize );
...</pre>
<p>Moreover the PLM Attributes of the external representation can be read and edited. 
For further information refer to the technical articles &quot;Accessing PLM Attributes of PLM Component&quot; [<a href="#References">4</a>] 
and &quot;Modifying PLM Attributes of PLM Component&quot; [<a href="#References">5</a>].</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Closing the PLM session</h3>
<p>To close the test model, you should use services from the <code>CAAPLMClientAdapter.edu</code> framework. Before closing the model, you have to manage the lifecycle of the 
AddRef'ed objects.</p>
<pre class="code">...
if(NULL!=piRepInstances) { piRepInstances-&gt;Release(); piRepInstances=NULL; }
<span class="comment">// Empties the bag</span>
Bag.RemoveAll();
hr = ::CAAAdpCloaseSession();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The <code>CAAFmtManageXRep</code> use case demonstrates the use of various 
CAA APIs in <code>CATFmtModelInterfaces</code> and <code>CATFmtToolsInterfaces</code> frameworks to create and manage external representations.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAOmbModelingProtocol/CAAOmbTaVirtualObject.htm">
		Understanding Link Concepts</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAAdpUcPLMComponentAttributesAccess.htm">
		Accessing PLM Attributes of PLM Component</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAAdpUcModifyingPLMComponentAttribute.htm">
		Modifying PLM Attributes of PLM Component</a></td>
	</tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Nov 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
