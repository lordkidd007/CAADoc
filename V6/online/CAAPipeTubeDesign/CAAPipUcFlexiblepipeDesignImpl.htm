<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Flexible Pipe and Insulation Object Access and Navigation</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Flexible Pipe and Insulation Object Access and 
		Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use"><h2>Use Case</h2></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATPipeTubeDesignUseItf use case. This use 
		case explains how to use, access and navigate flexible pipe and 
		insulation object and their parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPipFlexiblepipeDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAPipFlexiblePipeDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAPipFlexiblePipeDesignImpl</a></li>
				<li><a href="#Where">Where to Find the 
					CAAPipFlexiblePipeDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming 
with CATIA Piping and Tubing Interfaces.
		<br/>
			Its main intent is to provide you information about it&#8217;s use, access 
and navigate flexible pipe and insulation object and their parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPipFlexiblePipeDesignImpl Use Case</h2>
<p>CAAPipFlexiblePipeDesignImpl.m is a use case of the CAAPipeTubeDesign.edu 
framework that illustrates the CATIA Piping and Tubing Interfaces framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPipFlexiblePipeDesignImpl Do</h3>
<p>The goal of CAAPipFlexiblePipeDesignImpl use case is to show how to use and 
navigate flexible pipe and how to access the insulation object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPipFlexiblePipeDesignImpl</h3>
<p>To launch CAAPipFlexiblePipeDesignImpl, you will need to set up the build 
time environment, then compile CAAPipFlexiblePipeDesignImpl along with it&#8217;s 
prerequisites, set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAPipFlexiblepipeDesignImpl Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>protocol://Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context 
		(Role.Organization.Project). Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The V_Version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLM Type for component to be opened.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM 
		representation reference containing the data to create the user feature 
		reference.</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <strong>Flexible_Pipe.3dxml</strong>
    file from the  <strong>CAAPipeTubeDesign.edu</strong> framework.
</p>
<p><code> 
InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\InputData\Flexible_Pipe.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with 
the following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>Prd_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a>:
    <code>A</code></li>
</ul>
<p>
  <img alt="Sample Product" src="images/CAAPipFlexiblePipeDesignImpl.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>Flexible_Pipe.3dxml</em> the <em>PLM_ExternalID</em> value will be different 
                            as per user CATIA session as it is 
                            genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPipFlexiblePipeDesignImpl Code</h3>
<p>The CAAPipFlexiblePipeDesignImpl sample is made of a single class named 
CAAPipFlexiblePipeDesignImpl located in the CAAPipFlexiblePipeDesignImpl.m 
module of the CAAPipeTubeDesign.edu framework: <code>
InstallRootFolder\CAAPipeTubeDesign.edu\CAAPipFlexiblepipeDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes or methods:</p>
<table class="fill">
	<tr>
		<td><em>CAAAdpCreateSession</em></td>
		<td>Create a batch session and connects to a repository.</td>
	</tr>
	<tr>
		<td><em>CAAOpenPLMComponent</em></td>
		<td>To Open and Expand the Physical Product Reference or Representation 
		Reference.</td>
	</tr>
	<tr>
		<td><em>CATIPrdOccurrenceMngt</em></td>
		<td>Class to create the root occurrence for the Root Product. factory.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Electrical environment and it&#8217;s components 
creation by looking at the code of the CAAPipFlexiblepipeDesignImpl. There are 
15 logical steps in CAAPipFlexiblepipeDesignImpl:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating a Session</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Querying/Opening/Expanding the Reference Product 
		with its Associated Representation</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating the Root Occurrence for the Opened Reference 
		Product</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Navigating the List of Occurrences to Get the Pipe 
		Instance and Reference of Flexible Pipe and Insulation</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Checking if the Current Occurence Is an Insulation Instance 
		Object and Getting its Reference Object</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Get the covered object which is under insulation</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Get the attributes of Insulation reference properties</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Checking the current occurrence is Flexible pipe instance object and get its reference object</a></td>
	</tr>	
	<tr>
		<td>10</td>
		<td><a href="#Step10">Get the list of all connected branch pipes and its curvilinear length from pipe instance</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Get the related object in term of insulation, Piping part with Hole port and support from pipe instance</a></td>
	</tr>
	<tr>
		<td>12</td>
		<td><a href="#Step12">Checking the selected reference is Flexible pipe reference</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Get the attributes of Flexible pipe reference properties</a></td>
	</tr>
	<tr>
		<td>14</td>
		<td><a href="#Step14">Get the Flexible pipe parameters information</a></td>
	</tr>
	<tr>
		<td>15</td>
		<td><a href="#Step15">Disconnecting and Deleting the Session</a></td>
	</tr>

</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
if (9 != argc)
{
  cout &lt;&lt; endl;
  cout &lt;&lt;&quot;CAAPipFlexpipeDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
  cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
  cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;PLMType : A PLM Type for PLM Reference or PLM Representation Reference&quot; &lt;&lt;endl;
  cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
  cout &lt;&lt; endl;
  retCode = 1;
  goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Reference Product with 
its Associated Representation</h3>
<p>Retrieve the customized reference of the product modeler.</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl;

  //-----------------------------------------------------------------------
  // Open &amp; Expand the Product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;Piping and Tubing&quot; model(arg[8])
  //   The input model is retrieved by importing the Flexible_Pipe.3dxml file from the CAAPipeTubeDesign.edu fw
  //   This 3D XML file contains the root Product Reference with the following attributes:
  //     * PLM_ExternalID [uPLMID]: Prd_Root
  //---------------------------------------------------
  uPLMID = argv[8];

  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMProducts, (void**) &amp; pIPLMProduct, myBag, TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMProduct)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Root Occurrence for the Opened Reference 
Product</h3>
<pre class="code">...
  hRootNavOccurrence = pIPLMProduct;
  //RootOcc changes Start
  if( NULL_var == hRootNavOccurrence )
  {
    hr = pIPLMProduct-&gt;QueryInterface(IID_CATIPLMNavReference, (void**)&amp;pIPLMNavRefOnRoot);
    if(SUCCEEDED(hr))
    {
      hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
      if( SUCCEEDED(hr) &amp;&amp; ( NULL != pIPrdOccurrenceMngt ) )
      {
        hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefOnRoot, hRootNavOccurrence);
      }
    }
  }
  //RootOcc changes End
  if( ( FAILED(hr) ) || ( NULL_var == hRootNavOccurrence) ) { retCode = 4; goto EscapeWay; }

  hr = hRootNavOccurrence-&gt;QueryInterface(IID_CATBaseUnknown, (void**)&amp;pIUnkOccToFindRoot) ;
  if( FAILED(hr) ) { retCode = 5; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigating the List of Occurrences to Get the Pipe Instance 
and Reference of Flexible Pipe and Insulation</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt; ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 6; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the pipe instance and reference of Flexible Pipe and Insulation
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    // Clean-Up
    if( NULL != pIUnkPipeRef ){ pIUnkPipeRef-&gt;Release() ; pIUnkPipeRef = NULL ; }
    if( NULL != pIEndPipeOne ){ pIEndPipeOne-&gt;Release() ; pIEndPipeOne = NULL ; }
    if( NULL != pIEndPipeTwo ){ pIEndPipeTwo-&gt;Release() ; pIEndPipeTwo = NULL ; }
    if( NULL != pIInsulationRef ){ pIInsulationRef-&gt;Release() ; pIInsulationRef = NULL ; }

    // Initialising the ListofCoordinateNode
    SizeList = ListofCoordinateNode.Size();
    for(iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
    {
      pTempMathPoint = ListofCoordinateNode[iListIndex];
      if( NULL != pTempMathPoint ){ delete pTempMathPoint ; pTempMathPoint = NULL ; }
    }

    ListofCoordinateNode.RemoveAll();
    ListCurvilinearLength.RemoveAll();

    //DeletePtr
    if( NULL != pListofBranchPipeonThisPipe)
    {
      SizeList = pListofBranchPipeonThisPipe-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListofBranchPipeonThisPipe)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListofBranchPipeonThisPipe-&gt;RemoveAll();
      delete pListofBranchPipeonThisPipe;
      pListofBranchPipeonThisPipe = NULL;
    }

    //DeletePtr
    if( NULL != pListRelatedObject)
    {
      SizeList = pListRelatedObject-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListRelatedObject)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListRelatedObject-&gt;RemoveAll();
      delete pListRelatedObject;
      pListRelatedObject = NULL;
    }

    ListAttrNames.RemoveAll();
    // End of Clean-up
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 7; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking if the Current Occurence Is an Insulation Instance 
Object and Getting its Reference Object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Insulation instance smart pointer.</p>
<pre class="code">... 
  hPipInsulationInstance = pIElemNavOccurrence;
  if (NULL_var != hPipInsulationInstance)
  {
    // Get the reference object of Insulation occurence
    hr = hPipInsulationInstance-&gt;GetReference(pIInsulationRef); 
    if( FAILED(hr) || (NULL == pIInsulationRef)) { retCode = 8; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Get the covered object which is under insulation</h3>
<pre class="code">... 
    // Get the object which is under Insulation
    hr = hPipInsulationInstance-&gt;GetCoveredObject(pInsulatedObject); 
    if( FAILED(hr) || (NULL == pInsulatedObject)) { retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Step8"></a>Get the attributes of Insulation reference properties</h3>
<p>We use CATIPipAttrAccess interface to get Insulation properties attributes</p>
<pre class="code">... 
    // Get the  List of Attributes and it&#39;s values of insulation reference
    hAttrAccess = pIInsulationRef;
    if( NULL_var == hAttrAccess) { retCode = 10; goto EscapeWay; }

    hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
    if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 11; goto EscapeWay; }

    sizeListAttrNames = ListAttrNames.Size();
    cout &lt;&lt; endl &lt;&lt; &quot;Insulation properties : &quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

    for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
    {
        if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

        uAttrName = ListAttrNames[iListIndex];
        if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 12; goto EscapeWay; }

        hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
        if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 13; goto EscapeWay; }

        uAttrValue = pIAttrValue-&gt;Show();
        cout&lt;&lt; endl &lt;&lt; uAttrName &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue;

    }
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
    // end of the  List of Attributes and it&#39;s values of insulation reference
  }//end of This Object is an Insulation
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Checking the current occurence is Flexible pipe instance object 
and get its reference object </h3>
<p>We assign CATIPLMNavOccurrence pointer to Flexible pipe instance smart pointer </p>
<pre class="code">... 
  // Checking the selected object is a Pipe instance
  hPipPipeInstance = pIElemNavOccurrence ;
  if( NULL_var != hPipPipeInstance )
  {//it is a Pipe Instance
    // Get the reference object of Rigid/Flexible pipe occurence

    hr = hPipPipeInstance-&gt;GetReference(pIUnkPipeRef); 
    if( ( FAILED(hr) ) || ( NULL == pIUnkPipeRef ) ) { retCode = 14; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Get the list of all connected branch pipes and its 
curvilinear length from pipe instance </h3>
<pre class="code">... 
      hr = hPipPipeInstance-&gt;ListGeometricalBranch(pListofBranchPipeonThisPipe, ListCurvilinearLength);
      if( FAILED(hr) ) { retCode = 15; goto EscapeWay; }

      if(NULL != pListofBranchPipeonThisPipe)
      {
        SizeListPorts = pListofBranchPipeonThisPipe-&gt;Size();
        SizeCrvLen = ListCurvilinearLength.Size();
        if( ( 0 &gt; SizeListPorts ) || (SizeListPorts != SizeCrvLen)) { retCode = 16; goto EscapeWay; }
      }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Get the related object in term of insulation, Piping 
part with Hole port and support from pipe instance</h3>
<pre class="code">... 
  hr = hPipPipeInstance-&gt;GetRelatedObject(pListRelatedObject);
  if( FAILED(hr) ) { retCode = 17; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Checking the selected reference is Flexible pipe reference</h3>
<p>We check if the pipe instance that we have is of a flexible pipe</p>
<pre class="code">...
  // Checking the selected object is a Flexible Pipe
  hPipFlexRef = pIUnkPipeRef ;
  if( NULL_var != hPipFlexRef )
  {
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Get the attributes of Flexible pipe reference properties</h3>
<p>We use CATIPipAttrAccess interface to get Flexible pipe properties attributes</p>
<pre class="code">...
  // Get the List of Attributes and its values of flexible pipe reference
  hAttrAccess = pIUnkPipeRef;
  if( NULL_var == hAttrAccess) { retCode = 18; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 19; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();
  cout &lt;&lt; endl &lt;&lt; &quot;Flexible pipe properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 20; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 21; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();
    cout&lt;&lt; endl &lt;&lt; uAttrName &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue;
  }

  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the List of Attributes and its values of flexible pipe reference
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Get the Flexible pipe parameters information</h3>
<pre class="code">... 
        //Get the number of node in Pipe/Tube
        hr = hPipFlexRef-&gt;GetNumberOfNode(iNumberofNode);
        if( ( FAILED(hr) ) || ( 2 &gt; iNumberofNode ) ) { retCode = 22; goto EscapeWay; }

        //Get the coordinate of Node in the context of root product
        hr = hPipFlexRef-&gt;GetCoordinateofNode(ListofCoordinateNode, pIUnkOccToFindRoot);
        SizeListofPipeCoord = ListofCoordinateNode.Size();
        if( FAILED(hr) || ( iNumberofNode != SizeListofPipeCoord ) ) { retCode = 23; goto EscapeWay; }

        //Get the bend radius of flexible Pipe/Tube
        hr = hPipFlexRef-&gt;GetBendRadius(dBendRadius);
        cout &lt;&lt;&quot;BenRadius = &quot;&lt;&lt;dBendRadius&lt;&lt;endl;
        if( FAILED(hr) ) { retCode = 24; goto EscapeWay; }

        //Get the algorithm mode of flexible Pipe/Tube
        hr = hPipFlexRef-&gt;GetAlgorithmMode(eFlexAlgoritmMode);
        if( FAILED(hr) ) { retCode = 25; goto EscapeWay; }

        switch(eFlexAlgoritmMode)
        {
          case CATIPipFlexiblePipeReference::CatStandard :
            cout &lt;&lt;&quot;Algorithm mode of flexible Pipe/Tube = Standard&quot;&lt;&lt;endl;
            break;
          case CATIPipFlexiblePipeReference::CatFlexible :
            cout &lt;&lt;&quot;Algorithm mode of flexible Pipe/Tube = Flexible&quot;&lt;&lt;endl;
            break;
          default:
            cout &lt;&lt;&quot;Invalid!!! Algorithm mode of flexible Pipe/Tube&quot;&lt;&lt;endl;
            retCode = 26;
            goto EscapeWay;
        }

        //Get the build mode of flexible Pipe/Tube.
        hr = hPipFlexRef-&gt;GetBuildMode(eBuildMode);
        if( FAILED(hr) ) { retCode = 27; goto EscapeWay; }
        switch(eBuildMode)
        {
          case CATIPipFlexiblePipeReference::CATPipSlack :
            cout &lt;&lt;&quot;Build mode of flexible Pipe/Tube = Slack&quot;&lt;&lt;endl;
            break;
          case CATIPipFlexiblePipeReference::CATPipBend :
            cout &lt;&lt;&quot;Build mode of flexible Pipe/Tube = Bend&quot;&lt;&lt;endl;
            break;
          case CATIPipFlexiblePipeReference::CATPipLength :
            cout &lt;&lt;&quot;Build mode of flexible Pipe/Tube = Length&quot;&lt;&lt;endl;
            break;
          default:
            cout &lt;&lt;&quot;Invalid!!! Build mode of flexible Pipe/Tube&quot;&lt;&lt;endl;
            retCode = 28;
            goto EscapeWay;
        }

        //Get the slack of flexible Pipe/Tube.
        hr = hPipFlexRef-&gt;GetSlack(dSlackValue);
        if( FAILED(hr) || (0.0 &gt; dSlackValue ) { retCode = 29; goto EscapeWay; }

        //Get the length of flexible Pipe/Tube.
        hr = hPipFlexRef-&gt;GetLength(dLength);
        if( FAILED(hr) || (0.0 &gt;= dLength) ) { retCode = 30; goto EscapeWay; }
                  
        //Get the Flexible parameters in term of Accuracy, Flexibility, Temperature and pressure
        hr = hPipFlexRef-&gt;GetFlexibleInformation( dAccuracy,
                                                     dFlexibility,
                                                     dTemperature,
                                                     dPressure
                                                    );

        if( FAILED(hr) ) { retCode = 31; goto EscapeWay; }
        //End of Get Nodes' Information for current Flexible Pipe


        //Get the two end of Flexible Pipe/Tube.
        hr = hPipFlexRef-&gt;GetEnds(pIEndPipeOne, pIEndPipeTwo);
        if( FAILED(hr) || ( NULL == pIEndPipeOne ) || ( NULL == pIEndPipeTwo ) )
        {
          retCode = 32;
          goto EscapeWay;
        }
      }//end of selected object is a Flexible Pipe
    }//end of it is a Pipe Instance
  }//end of List Object is NOT Insulation
}//end of for loop on all children of root
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 33;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to use, access and navigate flexible 
pipe and insulation object and their parameters.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
