<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Equipment and Support, its Access and 
Navigation</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Information of Equipment and Support, 
		its Access and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATPipeTubeDesignUseItf use case. This use 
		case explains how to use, access and navigate Equipment and Support 
		objects and their parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPipEquipAndSupportDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAPipEquipAndSupportDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAPipEquipAndSupportDesignImpl</a></li>
				<li><a href="#Where">Where to Find the 
					CAAPipEquipAndSupportDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming 
with CATIA Piping and Tubing Interfaces.
  <br/>
  Its main intent is to provide you information about it's use, access and 
navigate equipment and support objects and their parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPipEquipAndSupportDesignImpl Use Case</h2>
<p>CAAPipEquipAndSupportDesignImpl.m is a use case of the CAAPipeTubeDesign.edu 
framework that illustrates the CATIA Piping and Tubing Interfaces framework 
capabilities with regards to Equipment and Support objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPipEquipAndSupportDesignImpl Do</h3>
<p>The goal of CAAPipEquipAndSupportDesignImpl use case is to show how to use 
and navigate Equipment and Support objects and how to access its parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPipEquipAndSupportDesignImpl</h3>
<p>To launch CAAPipEquipAndSupportDesignImpl, you will need to set up the build 
time environment, then compile CAAPipEquipAndSupportDesignImpl.m along with its 
prerequisites, set up the run time environment, and then execute the sample [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAPipEquipAndSupportDesignImpl Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>protocol://Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context 
		(Role.Organization.Project). Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The V_Version attribute value of the reference to be opened.</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The value of the <code>PLM_ExternalID</code> attribute of the PLM 
		representation reference containing the data to create the user feature 
		reference.</td>
	</tr>
</table>

<p>* The input model is retrieved by importing the <strong>
Prd_Root_EquipmentAndSupport.3dxml</strong>
    file from the  <strong>CAAPipeTubeDesign.edu</strong> framework.
</p>
<p><code> 
InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\InputData\Prd_Root_EquipmentAndSupport.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the Root Product Reference with the following 
attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>Prd_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a>:
    <code>A</code></li> 
</ul>
<p>
  <img alt="Sample Product" src="images/CAAPipEquipAndSupportDesignImpl.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>Prd_Root_EquipmentAndSupport.3dxml</em> the <em>PLM_ExternalID</em> value will be different 
                            as per user CATIA session as it is 
                            genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPipEquipAndSupportDesignImpl Code</h3>
<p>The CAAPipEquipAndSupportDesignImpl sample is made of a single class named 
CAAPipEquipAndSupportDesignImpl located in the CAAPipEquipAndSupportDesignImpl.m 
module of the CAAPipeTubeDesign.edu framework:
<code>InstallRootFolder\CAAPipeTubeDesign.edu\CAAPipEquipAndSupportDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table class="fill">
	<tr>
		<td><em>CAAAdpCreateSession</em></td>
		<td>Class to create a batch session and connects to a repository.</td>
	</tr>	
	<tr>
		<td><em>CAAOpenPLMComponent</em></td>
		<td>Class to retrieve the Product Reference or Representation Reference.</td>
	</tr>
	<tr>
		<td><em>CATIPrdOccurrenceMngt</em></td>
		<td>Class to create the root occurrence for the Root Product. factory.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Piping and Tubing environment and it&#8217;s 
components creation by looking at the code of the Main . There are 21 logical 
steps in Main:</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>	
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating a Session</a></td>
	</tr>	
	<tr>
		<td>3</td>
		<td><a href="#Step3">Querying/Opening/Expanding the Reference Product 
		with its Associated Representation</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Creating the Root Occurrence for the Opened 
		Reference Product</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Navigating the List of Occurrences to Get Instance 
		and Reference of Equipment and Support</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Checking if the Current Occurrence is Equipment 
		Instance Object and Getting its Reference Object</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Getting the Attributes of Equipment from Equipment 
		Reference</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Getting the Sub Type from Equipment Reference</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Getting the Equipment Reference Parameters Information</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Getting the Reference Piping Information on Port from 
		Piping Port Reference</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Getting the Other Connected Object (Part / Pipe) of 
		Current Selected Equipment Ports from Equipment Instance</a></td>
	</tr>
	<tr>
		<td>12</td>
		<td><a href="#Step12">Creating New Piping Port on Selected Equipment from 
		Equipment Reference</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Setting Values of Attributes on Newly Created Port</a></td>
	</tr>
	<tr>
		<td>14</td>
		<td><a href="#Step14">Getting the Values of Attributes of Port</a></td>
	</tr>
	<tr>
		<td>15</td>
		<td><a href="#Step15">Checking if the Current Occurrence is Support 
		Instance Object and Getting its Reference Object</a></td>
	</tr>
	<tr>
		<td>16</td>
		<td><a href="#Step16">Getting the Attributes of Support from Support 
		Reference Object</a></td>
	</tr>
	<tr>
		<td>17</td>
		<td><a href="#Step17">Getting the Sub Type from Support Reference Object</a></td>
	</tr>
	<tr>
		<td>18</td>
		<td><a href="#Step18">Getting the Information for Number of Support Sections 
		from the Support Reference Object</a></td>
	</tr>
	<tr>
		<td>19</td>
		<td><a href="#Step19">Getting the Current Support Section Information from 
		the Support Reference Object</a></td>
	</tr>
	<tr>
		<td>20</td>
		<td><a href="#Step20">Getting the Information of Pipe Passing through the 
		Current Section from Support Instance</a></td>
	</tr>
	<tr>
		<td>21</td>
		<td><a href="#Step21">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
if (9 != argc)
{
cout &lt;&lt; endl;
cout &lt;&lt;&quot;CAAPipEquipAndSupportDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;PLMType: A PLMType for a PLM Reference or PLM Representation Reference.&quot; &lt;&lt;endl;
cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
cout &lt;&lt; endl;
retCode = 1;
goto EscapeWay;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Reference Product 
with its Associated Representation</h3>
<p>Retrieve the customized Reference of the Product modeler.</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------  
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;

  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;Piping and Tubing&quot; model(arg[8])
  // The input model is retrieved by importing the Prd_Root_EquipmentAndSupport.3dxml file from the CAAPipeTubeDesign.edu fw
  // This 3D XML file contains the root Product Reference with the following attributes:
  //     * PLM_ExternalID [uPLMID]: Prd_Root
  //---------------------------------------------------   
  uPLMID = argv[8];
  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMNavReference, (void**) &amp; pIPLMNavRefPhysRoot, myBag, TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMNavRefPhysRoot)) { retCode = 3; goto EscapeWay; }

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Root Occurrence for the Opened Reference Product</h3>
<p>We create the root occurrence.</p>
<pre class="code">...
  hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
  if ((FAILED(hr)) || (NULL == pIPrdOccurrenceMngt)) { retCode = 4; goto EscapeWay; }

  hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefPhysRoot, hRootNavOccurrence);
  if( ( FAILED(hr) ) || ( NULL_var == hRootNavOccurrence ) ){ retCode = 5; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigating the List of Occurrences to Get Instance 
and Reference of Equipment and Support</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt; ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 6; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the instance and reference of equipment
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    //Clean-Up
    pIElemNavOccurrence = NULL ;    
    if( NULL != pIPipEquipmentRef ){ pIPipEquipmentRef-&gt;Release() ; pIPipEquipmentRef = NULL ; }
    if( NULL != pISupportRef ){ pISupportRef-&gt;Release() ; pISupportRef = NULL ; }

    SizeList = ListPorts.Size();
    for( iListIndex =1; iListIndex &lt;= SizeList; iListIndex++ )
    {
      pIThisPort = ListPorts[iListIndex];
      if( NULL != pIThisPort ){ pIThisPort-&gt;Release() ; pIThisPort = NULL ; }
    }
    ListPorts.RemoveAll();

    //End of Clean-Up

    // Refer database Prd_Root_EquipmentAndSupport.3dxml
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 7; goto EscapeWay ; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking if the Current Occurrence is Equipment 
Instance Object and Getting its Reference Object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Equipment instance smart pointer.</p>
<pre class="code">... 
  hPipEquipmentInstance = pIElemNavOccurrence;
  // Checking the selected object is an equipment instance
  if ( NULL_var != hPipEquipmentInstance )
  {
    // Get the  reference object of part occurence
    hr = hPipEquipmentInstance-&gt;GetReference(pIPipEquipmentRef);  
    if( ( FAILED(hr) ) || ( NULL == pIPipEquipmentRef ) ) { retCode = 8; goto EscapeWay; }      

    hUnkPartRef = pIPipEquipmentRef ;
    if( NULL_var == hUnkPartRef ) { retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Getting the Attributes of Equipment from Equipment Reference</h3>
<p>We use CATIPipAttrAccess interface to get Equipment attributes.</p>
<pre class="code">...
  //-----------------------------------------------------------------------
  // - To get the Equipment properies of selcted part reference object
  //-----------------------------------------------------------------------
  ListAttrNames.RemoveAll();

  // Get the  List of Attributes and it's values of part reference
  hAttrAccess = pIPipEquipmentRef;
  if( NULL_var == hAttrAccess) { retCode = 18; goto EscapeWay; }

  //Currently Equipment has ONLY 1 Piping Attribute. Hence HARD CODED the check for size of Attribute Names
  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 != ListAttrNames.Size()) ) { retCode = 11; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();

  cout &lt;&lt; endl &lt;&lt; &quot;Equipment Properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 12; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 13; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();

    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it's values of equipment reference
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Getting the Sub Type from Equipment Reference</h3>
<pre class="code">...
  hr = pIPipEquipmentRef-&gt;GetSubType(uSubTypePart); 
  if( (FAILED(hr)) || (1 &gt; uSubTypePart.GetLengthInChar()) ) { retCode = 14; goto EscapeWay; }

  cout&lt;&lt; endl &lt;&lt;&quot;Equipment SubType : &quot;&lt;&lt;uSubTypePart.ConvertToChar() ;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Getting the Equipment Reference Parameters Information</h3>
<pre class="code">... 
    hr = pIPipEquipmentRef-&gt;ListPorts( ListPorts ) ;
    SizeListPorts = ListPorts.Size();
    if( (FAILED(hr)) || (0 &gt; SizeListPorts) ) { retCode = 15; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Getting the Reference Piping Information on Port from 
Piping Port Reference</h3>
<pre class="code">... 
    // Get the CATIPipPipingPortRef interface from ListPorts which is List of ports of selected equipment

    for( nPortIndex = 1; nPortIndex &lt;= SizeListPorts; nPortIndex++)
    {
      geomPortType = CATIPipPipingPortRef::CatPipUndefinedPort ;

      if( NULL != pMathPtConstraintOriginPt ){ delete pMathPtConstraintOriginPt ; pMathPtConstraintOriginPt = NULL ; }
      if( NULL != pMathVectConstraintAlign ) { delete pMathVectConstraintAlign ; pMathVectConstraintAlign = NULL ; }
      if( NULL != pMathVectConstraintOrient ){ delete pMathVectConstraintOrient ; pMathVectConstraintOrient = NULL ; }

      if( NULL != pICBUOwner ){ pICBUOwner-&gt;Release() ; pICBUOwner = NULL ; } 
      if( NULL != pIOtherPort ){ pIOtherPort-&gt;Release() ; pIOtherPort = NULL ; } 
      if( NULL != pIOtherConnectable ){ pIOtherConnectable-&gt;Release() ; pIOtherConnectable = NULL ; }

      pIThisPort = ListPorts[nPortIndex];
      if( NULL == pIThisPort ) { retCode = 16; goto EscapeWay ; }

      hr = pIThisPort-&gt;GetType(geomPortType) ;
      if(    ( FAILED(hr) )
          || (    ( CATIPipPipingPortRef::CatPipPartPort  != geomPortType )
               &amp;&amp; ( CATIPipPipingPortRef::CatPip2PartPort != geomPortType )
             )
        )
      { retCode = 17; goto EscapeWay; }

      hr = pIThisPort-&gt;GetOwner(pICBUOwner) ;
      if( (FAILED(hr)) || (NULL == pICBUOwner) ) { retCode = 18; goto EscapeWay; }

      hUnkOwnerOfPort = pICBUOwner ;
      if( NULL_var == hUnkOwnerOfPort ) { retCode = 19; goto EscapeWay; }

      if( hUnkPartRef != hUnkOwnerOfPort ) { retCode = 20; goto EscapeWay; }

      hr = pIThisPort-&gt;GetConstraintElements(pMathPtConstraintOriginPt,
                                                pMathVectConstraintAlign,
                                                pMathVectConstraintOrient) ;
      if( ( FAILED(hr) )
         || ( NULL == pMathPtConstraintOriginPt )
         || ( NULL == pMathVectConstraintAlign )
         || ( NULL == pMathVectConstraintOrient )
        )
      {//As this is a Port of an equipment, we must get all the three constraint elements !
        retCode = 21;
        goto EscapeWay ;
      }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Getting the Other Connected Object (Part / Pipe) of 
Current Selected Equipment Ports from Equipment Instance</h3>
<pre class="code">... 
    // Get the other connected object through the port of selected equipment.
    hr = hPipEquipmentInstance-&gt;GetConnectedObject(pIOtherPort, pIOtherConnectable, pIThisPort);
    if( ( SUCCEEDED(hr) ) &amp;&amp; ( NULL == pIOtherPort ) &amp;&amp; ( NULL == pIOtherConnectable ) ) 
    { cout &lt;&lt; endl &lt;&lt; &quot;No other object connected to Equipment this port&quot; &lt;&lt; endl ; }
    else if( ( FAILED(hr) ) || ( NULL == pIOtherPort ) || ( NULL == pIOtherConnectable ))  { retCode = 22; goto EscapeWay; }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Creating New Piping Port on Selected Equipment from 
Equipment Reference</h3>
<pre class="code">... 
      // Create the new piping port on equipment and set the attributes on it
      CATMathPoint origin(10.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;
      CATMathVector alignDir(1.0*nCreatePortNo, 0, 0) ;
      CATMathVector oriDir(0, 0, 1.0*nCreatePortNo) ;
      CATMathPoint offset(100.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;

      hr = pIPipEquipmentRef-&gt;CreatePort(origin, alignDir, oriDir, geomPortType, str, pIPipPipingPortRef, &amp;offset); 
      if(E_INVALIDARG == hr)
      {
        strMsg =strMsg + &quot; =&gt;FAILED to create because \n\t ==&gt;Either Alignment and Orienation vectors are not orthogonal OR the input name for port is already used.&quot;;
      }
      else if(FAILED(hr)) { strMsg = strMsg + &quot; =&gt;FAILED to create&quot;; if(0 != nCreatePortNo){ retCode = 23; goto EscapeWay;} }
      else { strMsg = strMsg +&quot; created successfully&quot;; }

      cout &lt;&lt; endl &lt;&lt; strMsg.ConvertToChar() &lt;&lt;endl;

      nCreatePortNo++;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Setting Values of Attributes on Newly Created Port</h3>
<p>We use CATIPipAttrAccess interface to set attributes on newly created piping 
port of Equipment from equipment reference</p>
<pre class="code">... 
      ListAttrNames.RemoveAll();

      // Set the Attributes and it's values of port reference

      hAttrAccess = pIPipPipingPortRef;
      if( NULL_var == hAttrAccess) { retCode = 24; goto EscapeWay; }

      hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
      if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 25; goto EscapeWay; }

      sizeListAttrNames = ListAttrNames.Size();

      for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
      {
        if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

        uAttrName = ListAttrNames[iListIndex];
        if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 26; goto EscapeWay; }

        hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
        if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 27; goto EscapeWay; }

        if(uAttrName == &quot;V_Standard&quot;)
        {
          pIAttrValue-&gt;Valuate(&quot;ASTL&quot;);
        }
        else if(uAttrName == &quot;V_NominalSize&quot;)
        {
          CATUnicodeString cusNomSize(strCreatePortNo) ;
          cusNomSize = cusNomSize + &quot;in&quot; ;
          pIAttrValue-&gt;Valuate(cusNomSize);
        }
        else if(uAttrName == &quot;V_EndStyle&quot;)
        {
          pIAttrValue-&gt;Valuate(&quot;BUTT WELD&quot;);
        }
        else if(uAttrName == &quot;V_Rating&quot;)
        {
          pIAttrValue-&gt;Valuate(&quot;150#&quot;);
        }
        else if(uAttrName == &quot;V_WallThickness&quot;)
        {
          pIAttrValue-&gt;Valuate(iListIndex/1000.00);
        }
        else if(uAttrName == &quot;V_OutsideDiameter&quot;)
        {
          pIAttrValue-&gt;Valuate(60.325/1000.00);
        }

        hr = hAttrAccess-&gt;SetAttrValue ( uAttrName, pIAttrValue);
        if(FAILED(hr)){ retCode = 28; goto EscapeWay; }
      }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Getting the Values of Attributes of Port</h3>
<pre class="code">...
  We use CATIPipAttrAccess interface to get piping port attributes
  
      // Get the  List of Attributes and it's values of port reference
      cout &lt;&lt; endl &lt;&lt; &quot;Port Properties : &quot;;
      cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
      cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

      for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
      {
        if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

        uAttrName = ListAttrNames[iListIndex];
        if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 29; goto EscapeWay; }

        hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
        if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 30; goto EscapeWay; }

        uAttrValue = pIAttrValue-&gt;Show();

        cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
        }
      cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
      // end of the  List of Attributes and it's values of part reference
      }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Checking if the Current Occurrence is Support 
Instance Object and Getting its Reference Object</h3>
<pre class="code">... 
We assign CATIPLMNavOccurrence pointer to Support instance smart pointer 

  hPipSupportInstance = pIElemNavOccurrence;    
  // Checking the selected object is support instance
  if ( NULL_var != hPipSupportInstance )
  {
   hr = hPipSupportInstance-&gt;GetReference(pISupportRef);
   if( ( FAILED(hr) ) || ( NULL == pISupportRef ) ) { retCode = 31; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Getting the Attributes of Support from Support 
Reference Object</h3>
<pre class="code">... 
We use CATIPipAttrAccess interface to get Equipment attributes

    ListAttrNames.RemoveAll();

    hAttrAccess = pISupportRef;
    if( NULL_var == hAttrAccess) { retCode = 32; goto EscapeWay; }

    hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
    if( (FAILED(hr)) || (1 != ListAttrNames.Size()) ) { retCode = 33; goto EscapeWay; }

    sizeListAttrNames = ListAttrNames.Size();

    cout &lt;&lt; endl &lt;&lt; &quot;Support Properties : &quot;
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

    for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
    {
      if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

      uAttrName = ListAttrNames[iListIndex];
      if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 34; goto EscapeWay; }

      hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
      if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 35; goto EscapeWay; }

      uAttrValue = pIAttrValue-&gt;Show();

      cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
    }
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
    // end of the  List of Attributes and it's values of support reference
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Getting the Sub Type from Support Reference Object</h3>
<pre class="code">... 
    hr = pISupportRef-&gt;GetSubType(uSubTypePart); 
    if( (FAILED(hr)) || (1 &gt; uSubTypePart.GetLengthInChar()) ) { retCode = 36; goto EscapeWay; }
    
    cout&lt;&lt; endl &lt;&lt; uSubTypePart.ConvertToChar() ;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Getting the Information for Number of Support Sections 
from the Support Reference Object</h3>
<pre class="code">... 
    hr = pISupportRef-&gt;GetNumberOfSections(numberSupportSections);
    if( ( FAILED(hr) ) || ( 0 &gt;= numberSupportSections ) ) { retCode = 37; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step19"></a>Getting the Current Support Section Information from 
the Support Reference Object</h3>
<pre class="code">... 
    for( indexSection = 1; indexSection &lt;= numberSupportSections; indexSection++)
    {
      if( NULL != pIPipeInstance ){ pIPipeInstance-&gt;Release() ; pIPipeInstance = NULL ; }

      hr = pISupportRef-&gt;GetSectionData(indexSection, mathInputPt, mathInputPlane, mathOutputPlane, mathBasePlane);
      if( FAILED(hr) ) { retCode = 38; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step20"></a>Getting the Information of Pipe Passing through the 
Current Section from Support Instance</h3>
<pre class="code">... 
    hr = hPipSupportInstance-&gt;GetPipeThroughSection(indexSection, pIPipeInstance);
    if( (FAILED(hr)) || (NULL == pIPipeInstance) ) { retCode = 39; goto EscapeWay; }
   }        
  }//End Support code
 }//End not an Equipment
}//end of for loop on list of children from Root Product
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step21"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */
  hr = CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 40;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the 
Equipment and Support part in Piping product.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2012]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
