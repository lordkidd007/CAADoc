<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Piping Spool, its Access and Navigation</title>
</head>

<body>

<table class="DocHeader">
  <tr>
    <td class="DocHeader1">
    <h1><a name="Top"></a>Retrieving Information of Piping Spool, its Access and 
	Navigation</h1>
    </td>
  </tr>
  <tr>
    <td class="use">Use Case</td>
  </tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
  <tr>
    <td>
    <h2>Abstract</h2>
    <p>This article discusses the CATPipeTubeDesignUseItf use case. This use 
	case explains how to use, access and navigate Piping Spool object and their 
	parameters.</p>
    <ul>
      <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
      <li><a href="#UseCase">The CAAPipSpoolDesignImpl Use Case</a>
      <ul>
        <li><a href="#What">What Does CAAPipSpoolDesignImpl Do</a></li>
        <li><a href="#How">How to Launch CAAPipSpoolDesignImpl</a></li>
        <li><a href="#Where">Where to Find the CAAPipSpoolDesignImpl Code</a></li>
      </ul>
      </li>
      <li><a href="#Step">Step-by-Step</a></li>
      <li><a href="#InShort">In Short</a></li>
      <li><a href="#history">History</a></li>
    </ul>
    </td>
  </tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming 
with CATIA Piping and Tubing Interfaces.
    <br/>
        Its main intent is to provide you information about it&#8217;s use, access and 
navigate piping spool and their parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPipSpoolDesignImpl Use Case</h2>
<p>CAAPipSpoolDesignImpl.m is a use case of the CAAPipeTubeDesign.edu framework 
that illustrates the CATIA Piping and Tubing Interfaces framework capabilities 
with regards to Piping Spool.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPipSpoolDesignImpl Do</h3>
<p>The goal of CAAPipSpoolDesignImpl use case is to show how to use and navigate 
piping spool and how to access its parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPipSpoolDesignImpl</h3>
<p>To launch CAAPipSpoolDesignImpl, you will need to set up the build time 
environment, then compile CAAPipSpoolDesignImpl.m along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAPipSpoolDesignImpl Repository Server User Password SecutityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="fill">
  <tr>
    <th>Repository</th>
    <td>
    <script type="text/javascript">insertRepository();</script>
    </td>
  </tr>
  <tr>
    <th>Server</th>
    <td>The server as <em>protocol://Host:port_number/RootURI</em></td>
  </tr>
  <tr>
    <th>User</th>
    <td>The user name.</td>
  </tr>
  <tr>
    <th>Password</th>
    <td>The user password to authenticate the user.</td>
  </tr>
  <tr>
    <th>SecurityCtx</th>
    <td>A string representing the security context (Role.Organization.Project). 
	Choose Role as Designer.</td>
  </tr>
    <tr>
    <th>Version</th>
    <td>The V_Version attribute value of the reference to be opened.</td>
  </tr>
  <tr>
    <th>PLMType</th>
    <td>A PLM Type for component to be opened.</td>
  </tr>
  <tr>
    <th>PLM_ExternalID</th>
    <td>The value of the <code>PLM_ExternalID</code> of a PLM Reference or PLM 
	Representation Reference be browsed for Physical Structure.</td>
  </tr>
</table>

<p>* The input model is retrieved by importing the <strong>Root_Spool.3dxml</strong>
    file from the  <strong>CAAPipeTubeDesign.edu</strong> framework.
</p>
<p><code> 
InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\InputData\Root_Spool.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with 
the following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a>:
    <code>Root_Spool</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a> :
    <code>A</code></li>
</ul>
<p>
  <img alt="Sample Product" src="images/CAAPipSpoolDesignImpl.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>Root_Spool.3dxml</em> the <em>PLM_ExternalID</em> value will be different 
                            as per user CATIA session as it is 
                            genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPipSpoolDesignImpl Code</h3>
<p>The CAAPipSpoolDesignImpl sample is made of a single class named 
CAAPipSpoolDesignImpl located in the CAAPipSpoolDesignImpl.m module of the 
CAAPipeTubeDesign.edu framework:
<code>InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\CAAPipSpoolDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes or methods:</p>
<table class="fill">
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>To Open and Expand of the Physical Product Reference or Representation 
	Reference.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first look at the Piping and Tubing environment and it&#8217;s 
components creation by looking at the code of the CAAPipSpoolDesignImpl. There 
are 9 logical steps in CAAPipSpoolDesignImpl:</p>
<table class="fill">
  <tr>
    <th>#</th>
    <th>Step</th>
  </tr>
  <tr>
    <td>1</td>
    <td><a href="#Step1">Checking the Input Data</a></td>
  </tr>
  <tr>
    <td>2</td>
    <td><a href="#Step2">Creating a Session</a></td>
  </tr>
  <tr>
    <td>3</td>
    <td><a href="#Step3">Querying/Opening/Expanding the Reference Product with 
	its Associated Representation</a></td>
  </tr>
    <tr>
    <td>4</td>
    <td><a href="#Step4">Creating the Root Occurrence for the Opened Reference 
	Product</a></td>
  </tr>
  <tr>
    <td>5</td>
    <td><a href="#Step5">Navigating the List of Occurrences to Get the Instance and 
		Reference of Piping Spool</a></td>
  </tr>
  <tr>
    <td>6</td>
    <td><a href="#Step6">Checking if the Current Occurrence Is a Piping Spool 
	Instance Object and Getting its Reference Object</a></td>
  </tr>
  <tr>
    <td>7</td>
    <td><a href="#Step7">Getting the Spool Mode of Selected Spool Instance</a></td>
  </tr>
  <tr>
    <td>8</td>
    <td><a href="#Step8">Getting the members of the Spool</a></td>
  </tr>
  <tr>
    <td>9</td>
    <td><a href="#Step9">Disconnecting and Deleting the Session</a></td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (9 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAPipSpoolDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
    cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType: A PLM Type for PLM Reference or PLM Representation Reference &quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Reference Product with 
its Associated Representation</h3>
<p>Retrieve the customized Reference of the Product modeler.</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;

  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;Piping and Tubing&quot; model(arg[8])
  // The input model is retrieved by importing the Prd_Root.3dxml file from the CAAPipeTubeDesign.edu fw
  // This 3D XML file contains the root Product Reference with the following attributes:
  //     * PLM_ExternalID [uPLMID]: Root_Spool
  //--------------------------------------------------- 
  uPLMID = argv[8] ;

  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMProducts, (void**) &amp; pIPLMProduct, myBag,TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMProduct)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the Root Occurrence for the Opened Reference 
Product</h3>
<p>We create the root occurrence.</p>
<pre class="code">...
  hRootNavOccurrence = pIPLMProduct;
  //RootOcc changes Start
  if( NULL_var == hRootNavOccurrence )
  {
    hr = pIPLMProduct-&gt;QueryInterface(IID_CATIPLMNavReference, (void**)&amp;pIPLMNavRefOnRoot);
    if(SUCCEEDED(hr))
    {
      hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
      if( SUCCEEDED(hr) &amp;&amp; ( NULL != pIPrdOccurrenceMngt ) )
      {
        hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefOnRoot, hRootNavOccurrence);
      }
    }
  }
  //RootOcc changes End
  if( NULL_var == hRootNavOccurrence ) { retCode = 4; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigating the List of Occurrences to Get the Instance and 
Reference of Piping Spool</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt;ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 5; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the instance and reference of spool
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    //Clean-Up
    pIElemNavOccurrence = NULL ;
    if( NULL != pIPipSpoolRef ){ pIPipSpoolRef-&gt;Release() ; pIPipSpoolRef = NULL ; }
    //End of Clean-Up

    // Refer database Root_Spool.3dxml
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 6; goto EscapeWay ; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking if the Current Occurrence Is a Piping Spool 
Instance Object and Getting its Reference Object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Spool instance smart pointer.</p>
<pre class="code">... 
  hPipSpoolInstance = pIElemNavOccurrence ;
  // Checking the selected object is spool instance
  if (NULL_var != hPipSpoolInstance)
  {
    // Get the  reference object of spool occurence
    hr = hPipSpoolInstance-&gt;GetReference(pIPipSpoolRef);  
    if( ( FAILED(hr) ) || ( NULL == pIPipSpoolRef ) ) { retCode = 7; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Getting the Spool Mode of Selected Spool Instance</h3>
<pre class="code">...
      hr = hPipSpoolInstance-&gt;GetMode(ePipSpoolMode);
      if( ( FAILED(hr) )) { retCode = 8; goto EscapeWay; }

      cout &lt;&lt; endl &lt;&lt; &quot;Spool Mode &quot;&lt;&lt;index&lt;&lt;&quot;\t| &quot;;
      switch(ePipSpoolMode)
      {
        case CATIPipSpoolInstance::CatPipEmptySpool :
             cout &lt;&lt; &quot;CatPipEmptySpool (Spool is currently empty, hence has no mode)&quot;;
             break;
        case CATIPipSpoolInstance::CatPipPreliminaryDesign :
             cout &lt;&lt; &quot;CatPipPreliminaryDesign (Spool is in preliminary design mode with links from Spool to each element.)&quot;;
             break;
        case CATIPipSpoolInstance::CatPipManufacturing :
             cout &lt;&lt; &quot;CatPipManufacturing (Spool is in manufacturing mode with all elements under Spool product.)&quot;;
             break;
        case CATIPipSpoolInstance::CatPipMixOfPreliminaryAndManufacturing :
             cout &lt;&lt; &quot;CatPipMixOfPreliminaryAndManufacturing (Spool is in mixed mode with links from Spool to one or more elements and other one or more elements are under Spool product.)&quot;;
             break;
        case CATIPipSpoolInstance::CatPipErrorWrongTypeOfElemInSpool :
             cout &lt;&lt; &quot;CatPipErrorWrongTypeOfElemInSpool (Spool has error - wrong type of elements (equipments, supports, HVAC, Raceway) are inside piping spool.)&quot;;
             break;
        default :
             retCode = 9; 
             goto EscapeWay;
      }
      cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Getting the members of the Spool</h3>
<p>We check  ePipSpoolMode to see that the spool must be either preliminary or manufacturing mode spool</p>
<pre class="code">... 
  if (( ePipSpoolMode == CATIPipSpoolInstance::CatPipPreliminaryDesign ) || ( ePipSpoolMode == CATIPipSpoolInstance::CatPipManufacturing))
  {
    hr = hPipSpoolInstance->GetMembers( pMembersOfSpool );
    if (FAILED(hr)){ retCode = 10 ; goto EscapeWay;}
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Step9"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database.</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 11;
   }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the piping 
spool.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
  <tr>
    <td>[1]</td>
    <td>
    <a href="../CAADocUseCases/CAADocRunSample.htm">
    Building and Launching a Use Case</a></td>
  </tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
  <tr>
    <td>Version: <strong>1</strong> [Feb 2011]</td>
    <td>Document created</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
