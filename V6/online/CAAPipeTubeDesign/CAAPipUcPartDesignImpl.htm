<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Piping Parts, its Access and Navigation</title>
</head>

<body>

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Information of Piping Parts, its Access 
		and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CATPipeTubeDesignUseItf use case. This use 
		case explains how to use, access and navigate piping parts object and 
		their parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPipPartDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAPipPartDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAPipPartDesignImpl</a></li>
				<li><a href="#Where">Where to Find the CAAPipPartDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#history">History</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming 
with CATIA Piping and Tubing Interfaces.
		<br/>
				Its main intent is to provide you information about it&#8217;s use, 
access and navigate piping part and their parameters.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPipPartDesignImpl Use Case</h2>
<p>CAAPipPartDesignImpl.m is a use case of the CAAPipeTubeDesign.edu framework 
that illustrates the CATIA Piping and Tubing Interfaces framework capabilities 
with regards to Piping Parts.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPipPartDesignImpl Do</h3>
<p>The goal of CAAPipPartDesignImpl use case is to show how to use and navigate 
piping part and how to access its parameters.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPipPartDesignImpl</h3>
<p>To launch CAAPipPartDesignImpl, you will need to set up the build time 
environment, then compile CAAPipPartDesignImpl.m along with its prerequisites, 
set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAPipPartDesignImpl Repository Server User Password SecutityCtx Version PLMType PLM_ExternalID1 PLM_ExternalID2&quot;</em></pre>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>protocol://Host:port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name.</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user.</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context 
		(Role.Organization.Project). Choose Role as Designer.</td>
	</tr>
	<tr>
		<th>Version</th>
		<td>The V_Version attribute value of the reference to be opened.</td>
	</tr>
  <tr>
		<th>PLMType</th>
		<td>A PLM Type for component to be opened.</td>
	</tr>
    <tr>
        <th>
            PLM_ExternalID1
        </th>
        <td>
            The value of the <code>PLM_ExternalID</code> of a PLM Reference or 
			PLM Representation Reference be browsed for Physical Structure.
        </td>
    </tr>
    <tr>
        <th>
            PLM_ExternalID2
        </th>
        <td>
            The value of the <code>PLM_ExternalID</code> of a PLM Reference or 
			PLM Representation Reference be browsed for Logical Structure.
        </td>
    </tr>
</table>

<p>* The input model is retrieved by importing the <strong>Prd_Root.3dxml</strong>
    file from the  <strong>CAAPipeTubeDesign.edu</strong> framework.
</p>
<p><code>InstallRootFolder\CAADoc\CAAPipeTubeDesign.edu\InputData\Prd_Root.3dxml</code></p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the root Product Reference with the following 
attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID1</strong></code></a> :
    <code>Prd_Root</code></li>
  <li><a><code><strong>PLM_ExternalID2</strong></code></a> :
    <code>Logical_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a> :
    <code>A</code></li>
</ul>
<p>
  <img width="100%" alt="Sample Product" src="images/CAAPipPartDesignImpl.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>Prd_Root.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2 will be different 
                            as per user CATIA session 
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; as it is genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPipPartDesignImpl Code</h3>
<p>The CAAPipPartDesignImpl sample is made of a single class named 
CAAPipPartDesignImpl located in the CAAPipPartDesignImpl.m module of the 
CAAPipeTubeDesign.edu framework:
<code>InstallRootFolder\CAAPipeTubeDesign.edu\CAAPipPartDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes or methods:</p>
<table class="fill">
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Class to create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>Class to retrieve the Product Reference or Representation Reference.</td>
  </tr>
  <tr>
    <td><em>CATAdpOpener</em></td>
    <td>Class to open the Logical Root Product.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the Piping and Tubing environment and it&#8217;s 
components creation by looking at the code of the CAAPipPartDesignImpl. There 
are 18 logical steps in CAAPipPartDesignImpl:
</p>
<table class="fill">
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Checking the Input Data</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating a Session</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Querying/Opening/Expanding the Physical Reference 
		Product with it&#8217;s Associated Representation</a></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Querying/Opening/Expanding the Logical Reference 
		Product with it&#8217;s Associated Representation</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Creating the Root Occurrence for the Opened 
		Reference Product</a></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Navigating the List of Occurrences to Get the Instance and 
		Reference of the Piping Part</a></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Checking if the Current Occurrence Is a Piping Part 
		Instance Object and Getting its Reference Object</a></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Get the Spool of Piping part and then get the mode of the Spool</a></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Get the attributes of Part reference properties</a></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Get the Logical Line Instance if any availble from part instance</a></td>
	</tr>
	<tr>
		<td>11</td>
		<td><a href="#Step11">Get the related object in term of insulation from part 
instance</a></td>
	</tr>
	<tr>
		<td>12</td>
		<td><a href="#Step12">Get the Part reference parameters information</a></td>
	</tr>
	<tr>
		<td>13</td>
		<td><a href="#Step13">Create new piping port on selected Part</a></td>
	</tr>
	<tr>
		<td>14</td>
		<td><a href="#Step14">Set the values of Attributes for new created port</a></td>
	</tr>
	<tr>
		<td>15</td>
		<td><a href="#Step15">Get the values of attributes of Port</a></td>
	</tr>
	<tr>
		<td>16</td>
		<td><a href="#Step16">Get the reference piping information on Port from Piping 
port reference</a></td>
	</tr>
	<tr>
		<td>17</td>
		<td><a href="#Step17">Get the other connected object (part / pipe) of current 
selected part ports from part instance and then get the Spool and the mode of the Spool </a></td>
	</tr>
	<tr>
		<td>18</td>
		<td><a href="#Step18">Disconnecting and Deleting the Session</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (10 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAPipPartDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID1&gt; &lt;PLM_ExternalID2&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
    cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType: A PLM Type for PLM Reference or PLM Representation Reference &quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID1: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID2: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Logical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Physical Reference 
Product with it&#8217;s Associated Representation</h3>
<p>Retrieve the customized Reference of the Product modeler.</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;

  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;Piping and Tubing&quot; model(arg[8])
  // The input model is retrieved by importing the Prd_Root.3dxml file from the CAAPipeTubeDesign.edu fw
  // This 3D XML file contains the root Product Reference with the following attributes:
  //     * PLM_ExternalID1 [uPLMID]   : Prd_Root
  //     * PLM_ExternalID2 [uPLMIDLog]: Logical_Root
  //--------------------------------------------------- 
  uPLMID = argv[8] ;
  cout&lt;&lt; endl &lt;&lt; uPLMID.ConvertToChar() ;

  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMProducts, (void**) &amp; pIPLMProduct, myBag,TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMProduct)) { retCode = 7; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Querying/Opening/Expanding the Logical Reference Product 
with it&#8217;s Associated Representation</h3>
<p>We are opening logical reference product.</p>
<pre class="code">...
  //Try to open the logical Root
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;RFLVPMLogicalReference&quot;, hTypeModeler);
  if( (FAILED(hr)) || (NULL_var == hTypeModeler) ) { retCode = 3; goto EscapeWay; }

  uPLMIDLog = argv[9];
  attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, uPLMIDLog);

  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, attributeSet, ListP_QueryResults) ;
  if( (FAILED(hr)) || (0 &gt;= ListP_QueryResults.Size() ) ) { retCode = 4; goto EscapeWay; }

  if(1 &lt;= ListP_QueryResults.Size())
  {
    pQueryResult = ListP_QueryResults[1] ;
    if(NULL != pQueryResult)
    {
      hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
    }
  }
  if( NULL == pIPLMIdent ) { retCode = 5; goto EscapeWay; }

  hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMNavReference, (void**) &amp;pIPLMNavLogRef);
  if ((FAILED(hr)) || (NULL == pIPLMNavLogRef)) { retCode = 6; goto EscapeWay; }

  myBag.InsertRoot(pIPLMNavLogRef);
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Root Occurrence for the Opened 
Reference Product</h3>
<pre class="code">...
  hRootNavOccurrence = pIPLMProduct;
  //RootOcc changes Start
  if( NULL_var == hRootNavOccurrence )
  {
    hr = pIPLMProduct-&gt;QueryInterface(IID_CATIPLMNavReference, (void**)&amp;pIPLMNavRefOnRoot);
    if(SUCCEEDED(hr))
    {
      hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
      if( SUCCEEDED(hr) &amp;&amp; ( NULL != pIPrdOccurrenceMngt ) )
      {
        hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefOnRoot, hRootNavOccurrence);
      }
    }
  }
  //RootOcc changes End
  if( NULL_var == hRootNavOccurrence ) { retCode = 8; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Navigating the List of Occurrences to Get the Instance and 
Reference of the Piping Part</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt;ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 9; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the part instance and reference of part
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  nCreatePortNo = 1;

  for( index =1; index &lt;= SizeRootList; index++ )
  {
    //Clean-Up
    pIElemNavOccurrence = NULL ;
    if( NULL != pIPipPartRef ){ pIPipPartRef-&gt;Release() ; pIPipPartRef = NULL ; }
    if( NULL != pIPipLogLineInst ){ pIPipLogLineInst-&gt;Release() ; pIPipLogLineInst = NULL ; }

    SizeList = ListPorts.Size();
    for( iListIndex =1; iListIndex &lt;= SizeList; iListIndex++ )
    {
      pIThisPort = ListPorts[iListIndex];
      if( NULL != pIThisPort ){ pIThisPort-&gt;Release() ; pIThisPort = NULL ; }
    }
    ListPorts.RemoveAll();

    //DeletePtr   
    if( NULL != pListRelatedObject)
    {
      SizeList = pListRelatedObject-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkPipPart = (*pListRelatedObject)[iListIndex];
        if( NULL != pIUnkPipPart ){ pIUnkPipPart-&gt;Release() ; pIUnkPipPart = NULL ; }        
      }
      pListRelatedObject-&gt;RemoveAll();
      delete pListRelatedObject;
      pListRelatedObject = NULL;
    }
    //End of Clean-Up

    // Refer database Prd_Root.3dxml
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 10; goto EscapeWay ; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Checking if the Current Occurrence Is a Piping Part 
Instance Object and Getting its Reference Object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Part instance smart pointer.</p>
<pre class="code">... 
  hPipPartInstance = pIElemNavOccurrence ;
  // Checking the selected object is part instance
  if (NULL_var != hPipPartInstance)
  {
    // Get the reference object of part occurence
    hr = hPipPartInstance-&gt;GetReference(pIPipPartRef); 
    if( ( FAILED(hr) ) || ( NULL == pIPipPartRef ) ) { retCode = 11; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Get the Spool of Piping part and then get the mode of the Spool</h3>
<pre class="code">... 
  // Get the spool if any
      if( NULL != pISpoolInstance ){ pISpoolInstance->Release() ; pISpoolInstance = NULL ; }  

      hr = hPipPartInstance->GetSpool( pISpoolInstance );
      if ( FAILED( hr) ){ retCode = 12; goto EscapeWay; }

      if( NULL != pISpoolInstance)
      {
        hr = pISpoolInstance->GetMode(ePipSpoolMode);      
        if( ( FAILED(hr) )) { retCode = 13; goto EscapeWay; }
      }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Get the attributes of Part reference properties</h3>
<p>We use CATIPipAttrAccess interface to get Part properties attributes</p>
<pre class="code">... 
    // Get the  List of Attributes and it&#39;s values of part reference
    hAttrAccess = pIPipPartRef;
    if( NULL_var == hAttrAccess) { retCode = 16; goto EscapeWay; }

    hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
    if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 17; goto EscapeWay; }

    sizeListAttrNames = ListAttrNames.Size();

    cout &lt;&lt; endl &lt;&lt; &quot;Part Properties : &quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

    for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
    {
      if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

      uAttrName = ListAttrNames[iListIndex];
      if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 18; goto EscapeWay; }

      hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
      if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 19; goto EscapeWay; }

      uAttrValue = pIAttrValue-&gt;Show();

      cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
    }
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
    // end of the  List of Attributes and it&#39;s values of part reference
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Get the Logical Line Instance if any availble from part instance</h3>
<pre class="code">...
  hr = hPipPartInstance-&gt;GetLogicalLine(pIPipLogLineInst);
  if( S_FALSE == hr){ cout &lt;&lt; endl &lt;&lt; &quot;Current Piping Part is not in Logical Line&quot;&lt;&lt;endl; }
  else if( ( FAILED(hr) ) || ( NULL == pIPipLogLineInst ) ) { retCode = 14; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Get the related object in term of insulation from part 
instance</h3>
<pre class="code">... 
    hr = hPipPartInstance-&gt;GetRelatedObject (pListRelatedObject);
    if( FAILED(hr) ) { retCode = 30; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Get the Part reference parameters information</h3>
<pre class="code">... 
    //Get the sub type Part of Piping Part
    hr = pIPipPartRef-&gt;GetSubTypePart(uSubTypePart); 
    if( (FAILED(hr)) || (1 &gt; uSubTypePart.GetLengthInChar()) ) { retCode = 20; goto EscapeWay; }

    // Get the List of all the ports of current part
    hr = pIPipPartRef-&gt;ListPorts( ListPorts ) ;
    SizeListPorts = ListPorts.Size();
    if( (FAILED(hr)) || (0 &gt; SizeListPorts) ) { retCode = 29; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Create new piping port on selected Part</h3>
<pre class="code">...
    CATMathPoint origin(10.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;
    CATMathVector alignDir(1.0*nCreatePortNo, 0, 0) ;
    CATMathVector oriDir(0, 0, 1.0*nCreatePortNo) ;
    CATMathPoint offset(100.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;

    CATMathPoint *pMathPtPortOffset = NULL; // Do not release

    CATUnicodeString strCreatePortNo, strMsg;

    strCreatePortNo.BuildFromNum(nCreatePortNo);

    CATUnicodeString str = &quot;CAA_Port.&quot;+ strCreatePortNo;

    geomPortType = CATIPipPipingPortRef::CatPipUndefinedPort;

    hr = pIPipPartRef-&gt;CreatePort(origin, alignDir, oriDir, geomPortType, str, pIPipPipingPortRef, pMathPtPortOffset);
    if(E_INVALIDARG == hr)
    {
      strMsg =strMsg + &quot; =&gt;FAILED to create because \n\t ==&gt;Either Alignment and Orienation vectors are not orthogonal OR the input name for port is already used.&quot;;
    }
    else if(FAILED(hr)) { strMsg = strMsg + &quot; =&gt;FAILED to create&quot;; if(0 != nCreatePortNo){ retCode = 21; goto EscapeWay;} }
    else { strMsg = strMsg +&quot; created successfully&quot;; }

    cout &lt;&lt; endl &lt;&lt; strMsg.ConvertToChar() &lt;&lt;endl;
    nCreatePortNo++;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Set the values of Attributes for new created port</h3>
<p>We use CATIPipAttrAccess interface to set attributes on new created piping port of Part from Part reference</p>
<pre class="code">... 
    hAttrAccess = pIPipPipingPortRef;
    if( NULL_var == hAttrAccess) { retCode = 22; goto EscapeWay; }

    hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
    if( (FAILED(hr)) || (1 > ListAttrNames.Size()) ) { retCode = 23; goto EscapeWay; }

    sizeListAttrNames = ListAttrNames.Size();

    for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
    {
      if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

      uAttrName = ListAttrNames[iListIndex];
      if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 24; goto EscapeWay; }

      hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
      if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 25; goto EscapeWay; }

      if(uAttrName == &quot;V_Standard&quot;)
      {
        pIAttrValue-&gt;Valuate(&quot;ASTL&quot;);
      }
      else if(uAttrName == &quot;V_NominalSize&quot;)
      {
        CATUnicodeString cusNomSize(strCreatePortNo) ;
        cusNomSize = cusNomSize + &quot;in&quot; ;
        pIAttrValue-&gt;Valuate(cusNomSize);
      }
      else if(uAttrName == &quot;V_EndStyle&quot;)
      {
        pIAttrValue-&gt;Valuate(&quot;BUTT WELD&quot;);
      }
      else if(uAttrName == &quot;V_Rating&quot;)
      {
        pIAttrValue-&gt;Valuate(&quot;150#&quot;);
      }
      else if(uAttrName == &quot;V_WallThickness&quot;)
      {
        pIAttrValue-&gt;Valuate(iListIndex/1000.00);
      }
      else if(uAttrName == &quot;V_OutsideDiameter&quot;)
      {
        pIAttrValue-&gt;Valuate(60.325/1000.00);
      }

      hr = hAttrAccess-&gt;SetAttrValue ( uAttrName, pIAttrValue);
      if(FAILED(hr)){ retCode = 26; goto EscapeWay; }
    }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Get the values of attributes of Port</h3>
<p>We use CATIPipAttrAccess interface to get piping port attributes</p>
<pre class="code">... 
        // Get the  List of Attributes and it's values of Piping Port reference
        cout &lt;&lt; endl &lt;&lt; &quot;Port Properties : &quot;;
        cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
        cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

        for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
        {
          if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

          uAttrName = ListAttrNames[iListIndex];
          if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 27; goto EscapeWay; }

          hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
          if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 28; goto EscapeWay; }

          uAttrValue = pIAttrValue-&gt;Show();

          cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
        }      
        cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
        // end of the  List of Attributes and it's values of part reference

...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Get the reference piping information on Port from Piping 
port reference</h3>
<pre class="code">... 
    // Get the CATIPipPipingPortRef interface from ListPorts which is List of ports of selected part

    for( nPortIndex = 1; nPortIndex &lt;= SizeListPorts; nPortIndex++)
    {
      geomPortType = CATIPipPipingPortRef::CatPipUndefinedPort ;

      if( NULL != pMathPtConstraintOriginPt ){ delete pMathPtConstraintOriginPt ; pMathPtConstraintOriginPt = NULL ; }
      if( NULL != pMathVectConstraintAlign ) { delete pMathVectConstraintAlign ; pMathVectConstraintAlign = NULL ; }
      if( NULL != pMathVectConstraintOrient ){ delete pMathVectConstraintOrient ; pMathVectConstraintOrient = NULL ; }

      if( NULL != pICBUOwner ){ pICBUOwner-&gt;Release() ; pICBUOwner = NULL ; } 
      if( NULL != pIOtherPort ){ pIOtherPort-&gt;Release() ; pIOtherPort = NULL ; } 
      if( NULL != pIOtherConnectable ){ pIOtherConnectable-&gt;Release() ; pIOtherConnectable = NULL ; }

      pIThisPort = ListPorts[nPortIndex];
      if( NULL == pIThisPort ) { retCode = 31; goto EscapeWay ; }

      hr = pIThisPort-&gt;GetType(geomPortType) ;
      if( ( FAILED(hr) ) || ( CATIPipPipingPortRef::CatPipUndefinedPort == geomPortType ) ) { retCode = 32; goto EscapeWay; }

      hr = pIThisPort-&gt;GetOwner(pICBUOwner) ;
      if( (FAILED(hr)) || (NULL == pICBUOwner) ) { retCode = 33; goto EscapeWay; }

      hUnkOwnerOfPort = pICBUOwner ;
      if( NULL_var == hUnkOwnerOfPort ) { retCode = 34; goto EscapeWay; }

      if( hUnkPartRef != hUnkOwnerOfPort ) { retCode = 35; goto EscapeWay; }

      hr = pIThisPort-&gt;GetConstraintElements(pMathPtConstraintOriginPt,
                                                pMathVectConstraintAlign,
                                                pMathVectConstraintOrient) ;
      if( ( FAILED(hr) )
         || ( NULL == pMathPtConstraintOriginPt )
         || ( NULL == pMathVectConstraintAlign )
         || ( NULL == pMathVectConstraintOrient )
        )
      {//As this is a Port of a Part, we must get all the three constraint elements !
        retCode = 36;
        goto EscapeWay ;
      }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Get the other connected object (part / pipe) of current 
selected part ports from part instance and then get the Spool and the mode of the Spool</h3>
<p>We assign pIOtherConnectable pointer to new CATIPipPartInstance smart pointer used only for retrieving the Spool</p>
<pre class="code">... 
      // Get the other connected object through the port of selected part.
      hr = hPipPartInstance-&gt;GetConnectedObject(pIOtherConnectable, pIOtherPort ,pIThisPort);
      if( ( SUCCEEDED(hr) ) &amp;&amp; ( NULL != pIOtherPort ) &amp;&amp; ( NULL != pIOtherConnectable ))
      {
        hr = hPipPartInstance-&gt;IsOKToConnect (bStatus, pIThisPort, pIOtherConnectable, pIOtherPort);
        if(FAILED(hr)) {  retCode = 37;    goto EscapeWay; }

        if( CATTrue == bStatus )
        {  retCode = 38;    goto EscapeWay; }

        hr = hPipPartInstance-&gt;Disconnect (pIOtherConnectable);
        if(FAILED(hr)) {  retCode = 39;    goto EscapeWay; }

        hr = hPipPartInstance-&gt;IsOKToConnect (bStatus, pIThisPort, pIOtherConnectable, pIOtherPort);
        if(FAILED(hr)) {  retCode = 40;    goto EscapeWay; }

        if( CATFalse == bStatus )
        {  retCode = 41;    goto EscapeWay; }

        hr = hPipPartInstance-&gt;Connect (pIThisPort, pIOtherConnectable, pIOtherPort);
        if(FAILED(hr)) {  retCode = 42;    goto EscapeWay; }
      }
      // Other connected object is a part under spool.Then we ask for spool containing that part
        hPipPartInstanceUnderSpool = pIOtherConnectable;
        if ( NULL_var != hPipPartInstanceUnderSpool)
        {
          if( NULL != pISpoolInstance ){ pISpoolInstance->Release() ; pISpoolInstance = NULL ; }  

          hr = hPipPartInstanceUnderSpool ->GetSpool( pISpoolInstance );
          if ( FAILED( hr) ){ retCode = 43; goto EscapeWay; }

          if ( NULL != pISpoolInstance)
          {
            hr = pISpoolInstance->GetMode(ePipSpoolMode);      
            if( ( FAILED(hr) )) { retCode = 44; goto EscapeWay; }
          }
      }
    }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database</p>
<pre class="code">...
myBag.RemoveAll(); /* PLM entities life-cycle */

hr = ::CAAAdpCloseSession();
if (FAILED(hr)) 
{
  cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
  retCode = 45;
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the piping 
part.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="history"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
