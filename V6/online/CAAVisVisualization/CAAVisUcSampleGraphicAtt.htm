<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Using Graphic Attributes</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Using Graphic Attributes</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAVisRep use case. This use case explains 
		how to use graphic attributes.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAVisRep Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisRep Do</a></li>
					<li><a href="#How">How to Launch CAAVisRep</a></li>
					<li><a href="#Where">Where to Find the CAAVisRep Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to set graphic attributes to graphic representations, 
how to manage graphic attribute inheritance, and describes some of these attributes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisRep Use Case</h2>
<p>CAAVisRep is a use case of the CAAVisualization.edu framework that illustrates 
Vizualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisRep Do</h3>
<p>CAAVisRep creates two line representations, and two cuboid representations, and 
sets graphic attributes to these representations to display them as shown in Fig. 
1.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: The CAAVisRep Representations</caption>
	<tr>
		<td>
		<img alt="CAAVisRep Representations" height="415" src="images/CAAVisGraphicAtt.jpg" width="465"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAVisRep</h3>
<p>To launch CAAVisRep, you will need to set up the build time environment, then 
compile CAAVisRep along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisRep Code</h3>
<p>The CAAVisRep use case is made of two classes named <em>CAAVisRepApplication</em> 
and <em>CAAVisRepWindow</em> located in the CAAVisRep code is located in the CAAVisRep.m 
use case module of the CAAVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\CAAVisRep.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To manage graphic attributes, there are seven main steps:</p>
<ol>
	<li><a href="#Step1">Creating a 3D Navigation Viewer Instance</a></li>
	<li><a href="#Step2">Creating a 3D Representation Bag</a></li>
	<li><a href="#Step3">Creating a Green Dotted Line with Two Yellow Points at 
		Its Ends</a></li>
	<li><a href="#Step4">Creating a Magenta Solid Line with Two Magenta Points at 
		Its Ends</a></li>
	<li><a href="#Step5">Creating a Red Cube without Top Face and with Faces Lighted 
		on One Side</a></li>
	<li><a href="#Step6">Creating a White Cube with Faces Lighted on Their Two Sides</a></li>
	<li><a href="#Step7">Displaying the Representation in the Viewer</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a 3D Navigation Viewer Instance</h3>
<p>The 3D navigation viewer is an instance of the <em>CATNavigation3DViewer</em> 
class. It is created in the <code>CreateViewer</code> method of the <em>CAAVisBaseView</em> 
class that is called when the application is launched.</p>
<pre class="code">
void CAAVisRepWindow::CreateViewer()
{
  _p3DViewer = new CATNavigation3DViewer(this,
                                         &quot;Navigation3DId&quot;,
                                         CATDlgFraNoTitle,
                                         800, 450);
  _p3DViewer-&gt;SetBackgroundColor(0.2f,0.2f,0.6f);
  Attach4Sides( _p3DViewer);
}</pre>
<p>The <code>_pViewer</code> pointer to the 3D navigation viewer is kept as a data 
member of the <em>CAAVisBaseView</em> class. Its parameter are:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<td><code>this</code></td>
		<td>The viewer parent in the dialog containment tree structure and in the 
		command tree structure [a]</td>
	</tr>
	<tr>
		<td><code>Navigation3DId</code></td>
		<td>The viewer identifier</td>
	</tr>
	<tr>
		<td><code>CATDlgFraNoTitle</code></td>
		<td>The viewer has no title [b]</td>
	</tr>
	<tr>
		<td><code>850, 450</code></td>
		<td>The viewer width and height expressed in pixels</td>
	</tr>
</table>
<p>The <code>SetBackgroundColor</code> method changes the viewer background color. 
The <code>Attach4Sides</code> method attaches the four sides of the viewer to those 
of the window. This makes the viewer occupy the whole window space.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a 3D Representation Bag</h3>
<pre class="code">
void CAAVisRepWindow::CreateModelRepresentation()
{
  _pTheModelToDisplay = new CAT3DBagRep() ;
...</pre>
<p>This is done at the beginning of the <code>CreateModelRepresentation</code> method 
of <em>CAAVisRepWindow</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Green Dotted Line with Two Yellow Points at Its 
Ends</h3>
<pre class="code">
...
  CAT3DCustomRep * pLineOnXAxis = NULL ;

  CATMathPoint PositionXPoint1(20.f,0.f,0.f ) ;
  CATMathPoint PositionXPoint2(200.f,0.f,0.f ) ;

  int NONE = 0 ;
  pLineOnXAxis = CreateLineEndedByTwoPoints(PositionXPoint1,PositionXPoint2,NONE);

  if ( NULL != pLineOnXAxis )
  {
    _pTheModelToDisplay-&gt;<strong>AddChild</strong>(*pLineOnXAxis);
  }
...</pre>
<p>The first line is carried by the X axis. It begins at the abscissa 20 and ends 
at the abscissa 200. The <code>CreateLineEndedByTwoPoints</code> method of <em>CAAVisRepWindow</em> 
creates the line and sets its graphic attributes. If the custom representation is 
successfully created, it is added to the representation bag. <code>CreateLineEndedByTwoPoints</code> 
is as follows:</p>
<pre class="code">
CAT3DCustomRep * CAAVisRepWindow::CreateLineEndedByTwoPoints(const CATMathPoint &amp;iStartPoint,
                                                             const CATMathPoint &amp;iEndPoint,
                                                             int                 iEdgeType)
{
  CAT3DCustomRep * pTheRepToReturn = NULL;
  pTheRepToReturn = new <strong>CAT3DCustomRep</strong>();

  // Creates a green dotted line
  float coord[6] ;
  coord[0] = (float) iStartPoint.GetX();	  	  
  coord[1] = (float) iStartPoint.GetY();
  coord[2] = (float) iStartPoint.GetZ();
  coord[3] = (float) iEndPoint.GetX();	  	  
  coord[4] = (float) iEndPoint.GetY();
  coord[5] = (float) iEndPoint.GetZ();

  CAT3DLineGP * pLineGP = new <strong>CAT3DLineGP</strong>(coord, 2);
  <strong>CATGraphicAttributeSet</strong> LineGA;
  LineGA.<strong>SetColor</strong>(GREEN); 
  LineGA.<strong>SetThickness</strong>(4);  // Thickness ranges from 1 to 16
  LineGA.<strong>SetLineType</strong>(2);   // Line type ranges from 1 to
  LineGA.<strong>SetType</strong>(iEdgeType); 

  pTheRepToReturn-&gt;<strong>AddGP</strong>(pLineGP,LineGA);

  // Creates two yellow points  
  CAT3DMarkerGP * pPointGP = new <strong>CAT3DMarkerGP</strong>(coord, 2, CROSS);
  <strong>CATGraphicAttributeSet</strong> PointGA;
  PointGA.<strong>SetColor</strong>(YELLOW);

  pTheRepToReturn-&gt;<strong>AddGP</strong>(pPointGP,PointGA);

  // Computes the BoundingSphere and sets it to the representation 
  CATMathPoint Center =  iStartPoint + ((iEndPoint-iStartPoint) / 2.f);
  float Radius = (float) iStartPoint.DistanceTo(Center);
  <strong>CAT3DBoundingSphere</strong> BoundingSphere(Center,Radius);
  pTheRepToReturn-&gt;<strong>SetBoundingElement</strong>(BoundingSphere) ;

  return (pTheRepToReturn);
}</pre>
<p>The line and points are created as graphic primitives (GPs) added to a <em>CAT3DCustomRep</em> 
with their respective graphic attributes using the <code>AddGP</code> method. The 
line GP is a <em>CAT3DLineGP</em> instance created using the points passed as parameters. 
Its attribute set is an instance of the <em>CATGraphicAttributeSet</em> class to 
which the following attribute values are set:</p>
<ul>
	<li><code>SetColor</code> sets its color to green.</li>
	<li><code>SetThickness</code> sets the line thickness to 4. The thickness ranges 
		from 1 to 16, 1 being the thinnest and 16 the thickest.</li>
	<li><code>SetLineType</code> sets the line type to 2. The line type ranges from 
		1 to 63. 2 means dotted.</li>
	<li><code>SetType</code> sets its graphic type to 0. This means that the line 
		is always seen, even if other representations are displayed in front of 
		it.</li>
</ul>
<p>The two points are created using a single instance of the <em>CAT3DMarkerGP</em> 
class, and their color is set as yellow. Then, the bounding element associated with 
the custom representation is computed as a <em>CAT3DBoundingSphere</em> instance, 
and set to the custom representation using the <code>SetBoundingElement</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating a Magenta Solid Line with Two Magenta Points at 
Its Ends</h3>
<p>The second line and its endpoints are also created using the <code>CreateLineEndedByTwoPoints</code> 
method, but uses the graphic attribute inheritance to get the attributes set to 
the GPs, and reset other graphic attributes.</p>
<pre class="code">
...
  CAT3DCustomRep * pLineOnYAxis = NULL ;

  CATMathPoint PositionYPoint1(0.f,20.f,0.f );
  CATMathPoint PositionYPoint2(0.f,200.f,0.f ) ;

  int EDGE = 1 ;
  pLineOnYAxis = CreateLineEndedByTwoPoints(PositionYPoint1,PositionYPoint2,EDGE);

  if ( NULL != pLineOnYAxis )
  {
    pLineOnYAxis-&gt;<strong>SetInheritanceMode</strong>(LINEWIDTH_INHERITANCE | COLOR_INHERITANCE);
    pLineOnYAxis-&gt;<strong>SetThickness</strong>(1);
    pLineOnYAxis-&gt;<strong>SetColor</strong>(MAGENTA);

    _pTheModelToDisplay-&gt;<strong>AddChild</strong>(*pLineOnYAxis);
   }
...</pre>
<p>The second line is carried by the Y axis. Once the custom representation is created, 
its graphic attributes are those of the GPs, that is, the line color is green, its 
thikness is set to 2, its line type is dotted, its type set to 1 makes it hidden 
by representations in front of it, and the endpoints are yellow, but keep the default 
type set to 0. The graphic attribute set associated with the custom representation 
is now used to reset some of the GP graphic attributes. The <code>SetInheritanceMode</code> 
method enables the GPs that make up the custom representation to inherit graphic 
attribute values set to the representation itself, namely the line thickness (<code>LINEWIDTH_INHERITANCE</code> 
) and the color (<code>COLOR_INHERITANCE</code>). The line thickness is reset to 
1, that is to solid, and the color is reset to magenta. These graphic attribute 
values are reset for all the GPs: the line GP and the marker GP are both magenta. 
(The line thickness makes no sense for markers.) If the custom representation is 
successfully created, it is added to the representation bag.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a Red Cube without Top Face and with Faces Lighted 
on One Side</h3>
<pre class="code">
...
  CAT3DCustomRep * pRedCube = NULL ;
  CATMathPoint RedCubePosition(50.f,50.f,0.f);
  int VOLUME = 3 ;
  pRedCube = CreateOpenCube(RedCubePosition,VOLUME);

  if ( NULL != pRedCube )
  {
    pRedCube-&gt;<strong>SetInheritanceMode</strong>(COLOR_INHERITANCE);
    pRedCube-&gt;<strong>SetColor</strong>(RED);

    _pTheModelToDisplay-&gt;<strong>AddChild</strong>(*pRedCube);
  }
...</pre>
<p>The first cube has its corner located at <code>RedCubePoint</code>. The <code>
CreateOpenCube</code> method of <em>CAAVisRepWindow</em> creates the cube and sets 
its graphic attributes. If the custom representation is successfully created, it 
is added to the representation bag. <code>CreateOpenCube</code> is as follows:</p>
<pre class="code">
CAT3DCustomRep * CAAVisRepWindow::CreateOpenCube(const CATMathPoint &amp;iStartPoint,
                                                 int iTypeFace)
{
  CAT3DCustomRep * pTheRepToReturn = NULL ;
  ... // Creates Point1 to Point8 from iStartPoint
  // Creates a cube with 6 faces
  pTheRepToReturn = new CAT3DCustomRep();
  CAT3DPlanarFaceGP * pPlanGP = NULL ; 

    // Top face is not shown 
  <strong>CATGraphicAttributeSet</strong> FaceNoShowGA;
  FaceNoShowGA.<strong>SetShowMode</strong>(1);
  pPlanGP = CreateFaceGP(Point5,Point6,Point8,Point7);
  pTheRepToReturn-&gt;<strong>AddGP</strong>(pPlanGP,<strong>FaceNoShowGA</strong>);

    // Bottom face 
    // -----------
  <strong>CATGraphicAttributeSet</strong> FaceShowGA;
  FaceShowGA.<strong>SetType</strong>(iTypeFace);
  pPlanGP = CreateFaceGP(Point4,Point3,Point1,Point2);                                     
  pTheRepToReturn-&gt;AddGP(pPlanGP,<strong>FaceShowGA</strong>);

  ... // and so on for the other faces

  ... // Computes and sets the bounding element

  return pTheRepToReturn;
}</pre>
<p>As with the lines and points, the cube is created as a <em>CAT3DCustomRep</em> 
instance. It is made up of eight instances of <em>CAT3DPlanarFaceGP</em> created 
using the <code>CreateFaceGP</code> method of <em>CAAVisRepWindow</em> that are 
associated with a graphic attribute set when added to the custom representation. 
The top face is set as invisible using the <code>SetShowMode</code> method to which 
1 is passed. (0 is the default and means shown.) The other faces share the same 
graphic attribute set and are considered as part of a volume, since 3 is passed 
to <code>SetType</code>. Each of these faces is displayed only if it is seen from 
the outside of the cube.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a White Cube with Faces Lighted on Their Two Sides</h3>
<pre class="code">
...
  CATMathPoint WhiteCubePosition(50.f,150.f,0.f );
  CAT3DCustomRep * pWhiteCube = NULL ;

  int SKIN = 2 ;
  pWhiteCube = CreateOpenCube(WhiteCubePosition,SKIN);
   
  if ( NULL != pWhiteCube )
  {
    _pTheModelToDisplay-&gt;AddChild(*pWhiteCube);
  }
}</pre>
<p>The second cube is created with the default color, that is, white, and with its 
type set to 2, that is the faces are lighted on both sides.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Displaying the Representation in the Viewer</h3>
<p>The <code>AddRepToViewer</code> method displays the created representation.</p>
<pre class="code">
void CAAVisRepWindow::VisualizeModel()
{
  if ( (NULL != _p3DViewer) &amp;&amp; ( NULL != _pTheModelToDisplay) )
  {    
    _p3DViewer-&gt;<strong>AddRep</strong>((CAT3DRep*)_pTheModelToDisplay);
    _p3DViewer-&gt;<strong>Draw</strong>();
  }
}</pre>
<p>The 3D representation bag created to contain all the created representations 
is added to the 3D navigation viewer using the <code>AddRep</code> method, and the 
viewer is drawn using the <code>Draw</code> method. <code>AddRep</code> is called 
one for all, but <code>Draw</code> must be called whenever the representation bag 
is modified.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to create and manage graphic attribute on graphic representation. 
It also has shown how to make graphic representations inherit from the graphic attributes 
set to the custom representation that holds them.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
