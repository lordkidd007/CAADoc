<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Levels of Details</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Levels of Details</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create levels of details.</p>
		<ul>
			<li><a href="#Learn">What Will You Learn in this Use Case</a></li>
			<li><a href="#UseCase">The CAAVisBasics Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisBasics Do</a></li>
					<li><a href="#How">How to Launch CAAVisBasics</a></li>
					<li><a href="#Where">Where to Find the CAAVisBasics Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to create levels of details, that is several 
representations of the same object that are each displayed in turn with respect 
to the modifications brought to the viewpoint and display characteristics.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisBasics Use Case</h2>
<p>CAAVisBasics is a set of use cases of the CAAVisualization.edu framework that 
illustrates CATIA Vizualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisBasics Do</h3>
<p>CAAVisBasics includes a MDI interactive application that displays viewers in 
its model windows. One of these viewers is displayed when the application is launched 
and contains the representation of a torus. This article focuses on how to create 
levels of details for this torus, that is several tessellations, each corresponding 
to a given sag value, in order to the render to select the most appropriate one 
depending on the viewpoint characteristics and on the object size.</p>
<p>The torus is displayed in a 3D navigation viewer as soon as the application is 
launched. It is displayed brighter blue with a representation that is computed with 
a sag of 1/8. When zooming in, the viewpoint characteristics change, and three other 
representations are successively displayed: a green one with a sag of 1/6, a blue 
one with a sag of 1/4, and a red one with a sag of 1/2.</p>
<p>
<img alt="Torus with Sag 1/8" height="463" src="images/CAAVisTorusLOD1.jpg" width="485"/></p>
<p>
<img alt="Torus with Sag 1/6" height="463" src="images/CAAVisTorusLOD2.jpg" width="485"/></p>
<p>
<img alt="Torus with Sag 1/4" height="463" src="images/CAAVisTorusLOD3.jpg" width="485"/></p>
<p>
<img alt="Torus with Sag 1/2" height="463" src="images/CAAVisTorusLOD4.jpg" width="485"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAVisBasics</h3>
<p>To launch CAAVisBasics, you will need to set up the build time environment, then 
compile CAAVisBasics along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The torus is displayed in a 3D navigation viewer as soon as the application is 
launched. Zoom in and out to show the different levels of details and their associated 
colors.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisBasics Code?</h3>
<p>The CAAVisBasics use case is made of several classes located in the CAAVisBasics.m 
module of the CAAVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\CAAVisBasics.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This use case deals with the following classes:</p>
<table>
	<tr>
		<td><em>CAAVisBaseApplication</em></td>
		<td>Class for the interactive application that hosts the viewer</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseDocument</em></td>
		<td>Class for the model base class</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseDefaultDocument</em></td>
		<td>Class for the model that creates a representation and four level of 
		details for a torus model</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseView</em></td>
		<td>Class for the model window containing a viewer to display the model</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create levels of details, there are three main steps:</p>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create a <em>CAT3DLodRep</em></a></td>
		<td><code>CreateModel</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Loop for each sag value onto the <em>CAT3DFaceGP</em> 
		creation</a></td>
		<td><code>CreateModel</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the bounding sphere for each level of details</a></td>
		<td><code>AddLOD</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
</table>
<p>The torus is displayed when the CAAVisBase application is launched. The torus 
levels of details creation and display is performed in the <em>CAAVisBaseDefaultDocument</em> 
constructor that creates a <em>CAT3DLodRep</em> instance and that loops on calling 
the <code>CreateRep</code> method that creates a <em>CAT3DFaceGP</em> instance with 
the passed sag, and that adds it to the <em>CAT3DLodRep</em> instance. The representation 
is displayed thanks to calling the <code>AddRepToViewer</code> method. Only the 
constructor and the part of <code>CreateRep</code> that deals with the <em>CAT3DLodRep</em> 
management are described below. The remaining parts, namely the torus tessellation 
and the creation of <em>CAT3DLodRep</em> instance are already dealt with in [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a CAT3DLodRep</h3>
<p>The <em>CAAVisBaseDefaultDocument</em> constructor creates the representation 
bag to attach to the viewer, creates a <em>CAT3DLodRep</em> instance for the torus, 
calls <code>CreateRep</code> as many time as there are sag values to the corresponding 
torus representations, adds the resulting 3D Lod representation to the representation 
bag, and calls <code>AddRepToViewer</code> for display.</p>
<pre class="code">void CAAVisBaseDefaultDocument::CreateModel()
{
  _pRootContainer  = new CAT3DBagRep;
  _pTorusLodRep = new CAT3DLodRep();
  float sag = 0.125f;
  ... // Loop on the torus tessellation
  //Adding of the CAT3DLodRep to the CAT3DBagRep
  _pRootContainer-&gt;AddChild(*_pTorusLodRep);

  AddRepToViewer();
}</pre>
<p>This 3D representation to accommodate the different tessellations of the torus 
is a <em>CAT3DLodRep</em> instance. This representation is dedicated to contain 
several representations of the same object, each being associated with the sag value 
used to create it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Looping for Each Sag Value onto the CAT3DFaceGP Creation</h3>
<pre class="code">...
  int color[3] = {255, 255, 255}; //White color

  int colors[] = {200, 200, 255, //bright blue
                  200, 0,   0,   //red
                  0,   0,   255, //blue
                  0,   200, 0};  //green
  for(int i=NLOD; i&gt;0; i--)
  {
    sag = float(MAX_SAG)/(float)(2*i);
    color[0] = colors[3*(i%NLOD)];
    color[1] = colors[3*(i%NLOD)+1];
    color[2] = colors[3*(i%NLOD)+2];
    AddLOD(sag, color);
  }
...  </pre>
<p>The sag values are computed and passed to the <code>AddLOD</code> method as well 
as the associated color.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Adding the CAT3DCustomRep to the CAT3DLodRep</h3>
<p>The <code>AddLOD</code> method is the same as the one explained in [<a href="#References">2</a>], 
except that it has the sag as argument, and computes the theta and phi angles from 
the sag value. It also update the 3D Lod representation with the created 3D custom 
representation.</p>
<pre class="code">void CAAVisBaseDefaultDocument::AddLOD(float sag, int *iColor)
{
  int R = TORUS_RADIUS;
  int r = CIRCLE_RADIUS;

  float theta = sqrt(sag/r);
  float phi   = sqrt(sag/R);

  int nVertexPerCircle = floor(2*PI/theta)+1;
  int nCircles         = floor(2*PI/phi)+1;

  theta = 2*PI/nVertexPerCircle;
  phi   = 2*PI/nCircles;

  ... // Refer to [<a href="#References">2</a>] for the 3D graphic primitive and 3D custom representation creation

  _pTorusLodRep-&gt;AddLod(_pTorusCustomRep, sag); 
}</pre>
<p>The angles theta and phi are computed using the sag value and the rotating circle 
radius and the torus radius respectively. <strong>sag/R to be explained</strong>. 
The number of vertices per circle and the number of circles are deduced from the 
angle values. Then, these angle values are adjusted to partition the circles. The 
3D graphic primitive and the 3D custom representation are created as described in 
[<a href="#References">2</a>]. <code>_pTorusCustomRep</code> is the pointer to the 
3D custom representation. It is added to the 3D Lod representation along with the 
associated sag value.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved when creating several representations 
for a given object and to bind them in a 3D Lod representation. This enables the 
object to provide representations that match the different accuracies required when 
the viewpoint and display characteristics change.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVisUcSampleCAT3DFaceGP.htm">Tessellating and Displaying 
		a Torus</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Oct 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
