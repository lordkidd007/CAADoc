<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Making a Component Displayable With CATI3DGeoVisu</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Making a Component Displayable With CATI3DGeoVisu</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAVisGeoModel use case. This use case explains 
		how geometric components can provide a representation to be displayed in 
		a viewer.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAVisGeoModel Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisGeoModel Do</a></li>
					<li><a href="#How">How to Launch CAAVisGeoModel</a></li>
					<li><a href="#Where">Where to Find the CAAVisGeoModel Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show how to implement the <em>CATI3DGeoVisu</em> 
interface to make a geometric component displayable in a 3D viewer, and how to implement 
the <em>CATIModelEvents</em> interface to refresh the representation according to 
model updates.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisGeoModel Use Case</h2>
<p>CAAVisGeoModel is a set of use cases of the CAAVisualization.edu framework that 
illustrates Vizualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisGeoModel Do</h3>
<p>CAAVisGeoModel contains a series of C++ classes, each of them being an extension 
of a component representing a geometric component, such as a point, a line, a circle, 
or an ellipse. Each extension implements the <em>CATI3DGeoVisu</em> interface to 
make the corresponding component displayable in a 3D viewer. This article focuses 
on the way the circle component implements <em>CATI3DGeoVisu</em>. In addition, 
a single extension class implements the <em>CATIModelEvents</em> interface for all 
the geometric components. It is also described.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAVisGeoModel</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
the &quot;<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">The 
CAAGeometry Sample</a>&quot; use case for a detailed description of how this use 
case should be launched. For the specific scenario:</p>
<p>Launch 3DEXPERIENCE. When the application is ready, follow scenarios described below:</p>
<ul>
    <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>&quot;CAA: Create Geom&quot;</strong> app. </li>
    <li>Launch the <strong>Point</strong> command in <strong>&quot;CAA Geometry Creation Section&quot;</strong> 
    of the action bar.</li>
	<li>Create three points.</li>
	<li>Launch the <strong>Plane</strong> command available in the same section.</li>
	<li>Select the three points.</li>
	<li>Launch the <strong>Circle</strong> command available in the same section.</li>
	<li>Select the plane, select or indicate the center point, move the mouse to obtain the wanted radius and click to end.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisGeoModel Code</h3>
<p>CAAVisGeoModel code is located in the CAAVisGeoModel.m use case module of the 
CAAVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\CAAVisGeoModel.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAAVisGeoModel includes the following files for the circle component:</p>
<table>
	<tr>
		<th>LocalInterfaces Folder</th>
	</tr>
	<tr>
		<td>CAAEVisVisuCircle.h</td>
		<td>Header file for the circle component extension class that implements
		<em>CATI3DGeoVisu</em></td>
	</tr>
	<tr>
		<td>CAAEVisModelEvents.h</td>
		<td>Header file for the common component extension class that implements
		<em>CATIModelEvents</em></td>
	</tr>
	<tr>
		<th>src Folder</th>
	</tr>
	<tr>
		<td>CAAEVisVisuCircle.cpp</td>
		<td>Source file for the circle component extension class that implements
		<em>CATI3DGeoVisu</em></td>
	</tr>
	<tr>
		<td>CAAEVisModelEvents.cpp</td>
		<td>Source file for the common component extension class that implements
		<em>CATIModelEvents</em></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To implement <em>CATI3DGeoVisu</em> and <em>CATIModelEvents</em>, there are four 
main steps:</p>
<ol>
	<li><a href="#Step1">Creating the Header File of CAAEVisVisuCircle</a></li>
	<li><a href="#Step2">Creating the Source File of CAAEVisVisuCircle</a></li>
	<li><a href="#Step3">Implementing the BuildRep Method of CATI3DGeoVisu</a></li>
	<li><a href="#Step4">Implementing the CATIModelEvents Interface</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Header File of CAAEVisVisuCircle</h3>
<p>The <em>CAAEVisVisuCircle</em> header file is as follows.</p>
<pre class="code">#include &quot;CATExtIVisu.h&quot;

class CAAEVisVisuCircle : public <strong>CATExtIVisu</strong>
{
  <strong>CATDeclareClass</strong>;
  public:
    CAAEVisVisuCircle();
    virtual ~CAAEVisVisuCircle();
    <strong>virtual  CATRep * BuildRep();</strong>
  private :
  CAAEVisVisuCircle(const CAAEVisVisuCircle &amp;iObjectToCopy);
};</pre>
<p><em>CAAEVisVisuCircle</em> derives from the CATExtIVisu adapter that provides 
code for the <em>CATI3DGeoVisu</em> interface methods. As any class that makes up 
a component, its header file includes the <code>CATDeclareClass</code> macro. The
<code>BuildRep</code> method is the only one to redefine. Note that the copy constructor 
is declared as private, and is not implemented. This prevents the compiler from 
creating a public one without you know. This is to prevent clients from creating 
instances from an existing one, that they normally should not handle, except using 
interface pointers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Source File of CAAEVisVisuCircle</h3>
<p>The <em>CAAEVisVisuCircle</em> source file is as follows.</p>
<pre class="code">#include &quot;CAAEVisVisuCircle.h&quot;
#include &quot;CAAISysCircle.h&quot;

#include &quot;CAT3DCustomRep.h&quot;
#include &quot;CAT3DArcCircleGP.h&quot;

#include &quot;TIE_CATI3DGeoVisu.h&quot;
<strong>TIE_CATI3DGeoVisu(CAAEVisVisuCircle);</strong>

<strong>CATImplementClass</strong>(CAAEVisVisuCircle, <strong>DataExtension</strong>, CATBaseUnknown, <strong>CAASysCircle</strong>);

CAAEVisVisuCircle::CAAEVisVisuCircle() {}

CAAEVisVisuCircle::~CAAEVisVisuCircle() {}

<strong>CATRep *</strong> CAAEVisVisuCircle::<strong>BuildRep</strong>()
{
  ...
} </pre>
<p>The main points of this source file are:</p>
<ul>
	<li><em>CAAEVisVisuCircle</em> implements the <em>CATI3DGeoVisu</em> interface: 
		this is expressed thanks to the <code>TIE_CATI3DGeoVisu</code> macro</li>
	<li><em>CAAEVisVisuCircle</em> implements the <em>CATI3DGeoVisu</em> interface 
		for the <em>CAASysCircle</em> component as a data extension. This is expressed 
		using the <code>CATImplementClass</code> macro</li>
	<li>The BuildRep method is the only redefined method of <em>CATI3DGeoVisu</em>. 
		It should return a pointer to the circle representation, that is, a pointer 
		to a <em>CAT3DRep</em></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Implementing the BuildRep Method of CATI3DGeoVisu</h3>
<p>There are two possibilities for creating the representation of a circle, that 
is, using the <em>CAT3DArcCircleRep</em> class, or using a custom representation. 
This latter is detailed here.</p>
<ol>
	<li>Declaring the representation to return
		<pre class="code">CATRep * CAAEVisVisuCircle::<strong>BuildRep</strong>()
{
  <strong>CAT3DCustomRep</strong> *pCircleRep = NULL;
  ...</pre>
		<p>The <em>CAT3DCustomRep</em> class can accommodate any kind of representation(s).</p>
	</li>
	<li>Retrieving the circle parameters
		<pre class="code">  ...
  CAAISysCircle * piSysCircle = NULL;                
  HRESULT rc = <strong>QueryInterface</strong>(IID_CAAISysCircle, (void**)&amp;piSysCircle);
  if (SUCCEEDED(rc))
  {
    CATMathPoint center;
    float radius;
    CATMathVector normal, axis;

    piSysCircle-&gt;GetCenter(center);
    piSysCircle-&gt;GetRadius(radius);
    piSysCircle-&gt;GetPlane(normal, axis);

    piSysCircle-&gt;<strong>Release</strong>();
    ...</pre>
		<table>
			<tr>
				<td>
				<img alt="Circle" height="401" src="images/CAAVisCircle.gif" width="485"/></td>
				<td>The circle component implements the <em>CAAISysCircle</em> interface 
				[<a href="#References">2</a>]. This is a type interface that enables 
				to set and retrieve the parameters that make this component a circle: 
				its center and radius, and the normal and axis vectors of the plane 
				in which it lies. Once the pointer to <em>CAAISysCircle</em> is 
				not any longer needed, it is released.</td>
			</tr>
		</table>
	</li>
	<li>Creating the graphic primitive for the circle
		<pre class="code">    ...
    CAT3DArcCircleGP * pCircleGp = new <strong>CAT3DArcCircleGP</strong>(center, normal, radius, axis);
    ... </pre>
		<p>The circle graphic primitive is an instance of <em>CAT3DArcCircleGP</em>. 
		Its constructor needs the four parameters retrieved from the circle component.</p>
	</li>
	<li>Creating and filling in the representation
		<pre class="code">    ...
    pCircleRep = new <strong>CAT3DCustomRep</strong>();
    <strong>CATGraphicAttributeSet</strong> circleGa;
    pCircleRep-&gt;<strong>AddGP</strong>(pCircleGp,circleGa);
    ... </pre>
		<p>The circle representation is created as a <em>CAT3DCustomRep</em> instance. 
		Is is filled in thanks to the <code>AddRep</code> method with the graphical 
		primitive and a set of graphic attributes featuring their default values.</p>
	</li>
	<li>Creating the circle bounding element and assigning it to the representation
		<pre class="code">    ...
    <strong>CAT3DBoundingSphere</strong> circleBe(center,radius);
    pCircleRep-&gt;<strong>SetBoundingElement</strong>(circleBe);
    ...</pre>
		<p>In order to increase display performance, any representation should have 
		a bounding element that is first asked to determine whether the associated 
		representation should be displayed in the current view port. This bounding 
		element is chosen as a <em>CAT3DBoundingSphere</em> instance defined using 
		the circle center and radius. The <code>SetBoundingElement</code> method 
		assigns it to the circle representation.</p>
	</li>
	<li>Returning the created representation
		<pre class="code">    ... 
  }
  return pCircleRep;
} </pre>
		<p>The circle is now ready for display.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Implementing the CATIModelEvents Interface</h3>
<p><em>CAAVisModelEvents</em> implements the <em>CATIModelEvents</em> interface 
by deriving from the <em>CATExtIModelEvents</em> adapter.</p>
<ol>
	<li>Creating the header file.
		<pre class="code">#include &quot;CATExtIModelEvents.h&quot;

class CAAEVisModelEvents : public <strong>CATExtIModelEvents</strong>
{
  <strong>CATDeclareClass</strong>;
  public :
    CAAEVisModelEvents();
    virtual ~CAAEVisModelEvents();
  private :
  CAAEVisModelEvents(const CAAEVisModelEvents &amp;iObjectToCopy);
};</pre>
		<p>As any class that makes up a component [<a href="#References">3</a>], 
		its header file includes the <code>CATDeclareClass</code> macro. None of 
		the <em>CATIModelEvents</em> methods needs to be redefined. Note that the 
		copy constructor is declared as private, and is not implemented. This prevents 
		the compiler from creating a public one without you know. This is to prevent 
		clients from creating instances from an existing one, that they normally 
		should not handle, except using interface pointers.</p>
	</li>
	<li>Creating the source file.
		<pre class="code">#include &quot;CAAEVisModelEvents.h&quot;

#include &quot;TIE_CATIModelEvents.h&quot;
<strong>TIE_CATIModelEvents</strong>(CAAEVisModelEvents);

<strong>CATBeginImplementClass</strong>(CAAEVisModelEvents, DataExtension, CATBaseUnknown, CAASysPoint);
CATAddClassExtension(CAASysSampRootObj);
CATAddClassExtension(CAASysGeomRootObj);
CATAddClassExtension(CAASysLine);
CATAddClassExtension(CAASysEllipse);
CATAddClassExtension(CAASysPlane);
<strong>CATAddClassExtension</strong>(CAASysCircle);
CATAddClassExtension(CAASysPolyline);
<strong>CATEndImplementClass</strong>(CAAEVisModelEvents); 

CAAEVisModelEvents::CAAEVisModelEvents() {}

CAAEVisModelEvents::~CAAEVisModelEvents() {}</pre>
		<p>The main points of this source file are:</p>
		<ul>
			<li><em>CAAEVisModelEvents</em> implements the <em>CATIModelEvents</em> 
				interface: this is expressed thanks to the <code>TIE_CATIModelEvents</code> 
				macro</li>
			<li><em>CAAEVisModelEvents</em> implements the <em>CATIModelEvents</em> 
				interface for several components, among which the <em>CAASysCircle</em> 
				component, as a data extension. Compared to the declaration of a 
				single component extension using <code>CATImplementClass</code>, 
				this is expressed using three macros:
				<ul>
					<li><code>CATBeginImplementClass</code>, that has the same signature 
						than <code>CATImplementClass</code>, and that namely declares 
						that <em>CAAEVisModelEvents</em> is a data extension of 
						the <em>CAASysPoint</em> component, and that OM-derives 
						from <em>CATBaseUnknown</em></li>
					<li><code>CATAddClassExtension</code> to declare each additional 
						extended component, such as <em>CAASysCircle</em></li>
					<li><code>CATEndImplementClass</code> to close the extended 
						component declaration</li>
				</ul>
			</li>
			<li>Since none of the <em>CAAIModelEvents</em> methods needs to be redefined, 
				the default constructor and the destructor are enough.</li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to implement the <em>CATI3DGeoVisu</em> interface to 
display a geometric component in a 3D viewer. <em>CATI3DGeoVisu</em> is implemented 
in an extension class of the geometric component by deriving the extension from 
the <em>CATExtI3DVisu</em> adapter, and redefining the <code>BuildRep</code> method.
<code>BuildRep</code> creates and returns the 3D representation that stands for 
the geometric component in the visualization world using the component geometric 
parameters.</p>
<p>To enable the representation of the geometric component to be refreshed when 
the component is modified, the component should implement the <em>CATIModelEvents</em> 
interface. This is done also using an extension, but can be done for a component 
family in a single extension for the whole family. Usually, deriving from the
<em>CATExtIModelEvents</em> adapter is enough, and no method needs to be redefined.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysUcOMCreatingInt.htm">
		Creating Interfaces</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAASysObjectModeler/CAASysUcOMCreatingCmp.htm">
		Creating Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
