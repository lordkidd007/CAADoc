<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Visualizing Temporary Components</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Visualizing Temporary Components</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>A temporary component is a component which is not integrated into the 
		data model of a model. In most cases it is a simple component to help the 
		understanding of an interactive command. The CAAVisTemporaryObjects use 
		case [<a href="#References">1</a> ] has explained how to create temporary 
		components, the current one details how to use the interactive Set of Objects 
		to visualize them.</p>
		<p>To take full advantage of this article, you can first read the technical 
		article about the Interactive Set of Objects and the temporary components 
		[<a href="#References">2</a>].</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADegClippingByBoxCmd Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADegClippingByBoxCmd Do</a></li>
					<li><a href="#How">How to Launch CAADegClippingByBoxCmd</a></li>
					<li><a href="#Where">Where to Find the CAADegClippingByBoxCmd 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The main goal of this article is to show how to use the <strong>I</strong>nteractive
<strong>S</strong>et of <strong>O</strong>bjects. The ISO enables you to visualize 
the temporary components, those not included in a model. These components must implement 
either CATI2DGeoVisu or CATI3DGeoVisu.</p>
<p>The ISO is a <em>CATISO</em> class instance which is associated with the editor 
(<em>CATFrmEditor</em>) of each model. There are three kinds of ISO: normal, furtive 
(XOR drawing) and background. The first two are used in this use case.</p>
<p>Naturally, you will learn how to use the methods of the <em>CATISO</em> class 
to display or erase a component, but this article goes beyond to explain the life 
cycle of the graphic representation associated with the components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADegClippingByBoxCmd Use Case</h2>
<p>CAADegClippingByBoxCmd is a use case of the CAADialogEngine.edu and CAAVisualization.edu 
frameworks that illustrates DialogEngine, ApplicationFrame, and Visualization frameworks 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADegClippingByBoxCmd Do</h3>
<p>The CAADegClippingByBoxCmd use case is a state command [<a href="#References">3</a>] 
which displays temporary components to enhance the user interface. This command 
is a state command to remove all the points of the model outside a given box. This 
clipping box is defined by the end user: first, he/she defines its location by selecting 
an existing point. Then, from the selected point a first wire box is displayed, 
and he/she can drag the mouse to increase or decrease the size of the box.</p>
<p>The state command creates three kinds of components: a text (left picture on
<a href="#Fig.1">Fig.1</a>), a trihedral (middle picture on <a href="#Fig.1">Fig.1</a>) 
and a wire box (right picture on <a href="#Fig.1">Fig.1</a>) [<a href="#References">1</a>] 
and uses the ISO to visualize them. The first two are visualized in the normal ISO, 
and the last one in the furtive ISO.</p>
<table>
	<caption><a name="Fig.1"></a>Fig.1 Temporary Components</caption>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<td>
		<img alt="Text in Normal ISO" height="62" src="images/CAAVisSampleTmpObjectISOText.jpg" width="146"/></td>
		<td>
		<img alt="Trihedral in Normal ISO" height="64" src="images/CAAVisSampleTmpObjectTrihedral.jpg" width="63"/></td>
		<td>
		<img alt="Wire Box in Furtive ISO" height="193" src="images/CAAVisSampleTmpObjectWireBox.jpg" width="322"/></td>
	</tr>
</table>
<p>The text is displayed when the command is activated. It is useless for the result 
of the command itself, it has been added to show how select a temporary component.</p>
<p>Here it is the UML diagram [<a href="#References">4</a>] of the CAADegClippingByBoxCmd 
command.</p>
<p>
<img alt="Command UML Diagram" height="412" src="images/CAAVisSampleTmpObjUML.jpg" width="573"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADegClippingByBoxCmd</h3>
<p>See the section entitled &quot;How to Launch the CAAGeometry Use Case&quot; in 
[<a href="#References">9</a>] for a detailed description of how this use case should 
be launched. For the specific scenario:</p>
<p>Launch 3DEXPERIENCE. When the application is ready:</p>
<ul>
     <li>Click on <strong>3D</strong>, the west quadrant of Compass.</li>
    <li>In the <strong>3D Modeling apps</strong> section, select <strong>&quot;CAA: Create Geom&quot;</strong> app. </li>
    <li>Launch the <strong>Point</strong> command in <strong>&quot;CAA Geometry Creation Section&quot;</strong> 
    of the action bar, and create some points.</li>
	<li>Launch the <strong>Clipping By Box</strong> 
	<img alt="Clipping By Box Icon" height="28" src="images/CAAVisClipByBoxIcon.jpg" width="27"/>command 
		in the <strong>Tools</strong> section of action bar.</li>
	<li>Select the <strong>ISO Selection</strong> text located at the origin of 
		the model (0,0,0)
		<p>After the selection, the text disappears.</p>
	</li>
	<li>Select a point as clipping box center.
		<p>After the selection, the trihedral is displayed.</p>
	</li>
	<li>Move the mouse, and click left to stop 
		the command.
		<p>All points outside the clipping box are removed from the current 
		CAAGeometry model.</p>
	</li>
</ul>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAADegClippingByBoxCmd Code</h3>
<p>The CAADegClippingByBoxCmd use case is made of the single class named <em>CAADegClippingByBoxCmd</em> 
located in the CAADegGeoCommands.m module of the CAADialogEngine.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADialogEngine.edu\CAADegGeoCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">8</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven main logical steps in CAADegClippingByBoxCmd:</p>
<ol>
	<li><a href="#Step1">Retrieving the Normal and Furtive ISO</a></li>
	<li><a href="#Step2">Creating the Three Temporary Components</a></li>
	<li><a href="#Step3">Defining the State Chart Diagram</a> </li>
	<li><a href="#Step4">Managing the Text Component</a> </li>
	<li><a href="#Step5">Managing the Trihedral Component</a> </li>
	<li><a href="#Step6">Managing the Wire Box Component</a> </li>
	<li><a href="#Step7">Erasing and Deleting the Three Temporary Components</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Normal and Furtive ISO</h3>
<p>The interactive set of objects are managed by the <em>CATFrmEditor</em> class 
[<a href="#References">5</a>]. In the CAADegClippingByBoxCmd class constructor they 
are retrieved.</p>
<pre class="code">...
  CATFrmEditor * pEditor   = GetEditor();
  ...
  _pFurtiveISO = pEditor-&gt;<strong>GetFurtiveISO</strong>() ;

  _pISO = pEditor-&gt;<strong>GetISO</strong>() ;
...</pre>
<p>The <code>GetEditor</code> method of the <em>CATStateCommand</em> class, retrieves 
the current <em>CATFrmEditor</em> class instance. The <code>GetISO </code>method 
retrieves the &quot;normal&quot; ISO, and the <code>GetFurtiveISO</code> method 
the furtive ISO. <code>_pISO</code> and <code>_pFurtiveISO</code> are data members 
of the state command.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating the Three Temporary Components</h3>
<p>In the CAADegClippingByBoxCmd class constructor you will find the three creations.</p>
<pre class="code">...
  _pCenterBoxModel     = new CATModelForRep3D(); 

  ::CATInstantiateComponent(&quot;CAAVisWireBox&quot;,IID_<strong>CAAIVisWireBox</strong>,(void**)&amp;_pIWireBox);

  ::CATInstantiateComponent(&quot;CAAVisTextModel&quot;,IID_<strong>CAAIVisTextModel</strong>,(void**)&amp;_pITextToSelectModel);
...</pre>
<p><code>_pCenterBoxModel, _pIWireBox,</code> and <code>_pITextToSelectModel</code> 
are data members of the <em>CAADegClippingByBoxCmd</em> class. The first one is 
an instance of the trihedral component, the second one is an instance of the wire 
box component, and the last one is an instance of the text component. The referenced 
article [<a href="#References">1</a>] gives you the UML diagram of each one.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Defining the State Chart Diagram</h3>
<p>The CAADegClippingByBoxCmd class is a state command class. It implies that the 
state chart is defined in the <code>BuildGraph</code> method of the <em>CATStateCommand</em> 
class. Here it is an extract which shows the more interesting steps.</p>
<pre class="code">...
_daIndication = new <strong>CATIndicationAgent</strong>(&quot;Indication&quot;);
  
_daIndication-&gt;SetBehavior(CATDlgEngWithPrevaluation | <strong>CATDlgEngAcceptOnPrevaluate</strong> |
	                         CATDlgEngWithUndo);
	     </pre>
<p><code>_daIndication</code> is a <em>CATIndicationAgent</em> class instance kept 
as data member by the <em>CAADegClippingByBoxCmd</em> class. The <code>CATDlgEngWithOnPrevaluation</code> 
behavior enables us to be informed at each mouse movement, and consequently to increase 
or decrease the size of the clipping box. See the <a href="#Step6">Managing Wire 
Box Component</a> step.</p>
<pre class="code">...
  _daTextSel = new <strong>CATPathElementAgent</strong>(&quot;SelText&quot;);
  _daTextSel-&gt;<strong>SetBehavior</strong>(CATDlgEngWithPSO | CATDlgEngWithPrevaluation);
  _daTextSel-&gt;<strong>AddElementType</strong>(IID_<strong>CAAIVisTextModel</strong>);
...</pre>
<p><code>_daTextSel, </code>a <em>CATPathElementAgent</em> pointer,<code> </code>
is a data member of the <em>CAADegClippingByBoxCmd</em> class. The association of 
the <code>CATDlgEngWithPSO</code> and <code>CATDlgEngWithPrevaluation</code> behaviors 
enables us to have a visual feedback when an object is pre-selected (pre-highlight 
color). The <code>AddElementType</code> is the method to filter the selection. Using
<em>CAAIVisTextModel</em>, only the components implementing this interface could 
be selected. This interface is only implemented on text component [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Managing the Text Component</h3>
<p>The text component (&quot;ISO Selection&quot;) is managed as follows:</p>
<ul>
	<li>Created at the beginning of the state command - see the <a href="#Step2">
		Creating the Three Temporary Components</a> step.</li>
	<li>Displayed when the command is first activated - see the
		<a href="#Step41">Adding the text component into the ISO</a> step.</li>
	<li>Erased once the text is selected - see the <a href="#Step42">Removing the 
		text component from the ISO</a> step.</li>
	<li>Re-Displayed/Re-Erased in case of undo/redo of the text selection- see the
		<a href="#Step43">Undo/Redo</a> step.</li>
	<li>Re-Erased/Re-Displayed in case of deactivation/re-activation of the state 
		command - see the <a href="#Step52">Deactivation/Re-activation</a> step.</li>
	<li>Deleted at the end of the state command - see the <a href="#Step44">Deleting 
		the Three Temporary Components</a> step.</li>
</ul>
<p>Here it is the detail of the parts own to the text component.</p>
<ul>
	<li><a name="Step41"></a><strong>Adding the text component into the ISO</strong>
		<p>When the state command is first activated, the text is displayed to be 
		selected by the end user. This step consists in to create the graphic representation 
		of the text component, and sets the component in the normal ISO.</p>
		<pre class="code">...
   HRESULT rc = <strong>CreateRepForText</strong>();
            
  _pISO-&gt;<strong>AddElement</strong>(_pITextToSelectModel);       
...</pre>
		<p>The text component, <code>_pITextToSelectModel</code>, is created at 
		the <a href="#Step2">Creating the Three Temporary Components</a> step.</p>
		<p>The <code>CreateRepForText</code> method creates the graphic representation 
		and associates it with the component. Refer for details to the &quot;Creating 
		Graphic Representation&quot; sub-step of the &quot;Creating the Text Component&quot; 
		step of the referenced article [<a href="#References">1</a>].</p>
		<p>The component can be now visualized. The <code>AddElement</code> method 
		adds the component, handled by <code>_pITextToSelectModel</code>, in the 
		normal ISO. This method will send a <em>CATCreate</em> event to update the 
		visualization. Refer to the technical article [<a href="#References">2</a>] 
		for details. </p>
	</li>
	<li><a name="Step42"></a><strong>Removing the text component from the ISO</strong>
		<p>The text has been selected, it must be erased.</p>
		<pre class="code">...
_pISO-&gt;<strong>RemoveElement</strong>(_pITextToSelectModel,<strong>1</strong>) ;      
...</pre>
		<p>The <code>Remove</code><code>Element</code> method removes the component,<code> 
		_pITextToSelectModel</code>, from the ISO. This method will send a notification 
		to update the visualization. The last argument is important. The value
		<code>1</code> means that the graphic representation associated with the 
		component will be not deleted. So, you could re-add the component into the 
		ISO without re-create the graphic representation. See the next step.</p>
	</li>
	<li><a name="Step43"></a><strong>Undo/Redo</strong>
		<p>It is the Undo/Redo of the action which consists in to select the text. 
		The Undo action re-displays the text, whereas the Redo action, erases back 
		the text. </p>
		<p>Undo cases:</p>
		<pre class="code">...
_pISO-&gt;<strong>AddElement</strong>(_pITextToSelectModel);      
...</pre>
		<p>Redo cases:</p>
		<pre class="code">...
_pISO-&gt;<strong>RemoveElement</strong>(_pITextToSelectModel,<strong>1</strong>);      
...</pre>
		<p>You can note that the since the <code>_pITextToSelectModel </code>component 
		is always removed from the ISO without the destruction of its graphic representation, 
		thanks the value <code>1</code> for the last argument of the <code>RemoveElement</code> 
		method, there is no need to re-create the graphic representation into the 
		undo action method.</p>
	</li>
	<li><a name="Step44"></a><strong>Deactivation/Re-activation</strong>
		<p>A state command can be deactivated by a shared command, and once this 
		command is completed, our command is reactivated [<a href="#References">6</a>]. 
		The management of the text component, in this case, follows the same principle 
		as into the <a href="#Step43">undo/redo</a> methods. When the command is 
		deactivated the text is erased without its graphic representation destruction. 
		So in case of re-activation of the state command, the text can be re-displayed 
		without graphic representation reconstruction.</p>
		<p>However, there is a little difference with the <a href="#Step43"></a>
		undo/redo step. In the Deactivation method, a check of the presence into 
		the ISO of the text is done, it enables us in the re-activation method to 
		avoid to re-display the text if it useless.</p>
		<p>Extract of the <code>Desactivate</code> method of the <em>CAADegClippingByBoxCmd</em> 
		command:</p>
		<pre class="code">...
if ( _pISO-&gt;<strong>IsMember</strong>(_pITextToSelectModel) )
{
   _pISO-&gt;<strong>RemoveElement</strong>(_pITextToSelectModel,<strong>1</strong>);  
   _TextModelToRestore = TRUE ;
}
...</pre>
		<p>The <code>IsMember</code> method enables us to keep the state of the 
		text. <code>_TextModelToRestore</code>, a boolean value, will be then used 
		in the <code>Activate</code> method.</p>
		<p>Extract of the <code>Activate</code> method of the <em>CAADegClippingByBoxCmd</em> 
		command:</p>
		<pre class="code">...
if ( TRUE == TextModelToRestore  )
{
   _pISO-&gt;<strong>AddElement</strong>(_pITextToSelectModel);
} 
...</pre>
		<p>The text is added in the ISO only if before the de-activation the text 
		was displayed. You can note that there is no need to re-build the graphic 
		representation of the <code>_pITextToSelectModel</code> component since 
		in the deactivation method the last argument of the <code>RemoveElement</code> 
		method is <code>1.</code></p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Managing the Trihedral Component</h3>
<p>The trihedral component is managed as follows:</p>
<ul>
	<li>Created at the beginning of the state command - see the <a href="#Step2">
		Creating the Three Temporary Components</a> step.</li>
	<li>Displayed when a point, representing the center of the clipping box, is 
		selected - see <a href="#Step51">Adding the trihedral component into the 
		ISO</a> step.</li>
	<li>Erased/Re-Displayed when command is deactivated/re-activated - see
		<a href="#Step52">De-activation/Re-activation</a> step.</li>
	<li>Erased and Deleted at the end of the state command - see the
		<a href="#Step7">Erasing and Deleting the Three Temporary Components</a> 
		step.</li>
</ul>
<p>Here it is the detail of the parts own to the trihedral component.</p>
<ul>
	<li><a name="Step51"></a><strong>Adding the trihedral component into the ISO</strong>
		<p>When the end user has selected a point to specify the center of the clipping 
		box, a trihedral is displayed. This step consists in to create the graphic 
		representation of the trihedral component, and sets the component in the 
		normal ISO.</p>
		<pre class="code">...
rc = <strong>CreateRepForCenterBox</strong>();  
             
_pISO-&gt;<strong>AddElement</strong>(_pCenterBoxModel);             
...</pre>
		<p>The trihedral component, <code>_pCenterBoxModel</code>, is created at 
		the <a href="#Step2"></a>Creating the Three Temporary Components step.</p>
		<p>The <code>CreateRepForCenterBox</code> method creates the graphic representation 
		and associates it with the component. Refer for details to the &quot;Creating 
		the Trihedral Component&quot; step of the referenced article [<a href="#References">1</a>].
		</p>
		<p>The component can be now visualized. The <code>AddElement</code> method 
		adds the component, handled by <code>_pCenterBoxModel</code>, in the normal 
		ISO. This method will send a <em>CATCreate</em> event to update the visualization. 
		Refer to the technical article [<a href="#References">2</a>] for details.</p>
	</li>
	<li><a name="Step52"></a><strong>De-activation/Re-activation </strong>
		<p>When the state command is deactivated, the trihedral component must be 
		erased. Here it is an extract of the <code>Desactivate</code> method of 
		the <em>CAADegClippingByBoxCmd</em> command:</p>
		<pre class="code">...
if ( _pISO-&gt;<strong>IsMember</strong>(_pCenterBoxModel) )
{   
   _pISO-&gt;<strong>RemoveElement</strong>(_pCenterBoxModel,<strong>0</strong>);
     
   _CenterBoxModelToRestore = TRUE ;
}
...</pre>
		<p>The trihedral component, <code>_pCenterBoxModel</code>, is created at 
		the <a href="#Step2">Creating the Three Temporary Components</a> step.</p>
		<p>The <code>IsMember</code> method enables us to valuate a boolean data 
		member, <code>_CenterBoxModelToRestore</code> , which will be used in the
		<code>Activate</code> method. It is the only one interest of this call because 
		the <code>RemoveElement</code> method checks that the component exists in 
		the ISO. Note that the last argument of this method is <code>0</code>, the 
		default value. Its means that the graphic representation of the trihedral 
		component is deleted by the removal operation.</p>
		<p>Now, an extract of the <code>Activate</code> method:</p>
		<pre class="code">...
if (TRUE == _CenterBoxModelToRestore) 
{
   HRESULT rc = <strong>CreateRepForCenterBox</strong>();  
                
   _pISO-&gt;<strong>AddElement</strong>(_pCenterBoxModel);
          
...</pre>
		<p>The trihedral component, <code>_pCenterBoxModel</code>, is re-displayed 
		only if it was drawn before the deactivation ( test on <code>_CenterBoxModelToRestore</code>).
		</p>
		<p>Before to add the component into the ISO, you must re-create the graphic 
		representation because in the de-activation step it has been deleted by 
		the <code>RemoveElement</code> call.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Managing the Wire Box Component</h3>
<p>The wire box component is managed as follows:</p>
<ul>
	<li>Created at the beginning of the state command - see the <a href="#Step2">
		Creating the Three Temporary Components</a> step.</li>
	<li>Displayed when a point, representing the center of the clipping box, is 
		selected - see <a href="#Step61">Adding the wire box component into the 
		ISO</a> step.</li>
	<li>Updated when the mouse move - see <a href="#Step62">Updating the wire box 
		graphic representation</a> step.</li>
	<li>Erased and Deleted at the end of the state command - see the
		<a href="#Step7">Erasing and Deleting the Three Temporary Components</a> 
		step.</li>
</ul>
<p>Here it is the detail of the parts own to the wire box component.</p>
<ul>
	<li><a name="Step61"></a><strong>Adding the wire box component into the ISO</strong>
		<p>Once the point representing the center of the clipping box has been selected, 
		a first wire box is drawn.</p>
		<pre class="code">...
_pIWireBox-&gt;<strong>SetCenterBox</strong>(_CenterBox);
_pIWireBox-&gt;<strong>SetDimBox</strong>(.2f);

_PreviousPointInScreenPlane = _daIndication-&gt;GetValue();

_pFurtiveISO-&gt;<strong>AddElement</strong>(_pIWireBox);      
...</pre>
		<p><code>_pIWireBox </code>is a <em>CAAIVisWireBox</em> interface pointer 
		on the wire box component created in the class constructor. Refer to the
		<a href="#Step3">Creating the Three Temporary Components</a> step for details 
		about the <code>_pIWireBox</code> data member.</p>
		<p>The <em>CAAIVisWireBox</em> interface, an interface implemented by the 
		wire box component [<a href="#References">1</a>], enables us to initialize 
		the value of the wire box. <code>SetCenterBox</code> sets the position of 
		the selected point, <code>_CenterBox</code>, on the component, and<code> 
		.2 </code>is the initial size of the box.</p>
		<p><code>_PreviousPointInScreenPlane</code> keeps the current position of 
		the mouse. <code>_daIndication</code> is an agent of indication, see the
		<a href="#Step3">Defining the State Chart Diagram</a> step.</p>
		<p><code>_pFurtiveISO</code> is the furtive ISO associated with the editor. 
		See the <a href="#Step1">Retrieving the Normal and Furtive ISO</a> step 
		which explains how to retrieve it.</p>
		<p>Then, the component is set into the ISO to be displayed. The <code>AddElement</code> 
		method adds the component, handled by <code>_pIWireBox </code>, in the furtive 
		ISO. This method will send a <em>CATCreate</em> event to update the visualization. 
		The <em>CATVisManager</em> [<a href="#References">7</a>] will invoke the
		<code>build</code> method of the <em>CATI3DGeoVisu</em> interface implemented 
		by the wire box. Refer for details to the &quot;Implementing <em>CATI3DGeoVisu</em> 
		Interface&quot; sub-step of the &quot;Creating the Wire Box Component&quot; 
		step of the referenced article [<a href="#References">1</a>].</p>
	</li>
	<li><a name="Step62"></a><strong>Updating the wire box graphic representation</strong>
		<p>At each mouse movement, the <code>UpdateClippingBox</code> method is 
		called.</p>
		<pre class="code">...
CATMathPoint2D CurrentPointInScreenPlane = <strong>_daIndication</strong>-&gt;GetValue(); 

float currentdimbox = .2f;
_pIWireBox-&gt;<strong>GetDimBox</strong>(&amp;currentdimbox);

if ( CurrentPointInScreenPlane.GetY() &gt; _PreviousPointInScreenPlane.GetY() )
{
   currentdimbox += .05f ;
}else
{
   if ( (currentdimbox - .2f) &gt; EPSILON )
   { 
      currentdimbox -= 0.05f ;
   }
}
_PreviousPointInScreenPlane = CurrentPointInScreenPlane ;
...</pre>
		<p>The first step of this method consists in defining if the size of the 
		box increases or decreases. The following rule has been chosen:</p>
		<table>
			<tr>
				<td>
				<img alt="Wire Box Increasing Conventions" height="187" src="images/CAAVisTmpObjSensWireBox.jpg" width="215"/></td>
				<td>The black trihedral represents the axis system for the value 
				returned by the agent of indication (<code>_daIndication</code>)
				<p>When the mouse goes down (the previous Y position is upper than 
				the current one) the wire box increases, otherwise it decreases. 
				But there is a lower limit: the size of the box cannot be lowest 
				that .2f unit model.</p>
				<p><code>currentdimbox</code> is the new size of the wire box.</p>
				</td>
			</tr>
		</table>
		<p>Once the new size of the box is defined, thanks <code>_pIWireBox</code>, 
		the <em>CAAIVisWireBox</em> interface pointer on the wire box component, 
		the component can be updated.</p>
		<pre class="code">...
_pIWireBox-&gt;<strong>SetDimBox</strong>(currentdimbox) ;
...</pre>
		<p>There remains to update the ISO. The <code>UpdateElement</code> method 
		will send a <em>CATModify</em> event which implies the automatic reconstruction 
		of the graphic representation.</p>
		<pre class="code">...

_pFurtiveISO-&gt;<strong>UpdateElement</strong>(_pIWireBox);
...</pre>
		<table class="Remark">
			<tr>
				<td class="Remark"><span class="run-in">Warning</span>: if you use 
				the <code>UpdateElement</code> method you must never modify &quot;yourself&quot; 
				the graphic representation. The modification must be managed by 
				the <em>CATVisManager</em>. This is the reason why we have chosen, 
				for the wire box, to create a component which OM derives from
				<em>CATBaseUnknown</em> and not from <em>CATModelForRep3D</em>. 
				It is in <strong>your</strong> <em>CATI3DGeoVisu</em> implementation 
				that the graphic representation is built. Refer to the technical 
				article for complete details [<a href="#References">2</a>].</td>
			</tr>
		</table>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Erasing and Deleting the Three Temporary Components</h3>
<p>At the end of the command, in the <em>CAADegClippingByBoxCmd</em> destructor 
class, the three temporary components must be removed from the ISO and then deleted.</p>
<p>In the <code>Cancel</code> method, the component are removed from the ISO. You 
do not have to test if the component already exists in the ISO, the <code>RemoveElement</code> 
method does it.</p>
<pre class="code">...           
     _pISO-&gt;RemoveElement(_pITextToSelectModel);         
     _pISO-&gt;RemoveElement(_pCenterBoxModel);  

     _pFurtiveISO-&gt;RemoveElement(_pIWireBox);
      
...</pre>
<p>_<code>pISO </code>and <code>_pFurtiveISO</code> are data members initialized 
in the <a href="#Step1">Retrieving the Normal and Furtive ISO</a> step.</p>
<p>In the <code>destructor</code> class, the component are deleted by releasing 
the handles:</p>
<pre class="code">...
     _pITextToSelectModel-&gt;Release();
 
     _pCenterBoxModel-&gt;Release();
    
     _pIWireBox-&gt;Release();    
...</pre>
<p><code>_pITextToSelectModel, _pCenterBoxModel</code>, and <code>_pIWireBox</code> 
are data members initialized in the <a href="#Step2">Creating the Three Temporary 
Components</a> step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has explained how to use the main methods of the <em>CATISO</em> 
class:</p>
<ul>
	<li><code>AddElement</code> to visualize a component.</li>
	<li><code>RemoveElement</code> to erase a component.</li>
	<li><code>UpdateElement</code> to update the graphic representation of a component 
		already existing in the ISO.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAVisUcSampleTempObject.htm">Creating Temporary Components</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVisTaISO.htm">Interactive Set of Objects</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">Getting 
		Started with State Dialog Commands</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaUMLDescription.htm">How 
		to Describe State Dialog Commands Using UML</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Wintop Frame Layout </a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrTaCommandModel.htm">
		Understanding the Wintop Frame Command Model</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAVisUcSampleVisManager.htm">Using the Visualization Manager</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCAAGeometryOverview.htm">
		The CAAGeometry Sample</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Fev 2004]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Oct 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
