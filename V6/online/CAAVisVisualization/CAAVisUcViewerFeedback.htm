<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Viewer Feedback</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Viewer Feedback</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to retrieve and analyze information on interactions 
		coming from viewers. These interactions can be mouse motion or press/release 
		button.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAACafViewerFeedback Use Case</a>
				<ul>
					<li><a href="#What">What Does CAACafViewerFeedback Do</a></li>
					<li><a href="#How">How to Launch CAACafViewerFeedback</a></li>
					<li><a href="#Where">Where to Find the CAACafViewerFeedback 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to retrieve and analyze information 
on interactions coming from viewers. You will learn how to:</p>
<ul>
	<li>Activate or deactivate the sending of event when interactions occur in a 
		viewer,
		<p>The activation/deactivation mode is called the <strong>feedback</strong> 
		mode.</p>
	</li>
	<li>Analyze the notification associated with the event,
		<p>The notification is a <em>CATVisViewerFeedbackEvent</em> notification 
		class.</p>
	</li>
	<li>Display on the screen information contained in the notification.
		<p>Information will be displayed in the main 2D viewpoint of the viewer.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAACafViewerFeedback Use Case</h2>
<p>CAACafViewerFeedback is a use case of CAACATIAApplicationFrm.edu and CAAApplicationFrame.edu 
frameworks that illustrates Visualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAACafViewerFeedback Do</h3>
<p>CAACafViewerFeedback use case enables you to activate or deactivate the 
feedback mode on the current viewer. This switch is possible thanks to a command 
available in the fixed area of the action bar. [<a href="#References">1</a> ].</p>
<p>The Viewer Feedback demonstrator command, see pictures below, is represented 
by a check button. When the button is &quot;ON&quot; (right picture), the feedback 
mode is active. When the button is &quot;OFF&quot; (left picture), the feedback 
mode is not active.</p>
<table>
	<tr>
		<td>
		&nbsp;</td>
		<td>
		<img alt="" src="../CAAAfrApplicationFrame/images/CAAVisCheckHeader.png" width="599" height="133"/></td>
	</tr>
</table>
<p>When the feedback mode is active in the current viewer you can see:</p>
<ul>
	<li>Only the mouse position, if there is no element under the mouse
		<table>
			<tr>
				<td>
				<img alt="" src="../CAAAfrApplicationFrame/images/CAAVisCheckHeaderMouseCoord2.jpg" width="440" height="332"/></td>
			</tr>
		</table>
	</li>
	<li>The mouse position, the intersection point coordinates, and the path of 
		all elements under the mouse.
		<table border="0">
			<tr>
				<td>
				<img alt="" src="../CAAAfrApplicationFrame/images/CAAVisViewerFeedback2.jpg" width="783" height="376"/></td>
			</tr>
		</table>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAACafViewerFeedback</h3>
<p>To launch CAACafViewerFeedback, you will need to set up the build time environment, 
then compile CAACafViewerFeedback along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>But just before launching the execution, edit the CAAApplicationFrame.edu.dico 
interface dictionary file in the dictionary directory of your runtime view:</p>
<p><code>InstallRootDirectory\intel_a\code\dictionary\</code></p>
<p>where <code>InstallRootDirectory</code> [<a href="#References">2</a>] is the 
directory where the CAA CD-ROM is installed.</p>
<p>In this file, remove the &quot;<strong>#</strong>&quot; character before the 
two following lines:</p>
<pre class="code">...
#CAAAfrGeneralWksAddin       CATIWorkbenchAddin          libCAAAfrGeneralWksAddin  
#CAAAfrGeneralWksAddin       CATIAfrGeneralWksAddin      libCAAAfrGeneralWksAddin
...</pre>
<p>The two lines enable to activate an add-in to the&nbsp; fixed area of the 
action bar, described in the CAAAfrGeneralWksAddin 
use case [<a href="#References">1</a>] located in the CAAAfrGeneralWksAddin.m module 
(CAAApplicationFrame.edu framework)</p>
<p>Then, in the window where you run the mkrun command, do not type the module 
name on the command line, but type 3DEXPERIENCE instead. When the application is ready, do the 
following:</p>
<ul>
    <li>From the top bar, select <strong>Add Services -&gt; 3D Part </strong> .</li>
	<li>From the fixed area of action bar, click on <strong>Viewer Feedback Demonstrator</strong>
	command.</li>
	<li>Move the mouse on the viewer.</li>
	<li>Create elements</li>
	<li>Move the mouse on the viewer and pass over 
		the newly created elements.</li>
	<li>From the fixed area of action bar, click again on <strong>Viewer Feedback Demonstrator</strong>
	command.</li>
	<li>Move the mouse on the viewer and pass over 
		the newly created elements</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAACafViewerFeedback Code</h3>
<p>The CAACafViewerFeedback use case is made of several classes located:</p>
<ul>
	<li>In the CAAAfrGeneralWksAddin.m module of the CAAApplicationFrame.edu framework:
		<p>This module contains the insertion of three general commands into the 
		fixed area of action bar, of which the &quot;Viewer Feedback Demonstrator&quot; command. This 
		part of the use case is not explained in this article. You can you refer 
		to the add-in article [<a href="#References">1</a>] for more details.</p>
		<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeneralWksAddin.m\</code></p>
	</li>
	<li>In the CAACafViewerFeedback.m module of the CAACATIAApplicationFrm.edu framework:
		<p>This module contains <em>CAACafViewerFeedbackManager</em> and <em>CAACafViewerFeedbackCmd
		</em>classes.</p>
		<p><code>InstallRootFolder\CAADoc\CAACATIAApplicationFrm.edu\CAACafViewerFeedback.m\</code></p>
		<p>Only one instance of the <em>CAACafViewerFeedbackManager</em> class is 
		created during the session. This class manages the current viewer and the 
		feedback mode on the current viewer. It means how to receive notifications 
		sent by the viewer, and once received, how to decode it to display some 
		information in the 2D Viewpoint of the viewer. The <em>CAACafViewerFeedbackCmd</em> 
		command, explained in the &quot;Creating a Command with Options in the Tools 
		Palette&quot; article [<a href="#References">3</a>], informs 
		the <em></em>unique <em>CAACafViewerFeedbackManager</em> class instance 
		to activate or deactivate the feedback mode.</p>
	</li>
</ul>
<p>where <code>InstallRootDirectory</code> [<a href="#References">2</a>] is the 
directory where the CAA CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in the CAACafViewerFeedback use case:</p>
<ol>
	<li><a href="#Step1">Creating the CAACafViewerFeedbackManager Class Header</a></li>
	<li><a href="#Step2">Activating the Feedback Mode</a></li>
	<li><a href="#Step3">Deactivating the Feedback Mode</a></li>
	<li><a href="#Step4">Decoding the CATVisViewerFeedbackEvent Notification</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the CAACafViewerFeedbackManager Class Header</h3>
<pre class="code">// System Framework
#include &quot;CATBaseUnknown.h&quot;      // Needed to derive from 
#include &quot;CATEventSubscriber.h&quot;  // To set callback

class CAT2DBagRep ;              // The graphic representation of the feedback
class CATViewer ;                // The viewer with the visual feedback
class CATNotification ;          // for callback methods
class CATUnicodeString ;         // 
class CATPathElement ;           // 

class CAACafViewerFeedbackManager : public CATBaseUnknown
{
  public :

   CAACafViewerFeedbackManager ();

   virtual ~CAACafViewerFeedbackManager();  
	
   static void <strong>GetManager</strong>(CAACafViewerFeedbackManager ** opManager);

   void <strong>SetViewerFeedbackOn</strong>();

   void <strong>SetViewerFeedbackOff</strong>();

  private : 

   void <strong>ViewerFeedbackCB</strong>          (CATCallbackEvent  iEventAlarm,
                           void             *iAlarm,
                           CATNotification  *iNotifAlarm,
                           CATSubscriberData iBurglarData,
                           CATCallback       iCallBack );

   void <strong>WindowActivatedCB</strong>          (CATCallbackEvent  iEventAlarm,
                           void             *iAlarm,
                           CATNotification  *iNotifAlarm,
                           CATSubscriberData iBurglarData,
                           CATCallback       iCallBack );

   void <strong>WindowDeactivatedCB</strong>          (CATCallbackEvent  iEventAlarm,
                           void             *iAlarm,
                           CATNotification  *iNotifAlarm,
                           CATSubscriberData iBurglarData,
                           CATCallback       iCallBack );

 
   void <strong>PathElementString</strong>(CATPathElement   * ipPath, 
                           CATUnicodeString &amp; oPathName) ;

   void <strong>ChangeBagPosition</strong>(float Xpos, float Ypos) ;
   
   CAACafViewerFeedbackManager(const CAACafViewerFeedbackManager &amp;iObjectToCopy);
   CAACafViewerFeedbackManager &amp; operator = (const CAACafViewerFeedbackManager &amp;iObjectToCopy);

  private :
   CATViewer     * <strong>_pCurrentViewer</strong> ;
   CAT2DBagRep   * <strong>_pInformationsToDisplay</strong>;

   <strong>CATCallback</strong>     _ViewerFeedbackCB ;
   CATCallback     _WindowActivatedCB ;
   CATCallback     _WindowDeactivatedCB ;
   CATCallback     _WindowDeletedCB ;
};</pre>
<p>This class contains the following methods:</p>
<ul>
	<li><code>GetManager</code>: it is a static method which manages the singleton.
	</li>
	<li><code>SetViewerFeedbackOn</code>: actives the feedback mode - see the
		<a href="#Step2">Activating the Feedback Mode</a> section</li>
	<li><code>SetViewerFeedbackOff</code>: deactivates the feedback mode - see the
		<a href="#Step3">Deactivating the Feedback Mode</a> section</li>
	<li><code>ViewerFeedbackCB</code>: this method is a callback method to analyze 
		the <a href="#Step4">CATVisViewerFeedback notification</a></li>
	<li><code>WindowActivatedCB and WindowDeactivatedCB</code>: these two methods 
		are callback methods to manage window activation, deactivation and deletion. 
		The first one calls the <code>SetViewerFeedbackOn</code> method if the feedback 
		mode is active, and the second method calls the <code>SetViewerFeedbackOff</code> 
		method.</li>
	<li><code>PathElementString</code>: It is a service to translate in a string 
		a <em>CATPathElement</em>. For each element of the path, the <em>CATIAlias</em> 
		interface is called.</li>
	<li><code>ChangeBagPosition</code>: this method is also a service to move the 
		text near the mouse position. <a href="#ChangeBagPosition">Click here to 
		see the code.</a></li>
</ul>
<p>and contains the following data:</p>
<ul>
	<li>_<code>pCurrentViewer</code>: it is one viewer of the current window.
	</li>
	<li><code>_pInformationsToDisplay</code>: it is the graphic representation which 
		groups together texts</li>
	<li><code>_ViewerFeedbackCB</code>: it is the identifier of the viewer callback.
	</li>
	<li><code>_WindowxxxCB</code>: there are the identifiers of the window callbacks</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Activating the Feedback Mode</h3>
<p>The <code>SetViewerFeedbackOn</code> method consists in first to retrieve a viewer:</p>
<pre class="code">void CAACafViewerFeedbackManager::SetViewerFeedbackOn()
{
    if ( NULL == _pCurrentViewer )
    {
       <strong>CATFrmLayout</strong> * pCurrentLayout= CATFrmLayout::<strong>GetCurrentLayout</strong>();
       if ( NULL != pCurrentLayout )
       {
          <strong>CATFrmWindow</strong> * pCurrentWindow = pCurrentLayout-&gt;<strong>GetCurrentWindow</strong>();

          if ( NULL != pCurrentWindow )
          {
              _pCurrentViewer = pCurrentWindow-&gt;<strong>GetViewer</strong>();
...</pre>
<p>This viewer is one of the current window (it is the choice of this command). 
The <em>CATFrmLayout</em> [<a href="#References">4</a>] is the class which manages 
all the windows all the session.</p>
<p>Then, once you have a viewer, you can activate the feedback mode:</p>
<pre class="code"> ...
       if ( NULL != _pCurrentViewer )
       {         
          _pCurrentViewer-&gt;<strong>SetFeedbackMode</strong>(TRUE);
          if (0 == _ViewerFeedbackCB)
          {
             _ViewerFeedbackCB = ::<strong>AddCallback</strong>(this,
                            _pCurrentViewer, 
                            <strong>CATViewer</strong>::<strong>VIEWER_FEEDBACK_UPDATE</strong>(), 
                            (CATSubscriberMethod) &amp; CAACafViewerFeedbackManager::<strong>ViewerFeedbackCB</strong>, NULL);
          }
       }</pre>
<p>The <code>SetFeedbackMode</code> method with <code>TRUE</code> actives the feedback 
mode. It means that now the viewer sends notifications when an interaction occurs. 
To receive these notifications, the command sets a callback.</p>
<ul>
	<li><code>this</code>: the event subscriber</li>
	<li><code>_pCurrentViewer</code>: the publisher</li>
	<li><code>CATViewer::VIEWER_FEEDBACK_UPDATE</code>(): the dispatched CATCallbackEvent 
		[<a href="#References">5</a>]</li>
	<li><code>ViewerFeedbackCB</code>: the callback method - See the
		<a href="#Step4">Decoding the CATVisViewerFeedbackEvent Notification</a> 
		section</li>
	<li><code>NULL</code>: no argument</li>
</ul>
<p><code>_ViewerFeedbackCB</code> is an identifier of the callback, it is important 
to keep it for the callback deletion. See the <a href="#Step3"><code>SetViewerFeedbackOn
</code></a><code></code>method</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Deactivating the Feedback Mode</h3>
<p>The <code>SetViewerFeedbackOn</code> method consists in to cancel the feedback 
mode on the current viewer.</p>
<pre class="code">void CAACafViewerFeedbackManager::SetViewerFeedbackOff()
{
    if ( NULL != _pCurrentViewer)
    {
       _pCurrentViewer-&gt;<strong>SetFeedbackMode</strong>(FALSE);

       if (NULL != <strong>_pInformationsToDisplay</strong>)
       {
          _pCurrentViewer-&gt;<strong>RemoveRep</strong>(_pInformationsToDisplay);

          _pInformationsToDisplay-&gt;<strong>Destroy</strong>();
          _pInformationsToDisplay = NULL;
       }
       _pCurrentViewer-&gt;<strong>Draw</strong>();

       if (0 != _ViewerFeedbackCB)
       {
          ::<strong>RemoveCallback</strong>(this,_pCurrentViewer,<strong>_ViewerFeedbackCB</strong>) ;
          _ViewerFeedbackCB = 0 ;
       }
       _pCurrentViewer = NULL ; 
    }
}</pre>
<p>There are four steps:</p>
<ol>
	<li>Deactivate the feedback mode: It is done with the <code>SetFeedbackMode</code> 
		method with <code>FALSE</code> as argument. It means that now the viewer 
		will do not send notifications when an interaction will occurs.</li>
	<li>Remove the graphic representation created in the <code>ViewerFeedbackCB</code> 
		method. <code>_pInformationsToDisplay</code> is first removed from the viewer 
		and then deleted. The <code>Destroy</code> method deletes the graphic representation 
		and its contents, if it is a bag.</li>
	<li>Refresh the viewer: It is the role of the <code>Draw</code> method</li>
	<li>Removes the callback coming from the viewer: <code>_ViewerFeedbackCB</code> 
		is the identifier returns by the <code>AddCallback</code> method. See the
		<a href="#Step2"><code>SetViewerFeedbackOn</code></a> method.</li>
	<li><code>_pCurrentViewer</code>, returned by the <code>GetViewer</code> method 
		of <em>CATFrmWindow</em>, is not &quot;AddReffed&quot; by this method, so 
		you have just to reset the pointer.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Decoding the CATVisViewerFeedbackEvent Notification</h3>
<p>The <code>ViewerFeedbackCB</code> method consists in to decode the notification 
contained in the callback event, and to display in the main 2D viewpoint of the 
viewer, the information of the notification.</p>
<pre class="code">void CAACafViewerFeedbackManager::ViewerFeedbackCB( CATCallbackEvent   event,
                                              void             * client,
                                              CATNotification  * iNotification,
                                              CATSubscriberData  data,
                                              CATCallback        callback)
{
  if ( NULL != _pCurrentViewer )
  {
     if (NULL != _pInformationsToDisplay)
     {
        _pCurrentViewer-&gt;<strong>RemoveRep</strong>(_pInformationsToDisplay);

        _pInformationsToDisplay-&gt;<strong>Destroy</strong>();
        _pInformationsToDisplay = NULL;
     }
...</pre>
<p>The <code>ViewerFeedbackCB</code> method is called each time the viewer sends 
an event. So the graphic representation, <code>_pInformationsToDisplay</code>, previously 
created, should be first removed from the viewer and deleted.</p>
<pre class="code">     CATVisViewerFeedbackEvent * pFeedbackEvent = NULL ;
     if ( NULL != iNotification )
     {
        pFeedbackEvent = (<strong>CATVisViewerFeedbackEvent</strong>*) iNotification;
     }

     if (NULL != pFeedbackEvent)
     {
         CATViewer * pViewerPublisher = pFeedbackEvent-&gt;<strong>GetViewer</strong>();
         if ( (NULL != pViewerPublisher) &amp;&amp; ( pViewerPublisher <strong>==</strong> _pCurrentViewer) )
         {
            _pInformationsToDisplay = new <strong>CAT2DBagRep</strong>();
            _pCurrentViewer-&gt;<strong>AddRep</strong>(_pInformationsToDisplay);
            ...</pre>
<p>The third argument of the <code>ViewerFeedbackCB</code> method is the notification 
containing the information. This notification, <code>iNotification</code>, is a
<em>CATVisViewerFeedbackEvent</em> class. This class instance contains 
the viewer which has published the event. <code>GetViewer</code> retrieves it, it 
is <code>pViewerPublisher</code>. This viewer should be released at this end of 
the method. This value enables you to check that the current viewer, <code>_pCurrentViewer,</code> 
kept by the manager, is the same as the notification's sender. Once the check is 
validated, a new graphic representation can be built.</p>
<p><code>_pInformationsToDisplay</code> is a 2D bag added to the viewer thanks to 
the <code>AddRep</code> method. This method adds the 2D representation to the main 
2D viewpoint. <code>_pInformationsToDisplay</code> will have several children depending 
on the notification's contents. The <code>ViewerFeedbackCB</code> method analyzes 
and displays a text for:</p>
<ol>
	<li><a href="#Step41">The mouse position in screen coordinates</a></li>
	<li><a href="#Step42">The intersection point with the selected geometry</a></li>
	<li><a href="#Step43">The elements under the mouse</a></li>
</ol>
<p>These three steps are described below.</p>
<ol>
	<li><a name="Step41"></a>The mouse position in screen coordinates
		<p>Before detailing the code, a picture to explain the screen coordinates:</p>
		<table>
			<tr>
				<td>
				<img alt="Screen Coordinates" height="287" src="images/CAAVisViewerFeedbackScrnCoord.jpg" width="479"/></td>
				<td>If (Xpos,Ypos) are the screen coordinates of the mouse:
				<ul>
					<li>Xpos ranges from 0 to width-1</li>
					<li>Ypos ranges from 0 to height-1</li>
				</ul>
				<p>where width and height are the support (<em>CATSupport</em>) 
				dimensions.</p>
				</td>
			</tr>
		</table>
		<pre class="code">           int XPos, YPos;
           pFeedbackEvent-&gt;<strong>GetMousePosition</strong>(&amp;XPos, &amp;YPos);

           <strong>ChangeBagPosition</strong>(XPos,YPos);

           float <strong>points</strong>[2];
           points[0] = 8.0f;
           points[1] = 8.0f;

...</pre>
		<p><code>GetMousePosition</code> returns the mouse position in screen coordinates. 
		This position serves to locate the 2D bag. The <code>ChangeBagPosition</code> 
		method locates <code>_pInformationsToDisplay</code> near the mouse.
		<code>points</code> is an array of two floats which is used to locate the 
		child representations in the 2D bag.</p>
		<p>The position of a child is a position in the bag axis system as shown 
		in the picture below:</p>
		<table>
			<tr>
				<td>
				<img alt="Child Position" height="282" src="images/CAAVisViewerFeedbackBagChildPos.jpg" width="487"/></td>
				<td>(u,v) is the bag axis system
				<p>(Xpos,Ypos) is the mouse position in screen coordinates</p>
				<p>The <code>ChangeBagPosition</code> method transforms (Xpos,Ypos) 
				is model coordinates.</p>
				</td>
			</tr>
		</table>
		<p><a name="ChangeBagPosition"></a>Here is the code of the <code>ChangeBagPosition</code> 
		method:</p>
		<pre class="code">...
void CAACafViewerFeedbackManager::ChangeBagPosition(float Xpos, float Ypos)
{
  CATSupport &amp; Support = _pCurrentViewer-&gt;<strong>GetSupport</strong>();

  float width, height, MMInSupportUnit, RatioWH ;
  Support.<strong>GetWidthAndHeight</strong>(width,height);

  MMInSupportUnit = Support.<strong>GetMMInSupportUnit</strong>();
  RatioWH = Support.<strong>GetRatioWH</strong>();

  CAT2DViewpoint &amp; VP2D = _pCurrentViewer-&gt;<strong>GetMain2DViewpoint</strong>() ;

  CATMathPoint2Df ModelPos;
  VP2D.<strong>ComputeModelFromPixel</strong>( Xpos,Ypos, 
                              ModelPos.x, ModelPos.y, 
                              width, height, 
                              MMInSupportUnit, 
                              RatioWH);

  CATMathVector2Df U,V ;
  <strong>CAT3x3Matrix</strong> Matrix(U,V,ModelPos);
  _pInformationsToDisplay-&gt;<strong>SetMatrix</strong>(Matrix);
}
...</pre>
		<p><code>(ModelPos.x, ModelPos.y)</code> is the mouse position in model 
		coordinates. The <code>ComputeModelFromPixel</code> method transforms a 
		2D point from screen coordinates to model coordinates.</p>
		<p>Come back to the <code>ViewerFeedbackCB</code> method:</p>
		<pre class="code">...
     char MousePositionBuffer[200];
           sprintf(MousePositionBuffer, &quot;Mouse Coordinates : X=%d Y=%d&quot;, <strong>XPos</strong>, <strong>YPos</strong>);

           CAT2DAnnotationTextRep * pMousePositionTextRep = NULL ;
           pMousePositionTextRep = new <strong>CAT2DAnnotationTextRep</strong>( points, 
                                                             MousePositionBuffer, 
                                                             BASE_LEFT);

           if (NULL != pMousePositionTextRep)
           {
              _pInformationsToDisplay-&gt;<strong>AddChild</strong>(*pMousePositionTextRep);
           }
...</pre>
		<p><code>pMousePositionTextRep</code> is a <em>CAT2DAnnotationTextRep</em> 
		class instance to display the mouse position screen coordinates.</p>
	</li>
	<li><a name="Step42"></a>The intersection point with the selected geometry
		<p>Before detailing the code, a picture to explain the intersection point.</p>
		<table>
			<tr>
				<td>
				<img alt="Intersection Point" height="348" src="images/CAAVisViewerFeedbackIntersect.jpg" width="489"/></td>
				<td>The point symbolized by a bold circle is the intersection point 
				of the line and the nearest selected geometry. This point is in 
				model coordinates.</td>
			</tr>
		</table>
		<p><code>GetIntersection</code> returns a <em>CATGraphicElementIntersection</em> 
		class instance pointer. This class contains as public data a <em>CATMathPoint</em> 
		. <code>point</code> is the intersection point. If there is nothing under 
		the mouse, <code>GetIntersection</code> returns NULL.</p>
		<pre class="code">...
           <strong>CATGraphicElementIntersection</strong>* pIntersection = pFeedbackEvent-&gt;<strong>GetIntersection</strong>();

           if (NULL != pIntersection)
           {
              <strong>points</strong>[1] += 8.0f;

              char IntersectionBuffer[200];

              sprintf(IntersectionBuffer, 
                 &quot;Intersection Coordinates : X=%.2f Y=%.2f Z=%.2f&quot;, 
                  <strong>pIntersection-&gt;point.GetX</strong>(), 
                  <strong>pIntersection-&gt;point.GetY</strong>(), 
                  <strong>pIntersection-&gt;point.GetZ</strong>());

              CAT2DAnnotationTextRep * pIntersectionTextRep = NULL ;
              pIntersectionTextRep = new <strong>CAT2DAnnotationTextRep</strong>( points, 
                                                  IntersectionBuffer, BASE_LEFT);

              if (NULL != pIntersectionTextRep)
              {
                 _pInformationsToDisplay-&gt;<strong>AddChild</strong>(*pIntersectionTextRep);
              }

              pIntersection-&gt;<strong>Release</strong>();
              pIntersection = NULL;
           }
...</pre>
		<p><code>pMousePositionTextRep</code> is a <em>CAT2DAnnotationTextRep</em> 
		class instance which contains the intersection point coordinates.</p>
	</li>
	<li><a name="Step43"></a>The elements under the mouse
		<p><code>GetElementsUnder</code> returns the list of elements 
		under the mouse. This list can be empty. The elements in this list are sorted, 
		the first (0 index) being the nearest, and the last ( n-1) the further. 
		Each element is a <em>CATPathElement</em> from the geometry to the root.</p>
		<pre class="code">...
           CATSO* SO = pFeedbackEvent-&gt;<strong>GetElementsUnder</strong>();

           if (NULL != SO)
           {
              int SOSize = SO-&gt;<strong>GetSize</strong>() ;
              for ( int i= 0 ; i &lt; SOSize ; i++)
              {
                 CATPathElement * pPathElement = (CATPathElement*) ((*SO)[i]) ;

                 CATUnicodeString PathElementName = &quot;&quot;;
                 <strong>PathElementString</strong>(pPathElement,PathElementName);

                 char Buffer[200];
                 sprintf(Buffer, &quot;   : %d / %d&quot;, i+1,SO-&gt;GetSize());
          
                 CATUnicodeString Count(Buffer);
                 PathElementName.Append(Buffer) ;

                 points[1] += 8.0f;

                 CAT2DAnnotationTextRep* pElementTextRep = NULL ;
                 pElementTextRep = new <strong>CAT2DAnnotationTextRep</strong>( points, 
                                                          PathElementName.CastToCharPtr(), 
                                                          BASE_LEFT);

                 if (NULL != pElementTextRep)
                 {
                    _pInformationsToDisplay-&gt;<strong>AddChild</strong>(*pElementTextRep);
                 }
              }
              SO-&gt;<strong>Release</strong>();
              SO = NULL;
...</pre>
		<p>This piece of code is a loop from the first element to the last. For 
		each path, <code>PathElementString</code> converts a path in a string. This 
		string is the input of a new <code>CAT2DAnnotationTextRep</code> class instance.
		</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case explains how to receive information from a viewer when interactions 
occur. These information are inside a <em>CATVisViewerFeebackEvent</em> notification 
class.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleGeneralWksAddin.htm">
		Making Your Model Independent Command Available in All Apps</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcCmdPalette.htm">Creating 
		a Command with Options in the Tools Palette</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="../CAAAfrApplicationFrame/CAAAfrTaLayoutV5.htm">
		Understanding the Wintop Frame Layout</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidCallbacks.htm">
		The Callback Mechanism</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2003]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
