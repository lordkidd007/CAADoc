<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Tessellating and Displaying a Torus</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Tessellating and Displaying a Torus</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a <em>CAT3DFaceGP</em> class instance 
		to tessellate a torus and how to display it using a <em>CAT3DCustomRep</em> 
		instance.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAVisBasics Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisBasics Do</a></li>
					<li><a href="#How">How to Launch CAAVisBasics</a></li>
					<li><a href="#Where">Where to Find the CAAVisBasics Code</a>
					</li>
					<li><a href="#Tess">Tessellating a Torus</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case explains how to create a <em>CAT3DFaceGP</em> class instance to 
tessellate a torus and how to display it using a <em>CAT3DCustomRep</em> instance. 
It show the torus tessellation using a set of triangle strips according to a given 
sag.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisBasics Use Case</h2>
<p>CAAVisBasics is a set of use cases of the CAAVisualization.edu framework that 
illustrates Vizualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisBasics Do</h3>
<p>CAAVisBasics includes a MDI interactive application that displays viewers in 
its model windows. One of these viewers is displayed when the application is launched 
and contains the representation of a torus. This article focuses on how to create 
this representation as a <em>CAT3DCustomRep</em> instance associated with a graphic 
primitive that is an instance of the <em>CAT3DFaceGP</em> class.</p>
<p>The torus is displayed in a 3D navigation viewer as soon as the application is 
launched.</p>
<table>
	<caption><a name="Fig1"></a>Fig 1: The Torus</caption>
	<tr>
		<td>
		<img alt="Torus" height="625" src="images/CAAVisTorusCGRFile1.jpg" width="620"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAVisBasics</h3>
<p>To launch CAAVisBasics, you will need to set up the build time environment, then 
compile CAAVisBasics along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The torus is displayed in a 3D navigation viewer as soon as the application is 
launched.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisBasics Code</h3>
<p>The CAAVisBasics use case is made of several classes located in the CAAVisBasics.m 
module of the CAAVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\CAAVisBasics.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This use case deals with the following classes:</p>
<table>
	<tr>
		<td><em>CAAVisBaseApplication</em></td>
		<td>Class for the interactive application that hosts the viewer</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseDocument</em></td>
		<td>Class for the model base class</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseDefaultDocument</em></td>
		<td>Class for the model that creates a representation and four level of 
		details for a torus model</td>
	</tr>
	<tr>
		<td><em>CAAVisBaseView</em></td>
		<td>Class for the model window containing a viewer to display the model</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Tess"></a>Tessellating a Torus</h3>
<p>A torus is a solid of rotation made by rotating a circle about an axis located 
in the plane of the circle.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: The Discretization Parameters</caption>
	<tr>
		<td>
		<img alt="Torus Discretization Parameters" height="551" src="images/CAAVisTorusWireframe.gif" width="509"/></td>
		<td>This is a wireframe view of the torus showing eight positions of the 
		rotating circle. The chosen torus has the following characteristics:
		<ul>
			<li>The torus center is the absolute 3D axis system origin</li>
			<li>The torus plane is the zx plane</li>
			<li>The rotating circle radius is 20mm</li>
			<li>The rotating circle rotates about the y axis.</li>
		</ul>
		<p><em>phi</em> is the angle between two successive circles, measured in 
		the zx plane about the y axis, and <em>theta</em> is the angle between two 
		successive vertices on a circle.</p>
		</td>
	</tr>
</table>
<p>The torus surface can be described by selecting evenly distributed circles, and 
by drawing a strip of triangles between each couple of consecutive circles.</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3: The Triangle Strips</caption>
	<tr>
		<td>
		<img alt="Torus Triangle Strips" height="485" src="images/CAAVisTorusTessellation.gif" width="374"/></td>
		<td>Each strip is made of triangles whose vertices are alternatively located 
		on a circle and on the other. The strip winds around the part of torus located 
		between the two circles. The last triangle side closes the strip on the 
		vertex by which the strip begins. Such a strip is built between each couple 
		of circles, until the whole torus surface is covered.</td>
	</tr>
</table>
<p>The two important parameters of the tessellation are the number of circles, and 
the number of vertices per circle. The more they are circles and vertices, the more 
the discretization is precise, but the more the discretization and display processes 
are costly. In addition, depending on the current zoom, the number of circles and 
of vertices per circle can be changed to optimize display performance and accuracy. 
This is possible thanks to levels of details [<a href="#References">2</a> ], but 
is not discussed here.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create a 3D navigation viewer instance</a></td>
		<td><code>CreateViewer</code> method of <em>CATVisBaseView</em></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create a 3D representation bag</a></td>
		<td><em>CAAVisBaseDefaultDocument</em> constructor</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create and fill in the arrays for the vertex coordinates 
		and the normal components</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Create and fill in the arrays for the strip triangle 
		vertex indices and the number of vertices per strip</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Create the graphic primitive and its associated bounding 
		box</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Set graphic attributes to the graphic primitive</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Create the 3D custom representation</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>8</td>
		<td><a href="#Step8">Associate the representation with the graphic primitive</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>9</td>
		<td><a href="#Step9">Compute the representation bounding box</a></td>
		<td><code>CreateRep</code> method of <em>CAAVisBaseDefaultDocument</em></td>
	</tr>
	<tr>
		<td>10</td>
		<td><a href="#Step10">Display the created 3D representation</a></td>
		<td><code>AddRepToViewer</code> method of <em>CATVisBaseView</em></td>
	</tr>
</table>
<p>The torus is displayed when the CAAVisBasics application is launched. The torus 
creation and display is performed in the <em>CAAVisBaseDefaultDocument</em> constructor 
that calls the <code>CreateRep</code> and <code>AddRepToViewer</code> methods respectively. 
These two methods are described below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a 3D Navigation Viewer Instance</h3>
<p>The 3D navigation viewer is an instance of the <em>CATNavigation3DViewer</em> 
class. It is created in the <code>CreateViewer</code> method of the <em>CAAVisBaseView</em> 
class that is called when the application is launched.</p>
<pre class="code">void CAAVisBaseView::CreateViewer()
{
  _pViewer = new CATNavigation3DViewer(this, &quot;3DViewer&quot;,
                                      CATDlgFraNoTitle | CATDlgFraNoFrame,
                                      500, 500);
Attach4Sides(_pViewer);
}</pre>
<p>The <code>_pViewer</code> pointer to the 3D navigation viewer is kept as a data 
member of the <em>CAAVisBaseView</em> class. Its parameter are:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<td><code>this</code></td>
		<td>The viewer parent in the dialog containment tree structure and in the 
		command tree structure [a]</td>
	</tr>
	<tr>
		<td><code>3DViewer</code></td>
		<td>The viewer identifier</td>
	</tr>
	<tr>
		<td><code>CATDlgFraNoTitle</code></td>
		<td>The viewer has no title [b]</td>
	</tr>
	<tr>
		<td><code>CATDlgFraNoFrame</code></td>
		<td>The viewer frame is not displayed [b]</td>
	</tr>
	<tr>
		<td><code>500, 500</code></td>
		<td>The viewer width and height expressed in pixels</td>
	</tr>
</table>
<p>The <code>Attach4Sides</code> method attaches the four sides of the viewer to 
those of the window. This makes the viewer occupy the whole window space.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a 3D Representation Bag</h3>
<p>The <em>CAAVisBaseDefaultDocument</em> constructor creates the representation 
bag to attach to the viewer, calls <code>CreateRep</code> to create the torus representation, 
adds it to the representation bag, and calls <code>AddRepToViewer</code> for display.</p>
<pre class="code">CAAVisBaseDefaultDocument::CAAVisBaseDefaultDocument(CATCommand * iParent,
                                                     CATDialog  * iDialogParent,
                                                     CATString  * const iDocumentName)
                         : CAAVisBaseDocument(iParent, iDialogParent, iDocumentName)
{
  _pRootContainer  = new CAT3DBagRep();
  CreateRep();
  _pRootContainer-&gt;AddChild(*_pTorus);
  AddRepToViewer();
}</pre>
<p>Let's examine what <code>CreateRep</code> does.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating and Filling in the Arrays for the Vertex Coordinates 
and the Normal Components</h3>
<p>First set the tessellation parameters.</p>
<pre class="code">void CAAVisBaseDefaultDocument::CreateRep()
{
  int R = TORUS_RADIUS;
  int r = CIRCLE_RADIUS;

  float teta = sqrt(sag/r);
  float phi  = sqrt(sag/R);

  int nVertexPerCircle = floor(2*PI/teta)+1;
  int nCircles         = floor(2*PI/phi)+1;

  teta = 2*PI/nVertexPerCircle;
  phi  = 2*PI/nCircles;
...</pre>
<p>The tessellation parameters are <code>nVertexPerCircle</code> (number of vertices 
per circle), and <code>nCircles</code> (total number of circles). They determine 
the two angles theta and phi:</p>
<ul>
	<li><strong>theta</strong> is the angle between two successive vertices on a 
		circle (<code>2*Pi/nVertexPerCircle</code>). It determines the sag parameter 
		for the circle discretization, that is the distance between the chord joining 
		two vertices, that is displayed to represent the circle, and the actual 
		circle</li>
	<li><strong>phi</strong> determines the number of circles. It also determines 
		sag parameters for the torus discretization.</li>
</ul>
<table>
	<caption><a name="Fig4"></a>Fig. 4: The Sag and the Angles</caption>
	<tr>
		<td>
		<img alt="Torus Sag and Angle" height="262" src="images/CAAVisTorusSag1.gif" width="323"/></td>
		<td>
		<img alt="Torus Sags and Angles" height="366" src="images/CAAVisTorusSag2.gif" width="341"/></td>
	</tr>
</table>
<p>And now fill in the arrays.</p>
<pre class="code">...
  //array containing the vertices coordinates:
  int verticesArraySize = 3*nCircles*nVertexPerCircle;
  float * vertices = new float[verticesArraySize];

  //array containing the normals to each vertex:
  int normalsArraySize = 3*nCircles*nVertexPerCircle;
  float * normals = new float[normalsArraySize ];
  
  for(int i=0; i&lt;nCircles; i++)
  {
    for(int j=0; j&lt;nVertexPerCircle; j++)
    {
      //vertex XYZ coordinates
      vertices[3*(nVertexPerCircle*i+j)]   = (R+r*cos(j*theta))*sin(i*phi);
      vertices[3*(nVertexPerCircle*i+j)+1] = r*sin(j*theta);
      vertices[3*(nVertexPerCircle*i+j)+2] = (R+r*cos(j*theta))*cos(i*phi);

      //normal vector XYZ components
      normals[3*(nVertexPerCircle*i+j)]   = cos(j*theta)*sin(i*phi);
      normals[3*(nVertexPerCircle*i+j)+1] = sin(j*theta); 
      normals[3*(nVertexPerCircle*i+j)+2] = cos(j*theta)*cos(i*phi);
    }
  }
...</pre>
<p>The vertex coordinates are stored in the <code>vertices</code> array. The first 
vertex x, y, and z coordinates are stored in the first three array elements, then 
the second vertex coordinates are stored in the following three array elements, 
and so on. The normal components are stored in the <code>normals</code> array in 
the same way than the vertex coordinates. The coordinates of a given vertex occupies 
the same array elements in the <code>vertices</code> array than the components of 
the normal at this vertex in the <code>normals</code> array.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating and Filling in the Arrays for the Strip Triangle 
Vertex Indices and the Number of Vertices per Strip</h3>
<p>The vertex indices of the triangle strips are stored in the vertex index array. 
They are used to scan the vertex and normal arrays when the graphic primitive is 
built. Vertices and normals are then used for display in the order read from the 
vertex index array.</p>
<pre class="code">...
  // Creation of the torus representation thanks to the CAT3DFaceGP.
  // We can build a CAT3DFaceGP made of nCircles triangles strips, each one
  // made of 2*nVertexPerCircle vertices. Indeed, by joining, with strips, the torus circles
  // two by two, we can describe the entire torus.

  // We have to build an array containing the vertices indices, sorted in
  // order to be parsed as strips vertices.

  //Array containing vertices indices:
  int * triangleStripIndices = new int[nCircles*2*(nVertexPerCircle+1)];
  //number of strips used to describe the torus:
  int nbTriangleStrip = nCircles;
  //Array containing the number of vertices used for each strip:
  int * nbVertexPerTriangleStrip = new int[nCircles];

  // the parsing order looks like this:
  // 
  //           first strip:
  //           -----------
  //   Circle0.Vertex0  -&gt; Circle1.Vertex0
  //   Circle1.Vertex0  -&gt; Circle0.Vertex1
  //   Circle0.Vertex2  -&gt; Circle1.Vertex2    Circle0.Vertex1  -&gt; Circle1.Vertex1
  //               ...                        Circle1.Vertex1  -&gt; Circle0.Vertex2
  //   Circle1.Vertex11 -&gt; Circle0.Vertex0
  //   Circle0.Vertex0  -&gt; Circle1.Vertex0
  //
  //           second strip:
  //           ------------
  //   Circle1.Vertex0  -&gt; Circle2.Vertex0
  //   Circle2.Vertex0  -&gt; Circle1.Vertex1
  //               ...

  for(i=0; i&lt;nCircles; i++)
  {
    for(int j=0; j&lt;=nVertexPerCircle; j++)
    {
      if(j&lt;nVertexPerCircle)
      {
        triangleStripIndices[2*(nVertexPerCircle+1)*i+2*j]   = 3*(i*nVertexPerCircle+j);
        triangleStripIndices[2*(nVertexPerCircle+1)*i+2*j+1] = 3*((((i+1)%nCircles)*nVertexPerCircle)+j);
      }
      else
      {
        triangleStripIndices[2*(nVertexPerCircle+1)*i+2*j]   = 3*((i)*nVertexPerCircle);
        triangleStripIndices[2*(nVertexPerCircle+1)*i+2*j+1] = 3*(((i+1)%nCircles)*nVertexPerCircle);
      }
    }
    nbVertexPerTriangleStrip[i] = 2*(nVertexPerCircle+1);
  }
...</pre>
<p>The vertex index array to create the triangle strips is filled in following the 
vertex scanning order shown in <a href="#Fig3">Fig. 3</a>. Each couple of adjacent 
circles is processed until reaching the first circle to close the torus. For each 
couple of circles, the indices successively stored designate a vertex on the first 
circle and its counterpart on the second one until reaching the first vertices on 
each circle. The index of a vertex is the index of its x coordinate in the <code>
vertices</code> array. This table thus begins by 0, 240, 3, 243, 6, 246, ... and 
so on. The <code>(i+1)%nCircles</code> modulo operation always returns <code>i+1</code>, 
except when <code>i</code> is equal to <code>nCircles-1</code> where it returns 
0 to get the first circle. The array containing the number of vertices per strip 
has <code>nCircles</code> elements that all have the same value <code>2*(nVertexPerCircle+1)</code>, 
that is 162, since the first two vertices are counted twice.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the Graphic Primitive and its Associated Bounding 
Box</h3>
<p>The graphic primitive is created using the arrays computed in the previous steps.</p>
<pre class="code">...
  // Creation of the CAT3DFaceGP:

  int * triangleIndices = NULL;
  int nbTriangle = 0;
  int * triangleFanIndices = NULL;
  int nbTriangleFan = 0;
  int * nbVertexPerTriangleFan = NULL;
  <strong>float TextureCoord = NULL;
  int   TextureFormat = 3;</strong>
  
  CAT3DFaceGP * pFace = new CAT3DFaceGP(vertices,
                                        verticesArraySize,
                                        normals,
                                        normalsArraySize,
                                        triangleIndices,
                                        nbTriangle,
                                        triangleStripIndices,
                                        nbTriangleStrip,
                                        nbVertexPerTriangleStrip,
                                        triangleFanIndices,
                                        nbTriangleFan,
                                        nbVertexPerTriangleFan,
                                        <strong>TextureCoord,</strong>
                                        <strong>TextureFormat,
                                        ALLOCATE_VERTICES | ALLOCATE_NORMALS</strong>
                                        );
  pFace-&gt;ComputeBox();
...</pre>
<p>The computed arrays are passed as constructor parameters, along with their sizes. 
Since the graphic primitive is not built using isolated triangles or triangle fans, 
the corresponding arrays are passed as <code>NULL</code> pointers, and their sizes 
and the triangle fan number as 0. No texture coordinates are passed. The vertex 
and normal arrays default allocation mode is explicitly used to show that the created 
graphic primitive allocates the arrays. In this case, there is no need to allocate 
them using the new operator. The graphic primitive bounding box is computed as soon 
as graphic primitive is created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Setting Graphic Attributes to the Graphic Primitive</h3>
<p>The graphic attribute set can be customized.</p>
<pre class="code">...
  CATGraphicAttributeSet pGraphicAttributes;
  //We specify within the graphic attributs that our surface is a SOLID.
  pGraphicAttributes.SetType(3);

  //In order to be able to see each LOD, we specify a different color
  //for each LOD:
  pGraphicAttributes.SetColor(TRUECOLOR);

  //Red for the most precise model.
<strong>  </strong>pGraphicAttributes.SetColorRGBA(255, 0, 0, <strong>255</strong>);
...</pre>
<p>The value 3 passed as the parameter of <code>SetType</code> indicates that the 
graphic primitive is a volume and participates to the ZBuffer. The graphic primitive 
color scheme is set as true color, and its color is set to red using the red color 
RGB components (255, 0, 0). The last parameter is the default value for alpha blending.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating the 3D Custom Representation</h3>
<pre class="code">...
  CAT3DCustomRep * _pTorusCustomRep = new CAT3DCustomRep();  // ou CAT3DCustomRep(pFace, pGraphicAttributes); 
...</pre>
<p>The custom representation to accommodate the graphic primitive is a 3D custom 
representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Associating the Representation with the Graphic Primitive</h3>
<pre class="code">...
  _pTorusCustomRep-&gt;AddGP(pFace, pGraphicAttributes);
...</pre>
<p>The representation is associated with the graphic primitive and its graphic attribute 
set.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Computing the Representation Bounding Box</h3>
<p>The representation needs a bounding box to improve the display process.</p>
<pre class="code">...
  //We MUST create the associated bounding box:
  float center[3] = {0.0, 0.0, 0.0};
  float radius = R+r;
  CAT3DBoundingSphere bs(center, radius);
  _pTorusCustomRep-&gt;SetBoundingElement(bs);
  _pTorusCustomRep-&gt;SetGraphicAttributeSet(pGraphicAttributes);
 
  delete [] vertices;
  delete [] normals;
  delete [] triangleStripIndices;
  delete [] nbVertexPerTriangleStrip;
}</pre>
<p>This bounding box is the sphere whose center is the torus center, and whose radius 
is the external torus radius.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Displaying the Created 3D Representation</h3>
<p>The <code>AddRepToViewer</code> method displays the created representation.</p>
<pre class="code">void CAAVisBaseDocument::AddRepToViewer()
{
  _pView-&gt;Add3DRep(_pRootContainer);
}</pre>
<p><code>_pView</code> is a pointer to the 3D navigation viewer. The representation 
is assigned to this viewer thanks to the <code>Add3DRep</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved when tessellating a torus, and the tessellation 
process, namely a 3D navigation viewer instance, a 3D representation bag, how to 
create vertices, normals, and strip triangles, how to create the graphic primitive 
and its associated bounding box to accommodate the torus, how to set its graphic 
attributes, how to create the 3D custom representation from the graphic primitive 
and its graphic attributes, compute the representation bounding box, and display 
the representation.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVisUcSampleLOD.htm">Creating Levels of Details</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Oct 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
