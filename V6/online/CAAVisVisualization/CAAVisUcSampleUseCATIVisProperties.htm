<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Modifying Object Graphical Properties</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Modifying Object Graphical Properties</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to use the <em>CATIVisProperties</em> interface 
		to modify the graphical aspect of an object.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAGviApplyProperties Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAGviApplyProperties Do</a></li>
					<li><a href="#How">How to Launch CAAGviApplyProperties</a></li>
					<li><a href="#Where">Where to Find the CAAGviApplyProperties 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This article shows how to use the <em>CATIVisProperties</em> interface to retrieve 
or set the graphical properties for CATIA features. This interface contains five 
main methods:</p>
<ol>
	<li><code>GetPropertiesAtt</code>, retrieves the properties</li>
	<li><code>SetPropertiesAtt</code>, modifies the properties
		<p>These two methods function on the same principle: there is a <em>CATVisPropertiesValues</em> 
		instance and two keys:</p>
		<ul>
			<li>The type of the geometry represented by the <em>CATVisGeomType</em> 
				typedef: a point ( CATVPPoint), a line ( CATVPLine), an edge of 
				a surface (CATVPEdge), a surface (CATVPMesh), etc.</li>
			<li>The type of the property represented by the <em>CATVisPropertyType</em> 
				enum: the color (CATVPColor), the line width (CATVPWidth), the line 
				type (CATVPLineType), etc.</li>
		</ul>
		<p>These two keys specify the valid attributes on the instance.</p>
	</li>
	<li><code>ResetPropertiesAtt</code>, resets the properties to follow the standard
	</li>
	<li><code>GetStandardProperties</code>, retrieves the standard properties
		<p>These two methods, as the two above, also work with the same two keys. 
		The reset is done on a feature for a given type of geometry and for a given 
		type of property.</p>
	</li>
	<li><code>IsGeomTypeDefined</code>, tells if a given type of geometry is recognized 
		by the feature.</li>
</ol>
<p>In this article you will learn to:</p>
<ul>
	<li>Use these five methods</li>
	<li>Handle the different geometry types and the different property types to 
		arrive at a specific visual effect</li>
	<li>Handle the <em>CATVisPropertiesValues</em> instance.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAGviApplyProperties Use Case</h2>
<p>CAAGviApplyProperties is a use case of the CAAGeometryVisualization.edu framework 
that illustrates Visualization and GeometryVisualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAGviApplyProperties Do</h3>
<p>The goal of this use case is to change the graphic properties of some GSM features.It 
is based on a delivered Part document called &quot;CAAProperty&quot; [<a href="#Fig.1">Fig.1</a>], 
located in the <code>CAAGeometryVisualization.edu/InputData</code> folder. This 
document contains the following elements:</p>
<table>
	<tr>
		<td>Point.1</td>
		<td>a green,full square point</td>
	</tr>
	<tr>
		<td>Line.1</td>
		<td>a solid, pickable line</td>
	</tr>
	<tr>
		<td>Extrude.1</td>
		<td>a yellow surface</td>
	</tr>
	<tr>
		<td>Sweep.2</td>
		<td>a surface with standard color</td>
	</tr>
	<tr>
		<td>Extrude.2</td>
		<td>a hidden surface</td>
	</tr>
</table>
<table>
	<caption><a name="Fig.1">Fig.1</a>: The CAAProperty Document</caption>
	<tr>
		<td>
		<img alt="CAAProperty Document" height="503" src="images/CAAVisPropertyWithComment.jpg" width="417"/></td>
	</tr>
</table>
<p>By using the <em>CATIVisProperties </em>interface, these elements become:</p>
<table>
	<tr>
		<td>Point.1</td>
		<td>a red, cross point</td>
	</tr>
	<tr>
		<td>Line.1</td>
		<td>a dashed,no-pickable line</td>
	</tr>
	<tr>
		<td>Extrude.1</td>
		<td>a surface with standard color</td>
	</tr>
	<tr>
		<td>Sweep.2</td>
		<td>a transparent surface with red edges</td>
	</tr>
	<tr>
		<td>Extrude.2</td>
		<td>a visible surface</td>
	</tr>
</table>
<p>The modifications are saved. [<a href="#Fig.2">Fig 2</a>]</p>
<table>
	<caption><a name="Fig.2"></a>Fig.2: The Modified Representation</caption>
	<tr>
		<td>
		<img alt="Modified Representation" height="473" src="images/CAAVisPropertyMWithComment.jpg" width="439"/></td>
	</tr>
</table>
<p>For the Line.1 feature, try going over on the line, it is not highlighted. For 
the Sweep.2 feature, turn the model, you can see through the surface because it 
is transparent.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAGviApplyProperties</h3>
<p>To launch CAAGviApplyProperties, you will need to set up the build time environment, 
then compile CAAGviApplyProperties along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>mkrun -c &quot;CAAGviApplyProperties Repository Server UserId Password role Environment 
PLMExternalIDValue Version&quot;</p>
<p>where the description of the arguments is the following:</p>
<table>
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
		<td rowspan="5">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>e4au2dsy:1571</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Username</td>
		<td>odtitp</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Password</td>
		<td><em>password</em></td>
	</tr>
	<tr>
		<td>5</td>
		<td>Role</td>
		<td>VPMDESIGNER.VPM.DEFAULT</td>
	</tr>
	<tr>
		<td>6</td>
		<td>PLM environment</td>
		<td>Engineering_Hub </td>
		<td rowspan="3">Environment</td>
	</tr>
	<tr>
		<td>7</td>
		<td>PLM Modeler</td>
		<td>PRODUCT</td>
	</tr>
	<tr>
		<td>8</td>
		<td>PLM Type</td>
		<td>RepReference</td>
	</tr>
	<tr>
		<td>9</td>
		<td>PLMExternalIDValue</td>
		<td>CAATpiAccessAnnotation</td>
		<td rowspan="2">Component Attribute </td>
	</tr>
	<tr>
		<td>10</td>
		<td>Version</td>
		<td>---</td>
	</tr>
</table>
<ul>
	<li><strong>Repository</strong>:
		<script type="text/javascript">insertRepository();</script>
	</li>
	<li><strong>Server</strong>: the name and port of the server as <em>name:port_number</em></li>
	<li><strong>User Id</strong>: the user identificator </li>
	<li><strong>SecurityCtx</strong>: a string representing the security context 
		( Role.Organization.Project).</li>
	<li><strong>Environment</strong>: a PLM environnement </li>
	<li><strong>PLMExternalIDValue</strong>: the value of the PLM_ExternalID attribute 
		of a PLM representation reference*.</li>
	<li><strong>Version</strong>: the value of the majorrevision attribute of a PLM 
		representation reference.</li>
</ul>
<p>* The input model is retrieved by importing the 3DXML file <strong>CAAGviApplyProperties.3dxml</strong> 
supplied in the CAAGeometryVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAGeometryVisualization.edu\InputData\CAAGviApplyProperties.3dxml</code></p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The <code><strong>PLM_ExternalId</strong></code> attribute value of the imported 
model is typically of the format &quot;<code><strong>YourPrefix + CAAGviApplyProperties</strong></code>&quot;, 
where <a><code><strong>YourPrefix</strong></code></a> is the string provided as 
prefix, while importing a 3D XML file to CATIA.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAGviApplyProperties Code</h3>
<p>The CAAGviApplyProperties use case is made of a main program located in the CAAGviApplyProperties.m 
module of the CAAGeometryVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAGeometryVisualization.edu\CAAGviApplyProperties.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>The main steps of CAAGviApplyProperties are:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving Features to Modify</a></li>
	<li><a href="#Step3">Modifying thePoint</a></li>
	<li><a href="#Step4">Modifying the Line</a></li>
	<li><a href="#Step5">Modifying the Sweep</a></li>
	<li><a href="#Step6">Resetting Graphical Properties</a></li>
	<li><a href="#Step7">Showing the Surface</a></li>
	<li><a href="#Step8">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>CAAGviApplyProperties begins by creating a session, and opening the 3D Representation. 
Next, it retrieves the root container of this 3D Representation as a pointer to
<em>CATIPrtContainer</em>, <code>piPartContainer</code>. This is the usual sequence 
for loading a 3D Representation.</p>
<p>Thanks to the <code>GetPart</code> method on the root container we retrieve the 
Mechanical Part feature handled by the smart pointer <code>spPart</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving Features to Modify</h3>
<p>The five features are inside the same Open Body:</p>
<pre class="code">...
  CATLISTV(CATBaseUnknown_var) surfBodies;  

  <strong>CATIPartRequest_var</strong> spPartAsRequest = spPart;
  spPart = NULL_var;
  
  const CATUnicodeString stdContext(&quot; &quot;); 
  	  
  spPartAsRequest-&gt;<strong>GetSurfBodies</strong>(stdContext, surfBodies);

  if ( (<strong>1 </strong>!= surfBodies.Size()) &amp;&amp; ( NULL_var != surfBodies[1]) )
  {
    ...
    return 1;
  }
  spPartAsRequest = NULL_var;
...</pre>
<p>The <em>CATIPartRequest_var</em> interface smart pointer is retrieved by the
<code>spPart</code> smart pointer. The <code>GetSurfBodies</code> method returns 
the list of the Open Bodies contained in the 3D Representation, and in the case 
of the input model, there is only one Open Body, so the size of the list is 1.</p>
<p>The features inside the Open Body, pointed to by <code>surfBodies[1]</code>, 
are retrieved thanks to the <em>CATIMmiUseBodyContent</em> interface:</p>
<pre class="code">...
  <strong>CATIMmiUseBodyContent</strong>_var spBodyContentsOnSurfBody = surfBodies[1];
  CATListValCATBaseUnknown_var ListFeatureInsideCurrentBody;
  spBodyContentsOnSurfBody-&gt;<strong>GetMechanicalFeatures</strong>(ListFeatureInsideCurrentBody) ;  
  ...
  <em>//The point - Point.1</em>
  CATBaseUnknown_var ThePoint = ListFeatureInsideCurrentBody[1]; 

  <em>// The line  - Line.1</em>
  CATBaseUnknown_var TheLine = ListFeatureInsideCurrentBody[18]; 

  <em>// The yellow surface - Extrude.1</em>
  CATBaseUnknown_var TheExtrude1Surface = ListFeatureInsideCurrentBody[15];
  
  <em>// The sweep surface - Sweep.2</em>
  CATBaseUnknown_var TheSweep2Surface = ListFeatureInsideCurrentBody[10]; 
  
  <em>// The hidden surface - Extrude.2 </em>
  CATBaseUnknown_var TheExtrude2Surface = ListFeatureInsideCurrentBody[20]; 
 ...</pre>
<p>The position of each element can be seen on [<a href="#Fig.1">Fig.1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Modifying the Point</h3>
<p>The point, Point.1, is represented by the <code>ThePoint</code> smart pointer 
in the code.In the above picture [<a href="#Fig.1">Fig.1</a>], you can see that 
this point is green and its symbol is a full square. But before changing its graphical 
properties, we verify its current properties:</p>
<p>Is it a green point ?</p>
<pre class="code">...
  <strong>CATIVisProperties</strong> * pIPropertiesOnPoint = NULL ;
  rc = ThePoint-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pIPropertiesOnPoint) ;
  ...
  
  CATVisPropertiesValues               MyPropertyOnPoint ;
  CATVisPropertyType PropTypeOnPoint = <strong>CATVPColor</strong> ;
  CATVisGeomType GeomTypeOnPoint     = <strong>CATVPPoint</strong> ;

  rc = pIPropertiesOnPoint-&gt;<strong>GetPropertiesAtt</strong>(MyPropertyOnPoint,
	                                    PropTypeOnPoint,
                                            GeomTypeOnPoint);
  if ( rc == S_OK )
  {
     unsigned int r,g,b ;
     MyPropertyOnPoint.<strong>GetColor</strong>(r,g,b);                                          
...</pre>
<p>We retrieve the <em>CATIVisProperties</em> interface pointer, <code>pIPropertiesOnPoint</code>, 
on the point. Thanks to this pointer and the <code>GetPropertiesAtt</code> method 
we can retrieve the color of the point:</p>
<ul>
	<li>The <code>GetPropertiesAtt</code> method returns the color information in 
		the <code>MyPropertyOnPoint</code> value.</li>
	<li><code>PropTypeOnPoint</code> is a <code>CATVPColor</code> to indicate that 
		only the color property is asked.</li>
	<li><code>GeomTypeOnPoint</code> is a <code>CATVPPoint</code> to indicate that 
		the type of the geometry is the point.</li>
</ul>
<p>The color is retrieved using the <code>GetColor</code> method on the <code>MyPropertyOnPoint</code> 
instance.</p>
<p>Is it a full square point ?</p>
<pre class="code">...
  PropTypeOnPoint = <strong>CATVPSymbol</strong>;
  rc = pIPropertiesOnPoint-&gt;<strong>GetPropertiesAtt</strong>(MyPropertyOnPoint,
	                                    PropTypeOnPoint,
                                             GeomTypeOnPoint);

  if ( rc == S_OK )
  {
     CATSymbolType symbol ;
     MyPropertyOnPoint.<strong>GetSymbolType</strong>(symbol);
     if ( symbol == FULLSQUARE )
     {
        ...
     }                                        
...</pre>
<p>This follows the same principle as the color property, changing only the property 
type in order to retrieve the point symbol.</p>
<ul>
	<li>The <code>GetPropertiesAtt</code> method returns the point symbol information 
		in the <code>MyPropertyOnPoint</code> instance.</li>
	<li><code>PropTypeOnPoint</code> is <code>a CATVPSymbol</code> to indicate that 
		only the point symbol property is asked</li>
	<li><code>GeomTypeOnPoint</code> is still <code>CATVPPoint</code></li>
</ul>
<p>The point symbol is retrieved using the <code>GetSymbol</code> method on the
<code>MyPropertyOnPoint</code> instance. <code>FULLSQUARE</code> is one of the values 
of the <em>CATSymbolType</em> enum.</p>
<p>Now,let's change the color of the point:</p>
<pre class="code">...
  PropTypeOnPoint = <strong>CATVPColor</strong> ;
  MyPropertyOnPoint.<strong>SetColor</strong>(255,0,0);
  rc = pIPropertiesOnPoint-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnPoint,
                                                PropTypeOnPoint,
                                                GeomTypeOnPoint);              
...</pre>
<p>The color is set on the <em>CATVisPropertiesValues</em> instance, <code>MyPropertyOnPoint</code>, 
using the <code>SetColor</code> method. The color is defined by its three components 
red, green and blue.</p>
<p>The color of the feature is modified by calling the <code>SetPropertiesAtt</code> 
method, using the <code>CATVPColor</code> as the property type and <code>CATVPPoint</code> 
as the geometry type.</p>
<p>Finally, the symbol of the point is changed as follows:</p>
<pre class="code">...
  PropTypeOnPoint = <strong>CATVPSymbol</strong> ;
  MyPropertyOnPoint.<strong>SetSymbolType</strong>(CROSS);
  rc = pIPropertiesOnPoint-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnPoint,
                                             PropTypeOnPoint,
                                             GeomTypeOnPoint); 
  ...                                           
  pIPropertiesOnPoint-&gt;Release();
  pIPropertiesOnPoint = NULL;
          
...</pre>
<p>The new symbol is set on the <em>CATVisPropertiesValues</em> instance, <code>
MyPropertyOnPoint</code>, using the <code>SetSymbolType</code> method. The list 
of supported symbols is defined by the <em>CATSymbolType</em> enum. CROSS is one 
of them.</p>
<p>The symbol of the feature is modified by calling the <code>SetPropertiesAtt</code> 
method using the <code>CATVPSymbol</code> as the property type and as always,
<code>CATVPPoint as</code> geometry type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Modifying the Line</h3>
<p>The line, Line.1, is represented by the <code>TheLine</code> smart pointer in 
the code.In the above picture [<a href="#Fig.1">Fig.1</a>], you can see that this 
line is a solid white line ended by two cross points.</p>
<p>At first, it is interesting to check the type of geometry supported by a GSM 
Line feature:</p>
<pre class="code">...
  CATIVisProperties * pIPropertiesOnLine = NULL ;
  rc = TheLine-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pIPropertiesOnLine) ;

  ...

  CATVisGeomType TypeLine = <strong>CATVPLine</strong>;
  CATVisGeomType TypeEdge = <strong>CATVPEdge</strong>;
  HRESULT rc1 = pIPropertiesOnLine-&gt;<strong>IsGeomTypeDefined</strong>(TypeLine);
  HRESULT rc2 = pIPropertiesOnLine-&gt;<strong>IsGeomTypeDefined</strong>(TypeEdge);
  if ( SUCCEEDED(rc1) and FAILED(rc2) )
  {
     cout &lt;&lt;&quot; The GSM Line supports the line type and not the edge type&quot; &lt;&lt; endl;
  }
...</pre>
<p>The <code>IsGeomTypeDefined</code> method enables querying the element about 
the geometry type it supports.</p>
<p>Now, let's change the type of the line from solid to dotted:</p>
<pre class="code">...
  CATVisPropertiesValues MyPropertyOnLine ;
  CATVisPropertyType PropTypeOnLine = <strong>CATVPLineType</strong> ;  
  CATVisGeomType GeomTypeOnLine = <strong>CATVPLine</strong> ;
  ...
  MyPropertyOnLine.<strong>SetLineType</strong>(2);
  rc = pIPropertiesOnLine-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnLine,
                                            PropTypeOnLine,
                                            GeomTypeOnLine);
...</pre>
<p>The <code>SetLineType</code> method modifies the type of the line on the <em>
CATVisPropertiesValues</em> instance. The argument of this method is an integer 
whose range is between 1 and 63 (*). The type of line, corresponding to each value 
is customizable through the Tools/Options/General/Display/Linetype page.(*) The 
first height values are statics.</p>
<p>The <code>SetPropertiesAtt</code> method modifies only the type of the line. 
To do this, we must specify that the type of the geometry, <code>GeomTypeOnLine</code>, 
is<code>CATVPLine</code> and the type of the property, <code>PropTypeOnLine</code>, 
is <code>CATVPLineType</code>.</p>
<p>Finally, we transform the line from a pickable state to a no-pickable state.</p>
<pre class="code">...
  MyPropertyOnLine.<strong>SetPickAttr</strong>(CATNoPickAttr);
  
  GeomTypeOnLine = <strong>CATVPGlobalType</strong> ;
  PropTypeOnLine = <strong>CATVPPick</strong> ;
  rc = pIPropertiesOnLine-&gt;SetPropertiesAtt(MyPropertyOnLine,
                                            PropTypeOnLine,
                                            GeomTypeOnLine);
  ...                                            
  pIPropertiesOnLine-&gt;Release();
  pIPropertiesOnLine = NULL;                                          
...</pre>
<p>The <code>SetPickAttr</code> method modifies the pickable state of the <em>CATVisPropertiesValues</em> 
instance. <code>CATNoPickAttr</code> is the no-pickable state, and <code>CATPickAttr</code> 
is the pickable state.</p>
<p>The property <code>CATVPPick</code> is not dedicated to a specific type of geometry: 
the feature is globally pickable or not. To be more precise, on a surface, for example, 
you cannot have its faces pickable and its edges no-pickable. So the type of the 
geometry is <code>CATVPGlobalType</code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Modifying the Sweep</h3>
<p>The sweep, Sweep.2, is represented by the <code>TheSweep2Surface</code> smart 
pointer in the code.Notice this white surface in the above picture [<a href="#Fig.1">Fig.1</a>].</p>
<p>At first, all the geometry types supported by a GSM surface are tested:</p>
<ul>
	<li>point (CATVPPoint): to modify the CATPoint of the surface</li>
	<li>lineic (CATVPEdge): to modify the CATEdge of the surface</li>
	<li>surfacic (CATVPMesh): to modify the CATFace of the surface</li>
	<li>CATVPGlobalType: to modify the show/no show, the pick/no pick and the layer 
		number.</li>
</ul>
<pre class="code">...
  CATIVisProperties * pIPropertiesOnSurface2 = NULL ;
  rc = TheSweep2Surface-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pIPropertiesOnSurface2) ;

  ...
  
  CATVisGeomType TypeEdge = CATVPEdge;
  CATVisGeomType TypePoint = CATVPPoint;
  CATVisGeomType TypeMesh = CATVPMesh;
  CATVisGeomType TypeGlobal = CATVPGlobalType;

  HRESULT rc3 = pIPropertiesOnSurface2-&gt;IsGeomTypeDefined(TypePoint);
  HRESULT rc4 = pIPropertiesOnSurface2-&gt;IsGeomTypeDefined(TypeEdge);
  HRESULT rc5 = pIPropertiesOnSurface2-&gt;IsGeomTypeDefined(TypeMesh);
  HRESULT rc6 = pIPropertiesOnSurface2-&gt;IsGeomTypeDefined(TypeGlobal);
...</pre>
<p>Next, the color of the surface and the width of its edges are changed:</p>
<pre class="code">...
  CATVisPropertiesValues MyPropertyOnSurface2 ;
  CATVisPropertyType PropTypeOnSurface2 = <strong>CATVPAllPropertyType</strong> ;
  CATVisGeomType GeomTypeOnSurface2     = <strong>CATVPEdge</strong> ;

  rc = pIPropertiesOnSurface2-&gt;<strong>GetPropertiesAtt</strong>(MyPropertyOnSurface2,
                                                PropTypeOnSurface2,
                                                GeomTypeOnSurface2);
 ...
  MyPropertyOnSurface2.<strong>SetColor</strong>(230,0,0);
  MyPropertyOnSurface2.<strong>SetWidth</strong>(4);

  rc = pIPropertiesOnSurface2-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnSurface2,
                                                PropTypeOnSurface2,
                                                GeomTypeOnSurface2);
...</pre>
<p>To change the color and the width, the <code>SetPropertiesAtt</code> method can 
be called twice: once with the <code>CATVPColor</code> property type and once with
<code>CATVPWidth</code>. In the two calls, the type of the geometry is always
<code>CATVPEdge</code>. But the feature can also be modified with one call in using 
the <code>CATVPAllPropertyType</code> property type. In this case, all the properties 
set on the <em>CATVisPropertiesValues</em> instance, <code>MyPropertyOnSurface2</code>, 
will be used by the <code>SetPropertiesAtt</code> method to modify the feature. 
So, it is really important to initialize <code>MyPropertyOnSurface2</code> with 
the <code>GetPropertiesAtt</code> method, before modifying it.</p>
<p><code>MyPropertyOnSurface2</code> is modified by two methods: <code>SetColor</code> 
to associate a red color and <code>SetWidth</code> to set a new line width number. 
The width of a line is an integer whose range is between 1 and 55. The width corresponding 
to each integer value is customizable through the Tools/Options/General/Display/Thickness &amp; 
Font page.</p>
<p>Now, let's change the surfacic properties of the surface:</p>
<pre class="code">...
  PropTypeOnSurface2 = <strong>CATVPAllPropertyType</strong> ;
  GeomTypeOnSurface2 = <strong>CATVPMesh</strong> ;
  
  rc = pIPropertiesOnSurface2-&gt;<strong>GetPropertiesAtt</strong>(MyPropertyOnSurface2,
                                                PropTypeOnSurface2,
                                                GeomTypeOnSurface2);
  MyPropertyOnSurface2.<strong>SetColor</strong>(0,0,20);
  MyPropertyOnSurface2.<strong>SetOpacity</strong>(50);

  rc = pIPropertiesOnSurface2-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnSurface2,
                                                PropTypeOnSurface2,
                                                GeomTypeOnSurface2);
  ...
  pIPropertiesOnSurface2-&gt;Release();
  pIPropertiesOnSurface2 = NULL;
...</pre>
<p>The surfacic properties are represented by the <code>CATVPMesh</code> geometry 
type. As for the edge properties (see above) this can be done with one call to
<code>SetPropertiesAtt</code> using the <code>CATVPAllPropertyType</code> property 
type, in order to change all the surfacic properties once.</p>
<p>The <em>CATVisPropertiesValues</em> instance, <code>MyPropertyOnSurface2</code>, 
is initialized by the <code>GetPropertiesAtt</code> method. Next, the color (blue) 
and the degree of opacity are modified. The opacity is defined by an integer whose 
range is between 0 (total transparency) and 255 (total opacity).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Resetting Graphical Properties</h3>
<p>The surface, Extrude.1, is represented by the <code>TheExtrude1Surface</code> 
smart pointer in the code.In the above picture [<a href="#Fig.1">Fig.1</a>], you 
can recognize this yellow surface with its white edges.</p>
<pre class="code">...
  <strong>CATIVisProperties</strong> * pIPropertiesOnSurface1 = NULL ;
  rc = TheExtrude1Surface-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pIPropertiesOnSurface1) ;
 
  ...
  
  CATVisPropertiesValues MyPropertyOnSurface1 ;

  CATVisPropertyType PropTypeOnSurface1 = <strong>CATVPAllPropertyType</strong>;
  CATVisGeomType GeomTypeOnSurface1     = <strong>CATVPMesh</strong> ;
  rc = pIPropertiesOnSurface1-&gt;<strong>ResetPropertiesAtt</strong>(PropTypeOnSurface1,GeomTypeOnSurface1);
  ...

  pIPropertiesOnSurface1-&gt;Release();
  pIPropertiesOnSurface1 = NULL;
...</pre>
<p>To reset a graphical property, two keys are necessary:</p>
<ul>
	<li>The type of property: In this case all the properties will be reset. The 
		first argument, <code>PropTypeOnSurface1</code>, is <code>CATVPAllpropertyType</code>
	</li>
	<li>The concerned geometry: here <code>CATVPMesh</code>, so the second argument,
		<code>GeomTypeOnSurface1</code>, is <code>CATVPMesh</code>.</li>
</ul>
<p>The reset will be done on all the properties of the <em>CATFace</em> elements 
forming the surface: The color and the opacity.</p>
<p>Resetting a graphical property means that the property, stored by the <em>CATIProperty</em> 
interface, is not used; a default value, defined by the implementation of the
<code>GetStandardProperties</code> method, is used as &quot;standard&quot;.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Showing the surface</h3>
<p>The surface, Extrude.2, is represented by the <code>TheExtrude2Surface</code> 
smart pointer in the code. In the above picture [<a href="#Fig.1">Fig.1</a>], you 
can not see it, it is hidden. In an interactive session, you can see it by going 
to the hidden space.</p>
<pre class="code">...
  <strong>CATIVisProperties</strong> * pIPropertiesOnSurface3 = NULL ;
  rc = TheExtrude2Surface-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pIPropertiesOnSurface3) ;
 
  ...

  CATVisPropertiesValues MyPropertyOnSurface3 ;
  CATVisPropertyType PropTypeOnSurface3 = <strong>CATVPShow</strong> ;
  CATVisGeomType GeomTypeOnSurface3     = <strong>CATVPGlobalType</strong> ;
  MyPropertyOnSurface3.<strong>SetShowAttr</strong>(CATShowAttr);

  rc = pIPropertiesOnSurface3-&gt;<strong>SetPropertiesAtt</strong>(MyPropertyOnSurface3,
                                                PropTypeOnSurface3,
                                                GeomTypeOnSurface3);
  ...

  pIPropertiesOnSurface3-&gt;Release();
  pIPropertiesOnSurface3 = NULL;
}</pre>
<p>The show/no show state is modifiable using the <code>CATVPGlobalType</code> geometry 
type and, of course, using the <code>CATVPShow </code>property type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Epilog</h3>
<p>The last part of the CAAGviApplyProperties use case shows how to save the imported 
3DXML, removes it from the session and delete the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article illustrates how to use the <em>CATIVisProperties</em> interface 
to modify or retrieve the graphical properties of a feature. It explains how to 
change:</p>
<ul>
	<li>The color of a point, an edge, a line, a face of a surface,</li>
	<li>The selectability state, (pick/no-pick)</li>
	<li>The visibility state,(show/no-show)</li>
	<li>The width and the type of a line</li>
</ul>
<p>and how to reset graphic attributes.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2002]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jan 2007]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
