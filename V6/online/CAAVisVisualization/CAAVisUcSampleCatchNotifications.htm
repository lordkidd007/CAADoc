<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Catching the Visualization Notifications</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Catching the Visualization Notifications</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAVisManager use case. This use case explains 
		how to create and implement a specific visualization interface for geometric 
		components, how to make the visualization manager aware of this interface 
		to display these components, and how to catch the visualization notifications 
		to manage the PSO and HSO contents. This article focuses on catching the 
		visualization notifications.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAVisManager Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisManager Do</a></li>
					<li><a href="#How">How to Launch CAAVisManager</a></li>
					<li><a href="#Where">Where to Find the CAAVisManager Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>When a model is displayed in one or several windows and when the end user works 
in one of these windows, visualization notifications [<a href="#References">1</a>] 
that indicate the end user intents or actions are sent to a selector object attached 
to the model's editor. This selector must catch the notifications to process, take 
appropriate actions, and must be transparent for other notifications. With this 
use case, you will learn how a selector object can catch and process the visualization 
notifications. Companion articles of this use case deal with the implementation 
of a visualization interface of your own [<a href="#References">2</a>], and with 
the use of the visualization manager [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisManager Use Case</h2>
<p>CAAVisManager is a set of use cases of the CAAVisualization.edu framework that 
illustrates Visualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisManager Do</h3>
<p>CAAVisManager contains a series of modules that make up a small application. 
This article focuses on catching the visualization notifications to manage the PSO 
and HSO contents, how to decode a path element, and how to set a contextual menu 
on component representations. To do this, a selector class [<a href="#References">3</a>] 
deriving from the <em>CATCommand</em> class [<a href="#References">4</a> ] is created. 
It is instantiated for each model by the model's editor, and passed to the visualization 
manager when attaching it to the model root object. Thus, the visualization notifications 
are sent to the selector that can decide to process them. The selector recognizes 
the notifications in the redefined <code>AnalyseNotification</code> method inherited 
from <em>CATCommand</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch the CAAVisManager</h3>
<p>To launch CAAVisManager, you will need to set up the build time environment, 
then compile the four CAAVisManager modules along with their prerequisites, set 
up the run time environment, and then execute the use case [<a href="#References">5</a>]. 
You cannot launch CAAVisManager itself. CAAVisManager is simply used by the CAAVisManagerAppli 
use case. Type CAAVisManagerAppli instead of CAAVisManager to display the interactive 
application along with a viewer that displays the CAAVisManagerDefaultDocument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisManager Code</h3>
<p>CAAVisManager code is located in the CAAVisualization.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>CAAVisManager includes the following modules:</p>
<table>
	<colgroup span="1" valign="top">
	</colgroup>
	<tr>
		<td>CAAVisManagerAppli.m</td>
		<td>Contains the interactive application, the windows and the models</td>
	</tr>
	<tr>
		<td>CAAVisManagerComp.m</td>
		<td>Contains the geometric components to display</td>
	</tr>
	<tr>
		<td>CAAVisManagerImp.m</td>
		<td>Contains the extension classes required to make the geometric components 
		displayable</td>
	</tr>
	<tr>
		<td>CAAVisManagerInt.m</td>
		<td>Contains the interfaces implemented by the geometric components, especially 
		the visualization interface. Their header files are located in the PrivateInterfaces 
		directory</td>
	</tr>
</table>
<p>This use case details the <code>AnalyseNotification</code> method of the <em>
CAAVisManagerCmdSelector</em> class in the CAAVisManagerAppli.m module.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To redefine the <code>AnalyseNotification</code> method of the <em>CAAVisManagerCmdSelector</em> 
class to catch the visualization notifications, there are nine main steps:</p>
<ol>
	<li><a href="#Step1">Catching Notifications</a></li>
	<li><a href="#Step2">Catching CATPreactivate Notifications</a></li>
	<li><a href="#Step3">Catching CATEndPreactivate Notifications</a></li>
	<li><a href="#Step4">Catching CATActivate Notifications</a></li>
	<li><a href="#Step5">Catching CATEndActivate Notifications</a></li>
	<li><a href="#Step6">Catching CATMove Notifications</a></li>
	<li><a href="#Step7">Catching CATBeginManipulate, CATManipulate, and CATEndManipulate 
		Notifications</a></li>
	<li><a href="#Step8">Catching CATContext Notifications</a></li>
	<li><a href="#Step9">Catching CATEndContext Notifications</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Catching Notifications</h3>
<pre class="code">CATNotifPropagationMode CAAVisManagerCmdSelector::<strong>AnalyseNotification</strong>(
                                                   CATCommand * iFromClient,
                                                   CATNotification * iNotification)
{
  CATNotifPropagationMode propMode = <strong>CATNotifTransmitToFather</strong>;

  if ( iNotification-&gt;IsAKindOf(<strong>CATManipulatorNotification::ClassName</strong>()) )
  {
    ...  // see coming steps
    propMode = <strong>CATNotifDontTransmitToFather</strong>;
  }
  else  if ( iNotification-&gt;IsAKindOf(<strong>CATMultiSel::ClassName</strong>()) )
  {
    propMode = <strong>CATNotifDontTransmitToFather</strong>;
    CATSO * pSetOfObjects = (CATSO *) iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                         CATPathElement::ClassName(), iNotification);
    if  (NULL != pSetOfObjects)
    {
      CATBaseUnknown *pComp = NULL;
      for (int ii=0; pComp=(*pSetOfObjects)[ii]; ii++)
      {
        _Hso.<strong>AddElements</strong>(pComp);
      }
      _Hso.<strong>EndAddElements</strong>();
    }
    pSetOfObjects-&gt;Release();
    pSetOfObjects = NULL;
  }
  return propMode;
}</pre>
<p><em>CAAIVisManagerCmdSelector</em> derives from the <em>CATCommand</em> class 
and redefines the <code>AnalyseNotification</code> method. Any received notification 
is analyzed and, if the notification is an instance of a class that is, or derives 
from, <em>CATManipulatorNotification</em> or <em>CATMultiSel</em> notification classes, 
the notification is caught and processed, appropriate actions are undertaken, and 
the notification propagation is stopped because <code>AnalyseNotification</code> 
returns <code>CATNotifDontTransmitToFather</code>. Otherwise, the notification goes 
on up the command tree structure since <code>AnalyseNotification</code> returns
<code>CATNotifTransmitToFather</code>. The case of <em>CATManipulatorNotification</em> 
is detailed in the coming steps. Let see what's happen if a <em>CATMultiSel</em> 
notification class instance is received.</p>
<p>In this case, a multiselection occurred. Several components are selected, and 
can be retrieved by calling the <code>SendCommandSpecificObject</code> method of 
the sending command, that is, the child <em>CATSelector</em> instance associated 
with the current selector. <code>SendCommandSpecificObject</code> returns these 
components in a <em>CATSO</em> instance, that is, a set of objects. Each component 
found in this set is added to the HSO to highlight it thanks to the <code>AddElements</code> 
method. The highlight takes place when the set of objects scan is completed thanks 
to the <code>EndAddElements</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Catching CATPreactivate Notifications</h3>
<pre class="code">    ...
    if  ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATPreactivate</strong>()) )
    {
      CATPathElement * pPath =
       (CATPathElement *)iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                          CATPathElement::ClassName(),
                                          iNotification);
      if ( NULL != pPath )
      {
        _Pso.<strong>AddElement</strong>(pPath);
        pPath-&gt;Release();
      }
    }
    ...</pre>
<p>A <em>CATPreactivate</em> notification is sent whenever the mouse moves above 
a representation with no button pressed. In this case, the <code>SendCommandSpecificObject</code> 
method of the sending command, that is, the child <em>CATSelector</em> instance 
associated with the current selector, retrieves the path element of the representation 
under the mouse, and if a valid path is retrieved, adds it to the PSO to prehighlight 
the associated representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Catching CATEndPreactivate Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::GetCATEndPreactivate()) )
    {
      CATPathElement * pPath =
       (CATPathElement *)iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                          CATPathElement::ClassName(),
                                          iNotification);
      if ( NULL != pPath )
      {
        _Pso.<strong>RemoveElement</strong>(pPath);
        pPath-&gt;Release();
      }
    }
    ...</pre>
<p>A <em>CATEndPreactivate</em> notification is sent whenever the mouse leaves a 
representation with no button pressed. In this case, the <code>SendCommandSpecificObject</code> 
method of the sending command, that is, the child <em>CATSelector</em> instance 
associated with the current selector, retrieves the path element of the representation 
leaved by the mouse, and if a valid path is retrieved, removes it from the PSO to 
dehighlight the associated representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Catching CATActivate Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATActivate</strong>()) )
    {
      CATPathElement * pPath =
       (CATPathElement *)iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                          CATPathElement::ClassName(),
                                          iNotification);
      _Hso.<strong>Empty</strong>();

      if ( NULL != pPath )
      {
        _Hso.<strong>AddElement</strong>(pPath);
        pPath-&gt;Release();
      }
      else
      {
        _Pso.<strong>Empty</strong>();
      }
    }
    ...</pre>
<p>A <em>CATActivate</em> notification is sent whenever the mouse left button is 
pressed above a representation. In this case, the <code>SendCommandSpecificObject</code> 
method of the sending command, that is, the child <em>CATSelector</em> instance 
associated with the current selector, retrieves the path element of the representation 
under the mouse, empties the HSO to leave it for the newly activated representation, 
and if a valid path is retrieved, adds it to the HSO to highlight the associated 
representation. If no valid path is retrieved, the PSO is also emptied because it 
could contain the path element of the activated component, added when it was preactivated. 
This path could have become invalid between the preactivation and the activation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Catching CATEndActivate Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATEndActivate</strong>()) )
    {
      CATPathElement * pPath =
       (CATPathElement *)iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                          CATPathElement::ClassName(),
                                          iNotification);

      if ( NULL != pPath )
      {
        _Hso.<strong>RemoveElement</strong>(pPath);
        pPath-&gt;Release();
      }
    }
    ...</pre>
<p>A <em>CATEndActivate</em> notification is sent whenever the mouse left button 
is pressed above another representation not controlled by the manipulator or above 
the background. In this case, the <code>SendCommandSpecificObject</code> method 
of the sending command, that is, the child <em>CATSelector</em> instance associated 
with the current selector, retrieves the path element of the representation that 
was activated and removes it from the HSO.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Catching CATMove Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATMove</strong>()) )
    {
      _Pso.<strong>Empty</strong>();
      CATPathElement * pPath =
       (CATPathElement *)iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(
                                          CATPathElement::ClassName(),
                                          iNotification);
      if ( NULL != pPath )
      {
        _Pso.<strong>AddElement</strong>(pPath);
        pPath-&gt;Release();
      }
    }
    ...</pre>
<p>A <em>CATMove</em> notification is sent whenever the mouse moves above a representation. 
In this case, the PSO is emptied, the <code>SendCommandSpecificObject</code> method 
of the sending command, that is, the child <em>CATSelector</em> instance associated 
with the current selector, retrieves the path element of the representation above 
which the mouse moves, and adds it to the PSO to prehighlight the associated representation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Catching CATBeginManipulate, CATManipulate, and CATEndManipulate 
Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATBeginManipulate</strong>()) )
    {}
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATManipulate</strong>()) )
    {}
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATEndManipulate</strong>()) )
    {}
    ...</pre>
<p>A <em>CATBeginManipulate</em> notification is sent whenever the mouse begins 
to move above an activated representation, that is with the mouse left button pressed. 
If the mouse goes on moving with the mouse left button pressed, <em>CATManipulate</em> 
notifications are sent as long as the mouse moves. When the left button is released, 
A <em>CATEndManipulate</em> notification is sent. These notifications are simply 
caught with no associated action.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Catching CATContext Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATContext</strong>()) )
    {
      CATPathElement *pPath = (CATPathElement *) 
        iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(CATPathElement::ClassName(),iNotification);
      if (NULL != pPath) 
      {		
        CATBaseUnknown *lastobj_of_path = (*pPath)[pPath-&gt;GetSize()-1];
        if (NULL != lastobj_of_path)
        {
          CATViewer * pViewer = (CATViewer *) 
                 iFromClient-&gt;<strong>SendCommandSpecificObject</strong>(CATViewer::ClassName(),
                                                        iNotification);
          if ( NULL != pViewer)
          {
            _Pso.Empty();
            _Hso.Empty();
            _Hso.AddElement(pPath);
            _pCxtMenu = new CAAVisManagerCxtMenu(this, &quot;Context&quot;, pPath, pViewer);
            _pCxtMenu-&gt;Build();

            pViewer-&gt;Release();
            pViewer = NULL ;
          }
        }
        else
        {
          propMode = <strong>CATNotifTransmitToFather</strong>;
        }
        pPath-&gt;Release();
        pPath = NULL;
      }
    }
    ...</pre>
<p>A <em>CATContext</em> notification is sent whenever the mouse right button is 
pressed above a representation. In this case, the <code>SendCommandSpecificObject</code> 
method of the sending command, that is, the child <em>CATSelector</em> instance 
associated with the current selector, retrieves the path element of the representation 
under the mouse. The viewer is also retrieved thanks to the <code>SendCommandSpecificObject</code> 
method. If a valid path and a valid viewer are retrieved, the PSO and the HSO are 
emptied, the retrieved path is added to the HSO to highlight the associated representation, 
and a contextual menu is created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Catching CATEndContext Notifications</h3>
<pre class="code">    ...
    else if ( iNotification-&gt;IsAKindOf(CATManipulator::<strong>GetCATEndContext</strong>()) )
    {
      if ( NULL != _pCxtMenu )
      {
        _Hso.Empty();
        _pCxtMenu-&gt;RequestDelayedDestruction();
        _pCxtMenu = NULL ;
      }
    }
    ...</pre>
<p>A <em>CATEndContext</em> notification is sent whenever the mouse right button 
is released. In this case, the HSO is emptied and the contextual menu is deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows how to catch the visualization notifications by redefining 
the <code>AnalyseNotification</code> method of <em>CATCommand</em>. Their types 
can be recognized thanks to the <code>IsAKindOf</code> method and appropriate actions 
can be undertaken.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAVisTaViewerProtocol.htm">Conveying End User Intent from 
		Mouse to Controller</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAVisUcSampleCATIVisu.htm">Making a Component Displayable 
		With CATI3DGeoVisu</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAVisUcSampleVisManager.htm">Using the Visualization Manager</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidSendReceive.htm">
		The Send/Receive Communication Protocol</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2000]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Dec 2006]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
