<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Understanding the Basics of the Visualization Process</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Understanding the Basics of the Visualization Process</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a <em>CAT3DFaceGP</em> class instance 
		to tesselate a torus and how to display it using a <em>CAT3DCustomRep</em> 
		instance.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAVisBasicAppli Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAVisBasicAppli Do</a></li>
					<li><a href="#How">How to Launch CAAVisBasicAppli</a></li>
					<li><a href="#Where">Where to Find the CAAVisBasicAppli Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case explains how to create representations, to set their graphic attributes, 
to compute their bounding sphere, and how to display them in a viewer.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAVisBasicAppli Use Case</h2>
<p>CAAVisBasicAppli is a use case of the CAAVisualization.edu framework that illustrates 
Vizualization framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAVisBasicAppli Do</h3>
<p>CAAVisBasicAppli includes an interactive application that displays a 3D navigation 
viewer in its document window. This viewer shows a simple model representation made 
of a cuboid and a sphere. They are displayed as soon as the application is launched.</p>
<p>
<img alt="Simple Graphic Representation" height="429" src="images/CAAVisBasic.jpg" width="479"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAVisBasicAppli</h3>
<p>To launch CAAVisBasicAppli, you will need to set up the build time environment, 
then compile CAAVisBasicAppli along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAVisBasicAppli Code</h3>
<p>The CAAVisBasicAppli use case is made of two classes named <em>CAAVisBasicApplication</em> 
and <em>CAAVisBasicWindow</em> located in the CAAVisBasicAppli.m module of the CAAVisualization.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAVisualization.edu\CAAVisBasicAppli.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<table>
	<colgroup span="3" valign="top">
	</colgroup>
	<tr>
		<th>#</th>
		<th>Step</th>
		<th>Where</th>
	</tr>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Create a 3D navigation viewer instance</a></td>
		<td><code>CreateViewer</code> method</td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Create a 3D representation bag</a></td>
		<td><code>CreateModelRepresentation</code> method</td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Create the cuboid 3D representations</a></td>
		<td><code>CreateModelRepresentation</code> method</td>
	</tr>
	<tr>
		<td>4</td>
		<td><a href="#Step4">Set graphic attributes to the representation</a></td>
		<td><code>CreateModelRepresentation</code> method</td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Compute the graphic representation bounding box</a></td>
		<td><code>CreateModelRepresentation</code> method</td>
	</tr>
	<tr>
		<td>6</td>
		<td><a href="#Step6">Add the representation to the representation bag</a></td>
		<td><code>CreateModelRepresentation</code> method</td>
	</tr>
	<tr>
		<td>7</td>
		<td><a href="#Step7">Display the representation bag and its children</a></td>
		<td><code>VisualizeModel</code> method</td>
	</tr>
</table>
<p>Only the cuboid is taken as an example and described. All the methods belong 
to the <em>CAAVisBasicWindow</em> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a 3D Navigation Viewer Instance</h3>
<p>The 3D navigation viewer is an instance of the <em>CATNavigation3DViewer</em> 
class. It is created in the <code>CreateViewer</code> method of the <em>CAAVisBasicWindow</em> 
class that is called when the application is launched.</p>
<pre class="code">void CAAVisBasicWindow::CreateViewer()
{
  _p3DViewer = new CATNavigation3DViewer(this,
                                         &quot;3DViewerId&quot;,
                                         CATDlgFraNoTitle,
                                         800, 450);
  _p3DViewer-&gt;SetBackgroundColor(0.2f,0.2f,0.6f);
Attach4Sides(_p3DViewer);
}</pre>
<p>The <code>_pViewer</code> pointer to the 3D navigation viewer is kept as a data 
member of the <em>CAAVisBAseView</em> class. Its parameter are:</p>
<table>
	<colgroup span="2" valign="top">
	</colgroup>
	<tr>
		<td><code>this</code></td>
		<td>The viewer parent in the dialog containment tree structure and in the 
		command tree structure [a]</td>
	</tr>
	<tr>
		<td><code>3DViewer</code></td>
		<td>The viewer identifier</td>
	</tr>
	<tr>
		<td><code>CATDlgFraNoTitle</code></td>
		<td>The viewer has no title [b]</td>
	</tr>
	<tr>
		<td><code>850, 450</code></td>
		<td>The viewer width and height expressed in pixels</td>
	</tr>
</table>
<p>The <code>SetBackGroundColor</code> method sets the viewer background color to 
a shade of blue. The <code>Attach4Sides</code> method attaches the four sides of 
the viewer to those of the window. This makes the viewer occupy the whole window 
space.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a 3D Representation Bag</h3>
<pre class="code">void CAAVisBasicWindow::CreateModelRepresentation()
{
  _pTheModelToDisplay = new CAT3DBagRep();
...</pre>
<p>The <code>CreateModelRepresentation</code> of <em>CAAVisBasicWindow</em> begins 
by creating the representation bag to attach to the viewer.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Cuboid 3D Representation</h3>
<pre class="code">...
  CATMathPointf  Corner      (-20.f, -20.f,  0.f);
  CATMathVectorf FirstVector ( 20.f,   0.f,  0.f);
  CATMathVectorf SecondVector(  0.f,  20.f,  0.f);
  CATMathVectorf ThirdVector (  0.f,   0.f, 20.f);

  CAT3DCuboidRep * pCuboid = new CAT3DCuboidRep(Corner,
                                                FirstVector,
                                                SecondVector,
                                                ThirdVector);
...</pre>
<p>The cuboid geometric components are created. These comprise a point and three 
vectors that define the three edges starting from this point. They are then passed 
to the <em>CAT3DCuboidRep</em> constructor.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Graphic Attributes to the Representation</h3>
<pre class="code">...
  if ( NULL != pCuboid )
  {
    pCuboid-&gt;SetColor(YELLOW);
...</pre>
<p>The cuboid is now yellow.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Computing the Graphic Representation Bounding Box</h3>
<p>The graphic representation needs a bounding box to improve the display process.</p>
<pre class="code">...
  CATMathPoint Center = Corner + (FirstVector + SecondVector + ThirdVector)/2;
  float Radius = (float) Corner.DistanceTo(Center);
  CAT3DBoundingSphere BoundingSphere(Center,Radius);
  pCuboid-&gt;SetBoundingElement(BoundingSphere);
...</pre>
<p>This bounding box is sphere whose center is the cuboid center, and whose radius 
is the distance between this center and the point used as corner when defining the 
cuboid. The bounding box is used to decide whether the representation should be 
displayed with respect to the current viewpoint without interpreting the representation 
itself, thus increasing display performance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Adding the Representation to the Representation Bag</h3>
<pre class="code">...
  _pTheModelToDisplay-&gt;AddChild(*pCuboid);
}</pre>
<p>The created representation is added to the representation bag thanks to the
<code>AddChild</code> method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Displaying the Representation Bag and Its Children</h3>
<pre class="code">void CAAVisBasicWindow::VisualizeModel()
{
  if ( (NULL != _p3DViewer) &amp;&amp; ( NULL != _pTheModelToDisplay) )
  {    
    _p3DViewer-&gt;AddRep((CAT3DRep*)_pTheModelToDisplay);
    _p3DViewer-&gt;Draw();
  }
}</pre>
<p>The representation bag is added to viewer, and the viewer is asked to draw itself.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows the objects involved in the visualization process. A representation 
bag is first created to contain the other representations. Each representation is 
then created with its own geometric characteristics, can be assigned attributes, 
and its bounding sphere is computed. Each representation is added to the representation 
bag, and the bag is set to the viewer. Then the viewer is asked to draw itself.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2000]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
