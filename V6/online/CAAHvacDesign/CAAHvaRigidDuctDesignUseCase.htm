<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Rigid Duct Object Access and Navigation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Rigid Duct Object Access and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAAHvaRigidDuctDesignImpl use case. This use 
		case explains how to use, access and navigate rigid duct and it&#39;s parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAHvaRigidDuctDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAHvaRigidDuctDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAHvaRigidDuctDesignImpl</a></li>
				<li><a href="#Where">Where to Find the CAAHvaRigidDuctDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you first steps in programming with
CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) Interfaces.
		<br/>
				Its main intent is to provide you information about it's use, access and navigate rigid duct.
 </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAHvaRigidDuctDesignImpl Use Case</h2>
<p>CAAHvaRigidDuctDesignImpl is a use case of the CAAHvacDesign.edu framework that illustrates CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) framework
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAHvaRigidDuctDesignImpl Do</h3>
<p>The goal of CAAHvaRigidDuctDesignImpl use case is to show how to use and navigate rigid duct.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAHvaRigidDuctDesignImpl</h3>
<p>To launch CAAHvaRigidDuctDesignImpl, you will need to set up the build time environment, then 
compile CAAHvaRigidDuctDesignImpl along with it&#39;s prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAHvaRigidDuctDesignImpl Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID1 PLM_ExternalID2&quot;</em></pre>
<p>where:</p>
<table class="border1">
  <tr>
    <th>Repository</th>
    <td>
    <script type="text/javascript">insertRepository();</script>
    </td>
  </tr>
  <tr>
    <th>Server</th>
    <td>The server as <em>protocol://Host:port_number/RootURI</em></td>
  </tr>
  <tr>
    <th>User</th>
    <td>The user name.</td>
  </tr>
  <tr>
    <th>Password</th>
    <td>The user password to authenticate the user.</td>
  </tr>
  <tr>
    <th>SecurityCtx</th>
    <td>A string representing the security context (Role.Organization.Project). 
    Choose Role as Designer.</td>
  </tr>
  <tr>
    <th>Version</th>
    <td>The V_Version attribute value of the reference to be opened.</td>
  </tr>
  <tr>
    <th>PLMType </th>
    <td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
  </tr>
  <tr>
    <th>PLM_ExternalID1</th>
    <td>The value of the <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.</td>
  </tr>
  <tr>
    <th>PLM_ExternalID2</th>
    <td>The value of the <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation Reference be browsed for Logical Structure.</td>
  </tr>
</table>

<p>* The input model is retrieved by importing 3dxml file from the 
   <strong>CAAHvacDesign.edu</strong> framework as below :<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleData.3dxml</strong> for HVAC product Data<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleResourceSet.3dxml</strong> for PRM Data Resource set<br/>&nbsp;&nbsp;
   <br/>&nbsp;
   <code>InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleData.3dxml
   <br/>&nbsp;InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleResourceSet.3dxml
   </code>
</p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the Root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID1</strong></code></a> :
    <code>HVAC_Physical_Root</code></li>
  <li><a><code><strong>PLM_ExternalID2</strong></code></a> :
    <code>Logical_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a> :
    <code>A</code></li>
</ul>
<p>
  <img width="100%" alt="Sample Product" src="images/CAAHvacDesignSampleData.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>HvacDesignSampleData.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2 will be different 
                            as per user CATIA session 
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; as it is genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAHvaRigidDuctDesignImpl Code</h3>
<p>The CAAHvaRigidDuctDesignImpl use case is made of several classes/a single file located in the 
CAAHvaRigidDuctDesignImpl.m module of the CAAHvacDesign.edu framework: <code>InstallRootFolder\CAADoc\CAAHvacDesign.edu\CAAHvaRigidDuctDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table>
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Class to create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>Class to retrieve the Product Reference or Representation Reference.</td>
  </tr>
  <tr>
    <td><em>CATAdpOpener</em></td>
    <td>Class to open the Logical Root Product.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) environment and it&#8217;s components 
creation by looking at the code <br/> of the CAAHvaRigidDuctDesignImpl. There are 20 logical steps in CAAHvaRigidDuctDesignImpl :
</p>
<ol>
	<li><a href="#Step1">Checking the Input Data</a></li>
	<li><a href="#Step2">Creating a Session</a></li>
	<li><a href="#Step3">Querying/Opening/Expanding the Physical Reference Product with it&#8217;s Associated Representation</a></li>
	<li><a href="#Step4">Querying/Opening/Expanding the Logical Reference Product with it&#8217;s Associated Representation</a></li>
	<li><a href="#Step5">Creating the root occurrence for the opened reference product</a></li>
	<li><a href="#Step6">Navigate the list of occurrences to get the instance and reference of Rigid Duct</a></li>
	<li><a href="#Step7">Checking the current occurrence is Rigid duct instance object and get its reference object</a></li>
	<li><a href="#Step8">Get the attributes of Rigid duct reference properties</a></li>
	<li><a href="#Step9">Get the list of all connected branch duct and its curvilinear length from duct instance</a></li>
	<li><a href="#Step10">Get the other connectable object and port at this flexible branch port and its detailed information</a></li>
    <li><a href="#Step11">Get the related object in term of insulation, Hvac part with Hole port and support from duct instance</a></li>
	<li><a href="#Step12">Get the interior node and ask for other connectable object and port at this node</a></li>
    <li><a href="#Step13">Get the list of Support Instances, list of reference and project points linked to the duct Instance</a></li>
	<li><a href="#Step14">Get the Spool of the duct</a></li>
    <li><a href="#Step15">Get the Logical Line Instance if any availble from duct instance</a></li>
	<li><a href="#Step16">Get the Rigid duct parameters information</a></li>
    <li><a href="#Step17">Get the Guide curve from duct reference</a></li>
    <li><a href="#Step18">Get the Sweep from duct reference</a></li>
	<li><a href="#Step19">Get the list of all points from duct reference</a></li>
	<li><a href="#Step20">Get the list of all Branch duct Ports and connected Branches and its curvilinear length from duct reference</a></li>
	<li><a href="#Step21">Get the other connectable object and port at this port and it's detail information from duct instance</a></li>
	<li><a href="#Step22">Get the Spool from the other connected object</a></li>
    <li><a href="#Step23">Disconnecting and Deleting the Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (10 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAHvaRigidDuctDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID1&gt; &lt;PLM_ExternalID2&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
    cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType: A PLM Type String for PLM Reference or PLM Representation Reference&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID1: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Physical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID2: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed for Logical Structure.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create the session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Physical Reference Product with it&#8217;s Associated Representation</h3>
<p>Retrieve the customized reference of the product modeler</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;

  uPLMID = argv[8] ;
  cout&lt;&lt; endl &lt;&lt; uPLMID.ConvertToChar() ;

  //-----------------------------------------------------------------------
  // Open and Expand of the Physical product
  //-----------------------------------------------------------------------
  
  // - Opens the &quot;HVAC (Heating Ventilation & Air Conditioning)&quot; model(arg[7]) in New Unified Typing Mode
  // The input model is retrieved by importing the file from the CAAHvacDesign.edu fw are
  // HvacDesignSampleData.3dxml for HVAC product and HvacDesignSampleResourceSet.3dxml for PRM Data Resource set
  // This 3D XML file contains the 2 root Product Reference with the following attributes:
  //     * PLM_ExternalID1 [uPLMID]: HVAC_Physical_Root
  //     * PLM_ExternalID2 [uPLMIDLog]: Logical_Root
  //---------------------------------------------------

  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMNavReference, (void**) & pIPLMNavRefPhysRoot, myBag,TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMNavRefPhysRoot)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Querying/Opening/Expanding the Logical Reference Product with it&#8217;s Associated Representation</h3>
<p>We are opening logical refrence product</p>
<pre class="code">...
  //Try to open the logical Root  
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;RFLVPMLogicalReference&quot;, hTypeModeler);
  if( (FAILED(hr)) || (NULL_var == hTypeModeler) ) { retCode = 3; goto EscapeWay; }

  uPLMIDLog = argv[9];
  attributeSet.AddAttribute(&quot;PLM_ExternalID&quot;, uPLMIDLog);

  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, attributeSet, ListP_QueryResults) ;
  if( (FAILED(hr)) || (0 &gt;= ListP_QueryResults.Size() ) ) { retCode = 4; goto EscapeWay; }

  if(1 &lt;= ListP_QueryResults.Size())
  {
    pQueryResult = ListP_QueryResults[1] ;
    if(NULL != pQueryResult)
    {
      hr = pQueryResult-&gt;GetIdentifier(pIPLMIdent) ;
    }
  }
  if( NULL == pIPLMIdent ) { retCode = 5; goto EscapeWay; }

  hr = adpOpener.CompleteAndOpen(pIPLMIdent,IID_CATIPLMNavReference, (void**) &pIPLMNavLogRef);
  if ((FAILED(hr)) || (NULL == pIPLMNavLogRef)) { retCode = 6; goto EscapeWay; }

  myBag.InsertRoot(pIPLMNavLogRef);
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating the root occurrence for the opened reference product</h3>
<p>We create the root occurrence</p>
<pre class="code">...
  hRootNavOccurrence = pIPLMNavRefPhysRoot;
  //RootOcc changes Start
  if( NULL_var == hRootNavOccurrence )
  {
    hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
    if( SUCCEEDED(hr) && ( NULL != pIPrdOccurrenceMngt ) )
    {
      hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefPhysRoot, hRootNavOccurrence);
    }
  }
  //RootOcc changes End
  if( ( FAILED(hr) ) || ( NULL_var == hRootNavOccurrence) ){ retCode = 8; goto EscapeWay; }

  hr = hRootNavOccurrence-&gt;QueryInterface(IID_CATBaseUnknown, (void**)&pIUnkOccToFindRoot) ;
  if( FAILED(hr) ){ retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Navigate the list of occurrences to get the instance and reference of Rigid Duct</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt; ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ){ retCode = 10; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the Rigid duct instance and reference
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    // Clean-Up
    if( NULL != pIUnkDuctRef ){ pIUnkDuctRef-&gt;Release() ; pIUnkDuctRef = NULL ; }
    if( NULL != pIEndDuctOne ){ pIEndDuctOne-&gt;Release() ; pIEndDuctOne = NULL ; }
    if( NULL != pIEndDuctTwo ){ pIEndDuctTwo-&gt;Release() ; pIEndDuctTwo = NULL ; }
    if( NULL != pIHvaLogLineInst ){ pIHvaLogLineInst-&gt;Release() ; pIHvaLogLineInst = NULL ; }

   // Initializing  all the List

    // Initialising the ListPort
    SizeList = ListPorts.Size();
    for(iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
    {
      pIHvaPortRef = ListPorts[iListIndex];
      if( NULL != pIHvaPortRef ){ pIHvaPortRef-&gt;Release() ; pIHvaPortRef = NULL ; }
    }
    ListPorts.RemoveAll();

    // Initialising the ListofCoordinateNode
    SizeList = ListofCoordinateNode.Size();
    for(iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
    {
      pTempMathPoint = ListofCoordinateNode[iListIndex];
      if( NULL != pTempMathPoint ){ delete pTempMathPoint ; pTempMathPoint = NULL ; }
    }

    SizeList = ListofPtrHvaSupportInst.Size();
    for(iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
    {
      pIHvaSupportInst = ListofPtrHvaSupportInst[iListIndex];
      if( NULL != pIHvaSupportInst ){ pIHvaSupportInst-&gt;Release() ; pIHvaSupportInst = NULL ; }
    }
    ListofPtrHvaSupportInst.RemoveAll();

    ListofCoordinateNode.RemoveAll();
    ListofArcLengthofNode.RemoveAll();
    ListofBendAngleofNode.RemoveAll();
    ListCurvilinearLength.RemoveAll();
    ListofBendRadiusofNode.RemoveAll();
    ListofRotaionPlaneofNode.RemoveAll();
    ListofStraightLengthofsegment.RemoveAll();
  // Initialised all the List

    //DeletePtr
    if( NULL != pListofBranchDuctonThisDuct)
    {
      SizeList = pListofBranchDuctonThisDuct-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListofBranchDuctonThisDuct)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListofBranchDuctonThisDuct-&gt;RemoveAll();
      delete pListofBranchDuctonThisDuct;
      pListofBranchDuctonThisDuct = NULL;
    }

    //DeletePtr   
    if( NULL != pListRelatedObject)
    {
      SizeList = pListRelatedObject-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListRelatedObject)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListRelatedObject-&gt;RemoveAll();
      delete pListRelatedObject;
      pListRelatedObject = NULL;
    }
    //end of Clean-Up

    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ){ retCode = 11; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Checking the current occurrence is Rigid duct instance object and get its reference object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Rigid duct instance smart pointer.</p>
<pre class="code">...
  // Refer database HvacDesignSampleData.3dxml,
  // Checking the selected object is a Duct instance
  hHvaDuctInstance = pIElemNavOccurrence ;
  if( NULL_var != hHvaDuctInstance )
  {//it is a Duct Instance
    // Get the  reference object of Rigid/Flexible Duct occurence
    hr = hHvaDuctInstance-&gt;GetReference(pIUnkDuctRef);
    if( ( FAILED(hr) ) || ( NULL == pIUnkDuctRef ) ) { retCode = 12; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Get the attributes of Rigid duct reference properties</h3>
<p>We use CATIHvaAttrAccess interface to get rigid duct properties attributes</p>
<pre class="code">...
  //-----------------------------------------------------------------------
  // - To get the duct properies of selected rigid duct reference object
  //-----------------------------------------------------------------------
  ListAttrNames.RemoveAll();

  // Get the  List of Attributes and it's values of rigid duct reference
  hAttrAccess = pIUnkDuctRef;
  if( NULL_var == hAttrAccess) { retCode = 19; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 20; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();
  cout &lt;&lt; endl &lt;&lt; &quot;Rigid Duct Properies : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 21; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 22; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();
    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it's values of rigid duct reference
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Get the list of all connected branch duct and its curvilinear length from duct instance</h3>
<pre class="code">... 
  //Get the list of all connected branch using CATIHvaDuctInstance
  hr = hHvaDuctInstance-&gt;ListGeometricalBranch((CATListPtrCATBaseUnknown *&)pListofBranchDuctonThisDuct,ListCurvilinearLength);
  if( FAILED(hr) ) { retCode = 16; goto EscapeWay; }

  if(NULL != pListofBranchDuctonThisDuct)
  {
    SizeListPorts = pListofBranchDuctonThisDuct-&gt;Size();
    SizeCrvLen = ListCurvilinearLength.Size();
    if( ( 0 &gt; SizeListPorts ) || (SizeListPorts != SizeCrvLen)){ retCode = 17; goto EscapeWay; }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Get the other connectable object and port at this flexible branch port and its detailed information</h3>
<p>We use CATIHvaRigidDuctReference interface to get the ends of the flexible branch and ask both ends for other connectable</p>
<pre class="code">... 
 // Get connected for flexible branch port
 for( iListIndex = 1; iListIndex <=SizeListPorts ; iListIndex++)
 {
  if( NULL !=pIUnkDuctRefBranch ){ pIUnkDuctRefBranch->Release() ; pIUnkDuctRefBranch = NULL ; }
  if( NULL != pIEndDuctOne ){ pIEndDuctOne->Release() ; pIEndDuctOne = NULL ; }
  if( NULL != pIEndDuctTwo ){ pIEndDuctTwo->Release() ; pIEndDuctTwo = NULL ; }

  hHvaDuctInstanceBranch = (*pListofBranchDuctonThisDuct)[iListIndex];
  if ( NULL_var == hHvaDuctInstanceBranch ){ retCode = 42; goto EscapeWay; }

  hr = hHvaDuctInstanceBranch->GetReference(pIUnkDuctRefBranch);
  if ( FAILED( hr )){ retCode = 12; goto EscapeWay; }

  hHvaRigidRefBranch = pIUnkDuctRefBranch;
  if ( NULL_var == hHvaRigidRefBranch){ retCode = 43; goto EscapeWay; }

  hr = hHvaRigidRefBranch->GetEnds(pIEndDuctOne, pIEndDuctTwo);
  if( FAILED(hr) || (NULL == pIEndDuctOne) || (NULL == pIEndDuctTwo) ){ retCode = 30; goto EscapeWay; }

  if( NULL != pICBUOwner ){ pICBUOwner->Release() ; pICBUOwner = NULL ; }
  if( NULL != pIHvaPortRefOther ){ pIHvaPortRefOther->Release() ; pIHvaPortRefOther = NULL ; }
  if( NULL != pIUnkOtherPartOrDuct ){ pIUnkOtherPartOrDuct->Release() ; pIUnkOtherPartOrDuct = NULL ; }

  hr = hHvaDuctInstanceBranch->GetConnectedObject( pIHvaPortRefOther,
                                                   pIUnkOtherPartOrDuct,
                                                   pIEndDuctOne) ;

  if ( FAILED( hr) || ( NULL == pIUnkOtherPartOrDuct) || ( NULL == pIHvaPortRefOther ))
  {
    hr = hHvaDuctInstanceBranch->GetConnectedObject(pIHvaPortRefOther,
                                                    pIUnkOtherPartOrDuct,
                                                    pIEndDuctTwo) ;
  }

  if(FAILED(hr)) { retCode = 44; goto EscapeWay; }

  if(NULL != pIHvaPortRefOther)
  {
    hr = pIHvaPortRefOther->GetType(ePortType);
    if( FAILED(hr)){ retCode = 45; goto EscapeWay; }

    hr = pIHvaPortRefOther->GetOwner (pICBUOwner);

    if( FAILED(hr) || (NULL == pICBUOwner))
    {
      if( NULL != pICBUOwner ){ pICBUOwner->Release() ; pICBUOwner = NULL ; }
      retCode = 46;
      goto EscapeWay;
    }

    if( NULL != pIPoint ){ delete pIPoint ; pIPoint = NULL ; }
    if( NULL != pITangency ){ delete pITangency  ; pITangency = NULL ; }
    if( NULL != pIOrientation ){ delete pIOrientation  ; pIOrientation = NULL ; }

    hr = pIHvaPortRefOther->GetConstraintElements(pIPoint, pITangency ,pIOrientation);

    if( FAILED(hr) || (NULL == pIPoint) || (NULL == pITangency) || (NULL == pIOrientation))
    {
     if( NULL != pIPoint ){ delete pIPoint ; pIPoint = NULL ; }
     if( NULL != pITangency ){ delete pITangency  ; pITangency = NULL ; }
     if( NULL != pIOrientation ){ delete pIOrientation  ; pIOrientation = NULL ; }
     retCode = 47;
     goto EscapeWay;
     }
   }
  }
} 
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Get the related object in term of insulation, Hvac part with Hole port and support from duct instance</h3>
<pre class="code">...
  hr = hHvaDuctInstance-&gt;GetRelatedObject(pListRelatedObject);
  if( FAILED(hr) ) { retCode = 18; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Get the interior node and ask for other connectable object and port at this node</h3>
<p>We use CATIHvaRigidDuctReference interface to get the interior node of route and then ask for other connectables at this node</p>
<pre class="code">...
  for ( indexLoop = 2 ; indexLoop < iNumberofNode ; indexLoop++)
   {
     if( NULL !=pIHvaPortRefInterior){ pIHvaPortRefInterior->Release() ; pIHvaPortRefInterior = NULL ;}
     if( NULL != pIHvaPortRefOther ){ pIHvaPortRefOther->Release() ; pIHvaPortRefOther = NULL ; }
     if( NULL != pIUnkOtherPartOrDuct ){ pIUnkOtherPartOrDuct->Release() ; pIUnkOtherPartOrDuct = NULL ; }

     hr = hHvaRigidRef->GetInteriorNode( indexLoop , pIHvaPortRefInterior );
     if( ( FAILED(hr) ) || ( NULL == pIHvaPortRefInterior ) ){ retCode = 31; goto EscapeWay; }

     hr = hHvaDuctInstance->GetConnectedObject( pIHvaPortRefOther,
     pIUnkOtherPartOrDuct,
     pIHvaPortRefInterior ) ;

     if(FAILED(hr)) { retCode = 41; goto EscapeWay; }
     if ( (NULL != pIHvaPortRefOther) && ( NULL != pIUnkOtherPartOrDuct))
     {
      pIHvaPortRefOther->Release() ; pIHvaPortRefOther = NULL ; 
      pIUnkOtherPartOrDuct->Release() ; pIUnkOtherPartOrDuct = NULL ; 
      break;
     } 
   }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Get the list of Support Instances, list of reference and project points linked to the duct Instance</h3>
<pre class="code">...
    hr = hHvaDuctInstance->GetLinkedSupports(ListofPtrHvaSupportInst , &ListSupportReferencePoints , &ListSupportProjectPoints);
    NoOfSupportRefPoint  = ListSupportReferencePoints.Size(); 
    NoOfSupportProjPoint = ListSupportProjectPoints.Size();
     
    if( FAILED(hr) || (( NoOfSupportRefPoint ) != ( NoOfSupportProjPoint ))) { retCode = 14; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Get the Spool of the duct</h3>
<pre class="code">...
    if ( NULL != pISpoolInstance ){ pISpoolInstance-&gt;Release() ; pISpoolInstance= NULL ;}

    hr = hHvaDuctInstance-&gt;GetSpool( pISpoolInstance );
    if ( FAILED( hr) ){ retCode = 15; goto EscapeWay; }
    
    if ( NULL != pISpoolInstance)
     {
       hr = pISpoolInstance-&gt;GetMode(eHvaSpoolMode);      
       if( ( FAILED(hr) )) { retCode = 40; goto EscapeWay; }
     }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Get the Logical Line Instance if any availble from duct instance</h3>
<pre class="code">... 
  hr = hHvaDuctInstance-&gt;GetLogicalLine(pIHvaLogLineInst);
  if( S_FALSE == hr){ cout &lt;&lt; endl &lt;&lt; &quot;Current Duct is not in Hvac Logical Line&quot;&lt;&lt;endl; }
  else if( ( FAILED(hr) ) || ( NULL == pIHvaLogLineInst ) ) { retCode = 13; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Get the Rigid duct parameters information</h3>
<pre class="code">...
  //Get Nodes' Information for current Rigid Duct
  hr = hHvaRigidRef-&gt;GetNumberOfNode(iNumberofNode);
  if( ( FAILED(hr) ) || ( 0 &gt; iNumberofNode ) ){ retCode = 23; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetCoordinateofNode(ListofCoordinateNode, pIUnkOccToFindRoot);
  SizeListofPipeCoord = ListofCoordinateNode.Size();
  if( FAILED(hr) || ( iNumberofNode != SizeListofPipeCoord ) ){ retCode = 24; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetBendRadiusofNode(ListofBendRadiusofNode);
  if( ( FAILED(hr) ) || ( iNumberofNode != ListofBendRadiusofNode.Size() ) ){ retCode = 25; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetBendAngleofNode(ListofBendAngleofNode);
  if( (FAILED(hr)) || (iNumberofNode != ListofBendAngleofNode.Size()) ) { retCode = 26; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetRotationPlaneofNode(ListofRotaionPlaneofNode);
  if( (FAILED(hr)) || (iNumberofNode != ListofRotaionPlaneofNode.Size()) ) { retCode = 27; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetArcLengthofNode(ListofArcLengthofNode);
  if( (FAILED(hr)) || (iNumberofNode != ListofArcLengthofNode.Size()) ){ retCode = 28; goto EscapeWay; }

  hr = hHvaRigidRef-&gt;GetStraightLengthofSegment(ListofStraightLengthofsegment);
  if( (FAILED(hr)) || (( iNumberofNode - 1) != ListofStraightLengthofsegment.Size()) )
  { retCode = 29; goto EscapeWay; }
  //End of Get Nodes' Information for current Rigid Duct

  hr = hHvaRigidRef-&gt;GetEnds(pIEndDuctOne, pIEndDuctTwo);
  if( FAILED(hr) || (NULL == pIEndDuctOne) || (NULL == pIEndDuctTwo) ){ retCode = 30; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Get the Guide curve from duct reference</h3>
<pre class="code">...
  //Get the Guide curve from duct reference
  if( NULL != pIMMiCurveFeature ){ pIMMiCurveFeature-&gt;Release() ; pIMMiCurveFeature = NULL ; }
  hr = hHvaRigidRef-&gt;GetGuideCurve(pIMMiCurveFeature);
  if( FAILED(hr) || NULL == pIMMiCurveFeature ){ retCode = 49; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Get the Sweep from duct reference</h3>
<pre class="code">...
  //Get the Guide Sweep from duct reference
  if( NULL != pIMMiSweepFeature ){ pIMMiSweepFeature-&gt;Release() ; pIMMiSweepFeature = NULL ; }
  hr = hHvaRigidRef-&gt;GetSweep(pIMMiSweepFeature);
  if( FAILED(hr) || NULL == pIMMiSweepFeature ){ retCode = 50; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
  <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step19"></a>Get the list of all points from duct reference</h3>
<pre class="code">...
  //Get All Points of the duct
  hListofMMiPointFeatures.RemoveAll();
  hr = hHvaRigidRef-&gt;GetAllPoints(hListofMMiPointFeatures);
  if( FAILED(hr) || (hListofMMiPointFeatures.Size() != iNumberofNode ) ){ retCode = 51; goto EscapeWay; }

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step20"></a>Get the list of all Branch duct Ports and connected Branches and its 
curvilinear length from duct reference</h3>
<pre class="code">...
  //Get Branch Ports and connected Branches, if any
  ListCurvilinearLength.RemoveAll() ;
  hr = hHvaRigidRef-&gt;ListBranchPorts (ListPorts, ListCurvilinearLength);
  if(FAILED(hr)){ retCode = 32; goto EscapeWay; }

  SizeListPorts = ListPorts.Size() ;
  SizeCrvLen = ListCurvilinearLength.Size();
  if( SizeListPorts != SizeCrvLen ){ retCode = 33; goto EscapeWay; }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step21"></a>Get the other connectable object and port at this port and it's detail 
information from duct instance</h3>
<pre class="code">...
        for(iListIndex = 1; iListIndex &lt;= SizeListPorts ; iListIndex++)
        {
          if( NULL != pICBUOwner ){ pICBUOwner-&gt;Release() ; pICBUOwner = NULL ; }
          if( NULL != pIHvaPortRefOther ){ pIHvaPortRefOther-&gt;Release() ; pIHvaPortRefOther = NULL ; }
          if( NULL != pIUnkOtherPartOrPipe ){ pIUnkOtherPartOrPipe-&gt;Release() ; pIUnkOtherPartOrPipe = NULL ; }

          pIHvaPortRef = ListPorts[iListIndex];
          if( NULL == pIHvaPortRef ){ retCode = 34; goto EscapeWay; }

          hr = hHvaDuctInstance-&gt;GetConnectedObject(pIHvaPortRefOther,
                                                    pIUnkOtherPartOrPipe,
                                                    pIHvaPortRef) ;
          if(FAILED(hr)) { retCode = 35; goto EscapeWay; }

          if(NULL != pIHvaPortRefOther)
          {
            hr = pIHvaPortRefOther-&gt;GetType(ePortType);
            if( FAILED(hr)){ retCode = 36; goto EscapeWay; }

            hr = pIHvaPortRefOther-&gt;GetOwner (pICBUOwner);
            if( FAILED(hr) || (NULL == pICBUOwner))
            {
              if( NULL != pICBUOwner ){ pICBUOwner-&gt;Release() ; pICBUOwner = NULL ; }
              retCode = 37;
              goto EscapeWay;
            }

            hr = pIHvaPortRefOther-&gt;GetConstraintElements(pIPoint, pITangency ,pIOrientation);
            if( FAILED(hr) || (NULL == pIPoint))
            {
              if( NULL != pIPoint ){ delete pIPoint ; pIPoint = NULL ; }
              retCode = 38;
              goto EscapeWay;
            }
          }
        }//end of for loop on Branch Ports
      }//end of selected object is a Rigid Duct
    }//end of it is a Duct Instance
  }//end of for loop on all children of root
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step22"></a>Get the Spool from the other connected object</h3>
<p>We assign other connected part or duct pointer(pIUnkOtherPartOrDuct) to CATIHvaDuctInstance smart pointer</p>
<pre class="code">...
  hHvaDuctInstanceUnderSpool = pIUnkOtherPartOrDuct;
  if ( NULL_var != hHvaDuctInstanceUnderSpool )
   {
     if( NULL != pISpoolInstance ){ pISpoolInstance->Release() ; pISpoolInstance = NULL ; }  

     hr = hHvaDuctInstanceUnderSpool ->GetSpool( pISpoolInstance );
     if ( FAILED( hr) ){ retCode = 39; goto EscapeWay; }
     if ( NULL != pISpoolInstance)
      {
       hr = pISpoolInstance->GetMode(eHvaSpoolMode);      
       if( ( FAILED(hr) )) { retCode = 40; goto EscapeWay; }
      }
    }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step23"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 48;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to  use, access and navigate 
   flexible duct and insulation object and their parameters.
 </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
