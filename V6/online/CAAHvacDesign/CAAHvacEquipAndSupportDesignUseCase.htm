<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Information of Equipment and Support, its Access and Navigation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Retrieving Information of Equipment and Support, its Access and Navigation</h1>
		<!--<p><em>[Use a verb at the progressive form as the first word: Using, Creating, 
		Accessing, etc. Also copy the title in the &lt;title&gt; tag, or using the Properties 
		command of the File menu.]</em></p>-->
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAAHvaEquipAndSupportDesignImpl use case.This use case explains how to use, access and navigate
				Equipment and Support objects and their parameters.</p>
		<!--<p><em>[Using short sentences, describe what the reader will find. The goal 
		is to enable the reader to quickly decide whether this use case will bring 
		the searched information or not.]</em></p>-->
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAHvaEquipAndSupportDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAHvaEquipAndSupportDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAHvaEquipAndSupportDesignImpl</a></li>
				<li><a href="#Where">Where to Find the CAAHvaEquipAndSupportDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		<!--<p><em>[Keep this table of contents as is, without adding or removing anything. 
		Just replace CAAHvaEquipAndSupportDesignImpl with you use case name.]</em> </p>-->
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you first steps in programming with 
CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) Interfaces. 
  <br/>
  Its main intent is to provide you information about it&#39;s use, access and navigate equipment and support objects and their parameters..</p>
<!--<p><em>[Describe here what the reader can learn from the use case, not what it does.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAHvaEquipAndSupportDesignImpl Use Case</h2>
<p>CAAHvaEquipAndSupportDesignImpl is a use case of the CAAHvacDesign.edu framework that illustrates CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) framework 
capabilities with regards to Equipment and Support objects.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAHvaEquipAndSupportDesignImpl Do</h3>
<p>The goal of CAAHvaEquipAndSupportDesignImpl use case is to show how to use and navigate 
Equipment and Support objects and how to access its parameters.</p>
<!--<p><em>[Describe what the use case does, explain the scenario, and give the names 
of the classes or interfaces you have created to implement it. Put a snapshot of 
the result, or of the different main steps, in case of an interactive scenario.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAHvaEquipAndSupportDesignImpl</h3>
<p>To launch CAAHvaEquipAndSupportDesignImpl, you will need to set up the build time environment, then 
compile CAAHvaEquipAndSupportDesignImpl along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<!--<p><em>[Explain here whether there are additional things to do, such as passing 
parameters, and describe them. If provided data is to be passed as parameters, give 
the way to find it in the run time view. If the scenario is interactive, describe 
the commands and interactions to go through.</em></p>
<p><em>Put links to external articles using a number into square brackets, such 
as [<a href="#References">2</a>], that points to the References table at the bottom 
of the article. Insert the hyperlink to the article in the table beside the corresponding 
number.]</em></p>-->
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;CAAHvaEquipAndSupportDesignImpl Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="border1">
  <tr>
    <th>Repository</th>
    <td>
    <script type="text/javascript">insertRepository();</script>
    </td>
  </tr>
  <tr>
    <th>Server</th>
    <td>The server as <em>protocol://Host:port_number/RootURI</em></td>
  </tr>
  <tr>
    <th>User</th>
    <td>The user name.</td>
  </tr>
  <tr>
    <th>Password</th>
    <td>The user password to authenticate the user.</td>
  </tr>
  <tr>
    <th>SecurityCtx</th>
    <td>A string representing the security context (Role.Organization.Project). 
    Choose Role as Designer.</td>
  </tr>
  <tr>
    <th>Version</th>
    <td>The V_Version attribute value of the reference to be opened.</td>
  </tr>
  <tr>
    <th>PLMType </th>
    <td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
  </tr>
  <tr>
    <th>PLM_ExternalID</th>
    <td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
    reference containing the data to create the user feature reference.</td>
  </tr>
</table>

<p>* The input model is retrieved by importing 3dxml file from the 
   <strong>CAAHvacDesign.edu</strong> framework as below :<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleData.3dxml</strong> for HVAC product Data<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleResourceSet.3dxml</strong> for PRM Data Resource set<br/>&nbsp;&nbsp;
   <br/>&nbsp;
   <code>InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleData.3dxml
   <br/>&nbsp;InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleResourceSet.3dxml
   </code>
</p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the Root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a> :
    <code>HVAC_Physical_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a> :
    <code>A</code></li>
</ul>
<p>
  <img width="100%" alt="Sample Product" src="images/CAAHvacDesignSampleData.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>HvacDesignSampleData.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2 will be different 
                            as per user CATIA session 
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; as it is genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAHvaEquipAndSupportDesignImpl Code</h3>
<p>The CAAHvaEquipAndSupportDesignImpl use case is made of several classes/a single file located in the 
CAAHvaEquipAndSupportDesignImpl.m module of the CAAHvacDesign.edu framework: <code>InstallRootFolder\CAADoc\CAAHvacDesign.edu\CAAHvaEquipAndSupportDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<!--<p><em>[Give additional information, if necessary, to locate all the header and 
source files you supply.]</em></p>-->
<p>This sample deals with the following classes:</p>
<table>
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Class to create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>Class to retrieve the Product Reference or Representation Reference.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product.
    factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) environment and it&#8217;s components 
creation by looking at the code <br/> of the CAAHvaEquipAndSupportDesignImpl. There are 21 logical steps in CAAHvaEquipAndSupportDesignImpl :
</p>
<ol>
	<li><a href="#Step1">Checking the Input Data</a></li>
	<li><a href="#Step2">Creating a Session</a></li>
	<li><a href="#Step3">Querying/Opening/Expanding the Reference Product with its Associated Representation</a></li>
	<li><a href="#Step4">Creating the root occurrence for the opened reference product</a></li>
	<li><a href="#Step5">Navigate the list of occurrences to get instance and reference of Equipment and Support</a></li>
	<li><a href="#Step6">Checking the current occurence is Equipment instance object and get its reference object</a></li>
	<li><a href="#Step7">Get the attributes of Equipment from Equipment reference</a></li>
	<li><a href="#Step8">Get the sub type from Equipment reference</a></li>
	<li><a href="#Step9">Get the Equipment reference parameters information</a></li>
	<li><a href="#Step10">Get the reference HVAC information on Port from Hvac port reference</a></li>
	<li><a href="#Step11">Get the other connected object (part / duct) of current selected part ports from equipment instance</a></li>
	<li><a href="#Step12">Create new Hvac port on selected Equipment from equipment reference</a></li>
	<li><a href="#Step13">Set values of attributes on new created port</a></li>
	<li><a href="#Step14">Get the values of attributes of Port</a></li>
	<li><a href="#Step15">Checking if the current occurence is support instance object and get its reference object</a></li>
	<li><a href="#Step16">Get the attributes of support from support reference object</a></li>
	<li><a href="#Step17">Get the sub type from support reference object</a></li>
	<li><a href="#Step18">Get the information for number of support sections from the support reference object</a></li>
	<li><a href="#Step19">Get the current support section information from the support reference object</a></li>
	<li><a href="#Step20">Get the information of duct passing through the current section  from support instance</a></li>
	<li><a href="#Step21">Disconnecting and Deleting the Session</a></li>
</ol>
<!--<p><em>[Cut out the use case into steps to show understandable pieces of code that 
refer to logical programming tasks. Use the same steps as comments in the use case 
code. Since each step represents an action, use a verb at the progressive form to 
start step names.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (9 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAHvaEquipAndSupportDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
    cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType: A PLM Type For a PLM Reference or PLM Representation Reference &quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<!--<p>Explain the code here.</p>
<p><em>[Put always the code excerpt first, then explain it. As an exception, if 
necessary, explain or detail the step title before the code excerpt.</em></p>
<p><em>In the code, remove the comments, and possibly the memory cleaning, call 
to Release, or pointers set to NULL, except if it makes sense for the scenario. 
Prefer replacing them with ellipsis.</em></p>
<p><em>In the explanation, be as precise as possible, and don&#39;t leave room for interpretation, 
even if some comments seem obvious. Comment each code line, or each set of code 
lines that go together. When you call a function, explain its parameters, possibly 
in a table.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<!--<p>Explain the code here.</p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Reference Product with its Associated Representation</h3>
<p>Retrieve the customized reference of the product modeler</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------  
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl ;

  //-----------------------------------------------------------------------
  // Open and Expand of the product
  //-----------------------------------------------------------------------
  // - Opens the &quot;HVAC (Heating Ventilation & Air Conditioning)&quot; model(arg[8]) in New Unified Typing Mode
  // The input model is retrieved by importing the file from the CAAHvacDesign.edu fw are
  // HvacDesignSampleData.3dxml for HVAC product and HvacDesignSampleResourceSet.3dxml for PRM Data Resource set
  // This 3D XML file contains the Root Product Reference with the following attributes:
  //     * PLM_ExternalID [uPLMID]: HVAC_Physical_Root
  //---------------------------------------------------
  uPLMID = argv[8];
  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMNavReference, (void**) & pIPLMNavRefPhysRoot, myBag, TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMNavRefPhysRoot)) { retCode = 3; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the root occurrence for the opened reference product</h3>
<p>We create the root occurrence</p>
<pre class="code">...
  hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
  if ((FAILED(hr)) || (NULL == pIPrdOccurrenceMngt)) { retCode = 4; goto EscapeWay; }

  hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefPhysRoot, hRootNavOccurrence);
  if( ( FAILED(hr) ) || ( NULL_var == hRootNavOccurrence ) ){ retCode = 5; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigate the list of occurrences to get instance and reference of Equipment and Support</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt; ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 6; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the instance and reference of equipment
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    //Clean-Up
    pIElemNavOccurrence = NULL ;
    if( NULL != pIHvaEquipmentRef ){ pIHvaEquipmentRef-&gt;Release() ; pIHvaEquipmentRef = NULL ; }
    if( NULL != pISupportRef ){ pISupportRef-&gt;Release() ; pISupportRef = NULL ; }
       
    SizeList = ListPorts.Size();
    for( iListIndex =1; iListIndex &lt;= SizeList; iListIndex++ )
    {
      pIThisPort = ListPorts[iListIndex];
      if( NULL != pIThisPort ){ pIThisPort-&gt;Release() ; pIThisPort = NULL ; }
    }
    ListPorts.RemoveAll();

    //End of Clean-Up

    // Refer database HvacDesignSampleData.3dxml
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 7; goto EscapeWay ; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking the current occurence is Equipment instance object and 
get its reference object </h3>
<p>We assign CATIPLMNavOccurrence pointer to Equipment instance smart pointer</p>
<pre class="code">... 
  hHvaEquipmentInstance = pIElemNavOccurrence;
  // Checking the selected object is an equipment instance
  if ( NULL_var != hHvaEquipmentInstance )
  {
    if( NULL != pIHvaHvacPortRef ){ pIHvaHvacPortRef-&gt;Release() ; pIHvaHvacPortRef = NULL ; }

    // Get the  reference object of part occurence
    hr = hHvaEquipmentInstance-&gt;GetReference(pIHvaEquipmentRef);  
    if( ( FAILED(hr) ) || ( NULL == pIHvaEquipmentRef ) ) { retCode = 8; goto EscapeWay; }      

    hUnkPartRef = pIHvaEquipmentRef ;
    if( NULL_var == hUnkPartRef ) { retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Get the attributes of Equipment from Equipment reference</h3>
<p>We use CATIHvaAttrAccess interface to get Equipment attributes</p>
<pre class="code">...
  //-----------------------------------------------------------------------
  // - To get the Equipment properies of selcted part reference object
  //-----------------------------------------------------------------------
  ListAttrNames.RemoveAll();

  // Get the  List of Attributes and it&#39;s values of part reference
  hAttrAccess = pIHvaEquipmentRef;
  if( NULL_var == hAttrAccess) { retCode = 10; goto EscapeWay; }

  //Currently Equipment has ONLY 1 HVAC Attribute. Hence HARD CODED the check for size of Attribute Names
  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 != ListAttrNames.Size()) ) { retCode = 11; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();

  cout &lt;&lt; endl &lt;&lt; &quot;Equipment Properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 12; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 13; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();

    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it&#39;s values of equipment reference
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Get the Sub type from equipment reference</h3>
<pre class="code">...
  hr = pIHvaEquipmentRef-&gt;GetSubType(uSubTypePart); 
  if( (FAILED(hr)) || (1 &gt; uSubTypePart.GetLengthInChar()) ) { retCode = 14; goto EscapeWay; }

  cout&lt;&lt; endl &lt;&lt;&quot;Equipment SubType : &quot;&lt;&lt;uSubTypePart.ConvertToChar() ;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Get the Equipment reference parameters information</h3>
<pre class="code">...
  hr = pIHvaEquipmentRef-&gt;ListPorts( ListPorts ) ;
  SizeListPorts = ListPorts.Size();
  if( (FAILED(hr)) || (0 &gt; SizeListPorts) ) { retCode = 15; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Get the reference Hvac information on Port from Hvac
port reference</h3>
<pre class="code">...
  // Get the CATIHvaHvacPortRef interface from ListPorts which is List of ports of selected equipment

  for( nPortIndex = 1; nPortIndex &lt;= SizeListPorts; nPortIndex++)
  {
    if( NULL != pICBUOwner ){ pICBUOwner-&gt;Release() ; pICBUOwner = NULL ; }        
    if( NULL != pIOtherPort ){ pIOtherPort-&gt;Release() ; pIOtherPort = NULL ; }        
    if( NULL != pIOtherConnectable ){ pIOtherConnectable-&gt;Release() ; pIOtherConnectable = NULL ; }
    if( NULL != pMathPtConstraintOriginPt ){ delete pMathPtConstraintOriginPt ; pMathPtConstraintOriginPt = NULL ; }
    if( NULL != pMathVectConstraintAlign ) { delete pMathVectConstraintAlign ; pMathVectConstraintAlign = NULL ; }
    if( NULL != pMathVectConstraintOrient ){ delete pMathVectConstraintOrient ; pMathVectConstraintOrient = NULL ; }

    pIThisPort = ListPorts[nPortIndex];
    if( NULL == pIThisPort ) { retCode = 16; goto EscapeWay ; }

    hr = pIThisPort-&gt;GetType(geomPortType) ;
    if(    ( FAILED(hr) )
        || ( CATIHvaHvacPortRef::CatHvaUndefinedPort == geomPortType )
        || ( CATIHvaHvacPortRef::CatHvaRouteStartExtremity == geomPortType )
        || ( CATIHvaHvacPortRef::CatHvaRouteEndExtremity == geomPortType )
      )
    { retCode = 17; goto EscapeWay; }

    hr = pIThisPort-&gt;GetOwner(pICBUOwner) ;
    if( (FAILED(hr)) || (NULL == pICBUOwner) ) { retCode = 18; goto EscapeWay; }

    hUnkOwnerOfPort = pICBUOwner ;
    if( NULL_var == hUnkOwnerOfPort ) { retCode = 19; goto EscapeWay; }

    if( hUnkPartRef != hUnkOwnerOfPort ) { retCode = 20; goto EscapeWay; }

    hr = pIThisPort-&gt;GetConstraintElements(pMathPtConstraintOriginPt,
                                            pMathVectConstraintAlign,
                                            pMathVectConstraintOrient) ;
    if(    ( FAILED(hr) )
        || ( NULL == pMathPtConstraintOriginPt )
        || ( NULL == pMathVectConstraintAlign )
        || ( NULL == pMathVectConstraintOrient )
      )
    {//As this is a Port of an equipment, we must get all the three constraint elements !
      retCode = 21;
      goto EscapeWay ;
    }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Get the other connected object (part / duct) of current
selected part ports from equipment instance</h3>
<pre class="code">...
    // Get the other connected object through the port of selected equipment.
    hr = hHvaEquipmentInstance-&gt;GetConnectedObject(pIOtherPort, pIOtherConnectable, pIThisPort);
    if( ( SUCCEEDED(hr) ) && ( NULL == pIOtherPort ) && ( NULL == pIOtherConnectable ) )
    { cout &lt;&lt; endl &lt;&lt; &quot;No other object connected to Equipment this port&quot; &lt;&lt; endl ; }
    else if( ( FAILED(hr) ) || ( NULL == pIOtherPort ) || ( NULL == pIOtherConnectable )) { retCode = 22; goto EscapeWay; }
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Create new Hvac port on selected Equipment from equipment reference</h3>
<pre class="code">...
      // Create the new Hvac port on equipment and set the attributes on it
      CATMathPoint origin(10.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;
      CATMathVector alignDir(1.0*nCreatePortNo, 0, 0) ;
      CATMathVector oriDir(0, 0, 1.0*nCreatePortNo) ;
      CATMathPoint offset(100.0*nCreatePortNo, 10.0*nCreatePortNo, 10.0*nCreatePortNo) ;

      CATMathPoint * pMathPtPortOffset = NULL; // Do not release

      CATUnicodeString strCreatePortNo, strMsg;

      strCreatePortNo.BuildFromNum(nCreatePortNo);

      CATUnicodeString str = &quot;CAA_Port.&quot;+ strCreatePortNo;

      hr = pIHvaEquipmentRef-&gt;CreatePort(origin, alignDir, oriDir, geomPortType, str, pIHvaHvacPortRef, pMathPtPortOffset); 
      if(E_INVALIDARG == hr)
      {
        strMsg =strMsg + &quot; =&gt;FAILED to create because \n\t ==&gt;Either Alignment and Orienation vectors are not orthogonal OR the input name for port is already used.&quot;;
      }
      else if(FAILED(hr)) { strMsg = strMsg + &quot; =&gt;FAILED to create&quot;; if(0 != nCreatePortNo){ retCode = 23; goto EscapeWay;} }
      else { strMsg = strMsg +&quot; created successfully&quot;; }

      cout &lt;&lt; endl &lt;&lt; strMsg.ConvertToChar() &lt;&lt;endl;
      nCreatePortNo++;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Set values of attributes on new created port</h3>
<p>We use CATIHvaAttrAccess interface to set attributes on newly created Hvac port of Equipment from equipment reference</p>
<pre class="code">... 
  ListAttrNames.RemoveAll();

  // Set the Attributes and it&#39;s values of port reference

  hAttrAccess = pIHvaHvacPortRef;
  if( NULL_var == hAttrAccess) { retCode = 24; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 25; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 26; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 27; goto EscapeWay; }

    if(uAttrName == &quot;V_Standard&quot;)
    {
      pIAttrValue-&gt;Valuate(&quot;ASTL&quot;);
    }
    else if(uAttrName == &quot;V_NominalSize&quot;)
    {
      CATUnicodeString cusNomSize(strCreatePortNo) ;
      cusNomSize = cusNomSize + &quot;in&quot; ;
      pIAttrValue-&gt;Valuate(cusNomSize);
    }
    else if(uAttrName == &quot;V_EndStyle&quot;)
    {
      pIAttrValue-&gt;Valuate(&quot;BUTT WELD&quot;);
    }
    else if(uAttrName == &quot;V_Rating&quot;)
    {
      pIAttrValue-&gt;Valuate(&quot;150#&quot;);
    }
    else if(uAttrName == &quot;V_WallThickness&quot;)
    {
      pIAttrValue-&gt;Valuate(iListIndex/1000.00);
    }
    else if(uAttrName == &quot;V_OutsideDiameter&quot;)
    {
      pIAttrValue-&gt;Valuate(60.325/1000.00);
    }

    hr = hAttrAccess-&gt;SetAttrValue ( uAttrName, pIAttrValue);
    if(FAILED(hr)){ retCode = 28; goto EscapeWay; }
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Get the values of attributes of Port</h3>
<p>We use CATIHvaAttrAccess interface to get Hvac port attributes</p>
<pre class="code">...
    // Get the  List of Attributes and it&#39;s values of part reference
    cout &lt;&lt; endl &lt;&lt; &quot;Port Properties : &quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
    cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

    for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
    {
      if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

      uAttrName = ListAttrNames[iListIndex];
      if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 29; goto EscapeWay; }

      hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
      if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 30; goto EscapeWay; }

      uAttrValue = pIAttrValue-&gt;Show();

      cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
    }
    cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
    // end of the  List of Attributes and it&#39;s values of part reference
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Checking if the current occurence is support instance object and 
get its reference object </h3>
<p>We assign CATIPLMNavOccurrence pointer to Support instance smart pointer</p>
<pre class="code">...
  hHvaSupportInstance = pIElemNavOccurrence;
  // Checking the selected object is support instance
  if ( NULL_var != hHvaSupportInstance )
  {
    hr = hHvaSupportInstance-&gt;GetReference(pISupportRef);
    if( ( FAILED(hr) ) || ( NULL == pISupportRef ) ) { retCode = 31; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step16"></a>Get the attributes of support from support reference object</h3>
<p>We use CATIHvaAttrAccess interface to get Equipment attributes</p>
<pre class="code">...
  hAttrAccess = pISupportRef;
  if( NULL_var == hAttrAccess) { retCode = 32; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 != ListAttrNames.Size()) ) { retCode = 33; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();

  cout &lt;&lt; endl &lt;&lt; &quot;Support Properties : &quot;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 34; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 35; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();

    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it&#39;s values of support reference
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step17"></a>Get the sub type from support reference object</h3>
<pre class="code">...
  hr = pISupportRef-&gt;GetSubType(ustrSupportSubType);
  if( FAILED(hr) ) { retCode = 36; goto EscapeWay; }

  cout&lt;&lt; endl &lt;&lt;&quot;Support SubType : &quot;&lt;&lt;uSubTypePart.ConvertToChar() ;
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step18"></a>Get the information for number of support sections 
    from the support reference object</h3>
<pre class="code">...
  hr = pISupportRef-&gt;GetNumberOfSections(numberSupportSections);
  if( ( FAILED(hr) ) || ( 0 &gt;= numberSupportSections ) ) { retCode = 37; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step19"></a>Get the current support section information from the support reference object</h3>
<pre class="code">...
  for( indexSection = 1; indexSection &lt;= numberSupportSections; indexSection++)
  {
    if( NULL != pIDuctInstance ){ pIDuctInstance-&gt;Release() ; pIDuctInstance = NULL ; }

    hr = pISupportRef-&gt;GetSectionData(indexSection, mathInputPt, mathInputPlane, mathOutputPlane, mathBasePlane);
    if( FAILED(hr) ) { retCode = 38; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step20"></a>Get the information of duct passing through the current section  from support instance</h3>
<pre class="code">...
          hr = hHvaSupportInstance-&gt;GetDuctThroughSection(indexSection, pIDuctInstance);
          if( FAILED(hr)) { retCode = 39; goto EscapeWay; }
          else if( SUCCEEDED(hr) && (NULL == pIDuctInstance) ){ cout &lt;&lt; endl &lt;&lt; &quot;Duct is NOT connected with support section &quot;&lt;&lt;indexSection &lt;&lt; endl ; }
        }
      }//End Support code
    }//End not an Equipment
  }//end of for loop on list of children from Root Product
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step21"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 40;
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to access, use and navigate the Equipment and Support 
part in HVAC product</p>
<!--<p><em>[Write here what the reader should remember when leaving the article.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!--<p><em>[Remove one row out of the two above, depending on whether you are creating 
a C++ or a Web Services use case. Add references to articles you have cited in the 
text, giving each reference.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
