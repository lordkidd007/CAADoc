<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Flexible Duct and Insulation Object Access and Navigation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Flexible Duct and Insulation Object Access and Navigation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article describes the CAAHvaFlexibleDuctDesignImpl use case. This use 
		case explains how to use, access and navigate flexible duct and insulation object and their parameters.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAHvaFlexibleDuctDesignImpl Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAHvaFlexibleDuctDesignImpl Do</a></li>
				<li><a href="#How">How to Launch CAAHvaFlexibleDuctDesignImpl</a></li>
				<li><a href="#Where">Where to Find the CAAHvaFlexibleDuctDesignImpl Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you first steps in programming with
CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) Interfaces.
		<br/>
			Its main intent is to provide you information about its use, access and navigate flexible duct and insulation object and
			their parameters.
 </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAHvaFlexibleDuctDesignImpl Use Case</h2>
<p>CAAHvaFlexibleDuctDesignImpl is a use case of the CAAHvacDesign.edu framework that illustrates CATIA &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) framework
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAHvaFlexibleDuctDesignImpl Do</h3>
<p>The goal of CAAHvaFlexibleDuctDesignImpl use case is to show how to use and 
navigate flexible duct and how to access the insulation object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAHvaFlexibleDuctDesignImpl</h3>
<p>To launch CAAHvaFlexibleDuctDesignImpl, you will need to set up the build time environment, then 
compile CAAHvaFlexibleDuctDesignImpl along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case, execute the following command:</p>
<pre class="code"><em>mkrun -c &quot;Repository Server User Password SecurityCtx Version PLMType PLM_ExternalID&quot;</em></pre>
<p>where:</p>
<table class="border1">
  <tr>
    <th>Repository</th>
    <td>
    <script type="text/javascript">insertRepository();</script>
    </td>
  </tr>
  <tr>
    <th>Server</th>
    <td>The server as <em>protocol://Host:port_number/RootURI</em></td>
  </tr>
  <tr>
    <th>User</th>
    <td>The user name.</td>
  </tr>
  <tr>
    <th>Password</th>
    <td>The user password to authenticate the user.</td>
  </tr>
  <tr>
    <th>SecurityCtx</th>
    <td>A string representing the security context (Role.Organization.Project). 
    Choose Role as Designer.</td>
  </tr>
  <tr>
    <th>Version</th>
    <td>The V_Version attribute value of the reference to be opened.</td>
  </tr>
  <tr>
    <th>PLMType </th>
    <td>A PLMType for a PLM Reference or PLM Representation Reference.</td>
  </tr>
  <tr>
    <th>PLM_ExternalID</th>
    <td>The value of the <code>PLM_ExternalID</code> attribute of the PLM representation 
    reference containing the data to create the user feature reference.</td>
  </tr>
</table>

<p>* The input model is retrieved by importing 3dxml file from the 
   <strong>CAAHvacDesign.edu</strong> framework as below :<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleData.3dxml</strong> for HVAC product Data<br/>&nbsp;&nbsp;
   <strong>HvacDesignSampleResourceSet.3dxml</strong> for PRM Data Resource set<br/>&nbsp;&nbsp;
   <br/>&nbsp;
   <code>InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleData.3dxml
   <br/>&nbsp;InstallRootDirectory\CAAHvacDesign.edu\InputData\HvacDesignSampleResourceSet.3dxml
   </code>
</p>

<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>

<p>This 3D XML file contains the Root Product Reference with the
following attributes:</p>

<ul>
  <li><a><code><strong>PLM_ExternalID</strong></code></a> :
    <code>HVAC_Physical_Root</code></li>
  <li><a><code><strong>PLMType</strong></code></a> :
    <code>VPMReference</code></li>
  <li><a><code><strong>Version</strong></code></a> :
    <code>A</code></li>
</ul>
<p>
  <img width="100%" alt="Sample Product" src="images/CAAHvacDesignSampleData.jpg"/>
</p>
<p>
   &nbsp;The image above shows the product structure used for this use-case.
</p>
<p>
  <strong>Attention</strong>: The <em>Name</em> field in <em>Properties</em> dialog for the product is now refered as attribute <em>PLM_ExternalID</em>.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Whenever user imports the <em>HvacDesignSampleData.3dxml</em> the <em>PLM_ExternalID</em> value for PLM_ExternalID1 and PLM_ExternalID2 will be different 
                            as per user CATIA session 
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; as it is genearted by system automatically.
                       <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                            Please verify the <em>PLM_ExtrenalID</em> value carefully with <em>Name</em> field before executing the use case.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAHvaFlexibleDuctDesignImpl Code</h3>
<p>The CAAHvaFlexibleDuctDesignImpl use case is made of several classes/a single file located in the 
CAAHvaFlexibleDuctDesignImpl.m module of the CAAHvacDesign.edu framework: <code>InstallRootFolder\CAADoc\CAAHvacDesign.edu\CAAHvaFlexibleDuctDesignImpl.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This sample deals with the following classes:</p>
<table>
  <tr>
    <td><em>CAAAdpCreateSession</em></td>
    <td>Class to create a batch session and connects to a repository.</td>
  </tr>
  <tr>
    <td><em>CAAOpenPLMComponent</em></td>
    <td>Class to retrieve the Product Reference or Representation Reference.</td>
  </tr>
  <tr>
    <td><em>CATIPrdOccurrenceMngt</em></td>
    <td>Class to create the root occurrence for the Root Product.
    factory.</td>
  </tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>We will now first comment the &quot;Heating Ventilation & Air Conditioning&quot;(HVAC) environment and it&#8217;s components 
creation by looking at the code <br/> of the CAAHvaFlexibleDuctDesignImpl. There 
  are 15 logical steps in CAAHvaFlexibleDuctDesignImpl :
</p>
<ol>
	<li><a href="#Step1">Checking the Input Data</a></li>
	<li><a href="#Step2">Creating a Session</a></li>
	<li><a href="#Step3">Querying/Opening/Expanding the Reference Product with its Associated Representation</a></li>
	<li><a href="#Step4">Creating the root occurrence for the opened reference product</a></li>
	<li><a href="#Step5">Navigate the list of occurrences to get he duct instance and reference of Flexible Duct and Insulation</a></li>
	<li><a href="#Step6">Checking the current occurence is Insulation instance object and get its reference object</a></li>
    <li><a href="#Step7">Get the covered object which is under insulation</a></li>
	<li><a href="#Step8">Get the attributes of Insulation reference properties</a></li>
	<li><a href="#Step9">Checking the current occurence is Flexible duct instance object and get its reference object</a></li>
	<li><a href="#Step10">Get the list of all connected branch ducts and it&#39;s curvilinear length from duct instance</a></li>
	<li><a href="#Step11">Get the related object in term of insulation, Hvac part with Hole port and support from duct instance</a></li>
	<li><a href="#Step12">Checking the selected reference is Flexible duct reference</a></li>
	<li><a href="#Step13">Get the attributes of Flexible duct reference properties</a></li>
	<li><a href="#Step14">Get the Flexible duct parameters information</a></li>
	<li><a href="#Step15">Disconnecting and Deleting the Session</a></li>
</ol>
<!--<p><em>[Cut out the use case into steps to show understandable pieces of code that 
refer to logical programming tasks. Use the same steps as comments in the use case 
code. Since each step represents an action, use a verb at the progressive form to 
start step names.]</em></p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Checking the Input Data</h3>
<pre class="code">...
  //------------------------------------------------------------------
  // - The necessary input arguments to start CATIA session
  //------------------------------------------------------------------  
  if (9 != argc)
  {
    cout &lt;&lt; endl;
    cout &lt;&lt;&quot;CAAHvaFlexibleDuctDesignImpl &lt;Repository&gt; &lt;Server&gt; &lt;User&gt; &lt;Password&gt; &lt;SecurityCtx&gt; &lt;Version&gt; &lt;PLMType&gt; &lt;PLM_ExternalID&gt;&quot;&lt;&lt; endl;
    cout &lt;&lt;&quot;Repository: The repository name (like PLM1) which is mandatory.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Server: The URL string used for connection, expected format is 'protocol://ServerName:PortNumber/RootURI.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;User: The user name for connection.&quot; &lt;&lt;endl ;
    cout &lt;&lt;&quot;Password: The user password for connection.&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;SecurityCtx: A string representing the security context ( Role. Organization. Project  ). Choose Role as Reviewer ( as the use case does not modify the PLM Data).&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;Version: The V_Version attribute value of the reference to be opened&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLMType : A PLM Type for PLM Reference or PLM Representation Reference&quot; &lt;&lt;endl;
    cout &lt;&lt;&quot;PLM_ExternalID: The PLM_ExternalID of a PLM Reference or PLM Representation Reference be browsed.&quot; &lt;&lt;endl;
    cout &lt;&lt; endl;
    retCode = 1;
    goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Session</h3>
<p>We create a session.</p>
<pre class="code">...
  //------------------------------------------------------------------
  // - For Setting Repository
  //------------------------------------------------------------------  
  repository = argv[1];

  // -----------------------------------------------------------------
  // Create Session
  // -----------------------------------------------------------------
  hr = ::CAAAdpCreateSession(repository, argv[2], argv[3], argv[4], argv[5]);
  if (FAILED(hr)) { retCode = 2; goto EscapeWay; }
...</pre>
<!--<p>Explain the code here.</p>-->
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Querying/Opening/Expanding the Reference Product with its Associated Representation</h3>
<p>Retrieve the customized reference of the product modeler</p>
<pre class="code">...
  // Open a Product inside a Bag for complete control of its lifecycle
  CATOmbLifeCycleRootsBag myBag; /* To handle PLM entity life-cycle */

  //------------------------------------------------------------------
  // - For Setting Environment
  //------------------------------------------------------------------
  uVersion = argv[6];
  cout &lt;&lt; &quot;V_Version : &quot; &lt;&lt; uVersion.ConvertToChar() &lt;&lt; endl ;

  StrPLMType = argv[7];
  cout &lt;&lt; &quot;PLMType : &quot; &lt;&lt; StrPLMType &lt;&lt; endl;

  //-----------------------------------------------------------------------
  // Open & Expand the Product
  //-----------------------------------------------------------------------
  //---------------------------------------------------
  // - Opens the &quot;HVAC (Heating Ventilation & Air Conditioning)&quot; model(arg[8]) in New Unified Typing Mode
  // The input model is retrieved by importing the file from the CAAHvacDesign.edu fw are
  // HvacDesignSampleData.3dxml for HVAC product and HvacDesignSampleResourceSet.3dxml for PRM Data Resource set
  // This 3D XML file contains the Root Product Reference with the following attributes:
  //     * PLM_ExternalID [uPLMID]: HVAC_Physical_Root
  //---------------------------------------------------
  uPLMID = argv[8];

  hr = ::CAAOpenPLMComponent(StrPLMType, uPLMID, uVersion, IID_CATIPLMProducts, (void**) & pIPLMProduct, myBag, TRUE);
  if ((FAILED(hr)) || (NULL == pIPLMProduct)) { retCode = 12; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating the root occurrence for the opened reference product</h3>
<p>We create the root occurrence</p>
<pre class="code">...
  hRootNavOccurrence = pIPLMProduct;
  //RootOcc changes Start
  if( NULL_var == hRootNavOccurrence )
  {
    hr = pIPLMProduct-&gt;QueryInterface(IID_CATIPLMNavReference, (void**)&amp;pIPLMNavRefOnRoot);
    if(SUCCEEDED(hr))
    {
      hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
      if( SUCCEEDED(hr) &amp;&amp; ( NULL != pIPrdOccurrenceMngt ) )
      {
        hr = pIPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pIPLMNavRefOnRoot, hRootNavOccurrence);
      }
    }
  }
  //RootOcc changes End
  if( ( FAILED(hr) ) || ( NULL_var == hRootNavOccurrence) ) { retCode = 4; goto EscapeWay; }

  hr = hRootNavOccurrence-&gt;QueryInterface(IID_CATBaseUnknown, (void**)&amp;pIUnkOccToFindRoot) ;
  if( FAILED(hr) ) { retCode = 5; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Navigate the list of occurrences to get he duct instance 
and reference of Flexible Duct and Insulation</h3>
<pre class="code">...
  hr = hRootNavOccurrence-&gt; ListChildren(ListofPtrNavOccurrence);
  if( FAILED(hr) ) { retCode = 6; goto EscapeWay; }

  //-----------------------------------------------------------------------
  // - To get the Duct instance and reference of Flexible Duct and Insulation
  //-----------------------------------------------------------------------
  SizeRootList = ListofPtrNavOccurrence.Size();
  for( index =1; index &lt;= SizeRootList; index++ )
  {
    // Clean-Up
    if( NULL != pIUnkDuctRef ){ pIUnkDuctRef-&gt;Release() ; pIUnkDuctRef = NULL ; }
    if( NULL != pIEndDuctOne ){ pIEndDuctOne-&gt;Release() ; pIEndDuctOne = NULL ; }
    if( NULL != pIEndDuctTwo ){ pIEndDuctTwo-&gt;Release() ; pIEndDuctTwo = NULL ; }
    if( NULL != pIInsulationRef ){ pIInsulationRef-&gt;Release() ; pIInsulationRef = NULL ; }

    // Initialising the ListofCoordinateNode
    SizeList = ListofCoordinateNode.Size();
    for(iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
    {
      pTempMathPoint = ListofCoordinateNode[iListIndex];
      if( NULL != pTempMathPoint ){ delete pTempMathPoint ; pTempMathPoint = NULL ; }
    }

    ListofCoordinateNode.RemoveAll();
    ListCurvilinearLength.RemoveAll();

    //DeletePtr
    if( NULL != pListofBranchDuctonThisDuct)
    {
      SizeList = pListofBranchDuctonThisDuct-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListofBranchDuctonThisDuct)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListofBranchDuctonThisDuct-&gt;RemoveAll();
      delete pListofBranchDuctonThisDuct;
      pListofBranchDuctonThisDuct = NULL;
    }

    //DeletePtr
    if( NULL != pListRelatedObject)
    {
      SizeList = pListRelatedObject-&gt;Size() ;
      for (iListIndex = 1; iListIndex &lt;= SizeList; iListIndex++)
      {
        pIUnkForListCleanUp = (*pListRelatedObject)[iListIndex];
        if( NULL != pIUnkForListCleanUp ){ pIUnkForListCleanUp-&gt;Release() ; pIUnkForListCleanUp = NULL ; }
      }
      pListRelatedObject-&gt;RemoveAll();
      delete pListRelatedObject;
      pListRelatedObject = NULL;
    }

    ListAttrNames.RemoveAll();
    // End of Clean-up
    pIElemNavOccurrence = ListofPtrNavOccurrence[index];
    if( NULL == pIElemNavOccurrence ) { retCode = 7; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Checking the current occurence is Insulation instance object 
and get its reference object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Insulation instance smart pointer</p>
<pre class="code">...
  //*********************Check for Insulation**********************//
  hHvaInsulationInstance = pIElemNavOccurrence;
  if (NULL_var != hHvaInsulationInstance)
  {     
    // Get the  reference object of Insulation occurence
    hr = hHvaInsulationInstance-&gt;GetReference(pIInsulationRef);
    if( FAILED(hr) || (NULL == pIInsulationRef)) { retCode = 8; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Get the covered object which is under insulation</h3>
<pre class="code">...
 // Get the object which is under Insulation
    hr = hHvaInsulationInstance->GetCoveredObject (pInsulatedObject);
    if (FAILED(hr) || (NULL == pInsulatedObject)){ retCode = 9; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Get the attributes of Insulation reference properties</h3>
<p>We use CATIHvaAttrAccess interface to get Insulation properties attributes</p>
<pre class="code">...
  // Get the  List of Attributes and it&#39;s values of insulation reference
  hAttrAccess = pIInsulationRef;
  if( NULL_var == hAttrAccess) { retCode = 10; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 > ListAttrNames.Size()) ) { retCode = 11; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();
  cout &lt;&lt; endl &lt;&lt; &quot;Insulation properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue->Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 > uAttrName.GetLengthInChar() ) { retCode = 12; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 13; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();
    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it&#39;s values of insulation reference
  }//end of This Object is an Insulation
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Checking the current occurence is Flexible duct instance object 
and get its reference object</h3>
<p>We assign CATIPLMNavOccurrence pointer to Flexible duct instance smart pointer </p>
<pre class="code">... 
  // Checking the selected object is a Duct instance
  hHvaDuctInstance = pIElemNavOccurrence ;
  if( NULL_var != hHvaDuctInstance )
  {//it is a Duct Instance
    // Get the  reference object of Rigid/Flexible Duct occurence
    hr = hHvaDuctInstance-&gt;GetReference(pIUnkDuctRef);  
    if( ( FAILED(hr) ) || ( NULL == pIUnkDuctRef ) ) { retCode = 14; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Get the list of all connected branch ducts and its
curvilinear length from duct instance</h3>
<pre class="code">...
  // Get the list of all connected branch using CATIHvaDuctInstance
  hr = hHvaDuctInstance-&gt;ListGeometricalBranch(pListofBranchDuctonThisDuct, ListCurvilinearLength);
  if( FAILED(hr) ) { retCode = 15; goto EscapeWay; }

  if(NULL != pListofBranchDuctonThisDuct)
  {
    SizeListPorts = pListofBranchDuctonThisDuct-&gt;Size();
    SizeCrvLen = ListCurvilinearLength.Size();
    if( ( 0 &gt; SizeListPorts ) || (SizeListPorts != SizeCrvLen)) { retCode = 16; goto EscapeWay; }
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Get the related object in term of insulation, Hvac 
part with Hole port and support from duct instance</h3>
<pre class="code">... 
  hr = hHvaDuctInstance->GetRelatedObject(pListRelatedObject);
  if( FAILED(hr) ) { retCode = 17; goto EscapeWay; }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step12"></a>Checking the selected reference is Flexible duct reference</h3>
<pre class="code">...
  // Checking the selected object is a Flexible Duct
  hDuctFlexRef = pIUnkDuctRef ;
  if( NULL_var != hDuctFlexRef )
  {
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step13"></a>Get the attributes of Flexible duct reference properties</h3>
<p>We use CATIHvaAttrAccess interface to get Flexible duct properties attributes</p>
<pre class="code">...
  //-----------------------------------------------------------------------
  // - To get the Duct properies of selected flexible Duct reference object
  //-----------------------------------------------------------------------

  // Get the  List of Attributes and it&#39;s values of part reference
  hAttrAccess = pIUnkDuctRef;
  if( NULL_var == hAttrAccess) { retCode = 18; goto EscapeWay; }

  hr = hAttrAccess-&gt;ListAttributeNames(ListAttrNames);
  if( (FAILED(hr)) || (1 &gt; ListAttrNames.Size()) ) { retCode = 19; goto EscapeWay; }

  sizeListAttrNames = ListAttrNames.Size();
  cout &lt;&lt; endl &lt;&lt; &quot;Flexible Duct properties : &quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;;
  cout &lt;&lt; endl &lt;&lt; &quot;Attribute Name &quot;&lt;&lt;&quot;\t| &quot;&lt;&lt;&quot;Value  &quot;;

  for( iListIndex = 1 ; iListIndex &lt;= sizeListAttrNames ; iListIndex++)
  {
    if( NULL != pIAttrValue) { pIAttrValue-&gt;Release(); pIAttrValue = NULL; }

    uAttrName = ListAttrNames[iListIndex];
    if( 1 &gt; uAttrName.GetLengthInChar() ) { retCode = 20; goto EscapeWay; }

    hr = hAttrAccess-&gt;GetAttrValue ( pIAttrValue, uAttrName ); 
    if( (FAILED(hr)) || (NULL == pIAttrValue) ) { retCode = 21; goto EscapeWay; }

    uAttrValue = pIAttrValue-&gt;Show();
    cout&lt;&lt; endl &lt;&lt; uAttrName.ConvertToChar() &lt;&lt;&quot;\t| &quot;&lt;&lt; uAttrValue.ConvertToChar();
  }

  cout &lt;&lt; endl &lt;&lt; &quot;========================================================================&quot;&lt;&lt; endl;
  // end of the  List of Attributes and it&#39;s values of flexible Duct reference
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step14"></a>Get the Flexible duct parameters information</h3>
<pre class="code">...
          //Get Nodes Information for current Flexible Duct
          hr = hDuctFlexRef-&gt;GetNumberOfNode(iNumberofNode);
          if( ( FAILED(hr) ) || ( 2 &gt; iNumberofNode ) ) { retCode = 22; goto EscapeWay; }

          hr = hDuctFlexRef-&gt;GetCoordinateofNode(ListofCoordinateNode, pIUnkOccToFindRoot);
          SizeListofDuctCoord = ListofCoordinateNode.Size();
          if( FAILED(hr) || ( iNumberofNode != SizeListofDuctCoord ) ) { retCode = 23; goto EscapeWay; }

          hr = hDuctFlexRef-&gt;GetBendRadius(dBendRadius);
          cout &lt;&lt;&quot;BenRadius = &quot;&lt;&lt;dBendRadius&lt;&lt;endl;
          if( FAILED(hr) ) { retCode = 24; goto EscapeWay; }

          hr = hDuctFlexRef-&gt;GetAlgorithmMode(eFlexAlgoritmMode);
          if( FAILED(hr) ) { retCode = 25; goto EscapeWay; }

          switch(eFlexAlgoritmMode)
          {
          case CATIHvaFlexibleDuctReference::CatStandard :
            cout &lt;&lt;&quot;Algorithm mode of flexible Duct = Standard&quot;&lt;&lt;endl;
            break;
          case CATIHvaFlexibleDuctReference::CatFlexible :
            cout &lt;&lt;&quot;Algorithm mode of flexible Duct = Flexible&quot;&lt;&lt;endl;
            break;
          default:
            cout &lt;&lt;&quot;Invalid!!! Algorithm mode of flexible Duct&quot;&lt;&lt;endl;
            retCode = 26;
            goto EscapeWay;
          }

          hr = hDuctFlexRef-&gt;GetBuildMode(eBuildMode);
          if( FAILED(hr) ) { retCode = 27; goto EscapeWay; }
          switch(eBuildMode)
          {
          case CATIHvaFlexibleDuctReference::CATDuctSlack :
            cout &lt;&lt;&quot;Build mode of flexible Duct = Slack&quot;&lt;&lt;endl;
            break;
          case CATIHvaFlexibleDuctReference::CATDuctBend :
            cout &lt;&lt;&quot;Build mode of flexible Duct = Bend&quot;&lt;&lt;endl;
            break;
          case CATIHvaFlexibleDuctReference::CATDuctLength :
            cout &lt;&lt;&quot;Build mode of flexible Duct = Length&quot;&lt;&lt;endl;
            break;
          default:
            cout &lt;&lt;&quot;Invalid!!! Build mode of flexible Duct&quot;&lt;&lt;endl;
            retCode = 28;
            goto EscapeWay;
          }

          hr = hDuctFlexRef-&gt;GetSlack(dSlackValue);
          cout &lt;&lt;&quot;Slack = &quot;&lt;&lt;dSlackValue&lt;&lt;endl;
          if( FAILED(hr) ) { retCode = 29; goto EscapeWay; }

          hr = hDuctFlexRef-&gt;GetLength(dLength);
          cout &lt;&lt;&quot;Length = &quot;&lt;&lt;dLength&lt;&lt;endl;
          if( FAILED(hr) ) { retCode = 30; goto EscapeWay; }

          hr = hDuctFlexRef-&gt;GetFlexibleInformation( dAccuracy,
                                                     dFlexibility,
                                                     dTemperature,
                                                     dPressure
                                                  );
          if( FAILED(hr) ) { retCode = 31; goto EscapeWay; }
          //End of Get Nodes' Information for current Flexible Duct

          hr = hDuctFlexRef-&gt;GetEnds(pIEndDuctOne, pIEndDuctTwo);
          if( FAILED(hr) || ( NULL == pIEndDuctOne ) || ( NULL == pIEndDuctTwo ) )
          {
            retCode = 32;
            goto EscapeWay;
          }
        }//end of selected object is a Flexible Duct
      }//end of it is a Duct Instance
    }//end of List Object is NOT Insulation
  }//end of for loop on all children of root
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step15"></a>Disconnecting and Deleting the Session</h3>
<p>We delete the session and disconnect from the database</p>
<pre class="code">...
  myBag.RemoveAll(); /* PLM entities life-cycle */

  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;The SESSION is not Closed&quot;&lt;&lt;endl;
    retCode = 33;
  }
...</pre>
<script type="text/javascript">  insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to  use, access and navigate 
   flexible duct and insulation object and their parameters.
 </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2014]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
