<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Accessing Geometry from an Annotation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Accessing Geometry from an Annotation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAATpiAccessGeometry use case. This use case 
		explains how to access the geometry referenced by a 3D annotation. It also 
		illustrate how to perform some topological evaluation on the accessed geometry.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAATpiAccessGeometry Use Case</a>
				<ul>
					<li><a href="#What">What Does CAATpiAccessGeometry Do</a>
					</li>
					<li><a href="#How">How to Launch CAATpiAccessGeometry</a></li>
					<li><a href="#Where">Where to Find the CAATpiAccessGeometry 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you to use Technological Product Specifications 
(TPS) interfaces [<a href="#References">1</a>]. The use case demonstrates <em>CATITPS</em> 
interface usage to retrieve the TTRSs features (Technologically and Topologically 
Related Surfaces) referenced by a 3D annotation. It also illustrates how to scan 
the TTRS structure with <em>CATITTRS</em> interfaces to retrieve the RGE (Reference 
Geometrical Elements). <em>CATIRGE</em> and <em>CATIRGETopology</em> interfaces 
are used to retrieve topological cells from the geometry. Finally, geometrical and 
topological evaluations are performed to create and display a grid of points with 
their normal on those cells.</p>
<p>This use case also illustrates how a command can add and manage temporary representation 
in the main 3D viewer.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAATpiAccessGeometry Use Case</h2>
<p>CAATpiAccessGeometry is a use case of the CAATPSInterfaces.edu framework that 
illustrates CATTPSUseItf framework capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAATpiAccessGeometry Do</h3>
<p>The use case is an interactive command that prompts the user to select a 3D annotation 
to retrieve and analyze the geometry referenced. The result of the analysis is displayed 
in a panel. It shows the TTRS, RGE and topological cell composition of the referenced 
geometry. When the topological cell is a face, a grid of point with their normal 
vectors is displayed in the 3D viewer. The geometry referenced by the selected annotation 
is highlighted.</p>
<p>
<img alt="Annotated Geometry" height="629" src="images/CAATpiAccessGeometryResult.gif" width="1059"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAATpiAccessGeometry</h3>
<p>The use case command is available in the toolbar &quot;CAA Sample&quot; of the 
workbench Product Functionnal &amp; Tolerancing &amp; Annotation.</p>
<p>To launch CAATpiAccessGeometry, you will need to set up the build time environment, 
then compile CAATPSInterfaces.edu framework along with its prerequisites, set up 
the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>Do not type the module name on the command line, but type 3DEXPERIENCE instead. When 
the application is ready, do the following:</p>
<ul>
	<li>Create a 3D shape Representation, create a pad, add annotations by using 
		Functionnal Tolerancing &amp; Annotation workbench.</li>
	<li>By default the CAA Sample toolbar is not displayed, right click on a toolbar 
		and select it in the contextual menu to make it appear.</li>
	<li>Press the Access Geometry icon to start the command.</li>
</ul>
<p>
<img alt="Sample Toolbar" height="58" src="images/CAATpiToolbar.gif" width="107"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAATpiAccessGeometry Code</h3>
<p>The CAATpiAccessGeometry use case is located in the CAATpiAccessGeometry.m module 
of the CAATPSInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAATPSInterfaces.edu\CAATpiAccessGeometry.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are seven logical steps in CAATpiAccessGeometry:</p>
<ol>
	<li><a href="#Step1">Prolog</a></li>
	<li><a href="#Step2">Retrieving TTRSs from Selected Annotation</a></li>
	<li><a href="#Step3">Analyzing TTRS Composition</a></li>
	<li><a href="#Step4">Analyzing RGE Composition</a></li>
	<li><a href="#Step5">Highlighting the Geometry Referenced by the RGE</a></li>
	<li><a href="#Step6">Creating a Mesh of Point With their Normals on 
the Faces Retrieved from a RGE</a></li>
	<li><a href="#Step7">Epilog</a></li>
</ol>
<p>We will now comment each of these sections by looking at the code.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Prolog</h3>
<p>The use case is the class CAATpiAccessGeometryCmd which is a CATStateCommand 
that implement the following state chart diagram.</p>
<p>
<img alt="CAATpiAccessGeometryCmd Command State Chart Diagram" height="174" src="images/CAATpiAccessGeometryStatechartDiagram.gif" width="595"/></p>
<p>The Buildgraph method of the command implements this statechart diagram. There 
are 2 agents associated to the state <code>SelectState</code>. <code>SelectionAgent</code> 
is a <em>CATPathElementAgent</em> that accept only 3D annotation, when valuated 
the transition method <code>OnAnnotationSelected</code> is called. <code>ClosePanelAgent</code> 
is a <em>CATDialogAgent</em> that listen the Close button of the panel to terminate 
the command.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving TTRSs from Selected Annotation</h3>
<pre class="code">boolean CAATpiAccessGeometryCmd::<strong>OnAnnotationSelected</strong> (void * ipData)
{
if ( !_pSelectionAgent || !_pPanel ) return (TRUE);

  HRESULT rc = E_FAIL;

  int TTRSNodeCount = 0;
  int TTRSSupportCount = 0;
  int RGECount = 0;
  int FaceCount = 0;
  int EdgeCount = 0;
  int VertexCount = 0;

  // Read display parameters from panel
  _pPanel -&gt; GetRequiredDisplay (&amp;_bDisplay3DGrid, &amp;_bDisplayTTRSRep);

  // Retrieve the path of the selected annotation
  CATPathElement * <strong>pPathTPS</strong> = _pSelectionAgent -&gt; <strong>GetValue</strong> ();
  if ( pPathTPS )
  {
    // Retrieve HSO from editor and empty it
    CATFrmEditor * pEdt = GetEditor();
    if ( pEdt ) 
    {
      CATHSO * pHSO = pEdt -&gt; GetHSO();
      if ( pHSO ) 
      {
        pHSO -&gt; Empty();
        // Add selected PathElement in the HSO, it will be highlighted
        pHSO -&gt; AddElements (<strong>pPathTPS</strong>);

        CATISO * pISO = pEdt -&gt; GetISO();
        if ( pISO ) 
        {
          // Clean existing element in ISO
          pISO -&gt; RemoveElement (_pModelObjectForAdditionalRep);

          // Retrieve CATITPS interface on selected 3D annotation
          <strong>CATITPS</strong> * <strong>piTPS</strong> = NULL;
          rc = <strong>pPathTPS</strong> -&gt; <strong>Search</strong> (IID_CATITPS, (void**) &amp;<strong>piTPS</strong>);
          if ( SUCCEEDED(rc) )
          {
            // Retrieve the list of TTRSs which are directly referenced by
            // the annotation, most often that list contains only 1 element,
            // exeptions are Semantics Targets V5 and Default Annotation
            <strong>CATITTRSList</strong> * <strong>piTTRSList</strong> = NULL;
            rc = <strong>piTPS</strong> -&gt; <strong>GetTTRS</strong> (&amp;<strong>piTTRSList</strong>);
            if ( SUCCEEDED(rc) )
            {
              unsigned int TTRSCount = 0;
              <strong>piTTRSList</strong> -&gt; <strong>Count</strong> (&amp;TTRSCount);

              <strong>CATITTRS</strong> * <strong>piTTRS</strong> = NULL;

              // Allocate representation to display surfaces of TTRSs
              // Points and normals on the TTRSs faces will be
              // added in that Rep by AnalyseTTRS method.
              CAT3DBagRep * pRep = new CAT3DBagRep();

              // Iterate on the list TTRS
              for ( unsigned int Idx = 0 ; Idx &lt; TTRSCount ; Idx ++)
              {
                rc = <strong>piTTRSList</strong> -&gt; <strong>Item</strong> (Idx, &amp;<strong>piTTRS</strong>);
                if ( SUCCEEDED(rc) )
                {
                  // Analyse TTRS Composition
                  <strong>AnalyseTTRS</strong> (<strong>piTTRS</strong>, pHSO, pPathTPS,
                               TTRSNodeCount, TTRSSupportCount, RGECount,
                               FaceCount, EdgeCount, VertexCount, pRep);

                  // Construct a Rep to visualize TTRS and add it to ISO
                  AddTTRSGeometryOnRepresentation (piTTRS, pPathTPS, pRep);

                  piTTRS -&gt; Release();
                  piTTRS = NULL;
                }
              }
              // Add new Rep in ISO
              _pModelObjectForAdditionalRep -&gt; SetRep (pRep);

              pISO -&gt; AddElement (_pModelObjectForAdditionalRep);
              pRep = NULL;

              piTTRSList -&gt; Release();
              piTTRSList = NULL;
            }
            piTPS -&gt; Release();
            piTPS = NULL;
          }
          pISO = NULL;
        }
        // No more elements to Add in the HSO, notification is send
        // and HSO content can be highlighted.
        pHSO -&gt; EndAddElements ();
        pHSO = NULL;
      }
      pEdt = NULL;
    }
    pPathTPS = NULL;
  }
  ...
}</pre>
<p>When selection agent is valuated the transition method <code>OnAnnotationSelected</code> 
is called. The <em>CATPathElement</em> selected <code>pPathTPS</code> is retrieved 
by calling <code>GetValue</code> on the selection agent. The selected 3D annotation
<code>piTPS</code> is retrieved as a <em>CATITPS</em> interface pointer by using 
the <code>Search</code> method of <em>CATPathElement</em> . The method <em>CATITPS</em>::<code>GetTTRS</code> 
retrieves the list of TTRS directly referenced by the 3D annotation as a <em>CATITTRSList</em> 
interface pointer. <em>CATITTRSList</em>::<code>Count</code> and <em>CATITTRSList</em>::<code>Item</code> 
methods allow to iterate on the list. Each element of the list is retrieved as a
<em>CATITTRS</em> interface pointer and provided to the method <code>AnalyseTTRS</code> 
to obtain some informations on its composition.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Analyzing TTRS Composition</h3>
<pre class="code">HRESULT CAATpiAccessGeometryCmd::<strong>AnalyseTTRS</strong> (CATITTRS * <strong>ipiTTRS</strong>,
                                              CATHSO * ipHSO, 
                                              CATPathElement * ipPathTPS,
                                              int &amp; <strong>oTTRSNodeCount</strong>,
                                              int &amp; <strong>oTTRSSupportCount</strong>,
                                              int &amp; oRGECount,
                                              int &amp; oFaceCount,
                                              int &amp; oEdgeCount,
                                              int &amp; oVertexCount,
                                              CAT3DBagRep * iopRep)
{
  if ( ! ipiTTRS || !ipHSO || !ipPathTPS ) return (E_FAIL);

  HRESULT oRc = E_FAIL;

  // Retrieve TTRS nature: support or node.
  CATMmrTTRSType TTRSType = <strong>ipiTTRS</strong> -&gt; <strong>GetNature</strong> ();

  // Retrieve the components of the TTRS
  CATLISTV(CATBaseUnknown_var) CompList;
  HRESULT rc = ipiTTRS -&gt; <strong>GetComponents</strong> (CompList);
  if ( SUCCEEDED(rc) )
  {
    int ComponentCount = CompList.Size();
    int AnalyseSuccessCount = 0;

    CATBaseUnknown_var spBaseComp;

    // If TTRS is a node, components are TTRS
    if ( TTRSType == <strong>CATMmrNodeTTRS</strong> )
    {
      <strong>oTTRSNodeCount</strong> ++; // Increment node count

      // Iterate on TTRS components and analyse them
      CATITTRS * <strong>piTTRSComp</strong> = NULL;
      for ( int i = 1 ; i &lt;= ComponentCount ; i++ )
      {
        spBaseComp = CompList[i];
        if ( NULL_var != spBaseComp )
        {
          rc = spBaseComp -&gt; QueryInterface(IID_CATITTRS, (void**)&amp;piTTRSComp);
          if ( SUCCEEDED(rc) )
          {
            rc = <strong>AnalyseTTRS</strong> (<strong>piTTRSComp</strong>, ipHSO, ipPathTPS,
                              oTTRSNodeCount, oTTRSSupportCount, oRGECount,
                              oFaceCount, oEdgeCount, oVertexCount, iopRep);
            if ( SUCCEEDED(rc) )
            {
              AnalyseSuccessCount++;
            }
            piTTRSComp -&gt; Release();
            piTTRSComp = NULL;
          }
          spBaseComp = NULL_var;
        }
      }
    }
    else // If TTRS is a support, components are RGE
    {
      <strong>oTTRSSupportCount</strong> ++; // Increment support count

      // Iterate on RGE and analyse them
      <strong>CATIRGE</strong> * <strong>piRGE</strong> = NULL;
      for ( int i = 1 ; i &lt;= ComponentCount ; i++ )
      {
        spBaseComp = CompList[i];
        if ( NULL_var != spBaseComp )
        {
          rc = spBaseComp -&gt; QueryInterface (IID_CATIRGE, (void**)&amp; <strong>piRGE</strong>);
          if ( SUCCEEDED(rc) )
          {
            rc = <strong>AnalyseRGE</strong> (<strong>piRGE</strong>, ipHSO, ipPathTPS,
                             oRGECount, 
                             oFaceCount, oEdgeCount, oVertexCount, iopRep);
            if ( SUCCEEDED(rc) )
            {
              AnalyseSuccessCount++;
            }
            piRGE -&gt; Release();
            piRGE = NULL;
          }
          spBaseComp = NULL_var;
        }
      }
    }
    // method return S_OK only if each component is analysed successfuly
    if ( ComponentCount == AnalyseSuccessCount )
    {
      oRc = S_OK;
    }
  }
  return (oRc);
}</pre>
<p>The <code>AnalyseTTRS</code> purpose is to identify the composition of the input 
TTRS by scanning recursively the TTRS tree downward. There are two kinds of TTRS: 
nodes and supports. For a TTRS node its components are other TTRSs, for a support 
TTRS its components are RGEs. <em>CATITTRS</em>::<code>GetNature</code> method allow 
to known if the TTRS is a node or a support. According to the nature of the input 
TTRS the counter <code>oTTRSNodeCount</code> or <code>oTTRSSupportCount</code> is 
incremented, <em>CATITTRS</em>::<code>GetComponents</code> is used to retrieved 
the components of a TTRS. Iteration is performed on the component list to analyze 
each component by calling <code>AnalyseTTRS</code> or <code>AnalyseRGE</code> method.</p>
<p>
<img alt="TTRS Tree" height="308" src="images/CAATpiTTRSTree.gif" width="668"/></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Analyzing RGE Composition</h3>
<pre class="code">HRESULT CAATpiAccessGeometryCmd::<strong>AnalyseRGE</strong> (CATIRGE * <strong>ipiRGE</strong>,
                                             CATHSO * ipHSO, 
                                             CATPathElement * ipPathTPS,
                                             int &amp; <strong>oRGECount</strong>,
                                             int &amp; <strong>oFaceCount</strong>,
                                             int &amp; <strong>oEdgeCount</strong>,
                                             int &amp; <strong>oVertexCount</strong>,
                                             CAT3DBagRep * iopRep)
{
  if ( ! ipiRGE || !ipHSO || !ipPathTPS || !iopRep) return (E_FAIL);

  HRESULT oRc = E_FAIL;

  <strong>oRGECount</strong> ++; // Increment RGE Count
  
  <strong>CATIRGETopology</strong> * <strong>piRGETopo</strong> = NULL;
  HRESULT rc = <strong>ipiRGE</strong> -&gt; QueryInterface (IID_CATIRGETopology, 
                                         (void**)&amp; <strong>piRGETopo</strong>);
  if ( SUCCEEDED(rc) )
  {
    CATLISTP (CATCell) * pCellList = NULL;
    rc = <strong>piRGETopo</strong> -&gt; <strong>GetCells</strong> (&amp;pCellList);
    if ( SUCCEEDED(rc) )
    {
      int CellCount = pCellList -&gt; Size();
      for (int CellIdx = 1; CellIdx &lt;= CellCount; CellIdx++)
      {
        <strong>CATCell</strong> * pCell = (*pCellList)[CellIdx];
        if ( pCell ) 
        {
          int CellDim = pCell -&gt; <strong>GetDimension</strong>();
          switch ( CellDim )
          {
          case 0 : <strong>oVertexCount</strong> ++ ; break;
          case 1 : <strong>oEdgeCount</strong> ++ ; break;
          case 2 : // Cell is a Face
            {
              <strong>oFaceCount</strong> ++;
              CATFace * pFace = (CATFace*) pCell;
              <strong>CreatePointAndNormalRepresentationOnFace</strong> (pFace, piRGETopo,
                                                        ipPathTPS, iopRep);
              pFace = NULL;
            }
            break;
          }
          pCell -&gt; Release();
          pCell = NULL;
        }
      }
      pCellList -&gt; RemoveAll();
      delete pCellList;
      pCellList = NULL;
    }
    piRGETopo -&gt; Release();
    piRGETopo = NULL;
  }
...</pre>
<p>The <code>AnalyseRGE</code> method analyse the topological composition of the 
geometrical element referenced by the RGE. For that the interface <em>CATIRGETopology</em> 
is available on the RGE feature. The method <code>GetCells</code> allows to retrieve 
a list of topological cell. According to the dimension of each cell given by the
<code>GetDimension</code> method the counters <code>oVertexCount</code>, <code>oEdgeCount</code> 
and <code>oFaceCount</code> are incremented. For each <em>CATFace</em> the method
<code>CreatePointAndNormalRepresentationOnFace</code> is called, its behavior is 
described after.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Highlighting the Geometry Referenced by the RGE</h3>
<pre class="code">  <strong>CATIBuildPath</strong> * <strong>piBuildPath</strong> = NULL;
  rc = <strong>ipiRGE</strong> -&gt; QueryInterface (IID_CATIBuildPath, (void**)&amp;<strong>piBuildPath</strong>);  
  if ( SUCCEEDED(rc) )
  {
    CATPathElement * <strong>pPath</strong> = NULL;
    rc = <strong>piBuildPath</strong> -&gt; <strong>ExtractPathElement</strong> (<strong>ipPathTPS</strong>, &amp;<strong>pPath</strong>);
    if ( SUCCEEDED(rc) )
    {
      ipHSO -&gt; <strong>AddElements</strong> (pPath);

      <strong>SpecialTreatementForPathWithSeveralLeaf</strong> (pPath, ipHSO);

      pPath -&gt; Release();
      pPath = NULL;
    }
    piBuildPath -&gt; Release();
    piBuildPath = NULL;
  }</pre>
<p>Another action performed by the <code>AnalyseRGE</code> method is the highlight 
of the referenced geometry. This is possible thank to the <em>CATIBuildPath</em> 
interface that is available on the RGE feature. The <em>CATIBuildPath</em>::<code>ExtractPathElement</code> 
method is used to build the <em>CATPathElement</em> <code>pPath</code> on the referenced 
geometry, the <em>CATPathElement</em> <code>ipPathTPS</code> of the selected TPS 
is used as context in <code>ExtractPathElement</code>. pPath is placed in the HSO 
by using AddElements.</p>
<p>
<img alt="RGE Referenced Geometry Highlight" height="290" src="images/CAATpiPathElementWithSeveralLeaf.gif" width="603"/></p>
<p>In some cases the <em>CATPathElement</em> constructed for the referenced geometry 
contains several leafs. When placed in HSO only the first leaf is highlighted. To 
solve this problem the method <code>SpecialTreatementForPathWithSeveralLeaf</code> 
creates and adds to HSO an additionnal <em>CATPathElement</em> for each other leaf 
of the constructed <em>CATPathElement</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a Mesh of Point With their Normals on 
the Faces Retrieved from a RGE</h3>
<pre class="code">HRESULT CAATpiAccessGeometryCmd::<strong>CreatePointAndNormalRepresentationOnFace</strong> (
                                                  CATFace * <strong>ipFace</strong>,
                                                  CATIRGETopology * <strong>ipiRGETopo</strong>,
                                                  CATPathElement * <strong>ipPathTPS</strong>,
                                                  CAT3DBagRep * iopRep)
{
  if ( !ipFace || !ipiRGETopo || !ipPathTPS || !iopRep ) return (E_FAIL);

  // If display of grid is not required
  if ( !_bDisplay3DGrid ) return (S_OK);

  HRESULT oRc = E_FAIL;

  // Retrieve coefficient to direction along outside material side
  int Coefficient = 0;
  <strong>ipiRGETopo</strong> -&gt; <strong>GetOutsideMaterialCoefficientOnNormal</strong>(&amp;Coefficient);

  // Compute Transformation to take into account product position

  // First retrieve local transformation to apply on cells
  CATMathTransformation <strong>LocalPos</strong>;
  CATMathTransformation * pLocalPos = NULL;
  HRESULT rc = <strong>ipiRGETopo</strong> -&gt; <strong>GetTransformation</strong> (&amp;pLocalPos);
  if ( SUCCEEDED(rc) )
  {
    <strong>LocalPos</strong> = (*pLocalPos);

    delete pLocalPos;
    pLocalPos = NULL;
  }

  // Second retrieve transformation from product structure.
  CATMathTransformation <strong>AbsolutePos</strong>;
  <strong>CATIMovable</strong> * <strong>piMove</strong> = NULL;
  rc = <strong>ipPathTPS</strong> -&gt; <strong>Search</strong> (IID_CATIMovable, (void**)&amp; piMove);
  if ( SUCCEEDED(rc) )
  {
    <strong>piMove</strong> -&gt; <strong>GetAbsPosition</strong>(<strong>AbsolutePos</strong>);

    piMove -&gt; Release();
    piMove = NULL;
  }

  // Cumulate the two positions
  CATMathTransformation <strong>Position</strong> =  <strong>AbsolutePos</strong> * <strong>LocalPos</strong>;

  // Allocate a new rep for points and normals of that face
  CAT3DCustomRep * pPointsAndNormalsRep = new CAT3DCustomRep();

  <strong>CATSurface</strong> * <strong>pSurface</strong> = <strong>ipFace</strong> -&gt; <strong>GetSurface</strong>();
  if ( pSurface )
  {
    const <strong>CATSurLimits</strong> * <strong>pSurLimits</strong> = <strong>ipFace</strong> -&gt; <strong>Get2DBoundingBox</strong>();
    if ( pSurLimits &amp;&amp; ! pSurLimits -&gt;IsEmpty() )
    {
      double Umin = 0.0;
      double Umax = 0.0;
      double Vmin = 0.0;
      double Vmax = 0.0;
      <strong>pSurLimits</strong> -&gt; <strong>GetExtremities</strong>(Umin, Vmin, Umax, Vmax);

      double Ucurrent = 0.0;
      double Vcurrent = 0.0;

      int <strong>GridResolution</strong> = 10;

      double FractionU = (Umax - Umin) / GridResolution;
      double FractionV = (Vmax - Vmin) / GridResolution;

      CATMathPoint PointOnSurface;
      CATMathDirection NormalAtPointOnSurface;
      CATSurParam InitialParam;
      CATMathPoint PointOnSurfacePos;
      CATMathDirection NormalAtPointOnSurfacePos;

      CATGeoFactory * pGeoFact = ipFace -&gt; GetContainer();
      if ( pGeoFact )
      {
        // Create topological operator for checking that points are inside face
        <strong>CATIGMPositionPtFaceOperator</strong> * <strong>pPosPtFaceOpe</strong>
         = <strong>CATGMCreatePositionPtFaceOperator</strong>(pGeoFact, InitialParam, ipFace);
        if ( pPosPtFaceOpe )
        {
          for ( int IdxU = 0 ; IdxU &lt;= GridResolution ; IdxU ++)
          {
            Ucurrent = Umin + FractionU * IdxU; // Increment U parameter

            for ( int IdxV = 0 ; IdxV &lt;= GridResolution ; IdxV ++)
            {
              Vcurrent = Vmin + FractionV * IdxV; // Increment V parameter

              // Evaluate point and normal on surface              
              CATSurParam <strong>Param</strong>;
              <strong>pSurface</strong> -&gt; <strong>CreateParam</strong> (Ucurrent, Vcurrent, <strong>Param</strong>);

              <strong>pSurface</strong> -&gt; <strong>EvalPoint</strong> (Param, PointOnSurface);
              <strong>pSurface</strong> -&gt; <strong>EvalNormal</strong> (Param, NormalAtPointOnSurface);

              // Check that point is inside Face Limits
              <strong>pPosPtFaceOpe</strong> -&gt; <strong>SetSurParam</strong> (<strong>Param</strong>);
              <strong>pPosPtFaceOpe</strong> -&gt; <strong>Run</strong> ();
              
              // If point is inside face limits, keep it for further treatement
              if ( CATLocationOuter != <strong>pPosPtFaceOpe</strong>-&gt; <strong>GetOneResult</strong>() )
              {
                // Orient direction along outside material side
                if ( <strong>Coefficient</strong> != 0 )
                {
                  <strong>NormalAtPointOnSurface</strong> *= <strong>Coefficient</strong>;
                }
                
                // Apply Transformation to take into account product position
                <strong>PointOnSurfacePos</strong> = <strong>Position</strong> * <strong>PointOnSurface</strong>;
                <strong>NormalAtPointOnSurfacePos</strong> = <strong>Position</strong> * <strong>NormalAtPointOnSurface</strong>;

                // Create Representation of Point and normal and add it
                // to the representation
                <strong>CreateGraphicalPrimitives</strong> (pPointsAndNormalsRep, PointOnSurfacePos,
                                           NormalAtPointOnSurfacePos);
              }
            }
          }
          delete pPosPtFaceOpe;
          pPosPtFaceOpe = NULL;
        }
        pGeoFact = NULL;
      }
      pSurLimits = NULL;
    }
    pSurface = NULL;
  }
  iopRep -&gt; AddChild((*pPointsAndNormalsRep));

  return (oRc);
}</pre>
<p>The method <code>CreatePointAndNormalRepresentationOnFace</code> needs as input 
data:</p>
<ul>
	<li>A <em>CATFace</em> pointer that will be used for topological and geometrical 
		evaluations.</li>
	<li>A <em>CATIRGETopology</em> pointer that will be used to get the local transformation 
		to apply on cells (or on the results computed from cells) to position them 
		in the reference product to which is associated the RGE. The outside material 
		coefficient to apply on normal evaluated is also retrieved from CATIRGETopology.</li>
	<li>The selected <em>CATPathElement</em> <code>ipPathTPS</code> that is used 
		to retrieved the transformation that describe the absolute position of the 
		instance of the product in which the TPS has been selected.</li>
</ul>
<p>The first step is to retrieve the coefficient that will be applied on the normal 
vectors computed on surface to orient them in the direction of the outside material 
of the part. This is done with <em>CATIRGETopology</em>::<code>GetOutsideMaterialCoefficientOnNormal</code> 
method that returns a multiplicative coefficient equal to 1 or -1. In case of problem 
an error value of 0 is returned.</p>
<p>Secondly the position matrix of the results computed from cell is calculated. 
The local transformation is retrieved by <em>CATIRGETopology</em>::<code>GetTransformation</code> 
and the global position is retrieved by calling <code>GetAbsPosition</code>, on 
the <em>CATIMovable</em> interface pointer retrieved on the CATPathElement of the 
selected annotation. The local and global transformation are cumulated to obtain 
the position.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Epilog</h3>
<p>The use case finishes when the command ends by pressing the close button in 
the panel.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated how to access and manipulate 3D Annotations geometry.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAATpiTaTPSOverview.htm">Technological Product Specification 
		Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2002]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
