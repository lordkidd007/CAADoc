<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Manipulating Folder Tree</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Manipulating Folder Tree</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create and manipulate a Folder tree. It discusses 
		the CAAFldCreateTree use case.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAFldCreateTree Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAFldCreateTree Do</a></li>
					<li><a href="#How">How to Launch CAAFldCreateTree</a></li>
					<li><a href="#Where">Where to Find the CAAFldCreateTree Code</a>
					</li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to introduce you to programming Folder modeler using 
the CAA Folder interfaces: <em>PLMIFolder</em>, <em>PLMISubFolder</em>, <em>PLMIRootFolderFactory</em>, 
and <em>PLMIRootFolderFactoryServices</em>.</p>
<p>The scenario shows you how to manipulate a Folder tree :</p>
<ul>
	<li>Creation.</li>
	<li>Modification (move, copy).</li>
	<li>Deletion.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFldCreateTree Use Case</h2>
<p>CAAFldCreateTree is a use case of the CAAFolderInterfaces.edu framework that 
illustrates PLMFolderInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFldCreateTree Do</h3>
<p>The use case creates the following Folder tree:</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Initial Folder Tree</caption>
	<tr>
		<td>
		<img alt="Initial Folder Tree" src="images/CAAFolCreateTree_OutputFolderTree.png"/></td>
	</tr>
</table>
<p>The use case then modifies the Folder tree:</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: Folder Modification (Move/Copy Folders)</caption>
	<tr>
		<td>
		<img alt="Folder Modification (Move/Copy Folders)" src="images/CAAFolCreateTree_OutputFolderTree2.png"/></td>
	</tr>
</table>
<p><code>CAAFldCreateTree</code> scenario:</p>
<ol>
	<li>Create Folder tree as:
		<ul>
			<li>Create Root Folder <code>CAAFldRoot1</code>.</li>
			<li>Insert Folder <code>CAAFldChild1</code> under Root Folder.</li>
			<li>Insert Folder <code>CAAFldChildSub1</code> under CAAFldChild1 Folder.</li>
		</ul>
	</li>
	<li>Attach References to a Folder - the result is [<a href="#Fig1">Fig.1</a>]:
		<ul>
			<li>Create Product reference <code>CAAFldProduct</code> and <code>CAAFldProduct2</code>.</li>
			<li>Save the Session (save the 2 products in DB).</li>
			<li>Attach them to <code>CAAFldChildSub1</code> Folder.</li>
		</ul>
	</li>
	<li>Folder tree modification - the result is [<a href="#Fig2">Fig.2</a>]:
		<ul>
			<li>Move <code>CAAFldChildSub1</code> Folder under Root Folder,
				<code>CAAFldRoot1</code>.</li>
			<li>Copy <code>CAAFldChildSub1</code> Folder under <code>CAAFldChild1</code> 
				Folder.</li>
		</ul>
	</li>
	<li>Detach Products:
		<ul>
			<li>Detach Products from CAAFldChildSub1.</li>
			<li>Detach Products from CAAFldChildSub1.</li>
		</ul>
	</li>
	<li>Delete <code>CAAFldRoot1</code> tree.</li>
</ol>
<p><strong>Note</strong>: The name of the objects as presented by pictures or scenarios, 
are an help to understand the use case, but the real names of the PLM objects provide 
from the initialization business logic.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFldCreateTree</h3>
<p>To launch <code>CAAFldCreateTree</code>, you will need to set up the build time 
environment, then compile <code>CAAFldCreateTree</code> along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><a><code><em>mkrun -c &quot;CAAFldCreateTree Repository Server User Password 
SecurityCtx Environment&quot;</em></code></a>.</p>
<p>Where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host::port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role that enables Creation/Modification/Delete of Folders and Product 
		in chosen environment</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment with the customized Folder modelers (Root Folder and 
		Folder) and PRODUCT modeler</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFldCreateTree Code</h3>
<p>The CAAFldCreateTree use case is made of a single file located in the CAAFldCreateTree.m 
module of the CAAFolderInterfaces.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFolderInterfaces.edu\CAAFldCreateTree.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<ul>
	<li><a href="#Step1">Creating a PLM Session</a></li>
	<li><a href="#Step2">Creating a Folder Tree</a></li>
	<li><a href="#Step3">Creating and Attaching a Product</a></li>
	<li><a href="#Step4">Modifying the Folder Tree</a></li>
	<li><a href="#Step5">Deleting the Folder Tree and Managing Folder Life Cycle</a></li>
	<li><a href="#Step6">Closing the Session</a></li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a PLM Session</h3>
<p>The CAAFldCreateTree use case begins by creating a session and connecting to 
the Input Repository, which in this case is
<script type="text/javascript">insertRepository();</script>
. This, being the most fundamental prerequisite for all batch use cases, it is the 
first step in their execution.</p>
<p>In this case, we create a session &amp; connect to repository with the Designer 
Role (since we create new PLM data). There are other connection parameters as well, 
details of which can be found in the &quot;Connecting to V6 Server&quot; 
use case article [<a href="#References">2</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating a Folder Tree</h3>
<ul>
	<li>Creating the Root Folder Factory:
		<pre class="code">...
<strong>PLMIRootFolderFactory</strong> * pFolderFactory = NULL;
HR = <strong>PLMRootFolderFactoryServices::CreateRootFolderFactory</strong>(pFolderFactory);
...</pre>
		<p>The method PLMRootFolderFactoryServices::CreateRootFolderFactory returns 
		a pointer on PLMIRootFolderFactory.</p>
	</li>
	<li>Creating Root Folder:
		<pre class="code">...
<strong>PLMIFolder</strong> * pRoot1 = NULL; 
CATListValCATICkeParm_var iEmptyListAttr; 
HR = pFolderFactory-&gt;<strong>RootFolderCreation</strong>(CurrentEnv, iEmptyListAttr, pRoot1);
...</pre>
		<p>The Root Folder is created from the customization according to the current 
		environment.</p>
		<p>The method <code>RootFolderCreation</code> returns a pointer on <em>PLMIFolder</em>. 
		This method requires an environment as input. The tree that will be created 
		below root will always be in the same environment. The list of attributes 
		is empty, the init business logical fills some of them.</p>
	</li>
	<li>Creating Sub Folders:
		<pre class="code">...
<strong>PLMISubFolder</strong> * pChild1 = NULL;
HR = pRoot1-&gt;<strong>NewFolderInsertion</strong>(iEmptyListAttr, pChild1);
...</pre>
		<p>The sub-folder Folder is created from the customization according to 
		the current environment.</p>
		<p>The method <code>NewFolderInsertion</code> returns a pointer on <em>PLMISubFolder</em>. 
		As for a Root Folder, the list of attributes is empty. <em>PLMISubFolder</em> 
		interface inherits from <em>PLMIFolder</em>, therefore all <em>PLMIFolder</em> 
		methods may be called from <em>PLMISubFolder</em> interface.</p>
	</li>
	<li>Managing life cycle for Folder tree:
		<pre class="code">...
CATOmbLifeCycleRootsBag Bag;
Bag.<strong>InsertRoot</strong>(pRoot1);
...</pre>
		<p>The method <code>InsertRoot</code> on <em>CATOmbLifeCycleRootsBag</em> 
		called with the Root Folder as input, enables lifecycle management of the 
		full Folder tree during the session.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating and Attaching a Product</h3>
<ul>
	<li>Getting Product Factory:
		<pre class="code">...
<strong>CATIPrdReferenceFactory</strong> * pPrdFactory = NULL; 
HR = CATPrdFactory::<strong>CreatePrdFactory</strong>(IID_CATIPrdReferenceFactory, (void**)&amp;pPrdFactory);
...</pre>
		<p>The method CATPrdFactory::CreatePrdFactory returns a pointer on CATIPrdReferenceFactory 
		interface.</p>
	</li>
	<li>Creating Product reference:
		<pre class="code">...
CATIPLMProducts * pPLMProduct = NULL;
CATListValCATICkeParm_var iEmptyListAttr;
HR = pPrdFactory-&gt;<strong>CreatePrdReference</strong>(NULL, iEmptyListAttr, pPLMProduct);
...</pre>
	</li>
	<li>Creating one more Product reference (product 2):
		<pre class="code">...
CATIPLMProducts * pPLMProduct2 = NULL;
CATListValCATICkeParm_var iEmptyListAttr;
HR = pPrdFactory-&gt;<strong>CreatePrdReference</strong>(NULL, iEmptyListAttr, pPLMProduct2);
...</pre>
	</li>
	<li>Saving Product calling <code>Save</code> method of <em>CATAdpSaver</em>:
		<pre class="code">...
  <strong>CATAdpSaver</strong> saver;
  HR = saver.<strong>Save()</strong>; 
...</pre>
		<p>The attachment of the Product to a Folder requires that the Product already 
		exists in database, therefore this save is mandatory for the next step.</p>
	</li>
	<li>Retrieving CATIAdpPLMIdentificator from created Products:
		<pre class="code">...
<strong>CATIPLMComponent</strong> * pProduct = NULL;
<strong>CATIAdpPLMIdentificator</strong> * pProdId = NULL;
HR = pPLMProduct-&gt;<strong>QueryInterface</strong>(IID_CATIPLMComponent, (void**) &amp;pProduct);
HR = pProduct-&gt;<strong>GetAdpID</strong>(pProdId);
...
<strong>CATIPLMComponent</strong> * pProduct2 = NULL;
<strong>CATIAdpPLMIdentificator</strong> * pProdId2 = NULL;
HR = pPLMProduct-&gt;<strong>QueryInterface</strong>(IID_CATIPLMComponent, (void**) &amp;pProduct2);
HR = pProduct-&gt;<strong>GetAdpID</strong>(pProdId2);
...</pre>
		<p>In order to retrieve <em>CATIAdpPLMIdentificator</em>, we cast our Product 
		to <em>CATIPLMComponent</em> interface and call <code>GetAdpID</code> method 
		which returns the identifier.</p>
	</li>
	<li>Attaching Products to SubFolder:
		<p>Put identificators in list, then attach product child</p>
		<pre class="code">...
CATListPtrCATIAdpPLMIdentificator idListToAttach;
idListToAttach.Append(pProdId);
idListToAttach.Append(pProdId2);
...
HR = pChildSub1-&gt;<strong>AttachObject</strong>(idListToAttach);
...</pre>
		<p>The method <code>AttachObject</code> is specific to <em>PLMISubFolder</em> 
		interface because an Reference object may not be attached on a Root Folder.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Modifying the Folder Tree</h3>
<ul>
	<li>Moving a SubFolder under another parent:
		<pre class="code">...
CATListPtrPLMISubFolder listOfFoldersToMove;
listOfFoldersToMove.Append(pChildSub1);
HR = pRoot1-&gt;<strong>InsertMovedFolderTree</strong>(listOfFoldersToMove);
...
</pre>
		<p><code>CAAFldChildSub1</code> is moved from below <code>CAAFldChild1</code> 
		to below <code>CAAFldRoot1</code>.</p>
		<p>A call to PLMIFolder::InsertMovedFolderTree on pRoot1 (a Root Folder) 
		with following inputs:</p>
		<ul>
			<li><code>listOfFoldersToMove</code>, a <em>CATListPtrPLMISubFolder</em> 
				type list, a folder list for moving objects.</li>
		</ul>
	</li>
	<li>Copying a Sub Folder under another parent:
		<pre class="code">...
CATListPtrPLMISubFolder inputListOfFoldersToCopy;
CATListPtrPLMISubFolder outputListOfFoldersCopied; 
inputListOfFoldersToCopy.Append(pChildSub1);
HR = pChild1-&gt;<strong>InsertCopiedFolderTree</strong>(inputListOfFoldersToCopy, Intermediate, outputListOfFoldersCopied, Bag);
...											
<strong>PLMISubFolder</strong> * pCopiedChildSub1=outputListOfFoldersCopied[1];
...</pre>
		<p><code>CAAFldChildSub1</code> is copied from below <code>CAAFldRoot1
		</code>to below <code>CAAFldChild1</code>.</p>
		<p>A call to <code>PLMISubFolder::InsertCopiedFolderTree</code> on pChild1 
		(a child ) with following inputs:</p>
		<ul>
			<li><code>inputListOfFoldersToCopy</code>,a <em>CATListPtrPLMISubFolder</em> 
				type, Folders to copy.</li>
			<li>Intermediate, a copy intermediate mode (Tree is duplicated with 
				links towards references).</li>
			<li><code>outputListOfFoldersCopied</code>, a <em>CATListPtrPLMISubFolder</em> type, 
				output copied Folders.</li>
			<li><code>Bag</code>, a <em>CATOmbLifeCycleRootsBag</em> type,to handle the lifecycle 
				management</li>
		</ul>
		<p>The method returns the new created Folder.</p>
	</li>
	<li>Detaching reference from a Sub Folder:
		<pre class="code">...
HR = pChildSub1-&gt;<strong>DetachObject</strong>(idListToAttach);
...
HR = pChildSub1-&gt;<strong>DetachObject</strong>(pProdId);
...</pre>
		<p>The method <code>DetachObject</code> is only available on <em>PLMISubFolder</em> 
		interface. The input is the identifier of Reference object, as for method
		<code>AttachObject</code> method.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Deleting the Folder Tree and Managing Folder Life Cycle</h3>
<ul>
	<li>Deleting Root Folder:
		<pre class="code">...
HR = pFolderFactory-&gt;<strong>DeleteRootFolder</strong>(pRoot1);
...</pre>
		<p>The method deletes <code>CAAFldRoot1</code> and all it's descendants.</p>
	</li>
	<li>Managing life cycle for Folder tree:
		<pre class="code">...
Bag.RemoveAll();
...</pre>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Close session</h3>
<p>The &quot;Connecting to V6 Server&quot; use case article 
[<a href="#References">2</a>] deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has shown how to create and manipulate a Folder tree using Folder 
interfaces.</p>
<p>It has shown how to manage Folder lifecycle during the session with CATOmbLifeCycleRootsBag.</p>
<p>It has also shown how to create a Product reference, needed for attach and detach 
methods.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: 1 [Nov 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
