<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing Folder Structure</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing Folder Structure</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>The Use case illustrates Folder Structure and browsing of it. In the 
		process UC shows how to retrieve Sub-Folders aggregated beneath RootFolder/Folder 
		and Items aggregated beneath Folders.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#Where">The CAAFldBrowsingFolderStructureUse Case</a>
				<ul>
					<li><a href="#What">What Does the CAAFldBrowsingFolderStructure Do</a></li>
					<li><a href="#How">How to Launch CAAFldUcBrowsingFolderStructure</a></li>
					<li><a href="#Where">Where to Find the CAAFldBrowsingFolderStructure 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to understand Folder structure and 
familiarize with the APIs meant for browsing Folder structure. In the process of 
browsing we learn,</p>
<ul>
	<li>Querying of Root folder and folder with identification set attributes as 
		an input.</li>
	<li>Opening a folder and load it into session.</li>
	<li>Retrieving the Sub-Folders aggregated beneath a folder, and loading them 
		into session.</li>
	<li>Managing folder session life cycle.</li>
	<li>Retrieving Items aggregated beneath folder.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAFldBrowsingFolderStructureUse Case</h2>
<p><code>CAAFldUcBrowsingFolderStructure</code> is a use case of the <code>CAAFolderInterfaces.edu</code> 
framework that illustrates the <code>PLMFolderInterfaces</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAFldBrowsingFolderStructureDo</h3>
<p>This Use Case (UC) illustrates the process of navigation of Folder structure.</p>
<p>For demonstration we use input model as shown in [<a href="#Fig1">Fig. 1</a>]. 
As [<a href="#Fig1">Fig.1</a>] shows it has one root and it has multiple children. 
Some child have there own Childs and items.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Sample Input Folder Structure Model</caption>
	<tr>
		<td>
		<img alt="Sample Input Folder Structure Model" height="463" src="images/CAAFldBrowsingFolderStructure_image1.jpg" width="556"/></td>
	</tr>
</table>
<p>For browsing the main points are as follows:</p>
<ul>
	<li>Load the input Folder in session based on the input customisation and Identification 
		Attribute-Value set.</li>
	<li>For a folder we display
	<ul>
		<li>Its logical name ( coming from CATICkeObject).</li>
		<li>The Identification attributes-value set.</li>
		</ul>
	</li>
	<li>For each item of a folder we display Its type (CATIAdpType alias name), 
		and Identification attributes-value set.</li>
</ul>
<p>The is output is as depicted below [<a href="#Fig2">Fig.2</a>]</p>
<table>
	<caption><a name="Fig2"></a>Fig.2 Console Output of the Folder Structure
	</caption>
	<tr>
		<td>
		<pre class="code">Alias name of CustoPLMClassType = Folder Root DS
Input folder is Root type Folder
&lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_RootFolder <strong>PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_RootFolder&gt;
  &lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_Folder1 <strong>PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_Folder1 <strong>V_IdNamingSpace</strong>:C93EA8EF0000054449C21BE70001518D&gt;
    &lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_Folder1.1 <strong>PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_Folder1.1 V_IdNamingSpace:C93EA8EF0000054449C21BE70001518F&gt;
      &lt;<strong>Item 1</strong>-Representation DS Type- <strong>PLM_ExternalID:</strong>CAAFldBrowsingFolderStructure_Representation1<strong>V_version</strong>:---&gt;<br />  &lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_Folder2 <strong>PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_Folder2 <strong>V_IdNamingSpace</strong>:C93EA8EF0000054449C21BE70001518D&gt;<br />    &lt;<strong>Item 1</strong>-Product DS Type- <strong>PLM_ExternalID:</strong>CAAFldBrowsingFolderStructure_Product1 <strong>V_version</strong>:---&gt;
    &lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_Folder2.2 <strong>PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_Folder2.2 <strong>V_IdNamingSpace</strong>:C93EA8EF0000054449C21BE700015193&gt;
      &lt;<strong>Logical Name of the Folder::</strong>CAAFldBrowsingFolderStructure_Folder2.1<strong> PLM_ExternalID</strong>:CAAFldBrowsingFolderStructure_Folder2.1 <strong> V_IdNamingSpace</strong>:C93EA8EF0000054449C21BE700015193&gt;
        &lt;<strong>Item 1</strong>-Product DS Type- <strong>PLM_ExternalID:</strong>CAAFldBrowsingFolderStructure_Product1 <strong>V_version</strong>:---&gt;
        &lt;<strong>Item 2</strong>-Representation DS Type- <strong>PLM_ExternalID:</strong>CAAFldBrowsingFolderStructure_Representation1 <strong>V_version</strong>:---&gt;</pre>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAFldUcBrowsingFolderStructure</h3>
<p>To launch <code>CAAFldBrowsingFolderStructure</code>, you will need to set up 
the build time environment, then compile <code>CAAFldBrowsingFolderStructure</code> 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAFldBrowsingFolderStructure
Repository Server User Password SecurityCtx PLMType IDAttributeName1 IDValue1 
[IDAttributeName2 IDValue2...]&quot;</code></p>
<p>Where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as <em>Host:Port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose role as Reviewer ( as the use case does not modify the PLM Data)
		</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>Name of the PLMType (e.g.ENOFLD_DS_FolderRootReference(Root Folder), 
		ENOFLD_DS_FolderReference(Non-Root Folder)</td>
	</tr>
	<tr>
		<th>IDAttributeName1*</th>
		<td>PLM Identification Attribute Name for querying Folder/RootFolder</td>
	</tr>
	<tr>
		<th>IDValue1*</th>
		<td>Value of PLM Identification Attribute for querying Folder/RootFolder</td>
	</tr>
</table>
<p>* The list of Identification attribute names and values could be N pairs.</p>
<p>RootFolder for ENOFLD_FOLDER_ROOT_DS i.e. Root Folder has only one Identifition 
attribute:</p>
<ul>
	<li><strong>PLM_ExternalID</strong> name of the root folder.</li>
</ul>
<p>Folder for ENOFLD_FOLDER_REF_DS i.e. Non-Root Folder has two identification attributes:</p>
<ul>
	<li><strong>PLM_ExternalID</strong> name of the folder.</li>
	<li><strong>V_IdNamingSpace</strong> its basically UUID derived by its parent 
		folder. This attribute we cannot see in the property box in interactive 
		session but we can retrieve it through API and use it for further queries.</li>
</ul>
<p>The input data is retrieved by importing <code>CAAFldBrowsingFolderStructure.3dxml</code> 
file for Root product from the CAAFolderInterfaces.edu framework.</p>
<p><code>InstallRootFolder\CAADoc\CAAFolderInterfaces.edu\InputData\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D xml file contains a <strong>RootFolder</strong>, whose the PLM Identification 
Attributes are valuated such as follows:</p>
<ul>
	<li>PLM_ExternalID = <code>CAAFldBrowsingFolderStructure_RootFolder</code></li>
</ul>
<p>For <strong>Folder</strong> the PLM Identification Attributes are valuated such 
as follows:</p>
<ul>
	<li>PLM_ExternalID = <code>CAAFldBrowsingFolderStructure_Folder1</code></li>
	<li>IdNamingSpace = <code>C93EA8EF0000054449C21BE70001518D</code></li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository. Any Product 
model, of user choice can be given as input to this use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAFldBrowsingFolderStructure Code</h3>
<p>The CAAFldBrowsingFolderStructure use case is located in the
CAAFldBrowsingFolderStructure.m module of the CAAFolderInterfaces.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAFolderInterfaces.edu\CAAFldBrowsingFolderStructure.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAFldBrowsingFolderStructure Use Case:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Creating a List of Attribute - Value Set for Querying the Folder</a></li>
	<li><a href="#Step2">Querying the Database for Folder Providing AttributesSet and PLMType Input</a></li>
	<li><a href="#Step3">Opening and Browsing Input Folder</a></li>
	<li><a href="#Step4">BrowseFolder Routine</a></li>
	<li><a href="#Step5">DisplayFolderName Routine</a></li>
	<li><a href="#Step6">RetrieveIdentificationAttributeValueSetString Routine</a></li>
	<li><a href="#Step7">DisplayObjectsInsideFolder Routine</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAAFldBrowsingFolderStructure</code> use case begins by creating a 
session and connecting to the input Repository. This, being the most fundamental 
prerequisite for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we are not modifying PLM data). There are other parameters as well, 
details of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">2</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating a List of Attribute - Value Set for Querying the Folder</h3>
<p>In this step we will create the IdentificationSet (a <code>CATAdpIdentificationSet
</code>type)[<a href="#References">4</a>], which will be used for querying the Folder 
from the Database.</p>
<pre class="code">...
    CATListOfCATString iListAttributeName ;
    CATListOfCATUnicodeString iListAttributeValue ;
	
    for (int AttrIndex=7; AttrIndex &lt;= (7+((NbAttributes-1)*2)); AttrIndex++)
    {   
        const CATString Attribute(iArgv[AttrIndex]);
        const CATUnicodeString Value(iArgv[AttrIndex+1]);
        iListAttributeName.Append(Attribute);		
        iListAttributeValue.Append(Value);
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Database for Folder Providing AttributesSet and PLMType Input</h3>
<p>We will fire a query on DB to retrieve Identificator of the Folder / Root folder 
corresponding to the Attribute Set created and PLMType String passed as input.</p>
<pre class="code">...
    CATIAdpPLMIdentificator* opiIDComp = NULL;
    rc = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
			               iStrPLMType,opiIDComp);
...</pre>
<p>Call to <code>CAARetrieveIDofUniquePLMObject</code> returns identificator (<code>opiIDComp</code>, 
a CATIAdpPLMIdentificator * type) retrieved from the database[<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Opening and Browsing Input Folder</h3>
<p>This step involves opening the Input Folder in session and Browsing it until 
the leaf node (i.e end of the folder hierarchy) is reached. In the process, it will 
display the names along with IdentificationSet (Attribute- Value set) of the folders 
and the Items (objects) contained beneath the Input Folder. This major step can 
be divided into two sub-steps:</p>
<ul>
	<li><a href="#Step31">Opening the Input Folder in Session</a></li>
	<li><a href="#Step32">Checking for Input Folder Is of Root Folder Type</a></li>
	<li><a href="#Step33">Browsing the Input Folder</a></li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step31"></a>Opening the Input Folder in Session</h4>
<p>It is significant to note here that Folder Modeler has a dedicated API<code> 
PLMFolderServices::GetFolder</code> which has to be explicitly called for opening 
a Folder in session. Here we supply the Folder Identifier (i.e. Input Folder retrieved 
in the previous step) as one of its argument.</p>
<p>Here please note that <code>PLMFolderServices::GetFolder</code> this API explicitly 
opens and loads input folder only. It doesn't open its children aggregated beneath 
it.</p>
<pre class="code">... CATOmbLifeCycleRootsBag ioBag;
    PLMIFolder * piFolder = NULL;     
    hr = PLMFolderServices::<strong>GetFolder</strong> (piIdentOnFolder, piFolder,ioBag);
...
</pre>
<p>Call to <code>PLMFolderServices::GetFolder</code> returns loaded Folder (<code>piFolder</code>,
<em>a PLMIFolder</em> * type) by taking identificator (<code>piIdentOnFolder</code>, 
a <em>CATIAdpPLMIdentificator</em> * type) as an input.</p>
<p>For lifecycle management <code>ioBag</code>, a <em>CATOmbLifeCycleRootsBag</em> 
type is used.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step32"></a>Checking for Input Folder Is of Root Folder Type</h4>
<p>Once we have successfully opened the input folder in session, check whether 
the input folder is a Root Folder or folder.</p>
<pre class="code">...   
    CATBoolean isRoot = piFolder-&gt;<strong>IsRootFolder();</strong>
...</pre>
<p>Call the <code>IsRootFolder</code> on <code>piFolder</code> (a <em>CATIFolder</em> 
* type) returns CATBoolean value. TRUE if the Input Folder is Root Folder type. 
Two cases arise here:</p>
<p><strong>Case 1</strong>: If the Input folder is a Root Folder. As Root Folder 
can contain only folders inside it, we will display the Rootfolder name along with 
its Identification Attributes using <a href="#Step5">DisplayFolderName Routine</a>.</p>
<pre class="code">...
    hr =<strong> DisplayFolderName</strong>(piFolder, 1);
...</pre>
<p><strong>Case 2</strong>: If the Input folder is a Folder. As Folder can contain 
folder and Items inside it, here we will use <a href="#Step5">DisplayFolderName Routine</a> 
to display Folder name and its attributes, 
and <a href="#Step7">DisplayObjectsInsideFolder Routine</a> 
to display folder Item name and its attributes.</p>
<pre class="code">...
    hr = <strong>DisplayFolderName</strong>(piFolder, 1);
...
    PLMISubFolder_var spFolder = piFolder;
    hr = <strong>DisplayObjectsInsideFolder</strong>(spFolder, 2);
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step33"></a>Browsing the Input Folder</h4>
<p>Next we call <a href="#Step4">BrowseFolder Routine</a> 
for browsing input folder further</p>
<pre class="code">...
hr = <strong>BrowseFolder</strong> (piFolder, 2);
...</pre>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>BrowseFolder Routine</h3>
<p><code>BrowseFolder</code> method begins with retrieving the List of folders aggregated 
within the Input Folder thanks to <code>PLMIFolder::ListFolders</code> API. This 
API opens sub-folders aggregated beneath input folder and loads them into session 
so we need to handle lifecycle of the each folder listed through this API. For that 
we have added each folder into bag and removed it at the end after use.</p>
<p>For every sub-Folder listed, we will fundamentally perform the following two 
major steps:</p>
<ul>
	<li>Displaying the sub-Folder name by making a call to <a href="#Step5">DisplayFolderName Routine</a>.</li>
	<li>Display the objects contained within the SubFolder using <a href="#Step7">DisplayObjectsInsideFolder Routine</a>.</li>
</ul>
<p>Next we call the same method <code>BrowseFolder</code> for recursive call. due 
to this we will get all folders up to leaf node.</p>
<pre class="code"> HRESULT BrowseFolder(PLMIFolder * piFolderForBrowse, int xOffset)
{ 
    ... 
    CATOmbLifeCycleRootsBag Bag1;
    CATListPtrPLMISubFolder ListFolders;
    hr = piFolderForBrowse-&gt;<strong>ListFolders</strong>(ListFolders);
    for (int q =1; q &lt;= ListFolders.Size(); q++ )
    {  
        PLMISubFolder * piChildFolder = ListFolders[q];
        ...
        Bag1.InsertRoot(piChildFolder);
        ...
        hr = <strong>DisplayFolderName</strong>(spChildFolder, xOffset);
        ...	  
        hr = <strong>DisplayObjectsInsideFolder</strong>(piChildFolder, xOffset+1);
        ...
        hr = <strong>BrowseFolder</strong> (piChildFolder, xOffset+1);
        ...
        Bag1.RemoveAll();
        ...</pre>
<p><code>BrowseFolder</code> method takes two arguments:</p>
<ol>
	<li><code>piFolder</code>, <em>PLMIFolder*</em> type, the pointer of Folder 
		whose name is to be retrieved.</li>
	<li><code>xOffset</code>, int type, current depth according to level 
		(for display).</li>
</ol>
<p>A call to <code>PLMIFolder::ListFolders</code> on <code>piFolderForBrowse</code>, 
return a list of Folders, ListFolders, a <code>CATListPtrPLMISubFolder</code> 
type contained inside the Input Folder.</p>
<p>We will then use <code>DisplayFolderName</code>
in the step below, and <code>DisplayObjectsInsideFolder</code> in the last step to display the folder and 
folder objects name along with its AttributeSet.</p>
<p><code>BrowseFolder</code> is recursively called until we reach the leaf 
node i.e. the end of the Folder Hierarchy.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>DisplayFolderName Routine</h3>
<p><code>DisplayFolderName</code> routine involves displaying the Folder name along 
with its Identification Attribute-value set. Here, we begin with retrieving the 
Logical name of the Folder provided as input to the Routine, then retrieve the Identifier<em> 
(</em>a <em>CATIAdpPLMIdentificator</em> * type) of the Folder. This Identifier<em>
</em>is then used to retrieve and display the <em>IdentificationSet (Attribute-Value 
Set)</em> of the Folder.</p>
<pre class="code"> HRESULT DisplayFolderName(PLMIFolder * piFolder, int Offset)
{  
    CATICkeObject * piCkeObjectOnFolder = NULL;
    CATUnicodeString strPLMFolderName;
    hr = piFolder-&gt;QueryInterface(<strong>IID_CATICkeObject</strong>,(void**)&amp;piCkeObjectOnFolder);
    ...
    hr = piCkeObjectOnFolder-&gt;<strong>GetLogicalName</strong>(strPLMFolderName);
    ...
<br />    CATIPLMComponent * piPLMCompOnFolder = NULL; 
    hr = piFolder-&gt;QueryInterface(<strong>IID_CATIPLMComponent</strong>,(void**)&amp;piPLMCompOnFolder);
    ... 
    CATIAdpPLMIdentificator * piAdpIdentifierOnFolder = NULL;
    hr = piPLMCompOnFolder-&gt;<strong>GetAdpID</strong>(piAdpIdentifierOnFolder);
    ...       
    hr  = <strong> RetrieveIdentificationAttributeValueSetString</strong> (piAdpIdentifierOnFolder, strPLMFolderName);	
    ...
}
</pre>
<p><code>DisplayFolderName</code> method takes two arguments:</p>
<ol>
	<li><code>piFolder</code>, <em>PLMIFolder*</em> type, the pointer of Folder 
		whose name is to be retrieved.</li>
	<li><code>xOffset</code><em>, int</em> type, current depth according to level 
		(For display).</li>
</ol>
<p>We begin with displaying Logical name of the Folder using <code>CATICkeObject::GetLogicalName</code> 
API.</p>
<p>Next step by retrieving <code>piPLMCompOnFolder</code> (<em>CATIPLMComponent 
*</em> type) on the Folder through QueryInterface, which in turn will be used to 
retrieve <em>Identificator</em>.</p>
<p>A call to <code>CATIPLMComponent::GetAdpID</code> on <code>piPLMCompOnFolder</code> 
will return <code>piAdpIdentifierOnFolder</code> (a <em>CATIAdpPLMIdentificator</em> 
* type) of the Folder.</p>
<p>In the next step, we make a call to <code>RetrieveIdentificationAttributeValueSetString</code> 
Routine by providing 
this <em>Identificator</em> as a input, it will return a string<em> A CATUnicodeString 
*</em> type, consisting of Identification Attributes (Attribute -Value Set) of the 
Folder.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>RetrieveIdentificationAttributeValueSetString 
Routine</h3>
<p>This Routine involves retrieving an <em>IdentificationSet (</em>CATAdpIdentificationSet 
* type), of the Folder. This IdentificationSet will further be used to retrieve 
all the Identification Attributes (Attribute- Value Set) of the folder and then 
storing the whole set in <code>ostrAttrValue</code> (a <em>CATUnicodeString)</em>. 
This string will be used by other routines to display the identificaton <em>AttributeSet</em>.</p>
<pre class="code">HRESULT RetrieveIdentificationAttributeValueSetString(CATIAdpPLMIdentificator * piAdpIdentifier, CATUnicodeString &amp; ostrAttrValue)
{
   ...
   CATAdpIdentificationSet pIdentifyingSet;
   hr = <strong>CATAdpQueryServices</strong>::GetIdentificationSet(piAdpIdentifier,<strong> pIdentifyingSet</strong> );
   ...
   int current=0;
   CATString strAttributeName;
   CATUnicodeString strAttrValue;
   while (S_OK == (pIdentifyingSet.<strong> NextAttribute</strong> (current,strAttributeName,strAttrValue)))
   {   
       ostrAttrValue = ostrAttrValue + &quot; &quot; + strAttributeName.getUnicodeString() + &quot;:&quot; + strAttrValue;
   }</pre>
<p><code>RetrieveIdentificationAttributeValueSetString</code> method takes two arguments:</p>
<ol>
	<li><code>piAdpIdentifier</code>, a <em>CATIAdpPLMIdentificator *</em> type, 
		the Identificator pointer of Folder whose Identification Attributes are 
		to be retrieved.</li>
	<li><code>ostrAttrValue</code>, a <em>CATUnicodeString</em> type where 
		the IdentificatiomSet (Attribute-Value Set) of the Folder will be collected.</li>
</ol>
<p>Call to <code>CATAdpQueryServices::GetIdentificationSet</code> returns Identificationset
<code>(pIdentifyingSet</code>, a <em>CATAdpIdentificationSet</em> type) from Identificator 
(<code>piAdpIdentifier</code>, a <em>CATIAdpPLMIdentificator *</em> type)</p>
<p>We now retrieve all Attribute-Value Pairs of the Folder by making call to
<code>CATAdpIdentificationSet::NextAttribute</code> routine on <code>pIdentifyingSet</code> 
(a <em>CATAdpIdentificationSet</em> type). This method will parse through<em> Identificatonset
</em>and returns attribute name and its value.</p>
<p>Next we will retrieve all the Attribute-Value pairs of the identification attribute 
one-by-one and store them as a single string, <code>ostrAttrValue</code> (a <em>
CATUnicodeString</em> type). This String will further be used to display the AttributeSet 
of the Folder on the console.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>DisplayObjectsInsideFolder Routine</h3>
<p>The Major steps of this routine are listed below:</p>
<ul>
	<li><a href="#Step71">Retrieving the List of Items Aggregated beneath Input Folder</a></li>
	<li><a href="#Step72">Retrieving the Object's Alias Name</a></li>
	<li><a href="#Step73">Retrieving and Displaying the IdentificationSet (Attribute- Value Set) of the Listed Object</a></li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step71"></a>Retrieving the List of Items Aggregated beneath Input Folder</h4>
<p>We will begin with retrieving the List of Objects contained inside a Folder.</p>
<pre class="code">HRESULT DisplayObjectsInsideFolder (PLMISubFolder * pFolder, int yOffset)
{
   ...
   CATListPtrCATIAdpPLMIdentificator ListofReferenceId;
   hr = pFolder-&gt;<strong> ListObjects</strong> (ListofReferenceId);
   ...</pre>
<p>To retrieve the list of Folder Objects, call the <code>PLMISubFolder::ListObjects</code> 
routine on <code>pFolder</code> (a <em>PLMISubFolder*</em> type). Call will return
<code>ListofReferenceId (</code>a <em>CATListPtrCATIAdpPLMIdentificator</em> type), 
which will contain list of pointers to PLM Identificator of the Items (Ref/ RepRef).</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step72"></a>Retrieving the Object's Alias Name</h4>
<p>For every listed folder object, we will retrieve its Alias Name and then its 
IdentificationSet.</p>
<pre class="code">...
    for (int m =1; m&lt;= ListofReferenceId.Size(); m++ )
    {
	CATIAdpPLMIdentificator * oIdentifier = ListofReferenceId[m];
	CATIAdpType * piAdpTypeOnItem = NULL;
         hr = oIdentifier-&gt;<strong>GetAdpType</strong> (piAdpTypeOnItem );
         ...                                             
	CATUnicodeString strObjectType;
	hr = piAdpTypeOnItem-&gt;<strong>GetAlias</strong> (strObjectType);
	...</pre>
<p>Lets begin with retrieving the Alias name of the Folder Object. For that, first 
we retrieve <em>CATIAdpType</em> on FolderObject by QueryInterface.</p>
<p>Call the <code>CATIAdpPLMIdentificator::GetAdpType</code> routine on <code>oIdentifier</code> 
(a <em>CATIAdpPLMIdentificator *</em> type), of the FolderObject this will return
<code>piAdpTypeOnItem(</code>a <em>CATIAdpType*</em> type).</p>
<p>A Call to <code>CATIAdpType::GetAlias</code> on <code>piAdpTypeOnItem</code> 
will return <code>strObjectType</code> (a <em>CATUnicodeString</em> type) this will 
contain the Alias Name of the FolderObject.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step73"></a>Retrieving and Displaying the IdentificationSet (Attribute- Value Set) of the Listed Object</h4>
<p>The Identificator for the FolderObject retrieved in the previous step is used 
here to retrieve the IdentificationSet of the FolderObject.</p>
<pre class="code">...
  hr  = <strong>RetrieveIdentificationAttributeValueSetString</strong> (oIdentifier, <strong> strObjetcInfo</strong> );<br />...
...</pre>
<p>A call to <code>RetrieveIdentificationAttributeValueSetString</code> routine 
will return a String containing the IdentificationSet of the FolderObject, which 
in turn we will use to display the Attribute-Value Set on the console.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAFldBrowsingFolderStructure</code> use case ends by simply closing 
the PLM session. Since all use cases necessarily conclude by closing the PLM session, 
we have a dedicated article on this topic viz. &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This Use case mainly illustrates Folder Structure and browsing of it.</p>
<p>In the process of browsing folder structure we get introduces to method of opening 
and loading of the Folder in session. Then retrieving items aggregated beneath Folder. 
In addition to all this we learn about listing subfolders aggregated beneath input 
folder and handling there lifecycle.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">
		Querying PLM Object by Attributes</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
