<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Overview</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Overview</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>Creating an assembly is one way to organize objects. However, users also 
		need to organize objects in an equivalent way to Windows Explorer in order 
		to find objects thanks to navigation instead of performing queries. In order 
		not to mismatch both organizations, they have to be of different types: 
		the new type is Folder.</p>
		<ul>
			<li><a href="#FolderModel">Object Model</a></li>
			<li><a href="#Implementation">Implementation Model</a></li>
			<li><a href="#Openness">C++ Openness</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="FolderModel"></a>Object Model</h2>
<p>The folder model is as follows:</p>
<table>
	<caption>Fig.1 Folder Model Objects</caption>
	<tr>
		<td>
		<img alt="Folder Model Objects" src="images/CAAFldModelConceptual.gif"/></td>
	</tr>
</table>
<ul>
	<li>A <strong>root folder </strong>is a folder which cannot contain items</li>
	<li>A <strong>folder</strong> is an object containing folders and items</li>
	<li>An <strong>item</strong> can be a PLM Reference or a PLM Representation 
		Reference among a list of pre-defined modelers. This list is available in 
		the article &quot;Folder Attachable Object Types&quot; in the Folder Management 
		section of the interactive documentation.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Implementation"></a>Implementation Model</h2>
<p>This conceptual model has been implemented through PLM Core object as follows:</p>
<table>
	<caption>Fig.2 UML PLM Core Objects</caption>
	<tr>
		<td>
		<img alt="UML PLM Core Objects" src="images/CAAFldModelImplementatif.gif"/></td>
	</tr>
</table>
<p>The following array shows the links between the conceptual and PLM Core models</p>
<table class="fill">
	<tr>
		<th>Model Object </th>
		<th>PLM Core Object</th>
		<th>PLM Core Type</th>
		<th>Package Name</th>
		<th>Package Name <br />
		to use in your code</th>
	</tr>
	<tr>
		<td>Root Folder</td>
		<td>Folder Root: ENOFLD_FolderRootReference</td>
		<td>PLMCoreReference</td>
		<td>Folder Root Modeler</td>
		<td>ENOFLD_FOLDER_ROOT</td>
	</tr>
	<tr>
		<td>Folder</td>
		<td>Folder: ENOFLD_FolderReference</td>
		<td>PLMCoreReference</td>
		<td>Folder Reference Modeler</td>
		<td>ENOFLD_FOLDER_REF</td>
	</tr>
</table>
<p>ENOFLD_FolderInstance and ENOFLD_FolderConnection are both internal objects.
</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Openness"></a>C++ Openness</h2>
<p>The next picture shows the interfaces to handle the folder object.</p>
<table>
	<caption>Fig.3 Interface</caption>
	<tr>
		<td><img alt="Interface" src="images/CAAFldModelInterface.gif"/></td>
	</tr>
</table>
<ul>
	<li><strong>PLMIFolder</strong> enables you to manage the folder:<ul>
		<li>Create and insert folder</li>
		<li>Insert an existing folder (as a copy or a move)</li>
		<li>Delete a folder</li>
		<li>List sub-folders</li>
		<li>Check if the folder is a root or not.</li>
		</ul>
	</li>
	<li><strong>PLMISubFolder</strong> mainly enables you to manage items attached 
		to a folder
		<ul>
			<li>Attach an item</li>
			<li>Detach an item</li>
			<li>List items</li>
			<li>Retrieve the parent's folder.</li>
		</ul>
	</li>
</ul>
<p>How to create a folder, open a folder, and other behaviors are detailed in the 
next article &quot;Folder Modeler Behaviors&quot; [<a href="#References">1</a>]</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="CAAFldTaFolderBehavior.htm">Folder Modeler Behaviors</a>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [March 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
