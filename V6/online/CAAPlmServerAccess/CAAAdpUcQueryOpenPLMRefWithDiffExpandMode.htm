<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Opening PLM Reference with various Expand Modes</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Opening PLM Reference with various 
		Expand Modes</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This Use Case loads a PLM Reference from the database in the session 
		using the different expand options.</p>
		<ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The 
		CAAAdpQueryOpenPLMRefWithDiffExpandMode Use Case</a>
          <ul>
            <li><a href="#What">What Does 
			CAAAdpQueryOpenPLMRefWithDiffExpandMode Do</a></li>
            <li><a href="#How">How to Launch 
			CAAAdpQueryOpenPLMRefWithDiffExpandMode</a></li>
            <li><a href="#Where">Where to Find the 
			CAAAdpQueryOpenPLMRefWithDiffExpandMode Code</a></li>
          </ul>
        <li><a href="#Step">Step-by-Step</a></li>
        <li><a href="#InShort">In Short</a></li>
        <li><a href="#References">References</a></li>
      </ul>
</table>

<!---------------------------------comment------------------------------------->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to load a PLM Reference in session with different &quot;expansion&quot; 
mode:</p>
<ul>
	<li><code><strong>OneLevelNavigation</strong><b>: </b></code>The root PLM Reference and its 
	first level of PLM Instance &amp; PLM Reference are loaded,</li>
	<li>
		<code><b>Navigation</b></code> : All the&nbsp; PLM References and PLM 
	Instances are loaded,</li>
	<li> <code><b>Authoring : </b></code>The complete PLM structure is loaded .</li>
</ul>
<p>You will learn that the illustratred API works in &quot;append&quot; mode (or incremental mode). Consequently, you will see 
that if you require a lowest expand' s mode, it does not change the session 
contents. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAAAdpQueryOpenPLMRefWithDiffExpandMode Use Case</h2>
<p><code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> is a use case of the 
<code><b>CAAPLMClientAdapter</b></code>.<code><b>edu</b></code> framework that
illustrates the <code><b>CATPLMIntegrationAccessUse</b></code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpQueryOpenPLMRefWithDiffExpandMode Do</h3>
<p>The Use Case loads an input <code><b>PLM</b></code> <code><b>Reference</b></code>, 
as the one seen below [<a href="#Fig. 1">Fig. 1</a>] in various expand modes. A 
<code><b>PLM</b></code> <code><b>Reference</b></code> may aggregate <code><b>PLM</b></code> <code><b>Inst</b></code> 
and/or
<code><b>Rep Ref/Inst</b></code>, <code><b>Ports</b></code>, <code><b>
Connections</b></code> under it.</p>
<p>Based on the expand mode selected, either all Components or a subset of these, are loaded in the current session.</p>
<table border="0" width="100%" id="table27">
	<caption>
	<p align="left"><a name="Fig. 1"></a>Fig. 1 Input Model</p>
	</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAAdpQueryOpenPLMRefWithDiffExpandMode_Fig1.jpg" width="583" height="309"></td>
	</tr>
</table>
<p>To begin with, the input model is loaded in the &quot;<code><strong>OneLevelNavigation</strong></code>&quot; 
expand mode. In this mode, only the Root with its <code><b>First</b></code>
<code><b>level</b></code> <code><b>Insts</b></code>/<code><b>Refs</b></code> are 
loaded in the current session. [<a href="#Fig. 2">Fig.2</a>] below indicates the 
model as it appears when loaded in the current session.</p>
<table border="0" width="100%" id="table31">
	<caption>
	<p align="left"><a name="Fig. 2"></a>Fig. 2 Product Model loaded in &quot;OneLevelNavigation&quot; 
	mode</p>
	</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAAdpQueryOpenPLMRefWithDiffExpandMode_Fig2.jpg" width="362" height="301"></td>
	</tr>
</table>
<p>Using the <code>GetPLMComponentsInSession</code> method of the 
CATPLMComponentInterfacesServices class you'll find three PLM References 
are loaded in session. These are <code><b>Root</b></code> and the Child 
References <code><b>Child1</b></code> ,and <code><b>Child2</b></code></p>
<p>Please note that the instances deeper down in the product hierarchy as well 
as other PLM Objects, forming a product model are not loaded in this mode.</p>
<p>Next, <b>we continue to remain in the SAME SESSION</b> and load the input model in the &quot;<b>Navigation</b>&quot; 
mode. It is an incremental loading which result in all the <code><b>First</b></code>
<code><b>level</b></code> <code><b>Insts</b></code>/<code><b>Refs</b></code> 
which form the <b>base product model</b> to get loaded in the current session as the [<a href="#Fig. 3">Fig. 
3</a>] below indicates.</p>
<table border="0" width="100%" id="table32">
	<caption>
	<p align="left"><a name="Fig. 3"></a>Fig. 3 Product Model loaded in an 
	&quot;Navigation&quot; mode</p>
	</caption>
	<tr>
		<td>
		<img border="0" src="images/CAAAdpQueryOpenPLMRefWithDiffExpandMode_Fig3.jpg" width="534" height="301"></td>
	</tr>
</table>
<p>Incremental because in an earlier step, where we open the model in the <code>
<strong>OneLevelNavigation </strong></code>mode, only the <code><b>First</b></code> <code><b>level</b></code>
<code><b>Insts</b></code>/<code><b>Refs</b></code> below Root get loaded. Now 
even those <code><b>First</b></code> <code><b>level</b></code> <code><b>Insts</b></code>/<code><b>Refs</b></code> deeper down in the hierarchy (+2 and above) are loaded.</p>
<p>Still using <code>GetPLMComponentsInSession</code>, you find that four PLM 
References which exist in the current session are <code><b>Root</b></code>, 
the Child Reference <code><b>Child1</b></code>, Child Reference
<code><b>Child2</b></code>, and Child Reference <code><b>Child3</b></code> .</p>
<p>Please note that Rep Refs/Insts are not loaded in this 
mode, since these are not entities forming the base model.</p>
<p>Then, we load the input model in an &quot;<b>Authoring</b>&quot; mode, yet 
again in the same session. All components 
of the input model are loaded in this mode. These include <code><b>First</b></code>
<code><b>Refs</b></code>/<code><b>Insts</b></code> which form the base model and the
<code><b>Rep</b></code> <code><b>Insts</b></code>/<code><b>Refs</b></code>,
<code><b>Ports</b></code> and <code><b>Connections,</b></code> if those exist, associated with the complete 
model. So now the component in session is seen as depicted in [<a href="#Fig. 1">Fig. 
1</a>] above. In <b>Authoring</b> mode, in addition to those components loaded in <b>
Navigation</b> mode, the <code><b>Rep</b></code> <code><b>Ref</b></code> and its
<code><b>Rep</b></code> <code><b>Inst</b></code> <code><b>Shape4</b></code> also 
occur in the current session. So using the <code>GetPLMComponentsInSession</code> 
method, we have now 5 references ( 4 PLM References + 1 PLM Representation 
Reference).</p>
<p>Lastly, we require an open in reusing the 
<code><strong>OneLevelNavigation </strong></code>mode. The first level of reference and instance being already 
loaded, the method is successful. The result of the <code>
GetPLMComponentsInSession</code> method is nevertheless the same, 5 references.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAAdpQueryOpenPLMRefWithDiffExpandMode</h3>
<p>To launch <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> , you will need to set up the build time environment,
then compile <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> along 
with its prerequisites, set up the run time environment and then execute the use 
case [<a href="#References">1</a>].</p>
<pre class="code">mkrun -c<i> &quot;</i>CAAAdpQueryOpenPLMRefWithDiffExpandMode<i> Repository</i> <i>Server User</i> <i>Password</i>  <i>SecurityCtx</i> PLMType <i>PLMExternal_ID</i> <i>V_version</i>&quot;  </pre>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th><b>SecurityCtx</b></th>
    <td>a string representing the security context (Role.Organization.Project).
      Choose Role as Reviewer (since we only browse the PLM Data, no
      modifications)</td>
  </tr>
  	
  <tr>
	<th> PLMType</th>
	<td>A PLM Type</td>
   </tr>
	<tr>
  <th> <b>PLM_ExternalID</b> </th>
			<td>The <code><b>PLM_ExternalID</b></code> value for the model to be 
            loaded (*)</td>
		</tr>
	<tr>
	<th style="height: 18px"> <b>V_version</b></th>
	<td style="height: 18px">The <code><b>V_version</b></code> of the model to be loaded (*)</td>
   </tr>
 
</table>

<p><b>*</b> The input model is retrieved by importing <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code>.<a><code><b>3dxml</b></code></a> 
file from the <a><code><b>CAAPLMClientAdapter.edu</b></code></a> fwk.</p>
<table id="table29" cellspacing="1">
	<tr>
		<td ><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter.edu\InputData\CAAAdpQueryOpenPLMRefWithDiffExpandMode.3dxml</code> 
		</td>
	</tr>
</table>
<p>where <code>InstallRootDirectory </code>[<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>
<p align="left">This 3D XML file contains the root Product&nbsp; Reference with the 
following attributes:</p>
<ul>
	<li><a><code><b>PLM_ExternalID</b></code></a>: <code>
	CAAAdpQueryPLMRefWithDiffExpandMode</code></li>
	<li><a><code><b>Version</b></code></a>: --- </li>
</ul>
<p align="left"><b>Attention</b>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The<a><code><b> PLM_ExternalID</b></code></a> attribute value of the imported 
model&nbsp; is typically of the format &quot;<a><code><b>YourPrefix + </b></code></a>
<code><b>CAAAdpQueryPLMRefWithDiffExpandMode</b></code>&quot;, where <a><code><b>
YourPrefix</b></code></a> is the string provided as prefix, while importing a 3D 
XML file to CATIA.&nbsp;&nbsp; Thus the Product Model after an import is seen as in the [<a href="#Fig. 1">Fig. 
1</a>] above, except that each of those elements in the model have a prefix 
associated with it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAAAdpQueryOpenPLMRefWithDiffExpandMode Code</h3>
<p>The <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> use case is made of a single file located in
the <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode.m</b></code> module of the 
<code><b>CAAPLMClientAdapter.edu</b></code> framework:</p>
<p><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter.edu\CAAAdpQueryOpenPLMRefWithDiffExpandMode.m\</code></p>
   
<p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="Step"></a>Step-by-Step</h2>
<p>The main steps of the Use Case are :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
	<li>
	<a href="#Build an Identification Set with the Identifying attribute-values input">Build an Identification Set and seek an Identificator of the input model</a></li>
	<li><a href="#Create the Bag">Create a Bag</a></li>
	<li>
	<a href="#Load this Component in the Current Session in various Expand Modes">Load the input PLM Reference in various Expand Modes</a></li>
	<li><a href="#Count and PLM Core types of the Components in Session">Count and 
	PLM Core types of the Components in Session</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> use case begins by creating a 
session and connecting to the Input Repository.&nbsp; 
This, being the most fundamental prerequisite for all batch use cases, it is the 
first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer Role 
(since we are not modifying PLM data but only retrieving it from the database). 
There are other parameters as well, details of which can be found in the&nbsp; &quot;<b>Creating 
a Basic PLM Batch</b>&quot; use case article [<a href="#References">2</a>]. 
This article primarily deals with the subject of creating an environment for 
running the CAA Use Cases.</p>
<script type="text/javascript">insertLinkToTop();</script><h3>
<a name="Build an Identification Set with the Identifying attribute-values input">
</a>Build an Attribute- Value Set and seek an Identificator of the input PLM 
Reference</h3>
<p>An Attribute set object represents the set of Identification 
attribute-value pairs for a PLM Object. Here this object is built with the 
<code><b>PLM_ExternalID</b></code> and the <code><b>V_version</b></code> attribute values provided as input arguments.</p>
<p>A point to note here is that these Identification attributes (<code><b>PLM_ExternalID</b></code>, 
<code><b>V_version</b></code>) could be different for different customizations.</p>
<table class="code">
  <tr>
    <td>
      <pre>...
	CATListOfCATString iListAttributeName ;	
	CATListOfCATUnicodeString iListAttributeValue ;

	CATUnicodeString iPLM_ExternalIDValue(iargv[7]);
	CATUnicodeString iV_versionValue(iargv[8]);
	
	iListAttributeName.Append("PLM_ExternalID");
	iListAttributeName.Append(CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());
	
	iListAttributeValue.Append(iPLM_ExternalIDValue);
	iListAttributeValue.Append(iV_versionValue);
	
 	CATIAdpPLMIdentificator* opiIDComp = NULL;	

	hr = ::CAARetrieveIDofUniquePLMObject (iListAttributeName,iListAttributeValue,														
					  iStrPLMType,opiIDComp);

...</pre>
    </td>
  </tr>
</table>
<p> PLMType and Attribute Set together uniquely identify a PLM Object in the 
database. The &quot;<b>Querying 
PLM Objects by Attributes</b>&quot; [<a href="#References">4</a>] Use Case 
exclusively deals with querying the database for components with various input 
criteria.</p>
<p>It is important to note that we have just retrieved an Identificator of the 
PLM Reference in the database. Its not yet loaded in the current session. The article &quot;<b>PLM 
Object Identifier</b>&quot; 
[<a href="#References">5</a>] gives us more insights on Identificators of PLM 
Objects.</p>
<p>In the next step we actually load this PLM Reference in the current session. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3>
<a name="Create the Bag"></a>Create the Bag</h3>
<p>
The lifecyle of&nbsp; object in session are managed by a Bag [<a href="#References">8</a>], we start be 
creating it.</p>
<pre class="code">
...
 <strong>CATOmbLifeCycleRootsBag </strong>Bag;
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>

<h3>
<a name="Load this Component in the Current Session in various Expand Modes">
</a>Load the input PLM Reference in various Expand Modes</h3>
<p>A PLM Reference aggregates PLM Ref/Insts and/or PLM Rep Ref/Insts, Ports and 
Connections. We may thus either load the model with all its components or a 
subset of it,&nbsp;in the current 
session. The expand modes specified at the time of loading a PLM Ref 
enables us make this choice. These modes are:</p>
		<ul>
			<li> <p><strong>OneLevelNavigation</strong> wherein&nbsp;Root with only its First level 
			Insts/Refs are loaded</p>
			<pre class="code">
...
<strong>CATAdpOpenParameters</strong> params_1LevelNav(CATAdpExpandParameters::<strong>OneLevelNavigation</strong>);
<strong>CATAdpOpener</strong> opener_1LevelNav(Bag,params_1LevelNav);
hr = opener_1LevelNav.<strong>CompleteAndOpen</strong>(piPLMId,IID_CATIPLMComponent,(void**) &amp;piPLMCompOnRoot);	
...			</pre>
			</li>
		 
			<li><p><b>Navigation</b> wherein Root and all the First level Insts/Refs 
			which for the base model are loaded</p>
			
				<pre class="code">
...
<strong>CATAdpOpenParameters </strong>params_NLevel(CATAdpExpandParameters::<strong>Navigation</strong>);
<strong>CATAdpOpener </strong>opener_NLevel(Bag,params_NLevel);
hr = opener_NLevel.<strong>CompleteAndOpen</strong>(piPLMId,IID_CATIPLMComponent,(void**) &amp;piPLMCompOnRoot);	
...			</pre>
</li>
			<li><p><b>Authoring</b> wherein all components of a product model (Rep 
			Ref/Inst, Ports, Connections) are loaded with the First Insts/Refs 
			which form the base model </p>
				<pre class="code">
...
<strong>CATAdpOpenParameters </strong>params_Auth(CATAdpExpandParameters::<strong>Authoring</strong>);
<strong>CATAdpOpener </strong>opener_Auth(Bag,params_Auth);
hr = opener_Auth.<strong>CompleteAndOpen</strong>(piPLMId,IID_CATIPLMComponent,(void**) &amp;piPLMCompOnRoot);
...			</pre>
</li>
		</ul>
		<p>The Root PLM component , <code>piPLMCompOnRoot</code> , is 
		automatically integrated in the bag by <code>CompleteAndOpen</code> 
		method.&nbsp; </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Count and PLM Core types of the Components in Session"></a>Count 
and PLM Core types of the Components in Session</h3>
<p>At this stage, it would be interesting to actually retrieve the count of the 
PLM Components loaded in the current session and their PLM Core types.&nbsp; The 
user can then co-relate this output with the expand mode input, to actually 
understand the relevance of each of the three expand modes.</p>
<table class="code" id="table24">
  <tr>
    <td>
      <pre>HRESULT <b>ListCompInSession</b>()
{
	CATLISTV(CATIPLMComponent_var) oList;
	hr = <b>CATPLMComponentInterfacesServices::GetPLMComponentsInSession</b>(oList);
	if (S_OK == hr)
		iListSize = <b>oList.Size</b>();
...
	CATIAdpType* piAdpTypeOnCompInSession = NULL;
	CATPLMCoreType oCoreType;
...
	for (int i=1; i&lt;=iListSize; i++)
	{
		CATIPLMComponent_var <b>spiPLMCompOnCompInSession</b> = oList[i];
		hr = <b>spiPLMCompOnCompInSession</b>-&gt;<b>GetAdpType</b>(piAdpTypeOnCompInSession);

		hr = <b>piAdpTypeOnCompInSession</b>-&gt;<b>GetPLMCoreType</b>(oCoreType);
		if (<b>PLMCoreReference == oCoreType</b>)
			<b>iCountofPLMRefTypes++</b>;
		else
		if (<b>PLMCoreRepReference == oCoreType</b>)
			<b>iCountofPLMRepRefTypes++</b>;
...
		hr = <b>piAdpTypeOnCompInSession-&gt;GetAlias</b>(strAlias);
	}
...
}</pre>
    </td>
  </tr>
</table>
<p><code><b>CATPLMComponentInterfacesServices</b></code>::<code><b>GetPLMComponentsInSession</b></code> 
outputs a list of only standalone PLM Components namely. PLM Ref and PLM Ref 
Ref, loaded in the current session. The Use Case &quot;<b>Retrieving PLM Components</b>&quot; [<a href="#References">6</a>] delves further 
into this subject.</p>
<p>The <i><code><b>CATIPLMComponent</b></code></i>::<code><b>GetAdpType</b></code> 
implementation on each component returns its PLM Type as a 
<i><code><b>CATIAdpType</b></code></i>*. We next retrieve the PLM Core type of the component by a call to<i><code><b> 
CATIAdpType</b></code></i>::<code><b>GetPLMCoreType. </b></code>The <i><code><b>
CATIAdpType</b></code></i>::<code><b>GetAlias</b></code> returns an alias of the
<code><b>PLMCoreType</b></code>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><b>CAAAdpQueryOpenPLMRefWithDiffExpandMode</b></code> use case ends by simply closing 
the PLM session. The article &quot;<b>Creating a Basic PLM Batch</b>&quot; [<a href="#References">2</a>] 
delves deeper into the subject of Opening and Closing PLM sessions.</p>
<p align="right">
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>A PLM Reference aggregates PLM Instances and/or PLM Rep Ref/Inst, Ports and 
Connections beneath it.&nbsp; Thus, one has an option 
to load in the current session, either all components of a product model or a subset of those. This choice is based on the 
expand mode specified at the time of loading a PLM Reference. The expand modes 
are: </p>
<ul>
	<li><b>Short Navigation</b> wherein the Root with only its First level 
	Insts/Refs are loaded</li>
	<li><b>Navigation </b>wherein Root with First Insts/Refs which form the base 
	model are loaded</li>
	<li><b>Authoring</b> wherein the Rep Refs/Insts, Ports and Connections associated with the entire 
	model are loaded. This is in addition to the First Insts/Refs which form the 
	base model. </li>
</ul>
<p>Once loaded, we retrieve 
the count of the PLM Components loaded in the current session and their PLM Core 
types. One can thus understand the relevance of each expand mode, vis a vis the 
components loaded in the current session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="References"></a>References</h2>

<table>
     <tr>
     <td valign="top">[1]</td>
     <td>
     <a href="../CAADocUseCases/CAADocRunSample.htm">Building
      and Launching a CAA Use Case</a></td>
    </tr>

     <tr>
     <td valign="top">[2]</td>
     <td>
	<a href="CAAAdpUcBasicBatch.htm">Creating a Basic PLM Batch</a></td>
    </tr>

     <tr>
     <td valign="top">[3]</td>
     <td>
	<a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">PLM Environment 
	Overview</a></td>
    </tr>

     <tr>
     <td valign="top">[4]</td>
     <td>
	<a href="CAAAdpUcQueryPLMComponent.htm">Querying PLM Objects by Attributes</a></td>
    </tr>

     <tr>
     <td valign="top">[5]</td>
     <td>
	<a href="CAAPlmTaCATIAdpPLMIdentificator.htm">Understanding PLM Object Identification</a></td>
    </tr>

     <tr>
     <td valign="top">[6]</td>
     <td>
     <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbPLMCompMngt/CAAOmbUcListPLMComponent.htm')">
Retrieving PLM Components</a></td>
    </tr>
  <tr>
		<td>[8]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm')">Understanding PLM Component Life Cycle</a></td>
	</tr>

</table>


<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong> [Mar 2007]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

