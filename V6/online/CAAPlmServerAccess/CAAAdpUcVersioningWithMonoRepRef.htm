<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Versioning a Mono-Instantiable Representation Reference</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
<style>
<!--
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Versioning a Mono-Instantiable Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>


<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>The Use case illustrates a key feature of versioning a Mono-Instantiable 
      PLM Representation Reference (Rep Ref).<p>It demonstrates that a&nbsp; Mono-Instantiable 
      Rep Ref cannot be VersionedUp stand alone. Its 
      father PLM Reference (Root Reference) when VersionedUp simultaneously creates a new version 
      of the Mono-Instantiable PLM Rep Ref beneath it.<ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#Where">The CAAAdpVersioningWithMonoRepRef Use Case</a>
          <ul>
            <li><a href="#What">What does the CAAAdpVersioningWithMonoRepRef do</a></li>
            <li><a href="#How">How to launch CAAAdpVersioningWithMonoRepRef</a></li>
            <li><a href="#Where">Where to find the CAAAdpVersioningWithMonoRepRef 
              code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>

<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>This use case teaches us the methodology to VersionUp a Mono-instantiable 
rep ref</p>

<ul>
  <li>It initially demonstrates the failure to VersionUP Mono -Instantiable Rep 
  Ref StandAlone. 
  </li>
  <li>Next, it VersionUp the Root Ref, which is the process, simultaneously 
  VersionUp of all the mono-instantiable Rep Refs aggregated beneath 
  it. </li>
</ul>

<p>In the process, we have calls to </p>

<ul>
  <li><code>CATAdpQueryServices</code>::<code>GetRepresentationsFromReference</code>, to retrieve all Rep 
  Refs under PLM Reference </li>
  <li><code>CATIPLMNavRepReference</code>::<code>IsOnceInstantiable</code>, to Identify mono Instantiable 
  Rep Ref from the list&nbsp; </li>
  <li><code>CATAdpVersioningServices</code>::<code>NewVersion</code>, to creating new version of Root 
  reference</li>
  <li>Knowledge Apis, <code>CATCkeObjectAttrReadServices</code>::<code>GetValue</code>, to return 
  V_version attribute value of the PLM component</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="UseCase"></a>The CAAAdpVersioningWithMonoRepRef Use Case</h2>
<p> <code>CAAAdpVersioningWithMonoRepRef</code> is a use case of the <code>CAAPLMClientAdapter.edu</code>
framework that
illustrates the <code>CATPLMIntegrationAccess</code>  framework capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpVersioningWithMonoRepRef Do</h3>



<p>This use case mainly illustrates a key feature of VersionUp a Mono-Instantiable 
Rep Ref.</p>



<p>The steps involved are :</p>



<ul>
  <li>Load the Root PLM Reference (CAAAdpVersioningWithMonoRepRef_Root, ---)&nbsp;as depicted in fig. 1 below. 
  This input root aggregates instance of the following Rep Refs namely<ul>
  <li>CAAAdpVersioningWithMonoRepRef_Mono1(---) , 
  CAAAdpVersioningWithMonoRepRef_Mono2(---), the Mono-Instantiable PLM Representation 
  Reference</li>
  <li>CAAAdpVersioningWithMonoRepRef_Multi1(---), 
  CAAAdpVersioningWithMonoRepRef_Multi2(---), the Multi-Instantiable PLM Representation Reference</li>
</ul>
  </li>
</ul>
<blockquote>
  <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="14">
    <caption>Fig. 1 Root PLM Component before versioning</caption>
    <tr>
      <td width="4">
      <img border="0" src="images/CAAAdpVersioningWithMonoRepRef_BeforeVersioning.jpg" width="572" height="156"></td>
    </tr>
  </table>
</blockquote>
<ul>
  <li>Display V_version attribute value of Root Reference (CAAAdpVersioningWithMonoRepRef_Root), outputs --- 
  (Based on business Logic)&nbsp;</li>
  <li>Retrieve list of identificator of all Rep Refs beneath Root reference </li>
  <li>Load  all Rep Refs, identify the Mono- Instantiable rep ref and 
  display their versions. (outputs ---) </li>
  <li>Unload the Root Reference from session </li>
  <li>Then version up one of Mono- Instantiable Rep Ref stand alone. This 
  fails since mono- Instantiable rep ref can not be VersionedUp/ created StandAlone.</li>
  <li>VersionUp Root Reference. It creates a new version of all mono- instantiable rep refs aggregated beneath Root reference (CAAAdpVersioningWithMonoRepRef_Root, 
  --A). The multi instantiable Rep Refs beneath root are not VersionedUp. The 
  output models as depicted in Fig. 2 below it consists a Root aggregating 
  instances of<ul>
  <li>CAAAdpVersioningWithMonoRepRef_Mono1(--A) , 
  CAAAdpVersioningWithMonoRepRef_Mono2(--A) are the new Mono-Instantiable PLM Representation 
  Reference (newly versioned)</li>
  <li>CAAAdpVersioningWithMonoRepRef_Multi1(---), 
  CAAAdpVersioningWithMonoRepRef_Multi2(---) are the same old Multi-Instantiable PLM Representation Reference 
  (This not VersionedUp with its root)</li>
</ul>

  <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111">
    <caption>Fig. 2 Root PLM Component after versioning </caption>
    <tr>
      <td>
      <img border="0" src="images/CAAAdpVersioningWithMonoRepRef_AfterVersioning.jpg" width="567" height="144"></td>
    </tr>
  </table>
  </li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="How"></a>How to Launch CAAAdpVersioningWithMonoRepRef</a> </h3>

<p>To launch <code>CAAAdpVersioningWithMonoRepRef</code> , you will need to set up the build time
environment, then compile <code>CAAAdpVersioningWithMonoRepRef</code> along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To
launch the use case execute the command:</p>
<p><code> <a>mkrun -c &quot;</a><i>CAAAdpVersioningWithMonoRepRef</i></code><i>
</i><a><code><i>Repository Server User Password SecurityCtx PLMType IDAttributeName1 
IDValue1 [IDAttributeName2 IDValue2...]</i>&quot;</code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td >The name and port of the server as <i>name</i>:<i>port_number[/RootURI]</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td  >The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th ><b>SecurityCtx</b></th>
    <td >a string representing the security context (Role.Organization.Project).
      Choose role as Designer&nbsp; ( as the use case modifies the PLM Data) </td>
  </tr>
  <tr>
    <th ><b>PLMtype</b></th>
    <td >A String Representing PLMType</td>
  </tr>
  	<th> IDAttributeName1*</th>
	<td>PLM  Identification Attribute Name for querying PLM Component of type 
    PLMClassType</td>
    </tr>
    <th> IDValue1*</th>
	<td>Value of PLM  Identification Attribute for querying PLM Component of 
    type PLMClassType</td>
    </tr>
	
 
 
	
</table>


<!---------------------------------comment------------------------------------->

<p>*&nbsp; The list of Identification attribute names and values could be N 
pairs. Please note that Input PLM Component should be versionable, meaning its 
last version should be input, since 
VersionUp is possible for only the last version.</p>

<p>*The ID Set attributes of the MonoInstantiable Rep Ref, are being displayed. 
Now we can be safely assured that the V_version will be displayed, since any 
VersionedUp PLM Component, essentially has V_version as one of its IDSet 
attributes</p>

<p>The input&nbsp;data is retrieved by importing <code><a>CAAAdpVersioningWithMonoRepRef</a></code><a><code><b>.</b></code></a><code>3dxml</code>
file for  Root product from the <a><code>CAAPLMClientAdapter.edu</code></a> 
fwk.</p>
<table id="table15">
    <tr>
      <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\InputData\</code></td>
    </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">2</a>] is the directory where the CAA CD-ROM
is installed.</p>
<p>This 3D xml file contains a PRODUCT PLM Reference, whose the PLM 
Identification Attributes 
 
values such as follows:</p>
<ul>
  <li>PLM_ExternalID = CAAAdpVersioningWithMonoRepRef_Root</li>
  <li>V_version =&nbsp; ---</li>
</ul>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">2</a>]
for how to import and reimport such a 3D XML file in your PLM repository.&nbsp;Any 
PLM model, of user choice can be given as input to this use case which contains 
instance of a Mono -instantiable Rep Ref beneath its Root. </p>
<p align="left">Another important point to note is that the Rep Ref being 
VersionedUp input to our UC must be essentially Versionable. By Versionable, we 
imply its Maturity State (level) should accept Versioning and its version should 
be its current last version.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Where"></a>Where to Find the CAAAdpVersioningWithMonoRepRef Code</h3>
<p>The <code>CAAAdpVersioningWithMonoRepRef</code> use case is located in the <code>CAAAdpPLMAttributes</code><a><code>.m</code></a> module of the
<a><code>CAAPLMClientAdapter.edu</code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter</code>.<code>edu</code><code>\CAAAdpVersioningWithMonoRepRef.m\</code></td>
  </tr>
</table>
<p>where <code><a>InstallRootDirectory</a></code>  [<a href="#References">2</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code>CAAAdpVersioningWithMonoRepRef</code> :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Loading PLM Component in Session">Loading PLM Reference in 
  Session</a></li>
  <li><a href="#Display the version of the opened root">Display the version of the opened root 
  Ref</a></li>
	<li><a href="#Retrieve Mono-Instantiable Rep Ref">Retrieve Mono-Instantiable Rep Refs instantiated under 
root Ref and display its version</a></li>
	<li><a href="#Unload the Root from session">Unload all PLM Components from 
  Current Session&nbsp; </a></li>
	<li><a href="#Confirm No PLM Components exist in the Current Session">Confirm 
  No PLM Components exist in the Current Session</a></li>
	<li>
	<a href="#Try to create new version of last Mono-Instantiable Rep Ref (Failure expected)">Failure to create new 
version of Mono-Instantiable Rep Ref stand alone</a></li>
	<li><a href="#VersionUp a Mono-instantiable Rep Ref">VersionUp a 
Mono-instantiable Rep Ref</a><ol>
		<li><a href="#VersionUp a Mono-instantiable Rep Ref">VersionUp of the input 
  PLM Reference</a></li>
		<li><a href="#Open New version of root reference">Load VersionUp input PLM 
  Reference in session</a></li>
		<li><a href="#Display the version of the newly opened root">Display the V_version 
  attribute value of the VersionedUp&nbsp; input Reference</a></li>
		<li>
		<a href="#Retrieve Mono-Instantiable Rep Refs instantiated under new root Ref and display its version">Retrieve Mono-Instantiable Rep Refs instantiated under 
  VersionUp input Reference and display its V_version attribute value</a> </li>
		<li><a href="#Unload the new Root from session">Unload all the loaded PLM components from session&nbsp;
  		</a></li>
	</ol>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>

<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAAAdpVersioningWithMonoRepRef</code> use case begins by creating a session
and connecting to the input Repository.&nbsp; This,
being the most fundamental prerequisite for all batch use cases, it is the first
step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Designer Role
(since we are modifying PLM data). There are other parameters as well,
details of which can be found in the&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
use case article [<a href="#References">3</a>].
This article primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h3>
<a name="Loading PLM Component in Session"></a>Loading PLM Reference in Session </h3>



<p>
To begin with, the steps executed are:</p>



<ul>
  <li>We build an Attribute - Value set object with the input Attributes sets</li>
  <li>Finally a <i>CATIAdpPLMIdentificator</i>* on the Identificator in the database of 
  the input PLM Component is retrieved (opiIDComp)</li>
</ul>

<p>
These steps are executed through a global routine 
<code>CAARetrieveIDofUniquePLMObject</code> referenced in the Use Case [<a href="#References">5</a>]. 
With the Identificator retrieved, we proceed towards loading the input PLM 
Component in session as implemented by the code extract below.</p>



<pre class="code">...
   CATICkeObject* piCkeObjOnRootComp = NULL;
   CATOmbLifeCycleRootsBag Bag;
   CATAdpOpenParameters params(CATAdpExpandParameters::OneLevelNavigation);
   CATAdpOpener opener(Bag,params);
	 
   hr = opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATICkeObject,(void**) &amp;piCkeObjOnRootComp);
...</pre> 



<ul>
  <li>A call to <code>CompleteAndOpen</code> 
  opens a PLM Reference. The input/output arguments for these calls are 
  <ul>
    <li><code>IID_CATICkeObject</code>, the IID of the Interface to be retrieved on the 
    loaded PLM Component</li>
    <li><code>piCkeObjOnRootComp</code>, a <i>CATICkeObject</i>* on the loaded PLM 
    Component, returned by the call</li>
    <li>opiIDComp, a <i>CATIAdpPLMIdentificator</i>* on the Identificator of the 
    loaded component in the underlying database</li>
    <li><code>CATAdpExpandParameters</code>::<code>OneLevelNavigation</code>, is 
    exclusively to load a PLM Reference. It implies that only the Root 
    Reference, with the Child PLM Instances/References beneath it will be 
    loaded. The PLM Rep Refs will not be loaded in the current session.</li>
  </ul>
  </li>
</ul>



<p><code>piCkeObjOnRootComp</code> is inside the Bag. These steps involving loading a PLM Component in session are further detailed 
in the UC [<a href="#References">4</a>]</p>




<script type="text/javascript">insertLinkToTop();</script>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Display the version of the opened root"></a>Display the version of the opened root 
Ref</h3>
<p>We retrieve V_version attribute value of the root component loaded in 
session[<a href="#References">4</a>]. </p>



<p>The significance of this step is that in the steps ahead's we version up the 
root.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATIValue_var spVersionValue ;
hr=<b> CATCkeObjectAttrReadServices::GetValue</b>(<b>piCkeObjOnRootComp</b>,&quot;<b>V_version</b>&quot;,<b>spVersionValue</b>);
...

CATUnicodeString strVersionRoot;
hr = <b>spVersionValue-&gt;AsString</b>(strVersionRoot);
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>Call to <code>CATCkeObjectAttrReadServices</code>::<code>GetValue</code> takes following arguments<ul>
    <li><code>piCkeObjOnRootComp</code>, a <i>CATICkeObject</i>* on the loaded 
    PLM Component</li>
    <li>&quot;<code>V_version</code>&quot; , A Attribute name input</li>
    <li><code>spVersionValue</code>, a <i>CATIValue_var</i> type on V_version attribute 
    value 
    [output]</li>
  </ul>
  </li>
  <li>Next a call to&nbsp; <code>CATIValue</code>::<code>AsString</code> call on <code>spVersionValue, </code>
  returns a V_version&nbsp; 
  attribute value in <i>CATUnicodeString</i>&nbsp; type. 
  <ul>
    <li><code>strVersionRoot</code>, a <i>CATUnicodeString </i>&nbsp;type, which 
    stores the V_version&nbsp; attribute value on root </li>
  </ul>
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve Mono-Instantiable Rep Ref"></a>Retrieve all Mono-Instantiable Rep Refs instantiated under 
root Ref and display their versions</h3>
<p>We retrieve the list of Mono-instantiable Rep Ref instantiated under Root and 
display the current V_version attribute value. </p>



<p>In the step ahead we version up the Mono- instantiable Rep refs and display 
their final versions.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATLISTP(CATIAdpPLMIdentificator) ListOfRepresentations;
int p = 0;
CATBoolean IsMonoRepRefFound = FALSE;

hr = C<b>ATAdpQueryServices::GetRepresentationsFromReference</b>(<b>piCkeObjOnRootComp</b> ,
                                                       <b>ListOfRepresentations</b>);
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>A call to <code>CATAdpQueryServices</code>::<code>GetRepresentationsFromReference</code> takes 
  following arguments<ul>
    <li><code>piCkeObjOnRootComp</code>, a <i>CATICkeObject</i>* on the loaded 
    root PLM Component</li>
    <li><code>ListOfRepresentations</code>, a <code> CATLISTP(CATIAdpPLMIdentificator) </code>type, 
    represents the output list which contains identificators of Rep refs those,&nbsp; instantiated under 
    loaded root PLM Component. [output]</li>
  </ul>
  </li>
</ul>
<p>Now we have a list of all identificaticators of all Rep Refs instantiated 
under Root. To identify the Mono-Instantiable Rep Refs we need access to the&nbsp;
<i>CATIPLMNavRepReference</i> services on the Rep Refs. Hence we load the Mono - 
instantiable Rep Ref in session.</p>



<p>Finally we output a list of its ID set&nbsp; attribute - values, one of which 
is the V_version attribute, which we are interested in.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...
for(int i = 1 ; i&lt;=ListOfRepresentations.Size() ; i++)
{
     <b>CATIAdpPLMIdentificator * iIdentifier = ListOfRepresentations[i]</b> ;
     CATIPLMNavRepReference* piNavRepRefOnMonoInstRepRef = NULL;
</pre> <pre>     
     hr = opener.<strong>CompleteAndOpen</strong>(iIdentifier,IID_CATIPLMNavRepReference,(void**) &amp; piNavRepRefOnMonoInstRepRef);
     hr = <b>piNavRepRefOnMonoInstRepRef-&gt;IsOnceInstantiable();</b>
     ...

   <b>  if (S_OK == hr)</b>
     {</pre>
	<pre>         <b>p =i ;
         IsMonoRepRefFound = TRUE;</b>

         CATAdpIdentificationSet oIdentifyingSet;
         hr = <b>CATAdpQueryServices::GetIdentificationSet(iIdentifier,oIdentifyingSet)</b>;
         ...

         int current=0;
         CATString AttributeName;
         CATUnicodeString AttrValue;

         while (S_OK == <b>(oIdentifyingSet.NextAttribute(current,AttributeName,AttrValue)</b>))
         {
             cout &lt;&lt; &quot; Attribute Name : &quot;&lt;&lt; AttributeName.getUnicodeString() &lt;&lt; endl; 
             cout &lt;&lt; &quot; Attribute Value: &quot;&lt;&lt; AttrValue.ConvertToChar() &lt;&lt; endl ; 
         }</pre> <pre>     }
}</pre> <pre>if (FALSE == IsMonoRepRefFound )
    return 1;
...</pre> </td> 
  </tr>
</table>



<p>We parse through the list of Rep Refs instantiated under root. For each Rep 
Ref</p>



<ul>
  <li>A call to <code>CompleteAndOpen</code> 
  takes following arguments<ul>
    <li><code>iIdentifier</code>, a <i>CATIAdpPLMIdentificator</i>* type on the Identificator of 
    Rep Ref instantiated under root, an element of the list <code>ListOfRepresentations</code>, a <code> CATLISTP(CATIAdpPLMIdentificator) </code>
    type</li>
    <li><code>IID_CATIPLMNavRepReference</code>, the IID of the Interface to be 
    retrieved on the loaded PLM Rep Ref</li>
    <li>
    <p style="margin-top: 0pt; "><code>piNavRepRefOnMonoInstRepRef</code>, a <i>CATIPLMNavRepReference</i>* type on opened 
    Rep ref [output]</li>
  </ul>
  </li>
  <li>
	<p style="margin-top: 0; margin-bottom: 5">Next a call to <code>CATIPLMNavRepReference</code>::<code>IsOnceInstantiable</code> 
  on&nbsp; <i>CATIPLMNavRepReference</i>* (<code>piNavRepRefOnMonoInstRepRef</code>) returns S_OK if 
  Rep Ref is mono -instantiable Rep Ref&nbsp;
	<ul>
		<li>
		<p style="margin-top: 0; margin-bottom: 0">Call to <code>P</code>=<code>i</code>
		<ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><code>i</code>, an int type, is the 
  index number for list.</li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><code>p</code>, an int type, index 
  number for list , at which mono-instntiable root reference occure. as we parse 
  through it. As we loop through list p gets progressively overwritten and 
  finally it points to the index number in the listwhich the last mono-instantiable 
  root ref occures in. This Rep Ref is the one which will be VersionUp 
  StandAlone in the steps ahead.&nbsp;&nbsp; </li>
		</ul>
		</li>
		<li>
		<p style="margin-top: 0; margin-bottom: 0">Then next call to <code>CATAdpQueryServices</code>::<code>GetIdentificationSet</code> returns 
  identification attribute set. The arguments are as follows<ul>
		<li>
		<p style="margin-top: 0; margin-bottom: 0"><code>iIdentifier</code>, a 
		<i>CATIAdpPLMIdentificator</i>* type on the Identificator of 
    Rep ref instantiated under root, retrieved earlier</li>
		<li>
		<p style="margin-top: 0; margin-bottom: 5"><code>oIdentifyingSet</code>, a 
		<i>CATAdpIdentificationSet</i> type</li>
	</ul>
	</li>
	<li>
	<p style="margin-top: 0; margin-bottom: 0">Next call to <code>CATAdpIdentificationSet</code>::<code>NextAttribute</code> gives the information 
  of the all identification attributes one of which is V_Version this is the our 
  interested attribute.&nbsp; The parameters are as follows<ul>
		<li>
		<p style="margin-top: 0; margin-bottom: 0"><code>current</code>, a int type counter for identification attributes, incremented 
  automatically within the loop.</li>
		<li>
		<p style="margin-top: 0; margin-bottom: 0"><code>AttributeName</code>, a 
		<i>CATString </i>&nbsp;type, which returns the Attribute name 
  [output]</li>
		<li>
		<p style="margin-top: 0; margin-bottom: 0"><code>AttrValue</code>, a <i>CATUnicodeString 
		</i>&nbsp;type, which returns the Attribute 
  value [output]</li>
	</ul>
	</li>
	</ul>
	</li>
	<li>At end of parsing through the list of Rep refs, if the Boolean IsMonoRepRefFound 
  is set to TRUE, it implies that a Mono- instantiable Rep Ref is found. Atleast one mono- instantiabe Rep Ref should occur under Root 
  since it is essential for our UC illustration the steps ahead. Hence if does not occur under root the UC execution will be terminated.
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Unload the Root from session"></a>Unload all PLM Components from 
Current Session&nbsp; </h3>
<p>We unload all the PLM Components loaded in the current session. Please note 
that we have included the input Root as well as all the Rep Refs under it in the 
BAG [<a href="#References">6</a>], which lets us have complete control over the 
lifecycle of all the PLM Components in session.&nbsp; </p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>hr = Bag.RemoveAll();
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>a call to <code>CATOmbLifeCycleRootsBag</code>::<code>Remove</code><code>All</code> unloads 
  all the&nbsp; PLM components those are loaded in session and inserted in BAG [<a href="#References">7</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Confirm No PLM Components exist in the Current Session"></a>Confirm 
No PLM Components exist in the Current Session</h3>
<p>In the steps ahead we VersionUp the Root and a MonoInstantiable Rep Ref, 
identified in an earlier step [<a href="#Unload the Root from session">#</a>]. A 
pre-requisite for the VersionUp operation of any PLM Component is to confirm 
that it is not loaded in the current session. Since we had emptied the BAG, 
which contained all the PLM Components in the current session, in an earlier 
step, we confirm that no Components exist in the current session. This ensures 
that in the steps ahead, it is now possible to VersionUp any PLM Component, 
unless the operation fails owing to other reasons.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATLISTV(CATIPLMComponent_var) oList;
hr = CATPLMComponentInterfacesServices::GetPLMComponentsInSession(oList);

if ((S_FALSE==hr)&amp;&amp;(0==oList.Size()))
    ... 
else
    return 1;
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>a call to <code>CATPLMComponentInterfacesServices</code>::<code>GetPLMComponentsInSession</code> 
  retrieves the list of PLM Components in session the arguments are as follows<ul>
  <li><code>oList</code>, a <i>CATLISTV</i>(<i>CATIPLMComponent_var</i>) type 
  list which lists PLM Components in session</li>
</ul>
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3>
<a name="Try to create new version of last Mono-Instantiable Rep Ref (Failure expected)">
</a>Failure to VersionUp a Mono-Instantiable Rep Ref in StandAlone mode </h3>
<p>In the previous step, we retrieve one of the Mono-instantiable Rep Ref 
instantiated under Root. Here we make an attempt to VersionUp this mono-instantiable 
Rep Ref in StandAlone mode and confirm its failure.&nbsp; One of the reasons for 
a VersionUp failure, is if the component is loaded in the current session. But 
since in the earlier step, we did confirm that all Components are unloaded from 
session, this step confirms that a Mono-Instantiable Rep Ref VersionUp in a 
StandAlone mode is impossible. </p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATTime TimeVersionForRepRef = CATTime::GetCurrentLocalTime();
CATIAdpPLMIdentificator * iIdentifierOfRepRefForVersioning = <b>ListOfRepresentations[p] ;</b>
CATIAdpPLMIdentificator* pNewIdentificatorOnVersionedRepRef = NULL;
</pre> <pre>hr = <b>CATAdpVersioningServices::NewVersion(iIdentifierOfRepRefForVersioning,</b></pre> <pre><b>                                           TimeVersionForRepRef,
                                          pNewIdentificatorOnVersionedRepRef);</b></pre> <pre>if (SUCCEED(hr))
    return 1;

...</pre> </td> 
  </tr>
</table>



<ul>
  <li>A call to&nbsp; <code>CATTime</code>::<code>GetCurrentLocalTime</code> returns  current local 
  time, an input for version up of Rep Ref<ul>
  <li><code>TimeVersionForRepRef</code>, a <i>CATTime</i> which holds current local time</li>
</ul>
  </li>
  <li>Next a call to CATAdpVersioningServices::NewVersion creates a new version 
  of input PLM component. The arguments are as follows.<ul>
    <li><code>iIdentifierOfRepRefForVersioning</code>, a <i>CATIAdpPLMIdentificator</i>* type on 
    Mono- instantiable Rep 
    ref for version up(Its last Mono-instantiable Rep ref since we have valuated 
    index number p in previous step).</li>
    <li><code>TimeVersionForRepRef</code>, a <i>CATTime</i> which holds current local time</li>
    <li><code>pNewIdentificatorOnVersionedRepRef</code>, a <i>CATIAdpPLMIdentificator</i>* type on 
    new Rep ref after version up [output].</li>
  </ul>
  </li>
</ul>
<p>If API returns SUCCESS then we terminate the use case since VersionUp of Mono -instantiable Rep 
Ref StandAlone is impossible.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="VersionUp a Mono-instantiable Rep Ref"></a>VersionUp a 
Mono-instantiable Rep Ref</h3>
<p>We now illustrate the steps involved in successfully VersionUp a mono-instantiable 
Rep Ref. It happens simultaneously with the VersionUp operation of its 
aggregating Root Reference. The steps involved are,</p>
<ul>
  <li>Create a new version of the input PLM Component</li>
  <li>Load New version of input 
Component</li>
  <li>Display the 
  V_version attribute value of the VersionUp input Component</li>
  <li>Retrieve Mono-Instantiable Rep Refs instantiated under VersionUp input 
component and display its V_version attribute value</li>
</ul>
<h4><a name="Create a new version of the input PLM Component"></a>Create a new 
version of the input PLM Reference</h4>
<p>we  create a new version of input Component (Root Reference)[<a href="#References">1</a>]. 
It is significant to note here that the Identificator of the input Component 
retrieved in earlier step[<a href="#Loading PLM Component in Session">#</a>] is still valid even after the input Component is 
unloaded from session. The same identificator (opiIDComp, a <i>CATIAdpPLMIdentificator</i>* 
type) could be reused to VersionUp this input Component.&nbsp; </p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATTime TimeVersion = <b>CATTime::GetCurrentLocalTime();</b>
CATIAdpPLMIdentificator* pNewIdentificatorOnVersionedComp = NULL;
</pre> <pre>hr = <b>CATAdpVersioningServices::NewVersion(</b>opiIDComp<b>,TimeVersion,
                                          pNewIdentificatorOnVersionedComp)</b>;
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>A call to&nbsp; <code>CATTime</code>::<code>GetCurrentLocalTime</code> returns a local current local 
  time</li>
  <li>a call to <code>CATAdpVersioningServices</code>::<code>NewVersion</code> creates a new version of 
  input PLM component. The arguments are as follows.<ul>
    <li>opiIDComp, a <i>CATIAdpPLMIdentificator</i>* type on 
    input Root reference to version up, retrieved earlier[<a href="#Loading PLM Component in Session">#</a>].</li>
    <li><code>TimeVersion</code>, a <i>CATTime</i> which holds current local time</li>
    <li><code>pNewIdentificatorOnVersionedComp</code>, a <i>CATIAdpPLMIdentificator</i>* type on  version up 
    input Root [output].</li>
  </ul>
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Open New version of root reference"></a>Load VersionUp input 
Reference in session</h4>
<p>In order to retrieve a list of mono-instantiable Rep Ref instantiated under 
Root, we have calls to the query services in the steps ahead. A prerequisite for 
using both the Knowledge and Query services is to have the PLM Component loaded 
in current session.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATICkeObject* piCkeObjOnVersionedComp = NULL;
hr = opener.CompleteAndOpen(opiIDComp,IID_CATICkeObject,(void**) &amp; piCkeObjOnVersionedComp);...</pre> </td> 
  </tr>
</table>



<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Display the version of the newly opened root"></a>Display the 
V_version attribute value of the VersionUp input Reference</h4>
<p>We display the V_version attribute value of the version up input Component. 
The business logic actually determines the naming convention for a PLM Component 
versions.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATIValue_var spVersionValueAfterVersioning ;
hr= <b>CATCkeObjectAttrReadServices::GetValue</b>(piCkeObjOnVersionedComp,&quot;<b>V_version</b>&quot;,</pre> <pre>                                           <b>spVersionValueAfterVersioning</b>);
...
CATUnicodeString strVersionRootAfterVersioning;
hr = <b>spVersionValueAfterVersioning-&gt;AsString</b>(strVersionRootAfterVersioning);
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>Call to <code>CATCkeObjectAttrReadServices</code>::<code>GetValue</code> takes following arguments<ul>
    <li><code>piCkeObjOnVersionedComp</code>, a <i><code>CATICkeObject</code></i>* on the loaded 
    PLM Component</li>
    <li>&quot;<code>V_version</code>&quot; , A Attribute name input</li>
    <li><code>spVersionValueAfterVersioning</code>,&nbsp; <i>CATIValue_var</i> type on V_version attribute 
    value 
    [output]</li>
  </ul>
  </li>
  <li>Next a call to&nbsp; <code>CATIValue</code>::<code>AsString</code> returns a value of V_version&nbsp; 
  attribute value, a <i>CATUnicodeString</i> type 
  <ul>
    <li><code>strVersionRootAfterVersioning</code>, a <i>CATUnicodeString </i>
    &nbsp;type, which stores the V_version&nbsp; attribute value on VersionedUp Root</li>
  </ul>
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h4>
<a name="Retrieve Mono-Instantiable Rep Refs instantiated under new root Ref and display its version">
</a>Retrieve Mono-Instantiable Rep Refs instantiated under VersionUp input 
Reference and display its V_version attribute value</h4>
<p>Now that Root is VersionedUp, it results in a VersionUp of all mono-instantiable 
Rep Refs instantiated under it. So We retrieve the list of Mono-instantiable Rep 
Ref instantiated under Root and display the current V_version attribute value of all Mono- instantiable 
Rep Ref as we did in a previous step[<a href="#Retrieve Mono-Instantiable Rep Ref">#</a>]. 
The earlier step displayed the previous version of the Rep Refs.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>CATLISTP(CATIAdpPLMIdentificator) ListOfRepresentationsAfterVersioning;
...
hr = <b>CATAdpQueryServices::GetRepresentationsFromReference</b></pre>
	<pre><b>					</b>(piCkeObjOnVersionedComp ,
                                  <b>ListOfRepresentationsAfterVersioning</b>);
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>A call to <code>CATAdpQueryServices</code>::<code>GetRepresentationsFromReference</code> takes 
  following arguments<ul>
    <li><code>piCkeObjOnVersionedComp</code>, a <i>CATICkeObject</i>* type on the loaded 
    VersionedUp input PLM Component</li>
    <li><code>ListOfRepresentationsAfterVersioning</code>, a <code> CATLISTP(CATIAdpPLMIdentificator) </code>type, 
    represents the output list which contains identificators of Rep refs those 
    are instantiated under VersionedUp PLM Component.</li>
  </ul>
  </li>
</ul>
<p>Now we have a list of all identificaticators of all Rep Refs instantiated 
under new versioned input Component (Root). To identify the Mono-Instantiable Rep Refs we need access to the&nbsp;
<i>CATIPLMNavRepReference</i> services on the Rep Refs. Hence we load the Mono - 
instantiable Rep Ref in session.</p>



<p>Finally we output a list of its ID set&nbsp; attribute - values, one of which 
is V_version attribute value, that we are interested in.</p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...
for(int j = 1 ; j&lt;=ListOfRepresentationsAfterVersioning.Size() ; j++)
{
     CATIAdpPLMIdentificator * iIdentifierAfterVersioning = </pre>
	<pre>					ListOfRepresentationsAfterVersioning[j] ;

     CATIPLMNavRepReference* piNavRepRefOnMonoInstRepRefAfterVersioning = NULL;
     hr = opener.<strong>CompleteAndOpen</strong>(iIdentifierAfterVersioning,IID_CATIPLMNavRepReference,
				                             (void**) &amp; piNavRepRefOnMonoInstRepRefAfterVersioning);  </pre> 
	<pre>     ...
     hr = <b>piNavRepRefOnMonoInstRepRefAfterVersioning-&gt;IsOnceInstantiable();</b>
     if (S_OK == hr)
     {
          CATAdpIdentificationSet oIdentifyingSetAfterVersioning;
          hr = <b>CATAdpQueryServices::GetIdentificationSet(iIdentifierAfterVersioning,</b></pre> <pre><b>					oIdentifyingSetAfterVersioning)</b>;
          ...
          int currentAfterVersioning=0;
          CATString AttributeNameAfterVersioning;
          CATUnicodeString AttrValueAfterVersioning;

          while (S_OK == (<b>oIdentifyingSetAfterVersioning.NextAttribute</b></pre>
	<pre><b>					         </b>(currentAfterVersioning,
                                                  AttributeNameAfterVersioning,
                                                  AttrValueAfterVersioning)))
          {
	    cout &lt;&lt; &quot; Attribute Name : &quot; &lt;&lt; </pre>
	<pre>                           AttributeNameAfterVersioning.getUnicodeString() &lt;&lt; endl; 
             cout &lt;&lt; &quot; Attribute Value: &quot;&lt;&lt; </pre>
	<pre>                          AttrValueAfterVersioning.ConvertToChar() &lt;&lt; endl ;
          }
      }
}</pre> <pre>if (FALSE == IsMonoRepRefFoundAfterVersioning )
     return 1;
...</pre> </td> 
  </tr>
</table>



<p>We parse through the list of Rep Refs instantiated under root. For each Rep 
Ref</p>



<ul>
  <li>A call to <code>CompleteAndOpen</code> 
  ttakes following arguments<ul>
    <li><code>iIdentifierAfterVersioning</code>, a <i>CATIAdpPLMIdentificator</i>* type on the Identificator of 
    Rep ref instantiated under root, an element of the list <code>ListOfRepresentationsAfterVersioning</code>, a <code> CATLISTP(CATIAdpPLMIdentificator) </code>
    type</li>
    <li><code>IID_CATIPLMNavRepReference</code>, the IID of the Interface to be 
    retrieved on the loaded PLM Rep Ref</li>
    <li>
    <p style="margin-top: 0pt; "><code>piNavRepRefOnMonoInstRepRefAfterVersioning</code>, a <i>CATIPLMNavRepReference</i>* type on opened 
    Rep Ref [output]</li>
  </ul>
  </li>
  <li>
	<p>Next a call to <code>CATIPLMNavRepReference</code>::<code>IsOnceInstantiable</code> 
  on&nbsp; <i>CATIPLMNavRepReference</i>* (<code>piNavRepRefOnMonoInstRepRefAfterVersioning</code>) returns S_OK if 
  Rep Ref is mono -instantiable Rep Ref&nbsp;
	<ul>
		<li>Then next call to <code>CATAdpQueryServices</code>::<code>GetIdentificationSet</code> returns 
  identification attribute set. The arguments are as follows<ul>
			<li><code>iIdentifierAfterVersioning</code>, a <i>CATIAdpPLMIdentificator</i>* type on the Identificator of 
    Rep ref instantiated under root, retrieved earlier</li>
			<li>
			<p style="margin-top: 0pt; "><code>oIdentifyingSetAfterVersioning</code>, a 
			<i>CATAdpIdentificationSet</i> type</li>
		</ul>
		</li>
		<li>
		<p style="margin-top: 0pt; margin-bottom: 0pt">Next call to <code>CATAdpIdentificationSet</code>::<code>NextAttribute</code> gives the information 
  of the all identification attributes one of which is V_Version that we are 
  interested in. The parameters are as follows<ul>
			<li>
			<p style="margin-top: 0pt; margin-bottom: 0pt"><code>currentAfterVersioning</code>, a int type counter for identification attributes, incremented 
  automatically within the loop.</li>
			<li>
			<p style="margin-top: 0pt; margin-bottom: 0pt"><code>AttributeNameAfterVersioning</code>, a 
			<i>CATString </i>&nbsp;type, which returns the Attribute name 
  [output]</li>
			<li>
			<p style="margin-top: 0pt; "><code>AttrValueAfterVersioning</code>, a 
			<i>CATUnicodeString </i>&nbsp;type, which returns the Attribute 
  value [output]</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>
	<p style="margin-top: 0pt; margin-bottom: 0pt">At end of parsing list through the list of Rep refs, if 
  	<code>IsMonoRepRefFoundAfterVersioning</code> 
  is not set to TRUE which implies no Mono- instantiable Rep Ref found. If not a 
  single Mono- instantiable Rep ref is found aggregated under root, execution 
  terminates since that is an essentially prerequisite for an UC execution.&nbsp;
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h4><a name="Unload the new Root from session"></a>Unload all the loaded PLM Components From Session&nbsp; </h4>
<p>Its a recommended practice, to unload the PLM Component from session, at the 
end of UC execution. </p>



<table class="code" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
  <tr>
    <td > <pre>...</pre> <pre>hr = Bag.RemoveAll();
...</pre> </td> 
  </tr>
</table>



<ul>
  <li>
  <p style="margin-top: 0pt; margin-bottom: 0pt">a call to <code>CATOmbLifeCycleRootsBag</code>::<code>RemoveAll</code> unloads 
  all the  PLM 
  component from session those are inserted in BAG. 
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAAdpVersioningWithMonoRepRef</code> use case ends by simply closing the PLM
session. Since all PS use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">3</a>].&nbsp;</p>
<p align="right">
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>

<p>This use case illustrates the Methodology to create new version of Mono-instantiable 
PLM 
reference. </p>

<p>It shows we can not VersionUp of Mono- instantiable rep ref 
StandAlone mode. The Method to VersionUp a mono-instantiable Rep Ref is through 
a VersionUp of its aggregating PLM Reference. When a PLM Ref is versionedUp, it 
results in the VersionUp of all Mono-instantiable Rep Refs instantiated beneath 
it.</p>

<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="References"></a>References</h2>
<table>
    <tr>
    <td valign="top">[1]</td>
    <td>
       <a href="CAAAdpUcVersioning.htm">Versioning PLM Components</a></td>
    </tr>
    <tr>
    <td valign="top">[2]</td>
    <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a> </td>
    </tr>
    <tr>
    <td valign="top">[3]</td>
    <td>
    <a href="CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
    </tr>
    <tr>
    <td valign="top">[4]</td>
    <td>
       <a href="CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Components</a></td>
    </tr>
    <tr>
    <td valign="top">[5]</td>
    <td>
       <a href="CAAAdpUcQueryPLMComponent.htm">Querying PLM Components</a></td>
    </tr>
   
    <tr>
    <td valign="top">[6]</td>
    <td>
      <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbPLMCompMngt/CAAOmbUcManagePLMComponentLC.htm')">Managing PLM Component Life Cycle In Session</a>
</td>
    </tr>
   
    <tr>
    <td valign="top">[7]</td>
    <td>
       <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm')">Understanding PLM Component Life Cycle</a></td>
    </tr>
   
</table>
  
<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong> [Aug 2008]</td>
    <td valign="top">Document created</td>
  </tr>
<script type="text/javascript">insertLinkToTop();</script>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

