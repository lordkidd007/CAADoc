<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Versioning PLM Object</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Versioning PLM Object</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code><b>CAAAdpVersioning</b></code> use
      case.&nbsp; It illustrates the steps involved in creating a new version
      and listing all the versions associated with a PLM Object.&nbsp;
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpVersioning Use Case</a>
          <ul>
            <li><a href="#What">What does the CAAAdpVersioning do</a></li>
            <li><a href="#How">How to launch CAAAdpVersioning </a></li>
            <li><a href="#Where">Where to find the CAAAdpVersioning code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>

<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The use case will teach us to</p>

<ul>
  <li>Create a new version of a PLM Object</li>
  <li>List the versions associated with it</li>
</ul>
<p>It will also illustrate</p>
<ul>
  <li>Versioning is non-recursive in a PLM Data model hierarchy. Thus though a
    parent evolves with a new version, the child References beneath Root still
    have their last version effective.</li>
  <li>Versioning fails for PLM Objects loaded in the session.&nbsp;
    Thus one can only create a new version of a PLM Object not loaded in the session.</li>
</ul>

<script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAAAdpVersioning Use Case</h2>
<p> <code><b>CAAAdpVersioning</b></code> is a use case of the <code><b> CAAPLMClientAdapter.edu</b></code>
framework that
illustrates the <code><b>CATPLMIntegrationAccess</b></code>  framework capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpVersioning Do</h3>

<p>The sample data for the Use Case is as listed in&nbsp; [<a href="#Fig. 1a">Fig.
1a</a>]. It consists of&nbsp;</p>
<ul>
  <li><code><b>CAAAdpVersioning_Root</b></code> with Version <b>---</b>.&nbsp;
    It has two child instances under it
    <ul>
      <li><code><b>CAAAdpVersioning_Child1.1</b></code>.&nbsp; An instance of <code><b>CAAAdpVersioning_Child1
        </b></code>(a PLM Reference)</li>
      <li><code><b>CAAAdpVersioning_Child2.1</b></code>.&nbsp; An instance of <code><b>CAAAdpVersioning_Child2
        </b></code>(a PLM Reference)</li>
    </ul>
    <p>Each Child Reference has a single version <b>---</b> associated with it.</li>
</ul>
<table border="0" >
  <caption>
    <p align="left"><a name="Fig. 1a"></a><b>Fig. 1a List of PLM References (Input
    Data)</b></p>
  </caption>
  <tr>
    <td><img border="0" src="images/CAAAdpVersioning_Fig1.gif" width="376" height="102"></td>
  </tr>
</table>

<p>The input models is as seen below [<a href="#Fig. 1b">Fig. 1b</a>] when
viewed in CATIA. The Use Case is illustrated with a Product Data model, but it
works with other PLM Data model, as well.</p>
<table border="0" >
  <caption>
    <p align="left"><b><a name="Fig. 1b"></a>Fig. 1b Input model as seen in
    CATIA</b></p>
  </caption>
  <tr>
    <td><img border="0" src="images/CAAAdpVersioning_Fig1b.jpg" width="399" height="284"></td>
  </tr>
</table>

<ul>
  <li>The use case lists the versions associated with <code><b>CAAAdpVersioning_Root</b></code>
    as seen in [<a href="#Fig. 2">Fig. 2</a>]
    <table border="0" >
      <caption>
        <p align="left"><b><a name="Fig. 2"></a>Fig. 2 Versions associated with
        Root</b></p>
      </caption>
      <tr>
        <td class="code">2 versions retrieved of input PLM Object<br>
          Attribute Name : <b> PLM_ExternalID</b><br>
          Attribute Value: <b> CAAAdpVersioning_Root</b><br>
          <br>
          Attribute Name : <b> V_version</b><br>
          Attribute Value: <b> ---</b></td>
      </tr>
    </table>
  </li>
  <li>For creating any new version we have to give last version as a input [<a href="#References">4</a>] 
  . We then create a new version for <code><b>CAAAdpVersioning_Root</b></code>
    from its <b>---</b> version.&nbsp; [<a href="#Fig. 3">Fig. 3</a>] depicts the output indicating the new version
    <b>--A</b>.
    <table border="0" >
      <caption>
        <p align="left"><b><a name="Fig. 3"></a>Fig. 3 New Version of Root</b></p>
      </caption>
      <tr>
        <td class="code"><b>The new version of Root is --A</b></td>
      </tr>
    </table>
  </li>
  <li>The use case then illustrates the Non-Recursivity&nbsp; of Versioning in a
    Product model hierarchy.&nbsp; [<a href="#Fig. 4">Fig. 4</a>] depicts the
    version of each Child Reference under Root. Here we refer to an older
    version of Root.
    <table border="0" >
      <caption>
        <p align="left"><b><a name="Fig. 4"></a>Fig. 4 Version of Children below
        an older version (---) of Root&nbsp;</b></p>
      </caption>
      <tr>
        <td class="code">The version of a Child Ref #1 is ---<br>
          The version of a Child Ref #2 is ---<br>
        </td>
      </tr>
    </table>
  </li>
</ul>
<blockquote>
  <p align="left">[<a href="#Fig. 5">Fig. 5</a>] depicts the version of each
  Child under the new version of Root. You'll find that the version of
  children&nbsp; ---, is the same as those under an older version (<b>---</b>) of Root. Thus,
  though the Root evolves, the version of the child remains the same, thus
  illustrating the Non-Recursivity of Versioning in a Product model
  hierarchy.</p>
  <table border="0" >
    <caption>
      <p align="left"><b><a name="Fig. 5"></a>Fig. 5 Version of Children below
      the new version (--A) of Root</b></p>
    </caption>
    <tr>
      <td class="code">The version of a Child Ref #1 is ---<br>
        The version of a Child Ref #2 is ---<br>
      </td>
    </tr>
  </table>
</blockquote>
<ul>
  <li>Lastly we have a scenario which illustrates the failure to create a new
    version of a PLM Object loaded in the session.&nbsp; [<a href="#Fig. 6">Fig.
    6</a>] depicts this failure, when we made an attempt&nbsp; to create a new
    version of <code><b>CAAAdpVersioning_Root</b></code> loaded in the session.
    <table border="0" >
      <caption>
        <p align="left"><b><a name="Fig. 6"></a>Fig. 6 Failure to Version PLM 
		Objects loaded in the
        session</b></p>
      </caption>
      <tr>
        <td class="code">FAILURE Expected while creating a new version for PLM 
		Objects loaded in session<br>
          Blocking Error occurred<br>
          The description of the error is: &lt;CATInternalError -1 ERR_01_NEWVERSION></td>
      </tr>
    </table>
  </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch CAAAdpVersioning</h3>
<p>To launch <code><b>CAAAdpVersioning</b></code> , you will need to set up the build time
environment, then compile <code><b>CAAAdpVersioning</b></code> along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p><code><b> <a>mkrun -c &quot;</a><i>CAAAdpVersioning</i></b></code><i>
</i><a><code><b><i>Repository Server User Password SecurityCtx PLMType</i></b></code></a>
<code><b><i> <a>PLM_ExternalID_Value
</a></i></b></code><a><code><b><i>V_version_Value Ref/RepRef</i>&quot;</b></code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th><b>SecurityCtx</b></th>
    <td>a string representing the security context (Role.Organization.Project). 
    Choose Role as Designer (since we create a new version of the PLM Object 
    here)</td>
  </tr>
  <tr>
    <th><b>PLMType</b></th>
    <td>A PLM Type</td>
  </tr>

	<tr>
  <th> <b><a>PLM_ExternalID_Value
<code><i>&nbsp;</i></code></a></b></th>
			<td>The <code><b>PLM_ExternalID</b></code> of a PLM Reference or PLM 
			Representation Reference </td>
		</tr>
		<tr>
			<th> <b>V_version_Value</b></th>
			<td>The <code><b>V_version</b></code> of a PLM Reference or PLM 
            Representation Reference</td>
	  </tr>
	  <tr>
			<th> <b>Ref/RepRef</b></th>
			<td>Represents if input PLM Object is a <a><code><b>PLM</b></code></a> <a><code><b>Ref</b></code></a>erence
      or a <a><code><b>PLM</b></code></a> <a><code><b>Rep</b></code></a>resentation
      <a><code><b>Ref</b></code></a>erence</td>
	  </tr>

</table>


<p><b><a name="*"></a>*</b> The input&nbsp;data is retrieved by importing <code><b><a>CAAAdpVersioning</a></b></code><a><code><b>.3dxml</b></code></a> 
 from the <a><code><b> CAAPLMClientAdapter.edu</b></code></a> 
fwk.&nbsp;</p>
<table id="table15">
    <tr>
      <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\InputData\CAAAdpVersioning.3dxml</code>
       </td>
    </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is the directory where the CAA CD-ROM
is installed.</p>
<p>The contents of the 3D XML (.<a><code><b>3dxml</b></code></a>) file have been listed in [<a href="#Fig. 1a">Fig. 1a</a>].&nbsp;</p>
<p><b>Attention</b>:  Please refer to the document [<a href="#References">1</a>]
for how to import and reimport such a <a><code><b>3D XML</b></code></a> file in your PLM repository.&nbsp;</p>
<p>The<a><code><b> PLM_ExternalID</b></code></a> attribute value of the imported model&nbsp; is typically of the format &quot;<a><code><b>YourPrefix +
</b></code></a><code><b>CAAAdpVersioning_Root</b></code>&quot;, where <a><code><b> YourPrefix</b></code></a> is the string provided as
prefix (Optional), while
importing the <a><code><b>3D XML</b></code></a> file into CATIA.</p>
<font SIZE="2">
<p>Please note that if the end user want to re-execute the use case the input 
version must be --A and not ---</p>
</font>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAAAdpVersioning&nbsp; Code</h3>
<p>The <code><b>CAAAdpVersioning</b></code> use case is located in the <code><b>CAAAdpVersioning</b></code><a><code><b>.m</b></code></a> module of the
<a><code><b>CAAPLMClientAdapter</b><b>.edu</b></code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\</code><code>CAAPLMClientAdapter</code>.<code>edu</code><code>\CAAAdpVersioning.m\</code></td>
  </tr>
</table>
<p>where <code><a><b>InstallRootDirectory</b></a></code>  [<a href="#References">1</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><b>CAAAdpVersioning</b></code> :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve an Identificator of the input PLM Component">Retrieve 
	an Identificator of the input PLM Object</a></li>
  <li><a href="#List the versions associated with the input Component">List the 
	Versions associated with the Input PLM Object</a>
  </li>
  <li><a href="#Create a new version of the input PLM Component">Create a new 
	Version of the Input PLM Object</a></li>
  <li><a href="#Display the value of this new version">Display the value of this
    New Version</a>
  </li>
  <li><a href="#Confirm non-recursivity of versioning in a Product model hierarchy">Confirm
    Non-Recursivity of Versioning in a PLM Data model hierarchy</a>
  </li>
  <li><a href="#Confirm Versioning fails for components loaded in session">Confirm Versioning fails for
    PLM Objects loaded in Session</a>
  </li>
  <li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><b>CAAAdpVersioning</b></code> use case begins by creating a session
and connecting to the Input Repository.&nbsp; This,
being the most fundamental prerequisite for all batch use cases, it is the first
step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer Role
(since we ain't modifying PLM data but only retrieving it from the database). There are other parameters as well,
details of which can be found in the&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
use case article [<a href="#References">2</a>].
This article primarily deals with Opening and Closing a PLM session. </p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve an Identificator of the input PLM Component"></a>Retrieve an Identificator of the Input PLM Object</h3>
<p>The &quot;<b>Querying, Expanding and Opening PLM Objects</b>&quot; Use
Case [<a href="#References">3</a>] details the steps involved in retrieving an
Identificator (<code><b><i>CATIAdpPLMIdentificator</i></b></code> pointer) of a 
PLM Object in the database&nbsp; with the PLM Type and the attribute
values input by the user.&nbsp; This <code><b>Identificator</b></code> then
enables us in the steps ahead&nbsp; either to create a new version or list the
associated versions of the PLM Object which it represents.&nbsp;
</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="List the versions associated with the input Component"></a>List the 
Versions associated with the Input PLM Object</h3>

<p><a name="Seek all Versions as a list of CATAdpQueryResult objects"></a>With 
the input PLM Object <code><b>Identificator</b></code>, we retrieve the list
of its associated versions.&nbsp;</p>
      <pre class="code">...
   <b>CATLISTP(CATAdpQueryResult)</b> listVersionedComp ;
   hr = <b>CATAdpVersioningServices::GetAllVersions</b>(pPLMIdentificatorOnInputComp,
      					   listVersionedComp);
...</pre>
    

<p><code>pPLMIdentificatorOnInputComp</code> is a <code><i>CATIAdpPLMIdentificator</i></code>
pointer retrieved in an earlier step.&nbsp; We&nbsp; seek only the information associated
with them as a list of <code>CATAdpQueryResult</code> objects. Also the
list of versions could be retrieved for PLM Objects irrespective of, if they
exist or not in the session. While creating a new version of a PLM Object is
possible, only if it is not loaded in the session, as you'll realize in the
steps ahead.</p>

<p><a name="Display the AttributeSet values of each version"></a> The result
object stores information of attribute-values associated with the versions of
the input PLM Object. To identify those versions we output these values.</p>
<pre class="code">
...
   int QueryResSize = <b>listVersionedComp.Size</b>(); 
   for (int k=1; k&lt;=QueryResSize; k++)
   {
      <b>CATAdpQueryResult*</b> pCurrentResult = <b>listVersionedComp[k];</b>		
      if (NULL != pCurrentResult)
      {
...
</pre>
<p>We start by retrieving one by one a version. <code>listVersionedComp </code>is the result of
<code>GetAllVersions. </code> </p>
<pre class="code">
...
  <b> CATAdpAttributeSet</b> oAttrSet;
   hr = <b>pCurrentResult-&gt;GetAttributeSet</b>(oAttrSet);
   CATString oAttrName;
   CATUnicodeString oAttrValue;
   int current=0;
   while (S_OK ==(<b>oAttrSet.NextAttribute</b>(current,oAttrName,oAttrValue)))
   {
     cout &lt;&lt; &quot;Attribute Name : &quot;&lt;&lt; oAttrName.getUnicodeString() &lt;&lt; endl;	
     cout &lt;&lt; &quot;Attribute Value: &quot;&lt;&lt; oAttrValue.ConvertToChar() &lt;&lt; endl;				}
...
</pre>
<p>Be cautious. The <code>CATAdpAttributeSet</code>::<code>NextAttribute<b>
</b></code>increments the index (<code>current</code>) and hence user
does not have to exclusively do an increment operation (++) on <code><b>current</b></code>
within the while loop parsing the <code><b>AttributeSet</b></code> for various
Attributes and their values.</p>

<h3><a name="Create a new version of the input PLM Component"></a>Create a New 
Version of the Input PLM Object</h3>

<p>We create a new version of the input PLM Object.&nbsp;</p>

      <pre class="code" >...	
   CATTime TimeVersion = <b>CATTime::GetCurrentLocalTime</b>(); 
   <b>CATIAdpPLMIdentificator*</b> pNewIdentificatorOnVersionedComp = NULL;
   hr = <b>CATAdpVersioningServices::NewVersion</b>(pPLMIdentificatorOnInputComp,TimeVersion,
					  pNewIdentificatorOnVersionedComp);
...</pre>
   
<p>An important point to note here is that the return is another <code><b>Identificator</b></code>
of the newly versioned PLM Object in the database.&nbsp; Thus each version of a
PLM Object has its own <code><b>Identificator</b></code>.&nbsp;</p>

<p>The <code><b>CATTime</b></code> argument to the <code><b>NewVersion</b></code>
API represents the applicability date of the new version of the component.
Moreover, with <code><b>CATTime</b></code> we can be assured of the portability
of our applications globally, since it is shielded from implementation details
like Language, Locale and so on.&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Display the value of this new version"></a>Display the value of
this New Version</h3>

<p>A
pre-requisite for seeking the version of a PLM Object is to load it in the&nbsp;
session. The new version of the input PLM Object is thus loaded.</p>

      <pre class="code" >... 
CATICkeObject* piCkeObjOnVersionedComp = NULL;
CATOmbLifeCycleRootsBag Bag;
<strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
<strong>CATAdpOpener</strong> opener(Bag,params);
	 
hr = opener.<strong>CompleteAndOpen</strong>(pNewIdentificatorOnVersionedComp,IID_CATICkeObject,(void**) &amp;piCkeObjOnVersionedComp);
...</pre>
   
<p>The reason that it is mandatory to load the PLM Object in the&nbsp; session
is because its&nbsp; <i><code>CATICkeObject</code></i><b>	</b>Interface
implementation enables us retrieve the version value of the PLM Object. The input 
PLM Object could either be a <code><b>PLM</b></code>
<code><b>Ref</b></code>erence or a <code><b>PLM</b></code> <code><b>Rep</b></code>resentation
<code><b>Ref</b></code>erence. The &quot;<b>Query, Expanding and Opening PLM 
Objects</b>&quot; Use Case [<a href="#References">3</a>] explains the APIs
which open/load various PLM Objects in session.</p>

<p>Next we
retrieve the value of the Version attribute of the loaded PLM Object and display
it.</p>

<pre class="code" >...
   CATIValue_var spVersionValue ;
   hr= CATCkeObjectAttrReadServices::GetValue(piCkeObjOnVersionedComp,"V_version",spVersionValue);</b>

<b>   CATUnicodeString VersionRoot</b>;
   hr = <b>spVersionValue-&gt;AsString</b>(VersionRoot);
...</pre>
   
<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Confirm non-recursivity of versioning in a Product model hierarchy"></a>Confirm
Non-Recursivity of Versioning in a PLM Data Model Hierarchy</h3>

<p>In the Use Case code you'll find the global routine&nbsp; <code><b>DisplayVersionsOfChildrenUnderRoot</b></code>
 for displaying the version of all children beneath Root. Thus we invoke it for
an older version of Root (<b>--A</b>) and for its newer version (<b>--B</b>)
thus retrieving the version of children before and after the aggregating Root was newly
versioned.&nbsp;</p>

<p>You'll find the version of Children remains the same thus confirming Non-Recursivity
of Versioning in a PLM Data model hierarchy.&nbsp;&nbsp;&nbsp;&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Confirm Versioning fails for components loaded in session"></a>Confirm
Versioning fails for PLM Objects loaded in Session</h3>

<p>In the final step, we now create another version of the newly versioned PLM 
Object.&nbsp;</p>
 
 <pre class="code">
 ...
   int Year = TimeVersion.GetYear();
   int Month = TimeVersion.GetMonth();
   int Day = TimeVersion.GetDay();
   if (31==Day) Day = 0;
<b>   TimeVersion.SetDate</b>(Year,Month,Day+1);

<b>   CATIAdpPLMIdentificator</b><b>*</b> pPLMIdentificatorOnOtherVersionedComp = NULL;
   hr = <b>CATAdpVersioningServices::NewVersion</b>(pNewIdentificatorOnVersionedComp,
					      TimeVersion,
					<b>pPLMIdentificatorOnOtherVersionedComp</b>);

   if (FAILED(hr) &amp;&amp; (NULL == pPLMIdentificatorOnOtherVersionedComp))
   {
      CATError* pErr<b> = CATError::CATGetLastError</b>(hr);
      if (NULL != pErr)
      {
         const char* ActualErrMsgID = pErr-&gt;<strong>GetMsgId</strong>();
         const char* ExpectedErrMsgID(&quot;<strong>ERR_01_NEWVERSION</strong>&quot;);
...</pre>
  
<p>Since the newly versioned PLM Object was already loaded in session earlier [<a href="#Display the value of this new version">Display
the value of this new version</a>], an attempt to create a newer version of it
is expected to fail.&nbsp; Also we ensure that the Error Message returned is the
same as the one expected so that user can take an appropriate corrective action
in response.&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><b>CAAAdpVersioning</b></code> use case ends by simply closing the PLM
session. Since all PS use cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">4</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>

<p>The Use Case illustrates listing the versions and creating a new version for an input
PLM Object. This PLM Object could either be a <code><b> PLM</b></code> <code><b>Ref</b></code>erence or a
<code><b> PLM</b></code> <code><b>Rep</b></code>resentation <code><b>Ref</b></code>erence.&nbsp;</p>

<p>For PLM References, it demonstrates the Non-Recursivity of the
Versioning in the PLM Data model hierarchy. This implies that&nbsp; though the
Root evolves with a new version the Child References beneath Root still have
their last version effective.&nbsp; Thus versioning doesn't propagate down the
PLM Data model hierarchy.</p>

<p>Lastly, Versioning fails for a PLM Object loaded in the&nbsp; session.
In other words, a new version could be created only for those PLM Objects
which do not exist in the session.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="References"></a>References</h2>

<table>
     <tr>
     <td valign="top">[1]</td>
     <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a> </td>
     </tr>
     <tr>
     <td valign="top">[2]</td>
     <td>
     <a href="CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
     </tr>
     <tr>
     <td valign="top">[3]</td>
     <td>
     <a href="CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Objects</a></td>
     </tr>
     <tr>
     <td valign="top">[4]</td>
     <td>
       <a href="CAAPlmTaVersioningPrinciples.htm">
       Understanding PLM Versioning</a></td>
     </tr>
</table>


<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong>     [Nov 2006]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>

