<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Securing an Interactive Command</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>

</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Securing an Interactive Command</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -------------------------------comment---------------------------------- -->
<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This is an interactive Use Case which illustrates the steps involved to 
		secure an Interactive Command, so that only authorized people can have 
		access to it. Generally these commands, interactive or batch, are the 
		ones which access&nbsp; and/or modify on an underlying database. It is 
		obvious therefore, for reasons of security, that we control access to 
		these commands, based on user, P &amp; O contexts,&nbsp; projects, roles or 
		organization. The technical article &quot;<b>ENOVIA VPLM Security On Command</b>&quot; 
		[<a href="#References">4</a>] 
		delves further on this subject.</p>
      <p>The Use Case is driven by a dialog-box based command, a part of the <b>
      PLM Client Adapter </b>Add-In to the <b>General Workshop </b>within <b>CATIA.</b> We have dedicated articles on <b> Add-ins</b> [<a href="#References">1</a>]
      and <b> Dialog-box</b> based commands [<a href="#References">2</a>].</p>
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpSecuredBasicCommand Use Case</a>
          <ul>
            <li><a href="#What">What Does CAAAdpSecuredBasicCommand Do</a></li>
            <li><a href="#How">How to Launch CAAAdpSecuredBasicCommand</a></li>
            <li><a href="#Where">Where to Find the CAAAdpSecuredBasicCommandCode</a></li>
          </ul>
        <li><a href="#Step">Step-by-Step</a></li>
        <li><a href="#InShort">In Short</a></li>
        <li><a href="#References">References</a></li>
      </ul>
      </table>
<!-- -------------------------------comment---------------------------------- -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>In this use case mainly we learn the methodology to secure commands in CATIA, 
so that only authorized people have access to it.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<h2><a name="UseCase"></a>The CAAAdpSecuredBasicCommandUse Case</h2>
<p><code>CAAAdpSecuredBasicCommand<b> </b></code>is a use case of the <code>CAAPLMClientAdapter</code>.<code>edu</code>
framework that 
mainly illustrates <code>CATPLMIntegrationAccess</code> frameworks capabilities.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
<h3><a name="What"></a>What Does<b>  CAAAdpSecuredBasicCommand</b>Do</h3>
<p>The <code>CAAAdpSecuredBasicCommand<b> </b></code>Use Case is 
fundamentally a command integrated in <b>CATIA</b> which checks for an 
authorization access for a specific functionality for an end-user connected to a 
specified repository, for letting them access to it.</p>
<p>This command is a part of the &quot;<b>CAA PLM Mask</b>&quot; toolbar, a
<b>PLM Client Adapter</b>&nbsp; Add-In in the <b> General Workshop</b> within <b>CATIA</b>.</p>
<p>This toolbar is listed in the <b>Customize</b> dialog panel, in its <b>
Toolbars</b> tab, as <a href="#Fig.1">Fig.1</a> depicts.</p>
<p>&nbsp;<a name="Fig.1"></a>Fig.1 Tools --&gt; Customize --&gt;Toolbar UI </p>
<table border="0" id="table11">
	<tr>
		<td>
		<img border="0" src="images/CAAAdpSecuredBasicCommand_CustoPnl.jpg" width="467" height="406"></td>
	</tr>
</table>
<ul>
	<li><a href="#Fig. 2">Fig. 2</a> depicts the &quot;<b>CAA PLM Mask</b>&quot; 
    toolbar with the &quot;<b>Secured Command</b>&quot; command which appears as an icon 
	<img border="0" src="images/CAAAdpSecuredBasicCommand_Icon.gif" width="35" height="27">&nbsp;&nbsp;within 
    it.<table border="0" id="table12" width="180">
		<caption><a name="Fig. 2"></a>Fig. 2 &quot;CAA PLM Mask&quot; Toolbar </caption>
		<tr>
			<td>
			<img border="0" src="images/CAAAdpSecuredBasicCommand_Fig2.jpg" width="46" height="100"></td>
		</tr>
	</table>
	<p>On activating the secured command
	<img border="0" src="images/CAAAdpSecuredBasicCommand_Icon.gif" width="35" height="27">&nbsp; 
	the execution checks for an access authorization as defined by the keyword 
	&quot;SAVE&quot; by the ENOVIA Administrator, for the user in the current session 
	connected to the input repository. One of the following two cases are 
	possible </p>
<ul>
	<li>If the user is authorized, a new dialog box titled
	&quot;<b>Security Parameters</b>&quot; appears, as shown in [<a href="#Fig.3">Fig. 3</a>]. 
	It displays the Connection Parameters for the current session.<table border="0" id="table13">
		<caption><a name="Fig.3"></a>Fig. 3 Security Parameters Dialog</caption>
		<tr>
			<td>
			<img border="0" src="images/CAAAdpSecuredBasicCommand_Fig3.jpg" width="200" height="151"></td>
		</tr>
	</table></li>
	<li>If the user is not authorized, it results in the &quot;<b>Command Access 
	Warning</b>&quot; dialog box as depicted in [<a href="#Fig.4">Fig. 4</a>] below.<table border="0" id="table14">
		<caption><a name="Fig.4"></a>Fig. 4 Command Access Warning Dialog</caption>
		<tr>
			<td><img border="0" src="images/CAAAdpSecuredBasicCommand_Fig4.jpg"></td>
		</tr>
	</table>
	</li>
</ul>
 	<h3>&nbsp;</h3>
	<h3><a href="#Where" name="How"></a>How to Launch CAAAdpWorkingWithPLMMaskhdrCmd</h3>
	<p>To launch <code>CAAAdpSecuredBasicCommand</code>, you will need to set up the build time environment,
then compile <code>CAAAdpSecuredBasicCommand</code><b> </b>along with its prerequisites, set up the run time
environment, and then execute the use case [<a href="#References">3</a>].</p>
	<p>Launch CATIA, when the application is ready:</p>
	<ul>
		<li><b>Connect</b> to the database</li>
		<li>On the <b>Tools</b> menu click <b>Customize</b> and check that 
	the <b>CAA PLM Mask</b> (<a href="#Addin">See Addin 
	section</a>) is existing ,as shown in <a href="#Fig.1">Fig.1</a> above.
      User can
      set the visibility of the created toolbar in the <b>View</b>-&gt;<b>Toolbars
      	</b>option.</li>
	</ul>
	<p>The <a href="#What"><b>What Does </b><code><b>CAAAdpSecuredBasicCommand 
	</b></code><b>Do</b></a> 
section provides further details on the steps ahead. </p>
 <script type="text/javascript">insertLinkToTop();</script>
	<b>
	<h3><a name="Addin"></a>Addin Access</h3></b>
	<p>The&nbsp; <b>PLM Client Adapter</b>&nbsp; Add-In to the General workshop within CATIA, is
available thanks to a data extension of the <code>CAAAdpGeneralWksAddin</code>
component.&nbsp; This necessitates the following entries in the .<code><b>dico</b></code> file.</p>
	<table class="code" id="table9">
		<tr>
			<td>
			<pre>...
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIWorkbenchAddin libCAAAdpGeneralWksAddin
<b>#CAA#</b>CAAAdpGeneralWksAddin CATIAfrGeneralWksAddin libCAAAdpGeneralWksAddin
...</pre></td>
		</tr>
	</table>
	<p>Before launching CATIA, uncomment the above lines&nbsp;(remove bold chars) in the
	<code>CAAPLMClientAdapter</code>.<code>edu</code>.<code>dico</code>.
These primarily indicate that the add-in is fundamentally a <code><i>CATIWorkbenchAddin</i></code>
and a <code><i>CATIAfrGeneralWksAddin</i></code> implementation residing in the
	<code>CAAAdpGeneralWksAddin</code> shared lib. </p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
	<h3><a name="Where"></a>Where to Find the CAAAdpSecuredBasicCommandCode</h3>
	<p>The <code>CAAAdpSecuredBasicCommand</code> use case is made of several 
classes spread across multiple files&nbsp; located in
the <code>CAAAdpCommands</code>.<code>m<b> </b></code>module of the
<code>CAAPLMClientAdapter.edu</code> framework:</p>
	<table>
		<tr>
			<td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\CAAAdpCommands.m\</code></td>
		</tr>
	</table>
	<p>where <code>InstallRootDirectory</code>  [<a href="#References">3</a>] is the directory where the CAA CD-ROM
is installed.</p>
	<ul>
		<li><code>CAAAdpSecuredBasicCommand.cpp</code>&nbsp; 
	is the basic command implementation</li>
		<li><code>CAAAdpSecuredCommandDlg.cpp</code>&nbsp; is the dialog box 
	implementation</li>
	</ul>
	<p>The use case pre-reqs an addin module too:</p>
	<table id="table10">
		<tr>
			<td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\</code><code>CAAAdpGeneralWksAddin</code><code>.m\</code></td>
		</tr>
	</table>

<!-- -------------------------------comment---------------------------------- -->
	which has the General Workshop AddIn implementation in&nbsp; <code>CAAAdpGeneralWksAdn.cpp</code> 
	<script type="text/javascript">insertLinkToTop();</script>
	<h2><a name="Step"></a>Step-by-Step</h2>
	<p>The only most important step in the <code>CAAAdpSecuredBasicCommand
	</code>use case is</p>
	<ol>
		<li><a href="#Prolog">Prolog</a></li>
		<li><a href="#The Basic Command Implementation">The Basic Command 
		Implementation</a></li>
		<li><a href="#Dlg Box implementation">The Dialog Box Implementation</a></li>
		<li><a href="#Epilog">Epilog</a></li>
	</ol>
</ul>
 <script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Prolog"></a>Prolog</h3>
<p>A Basic command &quot;<b>Secured Command</b>&quot; is integrated 
within the General Workshop of CATIA, as a part of its PLM Client Adapter 
Add-in.</p>
 <script type="text/javascript">insertLinkToTop();</script>
<h3><a name="The Basic Command Implementation"></a>The Basic Command 
Implementation</h3>
<p>The Basic Command Implementation consists of solely the code written within 
its constructor depicted below. Fundamentally, it checks if the user connected 
has an &quot;authorization access&quot; declared through the keyword &quot;<b>SAVE</b>&quot;. If authorization exists 
then a dialog box is built displaying the connection parameters. Else it simply 
displays a Warning dialog, depicting that the access to the command is 
unauthorized.</p>
<table class="code">
	<tr>
		<td>CAAAdpSecuredBasicCommand::CAAAdpSecuredBasicCommand() :<br>CATCommand (NULL, &quot;CAAAdpSecuredBasicCommand&quot;)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp; CATString iKeyWordCommand(&quot;SAVE&quot;);<br>
		<b>&nbsp;&nbsp;&nbsp;&nbsp; HRESULT hr = CATAdpPublicSecurityServices::CheckAccess(&quot;&quot;,iKeyWordCommand);<br>&nbsp;&nbsp;&nbsp;&nbsp; if (S_OK == hr)</b><br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>
		<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _pDlg = new CAAAdpSecuredCommandDlg();</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (NULL != _pDlg)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
		<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _pDlg-&gt;Build();<br>
		</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _pDlg-&gt;SetVisibility(CATDlgShow);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
		<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CATDlgNotify* piNotifyDlg = new 
		CATDlgNotify((CATApplicationFrame::GetFrame())</b></code><p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;GetMainWindow(),&quot;Unauthorized Access&quot;,</b></code><b>CATDlgNfyOK);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CATUnicodeString Title(&quot;Command Access Warning&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CATUnicodeString Msg(&quot;Unauthorized Command Access&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (NULL != piNotifyDlg)<br>
		<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; piNotifyDlg-&gt;DisplayBlocked(Msg,Title);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<b>RequestDelayedDestruction();</b><br>}</p></td>
	</tr>
</table>
<p>The <code>CAAAdpSecuredBasicCommand</code> constructor implementation 
depicted above includes </p>
<ul>
	<li>A call to <code>CATAdpPublicSecurityServices</code>::<code>CheckAccess</code> 
	whose arguments include<ul>
		<li>&quot;&quot;, an empty string. The API will retrieve itself the provider, 
		since we're in a session currently connected to a known repository</li>
		<li><code>iKeyWordCommand</code>, a <code>CATString</code> 
		type, defined by your administrator which has the &quot;access authorization&quot; 
		status for users</li>
	</ul>
	</li>
	<li>If the above API returns a <code>S_OK</code>, it implies 
	authorization is granted. We proceed to<ul>
		<li>Call <code>CAAAdpSecuredCommandDlg</code>::<code>Build</code> 
		on <code>_pDlg</code>, which actually builds a dialog box</li>
		<li>Call <code>CAAAdpSecuredCommandDlg</code>::<code>SetVisibility</code> 
		on <code>_pDlg</code>, with <code>CATDlgShow</code> as 
		argument,&nbsp; to set the dialog box visibility in SHOW mode</li>
	</ul>
	</li>
	<li>The last call is to <code>RequestDelayedDestruction</code>(), 
	which simply ensures that the basic command dies immediately after its 
	creation. It&nbsp; manages its destruction entirely by itself.</li>
</ul>
<p>
<script type="text/javascript">insertLinkToTop();</script>
</p>
<h3><a name="Dlg Box implementation"></a>The Dialog 
Box Implementation</h3>
<p>The step involves the creation of a dialog box to display the Connection 
Parameters of the current session.</p>
<table class="code">
	<tr>
		<td>
		<pre>void <b>CAAAdpSecuredCommandDlg::Build</b>()
{</pre>
		<pre>...
	<b>HRESULT hr = CATAdpPublicSecurityServices::GetSecurityParameters(&quot;&quot;,_oUserId,</b></pre>
		<pre><b>					  oOrganisationId,_oProjectId,_oRoleId);</b>
...
	CATUnicodeString strUserId(_oUserId);
<b>	_UserIDEditor-&gt;SetText(strUserId);
</b>
	CATUnicodeString strOganisationId(_oOrganisationId);
<b>	_OrganizationIDEditor-&gt;SetText(strOganisationId);
</b>
	CATUnicodeString strProjectId(_oProjectId);
<b>	_ProjectIDEditor-&gt;SetText(strProjectId);
</b>
	CATUnicodeString strRoleId(_oRoleId);
<b>	_RoleIDEditor-&gt;SetText(strRoleId);
</b>}</pre></td>
	</tr>
</table>
<p>The steps involved in creating a dialog box is detailed in the article [<a href="#References">2</a>]. The 
next call is to retrieve the login information of the current session. It is</p>
<ul>
	<li><code>CATAdpPublicSecurityServices</code>::<code>GetSecurityParameters</code> 
	whose arguments include<ul>
		<li>&quot;&quot;,&nbsp; an empty string. The API will retrieve itself the provider, 
		since we're in a session currently connected to a known repository</li>
		<li><code>_oUserId</code>, a <code>CATString</code> type, 
		representing the user currently logged in</li>
		<li><code>_oOrganisationId</code>, a <code>CATString</code> 
		type, current Organization Identifier</li>
		<li><code>_oProjectId</code>, a <code>CATString</code> 
		type, current Project Identifier</li>
		<li><code>_oRoleId</code>, a <code>CATString</code> type, 
		current Role Identifier</li>
	</ul>
	</li>
</ul>
 <script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The basic command dies immediately after its creation. So, its 
role is only to create either the &quot;<b>Security Parameters</b>&quot; or the 
&quot;<b>Command Access Warning</b>&quot; panel, as the case may be,&nbsp; in its 
constructor and then immediately a call its own destructor.</p>
<p>
 <script type="text/javascript">insertLinkToTop();</script>
<!-- -------------------------------comment---------------------------------- -->
</p>
<h2><a name="InShort"></a>In Short</h2>
<p>This is an Interactive Use Case which illustrates the steps involved to 
secure an interactive command in CATIA, to ensure that only authorized people 
(based on user, P &amp; O contexts, projects, role) have access to it. These 
commands typically access and/or modify an underlying database.</p>
<p>A &quot;<b>Secured Command</b>&quot; command is integrated in a toolbar within the 
&quot;<b>General Workshop</b>&quot; of <b>CATIA</b>. The technical article &quot;<b>ENOVIA VPLM Security On Command</b>&quot; 
[<a href="#References">4</a>] 
		delves further on this subject.<script type="text/javascript">insertLinkToTop();</script><!-- -------------------------------comment---------------------------------- --></p>
<h2><a name="References"></a>References</h2>
<table>
	<colgroup><col valign="top" span="1">
	</colgroup>
	<tr>
	<td>[1]</td>
	<td >
	<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">Creating an Add-In</a></td>	
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADlgDialog/CAADlgTaOverview.htm">Dialog
      Overview</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">Building
      and Launching a CAA Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="CAAPlmTaSecurityCommand.htm">Enovia VPLM Security on Command</a></td>
	</tr>
</table>
<p>

<!-- -------------------------------comment---------------------------------- -->
</p>
 <script type="text/javascript">insertLinkToTop();</script>
<h2><a name="History"></a>History</h2>
<table >
	<tr>
		<td valign="top">Version: <strong>1</strong> [Aug 2008]</td>
		<td valign="top">Document created</td>
	</tr>
	<tr>
 <script type="text/javascript">insertLinkToTop();</script>
   	</tr>
</table>
<pre><!-- -------------------------------comment---------------------------------- --><script type="text/javascript">insertCopyright();</script></pre></body>

</html>


