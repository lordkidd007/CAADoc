<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Applying Maturity Transitions</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
<style type="text/css">
.style1 {
	font-family: monospace;
	font-style: italic;
	font-weight: bold;
	}
</style>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Applying Maturity Transitions</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td  >
      <h2><a name="Top"></a>Abstract</h2>
      <p>This article discusses the <code><b>CAAAdpMaturity</b></code> use
      case.&nbsp; The use case illustrates the evolution of a PLM Object
      through its various Maturity states. At each stage it outputs the Current
      State and the list of Maturity Transitions possible from this Current
      State.
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpMaturity Use Case</a>
          <ul>
            <li><a href="#What">What does the CAAAdpMaturity do</a></li>
            <li><a href="#How">How to launch CAAAdpMaturity</a></li>
            <li><a href="#Where">Where to find the CAAAdpMaturity code</a></li>
          </ul>
        </li>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#History">References</a></li>
      </ul>&nbsp;
    </td>
  </tr>
</table>

<!---------------------------------comment------------------------------------->

<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>

<p>The use case will teach us to</p>

<ul>
  <li>Seek the Current State of a PLM Object</li>
  <li>List the possible Maturity Transitions from the Current State</li>
  <li>Apply a Maturity Transition to a PLM Object</li>
</ul>
<p>It will also illustrate that applying a Maturity transition fails for a PLM 
Object loaded in the&nbsp; session. It is thus mandatory that we unload the
Component from the&nbsp; session and then apply a Maturity Transition to it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAAAdpMaturity Use Case</h2>
<p> <code><b>CAAAdpMaturity</b></code> is a use case of the <code><b> CAAPLMClientAdapter.edu</b></code>
framework that
illustrates the <code><b>CATPLMIntegrationAccess</b></code>  framework capabilities.&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpMaturity Do</h3>

<p>The Use Case outputs the Current State and the list of possible Transitions
from this State for an input PLM Object.&nbsp;</p>

<p>Additionally, if the user chooses to, it applies a Maturity Transition to the
input PLM Object and outputs the new Current State and the list of possible
Transitions from this new state. The input PLM Object could either be a <code><b>PLM</b></code>
Product <code><b>Ref</b></code>erence or a <code><b>PLM</b></code> <code><b>Rep</b></code>resentation
    <code><b>Ref</b></code>erence.&nbsp;</p>

<ul>
  <li>We open the <code><b>PLM</b></code> Product <code><b>Ref</b></code>erence</li>
  <li>We list the Current State and the possible Transitions from this state for
    this PLM Reference newly created in CATIA [<a href="#Fig. 1">Fig. 1</a>]</li>
</ul>
<blockquote>
  <table border="0" width="100%">
    <caption>
      <p align="left"><b><a name="Fig. 1"></a>Fig. 1 Output for a newly created
      PLM Reference</b></p>
    </caption>
    <tr>
      <td width="100%">The current maturity state of the component is: <b> IN_WORK</b><br>
        The transitions possible from the current state are:<br>
        <b>                KeepPrivate<br>
                Share</b><br>
      </td>
    </tr>
  </table>
</blockquote>
<ul>
  <li>
    <p align="left">Next we apply a valid Transition (first one from the list
    above)&nbsp; to the input Component loaded in the&nbsp; session. [<a href="#Fig. 2">Fig.
    2</a>] indicates the failure to apply the Maturity Transition, since the
    input PLM Object is in session.</p>
    <table border="0" width="100%">
      <caption>
        <p align="left"><b><a name="Fig. 2"></a>Fig. 2 Output after applying a
        Maturity Transition for a PLM Object loaded in session</b></p>
      </caption>
      <tr>
        <td width="100%">Input component loaded in session<br>
          Hence failure expected on applying a maturity transition<br>
          The expected error message is: &lt;CATInternalError -1 ERR_01_MATURITY><br>
          <b>ApplyMaturityTransition failure<br>
          </b>The description of the error is: &lt;CATInternalError -1 ERR_01_MATURITY><br>
          Actual error returned is the same as the one expected<br>
        </td>
      </tr>
    </table>
  </li>
  <li>
    <p align="left">Now thanks to the <b>BAG</b> mechanism, we unload the input
    component from the&nbsp; session.&nbsp; We now apply a Maturity Transition
    &quot;<b>KeepPrivate</b>&quot;&nbsp; to it.&nbsp; The Use Case output now
    lists the new Current State and the possible Transitions from this new State
    for the input component.&nbsp;&nbsp;&nbsp; [<a href="#Fig. 3">Fig. 3</a>]&nbsp;</p>
    <table border="0" width="100%">
      <caption>
        <p align="left"><b><a name="Fig. 3"></a>Fig. 3 Output after applying a
        Maturity Transition</b></p>
      </caption>
      <tr>
        <td width="100%">The current maturity state of the component is: <b> PRIVATE</b><br>
          The transitions possible from the current state are:<br>
          <b>                Reject</b></td>
      </tr>
    </table>
  </li>
</ul>
<blockquote>
<p align="left">Since we applied a &quot;<b>KeepPrivate</b>&quot; Maturity
Transition to the input component, the new current state is &quot;<b>PRIVATE</b>&quot;.&nbsp;
Also the only possible transition from this state is &quot;<b>Reject</b>&quot;</p>
</blockquote>
<p align="left">The Use Case thus evolves the input component through its various maturity
states. At each stage it outputs the new
current state and the possible transitions from the new current state, enabling
the input component to evolve further.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="How"></a>How to Launch <strong><a href="#UseCase"> CAAAdpMaturity</a></strong><strong>&nbsp;</strong>
</h3>
<p>To launch <code><b>CAAAdpMaturity</b></code> , you will need to set up the build time
environment, then compile <code><b>CAAAdpMaturity</b></code> along with its prerequisites,
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To
launch the use case execute the command:</p>
<p><code><b> <a>mkrun -c &quot;</a><i>CAAAdpMaturity</i></b></code><i>
</i><a><code><b><i>Repository Server User Password SecurityCtx</i></b></code></a>
<span class="style1">PLMType</span> <code><b><i><a>PLM_ExternalID_Value
</a></i></b></code><a><code><b><i>V_version_Value PLMChildType [TransitionToApply]</i>&quot;</b></code></a> </p>
<p>where:</p>

<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th><b>SecurityCtx</b></th>
    <td>a string representing the security context (Role.Organization.Project). 
    Choose Role as Designer (since we apply Maturity Transition&nbsp;on input 
    component) </td>
  </tr>
  <tr>
    <th><b>PLMType</b></th>
    <td>A String representing PLMType</td>
  </tr>
	<tr>
  <th> <b><a>PLM_ExternalID_Value </a></b> </th>
			<td>The <code><b>PLM_ExternalID</b></code> value of the input component (<a href="#*">*</a>)</td>
		</tr>
	<tr>
	<th> <b>V_version_Value</b></th>
	<td>The <code><b>V_version</b></code> value of the input component (<a href="#*">*</a>)</td>
  </tr>
  <tr>
    <th><b>PLMChildType</b></th>
    <td>A String representing PLMChildType</td>
  </tr>
  
	<tr>
	<th> <b>[TransitionToApply]</b></th>
	<td>The name of the Maturity Transition that the user&nbsp;wishes to apply </td>
  </tr>
</table>

<p><b><a name="*"></a>*</b> The input model can be retrieved by importing the <a><code><b> CAAAdpMaturity.3dxml</b></code></a>
file from the <a><code><b>CAAPLMClientAdapter.edu</b></code></a> fwk.</p>
<table id="table15">
    <tr>
      <td><code>InstallRootDirectory\CAAPLMClientAdapter.edu\InputData\</code><a><code>CAAAdpMaturity</code></a><code>.3dxml</code></td>
    </tr>
</table>
<p align="left">Where <code>InstallRootDirectory</code>  [<a href="#References">4</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<p align="left">This 3D XML<code> </code>file<code> </code>contains the <b>Root Reference
</b> with the
following attributes:</p>
<ul>
  <li><a><code><b>PLM_ExternalID</b></code></a>: <a><code>CAAAdpMaturity</code></a><code>_Root</code></li>
  <li><a><code><b>Version</b></code></a>:
    ---</li>
</ul>
<p align="left">The 3D XML<code>  </code>file also contains a <b>Rep&nbsp; Reference
</b> with the
following attributes:</p>
<ul>
  <li><a><code><b>PLM_ExternalID</b></code></a>: <a><code>CAAAdpMaturity</code></a><code>_RepRef</code></li>
  <li><a><code><b>Version</b></code></a>:
    ---</li>
</ul>
<p>Here we have provided a 3D XML file only for the convenience of
the user so that one doesn't have to recreate the input model. It can simply be
imported from this file, and used for the execution further. But the user does
have the
liberty to use any input model of his choice, based on his discretion.&nbsp;</p>
<p align="left"><b>Attention</b>:  Please refer to the document [<a href="#References">4</a>]
for how to import and reimport such a 3D XML<code> </code>file in your PLM repository.</p>
<p>The<a><code><b> PLM_ExternalID</b></code></a> attribute value of the imported model&nbsp; is typically of the format &quot;<a><code><b>YourPrefix +
CAAAdpMaturity_Root</b></code></a>&quot;, where <a><code><b> YourPrefix</b></code></a> is the string provided as prefix, while
importing a 3D XML<code> </code>file to CATIA.&nbsp;&nbsp;</p>
<p>We recommend that the user run this Use Case without the last argument (<b>TransitionToApply</b>)
to begin with. This outputs the list of all possible transitions from the
current state. The next run of the Use Case would then be with one of the
elements of this list, as the last argument.&nbsp; This ensures that the input Maturity Transition to apply is always
a valid argument.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAAAdpMaturity&nbsp; Code</h3>
<p>The <code><b>CAAAdpMaturity</b></code> use case is located in the <code><b>CAAAdpMaturity</b></code><a><code><b>.m</b></code></a> module of the
<a><code><b>CAAPLMClientAdapter</b><b>.edu</b></code></a> framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\</code><code>CAAPLMClientAdapter</code>.<code>edu</code><code>\CAAAdpMaturity.m\</code></td>
  </tr>
</table>
<p>where <code><a><b>InstallRootDirectory</b></a></code>  [<a href="#References">4</a>]
is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>

<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code><b>CAAAdpMaturity</b></code> :</p>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Retrieve a Pointer to the input PLM Component">Retrieve a 
	Pointer to the Input PLM Object</a></li>
  <li><a href="#Seek an Identificator of the input Component">Seek an 
	Identificator of the Input PLM Object</a>
  </li>
  <li><a href="#Seek Current State and possible Maturity Transitions for the input Component">
	Seek Current State and possible Maturity Transitions for the Input PLM 
	Object</a></li>
  <li><a href="#Apply a valid Maturity Transition on a Component loaded in the current session">Apply a valid Maturity
    Transition on a PLM Object loaded in the&nbsp; session</a></li>
  <li><a href="#Unload component from current session using BAG">Unload PLM 
	Object from&nbsp;Session using BAG</a></li>
  <li><a href="#Apply Maturity Transition on Component not loaded in the current session">Apply
    Maturity Transition on PLM Object not loaded in the&nbsp; Session</a></li>
  <li><a href="#Seek Current State and possible Maturity Transitions from the new Current State">Seek
    Current State and the possible Maturity Transitions from the New Current State</a></li>
  <li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<!---------------------------------comment------------------------------------->

<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code><b>CAAAdpMaturity</b></code> use case begins by creating a session
and connecting to the Input Repository.&nbsp; This,
being the most fundamental prerequisite for all batch use cases, it is the first
step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Designer Role
(since we are applying a Maturity Transition on a Component in the database). There are other parameters as well,
details of which can be found in the&nbsp; &quot;<b>Creating a Basic PLM Batch</b>&quot;
use case article [<a href="#References">1</a>].
This article primarily deals with Opening and Closing a PLM session.<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Retrieve a Pointer to the input PLM Component"></a>Retrieve a 
Pointer to the Input PLM Object
</h3>
<p>The &quot;<b>Querying, Expanding and Opening PLM Objects</b>&quot; Use
Case [<a href="#References">2</a>] details the steps involved in retrieving a
pointer to an input PLM Object (<code><b>PLM</b></code> <code><b>Ref</b></code>erence
or a <code><b>PLM</b></code> <code><b>Rep</b></code>resentation <code><b>Ref</b></code>erence),
given its Identifying Attribute values (<code><b>PLM_ExternalID</b></code>, <code><b>V_version</b></code>)
and the Environment. The input component is thus loaded in the&nbsp; session
and a <code><b><i>CATIPLMComponent</i></b></code> Interface pointer on it is
available.
</p>

<p>An important point to note here is that the Open API, in its implementation 
retrieves the PLM Object <code><b>Identificator</b></code>, a fundamentally
pre-requisite for opening the PLM Object. But since this <code><b>Identificator</b></code>
is not available outside the scope of this API implementation, we have to
explicitly retrieve it from the <code><b><i>CATIPLMComponent</i></b></code>&nbsp;
pointer returned by the Open API.
</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Seek an Identificator of the input Component"></a>Seek an 
Identificator of the Input PLM Object</h3>

<p>We retrieve the <code><b>Identificator</b></code> of the input Component. The
<code><b>Identificator</b></code> locates the PLM Object in the database
whose Maturity status and the list of possible transitions are output and the
transitions applied,&nbsp; in the steps ahead.&nbsp;The article [<a href="#References">3</a>] 
provides further details about the PLM Object <code><b>Identificator</b></code>.</p>

<table class="code" width="912">
  <tr>
    <td width="904">
      <pre>...
	<b>CATIAdpPLMIdentificator* oAdpID</b> = NULL;
	hr = <b>poPLMComp-&gt;GetAdpID</b>(oAdpID);
...</pre>
    </td>
  </tr>
</table>

<p><code><b>poPLMComp</b></code> is a <code><b><i>CATIPLMComponent</i></b></code>
Interface pointer on the input component loaded in the&nbsp; session, in the
earlier step. The <code><b><i>CATIPLMComponent</i></b></code>::<code><b>GetAdpID</b></code>
enables us to&nbsp; easily retrieve&nbsp; a <code><b><i>CATIAdpPLMIdentificator</i></b></code>
Interface pointer.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Seek Current State and possible Maturity Transitions for the input Component"></a>
Seek Current State and possible Maturity Transitions for the Input PLM Object</h3>

<p>The&nbsp;Current State and the Maturity Transitions possible from this state
are retrieved here.</p>

<table class="code" width="912">
  <tr>
    <td width="904">
      <pre>...
      	CATUnicodeString CurrentState;
	CATListValCATUnicodeString ListOfPossibleTransitions;
	hr = <b>CATAdpMaturityServices::GetStateAndPossibleTransitions</b>
      <b>						</b>(oAdpID,CurrentState,
      						ListOfPossibleTransitions);
...</pre>
    </td>
  </tr>
</table>

<p>The <code><b>Identificator</b></code> <code><b>oAdpID</b></code>, enables the
API to identify the component in the database whose Maturity/Transition
information is being sought. The&nbsp; Maturity Transition that we apply in the
next step is the first element of the list retrieved here. This list has all
possible maturity transitions that can be applied on the PLM Object from its
current state.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Apply a valid Maturity Transition on a Component loaded in the current session"></a>Apply a valid Maturity
    Transition on a PLM Object loaded in the&nbsp; session</h3>

<p>We now apply a Maturity Transition on the input component loaded in the&nbsp;
session.&nbsp;&nbsp;</p>

<table class="code" width="912" bgcolor="#C0C0C0">
  <tr>
    <td width="904">
      <pre>...	
	hr =<b> CATAdpMaturityServices::ApplyMaturityTransition</b>(oAdpID,
      					ListOfPossibleTransitions[1]);
      	if (E_FAIL == hr)
	{
		<b>CATError* pErr = CATError::CATGetLastError</b>(hr);
		if (NULL != pErr)
		{
		  <b>const</b> <b>char* ActualErrMsgID = pErr-&gt;GetMsgId();
		  const char* ExpectedErrMsgID(&quot;ERR_01_MATURITY&quot;);</b>
	
		  if (<b>0==strcmp(ExpectedErrMsgID,ActualErrMsgID)</b>)
		  {
		    cout &lt;&lt; &quot;Actual error returned is the same 
      				as the one expected&quot; &lt;&lt; endl;

		  } else 
		  {
		    <b>return 1</b>;
		  }
				
		} 
	} else
		<b>return 1</b>;
...</pre>
    </td>
  </tr>
</table>

<p>We can apply Maturity Transition only for components which are not loaded in
the&nbsp; session. Since the input component was loaded in session, <code><b>ApplyMaturityTransition</b></code>
is expected to return <code><b>FAILURE</b></code> in the code above.&nbsp;</p>

<p> Please note
that the transition applied is the first element of the list of possible
transitions we retrieved in the earlier step and not the one input by the user.
The reason is because user might input an invalid transition while the one we
retrieve from the list is necessarily a valid transition. Hence,&nbsp; inputs to
the <code><b>ApplyMaturityTransition</b></code> API being valid, one can be
assured that the only reason that it fails, in this case, is owing to the
component being loaded in the&nbsp; session.</p>
<p align="left">Moreover, it is also necessary to confirm that the Error Message
ID returned is the same as expected, so that the user takes an appropriate
corrective action in response.&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Unload component from current session using BAG"></a>Unload PLM 
Object from the&nbsp;Session using BAG</h3>

<p>In order to apply a Maturity Transition, we unload the input component from
the&nbsp; session.</p>

<table class="code" width="912" bgcolor="#C0C0C0">
  <tr>
    <td width="904">
      <pre><b>...</b>
<b>	CATOmbLifeCycleRootsBag Bag</b>;
	hr =<b> Bag.InsertRoot(poPLMComp)</b>;</pre>
      <pre>	hr = <b>Bag.RemoveAll()</b>;
...</pre>
    </td>
  </tr>
</table>

<p><code><b>BAG</b></code> provides us with the capability to gain control over
the lifecycle of the PLM Objects. So, all we need to do is to instantiate a <code><b>BAG</b></code>
object, insert our component in it and then empty the <code><b>BAG</b></code>.
This effectively unloads the component from the&nbsp; session, a pre-requisite
for successfully applying a Maturity Transition on a PLM Object.&nbsp;</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Apply Maturity Transition on Component not loaded in the current session"></a>Apply
    Maturity Transition on PLM Object not loaded in the Session</h3>

<p align="left">Having unloaded the component from the&nbsp; session, we now
proceed to apply the Maturity Transition, input by the user on it.</p>

<table class="code" width="912" bgcolor="#C0C0C0">
  <tr>
    <td width="904">
      <pre><b>...</b>
	<b>CATUnicodeString InputTransitionName</b>(iArgv[10]);
	hr = <b>CATAdpMaturityServices::ApplyMaturityTransition</b>(oAdpID,InputTransitionName);
...</pre>
    </td>
  </tr>
</table>

<p>We haven't checked for the validity of the <code><b>InputTransitionName</b></code>
argument. The &quot;<a href="#How">How to Launch</a>&quot; section recommends
steps which ensure the validity of the <code><b>InputTransitionName</b></code>
argument. Thus,
we expect the <code><b>ApplyMaturityTransition</b></code> API to always return <code><b>SUCCESS</b></code>.</p>

<p>If the API returns <code><b>SUCCESS</b></code>, we proceed to seek the new
Current State and the list of possible transitions from this new state, in the
step ahead.</p>

<script type="text/javascript">insertLinkToTop();</script>

<h3><a name="Seek Current State and possible Maturity Transitions from the new Current State"></a>Seek
    Current State and the possible Maturity Transitions from the New Current State</h3>

<p>Now since we could apply the Maturity Transition in the previous step, we
output the new Current State and the list of the possible transitions from this
new State here.</p>

<table class="code" width="912" bgcolor="#C0C0C0">
  <tr>
    <td width="904">
      <pre>...
	CATUnicodeString NewCurrentState;
	CATListOfCATUnicodeString ListOfNewPossibleTransitions;
	hr = <b>CATAdpMaturityServices::GetStateAndPossibleTransitions</b>(oAdpID,NewCurrentState,
      						       ListOfNewPossibleTransitions);
...</pre>
    </td>
  </tr>
</table>

<p align="left">The new Current State would be the one expected as a result of
the Maturity Transition we applied in the earlier step. Also the list of
possible transitions from the new current state will be different vis a vis the
list we retrieved earlier, since it corresponds to the new Current State.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code><b>CAAAdpMaturity</b></code> use case ends by simply closing the PLM
session. Since all PLM Use Cases&nbsp; necessarily conclude by closing the PLM
session, we have a dedicated article on this topic viz.&nbsp; &quot;<b>Creating a
Basic PLM Batch</b>&quot; [<a href="#References">1</a>].&nbsp;</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="InShort"></a>In Short</h2>

<p>The Use Case loads an input component in session and then proceeds to
retrieve its Identificator. It then seeks the Current State and the list of
possible Maturity transitions from the current state of the loaded
component.&nbsp; It then applies a valid Maturity Transition on the component
and demonstrates the failure, since Maturity cannot be applied to components
loaded in the&nbsp; session.</p>

<p>Thanks to BAG, we then unload the input component from the&nbsp; session.&nbsp; We now apply the maturity transition input by the user, on the
component and confirm its success by seeking the new Current State and the list
of possible transitions from the new state. The new Current State&nbsp; is the
one that is expected as a result of the Maturity Transition we applied last.
Also, the list of possible transitions from the new current state are different
from the list retrieved earlier.</p>

<p>Thus the input component evolves through a series of Maturity states
and&nbsp; each state has its own dedicated list of possible transitions for
further evolution.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="References"></a>References</h2>

<table>
    <tr>
    <td valign="top">[1]</td>
    <td>
    <a href="CAAAdpUcBasicBatch.htm">Creating
       a Basic PLM Batch</a></td>
    </tr>

    <tr>
    <td valign="top">[2]</td>
    <td>
    <a href="CAAAdpUcQueryOpen.htm">Querying, Expanding and Opening PLM Objects</a></td>
    </tr>

    <tr>
    <td valign="top">[3]</td>
    <td>
    <a href="CAAPlmTaCATIAdpPLMIdentificator.htm">Understanding
       PLM Object Identification</a></td>
    </tr>

    <tr>
    <td valign="top">[4]</td>
    <td>
       <a href="../CAADocUseCases/CAADocRunSample.htm">
       Building and Launching a CAA Use Case</a> </td>
    </tr>

</table>

<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
  <tr>
    <td valign="top">Version: <strong>1</strong>     [Nov 2006]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>


