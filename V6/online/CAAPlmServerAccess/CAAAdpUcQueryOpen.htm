<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Querying, Expanding and Opening PLM Object</title>
<script language="JavaScript" src="../CAADocJavaScript/submit.js">
		</script>
</head>

<body>
<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Querying, Expanding and Opening PLM Object</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h2>Abstract</h2>
      <p>This article shows how to retrieve and load PLM Objects in memory.
      <ul>
        <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
        <li><a href="#UseCase">The CAAAdpQueryOpen Use Case</a>
          <ul>
            <li><a href="#What">What Does CAAAdpQueryOpen Do</a></li>
            <li><a href="#How">How to Launch CAAAdpQueryOpen</a></li>
            <li><a href="#Where">Where to Find the CAAAdpQueryOpen Code</a></li>
          </ul>
        <li><a href="#Step">Step-by-Step</a></li>
		<li><a href="#InShort">In Short</a></li>
		<li><a href="#References">References</a></li>
      </ul>
</table>
<!---------------------------------comment------------------------------------->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how PLM Objects can be queried and 
loaded in memory. You will learn how to search for a PLM Object given its PLM type along 
with its identifying attributes (i.e. belonging to its identifier set) and how to 
load it in memory.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="UseCase"></a>The CAAAdpQueryOpen Use Case</h2>
<p>CAAAdpQueryOpen is a use case of the CAAPLMClientAdapter.edu framework that
illustrates the CATPLMIntegrationAccess framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="What"></a>What Does CAAAdpQueryOpen Do</h3>
<p>CAAAdpQueryOpen requires ten input arguments. The first five are related to the connection and described in the Basic Batch 
use case [<a href="#References">2</a>]. The other five correspond to the PLM 
Object that must be looked 
up, of which the first three describe the component type whereas the last two 
describe the component itself.<p><a name="Table1">Table 1</a>. The input arguments of CAAAdpQueryOpen<br>
<table class="border1"  id="table13" >
  <tr>
    <th><b>Repository</b></th>
     <td><script type="text/javascript">insertRepository();</script></td>
  </tr>
  <tr>
     <th><b>Server</b></th>
    <td>The name and port of the server as <i>name</i>:<i>port_number</i></td>
  </tr>
  <tr>
    <th ><b>User</b></th>
    <td>The user name</td>
  </tr>
  <tr>
    <th ><b>Password</b></th>
    <td >The user password to authenticate the user</td>
  </tr>
  <tr>

    <th><b>SecurityCtx</b></th>
    <td>A string representing the security context (Role.Organization.Project). 
    Choose a role to access data&nbsp; </td>
  </tr>
    <tr>
    <th>PLMType</th>
    <td>A PLM Type</td>
  </tr>  
	<tr>
  <th> <b>PLM_ExternalID</b> </th>
			<td>The <code><b>PLM_ExternalID</b></code> of a PLM Reference or PLM 
            Representation Reference be browsed</td>
		</tr>
		<tr>
			<th> <b>V_version</b></th>
			<td>The <code><b>V_version</b></code> of a PLM Reference or PLM 
            Representation Reference</td>

  </tr>
</table>


</center>
<p>The use case is made as generic as possible: it can search for any Reference 
or Representation Reference . The 
PLM type of the queriable elements is defined.</p>
<p>CAAAdpQueryOpen is a batch use case and produces the following output:<p>The 
first lines correspond to 
the creation of the PLM session and are described in the Basic Batch Use Case 
[<a href="#References">2</a>].</p>
<table class="code" id="table1">
  <tr>
    <td>
      <pre>CAAAdpOpenQuery started
  Connection parameters set
  Initializing session with:
    Repository = PLM1
    Server = ...
    User = ...
    Password = *
    SecurityCtx = ...
  PLM Session initialized
...</pre>
    </td>
  </tr>
</table>
<p>The rest of the output shows that the PLM type retrieved, before the query is issued. Finally the component is found and opened.</p>
<table class="code" id="table9">
  <tr>
    <td>
      <pre>...
  Success CATCkePLMNavPublicAccessServices ::RetrieveKnowledgeType non custo type  VPMReference
  Query succeeded
   Unique Key is :IDSET {BASETYPE=PLMProductDS PLM_ExternalID=CAAAdpQueryOpen V_version=--- }  

	 Unicity Guranteed
   The input PLM component exists in database
   
  Found PLM_ExternalID:CAAAdpQueryOpen, V_version---
  We are trying to open the found component...
  
  PLM Comp unloaded from current session
  PLM session closed
  CAAAdpOpenQuery ended</pre>
    </td>
  </tr>
</table>
<p>The use case will show how to use the <b>CATAdpDictionaryServices</b>, <b>
CATAdpPLMQueryServices</b> 
classes .</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h3><a name="How"></a>How to Launch CAAAdpQueryOpen</h3>
<p>To launch CAAAdpQueryOpen , you will need to set up the build time environment,
then compile CAAAdpQueryOpen along with its prerequisites, set up the run time
environment and then execute the use case [<a href="#References">1</a>].</p>
<table class="code" id="table3">
  <tr>
    <td style="border-style: dashed; border-width: 1px">
      <pre>mkrun -c<i> &quot;</i>CAAAdpQueryOpen<i> Repository</i> <i>Server User</i> <i>Password</i> <i>SecurityCtx</i> <i>PLMType</i> <i>PLMExternal_ID</i> <i>V_version</i>&quot;</pre>
    </td>
  </tr>
</table>
<p>For a description of the arguments, please refer to <a href="#Table1">Table 
1</a>. You can directly execute this use case if you know how to locate your own 
component, i.e. its PLMType and its two attributes: PLMExternal_ID and V_version. If not, you can import a 3D XML file supplied in the 
CAAPLMClientAdapter.edu framework:<br>
</p>
<table id="table10">
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter.edu\InputData\CAAAdpQueryOpen.3dxml</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is the directory where the CAA CD-ROM
is installed.</p>
<p>Please refer to document [<a href="#References">1</a>] for how to import such a 3D
XML file in your PLM 
repository. </p>
<p>After a 3D XML file is imported, you can run the use case with arguments 6 to 
8 exactly as: <b>&lt;PLMType&gt; &lt;PLM External ID&gt; ---</b></p>
<script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->

<h3><a name="Where"></a>Where to Find the CAAAdpQueryOpen Code</h3>
<p>The CAAAdpQueryOpen use case is made of a single file located in
the CAAAdpQueryOpen.m module of the CAAPLMClientAdapter.edu framework:</p>
<table>
  <tr>
    <td><code>InstallRootDirectory\CAADoc\CAAPLMClientAdapter.edu\CAAAdpQueryOpen.m\</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code>  [<a href="#References">1</a>] is the directory where the CAA CD-ROM
is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical parts in CAAAdpQueryOpen. The prolog and epilog parts, 
which correspond to 
Creating/Closing a PLM session are already described in another document [<a href="#References">2</a>]. We 
will only focus on the four steps leading to query a component and 
open it:</p>
<ol>
  <li><a href="#Step4">Parsing the input arguments</a></li>
   	<li><a href="#Step2">Finding a component using its identifying attributes</a></li>
	<li><a href="#Step3">Opening the component</a><br>
	</li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->

<h3><a name="Step4"></a>Parsing the input arguments</h3>
<p>The arguments 5 to 10 are the ones that apply to the component:</p>
<table class="code" id="table11">
  <tr>
    <td>
      <pre>...
	const char* iStrPLMType      = iargv[6];
	const char* comp_externalId  = iargv[7];
	const char* comp_version     = iargv[8];
...</pre>
    </td>
  </tr>
</table>
<p>The only missing parameter to make our query is the component type. </p>
<script type="text/javascript">insertLinkToTop();</script>

<!---------------------------------comment------------------------------------->

<h3><a name="Step2"></a>Finding the component with its identifying attributes</h3>
<p>The query is now possible with all the required parameters: the component 
modeler's type and its identifying attributes (input to the program). Please 
note that the identifying attributes used (<code>PLM_ExternalID</code> and
<code>V_version</code> in our case), might be different for other modeler and/or 
customizations.</p>
<table class="code">
  <tr>
    <td>
      <pre>...
      CATListOfCATString iListAttributeName ;	
      CATListOfCATUnicodeString iListAttributeValue ;

      CATUnicodeString iPLM_ExternalIDValue(iargv[7]);
      CATUnicodeString iV_versionValue(iargv[8]);
	
      iListAttributeName.Append("PLM_ExternalID");
      iListAttributeName.Append(CATCkePLMNavPublicServices::GetRevisionAttributeName(NULL_var).CastToCharPtr());
	
      iListAttributeValue.Append(iPLM_ExternalIDValue);
      iListAttributeValue.Append(iV_versionValue);
	
       CATIAdpPLMIdentificator* opiIDComp = NULL;
     	
     	hr = ::CAARetrieveIDofUniquePLMObject (iListAttributeName,iListAttributeValue,														
					   iStrPLMType,opiIDComp);
...</pre>
    </td>
  </tr>
</table>
<p>A successful return code only indicates that the query has been executed.
CAARetrieveIDofUniquePLMObject returns S_OK, only if it returns 
a valid pointer, opiIDComp. </p>
<h3><a name="Step3"></a>Opening the component</h3>
<p>The component is loaded with the <em>CATAdpOpener</em> class.</p>
 <pre class="code">
 ...
  <strong>CATOmbLifeCycleRootsBag</strong> Bag;
  <strong>CATAdpOpener</strong> opener(Bag);

  CATIPLMComponent *piCompOnPLMId = NULL;
  hr = opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMComponent,(void**) &amp; piCompOnPLMId);	
...</pre>
<p>In this use case the PLM Reference is loading and expanding with the default 
parameter of the <em>CATAdpOpener</em> class.(Default values Corresponds to open 
in Authoring mode) . It means that all 
the structure is loaded from top to the leaves ,all the 6 PLM core objects. </p>
<p>We can use the same opener instance if the PLM object to open is a PLM 
Representation reference since the default parameter of the <em>CATAdpOpener</em> 
class does not affect the loading of a PLM Representation reference. For 
Detailed description about Opening PLM Component refer to
<a href="CAAAdpTaSaveOpenMigration.htm">New API for Opening and Saving PLM 
Object </a></p>
<p>The <code>CompleteAndOpen</code> method does the open ( and expand for PLM 
Reference), and adds the newly opened root objet in the input bag [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<h3><a name="Epilog"></a>Epilog</h3>
<p>Once you don't need anymore the opened PLM Object, you have to remove it from 
the bag. </p>
 <pre class="code">
 ... 
hr = Bag.<strong>RemoveRoot</strong>(piCompOnPLMId);
...</pre>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="InShort"></a>In Short</h2>
<p>We have seen how to query a component given its modeler's type and 
identifying attributes, and then open it.<script type="text/javascript">insertLinkToTop();</script>
<!---------------------------------comment------------------------------------->
<h2><a name="References"></a>References</h2>

<table>
     <tr>
     <td valign="top">[1]</td>
     <td>
     <a href="../CAADocUseCases/CAADocRunSample.htm">Building
      and Launching a CAA Use Case</a></td>
     </tr>

     <tr>
     <td valign="top">[2]</td>
     <td>
     <a href="CAAAdpUcBasicBatch.htm">Creating a PLM session</a></td>
     </tr>

     <tr>
		<td>[3]</td>
		<td><a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm')">Understanding PLM Component Life Cycle</a></td>
	</tr>

     </table>

<!---------------------------------comment------------------------------------->
<h2><a name="History"></a>History</h2>
<table >
<tr>
    <td valign="top">Version: <strong>3 </strong>[Mar 2011]</td>
    <td valign="top">Opener introduction</td>
  </tr>

  <tr>
    <td valign="top">Version: <strong>2</strong> [Mar 2006]</td>
    <td valign="top">Update</td>
  </tr>
  <tr>
    <td valign="top">Version: <strong>1</strong> [Jan 2006]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
<script type="text/javascript">insertLinkToTop();</script>  </tr>
</table>

<!---------------------------------comment------------------------------------->
<script type="text/javascript">insertCopyright();</script>
</body>

</html>

