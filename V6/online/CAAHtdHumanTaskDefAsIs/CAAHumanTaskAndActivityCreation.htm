<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Title</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1>Creating Human Tasks and Activities</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the DELHumanTaskDefAsIsItf use case. This use 
		case explains how to create and manage the human task and human activities.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The DELHumanTaskDefAsIs Use Case</a>
				<ul>
					<li><a href="#What">What Does DELHumanTaskDefAsIs Do</a></li>
					<li><a href="#How">How to Launch CAAHumanTaskAndActivityCreation</a></li>
					<li><a href="#Where">Where to Find the DELHumanTaskDefAsIs Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to familiarize the user with the APIs 
meant for creating and managing human tasks and activities. Listed below are the 
topics that a user gets an introduction to, through this use case:</p>
<ul>
	<li>Retrieve human resource from given PPR context and create new human task.</li>
	<li>Create new activities like GoTo and Gesture under the newly created human 
		task.</li>
	<li>Populate the newly created human activities with appropriate data attributes.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAHumanTaskAndActivityCreation Use Case</h2>
<p>CAAHumanTaskAndActivityCreation is a use case of the CAAHumanTaskDefAsIs.edu 
framework that illustrates DELHumanTaskDefAsIs framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAHumanTaskAndActivityCreation Do</h3>
<p>The input data for this use case is a PPR context that has a human resource. 
This human resource has some human tasks and activities that are already created.</p>
<p>The use case loads the PPR data, as the one shown in the fig below (Fig.1).</p>
<p><img alt="Fig.1 Input PPR context data" src="img5.gif"/></p>
<p>Note that the human resource has a task (TemplateTask) that contains 4 activities 
(1- GOTO:SideStep, 2 - GOTO:BackWalk, 3 - GOTO:ForwardWalk, 4 - GESTURE). The use 
case execution results in the creation of new human task (CAA_HumanTask) and creation 
of two activities under the task (1 - CAA_GoTo, 2 - CAA_Gesture). The first activity 
is populated from the attributes of the first activity inside the TemplateTask and 
the second one with the attributes from the last activity inside the TemplateTask.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAHumanTaskAndActivityCreation</h3>
<p>To launch CAAHumanTaskAndActivityCreation, you will need to set up the build 
time environment, then compile CAAHumanTaskAndActivityCreation along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p>mkrun -c &quot;<em>CAAHumanTaskAndActivityCreation Repository Server User Password 
SecurityCtx PLMType ExistingProdRef_PLM_ExtID ExistingProdRef_version Worker Id Task Id</em>&quot; </p>
<p>where:</p>
<table style="width: 100%">
	<tr>
		<td class="style1" style="width: 31px">Position&nbsp;</td>
		<td style="width: 79px" class="style1">Name</td>
		<td class="style1" style="width: 653px">Description</td>
	</tr>
	<tr>
		<td style="width: 31px">1&nbsp;</td>
		<td style="width: 79px">Repository</td>
		<td style="width: 653px">PLM1</td>
	</tr>
	<tr>
		<td style="width: 31px">2&nbsp;</td>
		<td style="width: 79px">Server</td>
		<td style="width: 653px">The server name:ServerPort/rootURI</td>
	</tr>
	<tr>
		<td style="width: 31px">3&nbsp;</td>
		<td style="width: 79px">User</td>
		<td style="width: 653px">The user name</td>
	</tr>
	<tr>
		<td style="width: 31px">4&nbsp;</td>
		<td style="width: 79px">Password</td>
		<td style="width: 653px">The user password to authenticate the user</td>
	</tr>
	<tr>
		<td style="width: 31px">5&nbsp;</td>
		<td style="width: 79px">SecurityCtx</td>
		<td style="width: 653px">A string resembling the security context (Role.Organization.Project). 
		The role to be established during the session. It does not require any 
		particular privilege since the use case only lists all available 
		environments.</td>
	</tr>
    <tr>
		<td style="width: 31px">5&nbsp;</td>
		<td style="width: 79px">PLMType</td>
		<td style="width: 653px">A string resembling the PLMType. </td>
	</tr>
	<tr>
		<td style="width: 31px">6&nbsp;</td>
		<td style="width: 79px">ExistingProdRef_PLM_ExtID</td>
		<td style="width: 653px">Name of PPR context PLM reference (use name of the PPR).
        Open Properties from contextual menu of CAAData and find name of the PPR.</td>
	</tr>
    <tr>
		<td style="width: 31px">6&nbsp;</td>
		<td style="width: 79px">ExistingProdRef_version</td>
		<td style="width: 653px">A string resembling the Product version(use &quot;A&quot;).</td>
	</tr>
	<tr>
		<td style="width: 31px">7&nbsp;</td>
		<td style="width: 79px">Worker Id</td>
		<td style="width: 653px">The identifier of the human resource reference (use name of the Product).
        Open Properties from contextual menu of CAAWorker and find name of the Prd. </td>
	</tr>
	<tr>
		<td style="width: 31px">8&nbsp;</td>
		<td style="width: 79px">Task Id</td>
		<td style="width: 653px">Identifier of the of existing human task that 
		needs to be browsed (use &quot;TemplateTask&quot;)</td>
	</tr>
</table>
<p><br>
<p>*The input data is retrieved by importing the HTD_CAAData.3dxml file from the 
CAADELHumanTaskDefAsIs.edu framework.</p>
<p>InstallRootFolder\CAADoc\CAADELHumanTaskDefAsIs.edu\InputData\HTD_CAAData.3dxml</p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the DELHumanTaskDefAsIs Code</h3>
<p>The CAAHtdDELHumanTaskDefAsIs use case is made of single file located in the 
CAAHtdDELHumanTaskDefAsIs.m module of the CAAHumanTaskDefAsIs.edu framework:
<code>InstallRootFolder\CAADoc\CAAHumanTaskDefAsIs.edu\CAAHtdDELHumanTaskDefAsIs.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The <code>PLM_ExternalID</code> attribute value of the imported model is typically 
of the format &quot;<a><code><strong>YourPrefix + CAAPstBrowsingProductModel_Root</strong></code></a>&quot;, 
where <a><code><strong>YourPrefix</strong></code></a> is the string provided as 
prefix, while importing a 3D XML file to DELMIA.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAHumanTaskAndActivityCreation:</p>
<ol>
	<li><a href="#Step1">Creating the PLM Session</a></li>
	<li><a href="#Step2">Retrieving in this PPR Context the Human Resource and Creating 
		a New Human Task</a></li>
	<li><a href="#Step3">Creating GOTO Activity under the Human Task</a></li>
	<li><a href="#Step4">Creating GESTURE Activity under the Human Task</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the PLM Session</h3>
<p>The CAAHumanTaskAndActivityCreation use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we create a session &amp; connect to Repository. There are other 
parameters as well, details of which can be found in the &quot;Connecting to V6 
Server&quot; use case article [<a href="#References">2</a>]. This article primarily 
deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving in this PPR Context the Human Resource and Creating 
a New Human Task</h3>
<p>To get the root reference (&quot;CAAData&quot;), use CATIPLMNavOccurence</p>
<pre class="code">...
CATIPLMNavOccurrence_var spNavOccur = pPPRContext;
if(spNavOccur == NULL_var)
{
CATIPLMNavReference_var spIPLMNavReferenceStation(pPPRContext);
 if(!!spIPLMNavReferenceStation)
 {
    CATIPrdOccurrenceMngt * piOccMgt = NULL;
    ::CATPrdGetOccurrenceMngt(piOccMgt);
    if(!!piOccMgt)
    {
      hr = piOccMgt-&gt;GetOrCreateRootOccurrence(spIPLMNavReferenceStation, spNavOccur);
      piOccMgt-&gt;Release(); piOccMgt = NULL;
    }
  }
}
if(!!spNavOccur)
{
  pPPRContext-&gt;Release; pPPRContext = NULL;
  hr = spNavOccur-&gt;QueryInterface(IID_CATBaseUnknown,(void**)&amp;pPPRContext);
}
...</pre>
<p>From the root context, get the first &quot;organizational&quot; resource (&quot;CAALine&quot;)</p>
<pre class="code">...
CATIPLMNavOccurrence_var spNavOccur = spPPRCtx;
if(!!spNavOccur)
{
  CATListPtrCATIPLMNavOccurrence listOfChildren;
  rc = spNavOccur-&gt;ListChildren(listOfChildren);
  int iChildOfPPRCtx = listOfChildren.Size();
  spLine = NULL_var;
  if(iChildOfPPRCtx != 2)
  {
    rc = E_FAIL;
  }    
  spLine = listOfChildren[1];
  if(NULL_var != spLine)
  {
    for(int kk = 1; kk &lt;= iChildOfPPRCtx; kk++)
    {
      CATIPLMNavOccurrence *pIPLMNavOccur = listOfChildren[kk];
      CATSysReleasePtr(pIPLMNavOccur);
    }
  } 
}
...</pre>
<p>From the first organizational resource (spLine in the above code snippet), use 
the below sample code twice to get the human resource. (first get the CAAStation 
from CAALine and next get the CAAWorker from CAAStation).</p>
<pre class="code">...
CATIPLMNavOccurrence_var spNavOccurr = spLine;
if(!!spNavOccurr)
{
  CATListPtrCATIPLMNavOccurrence listOfChildren;
  rc = spNavOccurr-&gt;ListChildren(listOfChildren);
  int nChild = listOfChildren.Size();
  spStation = listOfChildren[1];
  if(NULL_var != spStation)
  rc = S_OK;
  for(int kk = 1; kk &lt;= nChild; kk++)
  {
    CATIPLMNavOccurrence *pIPLMNavOccur = listOfChildren[kk];
    CATSysReleasePtr(pIPLMNavOccur);
  } 
}
...</pre>
<p>After retrieving the human resource, query for DELIHTDHumanTaskFactory on the 
human resource and then create a new human task.</p>
<pre class="code">...
DELIHTDHumanTaskFactory *pHTDTaskFactory = NULL;

if(NULL_var != spWorker)
result = spWorker-&gt;QueryInterface(IID_DELIHTDHumanTaskFactory, (void**)&amp;pHTDTaskFactory);
...
CATBaseUnknown *pNewTask = NULL;
CATUnicodeString sTaskName = &quot;CAA_HumanTask&quot;;
result = pHTDTaskFactory-&gt;CreateHumanTask(sTaskName, pNewTask);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating GOTO Activity under the Human Task</h3>
<p>New GOTO activity is created under the newly created human task using the DELIHTDHumanTask</p>
<pre class="code">...
CATBaseUnknown *pNewGoToAct = NULL;
CATUnicodeString sActType = &quot;GoTo&quot;;
CATUnicodeString sActName = &quot;CAA_GotTo&quot;;
rc = spINewTask-&gt;CreateMacroActivity(pNewGoToAct, sActType, sActName);
...</pre>
<p>Now, populate the GOTO activity with attributes</p>
<pre class="code">...
rc = pINewGoTo-&gt;SetHumanLocation(pNewHL, ispContext);
...
rc = pNewHL-&gt;SetRelativePosition(pos);
rc = pNewHL-&gt;SetOriented(bOriented);
...
rc = pNewHL-&gt;SetName(sName);
...
DELIHTDGoToMotionElement::HTDWalkTemplate walktemplate=DELIHTDGoToMotionElement::HTD_WalkForward;
rc = pINewGoTo-&gt;SetWalkTemplate(walktemplate);
...
DELIHTDGoToMotionElement::HTDWalkMotionBasis motionbasis=DELIHTDGoToMotionElement::HTD_Speed;
rc = pINewGoTo-&gt;SetMotionBasis(motionbasis);
...
rc = pINewGoTo-&gt;SetSpeed(dSpeed);
...
DELIHTDGoToMotionElement::HTDWalkStride stride=DELIHTDGoToMotionElement::HTD_ShortStride;
DELIHTDGoToMotionElement::HTDWalkArmMovement swing=DELIHTDGoToMotionElement::HTD_SwingBothArms;
DELIHTDGoToMotionElement::HTDWalkBodyPose pose=DELIHTDGoToMotionElement::HTD_CurrentUpperBodyPosture;
DELIHTDGoToMotionElement::HTDWalkPathContinuity cont=DELIHTDGoToMotionElement::HTD_Point;
rc = pINewGoTo-&gt;SetWalkAttributes(stride, swing, pose, cont);
...
CATListOfDouble curvepts;
...
rc = pINewGoTo-&gt;SetWalkCurveDefinitionPoints(curvepts);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating GESTURE Activity under the Human Task</h3>
<p>New GESTURE activity is created under the newly created human task using DELIHTDHumanTask.</p>
<pre class="code">...
CATBaseUnknown *pNewGesture = NULL;
CATUnicodeString sActType = &quot;Gesture&quot;;
CATUnicodeString sActName = &quot;CAA_Gesture&quot;;
rc = spINewTask-&gt;CreateMacroActivity(pNewGesture, sActType, sActName);
...</pre>
<p>Now, populate the Gesture activity with attributes:</p>
<pre class="code">...
rc = pINewGesture-&gt;SetMotionBasis(motionbasis);
...
rc = pINewGesture-&gt;SetGestureDuration(dTime);
rc = pINewGesture-&gt;SetName(sName);
...
CATListOfDouble doflist;
...
rc = pINewGesture-&gt;InsertPosture(doflist, ii);
...
rc = pINewGesture-&gt;PersistActivity();
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In short this article provides an example on how to manage human tasks and activities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="#" onclick="CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
		Connecting to V6 Server</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
