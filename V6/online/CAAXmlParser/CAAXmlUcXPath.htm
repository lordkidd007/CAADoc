<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Navigating the DOM Tree with XPath Expressions</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Navigating the DOM Tree with XPath Expressions</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to use the XPath API to create XPath expressions 
		to extract meaningful parts of a DOM tree.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAXMLXPath Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAXMLXPath Do</a></li>
					<li><a href="#How">How to Launch CAAXMLXPath</a></li>
					<li><a href="#Where">Where to Find the CAAXMLXPath Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This article shows you how to create a DOM parser and use it to create a DOM 
document from an XML file using a DOM parser. You will then learn how to obtain 
an XPath factory, associate it with a context node, and use the factory to create 
XPath expressions which select multiple nodes. Finally the article shows how to 
evaluate the expression and process its result set. The article also shows how to 
convert an arbitrary DOM node back to XML, a technique which is used to display 
the results.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAXMLXPath Use Case</h2>
<p>The CAAXMLXPath Use Case is a use case of the CAAXMLParser.edu framework that 
illustrates XMLParserItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAXMLXPath Do</h3>
<p>This use case parses an existing XML file with a DOM parser and selects a subset 
of the nodes of the resulting DOM tree using an XPath expression. The selected nodes 
are then dumped to the console, which should result in the following output:</p>
<pre class="code">Result[0]=&lt;part name=&quot;engine&quot; quantity=&quot;1&quot;/&gt;
Result[1]=&lt;part name=&quot;body&quot; quantity=&quot;1&quot;/&gt;
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAXMLXPath</h3>
<p>To launch CAAXMLXPath, you will need to set up the build time environment, then 
compile CAAXMLXPath along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The use case should be launched as follows from the command line:</p>
<pre>CAAXMLXPath &lt;filepath&gt;</pre>
<p>where <code>&lt;filepath&gt;</code> is the path of the XML file, which will be 
parsed.</p>
<p>A sample XML file is provided with the use case. To use it, launch the following 
command from the command line:</p>
<p><code>CAAXMLXPath InstallRoot\OS\resources\xml\CAAXMLXPath\xpath.xml</code></p>
<p>where <code>InstallRoot</code> is the folder in which you have installed the 
run time part or the product line and <code>OS</code> is the directory containing 
the installed code [<a href="#References">1</a>].</p>
<p>For clarity, the sample file used is reproduced here:</p>
<pre class="code">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;car&gt;
	&lt;!--list of parts for a convertible minivan--&gt;
	&lt;part name=&quot;seat&quot; quantity=&quot;8&quot;/&gt;
	&lt;part name=&quot;wheel&quot; quantity=&quot;1&quot;/&gt;
	&lt;part name=&quot;engine&quot; quantity=&quot;1&quot;/&gt;
	&lt;part name=&quot;body&quot; quantity=&quot;1&quot;/&gt;
&lt;/car&gt;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAXMLXPath Code</h3>
<p>The CAAXMLXPath use case is made of several classes located in the CAAXMLXPath.m 
module of the CAAXMLParser.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAXMLParser.edu\CAAXMLXPath.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a DOM parser, parse a file, create the xpath expression, evaluate it 
and display the results there are eight main steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Create the DOM Component</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Prepare the Options to Pass to the Builder for Reading</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Create a DOM Document from the Input File With the Parser</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Obtain the XPath Factory for the DOM Document Node</td>
	</tr>
	<tr>
		<td><a href="#Step5">5</a></td>
		<td>Create the XPath Expression</td>
	</tr>
	<tr>
		<td><a href="#Step6">6</a></td>
		<td>Evaluate the XPath Expression</td>
	</tr>
	<tr>
		<td><a href="#Step7">7</a></td>
		<td>Iterate Over the Results and Display Them</td>
	</tr>
	<tr>
		<td><a href="#Step8">8</a></td>
		<td>Manage Errors</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Create the DOM Component</h3>
<pre class="code">...
CATIXMLDOMDocumentBuilder_var builder;
HRESULT hr = <strong>::CreateCATIXMLDOMDocumentBuilder</strong>(builder);
...</pre>
<p>The first step to work with DOM is to instantiate the DOM component. The DOM 
component can be created by calling the <code>CreateCATIXMLDOMDocumentBuilder</code> 
global function. This function returns a handler on the <em>CATIXMLDOMDocumentBuilder</em> 
interface, which is the main interface for the DOM component. Using this interface 
you will be able to create documents (either by parsing an existing XML file, as 
here, or from scratch) and save existing documents to disk. This call automatically 
chooses the XML parser component which is best suited for the platform where the 
code is running.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Prepare the Options to Pass to the Builder for Reading</h3>
<pre class="code">...
CATListOfCATUnicodeString readOptions;
readOptions.Append(<strong>&quot;CATDoValidation&quot;</strong>);
CATListOfCATUnicodeString readOptionValues;
readOptionValues.Append(<strong>&quot;false&quot;</strong>);
...</pre>
<p>Options are passed to the DOM parser using two <em>CATListOfCATUnicodeStrings</em>. 
The first one contains the option names, the second one contains the option values. 
By default, DOM parsers are validating. Since the input XML document does not specify 
a grammar (DTD or schema), validation must be disabled. This is accomplished by 
setting the <code>&quot;CATDoValidation&quot;</code> option to <code>false</code>. 
For a discussion of non-validating parsers versus validating parsers and how to 
choose which parser to instantiate, please see <a href="#Ref3">[3]</a> and
<a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Create a DOM Document from the Input File With the Parser</h3>
<pre class="code">...
CATIDOMDocument_var document;
hr = builder-&gt;<strong>Parse</strong>(inputFile, document, readOptions, readOptionValues);
...</pre>
<p>To parse an XML file, invoke the <code>Parse</code> method from the <em>CATIXMLDOMDocumentBuilder</em> 
interface. Upon success, the method returns the root node of the DOM tree produced 
by the parse operation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Obtain the XPath Factory for the DOM Document Node</h3>
<pre class="code">...
<strong>CATIXMLXPathFactory_var</strong> xpathFactory = document;
...</pre>
<p>This line accomplishes two tasks in one operation. In instantiate the XPath factory, 
which you will later be able to use to create XPath expressions. It also specifies 
the context node against which all expressions instantiated by this factory will 
be evaluated. For an introduction to the XPath language and XPath expressions, please 
see <a href="#Ref5">[5]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Create the XPath Expression</h3>
<pre class="code">...
CATIXMLXPathExpression_var expr;
hr = xpathFactory-&gt;<strong>CreateExpression</strong>(&quot;/car/part[position() &gt; 2]&quot;, expr);
...</pre>
<p>This line uses the XPath factory to create an XPath expression. The XPath expression 
starts at the document node, which is the XPath context node we have specified in 
the previous section. It takes a first step to retrieve all the <code>car</code> 
child elements under this node, which yields one <code>car</code> node. Then it 
takes a second step to retrieve all the <code>part</code> child elements from this 
first node set. This second step is modified by a predicate, specified in the form 
of a boolean expression. The expression evaluates to true if the positional index 
of current node with respect to its siblings is greater than 2 (the first sibling 
has an index equal to 1). This selects the third and fourth <code>part</code> elements 
of the document.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Evaluate the XPath Expression</h3>
<pre class="code">...
CATIDOMNodeList_var nodeList;
hr = expr-&gt;<strong>EvaluateAsNodeList</strong>(nodeList);
...</pre>
<p>To evaluate an XPath expression, you must first know its type. The V6 XPath infrastructure 
supports XPath expression which evaluate either to a single node or to a list of 
nodes.</p>
<ul>
	<li>For expression which evaluate as a single DOM node, use the <code>EvaluateAsNode</code> 
		member function.</li>
	<li>For expression which evaluate as a DOM node list, use the <code>EvaluateAsNodeList</code> 
		member function.</li>
</ul>
<p>For more details on supported XPath expressions types, please see
<a href="#Ref5">[5]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Iterate Over the Results and Display Them</h3>
<pre class="code">...
unsigned int length = 0;
hr = nodeList-&gt;<strong>GetLength</strong>(length);
...
for (unsigned int i = 0; i &lt; length; i++) {
	CATIDOMElement_var element;
	hr = nodeList-&gt;<strong>Item</strong>(i, element);
	...
}
</pre>
<p>The previous lines show the structure of the loop which is used to iterate over 
the results set. The result set is returned as a <code>CATIDOMNodeList</code> handler, 
a data type which is familiar to DOM users as it is also used by other DOM methods 
such as <code>GetElementByTagName</code>. To iterate over the result set, one must 
first retrieve the number of results in the set using <code>GetLength</code> method, 
then using a <code>for</code> loop, get each individual result using the <code>Item</code> 
method.</p>
<pre class="code">...
CATUnicodeString resultAsText;
hr = builder-&gt;<strong>Write</strong>(element, resultAsText);
cout &lt;&lt; &quot;Result[&quot; &lt;&lt; i &lt;&lt; &quot;]=&quot; &lt;&lt; resultAsText.CastToCharPtr() &lt;&lt; endl;
...
</pre>
<p>This code serializes the resulting <code>part</code> DOM element as an XML unicode 
string so that it can be printed to standard output. This is done by calling the
<code>Write</code> method and passing it the element to serialize. The printing 
uses C++ iostreams, and converts the Unicode string to the native encoding so that 
it can be printed to the console (a lot of consoles do not support printing Unicode 
directly).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Manage Errors</h3>
<p>The XMLParserItf framework uses the <code>HRESULT</code> / <code>CATError</code> 
mechanism to manage errors. Make sure to use the <code>CATError::CATGetLastError</code> 
to obtain all the available error diagnostics when using XMLParserItf. More information 
about error management is available here <a href="#Ref2">[2]</a> and
<a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows you how to create and evaluate XPath expressions to make 
your DOM developments more productive.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="Ref1"></a>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td><a name="Ref2"></a>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidErrors.htm">
		Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td><a name="Ref3"></a>[3]</td>
		<td><a href="CAAXmlTaOverview.htm">Using XML</a></td>
	</tr>
	<tr>
		<td><a name="Ref4"></a>[4]</td>
		<td><a href="CAAXmlTaTipsAndTricks.htm">XML Tips and Tricks</a></td>
	</tr>
	<tr>
		<td><a name="Ref5"></a>[5]</td>
		<td><a href="CAAXmlTaXPath.htm">Using XPaths</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jan 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
