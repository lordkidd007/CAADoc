<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Generating XML Documents Efficiently</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Generating XML Documents Efficiently</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to generate XML documents using the XML writer 
		API.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAXMLWriter Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAXMLWriter Do</a></li>
					<li><a href="#How">How to Launch CAAXMLWriter</a></li>
					<li><a href="#Where">Where to Find the CAAXMLWriter Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This article shows how to generate XML documents using the XML writer API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAXMLWriter Use Case</h2>
<p>The CAAXMLWriter Use Case is a use case of the CAAXMLParser.edu framework that 
illustrates XMLParserItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAXMLWriter Do</h3>
<p>This use case generates a sample XHTML document with an embedded MathML document.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAXMLWriter</h3>
<p>To launch CAAXMLWriter, you will need to set up the build time environment, then 
compile CAAXMLWriter along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The use case should be launched as follows from the command line:</p>
<pre>CAAXMLWriter &lt;filepath&gt;</pre>
<p>where <code>&lt;filepath&gt;</code> is the path of the file, which will contain 
the generated XML.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAXMLWriter Code</h3>
<p>The CAAXMLWriter use case is made of one class located in the CAAXMLWriter.m 
module of the CAAXMLParser.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAXMLParser.edu\CAAXMLWriter.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the directory 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a writer object and use it to generate an XML document, there are seven 
main steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Instantiate a Factory</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Use the Factory to Create an Output Source</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Use the Factory to Create a Writer</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Generate the XML Declaration</td>
	</tr>
	<tr>
		<td><a href="#Step5">5</a></td>
		<td>Generate the XML Content</td>
	</tr>
	<tr>
		<td><a href="#Step6">6</a></td>
		<td>Close the Generated Document</td>
	</tr>
	<tr>
		<td><a href="#Step7">7</a></td>
		<td>Manage Errors</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Instantiate a Factory</h3>
<pre class="code">...
CATIXMLPPFactory_var factory;
HRESULT hr = CreateCATIXMLPPFactory(factory);
...</pre>
<p>To work with the XML writer API, you need to instantiate the corresponding component. 
The XML writer component can be created by calling the <code>CreateCATIXMLPPFactory</code> 
global function. This function returns a handler on the <code>CATIXMLPPFactory</code> 
interface, which is the main interface for the XML writer component. Using this 
interface you will be able to create XML writers and to create output sources where 
the generated XML will be stored.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Use the Factory to Create an Output Source</h3>
<pre class="code">...
CATIXMLPPOutputSource_var outputSource;;
hr = factory-&gt;CreateOutputSourceFromFile(outputFile, outputSource);
...</pre>
<p>The next step is to create an output source where the generated XML is stored.</p>
<ul>
	<li>To store XML in a file defined by its path, as in this use case, call the
		<code>CATIXMLPPFactory::CreateOutputSourceFromFile</code> method.</li>
	<li>To store XML in a memory buffer, instantiate the buffer (the <code>CATXMLPPMemoryBuffer</code> 
		class) and call the <code>CATIXMLPPFactory::CreateOutputSourceFromMemoryBuffer</code> 
		method.</li>
	<li>To store XML in your own output source, write an implementation of the
		<code>CATIXMLPPOutputSource</code> interface and go directly to step 3.</li>
</ul>
<p></p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Use the Factory to Create a Writer</h3>
<pre class="code">...
CATListOfCATUnicodeString options;
CATListOfCATUnicodeString optionValues;
options.Append(&quot;CATEncoding&quot;);
options.Append(&quot;CATSortAttributes&quot;);
options.Append(&quot;CATIndentation&quot;);
options.Append(&quot;CATIndentationCharacter&quot;);
optionValues.Append(&quot;UTF-8&quot;);
optionValues.Append(&quot;true&quot;);
optionValues.Append(&quot;2&quot;);
optionValues.Append(&quot; &quot;);
CATIXMLPPWriter_var writer;
hr = factory-&gt;CreateXMLWriter(outputSource, writer, options, optionValues);
...</pre>
<p>Create a writer object by calling the <code>CATIXMLPPFactory::CreateXMLWriter</code> 
method. The writer provides methods you can call to create your well-formed XML. 
It stores the XML in the specified writer. You can control the encoding and the 
formatting of the generated XML using a set of options. Options are passed to the 
writer using two <code>CATListOfCATUnicodeStrings</code>. The first one contains 
the option names, the second one contains the option values. In this case, the generated 
XML will be encoded in UTF-8, and indented using to space characters per nesting 
level.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Generate the XML Declaration</h3>
<pre class="code">...
hr = writer-&gt;WriteStartDocument();
...</pre>
<p>If you need a complete autonomous XML document, the first step is to call
<code>CATIXMLPPWriter::WriteStartDocument</code>. This will generate the XML declaration:
</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Generate the XML Content</h3>
<pre class="code">...
CATUnicodeString xhtmlUri = &quot;http://www.w3.org/1999/xhtml&quot;;
hr = writer-&gt;WriteStartElement(&quot;html&quot;, xhtmlUri, &quot;x&quot;);
...</pre>
<p>Create element start tags by calling the <code>CATIXMLPPWriter::WriteStartElement</code>. 
The call takes three parameters: </p>
<ol>
	<li>The element tag name.</li>
	<li>(Optional) If you want the XML writer API to manage and control XML namespaces 
		and prefixes, set the value of this parameter to the namespace URI of your 
		XML schema.</li>
	<li>(Optional) If you have opted for management and control of XML namespaces 
		by the XML writer API, specify the namespace prefix to use for this element. 
		If you create nested elements or attributes in the same namespace, you will 
		not have to specify this prefix again for each element as the XML writer 
		API will remember the association between the namespace URI and the prefix 
		and retrieve the correct prefix automatically.</li>
</ol>
<pre class="code">...
CATUnicodeString nsUri=&quot;http://www.w3.org/2000/xmlns/&quot;;
hr = writer-&gt;WriteAttribute(&quot;x&quot;, xhtmlUri, nsUri);
...</pre>
<p>You can specify attributes in the currently open start element tag by calling 
the <code>CATIXMLPPWriter::WriteAttribute</code> method. The code above writes the
<code>xmlns:x=&quot;http://www.w3.org/1999/xhtml&quot;</code> attribute. Note that 
you will need to specify prefix mapping attributes even if you have opted for management 
and control of XML namespaces by the XML writer API. The call to <code>CATIXMLPPWriter::WriteAttribute</code> 
takes four parameters: </p>
<ol>
	<li>The attribute name (<code>x</code> in our case)</li>
	<li>The attribute value (<code>http://www.w3.org/1999/xhtml</code> in our case)</li>
	<li>(Optional) If you want the XML writer API to manage and control XML namespaces 
		and prefixes, set the value of this parameter to the namespace URI of your 
		XML schema. (<code>http://www.w3.org/2000/xmlns/</code> in our case, since 
		we are defining a prefix mapping attribute. Prefix mapping attributes are 
		described in the <code>http://www.w3.org/2000/xmlns/</code> specification)</li>
	<li>(Optional) If you have opted for management and control of XML namespaces 
		by the XML writer API, specify the namespace prefix to use for this attribute. 
		(In our case, since the prefix is &quot;xmlns&quot;, we do not need to specify 
		it as the prefixes for the <code>http://www.w3.org/2000/xmlns/</code> are 
		fixed by the specification and known by the XML writer API)</li>
</ol>
<pre class="code">...
CATUnicodeString mathmlUri = &quot;http://www.w3.org/1998/Math/MathML&quot;;
hr = writer-&gt;WriteStartElement(&quot;math&quot;, mathmlUri, &quot;m&quot;);
...
hr = writer-&gt;WriteAttribute(&quot;m&quot;, mathmlUri, nsUri);
...
hr = writer-&gt;WriteStartElement(&quot;apply&quot;, mathmlUri);
...
hr = writer-&gt;WriteStartElement(&quot;log&quot;, mathmlUri);
...
hr = writer-&gt;WriteEndElement();
...</pre>
<p>Write other XML elements by calling <code>CATIXMLPPWriter::WriteStartElement</code> 
and <code>CATIXMLPPWriter::WriteAttribute</code>. Two consecutive calls to <code>
CATIXMLPPWriter::WriteStartElement</code> create two nested elements. Each call 
to <code>CATIXMLPPWriter::WriteStartElement</code> must be balanced by a call to
<code>CATIXMLPPWriter::WriteEndElement</code> to generate the end element tag. If 
this is not the case (missing calls to <code>CATIXMLPPWriter::WriteEndElement</code>, 
the writer API will generate the missing end element tags so that the resulting 
XML document is well formed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Close the Generated Document</h3>
<pre class="code">...
hr = writer-&gt;WriteEndDocument();
...</pre>
<p>To finalize the generated XML document, call the <code>CATIXMLPPWriter::WriteEndDocument</code> 
method. </p>
<p>If you chose to implement the <code>CATIXMLPPOutputSource</code> interface yourself 
to write XML directly to a custom output source you need to be aware of the lifecycle 
of the <code>CATIXMLPPOutputSource</code> implementations. These objects are meant 
to be very short-lived, so there should be no references to these objects aside 
from the mandatory one stemming from the <code>CATIXMLPPWriter</code> implementation. 
As soon the API user calls <code>CATIXMLPPWriter::WriteEndDocument</code>, the
<code>CATIXMLPPWriter</code> will remove its reference on the output source. If 
no other objects hold a reference on it, the destructor of the <code>CATIXMLPPOutputSource</code> 
implementation will be called. Calls to free resources (close file or socket descriptors, 
close database connections) should be made in this destructor. If other references 
to the <code>CATIXMLPPOutputSource</code> are made, the destructor of the object 
will not be called until these references persist, causing resource leakage.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Manage Errors</h3>
<p>The XMLParserItf framework uses the <code>HRESULT</code> / <code>CATError</code> 
mechanism to manage errors. Make sure to use the <code>CATError::CATGetLastError</code> 
to obtain all the available error diagnostics when using XMLParserItf. More information 
about error management is available here <a href="#Ref2">[2]</a> and
<a href="#Ref3">[3]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article shows how to generate XML documents using the XML writer API.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="Ref1"></a>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td><a name="Ref2"></a>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidErrors.htm">
		Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td><a name="Ref3"></a>[3]</td>
		<td><a href="CAAXmlTaTipsAndTricks.htm">XML Tips and Tricks</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
