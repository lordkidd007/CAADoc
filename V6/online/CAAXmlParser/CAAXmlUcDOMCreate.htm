<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating XML Documents with DOM</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating XML Documents with DOM</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a new DOM tree from scratch using the 
		DOM API and how to save it to disk as an XML file.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAXMLDOMCreate Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAXMLDOMCreate Do</a></li>
					<li><a href="#How">How to Launch CAAXMLDOMCreate</a></li>
					<li><a href="#Where">Where to Find the CAAXMLDOMCreate Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows how to create XML documents from scratch using the DOM API. 
You will learn to create the most common XML constructs: document type declarations, 
elements, attributes, comments, and text nodes. You will learn how to save these 
constructs to disk to obtain an XML file.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAXMLDOMCreate Use Case</h2>
<p>The CAAXMLDOMCreate Use Case is a use case of the CAAXMLParser.edu framework 
that illustrates XMLParserItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAXMLDOMCreate Do</h3>
<p>This use case creates a new XML document in memory, then saves it to disk under 
the specified name. Upon completion, you will obtain an XML file describing a car, 
created programmatically through DOM, with the following content:</p>
<pre class="code">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;car&gt;
 &lt;!--list of parts for a convertible car--&gt;
 &lt;part name=&quot;seat&quot; quantity=&quot;2&quot;&gt;&lt;/part&gt;
 &lt;part name=&quot;wheel&quot; quantity=&quot;4&quot;/&gt;
 &lt;part name=&quot;engine&quot; quantity=&quot;1&quot;&gt;low consumption engine&lt;/part&gt;
 &lt;part name=&quot;body&quot; quantity=&quot;1&gt;weight must be &lt; 1200 kg&lt;/part&gt;
&lt;/car&gt;</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAXMLDOMCreate</h3>
<p>To launch CAAXMLDOMCreate, you will need to set up the build time environment, 
then compile CAAXMLDOMCreate along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The use case should be launched as follows from the command line:</p>
<pre>CAAXMLDOMCreate &lt;outfilepath&gt;</pre>
<p>where <code>&lt;outfilepath&gt;</code> is the path of the XML file, which will 
be created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAXMLDOMCreate Code</h3>
<p>The CAAXMLDOMCreate use case is made of one file located in the CAAXMLDOMCreate.m 
module of the CAAXMLParser.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAXMLParser.edu\CAAXMLDOMCreate.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a blank XML document, populate it and save it to disk, there are seven 
main steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Create the DOM Component</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Obtain the DOM Implementation</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Use the DOM Implementation to Create a Document</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Use the Document to Create Elements, Texts, and Comments</td>
	</tr>
	<tr>
		<td><a href="#Step5">5</a></td>
		<td>Create the Tree Structure by Positioning the Elements, Texts, and Comments 
		with Respect to Each Other</td>
	</tr>
	<tr>
		<td><a href="#Step6">6</a></td>
		<td>Save the Document as an XML File</td>
	</tr>
	<tr>
		<td><a href="#Step7">7</a></td>
		<td>Manage Errors</td>
	</tr>
</table>
<p>Please note that most of the APIs from the XMLParserItf framework return a
<code>HRESULT</code>. To avoid excessive indentation of the code, which would cause 
poor readability, the following coding style has been used: the whole code is put 
in a <code>do {} while(0)</code> loop; if one of the APIs returns a bad <code>HRESULT</code>, 
the execution is stopped with a <code>break</code> and the error handler is invoked.</p>
<pre class="code">HRESULT hr = E_FAIL;
do {
    hr = XMLParserItfAPI_1();
    if (FAILED(hr)) { break; }
    hr = XMLParserItfAPI_2();
    if (FAILED(hr)) { break; }
    ...
    hr = XMLParserItfAPI_N();
    if (FAILED(hr)) { break; }
} while(0);
if (FAILED(hr)) {
    // Error handling code.
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Create the DOM Component</h3>
<pre class="code">...
CATIXMLDOMDocumentBuilder_var builder;
HRESULT hr = <strong>::CreateCATIXMLDOMDocumentBuilder</strong>(builder);
...</pre>
<p>The first step to work with DOM is to instantiate the DOM component. The DOM 
component can be created by calling the <code>CreateCATIXMLDOMDocumentBuilder</code> 
global function. This function returns a handler on the <em>CATIXMLDOMDocumentBuilder</em> 
interface, which is the main interface for the DOM component. Using this interface 
you will be able to create documents (either from scratch, as here, or by parsing 
an existing XML file) and save existing documents to disk. This call automatically 
chooses the XML parser component which is best suited for the platform where the 
code is running.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Obtain the DOM Implementation</h3>
<pre class="code">...
CATIDOMImplementation_var implementation;
hr = builder-&gt;<strong>GetDOMImplementation</strong>(implementation);
...</pre>
<p>To create document types and documents, one uses an object, which implements 
the <em>CATIDOMImplementation</em> interface. This object is obtained from the
<em>CATIXMLDOMDocumentBuilder</em> by invoking its <code>GetDOMImplementation</code> 
method.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step3"></a>Use the DOM Implementation to Create a Document</h4>
<pre class="code">...
CATIDOMDocument_var document;
hr = implementation-&gt;<strong>CreateDocument</strong>(&quot;&quot;, &quot;car&quot;, NULL_var, document);
...</pre>
<p>The <em>CATIDOMImplementation</em> interface acts as a factory to create DOM 
documents. The <code>CreateDocument</code> method creates a new DOM document. It 
accepts the following parameters:</p>
<table>
	<tr>
		<td><code>&quot;&quot;</code></td>
		<td>The namespace of the root element.</td>
	</tr>
	<tr>
		<td><code>&quot;car&quot;</code></td>
		<td>The name of the root element.</td>
	</tr>
	<tr>
		<td><code>NULL_var</code></td>
		<td>Passing <code>NULL_var</code> causes the document type declaration to 
		be omitted in the generated XML. Document type declarations are only useful 
		when validating documents with DTDs. However usage of DTDs is discouraged 
		and the more powerful XSD schema mechanism should be used instead.</td>
	</tr>
	<tr>
		<td><code>document</code></td>
		<td>The resulting document returned by reference.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Use the Document to Create Elements, Texts, and Comments</h3>
<pre class="code">...
CATIDOMElement_var seat;
hr = document-&gt;<strong>CreateElement</strong>(&quot;part&quot;, seat);
...
CATIDOMElement_var engine;
hr = document-&gt;<strong>CreateElement</strong>(&quot;part&quot;, engine);
...
hr = engine-&gt;SetAttribute(&quot;name&quot;, &quot;engine&quot;);
...
hr = engine-&gt;SetAttribute(&quot;quantity&quot;, &quot;1&quot;);
...
CATIDOMText_var engineText;
hr = document-&gt;<strong>CreateTextNode</strong>(&quot;low consumption engine&quot;, engineText);
...
CATIDOMComment_var comment;
hr = document-&gt;<strong>CreateComment</strong>(&quot;list of parts for a convertible car&quot;, comment);
...</pre>
<p>The <em>CATIDOMDocument</em> interface acts as a factory to create all the other 
XML constructs: elements, text nodes, comments, processing instructions, etc. Elements 
can be created with the <code>CreateElement</code> method; text nodes can be created 
with the <code>CreateText</code> method; comments can be created with the <code>
CreateComment</code> method. Each of these method returns a object, which implements 
the corresponding DOM interface (<em>CATIDOMElement</em>, <em>CATIDOMText</em>,
<em>CATIDOMComment</em>). Using these interfaces, the created DOM nodes can then 
be further customized: for instance, calling the <code>SetAttribute</code> method 
of a <em>CATIDOMElement</em> lets you set the value of this element's attributes.</p>
<p>Note that the DOM nodes, which we have created are just isolated building blocks 
at this stage. They are not yet attached to the DOM document. If we were to save 
the document at this point, they would not appear in the resulting XML file, since 
only the nodes, which are children of the document are actually saved.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Create the Tree Structure by Positioning the Elements, Texts, 
and Comments with Respect to Each Other</h3>
<pre class="code">...
CATIDOMElement_var car;
hr = document-&gt;<strong>GetDocumentElement</strong>(car);
...
hr = car-&gt;<strong>AppendChild</strong>(seat);
...
hr = car-&gt;<strong>AppendChild</strong>(engine);
...
hr = engine-&gt;<strong>AppendChild</strong>(engineText);
...
hr = car-&gt;<strong>InsertBefore</strong>(comment, seat);
...</pre>
<p>In this step, we assemble the building blocks we have created in the previous 
step to create a DOM tree. The DOM API views XML documents as a tree of XML nodes. 
The root element of the XML document corresponds to the root of the DOM tree. The 
sub-elements of the root element are the children of this root node. We use the
<code>AppendChild</code> and <code>InsertBefore</code> methods to nest the nodes 
with respect to one another.</p>
<p>Note that the DOM API will perform tests on the fly to ensure that the resulting 
document is well-formed. If you try to perform the following operation, you will 
get a <code>FAILED HRESULT</code> with an associated <em>CATDOMException</em> warning 
you that the operation is impossible since it would break the DOM hierarchy.</p>
<pre class="code">hr = comment-&gt;AppendChild(seat);
// Will return E_FAIL since this would result in a not well-formed document</pre>
<p>However, DOM does not guarantee validity. Nothing will prevent you to perform 
the following operation, which will result in a well-formed, but invalid XML document 
(a part element cannot contain car element as per the <code>automotive.dtd</code> 
grammar).</p>
<pre class="code">hr = seat-&gt;AppendChild(car);
// Will return S_OK since DOM does not verify validity.</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Save the Document as an XML File</h3>
<pre class="code">...
hr = builder-&gt;<strong>WriteToFile</strong>(document, outputFile);
...</pre>
<p>To create the XML document, which corresponds to the DOM tree, call the <code>
WriteToFile</code> method. It takes as a parameter the path of the XML document 
to be created.</p>
<p>By default, the resulting document will use the default (UTF-8) encoding. Note 
that the &quot;encoding&quot; attribute will not be specified in the XML declaration. 
However, the XML specification indicates that if the encoding attribute is not specified, 
XML parsers should consider the document uses the UTF-8 encoding. See
<a href="#Ref2">[2]</a> and <a href="#Ref4">[4]</a> for more information on XML 
encodings.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Manage Errors</h3>
<p>The XMLParserItf framework uses the <code>HRESULT</code> / <em>CATError</em> 
mechanism to manage errors. Make sure to use the <code>CATError::CATGetLastError</code> 
to obtain all the available error diagnostics when using XMLParserItf. More information 
about error management is available here <a href="#Ref2">[2]</a> and
<a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows you how to create XML documents from scratch using the DOM 
API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="Ref1"></a>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td><a name="Ref2"></a>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidErrors.htm">
		Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td><a name="Ref3"></a>[3]</td>
		<td><a href="CAAXmlTaOverview.htm">Using XML</a></td>
	</tr>
	<tr>
		<td><a name="Ref4"></a>[4]</td>
		<td><a href="CAAXmlTaTipsAndTricks.htm">XML Tips and Tricks</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
