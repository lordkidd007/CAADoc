<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Parsing XML Documents with SAX</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Parsing XML Documents with SAX</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to create a SAX parser. It explains how to create 
		your own handlers to trap SAX events and how to register these handlers 
		with the SAX parser. It shows you how to parse an XML document, with or 
		without validation.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAXMLSAXCount Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAXMLSAXCount Do</a></li>
					<li><a href="#How">How to Launch CAAXMLSAXCount</a></li>
					<li><a href="#Where">Where to Find the CAAXMLSAXCount Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows how to parse XML documents using the SAX API. You will learn 
to create two different kinds of event handlers for SAX: <strong>error handlers</strong> 
are invoked to process errors raised by the parser if the XML input is not well-formed 
or is invalid; <strong>content handlers</strong> are invoked when the parser encounters 
the most common XML constructs, such as elements, text or processing instructions. 
You will learn how to register your handlers with the parser. Finally, the use case 
will show you how to run the SAX parser configured with your handlers to parse a 
file with or without validation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAXMLSAXCount Use Case</h2>
<p>The CAAXMLSAXCount Use Case is a use case of the CAAXMLParser.edu framework that 
illustrates XMLParserItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAXMLSAXCount Do</h3>
<p>This use case parses an existing XML file and collects statistics about its contents: 
number of elements, number of attributes, number of characters, number of white 
space characters, number of processing instructions. Upon completion, it will print 
a report with these statistics in the console.</p>
<pre class="code">Element count = 4
Attribute count = 9
Character count = 41
Ignorable white space count = 0
Processing instruction count = 0
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAXMLSAXCount</h3>
<p>To launch CAAXMLSAXCount, you will need to set up the build time environment, 
then compile CAAXMLSAXCount along with its prerequisites, set up the run time environment, 
and then execute the use case [<a href="#References">1</a>].</p>
<p>The use case should be launched as follows from the command line:</p>
<pre>CAAXMLSAXCount [-v] &lt;filepath&gt;</pre>
<p>where <code>&lt;filepath&gt;</code> is the path of the XML file, which will be 
parsed.</p>
<p>A sample XML file is provided with the use case. To use it, launch the following 
command from the command line:</p>
<p><code>CAAXMLSAXCount InstallRoot\OS\resources\xml\CAAXMLSAXCount\CAAXMLSAXCount.xml</code> </p>
<p>where <code>InstallRoot</code> is the directory in which you have installed the 
run time part or the product line and <code>OS</code> is the directory containing 
the installed code [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAXMLSAXCount Code</h3>
<p>The CAAXMLSAXCount use case is made of several classes located in the CAAXMLSAXCount.m 
module of the CAAXMLParser.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAXMLParser.edu\CAAXMLSAXCount.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To create a SAX parser, implement and register event handlers with this parser, 
and parse a file, there are seven main steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Implement a Content Handler Component</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Implement an Error Handler Component</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Create a SAX Component</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Create and Configure a SAX Parser</td>
	</tr>
	<tr>
		<td><a href="#Step5">5</a></td>
		<td>Instantiate the Content Handler and Error Handler Components and Register 
		Them With the Parser</td>
	</tr>
	<tr>
		<td><a href="#Step6">6</a></td>
		<td>Parse the XML File</td>
	</tr>
	<tr>
		<td><a href="#Step7">7</a></td>
		<td>Manage Errors</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Implement a Content Handler Component</h3>
<p>The SAX API uses an event-oriented API to process XML documents. The XML SAX 
parser reads XML documents sequentially and invokes callback functions to indicate 
the XML construct it comes across. Each invocation is called a SAX event. The SAX 
API defines interfaces, which specify the signature of the SAX callback functions 
and group them per theme. The <code>CATISAXContentHandler</code> interface defines 
functions, which describe the most common XML constructs found in an XML document: 
start of an document, end of an document, start of an element, end of an element, 
characters, processing instruction, white space. Other SAX interfaces (<code>CATISAXDTDHandler</code>,
<code>CATISAXErrorHandler</code>, <code>CATISAXEntityResolver</code>) define additional 
events. To make the work easier for the developer, the SAX API provides a <code>
CATSAXDefaultHandler</code> component, which already provides an empty implementation 
of all the SAX interfaces.</p>
<p>
<img alt="saxdefaulthandler.png (2631 bytes)" height="206" src="images/saxdefaulthandler.png" width="283"/>.</p>
<p>Therefore, to write a SAX document handler, all you need to do is to create a 
new component which inherits from <code>CATISAXContentHandler</code> and override 
the methods to answer to the events, which are relevant to your application. The 
following code declares and defines a <code>CAAXMLSAXCountContHandler</code> component, 
which inherits from <code>CATSAXDefaultHandler</code> and partially re-implements
<code>CATISAXContentHandler</code>.</p>
<pre class="code">// CAAXMLSAXCountContHandler.h
#include &quot;CATSAXDefaultHandler.h&quot;
class CAAXMLSAXCountContHandler : <strong>public CATSAXDefaultHandler</strong> {
    <strong>CATDeclareClass;</strong>
    public:
        ...
        // Override the default implementation of the
        // CATISAXContentHandler methods we are interested in.
        virtual <strong>HRESULT Characters(
            const CATUnicodeString &amp; iCharacters)</strong>;
        virtual <strong>HRESULT EndDocument()</strong>;
        ...
};</pre>
<pre class="code">// CAAXMLSAXCountContHandler.cpp
#include &quot;CAAXMLSAXCountContHandler.h&quot;

// Declare the class as a component derived from CATSAXDefaultHandler
<strong>CATImplementClass( CAAXMLSAXCountContHandler, Implementation, CATSAXDefaultHandler, CATnull );</strong>

// Implement the CATISAXContentHandler interface
<strong>#include &quot;TIE_CATISAXContentHandler.h&quot;
TIE_CATISAXContentHandler(CAAXMLSAXCountContHandler);</strong></pre>
<p>The next step is to provide an implementation for each of the SAX events you 
want to catch. The following code shows how the <code>Characters</code> event callback 
function is implemented.</p>
<pre class="code">// CAAXMLSAXCountContHandler.cpp
HRESULT CAAXMLSAXCountContHandler::<strong>Characters</strong>(
    const CATUnicodeString &amp; iCharacters) {

    // This event is sent by the CATISAXXMLReader when a XML text is parsed
    _characterCount += iCharacters.GetLengthInChar();
    return S_OK;
}</pre>
<p>This method counts the number of characters in the text nodes of the XML document. 
The method receives the text node in its <code>iCharacters</code> argument, of type
<code>CATUnicodeString</code>. The size of the <code>CATUnicodeString</code> is 
computed with <code>GetLengthInChar</code> and added to the <code>_characterCount</code> 
instance variable.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Implement an Error Handler Component</h3>
<p>The <code>CATISAXErrorHandler</code> interface defines functions, which are called 
by the SAX parser when an error occurs. There are three error functions, corresponding 
to the severity of the error:</p>
<dl>
	<dt>fatal errors</dt>
	<dd>are errors from which the parser cannot recover (for instance not-well-formedness 
	errors)</dd>
	<dt>errors</dt>
	<dd>are errors from which the parser can recover (for instance validation errors)</dd>
	<dt>warnings</dt>
	<dd>are used to report conditions that are not errors or fatal errors</dd>
</dl>
<p>To write a SAX error handler, you need to create a new component, which inherits 
from <code>CATISAXErrorHandler</code> and override the methods to answer to the 
events, which are relevant to your application. The use case declares a <code>CAAXMLSAXCountErrHandler</code> 
component, which inherits from <code>CATSAXDefaultHandler</code> and re-implements
<code>CATISAXErrorHandler</code>. For concision, the code to do that not reproduced 
here as it is nearly identical to the <code>CAAXMLSAXCountContHandler</code> code 
from the previous section.</p>
<p>The next step is to provide an implementation for each of the SAX events you 
want to catch. To ask the parser to ignore a recoverable error and proceed, the 
implementation must return <code>S_OK</code>. To ask the parser to abort, the parser 
must return <code>E_FAIL</code>.</p>
<pre class="code">// CAAXMLSAXCountErrHandler.cpp
HRESULT CAAXMLSAXCountErrHandler::<strong>Error</strong> ( 
    CATSAXParseException* iException) {

	...
    // Let the parser continue the parsing (if we returned E_FAIL, parsing would stop)
    <strong>return S_OK</strong>;
}

HRESULT CAAXMLSAXCountErrHandler::<strong>FatalError</strong> ( 
    CATSAXParseException* iException) {

	...
    // Stop the parsing. The CATISAXXMLReader will stop anyway since this is a FatalError.
    <strong>return E_FAIL</strong>;
}</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Create a SAX Component</h3>
<pre class="code">...
// CAAXMLSAXCountMain.cpp
CATIXMLSAX2Factory_var factory;
HRESULT hr = <strong>::CreateCATIXMLSAX2Factory</strong>(factory);
...</pre>
<p>To work with SAX, you need to instantiate the SAX component. The SAX component 
can be created by calling the <code>CreateCATIXMLSAX2Factory</code> global function. 
This function returns a handler on the <code>CATIXMLSAX2Factory</code> interface, 
which is the main interface for the SAX component. Using this interface you will 
be able to create SAX2 parsers and to create input source to feed XML to the parser. 
This call automatically chooses the XML parser component which is best suited for 
the platform where the code is running.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Create and Configure a SAX Parser</h3>
<pre class="code">...
CATISAXXMLReader_var reader;
hr = factory-&gt;<strong>CreateXMLReader</strong>(reader);
...
if (isValidating) {
    hr = reader-&gt;SetFeature(CATSAXXMLReaderOptions::ValidationFeature, TRUE);
    ...
    hr = reader-&gt;SetFeature(CATSAXXMLReaderOptions::NamespacesFeature, TRUE);
}
...</pre>
<p>To create a SAX2 parser, one simply invokes the <code>CreateXMLReader</code> 
on the <code>CATIXMLSAX2Factory</code> object. By default the parser is non-validating. 
Validation can be turned by calling the <code>SetFeature</code> method of reader 
with the feature name which corresponds to validation. If schema validation is required, 
namespace support must also be turned on.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Instantiate the Content Handler and Error Handler Components 
and Register Them With the Parser</h3>
<p>The SAX2 parser created in the previous section is not yet usable as it does 
not yet know any other objects to which it can send the events it generates. The 
SAX2 parser can accept up to six event handlers (one for each event interface), 
as shown in the diagram below.</p>
<p>
<img alt="saxparser.png (3346 bytes)" height="232" src="images/saxparser.png" width="337"/></p>
<pre class="code">...
CAAXMLSAXCountContHandler *contHandlerImpl = new CAAXMLSAXCountContHandler();
CATISAXContentHandler_var contHandler = contHandlerImpl;
contHandlerImpl-&gt;Release();
contHandlerImpl = NULL;

CAAXMLSAXCountErrHandler *errHandlerImpl = new CAAXMLSAXCountErrHandler();
CATISAXErrorHandler_var errHandler = errHandlerImpl;
errHandlerImpl-&gt;Release();
errHandlerImpl = NULL;
...</pre>
<p>To instantiate the document handler and the error handler you have defined in 
the previous section, simply do a <code>new</code> of the main implementation class, 
then get an interface handle of the right type on the component.</p>
<pre class="code">...
hr = reader-&gt;<strong>SetContentHandler</strong>(contHandler);
...
hr = reader-&gt;<strong>SetErrorHandler</strong>(errHandler);
...</pre>
<p>To register your document handler, call the <code>SetContentHandler</code> method 
of the <code>CATISAXXMLReader</code> interface. To register your error handler, 
call the <code>SetErrorHandler</code> method of the <code>CATISAXXMLReader</code> 
interface. Passing <code>NULL_var</code> to these methods unregisters the previously 
registered handlers.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Parse the XML File</h3>
<pre class="code">hr = reader-&gt;<strong>Parse</strong>(filePath);
...</pre>
<p>To parse the XML file, call the <code>Parse</code> method of the <code>CATISAXXMLReader</code> 
interface. Pass the path of the file to read as a parameter. The method will read 
the file from top to bottom and generate the corresponding events, calling your 
event handlers for all the events you want to manage.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Manage Errors</h3>
<p>The XMLParserItf framework uses the <code>HRESULT</code> / <code>CATError</code> 
mechanism to manage errors. Make sure to use the <code>CATError::CATGetLastError</code> 
to obtain all the available error diagnostics when using XMLParserItf. More information 
about error management is available here <a href="#Ref2">[2]</a> and
<a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows you how to parse XML documents using the SAX API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="Ref1"></a>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td><a name="Ref2"></a>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidErrors.htm">
		Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td><a name="Ref3"></a>[3]</td>
		<td><a href="CAAXmlTaOverview.htm">Using XML</a></td>
	</tr>
	<tr>
		<td><a name="Ref4"></a>[4]</td>
		<td><a href="CAAXmlTaTipsAndTricks.htm">XML Tips and Tricks</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
