<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Reading and Writing XML Documents with DOM</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Reading and Writing XML Documents with DOM</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to parse existing XML files using the DOM API 
		and how to save a DOM tree to disk as an XML file with the proper encoding.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAXMLDOMTranscode Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAXMLDOMTranscode Do</a></li>
					<li><a href="#How">How to Launch CAAXMLDOMTranscode</a></li>
					<li><a href="#Where">Where to Find the CAAXMLDOMTranscode Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case shows how to go back and forth between XML files and in-memory 
DOM trees. You will first learn to construct an in-memory DOM tree from an XML file 
using a DOM parser. You will learn to configure the parser to make it validating 
or non validating. The use case will then show you how to create an XML file from 
an in-memory DOM tree. It will show you how to configure the parser to obtain an 
XML file with the encoding you want.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAXMLDOMTranscode Use Case</h2>
<p>The CAAXMLDOMTranscode Use Case is a use case of the CAAXMLParser.edu framework 
that illustrates XMLParserItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAXMLDOMTranscode Do</h3>
<p>This use case implements a simple XML file transcoder: a program, which converts 
XML files from one encoding to another. The transcoder parses an existing XML file 
using the DOM API, then saves it under the specified name using the requested encoding.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAXMLDOMTranscode</h3>
<p>To launch CAAXMLDOMTranscode, you will need to set up the build time environment, 
then compile CAAXMLDOMTranscode along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>The use case should be launched as follows from the command line:</p>
<pre>CAAXMLDOMTranscode (-utf8|-utf16) <code>&lt;infilepath&gt; &lt;outfilepath&gt;</code></pre>
<p>where:</p>
<ul>
	<li><code>(-utf8|-utf16)</code> is the choice of the encoding to use for the 
		transcoded XML file.</li>
	<li><code>&lt;infilepath&gt;</code> is the path of the XML file which you want 
		to read.</li>
	<li><code>&lt;outfilepath&gt;</code> is the path where the transcoded XML file 
		will be saved.</li>
</ul>
<p>A sample XML file is provided with the use case. To use it, launch the following 
command from the command line:</p>
<p><code>CAAXMLDOMTranscode -utf16 InstallRoot\OS\resources\xml\CAAXMLDOMTranscode\CAAXMLDOMTranscode.xml 
C:\TEMP\CAAXMLDOMTranscode_utf16.xml</code></p>
<p>where <code>InstallRoot</code> is the folder in which you have installed the 
run time part or the product line and <code>OS</code> is the directory containing 
the installed code [<a href="#References">1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAXMLDOMTranscode Code</h3>
<p>The CAAXMLDOMTranscode use case is made of one file located in the CAAXMLDOMTranscode.m 
module of the CAAXMLParser.edu framework:</p>
<p><code>InstallRootfolder\CAADoc\CAAXMLParser.edu\CAAXMLDOMTranscode.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>To parse a DOM document and save it to disk, there are four main steps:</p>
<table>
	<tr>
		<th>#</th>
		<th>Step</th>
	</tr>
	<tr>
		<td><a href="#Step1">1</a></td>
		<td>Create the DOM Component</td>
	</tr>
	<tr>
		<td><a href="#Step2">2</a></td>
		<td>Parse the XML Document Without Validation</td>
	</tr>
	<tr>
		<td><a href="#Step3">3</a></td>
		<td>Write DOM Tree With the Proper Encoding</td>
	</tr>
	<tr>
		<td><a href="#Step4">4</a></td>
		<td>Manage Errors</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Create the DOM Component</h3>
<pre class="code">CATIXMLDOMDocumentBuilder_var builder;
HRESULT hr = <strong>::CreateCATIXMLDOMDocumentBuilder</strong>(builder);
...</pre>
<p>The first step to work with DOM is to instantiate the DOM component. The DOM 
component can be created by calling the <code>CreateCATIXMLDOMDocumentBuilder</code> 
global function. This function returns a handler on the <em>CATIXMLDOMDocumentBuilder</em> 
interface, which is the main interface for the DOM component. Using this interface 
you will be able to create documents (either by parsing an existing XML file, as 
here, or from scratch) and save existing documents to disk. This call automatically 
chooses the XML parser component which is best suited for the platform where the 
code is running.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Parse the XML Document Without Validation</h3>
<pre class="code">...
CATListOfCATUnicodeString readOptions;
readOptions.Append(&quot;CATDoValidation&quot;);
CATListOfCATUnicodeString readOptionValues;
readOptionValues.Append(&quot;false&quot;);

CATIDOMDocument_var document;
hr = builder-&gt;<strong>Parse</strong>(inputFile, document, readOptions, readOptionValues);
...</pre>
<p>To parse an XML document, invoke the <code>Parse</code> method from the <em>CATIXMLDOMDocumentBuilder</em> 
interface. The parser can run in two modes: non-validating and validating. You determine 
what mode is used in the <code>Parse</code> method using the <code>&quot;CATDoValidation&quot;</code> 
option. Options are passed to the parser using two <em>CATListOfCATUnicodeStrings</em>. 
The first one contains the option names, the second one contains the option values. 
For the purpose of this use case, we just want to transcode the XML file from one 
encoding to another, so we will disconnect XML validation. For a discussion of non-validating 
parsers versus validating parsers and how to choose which parser to instantiate, 
please see <a href="#Ref3">[3]</a> and <a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Write DOM Tree With the Proper Encoding</h3>
<pre class="code">...
CATListOfCATUnicodeString writeOptions;
writeOptions.Append(<strong>&quot;CATEncoding&quot;</strong>);
CATListOfCATUnicodeString writeOptionValues;
if (strcmp(argv[1], &quot;-utf8&quot;) == 0) {
	writeOptionValues.Append(<strong>&quot;UTF-8&quot;</strong>);
} else {
	writeOptionValues.Append(<strong>&quot;UTF-16&quot;</strong>);
}
hr = builder-&gt;<strong>WriteToFile</strong>(document, outputFile, writeOptions, writeOptionValues);
...</pre>
<p>To create the XML document, which corresponds to the DOM tree, call the <code>
WriteToFile</code> method. It takes as a parameter the path of the XML document 
to be created. The <code>WriteToFile</code> method also accepts the <code>CATEncoding</code> 
option to control the encoding used in the resulting file. Options are passed to 
the parser using two <em>CATListOfCATUnicodeStrings</em>. The first one contains 
the option names, the second one contains the option values.</p>
<p>If the <code>CATEncoding</code> option is not specified, the resulting document 
will use the default (UTF-8) encoding. Note that the &quot;encoding&quot; attribute 
will not be specified in the XML declaration. However, the XML specification indicates 
that if the encoding attribute is not specified, XML parsers should consider that 
the document uses the UTF-8 encoding. Not all encodings are supported by the parser. 
For a discussion of supported encodings and write options, see <a href="#Ref3">[3]</a> 
and <a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Manage Errors</h3>
<p>The XMLParserItf framework uses the <code>HRESULT</code> / <em>CATError</em> 
mechanism to manage errors. Make sure to use the <code>CATError::CATGetLastError</code> 
to obtain all the available error diagnostics when using XMLParserItf. More information 
about error management is available here <a href="#Ref2">[2]</a> and
<a href="#Ref4">[4]</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case shows you how to read and write XML documents using the DOM API.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td><a name="Ref1"></a>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td><a name="Ref2"></a>[2]</td>
		<td>
		<a href="../CAASysMiddleware/CAASysTaMidErrors.htm">
		Managing Errors Using HRESULT</a></td>
	</tr>
	<tr>
		<td><a name="Ref3"></a>[3]</td>
		<td><a href="CAAXmlTaOverview.htm">Using XML</a></td>
	</tr>
	<tr>
		<td><a name="Ref4"></a>[4]</td>
		<td><a href="CAAXmlTaTipsAndTricks.htm">XML Tips and Tricks</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2005]</td>
		<td>Document created</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
