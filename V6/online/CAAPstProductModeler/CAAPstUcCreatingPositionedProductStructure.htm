<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Positioned Product Structure Model</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Positioned Product Structure Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use case creates Positioned Product structure and displays its positions 
		(absolute as well relative). But the main focus of this use case is the 
		demonstration of usage of <em>CATIMovable</em> interface.</p>
		<p>While creation of the Positioned Product structure use case mainly focuses 
		on setting absolute position of the Product instance. Then Use case also 
		demonstrates displaying of absolute position and relative positions of components. 
		In addition this use case also demonstrates display of both positions of 
		Occurrence model.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstCreatingPositionedProductStructure 
				Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstCreatingPositionedProductStructure 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstCreatingPositionedProductStructure</a></li>
					<li><a href="#Where">Where to Find the CAAPstCreatingPositionedProductStructure 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#BrowseOccurrences">BrowseOccurrences</a></li>
			<li><a href="#DisplayAbsPosition">DisplayAbsPosition</a></li>
			<li><a href="#DisplayRelativePosition">DisplayRelativePosition</a></li>
			<li><a href="#CreateTransformationMatrix">CreateTransformationMatrix</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case mainly teaches us to Position Product Instances, we learn this in 
the process of creation of Positioned Product Structure.</p>
<p>In the process we learn usage of <em><strong>CATIMovable</strong></em> interface, 
along with:</p>
<ul>
	<li>Setting the absolute positions of Product instances.</li>
	<li>Displaying Absolute position of objects.</li>
	<li>Displaying relative positions.</li>
	<li>Retrieving and display both positions Occurrence object.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstCreatingPositionedProductStructure Use Case</h2>
<p>CAAPstCreatingPositionedProductStructure is a use case of the CAAProductStructure.edu 
framework that illustrates the PLMModelerBaseInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstCreatingPositionedProductStructure Do</h3>
<p>The use case mainly focuses on the positioning of the Product instances. In addition 
this use case focuses on the displaying absolute and relative position of Product 
instances as well occurrences.</p>
<p>Initially we create required Product references:</p>
<ul>
	<li>Wheel reference.</li>
	<li>Axle reference.</li>
	<li>Skate reference.</li>
</ul>
<p>Then we start building following product structure as shown in [<a href="#Fig1">Fig.1</a>].</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: The Skate Reference/Instance Model</caption>
	<tr>
		<td>
		<img alt="The Skate Reference/Instance Model" src="images/CAAPstCreatingPositionedProductStructure_Skate-RefInstModel.jpg"/></td>
	</tr>
</table>
<p>While building this above product model we will position each instance and finally 
build Positioned Product structure. That will have position as shown in [<a href="#Fig2">Fig.2</a>].</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: The Complete Positioned Skate Model</caption>
	<tr>
		<td>
		<img alt="The Complete Positioned Skate Model" src="images/CAAPstCreatingPositionedProductStructure_img_2.gif"/></td>
	</tr>
</table>
<p>To begin with we create two instances of Wheel (Left Wheel and right Wheel) below 
Axle reference as shown in [<a href="#Fig3">Fig.3</a>]</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3: AxleAssy On Initial Creation</caption>
	<tr>
		<td>
		<img alt="AxleAssy On Initial Creation" src="images/CAAPstCreatingPositionedProductStructure_img_3.gif"/></td>
	</tr>
</table>
<p>After that we position Wheel instances as Left wheel (0,100,0) and Right wheel 
(0,-100,0). It will create model as shown in [<a href="#Fig4">Fig.4</a>].</p>
<table>
	<caption><a name="Fig4"></a>Fig. 4: The AxleAssy after Positioning</caption>
	<tr>
		<td>
		<img alt="The AxleAssy after Positioning" src="images/CAAPstCreatingPositionedProductStructure_img_4.gif"/></td>
	</tr>
</table>
<p>Then we instantiate Axle below Skate reference as Front Axle and Rear Axle. It 
will look like as shown in [<a href="#Fig5">Fig.5</a>]</p>
<table>
	<caption><a name="Fig5"></a>Fig. 5: Skate on Creation</caption>
	<tr>
		<td>
		<img alt="Skate on Creation" src="images/CAAPstCreatingPositionedProductStructure_img_5.gif"/></td>
	</tr>
</table>
<p>Then we position Axle assembly also, Front Axle (100,0,0) and Rear Axle (-100,0,0) 
then the total assembly will look like as shown in [<a href="#Fig2">Fig.2</a>].</p>
<p>the final data model of the skate will look like [<a href="#Fig6">Fig.6</a>]</p>
<table>
	<caption><a name="Fig6"></a>Fig 6: The Data Model of the Complete Skate</caption>
	<tr>
		<td>
		<img alt="The Data Model of the Complete Skate" src="images/CAAPstCreatingPositionedProductStructure_img_6.jpg"/></td>
	</tr>
</table>
<p>The final positions in results will look like as follows:</p>
<ul>
	<li>M3 (100,0,0)/M4(-100,0,0) is the absolute position matrix of the front and 
		the rear AxleAssy in the global coordinate system of the Skate.</li>
	<li>M1 (0,100,0)/M2 (0,-100,0) is the absolute position matrix of the left and 
		the right wheel occurrences/instances.</li>
	<li>The position of each wheel (in 3D Data model) is the product of the position 
		matrix of each occurrence beginning with that under Root to the Wheel occurrence. 
		Thus the position matrix for the rear left wheel in 3D (in red) is M4 (rear 
		AxleAssy occurrence) X M1 (LeftWheel occurrence).</li>
</ul>
<table>
	<caption><a name="Fig7"></a>Fig.7 Skate 3D Model</caption>
	<tr>
		<td>
		<img alt="Skate 3D Model" src="images/CAAPstCreatingPositionedProductStructure_image_3dModel.jpg" width="512"/></td>
	</tr>
</table>
<p>The above image [<a href="#Fig7">Fig.7</a>] shows the 3dmodel of Skate after 
instantiating 3DSpahes (Provided in the 3dxml) assembly beneath respective References.</p>
<p>Finally in output we display all the Positions absolute as well relative Occurrence 
as well ref inst model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstCreatingPositionedProductStructure</h3>
<p>To launch <code>CAAPstCreatingPositionedProductStructure</code>, you will need 
to set up the build time environment, then compile <code>CAAPstCreatingPositionedProductStructure</code> 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;<em>CAAPstCreatingPositionedProductStructure Repository 
Server User Password SecurityCtx</em></code>&quot;</p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as host::<em>name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies/creates the PLM Data).</td>
	</tr>
</table>
<p>After running the use case to see the actual 3dmodel we need to aggregate respective 
3DParts instances beneath Product references (Wheel Reference, Axle Reference and 
Skate Reference).</p>
<p>Please note that to run this use case there is no need of 3dxml, only this 3dxml 
is provided to generate 3d model.</p>
<p>The required three 3dShapes provided in CAAPstCreatingPositionedProductStructure.3dxml</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\InputData\CAAPstCreatingPositionedProductStructure.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CAAPstCreatingPositionedProductStructure.3dxml file contains a three 3DParts 
with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: <code>CAAPstBigWheel_Product</code></li>
	<li><code>Version</code>: ---</li>
	<li><code>PLM_ExternalID</code>: <code>CAAPstAxle_Product</code></li>
	<li><code>Version</code>: ---</li>
	<li><code>PLM_ExternalID</code>: <code>CAAPstShortBoard_Product</code></li>
	<li><code>Version</code>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstCreatingPositionedProductStructure 
Code</h3>
<p>The <code>CAAPstCreatingPositionedProductStructure</code> use case is located 
in the <code>CAAPstCreatingPositionedProductStructure.m</code> module of the CAAProductStructure.edu 
framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstCreatingPositionedProductStructure.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in <code>CAAPstCreatingPositionedProductStructure</code>:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Instantiating Products</a></li>
	<li><a href="#Step2">Creating/Adding Instances of Wheel (Left Wheel and Right 
		Wheel) below Axle Reference and Position Wheel Instances</a></li>
	<li><a href="#Step3">Creating/Adding Instances of Axle (Front Axle and Rear 
		Axle) below Skate Reference and Position Axle Instances</a></li>
	<li><a href="#Step4">Creating Occurrence Model of Skate Model and Display Positions</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstCreatingPositionedProductStructure use case begins by creating a session 
and connecting to the Input Repository. This, being the most fundamental prerequisite 
for all batch use cases, it is the first step in their execution.</p>
<p>In this case, we create a session &amp; connect to Repository with the Designer 
Role (since we create new PLM data). There are other parameters as well, details 
of which can be found in the &quot;Connecting to V6 Server&quot; use case article 
[<a href="#References">2</a>]. This article primarily deals with Opening and Closing 
a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Instantiating Products</h3>
<p>To begin with we create all references those we required to build Product Structure. 
The Process of creation of Product references and building Product structure well 
explained in detail in [<a href="#References">3</a>] use case.</p>
<p>Here to create product structure model shown in fig [<a href="#References">3</a>] 
we need to create following Product References first.</p>
<ul>
	<li>Wheel Reference (<code>pWheelRef</code>).</li>
	<li>Axle Reference (<code>pAxleRef</code>).</li>
	<li>Skate Reference (<code>pSkateRef</code>).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Creating/Adding Instances of Wheel (Left Wheel and Right 
Wheel) below Axle Reference and Position Wheel Instances</h3>
<p>We have all required references so now we create two instances (Left and Right) 
of Wheel under Axle reference. The process of creating instances beneath Product 
reference explained in detail in [<a href="#References">3</a>] use case.</p>
<p>Here we create two instances of wheel Left (pLeftWheelInstance) and Right (pRightWheelInstance)and 
in addition we rename their PLM_ExternalID values [<a href="#References">4</a>] 
as &quot;LeftWheelInst&quot; and &quot;RightWheelInst&quot; respectively.</p>
<p>Next we set the absolute Positions of both wheel instances as</p>
<ul>
	<li>Left wheel Instance (0,100,0).</li>
	<li>right Wheel Instance (0,-100,0).</li>
</ul>
<pre class="code">...
        CATMathTransformation mat = <strong>CreateTransformationMatrix</strong>(0,100,0);
	...
	<strong>CATIMovable</strong>* piMovableOnLeftWheelInstance = NULL;
         hr = pLeftWheelInstance-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIMovable</strong>,(void **)&amp;piMovableOnLeftWheelInstance);
	if (SUCCEEDED(hr))
	{
		piMovableOnLeftWheelInstance-&gt;<strong>SetAbsPosition</strong>(<strong>mat</strong>);
		<strong>DisplayAbsPosition</strong>(pLeftWheelInstance,"LeftWheelInstance",1);
		<strong>DisplayRelativePosition</strong>(pLeftWheelInstance,"LeftWheelInstance",NULL_var, 1);
		...
	}	

	CATMathTransformation mat2 = <strong>CreateTransformationMatrix</strong>(0,-100,0);
	...
	CATIMovable* piMovableOnRightWheelInstance = NULL;
         hr = pRightWheelInstance-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIMovable</strong>,(void **)&amp;piMovableOnRightWheelInstance);
	if (SUCCEEDED(hr))
	{
		piMovableOnRightWheelInstance-&gt;<strong>SetAbsPosition</strong>(mat2);
		<strong>DisplayAbsPosition</strong>(pRightWheelInstance,"RightWheelInstance",1);
		<strong>DisplayRelativePosition</strong>(pRightWheelInstance,"RightWheelInstance",NULL_var,1);
		...
	}	
	...</pre>
<p>Here the call to <code>CreateTransformationMatrix</code> creates a position matrix 
with given input values [<a href="#CreateTransformationMatrix">#</a>]. We provide 
(0,100,0) for Left wheel instance and (0,-100,0) for right wheel instance.</p>
<p>then a call to <code>CATIMovable::SetAbsPosition</code> set absolute position 
of instance with input matrix (<code>mat,mat2</code>) value[<a href="#References">5</a>].</p>
<p>Then we display Absolute position by calling <code>DisplayAbsPosition</code> 
method [<a href="#DisplayAbsPosition">#</a>] and relative position of given context 
using <code>DisplayRelativePosition</code> method [<a href="#DisplayRelativePosition">#</a>] 
here we provide Null value as context.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating/Adding Instances of Axle (Front Axle and Rear Axle) 
below Skate Reference and Position Axle Instances</h3>
<p>Next we create two instances of Axle below Skate Reference (Front Axle and Rear 
Axle).The process of creating instances beneath Product reference explained in detail 
in [<a href="#References">3</a>] use case.</p>
<p>Here we create two instances of axle (Front Axle (pFrontAxleInstance) and Rear 
Axle(pRearAxleInstance)) in addition we rename [<a href="#References">4</a>] their 
PLM_ExternalID values as &quot;FrontAxleInst&quot; and &quot;RearAxleInst&quot; 
respectively.</p>
<p>Next we set the absolute Positions of both axle instances as:</p>
<ul>
	<li>Front Axle Instance (100,0,0).</li>
	<li>Rear axle Instance (-100,0,0).</li>
</ul>
<pre class="code">...
	CATMathTransformation <strong>mat3</strong> = <strong>CreateTransformationMatrix</strong>(100,0,0);

         <strong>CATIMovable</strong>* piMovableOnFrontAxleInstance = NULL;
         hr = pFrontAxleInstance-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIMovable</strong>,(void **)&amp;piMovableOnFrontAxleInstance);
         if (SUCCEEDED(hr))
         {
              piMovableOnFrontAxleInstance-&gt;<strong>SetAbsPosition</strong>(<strong>mat3</strong>);
              <strong>DisplayAbsPosition</strong>(pFrontAxleInstance,&quot;FrontAxleInstance&quot;,1);
              <strong>DisplayRelativePosition</strong>(pFrontAxleInstance,&quot;FrontAxleInstance&quot;,NULL_var, ,1);
         } 

         CATMathTransformation mat4 = <strong>CreateTransformationMatrix</strong>(-100,0,0);

         CATIMovable* piMovableOnRearAxleInstance = NULL;
         hr = pRearAxleInstance-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIMovable</strong>,(void **)&amp;<strong>piMovableOnRearAxleInstance</strong>);
         if (SUCCEEDED(hr))
         {
               piMovableOnRearAxleInstance-&gt;<strong>SetAbsPosition</strong>(mat4);
               <strong>DisplayAbsPosition</strong>(pRearAxleInstance,&quot;RearAxleInstance&quot;,1);
               <strong>DisplayRelativePosition</strong>(pRearAxleInstance,&quot;RearAxleInstance&quot;,NULL_var,1);
         }
...	
</pre>
<p>Here the call to CreateTransformationMatrix [<a href="#CreateTransformationMatrix">#</a>] 
creates a position matrix with given input values. We provide (100,0,0) for Front 
Axle instance and (-100,0,0) for right wheel instance.</p>
<p>then a call to <code>CATIMovable::SetAbsPosition</code> set absolute position 
of instance with input matrix (<code>mat3,mat4</code>) value [<a href="#References">5</a>].</p>
<p>Then we display Absolute position by calling <code>DisplayAbsPosition</code> 
method [<a href="#DisplayAbsPosition">#</a>] and relative position of given context 
using <code>DisplayRelativePosition</code> method [<a href="#DisplayRelativePosition">#</a>] 
here we provide Null value as context for default context.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Creating Occurrence Model of Skate Model and Display Positions</h3>
<p>Initially we create the Occurrence model of Skate Instance-Reference Model. Then 
we display the both positions (absolute and relative )of each element of occurrence 
model.</p>
<pre class="code">...
         CATIPLMNavOccurrence_var spPLMNavOccurrenceOnRoot;
	CATIPrdOccurrenceMngt* occMngt = NULL;
    	if(SUCCEEDED(<strong>CATPrdGetOccurrenceMngt</strong>(<strong>occMngt</strong>)) &amp;&amp; (NULL!= occMngt) )
	{
		 hr = occMngt -&gt;<strong>GetOrCreateRootOccurrence</strong>(pSkateRef,spPLMNavOccurrenceOnRoot);
		...
	}

        <strong>DisplayAbsPosition</strong>(spPLMNavOccurrenceOnRoot,aliasOfSkateRef-&gt;GetAlias().CastToCharPtr(),1);
        <strong>DisplayRelativePosition</strong>(spPLMNavOccurrenceOnRoot,aliasOfSkateRef-&gt;GetAlias().CastToCharPtr(),NULL_var,1);
	
	<strong>BrowseOccurrences</strong>(2, spPLMNavOccurrenceOnRoot);
...</pre>
<p>Initially We have an interface <em>CATIPrdOccurrenceMngt</em> dedicated for managing 
the occurrence. Making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence
</code>returns the root occurrence corresponding to the Skate Reference, provided 
as an input to this api. This input Skate reference is the one created in the step 
[<a href="#Step1">Instantiating Products</a>].</p>
<p>Then we display Position of Skate Reference by calling <code>DisplayAbsPosition</code> 
method [<a href="#DisplayAbsPosition">#</a>] and relative position of given context 
using <code>DisplayRelativePosition</code> method [<a href="#DisplayRelativePosition">#</a>] 
here we provide Null value as context for default context.</p>
<p>then we browse through the Occurrence model by calling BrowseOccurrences method 
[<a href="#BrowseOccurrences">#</a>] and display positions.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstCreatingPositionedProductStructure use case ends by saving the newly 
created Product model and finally closing the PLM session.</p>
<p>Since most of the batch use cases save the PLM data the [<a href="#References">6</a>] 
use case exclusively deals on this subject.</p>
<p>Also all batch use cases conclude by closing the PLM session, we have a dedicated 
article on this topic namely. &quot;Connecting to V6 Server&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BrowseOccurrences"></a>BrowseOccurrences</h2>
<p>In order to simplify the code of use cases, we have provided a method <em>BrowseOccurrences</em>.</p>
<p>This function browse thought the input Occurrence model and displays both positions 
(Absolute position and relative position) of each Occurrence element.</p>
<pre class="code">HRESULT <strong>BrowseOccurrences</strong>(int level, CATIPLMNavOccurrence_var spPLMNavOccOnCurrentNode)
{
  ...
  CATListPtrCATIPLMNavOccurrence ListChildOccurrences ;
  hr = spPLMNavOccOnCurrentNode-&gt;<strong>ListChildren</strong>(ListChildOccurrences);

  int i = 1 ;
  while ( SUCCEEDED(hr) &amp;&amp; ( i&lt;=ListChildOccurrences.Size() ) ) 
  {
    CATIPLMNavOccurrence_var spCurrentChildOccurrence = ListChildOccurrences[i];
    ...
    CATIAlias_var spAliasOnComponent(spCurrentChildOccurrence);
    CATUnicodeString AliasNameOfOccurrence ;
    AliasNameOfOccurrence = spAliasOnComponent-&gt;GetAlias();

    <strong>DisplayAbsPosition</strong>(spCurrentChildOccurrence,AliasNameOfOccurrence.ConvertToChar(),level);
    <strong>DisplayRelativePosition</strong>(spCurrentChildOccurrence,AliasNameOfOccurrence.ConvertToChar(),NULL_var, level);

    hr = <strong>BrowseOccurrences</strong>(level + 1,spCurrentChildOccurrence);  
    ...
    i++ ;
  }
  return hr;
}</pre>
<p>A call to <code>CATIPLMNavOccurrence::ListChildren</code> retrieves all Occurrence 
children's aggregated under Occurrence element and returns a list of <em>CATIPLMNavOccurrence</em> 
elements.</p>
<p>Further we retrieve Alias name of each occurrence and pass it to position display 
methods.</p>
<p>Next we displays both positions (absolute and relative positions) using DisplayAbsPosition 
and DisplayRelativePosition methods respectively these methods explained below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="DisplayAbsPosition"></a>DisplayAbsPosition</h2>
<p>This method displays absolute position of the input component.</p>
<pre class="code">
 HRESULT <strong>DisplayAbsPosition</strong>(CATBaseUnknown* pInst, const char* InstName, int levelSpece)
{
	HRESULT hr = E_FAIL;

	...
	<strong>CATIMovable</strong>* piMovable = NULL
	hr = pInst-&gt;QueryInterface(IID_CATIMovable,(void**)&amp;piMovable);
	if (SUCCEEDED(hr))
	{
	     CATMathTransformation mat;
	     hr = piMovable-&gt;<strong>GetAbsPosition</strong>(mat);
	     double *aAbsoluteCoeff = new double[12];
	     mat.<strong>GetCoef</strong>(aAbsoluteCoeff);
	    <strong>cout &lt;&lt; InstName &lt;&lt;&quot; (Absolute position)&quot; &lt;&lt; endl &lt;&lt; flush;</strong>
	
	    for (int k=0; k&lt;3; k++)
	    {
	        ...
	        cout &lt;&lt; aAbsoluteCoeff[k] &lt;&lt; &quot; &quot; &lt;&lt; aAbsoluteCoeff[k+3] &lt;&lt; 
	       &quot; &quot; &lt;&lt; aAbsoluteCoeff[k+6] &lt;&lt; &quot; &quot; &lt;&lt; aAbsoluteCoeff[k+9] &lt;&lt; endl &lt;&lt; endl;
	    }
	}
         ...
	return hr;
} 
</pre>
<p>The arguments it takes, in the order of the function signature are:</p>
<ul>
	<li>A <code>CATBaseUnknown *</code> pInst, an Instance whose absolute position 
		is to be retrieved.</li>
	<li><code>char *</code> InstName, Instance name to identify it in the output 
		traces.</li>
	<li><code>int</code> levelSpece, a level count to manage spacing in output.</li>
</ul>
<p>In this global routine, we simply seek a <em>CATIMovable</em> * from the input 
Instance, a <em>CATBaseUnknown</em> * type, thanks to <code>QueryInterface</code>.</p>
<p>The <code>CATIMovable::GetAbsPosition</code> returns a <code>CATMathTransformation</code> 
object.</p>
<p>The <code>CATMathTransformation::GetCoef</code> api returns us an array of doubles 
(size=12) viz. aAbsoluteCoeff which enables us to print the absolute co-ordinates 
of the input Instance, in the form of a matrix. One such output has been displayed 
below.</p>
<p>1 0 0 0<br />
<br />
0 1 0 0<br />
<br />
0 0 1 0</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="DisplayRelativePosition"></a>DisplayRelativePosition</h2>
<p>This method displays relative position of the input component in given input 
context.</p>
<pre class="code">
HRESULT <strong>DisplayRelativePosition</strong>(CATBaseUnknown* pInst, const char* InstName, CATBaseUnknown* Context, int levelSpece)
{
  HRESULT hr = E_FAIL;

  <strong>CATIMovable</strong>* piMovable = NULL;
  hr = pInst-&gt;QueryInterface(IID_CATIMovable,(void**)&amp;piMovable);
  if (SUCCEEDED(hr))
  {
    CATMathTransformation mat;
    CATIMovable_var spMovContext = Context;
    mat = piMovable-&gt;<strong>GetPosition</strong>(spMovContext);
    double *aAbsoluteCoeff = new double[12];
    mat.<strong>GetCoef</strong>(aAbsoluteCoeff);

    <strong>cout &lt;&lt;InstName &lt;&lt; &quot; (Relative position) in the context of: Default&quot; &lt;&lt; endl &lt;&lt; flush;</strong>
    for (int k=0; k&lt;3; k++)
    {
      ...		
      <strong>cout &lt;&lt; aAbsoluteCoeff[k] &lt;&lt; &quot; &quot; &lt;&lt; aAbsoluteCoeff[k+3] 
      aAbsoluteCoeff[k+6] &lt;&lt; &quot; &quot; &lt;&lt; aAbsoluteCoeff[k+9] &lt;&lt; endl &lt;&lt; endl;</strong>
      ...
    }
  }
  return hr;
} 
</pre>
<p>The arguments it takes, in the order of the function signature are:</p>
<ul>
	<li>A <code>CATBaseUnknown *</code> pInst, an Instance whose relative position 
		is to be retrieved.</li>
	<li><code>char *</code> InstName, Instance name to identify it in the output 
		traces.</li>
	<li><code>CATBaseUnknown *</code> Context, relative to which the position of 
		the input instance is sought.</li>
	<li><code>int</code> levelSpece, a level count to manage spacing in output.</li>
</ul>
<p>In this global routine, we simply seek a <em>CATIMovable</em> * from the input 
Instance, a <em>CATBaseUnknown</em> * type, thanks to <code>QueryInterface</code>.</p>
<p>We also create a <em>CATIMovable_var</em> <code>spMovContext</code>, a handler 
to the Context from the <em>CATBaseUnknown</em> * Context argument.</p>
<p>The <code>CATIMovable::GetPosition</code> returns the relative position of the 
instance, having taken the context as input in the form of a <em>CATMathTransformation</em> 
object. The context if set to NULL_var, is implicitly assumed to be default, while 
it can also be explicitly passed.</p>
<p>For first-level instances, the default context is their parent references while 
for all &quot;Visualized Instances&quot;, the default context is their parent instances 
in the Product Model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CreateTransformationMatrix"></a>CreateTransformationMatrix</h2>
<p>This method creates transformation matrix with input x,y,z coordinate values.</p>
<pre class="code">CATMathTransformation <strong>CreateTransformationMatrix</strong>(int x, int y, int z)
{
  double *aPositionAlt = new double[12];
  for (int i=0; i&lt;12; i++)
    aPositionAlt[i]=0;

  aPositionAlt[0] = 1.;
  aPositionAlt[4] = 1.;
  aPositionAlt[8] = 1.;

  aPositionAlt[9]  = x;
  aPositionAlt[10] = y;
  aPositionAlt[11] = z;

  CATMathTransformation <strong>Position</strong>(aPositionAlt);

  delete[] aPositionAlt;
  aPositionAlt = NULL;

  return Position;
}</pre>
<p>The first step is to initialize the array of doubles with value 0, for all its 
index positions.</p>
<p>The next step is to valuate the array at indexes 0,4,8 with 1.</p>
<p>The final step is to valuate the array at indexes 9,10,11 with the input values 
x,y,z respecively.</p>
<p>The Transformation matrix returned, is of the form, as seen below.</p>
<p>1 0 0 x</p>
<p>0 1 0 y</p>
<p>0 0 1 z</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case illustrates creation of a Positioned Product model. This use case 
has main focus on the positioning of the Product instances while creating Product 
structure.</p>
<p>This use case very importantly demonstrates the usage of <em>CATIMovable</em> 
interface.</p>
<p>In this process use case also illustrates about:</p>
<ul>
	<li>Displaying Absolute position of objects.</li>
	<li>Displaying relative positions.</li>
	<li>Retrieving and display both positions Occurrence object and show whole Occurrence 
		model with positions.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcCreationStructureProductModel.htm">Creating a Product 
		Structure Model</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstTaPositioningProdInst.htm">Positioning Product Instances</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcSave.htm">
		Saving PLM Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
