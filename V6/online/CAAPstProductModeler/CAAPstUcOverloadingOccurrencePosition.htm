<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Overloading Occurrence Position</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Overloading Occurrence Position</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case primarily focuses on the illustration of overloading of 
		occurrence along with Flexibility/Repositionable options. For overloading 
		of occurrences the prerequisite is to set Flexibility/Repositionable objects 
		associated with it as per the Flexibility rule.</p>
		<p>The use use case also demonstrates the overloading on Skate model and 
		setting its essential prerequisite Flexibility/Repositionable on required 
		objects.</p>
		<p>In addition to this the use case mainly demonstrates usage of <em>Flexibility</em> 
		APIs and <em>CATIMovable</em> APIs.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstOverloadingOccurrencePosition Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstOverloadingOccurrencePosition 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstOverloadingOccurrencePosition</a></li>
					<li><a href="#Where">Where to find the CAAPstOverloadingOccurrencePosition 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The use case importantly teaches us the process of overloading of occurrences.</p>
<p>In the process our main learning highlights are:</p>
<ul>
	<li>Setting Flexibility on the objects as per Flexibility rules.</li>
	<li>Setting repositionable.</li>
	<li>Unsetting Flexibility.</li>
	<li>Setting Positions.</li>
	<li>Usage of <em>Flexibility</em> and <em>CATIMovable</em> apis.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstOverloadingOccurrencePosition Use Case</h2>
<p>CAAPstOverloadingOccurrencePosition is a use case of the CAAProductStructure.edu 
framework that illustrates the PLMModelerBaseInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstOverloadingOccurrencePosition Do</h3>
<p>The use case mainly focuses on the overloading of the Occurrences. In the process 
of overloading the use case also demonstrates the setting and unsetting Flexibility 
property on the References in addition to this use case also demonstrates setting 
of Repositionable property on instances and occurrences.</p>
<p>Now we will build the case to illustrate overloading and Flexibility, for which 
we will start with input model, in this case we will considering Skate model. Then 
from this Skate model we finally end up with overloaded Double Skate model.</p>
<p>To build this case we initially open the Skate Product references [<a href="#Fig1">Fig.1</a>] 
(Skate model).</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Input Skate 3D Model with 3DParts</caption>
	<tr>
		<td>
		<img alt="Input Skate 3D Model with 3DParts" height="493" src="images/CAAPstOverloadingOccurrencePosition_Skate3Dmodel_image1.jpg" width="461"/></td>
	</tr>
</table>
<p>The input model has the object positions as per the schema, shown in the [<a href="#Fig2">Fig.2</a>]. 
This is the same model that we have created in [<a href="#References">1</a>] use 
case.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: The Input Positioned Skate Model</caption>
	<tr>
		<td>
		<img alt="The Input Positioned Skate Model" src="images/CAAPstOverloadingOccurrencePosition_image2.gif"/></td>
	</tr>
</table>
<p>To show the overloading we build the cases in which we have to finally achieve 
following model with attributes as shown in [<a href="#Fig3">Fig.3</a>].</p>
<table>
	<caption><a name="Fig3"></a>Fig.3: An Occurrence Model with Final Model Schema</caption>
	<tr>
		<td>
		<img alt="An Occurrence Model with Final Model Schema" height="690" src="images/CAAPstOverloadingOccurrencePosition_Flexibility.gif" width="605"/></td>
	</tr>
</table>
<p>To achieve this positioned model shown in [<a href="#Fig3">Fig.3</a>] from [<a href="#Fig2">Fig.2</a>] 
we proceed step wise as mentioned below. </p>
<p>Initially we need to create Skate Assembly as per Flexibility/Repositionable 
Property rules those are explained in details in [<a href="#References">2</a>] technical 
Article. Now we could see the graphical schema of those rule for this particular 
case through the following [<a href="#Fig4">Fig.4</a>].</p>
<table>
	<caption><a name="Fig4"></a>Fig.4: Flexibility and Occurrence/Instance Repositionable</caption>
	<tr>
		<td>
		<img alt="Flexibility and Occurrence/Instance Repositionable" src="images/CAAPstOverloadingOccurrencePosition_Flexibility2.gif"/></td>
	</tr>
</table>
<p>Next we set the Flexibility for the references marked in red in above image [<a href="#Fig4">Fig.4</a>].</p>
<p>Then we set the Instances/Occurrences mentioned below as Repositionable those 
are also highlighted in above image [<a href="#Fig4">Fig.4</a>].</p>
<ul>
	<li>Left Wheel instance.</li>
	<li>Right Wheel Instance.</li>
	<li>Front Axle Assembly instance.</li>
	<li>Rear Axle Left wheel Occurrence.</li>
	<li>Rear Axle Right Wheel Occurrence.</li>
</ul>
<p>After setting those Flexibility/Repositionable properties now the Skate model 
ready for overloading.</p>
<p>Next we overload the occurrences following components to mentioned values:</p>
<ul>
	<li>Front Axle Left Wheel (0,75,0).</li>
	<li>Front Axle Right Wheel (0,-75,0).</li>
</ul>
<p>After overloading the schema of Skate model will be look like following [<a href="#Fig5">Fig.5</a>] 
in which both front wheels are closer to each other.</p>
<table>
	<caption><a name="Fig5"></a>Fig. 5: Skate Data Model with Closer Front Wheels</caption>
	<tr>
		<td>
		<img alt="Skate Data Model with Closer Front Wheels" src="images/CAAPstOverloadingOccurrencePosition_image5.gif"/></td>
	</tr>
</table>
<p>After this we create Double Skate model in this we create two instances of Skate 
model (S1 and S2) beneath Double Skate reference.</p>
<ul>
	<li>S1Skate instance (500,0,0).</li>
	<li>S2Skate instance (0,0,0).</li>
</ul>
<p>Then we create occurrence model of the newly create Double Skate model. And finally 
we move following occurrences and achieve Double skate model as shown in [<a href="#Fig3">Fig.3</a>].</p>
<ul>
	<li>S1Skate Front Axle Assembly occurrence (150,0,0).</li>
	<li>S2Skate Rear Axle Left Wheel (0,125,0).</li>
	<li>S2Skate Rear Axle Right Wheel (0,-125,0).</li>
</ul>
<p>The following image shows final 3dmodel of the Double skate as per the schema 
shown in the [<a href="#Fig3">Fig.3</a>]</p>
<table>
	<caption>Fig. 6: Final Double Skate 3D Model</caption>
	<tr>
		<td>
		<img alt="Final Double Skate 3D Model" height="366" src="images/CAAPstOverloadingOccurrencePosition_DoubleSkate3Dmodel_image1.jpg" width="527"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstOverloadingOccurrencePosition</h3>
<p>To launch CAAPstOverloadingOccurrencePosition, you will need to set up the build 
time environment, then compile CAAPstOverloadingOccurrencePosition along with its 
prerequisites, set up the run time environment, and then execute the use case [<a href="#References">3</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstOverloadingOccurrencePosition Repository Server User 
Password SecurityCtx PLM_ExternalID V_version PLM_ExternalID_DoubleSkate PLMType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as host::name:port_number/RootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies/creates the PLM Data).</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID attribute value of the Skate Reference</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version attribute value of Skate Reference</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
</table>
<p>The required input model provided in CAAPstOverloadingOccurrencePosition.3dxml</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstOverloadingOccurrencePosition.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CAAPstOverloadingOccurrencePosition.3dxml file contains a Skate reference 
with Skate model (without 3DPart) with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: <code>CAAPstOverloadingOccurrencePosition_Skate</code></li>
	<li><code>Version</code>: ---</li>
</ul>
<p>The required three 3dShapes to see 3dmodel provided in CAAPstCreatingPositionedProductStructure.3dxml</p>
<p>Please note that to run this use case there is no need of CAAPstCreatingPositionedProductStructure.3dxml, 
only this 3dxml is provided to generate 3d model.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstCreatingPositionedProductStructure.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The CAAPstCreatingPositionedProductStructure.3dxml file contains a three 3DParts 
with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: <code>CAAPstBigWheel_Product</code></li>
	<li><code>Version</code>: ---</li>
	<li><code>PLM_ExternalID</code>: <code>CAAPstAxle_Product<a></a></code></li>
	<li><code>Version</code>: ---</li>
	<li><code>PLM_ExternalID</code><a></a>: <code>CAAPstShortBoard_Product<a></a></code></li>
	<li><code>Version</code><a></a>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstOverloadingOccurrencePosition Code</h3>
<p>The <code>CAAPstOverloadingOccurrencePosition</code> use case is located in the 
CAAPstOverloadingOccurrencePosition.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstOverloadingOccurrencePosition.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">3</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstOverloadingOccurrencePosition:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving the Objects to Create Flexibility Assembly</a></li>
	<li><a href="#Step2">Setting Flexibility to Reference</a></li>
	<li><a href="#Step3">Setting Repositionable to Instances</a></li>
	<li><a href="#Step4">Setting Repositionable to Occurrences</a></li>
	<li><a href="#Step5">Overloading the Positions on the Skate Model</a></li>
	<li><a href="#Step6">Creating Double Skate and Position S1Skate Instance</a></li>
	<li><a href="#Step7">Overloading the Positions on the Double Skate</a></li>
	<li><a href="#Step8">Remove Flexibility</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The <code>CAAPstOverloadingOccurrencePosition <a></a></code>use case begins by 
creating a session and connecting to the Input Repository. This, being the most 
fundamental prerequisite for all batch use cases, it is the first step in their 
execution.</p>
<p>In this case, we create a session &amp; connect to Repository with the Designer 
Role (since we create new PLM data). There are other parameters as well, details 
of which can be found in the &quot;Connecting to V6 Server&quot; use case article 
[<a href="#References">4</a>]. This article primarily deals with Opening and Closing 
a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the Objects to Create Flexibility Assembly</h3>
<p>To begin with use case will open the Skate Reference in the session. Then use 
case browse through the product structure and retrieves the following objects to 
create flexibility assembly thanks to
<a href="#BrowseAndRetrieveObjectsToCreateFlexibilityAssembly">BrowseAndRetrieveObjectsToCreateFlexibilityAssembly</a> 
method.</p>
<ul>
	<li>Skate Reference (<code>pSkateRef</code>).</li>
	<li>Axle Assembly Reference (<code>pAxleAssyRef</code>).</li>
	<li>Front Axle Assembly instance (<code>pFrontAxleInstance</code>).</li>
	<li>Left Wheel instance (<code>pRightWheelInstance </code>).</li>
	<li>Right Wheel Instance (<code>pLeftWheelInstance </code>).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Setting Flexibility to Reference</h3>
<p>To overload the occurrence we need to set Flexibility and Repositionable property. 
Now we have all the objects from ref inst model to set the Flexibility/Repositionable.</p>
<p>Now we will set flexibility for the Reference objects those are marked in the 
[<a href="#Fig4">Fig.4</a>]. The Rules for setting Flexibility detailed in Technical 
Article [<a href="#References">2</a>].</p>
<pre class="code">...
        
<strong>CATIPrdRepositionableDefinition</strong> * piRepositionableDefiOnAxleAssyRef = NULL;
hr = <strong>pAxleAssyRef</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIPrdRepositionableDefinition,(void**)&amp;piRepositionableDefiOnAxleAssyRef);

if (SUCCEEDED(hr))
{
   hr = piRepositionableDefiOnAxleAssyRef-&gt;<strong>SetFlexible</strong>(); 
   ...	
}

<strong>CATIPrdRepositionableDefinition</strong> * piRepositionableDefiOnSkateAssyRef = NULL;
hr = <strong>pSkateRef</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIPrdRepositionableDefinition,(void**)&amp;piRepositionableDefiOnSkateAssyRef);

if (SUCCEEDED(hr))
{
   hr = piRepositionableDefiOnSkateAssyRef-&gt;<strong>SetFlexible</strong>(); 
  ...
}
...</pre>
<p>A call to <code>CATIPrdRepositionableDefinition::SetFlexible</code> sets the 
flexibility of the Reference object.</p>
<p>In this case we are setting flexibility on Axle Assembly reference and Skate 
Assembly reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Setting Repositionable to Instances</h3>
<p>After setting Flexibility now we will set Repositionable property of following 
instances:</p>
<ul>
	<li>Left Wheel instance (<code>pRightWheelInstance</code>).</li>
	<li>Right Wheel Instance (<code>pLeftWheelInstance</code>).</li>
	<li>Front Axle Assembly instance (<code>pFrontAxleInstance</code>).</li>
</ul>
<pre class="code">...       
<strong>CATIPrdRepositionable</strong> * piRepositionableOnLeftWheelInst = NULL;
hr = <strong>pLeftWheelInstance</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIPrdRepositionable,(void**)&amp;piRepositionableOnLeftWheelInst);

if (SUCCEEDED(hr))
{
   hr = piRepositionableOnLeftWheelInst-&gt;<strong>SetAsRepositionable</strong>(); 
}

<strong>CATIPrdRepositionable</strong> * piRepositionableOnRightWheelInst = NULL;
hr = <strong>pRightWheelInstance</strong>-&gt;QueryInterface(IID_CATIPrdRepositionable,(void**)&amp;piRepositionableOnRightWheelInst);

if (SUCCEEDED(hr))
{
   hr = piRepositionableOnRightWheelInst-&gt;<strong>SetAsRepositionable</strong>(); 
   ...	
}

<strong>CATIPrdRepositionable</strong> * piRepositionableOnFrontAxleInstance = NULL;
hr = <strong>pFrontAxleInstance</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIPrdRepositionable,(void**)&amp;piRepositionableOnFrontAxleInstance);

if (SUCCEEDED(hr))
{
   hr = piRepositionableOnFrontAxleInstance-&gt;<strong>SetAsRepositionable</strong>(); 
   ...
}
...</pre>
<p>A call to <code>CATIPrdRepositionable::SetAsRepositionable</code> sets the instance 
object as Repositionable.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Repositionable to Occurrences</h3>
<p>Next we create Occurrence Model of Skate reference. And retrieve following occurrence 
object from Occurrence model thanks to
<a href="#BrowseOccurrencesModelAndRetriveOccurrence">BrowseOccurrencesModelAndRetriveOccurrence</a> 
internal global method.</p>
<p><code>BrowseOccurrencesModelAndRetriveOccurrence</code> this method browse through 
the Occurrence model and retrieves the Occurrence model for which we input occurrence 
name upto two level below.</p>
<ul>
	<li>Rear Axle Left wheel Occurrence.</li>
	<li>Rear Axle Right Wheel Occurrence.</li>
</ul>
<p>And finally we set both Occurrences of Rear axle wheels as repositionable (rear 
Axle Left Wheel and Rear axle right wheel).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Overloading the Positions on the Skate Model</h3>
<p>Now we will Overload the positions of the following occurrences from the Skate 
model.</p>
<ul>
	<li>Front Axle Left wheel occurrence (0,75,0).</li>
	<li>Rear Axle Right wheel occurrence (0,-75,0).</li>
</ul>
<p>To confirm the overloading we display Occurrence model with position before and 
after overloading, the details of this method explained in [<a href="#References">1</a>] 
use case.</p>
<pre class="code">...
<strong>CATMathTransformation</strong> mat3 = <strong>CreateTransformationMatrix</strong>(0,75,0);

<strong>CATIMovable</strong>* piMovableOnFrontAxleLeftWheel = NULL;
hr = pFrontLeftWheelOcc-&gt;<strong>QueryInterface</strong>(IID_CATIMovable,(void **)&amp;piMovableOnFrontAxleLeftWheel);
if (SUCCEEDED(hr))
{
   piMovableOnFrontAxleLeftWheel-&gt;<strong>SetPosition</strong>(mat3,NULL_var);
   ...
} 	
...
<strong>CATMathTransformation</strong> mat4 = <strong>CreateTransformationMatrix</strong>(0,-75,0);
<strong>CATIMovable</strong>* piMovableOnFrontAxleRightWheel = NULL;
hr = pFrontRightWheelOcc-&gt;<strong>QueryInterface</strong>(IID_CATIMovable,(void **)&amp;piMovableOnFrontAxleRightWheel);
if (SUCCEEDED(hr))
{
   piMovableOnFrontAxleRightWheel-&gt;<strong>SetPosition</strong>(mat4,NULL_var);
   ...
}
...</pre>
<p>A call to <code>CATIMovable::SetPosition</code> sets the position of Object with 
input matrix, here we pass NULL_var as second argument that means we are setting 
position with default context means in context with parent means Intrinsic Context 
[<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating Double Skate and Position S1Skate Instance</h3>
<p>Now we create Double Skate Model. Initially we create Double skate reference 
and instantiate two instances of Skate reference beneath it. </p>
<ul>
	<li>S1Skate Instance (<code>pS1SkateInstance</code>).</li>
	<li>S2Skate Instance (<code>pS2SkateInstance</code>).</li>
</ul>
<p>Then we reposition the S1Skate instance at (500,0,0).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Overloading the Positions on the Double Skate</h3>
<p>Before overloading we need to create occurrence model of the Double Skate model. 
Then we retrieve occurrences mentioned below.</p>
<pre class="code">...
    CATIPLMNavOccurrence_var spPLMNavOccurrenceOnDoubleSkateRef;
    CATIPrdOccurrenceMngt* occMngt2 = NULL;
    if(SUCCEEDED(<strong>CATPrdGetOccurrenceMngt</strong>(occMngt2)) &amp;&amp; (NULL!= occMngt2) )
    {
	hr = occMngt2 -&gt;<strong>GetOrCreateRootOccurrence</strong>(pDoubleSkateRef,spPLMNavOccurrenceOnDoubleSkateRef);
         ...
    }
    ...
    CATUnicodeString strFirstLevelOccInstS1Skate= "<strong>S1SkateInst</strong>" ;
    CATUnicodeString strSecondLevelOccInstFrontAxle= "<strong>FrontAxleInst</strong>" ;
    CATBaseUnknown * pS1SkateFrontAxleAssyOcc = NULL;
    hr = <strong>BrowseOccurrencesModelAndRetriveOccurrence</strong>(1, 
					      spPLMNavOccurrenceOnDoubleSkateRef, 
					      strFirstLevelOccInstS1Skate,
					      strSecondLevelOccInstFrontAxle,
					      FALSE, 
					      FALSE,
					      pS1SkateFrontAxleAssyOcc);
...</pre>
<p>A call to CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence creates a occurrence 
model of Double Skate model.</p>
<p>Next we retrieve the S1Skate front Axle inst by giving two level instance names 
as inputs &quot;S1SkateInst&quot; and "FrontAxleInst" thanks to the [<a href="#BrowseOccurrencesModelAndRetriveOccurrence">BrowseOccurrencesModelAndRetriveOccurrence</a>] 
method which retrieves the occurrence object.</p>
<p>Next we overload the positions of the Double skate model occurrences:</p>
<ul>
	<li>S1Skate Front Axle occurrence (150,0,0).</li>
	<li>S2Skate Rear Axle Left Wheel occurrence (0,125,0).</li>
	<li>S2Skate Rear Axle Right Wheel occurrence (0,-125,0).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Remove Flexibility</h3>
<p>Finally After save we unset the Flexibility of the Skate reference to see the 
effect of Flexibility. This result we don't save in output model but we could see 
these results in console output.</p>
<p>Due to this effect the values of following objects get changed following values 
written in brackets are relative values. These wheel values are the same values 
as S1Skate respective wheels.</p>
<ul>
	<li>S1Skate Front Axle occurrence (0,0,0).</li>
	<li>S2Skate Rear Axle Left Wheel occurrence (0,100,0).</li>
	<li>S2Skate Rear Axle Right Wheel occurrence (0,-100,0).</li>
</ul>
<pre class="code">...
<strong>CATIPrdRepositionableDefinition</strong> * piRepositionableDefiOnSkateAssyRefToUnset = NULL;
hr = <strong>pSkateRef</strong>-&gt;<strong>QueryInterface</strong>(IID_CATIPrdRepositionableDefinition,(void**)&amp;piRepositionableDefiOnSkateAssyRefToUnset);

if (SUCCEEDED(hr))
{
   hr = piRepositionableDefiOnSkateAssyRefToUnset-&gt;<strong>UnsetFlexible</strong>(); 
   ...
}
...</pre>
<p>A call to <code>CATIPrdRepositionableDefinition::UnsetFlexible</code> unsets 
the Flexibility of the object.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAAPstOverloadingOccurrencePosition</code> use case ends by saving 
the newly created Product model and finally closing the PLM session.</p>
<p>Since most of the batch use cases save the PLM data the [<a href="#References">6</a>] 
use case exclusively deals on this subject.</p>
<p>Also all batch use cases conclude by closing the PLM session, we have a dedicated 
article on this topic namely. &quot;Connecting to V66 Server&quot; [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BrowseAndRetrieveObjectsToCreateFlexibilityAssembly"></a>BrowseAndRetrieveObjectsToCreateFlexibilityAssembly</h2>
<p>In order to simplify the code of use cases, we have provided a method <code>BrowseAndRetrieveObjectsToCreateFlexibilityAssembly</code>.
</p>
<p>This function browse thought the input Occurrence model and Occurrence elements.</p>
<ul>
	<li>Skate Reference (<code>pSkateRef</code>).</li>
	<li>Axle Assembly Reference (<code>pAxleAssyRef</code>).</li>
	<li>Front Axle Assembly instance (<code>pFrontAxleInstance</code>).</li>
	<li>Left Wheel instance (<code>pRightWheelInstance </code>).</li>
	<li>Right Wheel Instance (<code>pLeftWheelInstance </code>).</li>
</ul>
<pre class="code">HRESULT <strong>BrowseAndRetrieveObjectsToCreateFlexibilityAssembly</strong>(CATIPLMNavReference* ipiNavRef, int iDepth,
							CATBaseUnknown * &amp;pAxleAssyRef,
							CATBaseUnknown * &amp;pFrontAxleInstance,
							CATBaseUnknown * &amp;pRearAxleInstance, 
							CATBaseUnknown * &amp;pRightWheelInstance, 
							CATBaseUnknown * &amp;pLeftWheelInstance)
{
	CATIPLMNavEntity* piNavEnt = NULL;
	HRESULT hr = E_FAIL;
	CATPLMCoreType coreType;
	CATListPtrCATIPLMNavEntity childrenList;

	hr = ipiNavRef-&gt;QueryInterface(IID_CATIPLMNavEntity, (void**) &amp;piNavEnt);
	...	
	coreType = PLMCoreInstance;
	hr = ipiNavRef-&gt;<strong>ListChildren</strong>(childrenList,1,&amp;coreType);
	int j=1;
	while (SUCCEEDED(hr) &amp;&amp; (j&lt;=childrenList.Size()))
	{
		CATIPLMNavEntity* piNavEntity = childrenList[j];
		...
		CATIPLMNavInstance* piNavInst = NULL;
		hr = piNavEntity-&gt;QueryInterface(IID_CATIPLMNavInstance,(void **)&amp;piNavInst);
		...
		CATUnicodeString strUAttrName = "PLM_ExternalID";
		CATUnicodeString strCurrentValue= "" ;

		CATICkeObject_var spCkeObjectOnInst = piNavInst;
		hr = CATCkeObjectAttrReadServices::GetValueAsString(spCkeObjectOnInst,
								    strUAttrName,
				                 		    strCurrentValue);
		...
		CATBoolean bAxleRefValuate = TRUE ; 
		if (0 == strcmp("FrontAxleInst",strCurrentValue))
		{
			pFrontAxleInstance = piNavInst;
			...
			bAxleRefValuate = FALSE ;
		}
		else if (0 == strcmp("RearAxleInst",strCurrentValue))
		{
			pRearAxleInstance = piNavInst;
			...
		}
		else if (0 == strcmp("RightWheelInst",strCurrentValue))
		{
			pRightWheelInstance = piNavInst;
			...		
		}
		else if (0 == strcmp("LeftWheelInst",strCurrentValue))
		{
			pLeftWheelInstance = piNavInst;
			...
		}
		CATIPLMNavReference* piNavRef1 = NULL;
		hr = piNavInst-&gt;GetReferenceInstanceOf(piNavRef1);
		if (FALSE==bAxleRefValuate)
		{
		    pAxleAssyRef = piNavRef1 ;
		    ...
		    bAxleRefValuate = TRUE;
		    hr = BrowseAndRetrieveObjectsToCreateFlexibilityAssembly(piNavRef1,iDepth+1+1,
									pAxleAssyRef, 
		}																						pFrontAxleInstance,
																						pRearAxleInstance, 
	...
   
	return hr;
}</pre>
<p>A call to <code>CATIPLMNavOccurrence::ListChildren</code> retrieves all Occurrence 
children's aggregated under Occurrence element and returns a list of <em>CATIPLMNavOccurrence</em> 
elements.</p>
<p>The arguments it takes, in the order of the function signature are:</p>
<ul>
	<li>A <em>CATBaseUnknown</em> * pInst, an Instance whose absolute position is 
		to be retrieved.</li>
	<li><code>char *</code> InstName, Instance name to identify it in the output 
		traces.</li>
	<li><code>int</code> levelSpece, a level count to manage spacing in output.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="BrowseOccurrencesModelAndRetriveOccurrence"></a>BrowseOccurrencesModelAndRetriveOccurrence</h2>
<p>In order to simplify the code of use cases, we have provided a method <code>BrowseOccurrencesModelAndRetriveOccurrence</code>.</p>
<p>This function browse thought the input Occurrence model and Occurrence elements 
two level down, with input given occurrence names.</p>
<pre class="code">HRESULT <strong>BrowseOccurrencesModelAndRetriveOccurrence</strong>(int level, 
				              CATIPLMNavOccurrence_var spPLMNavOccOnCurrentNode, 
					     CATUnicodeString strFirstLevelOccInst,
					     CATUnicodeString strSecondLevelOccInst,
					     CATBoolean bFirstLevelOccInstFound, 
					     CATBoolean bSecondLevelOccInstFound, 
					     CATBaseUnknown * &amp;pInstance)
{
  ...
	CATListPtrCATIPLMNavOccurrence ListChildOccurrences ;
	hr = spPLMNavOccOnCurrentNode-&gt;<strong>ListChildren</strong>(ListChildOccurrences);
	
	int i = 1 ;
	while ( SUCCEEDED(hr) &amp;&amp; ( i&lt;=ListChildOccurrences.Size() ) &amp;&amp;(NULL == pInstance)) 
	{
		CATIPLMNavOccurrence_var spCurrentChildOccurrence = ListChildOccurrences[i];
		...
		CATIAlias_var spAliasOnComponent(spCurrentChildOccurrence);
		CATUnicodeString AliasNameOfOccurrence ;
		...
		AliasNameOfOccurrence = spAliasOnComponent-&gt;<strong>GetAlias</strong>();
			
		if (0 == strcmp(<strong>strFirstLevelOccInst,AliasNameOfOccurrence)</strong>)
			bFirstLevelOccInstFound = TRUE;
		...
			
		if (0 == strcmp(strSecondLevelOccInst,AliasNameOfOccurrence))
			bSecondLevelOccInstFound = TRUE ;
	
		if (bFirstLevelOccInstFound==TRUE &amp;&amp; bSecondLevelOccInstFound ==TRUE &amp;&amp; (NULL == pInstance))
		{
			pInstance = spCurrentChildOccurrence ;
			...
			bFirstLevelOccInstFound =FALSE; 
			bSecondLevelOccInstFound =FALSE;
		}
			
		if (TRUE == bFirstLevelOccInstFound )
		{
		       hr = <strong>BrowseOccurrencesModelAndRetriveOccurrence</strong>(level + 1,
			 			spCurrentChildOccurrence, 
						strFirstLevelOccInst,
						strSecondLevelOccInst,
						bFirstLevelOccInstFound, 
						bSecondLevelOccInstFound, 
						pInstance); 
	...
	return hr;
}</pre>
<p>A call to <code>CATIPLMNavOccurrence::ListChildren</code> retrieves all Occurrence 
children's aggregated under Occurrence element and returns a list of <em>CATIPLMNavOccurrence</em> 
elements.</p>
<p>The arguments it takes, in the order of the function signature are:</p>
<ul>
	<li>A <em>CATIPLMNavOccurrence_var</em> spPLMNavOccOnCurrentNode, an occurrence 
		reference whose children's to be browsed.</li>
	<li><em>CATUnicodeString</em> strFirstLevelOccInst, Instance name to identify 
		it in the first level of occurrence model object.</li>
	<li><code>CATUnicodeString </code>strSecondLevelOccInst, Instance name to identify 
		it in the second level of occurrence model object.</li>
	<li><code>int</code> <code>pInstance</code>, a level count to manage spacing 
		in output</li>
	<li>A <code>CATBaseUnknown *</code> pInstance, an occurrence is to be retrieved.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case mainly demonstrates the overloading of the occurrences. While overloading 
the most important part is setting Flexibility /Repositionable property as per rule 
of flexibility[<a href="#Fig5">2</a>] , this also well demonstrated in this use 
case. Following are the some of the main APIs used and essential for overloading 
process [<a href="#References">7</a>].</p>
<ul>
	<li>For setting Flexibility use <code>CATIPrdRepositionableDefinition::SetFlexible</code> 
		on the product Reference.</li>
	<li>For any <em>direct</em> instances of the product Reference, a Product Instance, 
		Occurrences use <code>CATIPrdRepositionable::SetAsRepositionable</code>.</li>
	<li>For setting relative position <code>CATIMovable::SetPosition</code></li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td><a href="CAAPstUcCreatingPositionedProductStructure.htm">Creating a 
		Positioned Product Structure Model</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstTaPositioningProdInst.htm">Positioning Product Instances</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcCreationStructureProductModel.htm">Creating a Product 
		Structure Model</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcSave.htm">
		Saving PLM Components</a> </td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAPstTaProductFlexibility.htm">Product Flexibility</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Mar 2010]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
