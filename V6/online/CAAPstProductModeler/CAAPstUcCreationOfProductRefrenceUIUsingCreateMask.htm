<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Product Reference Interactively With Create Mask</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Product Reference Interactively with Create 
		Mask</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case, illustrates the steps involved in the CAA Customization 
		to create interactively a Product Reference.</p>
		<p>The Use Case depicts the significant role played by &quot;<strong>MaskCreate</strong>&quot; 
		in this interactive scenario. It is the mask which determines the list of 
		attributes displayed for end user valuation, a bare minimum prerequisite 
		for creating a Product Reference. A treatise on the Mask concept is a subject 
		of the technical article &quot;PLM Security Mask Overview&quot; [<a href="#References">4</a>].
		</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstCreatingProdrefWithPLMMaskhdrCmd Use 
				Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstCreatingProdrefWithPLMMaskhdrCmd 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstCreatingProdrefWithPLMMaskhdrCmd</a></li>
					<li><a href="#Where">Where to Find the CAAPstCreatingProdrefWithPLMMaskhdrCmd Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The Use Case teaches us:</p>
<ul>
	<li>Interactively creating a PLM Component, with a clear illustration of the 
		relevance of the Create Mask, in the process.</li>
	<li>ProductStructureUseItf service to create a Product Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstCreatingProdrefWithPLMMaskhdrCmd Use Case</h2>
<p>CAAPstCreatingProdrefWithPLMMaskhdrCmd is a use case of the
CAAProductStructure.edu framework that illustrates the 
ProductStructureUseItf framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstCreatingProdrefWithPLMMaskhdrCmd Do</h3>
<p>This use case creates a Product Reference interactively.</p>
<p>To begin with, the Use Case integrates a command as a General workshop Add-in. 
See <a href="#How">How to Launch CAAPstCreatingProdrefWithPLMMaskhdrCmd</a>.</p>
<p>On activation, the dialog panel as depicted in [<a href="#Fig1">Fig.1</a>] appears.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: Masked PLM Attribute Input Dialog for Create Mask</caption>
	<tr>
		<td>
		<img alt="Masked PLM Attribute Input Dialog for Create Mask" height="226" src="images/CAAPstCreatingProdrefWithPLMMaskCmd_image1.jpg" width="227"/></td>
	</tr>
</table>
<p>You have a full explanation of this panel in the use case [<a href="#References">5</a>], 
but to sum up this dialog box retrieves for the input knowledge type, and a given 
mask, the list of PLM Attributes , and display them in order to edit them.</p>
<p>Our panel see below, is an example for a PLMProductDS type and the Create Mask.</p>
<p>User valuates the attributes in this panel and clicks &quot;OK&quot;. A PLM Product 
Reference component is created, its attributes are modified with the dialog box 
values, and saved in the DB.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstCreatingProdrefWithPLMMaskhdrCmd</h3>
<p>To launch CAAPstCreatingProdrefWithPLMMaskhdrCmd, you will need 
to set up the build time environment, then compile CAAPstCreatingProdrefWithPLMMaskhdrCmd 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">4</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Connect</strong> to the database.</li>
	<li>Select your <strong>environment</strong>.</li>
	<li>On the <strong>Tools</strong> menu click <strong>Customize</strong> and check that the <strong>CAA 
		PLM SOA Commands</strong> (<a href="#Addin">See Addin section</a>) is existing 
		,as shown in fig above. User can set the visibility of the created toolbar 
		with the <strong>View</strong>-&gt;<strong>Toolbars</strong> option.</li>
	<li>Launch the &quot;<strong>Creating Prod Ref</strong>&quot; 
		command:
		<p><img alt="Attribute list Dialog Box" height="66" src="images/CAAPstCreatingProdrefWithPLMMaskCmd_image3.jpg" width="42"/></p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Addin Access</h3>
<p>The General Workshop add in within CATIA, is available thanks to a data extension 
of the <code>CAAPstGeneralWksAddin</code> component. This necessitates the following 
entries in the .<code>dico</code> file.</p>
<pre class="code">...
#CAA# CAAPstGeneralWksAddin       CATIWorkbenchAddin          libCAAPstGeneralWksAddin  
#CAA# CAAPstGeneralWksAddin       CATIAfrGeneralWksAddin      libCAAPstGeneralWksAddin 
...</pre>
<p>Before launching CATIA, remove #CAA# characters in the CAAProductStructure.edu.dico
in front of the above lines. These primarily indicate that the add-in 
is fundamentally a <em>CATIWorkbenchAddin</em> and a <em>CATIAfrGeneralWksAddin</em> 
implementation residing in the CAAPstGeneralWksAddin shared lib.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstCreatingProdrefWithPLMMaskhdrCmd 
Code</h3>
<p>The CAAPstCreatingProdrefWithPLMMaskhdrCmd use case is located in 
the CAAPstCommands.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstCommands.m\</code></p>
<p>This command creates instance of the dialog panel. The code of dialog panel is 
placed in CAAPLMClientAdapter.edu</p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpMaskedFilteredAttributesValueEditor.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstCreatingProdrefWithPLMMaskhdrCmd:</p>
<ol>
	<li><a href="#Step1">Retrieving the PLM Type of the Component to Create</a></li>
	<li><a href="#Step2">Instantiating the Created Dialog Box</a></li>
	<li><a href="#Step3">Creating a Product Reference</a></li>
	<li><a href="#Step4">Setting Product Reference Attribute Values</a></li>
	<li><a href="#Step5">Managing the Life Cycle of the Newly Created Product Structure</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the PLM Type of the Component to Create</h3>
<pre class="code">CATStatusChangeRC CAAPstCreatingProdrefWithPLMMaskhdrCmd::<strong>Activate</strong>(CATCommand     * iPublishingCommand,
                                                                   CATNotification * iNotification)
{
  ...
  const char* iStrPLMType=&quot;PLMProductDS&quot;;
  hr= CATCkePLMNavPublicServices::RetrieveKnowledgeType(iStrPLMType,_opiCATITypeOnProductRef);
  if ( NULL_var == _opiCATITypeOnProductRef ) 
  {
     hr = CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType(iStrPLMType,_opiCATITypeOnProductRef);
...</pre>
<p>The call to RetrieveKnowledgeType and RetrieveCustoType returns CATIType_var 
with the PLM Type String as an input provided by the user. For simplicity, we have 
limited the scope of our UC, to create only a Product Reference. so we have passed 
it as in hardcoded format. A CAA application may provide an option to choose either 
a PLMCoreReference or a <em>PLMCoreRepReference</em>, for an end-user.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Instantiating the Created Dialog Box</h3>
<p>Next, we instantiate a dialog box to create a Product Reference. The &quot;Create 
Mask&quot; associated with the Knowledge type retrieved in the earlier step, determines 
the PLM attributes displayed in the created dialog box for end-user valuation.</p>
<pre class="code">...
CATUnicodeString MaskType ("MaskCreate") ;
_pPLMClassChoiceDlg = new <strong>CAAAdpMaskedFilteredAttributesValueEditorDlg</strong>(MaskType,_opiCATITypeOnProductRef);
...</pre>
<p>The CAAPLMClientAdapter.edu defines a dialog panel to operate on a PLM Component. 
The definition of this panel is driven by the Mask input. In this case we input &quot;MaskCreate&quot;.</p>
<p>We set the current CATCommand as the Father of our newly created dialog panel. 
This is essential since all event notifications on the dialog panel are transferred 
to our CATCommand and eventually handled by actions implemented in it. Most importantly, 
on &quot;OK&quot; click event, the <code>CATCommand::Activate</code> is invoked 
which is primarily responsible for creating a Product Reference, with explicit APIs. 
The next step details this implementation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a Product Reference</h3>
<p>This use case primarily creates a Product Reference using the explicit API.</p>
<pre class="code">...
<strong>CATIPrdReferenceFactory</strong>* piPrdFactory=NULL;
hr = <strong>CATPrdFactory::CreatePrdFactory</strong>(IID_CATIPrdReferenceFactory, (void**)&amp;piPrdFactory);
...
CATIType_var spRefType;
CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
CATLISTV(CATICkeParm_var) EmptyListAttr;
hr = piPrdFactory-&gt;<strong>CreatePrdReference</strong>(spRefType, EmptyListAttr, piPLMProdOnProdRef, NULL);
...</pre>
<p>The Product Reference is created with the <em>CATIPrdReferenceFactory</em> interface. 
The <code>CreatePrdReference</code> method of this interface creates a new PLM Product 
Reference whith functional type VPMReference.</p>
<ul>
	<li>The first argument is a smart pointer to <em>CATIType</em> for this functional 
		type VPMReference.</li>
	<li>The second one is an empty list since the functional type does not require 
		additional attributes. The method calling the Init Business logic.</li>
	<li>The third one is <code>piPLMProdOnProdRef</code> is a <em>CATIPLMProducts</em> 
		interface pointer on the newly created PLM Product Reference.</li>
	<li>The last one is the environment. We have put NULL, because we use the current 
		one.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Setting Product Reference Attribute Values</h3>
<p>Then we have to modify the attributes of the just created PLM Product Reference.</p>
<pre class="code">...
CATICkeObject_var spCkeObjectOnNewProd = piPLMProdOnProdRef;
...
CATLISTV(CATICkeParm_var) iListAttrForRefValues;
_pProdRefCreationDlg-&gt;<strong>GetAttrValuesList</strong>(iListAttrForRefValues);
      
for ( int i= 1; i&lt;=iListAttrForRefValues.Size() ; i++)
{
   CATUnicodeString NameAttr = iListAttrForRefValues[i]-&gt;Name();
			 
   CATIValue_var ValueAttr = iListAttrForRefValues[i] ;
            
   <strong>CATCkeObjectAttrWriteServices::SetValue</strong>(spCkeObjectOnNewProd,NameAttr,ValueAttr);
   ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Managing the Life Cycle of the Newly Created Product Structure</h3>
<p>When the product Structure is in the Editor it's lifecycle is managed by the 
bag of editor. But when user creates Product Structure through command the object 
remains in the session but handle of the Product Reference lost as soon as command 
over. So to avoid this situation it is recommended that user should save newly created 
component. then remove that Product ref from the session using BAG.</p>
<pre class="code">...
    <strong>CATOmbLifeCycleRootsBag</strong> Bag;
    hr = Bag.InsertRoot(piPLMProdOnProdRef);
    ...	
    CATListPtrCATBaseUnknown pListToSave ;
    pListToSave.Append(piPLMProdOnProdRef);  
    <strong>CATAdpSaver saver</strong>;
    rc = <strong>saver.Save(pListToSave)</strong>;
    ...
    hr = Bag.<strong>RemoveRoot</strong>(piPLMProdOnProdRef);
...</pre>
<p>A call to <code>Save</code> method of the <code>CATAdpSaver</code> class saves 
a newly created Product Ref. Then a call to <code>CATOmbLifeCycleRootsBag::RemoveRoot</code> 
remove the Product Ref from the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This Use Case illustrates the steps involved in the CAA Customization to create 
interactively a Product Reference.</p>
<p>The Use Case finally details the ProductStructureUseItf fwk capabilities to create 
a Product Reference, with a list of attribute-value set interactively created earlier.</p>
<p>In an interactive scenario, the &quot;MaskCreate&quot; plays a significant role, 
since it determines, thus relieving an end-user of this responsibility, the list 
of attributes that an end-user has to valuate, a bare minimum input for creating 
a Product Reference. A treatise on the Mask concept is a subject of the technical 
article &quot;PLM Security Mask Overview&quot; [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllEnvironment.htm">
		Understanding PLM Environment</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcSave.htm">
		Saving PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllMask.htm">
		PLM Security Mask Overview</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAAdpUcCreatingDlgBasedOnMask.htm">
		Creating Dialog Panel Based On PLM Mask</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jul 2009]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2009]</td>
		<td>Document update due now API for Product Reference creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
