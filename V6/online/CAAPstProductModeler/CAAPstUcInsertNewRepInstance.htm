<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a 3D Shape Interactively</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a 3D Shape Interactively</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article demonstrates the creation of a 3D Shape interactively. It 
		is done through an add-in to the Product workshop in CATIA, a state chart 
		command &amp; a dialog box. This use case primarily deals only with the 
		product object creation while explanations about other domains like dialog 
		[<a href="#References">1</a>], state command [<a href="#References">2</a>] &amp; 
		Addin [<a href="#References">3</a>] can be found by referring to the CAA 
		encyclopedia.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstInsertNewRepInstanceance Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstInsertNewRepInstance Do</a></li>
					<li><a href="#How">How to Launch CAAPstInsertNewRepInstance</a></li>
					<li><a href="#Where">Where to Find the CAAPstInsertNewRepInstance 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case details the steps involved in creating 3D Shape interactively.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstInsertNewRepInstance Use Case</h2>
<p>CAAPstInsertNewRepInstance is a use case of the CAAProductStructure.edu 
framework that mainly illustrates ProductStructureUseItf framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstInsertNewRepInstance Do</h3>
<p>The CAAPstInsertNewRepInstance use case is fundamentally an interactive 
command for creating a new PLM Rep Ref, instantiating and associating it with a 
PLM Reference selected by an end user in the spec tree within CATIA UI.</p>
<p>This command is added to the &quot;<strong>CAA Product Modeler Creation</strong>&quot; 
toolbar through an add-in of VPM Physical Editor.</p>
<ul>
	<li>The &quot;<strong>CAA Product Modeler Create</strong>&quot; toolbar is as seen in 
		the<a href="#Fig1"> Fig.1</a> below and the icon
		<img alt="Insert New Rep Instance Icon" height="33" src="images/CAAPstInsertNewRepInstance_Command.gif" width="40"/> 
		represents the newly added &quot;<strong>Insert New Rep Instance</strong>&quot; command.
		<table>
			<caption><a name="Fig1">Fig.1</a></caption>
			<tr>
				<td>
				<img alt="CAA Product Modeler Create Toolbar " src="images/CAAPstProductModelCreateToolbar.png"/></td>
			</tr>
		</table>
	</li>
	<li>On activating
		<img alt="Insert New Rep Instance Icon" height="33" src="images/CAAPstInsertNewRepInstance_Command.gif" width="40"/>,
		a new dialog box titled &quot;<strong>Insert New Rep Inst Inst under Selected 
		Ref</strong>&quot; appears, as shown in <a href="#Fig2">Fig.2</a>. The input 
		model is basic: a Root with a child instance beneath it.
		<table>
			<caption><a name="Fig2">Fig.2</a> The Input Model with the Dialog Box</caption>
			<tr>
				<td><img alt="The Input Model with the Dialog Box" src="images/CAAPstInsertNewRepRefDlg.png"/>
				</td>
			</tr>
		</table>
		<p>You can observe the button &quot;<strong>Associate New Rep Instance</strong>&quot; 
		is still not pushable because we don't have choosen neitherthe reference, 
		nor a name for the instance. The first and second editors s are none editable. 
		The first one contains the identifier set attributes of the selected reference, 
		and the second will contain the identifier set of the newly created 3D Shape.</p>
	</li>
	<li>Then we have to choose the reference to aggregate the newly created 3DShape. 
		Either you choose the Root, or an instance beneath. For the later, the reference 
		of this selected instance will aggregate the newly created 3D Shape.
		<table>
			<caption><a name="Fig3">Fig.3</a> The Input Model with the Dialog Box</caption>
			<tr>
				<td>
				<img alt="The Input Model with the Dialog Box" src="images/CAAPstInsertNewRepRefDlgAfterRootSelection.png"/>
				</td>
			</tr>
		</table>
		<p>You can observe that the first editor contains the identifier set attributes 
		values of the selected reference : we have used the interface <em>CATIPLMIdentifierSet</em>
		to display the identifier set. Note that the &quot;<strong>Associate 
		New Rep Instance</strong>&quot; is still not pushable since we don't have 
		enter a name for the new Rep Instance to create.</p>
	</li>
	<li>We enter a name for the 3D Shape Instance
	<table>
		<caption><a name="Fig4"></a>Fig.4 The Instance Named is Selected</caption>
		<tr>
			<td>
			<img alt="The Instance Named is Selected" src="images/CAAPstInsertNewRepRefDlgAllEnter.png"/></td>
		</tr>
		</table>
		<p>The &quot;<strong>Associate New Rep Instance</strong>&quot; button becomes 
		pushable.</p>
	</li>
	<li>On pushing the &quot;<strong>Associate New Rep Instance</strong>&quot;:
		<table>
			<tr>
				<td>
				<img alt="New 3D Shape" src="images/CAAPstInsertNewRepRefDlgCreation.png"/>
				</td>
			</tr>
		</table>
		<p>You can observe above the Root reference an instance of 3D Shape. The &quot;<strong>Inserted 
		New Ref Ref</strong>&quot; editor contains the identifier set attribute 
		values of the new 3D Shape (<code>Representation57412</code>).</p>
	</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="How"></a>How to Launch CAAPstInsertNewRepInstance</h2>
<p>To launch CAAPstInsertNewRepInstance, you will need to set 
up the build time environment, then compile CAAPstInsertNewRepInstance 
along with its prerequisites, set up the run time environment, and then execute 
the use case [<a href="#References">5</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><strong>Connect</strong> to the database.</li>
	<li>Select your <strong>environment</strong>.</li>
	<li><strong>Create</strong> a simple Product Model as seen in [<a href="#Fig2">Fig.2</a>].</li>
	<li>On the <strong>Tools</strong> menu click <strong>Customize</strong> and check that the &quot;<strong>CAA 
		Product Modeler Create</strong>&quot; (See <a href="#Addin">Add-in Access</a>) 
		is existing, as shown in <a href="#Fig1">Fig.1</a> above. User can set 
		the visibility of the created toolbar in the <strong>View</strong>-&gt;<strong>Toolbars</strong> option.</li>
</ul>
<p>The <a href="#What">What Does CAAPstInsertNewRepInstance Do</a> section provides 
further details on the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The Product Structure add in to the Product workshop within CATIA, is available 
thanks to a data extension of the CAAPstProductWksAddin component. 
This necessitates the following entries in the .dico file.</p>
<pre class="code">...
#CAA#CAAPstProductWksAddin CATIWorkbenchAddin libCAAPstProductWksAddin
#CAA#CAAPstProductWksAddin CATIPRDWorkshopAddin libCAAPstProductWksAddin
...</pre>
<p>Before launching CATIA, uncomment the above lines in the CAAProductStructure.edu.dico file. 
These primarily indicate that the add-in is fundamentally a <em>CATIWorkbenchAddin</em> 
and a <em>CATIPrdWorkshopAddin</em> implementation done in the
CAAPstProductWksAddin shared lib.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstInsertNewRepInstance Code</h3>
<p>The CAAPstInsertNewRepInstance use case is made of several 
classes/files located in the CAAPstCommands.m module of the CAAProductStructure.edu 
framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstCommands.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>CAAPstInsertNewRepInstanceDlg.cpp 
		is an implementation of a dialog class to retrieve the inputs for a PLM 
		Rep Ref creation.</li>
	<li>CAAPstInsertNewRepInstanceCmd.cpp 
		is the state command implementation, which drives this Use case through 
		its various states.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstProductWksAddin.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">5</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstInsertNewRepInstance use case:</p>
<ol>
	<li><a href="#Step1">Restricting Either a Root Ref or Its Child Instance Selection in the Spec Tree</a></li>
	<li><a href="#Step2">Retrieving the PLM Reference from an End-User Selection</a></li>
	<li><a href="#Step3">Creating Different Types of PLM Rep Ref with Implicit APIs</a></li>
	<li><a href="#Step4">Instantiating the New PLM Rep Ref</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Restricting Either a Root Ref or Its Child Instance Selection in the Spec Tree</h3>
<p>Here is an extract of the state command, the <em>CAAPstInsertNewProductCmd</em> 
class.</p>
<p>The objective here is to primarily create a dialog agent [<a href="#References">6</a>] 
which restricts the user to select either only the Root Reference or a child Instance 
beneath it in a Product model.</p>
<pre class="code"><strong>CATPathElementAgent* _daPathEltPLMRefOrInst;</strong>
_daPathEltPLMRefOrInst= new <strong>CATPathElementAgent</strong>(&quot;SelPLMRefOrInst&quot;);
_daPathEltPLMRefOrInst-&gt;<strong>AddElementType</strong>(IID_CATIPLMNavOccurrence);
...</pre>
<p>Here the dialog agent, <code>_daPathEltPLMRefOrInst</code>, is a <em>CATPathElementAgent</em> class instance enabling to select object in the 
specification tree or in a viewer.</p>
<p>The <code>CATPathElementAgent::AddElementType</code> 
method enables only objects of pre-determined types to be selected. This type could 
be specified by passing it as an argument to this routine.</p>
<p>In this case, we pass <code>IID_CATIPLMNavOccurrence</code> to 
the <code>AddElementType</code> method thus restricting the user to select 
only those entities in a Product model which implement the <code>IID_CATIPLMNavOccurrence</code> 
Interface. Interactively, do not forget that it is the occurrence model [<a href="#8">8</a>] 
which is displayed. Using <em>CATIPLMNavOccurrence</em>, you are 
sure to only select occurrences of reference or instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the PLM Reference from an End-User Selection</h3>
<p>The first step is to retrieve the entity selected by the user from the dialog 
agent.</p>
<pre class="code">...
<strong>CATPathElement * pathmodel = _daPathEltPLMRefOrInst-&gt;GetValue();</strong>
CATBaseUnknown * pObj = NULL ;
if ( ( NULL != pathmodel) &amp;&amp; (pathmodel-&gt;GetSize()&gt; 0) )
{
   <strong>pObj = (*pathmodel)[pathmodel-&gt;GetSize()-1];</strong>
...</pre>
<p>The <code>CATPathElementAgent::GetValue</code> 
retrieves the entity selected. This is returned as a <em>CATPathElement</em> 
object which holds the selected entity with all the instances along its path, beginning 
with Root.</p>
<p>Since we are interested only in the last element of this list, it is retrieved 
as a <em>CATBaseUnknown</em> * type.</p>
<p>This selected element is an occurence - implementing <em>CATIPLMNavOccurrence</em> 
- (of a reference (the root) or an instance). The following code retrieves the reference 
of the selected occurence.</p>
<pre class="code"> ...
// The reference where the new instance (of reference) will be aggregated
<strong>CATIPLMProducts</strong>* pPLMProdOnSelEnt = NULL;

// retrieve the reference related to the selected occurrence
<strong>CATIPLMNavOccurrence</strong> *pNavOccurenceObj = NULL ;
HRESULT rc = pObj-&gt;QueryInterface(IID_CATIPLMNavOccurrence, (void**) &amp;pNavOccurenceObj);
if ( SUCCEEDED(rc) )
{
   CATIPLMNavReference *pReference = NULL ;
   pNavOccurenceObj-&gt;<strong>GetRelatedReference</strong>(pReference);
   if ( NULL != pReference )
   {
      pReference-&gt;QueryInterface(IID_CATIPLMProducts, (void**) &amp;pPLMProdOnSelEnt);
  ...</pre>
<p>The <code>GetRelatedMethod</code> of the <em>CATIPLMNavOccurrence</em> interface 
retrieves the reference (in the reference/isntance model) associated with the selected 
occurrence. When you select the root , the occurence represents a reference, so 
the method immediatly retrieves the root reference, when you select an instance, 
the occurence represents a instance, so the method retrieves the reference which 
has been instantiated to create the instance associated with the occurence.</p>
<p>Then we can update the dialog box.</p>
<pre class="code">...
if ( NULL != pPLMProdOnSelEnt )
{
   _pCAAPstInsertNewRepInstanceCmdDlg-&gt;<strong>DisplaySelectedProdRef</strong>(pPLMProdOnSelEnt);
}
...</pre>
<p>The <strong>Identifier set</strong> attribute value of either the Root reference or the 
reference retrieved from the selected instance is displayed in the dialog box by 
invoking the CAAPstInsertNewProductDlg::DisplaySelectedProdRef method.</p>
<p><code>_pCAAPstInsertNewRepInstanceCmdDlg</code> is our dialog object 
(<em>CAAPstInsertNewRepInstanceDlg</em> instance), a data member of 
the <em>CAAPstInsertNewRepInstanceCmd</em> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating Different Types of PLM Rep Ref with Implicit APIs</h3>
<p>In the previous step, the PLM Ref selected by an end-user was updated in the dialog 
box. In addition the user also inputs the Rep Inst name and the type of Rep Ref 
(3D Shape or a Techno Rep). Having provided all inputs, when the user finally clicks 
on the &quot;Associate new Rep Inst&quot; button, the event associated with this 
click follows.</p>
<pre class="code">...
<strong>CATIPrdRepresentationReferenceFactory</strong> *piPsiRepRefFactory = NULL;
HRESULT hr = <strong>CATPrdFactory</strong>::CreatePrdFactory(IID_CATIPrdRepresentationReferenceFactory,
					       (void**)&amp;piPsiRepRefFactory);
...</pre>
<p>The object <em>CATPrdFactory</em> is a factory of factories for Product: it can 
create and return an interface on the requested factory. Here we need the one to 
create PLM product Representation Reference. This factory is handled with the
<em>CATIPrdRepresentationReferenceFactory</em> interface.</p>
<pre class="code">...
CATIType_var spRepType;
CATCkePLMNavPublicServices::RetrieveKnowledgeType(&quot;3DShape&quot;, spRepType);
CATListValCATICkeParm_var EmptyListAttr;
CATIPsiRepresentationReference* piRepRef = NULL;
hr = piPsiRepRefFactory-&gt;<strong>Create3DShape</strong>(spRepType, EmptyListAttr, piRepRef, NULL);	
...</pre>
<p>The 3D Shape is created with the <em>CATIPrdRepresentationReferenceFactory</em> 
interface. The <code>Create3DShape</code> method of this interface creates a new 
3DShape whose the functional type is DS one.</p>
<ul>
	<li>The first argument is a smart pointer to <em>CATIType</em>, retrieved thanks 
		to the <code>CATCkePLMNavPublicServices::RetrieveKnowledgeType</code> static 
		method. A representation reference handled using a <em>CATIPsiRepresentationReference</em> 
		pointer is of the 3DShape PLM type, or from a derived type, if any.</li>
	<li>The second one is an empty list since the functional type does not require 
		additional attributes. The method calling the Init Business logic.</li>
	<li>The third one is <code>piRepRef</code>, a <em>CATIPsiRepresentationReference</em> 
		interface pointer on the newly created 3D Shape.</li>
	<li>The last one is the environment, the value is NULL, the method will use 
		the current one.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Instantiating the New PLM Rep Ref</h3>
<p>The final step involves instantiating the newly created Rep Ref and associating 
it with the PLM Reference selected initially by an end-user in the spec tree within 
CATIA.</p>
<pre class="code">...
<strong>CATIPLMRepInstances</strong> *piRepInst = NULL;
hr = _pCurrentSelRef-&gt;QueryInterface(IID_CATIPLMRepInstances,(void**)&amp;piRepInst);
if (SUCCEEDED(hr))
{
   CATUnicodeString iRepInstName(_pInsertedInstEditor-&gt;GetText());
   CATBaseUnknown* oRepInstance = NULL;
   hr = piRepInst-&gt;<strong>AddRepInstance</strong>(iRepInstName,piRepRef,oRepInstance);
}
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use cases has demonstrated the invocation of the <em>CATIPrdRepresentationReferenceFactory</em>
interface for creation of 3D Shape.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADlgDialog/CAADlgTaOverview.htm">
		Dialog Overview</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">
		Getting Started with State Dialog Commands</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">
		Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegUcSampleSelection.htm">
		Managing Selection</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllRepresentation.htm">
		PLM Representation References</a></td>
	</tr>
	<tr>
		<td>[<a name="8">8</a>]</td>
		<td><a href="CAAPstTaProductModels.htm">Understanding Product 
		Models</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2008]</td>
		<td>Document updated due to occurrence</td>
	</tr>
	<tr>
		<td>Version: <strong>3</strong> [Oct 2010]</td>
		<td>Document updated due to new API</td>
	</tr>
</table>
		<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
