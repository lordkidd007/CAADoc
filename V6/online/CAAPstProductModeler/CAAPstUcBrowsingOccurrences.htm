<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a Product Model's Occurrences</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Product Model's Occurrences</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article details the CAAPstBrowsingOccurrences use case. This use 
		case shows how to navigate on the Product occurrence model. You will retrieve 
		the reference and the instance (of the reference/instance model) of each 
		occurrence. You'll also retrieved the aggregated Rep Instances and Rep References 
		associated with those.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstBrowsingOccurrences Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstBrowsingOccurrences Do</a></li>
					<li><a href="#How">How to Launch CAAPstBrowsingOccurrences</a></li>
					<li><a href="#Where">Where to Find the CAAPstBrowsingOccurrences 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The goal of this use case is to illustrate how a Product model as seen on a 3D 
viewer (<a href="#Fig1">Fig. 1</a>), can be navigated. More precisely, you will 
see how to:</p>
<ul>
	<li>Create the occurrence model.</li>
	<li>Go through all the occurrences using the <em>CATIPLMNavOccurrence</em> interface.</li>
	<li>Retrieve the instance and the reference related to an occurrence thanks 
		to the same interface.</li>
	<li>Finally navigate for the Rep Instances beneath and the associated Rep References, 
		using the standard navigation APIs.</li>
</ul>
<p>If you are interested in a more complete Product model navigation, please refer 
to [<a href="#References">2</a>] and/or [<a href="#References">3</a>].</p>
<p>In this article, we use the <em>CATIPLMIdentifierSet</em> interface to obtain the 
name of the PLM Entities involved. Other interfaces can also be used - this is addressed 
in a separate use case [<a href="#References">7</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstBrowsingOccurrences Use Case</h2>
<p><code>CAAPstBrowsingOccurrences</code> is a use case of the <code>CAAProductStructure.edu</code> 
framework that illustrates <code>ProductStructureInterfaces</code> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstBrowsingOccurrences Do</h3>
<p><code>CAAPstBrowsingOccurrences</code> is a &quot;batch&quot; that opens a Product 
Reference and then prints out all the occurrences, associated instances, references, 
rep instances and rep references forming the structure of the product. For an in-depth 
explanation of the Product model and its constituents (reference, first instance, 
occurrence, etc.), please consult [<a href="#References">2</a>].</p>
<p>Below is an example of output obtained with the <code>CAAPstBrowsingProductModel
</code>model as displayed in <a href="#Fig1">Fig. 1</a>.</p>
<pre class="code"> CAAPstBrowsingOccurrences started
	...
	Opened CAAPstBrowsingProductModel_Root---
	Occurrence Model creation successful

	Browsing occurrences of CAAPstBrowsingProductModel_Root---
	&lt;occ: CAAPstBrowsingProductModel_Root --- IN_WORK&gt;
	     &lt;occ: CAAPstBrowsingProductModel_Child.1&gt; (its inst: &lt;CAAPstBrowsingProductModel_Child.1&gt;, its ref: &lt;CAAPstBrowsingProductModel_Child---&gt;)
	(aggregated rep inst: &lt;ChildRepresentation.1&gt;, associated rep ref: &lt;ChildRepresentation&gt;
	(aggregated rep inst: &lt;CAAPstBrowsingProductModel_Representation.1&gt;, associated rep ref: &lt;CAAPstBrowsingProductModel_Representation&gt;
	...
 CAAPstBrowsingOccurrences ended</pre>
<p>Here's the same Product as displayed on-screen. You'll find the Rep Instances 
in the hierarchy are also output in the traces above, for the simple reason that 
we are browsing not only for the Occurrences in this product hierarchy, but also 
for the Rep Instances and associated Rep References, beneath.</p>
<table>
	<caption><a name="Fig1"></a>Fig 1: The CAAPstBrowsingProductModel</caption>
	<tr>
		<td><img alt="CAAPstBrowsingProductModel" src="images/CAAPstBrowse_Fig1.jpg"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstBrowsingOccurrences</h3>
<p>To launch <code>CAAPstBrowsingOccurrences</code>, you will need to set up the 
build time environment and compile the <code>CAAPstBrowsingOccurrences.m</code> 
module along with its prerequisites [<a href="#References">1</a>]. Once it's built, 
set up the run time environment and execute the following command:</p>
<p><code>mkrun -c &quot;<em>CAAPstBrowsingOccurrences Repository Server User Password SecurityCtx ExternalID Version PLMType</em>&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context ( Role. Organization. Project) 
		. Choose Role as Reviewer ( as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation 
		Reference be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code>V_version</code> of a PLM Reference or PLM Representation 
		Reference</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A PLMType</td>
	</tr>
</table>
<p>You can execute this use case with any Product reference or you can import a 
3D XML file supplied in the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstBrowsingProductModel_BrowsePublications.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes, 
used to illustrate this article (see <a href="#Fig1">Fig. 1</a>.):</p>
<ul>
	<li><code><strong>PLM_ExternalID</strong></code>: <code>CAAPstBrowsingProductModel_Root</code>.</li>
	<li><code><strong>Version</strong></code>: ---.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstBrowsingOccurrences Code</h3>
<p>The CAAPstBrowsingOccurrences use case is made of a single file located in the 
CAAPstBrowsingOccurrences.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstBrowsingOccurrences.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstBrowsingOccurrences:</p>
<ol>
	<li><a href="#Step1">Opening the Product Reference</a></li>
	<li><a href="#Step2">Retrieving the Root Occurrence</a></li>
	<li><a href="#Step3">Iterating on the Occurrences</a></li>
	<li><a href="#Step4">Retrieving the Occurrence's Name</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Product Reference</h3>
<p>The Product reference is opened by calling <code>CompleteAndOpen</code> method 
of <em>CATAdpOpener</em> class (Please refer to [<a href="#References">44</a>] for 
further details.)</p>
<pre class="code">...
  <strong>CATIPLMNavReference</strong> * piPLMNavRefOnRoot = NULL;
  <strong>CATOmbLifeCycleRootsBag</strong> Bag;
  <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
  <strong>CATAdpOpener</strong> opener(Bag,params);
  rc= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;piPLMNavRefOnRoot);
...</pre>
<p>As you can see, the Product reference is retrieved as a pointer to its <em>CATIPLMNavReference</em>
interface. By specifying the last argument as TRUE, we chose to load the Product 
Reference in Authoring Mode, meaning the Product Model gets loaded inclusive of 
the Rep Ref and Rep Instances. (in addition to the Product References and Instances, 
which get loaded by default). This Product reference is used in the next step for 
retrieving its Root occurrence.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Root Occurrence</h3>
<p>Once the Root Product reference is opened, we look for its occurrence root. It 
is the different object.</p>
<pre class="code">...   
  CATIPLMNavOccurrence_var spPLMNavOccurrenceOnRoot;
  <strong>CATIPrdOccurrenceMngt</strong>* occMngt = NULL;
  if(SUCCEEDED(CATPrdGetOccurrenceMngt(occMngt)) &amp;&amp; occMngt)
  ...
  rc = occMngt-&gt;<strong>GetOrCreateRootOccurrence(piPLMNavRefOnRoot,spPLMNavOccurrenceOnRoot);</strong>
...</pre>
<p>We have an interface <em>CATIPrdOccurrenceMngt</em> dedicated for managing the 
occurence. Making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
returns the root occurence corresponding to the Product Reference, provided as an 
input to this api. This input Product reference is the one retrieved in the previous 
step [<a href="#Step1">#</a>].Once the root occurrence is retrieved, it's passed 
to the <code>BrowseOccurrences</code> function which does all the work.</p>
<pre class="code">....
  <strong>BrowseOccurrences</strong>(0, spPLMNavOccurrenceOnRoot, PrintOccurrenceInformation);
...</pre>
<p>Let's detail the <code>BrowseOccurrences</code> function in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Iterating on the Occurrences</h3>
<p>The core of the use-case is the recursive <code>BrowseOccurrences</code> function 
which takes three arguments:</p>
<ul>
	<li>The current depth level in the product structure, with 0 being the top.</li>
	<li>The current occurrence as a pointer to its <em>CATIPLMNavOccurrence</em> interface.</li>
	<li>A pointer to a function that prints the occurrence (so as to separate the 
		browsing part from the printing ones).</li>
</ul>
<pre class="code">...
  HRESULT <strong>BrowseOccurrences</strong>(int level, CATIPLMNavOccurrence_var spPLMNavOccOnCurrentNode,
                            HRESULT (*print_function)(CATIPLMNavOccurrence_var, int))
 {
...</pre>
<p>The first thing to do is to print the current occurrence's name by calling the 
function specified as input: <code>print_function</code>.</p>
<pre class="code">...
    HRESULT rc = <strong>print_function</strong>(spPLMNavOccOnCurrentNode, level);
...</pre>
<p>The <code>print_function</code> prints the product hierarchy in the console. 
It retrieves the instance and reference associated with the Occurrence. It further 
seeks the aggregated Rep Instance and the associated Rep Reference beneath the Product 
References in the hierarchy.</p>
<p>The child occurrences can be retrieved (on a given interface) using the <code>
ListChildren</code> method of the <em>CATIPLMNavOccurrence</em> interface.</p>
<pre class="code">...    
    CATListPtrCATIPLMNavOccurrence ListChildOccurrences ;
    rc = spPLMNavOccOnCurrentNode-&gt;<strong>ListChildren</strong>(ListChildOccurrences);
...	</pre>
<p><code>ListChildOccurrences</code> contains all the children of the current occurrence 
(<code>spPLMNavOccOnCurrentNode</code>). The returned list is a <em>CATIPLMNavOccurrence</em> 
interface pointer list.</p>
<p>All left to do is to recursively call <code>BrowseOccurrences</code> with every 
child with an incremented the depth level:</p>
<pre class="code">...
  int i = 1 ;
  while ( SUCCEEDED(rc) &amp;&amp; ( i &lt;= ListChildOccurrences.Size() ) ) 
  {
    CATIPLMNavOccurrence_var spCurrentChildOccurrence = ListChildOccurrences[i];
    if ( NULL_var != spCurrentChildOccurrence )
      ...
      rc = <strong>BrowseOccurrences</strong>(level + 1,spCurrentChildOccurrence, print_function);
      ...
      i++ ;
...		</pre>
<p>Now let's see how each occurrence's name can be obtained.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Occurrence's Name</h3>
<p>Whenever a occurrence is encountered, a function is called to handle the printing. 
This function takes two arguments:</p>
<ol>
	<li>An occurrence as its <em>CATIPLMNavOccurrence</em> interface pointer.</li>
	<li>The depth level where 0 is the topmost and corresponds to the root occurrence.</li>
</ol>
<p>Once again, the scope of this article is limited to the print function using 
the <em>CATIPLMIdentifierSet</em> interface (for the other print functions, please 
refer to [<a href="#References">7</a>]). Because this interface is only implemented 
on the reference and the first instance, we choose to print the occurrence by falling 
back on its first instance and reference.</p>
<p>The identifier set defines all the attributes of a PLM component that help differentiate 
it. Please refer to [<a href="#References">6</a>] for more details on attributes.</p>
<p>First we retrieve the identifier set of the instance associated with the current 
occurrence.</p>
<pre class="code">   CATUnicodeString InstanceIdSet;
  if ( level !=0 ) 
  {
    CATIPLMNavInstance *pInstance = NULL ;
    rc = spPLMNavOccurrence-&gt;<strong>GetRelatedInstance</strong>(pInstance);

    if ( SUCCEEDED(rc)  )
    {
      CATIPLMIdentifierSet_var spPLMIdSetOnInst = pInstance ;
      if ( NULL_var != spPLMIdSetOnInst )
      {
        rc = spPLMIdSetOnInst-&gt;<strong>GetIdentifierSet</strong>(InstanceIdSet);
      } else
        rc = E_FAIL ;

      pInstance-&gt;Release();
      pInstance = NULL;
    }
  } else
    InstanceIdSet = "not valid for the root" ;</pre>
<p>First we retrieve the identifier set of the reference associated with the current 
occurrence.</p>
<pre class="code">   CATUnicodeString ReferenceIdSet;
  
  CATIPLMNavReference *pIReference = NULL ;
  rc = spPLMNavOccurrence-&gt;<strong>GetRelatedReference</strong>(pIReference);
  ...
  CATIPLMIdentifierSet_var spPLMIdSetOnRef = pIReference ;
  if ( NULL_var != spPLMIdSetOnRef )
  {
    rc = spPLMIdSetOnRef-&gt;<strong>GetIdentifierSet</strong>(ReferenceIdSet);
  } else
    rc = E_FAIL ;
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates the usage of the <em>CATIPrdOccurrenceMngt</em> interface, 
to manage the occurrence model. Further , the use case has shown that with the
<em>CATIPLMNavOccurrence</em> interface, one can traverse the whole Product structure 
and browse all the occurrences and the Rep Instances/References as it's displayed 
on-screen. Using <code>GetRelatedInstance</code> and <code>GetRelatedReference</code> 
methods, one can retrieve an occurrence's instance and reference respectively. Once 
the Reference is retrieved, the standard navigation APIs enable us to retrieve the 
rep instances/refereneces aggregated beneath each Product Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>Referencess</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstTaProductNavigate.htm">Product Structure Navigation</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcBrowsingProductModel.htm">Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>Product Components Naming</td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>PLM Environment and Customization</td>
	</tr>
	<tr>
		<td>[7]]</td>
		<td><a href="CAAPstUcDisplayingOccurrences.htm">Obtaining Product Model 
		Occurrences' Names</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sept 2008]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
