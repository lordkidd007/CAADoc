<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Synchronizing Occurrences</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Synchronizing Occurrences</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article details the CAAPstSynchronizingOccurrences use case. This 
		use case shows how to synchronize the Product occurrence model from its 
		Reference/Instance model.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstSynchronizingOccurrences Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstSynchronizingOccurrences 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstSynchronizingOccurrences</a></li>
					<li><a href="#Where">Where to Find the CAAPstSynchronizingOccurrences 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The goal of this use case is to illustrate how a Product occurrence model can 
be synchronized. More precisely, you will learn:</p>
<ul>
	<li>How to create the occurrence model.</li>
	<li>How some methods synchronize automatically the occurrence model.</li>
	<li>How to synchronize explicitly the occurrence model.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstSynchronizingOccurrences Use Case</h2>
<p>CAAPstSynchronizingOccurrences is a use case of the CAAProductStructure.edu framework 
that illustrates ProductStructureInterfaces and ProductStructureUseItf framework 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstSynchronizingOccurrences Do</h3>
<p>CAAPstSynchronizingOccurrences is a &quot;batch&quot; which illustrates the end-user 
the various ways(implicit + explicit) to synchronize the occurrence model.</p>
<p>The use case begins with creating a Product Structure. The Skate Reference/Instance 
Model created is as shown below.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: The Skate Reference/Instance Model</caption>
	<tr>
		<td>
		<img alt="Skate Reference/Instance Model" src="images/CAAPstUcSynchronizingOccurrences_Skate-RefInstModel.jpg"/></td>
	</tr>
</table>
<p>Next, we try to count the wheel reference occurrence under the Skate reference, 
this will output 0, since the occurrence model is not yet created. So, the use case 
creates the Skate Occurrence model from its Reference/Instance model using <code>
CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code>.</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: The Skate Occurrence Model</caption>
	<tr>
		<td>
		<img alt="Skate Occurrence Model" src="images/CAAPstUcSynchronizingOccurrences_SkateOccModel.jpg"/></td>
	</tr>
</table>
<p>The Skate occurrence model is created as shown above. Now, if we try to count 
the Wheel reference occurrence under the skate reference, the output will be 4, 
this output is obvious since the occurrence model is just created.</p>
<p>The use case then illustrates the following two different ways for the occurrence 
model synchronization:</p>
<ol>
	<li><a href="#Way1">How Some Methods Automatically Synchronize the Occurrence 
		Model</a></li>
	<li><a href="#Way2">How to Explicitly Synchronize the Occurrence Model</a></li>
</ol>
<p>The scenarios are illustrated on the Skate Reference/Instance model [<a href="#Fig1">Fig.1</a>] 
above.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Way1"></a>How Some Methods Automatically Synchronize the Occurrence 
Model</h4>
<p>In this scenario, the use case demonstrates the usage of some methods which synchronize 
automatically the occurrence model. These methods belongs to the interfaces <em>
CATIPrdOccurrenceMngt</em> and <em>CATIPLMNavOccurrence</em>.</p>
<p>Below are the three methods which synchronize the occurrence model automatically:</p>
<ol>
	<li><a href="#GetRootOccurrenceAPI">CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</a></li>
	<li><a href="#ListChildrenAPI">CATIPLMNavOccurrence::ListChildren</a></li>
	<li><a href="#GetOccurrenceAPI">CATIPrdOccurrenceMngt::GetOccurrence</a></li>
</ol>
<p>The use case illustrates these three methods.</p>
<p>For these three methods, we have designed the scenario which demonstrates the 
end user that these methods synchronize the occurrence model automatically. In all 
of these scenarios, the user first edits the Reference/Instance model [<a href="#Fig1">Fig.1</a>], 
uses the methods (listed above) and then checks the occurrence model to determine 
whether it is synchronized or not.</p>
<ul>
	<li><a name="GetRootOccurrenceAPI"></a><strong>Scenario 1</strong> - Retrieve 
		the Skate occurrence model from the root (uses <strong>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</strong>):<p>
		Prior to this step, the count of wheel reference occurrence under the Skate 
		reference is <strong>4</strong>.</p>
		<p>The end user then edits the Skate Reference/Instance model by adding 
		a new wheel instance (<strong>Wheel instance 3</strong>) under the Axle 
		Reference. Then, we retrieve the skate occurrence model from the root using
		<code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code>.</p>
		<p>Now, if we try to count the wheel reference occurrence under the skate 
		reference, it outputs <strong>6</strong>, which proves that <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
		API not only retrieves the root occurrence model but it also synchronizes 
		the occurrence model implicitly.</p>
	</li>
	<li><a name="ListChildrenAPI"></a><strong>Scenario 2</strong> - Retrieve the 
		count of leaves of the Skate occurrence model ( uses <strong>CATIPLMNavOccurrence::ListChildren</strong>):
		<p>Prior to this step, the count of wheel reference occurrence under the 
		Skate reference is <strong>6</strong>.</p>
		<p>The user again edits the Skate Reference/Instance model by adding a new 
		wheel instance ( <strong>Wheel Instance 4</strong>) under the Axle reference.The 
		user further counts the leaves of Skate occurrence model . In this process 
		, it makes use of the <code>CATIPLMNavOccurrence::ListChildren</code> API 
		to list the various child occurrences.</p>
		<p>Now, if we try to count the wheel reference occurrence under the skate 
		reference , it outputs <strong>8</strong>, which proves that <code>CATIPLMNavOccurrence::ListChildren</code> 
		API not only retrieves the list of direct child occurrences but it also 
		synchronizes the occurrence model implicitly.</p>
	</li>
	<li><a name="GetOccurrenceAPI"></a><strong>Scenario 3</strong> - Retrieve the 
		Rear Axle occurrence( uses <strong>CATIPrdOccurrenceMngt::GetOccurrence</strong>):
		<p>Prior to this step, the count of wheel reference occurrence under the 
		Skate reference is <strong>8</strong>.</p>
		<p>The user again edits the Skate Reference/Instance model by adding a new 
		wheel instance ( <strong>Wheel Instance 5</strong>) under the Axle reference. 
		The user further retrieve the Rear Axle occurrence using <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
		API.</p>
		<p>Now, if we try to count the wheel reference occurrence under the skate 
		reference , it outputs <strong>10</strong> , which proves that <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
		API not only computes the occurrence , but it also synchronizes the occurrence 
		model implicitly.</p>
		<p><strong>Note</strong>- The objective of this step is to show that , whatever 
		occurrence the user retrieves using the <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
		API , the occurrence model is updated. Retrieving the Rear Axle occurrence 
		is just an example which is used to illustrate this objective.</p>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Way2"></a>How to Explicitly Synchronize the Occurrence Model</h4>
<p>In this case, we synchronizes the occurrence model by making an explicit call 
to <code>CATIPrdOccurrenceMngt::Synchronize</code>.</p>
<p>Prior to this step, the count of wheel reference occurrence under the Skate reference 
is <strong>10</strong>.</p>
<p>The user again edits the Skate Reference/Instance model by adding a new wheel 
instance ( <strong>Wheel Instance 6</strong>) under the Axle reference.</p>
<p>Now, if we try to count the wheel reference occurrence under the skate reference 
, it outputs <strong>10</strong> and the count of the recently added wheel instance 
(<strong>Wheel Instance 6</strong>) occurrence under Skate Reference ,it outputs
<strong>0</strong>, which shows that the occurrence model is not synchronized .</p>
<p>The user now makes an explicit call to the <code>CATIPrdOccurrenceMngt::Synchronize</code> 
API.</p>
<p>Further, if we try to count the wheel reference occurrence under the skate reference 
, it outputs <strong>12</strong> and the count of the recently added wheel instance 
(<strong>Wheel Instance 6</strong>) occurrence under Skate Reference, it outputs
<strong>2</strong>, which shows that the occurrence model is synchronized. This 
concludes that the call to the <code>CATIPrdOccurrenceMngt::Synchronize</code> synchronizes 
the occurrence model explicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstSynchronizingOccurrences</h3>
<p>To launch <code>CAAPstSynchronizingOccurrences</code>, you will need to set up 
the build time environment and compile the <code>CAAPstSynchronizingOccurrences 
.m</code> module along with its prerequisites [<a href="#References">1</a>]. Once 
it's built, set up the run time environment and execute the following command:
</p>
<p><code>mkrun -c &quot;CAAPstSynchronizingOccurrences Repository Server User Password SecurityCtx&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as host::<em> name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case create the PLM Data)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstSynchronizingOccurrences Code</h3>
<p>The <code>CAAPstSynchronizingOccurrences</code> use case is made of a single 
file located in the CAAPstSynchronizingOccurrences.m module of the CAAProductStructure.edu 
framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstSynchronizingOccurrences.m\</code></p>
<p>And functions defined in the <code>CAAAdpUtilities.m</code> module of the
<code>CAAPLMClientAdapter.edu</code> framework:</p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstSynchronizingOccurrences:</p>
<ol>
	<li><a href="#ProductCreation">Creating the Skate Product Structure</a>
		<ul>
			<li><a href="#RefCreation">Creating Product References (Skate, Axle, 
				Wheel References)</a></li>
			<li><a href="#InstCreation">Creating and Adding Product Instances</a></li>
		</ul>
	</li>
	<li><a href="#OccurrenceCreation">Creating the Skate Occurrence Model</a></li>
	<li><a href="#SynchronizeImplicit">Synchronizing the Occurrence Model Implicitly</a>
		<ul>
			<li><a href="#CreateRootOcc">Implicit Synchronization Using ATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</a></li>
			<li><a href="#ListChildren">Implicit Synchronization Using CATIPLMNavOccurrence::ListChildren</a></li>
			<li><a href="#GetOcc">Implicit Synchronization Using CATIPrdOccurrenceMngt::GetOccurrence</a></li>
		</ul>
	</li>
	<li><a href="#SynchronizeExplicit">Synchronizing the Occurrence Model Explicitly 
		Using CATIPrdOccurrenceMngt::Synchronize</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ProductCreation"></a>Creating the Skate Product Structure</h3>
<p>This section illustrates the creation of Skate Product structure. Please note 
that here we are creating Product References with implicit api's, hence the end 
user has to set the input environment as the current environment prior to the Product 
reference creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="RefCreation"></a>Creating Product References (Skate, Axle, Wheel References)</h4>
<p>We first create the various Product references (Skate , Axle, and Wheel references) 
which are required for the Skate Product structure creation.</p>
<pre class="code">...
  CATIPrdReferenceFactory * pIPrdRefFactory = NULL;
  hr = <strong>CATPrdFactory::CreatePrdFactory</strong>(IID_CATIPrdReferenceFactory, (void**) &amp;pIPrdRefFactory);
  ...
  CATIType_var spRefType;
  CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
  CATListValCATICkeParm_var iPrdRefAttributesValues;
  CATIPLMProducts* pSkateRef = NULL;
  CATIPLMProducts* pAxleRef  = NULL;
  CATIPLMProducts* pWheelRef = NULL;
  ...
  CATListValCATICkeParm_var iPrdRefAttributesValues;
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pSkateRef, NULL);</strong>
  ...
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pAxleRef, NULL);</strong>
  ...
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pWheelRef, NULL);</strong>
...</pre>
<p>We first retrieve a pointer to the product factory (<em>CATIPrdReferenceFactory</em> 
*) by calling <code>CATPrdFactory::CreatePrdFactory</code> to create the product 
references.</p>
<p>Next, the Skate, Axle, and Wheel references are created using the retrieved product 
factory pointer by calling <code>CATIPrdReferenceFactory::CreatePrdReference</code>. 
This method takes four arguments:</p>
<ol>
	<li><code>spRefType</code>, a smart pointer to <em>CATIType</em>, retrieved 
		thanks to the <code>CATCkePLMNavPublicServices::RetrieveKnowledgeType</code> 
		static method. A product reference handled using a <em>CATIPLMProducts</em> 
		pointer is of the VPMReference PLM type.</li>
	<li><code>iPrdRefAttributesValues</code>, a smart pointer to <em>CATListValCATICkeParm</em>. 
		This list of PLM attributes must be empty since the PLM attributes of the 
		newly created object are valuated by the method.</li>
	<li><code>pSkateRef</code>, a pointer to <em>CATIPLMProducts</em> to handle 
		the created product reference.</li>
	<li>A pointer to <em>CATIAdpEnvironment</em>. To use the current environment, 
		set this pointer to NULL.</li>
</ol>
<p>To create the Skate Product structure, the use case further deals with creating 
the instances and adding them under the created product references, whose details 
are illustrated in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="InstCreation"></a>Creating and Adding Product Instances</h4>
<p>This section is the final step of the Skate Product structure creation. Here, 
we create the instances of the various product references (created in the previous 
step) and add them under the appropriate product references.</p>
<pre class="code">...
  CATBaseUnknown * pLeftWheel = NULL;
  CATBaseUnknown * pRightWheel = NULL;
  hr = pAxleRef-&gt;<strong>AddProduct (pWheelRef, pLeftWheel, IID_CATIPLMNavInstance);</strong>
  ...
  hr = pAxleRef-&gt;<strong>AddProduct (pWheelRef, pRightWheel, IID_CATIPLMNavInstance);</strong>
  ...
  CATBaseUnknown * pFrontAxle = NULL;
  CATBaseUnknown * pRearAxle = NULL;
  hr = pSkateRef-&gt;<strong>AddProduct (pAxleRef, pFrontAxle, IID_CATIPLMNavInstance);</strong>
  ...
  hr = pSkateRef-&gt;<strong>AddProduct (pAxleRef, pRearAxle, IID_CATIPLMNavInstance);</strong>
...
</pre>
<p>At the end of this step , we have the Skate Reference/Instance model created 
as shown in [<a href="#Fig1">Fig.1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OccurrenceCreation"></a>Creating the Skate Occurrence Model</h3>
<p>Prior to the skate occurrence model creation, if the user counts the wheel reference 
occurrences under the skate reference, the output is <strong>0</strong>. For this 
purpose, the global routine <code>GetCountOfWheelRefOccUnderSkate</code> is used.</p>
<pre class="code">...
  hr = <strong>::GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef, pSkateRef, oNoOfRelatedWheelOcc);
...</pre>
<p>The main purpose of <code>GetCountOfWheelRefOccUnderSkate</code> global routine 
is to count the Wheel Reference occurrence under Skate Reference. It takes three 
arguments:</p>
<ol>
	<li><code>piWheelRef</code>, a <em>CATIPLMProducts</em> pointer to the created 
		Wheel Reference.</li>
	<li><code>piSkateRef</code>, a <em>CATIPLMProducts</em> pointer to the created 
		Skate Reference.</li>
	<li><code>oNoOfRelatedWheelOcc</code>, an output integer argument to contain 
		the count of Wheel Reference occurrences under the Skate reference.</li>
</ol>
<p>Let us see the implementation details of the <code>GetCountOfWheelRefOccUnderSkate</code> 
global function:</p>
<pre class="code">...
  HRESULT <strong>GetCountOfWheelRefOccUnderSkate</strong>(CATIPLMProducts* &amp;piWheelRef, 
			    CATIPLMProducts* &amp;piSkateRef, int &amp;oNoOfRelatedWheelOcc)
  {
    ...
    CATIPLMNavReference *<strong>pINavRefOnWheelRef</strong>=NULL;
    hr= piWheelRef-&gt;QueryInterface(IID_CATIPLMNavReference,(void**)&amp;<strong>pINavRefOnWheelRef);</strong>

    if(NULL!=<strong>pINavRefOnWheelRef</strong>)
    {
       <strong>CATBaseUnknown *pCatBaseOnSkateRef</strong>=NULL;
       CATListPtrCATIPLMNavOccurrence RelatedOccurrencesList;
       hr = piSkateRef-&gt;QueryInterface(IID_CATBaseUnknown, (void**)&amp;pCatBaseOnSkateRef);
       ...
       hr= <strong>pINavRefOnWheelRef-&gt;ListRelatedOccurrences(pCatBaseOnSkateRef, RelatedOccurrencesList);</strong>
       oNoOfRelatedWheelOcc= RelatedOccurrencesList.Size();
       ...
    }
  }
...</pre>
<p>The method <code>CATIPLMNavReference::ListRelatedOccurrences</code> is used to 
list the wheel reference occurrences under the skate reference. It has two arguments:</p>
<ol>
	<li><code>pCatBaseOnSkateRef</code>, a <em>CATBaseUnknown</em> pointer to the 
		Skate reference.</li>
	<li><code>RelatedOccurrencesList</code>, a CATListPtrCATIPLMNavOccurrence collection, 
		is output parameter to contain the list of wheel reference occurrences under 
		the Skate reference.</li>
</ol>
<p>The call to the <code>GetCountOfWheelRefOccUnderSkate</code> global routine outputs
<strong>0</strong> above, since the skate occurrence model is not created yet. Hence, 
we proceed with the Skate occurrence model creation.</p>
<p>Please note that, as the call to <code>GetCountOfWheelRefOccUnderSkate</code> 
global routine outputs <strong>0</strong>, we can conclude that <code>CATIPLMNavReference::ListRelatedOccurrences</code> 
API does not synchronize the occurrence model automatically.</p>
<pre class="code">...   
  CATIPLMNavOccurrence_var spPLMNavOccurrenceOnRoot;
  <strong>CATIPrdOccurrenceMngt</strong>* occMngt = NULL;

  CATIPLMNavReference *piPLMNavRefOnRoot=NULL;
  hr= <strong>pSkateRef-&gt;</strong>QueryInterface(IID_CATIPLMNavReference,(void**)&amp;piPLMNavRefOnRoot);
  if(NULL!=piPLMNavRefOnRoot)
  {
    if(SUCCEEDED(CATPrdGetOccurrenceMngt(occMngt)) &amp;&amp; (NULL!= occMngt))
    {
      rc = occMngt-&gt;<strong>GetOrCreateRootOccurrence(piPLMNavRefOnRoot,spPLMNavOccurrenceOnRoot);</strong>
      ...
    }
...</pre>
<p>We have an interface <em>CATIPrdOccurrenceMngt</em> dedicated for managing the 
occurrence. Making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
returns the root occurrence corresponding to the Skate Reference, provided as an 
input to this api. This input Skate reference is the one created in the step [<a href="#RefCreation">#</a>].</p>
<p>Further, we again try to count the the wheel reference occurrence under the skate 
reference , by making a call to the <code>GetCountOfWheelRefOccUnderSkate</code> 
global routine, which now outputs <strong>4</strong>, the reason begin that the 
skate occurrence model is just created.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SynchronizeImplicit"></a>Synchronizing the Occurrence Model Implicitly</h3>
<p>This section illustrates the various implicit ways of synchronizing the Occurrence 
model.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="CreateRootOcc"></a>Implicit Synchronization Using CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</h4>
<p>Please note that - Currently, the count the Wheel Reference occurrence under 
Skate Reference is <strong>4</strong>.</p>
<p>In this section, we first edit the Skate Reference/Instance model [<a href="#Fig1">Fig.1</a>] 
by adding a new Wheel instance <strong>(Wheel Instance 3)</strong> under Axle Reference.</p>
<pre class="code">...
  CATBaseUnknown * pNewWheelInst_3 = NULL;
  hr = pAxleRef-&gt;AddProduct (pWheelRef, pNewWheelInst_3, IID_CATIPLMNavInstance);
...
</pre>
<p>Then, we count the Wheel Reference occurrences under the Skate Reference by calling 
the <code>GetCountOfWheelRefOccUnderSkate</code> global function, which outputs
<strong>4</strong>. This shows that the skate occurrence model is not synchronized.</p>
<p>Further, we retrieve the skate occurrence model from the root using <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code>.</p>
<pre class="code">
...
  hr = <strong>occMngt-&gt;GetOrCreateRootOccurrence(piPLMNavRefOnRoot, spPLMNavOccurrenceOnRoot);</strong>
...
</pre>
<p>As the objective of this section is to show that making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
performs an implicit synchronization of the occurrence model, we again count the 
number wheel occurrences under the Skate reference by calling the <code>GetCountOfWheelRefOccUnderSkate</code> 
global function.</p>
<pre class="code">...
  hr = <strong>GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef,pSkateRef,NoOfRelatedWheelOcc);
...</pre>
<p>This call now outputs <strong>6</strong>, which shows that <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
not only retrieves the root occurrence model but also synchronizes the occurrence 
model implicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="ListChildren"></a>Implicit Synchronization Using CATIPLMNavOccurrence::ListChildren</h4>
<p>Please, note that currently, the count the Wheel Reference occurrence under Skate 
Reference is <strong>6</strong>.</p>
<p>In this section, we again edit the Skate Reference/Instance model by adding a 
new Wheel instance<strong> (Wheel Instance 4)</strong> under the Axle Reference.</p>
<pre class="code">...
   CATBaseUnknown * pNewWheelInst_4 = NULL;
   hr = pAxleRef-&gt;AddProduct (pWheelRef, pNewWheelInst_4, IID_CATIPLMNavInstance);
...</pre>
<p>Next, we check the occurrence model by calling the following global functions:</p>
<ul>
	<li><code>GetCountOfLeavesOnSkateOccModel</code> - to count the leaves on the 
		Skate occurrence model.</li>
	<li><code>GetCountOfWheelRefOccUnderSkate</code> - to retrieve the count of 
		wheel occurrences under the Skate reference.</li>
	<li><code>GetCountOfWheelInstOccUnderSkate</code> - count of the newly added 
		wheel instance occurrence under the Skate reference.</li>
</ul>
<pre class="code">... 
  hr= <strong>GetCountOfLeavesOnSkateOccModel</strong>(spPLMNavOccurrenceOnRoot, oCountOfLeavesOnOccModel);
  ...
  hr = <strong>GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef, pSkateRef, NoOfRelatedWheelOcc);
  ...
  int NoOfRelatedOccOfNewWheelInst=0;
  CATIPLMNavInstance *piPLMNavOnNewWheelInst_4= (CATIPLMNavInstance *)pNewWheelInst_4;
  hr= <strong>GetCountOfWheelInstOccUnderSkate</strong>(piPLMNavOnNewWheelInst_4, pSkateRef, NoOfRelatedOccOfNewWheelInst);
...</pre>
<p>The main purpose of <code>GetCountOfLeavesOnSkateOccModel</code> is to count 
the leaves on the Skate occurrence model. It takes two arguments:</p>
<ul>
	<li>spiNavSkateOccurrence , a <em>CATIPLMNavOccurrence_var</em> type , it is 
		the pointer to the Skate root occurrence.</li>
	<li>oCountOfLeavesOnOccModel , an integer type , an output parameter which contains 
		the count of number of leaves on Skate occurrence model.</li>
</ul>
<p>The main purpose of <code>GetCountOfWheelInstOccUnderSkate</code> global routine 
is to count the wheel instance occurrence under Skate Reference for the recently 
added Wheel instance .It takes three arguments:</p>
<ul>
	<li>piPLMNavWheelInst, a <em>CATIPLMNavInstance*</em> type, it is the pointer 
		to the recently added Wheel instance under the Axle reference.</li>
	<li>piSkateRef, a <em>CATIPLMProducts*</em> type, it is the pointer to the created 
		Skate Reference.</li>
	<li>oNoOfRelatedOccOfNewWheelInst, an integer type ,an output parameter which 
		contains the count of number of Wheel instance occurrence under the Skate 
		reference for the recently added Wheel instance .</li>
</ul>
<p>The <code>GetCountOfWheelInstOccUnderSkate</code> global routine is nearly same 
as the <code>GetCountOfWheelRefOccUnderSkate</code> , the only difference is that:
<code>GetCountOfWheelInstOccUnderSkate</code> is used to count wheel instance occurrence 
under the skate reference while <code>GetCountOfWheelRefOccUnderSkate</code> is 
used to count wheel reference occurrence under the skate reference.</p>
<p>Let us see the implementation details of <code>GetCountOfWheelInstOccUnderSkate</code> 
global function:</p>
<pre class="code">...
  HRESULT <strong>GetCountOfWheelInstOccUnderSkate(</strong>CATIPLMNavInstance* &amp;piPLMNavWheelInst,
    	        CATIPLMProducts* &amp;piSkateRef, int &amp;oNoOfRelatedOccOfNewWheelInst)
  {
    ...
    CATListPtrCATIPLMNavOccurrence RelatedOccurrencesList;
    <strong>CATBaseUnknown *pCatBaseOnSkateRef</strong>=NULL;
    hr = piSkateRef-&gt;QueryInterface(IID_CATBaseUnknown, (void**)&amp;pCatBaseOnSkateRef);
    ...
    hr= <strong>piPLMNavWheelInst-&gt;ListRelatedOccurrences(pCatBaseOnSkateRef,RelatedOccurrencesList);</strong>
    oNoOfRelatedOccOfNewWheelInst= RelatedOccurrencesList.Size();
    ...    
  }
...</pre>
<p>Looking at the implementation of <code>GetCountOfWheelInstOccUnderSkate</code> 
above, we can observe that it also uses the <strong>ListRelatedOccurrences</strong> 
method (same as <code>GetCountOfWheelRefOccUnderSkate</code> global function). As 
we have already concluded in the section [<a href="#OccurrenceCreation">#</a>] that
<strong>ListRelatedOccurrences</strong> does not synchronize the occurrence model 
automatically, hence we can also conclude that <code>GetCountOfWheelInstOccUnderSkate</code> 
does not synchronize the occurrence model automatically.</p>
<p>But, the call to the routines <code>GetCountOfLeavesOnSkateOccModel</code> ,
<code>GetCountOfWheelRefOccUnderSkate</code> and <code>GetCountOfWheelInstOccUnderSkate</code> 
above [<a href="#ListChildren">#</a>] outputs <strong>8 , 8 and 2</strong> respectively, 
which arises a question in end user mind - <strong>How the occurrence model is updated 
here?</strong>.</p>
<p>Since, the call to the global routines <code>GetCountOfWheelInstOccUnderSkate</code> 
and <code>GetCountOfWheelRefOccUnderSkate</code> does not synchronize the occurrence 
model automatically (concluded above), lets analyze the implementation of the global 
function <code>GetCountOfLeavesOnSkateOccModel</code> to find the answer.</p>
<pre class="code">...
  HRESULT  <strong>GetCountOfLeavesOnSkateOccModel</strong>(CATIPLMNavOccurrence_var &amp; spiNavSkateOccurrence, int &amp; oCountOfLeavesOnOccModel)
  {
    ...
    CATListPtrCATIPLMNavOccurrence ListAxleOccurrences ;
    hr = spiNavSkateOccurrence-&gt;<strong>ListChildren</strong>(ListAxleOccurrences);
    ...
    for(int i=1;i=ListAxleOccurrences.Size();i++)
    {
      ...
      CATIPLMNavOccurrence *piCurrentAxleOccurrence = ListAxleOccurrences[i];
      ...
      CATListPtrCATIPLMNavOccurrence ListWheelOccurrences ;
      hr = piCurrentAxleOccurrence-&gt;<strong>ListChildren</strong>(ListWheelOccurrences);
      ...
    }
  }
...</pre>
<p>Looking at the implementation of <code>GetCountOfLeavesOnSkateOccModel</code>, 
we can observe that <code>CATIPLMNavOccurrence::ListChildren</code> is being used 
in the routine. Hence, we can conclude that a call to <code>CATIPLMNavOccurrence::ListChildren</code> 
not only retrieves the list of direct child occurrences but also synchronizes the 
occurrence model implicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="GetOcc"></a>Implicit Synchronization Using CATIPrdOccurrenceMngt::GetOccurrence</h4>
<p>Please note that - Currently, the count the Wheel Reference occurrence under 
Skate Reference is <strong>8</strong>.</p>
<p>In this section, we again edit the Skate Reference/Instance model by adding a 
new Wheel instance <strong>Wheel Instance 5</strong> under the Axle Reference.</p>
<pre class="code">...
  CATBaseUnknown * pNewWheelInst_5 = NULL;
  hr = pAxleRef-&gt;AddProduct ( pWheelRef ,pNewWheelInst_5 ,IID_CATIPLMNavInstance );
...
</pre>
<p>Next, we try to retrieve the Rear Axle occurrence by calling <code>CATIPrdOccurrenceMngt::GetOccurrence</code>.</p>
<p>Please note that the objective of this step is to show that, whichever occurrence 
retrieved using <code>CATIPrdOccurrenceMngt::GetOccurrence</code>, the occurrence 
model is updated. Retrieving the Rear Axle occurrence is just an example which is 
used below to illustrate this objective.</p>
<pre class="code">...
  CATIPLMNavInstance * pNavInstOnRearAxle=(CATIPLMNavInstance *)pRearAxle;
  CATListPtrCATIPLMNavInstance pListOfInstForRearAxle;
  pListOfInstForRearAxle.Append(pNavInstOnRearAxle);

  CATIPLMNavOccurrence_var spPLMNavOccOnRearAxleByAPI;
  hr = occMngt-&gt;<strong>GetOccurrence</strong>(spPLMNavOccurrenceOnRoot,pListOfInstForRearAxle, spPLMNavOccOnRearAxleByAPI);
...
</pre>
<p>The <code>CATIPrdOccurrenceMngt::GetOccurrence</code> API takes three arguments:</p>
<ol>
	<li><code>spPLMNavOccurrenceOnRoot</code>, a <em>CATIPLMNavOccurrence_var</em> 
		type, the Skate root occurrence.</li>
	<li><code>pListOfInstForRearAxle</code>, a <em>CATListPtrCATIPLMNavInstance</em> 
		type, which contains list of instances for the Rear Axle occurrence.</li>
	<li><code>spPLMNavOccOnRearAxleByAPI</code>, a <em>CATIPLMNavOccurrence_var</em> 
		type, an output parameter which will contain the Rear Axle occurrence.</li>
</ol>
<p>Next, we will further check whether the occurrence model is updated by calling 
the global functions <code>GetCountOfWheelRefOccUnderSkate</code> and <code>GetCountOfWheelInstOccUnderSkate</code>.</p>
<pre class="code">...
  hr = <strong>GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef, pSkateRef, NoOfRelatedWheelOcc);
  ...
  CATIPLMNavInstance *piPLMNavOnNewWheelInst_5=(CATIPLMNavInstance *)pNewWheelInst_5;
  hr= <strong>GetCountOfWheelInstOccUnderSkate</strong>(piPLMNavOnNewWheelInst_5, pSkateRef, NoOfRelatedOccOfNewWheelInst);
...</pre>
<p>The count of wheel reference occurrences under the skate reference (using
<code>GetCountOfWheelRefOccUnderSkate</code>) is <strong>10</strong>, while the 
count of the newly added wheel instances under the skate reference (using <code>
GetCountOfWheelInstOccUnderSkate</code>) is 2. This proves that the call to the
<code>CATIPrdOccurrenceMngt::GetOccurrence</code> not only computes the occurrence, 
but also synchronizes the occurrence model implicitly.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SynchronizeExplicit"></a>Synchronizing the Occurrence Model Explicitly 
Using CATIPrdOccurrenceMngt::Synchronize</h3>
<p>This section illustrates how to synchronize the Occurrence model explicitly by 
calling <code>CATIPrdOccurrenceMngt::Synchronize</code>.</p>
<p>Please, note that currently, the count the Wheel Reference occurrences under 
the Skate Reference is <strong>10</strong>.</p>
<p>In this section, we again edit the Skate Reference/Instance model by adding a 
new Wheel instance<strong> (Wheel Instance 6)</strong> under the Axle Reference.</p>
<pre class="code">...
  CATBaseUnknown * pNewWheelInst_6= NULL;
  hr = pAxleRef-&gt;AddProduct (pWheelRef, pNewWheelInst_6, IID_CATIPLMNavInstance);
...
</pre>
<p>Next, we check whether the occurrence model is up-to-date by calling the global 
functions <code>GetCountOfWheelRefOccUnderSkate</code> and <code>GetCountOfWheelInstOccUnderSkate</code>.</p>
<pre class="code">...
  hr = <strong>GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef, pSkateRef, NoOfRelatedWheelOcc);
  ...
  CATIPLMNavInstance *piPLMNavOnNewWheelInst_6= (CATIPLMNavInstance *)pNewWheelInst_6;
  hr= <strong>GetCountOfWheelInstOccUnderSkate</strong>(piPLMNavOnNewWheelInst_6, pSkateRef, NoOfRelatedOccOfNewWheelInst);
...</pre>
<p>The count of wheel reference occurrences under the skate reference (using
<code>GetCountOfWheelRefOccUnderSkate</code>) is 10, while the count of the newly 
added wheel instances under the skate reference (using <code>GetCountOfWheelInstOccUnderSkate</code>) 
is 0. This proves that the occurrence model is not updated. So, we try to synchronize 
the occurrence model by making an explicit call to the <code>CATIPrdOccurrenceMngt::Synchronize</code>.</p>
<pre class="code">...
  hr= occMngt-&gt;<strong>Synchronize(spPLMNavOccurrenceOnRoot);</strong>
...</pre>
<p>Now, lets try to check whether the occurrence model is up-to-date. We again make 
calls to the global routines namely <code>GetCountOfWheelRefOccUnderSkate</code> 
and <code>GetCountOfWheelInstOccUnderSkate</code>.</p>
<pre class="code">...
  hr = <strong>GetCountOfWheelRefOccUnderSkate</strong>(pWheelRef, pSkateRef, NoOfRelatedWheelOcc);
...
  hr = <strong>GetCountOfWheelInstOccUnderSkate</strong>(piPLMNavOnNewWheelInst_6, pSkateRef, NoOfRelatedOccOfNewWheelInst);
...</pre>
<p>The count of wheel reference occurrences under the skate reference (using
<code>GetCountOfWheelRefOccUnderSkate</code>) is <strong>12</strong>, while the 
count of the newly added wheel instances under the skate reference (using <code>
GetCountOfWheelInstOccUnderSkate</code>) is <strong>2</strong>. The explicit call 
to <code>CATIPrdOccurrenceMngt::Synchronize</code> has synchronized the occurrence 
model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case basically illustrates the usage of the <em>CATIPrdOccurrenceMngt</em> 
interface to synchronize the Product Occurrence model from its Reference/Instance 
model. The synchronization could be done implicitly or explicitly.</p>
<p>Three methods synchronize the Occurrence model <strong>implicitly</strong> (automatically):</p>
<ol>
	<li>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</li>
	<li>CATIPLMNavOccurrence::ListChildren</li>
	<li>CATIPrdOccurrenceMngt::GetOccurrence</li>
</ol>
<p>One method synchronize the occurrence model <strong>explicitly</strong>:</p>
<ol>
	<li>CATIPrdOccurrenceMngt::Synchronize</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
