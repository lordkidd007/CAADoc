<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Obtaining Product Model Occurrences' Names</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Obtaining Product Model Occurrences' Names</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article details the CAAPstDisplayingOccurrences use case: it shows 
		how the name of each occurrence of a Product model can be obtained with
		<em>CATIAlias</em>, <em>CATINavigateObject</em>.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstDisplayingOccurrences Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstDisplayingOccurrences Do</a></li>
					<li><a href="#How">How to Launch CAAPstDisplayingOccurrences</a></li>
					<li><a href="#Where">Where to Find the CAAPstDisplayingOccurrences 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The goal of this use case is to illustrate how to obtain the various names of 
an occurrence with:</p>
<ul>
	<li><em>CATIAlias</em>.</li>
	<li><em>CATINavigateObject</em>.</li>
</ul>
<p>The point is not to discuss which interface to use and where but to show what 
you get. Please refer to [<a href="#References">5</a>] for a more detailed explanation 
of these interfaces.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstDisplayingOccurrences Use Case</h2>
<p>CAAPstDisplayingOccurrences is a use case of the CAAProductStructure.edu 
framework that illustrates ObjectModelerBase and CATPLMComponentInterfaces 
frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstDisplayingOccurrences Do</h3>
<p>CAAPstDisplayingOccurrences is a &quot;batch&quot; that opens a 
Product Reference and then prints out all the occurrences forming the structure 
of the product. The same list of occurrences is printed twice, each time using a 
different interface, namely <em>CATIAlias</em> and <em>CATINavigateObject</em>, 
to retrieve the occurrence's name. For an in-depth explanation of the Product model 
and its constituents (reference, first instance, occurrence ...), please consult 
[<a href="#References">2</a>].</p>
<p>Below is a example of output obtained with the <code>CAAPstBrowsingProductModel
</code>model as displayed in <a href="#Fig1">Fig. 1</a>. Each interface output will 
be later explained in details in its own section.</p>
<pre class="code">     CAAPstDisplayingOccurrences started
     ...
     Opened CAAPstBrowsingProductModel_Root---
     Occurrence Model creation successful
		
     Displaying occurrences of CAAPstBrowsingProductModel_Root--- with <strong>CATIAlias</strong>
     &lt;CAAPstBrowsingProductModel_Root --- IN_WORK&gt;
	&lt;CAAPstBrowsingProductModel_Child.1&gt;
		
     Displaying occurrences of CAAPstBrowsingProductModel_Root--- with <strong>CATINavigateObject</strong>
     &lt;CAAPstBrowsingProductModel_Root --- IN_WORK&gt;
	 &lt;CAAPstBrowsingProductModel_Child --- IN_WORK (CAAPstBrowsingProductModel_Child.1)
     ...
     CAAPstDisplayingOccurrences ended</pre>
<p>Here's the same Product as displayed on-screen. You'll find the Rep Instances 
in the hierarchy below, but those will not be output in the traces above, for the 
simple reason that we are browsing for the Occurrences only in this product hierarchy.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1 The CAAPstBrowsingProductModel</caption>
	<tr>
		<td>
		<img alt="The CAAPstBrowsingProductModel" src="images/CAAPstBrowse_Fig1.jpg"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstDisplayingOccurrences</h3>
<p>To launch <code>CAAPstDisplayingOccurrences</code>, you will need to set up the 
build time environment and compile the <code>CAAPstDisplayingOccurrences.m</code> 
module along with its prerequisites [<a href="#References">1</a>]. Once it's built, 
set up the run time environment and execute the following command:</p>
<p><code>mkrun -c &quot;CAAPstDisplayingOccurrences Repository Server User Password 
SecurityCtx ExternalID Version PLMType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data).</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The <code>PLM_ExternalID</code> of a PLM Reference or PLM Representation 
		Reference be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The <code>V_version</code> of a PLM Reference or PLM Representation 
		Reference</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
</table>
<p>You can execute this use case with any Product reference or you can import a 
3D XML file supplied in the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstBrowsingProductModel_BrowsePublications.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes, 
used to illustrate this article (see <a href="#Fig1">Fig. 1</a>.):</p>
<ul>
	<li><a><code><strong>PLM_ExternalID</strong></code></a>: <code>CAAPstBrowsingProductModel_Root</code></li>
	<li><a><code><strong>Version</strong></code></a>: ---</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstDisplayingOccurrences Code</h3>
<p>The CAAPstDisplayingOccurrences use case is made of a single file located in 
the CAAPstDisplayingOccurrences.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstDisplayingOccurrences.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are three logical steps in CAAPstDisplayingOccurrences:</p>
<ol>
	<li><a href="#Step1">Opening the Product Reference</a></li>
	<li><a href="#Step2">Retrieving the Root Occurrence Model</a></li>
	<li><a href="#Step3">Iterating on the Occurrences</a></li>
	<li><a href="#Step4">Retrieving the Occurrence's Name</a>
		<ul>
			<li><a href="#Step41">CATIAlias</a></li>
			<li><a href="#Step42">CATINavigateObject</a></li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Product Reference</h3>
<p>The Product reference is opened by calling <code>CompleteAndOpen()</code> method 
of the <code>CATAdpOpener</code> class (Please refer to [<a href="#References">4</a>] 
for further details.)</p>
<pre class="code">...
	CATIPLMNavReference * piPLMNavRefOnRoot = NULL;
	<strong>CATOmbLifeCycleRootsBag</strong> Bag;
	<strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
	<strong>CATAdpOpener</strong> opener(Bag,params);
	rc= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;piPLMNavRefOnRoot);
...</pre>
<p>As you can see, the Product reference is retrieved as a pointer to its <em>CATIPLMNavReference</em> 
interface. By omitting the last argument, we chose the default behaviour which loads 
only reference and instances. This Product reference is used in the next step for 
retrieving its Root occurrence.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Root Occurrence Model</h3>
<p>Once the Root Product reference is opened, we look for its occurrence root. It 
is the different object.</p>
<pre class="code">...   
    CATIPLMNavOccurrence_var spPLMNavOccurrenceOnRoot;
    <strong>CATIPrdOccurrenceMngt</strong>* occMngt = NULL;
    if(SUCCEEDED(CATPrdGetOccurrenceMngt(occMngt)) &amp;&amp; occMngt)
    ...
    rc = occMngt-&gt;<strong>GetOrCreateRootOccurrence(piPLMNavRefOnRoot,spPLMNavOccurrenceOnRoot);</strong>
...</pre>
<p>We have an interface <em>CATIPrdOccurrenceMngt</em> dedicated for managing the 
occurence. Making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence
</code>returns the root occurence corresponding to the Product Reference, provided 
as an input to this api. This input Product reference is the one retrieved in the 
previous step [<a href="#Step1">#</a>].Once the root occurrence is retrieved, it's 
passed to the <code>BrowseOccurrences</code> function which does all the work. It's 
called two times, each time with a different function that handles the printing.</p>
<pre class="code">...
	<strong>BrowseOccurrences</strong>(0, spNavOccurrenceOnRoot, PrintAlias);
...
	<strong>BrowseOccurrences</strong>(0, spNavOccurrenceOnRoot, PrintNavigateObject);
...</pre>
<p>Let's examine the code of the <code>BrowseOccurrences</code> function in the 
next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Iterating on the Occurrences</h3>
<p>The core of the use-case is the recursive <code>BrowseOccurrences</code> function 
which takes three arguments:</p>
<ul>
	<li>The current depth level in the product structure, with 0 being the top (i.e. 
		the root).</li>
	<li>The current occurrence as a pointer to its <em>CATIPLMNavOccurrence</em> 
		interface.</li>
	<li>A pointer to a function that prints the occurrence (so as to separate the 
		browsing part from the printing ones).</li>
</ul>
<pre class="code">...
 HRESULT <strong>BrowseOccurrences</strong>(int level, CATIPLMNavOccurrence_var spPLMNavOccOnCurrentNode,
			  HRESULT (*print_function)(CATIPLMNavOccurrence_var, int))
 {
...</pre>
<p>The first thing to do is to print the current occurrence by calling the function 
specified as input: <code>print_function</code>.</p>
<pre class="code">...
      HRESULT rc = <strong>print_function</strong>(spPLMNavOccOnCurrentNode, level);
...</pre>
<p>The rest of the code does the traversal and is explained in the &quot;Browsing 
Product Model Occurrences&quot; use-case [<a href="#References">7</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Occurrence's Names</h3>
<p>As you can see in the previous step, <code>BrowseOccurrences</code> traverses 
all the occurrences and called a function to handle the printing. This function 
takes two arguments:</p>
<ul>
	<li>An occurrence as its <em>CATIPLMNavOccurrence</em> interface pointer.</li>
	<li>A depth level where 0 is the topmost.</li>
</ul>
<p>There are two versions of this printing function, each with a different interface:</p>
<ul>
	<li><em>CATIAlias</em></li>
	<li><em>CATINavigateObject</em>.</li>
</ul>
<p>We will now detail how each interface is used to obtain the occurrence's name.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step41"></a>CATIAlias</h4>
<p>Using <em>CATIAlias</em> is simple: you just need to query the <em>CATIAlias</em> 
interface on the occurrence and call its <code>GetAlias</code> method:</p>
<pre class="code">HRESULT PrintAlias(CATIPLMNavOccurrence_var spPLMNavOcc, int level)
{
...
	<strong>CATIAlias_var</strong> spAliasOnComponent(spPLMNavOcc);
	CATUnicodeString componentAlias = spAliasOnComponent-&gt;<strong>GetAlias</strong>();
...
}</pre>
<p>The output generated using <em>CATIAlias</em> is the following:</p>
<pre class="code">&lt;CAAPstBrowsingProductModel_Root --- IN_WORK&gt;
    &lt;CAAPstBrowsingProductModel_Child1.1&gt;
    &lt;CAAPstBrowsingProductModel_Child2.1&gt;</pre>
<p>If you examine this output, you will notice two things:</p>
<ul>
	<li>This interface is implemented by all occurrences.</li>
	<li>The name of an occurrence is the same as its related instance/ related reference</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step42"></a>CATINavigateObject</h4>
<p>Using <em>CATINavigateObject</em> is similar to <em>CATIAlias</em>. The only 
difference is that the <code>GetIdentificators</code> method returnsa list of strings 
to represent multi-line names. For the purpose of this use case, it's assumed that 
names do not span more than one line.</p>
<pre class="code">HRESULT PrintNavigateObject(CATIPLMNavOccurrence_var spPLMNavOcc, int level)
{
...
	<strong>CATINavigateObject_var</strong> spNavigateOnComponent(spPLMNavOcc);
	CATListValCATUnicodeString *nameList =
		spNavigateOnComponent-&gt;<strong>GetIdentificators</strong>();
...
	cout &lt;&lt; &quot;&lt;&quot; &lt;&lt; (*nameList)[1].ConvertToChar() &lt;&lt; &quot;&gt;&quot; &lt;&lt; endl;
	return S_OK;
}</pre>
<p>Here's the output generated with <em>CATINavigateObject</em>:</p>
<pre class="code">&lt;CAAPstBrowsingProductModel_Root --- IN_WORK&gt;
    &lt;CAAPstBrowsingProductModel_Child1 --- IN_WORK (CAAPstBrowsingProductModel_Child1.1)&gt;
      &lt;CAAPstBrowsingProductModel_Child2 --- IN_WORK (CAAPstBrowsingProductModel_Child2.1)&gt;</pre>
<p>From the output generated by PrintNavigateObject, you will note that:</p>
<ul>
	<li>It is identical to the names as displayed on-screen (<a href="#Fig1">Fig. 
		1</a>).</li>
	<li>It's also implemented on all occurrences.</li>
	<li>The name consists of the name of its related instance/reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has shown how an occurrence's name can be retrieved with the
<em>CATIAlias</em> and <em>CATINavigateObject</em> interfaces. While <em>CATIAlias</em> 
and <em>CATINavigateObject</em> can be used on all components. The use case also 
illustrates the usage of the <em>CATIPrdOccurrenceMngt</em> interface, to manage 
the occurrence model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstTaProductNavigate.htm">Product Structure Navigation</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcBrowsingProductModel.htm">Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstTaRepresentingOccurrences.htm">Representing Product Components 
		Textually</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>PLM Customization and Environments</td>
	</tr>
	<tr>
		<td>[7]</td>
		<td><a href="CAAPstUcBrowsingOccurrences.htm">Browsing Product Model Occurrences</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2008]</td>
		<td>Document updated</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
