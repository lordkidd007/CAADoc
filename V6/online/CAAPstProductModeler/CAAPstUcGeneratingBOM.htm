<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Generating a BOM</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Generating a BOM</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstGeneratingBOM use case. It explains 
		how to open a Product to generate its bill of materials.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstGeneratingBOM Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstGeneratingBOM Do</a></li>
					<li><a href="#How">How to Launch CAAPstGeneratingBOM</a></li>
					<li><a href="#Where">Where to Find the CAAPstGeneratingBOM Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to help you make your first steps in programming the 
Product Modeler. Its main intent is to introduce important concepts about a product 
structure, and ways to navigate it. More specifically, you will learn how to:</p>
<ul>
	<li>Open a Product Reference.</li>
	<li>Traverse a Product Structure.</li>
	<li>Generate a bill of materials (BOM).</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstGeneratingBOM Use Case</h2>
<p>CAAPstGeneratingBOM is a use case of the CAAProductStructure.edu framework that 
illustrates CATPLMComponentInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstGeneratingBOM Do</h3>
<p>The goal of CAAPstGeneratingBOM is to open a product and generate a bill of materials 
(BOM). A BOM is defined as the list of constituent components of a product, which 
correspond to the leaves of a product structure tree.</p>
<p>There are two versions of this use case:</p>
<ul>
	<li>A batch (CAAPstGeneratingBOMBatch) which outputs the BOM in one of the following 
		formats:
		<ul>
			<li>A text file.</li>
			<li>An XML file. See [<a href="#References">1</a>] for an example.</li>
		</ul>
	</li>
	<li>An interactive command (CAAPstGeneratingBOMCmd) which outputs the BOM in 
		a dialog box.</li>
</ul>
<p>Example of CAAPstGeneratingBOMBatch output:</p>
<pre class="code">   The session is created
   Opened CAAPstSkateboard0620---
   CAAPstBrowseRefAndCreateTheBOM:CAAPstSkateboard0620
      CAAPstBrowseRefAndCreateTheBOM:CAAPstDeck05421
      CAAPstBrowseRefAndCreateTheBOM:CAAPstDeck05421 is a new leaf
      CAAPstBrowseRefAndCreateTheBOM:CAAPstTruckAssembly
         CAAPstBrowseRefAndCreateTheBOM:CAAPstTruck06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstTruck06019 is a new leaf
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019 is a new leaf
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019 is a leave already existing
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019 is a new leaf
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019 is a leave already existing
      CAAPstBrowseRefAndCreateTheBOM:CAAPstTruckAssembly
         CAAPstBrowseRefAndCreateTheBOM:CAAPstTruck06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstTruck06019 is a leave already existing
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019 is a leave already existing
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstSmallWheel06019 is a leave already existing
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019 is a leave already existing
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019
         CAAPstBrowseRefAndCreateTheBOM:CAAPstBigWheel06019 is a leave already existing
   The bom has been successfully retrieved

   Output file is: ...\CAAPstSkateboard0620---_BOM.xml
   The bom has been successfully formated</pre>
<p>Example of BOM generated in a dialog box:</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Interactive Version of CAAPstGeneratingBOM</caption>
	<tr>
		<td>
		<img alt="BOM Example" height="252" src="images/CAAPstGeneratingBomDlg.jpg" width="660"/>
		</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstGeneratingBOM</h3>
<h4><a name="batch"></a>CAAPstGeneratingBOMBatch</h4>
<p>To launch CAAPstGeneratingBOMBatch, you will need to set up the build time environment, 
then compile CAAPstGeneratingBOMBatch and CAAPstGeneratingBOM along with their prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">5</a>]. 
To launch the use case, execute the following command:</p>
<p><code>mkrun -c &quot;CAAPstGeneratingBOMBatch Repository Server User Password 
SecurityCtx PLMType ExternalID Version Format [Path]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference</td>
	</tr>
	<tr>
		<th>Format</th>
		<td>format to be used to output the BOM: txt or xml</td>
	</tr>
	<tr>
		<th>Path</th>
		<td><strong>optional</strong> directory where the BOM will be created.<br />
		If not specified, the current directory is used</td>
	</tr>
</table>
<p>You can directly execute this use case if you know how to locate your own Product 
reference. If not, you can import a 3D XML file supplied in the CAAProductStructure.edu 
framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\InputData\CAAPstBOM.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the following product structure:</p>
<table>
	<caption>Fig. 2: Contents of CAAPstGeneratingBOM.3dxml</caption>
	<tr>
		<td>
		<img alt="CAAPstGeneratingBOM.3dxml" height="256" src="images/CAAPstGeneratingBomStructure.jpg" width="362"/></td>
	</tr>
</table>
<p><strong>Notes on the XML output</strong>:</p>
<p>The XML output does not have a stylesheet by default. However, you can associate 
it with the XSL stylesheet that can be found in:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\InputData\CAAPstBOM.xsl</code></p>
<p>To do that, just copy the above style sheet to the same directory as the XML 
file and then remove the lines containing &quot;<strong>Remove this line</strong>&quot; from 
newly created XML file.</p>
<pre class="code">...
&lt;!-- <strong>Remove this line</strong> and correct path to XSL
&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;CAAPstBOM.xsl&quot;?&gt;
<strong>Remove this line</strong> and correct path to XSL --&gt;
...</pre>
<h4>CAAPstGeneratingBOMCmd</h4>
<p>In addition to the modules required for the <a href="#batch">CAAPstGeneratingBOMBatch</a> 
batch version, you'll need to build CAAPstCommands.m and CAAPstGeneralWksAddin.m 
modules, install the CAAProductStructure.edu.dico dictionary.</p>
<p>The CAAPstGeneratingBOMCmd is located on the CAA Product Model toolbar:
<img alt="CAAPstGeneratingBOMCmd Command" height="32" src="images/CAAPstGeneratingBomTB.jpg" width="227"/> 
with the following icon:
<img alt="CAAPstGeneratingBOMCmd Icon" height="33" src="images/CAAPstGeneratingBomIcon.jpg" width="36"/></p>
<p>If you click on this icon, a <a href="#Fig1">dialog box</a> will appear. Just 
enter a PLM_ExternalID value in the editable field labeled &quot;PLM_ExternalID=&quot; 
and click on the <strong>Query</strong> button. The BOM of this product (which version is 
hard-coded as &quot;---&quot;) will be generated and displayed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstGeneratingBOM Code</h3>
<p>The CAAPstGeneratingBOM use case is made of source files located in the CAAPstGeneratingBOMBatch.m 
and CAAPstGeneratingBOM.m modules of the CAAProductStructure.edu framework:</p>
<table>
	<tr>
		<td rowspan="3"><code>InstallRootFolder\CAAProductStructure.edu\</code></td>
		<td><code>CAAPstGeneratingBOMBatch.m</code></td>
	</tr>
	<tr>
		<td><code>CAAPstGeneratingBOM.m</code></td>
	</tr>
	<tr>
		<td><code>CAAPstCommands.m</code></td>
	</tr>
</table>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstGeneratingBOMBatch</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the PLM Component</a></li>
	<li><a href="#Step2">Building the BOM by Traversing the Product Structure</a></li>
	<li><a href="#Step3">Outputting the BOM</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstGeneratingBOMBatch use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository. There are other 
parameters as well, details of which can be found in the &quot;Connecting to 
V6 Server&quot; use case article [<a href="#References">3</a>]. This article 
primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the PLM Component</h3>
<p>This step involves opening a PLM Product Ref. The query is now possible with 
all the required parameters: the component modeler's type and its identifying attributes 
(input to the program). Please note that the identifying attributes used (PLM_ExternalID 
and V_version in our case), might be different for other modeler and/or customizations.</p>
<pre class="code">...
       CATIAdpPLMIdentificator* opiIDComp = NULL;
       const char* istrPLMType = iargv[6];
       
       rc = ::CAARetrieveIDofUniquePLMObject(iListAttributeName,iListAttributeValue,														
	 			         istrPLMType,opiIDComp);
...        </pre>
<p>A successful return code only indicates that the query has been executed.
<strong>CAARetrieveIDofUniquePLMObject </strong>returns S_OK, only if it returns 
a valid pointer, opiIDComp of Type CATIAdpPLMIdentificator*. Details of this can 
be found in &quot;<strong>Querying, Expanding and Opening PLM Components</strong>&quot; 
[<a href="#References">3</a>].</p>
<p>The use case calls <strong>CompleteAndOpen</strong> of the CATAdpOpener API for 
opening a PLM Product Ref. The PLM Product Ref is retrieved as a CATIPLMNavReference* 
type.</p>
<pre class="code">...  
    CATAdpOpener opener(Bag,params);
    rc= opener.CompleteAndOpen(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;piNavRefOnRoot);
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Building the BOM by Traversing the Product Structure</h3>
<p>The BOM is created by recursively traversing all the Product structure and counting 
all the leaves encountered. A reference is considered to be a <em>leaf</em> when it 
has<em> no children</em>. For example, Product2 and Product4 are the leaves in the 
following product structure:</p>
<table>
	<caption>Fig. 3: A Product Structure with Two Leaves: Product2 and Product4</caption>
	<tr>
		<td>
		<img alt="Product Structure" height="241" src="images/CAAPstGeneratingBomPS.jpg" width="370"/></td>
	</tr>
</table>
<p>This step is divided into:</p>
<ol>
	<li><a href="#Step21">The Leaves</a></li>
	<li><a href="#Step22">Finding the Leaves</a></li>
	<li><a href="#Step23">Generating the BOM</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step21"></a>The Leaves</h4>
<p>The purpose of the <em>CAAPstLeafRef</em> class (CAAPstLeafRef.cpp file) is to 
represent the leaves encountered in a Product structure, i.e. a BOM's items. Each 
instance contains:</p>
<ul>
	<li>A pointer to the <em>CATIPLMNavEntity</em> interface of a leaf.</li>
	<li>The number of times this reference was encountered in the structure as a 
		leaf.</li>
</ul>
<p>The pointer to the <em>CATIPLMNavEntity</em> must be kept in the CAAPstLeafRef 
instance so that newly found leaf can be compared against it, thus determining whether 
it's a new leaf or not.</p>
<p>The comparison is done in the <code>CompareConst</code> method, where two references 
are compared by matching two of their attributes (PLM_ExternalID and V_version).</p>
<pre class="code">int CAAPstLeafRef::<strong>CompareConst</strong> ( const CAAPstLeafRef* iRef1, const CAAPstLeafRef* iRef2) 
{
...
      CATIPLMNavEntity * pNavEntity1 = NULL ;
      iRef1-&gt;GetReference(pNavEntity1);
      CATIPLMNavEntity * pNavEntity2 = NULL ;
      iRef2-&gt;GetReference(pNavEntity2);
...
      CATListOfCATUnicodeString listattr,listvalattr1,listvalattr2 ;
      listattr.Append(&quot;<strong>PLM_ExternalID</strong>&quot;);
      listattr.Append(&quot;<strong>V_version</strong>&quot;);
      pNavEntity1-&gt;GetPublicAttributes(listattr, listvalattr1);
      pNavEntity2-&gt;GetPublicAttributes(listattr, listvalattr2);
...
}</pre>
<p>Another method of CAAPstLeafRef which deserves some explanation is <strong>Hash</strong> 
which returns the hash code of a reference based on its PLM_ExternalID attribute:</p>
<pre class="code">unsigned int CAAPstLeafRef::Hash( CAAPstLeafRef* iRef) 
{
	int val = -1 ;
...
		CATIPLMNavEntity * pNavEntity = NULL ;
		iRef-&gt;GetReference(pNavEntity);
...
			CATListOfCATUnicodeString listattr,listvalattr ;
			listattr.Append(&quot;<strong>PLM_ExternalID</strong>&quot;);
			pNavEntity-&gt;GetPublicAttributes(listattr, listvalattr);
			if ( listvalattr.Size() == 1 )
			{
				val = listvalattr[1].ComputeHashKey();
			}
...
	return val;
}</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step22"></a>Finding the Leaves</h4>
<p>The CAAPstBrowseRefAndCreateTheBOM function (CAAPstBrowseRefAndCreateTheBOM.cpp 
file) takes a <em>CATIPLMNavReference</em> interface pointer on a reference and returns 
the BOM as a list of CAAPstLeafRef described in the previous section.</p>
<pre class="code">HRESULT CAAPstBrowseRefAndCreateTheBOM (CATIPLMNavReference * pINavRef,
					CATLISTP(CAAPstLeafRef) &amp; ListRef)
{
	CATHTAB(CAAPstLeafRef)  MyHashTabOfLeafRef(&amp;CAAPstLeafRef::Hash, &amp;CAAPstLeafRef::Compare);

	return BrowseRefAndCreateTheBOM (pINavRef, 0, MyHashTabOfLeafRef, ListRef);
}</pre>
<p>As you can see, the job is done by an internal function BrowseRefAndCreateTheBOM, 
which requires two addition inputs:</p>
<pre class="code">static HRESULT BrowseRefAndCreateTheBOM (CATIPLMNavReference * pINavRef, int level, 
                                         CATHTAB(CAAPstLeafRef) &amp; HashTabRef, 
                                         CATLISTP(CAAPstLeafRef) &amp; ListRef)</pre>
<ul>
	<li>A depth level (to indicate the Product structure depth). It's only needed 
		to properly indent the traces and has no other functional value.</li>
	<li>A hash table of CAAPstLeafRefs'. Every time we come upon a leaf, we look 
		it up in this table; if it's not found then we know it's a new leaf and 
		insert it in the table (with a count of one.) Otherwise we just increment 
		the leaf count.<br />
		Why not use the list? It's because the lookup time will increase with the 
		number of leaves. <br />
		The static methods CAAPstLeafRef::Hash and CAAPstLeafRef::Compare, required 
		to construct the hash table are detailed in <a href="#Step21">The Leaves</a>.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step23"></a>Generating the BOM</h4>
<p>The traversing of the Product structure, looking for leaves, is just &quot;Browsing 
a Product Model&quot; [<a href="#References">4</a>] with an extra action. This action 
takes place only if a <em>CATIPLMNavEntity</em> is a leaf: it does not have any child.</p>
<pre class="code">...
    CATIPLMNavEntity * pNavEntity = NULL ;
    HRESULT rc = pINavRef-&gt;QueryInterface(IID_CATIPLMNavEntity, (void **)  &amp;pNavEntity);
...
    CATListPtrCATIPLMNavEntity childrenList;
    rc = pINavRef-&gt;<strong>ListChildren</strong>(childrenList, 0, NULL);
...
    if ( childrenList.Size() &gt; 0) {
        // not a leaf -&gt; recurse
...
    } else {
        // a leaf -&gt; handle it
...</pre>
<p>Each time a leaf is encountered, we create a new instance of CAAPstLeafRef and 
then check whether it's a new one:</p>
<pre class="code">        CAAPstLeafRef * pToInsert = new CAAPstLeafRef (pNavEntity);
        int insert = HashTabRef.Insert(pToInsert);
        if ( insert == 0 ) {
            // leaf already encountered -&gt; increment its count
            CAAPstLeafRef * pRetrieve = HashTabRef.Locate(pToInsert);
...
            pRetrieve-&gt;<strong>IncrementLeaves</strong>();
...
        } else {
            // new leaf, update the output list
            ListRef.Append(pToInsert);
        }</pre>
<p>For a leaf that's already encountered, we update its leave count by calling
<code>CAAPstLeafRef::IncrementLeaves</code>. Otherwise, we insert this newly found leaf 
in the output list.</p>
<p>To sum up, creating a BOM is just traversing a Product structure looking for 
leaves and counting how many times each one is encountered.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Outputting the BOM</h3>
<p>Once the BOM is obtained as a list of CAAPstLeafRef's, it can be output in any 
format. For each CAAPstLeafRef, we just need to:</p>
<ul>
	<li>Call CAAPstLeafRef::GetReference and CAAPstLeafRef::GetCountOfLeaves get 
		the leaf as a <em>CATIPLMNavEntity</em> and its count respectively.
		<pre class="code">HRESULT CAAPstFormatTheBOM_txt (const CATUnicodeString&amp; RootName,
                                const CATUnicodeString&amp; PathOutputDir,
                                CATLISTP(CAAPstLeafRef)&amp; ListRef)
{
...
    int BOMsize = ListRef.Size();
    for (int i=1; i &lt;= BOMsize; i++) {
        CAAPstLeafRef *pCurrentLeafRef = ListRef[i];
...
        CATIPLMNavEntity * pNavEntity = NULL ;
        pCurrentLeafRef-&gt;GetReference(pNavEntity);
...
        int <strong>count</strong> = pCurrentLeafRef-&gt;GetCountOfLeaves();
...</pre>
	</li>
	<li>Call CATIPLMNavEntity::GetPublicAttributes to retrieve all the attributes 
		to be output
		<pre class="code">        CATListOfCATUnicodeString <strong>ListAttrName</strong>,<strong>listAttrValue</strong> ;
        pNavEntity-&gt;GetPublicAttributes(<strong>ListAttrName</strong>, <strong>listAttrValue</strong>);</pre>
	</li>
</ul>
<p>A line of the BOM can now be output: its attributes are in <strong>ListAttrName/listAttrValue</strong> 
and its quantity in <strong>count</strong>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>In this article, you've learned how to create the BOM of a given Product structure. 
It's just a particular case of browsing where an action is triggered whenever a 
reference is a leaf (i.e. has no children).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td><a href="images/CAAPstGeneratingBOMExample.xml">XML output example</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding and Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcBrowsingProductModel.htm">Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [May 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
