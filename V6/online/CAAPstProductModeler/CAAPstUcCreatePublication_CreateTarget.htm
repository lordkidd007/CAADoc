<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Publication's Target</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Publication's Target</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article illustrates the steps involved in creating various targets 
		in a Product Model. A Pointed object is defined by the target object. A 
		Target contains all the information of the pointed object, which includes 
		the pointed object along with the path of instances, the Rep Instance defining 
		the pointed object. Creation of a Publication is a subject of the Use Case &quot;Creating 
		Publications in a Product Model&quot; [<a href="#References">2</a>] to be 
		read in continuity with the current Use Case.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAMmrCreatePublication_CreateTarget Use 
				Case</a>
				<ul>
					<li><a href="#What">What Does CAAMmrCreatePublication_CreateTarget</a></li>
					<li><a href="#How">How to Launch CAAMmrCreatePublication_CreateTarget</a></li>
					<li><a href="#Where">Where to Find the CAAMmrCreatePublication_CreateTarget 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The user learns to create Target for the pointed object using the ObjectModelerBase 
framework APIs. In this framework , the static CreateObjectInContext API of the 
class CATOmbObjectInContext enables us create a:</p>
<ul>
	<li>Target pointing to an Occurrence.</li>
	<li>Target pointing to a PLM Component (Connection, Publication).</li>
	<li>Target pointing to a target inside the main SD (Stream Descriptor) of a 
		PLM Representation Reference [<a href="#References">6</a>].</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAMmrCreatePublication_CreateTarget Use Case</h2>
<p>CAAMmrCreatePublication_CreateTarget is a use case of the CAAMechanicalModeler.edu 
framework that illustrates fundamentally the ObjectModelerBase framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAMmrCreatePublication_CreateTarget Do</h3>
<p>The use case begins with opening the Root Product viz. CAAPstPLORoot in &quot;Authoring 
Mode&quot;. This mode ensures that all PLM components of the Product Model are loaded 
in session [<a href="#References">4</a>], as seen in the snapshot [<a href="#Fig1">Fig.1</a>] 
below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1 The Input Root Reference</caption>
	<tr>
		<td>
		<img alt="The Input Root Reference" src="images/CAAPstCreatePublication_Fig1.jpg"/></td>
	</tr>
</table>
<p>We have Root namely. CAAPstPLORoot which has the CAAPstPLOSub1.1 instance under 
it. CAAPstPLOSub1.1 is an instance of the CAAPstPLOSub1 reference</p>
<p>The Product Reference CAAPstPLOSub1 aggregates in turn</p>
<ul>
	<li>one instance CAAPstPLOSub2.1 (instance of CAAPstPLOSub2).</li>
	<li>a Rep Instance CAAPstPLORepSub1.</li>
</ul>
<p>The Product Reference CAAPstPLOSub2 has a Publication viz. CAAPstPLOPubSub2, 
associated with it.</p>
<p>The Rep Ref CAAPstPLORepSub1 has a Knowledge Parameter viz. CAAPstPLOMyParameter 
of the type &quot;string&quot; associated with it. The [<a href="#Fig2">Fig. 2</a>] 
depicts this association.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2 The CAAPstPLOMyParameter Parameter</caption>
	<tr>
		<td>
		<img alt="The CAAPstPLOMyParameter Parameter" src="images/CAAPstCreatePublication_KnowParam.jpg"/></td>
	</tr>
</table>
<p>The &quot;Formulas&quot; dialog box appears through the command Fx in the CATIA 
3D Shape workbench.</p>
<p>The use case then creates the following Target's.</p>
<ol>
	<li>A Target, pointing to an instance: CAAPstPLOSub2.1.</li>
	<li>A Target, pointing a PLM Component, a Publication: CAAPstPLOPortSub2.</li>
	<li>A Target, pointing to an element inside a Rep Ref: the CAAPstPLOMyParameter 
		parameter.</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAMmrCreatePublication_CreateTarget</h3>
<p>To launch CAAMmrCreatePublication_CreateTarget, you will need to set up the build 
time environment, then compile CAAMmrCreatePublication along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>]. 
To launch the use case execute the command:</p>
<p><code>mkrun -c &quot; CAAMmrCreatePublication Repository Server User Password 
SecurityCtx PLMType PLM_ExternalID V_version&quot;.</code></p>
<p>where:</p>
<table>
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer ( as the use case modifies the PLM Data).</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A string representing PLM Product type</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		be browsed</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference</td>
	</tr>
</table>
<p>* The input model is retrieved by importing the CAAMmrCreatePublication.3dxml 
file from the CAAMechanicalModeler.edu fwk.</p>
<p><code>InstallRootFolder\CAAMechanicalModeler.edu\InputData\CAAMmrCreatePublication.3dxml\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Product Reference with the following attributes:</p>
<ul>
	<li>PLM_ExternalID: <code>CAAPstPLORoot</code></li>
	<li>Version: ---</li>
</ul>
<p><strong>Attention</strong>: This use case saves the input model. So you must reimport the 
original component with another prefix, to re-execute and see the modifications. 
Please refer to the document [<a href="#References">1</a>] for how to import and 
reimport such a 3D XML file in your PLM repository.</p>
<p>The PLM_ExternalID attribute value of the imported model is typically of the 
format &quot;YourPrefix + CAAMmrPLORoot&quot;, where YourPrefix is the string provided 
as prefix, while importing a 3D XML file to CATIA.</p>
<p>For eg, the screenshot above [<a href="#Fig2">Fig. 2</a>] depicts our input model 
in CATIA, available thanks to a 3D XML file import with &quot;<strong>gro</strong>&quot; 
as prefix.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAMmrCreatePublication_CreateTarget Code</h3>
<p>The CAAMmrCreatePublication_CreateTarget use case is made of a single file located 
in the CAAMmrCreatePublication.m module of the CAAMechanicalModeler.edu framework:</p>
<p><code>InstallRootFolder\CAAMechanicalModeler.edu\CAAMmrCreatePublication.m\</code></p>
<p>And functions defined in the CAAAdpUtilities.m module of the CAAPLMClientAdapter.edu 
framework:</p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>A prerequisite framework namely. CAAPLMClientAdapter.edu, which comes with the 
CAA Install, requires a special mention here, since it provides us with a method 
CAAOpenPLMcomponent. This CAA API is dedicated for opening the Root Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are the following logical steps in CAAMmrCreatePublication_CreateTarget:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the Root in Authoring Mode</a></li>
	<li><a href="#Step2">Retrieving the Various Instances under the Root</a></li>
	<li><a href="#Step3">Retrieving the Rep Instance Associated with CAAMmrPLOSub1</a></li>
	<li><a href="#Step4">Retrieving the Knowledge Parameter Aggregated under Rep 
		Ref CAAMmrPLORepSub1</a></li>
	<li><a href="#Step5">Retrieving the Publication Aggregated under CAAMmrPLOSub2</a></li>
	<li><a href="#Step6">Creating a Target Pointing to a Knowledge Parameter</a></li>
	<li><a href="#Step7">Creating a Target Pointing to Another Instance (Visualized 
		Occurrence)</a></li>
	<li><a href="#Step8">Creating a Target Pointing to Another Publication</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAMmrCreatePublication_Target use case begins by creating a session and 
connecting to the Input Repository. This, being the most fundamental prerequisite 
for all PS use cases, it is the first step in their execution.</p>
<p>In this case, we create a session &amp; connect to Repository with the Designer 
as a security context (which permits us to modify PLM data). There are other parameters 
as well, details of which can be found in the &quot;<strong>Creating a Basic PLM Batch</strong>&quot; 
use case article [<a href="#References">5</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Root in Authoring Mode</h3>
<p>We open the input Reference in an &quot;Authoring mode&quot; to load the Product 
model with its associated Representation Instances and Publications. This is because, 
in the steps ahead, we create a Target pointing a Publication and another Target 
pointing to a Knowledge Parameter within a Rep Instance.</p>
<pre class="code">	
	CATString PLM_Type = iArgv[6];
	CATUnicodeString PLM_ExternalIDValue_RootRef = iArgv[7];
	CATUnicodeString V_versionValue = iArgv[8];
	<strong>CATIPrdPublications</strong>* <strong>piPublications_Root</strong> = NULL;

	<strong>CATBoolean</strong> <strong>ibExpandAll</strong> = <strong>TRUE</strong>;
	CATOmbLifeCycleRootsBag Bag;
	hr = <strong>::CAAOpenPLMComponent</strong>(PLM_Type,
    			         PLM_ExternalIDValue_RootRef,
    			         V_versionValue,
			         IID_CATIPrdPublications,
			         (void **)&amp;piPublications_Root,
			         Bag,
    			         ibExpandAll);
...</pre>
<p>The &quot;<strong>Query PLM Component with Unique Key</strong>&quot; Use Case [<a href="#References">4</a>] 
explains the APIs which open/load various PLM Components in session in &quot;Authoring 
mode&quot;. We retrieve the <em>CATIPrdPublications</em> Interface pointer (piPublications_Root) 
on the input model, loaded in the session.</p>
<p>It is important to remember that though the Rep Ref associated with the input 
model, loaded in session is in Visu Mode. In order to retrieve the Knowledge Parameter 
within it, we would have to switch the Rep Ref to Edit Mode. The article &quot;<strong>PLM 
Representation Reference</strong>&quot;[<a href="#References">6</a>] details the steps 
involved in doing this switch.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the Various Instances under the Root</h3>
<p>The Target creation takes a CATLISTP(CATIPLMComponent)object, as one of its input 
arguments. Its a list of Instances which defines the path from the Root Reference 
aggregating the Publication to the target entity, pointed to by the Publication. 
Hence, we begin with the various instances under the Root.</p>
<p>We can easily seek the Instances constituting the input Product Model thanks 
to the Browsing APIs detailed in the &quot;<strong>Browsing a Product Model</strong>&quot; 
[<a href="#References" name="3">3</a>] Use Case.</p>
<pre class="code">
 ...    
         CATIPLMNavReference* piNavRef = NULL;
	hr = <strong>piPublications_Root</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPLMNavReference</strong>,
				           (void **)&amp;<strong>piNavRef</strong>);

	<strong>CATListPtrCATIPLMNavEntity childrenList;</strong>
	<strong>CATPLMCoreType</strong> coreTypeInstance = <strong>PLMCoreInstance</strong>;
	hr = <strong>piNavRef</strong>-&gt;<strong>ListChildren</strong>(childrenList,1,&amp;coreTypeInstance);

	<strong>piNavEnt</strong> = <strong>childrenList[1]</strong>;
	CATIPrdObject* piPrdObj_Sub11 = NULL;
	hr = <strong>piNavEnt</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPrdObject</strong>,
				  (void **)&amp;<strong>piPrdObj_Sub11</strong>);<code></code>
...</pre>
<p>We begin by seeking the &quot;Instance&quot; 
under CAAMmrPLORoot namely. CAAMmrPLOSub1.1.</p>
<p>In an earlier step, we loaded the input model in session and retrieved a CATIPrdPublications* 
(piPublications_Root) on it. [<a href="#Step1">Opening the Root in Authoring Mode</a>]</p>
<p>A Product Reference implements a <em>CATIPLMNavReference</em> Interface, whose 
ListChildren API returns the list of children of an input PLMCoreType, beneath the 
Reference. Here we seek the PLMCoreInstances aggregated beneath Root.</p>
<p>Each Child in that list, is of the default type <em>CATIPLMNavEntity</em>. Next, 
we have a call to QueryInterface , which returns us a <em>CATIPrdObject*</em> type 
on the Instance namely CAAMmrPLOSub1.1 [<a href="#Fig1">Fig. 1</a>]. This will 
be used later for target creation.</p>
<p>Next we proceed to seek the &quot;Instance&quot; under CAAMmrPLOSub1 namely. 
CAAMmrPLOSub2.1.</p>
<pre class="code">	<strong>CATPLMCoreType</strong> coreTypeInstance = <strong>PLMCoreInstance</strong>;   
         CATIPLMNavInstance* piNavInst = NULL;
	<strong>piPrdObj_Sub11</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPLMNavInstance</strong>,
				    (void **)&amp;<strong>piNavInst</strong>);
    	<strong>CATIPLMNavReference</strong>* <strong>piNavRef</strong> = NULL;
	hr = <strong>piNavInst</strong>-&gt;<strong>GetReferenceInstanceOf</strong>(piNavRef);

	hr = <strong>piNavRef</strong>-&gt;<strong>ListChildren</strong>(childrenList,1,&amp;coreTypeInstance);
	
	<strong>piNavEnt</strong>= <strong>childrenList[1]</strong>;
	CATIPrdObject* piPrdObj_Sub21 = NULL;
	hr = <strong>piNavEnt</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPrdObject</strong>,(void **)&amp;<strong>piPrdObj_Sub21</strong>);
...</pre>
<p>From an earlier step, we have a CATIPrdObject type on the Instance namely CAAMmrPLOSub1.1<strong>.</strong> 
The <em>CATIPLMNavInstance</em> implementation on a Instance returns the Reference 
associated with a Product Instance.</p>
<p>We seek the Reference of CAAMmrPLOSub1.1 as a <em>CATIPLMNavReference</em> type 
(piNavRef, a pointer to CAAMmrPLOSub1), which enables us list the children beneath 
a Reference of the PLMCoreType specified.</p>
<p>Yet again, we seek all children of type, PLMCoreInstance. Each child is of default 
type <em>CATIPLMNavEntity</em> and a call to QueryInterface returns us a <em>CATIPrdObject</em> 
on the child instance. Finally, we have piPrdObj_Sub21, a <em>CATIPrdObject*</em> 
type on CAAMmrPLOSub2.1.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Rep Instance Associated with CAAMmrPLOSub1</h3>
<p>We intend to create a Target pointing to a Knowledge Parameter within a Representation 
Reference namely. CAAMmrPLORepSub1 associated with the Product Reference namely. 
CAAMmrPLOSub1.</p>
<pre class="code"><strong>	CATPLMCoreType coreTypeRepInst = PLMCoreRepInstance;
	hr = piNavRef-&gt;ListChildren(childrenList,1,&amp;coreTypeRepInst);
	
	piNavEnt = childrenList[1];
</strong>	CATIPrdRepInstance* piRepInst_WithSub1 = NULL;
<strong>	hr = piNavEnt-&gt;QueryInterface(IID_CATIPrdRepInstance,
				  (void **)&amp;piRepInst_WithSub1);</strong>

     	CATIPrdObject* prdObjRepInst = NULL;
	hr = <strong>piRepInst_WithSub1</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPrdObject</strong>,
					(void**)&amp;<strong>prdObjRepInst</strong>);
	
	<strong>CATBaseUnknown* oRepRefOnSub1</strong> = NULL;
	hr = <strong>prdObjRepInst</strong>-&gt;<strong>GetReferenceObject</strong>(oRepRefOnSub1,
      				<strong>IID_CATIPsiRepresentationLoadMode</strong>);
    	<strong>CATIPsiRepresentationLoadMode* pRepLoadMode</strong> = 
      				 (CATIPsiRepresentationLoadMode*)oRepRefOnSub1;
...</pre>
<p>We seek the Representation Instances beneath the Child Reference namely CAAMmrPLOSub1.</p>
<p>The method is similar to that adopted for seeking the Child Instances beneath 
References, except that the PLMCoreType for the child is PLMCoreRepInstance here.</p>
<p>Since for the Target, the input Representation Instance is of type <em>CATIPrdRepInstance</em>, 
our pointer namely. piRepInst_WithSub1 to the Representation Instance beneath CAAMmrPLOSub1 
is of the type <em>CATIPrdRepInstance</em>.</p>
<p>The <em>CATIPrdObject</em> implementation on a Representation Instance, returns 
the Representation Reference associated with it. So, a call to QueryInterface yields 
a <em>CATIPrdObject</em>* on our Rep Inst.</p>
<p>We then seek the Representation Reference namely. CAAMmrPLORepSub1 as a <em>CATIPsiRepresentationLoadMode</em>* 
type namely. oRepLoadMode. The <em>CATIPsiRepresentationLoadMode</em> implementation 
of a Rep Ref enables us switch it to &quot;Edit Mode&quot;. The next section details 
the necessity of doing so.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving the Knowledge Parameter Aggregated under Rep 
Ref CAAMmrPLORepSub1</h3>
<p>In an earlier section &quot;<a href="#Step1">Opening the Root in Authoring Mode</a>&quot;, 
we did mention that though the input model is loaded in an &quot;Authoring mode&quot;, 
the associated Representation References are loaded in &quot;Visu mode&quot;. In 
order to retrieve the Knowledge Parameter&gt; from a Rep Ref, we switch its loading 
mode to &quot;Edit mode&quot;. The steps involved in bringing about that switch 
are detailed in an article &quot;<strong>PLM Representation Reference</strong>&quot;[<a href="#References">6</a>].
</p>
<p>Next, the Applicative Container &quot;<strong>CATPrtCont</strong>&quot; associated 
with this Rep Ref is retrieved. The <code>CATIPLMNavRepReference::RetrieveApplicativeContainer</code> 
implementation on the Rep Ref (<code>piPLMNavReprefOnRepRef</code>) returns the 
container, <code>piPartContainer</code>, as a <em>CATIMmiPrtContainer</em>* type.</p>
<p>We then seek the MechanicalPart feature aggregated within this container. The
<code>CATIMmiPrtContainer::GetMechanicalPart</code> call on the Applicative Container(<code>piPartContainer</code>), 
returns the MechanicalPart feature, as a <em>CATIMmiMechanicalFeature</em> handler 
type (<code>spMechFeatOnPart</code>).</p>
<p>The <em>CATIParmPublisher</em> implementation (<code>piParmPublisherOnMechPart</code>) 
on the MechanicalPart feature, enables us seek its &quot;CAAMmrPLOMyParameter&quot; 
Knowledge Parameter. <code>piParmPublisherOnMechPart</code> is retrieved thanks 
to a QI call on <code>spMechFeatOnPart</code>, a <em>CATIMmiMechanicalFeature</em> 
type.</p>
<pre class="code">
...
         CATIMmiPrtContainer * piPartContainer = NULL ;
		
         rc = <strong> piPLMNavReprefOnRepRef-&gt;RetrieveApplicativeContainer</strong>(&quot;CATPrtCont&quot;,
        		                  IID_CATIMmiPrtContainer,(void**)&amp;piPartContainer);
         CATIMmiMechanicalFeature_var spMechFeatOnPart ; 
         rc = <strong>piPartContainer-&gt;GetMechanicalPart</strong>(spMechFeatOnPart);
         ...
         CATICkeParm_var spCkeParam;
         CATBaseUnknown* piCatBase_OnParameterUnderSub1 = NULL;
         hr = spCkeParam-&gt;QueryInterface(IID_CATBaseUnknown,
         		                      (void **)&amp;<strong>piCatBase_OnParameterUnderSub1</strong>);
...</pre>
<p>The Visitor Design Pattern enables us retrieve the Knowledge Parameter from the 
Rep Ref. The Knowledge Parameter is sought as a <em>CatBaseUnknown</em>* type, a type 
input for Target creation, in the step ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving the Publication Aggregated under CAAMmrPLOSub2</h3>
<p>A Target pointing a Publication has to be created. Hence, we retrieve the Publication 
aggregated under CAAMmrPLOSub2, in this step.</p>
<pre class="code">	CATBaseUnknown* poSub2Ref= NULL;
	hr = <strong>piPrdObj_Sub21</strong>-&gt;<strong>GetReferenceObject</strong>(<strong>poSub2Ref</strong>,<strong>IID_CATIPrdPublications</strong>);

<strong>	CATIPrdPublications_var spPublicationsSub2Ref</strong> = <strong>poSub2Ref</strong>;
	CATIPrdIterator *piIterator = NULL;
	hr = <strong>spPublicationsSub2Ref</strong>-&gt;<strong>Iterator</strong>(<strong>piIterator</strong>);
	
	<strong>CATBaseUnknown* pCBU</strong> = NULL;
	CATIPrdPublication* piPublication, *piPublication_BelowSub2;
	piPublication = piPublication_BelowSub2 = NULL;
	hr = <strong>piIterator</strong>-&gt;<strong>Next</strong>(pCBU);
     	while (SUCCEEDED(hr))
	{
		hr = <strong>pCBU</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPrdPublication</strong>,
				        (void**)&amp;<strong>piPublication</strong>);
		CATUnicodeString oPublicationName;
		hr = piPublication-&gt;GetName(oPublicationName);
	
		if (oPublicationName == "CAAPstPLOPortSub2")
		<strong>piPublication_BelowSub2</strong> = <strong>piPublication</strong>;
		hr = piIterator-&gt;Next(pCBU);
	}
				
	CATIPrdObject *piPrdObj_OnPublicationUnderSub2 = NULL;
	hr = <strong>piPublication_BelowSub2</strong>-&gt;<strong>QueryInterface</strong>(<strong>IID_CATIPrdObject</strong>,
            			    (void **)&amp;<strong>piPrdObj_OnPublicationUnderSub2</strong>);
...</pre>
<p>We have retrieved earlier a <em>CATIPrdObject*</em> on CAAMmrPLOSub2.1 (piPrdObj_Sub21). 
The <code>CATIPrdObject::GetReferenceObject</code> API returns its Reference as 
a <em>CATIPrdPublications</em>* type, which enables us retrieve all Publications aggregated 
under this Reference.</p>
<p>We identify the Publication of our interest and seek its <em>CATIPrdObject</em>* 
type, which will be used for Target creation, in the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Creating a Target Pointing to a Knowledge Parameter</h3>
<p>A target is defined in terms of the <strong>CATOmbObjectInContext</strong> object. A Target 
pointing to a Knowledge Parameter associated with CAAMmrPLOSub1.</p>
<pre class="code">
...	
	CATOmbObjectInContext * <strong>oObjectInContext_ForKnowPara</strong> =NULL;
	<strong>CATLISTP(CATIPLMComponent) MyEmptyList;</strong>
	
	<strong>CATIPLMComponent *piPlmComp_RepInstWithSub21</strong> =NULL;
	hr= <strong>piRepInst_WithSub1</strong>-&gt;QueryInterface(IID_CATIPLMComponent,
				(void**)&amp;<strong>piPlmComp_RepInstWithSub21</strong>);
	...
	<strong>CATOmbObjectInContext::CreateObjectInContext(MyEmptyList,
					        piPlmComp_RepInstWithSub21,
					        piCatBase_OnParameterUnderSub1,
					        oObjectInContext_ForKnowPara);</strong>
...</pre>
<p>We create a Target, aggregated beneath the Reference CAAMmrPLOSub1 (piPrdObj_Sub1) 
pointing to a Knowledge Parameter namely, CAAMmrPLOMyParameter (piLinkObj_OnParameterUnderSub1) 
which it accesses through the Rep Inst associated with this Reference namely. CAAMmrPLORepSub1 
(piRepInst_WithSub1). The list Instances is empty since the &quot;pointing&quot; 
and the &quot;pointed to&quot; are within the same Reference namely, CAAMmrPLOSub1.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Creating a Target Pointing to Another Instance (Visualized 
Occurrence)</h3>
<p>Here we create a Target, pointing to CAAMmrPLOSub2.1 instance.</p>
<pre class="code">...  
	<strong>CATOmbObjectInContext * oObjectInContext_OnInstance</strong>=NULL;
	CATBaseUnknown* piCatBase_OnSub21=NULL;
	hr= <strong>piPrdObj_Sub21</strong>-&gt;QueryInterface(IID_CATBaseUnknown,(void**)&amp;<strong>piCatBase_OnSub21</strong>);
	...
	<strong>CATOmbObjectInContext::CreateObjectInContext(MyEmptyList,NULL,
				piCatBase_OnSub21,oObjectInContext_OnInstance);</strong>
      ...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Creating a Target Pointing to Another Publication</h3>
<p>Next, we build a list of Instances, for the Target, pointing to the publication 
CAAPstPLOPortSub2 under CAAPstPLOSub2 associated with the root. A CATLISTP(CATIPLMComponent) 
object represents this list.</p>
<pre class="code">...
 	<strong>CATIPLMComponent *piPlmComp_Sub11=NULL;</strong>
 	hr= piPrdObj_Sub11-&gt;QueryInterface(IID_CATIPLMComponent,
 				      (void**)&amp;<strong>piPlmComp_Sub11</strong>);
	
     <strong>    CATIPLMComponent *piPlmComp_Sub21=NULL;</strong>   
 	hr= piPrdObj_Sub21-&gt;QueryInterface(IID_CATIPLMComponent,
 				      (void**)&amp;<strong>piPlmComp_Sub21</strong>);
 	...
	<strong>CATLISTP(CATIPLMComponent) pListOfPlmCompInstances=NULL;</strong>
 	<strong>pListOfPlmCompInstances.Append(piPlmComp_Sub11);</strong>
 	<strong>pListOfPlmCompInstances.Append(piPlmComp_Sub21);</strong>
...</pre>
<p>The list has both the Instances namely. CAAMmrPLOSub1.1 and CAAMmrPLOSub2.1 in 
it.</p>
<p>A Target pointing to the Publication</p>
<pre class="code">...
	<strong>CATBaseUnknown* piCatBase_OnPublicationUnderSub2</strong> =NULL;
	hr= <strong>piPrdObj_OnPublicationUnderSub2-&gt;</strong>QueryInterface(IID_CATBaseUnknown,
			               (void**)&amp;<strong>piCatBase_OnPublicationUnderSub2</strong>);
	...
	<strong>CATOmbObjectInContext::CreateObjectInContext(pListOfPlmCompInstances,NULL,
					piCatBase_OnPublicationUnderSub2,
					oObjectInContext_OnPublication);</strong>     
...</pre>
<p>A Target pointing to a Publication viz. CAAMmrPLOPubSub2 aggregated under CAAMmrPLOSub2.</p>
<p>The path leading from Root to this Publication, has the two Instances in it namely, 
CAAMmrPLOSub1.1 and CAAMmrPLOSub2.1.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAMmrCreatePublication_CreateTarget use case ends by simply closing the 
PLM session. Since all Product Structure use cases necessarily conclude by closing 
the PLM session, we have a dedicated article on this topic viz. &quot;<strong>Creating 
a Basic PLM Batch</strong>&quot; [<a href="#References">5</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The article dealt with various ObjectModelerBase framework APIs, for creating 
Targets. A Pointed object is defined by the target object.</p>
<p>This Use Case creates Targets, while &quot;Creating Publications in a Product 
Model&quot; [<a href="#References">2</a>] to be read next in continuity, creates 
Publications.</p>
<p>We have created three different types of Targets based on the objects to which 
they point to namely.</p>
<ul>
	<li>an Instance (Visualized Occurrence).</li>
	<li>a Knowledge Parameter.</li>
	<li>Another Publication.</li>
</ul>
<p>The entire process of creating a list of Instances involved calls to the Browsing 
APIs, a subject of discussion of the &quot;Browsing a Product Model&quot; [<a href="#References">3</a>] 
Use Case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAPstUcCreatePublication_CreatePublication.htm">Creating Publications 
		in a Product Model</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAPstUcBrowsingProductModel.htm">Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td valign="top">[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponentWithUniqueKey.htm">
		Query PLM component with Unique Key</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllRepresentation.htm">
		PLM Representation Reference</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
