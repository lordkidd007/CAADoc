<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>PLM Representation References</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>PLM Product Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The technical article [<a href="#References">1</a>] has given an overview 
		of what are the PLM Representation Reference. This current article details 
		the PLM Product Representation Reference distinctiveness.</p>
		<ul>
			<li><a href="#Intro">Introduction</a></li>
			<li><a href="#Contents">PLM Product Representation Reference Contents</a>
				<ul>
					<li><a href="#RepModeler">Rep Modeler Contents</a></li>
					<li><a href="#Technological">Technological Contents</a></li>
					<li><a href="#NonCATIA">Non CATIA Contents</a></li>
				</ul>
			</li>
			<li><a href="#PLM">PLM Product Reference and PLM Product Representation 
				Reference</a>
				<ul>
					<li><a href="#MultiandMono">Multi and Mono Instantiable PLM 
						Representation Reference</a></li>
					<li><a href="#MultiRepresentation">Multi-Representation</a></li>
				</ul>
			</li>
			<li><a href="#Mono">Managing a Mono-Instantiable PLM Product Representation 
				Reference</a>
				<ul>
					<li><a href="#CreationMono">Creation and Instantiation</a></li>
					<li><a href="#ReplaceMono">Replacement</a></li>
					<li><a href="#DeletionMono">Deletion</a></li>
					<li><a href="#OpeningMono">Opening</a></li>
				</ul>
			</li>
			<li><a href="#Multi">Managing a Multi-Instantiable PLM Product Representation 
				Reference</a>
				<ul>
					<li><a href="#CreationMulti">Creation</a></li>
					<li><a href="#InstantiationMulti">Instantiation</a></li>
					<li><a href="#DeletionMulti">Deletion</a></li>
					<li><a href="#OpeningMulti">Opening</a></li>
				</ul>
			</li>
			<li><a href="#Working">Working with Product Representation References</a>
				<ul>
					<li><a href="#Loading">Stream Loading Mode</a></li>
					<li><a href="#Type">Main Stream Type, Is It A 3D Geometry</a></li>
					<li><a href="#Descriptor">Main Stream Data Access</a></li>
				</ul>
			</li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Intro"></a>Introduction</h2>
<p>To sump up the technical article [<a href="#References">1</a>], a PLM Representation 
Reference is a PLM Object with PLM attributes [<a href="#References">2</a>] like 
any other PLM Objects. But the PLM Representation Reference has a specificity. It 
is an object associated with data files. These data files are called <strong>stream</strong>. 
A PLM Representation Reference can have several steams: one is the <strong>main</strong> 
stream, and all others are <strong>secondary</strong> streams.</p>
<ul>
	<li>The <strong>main</strong> stream also called <strong>Authoring</strong> 
		stream, is what the PLM Representation Reference is created with. This stream 
		can be accessed and its contents can be linked to other PLM objects.</li>
	<li>The <strong>secondary</strong> streams are by contrast generated internally 
		and cannot be accessed. Moreover no link can be established to other PLM 
		objects. These streams are used in place of the main one for performance 
		reasons.</li>
</ul>
<p>The stream are stored in <strong>store</strong> whereas the PLM Representation 
Reference is stored in the vault (database or repository):</p>
<table>
	<caption>Fig.1 Store and Vault</caption>
	<tr>
		<td>
		<img alt="Store and Vault" height="290" src="images/CAAPstProductRepRefVaultStore.gif" width="441"/></td>
	</tr>
</table>
<p>Now have a look to the Product distinctiveness.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Contents"></a>PLM Product Representation Reference Contents</h2>
<p>A PLM Product Representation Reference can be created to represent three kinds 
of contents:</p>
<ul>
	<li><a href="#RepModeler">Rep Modeler Contents</a>, data file contains features 
		created through DS representation modeler (like Mechanical Modeler).</li>
	<li><a href="#Technological">Technological contents</a>, data file contains 
		features created by CAA application or DS application.</li>
	<li><a href="#NonCATIA">Non CATIA contents</a>, for data file like cgr and .model 
		(V4 file).</li>
</ul>
<p>Have a look to these three cases.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="RepModeler"></a>Rep Modeler Contents</h3>
<p>There are at least three kinds of Rep modeler, each one creating its own main 
stream and its own secondary streams.</p>
<ul>
	<li><strong>Mechanical Modeler</strong>, the main stream is a 3DShape. There 
		is a dedicated article about this specific case [<a href="#References">3</a>].</li>
	<li><strong>Drafting Modeler</strong>, the main stream is a Drawing.</li>
	<li><strong>Material Modeler</strong>, the main stream is a CATMaterial.</li>
</ul>
<p>Rep Modeler creates structured streams containing one or several containers [<a href="#References">4</a>].</p>
<p>The main stream is created with minimal data by the rep modeler: some containers 
and perhaps some data inside them.</p>
<table>
	<caption>Fig.2 A Newly PLM Product Rep Ref with Rep Modeler Contents</caption>
	<tr>
		<td>
		<img alt="Newly PLM Product Rep Ref" height="203" src="images/CAAPstProductRepRefV5Data1.gif" width="644"/></td>
	</tr>
</table>
<p>Then a CAA application can add data in DS containers, or create its own applicative 
containers [<a href="#References">4</a>].</p>
<table>
	<caption><a name="Fig3">Fig.3</a> Added Data within PLM Product Rep Ref with 
	Rep Modeler Contents</caption>
	<tr>
		<td>
		<img alt="Added Data" height="273" src="images/CAAPstProductRepRefV5Data2.gif" width="642"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Technological"></a>Technological Contents</h3>
<p>In this case the PLM Product Representation Reference is named 'Technological 
Representation', or shorter '<strong>Techno Rep</strong>'. The Product Techno Rep 
is created with an empty main stream. It will never add secondary streams.</p>
<table>
	<caption>Fig.4 A Newly PLM Product Rep Ref with Technological Contents</caption>
	<tr>
		<td>
		<img alt="Newly PLM Product Rep Ref" height="105" src="images/CAAPstProductRepRefTechnoRep1.jpg" width="478"/></td>
	</tr>
</table>
<p>Then a CAA application can store its applicative data in adding containers to 
the main stream [<a href="#References">4</a>].</p>
<table>
	<caption>Fig.5 A Techno Rep with Applicative Data</caption>
	<tr>
		<td>
		<img alt="Techno Rep" height="207" src="images/CAAPstProductRepRefTechnoRep2.gif" width="646"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="NonCATIA"></a>Non CATIA Contents</h3>
<p>In this case:</p>
<ul>
	<li>The main stream is created with the contents of an existing document specified 
		by a file system path.</li>
	<li>There is no secondary stream except for the .model case.</li>
</ul>
<p>The main stream is created by taking a snapshot of the document and stored in 
the store. Once this is done, the two copies of the data (in the store and on the 
file system) are completely <em>independent</em> of each other.</p>
<table>
	<caption>Fig.6 Non CATIA Stream</caption>
	<tr>
		<td>
		<img alt="Non CATIA Stream" height="291" src="images/CAAPstProductRepRefNonCatia.jpg" width="452"/></td>
	</tr>
</table>
<p>The list of possible type of document are listed in the referenced article [<a href="#References">1</a>].</p>
<table class="Remark">
	<tr>
		<td class="Remark"><span class="run-in">Warning</span>: Do not try to attach 
		a file except cgr or .model file. There is no API to retrieve a txt file, 
		a xls or any others file.</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="PLM"></a>PLM Product Reference and PLM Product Representation Reference</h2>
<p>A PLM Product Representation Reference can live stand-alone, you can open a 3D 
Shape, but it can be also instantiated to create an assembly. The instantiation, 
a PLM Product Representation Instance is always aggregated by a PLM Product Reference 
[<a href="#Fig6">Fig.6</a>]. This chapter is an overview of what you must know 
about PLM Product Representation Reference in Product context.</p>
<p>All the API of creation are within the <strong>ProductStructureUseItf</strong> 
framework.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="MultiandMono"></a>Multi and Mono Instantiable PLM Representation Reference</h3>
<p>Interactively, like by CAA API, you can create two kinds of PLM Product Representation 
Reference:</p>
<ul>
	<li><strong>Mono-instantiable</strong>, it means that the PLM Product Representation 
		Reference could be instantiated only one time. Moreover the unique instantiation 
		must occur <em>before</em> the first save. After a save, you may not instantiated 
		it.</li>
	<li><strong>Multi-instantiable</strong>, or shared, it means that you can re-use 
		it several times to be instantiated.</li>
</ul>
<p>This picture shows the different icons to differentiate them.</p>
<p>
<img alt="Icons" height="110" src="images/CAAPstProductRepRefMonoMultiInst.gif" width="281"/></p>
<p>At the top, two mono-instantiable PLM Product Representation Reference, and beneath, 
two multi-instantiable PLM Product Representation Reference.</p>
<p>It is strongly recommended to work with mono-instantiable PLM Product Representation 
References. Interactively, in assembly context, a mono-instantiable PLM Product 
Representation Reference is always created. You have a command to switch on a multi-instantiable 
one, But there is no CAA API to make this switch.</p>
<p>Once you have a PLM Product Representation Reference, to know its status (mono 
or multi instantiable), you can use the <em>CATIPLMNavRepReference</em> interface 
(CATPLMComponentInterfaces framework) and its <code>IsOnceInstantiable</code>() 
method.</p>
<p>Attention, among the three kinds of PLM Product Representation Reference, a
<a href="#Technological">technological PLM Product Representation Reference</a> 
is always created mono-instantiable.</p>
<p>The interface <em>CATIPLMRepInstances</em>, and its method <code>iterator</code> 
gives access to all PLM Product Representation <strong>Instances</strong> aggregated 
by the PLM Product Reference whereas the interface <em>CATIPrdAggregatedRepresentations</em>, 
and its method <code>iterator</code>, gives only access to all mono-instantiable 
PLM Product Representation <strong>References</strong>.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="MultiRepresentation"></a>Multi-Representation</h3>
<p>A PLM Product Reference can aggregates several PLM Product Representation Instances. 
Each PLM Product Representation Instance can be the instantiation of a same PLM 
Product Representation Reference. But you can have at the same location (space location) 
two PLM Product Representation Instances, each one representing the same part but 
with two different representations (a detailed view versus a box view). We said 
that the PLM Product Reference is multi-represented.</p>
<p>There is a dedicated article about the Multi-Representation [<a href="#References">6</a>], 
refer to it for more details.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Mono"></a>Managing a Mono-Instantiable PLM Product Representation Reference</h2>
<p>This chapter presents how to create, delete and open a mono-instantiable PLM 
Product Representation Reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CreationMono"></a>Creation and Instantiation</h3>
<p>The first way to create a mono instantiable PLM Product Representation Reference 
is to use the API creating both the reference and its instance. It is the <em>CATIPrdAggregatedRepresentations</em> 
interface (ProductStructureUseItf framework). This interface contains two methods 
with explicit naming:</p>
<ul>
	<li><strong>Add3DShape</strong></li>
	<li><strong>AddNonCATIA</strong> for non CATIA contents.</li>
</ul>
<p>These two methods creates the PLM Product Representation Reference, and its instantiation 
below the PLM Product Reference implementing <em>CATIPrdAggregatedRepresentations</em>.</p>
<p>There is no API to create a technological PLM Product Representation Reference 
in the use level.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ReplaceMono"></a>Replacement</h3>
<p>Once the PLM Product Representation Reference and its unique instance is created, 
you cannot anymore use the <code>AddRepInstance</code> method of the <em>CATIPLMRepInstances</em>. 
This method checks the mono-instantiation rule. The other API checking this rule 
is the <code>ReplaceRepInstance</code> method of the <em>CATIPLMRepInstances</em> 
interface.</p>
<ul>
	<li>Whatever the reference of the input PLM Product Representation instance 
		(first argument), you cannot replace it by an instance of a mono-instantiable 
		PLM Product Representation Reference.</li>
	<li>If the input instance (still the first argument) is an instance of a mono-instantiable 
		PLM Product Representation Reference, the replacement will be impossible 
		whatever the input PLM Representation Reference (second argument) to instantiate.
	</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DeletionMono"></a>Deletion</h3>
<p>The <em>CATIPrdAggregatedRepresentations</em> interface contains one method,
<code>RemoveRepresentation</code>. This method only deletes the (unique) instance 
of a mono-instantiable PLM Product Representation Reference. So even if the argument 
of the API is a PLM Product Representation Reference pointer, what is deleted is 
its instance. The PLM Product Representation Reference is never deleted by this 
API.</p>
<p>To remove the instance of a mono-instantiable PLM Product Representation Reference, 
you can also use <code>RemoveRepInstance</code> method of the <em>CATIPLMRepInstances</em> 
interface. The two methods are equivalent.</p>
<p>Deleting a mono-instantiable PLM Product Representation Reference is possible 
through the <em>CATPLMPrdDeleteServices</em> class (ProductStructureAccess framework). 
It is only possible if the PLM Product Representation Reference is no more instantiated.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OpeningMono"></a>Opening</h3>
<p>A PLM Product Representation Reference (mono or multi) is always openness through 
the <code>CompleteAndOpen</code> method of the <em>CATAdpOpener</em> class (CATPLMIntegrationUse 
framework).</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Multi"></a>Managing a Multi-Instantiable PLM Product Representation 
Reference</h2>
<p>This chapter presents how to create, delete and open a multi-instantiable PLM 
Product Representation Reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CreationMulti"></a>Creation</h3>
<p>The factory interface,<em> CATIPrdRepresentationReferenceFactory</em>, is returned 
by the <code>CreatePrdFactory</code> method of the <em>CATPrdFactory</em> class 
(PLMSessionInterfaces framework).</p>
<pre class="code">
#include &quot;CATPrdFactory.h&quot;
#include &quot;CATIPsiPLMRepRefFactory.h&quot;
...
<strong>CATIPrdRepresentationReferenceFactory</strong> *piPsiPLMRepRefFactory = NULL;
HRESULT hr = <strong>CATPrdFactory::CreatePrdFactory</strong>(<strong>IID_CATIPrdRepresentationReferenceFactory</strong>, (void **) &amp;piPsiPLMRepRefFactory);
...</pre>
<p>The <em>CATIPrdRepresentationReferenceFactory</em> factory interface provides 
methods with an explicit naming:</p>
<ul>
	<li><strong>Create3DShape</strong> to create a 3D Shape. There are dedicated 
		API to create a drawing, or a material product representation reference.</li>
	<li><strong>CreateNonCATIA</strong> for non CATIA contents.</li>
</ul>
<p>Then you can (or not) instantiate it, it is the topic of
<a href="#InstantiationMulti">Instantiation</a> chapter.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="InstantiationMulti"></a>Instantiation</h3>
<p>Once the PLM Product Representation Reference is created with a method of the
<em>CATIPrdRepresentationReferenceFactory</em> use the <em>CATIPLMRepInstances</em> 
interface to realize the instantiation. The PLM Product Representation instance 
is created in the same PLM customization [<a href="#References">8</a>] as its aggregated 
PLM Product Reference.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="DeletionMulti"></a>Deletion</h3>
<p>Deleting a multi-instantiable PLM Product Representation Reference is possible 
through the <em>CATPLMPrdDeleteServices</em> class (ProductStructureAccess framework). 
It is only possible if the PLM Product Representation Reference is not instantiated.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OpeningMulti"></a>Opening</h3>
<p>Refer to the selection <a href="#OpeningMono">Opening</a> of the previous chapter.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Working"></a>Working With Product Representation References</h2>
<p>There are three interfaces implemented by PLM Product Representation Reference 
in the CAT3DPhysicalRepInterface framework:</p>
<ul>
	<li><em>CATIPsiRepresentationLoadMode</em> to get/change the
		<a href="#Loading">stream loading mode</a></li>
	<li><em>CATIPsiRepresentationReference</em>, to get some generic information 
		about stream data as <a href="#Type">main stream type</a></li>
	<li><em>CATIPLMNavRepReference</em>, to access <a href="#Descriptor">main stream 
		data</a>.</li>
</ul>
<p>It is worth noting that PLM Product Representation Reference can also be manipulated 
using interfaces of the CATPLMComponentInterfaces framework:</p>
<ul>
	<li><em>CATIPLMNavEntity</em>.</li>
	<li><em>CATIPLMNavRepReference</em>.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Loading"></a>Loading Mode State</h3>
<p>The loading mode are the modes to manage the stream's loading. In order to light-weight 
the memory, you can choose the loading stream. It is fully detailed in the referenced 
article [<a href="#References">9</a>]. The<em> CATIPsiRepresentationLoadMode</em> 
interface is the interface to manages this loading mode.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Type"></a>Main Stream Type, Is A 3D Geometry</h3>
<p>This <em>CATIPsiRepresentationReference</em> interface implements three methods:
<a href="#GetMainDataType">GetMainDataType</a>, <a href="#Is3DGeometry">Is3DGeometry</a> 
and <a href="#GetRepInstances">GetRepInstances</a>.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="GetMainDataType"></a>GetMainDataType</h4>
<p>This method simply returns as a CATUnicodeString the main stream type.</p>
<table class="fill">
	<tr>
		<th colspan="2">Rep Ref Type</th>
		<th>Returned String</th>
	</tr>
	<tr>
		<td rowspan="3">Rep Modeler Contents</td>
		<td>3DShape</td>
		<td>CATPart</td>
	</tr>
	<tr>
		<td>Drawing</td>
		<td>CATDrawing</td>
	</tr>
	<tr>
		<td>material</td>
		<td>CATMaterial</td>
	</tr>
	<tr>
		<td colspan="2">Technological Contents</td>
		<td>TechnologicalRepresentation</td>
	</tr>
	<tr>
		<td colspan="2">Non CATIA Contents</td>
		<td>The type of the existing non CATIA V5</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Is3DGeometry"></a>Is3DGeometry</h4>
<p>This method checks whether the PLM Product Representation Reference has a 3D 
geometry. This method is used by the Product Modeler to decide if a PLM Product 
Representation Reference has a 3D geometry to activate it.</p>
<p>Main stream types including CATPart, TechnologicalRepresentation, model and 
CGR yields a returned value of TRUE.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="GetRepInstances"></a>GetRepInstances</h4>
<p>This method retrieves all the <strong>loaded</strong> instances of the PLM Product 
Representation Reference.</p>
<pre class="code">#include &quot;CATLISTV_CATBaseUnknown.h&quot;
#include &quot;CATIPsiRepresentationReference.h&quot;
CATIPsiRepresentationReference *piPsiRepRef = ...
...
CATListValCATBaseUnknown_var spListRepInst;
hr = piPsiRepRef-&gt;<strong>GetRepInstances</strong>(spListRepInst);
...</pre>
<p><code>spListRepInst</code> is a list of PLM Product Representation Instances. 
These Instances are aggregated by a Product Reference as shown below:</p>
<table>
	<caption><a name="Fig6">Fig.6</a> The PRODUCT Model UML Schema</caption>
	<tr>
		<td>
		<img alt="The PRODUCT Model UML Schema" height="306" src="images/ProductStructureUML.jpg" width="495"/></td>
	</tr>
</table>
<p>A PLM Product Representation Instance can be handled by the <em>CATIPrdRepInstance</em> 
interface or the <em>CATIPLMNavRepInstance</em> interface.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Descriptor"></a>Main Stream Access</h3>
<p>This section discusses how to access the main stream of a PLM Product Representation 
Reference.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="RepModeler"></a>Rep Modeler Data Access</h4>
<p>In this case to access the contents of the Rep modeler's container [<a href="#Fig3">Fig.3</a>], it depends on the Rep modeler.</p>
<ul>
	<li>In the particular case of 3DShape, the <code>RetrieveApplicativeContainer</code> 
		method of <em>CATIPLMNavRepReference</em> enables you to have access to 
		the root container defined by the rep modeler.</li>
	<li>For Drawing, or Material refer you to the rep modeler documentation.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Container"></a>Applicative Data Access</h4>
<p>For information, the <em>CATIPLMNavRepReference</em> interface allows you to 
retrieve an applicative container within a PLM Product Representation Reference. 
But usually, you don't need to retrieve applicative container in the first CAA exposition 
level (i.e. Use level).</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="NonV5"></a>Non CATIA Data Access</h4>
<p>In this case you have seen that you can create a PLM Rep Ref whose the main descriptor 
is valuated by an input file.</p>
<p>There are only two cases where you can access the main stream:</p>
<ul>
	<li>.model , using CATIAV4Interfaces framework APIs. There is a use case illustrating 
		that [<a href="#References">10</a>].</li>
	<li>.cgr.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article presents a PLM Core object, the Representation Reference in the 
Product Model context, its APIs and the various loading modes.</p>
<ul>
	<li>There is always a main stream, not always a secondary stream.</li>
	<li>You can always access the main stream, except in almost all no V5 data cases.</li>
	<li>You can never access the secondary streams.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllRepresentation.htm">
		PLM Representation Reference Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAMmrMecMod/CAAMmrTa3DShape.htm')">
		From the PLM Representation to the 3D Shape</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAFmFeatMod/CAAFmTaOverview.htm')">
		Feature Modeler Overview</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAPstTaMultiRep.htm">Product Multi Representation</a></td>
	</tr>
	<tr>
		<td>[7]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllPLMComponentCreation.htm">
		PLM Component Creation</a></td>
	</tr>
	<tr>
		<td>[8]</td>
		<td>
		<a href="../CAAPLMAllConcepts/CAAPLMTaAllCusto.htm">
		Understanding PLM Modeler and Customization</a></td>
	</tr>
	<tr>
		<td>[9]</td>
		<td><a href="CAAPstTaSelectiveLoading.htm">Understanding Product Representation 
		Reference Loading Mode</a></td>
	</tr>
	<tr>
		<td>[10]</td>
		<td>
		<a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAV4iCoExistence/CAAV4iUcDataAccessUseCase.htm')">
		Retrieving V4 Elements</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [June 2008]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [June 2008]</td>
		<td>Document updated to introduce new API of creation</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
