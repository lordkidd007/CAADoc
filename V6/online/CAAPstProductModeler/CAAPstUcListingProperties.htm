<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Listing Product Properties</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Listing Product Properties</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAPstListingProperties use case. Every PLM 
		component (Product Ref, Rep Ref, Product Instance, Rep Inst) is associated 
		with three types of attributes namely <strong>Mandatory</strong>,
		<strong>Identification</strong>, and <strong>Optional</strong>. This use 
		case outputs a list of attributes of each of those three types for all kinds 
		of PLM components, through Knowledge APIs.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstListingProperties Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstListingProperties Do</a></li>
					<li><a href="#How">How to Launch CAAPstListingProperties</a></li>
					<li><a href="#Where">Where to Find the CAAPstListingProperties 
						code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to demonstrate to the client the steps 
involved in listing the properties belonging to three different categories namely
<strong>Mandatory</strong>, <strong>Identification</strong>, and <strong>Optional</strong>, 
for at least four types of PLM Components namely PLM Product Reference, PLM Product 
Instance, PLM Rep Ref and PLM Rep Instance. This actually involves invocation of 
a set of KnowledgeInterfaces APIs which complement one another to output attribute 
names, their values and other information associated with these attributes.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstListingProperties Use Case</h2>
<p>CAAPstListingProperties is a use case of the CAAProductStructure.edu framework 
that illustrates the KnowledgeInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstListingProperties Do</h3>
<p>The use case, loads a Product Model as shown in the fig below [<a href="#Fig1">Fig.1</a>]. 
User can load any input model of his choice and hence the one depicted below, only 
serves as an example, to help user understand the scenario representing this Use 
case.</p>
<table>
	<caption><a name="Fig1">Fig.1</a> Input Product Model</caption>
	<tr>
		<td>
		<img alt="Input Product Model" height="321" src="images/CAAPstListingProperties_InputModel.jpg" width="433"/></td>
	</tr>
</table>
<p>The input model has a Root CAAPstListingProperties_Root, The entities underneath 
it are:</p>
<ul>
	<li>FI (First Instance) CAAPstListingProperties_Child.1, an instance of CAAPstListingProperties_Child.</li>
	<li>Rep Inst CAAPstListingProperties_Rep.1, an instance of Rep Ref CAAPstListingProperties_Rep.</li>
</ul>
<p>The use case outputs the list of attributes, belonging to the 3 categories namely 
Mandatory, Identification and Optional and their values for all kinds of PLM Components 
namely Product Reference, First Instance, Rep Ref or Rep Inst.</p>
<p>This is accomplished through a combination of call to APIs of various interfaces 
namely <em>CATIInstance</em>, <em>CATAttributeInfos</em>, and <em>CATIValue</em>.</p>
<p>An example output for the use case run on a First Instance CAAPstListingProperties_Child.1 
is as seen below. Apart from attribute name and its value, we also retrieve the 
attribute alias name, attribute type, NLS name for the attribute type etc. One can 
also seek the type of attribute (mandatory, identifier), its update status (writable 
or read-only) and if it can be multi-valuated.</p>
<pre class="code"><strong>There is 1 Mandatory attribute</strong>
Attribute Name           PLM_ExternalID 
Attribute Value          CAAPstListingProperties_Child.1
Attribute Type Name      String   
Attribute Type User Name String    
IsMandatory              YES     
IsIdentifier             YES    
IsWritable               YES

<strong>There is 1 Identification attribute</strong>
Attribute Name           PLM_ExternalID  
Attribute Value          CAAPstListingProperties_Child.1
Attribute Type Name      String   
Attribute Type User Name String
IsMandatory              YES
IsIdentifier             YES
IsWritable               YES

<strong>There is 1 Optional attribute</strong>
Attribute Name           V_description
Attribute Value
Attribute Type Name      String
Attribute Type User Name String
IsMandatory              NO
IsIdentifier             NO
IsWritable               YES</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstListingProperties</h3>
<p>To launch CAAPstListingProperties , you will need to set up the build time environment, 
then compile CAAPstListingProperties along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstListingProperties Repository Server User Password 
SecurityCtx -Ref/Rep PLMType PLM_ExternalID V_version ReadWriteOnly [-InstRef/InstRep]&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data).
		</td>
	</tr>
	<tr>
		<th>-Ref/Rep</th>
		<td>It specifies if the PLM component being opened is a Prod Ref or a Rep 
		Ref</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		value of the input model</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference</td>
	</tr>
	<tr>
		<th>ReadWriteOnly</th>
		<td>TRUE or FALSE
		<p>FALSE gives The complete list</p>
		<p>TRUE gives only the read/write list attributes</p>
		</td>
	</tr>
	<tr>
		<th>-InstRef/InstRep</th>
		<td>The last argument can be,<p>empty: Properties of the input component 
		are displayed (Product Ref or Rep Ref)</p>
		<p>-InstRef: Properties of the first First Instance under the input Ref 
		are displayed</p>
		<p>-InstRep: Properties of the first Rep Inst under the input Ref are displayed</p>
		</td>
	</tr>
</table>
<p><strong>Note</strong>:The last option (-InstRef/InstRep) is Invalid if PLMType 
is -Rep</p>
<p>* The input model is retrieved by importing the CAAPstListingProperties.3dxml 
file from the CAAProductStructure.edu fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstListingProperties.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li>PLM_ExternalID: CAAPstListingProperties_Root</li>
	<li>Version: ---</li>
</ul>
<p>Here we have provided a 3D XML file only for the convenience of the user so that 
one doesn't have to recreate the input model. It can simply be imported from this 
3D XML file, and used for the execution further. But the user does have the liberty 
to use any input model of his choice, based on his discretion.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The PLM_ExternalID attribute value of the imported model is typically of the 
format &quot;YourPrefix + CAAPstListingProperties_Root&quot;, where YourPrefix is 
the string provided as prefix (Optional), while importing a 3D XML file to CATIA. 
Thus the Product Model after an import is seen as in the [<a href="#Fig1">Fig.1</a>] 
above, except that each of those elements which includes the Root Ref, the Product 
Inst under it and the associated Rep Inst have a prefix associated with them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstListingProperties Code</h3>
<p>The CAAPstListingProperties use case is located in the CAAPstListingProperties.m 
module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstListingProperties.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstListingProperties :</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the PLM Component</a></li>
	<li><a href="#Step2">Looking for its PLM Attributes</a></li>
	<li><a href="#Step3">Displaying PLM Attribute Information</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstListingProperties use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Reviewer 
Role (since we ain't modifying PLM data but only listing the PLM properties). There 
are other parameters as well, details of which can be found in the &quot;Connecting 
to V6 Server&quot; use case article [<a href="#References">3</a>]. This article 
primarily deals with Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the PLM Component</h3>
<p>This step involves opening a PLM Product Ref, if user intends to list the properties 
either of a PLM Product Ref or the first First Instance aggregated under it. This 
step is also relevant for a third case if the properties of the first Rep Inst associated 
with the Root Ref are to be listed.</p>
<pre class="code">...
   <strong>CATICkeObject</strong> *piCkeObjectOnPLMComp = NULL;
   CATIPLMProducts* piRefOnRoot = NULL;
   <strong>CATOmbLifeCycleRootsBag</strong> Bag;
   <strong>CATAdpOpener</strong> opener(Bag);
   ...  
   hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMProducts, (void**) &amp;piRefOnRoot);    
...</pre>
<p>The use case calls <code>CompleteAndOpen</code> of the <em>CATAdpOpener</em> 
API for opening a PLM Product Ref. The PLM Product Ref is retrieved as a <em>CATIPLMProducts</em>* 
type.</p>
<p><code>piCkeObjectOnPLMComp</code> will be the <em>CATICkeObject</em> interface 
pointer on the PLM component to retrieve PLM attributes. If the end users has chosen 
PLM Product Ref, <code>piRefOnRoot</code> a <em>CATIPLMProducts</em> interface pointer 
is used to retrieve a <em>CATICkeObject</em> interface pointer thanks a QueryInterface.</p>
<p>The loading the input model in <strong>Authoring mode</strong>, since for this 
use case we intend to retrieve the properties of all the PLM entities included in 
a product model. This includes the PLM Product Ref, Product Instance, Rep Ref and 
Rep Inst.</p>
<pre class="code">...	 
     CATIPrdIterator* pIterator = NULL;
     hr = piRefOnRoot-&gt;Iterator(pIterator,IID_CATICkeObject);
     ...
     hr = pIterator-&gt;Next((CATBaseUnknown*&amp;)piCkeObjectOnPLMComp);
...</pre>
<p>Else if the user intends to seek the properties of the first Rep Inst, that too, 
can be easily retrieved as the code extract below illustrates. We seek the Rep Inst 
as a <em>CATBaseUnknown</em>* type.</p>
<pre class="code">
     CATIPLMRepInstances* piPLMRepInst = NULL;
     <strong>hr = piRefOnRoot-&gt;QueryInterface(IID_CATIPLMRepInstances ,(void **)&amp;piPLMRepInst);</strong>
     ...
				
     CATIPrdIterator* pIterator = NULL;
     <strong>hr = piPLMRepInst-&gt;Iterator(pIterator);</strong>
     ...
     CATBaseUnknown* pUnkn = NULL; 
     <strong>hr = pIterator-&gt;Next(pUnkn);</strong> 
     ...
     hr = pUnkn-&gt;QueryInterface(<strong>IID_CATICkeObject</strong>,(void**)&amp;piCkeObjectOnPLMComp);
 ...</pre>
<p>If the user intends to seek the properties of a <strong>Rep Ref</strong>, one 
would have to open it and load it in the current session, through an API invocation, 
as seen below. The use case calls CompleteAndOpen of <em>CATAdpOpen</em> class to 
open Rep ref.</p>
<pre class="code">...
     const char* iStrPLMType_RepRef =iArgv[7];
     CATIType* opiCATIType_RepRef = NULL;

         hr = ::CAAAdpGetPLMObjectFromIdSetAndFromType(ListAttributeName_RepRef,ListAttributeValue_RepRef, 
                                                       iStrPLMType_RepRef,
                                                       opiCATIType_RepRef, IdentificationlAttributeSet_RepRef,
                                                       opiIDComp_RepRef);
...
    hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp_RepRef,IID_CATICkeObject, (void**) &amp;piCkeObjectOnPLMComp);
...</pre>
<p>The article &quot;Querying, Expanding &amp; Opening PLM Object&quot; [<a href="#References">4</a>] 
provides the details of the CAA recommended routines for PLM Product Ref and Rep 
Ref retrieval.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Looking for its PLM Attributes</h3>
<p>We initially retrieve a list of Mandatory, Identification and Optional Attributes 
by three calls to a knowledge API.</p>
<pre class="code">...
CATListValCATAttributeInfos ListOfAttributes;
hr = C<strong>ATCkePLMNavPublicServices::ListAttributesFromObject</strong>(CATCkePLMTypeAttrServices::Mandatory,
	                                                  piCkeObjectOnPLMComp,
					                  ListOfAttributes,
					                  bReadWrite); 		
...</pre>
<p>The <code>ListAttributesFromObject</code> method of the <em>CATCkePLMNavPublicServices</em> 
class is a knowledge API to retrieve the PLM Attribute list associated the opened 
PLM component.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Displaying PLM Attribute Information</h3>
<p>What follows is a call to DisplayPLMCompProperties, a global routine which outputs 
each attribute info and its value of the input PLM Component.</p>
<pre class="code">HRESULT DisplayPLMCompProperties(<strong>CATICkeObject</strong>* piCkeInstance,const CATListValCATAttributeInfos &amp;iListOfAttributes,int iAttrType)
 {
   int <strong>iSizeList</strong> = <strong>iListOfAttributes.Size</strong>();
   for (int i=1; i&lt;=iSizeList; i++)
   {
      CATAttributeInfos <strong>AttrInfo</strong> = <strong>iListOfAttributes[i]</strong>;
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step31"></a>Retrieving the Attribute Name</h4>
<p>CATAttributeInfos object returns the name of the attribute with a call to GetName.</p>
<pre class="code">...
CATUnicodeString attrName;
attrName = AttrInfo.<strong>Name</strong>();
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step32"></a>Retrieve the Attribute Value</h4>
<pre class="code">CATUnicodeString stringValue;
CATCkeObjectAttrReadServices::GetValueAsString(piCkeInstance,attrName,stringValue);
...</pre>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step33"></a>Retrieving the Attribute Type</h4>
<p>CATAttributeInfos object retrieved earlier contains information about the type 
of an attribute.</p>
<pre class="code"><strong>CATIType_var</strong>spAttrType = AttrInfo<strong>.Type()</strong>;
CATUnicodeString attrname, attrusername;
attrname = spAttrType-&gt;<strong>Name()</strong>;
attrusername = spAttrType-&gt;<strong>UserName()</strong>;
...</pre>
<p>The attribute type has a <strong>NLS</strong> name associated with it, which 
can be easily retrieved through a <code>CATIType::UserName</code> call.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="Step34"></a>Checking Whether the Attribute is Mandatory</h4>
<p>Attributes can be checked for, if they are mandatory. These are the attributes 
which should be necessarily valuated, a pre-requisite for the component creation.</p>
<pre class="code">
hr = AttrInfo.IsWritable();
...
</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstListingProperties use case ends by simply closing the PLM session. 
Since all PS use cases necessarily conclude by closing the PLM session, we have 
a dedicated article on this topic viz. &quot;Connecting to V6 Server&quot; [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();
</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case primarily seeks the attribute-value set for the three fundamental 
attribute types, associated with a PLM component.</p>
<p>The three fundamental attribute types are <strong>Mandatory</strong>, <strong>
Identification</strong>, and <strong>Optional</strong>.</p>
<p>The <strong>mandatory attributes</strong> are essentially to be valuated, this 
being the most important pre-requisite for any PLM component creation. The
<strong>Identification attribute</strong> is necessary for uniquely identifying 
a PLM component and thus querying it from a database. The <strong>Optional attributes</strong> 
are those associated with a PLM component, but the valuation of these is left to 
the discretion of the user.</p>
<p>User has a choice to seek the properties of the Root Ref, Rep Ref, the first 
First Instance or the first Rep Inst beneath Root.</p>
<p>The <em>CATICkeOpbect</em>, <em>CATAttributeInfos</em>, and <em>CATIValue</em> 
APIs in co-ordination enable us seek all relevant information associated with attributes 
as well as their values.</p>
<script type="text/javascript">insertLinkToTop();
</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Object</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Aug 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Nov 2010]</td>
		<td>Document updated to introduce CATCkePLMNavPublicServices</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
