<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Product Reference Interactively</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Product Reference Interactively</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article demonstrates the creation of a Product Reference interactively. 
		It is done through an add-in to the Product workshop in CATIA, a state chart 
		command &amp; a dialog box. This use case primarily deals only with the 
		product object creation while explanations about other domains like dialog 
		[<a href="#References">1</a>] , state command [<a href="#References">2</a>] &amp; 
		Addin [<a href="#References">3</a>] can be found by referring to the CAA 
		encyclopedia.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstInsertNewProduct Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstInsertNewProduct Do</a></li>
					<li><a href="#How">How to Launch CAAPstInsertNewProduct</a></li>
					<li><a href="#Where">Where to Find the CAAPstInsertNewProduct 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case details the steps involved in creating PLM Product References interactively.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstInsertNewProduct Use Case</h2>
<p>CAAPstInsertNewProduct is a use case of the CAAProductStructure.edu framework 
that mainly illustrates ProductStructureUseItf frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstInsertNewProduct Do</h3>
<p>The CAAPstInsertNewProduct use case is fundamentally an interactive command for 
creating a new Product Reference and instantiating it under a selected Product Reference.</p>
<p>This command is added to the &quot;<b>CAA Product Modeler </b><strong>Creation</strong>&quot; 
toolbar through an add-in of VPM Physical Editor.</p>
<ul>
	<li>The &quot;<strong>CAA Product Modeler Creation</strong>&quot; toolbar is 
		as seen in the <a href="#Fig1">Fig.1</a>below &amp; the icon
		<img alt="Insert New Instance Icon" src="images/CAAPstInsertNewProductIcon.png"/> 
		represents the &quot;<b>Insert New Instance</b>&quot; command.<table border="1">
			<caption><a name="Fig1">Fig.1</a> CAA Product Modeler Creation Toolbar</caption>
			<tr>
				<td>
				<img alt="CAA Product Modeler Creation Toolbar" src="images/CAAPstProductModelCreateToolbar.png"/></td>
			</tr>
		</table>
	</li>
	<li>On activating
		<img alt="Insert New Instance Icon" src="images/CAAPstInsertNewProductIcon.png"/>, 
		the dialog box titled &quot;<b>Insert New Inst under selected Ref</b>&quot; 
		appears, as shown in <a href="#Fig2">Fig.2</a>. The input model is basic: 
		a Root with a child instance beneath it.
		<table>
			<caption><a name="Fig2"></a>Fig.2: The Input Model with the Dialog Box</caption>
			<tr>
				<td>
				<img alt="The Input Model with the Dialog Box" src="images/CAAPstInsertNewProductDlg.png"/></td>
			</tr>
		</table>
	</li>
	<li>On selecting the Root, the dialog box is updated to displays its identifier 
		set in the first non editable editor.
		<table>
			<caption>Fig.3: After the Root Product Selection</caption>
			<tr>
				<td>
				<img alt="After the Root Product Selection" src="images/CAAPstInsertNewProductDlgAfterRootSelection.png"/></td>
			</tr>
		</table>
		<p>You can observe that the first editor contains the identifier set attributes 
		values : we have used the interface <em>CATIPLMIdentifierSet</em> to display 
		the identifier set. Note that the &quot;<b>Insert New Instance</b>&quot; 
		is now pushable.</p>
	</li>
	<li>On pushing the &quot;<b>Insert New Instance</b>&quot; a new reference is 
		created , and then the command instantiates this new reference beneath Root, 
		as the <a href="#Fig4">Fig.4</a>, below indicates.
		<table>
			<caption><a name="Fig4">Fig. 4</a>: Root Reference after Inserting an 
			Instance under It and the Updated Dialog Box</caption>
			<tr>
				<td>
				<img alt="Root Reference" src="images/CAAPstInsertNewProductDlgCreation1.png"/></td>
			</tr>
		</table>
		<p>On the picture just above you can see in the spec tree the newly created 
		reference (<code>Product31222</code>) and its instance (<code>Product31222.1</code>) 
		aggregated by the Root. In the &quot;<strong>Inserted New Reference</strong>&quot; 
		editor, you have the identifier set attributes values (<em>CATIPLMIdentifierSet</em>). 
		In the &quot;<strong>Inserted New Instance</strong>&quot; editor we have 
		used the <em>CATIAlias</em> interface.</p>
	</li>
	<li>The user also has the liberty to select the child instance instead of the 
		Root. In this case the use case retrieves the Reference of the selected 
		child instance, creates a new Product reference, and finally instantiates 
		it under the reference of the selected child instance.<table border="0">
			<caption><a name="Fig5"></a>Fig. 5: A Newly Created Product Reference 
			Instantiated under a Child Instance</caption>
			<tr>
				<td>
				<img alt="Newly Created Product Reference" src="images/CAAPstInsertNewProductDlgCreation2.png"/>
				</td>
			</tr>
		</table>
		<p>Here the selected instance is <code>CAAPstInsertNewProduct_Child.1</code> 
		whose the reference is <code>CAAPstInsertNewProduct_Child</code>. You can 
		observe in the first editor the identifier set of this reference. Here the 
		displayed string does not contain the version (compare with [<a name="Fig.4">Fig.4</a>]) 
		because the <code>CAAPstInsertNewProduct_Child </code>is still not saved.</p>
		<p>The new reference is (<code>Product31223</code>) and its instance (<code>Product31223.1</code>). 
		This instance is aggregated by <code>CAAPstInsertNewProduct_Child </code>
		as you can see in the spec tree. The editors below the &quot;<strong>Insert 
		New Instance</strong>&quot; button are updated too.</p>
	</li>
	<li><a href="#Fig6">Fig.6</a> depicts the output model with a clear reference 
		to the newly created Product Reference &amp; their instances.
		<table>
			<caption><a name="Fig6"></a>Fig. 6: The Output Model</caption>
			<tr>
				<td>
				<img alt="The Output Model" src="images/CAAPstInsertNewProduct_OutputModel.jpg"/></td>
			</tr>
		</table>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="How"></a>How to Launch CAAPstInsertNewProduct</h2>
<p>To launch CAAPstInsertNewProduct, you will need to set up the build time environment, 
then compile CAAPstInsertNewProduct along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">4</a>].</p>
<p>Launch CATIA, when the application is ready:</p>
<ul>
	<li><b>Connect</b> to the database.</li>
	<li>Select your <b>environment</b>.</li>
	<li><b>Create</b> a simple Product Model as seen in [<a href="#Fig2">Fig.2</a>].</li>
	<li>On the <b>Tools</b> menu click <b>Customize</b> and check that the <b>CAA 
		PLM Product Model Commands</b> (See <a href="#Addin">Add-in Access</a>) 
		is existing ,as shown in <a href="#Fig1">Fig.1</a> above. User can set the 
		visibility of the created toolbar in the <b>View</b>-&gt;<b>Toolbars</b> 
		option.</li>
</ul>
<p>The <a href="#What">What Does CAAPstInsertNewProduct Do</a> section provides 
further details on the steps ahead.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Addin"></a>Add-in Access</h3>
<p>The Product Structure add in to the Product workshop within CATIA, is available 
thanks to a data extension of the <code><b>CAAPstProductWksAddin</b></code> component. 
This necessitates the following entries in the .<code><b>dico</b></code> file.</p>
<pre class="code">...
#CAA# CAAPstProductWksAddin CATIWorkbenchAddin libCAAPstProductWksAddin
#CAA# CAAPstProductWksAddin CATIPRDWorkshopAddin libCAAPstProductWksAddin
...</pre>
<p>Before launching CATIA, remove the #CAA# characters in the CAAProductStructure.edu.dico 
in front of the above lines. These primarily indicate that the add-in is fundamentally 
a <code><b><i>CATIWorkbenchAddin</i></b></code> and a <em>CATIPrdWorkshopAddin</em> 
implementation residing in the CAAPstProductWksAddin shared lib. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstInsertNewProduct Code</h3>
<p>The CAAPstInsertNewProduct use case is made of several classes/files located 
in the CAAPstCommands.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstCommands.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<ul>
	<li>CAAPstInsertNewProductDlg.cpp is the dialog class implementation to display 
		the retrieved information of the PLM components involved.</li>
	<li>CAAPstInsertNewProductCmd.cpp is the state command implementation, the heart 
		of this use case. This state command is primarily responsible for running 
		this use case through its various stages, beginning with the selection of 
		the Root Reference until the final state where a newly created instance 
		is inserted under it.</li>
</ul>
<p>The use case pre-reqs an addin module too:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstProductWksAddin.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">4</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are five logical steps in CAAPstInsertNewProduct use case:</p>
<ol>
	<li><a href="#Step1">Enabling Root Reference or Product Instance Selection</a></li>
	<li><a href="#Step2">Retrieving the PLM Reference which Will Aggregate the New Child Instance</a></li>
	<li><a href="#Step3">Creating a PLM Reference with Implicit API</a></li>
	<li><a href="#Step4">Instantiating the New PLM Reference</a></li>
	<li><a href="#Step5">Updating the Editor's Contents</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Enabling Root Reference or Product Instance Selection</h3>
<p>The objective here is to primarily create a dialog agent [<a href="#References">2</a>] 
which restricts the user to select either only the Root Reference or a child Instance 
beneath it in a Product model.</p>
<pre class="code">... 
<b>CATPathElementAgent* _daPathEltPLMRefOrInst;</b>
_daPathEltPLMRefOrInst= new <b>CATPathElementAgent</b>(&quot;SelPLMRefOrInst&quot;);
_daPathEltPLMRefOrInst-&gt;<b>AddElementType</b>(IID_CATIPLMNavOccurrence);
...</pre>
<p>Here is an extract of the state command, the <em>CAAPstInsertNewProductCmd</em> 
class.</p>
<p>Here the dialog agent, <code>_daPathEltPLMRefOrInst</code>, is a <code>CATPathElementAgent</code> 
class [<a href="#References">5</a>] instance enabling to select object in the specification 
tree or in a viewer.</p>
<p>The <code>CATPathElementAgent::AddElementType</code> method enables only objects 
of pre-determined types to be selected. This type could be specified by passing 
it as an argument to this routine.</p>
<p>In this case, we pass <code>IID_CATIPLMNavOccurrence</code> to the <code>AddElementType</code> 
method thus restricting the user to select only those entities in a Product model 
which implement the <code>IID_CATIPLMNavOccurrence</code> Interface. Interactively, 
do not forget that it is the occurrence model [<a href="#6">6</a>] which is displayed. 
Using <em>CATIPLMNavOccurrence</em>, you are sure to only select occurences of reference 
or instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Retrieving the PLM Reference which Will Aggregate the New Child Instance</h3>
<p>The first step is to retrieve the entity selected by the user from the dialog 
agent.</p>
<pre class="code">...
<b>CATPathElement * pathmodel = _daPathEltPLMRefOrInst-&gt;GetValue();</b>
CATBaseUnknown * pObj = NULL ;
if ( ( NULL != pathmodel) &amp;&amp; (pathmodel-&gt;GetSize()&gt; 0) )
{
   <b>pObj = (*pathmodel)[pathmodel-&gt;GetSize()-1];</b>
...</pre>
<p>The <code>CATPathElementAgent::GetValue</code> retrieves the entity selected, 
in the previous step. This is returned as a <em>CATPathElement</em> object which 
holds the selected entity with all the instances along its path, beginning with 
Root.</p>
<p>Since we are interested only in the last element of this list, it is retrieved 
as a <code>CATBaseUnknown</code> *<b><code> </code></b>type.</p>
<p>This selected element is an occurrence - implementing <i>CATIPLMNavOccurrence</i> 
- (of a reference (the root) or an instance). The following code retrieves the reference 
of the selected occurence.</p>
<pre class="code">...
// The reference where the new instance (of reference) will be aggregated
<b>CATIPLMProducts</b>* pPLMProdOnSelEnt = NULL;

// retrieve the reference related to the selected occurrence
<b>CATIPLMNavOccurrence</b> *pNavOccurenceObj = NULL ;
HRESULT rc = pObj-&gt;QueryInterface(IID_CATIPLMNavOccurrence, (void**) &amp;pNavOccurenceObj);
if ( SUCCEEDED(rc) )
{
   CATIPLMNavReference *pReference = NULL ;
   pNavOccurenceObj-&gt;<b>GetRelatedReference</b>(pReference);
   if ( NULL != pReference )
   {
      pReference-&gt;QueryInterface(IID_CATIPLMProducts, (void**) &amp;pPLMProdOnSelEnt);
  ...</pre>
<p>The <code>GetRelatedMethod</code> of the <i>CATIPLMNavOccurrence</i> interface 
retrieves the reference (in the reference/instance model) associated with the selected 
occurrence. When you select the root , the occurrence represents a reference, so 
the method immediately retrieves the root reference, when you select an instance, 
the occurrence represents a instance, so the method retrieves the reference which 
has been instantiated to create the instance associated with the occurrence.</p>
<p>Then we can update the dialog box.</p>
<pre class="code">...
if ( NULL != pPLMProdOnSelEnt )
{
   _pCAAPstInsertNewProductCmdDlg-&gt;<b>DisplaySelectedProdRef</b>(pPLMProdOnSelEnt);
}
...</pre>
<p>The <b>Identifier set</b> attribute value of either the Root reference or the 
reference retrieved from the selected instance is displayed in the dialog box by 
invoking the <code>CAAPstInsertNewProductDlg::DisplaySelectedProdRef</code> method.</p>
<p><code>_pCAAPstInsertNewProductCmdDlg</code> is our dialog object ( <code>CAAPstInsertNewProductDlg</code> 
instance), a data member of the <code>CAAPstInsertNewProductCmd</code> class.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating a PLM Reference with Implicit API</h3>
<p>The first step consists of retrieving a pointer to the factory enabling the creation 
of a PLM Product Reference.</p>
<pre class="code">...
<strong>CATIPrdReferenceFactory </strong>* pIPrdFactory = NULL ;
HRESULT rc = <b>CATPrdFactory</b>::<b>CreatePrdFactory</b>(IID_CATIPrdReferenceFactory,(void**) &amp;pIPrdFactory);
...</pre>
<p>The object <em>CATPrdFactory</em> is a factory of factories for Product: it can 
create and return an interface on the requested factory. Here we need the one to 
create PLM product Reference. This factory is handled with the <em>CATIPrdReferenceFactory</em> 
interface.</p>
<pre class="code">...
CATIType_var spRefType;
CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
CATListValCATICkeParm_var EmptyListAttr;
rc = pIPrdFactory-&gt;<strong>CreatePrdReference</strong>(spRefType, EmptyListAttr, pPLMProductsOnNewRef, NULL);		
...</pre>
<p>The Product Reference is created with the <em>CATIPrdReferenceFactory</em> interface. 
The <code>CreatePrdReference</code> method of this interface creates a new PLM Product 
Reference whose functional type is VPMReference.</p>
<ul>
	<li>The first argument is a smart pointer to <em>CATIType</em> for this functional 
		type VPMReference.</li>
	<li>The second one is an empty list since the functional type does not require 
		additional attributes. The method calling the Init Business logic.</li>
	<li>The third one is <code>pPLMProductsOnNewRef</code> is a <em>CATIPLMProducts</em> 
		interface pointer on the newly created PLM Product Reference.</li>
	<li>The last one is the environment, the value is NULL, the method will use 
		the current one.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Instantiating the New PLM Reference</h3>
<p>Here we instantiate the newly created Product Reference under the Root Reference 
or reference of a child instance, previously selected by the user interactively 
either from the spec tree or the viewer.</p>
<pre class="code">...
CATBaseUnknown* pBUForNewInstAlias = NULL;
_pCurrentSelRef-&gt;<strong>AddProduct</strong>(pPLMProductsOnNewRef,pBUForNewInstAlias,IID_CATIAlias);
...</pre>
<p>The selected Reference of the type <code><i>CATIPLMProducts</i></code>* invokes 
the <code>AddProduct</code> api to instantiate the newly created Reference beneath 
it.</p>
<p>The <em>CATIAlias</em> interface pointer of the newly created child instance, 
enables us retrieve its <b>external name</b> with a call to its <code>GetAlias</code> 
method for display. See further.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Updating the Editor's Contents</h3>
<p>The identifying set attribute values of the selected Product Reference and the 
newly created Product Reference are displayed in the dialog box. For the Product 
Instance, its alias (external name) is output in the dialog box.</p>
<pre class="code">
...
<b>_pCurrentSelRef = ipPLMProdOnSelEnt;</b>
<b>...</b>
<strong>CATIPLMIdentifierSet</strong>* pIdentifierSetOnCurrentRef = NULL;
HRESULT rc = _pCurrentSelRef-&gt;QueryInterface(IID_CATIPLMIdentifierSet,(void**)&amp;pIdentifierSetOnCurrentRef);
if(SUCCEEDED(rc) &amp;&amp; (NULL != pIdentifierSetOnCurrentRef))
{
   CATUnicodeString IdentifierSet;
<b>   </b>pIdentifierSetOnCurrentRef-&gt;GetIdentifierSet(IdentifierSet);
   _pSelRefEditor-&gt;SetVisibleTextWidth(IdentifierSet.GetLengthInChar());
   _pSelRefEditor-&gt;SetText(IdentifierSet);
<b>...</b>
</pre>
<p>The Product References implement several interfaces, of which the <code><i>CATIPLMIdentifierSet</i></code> 
interface provides an api viz. <code>GetIdentifierSet</code> which returns the identity 
of the Reference in the form of a <code>CATUnicodeString</code>.</p>
<p>The <code><b>CATDlgEditor</b></code> object (<b>_pSelRefEditor</b>) is an element 
of the dialog box which primarily displays information. The methods of this editor 
enable one to set the visible text width based on the length of the identifier string. 
The next step is to set the text of the editor as the identifier string.</p>
<p>We output the identity information for the new Product Instance.</p>
<pre class="code">...
<strong>CATIAlias</strong>* poAliasForNewInst = (CATIAlias*)pBUForNewInstAlias; 
CATUnicodeString NewInstName;
if (NULL != poAliasForNewInst) 
{
   NewInstName = poAliasForNewInst-&gt;GetAlias(); 
}  
_pInsertedInstEditor-&gt;SetVisibleTextWidth(NewInstName.GetLengthInChar());
_pInsertedInstEditor-&gt;SetText(NewInstName);
...</pre>
<p>In tye previous step we have instantiated 
a new Product instance as a <i>CATIAlias</i>* type.</p>
<p>The <code>CATIAlias::GetAlias</code> returns a <em>CATUnicodeString</em> 
which is output through the dialog box, in exactly the similar manner as in the previous step
for the Product References.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use cases has demonstrated the invocation of the <em>CATIPrdReferenceFactory</em> 
interface for creation of Product References.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADlgDialog/CAADlgTaOverview.htm">
		Dialog Overview</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegTaGettingStarted.htm">
		Getting Started with State Dialog Commands</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAAfrApplicationFrame/CAAAfrUcSampleAddin.htm">
		Creating an Add-in</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAADegDialogEngine/CAADegUcSampleSelection.htm">
		Managing Selection</a></td>
	</tr>
	<tr>
		<td>[<a name="6">6</a>]</td>
		<td><a href="CAAPstTaProductModels.htm">Understanding Product Models </a>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Jun 2006]</td>
		<td>Document created</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Sep 2008]</td>
		<td>Document updated due to occurrence</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
