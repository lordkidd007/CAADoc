<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Browsing a Product Model</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Browsing a Product Model</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAPstBrowsingProductModel use case. This 
		use case explains how to navigate an existing Product Model using the Generic 
		APIs of the PLM Core Modeler. Generic APIs are those belonging to the CATPLMComponentInterfaces 
		framework with which one can browse a generic PLM Data Model. Thus PLM References, 
		PLM Instances, PLM Representation References and PLM Representation Instances 
		are those browsed in a Product Model with those APIs. We have another Use 
		Case &quot;Browsing a PLM Data Model&quot; [<a href="#References">5</a>] 
		which illustrates the browsing for a generic PLM Data Model.</p>
		<p>Its important to note that Publications and Connections, though PLM Core 
		entities, cannot be browsed in a Product Model with generic APIs. APIs dedicated 
		to individual Modelers browse it for Publications and Connections. A dedicated 
		use case &quot;Browsing Publications in a Product Model&quot; [<a href="#References">5</a>] 
		exclusively deals with the subject of browsing it for Publications.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstBrowsingProductModel Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstBrowsingProductModel 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstBrowsingProductModel</a></li>
					<li><a href="#Where">Where to Find the CAAPstBrowsingProductModel 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to familiarize the user with the APIs 
meant for browsing a Product Model. Listed below are the topics that a user gets 
an introduction to, through this use case.</p>
<ul>
	<li>Opening and Loading a Product Model in various modes based on what components 
		need to be retrieved/browsed.</li>
	<li>Various generic APIs of the CATPLMComponentInterfaces framework to browse 
		the core entities of a PLM Data model.</li>
	<li>Retrieve and Display all the public attributes of various entities within 
		a PLM Data model.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstBrowsingProductModel Use Case</h2>
<p>CAAPstBrowsingProductModel is a use case of the CAAProductStructure.edu framework 
that illustrates the CATPLMComponentInterfaces frameworks capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstBrowsingProductModel Do</h3>
<p>The input PLM Data for the Use Case is a Product Model.</p>
<p>The use case, loads the Product Model, as the one shown in the fig below [<a href="#Fig1">Fig. 
1</a>] in an &quot;Authoring&quot; mode. In this mode the Root Reference, its Child 
PLM Instances and their PLM References are loaded in session. These child PLM References 
are loaded with their associated Rep Instances and Publications.</p>
<p>While in a &quot;Navigation&quot; mode only the PLM References and PLM Instances 
are loaded in session.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1 Input Product Model</caption>
	<tr>
		<td><img alt="Input Product Model" src="images/CAAPstBrowse_Fig2.jpg"/></td>
	</tr>
</table>
<p>The CAAPstBrowsingProductModel_Root aggregates:</p>
<ul>
	<li>CAAPstBrowsingProductModel_Child.1, an instance of PLM Reference CAAPstBrowsingProductModel_Child
		<p>PLM Reference CAAPstBrowsingProductModel_Child aggregates</p>
		<ul>
			<li>ChildRepresentation.1, an instance of PLM Representation Reference 
				namely ChildRepresentation</li>
		</ul>
	</li>
	<li>CAAPstBrowsingProductModel_Representation.1, an instance of PLM Rep Ref 
		namely CAAPstBrowsingProductModel_Representation</li>
</ul>
<p>The Use Case execution results in an output as seen below for the case where 
the Root Reference is loaded in &quot;Authoring Mode&quot;. The Rep Inst/ Rep Refs 
associated with the input model are displayed in the output below.</p>
<pre class="code"><strong>&lt;PLM_ExternalID=CAAPstBrowsingProductModel_Root&gt;</strong>
  &lt;PLM_ExternalID=CAAPstBrowsingProductModel_Child.1&gt;
    <strong>&lt;PLM_ExternalID=CAAPstBrowsingProductModel_Child&gt;</strong>
      <strong>&lt;PLM_ExternalID=ChildRepresentation&gt;</strong>
        <strong>The Representation Reference is of CATPart type</strong>
  &lt;PLM_ExternalID=CAAPstBrowsingProductModel_Representation.1&gt;
    <strong>&lt;PLM_ExternalID=CAAPstBrowsingProductModel_Representation&gt;</strong>
       <strong>The Representation Reference is of CATPart type</strong></pre>
<p>While if the input model is loaded in &quot;Navigation Mode&quot;, the Representation 
References/Instances, will not be loaded in session and hence are not seen in the 
output below.</p>
<pre class="code"><strong>&lt;PLM_ExternalID=CAAPstBrowsingProductModel_Root&gt;</strong>
  &lt;PLM_ExternalID=CAAPstBrowsingProductModel_Child.1&gt;
  <strong>&lt;PLM_ExternalID=CAAPstBrowsingProductModel_Child&gt;</strong></pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstBrowseProductModel</h3>
<p>To launch CAAPstBrowsingProductModel, you will need to set up the build time 
environment, then compile CAAPstBrowsingProductModel along with its prerequisites, 
set up the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstBrowsingProductModel Repository Server User Password 
SecurityCtx PLM_ExternalID V_version TypeOfBrowsing AllAttributes PLMType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role. Organization. Project). 
		Choose Role as Reviewer (as the use case does not modify the PLM Data)
		</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		value of the input model</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference</td>
	</tr>
	<tr>
		<th>TypeOfBrowsing</th>
		<td>1 = Part Instances only (Base Structure) loaded, 2 = Base Structure 
		+ Rep loaded,
		<p><strong>3** = Base Structure + Rep + Publication loaded</strong></p>
		</td>
	</tr>
	<tr>
		<th>AllAttributes</th>
		<td>1 =Yes -All Public Attributes , 0=No -only PLM_ExternalID</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
</table>
<p>* The input model is retrieved by importing the CAAPstBrowsingProductModel_BrowsePublications.3dxml 
file from the CAAProductStructure.edu fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstBrowsingProductModel_BrowsePublications.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li><code><strong>PLM_ExternalID</strong></code>: <code>CAAPstBrowsingProductModel_Root</code></li>
	<li><code><strong>Version</strong></code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The PLM_ExternalID attribute value of the imported model is typically of the 
format &quot;YourPrefix + CAAPstBrowsingProductModel_Root&quot;, where YourPrefix 
is the string provided as prefix, while importing a 3D XML file to CATIA. Thus the 
Product Model after an import is seen as in the [<a href="#Fig1">Fig. 1</a>] above, 
except that each of those elements which includes the Root Reference, the Product 
Instances under it &amp; the associated Rep Instances and Publications, have a prefix 
associated with them.</p>
<p>** &quot;<strong>Type of Browsing</strong>&quot; when set to 3 browses the Product Model 
for the Publications, as well. The code which browses the Product Model for the 
Publications are covered in the use case &quot;Browsing Publications in a Product 
Model&quot; [<a href="#References">4</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstBrowsingProductModel Code</h3>
<p>The CAAPstBrowsingProductModel use case is located in the CAAPstBrowsingProductModel.m 
module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstBrowsingProductModel.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstBrowsingProductModel:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the Root Product</a></li>
	<li><a href="#Step2">PrintPLMComponent Global Service</a></li>
	<li><a href="#Step3">The BrowseReference Global Routine</a></li>
	<li><a href="#Step4">Seeking the First-Level Instances under the Input Root 
		Reference</a></li>
	<li><a href="#Step5">Browsing for Representation Instances and Associated Representation 
		References</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstBrowsingProductModel use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session &amp; connect to Repository with the Reviewer 
Role (since we ain't modifying PLM data). There are other parameters as well, details 
of which can be found in the &quot;Connecting to V6 Server&quot; use case 
article [<a href="#References">2</a>. This article primarily deals with opening 
and closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Root Product</h3>
<p>We load the input model, either in &quot;Authoring Mode&quot; or in &quot;Navigation 
Mode&quot;, based on the user choice.</p>
<pre class="code">...
  <strong>CATIPLMNavReference</strong>* piNavRefOnRoot = NULL;
  <strong>CATOmbLifeCycleRootsBag</strong> Bag;
  <strong>CATAdpOpener</strong> opener(Bag);
  hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;piNavRefOnRoot);
...</pre>
<p>The &quot;Query, Expanding and Opening PLM Object&quot; Use Case [<a href="#References">3</a>] 
explains the APIs which open/load various PLM Components in session in &quot;Authoring 
mode&quot; or &quot;Navigation mode&quot; based on our choice. We retrieve the
<em>CATIPLMNavReference</em> Interface pointer (<code>piNavRefOnRoot</code>) on the input model, 
loaded in the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>PrintPLMComponent Global Routine</h3>
<p>This routine prints the browsed entities of a Product model, suitably indented 
so that the output resembles an actual product model seen within a spec tree in 
CATIA.</p>
<pre class="code">...
HRESULT <strong>PrintPLMComponent</strong>(CATIPLMNavEntity* ipiNavEntity,
                          CATBoolean iAllAtributes,
                          int iDepth)
{
  CATListOfCATUnicodeString ioAttributeNameList, oAttributeValueList;
  if ( FALSE == iAllAtributes )
    <strong>ioAttributeNameList.Append(&quot;PLM_ExternalID&quot;)</strong>;

  HRESULT hr = <strong>ipiNavEntity-&gt;GetPublicAttributes</strong>(ioAttributeNameList,
                                                 oAttributeValueList);

  for ( int i=1; i &lt;= ioAttributeNameList.Size();i++)
  {
    for (int j=0; j&lt;iDepth; j++)
      ...
    }	    
  }
 return S_OK;
}</pre>
<p>The values of those attributes, included in the list of attribute names input 
to the <code>CATIPLMNavEntity::GetPublicAttributes</code> routine are displayed 
in the output Product Model.</p>
<p>Thus, if the list of Attribute Names is empty, values of all attributes associated 
with the PLM Entity are printed. While if the user intends to display only a set 
of specific attributes, only those are included in the list of Attribute Names.</p>
<p>Here we have included the PLM_ExternalID attribute in the list of attribute names 
and hence you'll find it displayed in the output.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>The BrowseReference Global Routine</h3>
<p><code>BrowseReference</code> is the routine which navigates down the Product 
Model beginning with the Root Reference input. It thus displays the whole product 
hierarchy of the input PLM Component.</p>
<pre class="code">int main(int iArgc, char *iArgv[])
{
  CATBoolean iAllAtributes = FALSE;
  const char* AllAttributes = iArgv[9];
  if (1==atoi(AllAttributes))
    iAllAtributes = TRUE;
  hr = <strong>BrowseReference</strong>(<strong>piNavRefOnRoot</strong>,atoi(LoadingMode),iAllAttributes,0);		
}</pre>
<p>The <code>BrowseReference</code> routine takes four arguments:</p>
<ul>
	<li><em>CATIPLMNavReference</em> type, the Product Reference from where the 
		navigation begins, down the hierarchy</li>
	<li>int TypeOfBrowsing. ( 1 = Only Product Instances, 2 = Base Model + Rep Inst, 
		3 = Base Model + Rep Inst + Publications)</li>
	<li>CATBoolean iAllAttributes, ( FALSE = Only PLM_ExternalID , TRUE = All Public 
		Attributes) are displayed</li>
	<li>int iDepth, defines the offset of display, to simulate a product hierarchy 
		in the output</li>
</ul>
<p>The first call to <code>BrowseReference</code> in main occurs with the input 
PLM Component as an argument. The <em>CATIPLMNavReference</em> Interface pointer on 
the input component loaded in session, was retrieved in an earlier step (<code>piNavRefOnRoot</code>) 
[<a href="#Step1">Open the Root Product</a>].</p>
<p>The <code>BrowseReference</code> global routine has fundamentally three steps:</p>
<ul>
	<li><a href="#Step4">Seeking the First-Level Instances under the Input Root 
		Reference</a>:
		<ul>
			<li>Seek the PLM Reference of each of those First Level Instances.</li>
			<li>Make a recursive call to <code>BrowseReference</code>.</li>
		</ul>
	</li>
	<li><a href="#Step5">Browsing for Representation Instances and Associated Representation 
		References</a>.</li>
	<li>Seek the Publications under the input PLM Reference.</li>
</ul>
<p>The first two steps fall within the scope of this use case, while the last one 
where we browse for the Publications within a Product Model is included in another 
use case namely. &quot;Browsing Publications in a Product Model&quot; [<a href="#References">4</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Seeking the First-Level Instances under the Input Root Reference</h3>
<p>The First-Instances under the input Root Reference are retrieved and displayed, 
at the beginning of the BrowseReference routine.</p>
<pre class="code">...
  CATListPtrCATIPLMNavEntity childrenList;
  <strong>CATPLMCoreType</strong> coreType = <strong>PLMCoreInstance</strong>;
  hr = <strong>ipiNavRef-&gt;ListChildren</strong>(childrenList,1,&amp;coreType);
...</pre>
<p>The <code>CATIPLMNavReference::ListChildren</code> API enables us retrieve all 
children beneath an input PLM Reference of a specific PLM Core type. Here we set 
the PLMCoreType to PLMCoreInstance and thus seek all the First-Instances under input 
Reference.</p>
<p>Each Child Instance has a PLM Reference associated with it. A recursive call 
to BrowseReference with the child Reference navigates the Product model deeper down 
in the hierarchy, until we reach its last node.</p>
<pre class="code">...
  for (int j=1; j&lt;=childrenList.Size(); j++)
  {
   <strong>   CATIPLMNavInstance*</strong> piNavInst = NULL;
      hr = <strong>childrenList[j]-&gt;QueryInterface</strong>(<strong>IID_CATIPLMNavInstance</strong>,
                                           (void **)&amp;piNavInst);

      <strong>CATIPLMNavReference*</strong> piNavRef1 = NULL;
      hr = <strong>piNavInst-&gt;GetReferenceInstanceOf</strong>(piNavRef1);

      hr = <strong>BrowseReference</strong>(<strong>piNavRef1</strong>,iTypeOfBrowsing,iAllAtributes, iDepth+1+1);
  }
...</pre>
<p>The <em>CATIPLMNavInstance</em> Interface implementation on a PLM Instance has 
the <code>GetReferenceInstanceOf</code> API which returns the PLM Reference associated 
with it.</p>
<p>The PLM Reference returned is sought as a <em>CATIPLMNavReference</em> Interface 
pointer (<code>piNavRef1</code>), with which we make a recursive call to the
<code>BrowseReference</code> routine.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Browsing for Representation Instances and Associated Representation 
References</h3>
<p>Further ahead in the <code>BrowseReference</code> routine, we seek all the Representation 
Instances and their Representation References associated with the PLM Reference.</p>
<pre class="code"> ...
  if ((iTypeOfBrowsing==2) | (iTypeOfBrowsing==3))
  {
    <strong>coreType = PLMCoreRepInstance</strong>;
    hr = <strong>ipiNavRef-&gt;ListChildren</strong>(childrenList,1,<strong>&amp;coreType</strong>);
    for (int j=1; j&lt;=childrenList.Size(); j++)
    {
      <strong>CATIPLMNavRepInstance*</strong> piNavRepInst = NULL;
      HRESULT hr = <strong>childrenList[j]-&gt;QueryInterface</strong>(<strong>IID_CATIPLMNavRepInstance</strong>,
                                                   (void **)<strong>&amp;piNavRepInst</strong>);

      <strong>CATIPLMNavRepReference</strong> *piNavRepRef2 = NULL;
      hr = <strong>piNavRepInst-&gt;GetRepReferenceInstanceOf</strong>(<strong>piNavRepRef2</strong>);
      ...
      <strong>CATIPsiRepresentationReference_var</strong> spPsiRepRef2 (piNavRepRef2 ) ;
      CATUnicodeString oDataType;
      hr = spPsiRepRef2-&gt;<strong>GetMainDataType</strong>(oDataType);
      ...
    }
  }
...</pre>
<p>This time, we set the CATPLMCoreType as PLMCoreRepInstance since we now retrieve 
all the children beneath the input PLM Reference, of type PLM Rep Instances.</p>
<p>The Representation Instances implement the <em>CATIPLMNavRepReference</em> Interface 
whose <code>GetRepReferenceInstanceOf</code> implementation returns the Representation 
Reference associated with this Rep Inst.</p>
<p>A call to the <code>CATIPsiRepresentationReference::GetMainDataType</code>
API enables us to retrieve the type of the main data associated with the Representation 
Reference. The main data could be of type <strong>CATPart</strong>, <strong>CATDrawing</strong> or
<strong>TechnologicalRepresentation</strong> etc.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstBrowsingProductModel use case ends by simply closing the PLM session. 
Since all Product Structure use cases necessarily conclude by closing the PLM session, 
we have a dedicated article on this topic namely. &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case navigates a Product Model and displays it in a format which exactly 
resembles a Product hierarchy as seen in the spec tree within CATIA.</p>
<p>The Product Model is browsed for the PLM References, PLM Instances, PLM Representation 
References and PLM Representation Instances with the CATPLMComponentInterfaces APIs, 
which are the generic APIs for browsing those entities in a PLM Data Model. A dedicated 
Use Case &quot;Browsing a PLM Data Model&quot; [<a href="#References">5</a>] deals 
exclusively on browsing a generic PLM Data model for the Core Entities.</p>
<p>The Publications in a Product Model are browsed with those APIs which are specific 
to the PRODUCT Modeler, discussed in  &quot;Browsing 
Publications in a Product Model&quot; [<a href="#References">4</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcBrowsingPublications.htm">Browsing Publications in 
		a Product Model</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAOmbPLMCompNavigation/CAACor2UcBrowsingPLMModel.htm">
		Browsing a PLM Data Model</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td valign="top">Version: <strong>1</strong> [Apr 2006]</td>
		<td valign="top">Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
